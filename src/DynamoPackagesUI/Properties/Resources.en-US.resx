<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="CannotDownloadPackageMessageBoxTitle" xml:space="preserve">
    <value>Cannot Download Package</value>
  </data>
  <data name="DownloadWarningMessageBoxTitle" xml:space="preserve">
    <value>Download Warning</value>
  </data>
  <data name="MessageAlreadyInstallDynamo" xml:space="preserve">
    <value>{0} has already installed {1}.

{0} will attempt to uninstall this package before installing.</value>
  </data>
  <data name="MessageConfirmToInstallPackage" xml:space="preserve">
    <value>Are you sure you want to install {0} {1} ?</value>
    <comment>Message box content</comment>
  </data>
  <data name="MessageConfirmToInstallPackageToFolder" xml:space="preserve">
    <value>Are you sure you want to install {0} {1} to {2} ?</value>
    <comment>Message box content</comment>
  </data>
  <data name="MessageConfirmToUninstallPackage" xml:space="preserve">
    <value>Are you sure you want to uninstall {0} ?  This will delete the packages root directory.

You can always redownload the package.</value>
  </data>
  <data name="MessageFailedToUninstall" xml:space="preserve">
    <value>{0} failed to uninstall the package.  You may need to delete the package's root directory manually.</value>
  </data>
  <data name="MessageFailToUninstallPackage" xml:space="preserve">
    <value>{0} failed to uninstall the package: {1}.  The package may need to be reinstalled manually.</value>
    <comment>Message box content</comment>
  </data>
  <data name="MessageNeedToRestart" xml:space="preserve">
    <value>{0} and its host application must restart before uninstall takes effect.</value>
  </data>
  <data name="MessagePackageContainPythonScript" xml:space="preserve">
    <value>The package or one of its dependencies contains Python scripts or binaries. Do you want to continue?</value>
  </data>
  <data name="MessagePackageNewerDynamo" xml:space="preserve">
    <value>The following packages use a newer version of {0} than you are currently using:

{1}

Do you want to continue?</value>
  </data>
  <data name="MessageUninstallToContinue" xml:space="preserve">
    <value>{0} needs to uninstall {1} to continue, but cannot as one of its types appears to be in use.  Try restarting {0}.</value>
  </data>
  <data name="MessageUninstallToContinue2" xml:space="preserve">
    <value>{2} has dependencies. To install {2}, {0} needs to first uninstall the following dependent packages: {1}. Restart {0} to complete the uninstall, then try and download {2} again.

Uninstall the following dependent packages: {1}?</value>
  </data>
  <data name="PackageDownloadConfirmMessageBoxTitle" xml:space="preserve">
    <value>Package Download Confirmation</value>
    <comment>Message box content</comment>
  </data>
  <data name="PackageDownloadMessageBoxTitle" xml:space="preserve">
    <value>Package Download</value>
  </data>
  <data name="PackageFolderNotAccessible" xml:space="preserve">
    <value>A problem occurred when trying to install the package. Dynamo is unable to obtain read/write access to
{0}</value>
  </data>
  <data name="PackageUseNewerDynamoMessageBoxTitle" xml:space="preserve">
    <value>Package Uses Newer Version of {0}!</value>
  </data>
  <data name="UnableToAccessPackageDirectory" xml:space="preserve">
    <value>Unable To Access Package Directory</value>
  </data>
  <data name="UninstallFailureMessageBoxTitle" xml:space="preserve">
    <value>Uninstall Failure</value>
  </data>
  <data name="UninstallingPackageMessageBoxTitle" xml:space="preserve">
    <value>Uninstalling Package</value>
  </data>
</root>