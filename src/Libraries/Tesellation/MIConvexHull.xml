<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MIConvexHull</name>
    </assembly>
    <members>
        <member name="F:MIConvexHull.Constants.DefaultPlaneDistanceTolerance">
            <summary>
            The default plane distance tolerance
            </summary>
        </member>
        <member name="F:MIConvexHull.Constants.StartingDeltaDotProductInSimplex">
            <summary>
            The starting delta dot product in simplex
            </summary>
        </member>
        <member name="F:MIConvexHull.Constants.ConnectorTableSize">
            <summary>
            The connector table size
            </summary>
        </member>
        <member name="T:MIConvexHull.SimpleList`1">
            <summary>
            A more lightweight alternative to List of T.
            On clear, only resets the count and does not clear the references
            =&gt; this works because of the ObjectManager.
            Includes a stack functionality.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:MIConvexHull.SimpleList`1.capacity">
            <summary>
            The capacity
            </summary>
        </member>
        <member name="F:MIConvexHull.SimpleList`1.Count">
            <summary>
            The count
            </summary>
        </member>
        <member name="F:MIConvexHull.SimpleList`1.items">
            <summary>
            The items
            </summary>
        </member>
        <member name="P:MIConvexHull.SimpleList`1.Item(System.Int32)">
            <summary>
            Get the i-th element.
            </summary>
            <param name="i">The i.</param>
            <returns>T.</returns>
        </member>
        <member name="M:MIConvexHull.SimpleList`1.EnsureCapacity">
            <summary>
            Size matters.
            </summary>
        </member>
        <member name="M:MIConvexHull.SimpleList`1.Add(`0)">
            <summary>
            Adds a vertex to the buffer.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:MIConvexHull.SimpleList`1.Push(`0)">
            <summary>
            Pushes the value to the back of the list.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:MIConvexHull.SimpleList`1.Pop">
            <summary>
            Pops the last value from the list.
            </summary>
            <returns>T.</returns>
        </member>
        <member name="M:MIConvexHull.SimpleList`1.Clear">
            <summary>
            Sets the Count to 0, otherwise does nothing.
            </summary>
        </member>
        <member name="T:MIConvexHull.IndexBuffer">
            <summary>
            Class IndexBuffer.
            A fancy name for a list of integers.
            </summary>
        </member>
        <member name="T:MIConvexHull.FaceList">
            <summary>
            A priority based linked list.
            </summary>
        </member>
        <member name="F:MIConvexHull.FaceList.last">
            <summary>
            The last
            </summary>
        </member>
        <member name="P:MIConvexHull.FaceList.First">
            <summary>
            Get the first element.
            </summary>
            <value>The first.</value>
        </member>
        <member name="M:MIConvexHull.FaceList.AddFirst(MIConvexHull.ConvexFaceInternal)">
            <summary>
            Adds the element to the beginning.
            </summary>
            <param name="face">The face.</param>
        </member>
        <member name="M:MIConvexHull.FaceList.Add(MIConvexHull.ConvexFaceInternal)">
            <summary>
            Adds a face to the list.
            </summary>
            <param name="face">The face.</param>
        </member>
        <member name="M:MIConvexHull.FaceList.Remove(MIConvexHull.ConvexFaceInternal)">
            <summary>
            Removes the element from the list.
            </summary>
            <param name="face">The face.</param>
        </member>
        <member name="T:MIConvexHull.ConnectorList">
            <summary>
            Connector list.
            </summary>
        </member>
        <member name="F:MIConvexHull.ConnectorList.last">
            <summary>
            The last
            </summary>
        </member>
        <member name="P:MIConvexHull.ConnectorList.First">
            <summary>
            Get the first element.
            </summary>
            <value>The first.</value>
        </member>
        <member name="M:MIConvexHull.ConnectorList.AddFirst(MIConvexHull.FaceConnector)">
            <summary>
            Adds the element to the beginning.
            </summary>
            <param name="connector">The connector.</param>
        </member>
        <member name="M:MIConvexHull.ConnectorList.Add(MIConvexHull.FaceConnector)">
            <summary>
            Adds a face to the list.
            </summary>
            <param name="element">The element.</param>
        </member>
        <member name="M:MIConvexHull.ConnectorList.Remove(MIConvexHull.FaceConnector)">
            <summary>
            Removes the element from the list.
            </summary>
            <param name="connector">The connector.</param>
        </member>
        <member name="T:MIConvexHull.ConvexFace`2">
            <summary>
            A convex face representation containing adjacency information.
            </summary>
            <typeparam name="TVertex">The type of the t vertex.</typeparam>
            <typeparam name="TFace">The type of the t face.</typeparam>
        </member>
        <member name="P:MIConvexHull.ConvexFace`2.Adjacency">
            <summary>
            Adjacency. Array of length "dimension".
            If F = Adjacency[i] then the vertices shared with F are Vertices[j] where j != i.
            In the context of triangulation, can be null (indicates the cell is at boundary).
            </summary>
            <value>The adjacency.</value>
        </member>
        <member name="P:MIConvexHull.ConvexFace`2.Vertices">
            <summary>
            The vertices stored in clockwise order for dimensions 2 - 4, in higher dimensions the order is arbitrary.
            Unless I accidentally switch some index somewhere in which case the order is CCW. Either way, it is consistent.
            3D Normal = (V[1] - V[0]) x (V[2] - V[1]).
            </summary>
            <value>The vertices.</value>
        </member>
        <member name="P:MIConvexHull.ConvexFace`2.Normal">
            <summary>
            The normal vector of the face. Null if used in triangulation.
            </summary>
            <value>The normal.</value>
        </member>
        <member name="T:MIConvexHull.DefaultConvexFace`1">
            <summary>
            A default convex face representation.
            </summary>
            <typeparam name="TVertex">The type of the t vertex.</typeparam>
        </member>
        <member name="T:MIConvexHull.DeferredFace">
            <summary>
            For deferred face addition.
            </summary>
        </member>
        <member name="F:MIConvexHull.DeferredFace.Face">
            <summary>
            The faces.
            </summary>
        </member>
        <member name="F:MIConvexHull.DeferredFace.Pivot">
            <summary>
            The faces.
            </summary>
        </member>
        <member name="F:MIConvexHull.DeferredFace.OldFace">
            <summary>
            The faces.
            </summary>
        </member>
        <member name="F:MIConvexHull.DeferredFace.FaceIndex">
            <summary>
            The indices.
            </summary>
        </member>
        <member name="F:MIConvexHull.DeferredFace.PivotIndex">
            <summary>
            The indices.
            </summary>
        </member>
        <member name="T:MIConvexHull.FaceConnector">
            <summary>
            A helper class used to connect faces.
            </summary>
        </member>
        <member name="F:MIConvexHull.FaceConnector.EdgeIndex">
            <summary>
            The edge to be connected.
            </summary>
        </member>
        <member name="F:MIConvexHull.FaceConnector.Face">
            <summary>
            The face.
            </summary>
        </member>
        <member name="F:MIConvexHull.FaceConnector.HashCode">
            <summary>
            The hash code computed from indices.
            </summary>
        </member>
        <member name="F:MIConvexHull.FaceConnector.Next">
            <summary>
            Next node in the list.
            </summary>
        </member>
        <member name="F:MIConvexHull.FaceConnector.Previous">
            <summary>
            Prev node in the list.
            </summary>
        </member>
        <member name="F:MIConvexHull.FaceConnector.Vertices">
            <summary>
            The vertex indices.
            </summary>
        </member>
        <member name="M:MIConvexHull.FaceConnector.#ctor(System.Int32)">
            <summary>
            Ctor.
            </summary>
            <param name="dimension">The dimension.</param>
        </member>
        <member name="M:MIConvexHull.FaceConnector.Update(MIConvexHull.ConvexFaceInternal,System.Int32,System.Int32)">
            <summary>
            Updates the connector.
            </summary>
            <param name="face">The face.</param>
            <param name="edgeIndex">Index of the edge.</param>
            <param name="dim">The dim.</param>
        </member>
        <member name="M:MIConvexHull.FaceConnector.AreConnectable(MIConvexHull.FaceConnector,MIConvexHull.FaceConnector,System.Int32)">
            <summary>
            Can two faces be connected.
            </summary>
            <param name="a">a.</param>
            <param name="b">The b.</param>
            <param name="dim">The dim.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:MIConvexHull.FaceConnector.Connect(MIConvexHull.FaceConnector,MIConvexHull.FaceConnector)">
            <summary>
            Connect two faces.
            </summary>
            <param name="a">a.</param>
            <param name="b">The b.</param>
        </member>
        <member name="T:MIConvexHull.ConvexFaceInternal">
            <summary>
            This internal class manages the faces of the convex hull. It is a
            separate class from the desired user class.
            </summary>
        </member>
        <member name="F:MIConvexHull.ConvexFaceInternal.AdjacentFaces">
            <summary>
            Gets or sets the adjacent face data.
            </summary>
        </member>
        <member name="F:MIConvexHull.ConvexFaceInternal.FurthestVertex">
            <summary>
            The furthest vertex.
            </summary>
        </member>
        <member name="F:MIConvexHull.ConvexFaceInternal.Index">
            <summary>
            Index of the face inside the pool.
            </summary>
        </member>
        <member name="F:MIConvexHull.ConvexFaceInternal.InList">
            <summary>
            Is it present in the list.
            </summary>
        </member>
        <member name="F:MIConvexHull.ConvexFaceInternal.IsNormalFlipped">
            <summary>
            Is the normal flipped?
            </summary>
        </member>
        <member name="F:MIConvexHull.ConvexFaceInternal.Next">
            <summary>
            Next node in the list.
            </summary>
        </member>
        <member name="F:MIConvexHull.ConvexFaceInternal.Normal">
            <summary>
            Gets or sets the normal vector.
            </summary>
        </member>
        <member name="F:MIConvexHull.ConvexFaceInternal.Offset">
            <summary>
            Face plane constant element.
            </summary>
        </member>
        <member name="F:MIConvexHull.ConvexFaceInternal.Previous">
            <summary>
            Prev node in the list.
            </summary>
        </member>
        <member name="F:MIConvexHull.ConvexFaceInternal.Tag">
            <summary>
            Used to traverse affected faces and create the Delaunay representation.
            </summary>
        </member>
        <member name="F:MIConvexHull.ConvexFaceInternal.Vertices">
            <summary>
            Gets or sets the vertices.
            </summary>
        </member>
        <member name="F:MIConvexHull.ConvexFaceInternal.VerticesBeyond">
            <summary>
            Gets or sets the vertices beyond.
            </summary>
        </member>
        <member name="M:MIConvexHull.ConvexFaceInternal.#ctor(System.Int32,System.Int32,MIConvexHull.IndexBuffer)">
            <summary>
            Initializes a new instance of the <see cref="T:MIConvexHull.ConvexFaceInternal" /> class.
            </summary>
            <param name="dimension">The dimension.</param>
            <param name="index">The index.</param>
            <param name="beyondList">The beyond list.</param>
        </member>
        <member name="T:MIConvexHull.ConvexHull">
            <summary>
            Factory class for computing convex hulls.
            </summary>
        </member>
        <member name="M:MIConvexHull.ConvexHull.Create``2(System.Collections.Generic.IList{``0},System.Double)">
            <summary>
            Creates a convex hull of the input data.
            </summary>
            <typeparam name="TVertex">The type of the t vertex.</typeparam>
            <typeparam name="TFace">The type of the t face.</typeparam>
            <param name="data">The data.</param>
            <param name="PlaneDistanceTolerance">The plane distance tolerance.</param>
            <returns>
            ConvexHull&lt;TVertex, TFace&gt;.
            </returns>
        </member>
        <member name="M:MIConvexHull.ConvexHull.Create``1(System.Collections.Generic.IList{``0},System.Double)">
            <summary>
            Creates a convex hull of the input data.
            </summary>
            <typeparam name="TVertex">The type of the t vertex.</typeparam>
            <param name="data">The data.</param>
            <param name="PlaneDistanceTolerance">The plane distance tolerance.</param>
            <returns>
            ConvexHull&lt;TVertex, DefaultConvexFace&lt;TVertex&gt;&gt;.
            </returns>
        </member>
        <member name="M:MIConvexHull.ConvexHull.Create(System.Collections.Generic.IList{System.Double[]},System.Double)">
            <summary>
            Creates a convex hull of the input data.
            </summary>
            <param name="data">The data.</param>
            <param name="PlaneDistanceTolerance">The plane distance tolerance.</param>
            <returns>
            ConvexHull&lt;DefaultVertex, DefaultConvexFace&lt;DefaultVertex&gt;&gt;.
            </returns>
        </member>
        <member name="T:MIConvexHull.ConvexHull`2">
            <summary>
            Representation of a convex hull.
            </summary>
            <typeparam name="TVertex">The type of the t vertex.</typeparam>
            <typeparam name="TFace">The type of the t face.</typeparam>
        </member>
        <member name="M:MIConvexHull.ConvexHull`2.#ctor">
            <summary>
            Can only be created using a factory method.
            </summary>
        </member>
        <member name="P:MIConvexHull.ConvexHull`2.Points">
            <summary>
            Points of the convex hull.
            </summary>
            <value>The points.</value>
        </member>
        <member name="P:MIConvexHull.ConvexHull`2.Faces">
            <summary>
            Faces of the convex hull.
            </summary>
            <value>The faces.</value>
        </member>
        <member name="M:MIConvexHull.ConvexHull`2.Create(System.Collections.Generic.IList{`0},System.Double)">
            <summary>
            Creates the convex hull.
            </summary>
            <param name="data">The data.</param>
            <param name="PlaneDistanceTolerance">The plane distance tolerance.</param>
            <returns>
            ConvexHull&lt;TVertex, TFace&gt;.
            </returns>
            <exception cref="T:System.ArgumentNullException">The supplied data is null.</exception>
            <exception cref="T:System.ArgumentNullException">data</exception>
        </member>
        <member name="T:MIConvexHull.ConvexHullAlgorithm">
            <summary>
            Class ConvexHullAlgorithm.
            </summary>
            <summary>
            Class ConvexHullAlgorithm.
            </summary>
            <summary>
            Class ConvexHullAlgorithm.
            </summary>
        </member>
        <member name="M:MIConvexHull.ConvexHullAlgorithm.TagAffectedFaces(MIConvexHull.ConvexFaceInternal)">
            <summary>
            Tags all faces seen from the current vertex with 1.
            </summary>
            <param name="currentFace">The current face.</param>
        </member>
        <member name="M:MIConvexHull.ConvexHullAlgorithm.TraverseAffectedFaces(System.Int32)">
            <summary>
            Recursively traverse all the relevant faces.
            </summary>
            <param name="currentFace">The current face.</param>
        </member>
        <member name="M:MIConvexHull.ConvexHullAlgorithm.MakeDeferredFace(MIConvexHull.ConvexFaceInternal,System.Int32,MIConvexHull.ConvexFaceInternal,System.Int32,MIConvexHull.ConvexFaceInternal)">
            <summary>
            Creates a new deferred face.
            </summary>
            <param name="face">The face.</param>
            <param name="faceIndex">Index of the face.</param>
            <param name="pivot">The pivot.</param>
            <param name="pivotIndex">Index of the pivot.</param>
            <param name="oldFace">The old face.</param>
            <returns>DeferredFace.</returns>
        </member>
        <member name="M:MIConvexHull.ConvexHullAlgorithm.ConnectFace(MIConvexHull.FaceConnector)">
            <summary>
            Connect faces using a connector.
            </summary>
            <param name="connector">The connector.</param>
        </member>
        <member name="M:MIConvexHull.ConvexHullAlgorithm.CreateCone">
            <summary>
            Removes the faces "covered" by the current vertex and adds the newly created ones.
            </summary>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:MIConvexHull.ConvexHullAlgorithm.CommitCone">
            <summary>
            Commits a cone and adds a vertex to the convex hull.
            </summary>
        </member>
        <member name="M:MIConvexHull.ConvexHullAlgorithm.IsBeyond(MIConvexHull.ConvexFaceInternal,MIConvexHull.IndexBuffer,System.Int32)">
            <summary>
            Check whether the vertex v is beyond the given face. If so, add it to beyondVertices.
            </summary>
            <param name="face">The face.</param>
            <param name="beyondVertices">The beyond vertices.</param>
            <param name="v">The v.</param>
        </member>
        <member name="M:MIConvexHull.ConvexHullAlgorithm.LexCompare(System.Int32,System.Int32)">
            <summary>
            Compares the values of two vertices. The return value (-1, 0 or +1) are found
            by first checking the first coordinate and then progressing through the rest.
            In this way {2, 8} will be a "-1" (less than) {3, 1}.
            </summary>
            <param name="u">The base vertex index, u.</param>
            <param name="v">The compared vertex index, v.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:MIConvexHull.ConvexHullAlgorithm.FindBeyondVertices(MIConvexHull.ConvexFaceInternal,MIConvexHull.IndexBuffer,MIConvexHull.IndexBuffer)">
            <summary>
            Used by update faces.
            </summary>
            <param name="face">The face.</param>
            <param name="beyond">The beyond.</param>
            <param name="beyond1">The beyond1.</param>
        </member>
        <member name="M:MIConvexHull.ConvexHullAlgorithm.FindBeyondVertices(MIConvexHull.ConvexFaceInternal,MIConvexHull.IndexBuffer)">
            <summary>
            Finds the beyond vertices.
            </summary>
            <param name="face">The face.</param>
            <param name="beyond">The beyond.</param>
        </member>
        <member name="M:MIConvexHull.ConvexHullAlgorithm.UpdateCenter">
            <summary>
            Recalculates the centroid of the current hull.
            </summary>
        </member>
        <member name="M:MIConvexHull.ConvexHullAlgorithm.RollbackCenter">
            <summary>
            Removes the last vertex from the center.
            </summary>
        </member>
        <member name="M:MIConvexHull.ConvexHullAlgorithm.HandleSingular">
            <summary>
            Handles singular vertex.
            </summary>
        </member>
        <member name="M:MIConvexHull.ConvexHullAlgorithm.GetCoordinate(System.Int32,System.Int32)">
            <summary>
            Get a vertex coordinate. In order to reduce speed, all vertex coordinates
            have been placed in a single array.
            </summary>
            <param name="vIndex">The vertex index.</param>
            <param name="dimension">The index of the dimension.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MIConvexHull.ConvexHullAlgorithm.GetHullVertices``1(System.Collections.Generic.IList{``0})">
            <summary>
            Gets the hull vertices.
            </summary>
            <typeparam name="TVertex">The type of the t vertex.</typeparam>
            <param name="data">The data.</param>
            <returns>TVertex[].</returns>
        </member>
        <member name="M:MIConvexHull.ConvexHullAlgorithm.GetConvexFaces``2">
            <summary>
            Finds the convex hull and creates the TFace objects.
            </summary>
            <typeparam name="TFace">The type of the t face.</typeparam>
            <typeparam name="TVertex">The type of the t vertex.</typeparam>
            <returns>TFace[].</returns>
        </member>
        <member name="M:MIConvexHull.ConvexHullAlgorithm.Return2DResultInOrder``2(System.Collections.Generic.IList{``0})">
            <summary>
            For 2D only: Returns the result in counter-clockwise order starting with the element with the lowest X value.
            If there are multiple vertices with the same minimum X, then the one with the lowest Y is chosen.
            </summary>
            <typeparam name="TVertex">The type of the vertex.</typeparam>
            <typeparam name="TFace">The type of the face.</typeparam>
            <param name="data">The data.</param>
            <returns></returns>
        </member>
        <member name="M:MIConvexHull.ConvexHullAlgorithm.GetConvexHull``2(System.Collections.Generic.IList{``0},System.Double)">
            <summary>
            The main function for the Convex Hull algorithm. It is static, but it creates
            an instantiation of this class in order to allow for parallel execution.
            Following this simple function, the constructor and the main function "FindConvexHull" is listed.
            </summary>
            <typeparam name="TVertex">The type of the vertices in the data.</typeparam>
            <typeparam name="TFace">The desired type of the faces.</typeparam>
            <param name="data">The data is the vertices as a collection of IVertices.</param>
            <param name="PlaneDistanceTolerance">The plane distance tolerance.</param>
            <returns>
            MIConvexHull.ConvexHull&lt;TVertex, TFace&gt;.
            </returns>
        </member>
        <member name="M:MIConvexHull.ConvexHullAlgorithm.#ctor(MIConvexHull.IVertex[],System.Boolean,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:MIConvexHull.ConvexHullAlgorithm" /> class.
            </summary>
            <param name="vertices">The vertices.</param>
            <param name="lift">if set to <c>true</c> [lift].</param>
            <param name="PlaneDistanceTolerance">The plane distance tolerance.</param>
            <exception cref="T:System.InvalidOperationException">Dimension of the input must be 2 or greater.</exception>
            <exception cref="T:System.ArgumentException">There are too few vertices (m) for the n-dimensional space. (m must be greater  +
            than the n, but m is  + NumberOfVertices +  and n is  + NumOfDimensions</exception>
            <exception cref="T:System.InvalidOperationException">PointTranslationGenerator cannot be null if PointTranslationType is enabled.
            or
            Dimension of the input must be 2 or greater.</exception>
            <exception cref="T:System.ArgumentException">There are too few vertices (m) for the n-dimensional space. (m must be greater " +
            "than the n, but m is " + NumberOfVertices + " and n is " + Dimension</exception>
        </member>
        <member name="M:MIConvexHull.ConvexHullAlgorithm.DetermineDimension">
            <summary>
            Check the dimensionality of the input data.
            </summary>
            <returns>System.Int32.</returns>
            <exception cref="T:System.ArgumentException">Invalid input data (non-uniform dimension).</exception>
        </member>
        <member name="M:MIConvexHull.ConvexHullAlgorithm.GetConvexHull">
            <summary>
            Gets/calculates the convex hull. This is 
            </summary>
        </member>
        <member name="M:MIConvexHull.ConvexHullAlgorithm.SerializeVerticesToPositions">
            <summary>
            Serializes the vertices into the 1D array, Positions. The 1D array has much quicker access in C#.
            </summary>
        </member>
        <member name="M:MIConvexHull.ConvexHullAlgorithm.FindBoundingBoxPoints">
            <summary>
            Finds the bounding box points.
            </summary>
        </member>
        <member name="M:MIConvexHull.ConvexHullAlgorithm.ShiftAndScalePositions">
            <summary>
            Shifts and scales the Positions to avoid future errors. This does not alter the original data.
            </summary>
        </member>
        <member name="M:MIConvexHull.ConvexHullAlgorithm.CreateInitialSimplex">
            <summary>
            Find the (dimension+1) initial points and create the simplexes.
            Creates the initial simplex of n+1 vertices by using points from the bounding box.
            Special care is taken to ensure that the vertices chosen do not result in a degenerate shape
            where vertices are collinear (co-planar, etc). This would technically be resolved when additional
            vertices are checked in the main loop, but: 1) a degenerate simplex would not eliminate any other
            vertices (thus no savings there), 2) the creation of the face normal is prone to error.
            </summary>
        </member>
        <member name="M:MIConvexHull.ConvexHullAlgorithm.FindInitialPoints">
            <summary>
            Finds (dimension + 1) initial points.
            </summary>
            <returns>List&lt;System.Int32&gt;.</returns>
            <exception cref="T:System.ArgumentException">The input data is degenerate. It appears to exist in " + NumOfDimensions +
                                " dimensions, but it is a " + (NumOfDimensions - 1) + " dimensional set (i.e. the point of collinear,"
                                + " coplanar, or co-hyperplanar.)</exception>
        </member>
        <member name="M:MIConvexHull.ConvexHullAlgorithm.UpdateAdjacency(MIConvexHull.ConvexFaceInternal,MIConvexHull.ConvexFaceInternal)">
            <summary>
            Check if 2 faces are adjacent and if so, update their AdjacentFaces array.
            </summary>
            <param name="l">The l.</param>
            <param name="r">The r.</param>
        </member>
        <member name="M:MIConvexHull.ConvexHullAlgorithm.FindBeyondVertices(MIConvexHull.ConvexFaceInternal)">
            <summary>
            Used in the "initialization" code.
            </summary>
            <param name="face">The face.</param>
        </member>
        <member name="F:MIConvexHull.ConvexHullAlgorithm.NumOfDimensions">
            <summary>
            Corresponds to the dimension of the data.
            When the "lifted" hull is computed, Dimension is automatically incremented by one.
            </summary>
        </member>
        <member name="F:MIConvexHull.ConvexHullAlgorithm.IsLifted">
            <summary>
            Are we on a paraboloid?
            </summary>
        </member>
        <member name="F:MIConvexHull.ConvexHullAlgorithm.PlaneDistanceTolerance">
            <summary>
            Explained in ConvexHullComputationConfig.
            </summary>
        </member>
        <member name="F:MIConvexHull.ConvexHullAlgorithm.Vertices">
            <summary>
            The vertices
            </summary>
        </member>
        <member name="F:MIConvexHull.ConvexHullAlgorithm.Positions">
            <summary>
            The positions
            </summary>
        </member>
        <member name="F:MIConvexHull.ConvexHullAlgorithm.VertexVisited">
            <summary>
            The vertex marks
            </summary>
        </member>
        <member name="F:MIConvexHull.ConvexHullAlgorithm.FacePool">
            <summary>
            The face pool
            </summary>
        </member>
        <member name="F:MIConvexHull.ConvexHullAlgorithm.AffectedFaceFlags">
            <summary>
            The affected face flags
            </summary>
        </member>
        <member name="F:MIConvexHull.ConvexHullAlgorithm.ConvexHullSize">
            <summary>
            Used to track the size of the current hull in the Update/RollbackCenter functions.
            </summary>
        </member>
        <member name="F:MIConvexHull.ConvexHullAlgorithm.UnprocessedFaces">
            <summary>
            A list of faces that that are not a part of the final convex hull and still need to be processed.
            </summary>
        </member>
        <member name="F:MIConvexHull.ConvexHullAlgorithm.ConvexFaces">
            <summary>
            A list of faces that form the convex hull.
            </summary>
        </member>
        <member name="F:MIConvexHull.ConvexHullAlgorithm.CurrentVertex">
            <summary>
            The vertex that is currently being processed.
            </summary>
        </member>
        <member name="F:MIConvexHull.ConvexHullAlgorithm.MaxDistance">
            <summary>
            A helper variable to determine the furthest vertex for a particular convex face.
            </summary>
        </member>
        <member name="F:MIConvexHull.ConvexHullAlgorithm.FurthestVertex">
            <summary>
            A helper variable to help determine the index of the vertex that is furthest from the face that is currently being
            processed.
            </summary>
        </member>
        <member name="F:MIConvexHull.ConvexHullAlgorithm.Center">
            <summary>
            The centroid of the currently computed hull.
            </summary>
        </member>
        <member name="F:MIConvexHull.ConvexHullAlgorithm.UpdateBuffer">
            <summary>
            The update buffer
            </summary>
        </member>
        <member name="F:MIConvexHull.ConvexHullAlgorithm.UpdateIndices">
            <summary>
            The update indices
            </summary>
        </member>
        <member name="F:MIConvexHull.ConvexHullAlgorithm.TraverseStack">
            <summary>
            Used to determine which faces need to be updated at each step of the algorithm.
            </summary>
        </member>
        <member name="F:MIConvexHull.ConvexHullAlgorithm.EmptyBuffer">
            <summary>
            Used for VerticesBeyond for faces that are on the convex hull.
            </summary>
        </member>
        <member name="F:MIConvexHull.ConvexHullAlgorithm.BeyondBuffer">
            <summary>
            Used to determine which vertices are "above" (or "beyond") a face
            </summary>
        </member>
        <member name="F:MIConvexHull.ConvexHullAlgorithm.AffectedFaceBuffer">
            <summary>
            Stores faces that are visible from the current vertex.
            </summary>
        </member>
        <member name="F:MIConvexHull.ConvexHullAlgorithm.ConeFaceBuffer">
            <summary>
            Stores faces that form a "cone" created by adding new vertex.
            </summary>
        </member>
        <member name="F:MIConvexHull.ConvexHullAlgorithm.SingularVertices">
            <summary>
            Stores a list of "singular" (or "generate", "planar", etc.) vertices that cannot be part of the hull.
            </summary>
        </member>
        <member name="F:MIConvexHull.ConvexHullAlgorithm.ConnectorTable">
            <summary>
            The connector table helps to determine the adjacency of convex faces.
            Hashing is used instead of pairwise comparison. This significantly speeds up the computations,
            especially for higher dimensions.
            </summary>
        </member>
        <member name="F:MIConvexHull.ConvexHullAlgorithm.ObjectManager">
            <summary>
            Manages the memory allocations and storage of unused objects.
            Saves the garbage collector a lot of work.
            </summary>
        </member>
        <member name="F:MIConvexHull.ConvexHullAlgorithm.mathHelper">
            <summary>
            Helper class for handling math related stuff.
            </summary>
        </member>
        <member name="M:MIConvexHull.ConvexHullAlgorithm.GetDelaunayTriangulation``2(System.Collections.Generic.IList{``0})">
            <summary>
            Computes the Delaunay triangulation.
            </summary>
            <typeparam name="TVertex">The type of the t vertex.</typeparam>
            <typeparam name="TCell">The type of the t cell.</typeparam>
            <param name="data">The data.</param>
            <returns>TCell[].</returns>
        </member>
        <member name="M:MIConvexHull.ConvexHullAlgorithm.RemoveUpperFaces">
            <summary>
            Removes up facing Tetrahedrons from the triangulation.
            </summary>
        </member>
        <member name="T:MIConvexHull.IVertex">
            <summary>
            An interface for a structure with nD position.
            </summary>
        </member>
        <member name="P:MIConvexHull.IVertex.Position">
            <summary>
            Position of the vertex.
            </summary>
            <value>The position.</value>
        </member>
        <member name="T:MIConvexHull.DefaultVertex">
            <summary>
            "Default" vertex.
            </summary>
            <seealso cref="T:MIConvexHull.IVertex" />
        </member>
        <member name="P:MIConvexHull.DefaultVertex.Position">
            <summary>
            Position of the vertex.
            </summary>
            <value>The position.</value>
        </member>
        <member name="T:MIConvexHull.MathHelper">
            <summary>
            A helper class mostly for normal computation. If convex hulls are computed
            in higher dimensions, it might be a good idea to add a specific
            FindNormalVectorND function.
            </summary>
        </member>
        <member name="F:MIConvexHull.MathHelper.Dimension">
            <summary>
            The dimension
            </summary>
        </member>
        <member name="F:MIConvexHull.MathHelper.matrixPivots">
            <summary>
            The matrix pivots
            </summary>
        </member>
        <member name="F:MIConvexHull.MathHelper.nDMatrix">
            <summary>
            The n d matrix
            </summary>
        </member>
        <member name="F:MIConvexHull.MathHelper.nDNormalHelperVector">
            <summary>
            The n d normal helper vector
            </summary>
        </member>
        <member name="F:MIConvexHull.MathHelper.ntX">
            <summary>
            The nt x
            </summary>
        </member>
        <member name="F:MIConvexHull.MathHelper.ntY">
            <summary>
            The nt y
            </summary>
        </member>
        <member name="F:MIConvexHull.MathHelper.ntZ">
            <summary>
            The nt z
            </summary>
        </member>
        <member name="F:MIConvexHull.MathHelper.PositionData">
            <summary>
            The position data
            </summary>
        </member>
        <member name="M:MIConvexHull.MathHelper.#ctor(System.Int32,System.Double[])">
            <summary>
            Initializes a new instance of the <see cref="T:MIConvexHull.MathHelper"/> class.
            </summary>
            <param name="dimension">The dimension.</param>
            <param name="positions">The positions.</param>
        </member>
        <member name="M:MIConvexHull.MathHelper.CalculateFacePlane(MIConvexHull.ConvexFaceInternal,System.Double[])">
            <summary>
            Calculates the normal and offset of the hyper-plane given by the face's vertices.
            </summary>
            <param name="face">The face.</param>
            <param name="center">The center.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:MIConvexHull.MathHelper.GetVertexDistance(System.Int32,MIConvexHull.ConvexFaceInternal)">
            <summary>
            Check if the vertex is "visible" from the face.
            The vertex is "over face" if the return value is &gt; Constants.PlaneDistanceTolerance.
            </summary>
            <param name="v">The v.</param>
            <param name="f">The f.</param>
            <returns>The vertex is "over face" if the result is positive.</returns>
        </member>
        <member name="M:MIConvexHull.MathHelper.VectorBetweenVertices(System.Int32,System.Int32)">
            <summary>
            Returns the vector the between vertices.
            </summary>
            <param name="toIndex">To index.</param>
            <param name="fromIndex">From index.</param>
            <returns>System.Double[].</returns>
        </member>
        <member name="M:MIConvexHull.MathHelper.VectorBetweenVertices(System.Int32,System.Int32,System.Double[])">
            <summary>
            Returns the vector the between vertices.
            </summary>
            <param name="fromIndex">From index.</param>
            <param name="toIndex">To index.</param>
            <param name="target">The target.</param>
            <returns></returns>
        </member>
        <member name="M:MIConvexHull.MathHelper.FindNormalVector(System.Int32[],System.Double[])">
            <summary>
            Finds normal vector of a hyper-plane given by vertices.
            Stores the results to normalData.
            </summary>
            <param name="vertices">The vertices.</param>
            <param name="normalData">The normal data.</param>
        </member>
        <member name="M:MIConvexHull.MathHelper.FindNormalVector2D(System.Int32[],System.Double[])">
            <summary>
            Finds 2D normal vector.
            </summary>
            <param name="vertices">The vertices.</param>
            <param name="normal">The normal.</param>
        </member>
        <member name="M:MIConvexHull.MathHelper.FindNormalVector3D(System.Int32[],System.Double[])">
            <summary>
            Finds 3D normal vector.
            </summary>
            <param name="vertices">The vertices.</param>
            <param name="normal">The normal.</param>
        </member>
        <member name="M:MIConvexHull.MathHelper.FindNormalVector4D(System.Int32[],System.Double[])">
            <summary>
            Finds 4D normal vector.
            </summary>
            <param name="vertices">The vertices.</param>
            <param name="normal">The normal.</param>
        </member>
        <member name="M:MIConvexHull.MathHelper.FindNormalVectorND(System.Int32[],System.Double[])">
            <summary>
            Finds the normal vector nd.
            </summary>
            <param name="vertices">The vertices.</param>
            <param name="normal">The normal.</param>
        </member>
        <member name="M:MIConvexHull.MathHelper.GetSimplexVolume(System.Double[][],System.Int32,System.Double)">
            <summary>
            Gets the simplex volume. Prior to having enough edge vectors, the method pads the remaining with all
            "other numbers". So, yes, this method is not really finding the volume. But a relative volume-like measure. It
            uses the magnitude of the determinant as the volume stand-in following the Cayley-Menger theorem.
            </summary>
            <param name="edgeVectors">The edge vectors.</param>
            <param name="lastIndex">The last index.</param>
            <param name="bigNumber">The big number.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MIConvexHull.MathHelper.DeterminantDestructive(System.Double[])">
            <summary>
            Determinants the destructive.
            </summary>
            <param name="A">a.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MIConvexHull.MathHelper.LUFactor(System.Double[],System.Int32,System.Int32[],System.Double[])">
            <summary>
            Lus the factor.
            </summary>
            <param name="data">The data.</param>
            <param name="order">The order.</param>
            <param name="ipiv">The ipiv.</param>
            <param name="vecLUcolj">The vec l ucolj.</param>
        </member>
        <member name="T:MIConvexHull.ObjectManager">
            <summary>
            A helper class for object allocation/storage.
            This helps the GC a lot as it prevents the creation of about 75% of
            new face objects (in the case of ConvexFaceInternal). In the case of
            FaceConnectors and DefferedFaces, the difference is even higher (in most
            cases O(1) vs O(number of created faces)).
            </summary>
        </member>
        <member name="F:MIConvexHull.ObjectManager.Dimension">
            <summary>
            The dimension
            </summary>
        </member>
        <member name="F:MIConvexHull.ObjectManager.ConnectorStack">
            <summary>
            The connector stack
            </summary>
        </member>
        <member name="F:MIConvexHull.ObjectManager.DeferredFaceStack">
            <summary>
            The deferred face stack
            </summary>
        </member>
        <member name="F:MIConvexHull.ObjectManager.EmptyBufferStack">
            <summary>
            The empty buffer stack
            </summary>
        </member>
        <member name="F:MIConvexHull.ObjectManager.FacePool">
            <summary>
            The face pool
            </summary>
        </member>
        <member name="F:MIConvexHull.ObjectManager.FacePoolSize">
            <summary>
            The face pool size
            </summary>
        </member>
        <member name="F:MIConvexHull.ObjectManager.FacePoolCapacity">
            <summary>
            The face pool capacity
            </summary>
        </member>
        <member name="F:MIConvexHull.ObjectManager.FreeFaceIndices">
            <summary>
            The free face indices
            </summary>
        </member>
        <member name="F:MIConvexHull.ObjectManager.Hull">
            <summary>
            The hull
            </summary>
        </member>
        <member name="M:MIConvexHull.ObjectManager.#ctor(MIConvexHull.ConvexHullAlgorithm)">
            <summary>
            Create the manager.
            </summary>
            <param name="hull">The hull.</param>
        </member>
        <member name="M:MIConvexHull.ObjectManager.DepositFace(System.Int32)">
            <summary>
            Return the face to the pool for later use.
            </summary>
            <param name="faceIndex">Index of the face.</param>
        </member>
        <member name="M:MIConvexHull.ObjectManager.ReallocateFacePool">
            <summary>
            Reallocate the face pool, including the AffectedFaceFlags
            </summary>
        </member>
        <member name="M:MIConvexHull.ObjectManager.CreateFace">
            <summary>
            Create a new face and put it in the pool.
            </summary>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:MIConvexHull.ObjectManager.GetFace">
            <summary>
            Return index of an unused face or creates a new one.
            </summary>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:MIConvexHull.ObjectManager.DepositConnector(MIConvexHull.FaceConnector)">
            <summary>
            Store a face connector in the "embedded" linked list.
            </summary>
            <param name="connector">The connector.</param>
        </member>
        <member name="M:MIConvexHull.ObjectManager.GetConnector">
            <summary>
            Get an unused face connector. If none is available, create it.
            </summary>
            <returns>FaceConnector.</returns>
        </member>
        <member name="M:MIConvexHull.ObjectManager.DepositVertexBuffer(MIConvexHull.IndexBuffer)">
            <summary>
            Deposit the index buffer.
            </summary>
            <param name="buffer">The buffer.</param>
        </member>
        <member name="M:MIConvexHull.ObjectManager.GetVertexBuffer">
            <summary>
            Get a store index buffer or create a new instance.
            </summary>
            <returns>IndexBuffer.</returns>
        </member>
        <member name="M:MIConvexHull.ObjectManager.DepositDeferredFace(MIConvexHull.DeferredFace)">
            <summary>
            Deposit the deferred face.
            </summary>
            <param name="face">The face.</param>
        </member>
        <member name="M:MIConvexHull.ObjectManager.GetDeferredFace">
            <summary>
            Get the deferred face.
            </summary>
            <returns>DeferredFace.</returns>
        </member>
        <member name="T:MIConvexHull.DelaunayTriangulation`2">
            <summary>
            Calculation and representation of Delaunay triangulation.
            </summary>
            <typeparam name="TVertex">The type of the t vertex.</typeparam>
            <typeparam name="TCell">The type of the t cell.</typeparam>
            <seealso cref="T:MIConvexHull.ITriangulation`2" />
        </member>
        <member name="M:MIConvexHull.DelaunayTriangulation`2.#ctor">
            <summary>
            Can only be created using a factory method.
            </summary>
        </member>
        <member name="P:MIConvexHull.DelaunayTriangulation`2.Cells">
            <summary>
            Cells of the triangulation.
            </summary>
            <value>The cells.</value>
        </member>
        <member name="M:MIConvexHull.DelaunayTriangulation`2.Create(System.Collections.Generic.IList{`0})">
            <summary>
            Creates the Delaunay triangulation of the input data.
            </summary>
            <param name="data">The data.</param>
            <returns>DelaunayTriangulation&lt;TVertex, TCell&gt;.</returns>
            <exception cref="T:System.ArgumentNullException">data</exception>
            <exception cref="T:System.ArgumentNullException">data</exception>
        </member>
        <member name="T:MIConvexHull.ITriangulation`2">
            <summary>
            Simple interface to unify different types of triangulations in the future.
            </summary>
            <typeparam name="TVertex">The type of the t vertex.</typeparam>
            <typeparam name="TCell">The type of the t cell.</typeparam>
        </member>
        <member name="P:MIConvexHull.ITriangulation`2.Cells">
            <summary>
            Triangulation simplexes. For 2D - triangles, 3D - tetrahedrons, etc ...
            </summary>
            <value>The cells.</value>
        </member>
        <member name="T:MIConvexHull.Triangulation">
            <summary>
            Factory class for creating triangulations.
            </summary>
        </member>
        <member name="M:MIConvexHull.Triangulation.CreateDelaunay``1(System.Collections.Generic.IList{``0})">
            <summary>
            Creates the Delaunay triangulation of the input data.
            </summary>
            <typeparam name="TVertex">The type of the t vertex.</typeparam>
            <param name="data">The data.</param>
            <returns>ITriangulation&lt;TVertex, DefaultTriangulationCell&lt;TVertex&gt;&gt;.</returns>
        </member>
        <member name="M:MIConvexHull.Triangulation.CreateDelaunay(System.Collections.Generic.IList{System.Double[]})">
            <summary>
            Creates the Delaunay triangulation of the input data.
            </summary>
            <param name="data">The data.</param>
            <returns>ITriangulation&lt;DefaultVertex, DefaultTriangulationCell&lt;DefaultVertex&gt;&gt;.</returns>
        </member>
        <member name="M:MIConvexHull.Triangulation.CreateDelaunay``2(System.Collections.Generic.IList{``0})">
            <summary>
            Creates the Delaunay triangulation of the input data.
            </summary>
            <typeparam name="TVertex">The type of the t vertex.</typeparam>
            <typeparam name="TFace">The type of the t face.</typeparam>
            <param name="data">The data.</param>
            <returns>ITriangulation&lt;TVertex, TFace&gt;.</returns>
        </member>
        <member name="M:MIConvexHull.Triangulation.CreateVoronoi``3(System.Collections.Generic.IList{``0})">
            <summary>
            Create the voronoi mesh.
            </summary>
            <typeparam name="TVertex">The type of the t vertex.</typeparam>
            <typeparam name="TCell">The type of the t cell.</typeparam>
            <typeparam name="TEdge">The type of the t edge.</typeparam>
            <param name="data">The data.</param>
            <returns>VoronoiMesh&lt;TVertex, TCell, TEdge&gt;.</returns>
        </member>
        <member name="M:MIConvexHull.Triangulation.CreateVoronoi``1(System.Collections.Generic.IList{``0})">
            <summary>
            Create the voronoi mesh.
            </summary>
            <typeparam name="TVertex">The type of the t vertex.</typeparam>
            <param name="data">The data.</param>
            <returns>VoronoiMesh&lt;TVertex, DefaultTriangulationCell&lt;TVertex&gt;, VoronoiEdge&lt;TVertex, DefaultTriangulationCell&lt;TVertex&gt;&gt;&gt;.</returns>
        </member>
        <member name="M:MIConvexHull.Triangulation.CreateVoronoi(System.Collections.Generic.IList{System.Double[]})">
            <summary>
            Create the voronoi mesh.
            </summary>
            <param name="data">The data.</param>
            <returns>VoronoiMesh&lt;DefaultVertex, DefaultTriangulationCell&lt;DefaultVertex&gt;, VoronoiEdge&lt;DefaultVertex, DefaultTriangulationCell&lt;DefaultVertex&gt;&gt;&gt;.</returns>
        </member>
        <member name="M:MIConvexHull.Triangulation.CreateVoronoi``2(System.Collections.Generic.IList{``0})">
            <summary>
            Create the voronoi mesh.
            </summary>
            <typeparam name="TVertex">The type of the t vertex.</typeparam>
            <typeparam name="TCell">The type of the t cell.</typeparam>
            <param name="data">The data.</param>
            <returns>VoronoiMesh&lt;TVertex, TCell, VoronoiEdge&lt;TVertex, TCell&gt;&gt;.</returns>
        </member>
        <member name="T:MIConvexHull.TriangulationCell`2">
            <summary>
            Representation of the triangulation cell. Pretty much the same as ConvexFace,
            just wanted to distinguish the two.
            To declare your own face type, use class Face : DelaunayFace(of Vertex, of Face)
            </summary>
            <typeparam name="TVertex">The type of the t vertex.</typeparam>
            <typeparam name="TCell">The type of the t cell.</typeparam>
            <seealso cref="T:MIConvexHull.ConvexFace`2" />
        </member>
        <member name="T:MIConvexHull.DefaultTriangulationCell`1">
            <summary>
            Default triangulation cell.
            </summary>
            <typeparam name="TVertex">The type of the t vertex.</typeparam>
        </member>
        <member name="T:MIConvexHull.VoronoiEdge`2">
            <summary>
            A class representing an (undirected) edge of the Voronoi graph.
            </summary>
            <typeparam name="TVertex">The type of the t vertex.</typeparam>
            <typeparam name="TCell">The type of the t cell.</typeparam>
        </member>
        <member name="M:MIConvexHull.VoronoiEdge`2.#ctor">
            <summary>
            Create an instance of the edge.
            </summary>
        </member>
        <member name="M:MIConvexHull.VoronoiEdge`2.#ctor(`1,`1)">
            <summary>
            Create an instance of the edge.
            </summary>
            <param name="source">The source.</param>
            <param name="target">The target.</param>
        </member>
        <member name="P:MIConvexHull.VoronoiEdge`2.Source">
            <summary>
            Source of the edge.
            </summary>
            <value>The source.</value>
        </member>
        <member name="P:MIConvexHull.VoronoiEdge`2.Target">
            <summary>
            Target of the edge.
            </summary>
            <value>The target.</value>
        </member>
        <member name="M:MIConvexHull.VoronoiEdge`2.Equals(System.Object)">
            <summary>
            ...
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns><c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MIConvexHull.VoronoiEdge`2.GetHashCode">
            <summary>
            ...
            </summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        </member>
        <member name="T:MIConvexHull.VoronoiMesh">
            <summary>
            A factory class for creating a Voronoi mesh.
            </summary>
        </member>
        <member name="M:MIConvexHull.VoronoiMesh.Create``3(System.Collections.Generic.IList{``0})">
            <summary>
            Create the voronoi mesh.
            </summary>
            <typeparam name="TVertex">The type of the t vertex.</typeparam>
            <typeparam name="TCell">The type of the t cell.</typeparam>
            <typeparam name="TEdge">The type of the t edge.</typeparam>
            <param name="data">The data.</param>
            <returns>VoronoiMesh&lt;TVertex, TCell, TEdge&gt;.</returns>
        </member>
        <member name="M:MIConvexHull.VoronoiMesh.Create``1(System.Collections.Generic.IList{``0})">
            <summary>
            Create the voronoi mesh.
            </summary>
            <typeparam name="TVertex">The type of the t vertex.</typeparam>
            <param name="data">The data.</param>
            <returns>VoronoiMesh&lt;TVertex, DefaultTriangulationCell&lt;TVertex&gt;, VoronoiEdge&lt;TVertex, DefaultTriangulationCell&lt;TVertex&gt;&gt;&gt;.</returns>
        </member>
        <member name="M:MIConvexHull.VoronoiMesh.Create(System.Collections.Generic.IList{System.Double[]})">
            <summary>
            Create the voronoi mesh.
            </summary>
            <param name="data">The data.</param>
            <returns>VoronoiMesh&lt;DefaultVertex, DefaultTriangulationCell&lt;DefaultVertex&gt;, VoronoiEdge&lt;DefaultVertex, DefaultTriangulationCell&lt;DefaultVertex&gt;&gt;&gt;.</returns>
        </member>
        <member name="M:MIConvexHull.VoronoiMesh.Create``2(System.Collections.Generic.IList{``0})">
            <summary>
            Create the voronoi mesh.
            </summary>
            <typeparam name="TVertex">The type of the t vertex.</typeparam>
            <typeparam name="TCell">The type of the t cell.</typeparam>
            <param name="data">The data.</param>
            <returns>VoronoiMesh&lt;TVertex, TCell, VoronoiEdge&lt;TVertex, TCell&gt;&gt;.</returns>
        </member>
        <member name="T:MIConvexHull.VoronoiMesh`3">
            <summary>
            A representation of a voronoi mesh.
            </summary>
            <typeparam name="TEdge">The type of the t edge.</typeparam>
            <typeparam name="TVertex">The type of the t vertex.</typeparam>
            <typeparam name="TCell">The type of the t cell.</typeparam>
        </member>
        <member name="M:MIConvexHull.VoronoiMesh`3.#ctor">
            <summary>
            Can only be created using a factory method.
            </summary>
        </member>
        <member name="P:MIConvexHull.VoronoiMesh`3.Vertices">
            <summary>
            Vertices of the diagram.
            </summary>
            <value>The vertices.</value>
        </member>
        <member name="P:MIConvexHull.VoronoiMesh`3.Edges">
            <summary>
            Edges connecting the cells.
            The same information can be retrieved Cells' Adjacency.
            </summary>
            <value>The edges.</value>
        </member>
        <member name="M:MIConvexHull.VoronoiMesh`3.Create(System.Collections.Generic.IList{`0})">
            <summary>
            Create a Voronoi diagram of the input data.
            </summary>
            <param name="data">The data.</param>
            <returns>VoronoiMesh&lt;TVertex, TCell, TEdge&gt;.</returns>
            <exception cref="T:System.ArgumentNullException">data</exception>
            <exception cref="T:System.ArgumentNullException">data</exception>
        </member>
        <member name="T:MIConvexHull.VoronoiMesh`3.EdgeComparer">
            <summary>
            This is probably not needed, but might make things a tiny bit faster.
            </summary>
            <seealso cref="T:System.Collections.Generic.IEqualityComparer`1" />
        </member>
        <member name="M:MIConvexHull.VoronoiMesh`3.EdgeComparer.Equals(`2,`2)">
            <summary>
            Equalses the specified x.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <returns>System.Boolean.</returns>
        </member>
        <member name="M:MIConvexHull.VoronoiMesh`3.EdgeComparer.GetHashCode(`2)">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> for which a hash code is to be returned.</param>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        </member>
    </members>
</doc>
