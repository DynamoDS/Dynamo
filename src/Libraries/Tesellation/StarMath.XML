<?xml version="1.0"?>
<doc>
    <assembly>
        <name>StarMath</name>
    </assembly>
    <members>
        <member name="T:StarMathLib.StarMath">
            <summary>
            The one and only class in the StarMathLib. All functions are static
            functions located here.
            </summary>
        </member>
        <member name="M:StarMathLib.StarMath.SingularValueDecomposition(System.Double[0:,0:])">
            <summary>
            Computes the singular value decomposition of A.
            </summary>
            <param name="A">The matrix in question, A can be rectangular m-by-n.</param>
            <returns>The singular values of A in ascending value, often indicated as sigma (provided as a vector).</returns>
        </member>
        <member name="M:StarMathLib.StarMath.SingularValueDecomposition(System.Double[0:,0:],System.Double[0:,0:]@,System.Double[0:,0:]@)">
            <summary>
            Computes the singular value decomposition of A.
            </summary>
            <param name="A">The matrix in question, A can be rectangular [m, n]</param>
            <param name="U">The m-by-m uitary matrix that pre-multiplies the singular values.</param>
            <param name="V">The n-by-n conjugate transpose matrix of V that post-multiplies the singular values.</param>
            <returns>
            The singular values of A in ascending value, often indicated as sigma (provided as a vector).
            </returns>
        </member>
        <member name="M:StarMathLib.StarMath.SingularValueDecomposition(System.Int32[0:,0:])">
            <summary>
            Computes the singular value decomposition of A.
            </summary>
            <param name="A">The matrix in question, A can be rectangular m-by-n.</param>
            <returns>
            The singular values of A in ascending value, often indicated as sigma (provided as a vector).
            </returns>
        </member>
        <member name="M:StarMathLib.StarMath.SingularValueDecomposition(System.Int32[0:,0:],System.Double[0:,0:]@,System.Double[0:,0:]@)">
            <summary>
            Computes the singular value decomposition of A.
            </summary>
            <param name="A">The matrix in question, A can be rectangular [m, n]</param>
            <param name="U">The m-by-m uitary matrix that pre-multiplies the singular values.</param>
            <param name="V">The n-by-n conjugate transpose matrix of V that post-multiplies the singular values.</param>
            <returns>
            The singular values of A in ascending value, often indicated as sigma (provided as a vector).
            </returns>
        </member>
        <member name="M:StarMathLib.StarMath.drotg(System.Double@,System.Double@,System.Double@,System.Double@)">
            <summary>
            Given the Cartesian coordinates (da, db) of a point p, these function return the parameters da, db, c, and s
            associated with the Givens rotation that zeros the y-coordinate of the point.
            </summary>
            <param name="da">Provides the x-coordinate of the point p. On exit contains the parameter r associated with the Givens rotation</param>
            <param name="db">Provides the y-coordinate of the point p. On exit contains the parameter z associated with the Givens rotation</param>
            <param name="c">Contains the parameter c associated with the Givens rotation</param>
            <param name="s">Contains the parameter s associated with the Givens rotation</param>
            <remarks>This is equivalent to the DROTG LAPACK routine.</remarks>
        </member>
        <member name="M:StarMathLib.StarMath.Translate(System.Double,System.Double,System.Double)">
            <summary>
            Creates a translated coordinate frame.
            </summary>
            <param name = "Tx">Amount of translation in x.</param>
            <param name = "Ty">Amount of translation in y.</param>
            <param name = "Tz">Amount of translation in z.</param>
            <returns>4-by-4 matrix translated by the amount specified.</returns>
        </member>
        <member name="M:StarMathLib.StarMath.RotationX(System.Double)">
            <summary>
            Creates a rotation matrix about the X-axis.
            </summary>
            <param name = "xdeg">The amount of angle in degrees (positive is counter-clockwise).</param>
            <returns>4-by-4 matrix rotated by the amount specified.</returns>
        </member>
        <member name="M:StarMathLib.StarMath.RotationY(System.Double)">
            <summary>
            Creates a rotation matrix about the Y-axis.
            </summary>
            <param name = "ydeg">The amount of angle in degrees (positive is counter-clockwise).</param>
            <returns>4-by-4 matrix rotated by the amount specified.</returns>
        </member>
        <member name="M:StarMathLib.StarMath.RotationZ(System.Double)">
            <summary>
            Creates a rotation matrix about the Z-axis.
            </summary>
            <param name = "zdeg">The amount of angle in degrees (positive is counter-clockwise).</param>
            <returns>4-by-4 matrix rotated by the amount specified.</returns>
        </member>
        <member name="M:StarMathLib.StarMath.multiply(System.Collections.Generic.IList{System.Double},System.Double)">
            <summary>
            Multiplies all elements of a 1D double array with the double value.
            </summary>
            <param name="B">The double vector to be multiplied with</param>
            <param name="a">The double value to be multiplied</param>
            <returns>
            A 1D double array that contains the product
            </returns>
        </member>
        <member name="M:StarMathLib.StarMath.multiply(System.Collections.Generic.IList{System.Double},System.Double,System.Int32)">
            <summary>
            Multiplies all elements of a 1D double array with the double value.
            </summary>
            <param name="B">The double vector to be multiplied with</param>
            <param name="a">The double value to be multiplied</param>
            <param name="length">The length of the vector.</param>
            <returns>
            A 1D double array that contains the product
            </returns>
        </member>
        <member name="M:StarMathLib.StarMath.multiply(System.Double,System.Collections.Generic.IList{System.Double})">
            <summary>
            Multiplies all elements of a 1D double array with the double value.
            </summary>
            <param name = "a">The double value to be multiplied</param>
            <param name = "B">The double vector to be multiplied with</param>
            <returns>A 1D double array that contains the product</returns>
        </member>
        <member name="M:StarMathLib.StarMath.multiply(System.Double,System.Collections.Generic.IList{System.Double},System.Int32)">
            <summary>
            Multiplies all elements of a 1D double array with the double value.
            </summary>
            <param name="a">The double value to be multiplied</param>
            <param name="B">The double vector to be multiplied with</param>
            <param name="length">The length of the vector B. This is an optional argument, but if it is already known 
            - there is a slight speed advantage to providing it.</param>
            <returns>
            A 1D double array that contains the product
            </returns>
        </member>
        <member name="M:StarMathLib.StarMath.multiply(System.Collections.Generic.IList{System.Int32},System.Double)">
            <summary>
            Multiplies all elements of a 1D integer array with the double value.
            </summary>
            <param name="B">The integer vector to be multiplied with</param>
            <param name="a">The double value to be multiplied</param>
            <returns>
            A 1D double array that contains the product
            </returns>
        </member>
        <member name="M:StarMathLib.StarMath.multiply(System.Collections.Generic.IList{System.Int32},System.Double,System.Int32)">
            <summary>
            Multiplies all elements of a 1D integer array with the double value.
            </summary>
            <param name="B">The integer vector to be multiplied with</param>
            <param name="a">The double value to be multiplied</param>
            <param name="length">The length of the vector.</param>
            <returns>
            A 1D double array that contains the product
            </returns>
        </member>
        <member name="M:StarMathLib.StarMath.multiply(System.Double,System.Collections.Generic.IList{System.Int32})">
            <summary>
            Multiplies all elements of a 1D integer array with the double value.
            </summary>
            <param name = "a">The double value to be multiplied</param>
            <param name = "B">The integer vector to be multiplied with</param>
            <returns>A 1D double array that contains the product</returns>
        </member>
        <member name="M:StarMathLib.StarMath.multiply(System.Double,System.Collections.Generic.IList{System.Int32},System.Int32)">
            <summary>
            Multiplies all elements of a 1D integer array with the double value.
            </summary>
            <param name="a">The double value to be multiplied</param>
            <param name="B">The integer vector to be multiplied with</param>
            <param name="length">The length of the vector B. This is an optional argument, but if it is already known 
            - there is a slight speed advantage to providing it.</param>
            <returns>
            A 1D double array that contains the product
            </returns>
        </member>
        <member name="M:StarMathLib.StarMath.multiply(System.Collections.Generic.IList{System.Int32},System.Int32)">
            <summary>
            Multiplies all elements of a 1D integer array with the integer value.
            </summary>
            <param name="B">The integer vector to be multiplied with</param>
            <param name="a">The integer value to be multiplied</param>
            <returns>
            A 1D integer array that contains the product
            </returns>
        </member>
        <member name="M:StarMathLib.StarMath.multiply(System.Collections.Generic.IList{System.Int32},System.Int32,System.Int32)">
            <summary>
            Multiplies all elements of a 1D integer array with the integer value.
            </summary>
            <param name="B">The integer vector to be multiplied with</param>
            <param name="a">The integer value to be multiplied</param>
            <param name="length">The length.</param>
            <returns>
            A 1D integer array that contains the product
            </returns>
        </member>
        <member name="M:StarMathLib.StarMath.multiply(System.Int32,System.Collections.Generic.IList{System.Int32})">
            <summary>
            Multiplies all elements of a 1D integer array with the integer value.
            </summary>
            <param name = "a">The integer value to be multiplied</param>
            <param name = "B">The integer vector to be multiplied with</param>
            <returns>A 1D integer array that contains the product</returns>
        </member>
        <member name="M:StarMathLib.StarMath.multiply(System.Int32,System.Collections.Generic.IList{System.Int32},System.Int32)">
            <summary>
            Multiplies all elements of a 1D integer array with the integer value.
            </summary>
            <param name="a">The integer value to be multiplied</param>
            <param name="B">The integer vector to be multiplied with</param>
            <param name="length">The length of the vector B. This is an optional argument, but if it is already known 
            - there is a slight speed advantage to providing it.</param>
            <returns>
            A 1D integer array that contains the product
            </returns>
        </member>
        <member name="M:StarMathLib.StarMath.divide(System.Collections.Generic.IList{System.Double},System.Double)">
            <summary>
            Divides all elements of a 1D double array by the double value.
            </summary>
            <param name="B">The vector to be divided</param>
            <param name="a">The double value to be divided by, the divisor.</param>
            <returns>
            A 1D double array that contains the product
            </returns>
        </member>
        <member name="M:StarMathLib.StarMath.divide(System.Collections.Generic.IList{System.Double},System.Double,System.Int32)">
            <summary>
            Divides all elements of a 1D double array by the double value.
            </summary>
            <param name="B">The vector to be divided</param>
            <param name="a">The double value to be divided by, the divisor.</param>
            <param name="length">The length of the vector B. This is an optional argument, but if it is already known
            - there is a slight speed advantage to providing it.</param>
            <returns>
            A 1D double array that contains the product
            </returns>
        </member>
        <member name="M:StarMathLib.StarMath.divide(System.Collections.Generic.IList{System.Int32},System.Double)">
            <summary>
            Divides all elements of a 1D integer array by the double value.
            </summary>
            <param name="B">The vector to be divided</param>
            <param name="a">The double value to be divided by, the divisor.</param>
            <returns>
            A 1D double array that contains the product
            </returns>
        </member>
        <member name="M:StarMathLib.StarMath.divide(System.Collections.Generic.IList{System.Int32},System.Double,System.Int32)">
            <summary>
            Divides all elements of a 1D integer array by the double value.
            </summary>
            <param name="B">The vector to be divided</param>
            <param name="a">The double value to be divided by, the divisor.</param>
            <param name="length">The length of the vector B. This is an optional argument, but if it is already known
            - there is a slight speed advantage to providing it.</param>
            <returns>
            A 1D double array that contains the product
            </returns>
        </member>
        <member name="M:StarMathLib.StarMath.multiply(System.Double[0:,0:],System.Double)">
            <summary>
            Multiplies all elements of a 2D double array with a double value.
            </summary>
            <param name="B">The matrix to be multiplied with</param>
            <param name="a">The double value to be multiplied</param>
            <returns>
            A 2D double array that contains the product
            </returns>
        </member>
        <member name="M:StarMathLib.StarMath.multiply(System.Double,System.Double[0:,0:])">
            <summary>
            Multiplies all elements of a 2D double array with a double value.
            </summary>
            <param name="a">The double value to be multiplied</param>
            <param name="B">The matrix to be multiplied with</param>
            <returns>
            A 2D double array that contains the product
            </returns>
        </member>
        <member name="M:StarMathLib.StarMath.multiply(System.Double[0:,0:],System.Double,System.Int32,System.Int32)">
            <summary>
            Multiplies all elements of a 2D double array with a double value.
            </summary>
            <param name="B">The matrix to be multiplied with</param>
            <param name="a">The double value to be multiplied</param>
            <param name="numRows">The number of rows. This is an optional argument, but if it is already known
            - there is a slight speed advantage to providing it.</param>
            <param name="numCols">The number of cols. This is an optional argument, but if it is already known
            - there is a slight speed advantage to providing it.</param>
            <returns>
            A 2D double array that contains the product
            </returns>
        </member>
        <member name="M:StarMathLib.StarMath.multiply(System.Double,System.Double[0:,0:],System.Int32,System.Int32)">
            <summary>
            Multiplies all elements of a 2D double array with a double value.
            </summary>
            <param name="a">The double value to be multiplied</param>
            <param name="B">The matrix to be multiplied with</param>
            <param name="numRows">The number of rows. This is an optional argument, but if it is already known
            - there is a slight speed advantage to providing it.</param>
            <param name="numCols">The number of cols. This is an optional argument, but if it is already known
            - there is a slight speed advantage to providing it.</param>
            <returns>
            A 2D double array that contains the product
            </returns>
        </member>
        <member name="M:StarMathLib.StarMath.multiply(System.Int32[0:,0:],System.Double)">
            <summary>
            Multiplies all elements of a 2D int array with a double value.
            </summary>
            <param name="B">The matrix to be multiplied with</param>
            <param name="a">The double value to be multiplied</param>
            <returns>
            A 2D double array that contains the product
            </returns>
        </member>
        <member name="M:StarMathLib.StarMath.multiply(System.Double,System.Int32[0:,0:])">
            <summary>
            Multiplies all elements of a 2D int array with a double value.
            </summary>
            <param name="a">The double value to be multiplied</param>
            <param name="B">The matrix to be multiplied with</param>
            <returns>
            A 2D double array that contains the product
            </returns>
        </member>
        <member name="M:StarMathLib.StarMath.multiply(System.Int32[0:,0:],System.Double,System.Int32,System.Int32)">
            <summary>
            Multiplies all elements of a 2D int array with a double value.
            </summary>
            <param name="B">The matrix to be multiplied with</param>
            <param name="a">The double value to be multiplied</param>
            <param name="numRows">The number of rows. This is an optional argument, but if it is already known
            - there is a slight speed advantage to providing it.</param>
            <param name="numCols">The number of cols. This is an optional argument, but if it is already known
            - there is a slight speed advantage to providing it.</param>
            <returns>
            A 2D double array that contains the product
            </returns>
        </member>
        <member name="M:StarMathLib.StarMath.multiply(System.Double,System.Int32[0:,0:],System.Int32,System.Int32)">
            <summary>
            Multiplies all elements of a 2D int array with a double value.
            </summary>
            <param name="a">The double value to be multiplied</param>
            <param name="B">The matrix to be multiplied with</param>
            <param name="numRows">The number of rows. This is an optional argument, but if it is already known
            - there is a slight speed advantage to providing it.</param>
            <param name="numCols">The number of cols. This is an optional argument, but if it is already known
            - there is a slight speed advantage to providing it.</param>
            <returns>
            A 2D double array that contains the product
            </returns>
        </member>
        <member name="M:StarMathLib.StarMath.multiply(System.Int32[0:,0:],System.Int32)">
            <summary>
            Multiplies all elements of a 2D integer array with a integer value.
            </summary>
            <param name="B">The matrix to be multiplied with</param>
            <param name="a">The integer value to be multiplied</param>
            <returns>
            A 2D integer array that contains the product
            </returns>
        </member>
        <member name="M:StarMathLib.StarMath.multiply(System.Int32,System.Int32[0:,0:])">
            <summary>
            Multiplies all elements of a 2D integer array with a integer value.
            </summary>
            <param name="a">The integer value to be multiplied</param>
            <param name="B">The matrix to be multiplied with</param>
            <returns>
            A 2D integer array that contains the product
            </returns>
        </member>
        <member name="M:StarMathLib.StarMath.multiply(System.Int32[0:,0:],System.Int32,System.Int32,System.Int32)">
            <summary>
            Multiplies all elements of a 2D integer array with a integer value.
            </summary>
            <param name="B">The matrix to be multiplied with</param>
            <param name="a">The integer value to be multiplied</param>
            <param name="numRows">The number of rows. This is an optional argument, but if it is already known
            - there is a slight speed advantage to providing it.</param>
            <param name="numCols">The number of cols. This is an optional argument, but if it is already known
            - there is a slight speed advantage to providing it.</param>
            <returns>
            A 2D integer array that contains the product
            </returns>
        </member>
        <member name="M:StarMathLib.StarMath.multiply(System.Int32,System.Int32[0:,0:],System.Int32,System.Int32)">
            <summary>
            Multiplies all elements of a 2D integer array with a integer value.
            </summary>
            <param name="a">The integer value to be multiplied</param>
            <param name="B">The matrix to be multiplied with</param>
            <param name="numRows">The number of rows. This is an optional argument, but if it is already known
            - there is a slight speed advantage to providing it.</param>
            <param name="numCols">The number of cols. This is an optional argument, but if it is already known
            - there is a slight speed advantage to providing it.</param>
            <returns>
            A 2D integer array that contains the product
            </returns>
        </member>
        <member name="M:StarMathLib.StarMath.divide(System.Double[0:,0:],System.Double)">
            <summary>
            Divides all elements of a 2D double array by the double value.
            </summary>
            <param name="B">The matrix to be divided</param>
            <param name="a">The double value to be divided by, the divisor.</param>
            <returns>
            A 2D double array that contains the product
            </returns>
        </member>
        <member name="M:StarMathLib.StarMath.divide(System.Double[0:,0:],System.Double,System.Int32,System.Int32)">
            <summary>
            Divides all elements of a 2D double array by the double value.
            </summary>
            <param name="B">The matrix to be divided</param>
            <param name="a">The double value to be divided by, the divisor.</param>
            <param name="numRows">The number of rows. This is an optional argument, but if it is already known
            - there is a slight speed advantage to providing it.</param>
            <param name="numCols">The number of cols. This is an optional argument, but if it is already known
            - there is a slight speed advantage to providing it.</param>
            <returns>
            A 2D double array that contains the product
            </returns>
        </member>
        <member name="M:StarMathLib.StarMath.divide(System.Int32[0:,0:],System.Double)">
            <summary>
            Divides all elements of a 2D integer array by the double value.
            </summary>
            <param name="B">The matrix to be divided</param>
            <param name="a">The double value to be divided by, the divisor.</param>
            <returns>
            A 2D double array that contains the product
            </returns>
        </member>
        <member name="M:StarMathLib.StarMath.divide(System.Int32[0:,0:],System.Double,System.Int32,System.Int32)">
            <summary>
            Divides all elements of a 2D integer array by the double value.
            </summary>
            <param name="B">The matrix to be divided</param>
            <param name="a">The double value to be divided by, the divisor.</param>
            <param name="numRows">The number of rows. This is an optional argument, but if it is already known
            - there is a slight speed advantage to providing it.</param>
            <param name="numCols">The number of cols. This is an optional argument, but if it is already known
            - there is a slight speed advantage to providing it.</param>
            <returns>
            A 2D double array that contains the product
            </returns>
        </member>
        <member name="M:StarMathLib.StarMath.dotProduct(System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double})">
            <summary>
            The dot product of the two 1D double vectors A and B
            </summary>
            <param name = "A">1D double Array, A</param>
            <param name = "B">1D double Array, B</param>
            <returns>A double value that contains the dot product</returns>
        </member>
        <member name="M:StarMathLib.StarMath.dotProduct(System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double},System.Int32)">
            <summary>
            The dot product of the two 1D double vectors A and B
            </summary>
            <param name="A">1D double Array, A</param>
            <param name="B">1D double Array, B</param>
            <param name="length">The length of both vectors A and B. This is an optional argument, but if it is already known 
            - there is a slight speed advantage to providing it.</param>
            <returns>
            A double value that contains the dot product
            </returns>
        </member>
        <member name="M:StarMathLib.StarMath.dotProduct(System.Collections.Generic.IList{System.Int32},System.Collections.Generic.IList{System.Double})">
            <summary>
            The dot product of the one 1D int vector and one 1D double vector
            </summary>
            <param name = "A">1D int Array, A</param>
            <param name = "B">1D double Array, B</param>
            <returns>A double value that contains the dot product</returns>
        </member>
        <member name="M:StarMathLib.StarMath.dotProduct(System.Collections.Generic.IList{System.Int32},System.Collections.Generic.IList{System.Double},System.Int32)">
            <summary>
            The dot product of the one 1D int vector and one 1D double vector
            </summary>
            <param name="A">1D int Array, A</param>
            <param name="B">1D double Array, B</param>
            <param name="length">The length of both vectors A and B. This is an optional argument, but if it is already known 
            - there is a slight speed advantage to providing it.</param>
            <returns>
            A double value that contains the dot product
            </returns>
        </member>
        <member name="M:StarMathLib.StarMath.dotProduct(System.Collections.Generic.IList{System.Int32},System.Collections.Generic.IList{System.Int32})">
            <summary>
            The dot product of the two 1D int vectors A and B
            </summary>
            <param name = "A">1D int Array, A</param>
            <param name = "B">1D int Array, B</param>
            <returns>A double value that contains the dot product</returns>
        </member>
        <member name="M:StarMathLib.StarMath.dotProduct(System.Collections.Generic.IList{System.Int32},System.Collections.Generic.IList{System.Int32},System.Int32)">
            <summary>
            The dot product of the two 1D int vectors A and B
            </summary>
            <param name="A">1D int Array, A</param>
            <param name="B">1D int Array, B</param>
            <param name="length">The length of both vectors A and B. This is an optional argument, but if it is already known 
            - there is a slight speed advantage to providing it.</param>
            <returns>
            A double value that contains the dot product
            </returns>
        </member>
        <member name="M:StarMathLib.StarMath.crossProduct(System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double})">
            <summary>
            The cross product of two double-precision vectors, A and B,
            </summary>
            <param name = "A">1D double Array, A</param>
            <param name = "B">1D double Array, B</param>
            <returns>A double value that contains the dot product</returns>
        </member>
        <member name="M:StarMathLib.StarMath.crossProduct(System.Collections.Generic.IList{System.Int32},System.Collections.Generic.IList{System.Double})">
            <summary>
            The cross product of an integer vector, A, and a double vector, B.
            </summary>
            <param name = "A">1D integer Array, A</param>
            <param name = "B">1D double Array, B</param>
            <returns>A double value that contains the dot product</returns>
        </member>
        <member name="M:StarMathLib.StarMath.crossProduct(System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Int32})">
            <summary>
            The cross product of an double vector, A, and a integer vector, B.
            </summary>
            <param name = "A">1D double Array, A</param>
            <param name = "B">1D integer Array, B</param>
            <returns>A double value that contains the dot product</returns>
        </member>
        <member name="M:StarMathLib.StarMath.crossProduct(System.Collections.Generic.IList{System.Int32},System.Collections.Generic.IList{System.Int32})">
            <summary>
            The cross product of two integer vectors, A and B.
            </summary>
            <param name = "A">1D integer Array, A</param>
            <param name = "B">1D integer Array, B</param>
            <returns>A double value that contains the dot product</returns>
        </member>
        <member name="M:StarMathLib.StarMath.crossProduct2(System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double})">
            <summary>
            The cross product of two double vectors, A and B, which are of length, 2.
            In actuality, there is no cross-product for 2D. This is shorthand for 2D systems 
            that are really simplifications of 3D. The returned scalar is actually the value in 
            the third (read: z) direction.
            </summary>
            <param name = "A">1D double Array, A</param>
            <param name = "B">1D double Array, B</param>
            <returns></returns>
        </member>
        <member name="M:StarMathLib.StarMath.crossProduct2(System.Collections.Generic.IList{System.Int32},System.Collections.Generic.IList{System.Double})">
            <summary>
             The cross product of an integer vector, A, and a double vector, B, which are of length, 2.
            In actuality, there is no cross-product for 2D. This is shorthand for 2D systems 
            that are really simplifications of 3D. The returned scalar is actually the value in 
            the third (read: z) direction.
            </summary>
            <param name = "A">1D integer Array, A</param>
            <param name = "B">1D double Array, B</param>
            <returns></returns>
        </member>
        <member name="M:StarMathLib.StarMath.crossProduct2(System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Int32})">
            <summary>
             The cross product of an double vector, A, and a integer vector, B, which are of length, 2.
            In actuality, there is no cross-product for 2D. This is shorthand for 2D systems 
            that are really simplifications of 3D. The returned scalar is actually the value in 
            the third (read: z) direction.
            </summary>
            <param name = "A">1D double Array, A</param>
            <param name = "B">1D integer Array, B</param>
            <returns></returns>
        </member>
        <member name="M:StarMathLib.StarMath.crossProduct2(System.Collections.Generic.IList{System.Int32},System.Collections.Generic.IList{System.Int32})">
            <summary>
            The cross product of two integer vectors, A and B, which are of length, 2.
            In actuality, there is no cross-product for 2D. This is shorthand for 2D systems 
            that are really simplifications of 3D. The returned scalar is actually the value in 
            the third (read: z) direction.
            </summary>
            <param name = "A">1D integer Array, A</param>
            <param name = "B">1D integer Array, B</param>
            <returns></returns>
        </member>
        <member name="M:StarMathLib.StarMath.multiplyVectorsIntoAMatrix(System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double})">
            <summary>
            Multiply vector by transpose of another vector to create a matrix.
            Product of each element of array-1 (1D double) with each element of array-2 (1D double)
            C[i,j] = A[i] * B[j]
            </summary>
            <param name="A">1D double array - column vector (1 element per row)</param>
            <param name="B">1D double array - row vector (1 element column)</param>
            <returns>
            2D double array product matrix, value of element [i,j] = A[i] * B[j]
            </returns>
        </member>
        <member name="M:StarMathLib.StarMath.multiplyVectorsIntoAMatrix(System.Collections.Generic.IList{System.Int32},System.Collections.Generic.IList{System.Double})">
            <summary>
            Multiply vector by transpose of another vector to create a matrix.
            Product of each element of array-1 (1D int) with each element of array-2 (1D double)
            C[i,j] = A[i] * B[j]
            </summary>
            <param name="A">1D integer array - column vector (1 element per row)</param>
            <param name="B">1D double array - row vector (1 element column)</param>
            <returns>
            2D double array product matrix, value of element [i,j] = A[i] * B[j]
            </returns>
        </member>
        <member name="M:StarMathLib.StarMath.multiplyVectorsIntoAMatrix(System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Int32})">
            <summary>
            Multiply vector by transpose of another vector to create a matrix.
            Product of each element of array-1 (1D int) with each element of array-2 (1D double)
            C[i,j] = A[i] * B[j]
            </summary>
            <param name = "A">1D double array - column vector (1 element per row)</param>
            <param name = "B">1D integer array - row vector (1 element column)</param>
            <returns>2D double array product matrix, value of element [i,j] = A[i] * B[j]</returns>
        </member>
        <member name="M:StarMathLib.StarMath.multiplyVectorsIntoAMatrix(System.Collections.Generic.IList{System.Int32},System.Collections.Generic.IList{System.Int32})">
            <summary>
            Multiply vector by transpose of another vector to create a matrix.
            Product of each element of array-1 (1D int) with each element of array-2 (1D int)
            C[i,j] = A[i] * B[j]
            </summary>
            <param name="A">1D integer array - column vector (1 element per row)</param>
            <param name="B">1D integer array - row vector (1 element column)</param>
            <returns>
            2D double array product matrix, value of element [i,j] = A[i] * B[j]
            </returns>
        </member>
        <member name="M:StarMathLib.StarMath.multiplyVectorsIntoAMatrix(System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double},System.Int32,System.Int32)">
            <summary>
            Multiply vector by transpose of another vector to create a matrix.
            Product of each element of array-1 (1D double) with each element of array-2 (1D double)
            C[i,j] = A[i] * B[j]
            </summary>
            <param name = "A">1D double array - column vector (1 element per row)</param>
            <param name = "B">1D double array - row vector (1 element column)</param>
            <param name="numRows">The number of rows.</param>
            <param name="numCols">The number of colimns.</param>
            <returns>2D double array product matrix, value of element [i,j] = A[i] * B[j]</returns>
        </member>
        <member name="M:StarMathLib.StarMath.multiplyVectorsIntoAMatrix(System.Collections.Generic.IList{System.Int32},System.Collections.Generic.IList{System.Double},System.Int32,System.Int32)">
            <summary>
            Multiply vector by transpose of another vector to create a matrix.
            Product of each element of array-1 (1D int) with each element of array-2 (1D double)
            C[i,j] = A[i] * B[j]
            </summary>
            <param name="A">1D integer array - column vector (1 element per row)</param>
            <param name="B">1D double array - row vector (1 element column)</param>
            <param name="numRows">The number of rows.</param>
            <param name="numCols">The number of colimns.</param>
            <returns>
            2D double array product matrix, value of element [i,j] = A[i] * B[j]
            </returns>
        </member>
        <member name="M:StarMathLib.StarMath.multiplyVectorsIntoAMatrix(System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Int32},System.Int32,System.Int32)">
            <summary>
            Multiply vector by transpose of another vector to create a matrix.
            Product of each element of array-1 (1D int) with each element of array-2 (1D double)
            C[i,j] = A[i] * B[j]
            </summary>
            <param name = "A">1D double array - column vector (1 element per row)</param>
            <param name = "B">1D integer array - row vector (1 element column)</param>
            <param name="numRows">The number of rows.</param>
            <param name="numCols">The number of colimns.</param>
            <returns>2D double array product matrix, value of element [i,j] = A[i] * B[j]</returns>
        </member>
        <member name="M:StarMathLib.StarMath.multiplyVectorsIntoAMatrix(System.Collections.Generic.IList{System.Int32},System.Collections.Generic.IList{System.Int32},System.Int32,System.Int32)">
            <summary>
            Multiply vector by transpose of another vector to create a matrix.
            Product of each element of array-1 (1D int) with each element of array-2 (1D int)
            C[i,j] = A[i] * B[j]
            </summary>
            <param name="A">1D integer array - column vector (1 element per row)</param>
            <param name="B">1D integer array - row vector (1 element column)</param>
            <param name="numRows">The number of rows.</param>
            <param name="numCols">The number of colimns.</param>
            <returns>
            2D double array product matrix, value of element [i,j] = A[i] * B[j]
            </returns>
        </member>
        <member name="M:StarMathLib.StarMath.multiply(System.Double[0:,0:],System.Double[0:,0:])">
            <summary>
            Product of two matrices (2D double)
            </summary>
            <param name="A">2D double Array, A</param>
            <param name="B">2D double Array, A</param>
            <returns>
            A 2D double array that is the product of the two matrices A and B
            </returns>
            <exception cref="T:System.Exception">Column count in first matrix must be equal to row count in second matrix</exception>
        </member>
        <member name="M:StarMathLib.StarMath.multiply(System.Int32[0:,0:],System.Double[0:,0:])">
            <summary>
            Product of two matrices (2D double)
            </summary>
            <param name="A">2D int Array, A</param>
            <param name="B">2D double Array, A</param>
            <returns>
            A 2D double array that is the product of the two matrices A and B
            </returns>
            <exception cref="T:System.Exception">Column count in first matrix must be equal to row count in second matrix</exception>
        </member>
        <member name="M:StarMathLib.StarMath.multiply(System.Double[0:,0:],System.Int32[0:,0:])">
            <summary>
            Product of two matrices (2D double)
            </summary>
            <param name="A">2D double Array, A</param>
            <param name="B">2D int Array, A</param>
            <returns>
            A 2D double array that is the product of the two matrices A and B
            </returns>
            <exception cref="T:System.Exception">Column count in first matrix must be equal to row count in second matrix</exception>
        </member>
        <member name="M:StarMathLib.StarMath.multiply(System.Int32[0:,0:],System.Int32[0:,0:])">
            <summary>
            Product of two matrices (2D double)
            </summary>
            <param name="A">2D int Array, A</param>
            <param name="B">2D int Array, A</param>
            <returns>
            A 2D int array that is the product of the two matrices A and B
            </returns>
            <exception cref="T:System.Exception">Column count in first matrix must be equal to row count in second matrix</exception>
        </member>
        <member name="M:StarMathLib.StarMath.multiply(System.Double[0:,0:],System.Double[0:,0:],System.Int32,System.Int32)">
            <summary>
            Product of two matrices (2D double)
            </summary>
            <param name="A">2D double Array, A</param>
            <param name="B">2D double Array, A</param>
            <param name="numRows">The number of rows.</param>
            <param name="numCols">The number of columns.</param>
            <returns>
            A 2D double array that is the product of the two matrices A and B
            </returns>
        </member>
        <member name="M:StarMathLib.StarMath.multiply(System.Int32[0:,0:],System.Double[0:,0:],System.Int32,System.Int32)">
            <summary>
            Product of two matrices (2D double)
            </summary>
            <param name="A">2D int Array, A</param>
            <param name="B">2D double Array, A</param>
            <param name="numRows">The number of rows.</param>
            <param name="numCols">The number of columns.</param>
            <returns>
            A 2D double array that is the product of the two matrices A and B
            </returns>
        </member>
        <member name="M:StarMathLib.StarMath.multiply(System.Double[0:,0:],System.Int32[0:,0:],System.Int32,System.Int32)">
            <summary>
            Product of two matrices (2D double)
            </summary>
            <param name="A">2D double Array, A</param>
            <param name="B">2D int Array, A</param>
            <param name="numRows">The number of rows.</param>
            <param name="numCols">The number of columns.</param>
            <returns>
            A 2D double array that is the product of the two matrices A and B
            </returns>
        </member>
        <member name="M:StarMathLib.StarMath.multiply(System.Int32[0:,0:],System.Int32[0:,0:],System.Int32,System.Int32)">
            <summary>
            Product of two matrices (2D double)
            </summary>
            <param name="A">2D int Array, A</param>
            <param name="B">2D int Array, A</param>
            <param name="numRows">The number of rows.</param>
            <param name="numCols">The number of columns.</param>
            <returns>
            A 2D int array that is the product of the two matrices A and B
            </returns>
        </member>
        <member name="M:StarMathLib.StarMath.multiply(System.Double[0:,0:],System.Collections.Generic.IList{System.Double})">
            <summary>
            Product of a matrix and a vector (2D double and 1D double)
            </summary>
            <param name="A">2D double Array</param>
            <param name="B">1D double array - column vector (1 element row)</param>
            <returns>
            A 1D double array that is the product of the two matrices A and B
            </returns>
            <exception cref="T:System.Exception">Column count in first matrix must be equal to row count in second matrix</exception>
        </member>
        <member name="M:StarMathLib.StarMath.multiply(System.Int32[0:,0:],System.Collections.Generic.IList{System.Double})">
            <summary>
            Product of a matrix and a vector (2D double and 1D double)
            </summary>
            <param name="A">2D int Array</param>
            <param name="B">1D double array - column vector (1 element row)</param>
            <returns>
            A 1D double array that is the product of the two matrices A and B
            </returns>
            <exception cref="T:System.Exception">Column count in first matrix must be equal to row count in second matrix</exception>
        </member>
        <member name="M:StarMathLib.StarMath.multiply(System.Double[0:,0:],System.Collections.Generic.IList{System.Int32})">
            <summary>
            Product of two matrices (2D double and 1D double)
            </summary>
            <param name = "A">2D double Array</param>
            <param name = "B">1D int array - column vector (1 element row)</param>
            <returns>A 1D double array that is the product of the two matrices A and B</returns>
        </member>
        <member name="M:StarMathLib.StarMath.multiply(System.Int32[0:,0:],System.Collections.Generic.IList{System.Int32})">
            <summary>
            Product of two matrices (2D double and 1D double)
            </summary>
            <param name = "A">2D int Array</param>
            <param name = "B">1D int array - column vector (1 element row)</param>
            <returns>A 1D int array that is the product of the two matrices A and B</returns>
        </member>
        <member name="M:StarMathLib.StarMath.multiply(System.Collections.Generic.IList{System.Double},System.Double[0:,0:])">
            <summary>
            Product of two matrices (1D double and 2D double)
            </summary>
            <param name="B">2D double Array</param>
            <param name="A">1D double array - row vector (1 element column)</param>
            <returns>
            A 1D double array that is the product of the two matrices A and B
            </returns>
            <exception cref="T:System.Exception">Column count in first matrix must be equal to row count in second matrix</exception>
        </member>
        <member name="M:StarMathLib.StarMath.multiply(System.Collections.Generic.IList{System.Double},System.Int32[0:,0:])">
            <summary>
            Product of two matrices (1D double and 2D double)
            </summary>
            <param name = "A">1D double array - row vector (1 element column)</param>
            <param name = "B">2D int Array</param>
            <returns>A 1D double array that is the product of the two matrices A and B</returns>
        </member>
        <member name="M:StarMathLib.StarMath.multiply(System.Collections.Generic.IList{System.Int32},System.Double[0:,0:])">
            <summary>
            Product of two matrices (1D double and 2D double)
            </summary>
            <param name = "A">1D int array - row vector (1 element column)</param>
            <param name = "B">2D double Array</param>
            <returns>A 1D double array that is the product of the two matrices A and B</returns>
        </member>
        <member name="M:StarMathLib.StarMath.multiply(System.Collections.Generic.IList{System.Int32},System.Int32[0:,0:])">
            <summary>
            Product of two matrices (1D double and 2D double)
            </summary>
            <param name="B">2D int Array</param>
            <param name="A">1D int array - row vector (1 element column)</param>
            <returns>
            A 1D int array that is the product of the two matrices A and B
            </returns>
            <exception cref="T:System.Exception">Column count in first matrix must be equal to row count in second matrix</exception>
        </member>
        <member name="M:StarMathLib.StarMath.multiply(System.Double[0:,0:],System.Collections.Generic.IList{System.Double},System.Int32,System.Int32)">
            <summary>
            Product of a matrix and a vector (2D double and 1D double)
            </summary>
            <param name="A">2D double Array</param>
            <param name="B">1D double array - column vector (1 element row)</param>
            <param name="numRows">The number of rows.</param>
            <param name="numCols">The number of columns.</param>
            <returns>
            A 1D double array that is the product of the two matrices A and B
            </returns>
        </member>
        <member name="M:StarMathLib.StarMath.multiply(System.Int32[0:,0:],System.Collections.Generic.IList{System.Double},System.Int32,System.Int32)">
            <summary>
            Product of a matrix and a vector (2D double and 1D double)
            </summary>
            <param name="A">2D int Array</param>
            <param name="B">1D double array - column vector (1 element row)</param>
            <param name="numRows">The number of rows.</param>
            <param name="numCols">The number of columns.</param>
            <returns>
            A 1D double array that is the product of the two matrices A and B
            </returns>
        </member>
        <member name="M:StarMathLib.StarMath.multiply(System.Double[0:,0:],System.Collections.Generic.IList{System.Int32},System.Int32,System.Int32)">
            <summary>
            Product of two matrices (2D double and 1D double)
            </summary>
            <param name="A">2D double Array</param>
            <param name="B">1D int array - column vector (1 element row)</param>
            <param name="numRows">The number of rows.</param>
            <param name="numCols">The number of columns.</param>
            <returns>
            A 1D double array that is the product of the two matrices A and B
            </returns>
        </member>
        <member name="M:StarMathLib.StarMath.multiply(System.Int32[0:,0:],System.Collections.Generic.IList{System.Int32},System.Int32,System.Int32)">
            <summary>
            Product of two matrices (2D double and 1D double)
            </summary>
            <param name="A">2D int Array</param>
            <param name="B">1D int array - column vector (1 element row)</param>
            <param name="numRows">The number of rows.</param>
            <param name="numCols">The number of columns.</param>
            <returns>
            A 1D int array that is the product of the two matrices A and B
            </returns>
        </member>
        <member name="M:StarMathLib.StarMath.multiply(System.Collections.Generic.IList{System.Double},System.Double[0:,0:],System.Int32,System.Int32)">
            <summary>
            Product of two matrices (1D double and 2D double)
            </summary>
            <param name="B">2D double Array</param>
            <param name="A">1D double array - row vector (1 element column)</param>
            <param name="numRows">The number of rows.</param>
            <param name="numCols">The number of columns.</param>
            <returns>
            A 1D double array that is the product of the two matrices A and B
            </returns>
        </member>
        <member name="M:StarMathLib.StarMath.multiply(System.Collections.Generic.IList{System.Double},System.Int32[0:,0:],System.Int32,System.Int32)">
            <summary>
            Product of two matrices (1D double and 2D double)
            </summary>
            <param name="B">2D int Array</param>
            <param name="A">1D double array - row vector (1 element column)</param>
            <param name="numRows">The number of rows.</param>
            <param name="numCols">The number of columns.</param>
            <returns>
            A 1D double array that is the product of the two matrices A and B
            </returns>
        </member>
        <member name="M:StarMathLib.StarMath.multiply(System.Collections.Generic.IList{System.Int32},System.Double[0:,0:],System.Int32,System.Int32)">
            <summary>
            Product of two matrices (1D double and 2D double)
            </summary>
            <param name="B">2D double Array</param>
            <param name="A">1D int array - row vector (1 element column)</param>
            <param name="numRows">The number of rows.</param>
            <param name="numCols">The number of columns.</param>
            <returns>
            A 1D double array that is the product of the two matrices A and B
            </returns>
        </member>
        <member name="M:StarMathLib.StarMath.multiply(System.Collections.Generic.IList{System.Int32},System.Int32[0:,0:],System.Int32,System.Int32)">
            <summary>
            Product of two matrices (1D double and 2D double)
            </summary>
            <param name="B">2D int Array</param>
            <param name="A">1D int array - row vector (1 element column)</param>
            <param name="numRows">The number of rows.</param>
            <param name="numCols">The number of columns.</param>
            <returns>
            A 1D int array that is the product of the two matrices A and B
            </returns>
        </member>
        <member name="M:StarMathLib.StarMath.EltMultiply(System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double})">
            <summary>
            The element-by-element of the two 1D double vectors A and B
            </summary>
            <param name="A">1D double Array, A</param>
            <param name="B">1D double Array, B</param>
            <returns>
            A double value that contains the element-by-element
            </returns>
            <exception cref="T:System.Exception">Matrix sizes do not match</exception>
        </member>
        <member name="M:StarMathLib.StarMath.EltMultiply(System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double},System.Int32)">
            <summary>
            The element-by-element of the two 1D double vectors A and B
            </summary>
            <param name="A">1D double Array, A</param>
            <param name="B">1D double Array, B</param>
            <param name="length">The length of both vectors A and B. This is an optional argument, but if it is already known
            - there is a slight speed advantage to providing it.</param>
            <returns>
            A double value that contains the element-by-element
            </returns>
        </member>
        <member name="M:StarMathLib.StarMath.EltMultiply(System.Collections.Generic.IList{System.Int32},System.Collections.Generic.IList{System.Double})">
            <summary>
            The element-by-element of the one 1D int vector and one 1D double vector
            </summary>
            <param name="A">1D int Array, A</param>
            <param name="B">1D double Array, B</param>
            <returns>
            A double value that contains the element-by-element
            </returns>
            <exception cref="T:System.Exception">Matrix sizes do not match</exception>
        </member>
        <member name="M:StarMathLib.StarMath.EltMultiply(System.Collections.Generic.IList{System.Int32},System.Collections.Generic.IList{System.Double},System.Int32)">
            <summary>
            The element-by-element of the one 1D int vector and one 1D double vector
            </summary>
            <param name="A">1D int Array, A</param>
            <param name="B">1D double Array, B</param>
            <param name="length">The length of both vectors A and B. This is an optional argument, but if it is already known
            - there is a slight speed advantage to providing it.</param>
            <returns>
            A double value that contains the element-by-element
            </returns>
        </member>
        <member name="M:StarMathLib.StarMath.EltMultiply(System.Collections.Generic.IList{System.Int32},System.Collections.Generic.IList{System.Int32})">
            <summary>
            The element-by-element of the two 1D int vectors A and B
            </summary>
            <param name="A">1D int Array, A</param>
            <param name="B">1D int Array, B</param>
            <returns>
            A double value that contains the element-by-element
            </returns>
            <exception cref="T:System.Exception">Matrix sizes do not match</exception>
        </member>
        <member name="M:StarMathLib.StarMath.EltMultiply(System.Collections.Generic.IList{System.Int32},System.Collections.Generic.IList{System.Int32},System.Int32)">
            <summary>
            The element-by-element of the two 1D int vectors A and B
            </summary>
            <param name="A">1D int Array, A</param>
            <param name="B">1D int Array, B</param>
            <param name="length">The length of both vectors A and B. This is an optional argument, but if it is already known
            - there is a slight speed advantage to providing it.</param>
            <returns>
            A double value that contains the element-by-element
            </returns>
        </member>
        <member name="M:StarMathLib.StarMath.EltMultiply(System.Double[0:,0:],System.Double[0:,0:])">
            <summary>
            Product of two matrices (2D double)
            </summary>
            <param name="A">2D double Array, A</param>
            <param name="B">2D double Array, A</param>
            <returns>
            A 2D double array that is the product of the two matrices A and B
            </returns>
            <exception cref="T:System.Exception">Column count in first matrix must be equal to row count in second matrix</exception>
        </member>
        <member name="M:StarMathLib.StarMath.EltMultiply(System.Int32[0:,0:],System.Double[0:,0:])">
            <summary>
            Product of two matrices (2D double)
            </summary>
            <param name="A">2D int Array, A</param>
            <param name="B">2D double Array, A</param>
            <returns>
            A 2D double array that is the product of the two matrices A and B
            </returns>
            <exception cref="T:System.Exception">Column count in first matrix must be equal to row count in second matrix</exception>
        </member>
        <member name="M:StarMathLib.StarMath.EltMultiply(System.Double[0:,0:],System.Int32[0:,0:])">
            <summary>
            Product of two matrices (2D double)
            </summary>
            <param name="A">2D double Array, A</param>
            <param name="B">2D int Array, A</param>
            <returns>
            A 2D double array that is the product of the two matrices A and B
            </returns>
            <exception cref="T:System.Exception">Column count in first matrix must be equal to row count in second matrix</exception>
        </member>
        <member name="M:StarMathLib.StarMath.EltMultiply(System.Int32[0:,0:],System.Int32[0:,0:])">
            <summary>
            Product of two matrices (2D double)
            </summary>
            <param name="A">2D int Array, A</param>
            <param name="B">2D int Array, A</param>
            <returns>
            A 2D int array that is the product of the two matrices A and B
            </returns>
            <exception cref="T:System.Exception">Column count in first matrix must be equal to row count in second matrix</exception>
        </member>
        <member name="M:StarMathLib.StarMath.EltMultiply(System.Double[0:,0:],System.Double[0:,0:],System.Int32,System.Int32)">
            <summary>
            Product of two matrices (2D double)
            </summary>
            <param name="A">2D double Array, A</param>
            <param name="B">2D double Array, A</param>
            <param name="numRows">The number of rows.</param>
            <param name="numCols">The number of columns.</param>
            <returns>
            A 2D double array that is the product of the two matrices A and B
            </returns>
        </member>
        <member name="M:StarMathLib.StarMath.EltMultiply(System.Int32[0:,0:],System.Double[0:,0:],System.Int32,System.Int32)">
            <summary>
            Product of two matrices (2D double)
            </summary>
            <param name="A">2D int Array, A</param>
            <param name="B">2D double Array, A</param>
            <param name="numRows">The number of rows.</param>
            <param name="numCols">The number of columns.</param>
            <returns>
            A 2D double array that is the product of the two matrices A and B
            </returns>
        </member>
        <member name="M:StarMathLib.StarMath.EltMultiply(System.Double[0:,0:],System.Int32[0:,0:],System.Int32,System.Int32)">
            <summary>
            Product of two matrices (2D double)
            </summary>
            <param name="A">2D double Array, A</param>
            <param name="B">2D int Array, A</param>
            <param name="numRows">The number of rows.</param>
            <param name="numCols">The number of columns.</param>
            <returns>
            A 2D double array that is the product of the two matrices A and B
            </returns>
        </member>
        <member name="M:StarMathLib.StarMath.EltMultiply(System.Int32[0:,0:],System.Int32[0:,0:],System.Int32,System.Int32)">
            <summary>
            Product of two matrices (2D double)
            </summary>
            <param name="A">2D int Array, A</param>
            <param name="B">2D int Array, A</param>
            <param name="numRows">The number of rows.</param>
            <param name="numCols">The number of columns.</param>
            <returns>
            A 2D int array that is the product of the two matrices A and B
            </returns>
        </member>
        <member name="M:StarMathLib.StarMath.add(System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double})">
            <summary>
            Adds arrays A and B
            </summary>
            <param name="A">1D double array 1</param>
            <param name="B">1D double array 2</param>
            <returns>
            1D double array that contains sum of vectros A and B
            </returns>
            <exception cref="T:System.Exception">Matrix sizes do not match</exception>
        </member>
        <member name="M:StarMathLib.StarMath.add(System.Collections.Generic.IList{System.Int32},System.Collections.Generic.IList{System.Double})">
            <summary>
            Adds arrays A and B
            </summary>
            <param name="A">1D int array 1</param>
            <param name="B">1D double array 2</param>
            <returns>
            1D double array that contains sum of vectros A and B
            </returns>
            <exception cref="T:System.Exception">Matrix sizes do not match</exception>
        </member>
        <member name="M:StarMathLib.StarMath.add(System.Collections.Generic.IList{System.Int32},System.Collections.Generic.IList{System.Int32})">
            <summary>
            Adds arrays A and B
            </summary>
            <param name="A">1D int array 1</param>
            <param name="B">1D int array 2</param>
            <returns>
            1D integer array that contains sum of vectros A and B
            </returns>
            <exception cref="T:System.Exception">Matrix sizes do not match</exception>
        </member>
        <member name="M:StarMathLib.StarMath.add(System.Double[0:,0:],System.Double[0:,0:])">
            <summary>
            Adds arrays A and B
            </summary>
            <param name="A">2D double array 1</param>
            <param name="B">2D double array 2</param>
            <returns>
            2D double array that contains sum of vectros A and B
            </returns>
            <exception cref="T:System.Exception">
            Matrix row count do not match
            or
            Matrix column count do not match
            </exception>
        </member>
        <member name="M:StarMathLib.StarMath.add(System.Int32[0:,0:],System.Double[0:,0:])">
            <summary>
            Adds arrays A and B
            </summary>
            <param name="A">2D double array 1</param>
            <param name="B">2D int array 2</param>
            <returns>
            2D double array that contains sum of vectros A and B
            </returns>
            <exception cref="T:System.Exception">
            Matrix row count do not match
            or
            Matrix column count do not match
            </exception>
        </member>
        <member name="M:StarMathLib.StarMath.add(System.Int32[0:,0:],System.Int32[0:,0:])">
            <summary>
            Adds arrays A and B
            </summary>
            <param name="A">2D integer array 1</param>
            <param name="B">2D integer array 2</param>
            <returns>
            2D integer array that contains sum of vectros A and B
            </returns>
            <exception cref="T:System.Exception">
            Matrix row count do not match
            or
            Matrix column count do not match
            </exception>
        </member>
        <member name="M:StarMathLib.StarMath.add(System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double},System.Int32)">
            <summary>
            Adds arrays A and B
            </summary>
            <param name="A">1D double array 1</param>
            <param name="B">1D double array 2</param>
            <param name="length">The length of the array.</param>
            <returns>
            1D double array that contains sum of vectros A and B
            </returns>
        </member>
        <member name="M:StarMathLib.StarMath.add(System.Collections.Generic.IList{System.Int32},System.Collections.Generic.IList{System.Double},System.Int32)">
            <summary>
            Adds arrays A and B
            </summary>
            <param name="A">1D int array 1</param>
            <param name="B">1D double array 2</param>
            <param name="length">The length of the array.</param>
            <returns>
            1D double array that contains sum of vectros A and B
            </returns>
        </member>
        <member name="M:StarMathLib.StarMath.add(System.Collections.Generic.IList{System.Int32},System.Collections.Generic.IList{System.Int32},System.Int32)">
            <summary>
            Adds arrays A and B
            </summary>
            <param name="A">1D int array 1</param>
            <param name="B">1D int array 2</param>
            <param name="length">The length of the array.</param>
            <returns>
            1D integer array that contains sum of vectros A and B
            </returns>
        </member>
        <member name="M:StarMathLib.StarMath.add(System.Double[0:,0:],System.Double[0:,0:],System.Int32,System.Int32)">
            <summary>
            Adds arrays A and B
            </summary>
            <param name="A">2D double array 1</param>
            <param name="B">2D double array 2</param>
            <param name="numRows">The number of rows.</param>
            <param name="numCols">The number of columns.</param>
            <returns>
            2D double array that contains sum of vectros A and B
            </returns>
        </member>
        <member name="M:StarMathLib.StarMath.add(System.Int32[0:,0:],System.Double[0:,0:],System.Int32,System.Int32)">
            <summary>
            Adds arrays A and B
            </summary>
            <param name="A">2D double array 1</param>
            <param name="B">2D int array 2</param>
            <param name="numRows">The number of rows.</param>
            <param name="numCols">The number of columns.</param>
            <returns>
            2D double array that contains sum of vectros A and B
            </returns>
        </member>
        <member name="M:StarMathLib.StarMath.add(System.Int32[0:,0:],System.Int32[0:,0:],System.Int32,System.Int32)">
            <summary>
            Adds arrays A and B
            </summary>
            <param name="A">2D integer array 1</param>
            <param name="B">2D integer array 2</param>
            <param name="numRows">The number of rows.</param>
            <param name="numCols">The number of columns.</param>
            <returns>
            2D integer array that contains sum of vectros A and B
            </returns>
        </member>
        <member name="M:StarMathLib.StarMath.subtract(System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double})">
            <summary>
            Subtracts one vector (B) from the other (A). C = A - B.
            </summary>
            <param name="A">The minuend vector, A (1D double)</param>
            <param name="B">The subtrahend vector, B (1D double)</param>
            <returns>
            Returns the difference vector, C (1D double)
            </returns>
            <exception cref="T:System.Exception">Matrix sizes do not match</exception>
        </member>
        <member name="M:StarMathLib.StarMath.subtract(System.Collections.Generic.IList{System.Int32},System.Collections.Generic.IList{System.Double})">
            <summary>
            Subtracts one vector (B) from the other (A). C = A - B.
            </summary>
            <param name="A">The minuend vector, A (1D int)</param>
            <param name="B">The subtrahend vector, B (1D double)</param>
            <returns>
            Returns the difference vector, C (1D double)
            </returns>
            <exception cref="T:System.Exception">Matrix sizes do not match</exception>
        </member>
        <member name="M:StarMathLib.StarMath.subtract(System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Int32})">
            <summary>
            Subtracts one vector (B) from the other (A). C = A - B.
            </summary>
            <param name="A">The minuend vector, A (1D double)</param>
            <param name="B">The subtrahend vector, B (1D int)</param>
            <returns>
            Returns the difference vector, C (1D double)
            </returns>
            <exception cref="T:System.Exception">Matrix sizes do not match</exception>
        </member>
        <member name="M:StarMathLib.StarMath.subtract(System.Collections.Generic.IList{System.Int32},System.Collections.Generic.IList{System.Int32})">
            <summary>
            Subtracts one vector (B) from the other (A). C = A - B.
            </summary>
            <param name="A">The minuend vector, A (1D int)</param>
            <param name="B">The subtrahend vector, B (1D int)</param>
            <returns>
            Returns the difference vector, C (1D int)
            </returns>
            <exception cref="T:System.Exception">Matrix sizes do not match</exception>
        </member>
        <member name="M:StarMathLib.StarMath.subtract(System.Double[0:,0:],System.Double[0:,0:])">
            <summary>
            Subtracts one matrix (B) from the other (A). C = A - B.
            </summary>
            <param name="A">The minuend matrix, A (2D double).</param>
            <param name="B">The subtrahend matrix, B (2D double).</param>
            <returns>
            Returns the difference matrix, C (2D double)
            </returns>
            <exception cref="T:System.Exception">
            Matrix row count do not match
            or
            Matrix column count do not match
            </exception>
        </member>
        <member name="M:StarMathLib.StarMath.subtract(System.Int32[0:,0:],System.Double[0:,0:])">
            <summary>
            Subtracts one matrix (B) from the other (A). C = A - B.
            </summary>
            <param name="A">The minuend matrix, A (2D int).</param>
            <param name="B">The subtrahend matrix, B (2D double).</param>
            <returns>
            Returns the difference matrix, C (2D double)
            </returns>
            <exception cref="T:System.Exception">
            Matrix row count do not match
            or
            Matrix column count do not match
            </exception>
        </member>
        <member name="M:StarMathLib.StarMath.subtract(System.Double[0:,0:],System.Int32[0:,0:])">
            <summary>
            Subtracts one matrix (B) from the other (A). C = A - B.
            </summary>
            <param name="A">The minuend matrix, A (2D double).</param>
            <param name="B">The subtrahend matrix, B (2D int).</param>
            <returns>
            Returns the difference matrix, C (2D double)
            </returns>
            <exception cref="T:System.Exception">
            Matrix row count do not match
            or
            Matrix column count do not match
            </exception>
        </member>
        <member name="M:StarMathLib.StarMath.subtract(System.Int32[0:,0:],System.Int32[0:,0:])">
            <summary>
            Subtracts one matrix (B) from the other (A). C = A - B.
            </summary>
            <param name="A">The minuend matrix, A (2D integer).</param>
            <param name="B">The subtrahend matrix, B (2D integer).</param>
            <returns>
            Returns the difference matrix, C (2D integer)
            </returns>
            <exception cref="T:System.Exception">
            Matrix row count do not match
            or
            Matrix column count do not match
            </exception>
        </member>
        <member name="M:StarMathLib.StarMath.subtract(System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double},System.Int32)">
            <summary>
            Subtracts one vector (B) from the other (A). C = A - B.
            </summary>
            <param name="A">The minuend vector, A (1D double)</param>
            <param name="B">The subtrahend vector, B (1D double)</param>
            <param name="length">The length of the vectors.</param>
            <returns>
            Returns the difference vector, C (1D double)
            </returns>
        </member>
        <member name="M:StarMathLib.StarMath.subtract(System.Collections.Generic.IList{System.Int32},System.Collections.Generic.IList{System.Double},System.Int32)">
            <summary>
            Subtracts one vector (B) from the other (A). C = A - B.
            </summary>
            <param name="A">The minuend vector, A (1D int)</param>
            <param name="B">The subtrahend vector, B (1D double)</param>
            <param name="length">The length of the vectors.</param>
            <returns>
            Returns the difference vector, C (1D double)
            </returns>
        </member>
        <member name="M:StarMathLib.StarMath.subtract(System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Int32},System.Int32)">
            <summary>
            Subtracts one vector (B) from the other (A). C = A - B.
            </summary>
            <param name="A">The minuend vector, A (1D double)</param>
            <param name="B">The subtrahend vector, B (1D int)</param>
            <param name="length">The length of the vectors.</param>
            <returns>
            Returns the difference vector, C (1D double)
            </returns>
        </member>
        <member name="M:StarMathLib.StarMath.subtract(System.Collections.Generic.IList{System.Int32},System.Collections.Generic.IList{System.Int32},System.Int32)">
            <summary>
            Subtracts one vector (B) from the other (A). C = A - B.
            </summary>
            <param name="A">The minuend vector, A (1D int)</param>
            <param name="B">The subtrahend vector, B (1D int)</param>
            <param name="length">The length of the vectors.</param>
            <returns>
            Returns the difference vector, C (1D int)
            </returns>
        </member>
        <member name="M:StarMathLib.StarMath.subtract(System.Double[0:,0:],System.Double[0:,0:],System.Int32,System.Int32)">
            <summary>
            Subtracts one matrix (B) from the other (A). C = A - B.
            </summary>
            <param name="A">The minuend matrix, A (2D double).</param>
            <param name="B">The subtrahend matrix, B (2D double).</param>
            <param name="numRows">The number of rows.</param>
            <param name="numCols">The number of columns.</param>
            <returns>
            Returns the difference matrix, C (2D double)
            </returns>
        </member>
        <member name="M:StarMathLib.StarMath.subtract(System.Int32[0:,0:],System.Double[0:,0:],System.Int32,System.Int32)">
            <summary>
            Subtracts one matrix (B) from the other (A). C = A - B.
            </summary>
            <param name="A">The minuend matrix, A (2D int).</param>
            <param name="B">The subtrahend matrix, B (2D double).</param>
            <param name="numRows">The number of rows.</param>
            <param name="numCols">The number of columns.</param>
            <returns>
            Returns the difference matrix, C (2D double)
            </returns>
        </member>
        <member name="M:StarMathLib.StarMath.subtract(System.Double[0:,0:],System.Int32[0:,0:],System.Int32,System.Int32)">
            <summary>
            Subtracts one matrix (B) from the other (A). C = A - B.
            </summary>
            <param name="A">The minuend matrix, A (2D double).</param>
            <param name="B">The subtrahend matrix, B (2D int).</param>
            <param name="numRows">The number of rows.</param>
            <param name="numCols">The number of columns.</param>
            <returns>
            Returns the difference matrix, C (2D double)
            </returns>
        </member>
        <member name="M:StarMathLib.StarMath.subtract(System.Int32[0:,0:],System.Int32[0:,0:],System.Int32,System.Int32)">
            <summary>
            Subtracts one matrix (B) from the other (A). C = A - B.
            </summary>
            <param name="A">The minuend matrix, A (2D integer).</param>
            <param name="B">The subtrahend matrix, B (2D integer).</param>
            <param name="numRows">The number of rows.</param>
            <param name="numCols">The number of columns.</param>
            <returns>
            Returns the difference matrix, C (2D integer)
            </returns>
        </member>
        <member name="M:StarMathLib.StarMath.GetEigenValues(System.Double[0:,0:])">
            <summary>
            Gets the eigenvalues for matrix, A.
            </summary>
            <param name="A">the matrix in question, A.</param>
            <returns>The eigenvalues as two arrays of same length/order as A 
            (the first is the real component, the second is the imaginary component).</returns>
        </member>
        <member name="M:StarMathLib.StarMath.GetEigenValuesAndVectors(System.Double[0:,0:],System.Double[][]@)">
            <summary>
            Gets the eigenvalues and eigenvectors for matrix, A.
            </summary>
            <param name="A">the matrix in question, A.</param>
            <param name="eigenVectors">The eigenvectors as an array of arrays/vectors.</param>
            <returns></returns>
        </member>
        <member name="M:StarMathLib.StarMath.Max(System.Double[0:,0:])">
            <summary>
            Finds the maximum value in the given 2D double array
            </summary>
            <param name="A">The array to be searched for</param>
            <returns>
            A double value that is the maximum of A
            </returns>
        </member>
        <member name="M:StarMathLib.StarMath.Max(System.Double[0:,0:],System.Int32@,System.Int32@)">
            <summary>
            Finds the maximum value in the given 2D double array and returns the row and column indices along with it.
            </summary>
            <param name="A">The array to be searched for</param>
            <param name="rowIndex">Index of the row.</param>
            <param name="colIndex">Index of the col.</param>
            <returns>
            the maximum value
            </returns>
        </member>
        <member name="M:StarMathLib.StarMath.Max(System.Int32[0:,0:])">
            <summary>
            Finds the maximum value in the given 2D integer array
            </summary>
            <param name="A">The array to be searched for</param>
            <returns>
            An integer value that is the maximum of A
            </returns>
        </member>
        <member name="M:StarMathLib.StarMath.Max(System.Int32[0:,0:],System.Int32@,System.Int32@)">
            <summary>
            Finds the maximum value in the given 2D double array and returns the row and column indices along with it.
            </summary>
            <param name="A">The array to be searched for</param>
            <param name="rowIndex">Index of the row.</param>
            <param name="colIndex">Index of the col.</param>
            <returns>
            the maximum value 
            </returns>
        </member>
        <member name="M:StarMathLib.StarMath.Min(System.Double[0:,0:])">
            <summary>
            Finds the minimum value in the given 2D double array
            </summary>
            <param name="A">The array to be searched for</param>
            <returns>
            A double value that is the minimum of A
            </returns>
        </member>
        <member name="M:StarMathLib.StarMath.Min(System.Double[0:,0:],System.Int32@,System.Int32@)">
            <summary>
            Finds the minimum value in the given 2D double array and returns the row and column indices along with it.
            </summary>
            <param name="A">The array to be searched for</param>
            <param name="rowIndex">Index of the row.</param>
            <param name="colIndex">Index of the col.</param>
            <returns>
            the minimum value
            </returns>
        </member>
        <member name="M:StarMathLib.StarMath.Min(System.Int32[0:,0:])">
            <summary>
            Finds the minimum value in the given 2D integer array
            </summary>
            <param name="A">The array to be searched for</param>
            <returns>
            An integer value that is the minimum of A
            </returns>
        </member>
        <member name="M:StarMathLib.StarMath.Min(System.Int32[0:,0:],System.Int32@,System.Int32@)">
            <summary>
            Finds the minimum value in the given 2D double array and returns the row and column indices along with it.
            </summary>
            <param name="A">The array to be searched for</param>
            <param name="rowIndex">Index of the row.</param>
            <param name="colIndex">Index of the col.</param>
            <returns>
            the minimum value 
            </returns>
        </member>
        <member name="M:StarMathLib.StarMath.Max(System.Collections.Generic.IList{System.Int32})">
            <summary>
            Finds the maximum value in the given 1D integer array
            </summary>
            <param name="A">The array to be searched for</param>
            <returns>
            An integer value that is the maximum of A
            </returns>
        </member>
        <member name="M:StarMathLib.StarMath.Min(System.Collections.Generic.IList{System.Int32})">
            <summary>
            Finds the minimum value in the given 1D integer array
            </summary>
            <param name="A">The array to be searched for</param>
            <returns>
            An integer value that is the minimum of A
            </returns>
        </member>
        <member name="M:StarMathLib.StarMath.Max(System.Collections.Generic.IList{System.Double})">
            <summary>
            Finds the maximum value in the given 1D double array
            </summary>
            <param name="A">The array to be searched for</param>
            <returns>
            An double value that is the maximum of A
            </returns>
        </member>
        <member name="M:StarMathLib.StarMath.Min(System.Collections.Generic.IList{System.Double})">
            <summary>
            Finds the minimum value in the given 1D double array
            </summary>
            <param name="A">The array to be searched for</param>
            <returns>
            An double value that is the minimum of A
            </returns>
        </member>
        <member name="M:StarMathLib.StarMath.Min(System.Collections.Generic.IList{System.Double},System.Int32@)">
            <summary>
            Finds the minimum value in the given 1D double array and returns its index along with it.
            </summary>
            <param name="A">The array to be searched for</param>
            <param name="index">The index.</param>
            <returns>
            the minimum value
            </returns>
        </member>
        <member name="M:StarMathLib.StarMath.Max(System.Collections.Generic.IList{System.Double},System.Int32@)">
            <summary>
            Finds the minimum value in the given 1D double array and returns its index along with it.
            </summary>
            <param name="A">The array to be searched for</param>
            <param name="index">The index.</param>
            <returns>
            the maximum value
            </returns>
        </member>
        <member name="M:StarMathLib.StarMath.Min(System.Collections.Generic.IList{System.Int32},System.Int32@)">
            <summary>
            Finds the minimum value in the given 1D double array and returns its index along with it.
            </summary>
            <param name="A">The array to be searched for</param>
            <param name="index">The index.</param>
            <returns>
            the minimum value
            </returns>
        </member>
        <member name="M:StarMathLib.StarMath.Max(System.Collections.Generic.IList{System.Int32},System.Int32@)">
            <summary>
            Finds the minimum value in the given 1D double array and returns its index along with it.
            </summary>
            <param name="A">The array to be searched for</param>
            <param name="index">The index.</param>
            <returns>
            the maximum value
            </returns>
        </member>
        <member name="M:StarMathLib.StarMath.find(System.Collections.Generic.IList{System.Double},System.Double)">
            <summary>
            Finds all the indices for the specified find value.
            </summary>
            <param name="A">The A.</param>
            <param name="FindVal">The find value.</param>
            <returns></returns>
        </member>
        <member name="M:StarMathLib.StarMath.find(System.Double,System.Collections.Generic.IList{System.Double})">
            <summary>
            Finds all the indices for the specified find value.
            </summary>
            <param name="FindVal">The find value.</param>
            <param name="A">The A.</param>
            <returns></returns>
        </member>
        <member name="M:StarMathLib.StarMath.find(System.Collections.Generic.IList{System.Int32},System.Int32)">
            <summary>
            Finds all the indices for the specified find value.
            </summary>
            <param name="FindVal">The find value.</param>
            <param name="A">The A.</param>
            <returns></returns>
        </member>
        <member name="M:StarMathLib.StarMath.find(System.Int32,System.Collections.Generic.IList{System.Int32})">
            <summary>
            Finds all the indices for the specified find value.
            </summary>
            <param name="FindVal">The find value.</param>
            <param name="A">The A.</param>
            <returns></returns>
        </member>
        <member name="M:StarMathLib.StarMath.find(System.Double[0:,0:],System.Double)">
            <summary>
            Finds the [rowIndex, colIndex] for the specified find value.
            </summary>
            <param name="A">The A.</param>
            <param name="FindVal">The find value.</param>
            <returns></returns>
        </member>
        <member name="M:StarMathLib.StarMath.find(System.Double,System.Double[0:,0:])">
            <summary>
            Finds the [rowIndex, colIndex] for the specified find value.
            </summary>
            <param name="FindVal">The find value.</param>
            <param name="A">The A.</param>
            <returns></returns>
        </member>
        <member name="M:StarMathLib.StarMath.find(System.Int32[0:,0:],System.Int32)">
            <summary>
            Finds the [rowIndex, colIndex] for the specified find value.
            </summary>
            <param name="A">The A.</param>
            <param name="FindVal">The find value.</param>
            <returns></returns>
        </member>
        <member name="M:StarMathLib.StarMath.find(System.Int32,System.Int32[0:,0:])">
            <summary>
            Finds the [rowIndex, colIndex] for the specified find value.
            </summary>
            <param name="FindVal">The find value.</param>
            <param name="A">The A.</param>
            <returns></returns>
        </member>
        <member name="M:StarMathLib.StarMath.inverseUpper(System.Double[0:,0:])">
            <summary>
            Inverses the matrix A only if the matrix has already been
            "triangularized" - meaning there are no elements in the bottom
            triangle - A[i,j]=0.0 where j&gt;i
            </summary>
            <param name="A">The matrix to invert. This matrix is unchanged by this function.</param>
            <returns>
            The inverted matrix, A^-1.
            </returns>
            <exception cref="T:System.Exception">Matrix cannnot be inverted. Can only invert sqare matrices.</exception>
        </member>
        <member name="M:StarMathLib.StarMath.inverseUpper(System.Int32[0:,0:])">
            <summary>
            Inverses the matrix A only if the matrix has already been
            "triangularized" - meaning there are no elements in the bottom
            triangle - A[i,j]=0.0 where j&gt;i
            </summary>
            <param name="A">The matrix to invert. This matrix is unchanged by this function.</param>
            <returns>
            The inverted matrix, A^-1.
            </returns>
            <exception cref="T:System.Exception">Matrix cannnot be inverted. Can only invert sqare matrices.</exception>
        </member>
        <member name="M:StarMathLib.StarMath.inverse(System.Double[0:,0:])">
            <summary>
            Inverses the matrix A only if the diagonal is all non-zero.
            A[i,i] != 0.0
            </summary>
            <param name="A">The matrix to invert. This matrix is unchanged by this function.</param>
            <returns>
            The inverted matrix, A^-1.
            </returns>
            <exception cref="T:System.Exception">Matrix cannnot be inverted. Can only invert sqare matrices.</exception>
        </member>
        <member name="M:StarMathLib.StarMath.inverse(System.Int32[0:,0:])">
            <summary>
            Inverses the matrix A only if the diagonal is all non-zero.
            A[i,i] != 0.0
            </summary>
            <param name="A">The matrix to invert. This matrix is unchanged by this function.</param>
            <returns>
            The inverted matrix, A^-1.
            </returns>
            <exception cref="T:System.Exception">Matrix cannnot be inverted. Can only invert sqare matrices.</exception>
        </member>
        <member name="M:StarMathLib.StarMath.LUDecomposition(System.Double[0:,0:],System.Double[0:,0:]@,System.Double[0:,0:]@)">
            <summary>
            Returns the LU decomposition of A in a new matrix.
            </summary>
            <param name="A">The matrix to invert. This matrix is unchanged by this function.</param>
            <param name="L">The L matrix is output where the diagonal elements are included and not (necessarily) equal to one.</param>
            <param name="U">The U matrix is output where the diagonal elements are all equal to one.</param>
            <exception cref="T:System.Exception">Matrix cannnot be inverted. Can only invert sqare matrices.</exception>
        </member>
        <member name="M:StarMathLib.StarMath.LUDecomposition(System.Double[0:,0:],System.Int32)">
            <summary>
            Returns the LU decomposition of A in a new matrix.
            </summary>
            <param name="A">The matrix to invert. This matrix is unchanged by this function.</param>
            <param name="length">The length/order/number of rows of matrix, A.</param>
            <returns>
            A matrix of equal size to A that combines the L and U. Here the diagonals belongs to L and the U's diagonal elements are all 1.
            </returns>
            <exception cref="T:System.Exception">LU Decomposition can only be determined for square matrices.</exception>
        </member>
        <member name="M:StarMathLib.StarMath.LUDecomposition(System.Int32[0:,0:],System.Double[0:,0:]@,System.Double[0:,0:]@)">
            <summary>
            Returns the LU decomposition of A in a new matrix.
            </summary>
            <param name="A">The matrix to invert. This matrix is unchanged by this function.</param>
            <param name="L">The L matrix is output where the diagonal elements are included and not (necessarily) equal to one.</param>
            <param name="U">The U matrix is output where the diagonal elements are all equal to one.</param>
            <exception cref="T:System.Exception">LU Decomposition can only be determined for square matrices.</exception>
        </member>
        <member name="M:StarMathLib.StarMath.LUDecomposition(System.Int32[0:,0:],System.Int32)">
            <summary>
            Returns the LU decomposition of A in a new matrix.
            </summary>
            <param name = "A">The matrix to invert. This matrix is unchanged by this function.</param>
            <param name="length">The length of the number of rows/columns in the square matrix, A.</param>
            <returns>A matrix of equal size to A that combines the L and U. Here the diagonals belongs to L and the U's diagonal elements are all 1.</returns>
        </member>
        <member name="M:StarMathLib.StarMath.transpose(System.Double[0:,0:])">
            <summary>
            Transposes the matrix, A.
            </summary>
            <param name="A">The matrix to transpose. This matrix is unchanged by this function.</param>
            <returns>
            The transponse of A.
            </returns>
            <exception cref="T:System.Exception">The matrix, A, is null.</exception>
        </member>
        <member name="M:StarMathLib.StarMath.transpose(System.Int32[0:,0:])">
            <summary>
            Transposes the matrix, A.
            </summary>
            <param name="A">The matrix to transpose. This matrix is unchanged by this function.</param>
            <returns>
            The transponse of A.
            </returns>
            <exception cref="T:System.Exception">The matrix, A, is null.</exception>
        </member>
        <member name="M:StarMathLib.StarMath.determinant(System.Double[0:,0:])">
            <summary>
            Returns the determinant of matrix, A.
            </summary>
            <param name="A">The input argument matrix. This matrix is unchanged by this function.</param>
            <returns>
            a single value representing the matrix's determinant.
            </returns>
            <exception cref="T:System.Exception">
            The matrix, A, is null.
            or
            The determinant is only possible for square matrices.
            </exception>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:StarMathLib.StarMath.determinant(System.Int32[0:,0:])">
            <summary>
            Returns the determinant of matrix, A.
            </summary>
            <param name="A">The input argument matrix. This matrix is unchanged by this function.</param>
            <returns>
            a single value representing the matrix's determinant.
            </returns>
            <exception cref="T:System.Exception">
            The matrix, A, is null.
            or
            The determinant is only possible for square matrices.
            </exception>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:StarMathLib.StarMath.determinantBig(System.Int32[0:,0:],System.Int32)">
            <summary>
            Returns the determinant of matrix, A. Only used internally for matrices larger than 3.
            </summary>
            <param name="A">The input argument matrix. This matrix is unchanged by this function.</param>
            <param name="length">The length of the side of the square matrix.</param>
            <returns>
            a single value representing the matrix's determinant.
            </returns>
        </member>
        <member name="M:StarMathLib.StarMath.makeZero(System.Int32)">
            <summary>
            Makes a sqare matrix of size p by p of all zeroes.
            </summary>
            <param name="p">The size (number of both rows and columns).</param>
            <returns>
            an empty (all zeroes) square matrix (2D double).
            </returns>
            <exception cref="T:System.Exception">The size, p, must be a positive integer.</exception>
        </member>
        <member name="M:StarMathLib.StarMath.makeZeroInt(System.Int32)">
            <summary>
            Makes a sqare matrix of size p by p of all zeroes.
            </summary>
            <param name="p">The size (number of both rows and columns).</param>
            <returns>
            an empty (all zeroes) square matrix (2D int).
            </returns>
            <exception cref="T:System.Exception">The size, p, must be a positive integer.</exception>
        </member>
        <member name="M:StarMathLib.StarMath.makeZeroVector(System.Int32)">
            <summary>
            Makes the zero vector.
            </summary>
            <param name="p">The p.</param>
            <returns></returns>
            <exception cref="T:System.Exception">The size, p, must be a positive integer.</exception>
        </member>
        <member name="M:StarMathLib.StarMath.makeZeroIntVector(System.Int32)">
            <summary>
            Makes the zero int vector.
            </summary>
            <param name="p">The p.</param>
            <returns></returns>
            <exception cref="T:System.Exception">The size, p, must be a positive integer.</exception>
        </member>
        <member name="M:StarMathLib.StarMath.makeZero(System.Int32,System.Int32)">
            <summary>
            Makes a matrix of size numRows by numCols of all zeroes.
            </summary>
            <param name="numRows">The number of rows.</param>
            <param name="numCols">The number of columns.</param>
            <returns>
            an empty (all zeroes) matrix.
            </returns>
            <exception cref="T:System.Exception">
            The number of rows, numRows, must be a positive integer.
            or
            The number of columns, numCols, must be a positive integer.
            </exception>
        </member>
        <member name="M:StarMathLib.StarMath.makeZeroInt(System.Int32,System.Int32)">
            <summary>
            Makes a matrix of size numRows by numCols of all zeroes.
            </summary>
            <param name="numRows">The number of rows.</param>
            <param name="numCols">The number of columns.</param>
            <returns>
            an empty (all zeroes) matrix.
            </returns>
            <exception cref="T:System.Exception">
            The number of rows, numRows, must be a positive integer.
            or
            The number of columns, numCols, must be a positive integer.
            </exception>
        </member>
        <member name="M:StarMathLib.StarMath.makeIdentity(System.Int32)">
            <summary>
            Makes an identity matrix of size p by p.
            </summary>
            <param name="p">The size (number of both rows and columns).</param>
            <returns>
            the identity matrix, I.
            </returns>
            <exception cref="T:System.Exception">The size, p, must be a positive integer.</exception>
        </member>
        <member name="M:StarMathLib.StarMath.makeIdentityInt(System.Int32)">
            <summary>
            Makes an identity matrix of size p by p.
            </summary>
            <param name="p">The size (number of both rows and columns).</param>
            <returns>
            the identity matrix, I.
            </returns>
            <exception cref="T:System.Exception">The size, p, must be a positive integer.</exception>
        </member>
        <member name="M:StarMathLib.StarMath.makeLinearProgression(System.Double,System.Double,System.Double)">
            <summary>
            Makes a linear progression from start to, but not including, the end.
            </summary>
            <param name="end">The end value (which will not be reached).</param>
            <param name="interval">The interval amount between values.</param>
            <param name="start">The starting value (the value of the first element).</param>
            <returns>
            Returns a double array with a series of numbers starting from start until the end
            with a distance of the interval between any pair of numbers.
            </returns>
        </member>
        <member name="M:StarMathLib.StarMath.makeLinearProgression(System.Int32,System.Int32,System.Int32)">
            <summary>
            Makes a linear progression from start to, but not including, the end.
            </summary>
            <param name="end">The end value (which will not be reached).</param>
            <param name="interval">The interval amount between values.</param>
            <param name="start">The starting value (the value of the first element).</param>
            <returns>
            Returns an integer array with a series of numbers starting from start until the end
            with a distance of the interval between any pair of numbers.
            </returns>
        </member>
        <member name="M:StarMathLib.StarMath.makeLinearProgression(System.Double,System.Int32,System.Double)">
            <summary>
            Makes a linear progression from start to, but not including, the end.
            </summary>
            <param name="end">The end value (which will not be reached).</param>
            <param name="numElements">The number of elements.</param>
            <param name="start">The starting value (the value of the first element).</param>
            <returns>
            Returns a double array with a series of numbers starting from start until the end
            with a distance of the interval between any pair of numbers.
            </returns>
        </member>
        <member name="M:StarMathLib.StarMath.GetColumn(System.Double[0:,0:],System.Int32)">
            <summary>
            Gets the column of matrix, A.
            </summary>
            <param name="A">The matrix, A.</param>
            <param name="colIndex">The column index.</param>
            <returns>
            A double array that contains the requested column
            </returns>
        </member>
        <member name="M:StarMathLib.StarMath.GetColumn(System.Int32[0:,0:],System.Int32)">
            <summary>
            Gets the column of matrix, A.
            </summary>
            <param name="A">The matrix, A.</param>
            <param name="colIndex">The column index.</param>
            <returns>
            A double array that contains the requested column
            </returns>
        </member>
        <member name="M:StarMathLib.StarMath.GetColumn(System.Int32,System.Double[0:,0:])">
            <summary>
            Gets a column of matrix, A.
            </summary>
            <param name = "colIndex">The column index.</param>
            <param name = "A">The matrix, A.</param>
            <returns>A double array that contains the requested column</returns>
        </member>
        <member name="M:StarMathLib.StarMath.GetColumn(System.Int32,System.Int32[0:,0:])">
            <summary>
            Gets a column of matrix, A.
            </summary>
            <param name = "colIndex">The column index.</param>
            <param name = "A">The matrix, A.</param>
            <returns>A double array that contains the requested column</returns>
        </member>
        <member name="M:StarMathLib.StarMath.GetRow(System.Double[0:,0:],System.Int32)">
            <summary>
            Gets a row of matrix, A.
            </summary>
            <param name = "rowIndex">The row index.</param>
            <param name = "A">The matrix, A.</param>
            <returns>A double array that contains the requested row</returns>
        </member>
        <member name="M:StarMathLib.StarMath.GetRow(System.Int32[0:,0:],System.Int32)">
            <summary>
            Gets a row of matrix, A.
            </summary>
            <param name="A">The matrix, A.</param>
            <param name="rowIndex">The row index.</param>
            <returns>
            A double array that contains the requested row
            </returns>
        </member>
        <member name="M:StarMathLib.StarMath.GetRow(System.Int32,System.Double[0:,0:])">
            <summary>
            Gets a row of matrix, A.
            </summary>
            <param name = "rowIndex">The row index.</param>
            <param name = "A">The matrix, A.</param>
            <returns>A double array that contains the requested row</returns>
        </member>
        <member name="M:StarMathLib.StarMath.GetRow(System.Int32,System.Int32[0:,0:])">
            <summary>
            Gets a row of matrix, A.
            </summary>
            <param name = "rowIndex">The row index.</param>
            <param name = "A">The matrix, A.</param>
            <returns>A double array that contains the requested row</returns>
        </member>
        <member name="M:StarMathLib.StarMath.SetRow(System.Double[0:,0:],System.Int32,System.Collections.Generic.IList{System.Double})">
            <summary>
            Sets/Replaces the given row of matrix A with the vector v.
            </summary>
            <param name="A">The matrix, A.</param>
            <param name="rowIndex">The index of the row, rowIndex.</param>
            <param name="v">The vector, v.</param>
        </member>
        <member name="M:StarMathLib.StarMath.SetRow(System.Int32[0:,0:],System.Int32,System.Collections.Generic.IList{System.Int32})">
            <summary>
            Sets/Replaces the given row of matrix A with the vector v.
            </summary>
            <param name="A">The matrix, A.</param>
            <param name="rowIndex">The index of the row, rowIndex.</param>
            <param name="v">The vector, v.</param>
        </member>
        <member name="M:StarMathLib.StarMath.SetRow(System.Int32,System.Double[0:,0:],System.Collections.Generic.IList{System.Double})">
            <summary>
            Sets/Replaces the given row of matrix A with the vector v.
            </summary>
            <param name = "rowIndex">The index of the row, rowIndex.</param>
            <param name = "A">The matrix, A.</param>
            <param name = "v">The vector, v.</param>
        </member>
        <member name="M:StarMathLib.StarMath.SetRow(System.Int32,System.Int32[0:,0:],System.Collections.Generic.IList{System.Int32})">
            <summary>
            Sets/Replaces the given row of matrix A with the vector v.
            </summary>
            <param name = "rowIndex">The index of the row, rowIndex.</param>
            <param name = "A">The matrix, A.</param>
            <param name = "v">The vector, v.</param>
        </member>
        <member name="M:StarMathLib.StarMath.SetColumn(System.Double[0:,0:],System.Int32,System.Collections.Generic.IList{System.Double})">
            <summary>
            Sets/Replaces the given column of matrix A with the vector v.
            </summary>
            <param name="A">The matrix, A.</param>
            <param name="colIndex">The index of the column, rowIndex.</param>
            <param name="v">The vector, v.</param>
        </member>
        <member name="M:StarMathLib.StarMath.SetColumn(System.Int32[0:,0:],System.Int32,System.Collections.Generic.IList{System.Int32})">
            <summary>
            Sets/Replaces the given column of matrix A with the vector v.
            </summary>
            <param name="A">The matrix, A.</param>
            <param name="colIndex">The index of the column, rowIndex.</param>
            <param name="v">The vector, v.</param>
        </member>
        <member name="M:StarMathLib.StarMath.SetColumn(System.Int32,System.Double[0:,0:],System.Collections.Generic.IList{System.Double})">
            <summary>
            Sets/Replaces the given column of matrix A with the vector v.
            </summary>
            <param name = "colIndex">Index of the col.</param>
            <param name = "A">The A.</param>
            <param name = "v">The v.</param>
        </member>
        <member name="M:StarMathLib.StarMath.SetColumn(System.Int32,System.Int32[0:,0:],System.Collections.Generic.IList{System.Int32})">
            <summary>
            Sets/Replaces the given column of matrix A with the vector v.
            </summary>
            <param name = "colIndex">Index of the col.</param>
            <param name = "A">The A.</param>
            <param name = "v">The v.</param>
        </member>
        <member name="M:StarMathLib.StarMath.GetColumns(System.Double[0:,0:],System.Collections.Generic.IList{System.Int32})">
            <summary>
            Get more than one column from a given 2D double array.
            </summary>
            <param name="A">2D double array from which columns need to be extracted</param>
            <param name="ColumnList">The column list indices.</param>
            <returns>
            A  2D double array that contains all the requested columns
            </returns>
        </member>
        <member name="M:StarMathLib.StarMath.GetColumns(System.Int32[0:,0:],System.Collections.Generic.IList{System.Int32})">
            <summary>
            Get more than one column from a given 2D int array.
            </summary>
            <param name="A">2D int array from which columns need to be extracted</param>
            <param name="ColumnList">The column list indices.</param>
            <returns>
            A  2D int array that contains all the requested columns
            </returns>
        </member>
        <member name="M:StarMathLib.StarMath.GetColumns(System.Collections.Generic.IList{System.Int32},System.Double[0:,0:])">
            <summary>
            Get more than one column from a given 2D double array.
            </summary>
            <param name="ColumnList">The column list indices.</param>
            <param name="A">2D double array from which columns need to be extracted</param>
            <returns>
            A  2D double array that contains all the requested columns
            </returns>
        </member>
        <member name="M:StarMathLib.StarMath.GetColumns(System.Collections.Generic.IList{System.Int32},System.Int32[0:,0:])">
            <summary>
            Get more than one column from a given 2D double array.
            </summary>
            <param name="ColumnList">The column list indices.</param>
            <param name="A">2D int array from which columns need to be extracted</param>
            <returns>
            A  2D int array that contains all the requested columns
            </returns>
        </member>
        <member name="M:StarMathLib.StarMath.GetRows(System.Double[0:,0:],System.Collections.Generic.IList{System.Int32})">
            <summary>
            Get more than one row from a given 2D double array.
            </summary>
            <param name="A">2D double array from which rows need to be extracted</param>
            <param name="RowList">The row list indices.</param>
            <returns>
            A  2D double array that contains all the requested rows
            </returns>
        </member>
        <member name="M:StarMathLib.StarMath.GetRows(System.Int32[0:,0:],System.Collections.Generic.IList{System.Int32})">
            <summary>
            Get more than one row from a given 2D int array.
            </summary>
            <param name="A">2D int array from which rows need to be extracted</param>
            <param name="RowList">The row list indices.</param>
            <returns>
            A  2D int array that contains all the requested rows
            </returns>
        </member>
        <member name="M:StarMathLib.StarMath.GetRows(System.Collections.Generic.IList{System.Int32},System.Double[0:,0:])">
            <summary>
            Get more than one row from a given 2D double array.  
            </summary>
            <param name = "RowList">The row list indices.</param>
            <param name = "A">2D double array from which rows need to be extracted</param>
            <returns>A  2D double array that contains all the requested rows</returns>
        </member>
        <member name="M:StarMathLib.StarMath.GetRows(System.Collections.Generic.IList{System.Int32},System.Int32[0:,0:])">
            <summary>
            Get more than one row from a given 2D double array.  
            </summary>
            <param name = "RowList">The row list indices.</param>
            <param name = "A">2D int array from which rows need to be extracted</param>
            <returns>A  2D int array that contains all the requested rows</returns>
        </member>
        <member name="M:StarMathLib.StarMath.GetPartialVector(System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Int32})">
            <summary>
            Get some portion of a vector and put in a new vector.  
            </summary>
            <param name="A">1D double array from which elements need to be extracted</param>
            <param name="ColumnList">The indices of the elements.</param>
            <returns>
            A single 1D double array that contains all the requested elements.
            </returns>
        </member>
        <member name="M:StarMathLib.StarMath.GetPartialVector(System.Collections.Generic.IList{System.Int32},System.Collections.Generic.IList{System.Int32})">
            <summary>
            Get some portion of a vector and put in a new vector.
            </summary>
            <param name="A">1D double array from which elements need to be extracted</param>
            <param name="ColumnList">The indices of the elements.</param>
            <returns>
            A single 1D double array that contains all the requested elements.
            </returns>
        </member>
        <member name="M:StarMathLib.StarMath.JoinCol(System.Double[0:,0:],System.Double[0:,0:])">
            <summary>
            Jions two 2D double arrays side by side and returns the results. The given variables remain unchanged
            </summary>
            <param name = "Matrix1">The Matrix that comes on the left.</param>
            <param name = "Matrix2">Matrix that is attached to the right</param>
            <returns>A 2D double array that has Matrix1 and Matrix2 side by side</returns>
        </member>
        <member name="M:StarMathLib.StarMath.JoinRow(System.Double[0:,0:],System.Double[0:,0:])">
            <summary>
            Joins two 2D double arrays one under the other and returns the results. The given variables remain unchanged
            </summary>
            <param name="Matrix1">The Matrix that comes on the top.</param>
            <param name="Matrix2">Matrix that is attached to the bottom</param>
            <returns>
            A 2D double array that has Matrix1 and Matrix2 one below the other
            </returns>
            <exception cref="T:System.Exception">MatrixMath Size Error: Column dimensions do not match for matrix1 and matrix2</exception>
        </member>
        <member name="M:StarMathLib.StarMath.JoinCol(System.Int32[0:,0:],System.Int32[0:,0:])">
            <summary>
            Jions two 2D int arrays side by side and returns the results. The given variables remain unchanged
            </summary>
            <param name = "Matrix1">The Matrix that comes on the left.</param>
            <param name = "Matrix2">Matrix that is attached to the right</param>
            <returns>A 2D int array that has Matrix1 and Matrix2 side by side</returns>
        </member>
        <member name="M:StarMathLib.StarMath.JoinRow(System.Int32[0:,0:],System.Int32[0:,0:])">
            <summary>
            Joins two 2D int arrays one under the other and returns the results. The given variables remain unchanged
            </summary>
            <param name="Matrix1">The Matrix that comes on the top.</param>
            <param name="Matrix2">Matrix that is attached to the bottom</param>
            <returns>
            A 2D int array that has Matrix1 and Matrix2 one below the other
            </returns>
            <exception cref="T:System.Exception">MatrixMath Size Error: Column dimensions do not match for matrix1 and matrix2</exception>
        </member>
        <member name="M:StarMathLib.StarMath.JoinVectors(System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double})">
            <summary>
            Concatenates two 1D double arrays and returns the result. The given variables remain unchanged
            </summary>
            <param name="Array1">Array that comes first.</param>
            <param name="Array2">Array that is appended to the end of the first array</param>
            <returns>
            An double array that has Array1 and Array2 side by side
            </returns>
        </member>
        <member name="M:StarMathLib.StarMath.JoinVectors(System.Collections.Generic.IList{System.Int32},System.Collections.Generic.IList{System.Int32})">
            <summary>
            Concatenates two 1D integer arrays and returns the result. The given variables remain unchanged
            </summary>
            <param name = "Array1">Array that comes to the left.</param>
            <param name = "Array2">Array that is appended to the end of the first array</param>
            <returns>An integer array that has Array1 and Array2 side by side</returns>
        </member>
        <member name="M:StarMathLib.StarMath.JoinMatrixColumnsIntoVector(System.Double[0:,0:])">
            <summary>
            Joins the matrix columns into vector.
            </summary>
            <param name="A">The matrix of doubles, A.</param>
            <returns></returns>
        </member>
        <member name="M:StarMathLib.StarMath.JoinMatrixColumnsIntoVector(System.Int32[0:,0:])">
            <summary>
            Joins the matrix columns into vector.
            </summary>
            <param name="A">The matrix of integers, A.</param>
            <returns></returns>
        </member>
        <member name="M:StarMathLib.StarMath.JoinMatrixRowsIntoVector(System.Double[0:,0:])">
            <summary>
            Joins the matrix rows into vector.
            </summary>
            <param name="A">The matrix of doubles, A.</param>
            <returns></returns>
        </member>
        <member name="M:StarMathLib.StarMath.JoinMatrixRowsIntoVector(System.Int32[0:,0:])">
            <summary>
            Joins the matrix rows into vector.
            </summary>
            <param name="A">The matrix of integers, A.</param>
            <returns></returns>
        </member>
        <member name="M:StarMathLib.StarMath.norm1(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Returns to 1-norm (sum of absolute values of all terms)
            of the vector, x.
            </summary>
            <param name="x">The vector, x.</param>
            <returns>
            Scalar value of 1-norm.
            </returns>
            <exception cref="T:System.Exception">The vector, x, is null.</exception>
        </member>
        <member name="M:StarMathLib.StarMath.norm1(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Returns to 1-norm (sum of absolute values of all terms)
            of the vector, x.
            </summary>
            <param name="x">The vector, x.</param>
            <returns>
            Scalar value of 1-norm.
            </returns>
            <exception cref="T:System.Exception">The vector, x, is null.</exception>
        </member>
        <member name="M:StarMathLib.StarMath.norm1(System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double})">
            <summary>
            Returns to 1-norm (sum of absolute values of all terms)
            of the difference between x and y.
            </summary>
            <param name="x">The vector, x.</param>
            <param name="y">The vector, y.</param>
            <returns>
            Scalar value of 1-norm.
            </returns>
            <exception cref="T:System.Exception">
            The vector, x, is null.
            or
            The vector, y, is null.
            or
            The vectors are not the same size.
            </exception>
        </member>
        <member name="M:StarMathLib.StarMath.norm1(System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double},System.Int32)">
            <summary>
            Returns to 1-norm (sum of absolute values of all terms)
            of the difference between x and y.
            </summary>
            <param name="x">The vector, x.</param>
            <param name="y">The vector, y.</param>
            <param name="length">The length of the vector.</param>
            <returns>
            Scalar value of 1-norm.
            </returns>
        </member>
        <member name="M:StarMathLib.StarMath.norm1(System.Collections.Generic.IList{System.Int32},System.Collections.Generic.IList{System.Int32})">
            <summary>
            Returns to 1-norm (sum of absolute values of all terms)
            of the difference between x and y.
            </summary>
            <param name="x">The vector, x.</param>
            <param name="y">The vector, y.</param>
            <returns>
            Scalar value of 1-norm.
            </returns>
            <exception cref="T:System.Exception">
            The vector, x, is null.
            or
            The vector, y, is null.
            or
            The vectors are not the same size.
            </exception>
        </member>
        <member name="M:StarMathLib.StarMath.norm1(System.Collections.Generic.IList{System.Int32},System.Collections.Generic.IList{System.Int32},System.Int32)">
            <summary>
            Returns to 1-norm (sum of absolute values of all terms)
            of the difference between x and y.
            </summary>
            <param name="x">The vector, x.</param>
            <param name="y">The vector, y.</param>
            <param name="length">The length of the vector.</param>
            <returns>
            Scalar value of 1-norm.
            </returns>
        </member>
        <member name="M:StarMathLib.StarMath.norm1(System.Double[0:,0:])">
            <summary>
            Returns to 1-norm (sum of absolute values of all terms)
            of the matrix, A.
            </summary>
            <param name="A">The matrix, A.</param>
            <returns>
            Scalar value of 1-norm.
            </returns>
            <exception cref="T:System.Exception">The matrix, A, is null.</exception>
        </member>
        <member name="M:StarMathLib.StarMath.norm1(System.Double[0:,0:],System.Int32,System.Int32)">
            <summary>
            Returns to 1-norm (sum of absolute values of all terms)
            of the matrix, A.
            </summary>
            <param name="A">The matrix, A.</param>
            <param name="numRows">The number of rows.</param>
            <param name="numCols">The number of columns.</param>
            <returns>
            Scalar value of 1-norm.
            </returns>
        </member>
        <member name="M:StarMathLib.StarMath.norm1(System.Int32[0:,0:])">
            <summary>
            Returns to 1-norm (sum of absolute values of all terms)
            of the matrix, A.
            </summary>
            <param name="A">The matrix, A.</param>
            <returns>
            Scalar value of 1-norm.
            </returns>
            <exception cref="T:System.Exception">The matrix, A, is null.</exception>
        </member>
        <member name="M:StarMathLib.StarMath.norm1(System.Int32[0:,0:],System.Int32,System.Int32)">
            <summary>
            Returns to 1-norm (sum of absolute values of all terms)
            of the matrix, A.
            </summary>
            <param name="A">The matrix, A.</param>
            <param name="numRows">The number of rows.</param>
            <param name="numCols">The number of columns.</param>
            <returns>
            Scalar value of 1-norm.
            </returns>
        </member>
        <member name="M:StarMathLib.StarMath.norm2(System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double},System.Boolean)">
            <summary>
            Returns to 2-norm (square root of the sum of squares of all terms)
            of the difference between x and y.
            </summary>
            <param name="x">The vector, x.</param>
            <param name="y">The vector, y.</param>
            <param name="dontDoSqrt">if set to <c>true</c> [don't take the square root].</param>
            <returns>
            Scalar value of 2-norm.
            </returns>
            <exception cref="T:System.Exception">
            The vector, x, is null.
            or
            The vector, y, is null.
            or
            The vectors are not the same size.
            </exception>
        </member>
        <member name="M:StarMathLib.StarMath.norm2(System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double},System.Int32,System.Boolean)">
            <summary>
            Returns to 2-norm (square root of the sum of squares of all terms)
            of the difference between x and y.
            </summary>
            <param name="x">The vector, x.</param>
            <param name="y">The vector, y.</param>
            <param name="length">The length of the vectors.</param>
            <param name="dontDoSqrt">if set to <c>true</c> [don't take the square root].</param>
            <returns>
            Scalar value of 2-norm.
            </returns>
        </member>
        <member name="M:StarMathLib.StarMath.norm2(System.Collections.Generic.IList{System.Int32},System.Collections.Generic.IList{System.Int32},System.Boolean)">
            <summary>
            Returns to 2-norm (square root of the sum of squares of all terms)
            of the difference between x and y.
            </summary>
            <param name="x">The vector, x.</param>
            <param name="y">The vector, y.</param>
            <param name="dontDoSqrt">if set to <c>true</c> [don't take the square root].</param>
            <returns>
            Scalar value of 2-norm.
            </returns>
            <exception cref="T:System.Exception">
            The vector, x, is null.
            or
            The vector, y, is null.
            or
            The vectors are not the same size.
            </exception>
        </member>
        <member name="M:StarMathLib.StarMath.norm2(System.Collections.Generic.IList{System.Int32},System.Collections.Generic.IList{System.Int32},System.Int32,System.Boolean)">
            <summary>
            Returns to 2-norm (square root of the sum of squares of all terms)
            of the difference between x and y.
            </summary>
            <param name="x">The vector, x.</param>
            <param name="y">The vector, y.</param>
            <param name="length">The length of the vectors.</param>
            <param name="dontDoSqrt">if set to <c>true</c> [don't take the square root].</param>
            <returns>
            Scalar value of 2-norm.
            </returns>
        </member>
        <member name="M:StarMathLib.StarMath.norm2(System.Collections.Generic.IEnumerable{System.Double},System.Boolean)">
            <summary>
            Returns to 2-norm (square root of the sum of squares of all terms)
            of the vector, x.
            </summary>
            <param name="x">The vector, x.</param>
            <param name="dontDoSqrt">if set to <c>true</c> [don't take the square root].</param>
            <returns>
            Scalar value of 2-norm.
            </returns>
            <exception cref="T:System.Exception">The vector, x, is null.</exception>
        </member>
        <member name="M:StarMathLib.StarMath.norm2(System.Collections.Generic.IEnumerable{System.Int32},System.Boolean)">
            <summary>
            Returns to 2-norm (square root of the sum of squares of all terms)
            of the vector, x.
            </summary>
            <param name="x">The vector, x.</param>
            <param name="dontDoSqrt">if set to <c>true</c> [don't take the square root].</param>
            <returns>
            Scalar value of 2-norm.
            </returns>
            <exception cref="T:System.Exception">The vector, x, is null.</exception>
        </member>
        <member name="M:StarMathLib.StarMath.norm2(System.Double[0:,0:],System.Boolean)">
            <summary>
            Returns to 2-norm (square root of the sum of squares of all terms)
            of the matrix, A.
            </summary>
            <param name="A">The matrix, A.</param>
            <param name="dontDoSqrt">if set to <c>true</c> [don't take the square root].</param>
            <returns>
            Scalar value of 2-norm.
            </returns>
            <exception cref="T:System.Exception">The matrix, A, is null.</exception>
        </member>
        <member name="M:StarMathLib.StarMath.norm2(System.Double[0:,0:],System.Int32,System.Int32,System.Boolean)">
            <summary>
            Returns to 2-norm (square root of the sum of squares of all terms)
            of the matrix, A.
            </summary>
            <param name="A">The matrix, A.</param>
            <param name="numRows">The number of rows.</param>
            <param name="numCols">The number of columns.</param>
            <param name="dontDoSqrt">if set to <c>true</c> [don't take the square root].</param>
            <returns>
            Scalar value of 2-norm.
            </returns>
        </member>
        <member name="M:StarMathLib.StarMath.norm2(System.Int32[0:,0:],System.Boolean)">
            <summary>
            Returns to 2-norm (square root of the sum of squares of all terms)
            of the matrix, A.
            </summary>
            <param name="A">The matrix, A.</param>
            <param name="dontDoSqrt">if set to <c>true</c> [don't take the square root].</param>
            <returns>
            Scalar value of 2-norm.
            </returns>
            <exception cref="T:System.Exception">The matrix, A, is null.</exception>
        </member>
        <member name="M:StarMathLib.StarMath.norm2(System.Int32[0:,0:],System.Int32,System.Int32,System.Boolean)">
            <summary>
            Returns to 2-norm (square root of the sum of squares of all terms)
            of the matrix, A.
            </summary>
            <param name="A">The matrix, A.</param>
            <param name="numRows">The number of rows.</param>
            <param name="numCols">The number of columns.</param>
            <param name="dontDoSqrt">if set to <c>true</c> [don't take the square root].</param>
            <returns>
            Scalar value of 2-norm.
            </returns>
        </member>
        <member name="M:StarMathLib.StarMath.normP(System.Collections.Generic.IEnumerable{System.Double},System.Double,System.Boolean)">
            <summary>
            Returns to p-norm (p-root of the sum of each term raised to the p power)
            </summary>
            <param name="x">The vector, x.</param>
            <param name="p">The power, p.</param>
            <param name="dontDoPRoot">if set to <c>true</c> [don't take the P-root].</param>
            <returns>
            Scalar value of P-norm.
            </returns>
            <exception cref="T:System.Exception">The vector, x, is null.</exception>
        </member>
        <member name="M:StarMathLib.StarMath.normP(System.Collections.Generic.IEnumerable{System.Int32},System.Double,System.Boolean)">
            <summary>
            Returns to p-norm (p-root of the sum of each term raised to the p power)
            </summary>
            <param name="x">The vector, x.</param>
            <param name="p">The power, p.</param>
            <param name="dontDoPRoot">if set to <c>true</c> [don't take the P-root].</param>
            <returns>
            Scalar value of P-norm.
            </returns>
            <exception cref="T:System.Exception">The vector, x, is null.</exception>
        </member>
        <member name="M:StarMathLib.StarMath.normP(System.Double[0:,0:],System.Double,System.Boolean)">
            <summary>
            Returns to p-norm (p-root of the sum of each term raised to the p power)
            </summary>
            <param name="A">The matrix, A.</param>
            <param name="p">The power, p.</param>
            <param name="dontDoPRoot">if set to <c>true</c> [don't take the P-root].</param>
            <returns>
            Scalar value of P-norm.
            </returns>
            <exception cref="T:System.Exception">The matrix, A, is null.</exception>
        </member>
        <member name="M:StarMathLib.StarMath.normP(System.Double[0:,0:],System.Double,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Returns to p-norm (p-root of the sum of each term raised to the p power)
            </summary>
            <param name="A">The matrix, A.</param>
            <param name="p">The power, p.</param>
            <param name="numRows">The number of rows.</param>
            <param name="numCols">The number of columns.</param>
            <param name="dontDoPRoot">if set to <c>true</c> [don't take the P-root].</param>
            <returns>
            Scalar value of P-norm.
            </returns>
        </member>
        <member name="M:StarMathLib.StarMath.normP(System.Int32[0:,0:],System.Double,System.Boolean)">
            <summary>
            Returns to 2-norm (square root of the sum of squares of all terms)
            of the matrix, A.
            </summary>
            <param name="A">The matrix, A.</param>
            <param name="p">The power, p.</param>
            <param name="dontDoPRoot">if set to <c>true</c> [don't take the P-root].</param>
            <returns>
            Scalar value of 2-norm.
            </returns>
            <exception cref="T:System.Exception">The matrix, A, is null.</exception>
        </member>
        <member name="M:StarMathLib.StarMath.normP(System.Int32[0:,0:],System.Double,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Returns to 2-norm (square root of the sum of squares of all terms)
            of the matrix, A.
            </summary>
            <param name="A">The matrix, A.</param>
            <param name="p">The power, p.</param>
            <param name="numRows">The number of rows.</param>
            <param name="numCols">The number of columns.</param>
            <param name="dontDoPRoot">if set to <c>true</c> [don't take the P-root].</param>
            <returns>
            Scalar value of 2-norm.
            </returns>
        </member>
        <member name="M:StarMathLib.StarMath.normalize(System.Collections.Generic.IList{System.Double})">
            <summary>
            Returns to normalized vector (has lenght or 2-norm of 1))
            of the vector, x.
            </summary>
            <param name="x">The vector, x.</param>
            <returns>
            unit vector.
            </returns>
        </member>
        <member name="M:StarMathLib.StarMath.normalize(System.Collections.Generic.IList{System.Double},System.Int32)">
            <summary>
            Returns to normalized vector (has lenght or 2-norm of 1))
            of the vector, x.
            </summary>
            <param name="x">The vector, x.</param>
            <param name="length">The length of the vector.</param>
            <returns>
            unit vector.
            </returns>
        </member>
        <member name="M:StarMathLib.StarMath.normalizeInPlace(System.Double[])">
            <summary>
            Destructively normalize the vector x.
            </summary>
            <param name="x">The vector x.</param>
            <returns></returns>
        </member>
        <member name="M:StarMathLib.StarMath.normalizeInPlace(System.Collections.Generic.IList{System.Double},System.Int32)">
            <summary>
            Normalizes the in place.
            </summary>
            <param name="x">The x.</param>
            <param name="length">The length.</param>
            <returns></returns>
        </member>
        <member name="M:StarMathLib.StarMath.sum(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Sum up all the elements of a given matrix
            </summary>
            <param name="B">Matrix (1D double) whose parameters need to be summed up</param>
            <returns>
            Returns the total (double)
            </returns>
        </member>
        <member name="M:StarMathLib.StarMath.sum(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Sum up all the elements of a given matrix
            </summary>
            <param name="B">Matrix (1D int) whose parameters need to be summed up</param>
            <returns>
            Returns the total (int)
            </returns>
        </member>
        <member name="M:StarMathLib.StarMath.sum(System.Double[0:,0:])">
            <summary>
            Sum up all the elements of a given matrix
            </summary>
            <param name="B">Matrix (2D double) whose parameters need to be summed up</param>
            <returns>
            Returns the total (double)
            </returns>
        </member>
        <member name="M:StarMathLib.StarMath.sum(System.Double[0:,0:],System.Int32,System.Int32)">
            <summary>
            Sum up all the elements of a given matrix
            </summary>
            <param name="B">Matrix (2D double) whose parameters need to be summed up</param>
            <param name="numRows">The number of rows.</param>
            <param name="numCols">The number of cols.</param>
            <returns>
            Returns the total (double)
            </returns>
        </member>
        <member name="M:StarMathLib.StarMath.sum(System.Int32[0:,0:])">
            <summary>
            Sum up all the elements of a given matrix
            </summary>
            <param name="B">Matrix (2D double) whose parameters need to be summed up</param>
            <returns>
            Returns the total (int)
            </returns>
        </member>
        <member name="M:StarMathLib.StarMath.sum(System.Int32[0:,0:],System.Int32,System.Int32)">
            <summary>
            Sum up all the elements of a given matrix
            </summary>
            <param name="B">Matrix (2D double) whose parameters need to be summed up</param>
            <param name="numRows">The number of rows.</param>
            <param name="numCols">The number of cols.</param>
            <returns>
            Returns the total (double)
            </returns>
        </member>
        <member name="M:StarMathLib.StarMath.standardDeviation(System.Collections.Generic.IList{System.Int32})">
            <summary>
            Calculates the standard deviation assuming the whole population is provided (not sample st. dev.).
            </summary>
            <param name="A">An vector of integers, A.</param>
            <returns></returns>
        </member>
        <member name="M:StarMathLib.StarMath.standardDeviation(System.Collections.Generic.IList{System.Double})">
            <summary>
            Calculates the standard deviation assuming the whole population is provided (not sample st. dev.).
            </summary>
            <param name="A">An vector of doubles, A.</param>
            <returns></returns>
        </member>
        <member name="M:StarMathLib.StarMath.standardDeviation(System.Int32[0:,0:])">
            <summary>
            Calculates the standard deviation assuming the whole population is provided (not sample st. dev.).
            </summary>
            <param name="A">A matrix in integers, A.</param>
            <returns></returns>
        </member>
        <member name="M:StarMathLib.StarMath.standardDeviation(System.Double[0:,0:])">
            <summary>
            Calculates the standard deviation assuming the whole population is provided (not sample st. dev.).
            </summary>
            <param name="A">A matrix in doubles, A.</param>
            <returns></returns>
        </member>
        <member name="M:StarMathLib.StarMath.MakePrintString(System.Double[0:,0:])">
            <summary>
            Makes the print string.
            </summary>
            <param name="A">The matrix, A.</param>
            <returns></returns>
        </member>
        <member name="M:StarMathLib.StarMath.MakePrintString(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Makes the print string.
            </summary>
            <param name="A">The A.</param>
            <returns></returns>
        </member>
        <member name="M:StarMathLib.StarMath.MakePrintString(System.Int32[0:,0:])">
            <summary>
            Makes the print string.
            </summary>
            <param name="A">The A.</param>
            <returns></returns>
        </member>
        <member name="M:StarMathLib.StarMath.MakePrintString(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Makes the print string.
            </summary>
            <param name="A">The A.</param>
            <returns></returns>
        </member>
        <member name="M:StarMathLib.StarMath.solve(System.Double[0:,0:],System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double})">
            <summary>
            Solves the specified A matrix.
            </summary>
            <param name="A">The A.</param>
            <param name="b">The b.</param>
            <param name="initialGuess">The initial guess.</param>
            <returns></returns>
            <exception cref="T:System.Exception">Matrix, A, must be square.
            or
            Matrix, A, must be have the same number of rows as the vector, b.</exception>
        </member>
        <member name="M:StarMathLib.StarMath.solve(System.Int32[0:,0:],System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double})">
            <summary>
            Solves the specified A.
            </summary>
            <param name="A">The A.</param>
            <param name="b">The b.</param>
            <param name="initialGuess">The initial guess.</param>
            <returns></returns>
            <exception cref="T:System.Exception">
            Matrix, A, must be square.
            or
            Matrix, A, must be have the same number of rows as the vector, b.
            </exception>
        </member>
        <member name="M:StarMathLib.StarMath.solve(System.Double[0:,0:],System.Collections.Generic.IList{System.Int32},System.Collections.Generic.IList{System.Double})">
            <summary>
            Solves the specified A.
            </summary>
            <param name="A">The A.</param>
            <param name="b">The b.</param>
            <param name="initialGuess">The initial guess.</param>
            <returns></returns>
            <exception cref="T:System.Exception">
            Matrix, A, must be square.
            or
            Matrix, A, must be have the same number of rows as the vector, b.
            </exception>
        </member>
        <member name="M:StarMathLib.StarMath.solve(System.Int32[0:,0:],System.Collections.Generic.IList{System.Int32},System.Collections.Generic.IList{System.Double})">
            <summary>
            Solves the specified A.
            </summary>
            <param name="A">The A.</param>
            <param name="b">The b.</param>
            <param name="initialGuess">The initial guess.</param>
            <returns></returns>
            <exception cref="T:System.Exception">
            Matrix, A, must be square.
            or
            Matrix, A, must be have the same number of rows as the vector, b.
            </exception>
        </member>
    </members>
</doc>
