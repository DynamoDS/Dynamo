import("FunctionObject.ds");

def NewtonRootFind1DNoDeriv(objFunc: _FunctionObject, start: double, maxIters: int)
{
	return = [Imperative]
	{
		count = 0;
		change = 10000000000;
		maxChange = 0.00001;
		h = 0.00001;

		while(count < maxIters && Math.Abs( change ) > maxChange)
		{
			fx = __Apply(objFunc, start);
			fxh = __Apply(objFunc, start+h);
			dfx = (fxh - fx)/h;

			x1 = start - fx/dfx;
			change = start - x1;
			start = x1;

			count = count + 1;
		}

		return = start;
	}
}

def NewtonRootFind1DWithDeriv(objFunc: _FunctionObject, derivFunc: _FunctionObject, start: double, maxIters: int)
{
	return = [Imperative]
	{
		count = 0;
		change = 10000000000;
		maxChange = 0.00001;

		while(count < maxIters && Math.Abs( change ) > maxChange)
		{
			fx = __Apply(objFunc, start);
			dfx = __Apply(derivFunc, start);

			x1 = start - fx/dfx;
			change = start - x1;
			start = x1;

			count = count + 1;
		}

		return = start;
	}
}
