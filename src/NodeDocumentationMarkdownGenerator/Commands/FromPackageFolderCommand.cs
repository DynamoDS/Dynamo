using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Runtime.InteropServices;
using System.Text;
using System.Threading.Tasks;
using Autodesk.DesignScript.Runtime;
using Dynamo.Core;
using Dynamo.Engine;
using Dynamo.Graph.Nodes;
using Dynamo.Logging;
using Dynamo.Models;
using Dynamo.PackageManager;
using Dynamo.Utilities;
using Greg.Requests;
using Newtonsoft.Json;
using NodeDocumentationMarkdownGenerator.Verbs;
using ProtoCore;
using Compiler = ProtoAssociative.Compiler;

namespace NodeDocumentationMarkdownGenerator.Commands
{
    internal class FromPackageFolderCommand : LogSourceBase
    {
        private readonly DynamoModel dynamoModel;
        private readonly PackageManagerExtension pmExtension;
        private Core libraryCore;
        private LibraryServices libraryService;

        public FromPackageFolderCommand()
        {
            this.libraryCore = new ProtoCore.Core(new Options());
            libraryCore.Compilers.Add(Language.Associative, new Compiler(libraryCore));
            libraryCore.Compilers.Add(Language.Imperative, new ProtoImperative.Compiler(libraryCore));
            libraryCore.ParsingMode = ParseMode.AllowNonAssignment;
            this.libraryService = new LibraryServices(libraryCore, new PathManager(new PathManagerParams()));


        }

        internal string HandlePackageDocumentation(FromPackageOptions opts)
        {

            var package = PackageFromRoot(opts.InputFolderPath, pmExtension);

            //ScanNodeLibraries(package);
            var assemblies = GetNodeLibraries(package);



            //var functionDescriptors = GetLoadedFunctionDescriptors(package);

            //var nodes = new List<TypeLoadData>();
            //foreach (var ass in assemblies)
            //{
            //    dynamoModel.Loader.LoadNodesFromAssembly(ass, "", nodes, null);
            //}

            //CreateMdFilesFromNodeTypes(nodes, package, opts.Overwrite);

            return opts.InputFolderPath;
        }

        private object GetLoadedFunctionDescriptors(Package package)
        {
            var functionGroups = this.dynamoModel.EngineController.LibraryServices.ImportedFunctionGroups;
            var t = functionGroups.SelectMany(x => x.Functions.Where(y => y.Assembly.Contains("JsonData"))).ToList();
            var v = functionGroups.SelectMany(x => x.Functions.Where(y => y.Assembly.Contains("JsonDataUI"))).ToList();
            var b = functionGroups.SelectMany(x => x.Functions.Where(y => y.DisplayName.Contains("JsonObject"))).ToList();
            var c = functionGroups.SelectMany(x => x.Functions.Where(y => y.ClassName.Contains("JsonDataUI"))).ToList();
            return null;
        }

        private void CreateMdFilesFromNodeTypes(List<TypeLoadData> nodes, Package pkg, bool overWrite)
        {
            var outdir = pkg.NodeDocumentaionDirectory;
            if (!Directory.Exists(outdir))
                Directory.CreateDirectory(outdir);


            foreach (var node in nodes)
            {
                var fileName = $"{node.Type.FullName}.md";
                var filePath = Path.Combine(pkg.NodeDocumentaionDirectory, fileName);

                if (File.Exists(filePath) &&
                    !overWrite)
                {
                    continue;
                }

                using (StreamWriter sw = File.CreateText(filePath))
                {
                    sw.WriteLine($"## {node.Type.FullName} - Documentation");
                    sw.WriteLine($"This documentation file is auto generated by {this.GetType().Assembly.GetName()}.");
                    sw.WriteLine($"\nFor more information about adding documentation to nodes see https://github.com/DynamoDS/Dynamo/wiki/Create-and-Add-Custom-Documentation-to-Nodes");
                }
                
            }
        }

        private void ScanNodeLibraries(Package pkg)
        {
            string[] runtimeAssemblies = Directory.GetFiles(RuntimeEnvironment.GetRuntimeDirectory(), "*.dll", SearchOption.AllDirectories);
            var dynamoDlls = new DirectoryInfo(Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location)).EnumerateFiles("*.dll").Select(x=>x.FullName);

            var nodeLibraryPaths = new DirectoryInfo(pkg.BinaryDirectory).
                EnumerateFiles("*.dll").
                Where(x => pkg.Header.node_libraries.Contains(AssemblyName.GetAssemblyName(x.FullName).FullName)).
                Select(x=>x.FullName).
                ToList();

            var paths = new List<string>(runtimeAssemblies);
            paths.AddRange(dynamoDlls);
            paths.AddRange(nodeLibraryPaths);

            var resolver = new PathAssemblyResolver(paths);
            var mlc = new MetadataLoadContext(resolver);

            using (mlc)
            {
                foreach (var path in nodeLibraryPaths)
                {
                    Assembly ass = mlc.LoadFromAssemblyPath(path);
                    AssemblyName name = ass.GetName();

                    if (!NodeModelAssemblyLoader.ContainsNodeModelSubType(ass))
                    {
                        libraryService.LoadNodeLibrary(ass.Location, true);
                        continue;
                    }

                    System.Type[] typesInAsm = null;

                    try
                    {
                        typesInAsm = ass.GetTypes();
                    }
                    catch (ReflectionTypeLoadException ex)
                    {
                        typesInAsm = ex.Types;
                    }

                    typesInAsm.ToList().ForEach(t => GetTypeLoadData(t));

                    foreach (CustomAttributeData attr in ass.GetCustomAttributesData())
                    {
                        try
                        {
                            Console.WriteLine(attr.AttributeType);
                        }
                        catch (FileNotFoundException ex)
                        {
                            // We are missing the required dependency assembly.
                            Console.WriteLine("Error getting attribute type: " + ex.Message);
                        }
                    }
                }
            }
        }

        private System.Type[] GetNodeLibraries(Package pkg)
        {
            AppDomain.CurrentDomain.ReflectionOnlyAssemblyResolve += CurrentDomain_ReflectionOnlyAssemblyResolve;

            string[] runtimeAssemblies = Directory.GetFiles(RuntimeEnvironment.GetRuntimeDirectory(), "*.dll", SearchOption.AllDirectories);
            var dynamoDlls = new DirectoryInfo(Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location)).EnumerateFiles("*.dll").Select(x => x.FullName);

            var paths = new List<string>(runtimeAssemblies);
            paths.AddRange(dynamoDlls);

            if (pkg is null)
                throw new ArgumentNullException(nameof(pkg));

            var list = AppDomain.CurrentDomain.GetAssemblies().OrderByDescending(a => a.FullName).Select(a => a).ToList();
            //Assembly.ReflectionOnlyLoad("PresentaitonFramework.dll");

            foreach (var loc in paths)
            {
                try
                {
                    Assembly.ReflectionOnlyLoadFrom(loc);
                }
                catch (Exception)
                {

                    continue;
                }
            }

            //list.Where(x => x.FullName.Contains("System") || x.FullName.Contains("PresentationFramework")).ToList().ForEach(a => Assembly.ReflectionOnlyLoad(a.FullName));
            var reflectionAsses = AppDomain.CurrentDomain.ReflectionOnlyGetAssemblies();

            var ss = reflectionAsses.Where(x => x.FullName.Contains("DynamoCore")).ToList();
            //var asses = pkg.EnumerateAssembliesInBinDirectory().Select(x => Assembly.ReflectionOnlyLoadFrom(x.Assembly.Location));

            var normalDomainCore = list.Where(x => x.Location.EndsWith("DynamoCore.dll")).ToList();
            var reflectionDomainCore = reflectionAsses.Where(x => x.Location.EndsWith("DynamoCore.dll")).ToList();

            var normalDomainCoretype = normalDomainCore.FirstOrDefault().DefinedTypes.Where(x => x.FullName == "Dynamo.Graph.Nodes.NodeModel").ToList();
            var reflectionDomainCoretype = reflectionDomainCore.FirstOrDefault().DefinedTypes.Where(x => x.FullName == "Dynamo.Graph.Nodes.NodeModel").ToList();

            var asses = new DirectoryInfo(pkg.BinaryDirectory).
                EnumerateFiles("*.dll").
                Select(x=> Assembly.ReflectionOnlyLoadFrom(x.FullName)).
                ToList();

            
            foreach (var lib in pkg.Header.node_libraries)
            {
                var ass = asses.
                    Where(a => a.FullName == lib).
                    FirstOrDefault();

                var assTypes = ass.GetTypes();

                foreach (var t in assTypes)
                {
                    var NodeType = typeof(NodeModel);
                    t.IsSubclassOf(NodeType);
                    var baseNode = t.BaseType.BaseType;
                }

                if (!NodeModelAssemblyLoader.ContainsNodeModelSubType(ass))
                {
                    libraryService.LoadNodeLibrary(ass.Location, false);
                    continue;
                }


                System.Type[] typesInAsm = null;

                try
                {
                    typesInAsm = ass.GetTypes();
                }
                catch (ReflectionTypeLoadException ex)
                {
                    typesInAsm = ex.Types;
                }

                typesInAsm.ToList().ForEach(t => GetTypeLoadData(t));

                // Ass.gettypes
                // create typeloaddata
            }

            return null;
        }

        private Package PackageFromRoot(string packageFolderPath, PackageManagerExtension pmExtension)
        {
            var headerPath = Path.Combine(packageFolderPath, "pkg.json");
            Package pkg = Package.FromJson(headerPath, AsLogger());

            return pkg;
        }

        private void GetTypeLoadData(System.Type type)
        {
            if (type is null)
                return;

            var customAttributes = CustomAttributeData.GetCustomAttributes(type).ToList();
            var customAttributeTypes = customAttributes.Select(x => x.AttributeType).ToList();

            if (NodeModelAssemblyLoader.IsNodeSubType(type))
            {
                var Type = type;

                if (customAttributes is null || customAttributes.Count == 0)
                    return;

                var IsDeprecated = customAttributeTypes.Contains(typeof(NodeDeprecatedAttribute));
                var IsMetaNode = customAttributeTypes.Contains(typeof(IsMetaNodeAttribute));
                var IsDSCompatible = customAttributeTypes.Contains(typeof(IsDesignScriptCompatibleAttribute));
                var IsHidden = Type.GetCustomAttributes<IsVisibleInDynamoLibraryAttribute>(true)
                    .Any(attr => !attr.Visible);

                var attribs = Type.GetCustomAttributes<NodeNameAttribute>(false);

                string Name;
                if (attribs.Any() && !IsDeprecated && !IsMetaNode && IsDSCompatible && !IsHidden)
                {
                    Name = attribs.First().Name;
                }
                else
                    Name = Type.Name;

                var AlsoKnownAs =
                    Type.GetCustomAttributes<AlsoKnownAsAttribute>(false)
                        .SelectMany(aka => aka.Values)
                        .Concat(Name.AsSingleton());

                var SearchKeys = Type.GetCustomAttributes<NodeSearchTagsAttribute>(false).SelectMany(x => x.Tags);
                var Category =
                    Type.GetCustomAttributes<NodeCategoryAttribute>(false)
                        .Select(x => x.ElementCategory)
                        .FirstOrDefault();
                var Description =
                    Type.GetCustomAttributes<NodeDescriptionAttribute>(false)
                        .Select(x => x.ElementDescription)
                        .FirstOrDefault() ?? "";

                var inputNames = Type.GetCustomAttributes<InPortNamesAttribute>(false)
                    .SelectMany(x => x.PortNames).ToList();
                var inputTypes = Type.GetCustomAttributes<InPortTypesAttribute>(false)
                    .SelectMany(x => x.PortTypes).ToList();
            }
        }

        private Assembly CurrentDomain_ReflectionOnlyAssemblyResolve(object sender, ResolveEventArgs args)
        {
            var requestedAssembly = new AssemblyName(args.Name);
            Assembly assembly = null;
            AppDomain.CurrentDomain.ReflectionOnlyAssemblyResolve -= CurrentDomain_ReflectionOnlyAssemblyResolve;
            try
            {
                assembly = Assembly.ReflectionOnlyLoad(requestedAssembly.Name);
            }
            catch (Exception ex)
            {
            }
            AppDomain.CurrentDomain.ReflectionOnlyAssemblyResolve += CurrentDomain_ReflectionOnlyAssemblyResolve;
            return assembly;
        }
    }
}
