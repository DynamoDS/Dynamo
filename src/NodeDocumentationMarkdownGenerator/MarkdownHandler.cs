using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Text;
using System.Threading.Tasks;
using System.Xml;
using Dynamo.Engine;
using Dynamo.Graph.Nodes;
using Dynamo.Graph.Workspaces;
using Dynamo.Logging;
using Newtonsoft.Json;
using ProtoCore.AST.AssociativeAST;

namespace NodeDocumentationMarkdownGenerator
{
    internal static class MarkdownHandler
    {
        internal static void CreateMdFilesFromFileNames(List<MdFileInfo> fileInfos, string outputDir, bool overWrite, string dictionaryPath = null)
        {
            List<DynamoDictionaryEntry> dictEntrys = null;
            if (!string.IsNullOrEmpty(dictionaryPath) &&
                    File.Exists(dictionaryPath))
            {
                var dictionaryJson = File.ReadAllText(dictionaryPath);
                dictEntrys = JsonConvert.DeserializeObject<List<DynamoDictionaryEntry>>(dictionaryJson);
            }

            foreach (var info in fileInfos)
            {
                var fileName = $"{info.NodeNamespace}.md";
                var filePath = Path.Combine(outputDir, fileName);

                if (File.Exists(filePath) &&
                    !overWrite)
                {
                    continue;
                }

                string fileContent = null;

                if (dictEntrys != null)
                {
                    var matchingEntry = dictEntrys.Where(x => x.Name == info.NodeName).FirstOrDefault();
                    if (matchingEntry != null)
                        fileContent = GetContentFormDictionaryEntry(matchingEntry);
                }

                if (fileContent is null)
                    fileContent = GetDefaultContent(info.NodeName);

                using (StreamWriter sw = File.CreateText(filePath))
                {
;                   sw.WriteLine(fileContent);
                }
            }
        }

        private static string GetDefaultContent(string nodeName)
        {
            var content = new StringBuilder();
            content.AppendLine($"## {nodeName} - Documentation");
            content.AppendLine($"This documentation file is auto generated by {Assembly.GetExecutingAssembly().GetName()}.");
            content.AppendLine($"\nFor more information about adding documentation to nodes see https://github.com/DynamoDS/Dynamo/wiki/Create-and-Add-Custom-Documentation-to-Nodes");
            return content.ToString();
        }

        private static string GetContentFormDictionaryEntry(DynamoDictionaryEntry entry)
        {
            var content = new StringBuilder();
            content.AppendLine("## In Depth");
            content.AppendLine(entry.InDepth);
            content.AppendLine("___");
            content.AppendLine("Example File:");
            return content.ToString();
        }

        internal static MdFileInfo GetMdFileInfoFromAssociativeNode(AssociativeNode node, string className, bool isOverload)
        {
            var functionName = node is VarDeclNode varNode ? 
                varNode.NameNode.Name : 
                node.Name;

            var nodeNamespace = $"{className}.{functionName}";
            if (isOverload)
            {
                //var inputTypes = definitionNode.Parameters.Select(x => x.Type.Name).ToArray();
                //var inputString = string.Join(",", inputTypes);
                //nodeNamespace = $"{className}.{functionName}({inputString})";
            }

            return new MdFileInfo(functionName, nodeNamespace);
        }

        internal static MdFileInfo GetMdFileInfoFromFromCustomNode(string path)
        {
            WorkspaceInfo header = null;
            var log = new LogSourceBase();

            if (DynamoUtilities.PathHelper.isValidXML(path, out XmlDocument xmlDoc, out Exception ex))
            {
                WorkspaceInfo.FromXmlDocument(xmlDoc, path, true, false, log.AsLogger(), out header);
            }
            else if (DynamoUtilities.PathHelper.isValidJson(path, out string jsonDoc, out ex))
            {
                WorkspaceInfo.FromJsonDocument(jsonDoc, path, true, false, log.AsLogger(), out header);
            }
            else throw ex;

            if (!header.IsVisibleInDynamoLibrary)
                return null;

            var nodeName = header.Name;
            var nodeNamspace = $"{header.Category}.{header.Name}";
            return new MdFileInfo(nodeName, nodeNamspace);
        }

        internal static MdFileInfo GetMdFileNameFromTypeLoadData(TypeLoadData type)
        {
            var nodeName = type.Name;
            var nodeNamespace = type.Type.FullName;
            return new MdFileInfo(nodeName, nodeNamespace);
        }
    }
}
