class Function
{
   imp: var[]..[];
}

def __CreateFunctionObject(
    fptr: function,
    paramCount: int,
    paramPositions: int[],
    arguments: var[]..[],
    unpackArgs: bool)
{
    f = {};
    f["__fptr"] = fptr;
    f["__pcount"] = paramCount;
    f["__unpack"] = unpackArgs;

    a = {};
    hasArgAt[0..paramCount- 1] = false;
    hasArgAt[paramPositions] = true;
    a["__argflags"] = hasArgAt;
    a["__args"] = arguments;

    fobj = {};
    fobj["__func"] = f;
    fobj["__arginfo"] = a;
    
	fo = Function();
	fo.imp = {};
	fo.imp["__funcobj"] = fobj;
    return = fo;
}

def __CreateComposedFunctionObject(fobjs: Function[])
{
    return = [Imperative] {
        for (fobj in fobjs) {
            if (fobj.imp["__funcobj"] == null && fobj.imp["__funcobjs"] == null) {
                return = null;
            }
        }

        composedObj = Function();
		composedObj.imp = {};
        composedObj.imp["__funcobjs"] = fobjs;
        return = composedObj;
    }
}

def __GetNextParamPos(hasParamAt: bool[])
{
    return = [Imperative] {
        for(i in 0..Count(hasParamAt) - 1) {
            if (!hasParamAt[i])
                return = i;
        }
        return = -1;
    }
}

def __EvaluateComposedFunctionObjects(fos: Function, arg:var[]..[])
{
    return = [Imperative] {
        fobjs = fos.imp["__funcobjs"];
		if (fobjs == null) {
			return = null;
		}
        count = Count(fobjs);

        v = arg;
        for (i in (count - 1)..0) {
            f = fobjs[i];
            v = __EvaluateFunctionObject(f, v);
        }

        return = v;
    }
}

def __EvaluateFunctionObject(fo: Function, arg: var[]..[])
{      
    return = [Imperative]
    {           
        fobjs = fo.imp["__funcobjs"];
        if (fobjs != null) {
            return = __EvaluateComposedFunctionObjects(fo, arg); 
        }

        fobj = fo.imp["__funcobj"];
        if (fobj == null) {
            return = null;
        }

        arginfo = fobj["__arginfo"];
        if (arginfo == null) {
            return = null;
        }

        func = fobj["__func"];
        if (func == null) {
            return = null;
        }

        nextParamPosition = __GetNextParamPos(arginfo["__argflags"]);
        if (nextParamPosition < 0) {
            return = null;
        }
        else
        {
            args = arginfo["__args"];
            args[nextParamPosition] = arg;

            hasArgAt = arginfo["__argflags"];
            hasArgAt[nextParamPosition] = true;
            
            nextParamPosition = __GetNextParamPos(hasArgAt);
            if (nextParamPosition < 0)
            {
                return = Evaluate(func["__fptr"], args, func["__unpack"]);
            }
            else
            {
                paramPositions = { };
                for (i in 0..func["__pcount"] - 1)
                {
                    if (hasArgAt[i])
                    {
                        paramPositions = Concat(paramPositions, { i });
                    }
                }
            
                return = __CreateFunctionObject(
                            func["__fptr"],
                            func["__pcount"],
                            paramPositions,
                            args,
                            func["__unpack"]);
            }
        }
    }  
}

def __Apply(functionObject: Function, param: var[]..[])
{
    return = __EvaluateFunctionObject(functionObject, param);
}

def __ApplyList(functionObject: Function, params: var[]..[])
{
    return = [Imperative]
    {
        _result = functionObject;
        for(p in params)
        {
            _result = __Apply(_result, p);
        }
        return = _result;
    }
}

def __GetOutput(outputs: var[]..[], key: var)
{
    return = outputs[key];
}

def __Compose(funcs : Function[])
{
    return = __CreateComposedFunctionObject(funcs);
}

def __ComposeBuffered(funcs: Function[], amt: int, arg: var[]..[])
{
    return = [Imperative]
    {
        if (amt <= 1)
        {
            return = __Apply(__Compose(funcs), arg);
        }
        else
        {
            i = Count(funcs)-1;
            first = funcs[i];
            funcs[i] = __Apply(first, arg);
            return = __CreateFunctionObject(__ComposeBuffered, 3, { 0, 1 }, { funcs, amt-1, null }, true);
        }
    };
}

def __MinimumItemByKey(list: var[]..[], keyProjector: Function)
{
    return = [Imperative]
    {
        _count = Count(list);
        _keys = { };
        
        if (_count == 0)
        {
            return = _keys;
        }

        for (_index in 0..(_count - 1))
        {
            _keys[_index] = __Apply(keyProjector, list[_index]);
        }
        return = Sorting.minByKey(list, _keys);
    }
}

def __MaximumItemByKey(list: var[]..[], keyProjector: Function)
{
    return = [Imperative]
    {
        _count = Count(list);
        _keys = { };
        
        if (_count == 0)
        {
            return = _keys;
        }

        for (_index in 0..(_count - 1))
        {
            _keys[_index] = __Apply(keyProjector, list[_index]);
        }
        return = Sorting.maxByKey(list, _keys);
    }
}

def __Replace(list: var, with: var, predicate: Function)
{
    return = [Imperative]
    {
        if (__Apply(predicate, list))
        {
            return = with;
        }
        else
        {
            return = list;
        }
    };
}

def __Filter(list: var[]..[], predicate: Function)
{
    return = [Imperative]
    {
        if (list == null) 
        {
            return = null;
        }

        _count = Count(list);
        if (_count == 0)
        {
            return = {{}, {}};
        }

        _filteredList = {};
        _currentIn = 0;

        _filteredOutList = {};
        _currentOut = 0;

        for (_index in 0..(_count - 1))
        {
            _value = list[_index];
            if (__Apply(predicate, _value))
            {
                _filteredList[_currentIn] = _value;
                _currentIn = _currentIn + 1;
            }
            else
            {
                _filteredOutList[_currentOut] = _value;
                _currentOut = _currentOut + 1;
            }
        }

        return = { _filteredList, _filteredOutList };
    };
}

def __Combine(func: Function, lists: var[]..[])
{
    argList = Transpose(lists);
    return = [Imperative]
    {
        result = { };
        for(args in argList)
        {
            result[Count(result)] = __ApplyList(func, args);
        }
        return = result;
    };
}

def __Map(func: Function, arg: var[]..[])
{
    return = __Combine(func, { arg });
}

def __LaceShortest(func: Function, lists : var[]..[])
{
    return = [Imperative]
    {
        shortestLen = -1;
        for(item in lists)
        {
            count = Count(item);
            if (shortestLen < 0 || count < shortestLen)
            {
                shortestLen = count;
            }
        }
        shortenedLists = { };
        for(item in lists)
        {
            if (shortestLen == 1)
            {
                shortenedLists[Count(shortenedLists)] = { item[0] };
            }
            else
            {
                shortenedLists[Count(shortenedLists)] = item[0..shortestLen - 1];
            }
        }
        return = __Combine(func, shortenedLists);
    };
}

def __LaceLongest(func: Function, lists : var[]..[])
{
    return = [Imperative]
    {
        longestLen = 0;
        for(item in lists)
        {
            count = Count(item);
            if (count > longestLen)
            {
                longestLen = count;
            }
        }
        stretchedLists = { };
        for(item in lists)
        {
            count = Count(item);
            last = item[count-1];
            amtToAdd = longestLen - count;
            if (amtToAdd == 0)
            {
                stretchedLists[Count(stretchedLists)] = item[0..count - 1];
            }
            else
            {
                repeated = { };
                repeated[0..amtToAdd-1] = last;
                stretchedLists[Count(stretchedLists)] = Concat(item, repeated);
            }
        }
        return = __Combine(func, stretchedLists);
    };
}

def __ApplyNested(fs: Function, xs: var[]..[], amt: int)
{
    return = [Imperative]
    {
        result = { };
        if (amt == 0)
        {
            for(x in xs)
            {
                result[Count(result)] = __Apply(fs, x);
            }
        }
        else
        {
            for(f in fs)
            {
                result[Count(result)] = __ApplyNested(f, xs, amt-1);
            }
        }
        return = result;
    };
}

def __CartesianProduct(func: Function, lists : var[]..[])
{
    return = [Imperative]
    {
        count = Count(lists);
        if (count == 0)
        {
            return = lists;
        }

        results = func;
        nesting = 0;

        for(list in lists)
        {
            results = __ApplyNested(results, list, nesting);
            nesting = nesting + 1;
        }

        return = results;
    };
}

def __Scan(accumulator: Function, seed: var[]..[], lists: var[]..[])
{
    return = [Imperative]
    {
        if (lists == null)
        {
            return = seed;
        }

        //HACK: Transpose({{}}) returns { { null } }

        noEmpties = { };
        for (list in lists)
        {
            if (Count(list) > 0)
                noEmpties[Count(noEmpties)] = list;
        }
        lists = noEmpties;

        argLists = Transpose(lists);
        _acc = seed;
        
        result = { _acc };

        for(argList in argLists)
        {
            argList[Count(argList)] = _acc;
            _acc = __ApplyList(accumulator, argList);
            result[Count(result)] = _acc;
        }
        
        return = result;
    };
}

def __Reduce(accumulator: Function, seed: var[]..[], lists : var[]..[])
{
    return = [Imperative]
    {
        if (lists == null)
        {
            return = seed;
        }

        //HACK: Transpose({{}}) returns { { null } }

        noEmpties = { };
        for (list in lists)
        {
            if (Count(list) > 0)
                noEmpties[Count(noEmpties)] = list;
        }
        lists = noEmpties;

        argLists = Transpose(lists);
        _acc = seed;
        
        for(argList in argLists)
        {
            argList[Count(argList)] = _acc;
            _acc = __ApplyList(accumulator, argList);
        }
        
        return = _acc;
    };
}

def __SortByFunction(list: var[]..[], func: Function)
{
    return = [Imperative]
    {
        if (list == null)
        {
            return = null;
        }

        _count = Count(list);
        _keys = { };

        if (_count == 0)
        {
            return = _keys;
        }

        for (_index in 0..(_count - 1))
        {
            _keys[_index] = __Apply(func, list[_index]);
        }
        return = Sorting.sortByKey(list, _keys);
    };
}

def __GroupByFunction(list: var[]..[], func: Function)
{
    return = [Imperative]
    {
        if (list == null)
        {
            return = null;
        }

        _count = Count(list);
        _keys = { };

        if (_count == 0)
        {
            return = _keys;
        }

        for (_index in 0..(_count - 1))
        {
            _keys[_index] = __Apply(func, list[_index]);
        }
        return = Sorting.groupByKey(list, _keys);
    };
}

def __TrueForAll(list: var[]..[], predicate: Function)
{
    return = [Imperative]
    {
        if (list == null) 
        {
            return = null;
        }

        _count = Count(list);
        if (_count == 0)
        {
            return = true;
        }

        _index = 0;

        for (_index in 0..(_count - 1))
        {
            _value = list[_index];
            if (!__Apply(predicate, _value))
            {
                return = false;
            }
        }

        return = true;
    };
}

def __TrueForAny(list: var[]..[], predicate: Function)
{
    return = [Imperative]
    {
        if (list == null) 
        {
            return = null;
        }

        _count = Count(list);
        if (_count == 0)
        {
            return = true;
        }

        _index = 0;

        for (_i in 0..(_count - 1))
        {
            _value = list[_i];
            if (__Apply(predicate, _value))
            {
                return = true;
            }
        }

        return = false;
    };
}

def __ForEach(functionObject: Function, lists: var[]..[])
{
    [Imperative]
    {
        if (lists == null) 
        {
            return = null;
        }

        argLists = Transpose(lists);

        _count = Count(argLists);
        if (_count == 0)
        {
            return = null;
        }

        _index = 0;

        for (_i in 0..(_count - 1))
        {
            _value = argLists[_i];
            __ApplyList(functionObject, _value);
        }
    };
}

def LoopWhile(init: var[]..[], continueWhile: Function, loopBody: Function)
{
	return = [Imperative]
	{
		while (__Apply(continueWhile, init))
		{
			init = __Apply(loopBody, init);
		}
		return = init;
	};
}
