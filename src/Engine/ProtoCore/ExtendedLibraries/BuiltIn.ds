import("DSCoreNodes.dll");

class List extends DSCore.List
{
	public static def RemoveIfNot(list: var[]..[], type: string)
	{		
		return = __RemoveIfNot(list, type);
	}

	public static def Equals: bool(objectA: var[]..[], objectB: var[]..[])
    {
        return = __Equals(objectA, objectB);
	}

	public static def GroupByFunction(list: var[]..[], func: Function)
	{
		return = __GroupByFunction(list, func);
	}

	public static def SortByFunction(list: var[]..[], func: Function)
	{
		return = __SortByFunction(list, func);
	}

	public static def MaximumItemByKey(list: var[]..[], keyProjector: Function)
	{
		return = __MaximumItemByKey(list, keyProjector);
	}

	public static def MinimumItemByKey(list: var[]..[], keyProjector: Function)
	{
		return = __MinimumItemByKey(list, keyProjector);
	}

	public static def TrueForAll: bool(list: var[]..[], predicate: Function)
	{
		return = __TrueForAll(list, predicate);
	}

	public static def TrueForAny: bool(list: var[]..[], predicate: Function)
	{
		return = __TrueForAny(list, predicate);
	}

	public static def RemoveKey(list: var[]..[], key: var)
	{
		return = __RemoveKey(list, key);
	}

	public static def GetValues(list: var[]..[])
	{
		return = __GetValues(list);
	}

	public static def GetKeys(list: var[]..[])
	{
		return = __GetKeys(list);
	}

	public static def ContainsKey: bool(list: var[]..[], key: var)
	{
		return = __ContainsKey(list, key);
	}
}

