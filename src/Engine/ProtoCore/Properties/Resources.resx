<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AttributeArgMustBeConstant" xml:space="preserve">
    <value>An attribute argument must be a constant expression</value>
  </data>
  <data name="BaseIsExpectedToCallBaseConstructor" xml:space="preserve">
    <value>The keyword 'base' is expected here to call the base class constructor</value>
  </data>
  <data name="CheckIfTheElementsInListAreSameType" xml:space="preserve">
    <value>Checks if all the elements in the specified list are of the same type</value>
  </data>
  <data name="ChecksIfLengthsAreSameInMultiDimentionalList" xml:space="preserve">
    <value>Checks if each of rows in multidimensional list has the same number of elements </value>
  </data>
  <data name="ChecksIfListContainsTheElement" xml:space="preserve">
    <value>Checks if the specified element is present in the specified list</value>
  </data>
  <data name="ChecksIfTheListIsAllFalse" xml:space="preserve">
    <value>Checks if all elements in the specified list are false</value>
  </data>
  <data name="ChecksIfTheListIsAllTrue" xml:space="preserve">
    <value>Checks if all elements in the specified list are true</value>
  </data>
  <data name="ChecksListWithUniformDepth" xml:space="preserve">
    <value>Checks if the list has a uniform depth</value>
  </data>
  <data name="CloseBracketExpected" xml:space="preserve">
    <value>')' expected - Imcomplete Closure</value>
  </data>
  <data name="ContainsKeys" xml:space="preserve">
    <value>Checks if the specified key is present in the specified key-value pair list</value>
  </data>
  <data name="DeterminesObjectsAreEqual" xml:space="preserve">
    <value>Determines whether two object instances are equal</value>
  </data>
  <data name="EmptyCharacterLiteral" xml:space="preserve">
    <value>Empty character literal</value>
  </data>
  <data name="FailedToImport" xml:space="preserve">
    <value>Failed to import {0}</value>
  </data>
  <data name="FunctionCallCannotBeAtLeftSide" xml:space="preserve">
    <value>A function call is not allowed on the left hand side of an assignment</value>
  </data>
  <data name="FUNCTION_GROUP_RESOLUTION_FAILURE" xml:space="preserve">
    <value>No function called {0} could be found. Please check the name of the function</value>
  </data>
  <data name="GetKeys" xml:space="preserve">
    <value>Gets all keys from the specified key-value pair list</value>
  </data>
  <data name="Gettypes" xml:space="preserve">
    <value>Gets the Type of the current instance</value>
  </data>
  <data name="GetValues" xml:space="preserve">
    <value>Gets all values stored in the specified key-value pair list and for a simple list it returns all elements in the list</value>
  </data>
  <data name="ImportFileByGivenFilePath" xml:space="preserve">
    <value>Imports data from a text file containing comma separated values into two-dimensional list</value>
  </data>
  <data name="ImportFileByGivenFilePathWithMode" xml:space="preserve">
    <value>Imports data from a text file containing comma separated values into two-dimensional list and also transpose the output list if specified</value>
  </data>
  <data name="ImportStatementNotSupported" xml:space="preserve">
    <value>Imports statements are not supported in CodeBlock Nodes, please use the Library UI instead</value>
  </data>
  <data name="InsertsAnElementIntoList" xml:space="preserve">
    <value>Inserts an element into a list at specified index</value>
  </data>
  <data name="InvalidLanguageBlockIdentifier" xml:space="preserve">
    <value>\"{0}\" is not a valid language block identifier, do you mean \"Associative\" or \"Imperative\"?</value>
  </data>
  <data name="InvalidReturnStatement" xml:space="preserve">
    <value>Return statement is invalid. Do you mean: return = {0} ?</value>
  </data>
  <data name="InvalidSymbol" xml:space="preserve">
    <value>Syntax Error: invalid symbol '{0}'. (Did you mean to use Modifier Stack \" =&gt; \")</value>
  </data>
  <data name="kAlreadyImported" xml:space="preserve">
    <value>File : '{0}' is already imported</value>
  </data>
  <data name="kAmbigousMethodDispatch" xml:space="preserve">
    <value>Internal error, please report: Function could not be found on final dispatch (e5235508)</value>
  </data>
  <data name="kArgumentTypeUndefined" xml:space="preserve">
    <value>Type '{0}' of argument '{1}' is not defined</value>
  </data>
  <data name="kArrayOverIndexed" xml:space="preserve">
    <value>The index is outside the given range</value>
  </data>
  <data name="kArrayRankReduction" xml:space="preserve">
    <value>Type conversion would cause array rank reduction. This is not permitted outside of replication. {511ED65F-FB66-4709-BDDA-DCD5E053B87F}</value>
  </data>
  <data name="kAssignNonCharacterToString" xml:space="preserve">
    <value>A string must be made up of characters</value>
  </data>
  <data name="kAssingToThis" xml:space="preserve">
    <value>'this' is readonly and cannot be assigned to</value>
  </data>
  <data name="kCallingConstructorInConstructor" xml:space="preserve">
    <value>Cannot call the constructor '{0}()' inside itself</value>
  </data>
  <data name="KCallingConstructorOnInstance" xml:space="preserve">
    <value>Cannot call the constructor '{0}()' on an existing object</value>
  </data>
  <data name="kCallingNonStaticMethod" xml:space="preserve">
    <value>'{0}.{1}()' is not a static method</value>
  </data>
  <data name="kCallingNonStaticProperty" xml:space="preserve">
    <value>'{0}.{1}' is not a static property</value>
  </data>
  <data name="kConsoleWarningMessage" xml:space="preserve">
    <value>&gt; Runtime warning: {0}\n - \"{1}\" &lt;line: {2}, col: {3}&gt;</value>
  </data>
  <data name="kConvertArrayToNonArray" xml:space="preserve">
    <value>Converting an array to {0} would cause array rank reduction and is not permitted</value>
  </data>
  <data name="kConvertDoubleToInt" xml:space="preserve">
    <value>Converting a double to an int may lose information</value>
  </data>
  <data name="kConvertNonConvertibleTypes" xml:space="preserve">
    <value>Asked to convert non-convertible types</value>
  </data>
  <data name="kCyclicDependency" xml:space="preserve">
    <value>A cyclic dependency exists between '{0}' and '{1}'</value>
  </data>
  <data name="kDeferencingNonPointer" xml:space="preserve">
    <value>Internal error, please report: Dereferencing a non-pointer. (3f47aacd)</value>
  </data>
  <data name="kExceptionTypeUndefined" xml:space="preserve">
    <value>The exception type '{0}' is not defined</value>
  </data>
  <data name="keywordCannotBeUsedAsConstructorName" xml:space="preserve">
    <value>\"{0}\" is a keyword, it can't be used as constructor name</value>
  </data>
  <data name="keywordCantBeUsedAsIdentifier" xml:space="preserve">
    <value>\"{0}\" is a keyword, but an identifier was expected</value>
  </data>
  <data name="kFailToConverToFunction" xml:space="preserve">
    <value>Converting objects to a function pointer is not allowed</value>
  </data>
  <data name="kFailToConverToNull" xml:space="preserve">
    <value>Converting other things to null is not allowed</value>
  </data>
  <data name="kFailToConverToPointer" xml:space="preserve">
    <value>Cannot convert objects to function pointers</value>
  </data>
  <data name="kFFIFailedToObtainObject" xml:space="preserve">
    <value>Failed to obtain object '{0}' for '{1}.{2}'</value>
  </data>
  <data name="kFFIFailedToObtainThisObject" xml:space="preserve">
    <value>Failed to obtain this object for '{0}.{1}'</value>
  </data>
  <data name="kFFIInvalidCast" xml:space="preserve">
    <value>'{0}' is being cast to '{1}', but the allowed range is [{2}..{3}]</value>
  </data>
  <data name="kFileNotFound" xml:space="preserve">
    <value>File : '{0}' not found</value>
  </data>
  <data name="kFunctionNotFound" xml:space="preserve">
    <value>No candidate function could be found</value>
  </data>
  <data name="kFunctionNotReturnAtAllCodePaths" xml:space="preserve">
    <value>All paths through the method '{0}()' must return a value</value>
  </data>
  <data name="kIndexOutOfRange" xml:space="preserve">
    <value>Index is out of range</value>
  </data>
  <data name="kInvalidAmountInRangeExpression" xml:space="preserve">
    <value>The amount in range expression should be an positive integer</value>
  </data>
  <data name="kInvalidArguments" xml:space="preserve">
    <value>Argument is invalid</value>
  </data>
  <data name="kInvalidArgumentsInRangeExpression" xml:space="preserve">
    <value>The value used in a range expression must be a number</value>
  </data>
  <data name="kInvalidBreakForFunction" xml:space="preserve">
    <value>Internal error, please report: Statement break causes function to abnormally return null. (6ced82a9)</value>
  </data>
  <data name="kInvalidContinueForFunction" xml:space="preserve">
    <value>Internal error, please report: Statement continue cause function to abnormally return null. (fd67aaee)</value>
  </data>
  <data name="kInvalidStaticCyclicDependency" xml:space="preserve">
    <value>A cyclic dependency exists between '{0}' and '{1}'</value>
  </data>
  <data name="kInvalidThis" xml:space="preserve">
    <value>'this' can only be used in methods that are members of a class</value>
  </data>
  <data name="kInvokeMethodOnInvalidObject" xml:space="preserve">
    <value>Internal error, please report: Method '{0}()' is invoked on an invalid object. (fa006d2b)</value>
  </data>
  <data name="kMethodAlreadyDefined" xml:space="preserve">
    <value>Method '{0}()' is already defined</value>
  </data>
  <data name="kMethodHasInvalidArguments" xml:space="preserve">
    <value>'{0}()' has some invalid arguments</value>
  </data>
  <data name="kMethodIsInaccessible" xml:space="preserve">
    <value>Method '{0}()' can't be reached from here</value>
  </data>
  <data name="kMethodNotFound" xml:space="preserve">
    <value>Method '{0}()' not found</value>
  </data>
  <data name="kMethodResolutionFailure" xml:space="preserve">
    <value>Internal error, please report: Method resolution failure on: {0}() - (8bc0db87)</value>
  </data>
  <data name="kMethodResolutionFailureForOperator" xml:space="preserve">
    <value>Operator '{0}' cannot be applied to operands of type '{1}' and '{2}'</value>
  </data>
  <data name="kMethodResolutionFailureWithTypes" xml:space="preserve">
    <value>One or more of the input types are not matching. Couldn't find a version of {0} that takes arguments of type {1}</value>
  </data>
  <data name="kMethodStackOverflow" xml:space="preserve">
    <value>'{0}()' recursed until Dynamo ran out of memory, please add a base case.</value>
  </data>
  <data name="kMultipleSymbolFound" xml:space="preserve">
    <value>Multiple definitions for '{0}' are found as {1}</value>
  </data>
  <data name="kMultipleSymbolFoundFromName" xml:space="preserve">
    <value>Multiple definitions for '{0}' are found as {1}</value>
  </data>
  <data name="kNoStepSizeInAmountRangeExpression" xml:space="preserve">
    <value>No step size is specified in amount range expression</value>
  </data>
  <data name="kPropertyInaccessible" xml:space="preserve">
    <value>Property '{0}' is inaccessible</value>
  </data>
  <data name="kPropertyIsInaccessible" xml:space="preserve">
    <value>Property '{0}' is inaccessible</value>
  </data>
  <data name="kPropertyNotFound" xml:space="preserve">
    <value>Property '{0}' not found</value>
  </data>
  <data name="kPropertyOfClassNotFound" xml:space="preserve">
    <value>Class '{0}' does not have a property '{1}'</value>
  </data>
  <data name="kRangeExpressionConflictOperator" xml:space="preserve">
    <value>An amount operator cannot be used together with a step operator</value>
  </data>
  <data name="kRangeExpressionWithInvalidAmount" xml:space="preserve">
    <value>The amount of step is invalid.</value>
  </data>
  <data name="kRangeExpressionWithInvalidStepSize" xml:space="preserve">
    <value>The step size of range expression is invalid.</value>
  </data>
  <data name="kRangeExpressionWithNegativeStepNumber" xml:space="preserve">
    <value>The step number of range expression should be greater than 0</value>
  </data>
  <data name="kRangeExpressionWithNonIntegerStepNumber" xml:space="preserve">
    <value>The step number of range expression should be integer</value>
  </data>
  <data name="kRangeExpressionWithStepSizeZero" xml:space="preserve">
    <value>The step size of range expression should not be 0</value>
  </data>
  <data name="kReturnTypeUndefined" xml:space="preserve">
    <value>Return type '{0}' of method '{1}()' is not defined</value>
  </data>
  <data name="kStaticMethodNotFound" xml:space="preserve">
    <value>Cannot find static method or constructor {0}.{1}()</value>
  </data>
  <data name="kStringIndexingCannotBeAssigned" xml:space="preserve">
    <value>String indexing cannot be assigned to, it is read only</value>
  </data>
  <data name="kStringIndexOutOfRange" xml:space="preserve">
    <value>The index to string is out of range</value>
  </data>
  <data name="kStringOverIndexed" xml:space="preserve">
    <value>String is over indexed</value>
  </data>
  <data name="kSymbolOverIndexed" xml:space="preserve">
    <value>'{0}' is over indexed</value>
  </data>
  <data name="kTypeUndefined" xml:space="preserve">
    <value>Type '{0}' is not defined</value>
  </data>
  <data name="kUnboundIdentifierMsg" xml:space="preserve">
    <value>Variable '{0}' hasn't been defined yet</value>
  </data>
  <data name="kUsingNonStaticMemberInStaticContext" xml:space="preserve">
    <value>'{0}' is not a static property, so cannot be assigned to static properties or used in static methods.</value>
  </data>
  <data name="kUsingThisInStaticFunction" xml:space="preserve">
    <value>'this' cannot be used in static method</value>
  </data>
  <data name="MapsValueFromOneRangeToAnotherRange" xml:space="preserve">
    <value>Maps a vlaue from one range to another range</value>
  </data>
  <data name="MapsValueIntoInputRange" xml:space="preserve">
    <value>Maps a value into an input range</value>
  </data>
  <data name="ModifierBlockNotSupported" xml:space="preserve">
    <value>Modifier Blocks are not supported currently</value>
  </data>
  <data name="NoConstructorForAttribute" xml:space="preserve">
    <value>No constructors for Attribute '{0}' takes {1} arguments</value>
  </data>
  <data name="NoSuchFileOrDirectoryToImport" xml:space="preserve">
    <value>Cannot import file: '{0}': No such file or directory</value>
  </data>
  <data name="ObjectsContainsInList1NotInList2" xml:space="preserve">
    <value>Returns objects that are included in List1 but excluded in List2</value>
  </data>
  <data name="ProducesTheSetIntersection" xml:space="preserve">
    <value>Produces the set intersection of two sequences</value>
  </data>
  <data name="ProducesTheSetUnion" xml:space="preserve">
    <value>Produces the set union of two sequences by using the default equality comparer</value>
  </data>
  <data name="RemoveKeys" xml:space="preserve">
    <value>Returns true if the specified key is removed from list, otherwise returns false</value>
  </data>
  <data name="RemovesTheMembersofTheList" xml:space="preserve">
    <value>Removes the members of the list which are not members of the specified type</value>
  </data>
  <data name="ReordersList" xml:space="preserve">
    <value>Reorders the list using the specified indices</value>
  </data>
  <data name="ReturnsConcatenatingList" xml:space="preserve">
    <value>Joins two lists into a single list</value>
  </data>
  <data name="ReturnsListWithRankDepth" xml:space="preserve">
    <value>Returns multidimentional list according the rank given</value>
  </data>
  <data name="ReturnsListWithUniformDepth" xml:space="preserve">
    <value>Returns a list with uniform depth as specified by the input depth</value>
  </data>
  <data name="ReturnsNumberOfItems" xml:space="preserve">
    <value>Returns number of items in the specified list</value>
  </data>
  <data name="ReturnStatementIsNotAllowedInConstructor" xml:space="preserve">
    <value>return statement is not allowed in constructor</value>
  </data>
  <data name="ReturnsTheDeepestDepthOfTheList" xml:space="preserve">
    <value>Returns the deepest depth of the list</value>
  </data>
  <data name="ReturnsTheFlattened1DList" xml:space="preserve">
    <value>Returns the flattened 1D list of the multi-dimensional input list</value>
  </data>
  <data name="ReturnsTheIndex" xml:space="preserve">
    <value>Returns the index of the member in the list</value>
  </data>
  <data name="ReturnsTheNumberOfFalseValueInList" xml:space="preserve">
    <value>Returns the number of  false values in the list</value>
  </data>
  <data name="ReturnsTheNumberOfTrueValue" xml:space="preserve">
    <value>Returns the number of true values in the list</value>
  </data>
  <data name="SemiColonExpected" xml:space="preserve">
    <value>';' is expected</value>
  </data>
  <data name="SortsListByValue" xml:space="preserve">
    <value>Sorts a specified list by the values of its members in either ascending or descending order</value>
  </data>
  <data name="SortsListByValueInAscending" xml:space="preserve">
    <value>Sorts a specified list by values of its members in ascending order</value>
  </data>
  <data name="TooManyCharacters" xml:space="preserve">
    <value>Too many characters in character literal</value>
  </data>
  <data name="UnknownAttribute" xml:space="preserve">
    <value>Unknown attribute {0}</value>
  </data>
  <data name="UseInlineConditional" xml:space="preserve">
    <value>'{0}' statement can only be used in imperative language block, consider using an inline conditional instead?</value>
  </data>
  <data name="UseListJoinNode" xml:space="preserve">
    <value>Use List.Join node instead</value>
  </data>
  <data name="ValidForImperativeBlockOnly" xml:space="preserve">
    <value>'{0}' statement can only be used in imperative language block</value>
  </data>
  <data name="ModuloByZero" xml:space="preserve">
    <value>Integer modulo by zero</value>
  </data>
</root>