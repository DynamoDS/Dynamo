<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AttributeArgMustBeConstant" xml:space="preserve">
    <value>Argument atributu musí být konstantní výraz</value>
  </data>
  <data name="BaseIsExpectedToCallBaseConstructor" xml:space="preserve">
    <value>Klíčové slovo „základna“ je zde očekáváno za účelem volání konstruktoru základní třídy.</value>
  </data>
  <data name="CheckIfTheElementsInListAreSameType" xml:space="preserve">
    <value>Kontroluje, zda jsou všechny prvky v určeném seznamu stejného typu.</value>
  </data>
  <data name="ChecksIfLengthsAreSameInMultiDimentionalList" xml:space="preserve">
    <value>Kontroluje, zda jednotlivé řádky ve vícerozměrném seznamu mají stejný počet prvků . </value>
  </data>
  <data name="ChecksIfListContainsTheElement" xml:space="preserve">
    <value>Kontroluje, zda je daný prvek v zadaném seznamu.</value>
  </data>
  <data name="ChecksIfTheListIsAllFalse" xml:space="preserve">
    <value>Zkontroluje, zda mají všechny prvky v určeném seznamu hodnotu false.</value>
  </data>
  <data name="ChecksIfTheListIsAllTrue" xml:space="preserve">
    <value>Zkontroluje, zda mají všechny prvky v určeném seznamu hodnotu true.</value>
  </data>
  <data name="ChecksListWithUniformDepth" xml:space="preserve">
    <value>Kontroluje, zda má seznam jednotnou hloubkou.</value>
  </data>
  <data name="CloseBracketExpected" xml:space="preserve">
    <value>očekáváno ')' – Neúplné uzavření</value>
  </data>
  <data name="ContainsKeys" xml:space="preserve">
    <value>Kontroluje, zda se zadaný klíč nachází v zadaném seznamu dvojic klíč-hodnota.</value>
  </data>
  <data name="DeterminesObjectsAreEqual" xml:space="preserve">
    <value>Určuje, zda jsou dvě instance objektu stejné.</value>
  </data>
  <data name="EmptyCharacterLiteral" xml:space="preserve">
    <value>Prázdný literál znaku</value>
  </data>
  <data name="FailedToImport" xml:space="preserve">
    <value>Nezdařilo se naimportovat {0}.</value>
  </data>
  <data name="FunctionCallCannotBeAtLeftSide" xml:space="preserve">
    <value>Volání funkce není povoleno na levé straně přiřazení.</value>
  </data>
  <data name="GetKeys" xml:space="preserve">
    <value>Získá všechny klíče ze zadaného seznam dvojic klíč-hodnota.</value>
  </data>
  <data name="Gettypes" xml:space="preserve">
    <value>Získá typ aktuální instance</value>
  </data>
  <data name="GetValues" xml:space="preserve">
    <value>Vrátí všechny hodnoty uložené v zadaném seznamu dvojic klíč-hodnota a pro jednoduchý seznam vrátí všechny prvky v seznamu.</value>
  </data>
  <data name="ImportFileByGivenFilePath" xml:space="preserve">
    <value>Importuje data z textového souboru obsahujícího hodnoty oddělené čárkou do dvojrozměrného seznamu.</value>
  </data>
  <data name="ImportFileByGivenFilePathWithMode" xml:space="preserve">
    <value>Importuje data z textového souboru, který obsahuje hodnoty oddělené čárkami, do dvojrozměrného seznamu a také převádí výstup (pokud je určen).</value>
  </data>
  <data name="ImportStatementNotSupported" xml:space="preserve">
    <value>Příkazy pro importování nejsou podporovány v uzlech CodeBlock, použijte místo nich uživatelské rozhraní knihovny.</value>
  </data>
  <data name="ClassDeclarationNotSupported" xml:space="preserve">
    <value>Deklarace tříd nejsou v uzlech CodeBlock podporovány. Podporovány jsou pouze definice funkcí a přiřazovací příkazy.</value>
  </data>
  <data name="InsertsAnElementIntoList" xml:space="preserve">
    <value>Vloží prvek do seznamu v zadaném indexu.</value>
  </data>
  <data name="InvalidLanguageBlockIdentifier" xml:space="preserve">
    <value>\„{0}\“ není platný identifikátor bloku jazyka, nemysleli jste \„Asociativní\“ nebo \„Imperativní\“?</value>
  </data>
  <data name="InvalidSymbol" xml:space="preserve">
    <value>Chyba syntaxe: neplatný symbol „{0}“. (Možná jste chtěli použít modifikátor \„ =&gt; \“)</value>
  </data>
  <data name="kAlreadyImported" xml:space="preserve">
    <value>Soubor: „{0}“ je již importován</value>
  </data>
  <data name="kAmbigousMethodDispatch" xml:space="preserve">
    <value>Nahlaste vnitřní chybu: Funkci nebylo možné při posledním odeslání nalézt.</value>
  </data>
  <data name="kArgumentTypeUndefined" xml:space="preserve">
    <value>Typ „{0}“ argumentu „{1}“ není definován.</value>
  </data>
  <data name="kArrayOverIndexed" xml:space="preserve">
    <value>Index je mimo zadaný rozsah href=kArrayOverIndexed.html</value>
  </data>
  <data name="kArrayRankReduction" xml:space="preserve">
    <value>Převod typu způsobí snížení pořadí pole. To není povoleno mimo replikace. {511ED65F-FB66-4709-BDDA-DCD5E053B87F}</value>
  </data>
  <data name="kAssignNonCharacterToString" xml:space="preserve">
    <value>Řetězec musí být tvořen ze znaků.</value>
  </data>
  <data name="kAssingToThis" xml:space="preserve">
    <value>hodnota „this“ je jen pro čtení a nelze k ní přiřazovat</value>
  </data>
  <data name="kCallingConstructorInConstructor" xml:space="preserve">
    <value>Nelze volat konstruktor „{0}()“ uvnitř sebe sama.</value>
  </data>
  <data name="KCallingConstructorOnInstance" xml:space="preserve">
    <value>Nelze volat konstruktor „{0}()“ na existujícím objektu.</value>
  </data>
  <data name="kCallingNonStaticMethod" xml:space="preserve">
    <value>„{0}.{1}()“ není statická metoda</value>
  </data>
  <data name="kCallingNonStaticProperty" xml:space="preserve">
    <value>„{0}.{1}“ není statická vlastnost.</value>
  </data>
  <data name="kConsoleWarningMessage" xml:space="preserve">
    <value>&gt; Běhové varování: {0}\n - \„{1}\“ &lt;řádek : {2}, sloupec: {3}&gt;</value>
  </data>
  <data name="kConvertArrayToNonArray" xml:space="preserve">
    <value>Převod pole na {0} může způsobit snížení pořadí pole a není povolen. href=kConvertArrayToNonArray.html</value>
  </data>
  <data name="kConvertDoubleToInt" xml:space="preserve">
    <value>Převod typu double na typ int může způsobit ztrátu informací.</value>
  </data>
  <data name="kConvertNonConvertibleTypes" xml:space="preserve">
    <value>Dotaz na převod nepřevoditelných typů</value>
  </data>
  <data name="kCyclicDependency" xml:space="preserve">
    <value>Mezi dvěma proměnnými existuje cyklická závislost. href=kCyclicDependency.html</value>
  </data>
  <data name="kDereferencingNonPointer" xml:space="preserve">
    <value>Nahlaste vnitřní chybu: Přesměrování typu bez ukazatele. href=DereferencingNonPointer.html</value>
  </data>
  <data name="kExceptionTypeUndefined" xml:space="preserve">
    <value>Typ výjimky „{0}“ není definován.</value>
  </data>
  <data name="keywordCannotBeUsedAsConstructorName" xml:space="preserve">
    <value>\„{0}\“ je klíčové slovo, nelze jej použít jako název konstruktoru.</value>
  </data>
  <data name="keywordCantBeUsedAsIdentifier" xml:space="preserve">
    <value>\„{0}\“ je klíčové slovo, ale byl očekáván identifikátor.</value>
  </data>
  <data name="kFailToConverToFunction" xml:space="preserve">
    <value>Převod objektů na ukazatel funkce není povolen.</value>
  </data>
  <data name="kFailToConverToNull" xml:space="preserve">
    <value>Převod dalších věcí na hodnotu NULL není povoleno.</value>
  </data>
  <data name="kFailToConverToPointer" xml:space="preserve">
    <value>Nelze převést objekty na ukazatele funkcí.</value>
  </data>
  <data name="kFFIFailedToObtainObject" xml:space="preserve">
    <value>Nepodařilo se získat objekt „{0}“ pro „{1}.{2}“.</value>
  </data>
  <data name="kFFIFailedToObtainThisObject" xml:space="preserve">
    <value>Nepodařilo se získat tento objekt pro „{0}.{1}“.</value>
  </data>
  <data name="kFFIInvalidCast" xml:space="preserve">
    <value>Hodnota „{0}“ je vrhána na „{1}“, ale povolený rozsah je [{2}..{3}].</value>
  </data>
  <data name="kFileNotFound" xml:space="preserve">
    <value>Soubor: „{0}“ nebyl nalezen</value>
  </data>
  <data name="kFunctionNotFound" xml:space="preserve">
    <value>Nelze nalézt žádné předpokládané funkce.</value>
  </data>
  <data name="kFunctionNotReturnAtAllCodePaths" xml:space="preserve">
    <value>Všechny cesty v metodě „{0}()“ musí vracet hodnotu</value>
  </data>
  <data name="kIndexOutOfRange" xml:space="preserve">
    <value>Index je mimo rozsah href=kIndexOutOfRange.html</value>
  </data>
  <data name="kInvalidAmountInRangeExpression" xml:space="preserve">
    <value>Velikost ve výrazu rozsahu musí být kladné celé číslo.</value>
  </data>
  <data name="kInvalidArguments" xml:space="preserve">
    <value>Argument není platný.</value>
  </data>
  <data name="kInvalidArgumentsInRangeExpression" xml:space="preserve">
    <value>Hodnota použitá ve výrazu rozsahu musí být číslo nebo písmeno.</value>
  </data>
  <data name="kInvalidBreakForFunction" xml:space="preserve">
    <value>Nahlaste vnitřní chybu: Provádění příkazu bude přerušeno, protože funkce oproti očekávání vrací hodnotu null.</value>
  </data>
  <data name="kInvalidContinueForFunction" xml:space="preserve">
    <value>Nahlaste vnitřní chybu: Příkaz bude i nadále vykonáván, protože funkce oproti očekávání vrací hodnotu null.</value>
  </data>
  <data name="kInvalidStaticCyclicDependency" xml:space="preserve">
    <value>Mezi dvěma proměnnými existuje cyklická závislost.</value>
  </data>
  <data name="kInvalidThis" xml:space="preserve">
    <value>Hodnotu „this“ lze použít pouze v metodách, které jsou členy třídy.</value>
  </data>
  <data name="kInvokeMethodOnInvalidObject" xml:space="preserve">
    <value>Metoda '{0}()' není vyvolána u neplatného objektu.</value>
  </data>
  <data name="kMethodAlreadyDefined" xml:space="preserve">
    <value>Metoda „{0}()“ je již definována.</value>
  </data>
  <data name="kMethodHasInvalidArguments" xml:space="preserve">
    <value>'{0}()' has some invalid arguments href=kMethodHasInvalidArguments</value>
  </data>
  <data name="kMethodIsInaccessible" xml:space="preserve">
    <value>Metody „{0}()“ zde nemůže být dosaženo.</value>
  </data>
  <data name="kMethodNotFound" xml:space="preserve">
    <value>Metoda „{0}()“ nebyla nalezena href=kMethodNotFound.html</value>
  </data>
  <data name="kMethodResolutionFailure" xml:space="preserve">
    <value>Internal error, please report: Method resolution failure on: {0}().</value>
  </data>
  <data name="kMethodResolutionFailureForOperator" xml:space="preserve">
    <value>Operátor „{0}“ nelze použít pro operandy typu „{1}“ a  „{2}“.</value>
  </data>
  <data name="kMethodResolutionFailureWithTypes" xml:space="preserve">
    <value>Neexistuje žádná verze {0}, která přijímá argumenty typu ({1}). href=NonOverloadMethodResolutionError.html</value>
  </data>
  <data name="kMethodStackOverflow" xml:space="preserve">
    <value>Prováděna rekurze „{0}()“, dokud aplikaci Dynamo nedošla paměť, přidejte základní případ.</value>
  </data>
  <data name="kMultipleSymbolFound" xml:space="preserve">
    <value>Více definic pro „{0}“ bylo nalezeno jako {1}. href=kMultipleSymbolFound.html</value>
  </data>
  <data name="kMultipleSymbolFoundFromName" xml:space="preserve">
    <value>Více definic pro „{0}“ bylo nalezeno jako {1}</value>
  </data>
  <data name="kMethodDeprecated" xml:space="preserve">
    <value>Method '{0}' has been deprecated, please use method '{1}' instead. href=Deprecated.html</value>
  </data>
  <data name="kNoStepSizeInAmountRangeExpression" xml:space="preserve">
    <value>Není určena žádná velikost kroku ve výrazu rozsahu množství.</value>
  </data>
  <data name="kPropertyInaccessible" xml:space="preserve">
    <value>Vlastnost '{0}' je nepřístupná</value>
  </data>
  <data name="kPropertyIsInaccessible" xml:space="preserve">
    <value>Vlastnost '{0}' je nepřístupná.</value>
  </data>
  <data name="kPropertyNotFound" xml:space="preserve">
    <value>Vlastnost „{0}“ nebyla nalezena</value>
  </data>
  <data name="kPropertyOfClassNotFound" xml:space="preserve">
    <value>No property called {0} on {1} could be found href=kPropertyOfClassNotFound</value>
  </data>
  <data name="kRangeExpressionConflictOperator" xml:space="preserve">
    <value>Operátor množství nelze použít společně s operátorem kroku.</value>
  </data>
  <data name="kRangeExpressionWithInvalidAmount" xml:space="preserve">
    <value>Velikost kroku je neplatná.</value>
  </data>
  <data name="kRangeExpressionWithInvalidStepSize" xml:space="preserve">
    <value>Velikost kroku výrazu rozsahu je neplatná.</value>
  </data>
  <data name="kRangeExpressionWithNegativeStepNumber" xml:space="preserve">
    <value>Číslo kroku výrazu rozsahu musí být větší než 0.</value>
  </data>
  <data name="kRangeExpressionWithNonIntegerStepNumber" xml:space="preserve">
    <value>Číslo kroku výrazu rozsahu musí být celé číslo.</value>
  </data>
  <data name="kRangeExpressionWithStepSizeZero" xml:space="preserve">
    <value>Velikost kroku výraz rozsahu by neměla být 0.</value>
  </data>
  <data name="kReturnTypeUndefined" xml:space="preserve">
    <value>Návratový typ „{0}“ metody „{1}()“ není definován.</value>
  </data>
  <data name="kStaticMethodNotFound" xml:space="preserve">
    <value>Nelze nalézt statickou metodu nebo konstruktor {0}.{1}().</value>
  </data>
  <data name="kStringIndexingCannotBeAssigned" xml:space="preserve">
    <value>Nelze přiřadit indexování řetězce, položka je pouze ke čtení.</value>
  </data>
  <data name="kStringIndexOutOfRange" xml:space="preserve">
    <value>Index řetězce je mimo rozsah</value>
  </data>
  <data name="kStringOverIndexed" xml:space="preserve">
    <value>Řetězec je nadindexován.</value>
  </data>
  <data name="kTypeUndefined" xml:space="preserve">
    <value>Typ „{0}“ není definován</value>
  </data>
  <data name="kUnboundIdentifierMsg" xml:space="preserve">
    <value>Proměnná „{0}“ dosud nebyla definována.</value>
  </data>
  <data name="kUsingNonStaticMemberInStaticContext" xml:space="preserve">
    <value>„{0}“ není statická vlastnost, takže ji nelze přiřadit ke statické vlastnosti nebo použít ve statických metodách.</value>
  </data>
  <data name="kUsingThisInStaticFunction" xml:space="preserve">
    <value>hodnotu „this“ nelze použít ve statické metodě.</value>
  </data>
  <data name="MapsValueFromOneRangeToAnotherRange" xml:space="preserve">
    <value>Mapuje hodnotu z jednoho rozsahu do druhého.</value>
  </data>
  <data name="MapsValueIntoInputRange" xml:space="preserve">
    <value>Mapuje hodnotu do vstupního rozsahu.</value>
  </data>
  <data name="NoConstructorForAttribute" xml:space="preserve">
    <value>Žádné kontruktory pro atribut „{0}“ nepřijímají argumenty {1}.</value>
  </data>
  <data name="NoSuchFileOrDirectoryToImport" xml:space="preserve">
    <value>Nelze importovat soubor: „{0}“: žádný takový soubor nebo adresář.</value>
  </data>
  <data name="ObjectsContainsInList1NotInList2" xml:space="preserve">
    <value>Vrací objekty, které jsou zahrnuty v seznamu List1, ale jsou vyloučené ze seznamu List2</value>
  </data>
  <data name="ProducesTheSetIntersection" xml:space="preserve">
    <value>Vytvoří průsečík sady dvou sekvencí.</value>
  </data>
  <data name="ProducesTheSetUnion" xml:space="preserve">
    <value>Vytvoří sjednocení sady dvou posloupností pomocí výchozího porovnávače rovnosti.</value>
  </data>
  <data name="RemoveKeys" xml:space="preserve">
    <value>Odebere klíč ze seznamu.</value>
  </data>
  <data name="RemovesTheMembersofTheList" xml:space="preserve">
    <value>Odstraní ze seznamu členy, které nejsou členy vybraného typu.</value>
  </data>
  <data name="ReordersList" xml:space="preserve">
    <value>Změní pořadí seznamu pomocí zadaných indexů.</value>
  </data>
  <data name="ReturnsConcatenatingList" xml:space="preserve">
    <value>Spojí dva seznamy do jednoho seznamu</value>
  </data>
  <data name="ReturnsListWithRankDepth" xml:space="preserve">
    <value>Vrací vícerozměrný seznam podle daného pořadí.</value>
  </data>
  <data name="ReturnsListWithUniformDepth" xml:space="preserve">
    <value>Vrací seznam s jednotnou hloubkou tak, jak určuje vstupní hloubka.</value>
  </data>
  <data name="ReturnsNumberOfItems" xml:space="preserve">
    <value>Vrací počet položek v určeném seznamu.</value>
  </data>
  <data name="ReturnStatementIsNotAllowedInConstructor" xml:space="preserve">
    <value>návratový výraz není v konstruktoru povolen.</value>
  </data>
  <data name="ReturnsTheDeepestDepthOfTheList" xml:space="preserve">
    <value>Vrací nejhlubší hloubku seznamu</value>
  </data>
  <data name="ReturnsTheFlattened1DList" xml:space="preserve">
    <value>Vrací plochý 1D seznam vícerozměrných vstupů. Pokud je zadání jedna hodnota, vrátí tuto hodnotu.</value>
  </data>
  <data name="ReturnsTheIndex" xml:space="preserve">
    <value>Vrací index člena v seznamu</value>
  </data>
  <data name="ReturnsTheNumberOfFalseValueInList" xml:space="preserve">
    <value>Vrací počet hodnot false v seznamu.</value>
  </data>
  <data name="ReturnsTheNumberOfTrueValue" xml:space="preserve">
    <value>Vrací počet hodnot true v seznamu.</value>
  </data>
  <data name="SemiColonExpected" xml:space="preserve">
    <value>Očekávano „;“</value>
  </data>
  <data name="SortsListByValue" xml:space="preserve">
    <value>Uspořádá zadaný seznam podle hodnot jeho členů buď vzestupně, nebo sestupně.</value>
  </data>
  <data name="SortsListByValueInAscending" xml:space="preserve">
    <value>Seřadí zadaný seznam podle hodnot jeho členů ve vzestupném pořadí.</value>
  </data>
  <data name="TooManyCharacters" xml:space="preserve">
    <value>Příliš mnoho znaků v literálu znaku</value>
  </data>
  <data name="UnknownAttribute" xml:space="preserve">
    <value>Neznámý atribut {0}</value>
  </data>
  <data name="UseInlineConditional" xml:space="preserve">
    <value>Výraz „{0}“ lze použít pouze na nezbytný blok jazyka, nechcete místo toho zvážit použití vložené podmínky?</value>
  </data>
  <data name="UseListJoinNode" xml:space="preserve">
    <value>Místo toho použijte uzel List.Join.</value>
  </data>
  <data name="ValidForImperativeBlockOnly" xml:space="preserve">
    <value>Výraz „{0}“ lze použít pouze na nezbytném bloku jazyka.</value>
  </data>
  <data name="ModuloByZero" xml:space="preserve">
    <value>Modulo celého čísla nulou</value>
  </data>
  <data name="addadd_expected" xml:space="preserve">
    <value>očekáváno „++“</value>
  </data>
  <data name="add_expected" xml:space="preserve">
    <value>očekáváno „+“</value>
  </data>
  <data name="andand_expected" xml:space="preserve">
    <value>očekáváno „&amp;&amp;“</value>
  </data>
  <data name="and_expected" xml:space="preserve">
    <value>očekáváno „&amp;“</value>
  </data>
  <data name="asterisk_expected" xml:space="preserve">
    <value>očekáváno „*“</value>
  </data>
  <data name="catch_expected" xml:space="preserve">
    <value>Očekáváno „catch“</value>
  </data>
  <data name="char_expected" xml:space="preserve">
    <value>očekáván typ CHAR</value>
  </data>
  <data name="closebrace_expected" xml:space="preserve">
    <value>očekáváno „}“</value>
  </data>
  <data name="closebracket_expected" xml:space="preserve">
    <value>očekáváno „closebracket“</value>
  </data>
  <data name="closeparen_expected" xml:space="preserve">
    <value>očekáváno closeparen</value>
  </data>
  <data name="comma_expected" xml:space="preserve">
    <value>očekáváno „,“</value>
  </data>
  <data name="curvedash_expected" xml:space="preserve">
    <value>Očekáváno „~\“</value>
  </data>
  <data name="dashdash_expected" xml:space="preserve">
    <value>očekáváno „--“</value>
  </data>
  <data name="divider_expected" xml:space="preserve">
    <value>očekáváno „/“</value>
  </data>
  <data name="doublecolumn_expected" xml:space="preserve">
    <value>očekáváno „:“</value>
  </data>
  <data name="endline_expected" xml:space="preserve">
    <value>očekáváno endline</value>
  </data>
  <data name="EOF_expected" xml:space="preserve">
    <value>očekáváno EOF</value>
  </data>
  <data name="equalmark_expected" xml:space="preserve">
    <value>očekáváno „=“</value>
  </data>
  <data name="equalright_expected" xml:space="preserve">
    <value>očekáváno „=&gt;“</value>
  </data>
  <data name="equal_expected" xml:space="preserve">
    <value>očekáváno „equal“</value>
  </data>
  <data name="error" xml:space="preserve">
    <value>chyba</value>
  </data>
  <data name="float_expected" xml:space="preserve">
    <value>očekáváno float</value>
  </data>
  <data name="greaterequal_expected" xml:space="preserve">
    <value>očekáváno „greaterequal“</value>
  </data>
  <data name="greaterthan_expected" xml:space="preserve">
    <value>očekáváno „greaterthan“</value>
  </data>
  <data name="hax_expected" xml:space="preserve">
    <value>očekáváno „#“</value>
  </data>
  <data name="ident_expected" xml:space="preserve">
    <value>Očekáváno ident</value>
  </data>
  <data name="invalid_Associative_AccessSpecifier" xml:space="preserve">
    <value>neplatný objekt Associative_AccessSpecifier</value>
  </data>
  <data name="invalid_Associative_AddOp" xml:space="preserve">
    <value>invalid_Associative_AddOp</value>
  </data>
  <data name="invalid_Associative_BinaryOps" xml:space="preserve">
    <value>neplatný objekt Associative_BinaryOps</value>
  </data>
  <data name="invalid_Associative_BitOp" xml:space="preserve">
    <value>neplatný objekt Associative_BitOp</value>
  </data>
  <data name="invalid_Associative_classdecl" xml:space="preserve">
    <value>neplatný objekt Associative_classdecl</value>
  </data>
  <data name="invalid_Associative_ComparisonOp" xml:space="preserve">
    <value>neplatný objekt Associative_ComparisonOp</value>
  </data>
  <data name="invalid_Associative_DecoratedIdentifier" xml:space="preserve">
    <value>neplatný objekt Associative_DecoratedIdentifier</value>
  </data>
  <data name="invalid_Associative_Factor" xml:space="preserve">
    <value>neplatný objekt Associative_Factor</value>
  </data>
  <data name="invalid_Associative_FunctionalStatement" xml:space="preserve">
    <value>neplatný objekt Associative_FunctionalStatement</value>
  </data>
  <data name="invalid_Associative_functiondecl" xml:space="preserve">
    <value>neplatný objekt Associative_functiondecl</value>
  </data>
  <data name="invalid_Associative_LanguageBlock" xml:space="preserve">
    <value>neplatný objekt Associative_LanguageBlock</value>
  </data>
  <data name="invalid_Associative_LogicalOp" xml:space="preserve">
    <value>neplatný objekt Associative_LogicalOp</value>
  </data>
  <data name="invalid_Associative_MulOp" xml:space="preserve">
    <value>neplatný objekt Associative_MulOp</value>
  </data>
  <data name="invalid_Associative_NameReference" xml:space="preserve">
    <value>neplatný objekt Associative_NameReference</value>
  </data>
  <data name="invalid_Associative_negop" xml:space="preserve">
    <value>neplatný objekt Associative_negop</value>
  </data>
  <data name="invalid_Associative_Number" xml:space="preserve">
    <value>neplatný objekt Associative_Number</value>
  </data>
  <data name="invalid_Associative_PostFixOp" xml:space="preserve">
    <value>neplatný objekt Associative_PostFixOp</value>
  </data>
  <data name="invalid_Associative_Statement" xml:space="preserve">
    <value>neplatný objekt Associative_Statement</value>
  </data>
  <data name="invalid_Associative_UnaryExpression" xml:space="preserve">
    <value>neplatný objekt Associative_UnaryExpression</value>
  </data>
  <data name="invalid_Associative_unaryop" xml:space="preserve">
    <value>neplatný objekt Associative_unaryop</value>
  </data>
  <data name="invalid_Hydrogen" xml:space="preserve">
    <value>neplatný objekt Hydrogen</value>
  </data>
  <data name="invalid_Imperative_addop" xml:space="preserve">
    <value>neplatný objekt Imperative_addop</value>
  </data>
  <data name="invalid_Imperative_assignstmt" xml:space="preserve">
    <value>neplatný objekt Imperative_assignstmt</value>
  </data>
  <data name="invalid_Imperative_bitop" xml:space="preserve">
    <value>neplatný objekt Imperative_bitop</value>
  </data>
  <data name="invalid_Imperative_decoratedIdentifier" xml:space="preserve">
    <value>neplatný objekt Imperative_decoratedIdentifier</value>
  </data>
  <data name="invalid_Imperative_factor" xml:space="preserve">
    <value>neplatný objekt Imperative_factor</value>
  </data>
  <data name="invalid_Imperative_forloop" xml:space="preserve">
    <value>neplatný objekt Imperative_forloop</value>
  </data>
  <data name="invalid_Imperative_functiondecl" xml:space="preserve">
    <value>neplatný objekt Imperative_functiondecl</value>
  </data>
  <data name="invalid_Imperative_ifstmt" xml:space="preserve">
    <value>neplatný objekt Imperative_ifstmt</value>
  </data>
  <data name="invalid_Imperative_languageblock" xml:space="preserve">
    <value>neplatný objekt Imperative_languageblock</value>
  </data>
  <data name="invalid_Imperative_logicalop" xml:space="preserve">
    <value>neplatný objekt Imperative_logicalop</value>
  </data>
  <data name="invalid_Imperative_mulop" xml:space="preserve">
    <value>neplatný objekt Imperative_mulop</value>
  </data>
  <data name="invalid_Imperative_NameReference" xml:space="preserve">
    <value>neplatný objekt Imperative_NameReference</value>
  </data>
  <data name="invalid_Imperative_num" xml:space="preserve">
    <value>neplatný objekt Imperative_num</value>
  </data>
  <data name="invalid_Imperative_PostFixOp" xml:space="preserve">
    <value>neplatný objekt Imperative_PostFixOp</value>
  </data>
  <data name="invalid_Imperative_relop" xml:space="preserve">
    <value>neplatný objekt Imperative_relop</value>
  </data>
  <data name="invalid_Imperative_stmt" xml:space="preserve">
    <value>neplatný objekt Imperative_stmt</value>
  </data>
  <data name="invalid_Imperative_unaryexpr" xml:space="preserve">
    <value>neplatný objekt Imperative_unaryexpr</value>
  </data>
  <data name="invalid_Imperative_unaryop" xml:space="preserve">
    <value>neplatný objekt Imperative_unaryop</value>
  </data>
  <data name="invalid_Import_Statement" xml:space="preserve">
    <value>neplatný objekt Import_Statement</value>
  </data>
  <data name="in_expected" xml:space="preserve">
    <value>očekávano „in“</value>
  </data>
  <data name="kw_break_expected" xml:space="preserve">
    <value>očekáváno kw_break</value>
  </data>
  <data name="kw_class_expected" xml:space="preserve">
    <value>očekáváno kw_class</value>
  </data>
  <data name="kw_constructor_expected" xml:space="preserve">
    <value>očekáváno kw_constructor</value>
  </data>
  <data name="kw_continue_expected" xml:space="preserve">
    <value>očekáván objekt kw_continue</value>
  </data>
  <data name="kw_def_expected" xml:space="preserve">
    <value>očekáváno kw_def</value>
  </data>
  <data name="kw_elseif_expected" xml:space="preserve">
    <value>o4ek8v8no kw_elseif</value>
  </data>
  <data name="kw_else_expected" xml:space="preserve">
    <value>očekáváno kw_else</value>
  </data>
  <data name="kw_extend_expected" xml:space="preserve">
    <value>očekáváno kw_extend</value>
  </data>
  <data name="kw_external_expected" xml:space="preserve">
    <value>očekáváno kw_external</value>
  </data>
  <data name="kw_for_expected" xml:space="preserve">
    <value>očekáváno kw_for</value>
  </data>
  <data name="kw_from_expected" xml:space="preserve">
    <value>očekáváno kw_from</value>
  </data>
  <data name="kw_heap_expected" xml:space="preserve">
    <value>očekáváno kw_heap</value>
  </data>
  <data name="kw_if_expected" xml:space="preserve">
    <value>očekáváno kw_if</value>
  </data>
  <data name="kw_import_expected" xml:space="preserve">
    <value>očekáváno kw_import</value>
  </data>
  <data name="kw_local_expected" xml:space="preserve">
    <value>očekáváno kw_local</value>
  </data>
  <data name="kw_native_expected" xml:space="preserve">
    <value>očekáváno kw_native</value>
  </data>
  <data name="kw_prefix_expected" xml:space="preserve">
    <value>očekáváno kw_prefix</value>
  </data>
  <data name="kw_static_expected" xml:space="preserve">
    <value>očekáváno kw_static</value>
  </data>
  <data name="kw_while_expected" xml:space="preserve">
    <value>očekáváno kw_while</value>
  </data>
  <data name="lessequal_expected" xml:space="preserve">
    <value>očekáváno „lessequal“</value>
  </data>
  <data name="lessthan_expected" xml:space="preserve">
    <value>očekáváno „lessthan“</value>
  </data>
  <data name="literal_false_expected" xml:space="preserve">
    <value>očekáváno literal_false</value>
  </data>
  <data name="literal_null_expected" xml:space="preserve">
    <value>očekáváno literal_null</value>
  </data>
  <data name="literal_true_expected" xml:space="preserve">
    <value>očekáváno literal_true</value>
  </data>
  <data name="neg_expected" xml:space="preserve">
    <value>očekáváno „neg“</value>
  </data>
  <data name="notequal_expected" xml:space="preserve">
    <value>očekáváno „notequal“</value>
  </data>
  <data name="not_expected" xml:space="preserve">
    <value>není očekáváno</value>
  </data>
  <data name="number_expected" xml:space="preserve">
    <value>očekáváno „number“</value>
  </data>
  <data name="openbrace_expected" xml:space="preserve">
    <value>očekáváno „{“</value>
  </data>
  <data name="openbracket_expected" xml:space="preserve">
    <value>očekáváno openbracket</value>
  </data>
  <data name="openparen_expected" xml:space="preserve">
    <value>očekáváno openparen</value>
  </data>
  <data name="oror_expected" xml:space="preserve">
    <value>Očekáváno „||“</value>
  </data>
  <data name="period_expected" xml:space="preserve">
    <value>očekávána tečka</value>
  </data>
  <data name="pipe_expected" xml:space="preserve">
    <value>očekávána trubka</value>
  </data>
  <data name="postfixed_replicationguide_expected" xml:space="preserve">
    <value>očekáváno „postfixed replicationguide“</value>
  </data>
  <data name="power_expected" xml:space="preserve">
    <value>očekáváno „^“</value>
  </data>
  <data name="private_expected" xml:space="preserve">
    <value>očekáváno „private“</value>
  </data>
  <data name="protected_expected" xml:space="preserve">
    <value>očekáváno „protected“</value>
  </data>
  <data name="public_expected" xml:space="preserve">
    <value>očekávano „public“</value>
  </data>
  <data name="question_expected" xml:space="preserve">
    <value>očekáváno „?“</value>
  </data>
  <data name="rangeop_expected" xml:space="preserve">
    <value>očekáváno „rangeop“</value>
  </data>
  <data name="reminder_expected" xml:space="preserve">
    <value>očekáváno „%“</value>
  </data>
  <data name="replicationguide_postfix_expected" xml:space="preserve">
    <value>očekáváno replicationguide_postfix</value>
  </data>
  <data name="textstring_expected" xml:space="preserve">
    <value>očekáváno textstring</value>
  </data>
  <data name="this_symbol_not_expected_in_Associative_FunctionalStatement" xml:space="preserve">
    <value>tento symbol není očekáván v objektu Associative_FunctionalStatement.</value>
  </data>
  <data name="this_symbol_not_expected_in_Associative_FunctionCallStatement" xml:space="preserve">
    <value>tento symbol není očekáván v objektu Associative_FunctionCallStatement</value>
  </data>
  <data name="this_symbol_not_expected_in_Associative_Statement" xml:space="preserve">
    <value>tento symbol není očekáván v objektu Associative_Statement.</value>
  </data>
  <data name="this_symbol_not_expected_in_Import_Statement" xml:space="preserve">
    <value>tento symbol není očekáván v objektu Import_Statement.</value>
  </data>
  <data name="this_symbol_no_expected_in_Associative_FunctionalStatement" xml:space="preserve">
    <value>tento symbol není očekáván v objektu Associative_FunctionalStatement.</value>
  </data>
  <data name="this_symbo_no_expected_in_Associative_NonAssignmentStatement" xml:space="preserve">
    <value>tento symbol není očekáván v objektu Associative_NonAssignmentStatement.</value>
  </data>
  <data name="throw_expected" xml:space="preserve">
    <value>očekáváno „throw“</value>
  </data>
  <data name="triquestionmark_expected" xml:space="preserve">
    <value>očekáváno ???</value>
  </data>
  <data name="try_expected" xml:space="preserve">
    <value>očekávaná hodnota „try“</value>
  </data>
  <data name="kInvalidType" xml:space="preserve">
    <value>Typ není platný.</value>
  </data>
  <data name="AlgorithmNotSupported" xml:space="preserve">
    <value>Vybraný algoritmus není podporován.</value>
  </data>
  <data name="ArrayWithNotSupported" xml:space="preserve">
    <value>Pole bez společné supertřídy není dosud podporováno: {0}</value>
  </data>
  <data name="FailedToResolveSortingFunction" xml:space="preserve">
    <value>Nepodařilo se vyhodnotit srovnávací funkci ke třídění. Očekávané řazení definic: int(x,y)</value>
  </data>
  <data name="FunctionDispatchFailed" xml:space="preserve">
    <value>Výjimku funkce nebylo možné dokončit: {0}</value>
  </data>
  <data name="MaxDimensionExceeded" xml:space="preserve">
    <value>Požadovaná replikace přesahuje dostupné rozměry pole. Tento případ není ještě podporován – {0}</value>
  </data>
  <data name="MultipleFunctionsFound" xml:space="preserve">
    <value>Nebylo možné rozhodnout, která funkce má být provedena. Zadejte konkrétní informace o typu. Mezi možné funkce patří následující položky: </value>
  </data>
  <data name="MultipleGuidesNotSupported" xml:space="preserve">
    <value>Více vodítek u jednoho argumentu, které nejsou ve vzestupném pořadí, není ještě podporováno. Použijte smyčku. </value>
  </data>
  <data name="OneDArrayExpected" xml:space="preserve">
    <value>Typ obou argumentů měl původně být jednorozměrné pole.</value>
  </data>
  <data name="OperationFailType1" xml:space="preserve">
    <value>{0}.{1} – Operace se nezdařila.</value>
  </data>
  <data name="OperationFailType2" xml:space="preserve">
    <value>{0}.{1} – Operace se nezdařila.
{2}</value>
  </data>
  <data name="ZipAlgorithmError" xml:space="preserve">
    <value>Nelze podporovat nejdelší a nejkratší komprimované kolekce.</value>
  </data>
  <data name="FailedToCastFromNull" xml:space="preserve">
    <value>Hodnota NULL nemůže být přičtena k hodnotě {0}. href=FailedToCastFromNull.html</value>
  </data>
  <data name="ArgumentNullException" xml:space="preserve">
    <value>Value cannot be null.
Parameter name: {0}. href=ArgumentNullException.html</value>
  </data>
  <data name="FunctionGroupNotFound" xml:space="preserve">
    <value>Žádná funkce s názvem {0} ve skupině {1} nebyla nalezena.</value>
  </data>
  <data name="FunctionGroupWithParameterNotFound" xml:space="preserve">
    <value>Žádná funkce s názvem {0} ve skupině {1} s parametrem {2} nebyla nalezena.</value>
  </data>
  <data name="kInvalidStringArgumentInRangeExpression" xml:space="preserve">
    <value>Jako počáteční hodnotu lze použít pouze číslo nebo jedno písmeno.</value>
  </data>
  <data name="kInvalidUnicodeArgumentInRangeExpression" xml:space="preserve">
    <value>Výrazy rozsahu a posloupnosti mohou obsahovat pouze znaky ASCII</value>
  </data>
  <data name="MoreThanOneDominantList" xml:space="preserve">
    <value>Povolen je pouze jeden dominantní seznam.</value>
  </data>
  <data name="RangeExpressionOutOfMemory" xml:space="preserve">
    <value>Počet položek ve výrazu rozsahu překračuje povolený limit.</value>
  </data>
  <data name="IndexIntoNonArrayObject" xml:space="preserve">
    <value>Na zadané adrese indexu neexistuje žádná položka.</value>
  </data>
  <data name="RunOutOfMemory" xml:space="preserve">
    <value>K dokončení této operace není k dispozici dostatek paměti.</value>
  </data>
  <data name="InvalidFunction" xml:space="preserve">
    <value>Funkce není platná.</value>
  </data>
  <data name="kInvalidListLevelName" xml:space="preserve">
    <value>Název {0} nelze pro úroveň seznamu použít. Zkuste pro podlaží 1 použít název L1.</value>
  </data>
  <data name="invalid_Associative_Level" xml:space="preserve">
    <value>Neplatná syntaxe seznam@úroveň. Zkuste pro podlaží 1 použít syntaxi @L1.</value>
  </data>
  <data name="VariableRedifinitionError" xml:space="preserve">
    <value>Proměnná {0} byla definována v tomto uzlu bloku kódu. Proměnnou nelze definovat vícekrát.</value>
  </data>
  <data name="VariableRecursiveReference" xml:space="preserve">
    <value>Proměnná {0} je použita ve stejném příkazu, který jste definovali. Rekurzivní závislost není povolena.</value>
  </data>
  <data name="InvalidArrayIndexType" xml:space="preserve">
    <value>Indexy seznamů musí být číselné hodnoty. href=InvalidArrayIndexType.html</value>
  </data>
  <data name="FailedToConvertArrayToDictionary" xml:space="preserve">
    <value>Nelze převést typ Seznam na Slovník.</value>
  </data>
  <data name="NonOverloadMethodResolutionError" xml:space="preserve">
    <value>{0} očekává argument typu (s)({1}), ale byla zavolána s ({2}). href=NonOverloadMethodResolutionError.html</value>
  </data>
  <data name="DeprecatedListInitializationSyntax" xml:space="preserve">
    <value>Složené závorky se již pro tvorbu seznamu nepoužívají. Použijte místo nich závorky hranaté, například [] nebo [1,2,3].</value>
  </data>
  <data name="ListMethodDeprecated" xml:space="preserve">
    <value>Metoda '{0}' byla vyřazena, použijte místo ní metodu '{1}' s typem Slovník.</value>
  </data>
  <data name="IntegerOverflow" xml:space="preserve">
    <value>Operace vedla k přetečení celého čísla. Její výsledek může být neočekávaný.</value>
  </data>
</root>