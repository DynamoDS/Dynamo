//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ProtoImperative.Properties
{


    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "15.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("ProtoImperative.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Array size overflow.
        /// </summary>
        public static string ArraySizeOverflow {
            get {
                return ResourceManager.GetString("ArraySizeOverflow", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {0} is a class name, can&apos;t be used as a variable..
        /// </summary>
        public static string ClassNameAsVariableError {
            get {
                return ResourceManager.GetString("ClassNameAsVariableError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Array declaration expected constant expression.
        /// </summary>
        public static string ConstantExpectedInArrayDeclaration {
            get {
                return ResourceManager.GetString("ConstantExpectedInArrayDeclaration", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to \&quot;{0}\&quot;is a function and not allowed as a variable name.
        /// </summary>
        public static string FunctionAsVaribleError {
            get {
                return ResourceManager.GetString("FunctionAsVaribleError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Function pointer is not allowed at binary expression other than assignment..
        /// </summary>
        public static string FunctionPointerNotAllowedAtBinaryExpression {
            get {
                return ResourceManager.GetString("FunctionPointerNotAllowedAtBinaryExpression", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to redefinition of identifier &apos;{0}&apos;.
        /// </summary>
        public static string IdentifierRedefinition {
            get {
                return ResourceManager.GetString("IdentifierRedefinition", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Variables declared in an outer scope cannot be changed inside an imperative block..
        /// </summary>
        public static string ImperativeSymbolsAreReadOnly {
            get {
                return ResourceManager.GetString("ImperativeSymbolsAreReadOnly", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to array initializer must be an expression list.
        /// </summary>
        public static string InvalidArrayInitializer {
            get {
                return ResourceManager.GetString("InvalidArrayInitializer", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An imperative language block is declared within an imperative language block..
        /// </summary>
        public static string InvalidNestedImperativeBlock {
            get {
                return ResourceManager.GetString("InvalidNestedImperativeBlock", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Only identifier or identifier list can appear on the left hand side of assignment..
        /// </summary>
        public static string OnlyIdentifierOrIdentifierListCanBeOnLeftSide {
            get {
                return ResourceManager.GetString("OnlyIdentifierOrIdentifierListCanBeOnLeftSide", resourceCulture);
            }
        }
    }
}
