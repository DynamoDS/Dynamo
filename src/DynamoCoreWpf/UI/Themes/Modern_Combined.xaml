<!--
    This code was generated by a tool.
    Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
-->
<!--
Source files:
UI\Themes\Modern\Connectors.xaml
UI\Themes\Modern\DataTemplates.xaml
UI\Themes\Modern\DynamoColorsAndBrushes.xaml
UI\Themes\Modern\DynamoConverters.xaml
UI\Themes\Modern\DynamoModern.xaml
UI\Themes\Modern\DynamoText.xaml
UI\Themes\Modern\InPorts.xaml
UI\Themes\Modern\LiveChartsStyle.xaml
UI\Themes\Modern\MenuStyleDictionary.xaml
UI\Themes\Modern\OutPorts.xaml
UI\Themes\Modern\Ports.xaml
UI\Themes\Modern\SidebarGridStyleDictionary.xaml
UI\Themes\Modern\ToolbarStyleDictionary.xaml
-->
<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:viewModels="clr-namespace:Dynamo.ViewModels" xmlns:ui="clr-namespace:Dynamo.UI" xmlns:i="clr-namespace:Dynamo.Microsoft.Xaml.Behaviors;assembly=Dynamo.Microsoft.Xaml.Behaviors" xmlns:controls="clr-namespace:Dynamo.Controls" xmlns:nodes="clr-namespace:Dynamo.Nodes" xmlns:mouse="clr-namespace:Dynamo.Wpf.UI" xmlns:configuration="clr-namespace:Dynamo.Configuration;assembly=DynamoCore" xmlns:sys="clr-namespace:System;assembly=mscorlib" xmlns:models="clr-namespace:Dynamo.Models;assembly=DynamoCore" xmlns:avalonedit="clr-namespace:ICSharpCode.AvalonEdit;assembly=ICSharpCode.AvalonEdit" xmlns:clr="clr-namespace:System;assembly=mscorlib" xmlns:views="clr-namespace:Dynamo.Views" xmlns:dynui="clr-namespace:Dynamo.UI.Controls" xmlns:fa="clr-namespace:FontAwesome5;assembly=FontAwesome5.Net" xmlns:p="clr-namespace:Dynamo.Wpf.Properties" xmlns:interactivity="clr-namespace:Dynamo.Microsoft.Xaml.Behaviors;assembly=Dynamo.Microsoft.Xaml.Behaviors" xmlns:uiViews="clr-namespace:Dynamo.UI.Views" xmlns:lvc="clr-namespace:LiveChartsCore.SkiaSharpView.WPF;assembly=LiveChartsCore.SkiaSharpView.WPF" xmlns:system="clr-namespace:System;assembly=mscorlib" xmlns:diag="clr-namespace:System.Diagnostics;assembly=WindowsBase" xmlns:fai="http://schemas.fontawesome.io/icons/" xmlns:graphNodes="clr-namespace:Dynamo.Graph.Nodes;assembly=DynamoCore">
  <DataTemplate x:Name="connectorContextMenuViewModel" DataType="{x:Type viewModels:ConnectorContextMenuViewModel}">
    <controls:ConnectorContextMenuView DataContext="{Binding}" />
  </DataTemplate>
  <DataTemplate x:Name="connectorAnchorViewModel" DataType="{x:Type viewModels:ConnectorAnchorViewModel}">
    <controls:ConnectorAnchorView DataContext="{Binding}" />
  </DataTemplate>
  <DataTemplate x:Name="connectorPinViewModel" DataType="{x:Type viewModels:ConnectorPinViewModel}">
    <nodes:ConnectorPinView DataContext="{Binding}" />
  </DataTemplate>
  <DataTemplate x:Key="ShowPinCollection">
    <!--Defines how each item in the collection is displayed-->
    <ItemsControl x:Name="ic" ItemsSource="{Binding}">
      <ItemsControl.ItemsPanel>
        <ItemsPanelTemplate>
          <Canvas />
        </ItemsPanelTemplate>
      </ItemsControl.ItemsPanel>
      <ItemsControl.ItemContainerStyle>
        <!--Presents each item bound to its Left,Top (x,y)-->
        <Style TargetType="ContentPresenter">
          <Setter Property="Canvas.Left" Value="{Binding Path=Left}" />
          <Setter Property="Canvas.Top" Value="{Binding Path=Top}" />
        </Style>
      </ItemsControl.ItemContainerStyle>
    </ItemsControl>
  </DataTemplate>
  <Style x:Key="SConnector" TargetType="Path">
    <Style.Triggers>
      <DataTrigger Binding="{Binding Path=IsConnecting, Mode=OneWay}" Value="True">
        <Setter Property="StrokeDashArray" Value="2" />
      </DataTrigger>
      <DataTrigger Binding="{Binding Path=IsFrozen, Mode=OneWay}" Value="True">
        <Setter Property="StrokeDashArray" Value="2" />
        <Setter Property="Opacity" Value="0.5" />
      </DataTrigger>
      <MultiDataTrigger>
        <MultiDataTrigger.Conditions>
          <Condition Binding="{Binding Path=IsTemporarilyDisplayed, Mode=OneWay}" Value="True" />
          <Condition Binding="{Binding Path=IsHidden, Mode=OneWay}" Value="True" />
        </MultiDataTrigger.Conditions>
        <MultiDataTrigger.Setters>
          <Setter Property="IsHitTestVisible" Value="True" />
          <Setter Property="Opacity" Value="0.4" />
          <Setter Property="ToolTipService.IsEnabled" Value="True" />
        </MultiDataTrigger.Setters>
      </MultiDataTrigger>
      <MultiDataTrigger>
        <MultiDataTrigger.Conditions>
          <Condition Binding="{Binding Path=IsTemporarilyDisplayed, Mode=OneWay}" Value="False" />
          <Condition Binding="{Binding Path=IsHidden, Mode=OneWay}" Value="True" />
        </MultiDataTrigger.Conditions>
        <MultiDataTrigger.Setters>
          <Setter Property="IsHitTestVisible" Value="False" />
          <Setter Property="Opacity" Value="0.0" />
          <Setter Property="ToolTipService.IsEnabled" Value="False" />
        </MultiDataTrigger.Setters>
      </MultiDataTrigger>
      <DataTrigger Binding="{Binding Path=IsHidden, Mode=OneWay}" Value="False">
        <Setter Property="IsHitTestVisible" Value="True" />
        <Setter Property="Opacity" Value="1.0" />
        <Setter Property="ToolTipService.IsEnabled" Value="True" />
      </DataTrigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="SEllipses" TargetType="Ellipse">
    <Style.Triggers>
      <MultiDataTrigger>
        <MultiDataTrigger.Conditions>
          <Condition Binding="{Binding Path=IsTemporarilyDisplayed, Mode=OneWay}" Value="True" />
          <Condition Binding="{Binding Path=IsHidden, Mode=OneWay}" Value="True" />
        </MultiDataTrigger.Conditions>
        <MultiDataTrigger.Setters>
          <Setter Property="Opacity" Value="0.4" />
        </MultiDataTrigger.Setters>
      </MultiDataTrigger>
      <MultiDataTrigger>
        <MultiDataTrigger.Conditions>
          <Condition Binding="{Binding Path=IsTemporarilyDisplayed, Mode=OneWay}" Value="False" />
          <Condition Binding="{Binding Path=IsHidden, Mode=OneWay}" Value="True" />
        </MultiDataTrigger.Conditions>
        <MultiDataTrigger.Setters>
          <Setter Property="Opacity" Value="0.0" />
        </MultiDataTrigger.Setters>
      </MultiDataTrigger>
      <DataTrigger Binding="{Binding Path=IsHidden, Mode=OneWay}" Value="False">
        <Setter Property="Opacity" Value="1.0" />
      </DataTrigger>
    </Style.Triggers>
  </Style>
  <DataTemplate x:Name="nodeViewModel" DataType="{x:Type viewModels:NodeViewModel}">
    <controls:NodeView />
  </DataTemplate>
  <DataTemplate x:Name="noteViewModel" DataType="{x:Type viewModels:NoteViewModel}">
    <nodes:NoteView />
  </DataTemplate>
  <DataTemplate x:Name="infoBubbleViewModel" DataType="{x:Type viewModels:InfoBubbleViewModel}">
    <controls:InfoBubbleView />
  </DataTemplate>
  <DataTemplate x:Name="annotationViewModel" DataType="{x:Type viewModels:AnnotationViewModel}">
    <nodes:AnnotationView />
  </DataTemplate>
  <SolidColorBrush x:Key="DynamoStandardLabelTextBrush" Color="#BBBBBB" />
  <Color x:Key="PrimaryCharcoal100">#EEEEEE</Color>
  <Color x:Key="PrimaryCharcoal200">#DCDCDC</Color>
  <Color x:Key="PrimaryCharcoal300">#CCCCCC</Color>
  <Color x:Key="LightMidGrey">#808080</Color>
  <Color x:Key="LightGrey">#989898</Color>
  <Color x:Key="MidGrey">#666666</Color>
  <Color x:Key="DarkMidGrey">#535353</Color>
  <Color x:Key="DarkGrey">#4A4A4A</Color>
  <Color x:Key="DarkerGrey">#3C3C3C</Color>
  <Color x:Key="Lilac">#F2A9F2</Color>
  <Color x:Key="Green300">#B7D78C</Color>
  <Color x:Key="Turqoise300">#84D7CD</Color>
  <Color x:Key="YellowOrange500">#FAA21B</Color>
  <Color x:Key="Red400">#F486B6</Color>
  <Color x:Key="Red500">#EB5555</Color>
  <Color x:Key="Blue200">#9BD5EF</Color>
  <Color x:Key="Blue300">#6AC0E7</Color>
  <Color x:Key="Blue350">#6DD2FF</Color>
  <Color x:Key="Blue400">#38ABDF</Color>
  <Color x:Key="Blue450">#006EAF</Color>
  <Color x:Key="DarkBlue200">#BCD3EE</Color>
  <Color x:Key="DefaultFontColor">#DCDCDC</Color>
  <Color x:Key="HoverFontColor">#1AFFFFFF</Color>
  <Color x:Key="PressedFontColor">#2EFFFFFF</Color>
  <Color x:Key="DisabledFontColor">#66999999</Color>
  <Color x:Key="WhiteColor">#F5F5F5</Color>
  <SolidColorBrush x:Key="DynamoWindowBrush" Color="#353535" />
  <SolidColorBrush x:Key="WorkspaceBackgroundBrush" Color="#232323" />
  <Color x:Key="WorkspaceBackgroundHome">#F9F9F9</Color>
  <Color x:Key="WorkspaceBackgroundCustom">#FFFFDC</Color>
  <SolidColorBrush x:Key="WorkspaceTabHeaderActiveTextBrush" Color="#EEEEEE" />
  <SolidColorBrush x:Key="WorkspaceTabHeaderInactiveTextBrush" Color="#777777" />
  <SolidColorBrush x:Key="WorkspaceTabBorderSelectedTrue" Color="#2A2A2A" />
  <SolidColorBrush x:Key="WorkspaceTabBorderSelectedFalse" Color="#3C3C3C" />
  <SolidColorBrush x:Key="NodePreviewColor" Color="#BBBBBB" />
  <SolidColorBrush x:Key="NodeCustomColor" Color="#B385F2" />
  <SolidColorBrush x:Key="NodeOptionsButtonBackground" Color="#282828" />
  <SolidColorBrush x:Key="NodeDismissedWarningsGlyphForeground" Color="#4B4B4B" />
  <SolidColorBrush x:Key="NodeDismissedWarningsGlyphBackground" Color="#EBEBEB" />
  <SolidColorBrush x:Key="NodeLacingGlyphBackground" Color="#EBEBEB" />
  <SolidColorBrush x:Key="NodeContextMenuBackgroundHighlight" Color="#808080" />
  <SolidColorBrush x:Key="NodeContextMenuSeparatorColor" Color="#AFAFAF" />
  <SolidColorBrush x:Key="NodeSelectionTextColor" Color="#6ac0e7" />
  <SolidColorBrush x:Key="outerBorderSelection" Color="#4192d9" />
  <SolidColorBrush x:Key="stringLabelBackground" Color="#E0A86F" />
  <SolidColorBrush x:Key="numberLabelBackground" Color="#6AC0E7" />
  <SolidColorBrush x:Key="objectLabelBackground" Color="#EEEEEE" />
  <SolidColorBrush x:Key="boolLabelBackground" Color="#F9F9A5" />
  <SolidColorBrush x:Key="nullLabelBackground" Color="#F9F9A5" />
  <SolidColorBrush x:Key="autocompletionWindow" Color="#535353" />
  <SolidColorBrush x:Key="AutocompletionWindowFontColor" Color="#F5F5F5" />
  <Color x:Key="EdgeColor">#000000</Color>
  <Color x:Key="PointColor">#000000</Color>
  <Color x:Key="SelectionColor">#009EFF</Color>
  <Color x:Key="MaterialColor">#efede4</Color>
  <SolidColorBrush x:Key="NormalBorderBrush" Color="#444444" />
  <SolidColorBrush x:Key="NormalBackgroundBrush" Color="#535353" />
  <SolidColorBrush x:Key="NormalForegroundBrush" Color="#EEEEEE" />
  <SolidColorBrush x:Key="ActiveForegroundBrush" Color="#FFFFFF" />
  <SolidColorBrush x:Key="HighlightedHeaderBrush" Color="#424242" />
  <SolidColorBrush x:Key="HighlightedBrush" Color="#424242" />
  <SolidColorBrush x:Key="DisabledForegroundBrush" Color="#949494" />
  <SolidColorBrush x:Key="BorderBrushWhite" Color="#FF3F4040" />
  <SolidColorBrush x:Key="FeedbackSectionBackground" Color="#4192D9" />
  <SolidColorBrush x:Key="ExtensionBackgroundColor" Color="#353535" />
  <SolidColorBrush x:Key="ExtensionButtonBackgroundColor" Color="#535353" />
  <SolidColorBrush x:Key="SearchTextBoxBackground" Color="#444444" />
  <SolidColorBrush x:Key="LibraryCommonBackground" Color="#333333" />
  <SolidColorBrush x:Key="LibraryMemberOnHover" Color="#404040" />
  <SolidColorBrush x:Key="LibraryItemHostBackground" Color="#353535" />
  <SolidColorBrush x:Key="RootElementBackground" Color="#282828" />
  <SolidColorBrush x:Key="RootElementOnHover" Color="#222222" />
  <SolidColorBrush x:Key="ClassButtonClickedBackground" Color="#272727" />
  <SolidColorBrush x:Key="MemberButtonText" Color="#aaaaaa" />
  <SolidColorBrush x:Key="DefaultSearchTextBlockText" Color="#C0C0C0" />
  <SolidColorBrush x:Key="CommonSidebarTextColor" Color="#CCCCCC" />
  <SolidColorBrush x:Key="SearchBoxBackgroundColor" Color="#231F20" />
  <SolidColorBrush x:Key="NestedMemberTextColor" Color="#989898" />
  <SolidColorBrush x:Key="VariableTypeTextColor" Color="#777777" />
  <SolidColorBrush x:Key="SearchDarkGreyTextColor" Color="#808285" />
  <SolidColorBrush x:Key="CreateMembersColor" Color="#7B9F2D" />
  <SolidColorBrush x:Key="ActionMembersColor" Color="#D56867" />
  <SolidColorBrush x:Key="QueryMembersColor" Color="#65999A" />
  <SolidColorBrush x:Key="SearchElementLineDeterminerColor" Color="#4D4D4D" />
  <SolidColorBrush x:Key="FilterIconColor" Color="#787878" />
  <SolidColorBrush x:Key="FilterPopupBorderColor" Color="#808080" />
  <SolidColorBrush x:Key="FilterPopupBackgroundColor" Color="#666666" />
  <SolidColorBrush x:Key="SelectedFilterButtonTextColor" Color="#4D4D4D" />
  <SolidColorBrush x:Key="FilterCategoryIsNotSelectedColor" Color="#737373" />
  <SolidColorBrush x:Key="NodeNameForeground" Color="#ffffff" />
  <SolidColorBrush x:Key="UnSelectedLayoutForeground" Color="#999999" />
  <SolidColorBrush x:Key="NodeCategoryForeground" Color="#b3b3b3" />
  <SolidColorBrush x:Key="BubblePreviewBorderColor" Color="#aaaaaa" />
  <SolidColorBrush x:Key="UnpinnedIconForegroundColor" Color="#FFFFFF" />
  <SolidColorBrush x:Key="PinnedIconForegroundColor" Color="#FFFFFF" />
  <SolidColorBrush x:Key="UnpinnedIconBackgroundColor" Color="#6AC0E7" />
  <SolidColorBrush x:Key="PinnedIconBackgroundColor" Color="#666666" />
  <Color x:Key="PinnedIconBackgroundColorAnimation">#666666</Color>
  <SolidColorBrush x:Key="PinnedIconHoverBackgroundColor" Color="#6AC0E7" />
  <SolidColorBrush x:Key="PinnedIconHoverBorderBrushColor" Color="#38ABDF" />
  <SolidColorBrush x:Key="PortKeepListStructureBackground" Color="#537E91" />
  <SolidColorBrush x:Key="PortUseLevelsCheckBoxColor" Color="#808080" />
  <SolidColorBrush x:Key="ConnectorHoverStateColor" Color="#808080" />
  <SolidColorBrush x:Key="TextEditorBrush" Color="#353535" />
  <SolidColorBrush x:Key="CustomToolTipBorderColor" Color="#808080" />
  <Color x:Key="PMForegroundColor">#DFDFDF</Color>
  <Color x:Key="PMBorderColor">#5F5F5F</Color>
  <Color x:Key="PMHeaderBackgroundColor">#3f3f3f</Color>
  <Color x:Key="PMDataGridBackgroundColor">#474747</Color>
  <Color x:Key="PMDataAltBackgroundColor">#535353</Color>
  <Color x:Key="PMVersionCompatibleColor">#87B340</Color>
  <Color x:Key="PMVersionUncompatibleColor">#EB5555</Color>
  <Color x:Key="PMVersionUnknownColor">#73C5FF</Color>
  <Color x:Key="PMInnerVerticleLineColor">#646464</Color>
  <controls:ToolTipFirstLineOnly x:Key="ToolTipFirstLine" />
  <controls:ToolTipAllLinesButFirst x:Key="ToolTipFirstLineNot" />
  <controls:WorkspaceTypeConverter x:Key="WorkspaceTypeConverter" />
  <controls:MarginConverter x:Key="MarginConverter" />
  <controls:BooleanToBrushConverter x:Key="BooleanToBrushConverter" FalseBrush="Black" TrueBrush="#6AC0E7" />
  <controls:BooleanToBrushConverter x:Key="PortConnectedBooleanToBrushConverter" FalseBrush="White" TrueBrush="Black" />
  <controls:BooleanToSelectionColorConverter x:Key="BooleanToSelectionColorConverter" False="#444" True="#6AC0E7" />
  <controls:ConnectionStateToColorConverter x:Key="ConnectionStateToColorConverter" ExecutionPreview="#F2930C" Hover="#808080" None="#444" Selection="#6AC0E7" />
  <controls:ConnectionStateToBrushConverter x:Key="ConnectionStateToBrushConverter" ExecutionPreviewBrush="#F2930C" HoverBrush="#808080" NoneBrush="#444" SelectionBrush="#6AC0E7" />
  <controls:ConnectionStateToVisibilityCollapsedConverter x:Key="ConnectionStateToVisibilityCollapsedConverter" />
  <controls:AttachmentToPathConverter x:Key="AttachmentToPathConverter" />
  <controls:AttachmentToRowColumnConverter x:Key="AttachmentToRowColumnConverter" />
  <controls:PortToAttachmentConverter x:Key="PortToAttachmentConverter" />
  <controls:NodeSearchElementVMToBoolConverter x:Key="NodeSearchElementVMToBoolConverter" />
  <controls:FilePathDisplayConverter x:Key="FilePathDisplayConverter" />
  <controls:PathToFileNameConverter x:Key="PathToFileNameConverter" />
  <controls:PathToSaveStateConverter x:Key="PathToSaveStateConverter" />
  <controls:InverseBooleanConverter x:Key="InverseBooleanConverter" />
  <controls:ConsoleHeightToBooleanConverter x:Key="ConsoleHeightToBoolConverter" />
  <controls:ShowHideFullscreenWatchMenuItemConverter x:Key="ShowHideFullscreenWatchMenuConverter" />
  <controls:PackageSearchStateToStringConverter x:Key="PackageSearchStateToStringConverter" />
  <controls:EmptyStringToCollapsedConverter x:Key="EmptyStringToCollapsedConverter" />
  <controls:EmptyStringToFalseConverter x:Key="EmptyStringToFalseConverter" />
  <controls:NegativeIntToZeroConverter x:Key="NegativeIntToZeroConverter" />
  <controls:NonEmptyStringToCollapsedConverter x:Key="NonEmptyStringToCollapsedConverter" />
  <controls:InstalledButtonTextConverter x:Key="InstalledButtonTextConverter" />
  <controls:SearchResultsToVisibilityConverter x:Key="SearchResultsToVisibilityConverter" />
  <controls:EnumToBooleanConverter x:Key="EnumToBoolConverter" />
  <controls:PackageUploadStateToStringConverter x:Key="PackageUploadStateToStringConverter" />
  <controls:PackageDownloadStateToStringConverter x:Key="PackageDownloadStateToStringConverter" />
  <controls:ShowHideClassicNavigatorMenuItemConverter x:Key="ShowHideClassicNavigatorMenuItemConverter" />
  <controls:PortTypeToMarginConverter x:Key="PortTypeToMarginConverter" />
  <controls:PortTypeToTextAlignmentConverter x:Key="PortTypeToTextAlignmentConverter" />
  <controls:PortTypeToGridColumnConverter x:Key="PortTypeToGridColumnConverter" />
  <controls:PortTypeToClipConverter x:Key="PortTypeToClipConverter" />
  <controls:ConsoleHeightConverter x:Key="ConsoleHeightConverter" />
  <controls:NodeAutocompleteWidthConverter x:Key="NodeAutocompleteWidthConverter" />
  <controls:NodeAutocompleteImageConverter x:Key="NodeAutocompleteImageConverter" />
  <controls:BoolToFullscreenWatchVisibilityConverter x:Key="BoolToFullscreenWatchVisibilityConverter" />
  <controls:BoolToCanvasCursorConverter x:Key="BoolToCanvasCursorConverter" />
  <controls:LacingToVisibilityConverter x:Key="LacingToVisibilityConverter" />
  <controls:AutoLacingToVisibilityConverter x:Key="AutoLacingToVisibilityConverter" />
  <controls:LacingToAbbreviationConverter x:Key="LacingToAbbreviationConverter" />
  <controls:LacingToTooltipConverter x:Key="LacingToTooltipConverter" />
  <controls:NodeWarningConverter x:Key="NodeWarningConverter" />
  <controls:NodeOriginalNameToMarginConverter x:Key="NodeOriginalNameToMarginConverter" />
  <controls:BoolToFAIconNameConverter x:Key="BoolToFAIconNameConverter" />
  <controls:BoolToVisibilityCollapsedConverter x:Key="BooleanToVisibilityCollapsedConverter" />
  <controls:InverseBooleanToVisibilityCollapsedConverter x:Key="InverseBoolToVisibilityCollapsedConverter" />
  <controls:EmptyToVisibilityCollapsedConverter x:Key="EmptyToVisibilityCollapsedConverter" />
  <controls:ZeroToVisibilityCollapsedConverter x:Key="ZeroToVisibilityCollapsedConverter" />
  <controls:EmptyToZeroLengthConverter x:Key="EmptyToZeroLengthConverter" />
  <controls:NavigationToOpacityConverter x:Key="NavigationToOpacityConverter" />
  <controls:ViewButtonClipRectConverter x:Key="ViewButtonClipRectConverter" />
  <controls:ZoomToOpacityConverter x:Key="ZoomToOpacityConverter" />
  <controls:ZoomToBooleanConverter x:Key="ZoomToBooleanConverter" />
  <controls:ZoomToVisibilityCollapsedConverter x:Key="ZoomToVisibilityCollapsedConverter" />
  <controls:PortNameToWidthConverter x:Key="PortNameToWidthConverter" />
  <controls:TooltipLengthTruncater x:Key="TooltipLengthTruncater" />
  <controls:TabSizeConverter x:Key="TabSizeConverter" />
  <controls:WarningLevelToColorConverter x:Key="WarningLevelToColorConverter" />
  <controls:BoolToScrollBarVisibilityConverter x:Key="BoolToScrollBarVisibilityConverter" />
  <controls:RadioButtonCheckedConverter x:Key="RadioButtonCheckedConverter" />
  <controls:BinaryRadioButtonCheckedConverter x:Key="BinaryRadioButtonCheckedConverter" />
  <controls:NumberFormatConverter x:Key="NumberFormatConverter" />
  <controls:CompareToParameterConverter x:Key="CompareToParameterConverter" />
  <controls:DoubleDisplay x:Key="DoubleDisplayConverter" />
  <controls:IntegerDisplay x:Key="IntegerDisplayConverter" />
  <controls:SnapRegionMarginConverter x:Key="SnapRegionMarginConverter" />
  <controls:InverseBoolToVisibilityConverter x:Key="InverseBoolToVisibilityConverter" />
  <controls:InverseBoolToEnablingConverter x:Key="InverseBoolToEnablingConverter" />
  <controls:RunPreviewConverter x:Key="RunPreviewConverter" />
  <controls:RunPreviewToolTipConverter x:Key="RunPreviewToolTipConverter" />
  <controls:MenuItemCheckConverter x:Key="MenuItemCheckConverter" />
  <controls:AnnotationTextConverter x:Key="AnnotationTextConverter" />
  <controls:ViewModeToVisibilityConverter x:Key="ViewModeToVisibilityConverter" />
  <controls:ElementTypeToBoolConverter x:Key="ElementTypeToBoolConverter" />
  <controls:FullyQualifiedNameToDisplayConverter x:Key="FullyQualifiedNameToDisplayConverter" />
  <controls:RootElementVMToBoolConverter x:Key="RootElementToBoolConverter" />
  <controls:NodeCategoryVMToBoolConverter x:Key="NodeCategoryVMToBoolConverter" />
  <controls:FullCategoryNameToMarginConverter x:Key="FullCategoryNameToMarginConverter" />
  <controls:IntToVisibilityConverter x:Key="IntToVisibilityConverter" />
  <controls:LibraryTreeItemsHostVisibilityConverter x:Key="LibraryTreeItemsHostVisibilityConverter" />
  <controls:NullValueToCollapsedConverter x:Key="NullValueToCollapsedConverter" />
  <controls:NullValueToGridRow1Converter x:Key="NullValueToGridRow1Converter" />
  <controls:SearchHighlightMarginConverter x:Key="SearchHighlightMarginConverter" />
  <controls:ConfidenceScoreFormattingConverter x:Key="ConfidenceScoreFormattingConverter" />
  <controls:InOutParamTypeConverter x:Key="InOutParamTypeConverter" />
  <controls:NodeTypeToColorConverter x:Key="NodeTypeToColorConverter" FalseBrush="#777777" TrueBrush="#cccccc" />
  <controls:BooleanToBrushConverter x:Key="DescriptionToColorConverter" FalseBrush="#666666" TrueBrush="#cccccc" />
  <controls:GroupFontSizeToEditorEnabledConverter x:Key="GroupFontSizeToEditorEnabledConverter" />
  <controls:ElementTypeToShortConverter x:Key="ElementTypeToShortConverter" />
  <controls:GroupTitleVisibilityConverter x:Key="GroupTitleVisibilityConverter" />
  <controls:LibraryViewModeToBoolConverter x:Key="LibraryViewModeToBoolConverter" />
  <controls:WorkspaceContextMenuHeightConverter x:Key="WorkspaceContextMenuHeightConverter" />
  <controls:TreeViewLineConverter x:Key="TreeViewLineConverter" />
  <controls:TreeViewLineMarginConverter x:Key="TreeViewLineMarginConverter" />
  <controls:TreeViewHLineMarginConverter x:Key="TreeViewHLineMarginConverter" />
  <controls:TreeViewVLineMarginConverter x:Key="TreeViewVLineMarginConverter" />
  <controls:TreeViewMarginCheck x:Key="TreeViewMarginCheck" />
  <controls:LeftThicknessConverter x:Key="LeftThicknessConverter" />
  <controls:ListIndexBackgroundConverter x:Key="ListIndexBackgroundConverter" />
  <controls:ListIndexMarginConverter x:Key="ListIndexMarginConverter" />
  <controls:TopLevelLabelMarginConverter x:Key="TopLevelLabelMarginConverter" />
  <controls:NestedContentMarginConverter x:Key="NestedContentMarginConverter" />
  <controls:ClassViewMarginConverter x:Key="ClassViewMarginConverter" />
  <controls:ElementGroupToColorConverter x:Key="ElementGroupToColorConverter" />
  <controls:RgbaStringToBrushConverter x:Key="RgbaStringToBrushConverter" />
  <controls:NestedGroupsLabelConverter x:Key="NestedGroupsLabelConverter" />
  <controls:CollectionHasMoreThanNItemsToBoolConverter x:Key="CollectionHasMoreThanNItemsToBoolConverter" />
  <controls:ListHasMoreThanNItemsToVisibilityConverter x:Key="ListHasMoreThanNItemsToVisibilityConverter" />
  <controls:ObjectTypeConverter x:Key="ObjectTypeConverter" />
  <controls:TextForegroundSaturationColorConverter x:Key="TextForegroundSaturationColorConverter" />
  <controls:PortTypeToStringConverter x:Key="PortTypeToStringConverter" />
  <controls:BooleanNegationConverter x:Key="BooleanNegationConverter" />
  <controls:LeftMarginConverter x:Key="LeftMarginConverter" />
  <Color x:Key="WindowColor">#FFE8EDF9</Color>
  <Color x:Key="ContentAreaColorLight">#FFC5CBF9</Color>
  <Color x:Key="ContentAreaColorDark">#FF7381F9</Color>
  <Color x:Key="DisabledControlLightColor">#FFE8EDF9</Color>
  <Color x:Key="DisabledControlDarkColor">#FFC5CBF9</Color>
  <Color x:Key="DisabledForegroundColor">#FF888888</Color>
  <Color x:Key="SelectedBackgroundColor">#a1dbff</Color>
  <Color x:Key="SelectedUnfocusedColor">#FFDDDDDD</Color>
  <Color x:Key="ControlLightColor">White</Color>
  <Color x:Key="ControlMediumColor">#FF7381F9</Color>
  <Color x:Key="ControlDarkColor">#FF211AA9</Color>
  <Color x:Key="ControlMouseOverColor">#FF3843C4</Color>
  <Color x:Key="ControlPressedColor">#FF211AA9</Color>
  <Color x:Key="GlyphColor">#FF444444</Color>
  <Color x:Key="GlyphMouseOver">sc#1, 0.004391443, 0.002428215, 0.242281124</Color>
  <Color x:Key="BorderBasicColor">#FFFFFF</Color>
  <Color x:Key="BorderLightColor">#FFCCCCCC</Color>
  <Color x:Key="BorderMediumColor">#FF888888</Color>
  <Color x:Key="BorderDarkColor">#FF444444</Color>
  <Color x:Key="BorderPressedColor">#38ABDF</Color>
  <Color x:Key="PressedBorderLightColor">#FF888888</Color>
  <Color x:Key="PressedBorderDarkColor">#FF444444</Color>
  <Color x:Key="DisabledBorderLightColor">#FFAAAAAA</Color>
  <Color x:Key="DisabledBorderDarkColor">#FF888888</Color>
  <Color x:Key="DefaultBorderBrushDarkColor">Black</Color>
  <Color x:Key="GenericMouseOverBackgroundColor">#808080</Color>
  <SolidColorBrush x:Key="GenericBorderBackgroundColorBrush" Color="#3c3c3c" />
  <Color x:Key="HeaderTopColor">#FFC5CBF9</Color>
  <Color x:Key="DatagridCurrentCellBorderColor">Black</Color>
  <Color x:Key="SliderTrackDarkColor">#FFC5CBF9</Color>
  <Color x:Key="NavButtonFrameColor">#FF3843C4</Color>
  <Color x:Key="DarkThemeBodyMediumColor">#F5F5F5</Color>
  <Color x:Key="DarkThemeInputBoxBackgroundColor">#353535</Color>
  <system:Double x:Key="NodeNameHeight">53</system:Double>
  <SolidColorBrush x:Key="MenuHeaderForegroundColorBrush" Color="#DCDCDC" />
  <SolidColorBrush x:Key="InfoBubbleBackNormalBrush" Color="White" />
  <SolidColorBrush x:Key="InfoBubbleTextNormalBrush" Color="#333333" />
  <SolidColorBrush x:Key="InfoBubbleEdgeNormalBrush" Color="#999999" />
  <LinearGradientBrush x:Key="SpinnerNormalBrush" StartPoint="0,0" EndPoint="0,1">
    <GradientStop Offset="0.0" Color="#EEE" />
    <GradientStop Offset="1.0" Color="#CBC6BE" />
  </LinearGradientBrush>
  <LinearGradientBrush x:Key="SpinnerNormalBorderBrush" StartPoint="0,0" EndPoint="0,1">
    <GradientStop Offset="0.0" Color="#CCC" />
    <GradientStop Offset="1.0" Color="#444" />
  </LinearGradientBrush>
  <LinearGradientBrush x:Key="SpinnerHoverBrush" StartPoint="0,0" EndPoint="0,1">
    <GradientStop Offset="0.0" Color="#FFF" />
    <GradientStop Offset="1.0" Color="#CBC6BE" />
  </LinearGradientBrush>
  <LinearGradientBrush x:Key="SpinnerPressedBrush" StartPoint="0,0" EndPoint="0,1">
    <GradientStop Offset="0.0" Color="#BBB" />
    <GradientStop Offset="0.1" Color="#EEE" />
    <GradientStop Offset="0.9" Color="#EEE" />
    <GradientStop Offset="1.0" Color="#FFF" />
  </LinearGradientBrush>
  <LinearGradientBrush x:Key="SpinnerPressedBorderBrush" StartPoint="0,0" EndPoint="0,1">
    <GradientStop Offset="0.0" Color="#444" />
    <GradientStop Offset="1.0" Color="#888" />
  </LinearGradientBrush>
  <FontFamily x:Key="Inconsolata">../../Fonts/#Inconsolata</FontFamily>
  <FontFamily x:Key="OpenSansRegular">../../Fonts/#Open Sans</FontFamily>
  <FontFamily x:Key="OpenSansItalic">../../Fonts/#Open Sans Italic</FontFamily>
  <FontFamily x:Key="OpenSansLight">../../Fonts/#Open Sans Light</FontFamily>
  <FontFamily x:Key="OpenSansSemibold">../../Fonts/#Open Sans Semibold</FontFamily>
  <FontFamily x:Key="OpenSansBold">../../Fonts/#Open Sans Bold</FontFamily>
  <FontFamily x:Key="OpenSansLightItalic">../../Fonts/#Open Sans Light Italic</FontFamily>
  <FontFamily x:Key="OpenSansSemiboldItalic">../../Fonts/#Open Sans Semibold Italic</FontFamily>
  <FontFamily x:Key="OpenSansBoldItalic">../../Fonts/#Open Sans Bold Italic</FontFamily>
  <FontFamily x:Key="ArtifaktElementRegular">../../Fonts/Autodesk/#Artifakt Element Regular</FontFamily>
  <FontFamily x:Key="ArtifaktElementBold">../../Fonts/Autodesk/#Artifakt Element Bold</FontFamily>
  <FontFamily x:Key="SourceCodePro">../../Fonts/#Source Code Pro</FontFamily>
  <Image x:Key="ComboDownIcon_normal" Source="pack://application:,,,/DynamoCoreWpf;component/UI/Images/tick_selected.png" />
  <ControlTemplate x:Key="ComboBoxToggleButton" TargetType="ToggleButton">
    <Grid>
      <Border x:Name="Border" Background="#2c2c2c" BorderBrush="#444444" BorderThickness="1" />
      <Path x:Name="Arrow" Margin="0,0,10,0" HorizontalAlignment="Right" VerticalAlignment="Center" Data="M 0 0 L 4 4 L 8 0 Z" Fill="#999" />
    </Grid>
    <ControlTemplate.Triggers>
      <Trigger Property="ToggleButton.IsMouseOver" Value="true">
        <Setter TargetName="Arrow" Property="Fill" Value="#fff" />
      </Trigger>
      <Trigger Property="ToggleButton.IsChecked" Value="true">
        <Setter TargetName="Border" Property="Background" Value="#333" />
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <ControlTemplate x:Key="ComboBoxToggleButtonUpdated" TargetType="ToggleButton">
    <Grid>
      <Border x:Name="Border" Background="Transparent" BorderBrush="#a9a9a9" BorderThickness="0,0,0,1" />
      <Path x:Name="Arrow" Margin="0,0,10,0" HorizontalAlignment="Right" VerticalAlignment="Center" Data="M 0 0 L 4 4 L 8 0 Z" Fill="#999" />
    </Grid>
    <ControlTemplate.Triggers>
      <Trigger Property="ToggleButton.IsMouseOver" Value="true">
        <Setter TargetName="Arrow" Property="Fill" Value="#fff" />
      </Trigger>
      <Trigger Property="ToggleButton.IsChecked" Value="true">
        <Setter TargetName="Border" Property="Background" Value="#333" />
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <ControlTemplate x:Key="ComboBoxTextBox" TargetType="TextBox">
    <Border x:Name="PART_ContentHost" Focusable="False" />
  </ControlTemplate>
  <SolidColorBrush x:Key="SComboBoxBackground" Color="#2c2c2c" />
  <SolidColorBrush x:Key="SComboBoxBorder" Color="#444444" />
  <Style x:Key="PackageManagerComboBoxItemStyle" TargetType="{x:Type ComboBoxItem}">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ComboBoxItem}">
          <Border Name="Border" Padding="10,5" SnapsToDevicePixels="true">
            <ContentPresenter />
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="IsHighlighted" Value="true">
              <Setter TargetName="Border" Property="Background" Value="#474747" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
              <Setter Property="Foreground" Value="#888888" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <ControlTemplate x:Key="NodeViewComboBoxToggleButton" TargetType="ToggleButton">
    <Grid>
      <Border x:Name="Border" Background="#2a2a2a" BorderThickness="0" />
      <Path x:Name="Arrow" Margin="0,0,5,0" HorizontalAlignment="Right" VerticalAlignment="Center" Data="M 0 0 L 4 4 L 8 0 Z" Fill="#999" />
    </Grid>
    <ControlTemplate.Triggers>
      <Trigger Property="ToggleButton.IsMouseOver" Value="true">
        <Setter TargetName="Arrow" Property="Fill" Value="#fff" />
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <Style x:Key="SSearchOnlineToggleButton" TargetType="{x:Type ToggleButton}">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate>
          <Grid x:Name="container" Background="Transparent">
            <Grid x:Name="inner" Background="#333">
              <Image x:Name="display" Width="24" Height="24" Source="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Tag}" />
            </Grid>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="ToggleButton.IsChecked" Value="True">
              <Setter TargetName="inner" Property="Background" Value="LightBlue" />
            </Trigger>
            <Trigger Property="ToggleButton.IsMouseOver" Value="true">
              <Setter TargetName="inner" Property="Background" Value="LightBlue" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <LinearGradientBrush x:Key="ButtonGradientBackground" StartPoint="0.5,0" EndPoint="0.5,1">
    <GradientStop Offset="0.0" Color="#444" />
    <GradientStop Offset="1.0" Color="#2E2E2E" />
  </LinearGradientBrush>
  <LinearGradientBrush x:Key="DarkButtonGradientBackground" StartPoint="0.5,0" EndPoint="0.5,1">
    <GradientStop Offset="0.0" Color="#111" />
    <GradientStop Offset="1.0" Color="#000" />
  </LinearGradientBrush>
  <Style x:Key="SCustomizableBadgeButton" TargetType="{x:Type Button}">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate>
          <Border x:Name="container" Background="Transparent">
            <Border x:Name="inner" Margin="3" Background="#55000000" CornerRadius="2">
              <TextBlock x:Name="text" Margin="3" HorizontalAlignment="Center" FontSize="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=FontSize}" FontWeight="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=FontWeight}" Foreground="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Foreground}" Text="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Content}" />
            </Border>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="Button.IsMouseOver" Value="true">
              <Setter TargetName="inner" Property="Background" Value="#88000000" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
              <Setter TargetName="text" Property="Foreground" Value="#666" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="SBadgeButton" TargetType="{x:Type Button}">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate>
          <Grid x:Name="bordersGrid">
            <Border x:Name="container" Background="Transparent">
              <Border x:Name="inner" Margin="3" Background="#55000000" CornerRadius="2">
                <TextBlock x:Name="text" Margin="3" HorizontalAlignment="Center" VerticalAlignment="Center" FontSize="11" FontWeight="Bold" Foreground="#BBB" Text="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Content}" />
              </Border>
            </Border>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="Button.IsMouseOver" Value="true">
              <Setter TargetName="inner" Property="Background" Value="#88000000" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
              <Setter TargetName="text" Property="Foreground" Value="#666" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="STextButton" TargetType="{x:Type Button}">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate>
          <Border x:Name="container" Background="Transparent" BorderBrush="#3c3c3c" BorderThickness="1">
            <Grid x:Name="inner" Background="#373737">
              <TextBlock x:Name="text" Margin="10,10,10,10" HorizontalAlignment="Center" VerticalAlignment="Center" FontSize="14px" Foreground="#bbbbbb" Text="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Content}" />
            </Grid>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="Button.IsMouseOver" Value="true">
              <Setter TargetName="container" Property="BorderBrush" Value="#656565" />
              <Setter TargetName="inner" Property="Background" Value="#373737" />
            </Trigger>
            <Trigger Property="Button.IsPressed" Value="true">
              <Setter TargetName="container" Property="BorderBrush" Value="#656565" />
              <Setter TargetName="inner" Property="Background" Value="#272727" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="true">
              <Setter TargetName="text" Property="Foreground" Value="#bbbbbb" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
              <Setter TargetName="container" Property="BorderBrush" Value="Transparent" />
              <Setter TargetName="inner" Property="Background" Value="#373737" />
              <Setter TargetName="text" Property="Foreground" Value="#555555" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="SmallTextButton" TargetType="{x:Type Button}">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate>
          <Border x:Name="container" Background="Transparent" BorderBrush="#3c3c3c" BorderThickness="1">
            <Grid x:Name="inner" Background="#373737">
              <TextBlock x:Name="text" Margin="5,0" HorizontalAlignment="Center" VerticalAlignment="Center" FontSize="10px" Foreground="#bbbbbb" Text="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Content}" />
            </Grid>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="Button.IsMouseOver" Value="true">
              <Setter TargetName="container" Property="BorderBrush" Value="#656565" />
              <Setter TargetName="inner" Property="Background" Value="#373737" />
            </Trigger>
            <Trigger Property="Button.IsPressed" Value="true">
              <Setter TargetName="container" Property="BorderBrush" Value="#656565" />
              <Setter TargetName="inner" Property="Background" Value="#272727" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="true">
              <Setter TargetName="text" Property="Foreground" Value="#bbbbbb" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
              <Setter TargetName="container" Property="BorderBrush" Value="Transparent" />
              <Setter TargetName="inner" Property="Background" Value="#373737" />
              <Setter TargetName="text" Property="Foreground" Value="#555555" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="STextButtonDefault" TargetType="{x:Type Button}">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate>
          <Border x:Name="container" Background="Transparent" BorderBrush="#3F3F3F" BorderThickness="2">
            <Grid x:Name="inner" Background="#CCCCCC">
              <TextBlock x:Name="text" Margin="10,10,10,10" HorizontalAlignment="Center" VerticalAlignment="Center" FontSize="17px" Foreground="#3F3F3F" Text="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Content}" />
            </Grid>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="Button.IsMouseOver" Value="true">
              <Setter TargetName="container" Property="BorderBrush" Value="#4192D9" />
              <Setter TargetName="inner" Property="Background" Value="#CCCCCC" />
              <Setter TargetName="text" Property="Foreground" Value="#3F3F3F" />
            </Trigger>
            <Trigger Property="Button.IsPressed" Value="true">
              <Setter TargetName="container" Property="BorderBrush" Value="#4192D9" />
              <Setter TargetName="inner" Property="Background" Value="#CCCCCC" />
              <Setter TargetName="text" Property="Foreground" Value="#3F3F3F" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="true">
              <Setter TargetName="container" Property="BorderBrush" Value="#3F3F3F" />
              <Setter TargetName="inner" Property="Background" Value="#CCCCCC" />
              <Setter TargetName="text" Property="Foreground" Value="#3F3F3F" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
              <Setter TargetName="container" Property="BorderBrush" Value="#666666" />
              <Setter TargetName="inner" Property="Background" Value="#666666" />
              <Setter TargetName="text" Property="Foreground" Value="#777777" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="SErrorTextButton" TargetType="{x:Type Button}">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate>
          <Grid x:Name="container" Background="Transparent">
            <Border x:Name="inner" BorderBrush="#bd362f" BorderThickness="1">
              <Border.Background>
                <LinearGradientBrush StartPoint="0.5,0" EndPoint="0.5,1">
                  <GradientStop Offset="0.0" Color="#ee5f5b" />
                  <GradientStop Offset="1.0" Color="#bd362f" />
                </LinearGradientBrush>
              </Border.Background>
              <TextBlock x:Name="text" Margin="7,10,7,7" HorizontalAlignment="Center" FontSize="14" Foreground="WhiteSmoke" Text="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Content}" />
            </Border>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="Button.IsMouseOver" Value="true">
              <Setter TargetName="inner" Property="Background" Value="LightBlue" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="true">
              <Setter TargetName="text" Property="Foreground" Value="WhiteSmoke" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
              <Setter TargetName="text" Property="Foreground" Value="DarkGray" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <ControlTemplate x:Key="RefreshComboBoxToggleButton" TargetType="{x:Type ToggleButton}">
    <Grid Height="29px" HorizontalAlignment="Stretch" VerticalAlignment="Top">
      <Grid.ColumnDefinitions>
        <ColumnDefinition />
        <ColumnDefinition Width="20" />
      </Grid.ColumnDefinitions>
      <Border Grid.Column="0" Grid.ColumnSpan="2" Background="#666666" />
      <Border x:Name="Border" Grid.Column="1" />
      <Border Grid.Column="0" Grid.ColumnSpan="2" BorderBrush="#4A4A4A" BorderThickness="0,1,1,1" />
      <Rectangle x:Name="BlueUnderline" Grid.Column="0" Grid.ColumnSpan="2" Height="1px" VerticalAlignment="Bottom" />
      <Path x:Name="Arrow" Grid.Column="1" HorizontalAlignment="Center" VerticalAlignment="Center" Data="M0,0 L0,2 L4,6 L8,2 L8,0 L4,4 z" Fill="White" />
    </Grid>
    <ControlTemplate.Triggers>
      <Trigger Property="ToggleButton.IsMouseOver" Value="true">
        <Setter TargetName="Border" Property="Background" Value="#808080" />
      </Trigger>
      <Trigger Property="ToggleButton.IsChecked" Value="true">
        <Setter TargetName="Arrow" Property="Fill" Value="#6AC0E7" />
        <Setter TargetName="Arrow" Property="Data" Value="M0,6 L0,4 L4,0 L8,4 L8,6 L4,2 z" />
        <Setter TargetName="BlueUnderline" Property="Fill" Value="#6AC0E7" />
      </Trigger>
      <Trigger Property="IsEnabled" Value="False">
        <Setter TargetName="Border" Property="Background" Value="#EEEEEE" />
        <Setter TargetName="Border" Property="BorderBrush" Value="#AAAAAA" />
        <Setter Property="Foreground" Value="#888888" />
        <Setter TargetName="Arrow" Property="Fill" Value="#888888" />
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <Style TargetType="{x:Type CheckBox}">
    <Setter Property="SnapsToDevicePixels" Value="true" />
    <Setter Property="OverridesDefaultStyle" Value="true" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="CheckBox">
          <BulletDecorator VerticalAlignment="Center" Background="Transparent">
            <BulletDecorator.Bullet>
              <Border x:Name="Border" Width="13" Height="13" Background="#373737" BorderBrush="#666666" BorderThickness="1">
                <Image x:Name="CheckBoxTick" Width="7" Height="7" HorizontalAlignment="Center" VerticalAlignment="Center" Source="pack://application:,,,/DynamoCoreWpf;component/UI/Images/tick_selected.png" Visibility="Hidden" />
              </Border>
            </BulletDecorator.Bullet>
            <ContentPresenter x:Name="contentPresent" Margin="5,0,5,0" Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" TextBlock.FontSize="14px" TextBlock.Foreground="#bbbbbb" />
          </BulletDecorator>
          <ControlTemplate.Triggers>
            <Trigger Property="IsChecked" Value="true">
              <Setter TargetName="CheckBoxTick" Property="Visibility" Value="Visible" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="True">
              <Setter TargetName="contentPresent" Property="TextBlock.Foreground" Value="#bbbbbb" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
              <Setter TargetName="contentPresent" Property="TextBlock.Foreground" Value="#444444" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="SSearchButton" TargetType="{x:Type Button}">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate>
          <Grid x:Name="container" Background="Transparent">
            <Grid x:Name="inner" Background="#333">
              <Image x:Name="display" Width="24" Height="24" Source="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Tag}" />
            </Grid>
          </Grid>
          <ControlTemplate.Triggers />
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="SScrollThumbs" TargetType="{x:Type Thumb}">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Thumb}">
          <Grid x:Name="Grid">
            <Rectangle Width="Auto" Height="Auto" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Fill="Transparent" />
            <Border x:Name="Rectangle1" Width="Auto" Height="Auto" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Background="{TemplateBinding Background}" CornerRadius="3" />
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="Tag" Value="Horizontal">
              <Setter TargetName="Rectangle1" Property="Width" Value="Auto" />
              <Setter TargetName="Rectangle1" Property="Height" Value="7" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <system:Int32 x:Key="connector_end_dot_size">6</system:Int32>
  <system:Int32 x:Key="connector_stroke_thickness">2</system:Int32>
  <system:Double x:Key="connector_stroke_opacity">0.6</system:Double>
  <system:Double x:Key="connector_bezier_offset">20.0</system:Double>
  <Style x:Key="StartPageListBoxItem" TargetType="ListBoxItem">
    <Setter Property="SnapsToDevicePixels" Value="true" />
    <Setter Property="OverridesDefaultStyle" Value="true" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="ListBoxItem">
          <Border x:Name="Border" Padding="2" SnapsToDevicePixels="true">
            <Border.Background>
              <SolidColorBrush Color="Transparent" />
            </Border.Background>
            <ContentPresenter />
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="CommonStates">
                <VisualState x:Name="Normal" />
                <VisualState x:Name="Disabled" />
                <VisualState x:Name="MouseOver">
                  <Storyboard>
                    <ColorAnimationUsingKeyFrames Storyboard.TargetName="Border" Storyboard.TargetProperty="(Panel.Background).(SolidColorBrush.Color)">
                      <EasingColorKeyFrame KeyTime="0" Value="#EEEEEE" />
                    </ColorAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="SelectionStates">
                <VisualState x:Name="Unselected" />
                <VisualState x:Name="Selected" />
                <VisualState x:Name="SelectedUnfocused" />
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="TreeViewItemFocusVisual">
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate>
          <Border>
            <Rectangle Margin="0,0,0,0" Opacity="0" Stroke="Black" StrokeDashArray="1 2" StrokeThickness="5" />
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="InOutPortControlStyle" TargetType="ItemsControl">
    <Setter Property="ItemsPanel">
      <Setter.Value>
        <ItemsPanelTemplate>
          <dynui:InOutPortPanel HorizontalAlignment="Center" VerticalAlignment="Stretch" />
        </ItemsPanelTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <SolidColorBrush x:Key="PreferencesWindowBackgroundColor" Color="#535353" />
  <SolidColorBrush x:Key="PreferencesWindowItemDarkerBackgroundColor" Color="#353535" />
  <SolidColorBrush x:Key="PreferencesWindowFontColor" Color="#E5E5E5" />
  <SolidColorBrush x:Key="PreferencesWindowButtonColor" Color="#0696D7" />
  <SolidColorBrush x:Key="PreferencesWindowTabSelectedColor" Color="#ADE4DE" />
  <SolidColorBrush x:Key="CloseButtonMouseOverForeground" Color="#FFFFFF" />
  <SolidColorBrush x:Key="PreferencesWindowButtonPressedColor" Color="#0778B0" />
  <SolidColorBrush x:Key="PreferencesWindowButtonMouseOverFontColor" Color="#CDCBCB" />
  <SolidColorBrush x:Key="TabItemUnSelected" Color="DarkGray" />
  <SolidColorBrush x:Key="SecondaryGray" Color="#707070" />
  <SolidColorBrush x:Key="SemiTransparent" Color="#80000000" />
  <SolidColorBrush x:Key="PackageManagerTabBackgroundColor" Color="#2A2A2A" />
  <Color x:Key="PreferencesToogleCheckedColor" A="255" B="215" G="150" R="6" />
  <Color x:Key="PreferencesToogleUnCheckedColor" A="229" B="229" G="229" R="229" />
  <Color x:Key="PreferencesToogleBorderColor" A="255" B="255" G="255" R="255" />
  <Style x:Key="DarkTextBlock" TargetType="TextBlock">
    <Setter Property="FontSize" Value="12" />
    <Setter Property="TextTrimming" Value="CharacterEllipsis" />
  </Style>
  <Style x:Key="ToggleInfoStyle" TargetType="{x:Type Image}">
    <Style.Triggers>
      <Trigger Property="IsMouseOver" Value="False">
        <Setter Property="Source" Value="pack://application:,,,/DynamoCoreWpf;component/UI/Images/default_info_16px.png" />
      </Trigger>
      <Trigger Property="IsMouseOver" Value="True">
        <Setter Property="Source" Value="pack://application:,,,/DynamoCoreWpf;component/UI/Images/whiteinfotab.png" />
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="BaseButtonStyle" TargetType="Button">
    <Setter Property="Cursor" Value="Hand" />
    <Setter Property="SnapsToDevicePixels" Value="True" />
    <Setter Property="UseLayoutRounding" Value="True" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="Button">
          <ControlTemplate.Triggers>
            <Trigger Property="IsEnabled" Value="False">
              <Setter Property="Opacity" Value=".5" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="DownButtonStyle" TargetType="Button">
    <Setter Property="Cursor" Value="Hand" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="Button">
          <Grid>
            <Image Name="downIcon" Width="16" Height="16" Source="pack://application:,,,/DynamoCoreWpf;component/UI/Images/down_16_16.png" />
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
              <Setter TargetName="downIcon" Property="Source" Value="pack://application:,,,/DynamoCoreWpf;component/UI/Images/down-hover-16px.png" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
              <Setter Property="Opacity" Value=".5" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="UpButtonStyle" TargetType="Button">
    <Setter Property="Cursor" Value="Hand" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="Button">
          <Grid>
            <Image Name="upIcon" Width="16" Height="16" Source="pack://application:,,,/DynamoCoreWpf;component/UI/Images/up_16_16.png" />
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
              <Setter TargetName="upIcon" Property="Source" Value="pack://application:,,,/DynamoCoreWpf;component/UI/Images/up-hover-16px.png" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
              <Setter Property="Opacity" Value=".5" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="EditFolderButtonStyle" TargetType="Button">
    <Setter Property="Cursor" Value="Hand" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="Button">
          <Grid>
            <Image Name="folderIcon" Width="16" Height="16" Source="pack://application:,,,/DynamoCoreWpf;component/UI/Images/edit_folder_16px_default.png" />
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
              <Setter TargetName="folderIcon" Property="Source" Value="pack://application:,,,/DynamoCoreWpf;component/UI/Images/edit_folder_16px_hover.png" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
              <Setter Property="Opacity" Value=".5" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="ResetButtonStyle" TargetType="Button">
    <Setter Property="Cursor" Value="Hand" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="Button">
          <Grid>
            <Image Name="folderIcon" Width="16" Height="16" Source="pack://application:,,,/DynamoCoreWpf;component/UI/Images/reset-default.png" />
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
              <Setter TargetName="folderIcon" Property="Source" Value="pack://application:,,,/DynamoCoreWpf;component/UI/Images/reset-hover.png" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
              <Setter Property="Opacity" Value=".5" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <SolidColorBrush x:Key="ExpanderCaretToggleButtonBackground" Color="#2A2A2A" />
  <SolidColorBrush x:Key="ExpanderCaretToggleButtonSelectedBackground" Color="#2F2E30" />
  <DataTemplate x:Key="expanderHeader">
    <TextBlock FontSize="14" FontWeight="Medium" Text="{Binding}" />
  </DataTemplate>
  <PathGeometry x:Key="PadlockIcon" Figures="M18 3C15.7909 3 14 4.79086 14 7V10H6C5.44772 10 5 10.4477 5 11V19C5 19.5523 5.44772 20 6 20H16C16.5523 20 17 19.5523 17 19V11C17 10.4477 16.5523 10 16 10H15V7C15 5.34315 16.3431 4 18 4C19.6569 4 21 5.34315 21 7V9H22V7C22 4.79086 20.2091 3 18 3ZM6 11H16V19H6L6 11Z" />
  <PathGeometry x:Key="PadlockLockedIcon" Figures="M11 4C8.79084 4 6.99998 5.79087 6.99999 8.00001L7 10H6C5.44772 10 5 10.4477 5 11V19C5 19.5523 5.44772 20 6 20H16C16.5523 20 17 19.5523 17 19V11C17 10.4477 16.5523 10 16 10H15V7.99999C15 5.79086 13.2091 4 11 4ZM14 10V7.99999C14 6.34314 12.6568 5 11 5C9.34313 5 7.99998 6.34315 7.99999 8L8 10H14ZM6 11H16V19H6L6 11Z" />
  <ControlTemplate x:Key="NoBordersComboBoxTextBox" TargetType="{x:Type TextBox}">
    <Border x:Name="PART_ContentHost" Background="{TemplateBinding Background}" Focusable="False" />
  </ControlTemplate>
  <Style x:Key="NoBordersComboItemStyle" TargetType="{x:Type ComboBoxItem}">
    <Setter Property="SnapsToDevicePixels" Value="true" />
    <Setter Property="Foreground" Value="White" />
    <Setter Property="OverridesDefaultStyle" Value="true" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ComboBoxItem}">
          <Border Name="Border" Padding="2" SnapsToDevicePixels="true">
            <ContentPresenter />
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="IsHighlighted" Value="true">
              <Setter TargetName="Border" Property="Background" Value="#FF4F4F4F" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
              <Setter Property="Foreground" Value="#888888" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <SolidColorBrush x:Key="PreferencesWindowVisualSettingsBackground" Color="#535353" />
  <SolidColorBrush x:Key="PreferencesWindowVisualSettingsAddStyleBackground" Color="#666666" />
  <Style x:Key="GeometryScaleDescTextBox" TargetType="{x:Type TextBlock}">
    <Setter Property="Background" Value="#474747" />
    <Setter Property="Foreground" Value="White" />
    <Setter Property="TextWrapping" Value="Wrap" />
    <Setter Property="FontSize" Value="11" />
    <Setter Property="FontWeight" Value="Regular" />
  </Style>
  <SolidColorBrush x:Key="Button.Outline.MouseOver.Border" Opacity="0.15" Color="#FFFFFF" />
  <SolidColorBrush x:Key="Button.Outline.Pressed.Border" Opacity="0.35" Color="#38ABDF" />
  <SolidColorBrush x:Key="Button.Outline.Default.Border" Color="Transparent" />
  <SolidColorBrush x:Key="Button.Outline.Inverted.Border" Color="#ECECEC" />
  <Style x:Key="NoteTextBoxStyle" TargetType="TextBox">
    <Setter Property="FontFamily" Value="Trebuchet" />
    <Setter Property="FontSize" Value="12" />
    <Setter Property="Foreground" Value="#222" />
    <Setter Property="Background" Value="#EEE" />
    <Setter Property="Padding" Value="10" />
    <Setter Property="TextWrapping" Value="Wrap" />
  </Style>
  <Style x:Key="NoteTextBlockStyle" TargetType="TextBlock">
    <Setter Property="FontFamily" Value="Trebuchet" />
    <Setter Property="FontSize" Value="12" />
    <Setter Property="Foreground" Value="#222" />
    <Setter Property="Padding" Value="10" />
    <Setter Property="TextWrapping" Value="Wrap" />
  </Style>
  <Style x:Key="NoteUserControlStyle" TargetType="UserControl">
    <Setter Property="BorderBrush" Value="#549ee7" />
    <Setter Property="Effect">
      <Setter.Value>
        <DropShadowEffect BlurRadius="9.0" Opacity="0.25" ShadowDepth="0" Color="#222" />
      </Setter.Value>
    </Setter>
  </Style>
  <SolidColorBrush x:Key="PopupWhiteColor" Color="#FFFFFF" />
  <Color x:Key="PopupTitleBorderColor" A="255" B="128" G="128" R="128" />
  <SolidColorBrush x:Key="PopupRatingControlBackColor" Color="#F5F5F5" />
  <SolidColorBrush x:Key="CheckMarkBackColor" Color="#87B340" />
  <Style x:Key="PopupContentStyle" TargetType="{x:Type ContentControl}">
    <Setter Property="ContentTemplate">
      <Setter.Value>
        <DataTemplate>
          <Border Background="White" BorderBrush="White" BorderThickness="2" CornerRadius="5,5,5,5" />
        </DataTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="PoupTitleLabelStyle" TargetType="{x:Type Label}">
    <Setter Property="FontFamily" Value="Artifakt Element" />
    <Setter Property="FontSize" Value="20" />
    <Setter Property="Height" Value="34" />
    <Setter Property="Foreground" Value="#535353" />
  </Style>
  <Style x:Key="SurveyTitleLabelStyle" TargetType="{x:Type Label}">
    <Setter Property="FontFamily" Value="Artifakt Element" />
    <Setter Property="FontSize" Value="20" />
    <Setter Property="Height" Value="34" />
    <Setter Property="Foreground" Value="#3C3C3C" />
  </Style>
  <Style x:Key="RatingTitleLabelStyle" TargetType="{x:Type Label}">
    <Setter Property="FontFamily" Value="Artifakt Element" />
    <Setter Property="FontSize" Value="12" />
    <Setter Property="Foreground" Value="#3C3C3C" />
    <Setter Property="HorizontalContentAlignment" Value="Center" />
  </Style>
  <SolidColorBrush x:Key="RealTimeInfoWindowIconColor" Color="#38ABDF" />
  <SolidColorBrush x:Key="RealTimeInfoWindowBackgroundColor" Color="#535353" />
  <Style x:Key="PopupStepCounterFontStyle" TargetType="Label">
    <Setter Property="FontSize" Value="14" />
    <Setter Property="FontFamily" Value="Artifakt Element" />
  </Style>
  <SolidColorBrush x:Key="BorderBrushMouseOver" Opacity="0.15" Color="#FFFFFF" />
  <Style x:Key="NoStyleWindowBorderStyle" TargetType="{x:Type Border}">
    <Setter Property="Background" Value="White" />
    <Setter Property="CornerRadius" Value="6" />
    <Setter Property="BorderThickness" Value="4" />
    <Setter Property="Effect">
      <Setter.Value>
        <DropShadowEffect BlurRadius="10.0" Opacity="0.25" ShadowDepth="0" Color="#000" />
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="DividerRectangleStyle" TargetType="{x:Type Rectangle}">
    <Setter Property="Height" Value="1px" />
    <Setter Property="Margin" Value="0,20,0,15" />
    <Setter Property="VerticalAlignment" Value="Bottom" />
    <Setter Property="Fill" Value="#B7B7B7" />
    <Setter Property="UseLayoutRounding" Value="True" />
  </Style>
  <Color x:Key="MidGray">#999999</Color>
  <Color x:Key="LightGray">#CCCCCC</Color>
  <Color x:Key="Blue">#38abdf</Color>
  <Color x:Key="MidLightBlue">#366a81</Color>
  <Color x:Key="MidBlue">#365868</Color>
  <Color x:Key="MidDarkBlue">#375f71</Color>
  <Color x:Key="TextColor">#F5F5F5</Color>
  <Color x:Key="GrayOpacity">#5C5C5C5C</Color>
  <Style x:Key="InformationIcon" TargetType="{x:Type Image}">
    <Style.Triggers>
      <Trigger Property="IsMouseOver" Value="False">
        <Setter Property="Source" Value="pack://application:,,,/DynamoCoreWpf;component/UI/Images/info-default-16px.png" />
      </Trigger>
      <Trigger Property="IsMouseOver" Value="True">
        <Setter Property="Source" Value="pack://application:,,,/DynamoCoreWpf;component/UI/Images/info-hover-16px.png" />
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="QuestionIconClickable" TargetType="{x:Type Image}">
    <Style.Triggers>
      <Trigger Property="IsMouseOver" Value="False">
        <Setter Property="Source" Value="pack://application:,,,/DynamoCoreWpf;component/UI/Images/question-default-16px.png" />
      </Trigger>
      <Trigger Property="IsMouseOver" Value="True">
        <Setter Property="Source" Value="pack://application:,,,/DynamoCoreWpf;component/UI/Images/question-hover-blue-16px.png" />
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="QuestionIcon" TargetType="{x:Type Image}">
    <Style.Triggers>
      <Trigger Property="IsMouseOver" Value="False">
        <Setter Property="Source" Value="pack://application:,,,/DynamoCoreWpf;component/UI/Images/question-default-16px.png" />
      </Trigger>
      <Trigger Property="IsMouseOver" Value="True">
        <Setter Property="Source" Value="pack://application:,,,/DynamoCoreWpf;component/UI/Images/question-hover-16px.png" />
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="SliderRepeatButton" TargetType="RepeatButton">
    <Setter Property="SnapsToDevicePixels" Value="true" />
    <Setter Property="OverridesDefaultStyle" Value="true" />
    <Setter Property="IsTabStop" Value="false" />
    <Setter Property="Focusable" Value="false" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="RepeatButton">
          <Border Height="3" Background="#757575" BorderBrush="#757575" BorderThickness="1" />
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="SliderRepeatButton1" TargetType="RepeatButton">
    <Setter Property="SnapsToDevicePixels" Value="true" />
    <Setter Property="OverridesDefaultStyle" Value="true" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="RepeatButton">
          <Border Height="3" Background="#eeeeee" BorderBrush="#eeeeee" BorderThickness="1" SnapsToDevicePixels="True" />
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="SliderThumb" TargetType="Thumb">
    <Setter Property="SnapsToDevicePixels" Value="true" />
    <Setter Property="OverridesDefaultStyle" Value="true" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="Thumb">
          <Border Width="6" Height="20" Background="#eeeeee" CornerRadius="1 1 1 1" />
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="RunButtonStyle" TargetType="{x:Type Button}">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate>
          <Border x:Name="container" Background="Transparent" BorderBrush="#FF23A597" BorderThickness="1" CornerRadius="2">
            <Grid x:Name="inner" Background="#FF23A597">
              <TextBlock x:Name="text" HorizontalAlignment="Center" VerticalAlignment="Center" FontSize="14px" Foreground="#FFFFFF" Text="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Content}" />
            </Grid>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="Button.IsMouseOver" Value="true">
              <Setter TargetName="container" Property="BorderBrush" Value="#26808080" />
              <Setter TargetName="container" Property="BorderThickness" Value="2" />
            </Trigger>
            <Trigger Property="Button.IsPressed" Value="true">
              <Setter TargetName="container" Property="BorderBrush" Value="#40808080" />
              <Setter TargetName="container" Property="BorderThickness" Value="4" />
            </Trigger>
            <Trigger Property="Button.IsEnabled" Value="false">
              <Setter TargetName="inner" Property="Background" Value="#218d81" />
              <Setter TargetName="text" Property="Foreground" Value="#bebebe" />
              <Setter TargetName="container" Property="BorderBrush" Value="#218d81" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <ControlTemplate x:Key="VersionExpanderTemplate" TargetType="Expander">
    <Border HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Background="{TemplateBinding Control.Background}" BorderBrush="{TemplateBinding Control.BorderBrush}" BorderThickness="{TemplateBinding Control.BorderThickness}" CornerRadius="3" SnapsToDevicePixels="True">
      <StackPanel Orientation="Vertical">
        <!--  The header stack panel  -->
        <Grid>
          <Grid.ColumnDefinitions>
            <ColumnDefinition Width="Auto" />
            <ColumnDefinition Width="*" />
          </Grid.ColumnDefinitions>
          <!--  The toggle button  -->
          <ToggleButton IsChecked="{Binding Path=IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" IsTabStop="False">
            <ToggleButton.Style>
              <Style TargetType="ToggleButton">
                <Setter Property="Control.Template">
                  <Setter.Value>
                    <ControlTemplate TargetType="ToggleButton">
                      <Border Padding="{TemplateBinding Control.Padding}" HorizontalAlignment="Center" VerticalAlignment="Center" Background="Transparent" BorderBrush="Transparent" BorderThickness="0" IsHitTestVisible="True">
                        <!--  The caret toggle button icon  -->
                        <Viewbox Width="14" Margin="7,0,0,0" HorizontalAlignment="Center" VerticalAlignment="Center">
                          <Canvas Width="14" Height="14">
                            <Path x:Name="ToggleIcon" Width="14" Height="14" VerticalAlignment="Center" Data="M1.68994 6.13012L3.45994 4.37012L7.98994 8.90012L12.5299 4.37012L14.2899 6.13012L7.98994 12.4401L1.68994 6.13012Z" Fill="#CCCCCC">
                              <!--  RotateTransform  -->
                              <Path.RenderTransform>
                                <RotateTransform x:Name="IconRotateTransform" Angle="0" CenterX="8" CenterY="8" />
                              </Path.RenderTransform>
                            </Path>
                          </Canvas>
                        </Viewbox>
                      </Border>
                      <ControlTemplate.Triggers>
                        <Trigger Property="ToggleButton.IsChecked" Value="True">
                          <Trigger.EnterActions>
                            <BeginStoryboard>
                              <Storyboard>
                                <DoubleAnimation Storyboard.TargetName="IconRotateTransform" Storyboard.TargetProperty="Angle" To="-90" Duration="0:0:0.3" />
                              </Storyboard>
                            </BeginStoryboard>
                          </Trigger.EnterActions>
                          <Trigger.ExitActions>
                            <BeginStoryboard>
                              <Storyboard>
                                <DoubleAnimation Storyboard.TargetName="IconRotateTransform" Storyboard.TargetProperty="Angle" To="0" Duration="0:0:0.3" />
                              </Storyboard>
                            </BeginStoryboard>
                          </Trigger.ExitActions>
                          <Setter TargetName="ToggleIcon" Property="Fill" Value="#cccccc" />
                        </Trigger>
                        <!--  Trigger to change the icon fill when mouse is over  -->
                        <Trigger Property="UIElement.IsMouseOver" Value="True">
                          <Setter TargetName="ToggleIcon" Property="Fill" Value="#999999" />
                        </Trigger>
                        <!--  Trigger for button pressed state  -->
                        <Trigger Property="ButtonBase.IsPressed" Value="True">
                          <Setter TargetName="ToggleIcon" Property="Fill" Value="#cccccc" />
                        </Trigger>
                      </ControlTemplate.Triggers>
                    </ControlTemplate>
                  </Setter.Value>
                </Setter>
              </Style>
            </ToggleButton.Style>
          </ToggleButton>
          <!--  The Header ContentPresenter to show the Expander.Header  -->
          <ContentPresenter Name="HeaderContent" Grid.Column="1" Margin="5,0,0,0" HorizontalAlignment="Stretch" VerticalAlignment="Center" ContentSource="Header" />
        </Grid>
        <!--  The content ContentPresenter  -->
        <ContentPresenter Name="ExpandSite" Margin="{TemplateBinding Control.Padding}" HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}" Content="{TemplateBinding ContentControl.Content}" ContentStringFormat="{TemplateBinding ContentControl.ContentStringFormat}" ContentTemplate="{TemplateBinding ContentControl.ContentTemplate}" DockPanel.Dock="Bottom" Focusable="False" Visibility="Collapsed" />
      </StackPanel>
    </Border>
    <ControlTemplate.Triggers>
      <Trigger Property="Expander.IsExpanded" Value="True">
        <Setter TargetName="ExpandSite" Property="UIElement.Visibility" Value="Visible" />
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <ControlTemplate x:Key="CustomListViewTemplate" TargetType="ListView">
    <Border Background="Transparent" BorderThickness="0" SnapsToDevicePixels="True">
      <ScrollViewer Padding="0" Focusable="False" HorizontalScrollBarVisibility="{TemplateBinding ScrollViewer.HorizontalScrollBarVisibility}" VerticalScrollBarVisibility="{TemplateBinding ScrollViewer.VerticalScrollBarVisibility}">
        <ItemsPresenter />
      </ScrollViewer>
    </Border>
  </ControlTemplate>
  <Style x:Key="CustomListViewItemStyle" TargetType="ListViewItem">
    <Setter Property="Padding" Value="0" />
    <Setter Property="Margin" Value="0" />
    <Setter Property="BorderThickness" Value="0" />
    <Setter Property="HorizontalContentAlignment" Value="Stretch" />
    <Setter Property="VerticalContentAlignment" Value="Stretch" />
    <Setter Property="Background" Value="Transparent" />
    <!--  Remove the selection and focus border  -->
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="ListViewItem">
          <Border Background="{TemplateBinding Background}" BorderBrush="Transparent" BorderThickness="0">
            <ContentPresenter />
          </Border>
          <ControlTemplate.Triggers>
            <!--  Remove selection highlight  -->
            <Trigger Property="IsSelected" Value="True">
              <Setter Property="Background" Value="Transparent" />
              <Setter Property="BorderBrush" Value="Transparent" />
            </Trigger>
            <!--  Remove focus visual  -->
            <Trigger Property="IsFocused" Value="True">
              <Setter Property="BorderBrush" Value="Transparent" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <system:String x:Key="dyn_text_name">Dynamo</system:String>
  <x:Array Type="Color" x:Key="ColorsCollection">
    <Color A="255" R="80" G="195" B="218" />
    <Color A="255" R="212" G="118" B="134" />
    <Color A="255" R="224" G="200" B="78" />
    <Color A="255" R="113" G="207" B="65" />
    <Color A="255" R="119" G="150" B="212" />
    <Color A="255" R="224" G="164" B="133" />
    <Color A="255" R="178" G="199" B="71" />
    <Color A="255" R="78" G="218" B="101" />
    <Color A="255" R="148" G="136" B="212" />
    <Color A="255" R="65" G="213" B="164" />
    <Color A="255" R="192" G="138" B="218" />
    <Color A="255" R="179" G="179" B="175" />
    <Color A="255" R="179" G="179" B="175" />
    <Color A="255" R="218" G="128" B="203" />
    <Color A="255" R="168" G="225" B="237" />
    <Color A="255" R="231" G="177" B="186" />
    <Color A="255" R="249" G="242" B="205" />
    <Color A="255" R="177" G="237" B="148" />
    <Color A="255" R="178" G="195" B="231" />
    <Color A="255" R="243" G="218" B="206" />
    <Color A="255" R="224" G="243" B="128" />
    <Color A="255" R="166" G="237" B="178" />
    <Color A="255" R="194" G="187" B="231" />
    <Color A="255" R="155" G="237" B="209" />
    <Color A="255" R="223" G="197" B="237" />
    <Color A="255" R="225" G="225" B="220" />
    <Color A="255" R="237" G="191" B="229" />
  </x:Array>
  <system:Double x:Key="Size">12</system:Double>
  <system:Double x:Key="SeparatorStrokeThickness">
        0.5
    </system:Double>
  <DoubleCollection x:Key="SeparatorStrokeDashArray">
        3
    </DoubleCollection>
  <system:Double x:Key="SeriesStrokeThickness">
        1.0
    </system:Double>
  <Style TargetType="lvc:CartesianChart" x:Key="CartesianLiveChart">
    <Setter Property="AnimationsSpeed" Value="00:00:00.420" />
  </Style>
  <Style TargetType="lvc:PieChart" x:Key="PieLiveChart">
    <Setter Property="AnimationsSpeed" Value="00:00:00.420" />
    <Setter Property="SnapsToDevicePixels" Value="True" />
  </Style>
  <DrawingBrush x:Key="DefaultBrush" Viewport="0 0 8 8" ViewportUnits="Absolute" TileMode="Tile">
    <DrawingBrush.Drawing>
      <DrawingGroup>
        <GeometryDrawing Brush="#999999">
          <GeometryDrawing.Geometry>
            <GeometryGroup>
              <RectangleGeometry Rect="0,0,50,50" />
              <RectangleGeometry Rect="50,50,50,50" />
            </GeometryGroup>
          </GeometryDrawing.Geometry>
        </GeometryDrawing>
      </DrawingGroup>
    </DrawingBrush.Drawing>
  </DrawingBrush>
  <DrawingBrush x:Key="MouseOverBrush" Viewport="0 0 8 8" ViewportUnits="Absolute" TileMode="Tile">
    <DrawingBrush.Drawing>
      <DrawingGroup>
        <GeometryDrawing Brush="#DCDCDC">
          <GeometryDrawing.Geometry>
            <GeometryGroup>
              <RectangleGeometry Rect="0,0,50,50" />
              <RectangleGeometry Rect="50,50,50,50" />
            </GeometryGroup>
          </GeometryDrawing.Geometry>
        </GeometryDrawing>
      </DrawingGroup>
    </DrawingBrush.Drawing>
  </DrawingBrush>
  <Style x:Key="ChartsThumb" TargetType="{x:Type Thumb}">
    <Setter Property="Width" Value="12" />
    <Setter Property="Height" Value="12" />
    <Setter Property="Margin" Value="0 0 -85 -24" />
    <Setter Property="HorizontalAlignment" Value="Right" />
    <Setter Property="VerticalAlignment" Value="Bottom" />
    <Setter Property="SnapsToDevicePixels" Value="True" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Thumb}">
          <Polygon Fill="#AFAFAF" Points="0,8 8,8 8,0" />
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter" />
  <ControlTemplate x:Key="LibraryThumbTemplate" TargetType="{x:Type Thumb}">
    <Grid>
      <Border x:Name="Rectangle1" HorizontalAlignment="Right" VerticalAlignment="Stretch" Width="7" Height="Auto" Background="#aaaaaa" Opacity="0.5" CornerRadius="2" />
    </Grid>
  </ControlTemplate>
  <ControlTemplate x:Key="InCanvasThumbTemplate" TargetType="{x:Type Thumb}">
    <Border CornerRadius="3" HorizontalAlignment="Stretch" VerticalAlignment="Top" Width="Auto" Height="5" Background="#aaaaaa" Opacity="0.5" />
  </ControlTemplate>
  <Style x:Key="LibraryScrollViewerStyle" TargetType="ScrollViewer">
    <Setter Property="VerticalScrollBarVisibility" Value="Hidden" />
    <Style.Triggers>
      <Trigger Property="IsMouseOver" Value="true">
        <Setter Property="VerticalScrollBarVisibility" Value="Auto" />
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="InCanvasScrollViewerStyle" TargetType="ScrollViewer">
    <Setter Property="HorizontalScrollBarVisibility" Value="Hidden" />
    <Style.Triggers>
      <Trigger Property="IsMouseOver" Value="true">
        <Setter Property="HorizontalScrollBarVisibility" Value="Auto" />
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="WindowButton" TargetType="Button">
    <Setter Property="SnapsToDevicePixels" Value="true" />
    <Setter Property="OverridesDefaultStyle" Value="true" />
    <Setter Property="Height" Value="25" />
    <Setter Property="Width" Value="25" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="Button">
          <Border x:Name="Border" Background="Transparent" BorderBrush="#3b3b3b" BorderThickness="0,0,0,0">
            <ContentPresenter Margin="1,1,0,0" RecognizesAccessKey="True" />
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <ImageBrush x:Key="ClickBox" ImageSource="pack://application:,,,/DynamoCoreWpf;component/UI/Images/click_background.png" />
  <Style x:Key="ShortCutButton" TargetType="Button">
    <Setter Property="SnapsToDevicePixels" Value="true" />
    <Setter Property="OverridesDefaultStyle" Value="true" />
    <Setter Property="Height" Value="25" />
    <Setter Property="Width" Value="25" />
    <Setter Property="Margin" Value="0,0,16,0" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="Button">
          <Grid>
            <Border x:Name="Border" Width="25" Height="25" Canvas.ZIndex="0" Margin="0" Background="Transparent" CornerRadius="2" />
            <ContentPresenter Margin="0" Canvas.ZIndex="1" RecognizesAccessKey="True" />
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="true">
              <Setter TargetName="Border" Property="Background" Value="#4F4F4F" />
            </Trigger>
            <Trigger Property="IsPressed" Value="true">
              <Setter TargetName="Border" Property="Background" Value="#5F5F5F" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <DataTemplate x:Name="connectorViewModel" DataType="{x:Type viewModels:ConnectorViewModel}">
    <Grid x:Name="MainGrid" Visibility="Visible">
      <interactivity:Interaction.Triggers>
        <interactivity:EventTrigger EventName="MouseRightButtonDown">
          <interactivity:InvokeCommandAction Command="{Binding InstantiateContextMenuCommand}" />
        </interactivity:EventTrigger>
      </interactivity:Interaction.Triggers>
      <Grid.Resources>
        <SolidColorBrush x:Key="BConnectorSelection" Color="{Binding PreviewState, Converter={StaticResource ConnectionStateToColorConverter}, UpdateSourceTrigger=PropertyChanged}" />
      </Grid.Resources>
      <Canvas x:Name="MainCanvas" Canvas.Top="0" Canvas.Left="0" ZIndex="1">
        <Ellipse Name="endDot" Visibility="{Binding IsCollapsed, Converter={StaticResource InverseBoolToVisibilityCollapsedConverter}, UpdateSourceTrigger=PropertyChanged}" Style="{StaticResource SEllipses}" Width="11" Height="11" Margin="-5" Fill="{Binding PreviewState, Converter={StaticResource ConnectionStateToBrushConverter}}" IsHitTestVisible="False" Canvas.Top="{Binding CurvePoint3.Y}" Canvas.Left="{Binding CurvePoint3.X}" Canvas.ZIndex="1" />
        <Ellipse Name="startDot" Visibility="{Binding IsCollapsed, Converter={StaticResource InverseBoolToVisibilityCollapsedConverter}, UpdateSourceTrigger=PropertyChanged}" Style="{StaticResource SEllipses}" Width="11" Height="11" Margin="-5" Fill="{Binding PreviewState, Converter={StaticResource ConnectionStateToBrushConverter}}" IsHitTestVisible="False" Canvas.Top="{Binding CurvePoint0.Y}" Canvas.Left="{Binding CurvePoint0.X}" Canvas.ZIndex="1" />
      </Canvas>
      <!--Bezier Path-->
      <Path Stroke="{DynamicResource BConnectorSelection}" StrokeThickness="{Binding Source={x:Static configuration:Configurations.ConnectorBaseThickness}}" Name="connector" Visibility="{Binding IsCollapsed, Converter={StaticResource InverseBoolToVisibilityCollapsedConverter}, UpdateSourceTrigger=PropertyChanged}" Style="{StaticResource SConnector}" Canvas.ZIndex="-2" Data="{Binding ComputedBezierPathGeometry, UpdateSourceTrigger=PropertyChanged}" />
      <Path Stroke="Transparent" StrokeThickness="{Binding DynamicStrokeThickness}" Visibility="{Binding IsCollapsed, Converter={StaticResource InverseBoolToVisibilityCollapsedConverter}, UpdateSourceTrigger=PropertyChanged}" Style="{StaticResource SConnector}" Canvas.ZIndex="-1" Data="{Binding ComputedBezierPathGeometry, UpdateSourceTrigger=PropertyChanged}">
        <interactivity:Interaction.Behaviors>
          <mouse:MouseBehaviour MouseX="{Binding PanelX, Mode=OneWayToSource, UpdateSourceTrigger=PropertyChanged}" MouseY="{Binding PanelY, Mode=OneWayToSource,  UpdateSourceTrigger=PropertyChanged}" />
        </interactivity:Interaction.Behaviors>
        <interactivity:Interaction.Triggers>
          <interactivity:EventTrigger EventName="MouseEnter">
            <interactivity:InvokeCommandAction Command="{Binding MouseHoverCommand}" />
          </interactivity:EventTrigger>
          <interactivity:EventTrigger EventName="MouseLeave">
            <interactivity:InvokeCommandAction Command="{Binding MouseUnhoverCommand}" />
          </interactivity:EventTrigger>
        </interactivity:Interaction.Triggers>
      </Path>
      <ContentControl Content="{Binding ConnectorContextMenuViewModel}" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" />
      <ContentControl Content="{Binding ConnectorAnchorViewModel}" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Panel.ZIndex="3" />
      <ContentControl Content="{Binding ConnectorPinViewCollection}" ContentTemplate="{StaticResource ShowPinCollection}" Panel.ZIndex="2" />
    </Grid>
    <DataTemplate.Triggers>
      <DataTrigger Binding="{Binding Path=IsFrozen, Mode=OneWay}" Value="True">
        <Setter TargetName="endDot" Property="Opacity" Value="0.5" />
        <Setter TargetName="startDot" Property="Opacity" Value="0.5" />
      </DataTrigger>
    </DataTemplate.Triggers>
  </DataTemplate>
  <SolidColorBrush x:Key="PrimaryCharcoal100Brush" Color="{StaticResource PrimaryCharcoal100}" />
  <SolidColorBrush x:Key="PrimaryCharcoal200Brush" Color="{StaticResource PrimaryCharcoal200}" />
  <SolidColorBrush x:Key="PrimaryCharcoal300Brush" Color="{StaticResource PrimaryCharcoal300}" />
  <SolidColorBrush x:Key="LightGreyBrush" Color="{StaticResource LightGrey}" />
  <SolidColorBrush x:Key="LightMidGreyBrush" Color="{StaticResource LightMidGrey}" />
  <SolidColorBrush x:Key="LightMidGreyOpacityBrush" Opacity="0.2" Color="{StaticResource LightMidGrey}" />
  <SolidColorBrush x:Key="MidGreyBrush" Color="{StaticResource MidGrey}" />
  <SolidColorBrush x:Key="DarkMidGreyBrush" Color="{StaticResource DarkMidGrey}" />
  <SolidColorBrush x:Key="DarkGreyBrush" Color="{StaticResource DarkGrey}" />
  <SolidColorBrush x:Key="DarkerGreyBrush" Color="{StaticResource DarkerGrey}" />
  <SolidColorBrush x:Key="LilacBrush" Color="{StaticResource Lilac}" />
  <SolidColorBrush x:Key="Green300Brush" Color="{StaticResource Green300}" />
  <SolidColorBrush x:Key="Turqoise300Brush" Color="{StaticResource Turqoise300}" />
  <SolidColorBrush x:Key="YellowOrange500Brush" Color="{StaticResource YellowOrange500}" />
  <SolidColorBrush x:Key="Red400Brush" Color="{StaticResource Red400}" />
  <SolidColorBrush x:Key="Red500Brush" Color="{StaticResource Red500}" />
  <SolidColorBrush x:Key="Blue200Brush" Color="{StaticResource Blue200}" />
  <SolidColorBrush x:Key="Blue300Brush" Color="{StaticResource Blue300}" />
  <SolidColorBrush x:Key="Blue400Brush" Color="{StaticResource Blue400}" />
  <SolidColorBrush x:Key="Blue450Brush" Color="{StaticResource Blue450}" />
  <SolidColorBrush x:Key="DarkBlue200Brush" Color="{StaticResource DarkBlue200}" />
  <SolidColorBrush x:Key="DefaultFontColorBrush" Color="{StaticResource DefaultFontColor}" />
  <SolidColorBrush x:Key="HoverFontColorBrush" Color="{StaticResource HoverFontColor}" />
  <SolidColorBrush x:Key="PressedFontColorBrush" Color="{StaticResource PressedFontColor}" />
  <SolidColorBrush x:Key="DisabledFontColorBrush" Color="{StaticResource DisabledFontColor}" />
  <SolidColorBrush x:Key="WorkspaceBackgroundHomeBrush" Color="{StaticResource WorkspaceBackgroundHome}" />
  <SolidColorBrush x:Key="WorkspaceBackgroundCustomBrush" Color="{StaticResource WorkspaceBackgroundCustom}" />
  <SolidColorBrush x:Key="WorkspaceBackGroundHomeBrush" Color="{StaticResource WorkspaceBackgroundHome}" />
  <SolidColorBrush x:Key="NodeFrozenOverlayColor" Color="{StaticResource DarkBlue200}" />
  <SolidColorBrush x:Key="NodeInfoColor" Color="{StaticResource Blue300}" />
  <SolidColorBrush x:Key="NodeWarningColor" Color="{StaticResource YellowOrange500}" />
  <SolidColorBrush x:Key="NodeErrorColor" Color="{StaticResource Red500}" />
  <SolidColorBrush x:Key="NodeContextMenuForeground" Color="{StaticResource PrimaryCharcoal100}" />
  <SolidColorBrush x:Key="NodeContextMenuBackground" Color="{StaticResource MidGrey}" />
  <SolidColorBrush x:Key="TextBlockLinkForegroundColor" Color="{StaticResource Blue350}" />
  <SolidColorBrush x:Key="TextBlockLinkForegroundColorDark" Color="{StaticResource Blue450}" />
  <SolidColorBrush x:Key="TextBlockToolTipDescriptionColor" Color="{StaticResource DarkerGrey}" />
  <SolidColorBrush x:Key="PMForegroundColorBrush" Color="{StaticResource PMForegroundColor}" />
  <SolidColorBrush x:Key="PMBorderColorBrush" Color="{StaticResource PMBorderColor}" />
  <SolidColorBrush x:Key="PMHeaderBackgroundColorBrush" Color="{StaticResource PMHeaderBackgroundColor}" />
  <SolidColorBrush x:Key="PMDataGridBackgroundColorBrush" Color="{StaticResource PMDataGridBackgroundColor}" />
  <SolidColorBrush x:Key="PMDataAltBackgroundColorBrush" Color="{StaticResource PMDataAltBackgroundColor}" />
  <SolidColorBrush x:Key="PMVersionCompatibleColorBrush" Color="{StaticResource PMVersionCompatibleColor}" />
  <SolidColorBrush x:Key="PMVersionUncompatibleColorBrush" Color="{StaticResource PMVersionUncompatibleColor}" />
  <SolidColorBrush x:Key="PMVersionUnknownColorBrush" Color="{StaticResource PMVersionUnknownColor}" />
  <SolidColorBrush x:Key="PMInnerVerticleLineColorBrush" Color="{StaticResource PMInnerVerticleLineColor}" />
  <controls:WorkspaceBackgroundColorConverter x:Key="WorkspaceBackgroundColorConverter" CustomBackgroundColor="{StaticResource WorkspaceBackgroundCustom}" HomeBackgroundColor="{StaticResource WorkspaceBackgroundHome}" />
  <controls:WorkspaceBackgroundBrushConverter x:Key="WorkspaceBackgroundBrushConverter" CustomBackgroundBrush="{StaticResource WorkspaceBackgroundCustomBrush}" HomeBackgroundBrush="{StaticResource WorkspaceBackgroundHomeBrush}" />
  <controls:BooleanToBrushConverter x:Key="FilterIsSelertedCategoryToBrushConverter" FalseBrush="{StaticResource FilterCategoryIsNotSelectedColor}" TrueBrush="{StaticResource CommonSidebarTextColor}" />
  <controls:BooleanToBrushConverter x:Key="FilterIconForegroundConverter" FalseBrush="{StaticResource LibraryItemHostBackground}" TrueBrush="{StaticResource FilterIconColor}" />
  <controls:BooleanToBrushConverter x:Key="FilterIsSelertedCategoryForegroundConverter" FalseBrush="{StaticResource NodeCategoryForeground}" TrueBrush="{StaticResource NodeNameForeground}" />
  <controls:BooleanToBrushConverter x:Key="CompactLayoutForegroundConverter" FalseBrush="{StaticResource NodeNameForeground}" TrueBrush="{StaticResource UnSelectedLayoutForeground}" />
  <controls:BooleanToBrushConverter x:Key="DetailedLayoutForegroundConverter" FalseBrush="{StaticResource UnSelectedLayoutForeground}" TrueBrush="{StaticResource NodeNameForeground}" />
  <controls:BooleanToBrushConverter x:Key="PinIconForegroundConverter" FalseBrush="{StaticResource UnpinnedIconForegroundColor}" TrueBrush="{StaticResource PinnedIconForegroundColor}" />
  <SolidColorBrush x:Key="BorderPressedColorBrush" Color="{DynamicResource BorderPressedColor}" />
  <SolidColorBrush x:Key="GenericMouseOverBackgroundColorBrush" Color="{DynamicResource GenericMouseOverBackgroundColor}" />
  <SolidColorBrush x:Key="DarkThemeBodyMediumBrush" Color="{DynamicResource DarkThemeBodyMediumColor}" />
  <SolidColorBrush x:Key="DarkThemeInputBoxBackgroundBrush" Color="{DynamicResource DarkThemeInputBoxBackgroundColor}" />
  <LinearGradientBrush x:Key="MenuPopupBrush" StartPoint="0.5,0" EndPoint="0.5,1">
    <GradientStop Offset="0" Color="{DynamicResource ControlLightColor}" />
    <GradientStop Offset="0.5" Color="{DynamicResource ControlMediumColor}" />
    <GradientStop Offset="1" Color="{DynamicResource ControlLightColor}" />
  </LinearGradientBrush>
  <Style x:Key="DynamoWindowStyle" TargetType="{x:Type Window}">
    <Setter Property="FontFamily" Value="{StaticResource ArtifaktElementRegular}" />
    <Setter Property="SnapsToDevicePixels" Value="True" />
    <Setter Property="Background" Value="#343434" />
  </Style>
  <Style x:Key="GenericToolTipLight" TargetType="ToolTip">
    <Setter Property="OverridesDefaultStyle" Value="true" />
    <Setter Property="MaxWidth" Value="300" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="ToolTip">
          <Grid x:Name="PopupGrid">
            <Grid x:Name="ShadowBackground" Background="Transparent">
              <Path Width="20" Height="6" Margin="5,0,0,0" HorizontalAlignment="Left" VerticalAlignment="Top" Data="M0,6 L6,0 12,6Z" Fill="White" Stretch="None" Stroke="Gray" />
              <Border Margin="0,5,7,7" Padding="10,8" Background="white" BorderBrush="#999999" BorderThickness="1,0,1,1" CornerRadius="3">
                <ContentPresenter />
              </Border>
              <Border Height="7" Margin="16,5,9,0" HorizontalAlignment="Stretch" VerticalAlignment="Top" BorderBrush="#999999" BorderThickness="0,1,0,0" CornerRadius="0 0 3 0" />
              <Border Width="6" Height="7" Margin="0,5,0,0" HorizontalAlignment="Left" VerticalAlignment="Top" BorderBrush="#999999" BorderThickness="0,1,0,0" CornerRadius="3 0 0 0" />
            </Grid>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Style.Resources>
      <Style TargetType="ContentPresenter">
        <Style.Resources>
          <Style TargetType="TextBlock">
            <Setter Property="TextWrapping" Value="Wrap" />
            <Setter Property="FontFamily" Value="{StaticResource ArtifaktElementRegular}" />
            <Setter Property="FontSize" Value="12px" />
            <Setter Property="Foreground" Value="#232323" />
          </Style>
        </Style.Resources>
      </Style>
    </Style.Resources>
  </Style>
  <Style x:Key="GenericToolTipLightTop" BasedOn="{StaticResource GenericToolTipLight}" TargetType="ToolTip">
    <Setter Property="Placement" Value="Top" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="ToolTip">
          <Grid x:Name="PopupGrid">
            <Grid x:Name="ShadowBackground" Background="Transparent">
              <Path x:Name="TooltipPointer" Width="20" Height="6" Margin="5,0,0,0" HorizontalAlignment="Left" VerticalAlignment="Bottom" Data="M0,0 L6,6 12,0Z" Fill="White" Stretch="None" Stroke="Gray" />
              <Border Margin="0,7,7,5" Padding="10,8" Background="white" BorderBrush="#999999" BorderThickness="1,1,1,0" CornerRadius="3">
                <ContentPresenter />
              </Border>
              <Border Height="7" Margin="16,0,9,5" HorizontalAlignment="Stretch" VerticalAlignment="Bottom" BorderBrush="#999999" BorderThickness="0,0,0,1" CornerRadius="0 0 3 0" />
              <Border Width="6" Height="7" Margin="0,0,0,5" HorizontalAlignment="Left" VerticalAlignment="Bottom" BorderBrush="#999999" BorderThickness="0,0,0,1" CornerRadius="0 0 0 3" />
            </Grid>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="SComboBox" TargetType="{x:Type ComboBox}">
    <Setter Property="SnapsToDevicePixels" Value="true" />
    <Setter Property="OverridesDefaultStyle" Value="true" />
    <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto" />
    <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
    <Setter Property="ScrollViewer.CanContentScroll" Value="true" />
    <Setter Property="MinWidth" Value="120" />
    <Setter Property="Padding" Value="12,3" />
    <Setter Property="MinHeight" Value="20" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="ComboBox">
          <Grid>
            <ToggleButton Name="ToggleButton" Grid.Column="2" ClickMode="Press" Focusable="false" IsChecked="{Binding Path=IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" Template="{StaticResource ComboBoxToggleButton}" />
            <ContentPresenter Name="ContentSite" Margin="9,3,23,3" HorizontalAlignment="Left" VerticalAlignment="Center" Content="{TemplateBinding SelectionBoxItem}" ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}" ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}" IsHitTestVisible="False" />
            <TextBox x:Name="PART_EditableTextBox" Margin="3,3,23,3" Padding="10" HorizontalAlignment="Left" VerticalAlignment="Center" Background="#666666" CaretBrush="#bbbbbb" Focusable="True" Foreground="#bbbbbb" IsReadOnly="{TemplateBinding IsReadOnly}" Style="{x:Null}" Template="{StaticResource ComboBoxTextBox}" Visibility="Hidden" />
            <Popup Name="Popup" AllowsTransparency="True" Focusable="False" IsOpen="{TemplateBinding IsDropDownOpen}" Placement="Bottom" PopupAnimation="Slide">
              <Grid Name="DropDown" MinWidth="{TemplateBinding ActualWidth}" MaxHeight="{TemplateBinding MaxDropDownHeight}" SnapsToDevicePixels="True">
                <Border x:Name="DropDownBorder" Background="#2c2c2c" BorderBrush="#444444" BorderThickness="1,0,1,1" />
                <ScrollViewer Margin="4,6,4,6" SnapsToDevicePixels="True">
                  <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Contained" />
                </ScrollViewer>
              </Grid>
            </Popup>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="HasItems" Value="false">
              <Setter TargetName="DropDownBorder" Property="MinHeight" Value="95" />
            </Trigger>
            <Trigger Property="IsGrouping" Value="true">
              <Setter Property="ScrollViewer.CanContentScroll" Value="false" />
            </Trigger>
            <Trigger SourceName="Popup" Property="Popup.AllowsTransparency" Value="true">
              <Setter TargetName="DropDownBorder" Property="CornerRadius" Value="4" />
              <Setter TargetName="DropDownBorder" Property="Margin" Value="0,2,0,0" />
            </Trigger>
            <Trigger Property="IsEditable" Value="true">
              <Setter Property="IsTabStop" Value="false" />
              <Setter TargetName="PART_EditableTextBox" Property="Visibility" Value="Visible" />
              <Setter TargetName="ContentSite" Property="Visibility" Value="Hidden" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Style.Triggers />
  </Style>
  <Style x:Key="NodeViewComboBox" TargetType="{x:Type ComboBox}">
    <Setter Property="SnapsToDevicePixels" Value="true" />
    <Setter Property="OverridesDefaultStyle" Value="true" />
    <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto" />
    <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
    <Setter Property="ScrollViewer.CanContentScroll" Value="true" />
    <Setter Property="MinWidth" Value="40" />
    <Setter Property="Padding" Value="5,0" />
    <Setter Property="MinHeight" Value="20" />
    <Setter Property="MaxHeight" Value="30" />
    <Setter Property="FontSize" Value="10" />
    <Setter Property="Foreground" Value="#C7C7C7" />
    <Setter Property="ItemContainerStyle" Value="{DynamicResource PackageManagerComboBoxItemStyle}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="ComboBox">
          <Grid>
            <ToggleButton Name="ToggleButton" Grid.Column="2" ClickMode="Press" Focusable="false" IsChecked="{Binding Path=IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" Template="{DynamicResource NodeViewComboBoxToggleButton}" />
            <ContentPresenter Name="ContentSite" Margin="5,3,12,3" HorizontalAlignment="Left" VerticalAlignment="Center" Content="{TemplateBinding SelectionBoxItem}" ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}" ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}" IsHitTestVisible="False" />
            <TextBox x:Name="PART_EditableTextBox" Margin="3,3,23,3" Padding="10" HorizontalAlignment="Left" VerticalAlignment="Center" Background="#2a2a2a" CaretBrush="#bbbbbb" Focusable="True" Foreground="#bbbbbb" IsReadOnly="{TemplateBinding IsReadOnly}" Style="{x:Null}" Template="{StaticResource ComboBoxTextBox}" Visibility="Hidden" />
            <Popup Name="Popup" AllowsTransparency="True" Focusable="False" IsOpen="{TemplateBinding IsDropDownOpen}" Placement="Bottom" PopupAnimation="Slide">
              <Grid Name="DropDown" MinWidth="{TemplateBinding ActualWidth}" MaxHeight="{TemplateBinding MaxDropDownHeight}" SnapsToDevicePixels="True">
                <Border x:Name="DropDownBorder" Background="#2a2a2a" BorderBrush="Transparent" BorderThickness="0" />
                <ScrollViewer Margin="0,6,0,6" SnapsToDevicePixels="True">
                  <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Contained" />
                </ScrollViewer>
              </Grid>
            </Popup>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="HasItems" Value="false">
              <Setter TargetName="DropDownBorder" Property="MinHeight" Value="95" />
            </Trigger>
            <Trigger Property="IsGrouping" Value="true">
              <Setter Property="ScrollViewer.CanContentScroll" Value="false" />
            </Trigger>
            <Trigger SourceName="Popup" Property="Popup.AllowsTransparency" Value="true">
              <Setter TargetName="DropDownBorder" Property="CornerRadius" Value="0" />
              <Setter TargetName="DropDownBorder" Property="Margin" Value="0,0,0,0" />
            </Trigger>
            <Trigger Property="IsEditable" Value="true">
              <Setter Property="IsTabStop" Value="false" />
              <Setter TargetName="PART_EditableTextBox" Property="Visibility" Value="Visible" />
              <Setter TargetName="ContentSite" Property="Visibility" Value="Hidden" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Style.Triggers />
  </Style>
  <Style x:Key="SComboBox_Update" TargetType="{x:Type ComboBox}">
    <Setter Property="SnapsToDevicePixels" Value="true" />
    <Setter Property="OverridesDefaultStyle" Value="true" />
    <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto" />
    <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
    <Setter Property="ScrollViewer.CanContentScroll" Value="true" />
    <Setter Property="MinWidth" Value="120" />
    <Setter Property="Padding" Value="12,3" />
    <Setter Property="MinHeight" Value="20" />
    <Setter Property="MaxHeight" Value="40" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="ComboBox">
          <Grid>
            <ToggleButton Name="ToggleButton" Grid.Column="2" ClickMode="Press" Focusable="false" IsChecked="{Binding Path=IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" Template="{StaticResource ComboBoxToggleButtonUpdated}" />
            <ContentPresenter Name="ContentSite" Margin="9,3,23,3" HorizontalAlignment="Left" VerticalAlignment="Center" Content="{TemplateBinding SelectionBoxItem}" ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}" ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}" IsHitTestVisible="False" />
            <TextBox x:Name="PART_EditableTextBox" Margin="3,3,23,3" Padding="10" HorizontalAlignment="Left" VerticalAlignment="Center" Background="#666666" CaretBrush="#bbbbbb" Focusable="True" Foreground="#bbbbbb" IsReadOnly="{TemplateBinding IsReadOnly}" Style="{x:Null}" Template="{StaticResource ComboBoxTextBox}" Visibility="Hidden" />
            <Popup Name="Popup" AllowsTransparency="True" Focusable="False" IsOpen="{TemplateBinding IsDropDownOpen}" Placement="Bottom" PopupAnimation="Slide">
              <Grid Name="DropDown" MinWidth="{TemplateBinding ActualWidth}" MaxHeight="{TemplateBinding MaxDropDownHeight}" SnapsToDevicePixels="True">
                <Border x:Name="DropDownBorder" Background="#2c2c2c" BorderBrush="#444444" BorderThickness="1,0,1,1" />
                <ScrollViewer Margin="4,6,4,6" SnapsToDevicePixels="True">
                  <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Contained" />
                </ScrollViewer>
              </Grid>
            </Popup>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="HasItems" Value="false">
              <Setter TargetName="DropDownBorder" Property="MinHeight" Value="95" />
            </Trigger>
            <Trigger Property="IsGrouping" Value="true">
              <Setter Property="ScrollViewer.CanContentScroll" Value="false" />
            </Trigger>
            <Trigger SourceName="Popup" Property="Popup.AllowsTransparency" Value="true">
              <Setter TargetName="DropDownBorder" Property="CornerRadius" Value="4" />
              <Setter TargetName="DropDownBorder" Property="Margin" Value="0,2,0,0" />
            </Trigger>
            <Trigger Property="IsEditable" Value="true">
              <Setter Property="IsTabStop" Value="false" />
              <Setter TargetName="PART_EditableTextBox" Property="Visibility" Value="Visible" />
              <Setter TargetName="ContentSite" Property="Visibility" Value="Hidden" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Style.Triggers />
  </Style>
  <Style x:Key="RefreshRunSettingsComboBox" TargetType="{x:Type ComboBox}">
    <Setter Property="SnapsToDevicePixels" Value="true" />
    <Setter Property="OverridesDefaultStyle" Value="true" />
    <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto" />
    <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
    <Setter Property="ScrollViewer.CanContentScroll" Value="true" />
    <Setter Property="MinWidth" Value="120" />
    <Setter Property="Padding" Value="12,3" />
    <Setter Property="MinHeight" Value="20" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="ComboBox">
          <Grid>
            <ToggleButton Name="ToggleButton" ClickMode="Press" Focusable="false" IsChecked="{Binding Path=IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}">
              <ToggleButton.Style>
                <Style TargetType="ToggleButton">
                  <Setter Property="Template">
                    <Setter.Value>
                      <ControlTemplate TargetType="{x:Type ToggleButton}">
                        <Grid HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
                          <Grid.ColumnDefinitions>
                            <ColumnDefinition />
                            <ColumnDefinition Width="20" />
                          </Grid.ColumnDefinitions>
                          <Border Grid.Column="0" Grid.ColumnSpan="2" Background="#2A2A2A" />
                          <Border x:Name="Border" Grid.Column="1" />
                          <Rectangle x:Name="BlueUnderline" Grid.Column="0" Grid.ColumnSpan="2" Height="1px" VerticalAlignment="Bottom" />
                          <Path x:Name="Arrow" Grid.Column="1" HorizontalAlignment="Center" VerticalAlignment="Center" Data="M0,0 L0,2 L4,6 L8,2 L8,0 L4,4 z" Fill="White" />
                        </Grid>
                        <ControlTemplate.Triggers>
                          <Trigger Property="ToggleButton.IsMouseOver" Value="true">
                            <Setter TargetName="BlueUnderline" Property="Fill" Value="White" />
                          </Trigger>
                          <Trigger Property="ToggleButton.IsChecked" Value="true">
                            <Setter TargetName="Arrow" Property="Fill" Value="#6AC0E7" />
                            <Setter TargetName="Arrow" Property="Data" Value="M0,6 L0,4 L4,0 L8,4 L8,6 L4,2 z" />
                            <Setter TargetName="BlueUnderline" Property="Fill" Value="#6AC0E7" />
                          </Trigger>
                          <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="Border" Property="Background" Value="#3C3C3C" />
                            <Setter TargetName="Border" Property="BorderBrush" Value="#AAAAAA" />
                            <Setter Property="Foreground" Value="#888888" />
                            <Setter TargetName="Arrow" Property="Fill" Value="#888888" />
                          </Trigger>
                        </ControlTemplate.Triggers>
                      </ControlTemplate>
                    </Setter.Value>
                  </Setter>
                </Style>
              </ToggleButton.Style>
            </ToggleButton>
            <ContentPresenter Name="ContentSite" Margin="9,3,23,3" HorizontalAlignment="Left" VerticalAlignment="Center" Content="{TemplateBinding SelectionBoxItem}" ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}" ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}" IsHitTestVisible="False" />
            <TextBox x:Name="PART_EditableTextBox" Margin="3,3,23,3" Padding="10" HorizontalAlignment="Left" VerticalAlignment="Center" Background="Transparent" CaretBrush="#bbbbbb" Focusable="True" Foreground="#bbbbbb" IsReadOnly="{TemplateBinding IsReadOnly}" Style="{x:Null}" Template="{StaticResource ComboBoxTextBox}" Visibility="Hidden" />
            <Popup Name="Popup" AllowsTransparency="True" Focusable="False" IsOpen="{TemplateBinding IsDropDownOpen}" Placement="Bottom" PopupAnimation="Slide">
              <Grid Name="DropDown" MinWidth="{TemplateBinding ActualWidth}" MaxHeight="{TemplateBinding MaxDropDownHeight}" SnapsToDevicePixels="True">
                <Border x:Name="DropDownBorder" Background="#535353" BorderThickness="0" />
                <ScrollViewer Margin="4,6,4,6" SnapsToDevicePixels="True">
                  <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Contained" />
                </ScrollViewer>
              </Grid>
            </Popup>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="HasItems" Value="false">
              <Setter TargetName="DropDownBorder" Property="MinHeight" Value="95" />
            </Trigger>
            <Trigger Property="IsGrouping" Value="true">
              <Setter Property="ScrollViewer.CanContentScroll" Value="false" />
            </Trigger>
            <Trigger SourceName="Popup" Property="Popup.AllowsTransparency" Value="true">
              <Setter TargetName="DropDownBorder" Property="CornerRadius" Value="4" />
              <Setter TargetName="DropDownBorder" Property="Margin" Value="0,2,0,0" />
            </Trigger>
            <Trigger Property="IsEditable" Value="true">
              <Setter Property="IsTabStop" Value="false" />
              <Setter TargetName="PART_EditableTextBox" Property="Visibility" Value="Visible" />
              <Setter TargetName="ContentSite" Property="Visibility" Value="Hidden" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="SZoomFadeText" TargetType="{x:Type TextBlock}">
    <Style.Triggers>
      <DataTrigger Binding="{Binding Path=DataContext.Zoom, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type views:WorkspaceView}}, Converter={StaticResource ZoomToBooleanConverter}}" Value="true">
        <DataTrigger.EnterActions>
          <BeginStoryboard>
            <Storyboard>
              <DoubleAnimation Storyboard.TargetProperty="Opacity" To="1.0" Duration="0:0:0.2" />
            </Storyboard>
          </BeginStoryboard>
        </DataTrigger.EnterActions>
        <DataTrigger.ExitActions>
          <BeginStoryboard>
            <Storyboard>
              <DoubleAnimation Storyboard.TargetProperty="Opacity" To="0.0" Duration="0:0:0.2" />
            </Storyboard>
          </BeginStoryboard>
        </DataTrigger.ExitActions>
      </DataTrigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="SZoomFadeLabel" TargetType="{x:Type Label}">
    <Style.Triggers>
      <DataTrigger Binding="{Binding Path=DataContext.Zoom, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type views:WorkspaceView}}, Converter={StaticResource ZoomToBooleanConverter}}" Value="true">
        <DataTrigger.EnterActions>
          <BeginStoryboard>
            <Storyboard>
              <DoubleAnimation Storyboard.TargetProperty="Opacity" To="1.0" Duration="0:0:0.2" />
            </Storyboard>
          </BeginStoryboard>
        </DataTrigger.EnterActions>
        <DataTrigger.ExitActions>
          <BeginStoryboard>
            <Storyboard>
              <DoubleAnimation Storyboard.TargetProperty="Opacity" To="0.0" Duration="0:0:0.2" />
            </Storyboard>
          </BeginStoryboard>
        </DataTrigger.ExitActions>
      </DataTrigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="SZoomFadePreview" TargetType="{x:Type Border}">
    <Style.Triggers>
      <DataTrigger Binding="{Binding Path=DataContext.Zoom, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type views:WorkspaceView}}, Converter={StaticResource ZoomToBooleanConverter}}" Value="true">
        <DataTrigger.EnterActions>
          <BeginStoryboard>
            <Storyboard>
              <DoubleAnimation Storyboard.TargetProperty="Opacity" To="0.4" Duration="0:0:0.5" />
            </Storyboard>
          </BeginStoryboard>
        </DataTrigger.EnterActions>
        <DataTrigger.ExitActions>
          <BeginStoryboard>
            <Storyboard>
              <DoubleAnimation Storyboard.TargetProperty="Opacity" To="0.7" Duration="0:0:0.5" />
            </Storyboard>
          </BeginStoryboard>
        </DataTrigger.ExitActions>
      </DataTrigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="SZoomFadeInPreview" TargetType="{x:Type Border}">
    <Style.Triggers>
      <DataTrigger Binding="{Binding Path=DataContext.Zoom, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type views:WorkspaceView}}, Converter={StaticResource ZoomToBooleanConverter}}" Value="true">
        <DataTrigger.EnterActions>
          <BeginStoryboard>
            <Storyboard>
              <DoubleAnimation Storyboard.TargetProperty="Opacity" To="0.0" Duration="0:0:0.5" />
            </Storyboard>
          </BeginStoryboard>
        </DataTrigger.EnterActions>
        <DataTrigger.ExitActions>
          <BeginStoryboard>
            <Storyboard>
              <DoubleAnimation Storyboard.TargetProperty="Opacity" To="0.5" Duration="0:0:0.5" />
            </Storyboard>
          </BeginStoryboard>
        </DataTrigger.ExitActions>
      </DataTrigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="SZoomFadeOutPreview" TargetType="{x:Type Border}">
    <Style.Triggers>
      <DataTrigger Binding="{Binding Path=DataContext.Zoom, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type views:WorkspaceView}}, Converter={StaticResource ZoomToBooleanConverter}}" Value="true">
        <DataTrigger.EnterActions>
          <BeginStoryboard>
            <Storyboard>
              <DoubleAnimation Storyboard.TargetProperty="Opacity" To="0.5" Duration="0:0:0.5" />
            </Storyboard>
          </BeginStoryboard>
        </DataTrigger.EnterActions>
        <DataTrigger.ExitActions>
          <BeginStoryboard>
            <Storyboard>
              <DoubleAnimation Storyboard.TargetProperty="Opacity" To="0.0" Duration="0:0:0.5" />
            </Storyboard>
          </BeginStoryboard>
        </DataTrigger.ExitActions>
      </DataTrigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="SZoomFadeOutFrameworkElement" TargetType="{x:Type FrameworkElement}">
    <Style.Triggers>
      <DataTrigger Binding="{Binding Path=DataContext.Zoom, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type views:WorkspaceView}}, Converter={StaticResource ZoomToBooleanConverter}}" Value="true">
        <DataTrigger.EnterActions>
          <BeginStoryboard>
            <Storyboard>
              <DoubleAnimation Storyboard.TargetProperty="Opacity" To="1.0" Duration="0:0:0.2" />
            </Storyboard>
          </BeginStoryboard>
        </DataTrigger.EnterActions>
        <DataTrigger.ExitActions>
          <BeginStoryboard>
            <Storyboard>
              <DoubleAnimation Storyboard.TargetProperty="Opacity" To="0.0" Duration="0:0:0.2" />
            </Storyboard>
          </BeginStoryboard>
        </DataTrigger.ExitActions>
      </DataTrigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="SZoomFadeInFrameworkElement" TargetType="{x:Type FrameworkElement}">
    <Style.Triggers>
      <DataTrigger Binding="{Binding Path=DataContext.Zoom, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type views:WorkspaceView}}, Converter={StaticResource ZoomToBooleanConverter}}" Value="true">
        <DataTrigger.EnterActions>
          <BeginStoryboard>
            <Storyboard>
              <DoubleAnimation Storyboard.TargetProperty="Opacity" To="0.0" Duration="0:0:0.2" />
            </Storyboard>
          </BeginStoryboard>
        </DataTrigger.EnterActions>
        <DataTrigger.ExitActions>
          <BeginStoryboard>
            <Storyboard>
              <DoubleAnimation Storyboard.TargetProperty="Opacity" To="1.0" Duration="0:0:0.2" />
            </Storyboard>
          </BeginStoryboard>
        </DataTrigger.ExitActions>
      </DataTrigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="TextButtonStyle" TargetType="Button">
    <Setter Property="HorizontalAlignment" Value="Right" />
    <Setter Property="Cursor" Value="Hand" />
    <Setter Property="VerticalAlignment" Value="Top" />
    <Setter Property="Margin" Value="18,0,0,0" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="Button">
          <TextBlock x:Name="textBlock" HorizontalAlignment="Center" VerticalAlignment="Center" FontFamily="{StaticResource ArtifaktElementBold}" FontSize="14px" Foreground="{StaticResource TextBlockLinkForegroundColor}" Text="{TemplateBinding Content}" />
          <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
              <Setter TargetName="textBlock" Property="Foreground" Value="White" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
              <Setter TargetName="textBlock" Property="Foreground" Value="#999999" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="TextButtonLink" TargetType="Button">
    <Setter Property="HorizontalAlignment" Value="Left" />
    <Setter Property="Cursor" Value="Hand" />
    <Setter Property="BorderThickness" Value="0" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="Button">
          <TextBlock Name="textBlock" HorizontalAlignment="Left" Background="Transparent" FontFamily="{StaticResource ArtifaktElementRegular}" FontSize="14px" Foreground="#006FB4" Text="{TemplateBinding Content}" />
          <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
              <Setter TargetName="textBlock" Property="Background" Value="Transparent" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="InputStyle" TargetType="{x:Type TextBox}">
    <Setter Property="Margin" Value="0,0,0,12" />
    <Setter Property="MinWidth" Value="62px" />
    <Setter Property="CaretBrush" Value="{StaticResource PrimaryCharcoal200Brush}" />
    <Setter Property="Padding" Value="10,12,10,8" />
    <Setter Property="FontFamily" Value="{StaticResource ArtifaktElementRegular}" />
    <Setter Property="FontSize" Value="14px" />
    <Setter Property="Foreground" Value="{StaticResource PrimaryCharcoal200Brush}" />
    <Setter Property="TextWrapping" Value="Wrap" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type TextBox}">
          <Grid>
            <Border Background="#353535" BorderBrush="Transparent" BorderThickness="1" />
            <ScrollViewer x:Name="PART_ContentHost" VerticalAlignment="Center" />
            <Label x:Name="WaterMarkLabel" Padding="13,13,10,8" VerticalAlignment="Center" Content="{TemplateBinding Tag}" FontFamily="{StaticResource ArtifaktElementRegular}" FontSize="12px" Foreground="{StaticResource PrimaryCharcoal200Brush}" IsHitTestVisible="False" Opacity="0.5" Visibility="Collapsed" />
          </Grid>
          <ControlTemplate.Triggers>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="Text" Value="" />
              </MultiTrigger.Conditions>
              <Setter TargetName="WaterMarkLabel" Property="Visibility" Value="Visible" />
            </MultiTrigger>
            <Trigger Property="IsEnabled" Value="False">
              <Setter Property="Foreground" Value="{StaticResource PrimaryCharcoal200Brush}" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="InputStyleWithIcon" TargetType="{x:Type TextBox}">
    <Setter Property="Margin" Value="0,0,0,12" />
    <Setter Property="MinWidth" Value="62px" />
    <Setter Property="CaretBrush" Value="{StaticResource PrimaryCharcoal200Brush}" />
    <Setter Property="Padding" Value="10,12,10,8" />
    <Setter Property="FontFamily" Value="{StaticResource ArtifaktElementRegular}" />
    <Setter Property="FontSize" Value="12px" />
    <Setter Property="Foreground" Value="{StaticResource PrimaryCharcoal200Brush}" />
    <Setter Property="TextWrapping" Value="Wrap" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type TextBox}">
          <Grid>
            <Grid.ColumnDefinitions>
              <ColumnDefinition />
              <ColumnDefinition Width="25" />
            </Grid.ColumnDefinitions>
            <Border Grid.Row="0" Grid.ColumnSpan="2" Background="#353535" BorderBrush="Transparent" BorderThickness="1" />
            <ScrollViewer x:Name="PART_ContentHost" VerticalAlignment="Center" />
            <Label x:Name="WaterMarkLabel" Grid.Row="0" Padding="13,13,10,8" VerticalAlignment="Center" Content="{TemplateBinding Tag}" FontFamily="{StaticResource ArtifaktElementRegular}" FontSize="12px" Foreground="{StaticResource PrimaryCharcoal200Brush}" IsHitTestVisible="False" Opacity="0.5" Visibility="Collapsed" />
            <!--  This is the Canvas for the exclamation mark appearing when the Style that the user is trying to insert already exists  -->
            <Canvas Grid.Column="1" Margin="0,5,5,0" Visibility="{Binding Path=IsWarningEnabled, Converter={StaticResource BooleanToVisibilityConverter}}">
              <Canvas.ToolTip>
                <ToolTip Content="{Binding CurrentWarningMessage}" Style="{StaticResource GenericToolTipLight}" />
              </Canvas.ToolTip>
              <Path Fill="#FAA21B">
                <Path.Data>
                  <CombinedGeometry GeometryCombineMode="Exclude">
                    <CombinedGeometry.Geometry1>
                      <PathGeometry>
                        <PathGeometry.Figures>
                          <PathFigureCollection>
                            <PathFigure IsClosed="True" StartPoint="10,5">
                              <PathFigure.Segments>
                                <PathSegmentCollection>
                                  <LineSegment Point="18,20" />
                                  <LineSegment Point="2,20" />
                                </PathSegmentCollection>
                              </PathFigure.Segments>
                            </PathFigure>
                          </PathFigureCollection>
                        </PathGeometry.Figures>
                      </PathGeometry>
                    </CombinedGeometry.Geometry1>
                    <CombinedGeometry.Geometry2>
                      <GeometryGroup FillRule="EvenOdd">
                        <EllipseGeometry Center="10,18" RadiusX="1.5" RadiusY="1.5" />
                        <RectangleGeometry Rect="8.5,8.5,3,7.5" />
                      </GeometryGroup>
                    </CombinedGeometry.Geometry2>
                  </CombinedGeometry>
                </Path.Data>
              </Path>
            </Canvas>
          </Grid>
          <ControlTemplate.Triggers>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="Text" Value="" />
              </MultiTrigger.Conditions>
              <Setter TargetName="WaterMarkLabel" Property="Visibility" Value="Visible" />
            </MultiTrigger>
            <Trigger Property="IsEnabled" Value="False">
              <Setter Property="Foreground" Value="{StaticResource PrimaryCharcoal200Brush}" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="LabelStyle" TargetType="TextBlock">
    <Setter Property="FontFamily" Value="{StaticResource ArtifaktElementBold}" />
    <Setter Property="FontWeight" Value="Bold" />
    <Setter Property="FontSize" Value="14px" />
    <Setter Property="Foreground" Value="{StaticResource PrimaryCharcoal200Brush}" />
    <Setter Property="HorizontalAlignment" Value="Left" />
    <Setter Property="Margin" Value="0,0,0,5" />
  </Style>
  <Style x:Key="SubLabelStyle" TargetType="TextBlock">
    <Setter Property="FontFamily" Value="{StaticResource ArtifaktElementRegular}" />
    <Setter Property="FontSize" Value="12px" />
    <Setter Property="Foreground" Value="{StaticResource PrimaryCharcoal200Brush}" />
    <Setter Property="Margin" Value="0,0,0,5" />
  </Style>
  <Style x:Key="SZoomFadeTextBox" TargetType="{x:Type TextBox}">
    <Style.Triggers>
      <DataTrigger Binding="{Binding Path=DataContext.Zoom, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type views:WorkspaceView}}, Converter={StaticResource ZoomToBooleanConverter}}" Value="true">
        <DataTrigger.EnterActions>
          <BeginStoryboard>
            <Storyboard>
              <DoubleAnimation Storyboard.TargetProperty="Opacity" To="1.0" Duration="0:0:0.2" />
            </Storyboard>
          </BeginStoryboard>
        </DataTrigger.EnterActions>
        <DataTrigger.ExitActions>
          <BeginStoryboard>
            <Storyboard>
              <DoubleAnimation Storyboard.TargetProperty="Opacity" To="0.0" Duration="0:0:0.2" />
            </Storyboard>
          </BeginStoryboard>
        </DataTrigger.ExitActions>
      </DataTrigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="SImageButton" TargetType="{x:Type Button}">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate>
          <Grid x:Name="container" Background="Transparent">
            <Grid x:Name="inner" Background="{StaticResource ButtonGradientBackground}">
              <Image x:Name="display" Width="24" Height="24" Source="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Tag}" />
            </Grid>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="ToggleButton.IsMouseOver" Value="true">
              <Setter TargetName="inner" Property="Background" Value="LightBlue" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="SDarkTextBox" BasedOn="{StaticResource {x:Type TextBox}}" TargetType="{x:Type TextBox}">
    <Setter Property="Foreground" Value="#bbbbbb" />
    <Setter Property="CaretBrush" Value="White" />
    <Setter Property="HorizontalAlignment" Value="Stretch" />
    <Setter Property="FontSize" Value="14px" />
    <Setter Property="Padding" Value="5" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type TextBox}">
          <Border Name="borderText" Background="#2c2c2c" BorderBrush="#444" BorderThickness="1px">
            <Grid>
              <ScrollViewer x:Name="PART_ContentHost" Margin="5,5,0,0" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" Style="{DynamicResource ResourceKey=SDarkScrollViewer}" />
              <TextBlock x:Name="previewText" Margin="5,5,0,0" Padding="{TemplateBinding Padding}" FontSize="{TemplateBinding FontSize}" Foreground="#555555" IsHitTestVisible="False" Text="{TemplateBinding Tag}" Visibility="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Text.IsEmpty, Converter={StaticResource BooleanToVisibilityConverter}}" />
            </Grid>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="IsKeyboardFocusWithin" Value="True">
              <Setter TargetName="borderText" Property="BorderBrush" Value="#666666" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
              <Setter Property="Foreground" Value="#555555" />
              <Setter TargetName="borderText" Property="BorderBrush" Value="#444444" />
            </Trigger>
            <Trigger Property="Text" Value="">
              <Setter TargetName="previewText" Property="Visibility" Value="Visible" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="SLightTextBox" BasedOn="{StaticResource {x:Type TextBox}}" TargetType="{x:Type TextBox}">
    <Setter Property="Foreground" Value="{DynamicResource DarkerGreyBrush}" />
    <Setter Property="CaretBrush" Value="White" />
    <Setter Property="HorizontalAlignment" Value="Stretch" />
    <Setter Property="FontSize" Value="11px" />
    <Setter Property="Padding" Value="5" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type TextBox}">
          <Border Name="borderText" Background="{DynamicResource LightMidGreyOpacityBrush}" BorderBrush="#444" BorderThickness="0px">
            <Grid>
              <ScrollViewer x:Name="PART_ContentHost" Margin="5,5,0,0" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" Style="{DynamicResource ResourceKey=SDarkScrollViewer}" />
              <TextBlock x:Name="previewText" Margin="5,5,0,0" Padding="{TemplateBinding Padding}" FontSize="{TemplateBinding FontSize}" Foreground="#555555" IsHitTestVisible="False" Text="{TemplateBinding Tag}" Visibility="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Text.IsEmpty, Converter={StaticResource BooleanToVisibilityConverter}}" />
            </Grid>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="IsKeyboardFocusWithin" Value="True">
              <Setter TargetName="borderText" Property="BorderBrush" Value="#666666" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
              <Setter Property="Foreground" Value="#555555" />
              <Setter TargetName="borderText" Property="BorderBrush" Value="#444444" />
            </Trigger>
            <Trigger Property="Text" Value="">
              <Setter TargetName="previewText" Property="Visibility" Value="Visible" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="STextButtonWithShapeIcon" TargetType="{x:Type Button}">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate>
          <Border x:Name="container" Background="Transparent" BorderBrush="#3c3c3c" BorderThickness="1">
            <Grid x:Name="inner" Background="#373737">
              <StackPanel Orientation="Horizontal">
                <ContentControl Content="{DynamicResource ResourceKey=Shape}" />
                <TextBlock x:Name="text" Margin="10,10,10,10" HorizontalAlignment="Center" VerticalAlignment="Center" FontSize="14px" Foreground="#bbbbbb" Text="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Content}" />
              </StackPanel>
            </Grid>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="Button.IsMouseOver" Value="true">
              <Setter TargetName="container" Property="BorderBrush" Value="#656565" />
              <Setter TargetName="inner" Property="Background" Value="#373737" />
            </Trigger>
            <Trigger Property="Button.IsPressed" Value="true">
              <Setter TargetName="container" Property="BorderBrush" Value="#656565" />
              <Setter TargetName="inner" Property="Background" Value="#272727" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="true">
              <Setter TargetName="text" Property="Foreground" Value="#bbbbbb" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
              <Setter TargetName="container" Property="BorderBrush" Value="Transparent" />
              <Setter TargetName="inner" Property="Background" Value="#373737" />
              <Setter TargetName="text" Property="Foreground" Value="#555555" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="SButtonWithShapeIcon" TargetType="{x:Type Button}">
    <Setter Property="SnapsToDevicePixels" Value="True" />
    <Setter Property="UseLayoutRounding" Value="True" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate>
          <Border x:Name="container" Background="Transparent" BorderBrush="Transparent" BorderThickness="0">
            <Grid x:Name="inner" Background="Transparent">
              <ContentControl Name="shapeIcon" Width="24" Height="24" Content="{DynamicResource ResourceKey=Shape}" SnapsToDevicePixels="True" UseLayoutRounding="True" />
            </Grid>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="Button.IsMouseOver" Value="true">
              <Setter TargetName="shapeIcon" Property="Content" Value="{DynamicResource ResourceKey=HighlightShape}" />
            </Trigger>
            <Trigger Property="Button.IsPressed" Value="true">
              <Setter TargetName="shapeIcon" Property="Opacity" Value="0.2" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
              <Setter TargetName="shapeIcon" Property="Opacity" Value="0.5" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="SNodeTextButton" TargetType="{x:Type Button}">
    <Setter Property="FontSize" Value="17px" />
    <Setter Property="Foreground" Value="{StaticResource Blue300Brush}" />
    <Setter Property="Background" Value="#4D4D4D" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate>
          <Grid x:Name="container" Width="{TemplateBinding Width}" Height="{TemplateBinding Height}" Background="Transparent">
            <Border x:Name="roundedBorder" HorizontalAlignment="Stretch" Background="{TemplateBinding Background}" CornerRadius="4">
              <TextBlock x:Name="text" Margin="0,1,0,0" Padding="0" HorizontalAlignment="Center" VerticalAlignment="Center" FontSize="{TemplateBinding FontSize}" FontWeight="Bold" Foreground="{TemplateBinding Foreground}" Style="{StaticResource SZoomFadeText}" Text="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Content}" />
            </Border>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="Button.IsMouseOver" Value="true">
              <Setter Property="Background" Value="#535353" />
              <Setter Property="Foreground" Value="{StaticResource Blue300Brush}" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style BasedOn="{StaticResource SNodeTextButton}" TargetType="{x:Type nodes:DynamoNodeButton}" />
  <Style x:Key="SingleCharButton" BasedOn="{StaticResource SNodeTextButton}" TargetType="{x:Type Button}">
    <Setter Property="Foreground" Value="#999999" />
    <Setter Property="FontSize" Value="28px" />
    <Setter Property="Height" Value="22px" />
    <Setter Property="Width" Value="22px" />
  </Style>
  <Style x:Key="AddRemoveButton" TargetType="{x:Type Button}">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate>
          <Grid x:Name="container" Background="Transparent">
            <Border x:Name="roundedBorder" Width="22px" Height="22px" HorizontalAlignment="Stretch" Background="#4D4D4D" CornerRadius="4">
              <TextBlock x:Name="text" Margin="0,1,0,0" Padding="0" HorizontalAlignment="Center" VerticalAlignment="Center" FontSize="28px" FontWeight="Bold" Foreground="#999999" Style="{StaticResource SZoomFadeText}" Text="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Content}" />
            </Border>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="Button.IsMouseOver" Value="true">
              <Setter TargetName="roundedBorder" Property="Background" Value="#535353" />
              <Setter TargetName="text" Property="Foreground" Value="{StaticResource Blue300Brush}" />
            </Trigger>
            <DataTrigger Binding="{Binding ElementName=text, Path=Text}" Value="+">
              <Setter TargetName="text" Property="Margin" Value="1,3,0,0" />
              <Setter TargetName="container" Property="Margin" Value="0,0,1,0" />
              <Setter TargetName="roundedBorder" Property="CornerRadius" Value="4,0,0,4" />
            </DataTrigger>
            <DataTrigger Binding="{Binding ElementName=text, Path=Text}" Value="-">
              <Setter TargetName="text" Property="Margin" Value="0,3,1,0" />
              <Setter TargetName="container" Property="Margin" Value="1,0,0,0" />
              <Setter TargetName="roundedBorder" Property="CornerRadius" Value="0,4,4,0" />
            </DataTrigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="DismissButtonStyle" TargetType="Button">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate>
          <Grid Name="ButtonGrid">
            <Rectangle Name="ButtonBackground" Width="{TemplateBinding Width}" Height="{TemplateBinding Height}" Fill="White" />
            <Path Name="DiagonalLine1" Data="M 0,0 50,50" Stretch="UniformToFill" Stroke="{StaticResource MidGreyBrush}" />
            <Path Name="DiagonalLine2" Data="M 50,0 0,50" Stretch="UniformToFill" Stroke="{StaticResource MidGreyBrush}" />
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
              <Setter TargetName="ButtonBackground" Property="Fill" Value="LightGray" />
            </Trigger>
            <Trigger Property="Button.IsPressed" Value="True">
              <Setter TargetName="ButtonBackground" Property="Fill" Value="{StaticResource PrimaryCharcoal100Brush}" />
              <Setter TargetName="DiagonalLine1" Property="Stroke" Value="{StaticResource Blue300Brush}" />
              <Setter TargetName="DiagonalLine2" Property="Stroke" Value="{StaticResource Blue300Brush}" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="RadioButton" TargetType="{x:Type RadioButton}">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type RadioButton}">
          <BulletDecorator Background="Transparent" Cursor="Hand">
            <BulletDecorator.Bullet>
              <Grid Width="18" Height="18" HorizontalAlignment="Center" VerticalAlignment="Center">
                <!--  Define size of the Bullet  -->
                <!--  The two borders  -->
                <Ellipse Name="RadioOuter" Width="12px" Height="12px" HorizontalAlignment="Center" VerticalAlignment="Center" Fill="Transparent" Stroke="#C0C0C0" StrokeThickness="1" />
                <Ellipse Name="RadioMark" Width="12px" Height="12px" HorizontalAlignment="Center" VerticalAlignment="Center" Fill="Transparent" Stroke="#EEEEEE" StrokeThickness="3 " Visibility="Hidden" />
                <Ellipse Name="RadioHover" Width="16px" Height="16px" HorizontalAlignment="Center" VerticalAlignment="Center" Fill="Transparent" Opacity="0.2" Stroke="White" StrokeThickness="2" Visibility="Hidden" />
              </Grid>
            </BulletDecorator.Bullet>
            <!--  Text element  -->
            <TextBlock Margin="3,1,6,0" FontFamily="{StaticResource ArtifaktElementRegular}" FontSize="16px" Foreground="#EEEEEE">
              <ContentPresenter />
            </TextBlock>
          </BulletDecorator>
          <!--  If item is checked, trigger the visibility of the mark  -->
          <ControlTemplate.Triggers>
            <Trigger Property="IsChecked" Value="true">
              <!--  If item is checked, trigger the visibility of the mark and change the color of the selected bullet into a darker gray for better highlighting  -->
              <Setter TargetName="RadioMark" Property="Visibility" Value="Visible" />
              <Setter TargetName="RadioOuter" Property="Stroke" Value="#FFADADAD" />
            </Trigger>
            <Trigger Property="IsMouseOver" Value="true">
              <Setter TargetName="RadioHover" Property="Visibility" Value="Visible" />
            </Trigger>
            <Trigger Property="IsPressed" Value="true">
              <Setter TargetName="RadioHover" Property="StrokeThickness" Value="4px" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="RefreshComboBox" TargetType="{x:Type ComboBox}">
    <Setter Property="OverridesDefaultStyle" Value="true" />
    <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto" />
    <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
    <Setter Property="ScrollViewer.CanContentScroll" Value="true" />
    <Setter Property="MinWidth" Value="300px" />
    <Setter Property="Margin" Value="-6,0,0,0" />
    <Setter Property="Height" Value="29px" />
    <Setter Property="Foreground" Value="{StaticResource MenuHeaderForegroundColorBrush}" />
    <Setter Property="FontSize" Value="16px" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ComboBox}">
          <Grid>
            <ToggleButton Name="ToggleButton" Grid.Column="2" ClickMode="Press" Focusable="false" IsChecked="{Binding Path=IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" Template="{StaticResource RefreshComboBoxToggleButton}" />
            <ContentPresenter Name="ContentSite" Margin="10,0,20,0" HorizontalAlignment="Left" VerticalAlignment="Center" Content="{TemplateBinding SelectionBoxItem}" ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}" ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}" IsHitTestVisible="False" />
            <TextBox x:Name="PART_EditableTextBox" Margin="0,0,25,4" HorizontalAlignment="Left" VerticalAlignment="Center" Focusable="True" FontFamily="{StaticResource ArtifaktElementRegular}" FontSize="18px" Foreground="#F5F5F5" IsReadOnly="{TemplateBinding IsReadOnly}" Visibility="Hidden" />
            <TextBlock x:Name="PART_ReadOnlyTextBlock" Margin="10,0,20,0" HorizontalAlignment="Left" VerticalAlignment="Center" Focusable="True" TextTrimming="CharacterEllipsis" TextWrapping="Wrap" Visibility="{Binding IsVisibleDropDownTextBlock, Converter={StaticResource BooleanToVisibilityCollapsedConverter}}" />
            <Popup Name="Popup" AllowsTransparency="True" Focusable="False" IsOpen="{TemplateBinding IsDropDownOpen}" Placement="Bottom" PopupAnimation="Slide" VerticalOffset="-6">
              <Grid Name="DropDown" MinWidth="{TemplateBinding ActualWidth}" MaxHeight="{TemplateBinding MaxDropDownHeight}" SnapsToDevicePixels="True">
                <Border x:Name="DropDownBorder" Background="#666666" />
                <ScrollViewer Margin="0" SnapsToDevicePixels="True" VerticalScrollBarVisibility="Visible">
                  <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Contained" />
                </ScrollViewer>
              </Grid>
            </Popup>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="HasItems" Value="false">
              <Setter TargetName="DropDownBorder" Property="MinHeight" Value="95" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
              <Setter Property="Foreground" Value="#888888" />
            </Trigger>
            <Trigger Property="IsGrouping" Value="true">
              <Setter Property="ScrollViewer.CanContentScroll" Value="false" />
            </Trigger>
            <Trigger SourceName="Popup" Property="Popup.AllowsTransparency" Value="true">
              <Setter TargetName="DropDownBorder" Property="CornerRadius" Value="0" />
              <Setter TargetName="DropDownBorder" Property="Margin" Value="0,0,0,0" />
            </Trigger>
            <Trigger Property="IsEditable" Value="true">
              <Setter Property="IsTabStop" Value="false" />
              <Setter TargetName="PART_EditableTextBox" Property="Visibility" Value="Visible" />
              <Setter TargetName="ContentSite" Property="Visibility" Value="Hidden" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="{x:Type ComboBoxItem}" TargetType="{x:Type ComboBoxItem}">
    <Setter Property="SnapsToDevicePixels" Value="true" />
    <Setter Property="Foreground" Value="{StaticResource MenuHeaderForegroundColorBrush}" />
    <Setter Property="OverridesDefaultStyle" Value="true" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ComboBoxItem}">
          <Border Name="Border" Padding="10,5" SnapsToDevicePixels="true">
            <ContentPresenter />
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="IsHighlighted" Value="true">
              <Setter TargetName="Border" Property="Background" Value="#808080" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
              <Setter Property="Foreground" Value="#888888" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="SDarkScrollViewer" TargetType="{x:Type ScrollViewer}">
    <Setter Property="HorizontalScrollBarVisibility" Value="Hidden" />
    <Setter Property="VerticalScrollBarVisibility" Value="Hidden" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ScrollViewer}">
          <Grid>
            <Grid Background="{TemplateBinding Background}">
              <ScrollContentPresenter x:Name="PART_ScrollContentPresenter" Margin="{TemplateBinding Padding}" CanContentScroll="{TemplateBinding CanContentScroll}" Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" />
            </Grid>
            <Grid>
              <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="Auto" />
              </Grid.ColumnDefinitions>
              <Grid.RowDefinitions>
                <RowDefinition Height="*" />
                <RowDefinition Height="Auto" />
              </Grid.RowDefinitions>
              <ScrollBar x:Name="PART_VerticalScrollBar" Grid.Column="1" AutomationProperties.AutomationId="VerticalScrollBar" Cursor="Arrow" Maximum="{TemplateBinding ScrollableHeight}" Minimum="0.0" ViewportSize="{TemplateBinding ViewportHeight}" Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=VerticalOffset, Mode=OneWay}" />
              <ScrollBar x:Name="PART_HorizontalScrollBar" Grid.Row="1" AutomationProperties.AutomationId="HorizontalScrollBar" Cursor="Arrow" Maximum="{TemplateBinding ScrollableWidth}" Minimum="0.0" Orientation="Horizontal" ViewportSize="{TemplateBinding ViewportWidth}" Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=HorizontalOffset, Mode=OneWay}" />
            </Grid>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Style.Triggers>
      <Trigger Property="IsEnabled" Value="false">
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
      </Trigger>
      <Trigger Property="IsMouseOver" Value="true">
        <Setter Property="HorizontalScrollBarVisibility" Value="Visible" />
        <Setter Property="VerticalScrollBarVisibility" Value="Visible" />
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="{x:Type ScrollBar}" TargetType="{x:Type ScrollBar}">
    <Setter Property="Stylus.IsFlicksEnabled" Value="false" />
    <Setter Property="Foreground" Value="#888" />
    <Setter Property="Background" Value="Transparent" />
    <Setter Property="Width" Value="8" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ScrollBar}">
          <Grid x:Name="GridRoot" Width="6" Background="{TemplateBinding Background}">
            <Grid.RowDefinitions>
              <RowDefinition Height="0.00001*" />
            </Grid.RowDefinitions>
            <Track x:Name="PART_Track" Grid.Row="0" Focusable="false" IsDirectionReversed="true">
              <Track.Resources>
                <!--
                                    Set the Thumb's minimum height to 25.
                                    The Thumb's minimum height is half the
                                    value of VerticalScrollBarButtonHeightKey.
                                -->
                <system:Double x:Key="{x:Static SystemParameters.VerticalScrollBarButtonHeightKey}">
                                    50
                                </system:Double>
              </Track.Resources>
              <Track.Thumb>
                <Thumb x:Name="Thumb" Background="{TemplateBinding Foreground}" Style="{DynamicResource SScrollThumbs}" />
              </Track.Thumb>
              <Track.IncreaseRepeatButton>
                <RepeatButton x:Name="PageUp" Command="ScrollBar.PageDownCommand" Focusable="false" Opacity="0" />
              </Track.IncreaseRepeatButton>
              <Track.DecreaseRepeatButton>
                <RepeatButton x:Name="PageDown" Command="ScrollBar.PageUpCommand" Focusable="false" Opacity="0" />
              </Track.DecreaseRepeatButton>
            </Track>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger SourceName="Thumb" Property="IsMouseOver" Value="true">
              <Setter TargetName="Thumb" Property="Background" Value="{DynamicResource ButtonSelectBrush}" />
            </Trigger>
            <Trigger SourceName="Thumb" Property="IsDragging" Value="true">
              <Setter TargetName="Thumb" Property="Background" Value="{DynamicResource DarkBrush}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
              <Setter TargetName="Thumb" Property="Visibility" Value="Collapsed" />
            </Trigger>
            <Trigger Property="Orientation" Value="Horizontal">
              <Setter TargetName="GridRoot" Property="LayoutTransform">
                <Setter.Value>
                  <RotateTransform Angle="-90" />
                </Setter.Value>
              </Setter>
              <Setter TargetName="PART_Track" Property="LayoutTransform">
                <Setter.Value>
                  <RotateTransform Angle="-90" />
                </Setter.Value>
              </Setter>
              <Setter Property="Width" Value="Auto" />
              <Setter Property="Height" Value="8" />
              <Setter TargetName="Thumb" Property="Tag" Value="Horizontal" />
              <Setter TargetName="PageDown" Property="Command" Value="ScrollBar.PageLeftCommand" />
              <Setter TargetName="PageUp" Property="Command" Value="ScrollBar.PageRightCommand" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="SLightToolTip" TargetType="{x:Type dynui:DynamoToolTip}">
    <Setter Property="OverridesDefaultStyle" Value="true" />
    <Setter Property="HasDropShadow" Value="False" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type dynui:DynamoToolTip}">
          <Grid>
            <Grid.ColumnDefinitions>
              <ColumnDefinition MinWidth="1" />
              <ColumnDefinition Width="Auto" />
              <ColumnDefinition MinWidth="1" />
            </Grid.ColumnDefinitions>
            <Grid.RowDefinitions>
              <RowDefinition MinHeight="1" />
              <RowDefinition Height="Auto" />
              <RowDefinition MinHeight="1" />
            </Grid.RowDefinitions>
            <Border Grid.Row="1" Grid.Column="1" Margin="-1" Background="{StaticResource InfoBubbleBackNormalBrush}" BorderBrush="{StaticResource InfoBubbleEdgeNormalBrush}" BorderThickness="1" CornerRadius="2" />
            <Path HorizontalAlignment="Center" VerticalAlignment="Center" Fill="{StaticResource InfoBubbleBackNormalBrush}" Stroke="{StaticResource InfoBubbleEdgeNormalBrush}" StrokeThickness="1">
              <Grid.Row>
                <Binding Converter="{StaticResource AttachmentToRowColumnConverter}" ConverterParameter="Row" RelativeSource="{RelativeSource TemplatedParent}" />
              </Grid.Row>
              <Grid.Column>
                <Binding Converter="{StaticResource AttachmentToRowColumnConverter}" ConverterParameter="Column" RelativeSource="{RelativeSource TemplatedParent}" />
              </Grid.Column>
              <Path.Data>
                <PathGeometry>
                  <PathFigure IsClosed="False">
                    <PathFigure.StartPoint>
                      <Binding Converter="{StaticResource AttachmentToPathConverter}" ConverterParameter="Start" RelativeSource="{RelativeSource TemplatedParent}" />
                    </PathFigure.StartPoint>
                    <PolyLineSegment>
                      <PolyLineSegment.Points>
                        <Binding Converter="{StaticResource AttachmentToPathConverter}" ConverterParameter="Points" RelativeSource="{RelativeSource TemplatedParent}" />
                      </PolyLineSegment.Points>
                    </PolyLineSegment>
                  </PathFigure>
                </PathGeometry>
              </Path.Data>
            </Path>
            <ContentPresenter Grid.Row="1" Grid.Column="1" Margin="4" HorizontalAlignment="Left" VerticalAlignment="Top" TextBlock.FontSize="14" />
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="StartPageListBox" TargetType="ListBox">
    <Setter Property="SnapsToDevicePixels" Value="true" />
    <Setter Property="OverridesDefaultStyle" Value="true" />
    <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Hidden" />
    <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
    <Setter Property="ScrollViewer.CanContentScroll" Value="true" />
    <Setter Property="MaxHeight" Value="220" />
    <Setter Property="Margin" Value="0,0,0,60" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="ListBox">
          <ScrollViewer Margin="0,2,0,2" Focusable="false">
            <StackPanel IsItemsHost="True" />
          </ScrollViewer>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="ItemTemplate">
      <Setter.Value>
        <DataTemplate>
          <Grid Background="Transparent">
            <Grid.ToolTip>
              <Binding Path="ToolTip" />
            </Grid.ToolTip>
            <StackPanel Orientation="Horizontal">
              <Image Width="31" Margin="5,0,14,0" Source="{Binding Icon}" Visibility="{Binding IconVisibility}" />
              <TextBlock Margin="6,7,0,8" VerticalAlignment="Center" FontFamily="{StaticResource ArtifaktElementRegular}" FontSize="16" Text="{Binding Caption}" />
              <TextBlock Margin="16,0,0,0" VerticalAlignment="Center" FontFamily="{StaticResource ArtifaktElementRegular}" FontSize="12" Foreground="#888" Text="{Binding SubScript}" />
            </StackPanel>
          </Grid>
        </DataTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="StartPageLabel" TargetType="Label">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="Label">
          <Border x:Name="border" Background="Transparent">
            <StackPanel Orientation="Horizontal">
              <ContentControl />
              <Label x:Name="label" Content="{TemplateBinding Content}" FontFamily="{StaticResource ArtifaktElementRegular}" FontSize="16" Foreground="#888888" />
            </StackPanel>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
              <Setter TargetName="label" Property="Foreground" Value="#333" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="StartPageTreeView" TargetType="TreeView">
    <Setter Property="OverridesDefaultStyle" Value="True" />
    <Setter Property="SnapsToDevicePixels" Value="True" />
    <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto" />
    <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
    <Setter Property="MaxHeight" Value="230" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="TreeView">
          <Border Name="Border" BorderThickness="1" CornerRadius="1">
            <Border.BorderBrush>
              <SolidColorBrush Color="{DynamicResource BorderMediumColor}" />
            </Border.BorderBrush>
            <Border.Background>
              <SolidColorBrush Color="{DynamicResource ControlLightColor}" />
            </Border.Background>
            <ScrollViewer Padding="4" CanContentScroll="False" Focusable="False">
              <ItemsPresenter />
            </ScrollViewer>
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="ExpandCollapseToggleStyle" TargetType="ToggleButton">
    <Setter Property="Focusable" Value="False" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="ToggleButton">
          <Grid Width="15" Height="13" Background="Transparent">
            <Path x:Name="Collapsed" Margin="1,1,1,1" HorizontalAlignment="Left" VerticalAlignment="Center" Data="M 4 0 L 8 4 L 4 8 Z">
              <Path.Fill>
                <SolidColorBrush Color="{DynamicResource GlyphColor}" />
              </Path.Fill>
            </Path>
            <Path x:Name="Expanded" Margin="1,1,1,1" HorizontalAlignment="Left" VerticalAlignment="Center" Data="M 0 4 L 8 4 L 4 8 Z" Visibility="Hidden">
              <Path.Fill>
                <SolidColorBrush Color="{DynamicResource GlyphColor}" />
              </Path.Fill>
            </Path>
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="CheckStates">
                <VisualState x:Name="Checked">
                  <Storyboard>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="Collapsed" Storyboard.TargetProperty="(UIElement.Visibility)">
                      <DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Hidden}" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="Expanded" Storyboard.TargetProperty="(UIElement.Visibility)">
                      <DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Visible}" />
                    </ObjectAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="Unchecked" />
                <VisualState x:Name="Indeterminate" />
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="StartPageTreeViewItem" TargetType="TreeViewItem">
    <Setter Property="IsExpanded" Value="True" />
    <Setter Property="Background" Value="Transparent" />
    <Setter Property="HorizontalContentAlignment" Value="{Binding Path=HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
    <Setter Property="VerticalContentAlignment" Value="{Binding Path=VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
    <Setter Property="Padding" Value="1,0,0,0" />
    <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
    <Setter Property="FocusVisualStyle" Value="{StaticResource TreeViewItemFocusVisual}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type TreeViewItem}">
          <Grid>
            <Grid.ColumnDefinitions>
              <ColumnDefinition Width="Auto" MinWidth="19" />
              <ColumnDefinition Width="Auto" />
              <ColumnDefinition Width="*" />
            </Grid.ColumnDefinitions>
            <Grid.RowDefinitions>
              <RowDefinition Height="Auto" />
              <RowDefinition />
            </Grid.RowDefinitions>
            <ToggleButton x:Name="Expander" ClickMode="Press" IsChecked="{Binding IsExpanded, RelativeSource={RelativeSource TemplatedParent}}" Style="{StaticResource ExpandCollapseToggleStyle}" />
            <Border x:Name="Bd" Grid.Column="1" Padding="{TemplateBinding Padding}" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
              <ContentPresenter x:Name="PART_Header" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" ContentSource="Header" />
            </Border>
            <ItemsPresenter x:Name="ItemsHost" Grid.Row="1" Grid.Column="1" Grid.ColumnSpan="2" Visibility="Collapsed" />
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="SelectionStates">
                <VisualState x:Name="Selected">
                  <Storyboard>
                    <ColorAnimationUsingKeyFrames Storyboard.TargetName="Bd" Storyboard.TargetProperty="(Panel.Background).                     (SolidColorBrush.Color)">
                      <EasingColorKeyFrame KeyTime="0" Value="{StaticResource SelectedBackgroundColor}" />
                    </ColorAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="Unselected" />
                <VisualState x:Name="SelectedInactive">
                  <Storyboard>
                    <ColorAnimationUsingKeyFrames Storyboard.TargetName="Bd" Storyboard.TargetProperty="(Panel.Background).                     (SolidColorBrush.Color)">
                      <EasingColorKeyFrame KeyTime="0" Value="{StaticResource SelectedUnfocusedColor}" />
                    </ColorAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="ExpansionStates">
                <VisualState x:Name="Expanded">
                  <Storyboard>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="ItemsHost" Storyboard.TargetProperty="(UIElement.Visibility)">
                      <DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Visible}" />
                    </ObjectAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="Collapsed" />
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="HasItems" Value="false">
              <Setter TargetName="Expander" Property="Visibility" Value="Hidden" />
            </Trigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="HasHeader" Value="false" />
                <Condition Property="Width" Value="Auto" />
              </MultiTrigger.Conditions>
              <Setter TargetName="PART_Header" Property="MinWidth" Value="75" />
            </MultiTrigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="HasHeader" Value="false" />
                <Condition Property="Height" Value="Auto" />
              </MultiTrigger.Conditions>
              <Setter TargetName="PART_Header" Property="MinHeight" Value="19" />
            </MultiTrigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="{x:Type dynui:ImageCheckBox}" TargetType="{x:Type dynui:ImageCheckBox}">
    <Setter Property="SnapsToDevicePixels" Value="true" />
    <Setter Property="OverridesDefaultStyle" Value="true" />
    <Setter Property="Cursor" Value="Hand" />
    <Setter Property="FocusVisualStyle" Value="{DynamicResource CheckBoxFocusVisual}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type dynui:ImageCheckBox}">
          <Grid>
            <Canvas>
              <Canvas.Clip>
                <RectangleGeometry>
                  <RectangleGeometry.Rect>
                    <MultiBinding Converter="{StaticResource ViewButtonClipRectConverter}">
                      <Binding Path="Width" RelativeSource="{RelativeSource TemplatedParent}" />
                      <Binding Path="Height" RelativeSource="{RelativeSource TemplatedParent}" />
                    </MultiBinding>
                  </RectangleGeometry.Rect>
                </RectangleGeometry>
              </Canvas.Clip>
              <Image Name="buttonStateImage">
                <Image.Width>
                  <Binding Path="Width" RelativeSource="{RelativeSource TemplatedParent}" />
                </Image.Width>
                <Image.Source>
                  <Binding Path="StateImage" RelativeSource="{RelativeSource TemplatedParent}" />
                </Image.Source>
                <Image.RenderTransform>
                  <TranslateTransform />
                </Image.RenderTransform>
              </Image>
              <Image Name="buttonCheckImage">
                <Image.Width>
                  <Binding Path="Width" RelativeSource="{RelativeSource TemplatedParent}" />
                </Image.Width>
                <Image.Source>
                  <Binding Path="CheckImage" RelativeSource="{RelativeSource TemplatedParent}" />
                </Image.Source>
                <Image.RenderTransform>
                  <TranslateTransform />
                </Image.RenderTransform>
              </Image>
            </Canvas>
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="CommonStates">
                <VisualState x:Name="Normal" />
                <VisualState x:Name="MouseOver">
                  <Storyboard>
                    <DoubleAnimation x:Name="hoverOverAnimation" Storyboard.TargetName="buttonStateImage" Storyboard.TargetProperty="(UIElement.RenderTransform).(TranslateTransform.Y)" Duration="0" />
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="Pressed">
                  <Storyboard>
                    <DoubleAnimation x:Name="pressedAnimation" Storyboard.TargetName="buttonStateImage" Storyboard.TargetProperty="(UIElement.RenderTransform).(TranslateTransform.Y)" Duration="0" />
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="Disabled" />
              </VisualStateGroup>
              <VisualStateGroup x:Name="CheckStates">
                <VisualState x:Name="Checked">
                  <Storyboard>
                    <DoubleAnimation x:Name="checkedAnimation" Storyboard.TargetName="buttonCheckImage" Storyboard.TargetProperty="(UIElement.RenderTransform).(TranslateTransform.Y)" Duration="0" />
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="Unchecked" />
                <VisualState x:Name="Indeterminate" />
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="TreeViewItemPath" TargetType="Path">
    <Setter Property="Stroke">
      <Setter.Value>
        <SolidColorBrush Color="{DynamicResource GlyphColor}" />
      </Setter.Value>
    </Setter>
    <Style.Triggers>
      <DataTrigger Binding="{Binding Path=IsMouseOver, RelativeSource={RelativeSource AncestorType={x:Type Grid}}}" Value="True">
        <Setter Property="Stroke" Value="#FF1BBBFA" />
      </DataTrigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="{x:Type dynui:ImageButton}" TargetType="{x:Type dynui:ImageButton}">
    <Setter Property="SnapsToDevicePixels" Value="true" />
    <Setter Property="OverridesDefaultStyle" Value="true" />
    <Setter Property="Cursor" Value="Hand" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type dynui:ImageButton}">
          <Grid>
            <Canvas>
              <Canvas.Clip>
                <RectangleGeometry>
                  <RectangleGeometry.Rect>
                    <MultiBinding Converter="{StaticResource ViewButtonClipRectConverter}">
                      <Binding Path="Width" RelativeSource="{RelativeSource TemplatedParent}" />
                      <Binding Path="Height" RelativeSource="{RelativeSource TemplatedParent}" />
                    </MultiBinding>
                  </RectangleGeometry.Rect>
                </RectangleGeometry>
              </Canvas.Clip>
              <Image Name="buttonStateImage">
                <Image.Width>
                  <Binding Path="Width" RelativeSource="{RelativeSource TemplatedParent}" />
                </Image.Width>
                <Image.Source>
                  <Binding Path="StateImage" RelativeSource="{RelativeSource TemplatedParent}" />
                </Image.Source>
                <Image.RenderTransform>
                  <TranslateTransform />
                </Image.RenderTransform>
              </Image>
            </Canvas>
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="CommonStates">
                <VisualState x:Name="Normal" />
                <VisualState x:Name="MouseOver">
                  <Storyboard>
                    <DoubleAnimation x:Name="hoverOverAnimation" Storyboard.TargetName="buttonStateImage" Storyboard.TargetProperty="(UIElement.RenderTransform).(TranslateTransform.Y)" Duration="0" />
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="Pressed">
                  <Storyboard>
                    <DoubleAnimation x:Name="pressedAnimation" Storyboard.TargetName="buttonStateImage" Storyboard.TargetProperty="(UIElement.RenderTransform).(TranslateTransform.Y)" Duration="0" />
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="Disabled">
                  <Storyboard>
                    <DoubleAnimation x:Name="disabledAnimation" Storyboard.TargetName="buttonStateImage" Storyboard.TargetProperty="(UIElement.RenderTransform).(TranslateTransform.Y)" Duration="0" />
                  </Storyboard>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style TargetType="{x:Type dynui:ImageRepeatButton}">
    <Setter Property="SnapsToDevicePixels" Value="true" />
    <Setter Property="OverridesDefaultStyle" Value="true" />
    <Setter Property="Cursor" Value="Hand" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type dynui:ImageRepeatButton}">
          <Grid>
            <Canvas>
              <Canvas.Clip>
                <RectangleGeometry>
                  <RectangleGeometry.Rect>
                    <MultiBinding Converter="{StaticResource ViewButtonClipRectConverter}">
                      <Binding Path="Width" RelativeSource="{RelativeSource TemplatedParent}" />
                      <Binding Path="Height" RelativeSource="{RelativeSource TemplatedParent}" />
                    </MultiBinding>
                  </RectangleGeometry.Rect>
                </RectangleGeometry>
              </Canvas.Clip>
              <Image Name="buttonStateImage">
                <Image.Width>
                  <Binding Path="Width" RelativeSource="{RelativeSource TemplatedParent}" />
                </Image.Width>
                <Image.Source>
                  <Binding Path="StateImage" RelativeSource="{RelativeSource TemplatedParent}" />
                </Image.Source>
                <Image.RenderTransform>
                  <TranslateTransform />
                </Image.RenderTransform>
              </Image>
            </Canvas>
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="CommonStates">
                <VisualState x:Name="Normal" />
                <VisualState x:Name="MouseOver">
                  <Storyboard>
                    <DoubleAnimation x:Name="hoverOverAnimation" Storyboard.TargetName="buttonStateImage" Storyboard.TargetProperty="(UIElement.RenderTransform).(TranslateTransform.Y)" Duration="0" />
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="Pressed">
                  <Storyboard>
                    <DoubleAnimation x:Name="pressedAnimation" Storyboard.TargetName="buttonStateImage" Storyboard.TargetProperty="(UIElement.RenderTransform).(TranslateTransform.Y)" Duration="0" />
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="Disabled">
                  <Storyboard>
                    <DoubleAnimation x:Name="disabledAnimation" Storyboard.TargetName="buttonStateImage" Storyboard.TargetProperty="(UIElement.RenderTransform).(TranslateTransform.Y)" Duration="0" />
                  </Storyboard>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="FocusStates">
                <VisualState x:Name="Focused" />
                <VisualState x:Name="Unfocused" />
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="LibraryPopupContentStyle" TargetType="ContentControl">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="ContentControl">
          <Grid>
            <Border Margin="0,11,0,0" Background="{StaticResource FilterPopupBackgroundColor}" BorderBrush="{StaticResource FilterPopupBorderColor}" BorderThickness="1" CornerRadius="5">
              <ContentPresenter />
            </Border>
            <Path x:Name="arrow" Data="M 5 12 L 15 0 L 25 12" Fill="{StaticResource FilterPopupBackgroundColor}" Stroke="{StaticResource FilterPopupBorderColor}" />
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="LibraryIconsStyle" TargetType="{x:Type fa:ImageAwesome}">
    <Setter Property="Foreground" Value="{Binding IsAnySearchResult, Converter={StaticResource FilterIconForegroundConverter}}" />
    <Style.Triggers>
      <Trigger Property="IsMouseOver" Value="True">
        <Setter Property="Foreground" Value="White" />
        <Setter Property="Cursor" Value="Hand" />
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="LayoutButtonStyle" TargetType="{x:Type Border}">
    <Setter Property="Background" Value="#01000000" />
    <Style.Triggers>
      <Trigger Property="IsMouseOver" Value="True">
        <Setter Property="Background" Value="{StaticResource FilterPopupBorderColor}" />
        <Setter Property="Cursor" Value="Hand" />
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="FilterTextBlockStyle" TargetType="{x:Type TextBlock}">
    <Setter Property="Foreground" Value="{StaticResource NodeNameForeground}" />
    <Style.Triggers>
      <Trigger Property="IsMouseOver" Value="True">
        <Setter Property="TextBlock.TextDecorations" Value="Underline" />
        <Setter Property="Cursor" Value="Hand" />
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style TargetType="{x:Type dynui:UseLevelSpinner}">
    <Style.Resources>
      <Style x:Key="IncreaseButton" BasedOn="{x:Null}" TargetType="{x:Type RepeatButton}">
        <Setter Property="MinWidth" Value="12" />
        <Setter Property="Template">
          <Setter.Value>
            <ControlTemplate TargetType="{x:Type RepeatButton}">
              <Grid>
                <Border Name="Border" Margin="0" Padding="0" Background="{TemplateBinding Background}" BorderThickness="0">
                  <Path Margin="1,1,0,0" HorizontalAlignment="Center" VerticalAlignment="Center" Data="M-2.5,1 L0,-2 L2.5,1" Stretch="None" Stroke="#6AC0E7" />
                </Border>
              </Grid>
              <ControlTemplate.Triggers>
                <Trigger Property="IsMouseOver" Value="True">
                  <Setter TargetName="Border" Property="Background" Value="Gray" />
                </Trigger>
              </ControlTemplate.Triggers>
            </ControlTemplate>
          </Setter.Value>
        </Setter>
      </Style>
      <Style x:Key="DecreaseButton" BasedOn="{x:Null}" TargetType="{x:Type RepeatButton}">
        <Setter Property="MinWidth" Value="12" />
        <Setter Property="Template">
          <Setter.Value>
            <ControlTemplate TargetType="{x:Type RepeatButton}">
              <Grid>
                <Border Name="Border" Margin="0" Padding="0" Background="{TemplateBinding Background}">
                  <Path Margin="1,0,0,1" HorizontalAlignment="Center" VerticalAlignment="Center" Data="M-2.5,-1 L0,2 L2.5,-1" Stretch="None" Stroke="#6AC0E7" />
                </Border>
              </Grid>
              <ControlTemplate.Triggers>
                <Trigger Property="IsMouseOver" Value="True">
                  <Setter TargetName="Border" Property="Background" Value="Gray" />
                </Trigger>
              </ControlTemplate.Triggers>
            </ControlTemplate>
          </Setter.Value>
        </Setter>
      </Style>
    </Style.Resources>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type dynui:UseLevelSpinner}">
          <Grid x:Name="TemplateGrid" Width="{TemplateBinding Width}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
            <Grid.ColumnDefinitions>
              <ColumnDefinition Width="*" />
              <ColumnDefinition Width="1" />
              <ColumnDefinition Width="12" />
            </Grid.ColumnDefinitions>
            <Grid.RowDefinitions>
              <RowDefinition Height="*" />
              <RowDefinition Height="*" />
            </Grid.RowDefinitions>
            <TextBox Name="textbox" Grid.RowSpan="2" Grid.Column="0" Margin="0" Padding="0" VerticalContentAlignment="Center" Background="{TemplateBinding Background}" BorderThickness="0" CaretBrush="Transparent" FontFamily="{StaticResource ArtifaktElementRegular}" FontSize="10px" FontWeight="Medium" Foreground="White" IsHitTestVisible="False" Opacity="1.0" Style="{StaticResource SZoomFadeTextBox}" />
            <Rectangle Grid.Row="0" Grid.RowSpan="2" Grid.Column="1" Fill="#666666" />
            <RepeatButton Grid.Row="0" Grid.Column="2" Margin="0" Padding="0" Background="{TemplateBinding Background}" Command="{x:Static dynui:UseLevelSpinner.IncreaseCommand}" Focusable="False" Style="{StaticResource IncreaseButton}" />
            <RepeatButton Grid.Row="1" Grid.Column="2" Margin="0" Padding="0" Background="{TemplateBinding Background}" Command="{x:Static dynui:UseLevelSpinner.DecreaseCommand}" Focusable="False" Style="{StaticResource DecreaseButton}" />
            <Border Grid.Row="0" Grid.RowSpan="2" Grid.Column="0" Grid.ColumnSpan="3" BorderBrush="{TemplateBinding Background}" BorderThickness="1" />
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="PreferenceTitleLabelStyle" TargetType="{x:Type Label}">
    <Setter Property="Foreground" Value="{StaticResource PreferencesWindowFontColor}" />
    <Setter Property="FontSize" Value="14" />
  </Style>
  <Style x:Key="CloseButtonDarkStyle" BasedOn="{StaticResource BaseButtonStyle}" TargetType="Button">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="Button">
          <Grid>
            <Image Name="closeIcon" Width="16" Height="16" Source="pack://application:,,,/DynamoCoreWpf;component/UI/Images/TitleBarButtons/close-darktheme-default-16px.png" />
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
              <Setter TargetName="closeIcon" Property="Source" Value="pack://application:,,,/DynamoCoreWpf;component/UI/Images/TitleBarButtons/close-darktheme-hover-16px.png" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="CloseButtonStyle" BasedOn="{StaticResource BaseButtonStyle}" TargetType="Button">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="Button">
          <Grid>
            <Image Name="closeIcon" Width="16" Height="16" Source="pack://application:,,,/DynamoCoreWpf;component/UI/Images/TitleBarButtons/close-lighttheme-default-16px.png" />
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
              <Setter TargetName="closeIcon" Property="Source" Value="pack://application:,,,/DynamoCoreWpf;component/UI/Images/TitleBarButtons/close-lighttheme-hover-16px.png" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
              <Setter TargetName="closeIcon" Property="Source" Value="pack://application:,,,/DynamoCoreWpf;component/UI/Images/TitleBarButtons/close-darktheme-disabled-16px.png" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="MinimizeButtonDarkStyle" BasedOn="{StaticResource BaseButtonStyle}" TargetType="Button">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="Button">
          <Grid>
            <Image Name="minimizeIcon" Width="16" Height="16" Source="pack://application:,,,/DynamoCoreWpf;component/UI/Images/TitleBarButtons/min-darktheme-default-16px.png" />
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
              <Setter TargetName="minimizeIcon" Property="Source" Value="pack://application:,,,/DynamoCoreWpf;component/UI/Images/TitleBarButtons/min-darktheme-hover-16px.png" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="MinimizeButtonStyle" BasedOn="{StaticResource BaseButtonStyle}" TargetType="Button">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="Button">
          <Grid>
            <Image Name="minimizeIcon" Width="16" Height="16" Source="pack://application:,,,/DynamoCoreWpf;component/UI/Images/TitleBarButtons/min-lighttheme-default-16px.png" />
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
              <Setter TargetName="minimizeIcon" Property="Source" Value="pack://application:,,,/DynamoCoreWpf;component/UI/Images/TitleBarButtons/min-lighttheme-hover-16px.png" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="MaximizeButtonDarkStyle" BasedOn="{StaticResource BaseButtonStyle}" TargetType="Button">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="Button">
          <Grid>
            <Image Name="maximizeIcon" Width="16" Height="16" Source="pack://application:,,,/DynamoCoreWpf;component/UI/Images/TitleBarButtons/max-darktheme-default-16px.png" />
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
              <Setter TargetName="maximizeIcon" Property="Source" Value="pack://application:,,,/DynamoCoreWpf;component/UI/Images/TitleBarButtons/max-darktheme-hover-16px.png" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="MaximizeButtonStyle" BasedOn="{StaticResource BaseButtonStyle}" TargetType="Button">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="Button">
          <Grid>
            <Image Name="maximizeIcon" Width="16" Height="16" Source="pack://application:,,,/DynamoCoreWpf;component/UI/Images/TitleBarButtons/max-lighttheme-default-16px.png" />
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
              <Setter TargetName="maximizeIcon" Property="Source" Value="pack://application:,,,/DynamoCoreWpf;component/UI/Images/TitleBarButtons/max-lighttheme-hover-16px.png" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="RestoreButtonDarkStyle" BasedOn="{StaticResource BaseButtonStyle}" TargetType="Button">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="Button">
          <Grid>
            <Image Name="restoreIcon" Width="16" Height="16" Source="pack://application:,,,/DynamoCoreWpf;component/UI/Images/TitleBarButtons/restore-darktheme-default-16px.png" />
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
              <Setter TargetName="restoreIcon" Property="Source" Value="pack://application:,,,/DynamoCoreWpf;component/UI/Images/TitleBarButtons/restore-darktheme-hover-16px.png" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="RestoreButtonStyle" BasedOn="{StaticResource BaseButtonStyle}" TargetType="Button">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="Button">
          <Grid>
            <Image Name="restoreIcon" Width="16" Height="16" Source="pack://application:,,,/DynamoCoreWpf;component/UI/Images/TitleBarButtons/restore-lighttheme-default-16px.png" />
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
              <Setter TargetName="restoreIcon" Property="Source" Value="pack://application:,,,/DynamoCoreWpf;component/UI/Images/TitleBarButtons/restore-lighttheme-hover-16px.png" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="DockButtonDarkStyle" BasedOn="{StaticResource BaseButtonStyle}" TargetType="Button">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="Button">
          <Grid>
            <Image Name="dockIcon" Width="16" Height="16" Source="pack://application:,,,/DynamoCoreWpf;component/UI/Images/TitleBarButtons/dock-darktheme-default.png" />
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
              <Setter TargetName="dockIcon" Property="Source" Value="pack://application:,,,/DynamoCoreWpf;component/UI/Images/TitleBarButtons/dock-darktheme-hover.png" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="MenuButtonStyle" TargetType="Button">
    <Setter Property="Cursor" Value="Hand" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="Button">
          <Grid>
            <Border Width="16" Height="16" Background="Transparent" BorderThickness="0">
              <Path Name="menuIcon" Width="16" Height="16" HorizontalAlignment="Center" VerticalAlignment="Center" Data="M7.5 3C8.32843 3 9 2.32843 9 1.5C9 0.671573 8.32843 0 7.5 0C6.67157 0 6 0.671573 6 1.5C6 2.32843 6.67157 3 7.5 3ZM7.5 9C8.32843 9 9 8.32843 9 7.5C9 6.67157 8.32843 6 7.5 6C6.67157 6 6 6.67157 6 7.5C6 8.32843 6.67157 9 7.5 9ZM9 13.5C9 14.3284 8.32843 15 7.5 15C6.67157 15 6 14.3284 6 13.5C6 12.6716 6.67157 12 7.5 12C8.32843 12 9 12.6716 9 13.5Z" Fill="{DynamicResource MidGreyBrush}" />
            </Border>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
              <Setter TargetName="menuIcon" Property="Fill" Value="{DynamicResource BorderPressedColorBrush}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
              <Setter Property="Opacity" Value=".5" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="CtaButtonStyle" TargetType="Button">
    <Setter Property="HorizontalAlignment" Value="Right" />
    <Setter Property="VerticalAlignment" Value="Center" />
    <Setter Property="Margin" Value="15,0,0,0" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="Button">
          <Grid>
            <Border x:Name="mouseOverBorder" Margin="2" BorderBrush="#ECECEC" BorderThickness="2" CornerRadius="2" Visibility="Hidden" />
            <Border x:Name="mousePressedBorder" Margin="0" BorderBrush="{StaticResource PrimaryCharcoal200Brush}" BorderThickness="4" CornerRadius="4" Visibility="Hidden" />
            <Border x:Name="border" Height="36px" Margin="4" Padding="8,0,8,0" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="1" CornerRadius="2">
              <TextBlock x:Name="textBlock" Margin="0,1,0,0" HorizontalAlignment="Center" VerticalAlignment="Center" FontFamily="{StaticResource ArtifaktElementRegular}" FontSize="14px" Foreground="{TemplateBinding Foreground}" Text="{TemplateBinding Content}" />
            </Border>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
              <Setter TargetName="border" Property="Opacity" Value="0.9" />
              <Setter TargetName="mouseOverBorder" Property="Visibility" Value="Visible" />
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
              <Setter TargetName="border" Property="Opacity" Value="0.9" />
              <Setter TargetName="mousePressedBorder" Property="Visibility" Value="Visible" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
              <Setter TargetName="border" Property="Background" Value="#707070" />
              <Setter TargetName="border" Property="BorderBrush" Value="#707070" />
              <Setter TargetName="textBlock" Property="Opacity" Value="0.7" />
              <Setter Property="Cursor" Value="No" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="SolidButtonStyle" TargetType="Button">
    <Setter Property="BorderBrush" Value="{StaticResource PreferencesWindowButtonColor}" />
    <Setter Property="Foreground" Value="White" />
    <Setter Property="Background" Value="{StaticResource PreferencesWindowButtonColor}" />
    <Setter Property="VerticalAlignment" Value="Center" />
    <Setter Property="Margin" Value="15,0,0,0" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="Button">
          <Grid>
            <Border x:Name="mouseOverBorder" Margin="0,4,4,4" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="2" CornerRadius="2" Visibility="Hidden" />
            <Border x:Name="mousePressedBorder" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="4" CornerRadius="4" Visibility="Hidden" />
            <Border x:Name="border" Height="30px" Margin="0,4,4,4" Padding="8,0,8,0" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="1" CornerRadius="2">
              <TextBlock x:Name="textBlock" HorizontalAlignment="Center" VerticalAlignment="Center" FontFamily="{StaticResource ArtifaktElementRegular}" FontSize="14px" Foreground="{TemplateBinding Foreground}" Text="{TemplateBinding Content}" />
            </Border>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
              <Setter TargetName="border" Property="Opacity" Value="0.9" />
              <Setter TargetName="mouseOverBorder" Property="Visibility" Value="Visible" />
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
              <Setter TargetName="border" Property="Opacity" Value="0.9" />
              <Setter TargetName="mousePressedBorder" Property="Visibility" Value="Visible" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="SolidButtonStyleSmaller" TargetType="Button">
    <Setter Property="BorderBrush" Value="{StaticResource PreferencesWindowButtonColor}" />
    <Setter Property="Foreground" Value="White" />
    <Setter Property="Background" Value="{StaticResource PreferencesWindowButtonColor}" />
    <Setter Property="VerticalAlignment" Value="Center" />
    <Setter Property="HorizontalAlignment" Value="Center" />
    <Setter Property="Margin" Value="15,0,0,0" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="Button">
          <Grid>
            <Border x:Name="mouseOverBorder" Margin="4" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="2" CornerRadius="2" Visibility="Hidden" />
            <Border x:Name="mousePressedBorder" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="4" CornerRadius="4" Visibility="Hidden" />
            <Border x:Name="border" Height="24px" Margin="4" Padding="8,0,8,0" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="1" CornerRadius="2">
              <TextBlock x:Name="textBlock" HorizontalAlignment="Center" VerticalAlignment="Center" FontFamily="{StaticResource ArtifaktElementRegular}" FontSize="12px" Foreground="{TemplateBinding Foreground}" Text="{TemplateBinding Content}" />
            </Border>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
              <Setter TargetName="border" Property="Opacity" Value="0.9" />
              <Setter TargetName="mouseOverBorder" Property="Visibility" Value="Visible" />
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
              <Setter TargetName="border" Property="Opacity" Value="0.9" />
              <Setter TargetName="mousePressedBorder" Property="Visibility" Value="Visible" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
              <Setter TargetName="border" Property="Background" Value="#0696D7" />
              <Setter TargetName="border" Property="Opacity" Value="0.6" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="PopupButtonStyle" TargetType="Button">
    <Setter Property="Background" Value="Transparent" />
    <Setter Property="Foreground" Value="#4D4D4D" />
    <Setter Property="BorderThickness" Value="0" />
    <Setter Property="BorderBrush" Value="Transparent" />
    <Setter Property="Margin" Value="8" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="Button">
          <Grid>
            <Border Name="border" Padding="4" Background="Transparent" BorderBrush="Transparent" BorderThickness="0" />
            <ContentPresenter Name="contentpresenter" HorizontalAlignment="Center" VerticalAlignment="Center" TextBlock.FontSize="13px" TextBlock.Foreground="#4D4D4D" />
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="IsEnabled" Value="False">
              <Setter TargetName="border" Property="Background" Value="Transparent" />
              <Setter TargetName="contentpresenter" Property="Opacity" Value="0.5" />
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
              <Setter TargetName="border" Property="Background" Value="#99E0FF" />
              <Setter TargetName="border" Property="Opacity" Value="0.3" />
              <Setter Property="Foreground" Value="{StaticResource PreferencesWindowButtonMouseOverFontColor}" />
            </Trigger>
            <Trigger Property="IsMouseOver" Value="True">
              <Setter TargetName="border" Property="Background" Value="#99E0FF" />
              <Setter TargetName="border" Property="Opacity" Value="0.5" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="NormalButtonStyle" TargetType="Button">
    <Setter Property="Foreground" Value="{StaticResource PreferencesWindowFontColor}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="Button">
          <Border Name="border" Padding="4,2" Background="{StaticResource PreferencesWindowButtonColor}" BorderBrush="Transparent" BorderThickness="1" CornerRadius="3">
            <Grid>
              <ContentPresenter Name="contentShadow" HorizontalAlignment="Center" VerticalAlignment="Center" />
            </Grid>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="IsPressed" Value="True">
              <Setter TargetName="border" Property="Background" Value="{StaticResource PreferencesWindowButtonPressedColor}" />
              <Setter Property="FontSize" Value="11" />
            </Trigger>
            <Trigger Property="IsMouseOver" Value="True">
              <Setter TargetName="border" Property="Background" Value="{StaticResource PreferencesWindowButtonPressedColor}" />
              <Setter Property="Foreground" Value="{StaticResource PreferencesWindowButtonMouseOverFontColor}" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <ControlTemplate x:Key="ExpanderCaretToggleButton" TargetType="{x:Type ToggleButton}">
    <Border Name="Border" Grid.Row="0" Background="{StaticResource ExpanderCaretToggleButtonBackground}" BorderThickness="1" CornerRadius="1">
      <Grid>
        <Grid.ColumnDefinitions>
          <ColumnDefinition Width="*" />
          <ColumnDefinition Width="Auto" />
        </Grid.ColumnDefinitions>
        <Image x:Name="Caret" Grid.Column="0" Width="16" Height="16" Margin="5,10,0,10" HorizontalAlignment="Left" VerticalAlignment="Center" Source="pack://application:,,,/DynamoCoreWpf;component/UI/Images/Caret_Down.png" />
        <ContentPresenter x:Name="HeaderContent" Grid.Column="0" Width="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Expander}}, Path=ActualWidth}" Margin="0,0,0,0" VerticalAlignment="Center" RecognizesAccessKey="True" />
      </Grid>
    </Border>
    <ControlTemplate.Triggers>
      <Trigger Property="IsChecked" Value="true">
        <!--  Sets the icon on the expander to caret up (-)  -->
        <Setter TargetName="Border" Property="Background" Value="{StaticResource ExpanderCaretToggleButtonSelectedBackground}" />
        <Setter TargetName="Caret" Property="Source" Value="pack://application:,,,/DynamoCoreWpf;component/UI/Images/caret_up.png" />
      </Trigger>
      <Trigger Property="IsChecked" Value="false">
        <Setter TargetName="Border" Property="Background" Value="{StaticResource ExpanderCaretToggleButtonBackground}" />
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <ControlTemplate x:Key="ExpanderPlusToggleButton" TargetType="{x:Type ToggleButton}">
    <Border Name="Border" Grid.Row="0" Background="{StaticResource SecondaryGray}" BorderThickness="1" CornerRadius="1">
      <Grid>
        <Grid.ColumnDefinitions>
          <ColumnDefinition Width="*" />
          <ColumnDefinition Width="Auto" />
        </Grid.ColumnDefinitions>
        <!--  Draws a plus (+) sign on the expander  -->
        <Path x:Name="Sign" Grid.Column="1" Width="12" Height="12" Margin="0,10,15,10" HorizontalAlignment="Center" VerticalAlignment="Center" Data="M 0,6 H 12 M 6,0 V 12 Z" Stroke="{StaticResource PreferencesWindowFontColor}" StrokeThickness="2" />
        <ContentPresenter x:Name="HeaderContent" Grid.Column="0" Width="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Expander}}, Path=ActualWidth}" Margin="15,0,0,0" VerticalAlignment="Center" RecognizesAccessKey="True" />
      </Grid>
    </Border>
    <ControlTemplate.Triggers>
      <Trigger Property="IsChecked" Value="true">
        <!--  Sets the sign on the expander to a minus (-)  -->
        <Setter TargetName="Sign" Property="Data" Value="M 0,6 H 12 Z" />
      </Trigger>
      <Trigger Property="IsEnabled" Value="False">
        <Setter TargetName="Border" Property="Background" Value="{x:Null}" />
        <Setter TargetName="Border" Property="BorderBrush" Value="{x:Null}" />
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <Style x:Key="InstalledPackagesExpanderStyle" TargetType="Expander">
    <Setter Property="UseLayoutRounding" Value="True" />
    <Setter Property="SnapsToDevicePixels" Value="True" />
    <Setter Property="Template">
      <Setter.Value>
        <!--  Control template for expander  -->
        <ControlTemplate x:Name="exp" TargetType="Expander">
          <Grid>
            <Grid.RowDefinitions>
              <RowDefinition Height="Auto" />
              <RowDefinition Name="ContentRow" Height="0" />
            </Grid.RowDefinitions>
            <Border Name="Border" Grid.Row="0" Background="{x:Null}" BorderBrush="{x:Null}" BorderThickness="1" CornerRadius="0,0,0,0">
              <ToggleButton IsChecked="{Binding Path=IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" Template="{StaticResource ExpanderCaretToggleButton}">
                <ToggleButton.Content>
                  <ContentPresenter ContentSource="Header" OverridesDefaultStyle="True" RecognizesAccessKey="True" />
                </ToggleButton.Content>
              </ToggleButton>
            </Border>
            <Border x:Name="Content" Grid.Row="1" BorderThickness="1,0,1,1" CornerRadius="0,0,4,4">
              <!--  The Margin is necesary so that the Content is perfectly aligned with the Header  -->
              <ContentPresenter Margin="1,-3,1,0" />
            </Border>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="IsExpanded" Value="True">
              <Setter TargetName="ContentRow" Property="Height" Value="{Binding ElementName=Content, Path=Height}" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="ContextMenuNoLeftColumnStyle" TargetType="{x:Type ContextMenu}">
    <Setter Property="SnapsToDevicePixels" Value="True" />
    <Setter Property="OverridesDefaultStyle" Value="True" />
    <Setter Property="Grid.IsSharedSizeScope" Value="true" />
    <Setter Property="HasDropShadow" Value="True" />
    <Setter Property="Foreground" Value="{StaticResource PreferencesWindowFontColor}" />
    <Setter Property="Background" Value="{StaticResource PreferencesWindowItemDarkerBackgroundColor}" />
    <Setter Property="FontSize" Value="10" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ContextMenu}">
          <Border x:Name="Border" Background="{StaticResource PreferencesWindowItemDarkerBackgroundColor}" BorderThickness="1">
            <ItemsPresenter />
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="ItemsPanel">
      <Setter.Value>
        <ItemsPanelTemplate>
          <StackPanel Margin="-25,0,0,0" />
        </ItemsPanelTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="ContextMenuItemStyle" TargetType="{x:Type MenuItem}">
    <Setter Property="IsChecked" Value="{DynamicResource IsChecked}" />
    <Setter Property="Height" Value="Auto" />
    <Setter Property="MinWidth" Value="250" />
    <Setter Property="Width" Value="Auto" />
    <Setter Property="Padding" Value="20,0,0,0" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type MenuItem}">
          <DockPanel x:Name="dockPanel" HorizontalAlignment="Stretch" Background="Transparent" SnapsToDevicePixels="true">
            <Label x:Name="checkBox" Margin="0,0,-20,0" HorizontalAlignment="Left" VerticalAlignment="Center" HorizontalContentAlignment="Center" VerticalContentAlignment="Center" Content="✓" DockPanel.Dock="Left" FontSize="9px" Foreground="{StaticResource PreferencesWindowButtonColor}" Visibility="Collapsed" />
            <ContentPresenter x:Name="ContentPresenter" Margin="{TemplateBinding Padding}" VerticalAlignment="Center" ContentSource="Header" DockPanel.Dock="Left" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" TextBlock.Foreground="{StaticResource NodeContextMenuForeground}" />
            <Label x:Name="subMenuArrow" Margin="0,0,15,7" Padding="0" VerticalAlignment="Center" Content="&gt;" DockPanel.Dock="Right" FontFamily="{StaticResource ArtifaktElementRegular}" FontSize="13px" Foreground="{StaticResource Blue300Brush}">
              <Label.RenderTransform>
                <ScaleTransform ScaleX="1" ScaleY="1.5" />
              </Label.RenderTransform>
              <Label.Style>
                <Style TargetType="{x:Type Label}">
                  <Setter Property="Visibility" Value="Hidden" />
                  <Style.Triggers>
                    <DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType={x:Type MenuItem}}, Path=HasItems}" Value="True">
                      <Setter Property="Visibility" Value="Visible" />
                    </DataTrigger>
                  </Style.Triggers>
                </Style>
              </Label.Style>
            </Label>
            <Popup x:Name="PART_Popup" AllowsTransparency="true" Focusable="false" HorizontalOffset="0" IsOpen="{Binding IsSubmenuOpen, RelativeSource={RelativeSource TemplatedParent}}" Placement="Right" VerticalOffset="-2">
              <Border Background="{TemplateBinding Background}" BorderBrush="Transparent" BorderThickness="0">
                <ScrollViewer x:Name="SubMenuScrollViewer" CanContentScroll="true" Style="{DynamicResource {ComponentResourceKey ResourceId=MenuScrollViewer,                                                                                             TypeInTargetAssembly={x:Type FrameworkElement}}}">
                  <Grid RenderOptions.ClearTypeHint="Enabled">
                    <ItemsPresenter x:Name="ItemsPresenter" Grid.IsSharedSizeScope="true" KeyboardNavigation.DirectionalNavigation="Cycle" KeyboardNavigation.TabNavigation="Cycle" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                  </Grid>
                </ScrollViewer>
              </Border>
            </Popup>
          </DockPanel>
          <ControlTemplate.Triggers>
            <Trigger Property="IsEnabled" Value="False">
              <Setter TargetName="ContentPresenter" Property="TextBlock.Opacity" Value="0.5" />
            </Trigger>
            <Trigger Property="IsMouseOver" Value="True">
              <Setter TargetName="ContentPresenter" Property="TextBlock.Foreground" Value="White" />
              <Setter TargetName="dockPanel" Property="Background" Value="{StaticResource GenericMouseOverBackgroundColorBrush}" />
            </Trigger>
            <Trigger Property="IsMouseOver" Value="False">
              <Setter TargetName="dockPanel" Property="Background" Value="{StaticResource GenericBorderBackgroundColorBrush}" />
            </Trigger>
            <Trigger Property="IsChecked" Value="True">
              <Setter TargetName="checkBox" Property="Visibility" Value="Visible" />
              <Setter TargetName="ContentPresenter" Property="TextBlock.FontFamily" Value="{StaticResource ArtifaktElementBold}" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="ContextMenuItemFixedWidthStyle" TargetType="{x:Type MenuItem}">
    <Setter Property="IsChecked" Value="{DynamicResource IsChecked}" />
    <Setter Property="Height" Value="Auto" />
    <Setter Property="MinWidth" Value="250" />
    <Setter Property="Width" Value="Auto" />
    <Setter Property="Padding" Value="20,0,0,0" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type MenuItem}">
          <DockPanel x:Name="dockPanel" HorizontalAlignment="Stretch" Background="Transparent" SnapsToDevicePixels="true">
            <Label x:Name="checkBox" Margin="0,0,-20,0" HorizontalAlignment="Left" VerticalAlignment="Center" HorizontalContentAlignment="Center" VerticalContentAlignment="Center" Content="✓" DockPanel.Dock="Left" FontSize="9px" Foreground="White" Visibility="Collapsed" />
            <ContentPresenter x:Name="ContentPresenter" Margin="{TemplateBinding Padding}" VerticalAlignment="Center" ContentSource="Header" DockPanel.Dock="Left" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" TextBlock.Foreground="{StaticResource NodeContextMenuForeground}" />
            <Label x:Name="subMenuArrow" Margin="0,0,15,7" Padding="0" VerticalAlignment="Center" Content="&gt;" DockPanel.Dock="Right" FontFamily="{StaticResource ArtifaktElementRegular}" FontSize="13px" Foreground="{StaticResource Blue300Brush}">
              <Label.RenderTransform>
                <ScaleTransform ScaleX="1" ScaleY="1.5" />
              </Label.RenderTransform>
              <Label.Style>
                <Style TargetType="{x:Type Label}">
                  <Setter Property="Visibility" Value="Hidden" />
                  <Style.Triggers>
                    <DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType={x:Type MenuItem}}, Path=HasItems}" Value="True">
                      <Setter Property="Visibility" Value="Visible" />
                    </DataTrigger>
                  </Style.Triggers>
                </Style>
              </Label.Style>
            </Label>
            <Popup x:Name="PART_Popup" MaxWidth="182" AllowsTransparency="true" Focusable="false" HorizontalOffset="0" IsOpen="{Binding IsSubmenuOpen, RelativeSource={RelativeSource TemplatedParent}}" Placement="Right" VerticalOffset="-2">
              <Border Background="{TemplateBinding Background}" BorderThickness="0">
                <ScrollViewer x:Name="SubMenuScrollViewer" CanContentScroll="true" Style="{DynamicResource {ComponentResourceKey ResourceId=MenuScrollViewer,                                                                                             TypeInTargetAssembly={x:Type FrameworkElement}}}">
                  <Grid RenderOptions.ClearTypeHint="Enabled">
                    <ItemsPresenter x:Name="ItemsPresenter" Grid.IsSharedSizeScope="true" KeyboardNavigation.DirectionalNavigation="Cycle" KeyboardNavigation.TabNavigation="Cycle" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                  </Grid>
                </ScrollViewer>
              </Border>
            </Popup>
          </DockPanel>
          <ControlTemplate.Triggers>
            <Trigger Property="IsEnabled" Value="False">
              <Setter TargetName="ContentPresenter" Property="TextBlock.Opacity" Value="0.5" />
            </Trigger>
            <Trigger Property="IsMouseOver" Value="True">
              <Setter TargetName="ContentPresenter" Property="TextBlock.Foreground" Value="White" />
              <Setter TargetName="dockPanel" Property="Background" Value="{StaticResource NodeContextMenuBackgroundHighlight}" />
            </Trigger>
            <Trigger Property="IsMouseOver" Value="False">
              <Setter TargetName="dockPanel" Property="Background" Value="{StaticResource NodeContextMenuBackground}" />
            </Trigger>
            <Trigger Property="IsChecked" Value="True">
              <Setter TargetName="checkBox" Property="Visibility" Value="Visible" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="ContextMenuSeparatorStyle" TargetType="Separator">
    <Setter Property="OverridesDefaultStyle" Value="true" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Separator}">
          <Border Height="1" Margin="15,8,15,8" Background="{StaticResource NodeContextMenuSeparatorColor}" />
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="ContextMenuStyle" TargetType="{x:Type ContextMenu}">
    <Setter Property="Placement" Value="MousePoint" />
    <Setter Property="Foreground" Value="{StaticResource NodeContextMenuForeground}" />
    <Setter Property="FontSize" Value="13px" />
    <Setter Property="FontFamily" Value="{StaticResource ArtifaktElementRegular}" />
    <Setter Property="FontWeight" Value="Medium" />
    <Setter Property="SnapsToDevicePixels" Value="True" />
    <Setter Property="OverridesDefaultStyle" Value="True" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ContextMenu}">
          <Border x:Name="Border" Background="{TemplateBinding Background}" BorderThickness="0px">
            <StackPanel Margin="0,10" ClipToBounds="True" IsItemsHost="True" Orientation="Vertical" />
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Style.Resources>
      <!--  Separator  -->
      <Style x:Key="{x:Static MenuItem.SeparatorStyleKey}" BasedOn="{StaticResource ContextMenuSeparatorStyle}" TargetType="Separator" />
      <!--  MenuItem Style  -->
      <Style x:Key="{x:Type MenuItem}" BasedOn="{StaticResource ContextMenuItemStyle}" TargetType="MenuItem" />
    </Style.Resources>
  </Style>
  <Style x:Key="MenuExpanderStyle" TargetType="Expander">
    <Setter Property="Background" Value="{StaticResource SecondaryGray}" />
    <Setter Property="Foreground" Value="{StaticResource PreferencesWindowFontColor}" />
    <Setter Property="HeaderTemplate" Value="{StaticResource expanderHeader}" />
    <Setter Property="Template">
      <Setter.Value>
        <!--  Control template for expander  -->
        <ControlTemplate x:Name="exp" TargetType="Expander">
          <Grid>
            <Grid.RowDefinitions>
              <RowDefinition Height="Auto" />
              <RowDefinition Name="ContentRow" Height="0" />
            </Grid.RowDefinitions>
            <Border Name="Border" Grid.Row="0" Background="{x:Null}" BorderBrush="{x:Null}" BorderThickness="1" CornerRadius="0,0,0,0">
              <ToggleButton Background="#FF4682B4" IsChecked="{Binding Path=IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" OverridesDefaultStyle="True" Template="{StaticResource ExpanderPlusToggleButton}">
                <ToggleButton.Content>
                  <ContentPresenter ContentSource="Header" RecognizesAccessKey="True" TextBlock.FontFamily="{StaticResource ArtifaktElementRegular}" />
                </ToggleButton.Content>
              </ToggleButton>
            </Border>
            <Border x:Name="Content" Grid.Row="1" BorderThickness="1,0,1,1" CornerRadius="0,0,4,4">
              <ContentPresenter Margin="12,0,0,12" />
            </Border>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="IsExpanded" Value="True">
              <Setter TargetName="ContentRow" Property="Height" Value="{Binding ElementName=Content, Path=Height}" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="WorkspaceReferencesExpanderStyle" TargetType="Expander">
    <Setter Property="Background" Value="{StaticResource SecondaryGray}" />
    <Setter Property="Foreground" Value="{StaticResource PreferencesWindowFontColor}" />
    <Setter Property="Template">
      <Setter.Value>
        <!--  Control template for expander  -->
        <ControlTemplate x:Name="exp" TargetType="Expander">
          <Grid>
            <Grid.RowDefinitions>
              <RowDefinition Height="Auto" />
              <RowDefinition Name="ContentRow" Height="0" />
            </Grid.RowDefinitions>
            <Border Name="Border" Grid.Row="0" Background="{x:Null}" BorderBrush="{x:Null}" BorderThickness="1" CornerRadius="0,0,0,0">
              <ToggleButton Background="#FF4682B4" IsChecked="{Binding Path=IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" OverridesDefaultStyle="True" Template="{StaticResource ExpanderPlusToggleButton}">
                <ToggleButton.Content>
                  <ContentPresenter ContentSource="Header" RecognizesAccessKey="True" />
                </ToggleButton.Content>
              </ToggleButton>
            </Border>
            <Border x:Name="Content" Grid.Row="1" BorderThickness="1,0,1,1" CornerRadius="0,0,4,4">
              <ContentPresenter Margin="2,0,0,15" />
            </Border>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="IsExpanded" Value="True">
              <Setter TargetName="ContentRow" Property="Height" Value="{Binding ElementName=Content, Path=Height}" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="LeftTab" TargetType="{x:Type TabItem}">
    <Setter Property="HorizontalAlignment" Value="Left" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type TabItem}">
          <Border Name="TabBorder" Margin="2" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Background="Transparent" BorderBrush="Transparent" BorderThickness="2" CornerRadius="6">
            <StackPanel HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Orientation="Horizontal">
              <Grid Name="TabPanel" Width="165" Height="30">
                <Grid.ColumnDefinitions>
                  <ColumnDefinition Width="5" />
                  <ColumnDefinition Width="*" />
                </Grid.ColumnDefinitions>
                <Label x:Name="SelectedItem" Grid.Column="0" />
                <ContentPresenter x:Name="ContentSection" Grid.Column="1" Margin="5,0,0,0" HorizontalAlignment="Stretch" VerticalAlignment="Center" ContentSource="Header" />
              </Grid>
            </StackPanel>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="IsSelected" Value="True">
              <Setter TargetName="SelectedItem" Property="Background" Value="{StaticResource PreferencesWindowTabSelectedColor}" />
              <Setter Property="Foreground" Value="{StaticResource PreferencesWindowFontColor}" />
              <Setter Property="FontWeight" Value="Bold" />
            </Trigger>
            <Trigger Property="IsSelected" Value="False">
              <Setter TargetName="SelectedItem" Property="Background" Value="{StaticResource PreferencesWindowBackgroundColor}" />
              <Setter Property="Foreground" Value="{StaticResource TabItemUnSelected}" />
              <Setter Property="FontWeight" Value="Regular" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="PackageManagerTab" TargetType="{x:Type TabItem}">
    <Setter Property="HorizontalAlignment" Value="Left" />
    <Setter Property="FontSize" Value="14" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type TabItem}">
          <Border Name="TabBorder" Margin="0" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Background="Transparent" BorderBrush="Transparent" BorderThickness="0" CornerRadius="6">
            <StackPanel Margin="0,5,0,0" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Orientation="Horizontal">
              <Grid Name="TabPanel" Width="165" Height="30" Margin="5">
                <Grid.ColumnDefinitions>
                  <ColumnDefinition Width="5" />
                  <ColumnDefinition Width="*" />
                </Grid.ColumnDefinitions>
                <Label x:Name="SelectedItem" Grid.Column="0" />
                <ContentPresenter x:Name="ContentSection" Grid.Column="1" Margin="5,0,0,0" HorizontalAlignment="Stretch" VerticalAlignment="Center" ContentSource="Header" />
              </Grid>
            </StackPanel>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="IsSelected" Value="True">
              <Setter TargetName="SelectedItem" Property="Background" Value="{StaticResource PreferencesWindowTabSelectedColor}" />
              <Setter Property="Foreground" Value="{StaticResource PreferencesWindowFontColor}" />
              <Setter Property="FontWeight" Value="Bold" />
            </Trigger>
            <Trigger Property="IsSelected" Value="False">
              <Setter TargetName="SelectedItem" Property="Background" Value="{StaticResource PreferencesWindowBackgroundColor}" />
              <Setter Property="Foreground" Value="{StaticResource TabItemUnSelected}" />
              <Setter Property="FontWeight" Value="Regular" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="PadlockToggleButton" TargetType="{x:Type ToggleButton}">
    <Setter Property="UseLayoutRounding" Value="True" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ToggleButton}">
          <Grid x:Name="mainGrid">
            <Border Name="_borderOn" Background="Transparent">
              <Viewbox Width="24" Height="24" Margin="2,0,0,0" VerticalAlignment="Center">
                <Path x:Name="_toggleOn" Data="{StaticResource PadlockIcon}" Fill="#999999" Stroke="#999999" StrokeThickness="0" />
              </Viewbox>
            </Border>
            <Border Name="_borderOff" Background="Transparent">
              <Viewbox Width="22" Height="22" Margin="0,0,4,1" VerticalAlignment="Center">
                <Path x:Name="_toggleOff" Data="{StaticResource PadlockLockedIcon}" Fill="#999999" Stroke="#999999" StrokeThickness="0" />
              </Viewbox>
            </Border>
          </Grid>
          <!--  triggers toggle visual appearance  -->
          <ControlTemplate.Triggers>
            <Trigger Property="IsChecked" Value="True">
              <Setter TargetName="_borderOff" Property="Visibility" Value="Collapsed" />
              <Setter TargetName="_borderOn" Property="Visibility" Value="Visible" />
            </Trigger>
            <Trigger Property="IsChecked" Value="False">
              <Setter TargetName="_borderOff" Property="Visibility" Value="Visible" />
              <Setter TargetName="_borderOn" Property="Visibility" Value="Collapsed" />
            </Trigger>
            <Trigger Property="IsMouseOver" Value="True">
              <Setter TargetName="_toggleOn" Property="Fill" Value="#6AC0E7" />
              <Setter TargetName="_toggleOff" Property="Fill" Value="#6AC0E7" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
              <Setter TargetName="mainGrid" Property="OpacityMask" Value="{StaticResource SemiTransparent}" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="EllipseToggleButton1" TargetType="{x:Type ToggleButton}">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ToggleButton}">
          <Grid x:Name="mainGrid">
            <Grid.ColumnDefinitions>
              <ColumnDefinition Width="Auto" />
            </Grid.ColumnDefinitions>
            <Border Name="_borderOn" Grid.Column="0" Width="{TemplateBinding Width}" Background="Transparent">
              <Grid>
                <Grid.RowDefinitions>
                  <RowDefinition Height="Auto" />
                </Grid.RowDefinitions>
                <Grid.ColumnDefinitions>
                  <ColumnDefinition Width="Auto" />
                  <ColumnDefinition Width="Auto" />
                  <ColumnDefinition Width="*" />
                  <ColumnDefinition Width="Auto" />
                  <ColumnDefinition Width="Auto" />
                </Grid.ColumnDefinitions>
                <Border Grid.Row="0" Grid.RowSpan="1" Grid.Column="1" Grid.ColumnSpan="3" Panel.ZIndex="1" Background="{StaticResource PreferencesWindowButtonColor}" />
                <Ellipse Name="ButtonBackgroundOn" Grid.Row="0" Grid.RowSpan="1" Grid.Column="0" Grid.ColumnSpan="2" Width="{TemplateBinding Height}" Panel.ZIndex="0" Fill="{StaticResource PreferencesWindowButtonColor}" />
                <Ellipse Grid.Row="0" Grid.RowSpan="1" Grid.Column="3" Grid.ColumnSpan="2" Width="{TemplateBinding Height}" Height="{TemplateBinding Height}" Panel.ZIndex="3" Fill="{StaticResource CloseButtonMouseOverForeground}" Stroke="{StaticResource PreferencesWindowButtonColor}" StrokeThickness="4" />
              </Grid>
            </Border>
            <Border Name="_borderOff" Grid.Column="0" Width="{TemplateBinding Width}" Background="Transparent">
              <Grid>
                <Grid.RowDefinitions>
                  <RowDefinition Height="Auto" />
                </Grid.RowDefinitions>
                <Grid.ColumnDefinitions>
                  <ColumnDefinition Width="Auto" />
                  <ColumnDefinition Width="Auto" />
                  <ColumnDefinition Width="*" />
                  <ColumnDefinition Width="Auto" />
                  <ColumnDefinition Width="Auto" />
                </Grid.ColumnDefinitions>
                <Border Grid.Row="0" Grid.RowSpan="1" Grid.Column="1" Grid.ColumnSpan="3" Panel.ZIndex="1" Background="{StaticResource TabItemUnSelected}" />
                <Ellipse Name="ButtonBackgroundOff" Grid.Row="0" Grid.RowSpan="1" Grid.Column="3" Grid.ColumnSpan="2" Width="{TemplateBinding Height}" Height="{TemplateBinding Height}" Panel.ZIndex="0" Fill="{StaticResource TabItemUnSelected}" />
                <Ellipse Grid.Row="0" Grid.RowSpan="1" Grid.Column="0" Grid.ColumnSpan="2" Width="{TemplateBinding Height}" Height="{TemplateBinding Height}" Panel.ZIndex="3" Fill="{StaticResource CloseButtonMouseOverForeground}" Stroke="{StaticResource TabItemUnSelected}" StrokeThickness="4" />
              </Grid>
            </Border>
          </Grid>
          <!--  triggers toggle visual appearance  -->
          <ControlTemplate.Triggers>
            <Trigger Property="IsChecked" Value="True">
              <Setter TargetName="_borderOff" Property="Visibility" Value="Collapsed" />
              <Setter TargetName="_borderOn" Property="Visibility" Value="Visible" />
            </Trigger>
            <Trigger Property="IsChecked" Value="False">
              <Setter TargetName="_borderOff" Property="Visibility" Value="Visible" />
              <Setter TargetName="_borderOn" Property="Visibility" Value="Collapsed" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
              <Setter TargetName="mainGrid" Property="OpacityMask" Value="{StaticResource SemiTransparent}" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <ControlTemplate x:Key="NoBordersComboBoxToggleButton" TargetType="{x:Type ToggleButton}">
    <Grid>
      <Grid.ColumnDefinitions>
        <ColumnDefinition />
        <ColumnDefinition Width="20" />
      </Grid.ColumnDefinitions>
      <Border x:Name="Border" Grid.ColumnSpan="2" Background="{StaticResource PreferencesWindowBackgroundColor}" BorderBrush="#FF97A0A5" BorderThickness="0,0,0,1" CornerRadius="0" />
      <Border Grid.Column="0" Margin="1" Background="{StaticResource PreferencesWindowBackgroundColor}" BorderBrush="#FF97A0A5" BorderThickness="0,0,0,0" CornerRadius="0" />
      <!--  This Path will draw a small triangle symbol inside the toogle button  -->
      <Path x:Name="Arrow" Grid.Column="1" HorizontalAlignment="Center" VerticalAlignment="Center" Data="M0,0 L0,2 L4,6 L8,2 L8,0 L4,4 z" Fill="{StaticResource PreferencesWindowFontColor}" />
    </Grid>
    <ControlTemplate.Triggers>
      <Trigger Property="IsEnabled" Value="false">
        <Setter TargetName="Arrow" Property="Fill" Value="#888888" />
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <Style x:Key="NoBordersComboBoxStyle" TargetType="{x:Type ComboBox}">
    <Setter Property="SnapsToDevicePixels" Value="true" />
    <Setter Property="OverridesDefaultStyle" Value="true" />
    <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto" />
    <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
    <Setter Property="ScrollViewer.CanContentScroll" Value="true" />
    <Setter Property="Foreground" Value="{StaticResource PreferencesWindowFontColor}" />
    <Setter Property="FontWeight" Value="Regular" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ComboBox}">
          <Grid>
            <!--  Toogle button that is shown in the right side of the combobox and when is clicked displays a list of all the values  -->
            <ToggleButton Name="ToggleButton" Grid.Column="2" ClickMode="Press" Focusable="false" IsChecked="{Binding Path=IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" Template="{StaticResource NoBordersComboBoxToggleButton}" />
            <ContentPresenter Name="ContentSite" Margin="3,3,23,3" HorizontalAlignment="Left" VerticalAlignment="Center" Content="{TemplateBinding SelectionBoxItem}" ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}" ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}" IsHitTestVisible="False" />
            <!--  This TextBox shows the current comboboxitem value selected  -->
            <TextBox x:Name="PART_EditableTextBox" Margin="3,3,23,3" HorizontalAlignment="Left" VerticalAlignment="Center" Background="#FF3F3F3F" Focusable="True" Foreground="{StaticResource PreferencesWindowFontColor}" IsReadOnly="{TemplateBinding IsReadOnly}" Style="{x:Null}" Template="{StaticResource NoBordersComboBoxTextBox}" Visibility="Hidden" />
            <!--  The Popup is the window with all the comboboxitems displayed when the user clicks the combobox toogle button  -->
            <Popup Name="Popup" AllowsTransparency="True" Focusable="False" IsOpen="{TemplateBinding IsDropDownOpen}" Placement="Bottom" PopupAnimation="Slide">
              <Grid Name="DropDown" MinWidth="{TemplateBinding ActualWidth}" MaxHeight="{TemplateBinding MaxDropDownHeight}" SnapsToDevicePixels="True">
                <Border x:Name="DropDownBorder" Background="#FF3F3F3F" BorderBrush="#888888" BorderThickness="1" />
                <ScrollViewer Margin="4,6,4,6" SnapsToDevicePixels="True">
                  <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Contained" />
                </ScrollViewer>
              </Grid>
            </Popup>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="HasItems" Value="false">
              <Setter TargetName="DropDownBorder" Property="MinHeight" Value="95" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
              <Setter Property="Foreground" Value="#888888" />
            </Trigger>
            <Trigger Property="IsGrouping" Value="true">
              <Setter Property="ScrollViewer.CanContentScroll" Value="false" />
            </Trigger>
            <Trigger SourceName="Popup" Property="Popup.AllowsTransparency" Value="true">
              <Setter TargetName="DropDownBorder" Property="CornerRadius" Value="0" />
              <Setter TargetName="DropDownBorder" Property="Margin" Value="0,2,0,0" />
            </Trigger>
            <Trigger Property="IsEditable" Value="true">
              <Setter Property="IsTabStop" Value="false" />
              <Setter TargetName="PART_EditableTextBox" Property="Visibility" Value="Visible" />
              <Setter TargetName="ContentSite" Property="Visibility" Value="Hidden" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="RunSettingsRadioButtons" TargetType="{x:Type RadioButton}">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type RadioButton}">
          <BulletDecorator Background="{StaticResource PreferencesWindowBackgroundColor}" Cursor="Hand">
            <BulletDecorator.Bullet>
              <Grid Width="18" Height="18">
                <!--  The main white circle filled with White color (see the trigger IsChecked -> True  -->
                <Ellipse x:Name="MainEllipse" Stroke="Black" StrokeThickness="1" />
                <!--  The black circle inside the MainEllipse which indicates which radio button is checked  -->
                <Ellipse x:Name="SelectedEllipse" Margin="5" Fill="Black" Visibility="Collapsed" />
              </Grid>
            </BulletDecorator.Bullet>
            <!--  Text element next to each radio button  -->
            <TextBlock Margin="3,1,0,0" FontFamily="Calibri" FontSize="12" FontWeight="Regular" Foreground="{StaticResource PreferencesWindowFontColor}">
              <ContentPresenter />
            </TextBlock>
          </BulletDecorator>
          <!--  If item is checked, trigger the visibility of the mark  -->
          <ControlTemplate.Triggers>
            <Trigger Property="IsChecked" Value="true">
              <!--  If item is checked, trigger the visibility to Visible of the SelectedEllipse and change the color of the MainEllipse into White for better highlighting  -->
              <Setter TargetName="SelectedEllipse" Property="Visibility" Value="Visible" />
              <Setter TargetName="MainEllipse" Property="Fill" Value="{StaticResource PreferencesWindowFontColor}" />
            </Trigger>
            <Trigger Property="IsChecked" Value="false">
              <!--  If item is checked, trigger the visibility to Collapse of the SelectedEllipse and change the color of the  MainEllipse into White for better highlighting  -->
              <Setter TargetName="SelectedEllipse" Property="Visibility" Value="Collapsed" />
              <Setter TargetName="MainEllipse" Property="Fill" Value="{StaticResource PreferencesWindowBackgroundColor}" />
              <Setter TargetName="MainEllipse" Property="Stroke" Value="{StaticResource PreferencesWindowFontColor}" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="GeometryScaleRadioButtons" TargetType="{x:Type RadioButton}">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type RadioButton}">
          <BulletDecorator Background="{StaticResource PreferencesWindowBackgroundColor}" Cursor="Hand">
            <BulletDecorator.Bullet>
              <Grid Width="18" Height="18">
                <!--  The main white circle filled with White color (see the trigger IsChecked -> True  -->
                <Ellipse x:Name="MainEllipse" Stroke="Black" StrokeThickness="1" />
                <!--  The black circle inside the MainEllipse which indicates which radio button is checked  -->
                <Ellipse x:Name="SelectedEllipse" Margin="5" Fill="Black" Visibility="Collapsed" />
              </Grid>
            </BulletDecorator.Bullet>
            <!--  Text element next to each radio button  -->
            <TextBlock x:Name="RadioTextBlock" Margin="3,1,0,0" FontSize="12" FontWeight="Regular" Foreground="{StaticResource PreferencesWindowFontColor}">
              <ContentPresenter />
            </TextBlock>
          </BulletDecorator>
          <!--  If item is checked, trigger the visibility of the mark  -->
          <ControlTemplate.Triggers>
            <Trigger Property="IsChecked" Value="true">
              <!--  If item is checked, trigger the visibility to Visible of the SelectedEllipse and change the color of the MainEllipse into White for better highlighting  -->
              <Setter TargetName="SelectedEllipse" Property="Visibility" Value="Visible" />
              <Setter TargetName="MainEllipse" Property="Fill" Value="{StaticResource PreferencesWindowFontColor}" />
              <Setter TargetName="RadioTextBlock" Property="FontWeight" Value="Bold" />
            </Trigger>
            <Trigger Property="IsChecked" Value="false">
              <!--  If item is checked, trigger the visibility to Collapse of the SelectedEllipse and change the color of the  MainEllipse into White for better highlighting  -->
              <Setter TargetName="SelectedEllipse" Property="Visibility" Value="Collapsed" />
              <Setter TargetName="MainEllipse" Property="Fill" Value="{StaticResource PreferencesWindowBackgroundColor}" />
              <Setter TargetName="MainEllipse" Property="Stroke" Value="{StaticResource PreferencesWindowFontColor}" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="TextBoxWaterMarkStyle" TargetType="{x:Type TextBox}">
    <Setter Property="Background" Value="#666666" />
    <Setter Property="Foreground" Value="White" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type TextBox}">
          <Grid>
            <Grid.ColumnDefinitions>
              <ColumnDefinition />
              <ColumnDefinition Width="20" />
            </Grid.ColumnDefinitions>
            <Border Grid.Row="0" Grid.ColumnSpan="2" Background="#666666" BorderBrush="{StaticResource PreferencesWindowButtonColor}" BorderThickness="0,0,0,2" />
            <ScrollViewer x:Name="PART_ContentHost" Margin="5,0,0,0" VerticalAlignment="Center" />
            <!--  This Label will show the WaterMark text that will be deleted once the user starts typing  -->
            <Label x:Name="WaterMarkLabel" Grid.Row="0" Margin="5,0,0,0" VerticalAlignment="Center" Content="{TemplateBinding Tag}" Foreground="LightGray" Visibility="Collapsed" />
            <!--  This is the Canvas for the exclamation mark appearing when the Style that the user is trying to insert already exists  -->
            <Canvas Grid.Column="1" Visibility="{Binding Path=IsWarningEnabled, Converter={StaticResource BooleanToVisibilityConverter}}">
              <Canvas.ToolTip>
                <ToolTip Content="{Binding CurrentWarningMessage}" Style="{StaticResource GenericToolTipLight}" />
              </Canvas.ToolTip>
              <Path Fill="#FAA21B">
                <Path.Data>
                  <CombinedGeometry GeometryCombineMode="Exclude">
                    <CombinedGeometry.Geometry1>
                      <PathGeometry>
                        <PathGeometry.Figures>
                          <PathFigureCollection>
                            <PathFigure IsClosed="True" StartPoint="10,5">
                              <PathFigure.Segments>
                                <PathSegmentCollection>
                                  <LineSegment Point="18,20" />
                                  <LineSegment Point="2,20" />
                                </PathSegmentCollection>
                              </PathFigure.Segments>
                            </PathFigure>
                          </PathFigureCollection>
                        </PathGeometry.Figures>
                      </PathGeometry>
                    </CombinedGeometry.Geometry1>
                    <CombinedGeometry.Geometry2>
                      <GeometryGroup FillRule="EvenOdd">
                        <EllipseGeometry Center="10,18" RadiusX="1.5" RadiusY="1.5" />
                        <RectangleGeometry Rect="8.5,8.5,3,7.5" />
                      </GeometryGroup>
                    </CombinedGeometry.Geometry2>
                  </CombinedGeometry>
                </Path.Data>
              </Path>
            </Canvas>
          </Grid>
          <ControlTemplate.Triggers>
            <MultiTrigger>
              <!--  When the user delete the text (Text property is empty) typed when we show again the WaterMark text  -->
              <MultiTrigger.Conditions>
                <Condition Property="Text" Value="" />
              </MultiTrigger.Conditions>
              <Setter TargetName="WaterMarkLabel" Property="Visibility" Value="Visible" />
            </MultiTrigger>
            <Trigger Property="IsEnabled" Value="False">
              <Setter Property="Foreground" Value="DimGray" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="OutlinedButtonStyle" TargetType="Button">
    <Setter Property="Foreground" Value="{StaticResource PreferencesWindowFontColor}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="Button">
          <Border x:Name="ButtonBorder" Background="Transparent" BorderBrush="{StaticResource Button.Outline.Default.Border}" BorderThickness="2" CornerRadius="2">
            <Grid Background="Transparent">
              <Rectangle Opacity="0.5" RadiusX="2" RadiusY="2" Stroke="#FFFFFF" StrokeThickness="1" />
              <TextBlock Padding="10,0,10,0" HorizontalAlignment="Center" VerticalAlignment="Center">
                <ContentPresenter />
              </TextBlock>
            </Grid>
          </Border>
          <!--  According to the Hig Autodesk standards for Outlined buttons some colors/properties will be changed according to the event generated  -->
          <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
              <Setter TargetName="ButtonBorder" Property="BorderBrush" Value="{StaticResource Button.Outline.MouseOver.Border}" />
              <Setter TargetName="ButtonBorder" Property="BorderThickness" Value="2" />
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
              <Setter TargetName="ButtonBorder" Property="BorderBrush" Value="{StaticResource Button.Outline.Pressed.Border}" />
              <Setter TargetName="ButtonBorder" Property="BorderThickness" Value="2" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Style.Triggers>
      <Trigger Property="IsMouseOver" Value="true">
        <Setter Property="Cursor" Value="Hand" />
      </Trigger>
      <Trigger Property="IsEnabled" Value="false">
        <Setter Property="Foreground" Value="#BBBBBB" />
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="OutlinedButtonStyleInverted" TargetType="Button">
    <Setter Property="Foreground" Value="Black" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="Button">
          <Border x:Name="ButtonBorder" Background="Transparent" BorderBrush="{StaticResource Button.Outline.Default.Border}" BorderThickness="2" CornerRadius="2">
            <Grid Background="Transparent">
              <Rectangle Opacity="0.5" RadiusX="2" RadiusY="2" Stroke="Black" StrokeThickness="1" />
              <TextBlock Padding="10,0,10,0" HorizontalAlignment="Center" VerticalAlignment="Center" FontFamily="{StaticResource ArtifaktElementRegular}" FontSize="14">
                <ContentPresenter />
              </TextBlock>
            </Grid>
          </Border>
          <!--  According to the Hig Autodesk standards for Outlined buttons some colors/properties will be changed according to the event generated  -->
          <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
              <Setter TargetName="ButtonBorder" Property="BorderBrush" Value="{StaticResource Button.Outline.Inverted.Border}" />
              <Setter TargetName="ButtonBorder" Property="BorderThickness" Value="2" />
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
              <Setter TargetName="ButtonBorder" Property="BorderBrush" Value="{StaticResource Button.Outline.Inverted.Border}" />
              <Setter TargetName="ButtonBorder" Property="BorderThickness" Value="2" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Style.Triggers>
      <Trigger Property="IsMouseOver" Value="true">
        <Setter Property="Cursor" Value="Hand" />
      </Trigger>
      <Trigger Property="IsEnabled" Value="false">
        <Setter Property="Foreground" Value="{StaticResource DynamoStandardLabelTextBrush}" />
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="FlatIconButtonStyle" TargetType="{x:Type Button}">
    <Style.Triggers>
      <Trigger Property="IsEnabled" Value="False">
        <Setter Property="Opacity" Value=".5" />
      </Trigger>
    </Style.Triggers>
    <Setter Property="Background" Value="Transparent" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Button}">
          <Border x:Name="removeStyleBorder" Background="{TemplateBinding Background}">
            <Grid>
              <Rectangle x:Name="backgroundRectangle" Fill="{TemplateBinding Background}" />
              <Rectangle x:Name="borderRectangle" Fill="Transparent" Stroke="Transparent" StrokeThickness="2" />
              <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
            </Grid>
          </Border>
          <!--  According to the Hig Autodesk standards for icon buttons some colors/properties will be changed according to the event generated  -->
          <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
              <Setter TargetName="backgroundRectangle" Property="Fill" Value="{StaticResource PreferencesWindowButtonColor}" />
              <Setter TargetName="backgroundRectangle" Property="Opacity" Value="0.2" />
              <Setter TargetName="borderRectangle" Property="Stroke" Value="{StaticResource PreferencesWindowButtonColor}" />
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
              <Setter TargetName="backgroundRectangle" Property="Fill" Value="{StaticResource PreferencesWindowButtonColor}" />
              <Setter TargetName="backgroundRectangle" Property="Opacity" Value="0.8" />
              <Setter TargetName="borderRectangle" Property="Stroke" Value="{StaticResource PreferencesWindowButtonColor}" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="ButtonColorPickerStyle" TargetType="{x:Type Button}">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Button}">
          <Border x:Name="removeStyleBorder" Background="{TemplateBinding Background}">
            <Grid>
              <Rectangle x:Name="borderRectangle" Fill="Transparent" Stroke="Transparent" StrokeThickness="2" />
              <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
            </Grid>
          </Border>
          <!--  According to the Hig Autodesk standards for icon buttons some colors/properties will be changed according to the event generated  -->
          <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
              <Setter TargetName="borderRectangle" Property="Stroke" Value="{StaticResource PreferencesWindowButtonColor}" />
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
              <Setter TargetName="borderRectangle" Property="Fill" Value="{StaticResource PreferencesWindowButtonColor}" />
              <Setter TargetName="borderRectangle" Property="Stroke" Value="{StaticResource PreferencesWindowButtonColor}" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="CaretButtonStyle" TargetType="{x:Type Button}">
    <Setter Property="Width" Value="5" />
    <Setter Property="Height" Value="10" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Button}">
          <Border x:Name="CaretButtonBorder" Background="{StaticResource PopupWhiteColor}" BorderBrush="Transparent" BorderThickness="0">
            <Canvas Width="5" Height="10">
              <Line x:Name="caret_upper" Stroke="Black" X1="5" X2="0" Y1="0" Y2="5" />
              <Line x:Name="caret_bottom" Stroke="Black" X1="0" X2="5" Y1="5" Y2="10" />
            </Canvas>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="Tag" Value="Invert">
              <Setter TargetName="caret_upper" Property="RenderTransform">
                <Setter.Value>
                  <RotateTransform Angle="180" CenterX="2" CenterY="5" />
                </Setter.Value>
              </Setter>
              <Setter TargetName="caret_bottom" Property="RenderTransform">
                <Setter.Value>
                  <RotateTransform Angle="180" CenterX="2" CenterY="5" />
                </Setter.Value>
              </Setter>
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
              <Setter TargetName="caret_upper" Property="Stroke" Value="{StaticResource PreferencesWindowButtonColor}" />
              <Setter TargetName="caret_bottom" Property="Stroke" Value="{StaticResource PreferencesWindowButtonColor}" />
            </Trigger>
            <Trigger Property="IsMouseOver" Value="True">
              <Setter TargetName="caret_upper" Property="Stroke" Value="{StaticResource PreferencesWindowButtonColor}" />
              <Setter TargetName="caret_bottom" Property="Stroke" Value="{StaticResource PreferencesWindowButtonColor}" />
              <Setter Property="Cursor" Value="Hand" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
              <Setter TargetName="caret_upper" Property="Stroke" Value="Gray" />
              <Setter TargetName="caret_bottom" Property="Stroke" Value="Gray" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="PopupCloseButtonStyle" TargetType="{x:Type Button}">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Button}">
          <Border x:Name="CloseButtonBorder" Background="Transparent" BorderBrush="Transparent" BorderThickness="0">
            <Canvas Margin="0,0,0,0">
              <Line x:Name="line1" Stroke="{DynamicResource GenericMouseOverBackgroundColorBrush}" StrokeThickness="1" X1="0" X2="13" Y1="0" Y2="13" />
              <Line x:Name="line2" Stroke="{DynamicResource GenericMouseOverBackgroundColorBrush}" StrokeThickness="1" X1="0" X2="13" Y1="13" Y2="0" />
            </Canvas>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="IsPressed" Value="True">
              <Setter TargetName="line1" Property="Stroke" Value="Red" />
              <Setter TargetName="line2" Property="Stroke" Value="Red" />
            </Trigger>
            <Trigger Property="IsMouseOver" Value="True">
              <Setter TargetName="line1" Property="Stroke" Value="{StaticResource PreferencesWindowButtonColor}" />
              <Setter TargetName="line2" Property="Stroke" Value="{StaticResource PreferencesWindowButtonColor}" />
              <Setter Property="Cursor" Value="Hand" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <SolidColorBrush x:Key="Button.MouseOver.Border" Opacity="0.15" Color="{DynamicResource GenericMouseOverBackgroundColor}" />
  <SolidColorBrush x:Key="Button.Pressed.Border" Opacity="0.25" Color="{DynamicResource GenericMouseOverBackgroundColor}" />
  <Style x:Key="PoupButtonStyle" TargetType="{x:Type Button}">
    <Setter Property="MinWidth" Value="80" />
    <Setter Property="MaxHeight" Value="36" />
    <Setter Property="BorderThickness" Value="36" />
    <Setter Property="Foreground" Value="{StaticResource PopupWhiteColor}" />
    <Setter Property="Background" Value="{StaticResource PreferencesWindowButtonColor}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Button}">
          <Border x:Name="PopupButtonBorder" Background="{StaticResource PreferencesWindowButtonColor}" BorderThickness="1" CornerRadius="4">
            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" Content="{TemplateBinding Content}" />
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
              <Setter TargetName="PopupButtonBorder" Property="BorderBrush" Value="{StaticResource Button.MouseOver.Border}" />
              <Setter TargetName="PopupButtonBorder" Property="BorderThickness" Value="2" />
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
              <Setter TargetName="PopupButtonBorder" Property="BorderBrush" Value="{StaticResource Button.Pressed.Border}" />
              <Setter TargetName="PopupButtonBorder" Property="BorderThickness" Value="4" />
              <Setter TargetName="PopupButtonBorder" Property="Background" Value="{StaticResource PreferencesWindowButtonColor}" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="PoupExitButtonStyle" TargetType="{x:Type Button}">
    <Setter Property="MaxHeight" Value="36" />
    <Setter Property="FontSize" Value="14" />
    <Setter Property="BorderThickness" Value="36" />
    <Setter Property="Foreground" Value="Black" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Button}">
          <Border x:Name="PopupButtonBorder" Background="{StaticResource PopupWhiteColor}" BorderBrush="{DynamicResource GenericMouseOverBackgroundColorBrush}" BorderThickness="1" CornerRadius="2" Opacity="0.5">
            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" Content="{TemplateBinding Content}" />
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="PoupPathRectangleStyle" TargetType="{x:Type Path}">
    <Setter Property="Fill" Value="{StaticResource PopupWhiteColor}" />
  </Style>
  <Style x:Key="PoupPathPointerStyle" TargetType="{x:Type Path}">
    <Setter Property="Fill" Value="{StaticResource PopupWhiteColor}" />
  </Style>
  <Style x:Key="CustomRichTextBoxStyle" TargetType="{x:Type RichTextBox}">
    <Setter Property="FontSize" Value="14" />
    <Setter Property="FontFamily" Value="Artifakt Element" />
    <Setter Property="IsReadOnly" Value="True" />
    <Setter Property="Background" Value="{StaticResource PopupWhiteColor}" />
    <Setter Property="BorderThickness" Value="0" />
  </Style>
  <Style x:Key="RealTimeInfoCloseButtonStyle" TargetType="{x:Type Button}">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Button}">
          <Border x:Name="CloseButtonBorder" Background="Transparent" BorderBrush="Transparent" BorderThickness="0">
            <Canvas Margin="0,0,0,0">
              <Line x:Name="line1" Stroke="#D9D9D9" StrokeThickness="1" X1="0" X2="13" Y1="0" Y2="13" />
              <Line x:Name="line2" Stroke="#D9D9D9" StrokeThickness="1" X1="0" X2="13" Y1="13" Y2="0" />
            </Canvas>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="IsPressed" Value="True">
              <Setter TargetName="line1" Property="Stroke" Value="{StaticResource PreferencesWindowButtonColor}" />
              <Setter TargetName="line2" Property="Stroke" Value="{StaticResource PreferencesWindowButtonColor}" />
            </Trigger>
            <Trigger Property="IsMouseOver" Value="True">
              <Setter TargetName="line1" Property="Stroke" Value="{StaticResource PreferencesWindowButtonColor}" />
              <Setter TargetName="line2" Property="Stroke" Value="{StaticResource PreferencesWindowButtonColor}" />
              <Setter Property="Cursor" Value="Hand" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="SelectionButtonStyle" TargetType="Button">
    <Setter Property="VerticalAlignment" Value="Center" />
    <Setter Property="Height" Value="32" />
    <Setter Property="Padding" Value="0,0,0,0" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="Button">
          <Grid>
            <Border x:Name="mouseOverBorder" Margin="2" BorderThickness="2" CornerRadius="1" Visibility="Hidden">
              <Border.BorderBrush>
                <SolidColorBrush Opacity="0.15" Color="{StaticResource BorderBasicColor}" />
              </Border.BorderBrush>
            </Border>
            <Border x:Name="mousePressedBorder" Margin="2" BorderThickness="2" CornerRadius="1" Visibility="Hidden">
              <Border.BorderBrush>
                <SolidColorBrush Opacity="0.35" Color="{StaticResource BorderPressedColor}" />
              </Border.BorderBrush>
            </Border>
            <Border x:Name="border" Margin="4" Padding="8,0,8,0" Background="{TemplateBinding Background}" BorderThickness="1" CornerRadius="1">
              <Border.BorderBrush>
                <SolidColorBrush Opacity="0.5" Color="{StaticResource BorderBasicColor}" />
              </Border.BorderBrush>
              <TextBlock x:Name="textBlock" Padding="0,0,0,0" HorizontalAlignment="Center" VerticalAlignment="Center" FontFamily="{StaticResource ArtifaktElementRegular}" Foreground="white" Opacity="1" Text="{TemplateBinding Content}" />
            </Border>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
              <Setter TargetName="mouseOverBorder" Property="Visibility" Value="Visible" />
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
              <Setter TargetName="mousePressedBorder" Property="Visibility" Value="Visible" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
              <Setter TargetName="border" Property="Background" Value="{StaticResource SecondaryGray}" />
              <Setter TargetName="border" Property="BorderBrush" Value="{StaticResource SecondaryGray}" />
              <Setter TargetName="textBlock" Property="Opacity" Value="0.7" />
              <Setter Property="Cursor" Value="No" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="MenuItemGroupStyle" BasedOn="{StaticResource ContextMenuItemStyle}" TargetType="{x:Type MenuItem}">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type MenuItem}">
          <DockPanel x:Name="dockPanel" HorizontalAlignment="Stretch" Background="Transparent" SnapsToDevicePixels="true">
            <Label x:Name="checkBox" Margin="0,0,-20,0" HorizontalAlignment="Left" VerticalAlignment="Center" HorizontalContentAlignment="Center" VerticalContentAlignment="Center" Content="✓" DockPanel.Dock="Left" FontSize="9px" Foreground="White" Visibility="Collapsed" />
            <ContentPresenter x:Name="ContentPresenter" Margin="{TemplateBinding Padding}" VerticalAlignment="Center" ContentSource="Header" DockPanel.Dock="Left" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" TextBlock.Foreground="{StaticResource NodeContextMenuForeground}" />
            <Label x:Name="subMenuArrow" Margin="0,0,15,7" Padding="0" VerticalAlignment="Center" Content="&gt;" DockPanel.Dock="Right" FontFamily="{StaticResource ArtifaktElementRegular}" FontSize="13px" Foreground="{StaticResource Blue300Brush}">
              <Label.RenderTransform>
                <ScaleTransform ScaleX="1" ScaleY="1.5" />
              </Label.RenderTransform>
              <Label.Style>
                <Style TargetType="{x:Type Label}">
                  <Setter Property="Visibility" Value="Hidden" />
                  <Style.Triggers>
                    <DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType={x:Type MenuItem}}, Path=HasItems}" Value="True">
                      <Setter Property="Visibility" Value="Visible" />
                    </DataTrigger>
                  </Style.Triggers>
                </Style>
              </Label.Style>
            </Label>
            <Popup x:Name="PART_Popup" MaxHeight="350" AllowsTransparency="true" Focusable="false" HorizontalOffset="0" IsOpen="{Binding IsSubmenuOpen, RelativeSource={RelativeSource TemplatedParent}}" Placement="Right" VerticalOffset="-2">
              <Border Background="{TemplateBinding Background}" BorderBrush="Transparent" BorderThickness="0">
                <ScrollViewer x:Name="SubMenuScrollViewer" CanContentScroll="true" Style="{DynamicResource {ComponentResourceKey ResourceId=MenuScrollViewer,                                                                                             TypeInTargetAssembly={x:Type FrameworkElement}}}">
                  <Grid RenderOptions.ClearTypeHint="Enabled">
                    <ItemsPresenter x:Name="ItemsPresenter" Grid.IsSharedSizeScope="true" KeyboardNavigation.DirectionalNavigation="Cycle" KeyboardNavigation.TabNavigation="Cycle" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                  </Grid>
                </ScrollViewer>
              </Border>
            </Popup>
          </DockPanel>
          <ControlTemplate.Triggers>
            <Trigger Property="IsEnabled" Value="False">
              <Setter TargetName="ContentPresenter" Property="TextBlock.Opacity" Value="0.5" />
            </Trigger>
            <Trigger Property="IsMouseOver" Value="True">
              <Setter TargetName="ContentPresenter" Property="TextBlock.Foreground" Value="White" />
              <Setter TargetName="dockPanel" Property="Background" Value="{StaticResource NodeContextMenuBackgroundHighlight}" />
            </Trigger>
            <Trigger Property="IsMouseOver" Value="False">
              <Setter TargetName="dockPanel" Property="Background" Value="{StaticResource NodeContextMenuBackground}" />
            </Trigger>
            <Trigger Property="IsChecked" Value="True">
              <Setter TargetName="checkBox" Property="Visibility" Value="Visible" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="ListBoxItemStyle" TargetType="ListBoxItem">
    <Setter Property="Focusable" Value="{Binding Path=IsDefault, Converter={StaticResource InverseBooleanConverter}}" />
    <Setter Property="Padding" Value="0" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="ListBoxItem">
          <Grid MinWidth="186" MinHeight="67" Margin="0,0,10,5">
            <Border x:Name="mouseOverBorder" Margin="2" BorderBrush="{StaticResource BorderBrushMouseOver}" BorderThickness="2" CornerRadius="2" Visibility="Hidden" />
            <Border x:Name="mousePressedBorder" Margin="0" Background="Transparent" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="4" CornerRadius="4" Visibility="Hidden" />
            <Border Name="selectedItemBorder" Margin="4" Background="Transparent" SnapsToDevicePixels="true" />
            <ContentPresenter />
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="IsSelected" Value="True">
              <Setter TargetName="selectedItemBorder" Property="BorderBrush" Value="{StaticResource PreferencesWindowButtonColor}" />
              <Setter TargetName="selectedItemBorder" Property="BorderThickness" Value="2" />
            </Trigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="IsMouseOver" Value="True" />
                <Condition Property="Focusable" Value="True" />
              </MultiTrigger.Conditions>
              <MultiTrigger.Setters>
                <Setter TargetName="selectedItemBorder" Property="Opacity" Value="0.9" />
                <Setter TargetName="mouseOverBorder" Property="Visibility" Value="Visible" />
              </MultiTrigger.Setters>
            </MultiTrigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="CheckBoxFileTrustStyle" TargetType="{x:Type CheckBox}">
    <Setter Property="SnapsToDevicePixels" Value="true" />
    <Setter Property="OverridesDefaultStyle" Value="true" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="CheckBox">
          <BulletDecorator VerticalAlignment="Center" Background="Transparent">
            <BulletDecorator.Bullet>
              <Border x:Name="Border" Width="13" Height="13" Background="#373737" BorderBrush="{StaticResource MidGreyBrush}" BorderThickness="1">
                <Image x:Name="CheckBoxTick" Width="7" Height="7" HorizontalAlignment="Center" VerticalAlignment="Center" Source="pack://application:,,,/DynamoCoreWpf;component/UI/Images/tick_selected.png" Visibility="Hidden" />
              </Border>
            </BulletDecorator.Bullet>
            <ContentPresenter x:Name="contentPresent" Margin="5,0,5,0" Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" TextBlock.FontSize="14px" TextBlock.Foreground="Black" />
          </BulletDecorator>
          <ControlTemplate.Triggers>
            <Trigger Property="IsChecked" Value="true">
              <Setter TargetName="CheckBoxTick" Property="Visibility" Value="Visible" />
            </Trigger>
            <Trigger Property="IsChecked" Value="false">
              <Setter TargetName="Border" Property="Background" Value="White" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="True">
              <Setter TargetName="contentPresent" Property="TextBlock.Foreground" Value="Black" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
              <Setter TargetName="contentPresent" Property="TextBlock.Foreground" Value="{StaticResource NormalBorderBrush}" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="InputBoxDarkThemeStyle" TargetType="{x:Type TextBox}">
    <Setter Property="FontFamily" Value="{StaticResource ArtifaktElementRegular}" />
    <Setter Property="Foreground" Value="{StaticResource DarkThemeBodyMediumBrush}" />
    <Setter Property="Background" Value="#353535" />
    <Setter Property="UseLayoutRounding" Value="True" />
    <Setter Property="FontSize" Value="12px" />
    <Setter Property="Padding" Value="10" />
    <Setter Property="MinLines" Value="2" />
    <Setter Property="VerticalAlignment" Value="Stretch" />
    <Setter Property="BorderThickness" Value="0" />
    <Setter Property="AcceptsReturn" Value="True" />
    <Setter Property="AcceptsTab" Value="True" />
    <Setter Property="TextWrapping" Value="Wrap" />
    <Setter Property="HorizontalScrollBarVisibility" Value="Disabled" />
    <Setter Property="VerticalScrollBarVisibility" Value="Auto" />
  </Style>
  <SolidColorBrush x:Key="MidGrayBrush" Color="{StaticResource MidGray}" />
  <SolidColorBrush x:Key="LightGrayBrush" Color="{StaticResource LightGray}" />
  <SolidColorBrush x:Key="BlueBrush" Color="{StaticResource Blue}" />
  <SolidColorBrush x:Key="MidLightBlueBrush" Color="{StaticResource MidLightBlue}" />
  <SolidColorBrush x:Key="MidBlueBrush" Color="{StaticResource MidBlue}" />
  <SolidColorBrush x:Key="MidDarkBlueBrush" Color="{StaticResource MidDarkBlue}" />
  <SolidColorBrush x:Key="TextColorBrush" Color="{StaticResource TextColor}" />
  <SolidColorBrush x:Key="GrayOpacityBrush" Color="{StaticResource GrayOpacity}" />
  <Style x:Key="BorderInputBoxDarkThemeStyle" TargetType="Border">
    <Setter Property="BorderThickness" Value="0,0,0,1" />
    <Setter Property="Background" Value="Transparent" />
    <Setter Property="BorderBrush" Value="{StaticResource MidGrayBrush}" />
    <Style.Triggers>
      <DataTrigger Binding="{Binding ElementName=editText, Path=IsMouseOver}" Value="True">
        <Setter Property="BorderBrush" Value="{StaticResource LightGrayBrush}" />
      </DataTrigger>
      <DataTrigger Binding="{Binding ElementName=editText, Path=IsFocused}" Value="True">
        <Setter Property="BorderBrush" Value="{StaticResource BlueBrush}" />
      </DataTrigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="RectangleInputBoxDarkThemeStyle" TargetType="Rectangle">
    <Setter Property="Opacity" Value="0" />
    <Setter Property="Fill" Value="{StaticResource MidDarkBlueBrush}" />
    <Style.Triggers>
      <DataTrigger Binding="{Binding ElementName=editText, Path=IsFocused}" Value="True">
        <DataTrigger.EnterActions>
          <BeginStoryboard>
            <Storyboard SpeedRatio="2">
              <DoubleAnimation Storyboard.TargetProperty="Opacity" To="0.75" Duration="0:0:1" />
            </Storyboard>
          </BeginStoryboard>
        </DataTrigger.EnterActions>
        <DataTrigger.ExitActions>
          <BeginStoryboard>
            <Storyboard SpeedRatio="2">
              <DoubleAnimation Storyboard.TargetProperty="Opacity" To="0" Duration="0:0:1" />
            </Storyboard>
          </BeginStoryboard>
        </DataTrigger.ExitActions>
      </DataTrigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="HintingInputStyle" TargetType="TextBox">
    <Setter Property="Margin" Value="0,0,0,12" />
    <Setter Property="MinWidth" Value="62px" />
    <Setter Property="OverridesDefaultStyle" Value="True" />
    <Setter Property="Cursor" Value="IBeam" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="TextBox">
          <Grid>
            <TextBox x:Name="InputTextBox" Padding="8,10" Background="{StaticResource DarkThemeInputBoxBackgroundBrush}" BorderThickness="0" CaretBrush="{StaticResource Blue300Brush}" Focusable="True" FontFamily="{StaticResource ArtifaktElementRegular}" FontSize="12px" Foreground="{StaticResource PrimaryCharcoal200Brush}" MaxLength="{TemplateBinding MaxLength}" Tag="{TemplateBinding Tag}" Text="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Text, UpdateSourceTrigger=PropertyChanged}" TextWrapping="Wrap" />
            <TextBlock x:Name="WatermarkLabel" Padding="10" FontFamily="{StaticResource ArtifaktElementRegular}" FontSize="12px" Foreground="{StaticResource PrimaryCharcoal200Brush}" IsHitTestVisible="False" Opacity="0.5" Text="{TemplateBinding Tag}">
              <TextBlock.Style>
                <Style TargetType="{x:Type TextBlock}">
                  <Setter Property="Visibility" Value="Collapsed" />
                  <Style.Triggers>
                    <DataTrigger Binding="{Binding Text, ElementName=InputTextBox}" Value="">
                      <Setter Property="Visibility" Value="Visible" />
                    </DataTrigger>
                  </Style.Triggers>
                </Style>
              </TextBlock.Style>
            </TextBlock>
            <StackPanel Height="4px" VerticalAlignment="Bottom">
              <Rectangle Name="Underline" Height="1px" Fill="#9B9B9B" Opacity="0" />
              <Rectangle Name="UnderlineShadow" Height="3px" Fill="#6E6E6E" Opacity="0" />
            </StackPanel>
          </Grid>
          <ControlTemplate.Triggers>
            <DataTrigger Binding="{Binding IsMouseOver, ElementName=InputTextBox}" Value="True">
              <DataTrigger.EnterActions>
                <BeginStoryboard>
                  <Storyboard SpeedRatio="10">
                    <DoubleAnimation Storyboard.TargetName="Underline" Storyboard.TargetProperty="Opacity" To="0.75" Duration="0:0:1" />
                    <DoubleAnimation Storyboard.TargetName="UnderlineShadow" Storyboard.TargetProperty="Opacity" To="0.75" Duration="0:0:1" />
                  </Storyboard>
                </BeginStoryboard>
              </DataTrigger.EnterActions>
              <DataTrigger.ExitActions>
                <BeginStoryboard>
                  <Storyboard SpeedRatio="2">
                    <DoubleAnimation Storyboard.TargetName="Underline" Storyboard.TargetProperty="Opacity" To="0" Duration="0:0:1" />
                    <DoubleAnimation Storyboard.TargetName="UnderlineShadow" Storyboard.TargetProperty="Opacity" To="0" Duration="0:0:1" />
                  </Storyboard>
                </BeginStoryboard>
              </DataTrigger.ExitActions>
            </DataTrigger>
            <DataTrigger Binding="{Binding IsFocused, ElementName=InputTextBox}" Value="True">
              <Setter TargetName="Underline" Property="Rectangle.Fill" Value="{StaticResource Blue300Brush}" />
              <Setter TargetName="UnderlineShadow" Property="Rectangle.Fill" Value="#497386" />
              <DataTrigger.EnterActions>
                <BeginStoryboard>
                  <Storyboard Name="FocusedStoryboard" SpeedRatio="10">
                    <DoubleAnimation Storyboard.TargetName="Underline" Storyboard.TargetProperty="Opacity" To="0.75" Duration="0:0:1" />
                    <DoubleAnimation Storyboard.TargetName="UnderlineShadow" Storyboard.TargetProperty="Opacity" To="0.75" Duration="0:0:1" />
                  </Storyboard>
                </BeginStoryboard>
              </DataTrigger.EnterActions>
              <DataTrigger.ExitActions>
                <BeginStoryboard>
                  <Storyboard FillBehavior="Stop" SpeedRatio="2">
                    <DoubleAnimation Storyboard.TargetName="Underline" Storyboard.TargetProperty="Opacity" To="0" Duration="0:0:1" />
                    <DoubleAnimation Storyboard.TargetName="UnderlineShadow" Storyboard.TargetProperty="Opacity" To="0" Duration="0:0:1" />
                  </Storyboard>
                </BeginStoryboard>
              </DataTrigger.ExitActions>
            </DataTrigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Style.Triggers>
      <Trigger Property="IsMouseOver" Value="False">
        <Setter Property="BorderBrush" Value="{StaticResource DarkMidGreyBrush}" />
      </Trigger>
    </Style.Triggers>
  </Style>
  <ControlTemplate x:Key="ExpanderTemplate" TargetType="Expander">
    <Border Background="{TemplateBinding Control.Background}" BorderBrush="{TemplateBinding Control.BorderBrush}" BorderThickness="{TemplateBinding Control.BorderThickness}" CornerRadius="3" SnapsToDevicePixels="True">
      <DockPanel>
        <ToggleButton IsChecked="{Binding Path=IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}">
          <ToggleButton.Style>
            <Style TargetType="ToggleButton">
              <Setter Property="Control.Template">
                <Setter.Value>
                  <ControlTemplate TargetType="ToggleButton">
                    <Border Padding="{TemplateBinding Control.Padding}">
                      <Grid Margin="0,0,0,0" VerticalAlignment="Top">
                        <Grid.ColumnDefinitions>
                          <ColumnDefinition Width="27" />
                          <ColumnDefinition Width="*" />
                        </Grid.ColumnDefinitions>
                        <Rectangle Name="ButtonBackgroundRectangle" Width="29" Height="27" HorizontalAlignment="Center" VerticalAlignment="Center" Fill="#3C3C3C" />
                        <Border Name="ButtonBorder" Grid.Column="0" Width="21" Height="21" HorizontalAlignment="Center" VerticalAlignment="Center" Background="Transparent" BorderBrush="{StaticResource Blue300Brush}" BorderThickness="1.5" CornerRadius="1" SnapsToDevicePixels="True" />
                        <Polygon Name="Triangle" Grid.Column="0" Fill="{StaticResource Blue300Brush}" Points="11,12.5 13.5,15.5,16,12.5" SnapsToDevicePixels="True" Stroke="{StaticResource Blue300Brush}" StrokeThickness="1" />
                        <ContentPresenter Grid.Column="1" HorizontalAlignment="Left" VerticalAlignment="Center" Content="{TemplateBinding ContentControl.Content}" ContentStringFormat="{TemplateBinding ContentControl.ContentStringFormat}" ContentTemplate="{TemplateBinding ContentControl.ContentTemplate}" RecognizesAccessKey="True" SnapsToDevicePixels="True" />
                      </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                      <Trigger Property="ToggleButton.IsChecked" Value="True">
                        <Setter TargetName="Triangle" Property="Points" Value="11,15.5 13.5,12.5,16,15.5" />
                      </Trigger>
                      <Trigger Property="UIElement.IsMouseOver" Value="True">
                        <Setter TargetName="ButtonBackgroundRectangle" Property="Fill" Value="#282828" />
                      </Trigger>
                      <Trigger Property="ButtonBase.IsPressed" Value="True">
                        <Setter TargetName="ButtonBorder" Property="BorderBrush" Value="White" />
                        <Setter TargetName="Triangle" Property="Stroke" Value="White" />
                        <Setter TargetName="Triangle" Property="Fill" Value="White" />
                        <Setter TargetName="Triangle" Property="StrokeThickness" Value="2" />
                      </Trigger>
                    </ControlTemplate.Triggers>
                  </ControlTemplate>
                </Setter.Value>
              </Setter>
            </Style>
          </ToggleButton.Style>
        </ToggleButton>
        <ContentPresenter Name="ExpandSite" Margin="{TemplateBinding Control.Padding}" HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}" Content="{TemplateBinding ContentControl.Content}" ContentStringFormat="{TemplateBinding ContentControl.ContentStringFormat}" ContentTemplate="{TemplateBinding ContentControl.ContentTemplate}" DockPanel.Dock="Bottom" Focusable="False" Visibility="Collapsed" />
      </DockPanel>
    </Border>
    <ControlTemplate.Triggers>
      <Trigger Property="Expander.IsExpanded" Value="True">
        <Setter TargetName="ExpandSite" Property="UIElement.Visibility" Value="Visible" />
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <Style x:Key="TextBlockLink" TargetType="TextBlock">
    <Setter Property="Foreground" Value="{StaticResource TextBlockLinkForegroundColor}" />
    <Setter Property="Cursor" Value="Hand" />
  </Style>
  <Style x:Key="TextBlockLinkDark" TargetType="TextBlock">
    <Setter Property="Foreground" Value="{StaticResource TextBlockLinkForegroundColorDark}" />
    <Setter Property="Cursor" Value="Hand" />
    <Setter Property="FontSize" Value="11" />
  </Style>
  <Style x:Key="TextBlockToolTipTitle" TargetType="TextBlock">
    <Setter Property="FontFamily" Value="{StaticResource ArtifaktElementBold}" />
    <Setter Property="FontSize" Value="12" />
  </Style>
  <Style x:Key="TextBlockToolTipDescription" TargetType="Run">
    <Setter Property="Foreground" Value="{StaticResource TextBlockToolTipDescriptionColor}" />
    <Setter Property="FontSize" Value="11" />
  </Style>
  <ControlTemplate x:Key="Slider" TargetType="Slider">
    <Grid>
      <Grid.RowDefinitions>
        <RowDefinition Height="Auto" />
        <RowDefinition Height="Auto" />
        <RowDefinition Height="Auto" />
      </Grid.RowDefinitions>
      <Track x:Name="PART_Track" Grid.Row="1">
        <Track.DecreaseRepeatButton>
          <RepeatButton Command="Slider.DecreaseLarge" Style="{StaticResource SliderRepeatButton1}" />
        </Track.DecreaseRepeatButton>
        <Track.Thumb>
          <Thumb Style="{StaticResource SliderThumb}" />
        </Track.Thumb>
        <Track.IncreaseRepeatButton>
          <RepeatButton Command="Slider.IncreaseLarge" Style="{StaticResource SliderRepeatButton}" />
        </Track.IncreaseRepeatButton>
      </Track>
    </Grid>
  </ControlTemplate>
  <Style x:Key="SliderStyle" TargetType="Slider">
    <Setter Property="Focusable" Value="False" />
    <Setter Property="SnapsToDevicePixels" Value="true" />
    <Setter Property="OverridesDefaultStyle" Value="true" />
    <Style.Triggers>
      <Trigger Property="Orientation" Value="Horizontal">
        <Setter Property="Template" Value="{StaticResource Slider}" />
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="DataGridColumnHeaderText" TargetType="DataGridColumnHeader">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="DataGridColumnHeader">
          <Grid>
            <TextBlock Name="DataGridColumnHeader" Height="32" Padding="10,7,10,0" VerticalAlignment="Center" Background="#434343" FontFamily="{StaticResource ArtifaktElementRegular}" FontSize="14px" FontWeight="Regular" Foreground="{StaticResource PrimaryCharcoal200Brush}" Text="{TemplateBinding Content}">
              <TextBlock.ToolTip>
                <ToolTip Content="{x:Static p:Resources.PublishPackageNodeLibraryTooltip}" Style="{StaticResource GenericToolTipLight}" />
              </TextBlock.ToolTip>
            </TextBlock>
            <Thumb x:Name="PART_RightHeaderGripper" Width="1" HorizontalAlignment="Right" BorderBrush="Transparent" BorderThickness="1,0,0,0" Cursor="SizeWE" />
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
              <Setter TargetName="DataGridColumnHeader" Property="Background" Value="#666666" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <ControlTemplate x:Key="CustomCanvasTemplateCompatible">
    <Canvas Width="18" Height="18" VerticalAlignment="Center" UseLayoutRounding="True">
      <Path Data="M7.2002,11.6 C7.2002,9.16987 9.17012,7.19995 11.6002,7.19995 C12.7672,7.19995 13.8863,7.66352 14.7115,8.48867 C15.5366,9.31387 16.0002,10.433 16.0002,11.6 C16.0002,14.03 14.0303,16 11.6002,16 C9.17012,16 7.2002,14.03 7.2002,11.6 Z M8.99796,12.3228 L11.0533,14.0514 L14.1962,9.98451 L13.486,9.43763 L10.9151,12.7628 L9.5762,11.6314 L8.99796,12.3228 Z" Fill="{StaticResource PMVersionCompatibleColorBrush}" />
      <Path Data="M6.5388,12.7986 C6.49265,12.7995 6.44638,12.8 6.4,12.8 C2.86538,12.8 0,9.93464 0,6.4 C0,2.86538 2.86538,0 6.4,0 C9.93464,0 12.8,2.86538 12.8,6.4 C12.8,6.44638 12.7995,6.49265 12.7986,6.5388 C12.4138,6.44803 12.0125,6.4 11.6,6.4 C11.4899,6.4 11.3807,6.40342 11.2723,6.41015 L9.23928,3.2133 C8.67128,3.4933 8.03928,3.6293 7.40726,3.6373 C6.78326,3.6373 6.16726,3.5013 5.60726,3.2373 C5.31926,3.0933 4.99926,3.0293 4.68726,3.0293 C4.14326,3.0373 3.63126,3.2533 3.24726,3.6293 L5.64726,7.2293 C6.03926,6.8453 6.55926,6.6293 7.10326,6.6293 C7.50326,6.6293 7.82326,6.7493 8.17528,6.8853 L8.20352,6.89578 C8.42608,6.97827 8.6624,7.06587 8.94056,7.13058 C7.92359,7.73702 7.13106,8.68064 6.7173,9.80728 L2.48738,3.54121 L1.95938,3.86921 L6.49538,10.6035 C6.43278,10.9261 6.4,11.2592 6.4,11.6 C6.4,12.0125 6.44803,12.4138 6.5388,12.7986 Z" Fill="#999999" />
    </Canvas>
  </ControlTemplate>
  <ControlTemplate x:Key="CustomCanvasTemplateIncompatible">
    <Canvas Width="18" Height="18" VerticalAlignment="Center" UseLayoutRounding="True">
      <Path Data="M11.1999 6.3999L6.3999 11.1999L11.1999 15.9999L15.9999 11.1999L11.1999 6.3999ZM10.7999 11.8185C10.7999 11.9174 10.8879 11.9999 10.9999 11.9999H11.3999C11.5119 11.9999 11.5999 11.9174 11.5999 11.8185L11.9999 9.1683C11.9999 9.06382 11.5759 8.7999 11.4639 8.7999H10.9359C10.8239 8.7999 10.3999 9.06382 10.3999 9.1683L10.7999 11.8185ZM11.1999 12.7999C10.7581 12.7999 10.3999 12.979 10.3999 13.1999C10.3999 13.4208 10.7581 13.5999 11.1999 13.5999C11.6417 13.5999 11.9999 13.4208 11.9999 13.1999C11.9999 12.979 11.6417 12.7999 11.1999 12.7999Z" Fill="{StaticResource PMVersionUncompatibleColorBrush}" />
      <Path Data="M6.5388,12.7986 C6.49265,12.7995 6.44638,12.8 6.4,12.8 C2.86538,12.8 0,9.93464 0,6.4 C0,2.86538 2.86538,0 6.4,0 C9.93464,0 12.8,2.86538 12.8,6.4 C12.8,6.44638 12.7995,6.49265 12.7986,6.5388 C12.4138,6.44803 12.0125,6.4 11.6,6.4 C11.4899,6.4 11.3807,6.40342 11.2723,6.41015 L9.23928,3.2133 C8.67128,3.4933 8.03928,3.6293 7.40726,3.6373 C6.78326,3.6373 6.16726,3.5013 5.60726,3.2373 C5.31926,3.0933 4.99926,3.0293 4.68726,3.0293 C4.14326,3.0373 3.63126,3.2533 3.24726,3.6293 L5.64726,7.2293 C6.03926,6.8453 6.55926,6.6293 7.10326,6.6293 C7.50326,6.6293 7.82326,6.7493 8.17528,6.8853 L8.20352,6.89578 C8.42608,6.97827 8.6624,7.06587 8.94056,7.13058 C7.92359,7.73702 7.13106,8.68064 6.7173,9.80728 L2.48738,3.54121 L1.95938,3.86921 L6.49538,10.6035 C6.43278,10.9261 6.4,11.2592 6.4,11.6 C6.4,12.0125 6.44803,12.4138 6.5388,12.7986 Z" Fill="#999999" />
    </Canvas>
  </ControlTemplate>
  <ControlTemplate x:Key="CustomCanvasTemplateUnknown">
    <Canvas Width="18" Height="18" VerticalAlignment="Center" UseLayoutRounding="True">
      <Path Data="M6.5388,12.7986 C6.49265,12.7995 6.44638,12.8 6.4,12.8 C2.86538,12.8 0,9.93464 0,6.4 C0,2.86538 2.86538,0 6.4,0 C9.93464,0 12.8,2.86538 12.8,6.4 C12.8,6.44638 12.7995,6.49265 12.7986,6.5388 C12.4138,6.44803 12.0125,6.4 11.6,6.4 C11.4899,6.4 11.3807,6.40342 11.2723,6.41015 L9.23928,3.2133 C8.67128,3.4933 8.03928,3.6293 7.40726,3.6373 C6.78326,3.6373 6.16726,3.5013 5.60726,3.2373 C5.31926,3.0933 4.99926,3.0293 4.68726,3.0293 C4.14326,3.0373 3.63126,3.2533 3.24726,3.6293 L5.64726,7.2293 C6.03926,6.8453 6.55926,6.6293 7.10326,6.6293 C7.50326,6.6293 7.82326,6.7493 8.17528,6.8853 L8.20352,6.89578 C8.42608,6.97827 8.6624,7.06587 8.94056,7.13058 C7.92359,7.73702 7.13106,8.68064 6.7173,9.80728 L2.48738,3.54121 L1.95938,3.86921 L6.49538,10.6035 C6.43278,10.9261 6.4,11.2592 6.4,11.6 C6.4,12.0125 6.44803,12.4138 6.5388,12.7986 Z" Fill="#999999" />
      <Path Data="M11.2002 9.6001C11.2002 8.98426 11.2128 8.36594 11.4276 7.89718C11.5243 7.68643 11.6536 7.52853 11.8344 7.41654C12.0185 7.30251 12.3143 7.2001 12.8005 7.2001C13.2867 7.2001 13.6857 7.31988 13.9475 7.53139C14.18 7.71935 14.4002 8.0557 14.4002 8.72738C14.4002 9.15706 14.1738 9.34922 13.4896 9.9297L13.4828 9.93562C13.176 10.1959 12.7946 10.5345 12.5 10.9987C12.1935 11.4818 12.0005 12.0668 12.0005 12.8001H13.6005C13.6005 12.3697 13.7075 12.0821 13.851 11.856C14.0064 11.6111 14.2248 11.4043 14.518 11.1555C14.5614 11.1187 14.6082 11.08 14.6575 11.0393C15.1868 10.6019 16.0002 9.92978 16.0002 8.72738C16.0002 7.65359 15.6204 6.8263 14.9532 6.28699C14.315 5.77123 13.5142 5.6001 12.8005 5.6001C12.0869 5.6001 11.4828 5.75223 10.9918 6.05639C10.4976 6.36258 10.1768 6.78649 9.97324 7.23029C9.59916 8.0461 9.5998 8.99514 9.60012 9.55106L9.6002 9.6001H11.2002Z" Fill="{StaticResource PMVersionUnknownColorBrush}" />
      <Path Data="M12.823 16.0001C13.4858 16.0001 14.023 15.4628 14.023 14.8001C14.023 14.1374 13.4858 13.6001 12.823 13.6001C12.1603 13.6001 11.623 14.1374 11.623 14.8001C11.623 15.4628 12.1603 16.0001 12.823 16.0001Z" Fill="{StaticResource PMVersionUnknownColorBrush}" />
    </Canvas>
  </ControlTemplate>
  <Style x:Key="ColumnHeaderStyle1" TargetType="{x:Type DataGridColumnHeader}">
    <Setter Property="Background" Value="{StaticResource PMHeaderBackgroundColorBrush}" />
    <Setter Property="BorderThickness" Value="0,0,1,1" />
    <Setter Property="BorderBrush" Value="{StaticResource DarkMidGreyBrush}" />
    <Setter Property="FontSize" Value="12" />
    <Setter Property="Padding" Value="4,8" />
    <Setter Property="UseLayoutRounding" Value="True" />
    <Setter Property="SnapsToDevicePixels" Value="True" />
  </Style>
  <Style BasedOn="{StaticResource {x:Type DataGridRow}}" TargetType="DataGridRow">
    <Setter Property="Background" Value="{StaticResource PMDataGridBackgroundColorBrush}" />
    <Setter Property="BorderThickness" Value="0" />
    <Setter Property="VerticalContentAlignment" Value="Center" />
    <Setter Property="BorderBrush" Value="{StaticResource DarkMidGreyBrush}" />
    <Setter Property="UseLayoutRounding" Value="True" />
    <Setter Property="SnapsToDevicePixels" Value="True" />
    <Style.Triggers>
      <Trigger Property="AlternationIndex" Value="1">
        <Setter Property="Background" Value="{StaticResource DarkMidGreyBrush}" />
      </Trigger>
      <Trigger Property="IsMouseOver" Value="True">
        <Setter Property="Background" Value="{StaticResource DarkGreyBrush}" />
      </Trigger>
      <Trigger Property="IsSelected" Value="True">
        <Setter Property="Background" Value="{StaticResource MidGreyBrush}" />
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="CellStyle1" TargetType="DataGridCell">
    <Setter Property="BorderThickness" Value="0" />
    <Setter Property="Margin" Value="1,0,0,0" />
    <Setter Property="UseLayoutRounding" Value="True" />
    <Setter Property="SnapsToDevicePixels" Value="True" />
    <Setter Property="Foreground" Value="#ffffff" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type DataGridCell}">
          <Grid Background="{TemplateBinding Background}">
            <ContentPresenter Margin="4,8" VerticalAlignment="Center" />
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Style.Triggers>
      <Trigger Property="IsSelected" Value="True">
        <Setter Property="Background" Value="{StaticResource DarkMidGreyBrush}" />
      </Trigger>
    </Style.Triggers>
  </Style>
  <DataTemplate x:Name="inPortViewModel" DataType="{x:Type viewModels:InPortViewModel}">
    <!--  Grid that contains the entire port  -->
    <Grid Name="MainGrid" Height="34px" Background="Transparent" IsHitTestVisible="True">
      <Grid.ColumnDefinitions>
        <ColumnDefinition Name="PortSnappingColumn" Width="25px" />
        <ColumnDefinition Name="ValueMarkerColumn" Width="5px" />
        <ColumnDefinition Name="GapBetweenValueMarkerAndPortName" Width="6px" />
        <ColumnDefinition Name="PortNameColumn" Width="*" />
        <ColumnDefinition Name="GapBetweenPortNameAndUseLevelSpinner" Width="6px" />
        <ColumnDefinition Name="UseLevelSpinnerColumn" Width="Auto" />
        <ColumnDefinition Name="ChevronColumn" Width="Auto" />
      </Grid.ColumnDefinitions>
      <interactivity:Interaction.Triggers>
        <!--  Bind Connect command to left click  -->
        <uiViews:HandlingEventTrigger EventName="MouseLeftButtonDown">
          <interactivity:InvokeCommandAction Command="{Binding Path=ConnectCommand}" />
        </uiViews:HandlingEventTrigger>
        <uiViews:HandlingEventTrigger EventName="MouseRightButtonDown">
          <interactivity:InvokeCommandAction Command="{Binding Path=NodePortContextMenuCommand}" CommandParameter="{Binding}" />
        </uiViews:HandlingEventTrigger>
      </interactivity:Interaction.Triggers>
      <!--  Bind NodeAutoComplete to double left click  -->
      <Grid.InputBindings>
        <MouseBinding Command="{Binding Path=NodeAutoCompleteCommand}" MouseAction="LeftDoubleClick" />
      </Grid.InputBindings>
      <!--  Enables Port Snapping  -->
      <Rectangle x:Name="PortSnapping" Grid.Column="0" Grid.ColumnSpan="7" Canvas.ZIndex="1" Fill="Transparent" IsHitTestVisible="{Binding IsHitTestVisible}" SnapsToDevicePixels="True">
        <interactivity:Interaction.Triggers>
          <uiViews:HandlingEventTrigger EventName="MouseEnter">
            <interactivity:InvokeCommandAction Command="{Binding Path=MouseEnterCommand}" CommandParameter="{Binding}" />
          </uiViews:HandlingEventTrigger>
          <uiViews:HandlingEventTrigger EventName="MouseLeave">
            <interactivity:InvokeCommandAction Command="{Binding Path=MouseLeaveCommand}" CommandParameter="{Binding}" />
          </uiViews:HandlingEventTrigger>
        </interactivity:Interaction.Triggers>
      </Rectangle>
      <!--  Sets the port background color  -->
      <Border x:Name="PortBackgroundBorder" Grid.Column="1" Grid.ColumnSpan="6" Height="29px" Background="{Binding PortBackgroundColor, UpdateSourceTrigger=PropertyChanged}" BorderThickness="0" CornerRadius="0,11,11,0" IsHitTestVisible="False" SnapsToDevicePixels="True" />
      <!--  A small marker on the left of the port, indicating whether it's been honored  -->
      <Rectangle x:Name="PortValueMarker" Grid.Column="1" Height="29px" VerticalAlignment="Center" Fill="{Binding PortValueMarkerColor, UpdateSourceTrigger=PropertyChanged}" IsHitTestVisible="False" SnapsToDevicePixels="True" />
      <!--  A rectangular marker indicating that the port has a default value  -->
      <Border x:Name="PortDefaultValueMarker" Grid.Column="0" Width="4" Height="27px" Margin="0,0,1,0" HorizontalAlignment="Right" Background="{Binding PortValueMarkerColor, UpdateSourceTrigger=PropertyChanged}" Visibility="{Binding PortDefaultValueMarkerVisible, Converter={StaticResource BooleanToVisibilityCollapsedConverter}}" />
      <!--  The name of this port  -->
      <TextBlock x:Name="PortNameTextBox" Grid.Column="3" Width="Auto" Margin="0,1,5,0" VerticalAlignment="Center" FontFamily="{StaticResource ArtifaktElementRegular}" FontSize="12px" Foreground="#DCDCDC" IsHitTestVisible="False" Text="{Binding Path=PortName}" />
      <!--  The small '>' marker users click on to open the port context menu  -->
      <TextBlock x:Name="Chevron" Grid.Column="6" Width="20px" Padding="0,1,1,0" VerticalAlignment="Center" FontSize="16px" Foreground="{StaticResource PrimaryCharcoal200Brush}" IsHitTestVisible="False" Text="&gt;" TextAlignment="Center" Visibility="{Binding UseLevelVisibility}" />
      <!--  A semi-transparent overlay which displays when users move their mouse over the port  -->
      <Border x:Name="MainBorderHighlightOverlay" Grid.Column="1" Grid.ColumnSpan="6" Height="29px" BorderBrush="Transparent" CornerRadius="0,11,11,0" IsHitTestVisible="True" Opacity="0.2" SnapsToDevicePixels="True">
        <Border.Style>
          <Style TargetType="Border">
            <Style.Triggers>
              <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="White" />
              </Trigger>
              <Trigger Property="IsMouseOver" Value="False">
                <Setter Property="Background" Value="Transparent" />
              </Trigger>
            </Style.Triggers>
          </Style>
        </Border.Style>
        <Border.ToolTip>
          <dynui:DynamoToolTip AttachmentSide="Left" Style="{DynamicResource ResourceKey=SLightToolTip}">
            <Grid>
              <TextBlock MaxWidth="320" Text="{Binding Path=ToolTipContent}" TextWrapping="Wrap" />
            </Grid>
          </dynui:DynamoToolTip>
        </Border.ToolTip>
      </Border>
      <!--  Contains the UseLevelSpinner, letting users select List Levels etc  -->
      <Grid Grid.Column="5" Visibility="{Binding Path=UseLevels, Converter={StaticResource BooleanToVisibilityConverter}}">
        <dynui:UseLevelSpinner x:Name="useLevelControl" Width="50px" Height="25px" VerticalAlignment="Center" Background="{StaticResource DarkGreyBrush}" DockPanel.Dock="Right" KeepListStructure="{Binding Path=ShouldKeepListStructure}" Level="{Binding Path=Level, Mode=TwoWay}" Visibility="{Binding UseLevelVisibility}" />
      </Grid>
      <!--  A semi-transparent overlay above the chevron, which displays when a user's mouse moves over it  -->
      <Border x:Name="ChevronHighlightOverlay" Grid.Column="6" Width="20px" Height="27px" CornerRadius="0,11,11,0" IsHitTestVisible="True" Visibility="{Binding UseLevelVisibility}">
        <Border.InputBindings>
          <MouseBinding Command="{Binding Path=NodePortContextMenuCommand}" MouseAction="LeftClick" />
        </Border.InputBindings>
        <Border.Style>
          <Style TargetType="{x:Type Border}">
            <Style.Triggers>
              <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="#E5E2DE" />
                <Setter Property="Opacity" Value="0.3" />
              </Trigger>
              <Trigger Property="IsMouseOver" Value="False">
                <Setter Property="Background" Value="#E5E2DE" />
                <Setter Property="Opacity" Value="0.0" />
              </Trigger>
            </Style.Triggers>
          </Style>
        </Border.Style>
      </Border>
      <!--  The outer border around this port  -->
      <Border x:Name="PortBorderBrush" Grid.Column="1" Grid.ColumnSpan="6" Height="29px" BorderBrush="{Binding PortBorderBrushColor, UpdateSourceTrigger=PropertyChanged}" BorderThickness="0,1,1,1" CornerRadius="0,11,11,0" IsHitTestVisible="True" SnapsToDevicePixels="True" />
    </Grid>
  </DataTemplate>
  <Style x:Key="MenuItemSeperatorStyle" TargetType="Separator">
    <Setter Property="Height" Value="1" />
    <Setter Property="Margin" Value="0,8" />
    <Setter Property="Opacity" Value="0.5" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="Separator">
          <Border BorderBrush="{StaticResource NodeContextMenuSeparatorColor}" BorderThickness="0,1,0,0" />
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="MenuItemStyle" TargetType="MenuItem">
    <Style.Resources>
      <!--  TopLevelHeader  -->
      <ControlTemplate x:Key="{x:Static MenuItem.TopLevelHeaderTemplateKey}" TargetType="MenuItem">
        <Border Name="Border" Height="35px" Padding="17,0" Background="#3C3C3C">
          <Grid>
            <Grid.ColumnDefinitions>
              <ColumnDefinition Width="Auto" />
              <ColumnDefinition Width="20px" />
            </Grid.ColumnDefinitions>
            <ContentPresenter Name="Content" Grid.Column="0" Margin="0,3,0,0" VerticalAlignment="Center" ContentSource="Header" RecognizesAccessKey="True" TextBlock.FontFamily="{StaticResource ArtifaktElementRegular}" TextBlock.FontSize="14px" />
            <Path Name="DownArrow" Grid.Column="1" Margin="0,3,0,0" Width="10px" Height="10px" HorizontalAlignment="Right" Data="M0,0 L4,6 L8,0Z" Fill="#EEEEEE" />
            <Popup Name="Popup" AllowsTransparency="True" Focusable="False" HorizontalOffset="-17" IsOpen="{TemplateBinding IsSubmenuOpen}" Placement="Bottom" PopupAnimation="Fade" VerticalOffset="0">
              <Border Name="SubmenuBorder" Margin="0,0,5,5" Background="{StaticResource NormalBackgroundBrush}" BorderBrush="{StaticResource NormalBorderBrush}" BorderThickness="1" SnapsToDevicePixels="True">
                <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Cycle" />
                <Border.Effect>
                  <DropShadowEffect BlurRadius="5" Opacity="0.4" ShadowDepth="3" />
                </Border.Effect>
              </Border>
            </Popup>
          </Grid>
        </Border>
        <ControlTemplate.Triggers>
          <Trigger Property="IsSuspendingPopupAnimation" Value="true">
            <Setter TargetName="Popup" Property="PopupAnimation" Value="None" />
          </Trigger>
          <Trigger Property="Border.IsMouseOver" Value="true">
            <Setter TargetName="Content" Property="TextBox.Foreground" Value="White" />
            <Setter TargetName="Border" Property="Background" Value="#424242" />
          </Trigger>
          <Trigger Property="IsSubmenuOpen" Value="true">
            <Setter TargetName="Border" Property="Background" Value="#424242" />
          </Trigger>
          <Trigger Property="Tag" Value="NoDownArrow">
            <Setter TargetName="DownArrow" Property="Visibility" Value="Collapsed" />
          </Trigger>
          <Trigger Property="IsEnabled" Value="True">
            <Setter Property="Foreground" Value="{StaticResource NormalForegroundBrush}" />
          </Trigger>
          <Trigger Property="IsEnabled" Value="False">
            <Setter Property="Foreground" Value="{StaticResource DisabledForegroundBrush}" />
          </Trigger>
        </ControlTemplate.Triggers>
      </ControlTemplate>
      <!--  TopLevelItem  -->
      <ControlTemplate x:Key="{x:Static MenuItem.TopLevelItemTemplateKey}" TargetType="MenuItem">
        <Border Name="Border" Margin="10,0,10,0" Padding="5,0,5,0" VerticalAlignment="Stretch" BorderBrush="Transparent" BorderThickness="1">
          <Grid>
            <ContentPresenter Margin="0" VerticalAlignment="Center" ContentSource="Header" RecognizesAccessKey="True" TextBlock.FontFamily="{StaticResource ArtifaktElementRegular}" TextBlock.FontSize="14px" TextBlock.Foreground="#AFAFAF" />
          </Grid>
        </Border>
        <ControlTemplate.Triggers>
          <Trigger Property="Border.IsMouseOver" Value="true">
            <Setter Property="Foreground" Value="{StaticResource ActiveForegroundBrush}" />
          </Trigger>
          <Trigger Property="IsPressed" Value="true">
            <Setter TargetName="Border" Property="Background" Value="{StaticResource HighlightedBrush}" />
            <Setter TargetName="Border" Property="BorderBrush" Value="{StaticResource HighlightedBrush}" />
          </Trigger>
          <Trigger Property="IsEnabled" Value="True">
            <Setter Property="Foreground" Value="{StaticResource NormalForegroundBrush}" />
          </Trigger>
          <Trigger Property="IsEnabled" Value="False">
            <Setter Property="Foreground" Value="{StaticResource DisabledForegroundBrush}" />
          </Trigger>
        </ControlTemplate.Triggers>
      </ControlTemplate>
      <!--  SubmenuHeader  -->
      <ControlTemplate x:Key="{x:Static MenuItem.SubmenuHeaderTemplateKey}" TargetType="MenuItem">
        <Border Name="Border" Height="35" Background="Transparent">
          <Grid>
            <Grid.ColumnDefinitions>
              <ColumnDefinition Width="17" />
              <ColumnDefinition Width="*" MinWidth="100" />
              <ColumnDefinition Width="Auto" SharedSizeGroup="Shortcut" />
              <ColumnDefinition Width="10" />
              <ColumnDefinition Width="10" />
            </Grid.ColumnDefinitions>
            <Border Name="CheckMarkBackground" Grid.Column="0" HorizontalAlignment="Stretch" Background="Transparent" Visibility="Visible" />
            <ContentPresenter Name="Icon" Grid.Column="0" Margin="6,0,6,0" VerticalAlignment="Center" ContentSource="Icon" />
            <ContentPresenter Name="HeaderHost" Grid.Column="1" Margin="0,0,60,0" HorizontalAlignment="Stretch" VerticalAlignment="Center" ContentSource="Header" RecognizesAccessKey="True" TextBlock.FontFamily="{StaticResource ArtifaktElementRegular}" TextBlock.FontSize="14px" />
            <TextBlock x:Name="InputGestureText" Grid.Column="2" Margin="0,2,2,2" HorizontalAlignment="Left" VerticalAlignment="Center" Text="{TemplateBinding InputGestureText}" TextBlock.FontFamily="{StaticResource ArtifaktElementRegular}" TextBlock.FontSize="13px" />
            <Label x:Name="Indicator" Grid.Column="3" Margin="0,0,0,7" Padding="0" VerticalAlignment="Center" Content="&gt;" FontFamily="{StaticResource ArtifaktElementRegular}" FontSize="13px" Foreground="#6AC0E7">
              <Label.RenderTransform>
                <ScaleTransform ScaleX="1" ScaleY="1.5" />
              </Label.RenderTransform>
            </Label>
            <Popup Name="Popup" AllowsTransparency="True" Focusable="False" HorizontalOffset="1" IsOpen="{TemplateBinding IsSubmenuOpen}" Placement="Right" PopupAnimation="Fade">
              <Border Name="SubmenuBorder" Margin="0,0,5,5" Background="{StaticResource NormalBackgroundBrush}" BorderBrush="{StaticResource NormalBorderBrush}" BorderThickness="1" SnapsToDevicePixels="True">
                <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Cycle" />
                <Border.Effect>
                  <DropShadowEffect BlurRadius="5" Opacity="0.4" ShadowDepth="3" />
                </Border.Effect>
              </Border>
            </Popup>
          </Grid>
        </Border>
        <ControlTemplate.Triggers>
          <Trigger Property="Icon" Value="{x:Null}">
            <Setter TargetName="Icon" Property="Visibility" Value="Collapsed" />
          </Trigger>
          <Trigger Property="IsHighlighted" Value="true">
            <Setter TargetName="Border" Property="Background" Value="{StaticResource HighlightedBrush}" />
            <Setter TargetName="HeaderHost" Property="TextBlock.Foreground" Value="{StaticResource ActiveForegroundBrush}" />
            <Setter TargetName="InputGestureText" Property="Foreground" Value="{StaticResource ActiveForegroundBrush}" />
            <Setter TargetName="Indicator" Property="Foreground" Value="{StaticResource ActiveForegroundBrush}" />
            <!--<Setter TargetName="HeaderHost" Property="TextBlock.FontWeight" Value="Bold"/>-->
            <Setter TargetName="Border" Property="BorderBrush" Value="Transparent" />
          </Trigger>
          <Trigger Property="IsEnabled" Value="True">
            <Setter Property="Foreground" Value="{StaticResource NormalForegroundBrush}" />
          </Trigger>
          <Trigger Property="IsEnabled" Value="false">
            <Setter Property="Foreground" Value="{StaticResource DisabledForegroundBrush}" />
            <Setter TargetName="Indicator" Property="Visibility" Value="Collapsed" />
          </Trigger>
        </ControlTemplate.Triggers>
      </ControlTemplate>
      <!--  SubmenuItem  -->
      <ControlTemplate x:Key="{x:Static MenuItem.SubmenuItemTemplateKey}" TargetType="MenuItem">
        <Border Name="Border" Height="35" Background="Transparent">
          <Grid Name="SubmenuItemGrid">
            <Grid.ColumnDefinitions>
              <ColumnDefinition Width="17" />
              <ColumnDefinition Width="*" MinWidth="100" />
              <ColumnDefinition Width="Auto" SharedSizeGroup="Shortcut" />
              <ColumnDefinition Width="10" />
            </Grid.ColumnDefinitions>
            <ContentPresenter Name="Icon" Grid.Column="0" Margin="6,0,6,0" VerticalAlignment="Center" ContentSource="Icon" TextBlock.FontFamily="{StaticResource ArtifaktElementRegular}" TextBlock.FontSize="14px" />
            <Border Name="CheckMarkBackground" Grid.Column="0" HorizontalAlignment="Stretch" Background="Transparent" Visibility="Visible">
              <Image Name="CheckMark" Margin="5,0,5,0" Width="8" Height="8" SnapsToDevicePixels="False" Source="pack://application:,,,/DynamoCoreWpf;component/UI/Images/tick_selected.png" Visibility="Hidden" />
            </Border>
            <ContentPresenter Name="HeaderHost" Grid.Column="1" Margin="0,0,60,0" HorizontalAlignment="Stretch" VerticalAlignment="Center" ContentSource="Header" RecognizesAccessKey="True" TextBlock.FontFamily="{StaticResource ArtifaktElementRegular}" TextBlock.FontSize="14px" />
            <TextBlock x:Name="InputGestureText" Grid.Column="2" Margin="5,0,0,2" HorizontalAlignment="Left" VerticalAlignment="Center" Text="{TemplateBinding InputGestureText}" TextBlock.FontFamily="{StaticResource ArtifaktElementRegular}" TextBlock.FontSize="13px" />
          </Grid>
        </Border>
        <ControlTemplate.Triggers>
          <Trigger Property="Icon" Value="{x:Null}">
            <Setter TargetName="Icon" Property="Visibility" Value="Hidden" />
          </Trigger>
          <Trigger Property="IsChecked" Value="true">
            <Setter TargetName="CheckMark" Property="Visibility" Value="Visible" />
          </Trigger>
          <Trigger Property="IsChecked" Value="false">
            <Setter TargetName="CheckMark" Property="Visibility" Value="Hidden" />
          </Trigger>
          <Trigger Property="IsHighlighted" Value="true">
            <Setter TargetName="Border" Property="Background" Value="{StaticResource HighlightedBrush}" />
            <Setter TargetName="HeaderHost" Property="TextBlock.Foreground" Value="{StaticResource ActiveForegroundBrush}" />
            <Setter TargetName="InputGestureText" Property="Foreground" Value="{StaticResource ActiveForegroundBrush}" />
            <Setter TargetName="CheckMark" Property="Source" Value="pack://application:,,,/DynamoCoreWpf;component/UI/Images/tick_selected.png" />
            <!--<Setter TargetName="HeaderHost" Property="TextBlock.FontWeight" Value="Bold"/>-->
            <Setter TargetName="Border" Property="BorderBrush" Value="Transparent" />
          </Trigger>
          <Trigger Property="IsEnabled" Value="True">
            <Setter Property="Foreground" Value="{StaticResource NormalForegroundBrush}" />
          </Trigger>
          <Trigger Property="IsEnabled" Value="false">
            <Setter Property="Foreground" Value="{StaticResource DisabledForegroundBrush}" />
          </Trigger>
        </ControlTemplate.Triggers>
      </ControlTemplate>
    </Style.Resources>
    <Setter Property="OverridesDefaultStyle" Value="True" />
    <Setter Property="Foreground" Value="{StaticResource NormalForegroundBrush}" />
    <Style.Triggers>
      <Trigger Property="Role" Value="TopLevelHeader">
        <Setter Property="Template" Value="{StaticResource {x:Static MenuItem.TopLevelHeaderTemplateKey}}" />
        <Setter Property="Grid.IsSharedSizeScope" Value="true" />
      </Trigger>
      <Trigger Property="Role" Value="TopLevelItem">
        <Setter Property="Template" Value="{StaticResource {x:Static MenuItem.TopLevelItemTemplateKey}}" />
      </Trigger>
      <Trigger Property="Role" Value="SubmenuHeader">
        <Setter Property="Template" Value="{StaticResource {x:Static MenuItem.SubmenuHeaderTemplateKey}}" />
      </Trigger>
      <Trigger Property="Role" Value="SubmenuItem">
        <Setter Property="Template" Value="{StaticResource {x:Static MenuItem.SubmenuItemTemplateKey}}" />
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="MainMenu" TargetType="{x:Type Menu}">
    <Setter Property="OverridesDefaultStyle" Value="True" />
    <Setter Property="SnapsToDevicePixels" Value="True" />
    <Setter Property="HorizontalAlignment" Value="Stretch" />
    <Setter Property="VerticalAlignment" Value="Stretch" />
    <Setter Property="FontFamily" Value="{StaticResource ArtifaktElementRegular}" />
    <Setter Property="FontSize" Value="14" />
    <Setter Property="Background" Value="Transparent" />
    <Setter Property="Margin" Value="0,0,0,0" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Menu}">
          <Border BorderThickness="1">
            <StackPanel ClipToBounds="True" IsItemsHost="True" Orientation="Horizontal" />
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Style.Resources>
      <!--  Seperator  -->
      <Style x:Key="{x:Static MenuItem.SeparatorStyleKey}" BasedOn="{StaticResource MenuItemSeperatorStyle}" TargetType="Separator" />
      <!--  MenuItem Style  -->
      <Style x:Key="{x:Type MenuItem}" BasedOn="{StaticResource MenuItemStyle}" TargetType="MenuItem" />
    </Style.Resources>
  </Style>
  <Style x:Key="ExtensionsStyle" BasedOn="{StaticResource MenuItemStyle}" TargetType="{x:Type MenuItem}">
    <Style.Resources>
      <ControlTemplate x:Key="Extensions" TargetType="MenuItem">
        <Border Name="Border" Margin="6,0,7,0" Padding="8,0,8,0" VerticalAlignment="Stretch" BorderBrush="Transparent" BorderThickness="1">
          <Grid>
            <Grid.ColumnDefinitions>
              <ColumnDefinition Width="25" />
              <ColumnDefinition Width="*" />
            </Grid.ColumnDefinitions>
            <ContentPresenter Name="Icon" Grid.Column="0" Margin="0,0,6,0" VerticalAlignment="Center" ContentSource="Icon" />
            <ContentPresenter Name="Content" Grid.Column="1" Margin="0,3,0,0" VerticalAlignment="Center" ContentSource="Header" RecognizesAccessKey="True" />
            <Popup Name="Popup" AllowsTransparency="True" Focusable="False" HorizontalOffset="-8" IsOpen="{TemplateBinding IsSubmenuOpen}" Placement="Bottom" PopupAnimation="Fade" VerticalOffset="2">
              <Border Name="SubmenuBorder" Margin="0,0,5,5" Background="{StaticResource NormalBackgroundBrush}" BorderBrush="{StaticResource NormalBorderBrush}" BorderThickness="1" SnapsToDevicePixels="True">
                <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Cycle" />
                <Border.Effect>
                  <DropShadowEffect BlurRadius="5" Opacity="0.4" ShadowDepth="3" />
                </Border.Effect>
              </Border>
            </Popup>
          </Grid>
        </Border>
        <ControlTemplate.Triggers>
          <Trigger Property="IsSuspendingPopupAnimation" Value="true">
            <Setter TargetName="Popup" Property="PopupAnimation" Value="None" />
          </Trigger>
          <Trigger Property="Border.IsMouseOver" Value="true">
            <Setter TargetName="Content" Property="TextBox.Foreground" Value="White" />
            <Setter TargetName="Border" Property="Background" Value="#424242" />
          </Trigger>
          <Trigger Property="IsSubmenuOpen" Value="true">
            <Setter TargetName="Border" Property="Background" Value="#424242" />
          </Trigger>
          <Trigger Property="IsEnabled" Value="True">
            <Setter Property="Foreground" Value="{StaticResource NormalForegroundBrush}" />
          </Trigger>
          <Trigger Property="IsEnabled" Value="False">
            <Setter Property="Foreground" Value="{StaticResource DisabledForegroundBrush}" />
          </Trigger>
        </ControlTemplate.Triggers>
      </ControlTemplate>
    </Style.Resources>
    <Style.Triggers>
      <Trigger Property="Role" Value="TopLevelHeader">
        <Setter Property="Template" Value="{StaticResource Extensions}" />
      </Trigger>
    </Style.Triggers>
  </Style>
  <DataTemplate x:Name="outPortViewModel" DataType="{x:Type viewModels:OutPortViewModel}">
    <!--  Grid that contains the entire port  -->
    <Grid Name="MainGrid" Background="Transparent" HorizontalAlignment="Right" IsHitTestVisible="True">
      <Grid.ColumnDefinitions>
        <ColumnDefinition Name="PortNameColumn" Width="*" />
        <ColumnDefinition Name="ValueMarkerColumn" Width="5px" />
        <ColumnDefinition Name="PortSnappingColumn" Width="25px" />
      </Grid.ColumnDefinitions>
      <interactivity:Interaction.Triggers>
        <!--  Bind Connect command to left click  -->
        <uiViews:HandlingEventTrigger EventName="MouseLeftButtonDown">
          <interactivity:InvokeCommandAction Command="{Binding Path=ConnectCommand}" />
        </uiViews:HandlingEventTrigger>
        <uiViews:HandlingEventTrigger EventName="MouseRightButtonDown">
          <interactivity:InvokeCommandAction Command="{Binding Path=NodePortContextMenuCommand}" CommandParameter="{Binding}" />
        </uiViews:HandlingEventTrigger>
      </interactivity:Interaction.Triggers>
      <!--  Bind NodeAutoComplete to double left click  -->
      <Grid.InputBindings>
        <MouseBinding Command="{Binding Path=NodeAutoCompleteCommand}" MouseAction="LeftDoubleClick" />
      </Grid.InputBindings>
      <Grid.Style>
        <Style>
          <Setter Property="Grid.Height" Value="34px" />
          <Style.Triggers>
            <DataTrigger Binding="{Binding Path=IsPortCondensed}" Value="True">
              <Setter Property="Grid.Height" Value="14px" />
              <Setter Property="Grid.Margin" Value="0,3,0,0" />
            </DataTrigger>
          </Style.Triggers>
        </Style>
      </Grid.Style>
      <!--  Transparent rectangle used for port snapping, overhangs the edge of the port  -->
      <Rectangle Grid.Column="0" x:Name="PortSnapping" Margin="-25,0,0,0" Grid.ColumnSpan="7" Canvas.ZIndex="1" Fill="Transparent" IsHitTestVisible="{Binding IsHitTestVisible}" SnapsToDevicePixels="True">
        <interactivity:Interaction.Triggers>
          <uiViews:HandlingEventTrigger EventName="MouseEnter">
            <interactivity:InvokeCommandAction Command="{Binding Path=MouseEnterCommand}" CommandParameter="{Binding}" />
          </uiViews:HandlingEventTrigger>
          <uiViews:HandlingEventTrigger EventName="MouseLeave">
            <interactivity:InvokeCommandAction Command="{Binding Path=MouseLeaveCommand}" CommandParameter="{Binding}" />
          </uiViews:HandlingEventTrigger>
        </interactivity:Interaction.Triggers>
      </Rectangle>
      <!--  Sets the port background color  -->
      <Border x:Name="PortBackgroundBorder" Grid.Column="0" Grid.ColumnSpan="2" SnapsToDevicePixels="True">
        <Border.Style>
          <Style TargetType="Border">
            <Setter Property="Background" Value="{Binding PortBackgroundColor, UpdateSourceTrigger=PropertyChanged}" />
            <Setter Property="Height" Value="29px" />
            <Setter Property="CornerRadius" Value="11,0,0,11" />
            <Setter Property="BorderThickness" Value="1,1,0,1" />
            <Setter Property="BorderBrush" Value="{Binding PortBorderBrushColor, UpdateSourceTrigger=PropertyChanged}" />
            <Style.Triggers>
              <!--  Used for styling output ports when they are 'condensed' i.e. on a code block  -->
              <DataTrigger Binding="{Binding Path=IsPortCondensed}" Value="True">
                <Setter Property="CornerRadius" Value="0" />
                <Setter Property="BorderThickness" Value="0" />
                <Setter Property="Height" Value="14px" />
                <Setter Property="Width" Value="20px" />
                <Setter Property="Background" Value="#666666" />
                <Setter Property="BorderBrush" Value="Transparent" />
              </DataTrigger>
            </Style.Triggers>
          </Style>
        </Border.Style>
      </Border>
      <!--  A small marker on the left of the port, indicating whether it's been honored  -->
      <Rectangle x:Name="PortValueMarker" Grid.Column="1" Height="27px" VerticalAlignment="Center" IsHitTestVisible="False" Visibility="{Binding PortDefaultValueMarkerVisible, Converter={StaticResource BooleanToVisibilityCollapsedConverter}}" SnapsToDevicePixels="True">
        <Rectangle.Style>
          <Style TargetType="Rectangle">
            <Style.Triggers>
              <DataTrigger Binding="{Binding ElementName=BorderHighlightOverlay, Path=IsMouseOver}" Value="True">
                <Setter Property="Fill" Value="Transparent" />
              </DataTrigger>
              <DataTrigger Binding="{Binding ElementName=BorderHighlightOverlay, Path=IsMouseOver}" Value="False">
                <Setter Property="Fill" Value="#999999" />
              </DataTrigger>
            </Style.Triggers>
          </Style>
        </Rectangle.Style>
      </Rectangle>
      <!--  Grid containing the Port Name TextBox  -->
      <Grid Name="PortNameGrid" Grid.Column="0" VerticalAlignment="Center" IsEnabled="{Binding Path=IsEnabled}" IsHitTestVisible="True" ToolTipService.ShowDuration="60000">
        <TextBlock Name="PortNameTextBox" VerticalAlignment="Center" FontFamily="{StaticResource ArtifaktElementRegular}" FontSize="12px" Foreground="#DCDCDC" IsHitTestVisible="False" Text="{Binding Path=PortName}">
          <TextBlock.Style>
            <Style TargetType="TextBlock">
              <Setter Property="Margin" Value="13,3,10,0" />
              <Style.Triggers>
                <DataTrigger Binding="{Binding Path=IsPortCondensed}" Value="True">
                  <Setter Property="Margin" Value="12,1,0,0" />
                </DataTrigger>
              </Style.Triggers>
            </Style>
          </TextBlock.Style>
        </TextBlock>
        <Grid.Style>
          <Style>
            <Setter Property="Grid.Height" Value="{Binding Path=Height}" />
            <Setter Property="Grid.Margin" Value="{Binding Path=MarginThickness}" />
            <Style.Triggers>
              <DataTrigger Binding="{Binding Path=IsPortCondensed}" Value="True">
                <Setter Property="Grid.Height" Value="14px" />
                <Setter Property="Grid.Margin" Value="0,1,2,0" />
              </DataTrigger>
            </Style.Triggers>
          </Style>
        </Grid.Style>
      </Grid>
      <!--  A semi-transparent border, which displays when the user's mouse moves over the port  -->
      <Border x:Name="BorderHighlightOverlay" Grid.Column="0" Grid.ColumnSpan="2" BorderBrush="Transparent" Opacity="0.2" SnapsToDevicePixels="True">
        <Border.Style>
          <Style TargetType="Border">
            <Setter Property="Height" Value="29px" />
            <Setter Property="CornerRadius" Value="11,0,0,11" />
            <Setter Property="BorderThickness" Value="1,1,0,1" />
            <Style.Triggers>
              <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="White" />
              </Trigger>
              <Trigger Property="IsMouseOver" Value="False">
                <Setter Property="Background" Value="Transparent" />
              </Trigger>
              <DataTrigger Binding="{Binding Path=IsPortCondensed}" Value="True">
                <Setter Property="CornerRadius" Value="0" />
                <Setter Property="BorderThickness" Value="0" />
                <Setter Property="Height" Value="{Binding Source={x:Static configuration:Configurations.CodeBlockOutputPortHeightInPixels}}" />
                <Setter Property="Width" Value="20px" />
                <Setter Property="Margin" Value="5,0,0,0" />
              </DataTrigger>
            </Style.Triggers>
          </Style>
        </Border.Style>
        <Border.ToolTip>
          <dynui:DynamoToolTip AttachmentSide="Right" Style="{DynamicResource ResourceKey=SLightToolTip}">
            <Grid>
              <TextBlock MaxWidth="320" Text="{Binding Path=ToolTipContent}" TextWrapping="Wrap" />
            </Grid>
          </dynui:DynamoToolTip>
        </Border.ToolTip>
      </Border>
    </Grid>
  </DataTemplate>
  <DataTemplate x:Name="portViewModel" DataType="{x:Type viewModels:PortViewModel}">
    <!--  Grid that contains the entire port  -->
    <Grid Name="mainGrid" HorizontalAlignment="Stretch">
      <!--
                The main border shows rounded edges and changes color according to multiple conditions
                This logic is defined in the ViewModel. None of the elements in this Border are interactive, so they
                can live in the lowest level of Z-Order
            -->
      <Border x:Name="mainBorder" SnapsToDevicePixels="True">
        <!--  DockPanel that positions the visible port name and the UseLevelArrow  -->
        <DockPanel x:Name="mainDockPanel" FlowDirection="LeftToRight">
          <Grid Name="portNameGrid" DockPanel.Dock="Left" IsEnabled="{Binding Path=IsEnabled}" IsHitTestVisible="True" ToolTipService.ShowDuration="60000">
            <Rectangle Fill="Transparent" IsHitTestVisible="{Binding IsHitTestVisible}" SnapsToDevicePixels="True">
              <interactivity:Interaction.Triggers>
                <uiViews:HandlingEventTrigger EventName="MouseEnter">
                  <interactivity:InvokeCommandAction Command="{Binding Path=MouseEnterCommand}" CommandParameter="{Binding}" />
                </uiViews:HandlingEventTrigger>
                <uiViews:HandlingEventTrigger EventName="MouseLeave">
                  <interactivity:InvokeCommandAction Command="{Binding Path=MouseLeaveCommand}" CommandParameter="{Binding}" />
                </uiViews:HandlingEventTrigger>
                <uiViews:HandlingEventTrigger EventName="MouseLeftButtonDown">
                  <interactivity:InvokeCommandAction Command="{Binding Path=MouseLeftButtonDownCommand}" CommandParameter="{Binding}" />
                </uiViews:HandlingEventTrigger>
              </interactivity:Interaction.Triggers>
              <Rectangle.Margin>
                <MultiBinding Converter="{StaticResource SnapRegionMarginConverter}">
                  <Binding ElementName="portNameTb" Path="ActualWidth" />
                  <Binding Path="PortModel" />
                </MultiBinding>
              </Rectangle.Margin>
            </Rectangle>
            <TextBlock Name="portNameTb" Width="Auto" HorizontalAlignment="Left" VerticalAlignment="Center" FontFamily="{StaticResource ArtifaktElementRegular}" FontSize="12px" FontWeight="Medium" Foreground="#DCDCDC" IsHitTestVisible="False" Text="{Binding Path=PortName}">
              <TextBlock.Style>
                <Style TargetType="TextBlock">
                  <Setter Property="Margin" Value="13,0,10,5" />
                  <Style.Triggers>
                    <DataTrigger Binding="{Binding Path=IsPortCondensed}" Value="True">
                      <Setter Property="Margin" Value="7,0,0,0" />
                    </DataTrigger>
                  </Style.Triggers>
                </Style>
              </TextBlock.Style>
            </TextBlock>
            <Grid.Style>
              <Style>
                <Setter Property="Grid.Height" Value="{Binding Path=Height}" />
                <Setter Property="Grid.Margin" Value="{Binding Path=MarginThickness}" />
                <Style.Triggers>
                  <DataTrigger Binding="{Binding Path=IsPortCondensed}" Value="True">
                    <Setter Property="Grid.Height" Value="14px" />
                    <Setter Property="Grid.Margin" Value="0,1,2,0" />
                  </DataTrigger>
                </Style.Triggers>
              </Style>
            </Grid.Style>
          </Grid>
          <Grid Width="50" DockPanel.Dock="Left" Visibility="{Binding Path=UseLevels, Converter={StaticResource BooleanToVisibilityCollapsedConverter}, FallbackValue=Collapsed}" />
          <Grid Name="useLevelArrowGrid" HorizontalAlignment="Right" Visibility="{Binding Path=UseLevelVisibility}">
            <Label x:Name="useLevelArrow" Height="{Binding Path=Height}" Margin="0,0,0,8" Padding="0" HorizontalAlignment="Center" VerticalAlignment="Center" HorizontalContentAlignment="Center" VerticalContentAlignment="Center" Content="&gt;" FontSize="16px" FontWeight="Medium" Foreground="{StaticResource PrimaryCharcoal200Brush}" IsHitTestVisible="False" Style="{StaticResource SZoomFadeLabel}" />
            <Grid.Style>
              <Style TargetType="Grid">
                <Setter Property="Height" Value="{Binding Path=Height}" />
                <Style.Triggers>
                  <DataTrigger Binding="{Binding Path=PortType}" Value="{x:Static graphNodes:PortType.Input}">
                    <Setter Property="Margin" Value="0,1,6,0" />
                  </DataTrigger>
                  <DataTrigger Binding="{Binding Path=PortType}" Value="{x:Static graphNodes:PortType.Output}">
                    <Setter Property="Margin" Value="0,1,10,0" />
                  </DataTrigger>
                  <DataTrigger Binding="{Binding Path=IsPortCondensed}" Value="True">
                    <Setter Property="Grid.Height" Value="{Binding Source={x:Static configuration:Configurations.CodeBlockOutputPortHeightInPixels}}" />
                    <Setter Property="Grid.Margin" Value="0" />
                  </DataTrigger>
                </Style.Triggers>
              </Style>
            </Grid.Style>
          </Grid>
        </DockPanel>
        <!--  Inputs and outputs have different corner radius and border conditions  -->
        <Border.Style>
          <Style TargetType="Border">
            <Setter Property="Background" Value="{Binding PortBackgroundColor, UpdateSourceTrigger=PropertyChanged}" />
            <Setter Property="Height" Value="29px" />
            <Setter Property="BorderBrush" Value="{Binding PortBorderBrushColor, UpdateSourceTrigger=PropertyChanged}" />
            <Style.Triggers>
              <DataTrigger Binding="{Binding Path=PortType}" Value="{x:Static graphNodes:PortType.Input}">
                <Setter Property="CornerRadius" Value="0,11,11,0" />
                <Setter Property="BorderThickness" Value="0,1,1,1" />
              </DataTrigger>
              <DataTrigger Binding="{Binding Path=PortType}" Value="{x:Static graphNodes:PortType.Output}">
                <Setter Property="CornerRadius" Value="11,0,0,11" />
                <Setter Property="BorderThickness" Value="1,1,0,1" />
              </DataTrigger>
              <DataTrigger Binding="{Binding Path=IsPortCondensed}" Value="True">
                <Setter Property="CornerRadius" Value="0" />
                <Setter Property="BorderThickness" Value="0" />
                <Setter Property="Height" Value="14px" />
                <Setter Property="Width" Value="20px" />
              </DataTrigger>
              <!--  Used for styling output ports when they are 'condensed' i.e. on a code block  -->
              <DataTrigger Binding="{Binding Path=IsPortCondensed}" Value="True">
                <Setter Property="Background" Value="#666666" />
                <Setter Property="BorderBrush" Value="Transparent" />
                <Setter Property="BorderThickness" Value="0" />
              </DataTrigger>
            </Style.Triggers>
          </Style>
        </Border.Style>
      </Border>
      <!--  Marker that appears to the left side of an input port  -->
      <Rectangle x:Name="portValueMarker" Width="6px" Height="29px" HorizontalAlignment="Left" VerticalAlignment="Center" Fill="{Binding PortValueMarkerColor, UpdateSourceTrigger=PropertyChanged}" SnapsToDevicePixels="True">
        <Rectangle.Style>
          <Style TargetType="Rectangle">
            <Setter Property="Visibility" Value="Visible" />
            <Style.Triggers>
              <DataTrigger Binding="{Binding Path=PortType}" Value="{x:Static graphNodes:PortType.Output}">
                <Setter Property="Visibility" Value="Collapsed" />
              </DataTrigger>
            </Style.Triggers>
          </Style>
        </Rectangle.Style>
      </Rectangle>
      <!--
                Interactive overlay for the port, highlights the port on MouseOver and
                contains MouseClick event handling and ToolTip logic. Since the overlay is interactive, it needs to
                live higher up in the Z-Order than the non-interactive elements in the mainBorder for MouseOver and
                MouseClick events to fire.
            -->
      <Border x:Name="mainBorderHighlightOverlay" BorderBrush="Transparent" Opacity="0.2" SnapsToDevicePixels="True">
        <Border.Style>
          <Style TargetType="Border">
            <Setter Property="Height" Value="29px" />
            <Style.Triggers>
              <DataTrigger Binding="{Binding Path=PortType}" Value="{x:Static graphNodes:PortType.Input}">
                <Setter Property="CornerRadius" Value="0,11,11,0" />
                <Setter Property="BorderThickness" Value="0,1,1,1" />
              </DataTrigger>
              <DataTrigger Binding="{Binding Path=PortType}" Value="{x:Static graphNodes:PortType.Output}">
                <Setter Property="CornerRadius" Value="11,0,0,11" />
                <Setter Property="BorderThickness" Value="1,1,0,1" />
              </DataTrigger>
              <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="White" />
              </Trigger>
              <Trigger Property="IsMouseOver" Value="False">
                <Setter Property="Background" Value="Transparent" />
              </Trigger>
              <DataTrigger Binding="{Binding Path=IsPortCondensed}" Value="True">
                <Setter Property="CornerRadius" Value="0" />
                <Setter Property="BorderThickness" Value="0" />
                <Setter Property="Height" Value="{Binding Source={x:Static configuration:Configurations.CodeBlockOutputPortHeightInPixels}}" />
                <Setter Property="Margin" Value="0" />
                <Setter Property="Width" Value="20px" />
              </DataTrigger>
            </Style.Triggers>
          </Style>
        </Border.Style>
        <interactivity:Interaction.Triggers>
          <!--  Bind Connect command to left click  -->
          <uiViews:HandlingEventTrigger EventName="MouseLeftButtonDown">
            <interactivity:InvokeCommandAction Command="{Binding Path=ConnectCommand}" />
          </uiViews:HandlingEventTrigger>
        </interactivity:Interaction.Triggers>
        <Border.ToolTip>
          <dynui:DynamoToolTip AttachmentSide="{Binding Path=PortType, Converter={StaticResource PortToAttachmentConverter}}" Style="{DynamicResource ResourceKey=SLightToolTip}">
            <Grid>
              <TextBlock MaxWidth="320" Text="{Binding Path=ToolTipContent}" TextWrapping="Wrap" />
            </Grid>
          </dynui:DynamoToolTip>
        </Border.ToolTip>
        <!--  Bind NodeAutoComplete to double left click  -->
        <Border.InputBindings>
          <MouseBinding Command="{Binding Path=NodeAutoCompleteCommand}" MouseAction="LeftDoubleClick" />
        </Border.InputBindings>
        <!--
                    We could have changed the Grid opacity directly here but didn't
                    The reason is that if the opacity of the Grid is modified, the
                    internal text box will also appear semi-transparent. This is why an
                    intermediary Border is required just for mouse-over highlighting.
                -->
        <!--
                    Port is contained in another rectangle to ensure that hit area is extended outside the grid.
                    Minimum Width is specified on the rectangle, rather than the grid. Otherwise, if the port's width is less than
                    the grid's width, the outside rectangle is shrinked to fit the grid. Port snapping cannot occur in that case
                    as no mouse events are generated.This happens only for codeblock node.
                -->
      </Border>
      <!--
                Contains the interactive elements which need to have the highest-level of Z-Order so that they
                may be interacted with *above* the mainBorderHighlightOverlay layer.
                This is the UseLevelsSpinner and UseLevelsControl.
            -->
      <DockPanel Name="interactionControlsDockPanel" Height="29px" HorizontalAlignment="Stretch" VerticalAlignment="Center" FlowDirection="LeftToRight" IsHitTestVisible="True" Visibility="{Binding Path=UseLevelVisibility}">
        <Rectangle x:Name="useLevelArrowHighlightOverlay" Width="15" Height="15px" HorizontalAlignment="Right" DockPanel.Dock="Right" IsHitTestVisible="True" Visibility="{Binding Path=UseLevelVisibility}">
          <interactivity:Interaction.Triggers>
            <uiViews:HandlingEventTrigger EventName="MouseLeftButtonDown">
              <interactivity:InvokeCommandAction Command="{Binding Path=MouseLeftButtonDownOnLevelCommand}" CommandParameter="{Binding}" />
            </uiViews:HandlingEventTrigger>
          </interactivity:Interaction.Triggers>
          <Rectangle.Style>
            <Style TargetType="{x:Type Rectangle}">
              <Style.Triggers>
                <DataTrigger Binding="{Binding Path=PortType}" Value="{x:Static graphNodes:PortType.Input}">
                  <Setter Property="Margin" Value="3,0,5,0" />
                </DataTrigger>
                <DataTrigger Binding="{Binding Path=PortType}" Value="{x:Static graphNodes:PortType.Output}">
                  <Setter Property="Margin" Value="0,0,8,0" />
                </DataTrigger>
                <Trigger Property="IsMouseOver" Value="True">
                  <Setter Property="Fill" Value="#E5E2DE" />
                  <Setter Property="Opacity" Value="0.3" />
                </Trigger>
                <Trigger Property="IsMouseOver" Value="False">
                  <Setter Property="Fill" Value="#E5E2DE" />
                  <Setter Property="Opacity" Value="0.0" />
                </Trigger>
              </Style.Triggers>
            </Style>
          </Rectangle.Style>
        </Rectangle>
        <TextBlock Name="fakePortNameTb" Width="Auto" Margin="13,0,10,5" HorizontalAlignment="Left" VerticalAlignment="Center" DockPanel.Dock="Left" FontFamily="{StaticResource ArtifaktElementRegular}" FontSize="12px" FontWeight="Medium" Foreground="Transparent" IsHitTestVisible="False" Opacity="0.4" Style="{StaticResource SZoomFadeText}" Text="{Binding Path=PortName}" />
        <dynui:UseLevelSpinner x:Name="useLevelControl" Width="50" Height="25" Margin="0,0,0,0" Background="{Binding UseLevelsMenuColor, UpdateSourceTrigger=PropertyChanged}" HorizontalAlignment="Right" VerticalAlignment="Center" DockPanel.Dock="Right" KeepListStructure="{Binding Path=ShouldKeepListStructure}" Level="{Binding Path=Level, Mode=TwoWay}" Visibility="{Binding UseLevelSpinnerVisible, UpdateSourceTrigger=PropertyChanged}" />
        <dynui:UseLevelPopup x:Name="UseLevelPopup" AllowsTransparency="True" IsOpen="{Binding Path=ShowUseLevelMenu}" Placement="Right" StaysOpen="False">
          <Grid Background="Transparent">
            <Grid.Resources>
              <ResourceDictionary>
                <Style TargetType="CheckBox">
                  <Setter Property="FontFamily" Value="{StaticResource ArtifaktElementRegular}" />
                  <Setter Property="Foreground" Value="{StaticResource DarkGreyBrush}" />
                  <Setter Property="Margin" Value="0" />
                  <Setter Property="FontSize" Value="14px" />
                  <Setter Property="Template">
                    <Setter.Value>
                      <ControlTemplate TargetType="{x:Type CheckBox}">
                        <Grid>
                          <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="20px" />
                            <ColumnDefinition Width="Auto" />
                          </Grid.ColumnDefinitions>
                          <Rectangle x:Name="outerRectangle" Grid.Column="0" Width="14px" Height="14px" Stroke="{StaticResource PrimaryCharcoal300Brush}" StrokeThickness="1" />
                          <Rectangle x:Name="highlightRectangle" Grid.Column="0" Width="14px" Height="14px" Fill="Transparent" Stroke="{StaticResource PrimaryCharcoal300Brush}" StrokeThickness="1" />
                          <Path x:Name="tick" Grid.Column="0" Width="14px" Height="14px" Data="M3,7 l3,3 l5,-6" Opacity="0" Stretch="None" Stroke="White" StrokeThickness="2" />
                          <ContentPresenter x:Name="content" Grid.Column="1" Margin="4,0,0,0" HorizontalAlignment="Center" VerticalAlignment="Center" TextBlock.Foreground="{StaticResource DarkGreyBrush}" />
                        </Grid>
                        <ControlTemplate.Triggers>
                          <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="highlightRectangle" Property="Fill" Value="LightGray" />
                          </Trigger>
                          <Trigger Property="IsChecked" Value="True">
                            <Setter TargetName="outerRectangle" Property="Fill" Value="{StaticResource PortUseLevelsCheckBoxColor}" />
                            <Setter TargetName="tick" Property="Opacity" Value="1.0" />
                          </Trigger>
                          <Trigger Property="IsChecked" Value="False">
                            <Setter TargetName="outerRectangle" Property="Fill" Value="Transparent" />
                            <Setter TargetName="tick" Property="Opacity" Value="0.0" />
                          </Trigger>
                          <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="highlightRectangle" Property="Stroke" Value="LightGray" />
                            <Setter TargetName="content" Property="TextBlock.Foreground" Value="LightGray" />
                          </Trigger>
                        </ControlTemplate.Triggers>
                      </ControlTemplate>
                    </Setter.Value>
                  </Setter>
                </Style>
              </ResourceDictionary>
            </Grid.Resources>
            <Grid.ColumnDefinitions>
              <ColumnDefinition Width="10" />
              <ColumnDefinition Width="*" />
            </Grid.ColumnDefinitions>
            <Path Grid.Column="0" Margin="1,0,0,0" Data="M 0,10 L 12,5 12,15 Z" Fill="White" Stroke="#999999" />
            <Border Grid.Column="1" Padding="5" Background="White" BorderBrush="#999999 " BorderThickness="1" CornerRadius="2">
              <StackPanel>
                <CheckBox Name="UseLevel" Margin="0,3,5,3" HorizontalAlignment="Left" Command="{Binding Path=UseLevelsCommand}" CommandParameter="{Binding Path=IsChecked, RelativeSource={RelativeSource Self}}" Content="{x:Static p:Resources.UseLevelPopupMenuItem}" IsChecked="{Binding Path=UseLevels, Mode=OneWay}" Visibility="{Binding UseLevelCheckBoxVisibility, Converter={StaticResource BooleanToVisibilityCollapsedConverter}}" />
                <CheckBox Margin="0,3,5,3" HorizontalAlignment="Left" Command="{Binding Path=KeepListStructureCommand}" CommandParameter="{Binding Path=IsChecked, RelativeSource={RelativeSource Self}}" Content="{x:Static p:Resources.UseLevelKeepListStructurePopupMenuItem}" IsChecked="{Binding Path=ShouldKeepListStructure, Mode=OneWay}" IsEnabled="{Binding ElementName=UseLevel, Path=IsChecked}" Visibility="{Binding UseLevelCheckBoxVisibility, Converter={StaticResource BooleanToVisibilityCollapsedConverter}}" />
                <CheckBox Margin="0,3,5,3" HorizontalAlignment="Left" Content="{x:Static p:Resources.PortViewContextMenuUserDefaultValue}" IsChecked="{Binding Path=UsingDefaultValue, Mode=TwoWay}" Visibility="{Binding UseDefaultValueCheckBoxVisibility, Converter={StaticResource BooleanToVisibilityCollapsedConverter}}" />
                <Button Margin="0,3" HorizontalAlignment="Left" Command="{Binding Path=BreakConnectionsCommand}" Content="{x:Static p:Resources.BreakConnectionsPopupMenuItem}" IsEnabled="{Binding OutputPortBreakConnectionsButtonEnabled, UpdateSourceTrigger=PropertyChanged}" Style="{StaticResource PopupButtonStyle}" Visibility="{Binding OutputPortConnectionsButtonsVisible, Converter={StaticResource BooleanToVisibilityCollapsedConverter}}" />
                <Button Margin="0,3" HorizontalAlignment="Left" Command="{Binding Path=HideConnectionsCommand}" Content="{Binding ShowHideWiresButtonContent, UpdateSourceTrigger=PropertyChanged}" IsEnabled="{Binding HideWiresButtonEnabled, UpdateSourceTrigger=PropertyChanged}" Style="{StaticResource PopupButtonStyle}" Visibility="{Binding OutputPortConnectionsButtonsVisible, Converter={StaticResource BooleanToVisibilityCollapsedConverter}}" />
                <Button Margin="0,3" HorizontalAlignment="Left" Command="{Binding Path=EditPortPropertiesCommand}" Content="{x:Static p:Resources.RenamePortPopupMenuItem}" IsEnabled="{Binding RenameNodeButtonEnabled, UpdateSourceTrigger=PropertyChanged}" Style="{StaticResource PopupButtonStyle}" Visibility="{Binding OutputPortConnectionsButtonsVisible, Converter={StaticResource BooleanToVisibilityCollapsedConverter}}" />
              </StackPanel>
            </Border>
            <Path Grid.Column="1" Data="M 0,7.5 L 1,7.5 L 1,12.5 L0,12.5 Z" Fill="White" Stroke="White" />
          </Grid>
        </dynui:UseLevelPopup>
      </DockPanel>
      <Grid.Style>
        <Style>
          <Setter Property="Grid.Height" Value="34px" />
          <Style.Triggers>
            <DataTrigger Binding="{Binding Path=IsPortCondensed}" Value="True">
              <Setter Property="Grid.Height" Value="14px" />
            </DataTrigger>
          </Style.Triggers>
        </Style>
      </Grid.Style>
    </Grid>
  </DataTemplate>
  <ControlTemplate x:Key="LibraryScrollBarTemplate" TargetType="{x:Type ScrollBar}">
    <Grid x:Name="Bg" SnapsToDevicePixels="true" Background="Transparent">
      <Grid.RowDefinitions>
        <RowDefinition Height="0.00001*" />
      </Grid.RowDefinitions>
      <Track x:Name="PART_Track" IsDirectionReversed="true" IsEnabled="{TemplateBinding IsMouseOver}">
        <Track.Thumb>
          <Thumb Template="{StaticResource LibraryThumbTemplate}" />
        </Track.Thumb>
      </Track>
    </Grid>
  </ControlTemplate>
  <ControlTemplate x:Key="InCanvasScrollBarTemplate" TargetType="{x:Type ScrollBar}">
    <Grid x:Name="GridRoot" Background="{TemplateBinding Background}">
      <Grid.LayoutTransform>
        <RotateTransform Angle="-90" />
      </Grid.LayoutTransform>
      <Track x:Name="PART_Track" IsDirectionReversed="true" Focusable="false">
        <Track.LayoutTransform>
          <RotateTransform Angle="-90" />
        </Track.LayoutTransform>
        <Track.Thumb>
          <Thumb x:Name="Thumb" Template="{StaticResource InCanvasThumbTemplate}" />
        </Track.Thumb>
      </Track>
    </Grid>
  </ControlTemplate>
  <ControlTemplate x:Key="InCanvasScrollViewerControlTemplate" TargetType="{x:Type ScrollViewer}">
    <Grid>
      <Grid.RowDefinitions>
        <RowDefinition Height="*" />
        <RowDefinition Height="Auto" />
      </Grid.RowDefinitions>
      <ScrollContentPresenter x:Name="PART_ScrollContentPresenter" Margin="{TemplateBinding Padding}" Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" CanContentScroll="{TemplateBinding CanContentScroll}" Grid.RowSpan="2" />
      <ScrollBar x:Name="PART_HorizontalScrollBar" Orientation="Horizontal" Grid.Row="1" Minimum="0.0" Maximum="{TemplateBinding ScrollableWidth}" ViewportSize="{TemplateBinding ViewportWidth}" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=HorizontalOffset, Mode=OneWay}" Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}" AutomationProperties.AutomationId="HorizontalScrollBar" Width="Auto" Template="{StaticResource InCanvasScrollBarTemplate}" />
    </Grid>
  </ControlTemplate>
  <ControlTemplate x:Key="LibraryToggleExpanderTemplate" TargetType="{x:Type ToggleButton}">
    <Border x:Name="ExpanderButtonBorder" Background="{TemplateBinding Property=Background}" Padding="{TemplateBinding Property=Padding}">
      <Grid Name="controlGrid" MinHeight="24" MinWidth="66">
        <Grid.ColumnDefinitions>
          <ColumnDefinition Width="Auto" />
          <ColumnDefinition Width="Auto" />
        </Grid.ColumnDefinitions>
        <Rectangle x:Name="ExpandPath" Width="1" Height="5" Stroke="Black" SnapsToDevicePixels="true" />
        <Rectangle Width="5" Height="1" Stroke="Black" SnapsToDevicePixels="true" />
        <Image x:Name="ExpandCollapseStateIcon" Source="pack://application:,,,/DynamoCoreWpf;component/UI/Images/collapsestate_normal.png" Width="16" Height="32" VerticalAlignment="Center" />
        <TextBlock x:Name="HeaderContent" Grid.Column="1" Text="{Binding Name}" VerticalAlignment="Center" TextBlock.FontSize="13" TextBlock.Foreground="{StaticResource NestedMemberTextColor}" Margin="8,0,0,0" />
      </Grid>
    </Border>
    <ControlTemplate.Triggers>
      <MultiDataTrigger>
        <MultiDataTrigger.Conditions>
          <Condition Binding="{Binding RelativeSource={RelativeSource AncestorType=Border},                                                                           Path=IsMouseOver}" Value="True" />
          <Condition Binding="{Binding RelativeSource={RelativeSource Self},                                                                           Path=IsChecked}" Value="False" />
        </MultiDataTrigger.Conditions>
        <MultiDataTrigger.Setters>
          <Setter Property="Source" TargetName="ExpandCollapseStateIcon" Value="pack://application:,,,/DynamoCoreWpf;component/UI/Images/collapsestate_hover.png" />
        </MultiDataTrigger.Setters>
      </MultiDataTrigger>
      <MultiDataTrigger>
        <MultiDataTrigger.Conditions>
          <Condition Binding="{Binding RelativeSource={RelativeSource AncestorType=Border},                                                                           Path=IsMouseOver}" Value="True" />
          <Condition Binding="{Binding RelativeSource={RelativeSource Self},                                                                           Path=IsChecked}" Value="True" />
        </MultiDataTrigger.Conditions>
        <MultiDataTrigger.Setters>
          <Setter Property="Source" TargetName="ExpandCollapseStateIcon" Value="pack://application:,,,/DynamoCoreWpf;component/UI/Images/expandstate_hover.png" />
          <Setter Property="TextBlock.FontWeight" TargetName="HeaderContent" Value="Semibold" />
        </MultiDataTrigger.Setters>
      </MultiDataTrigger>
      <MultiDataTrigger>
        <MultiDataTrigger.Conditions>
          <Condition Binding="{Binding RelativeSource={RelativeSource AncestorType=Border},                                                                       Path=IsMouseOver}" Value="False" />
          <Condition Binding="{Binding RelativeSource={RelativeSource Self},                                                                       Path=IsChecked}" Value="True" />
        </MultiDataTrigger.Conditions>
        <MultiDataTrigger.Setters>
          <Setter Property="Source" TargetName="ExpandCollapseStateIcon" Value="pack://application:,,,/DynamoCoreWpf;component/UI/Images/expandstate_normal.png" />
          <Setter Property="TextBlock.FontWeight" TargetName="HeaderContent" Value="Semibold" />
        </MultiDataTrigger.Setters>
      </MultiDataTrigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <DataTemplate x:Key="MemberTemplate">
    <StackPanel Name="ImageAndNodeName" Orientation="Horizontal" VerticalAlignment="Center">
      <StackPanel Visibility="{Binding Path=AutoCompletionNodeMachineLearningInfo.DisplayIcon, Converter={StaticResource BooleanToVisibilityConverter}}">
        <TextBlock HorizontalAlignment="Center" MinWidth="25" MaxWidth="33" FontSize="11" Margin="5,12,0,0" Visibility="{Binding Path=AutoCompletionNodeMachineLearningInfo.IsByRecommendation, Converter={StaticResource BooleanToVisibilityConverter}}" Text="{Binding AutoCompletionNodeMachineLearningInfo.ConfidenceScore, StringFormat= {}{0} %, Mode=OneWay, Converter={StaticResource ConfidenceScoreFormattingConverter}}" Foreground="{StaticResource DynamoStandardLabelTextBrush}" />
        <Image HorizontalAlignment="Center" Height="14" VerticalAlignment="Center" Width="14" Source="pack://application:,,,/DynamoCoreWpf;component/UI/Images/clock-icon.png" Margin="7,10,8,0" Visibility="{Binding Path=AutoCompletionNodeMachineLearningInfo.IsByUse, Converter={StaticResource BooleanToVisibilityConverter}}" />
      </StackPanel>
      <Image HorizontalAlignment="Left" Height="36" Margin="2,0,16,0" VerticalAlignment="Center" Width="24" Source="{Binding SmallIcon}" />
      <Grid Margin="-10,0,0,0">
        <Rectangle Fill="#3E464C" HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
          <Rectangle.Margin>
            <MultiBinding Converter="{StaticResource SearchHighlightMarginConverter}">
              <Binding ElementName="memberName" />
              <Binding Path="DataContext" RelativeSource="{RelativeSource Mode=FindAncestor,                                                                       AncestorType={x:Type UserControl}}" />
            </MultiBinding>
          </Rectangle.Margin>
        </Rectangle>
        <TextBlock Grid.Column="1" Name="memberName" HorizontalAlignment="Left" VerticalAlignment="Center" FontSize="13">
          <Run Text="{Binding Name, Mode=OneWay}" Foreground="{StaticResource CommonSidebarTextColor}" />
          <Run Text="{Binding Parameters, Mode=OneWay}" Foreground="#808285" />
        </TextBlock>
      </Grid>
    </StackPanel>
  </DataTemplate>
  <Style x:Key="LibraryScrollBarStyle" TargetType="{x:Type ScrollBar}">
    <Setter Property="Stylus.IsPressAndHoldEnabled" Value="false" />
    <Setter Property="Stylus.IsFlicksEnabled" Value="false" />
    <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
    <Setter Property="Template" Value="{StaticResource LibraryScrollBarTemplate}" />
  </Style>
  <Style x:Key="LibraryExpandCollapseToggleStyle" TargetType="{x:Type ToggleButton}">
    <Setter Property="Focusable" Value="False" />
    <Setter Property="Width" Value="24" />
    <Setter Property="Height" Value="{Binding Path=ActualHeight, RelativeSource={RelativeSource AncestorType=Grid}}" />
    <Setter Property="Padding" Value="0" />
    <Setter Property="Margin" Value="0" />
    <Setter Property="VerticalAlignment" Value="Center" />
    <Setter Property="Template" Value="{StaticResource LibraryToggleExpanderTemplate}" />
  </Style>
  <Style x:Key="ListBoxMemberGroupsStyle" TargetType="{x:Type ListBoxItem}">
    <Setter Property="BorderBrush" Value="Transparent" />
    <Setter Property="Background" Value="{StaticResource LibraryCommonBackground}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ListBoxItem}">
          <Border Background="{TemplateBinding Background}">
            <ContentPresenter ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" />
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="MemberGroupMemberStyle" TargetType="{x:Type ListBoxItem}">
    <Setter Property="BorderBrush" Value="Transparent" />
    <Setter Property="Height" Value="30" />
    <Setter Property="Background" Value="{StaticResource LibraryCommonBackground}" />
    <Setter Property="FocusVisualStyle" Value="{x:Null}" />
    <Setter Property="Visibility" Value="{Binding Path=Visibility, Converter={StaticResource BooleanToVisibilityCollapsedConverter}}" />
    <Setter Property="Focusable" Value="False" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ListBoxItem}">
          <Border Background="{TemplateBinding Background}">
            <ContentPresenter ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" />
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
              <Setter Property="Background" Value="{StaticResource LibraryMemberOnHover}" />
            </Trigger>
            <Trigger Property="IsSelected" Value="True">
              <Setter Property="Background" Value="{StaticResource LibraryMemberOnHover}" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <ControlTemplate x:Key="PackageManagerComboBoxToggleButton" TargetType="ToggleButton">
    <Grid>
      <Border x:Name="Border" Background="Transparent" BorderBrush="#a9a9a9" BorderThickness="0,0,0,1" />
      <Path x:Name="Arrow" Margin="0" HorizontalAlignment="Right" VerticalAlignment="Center" Data="M 0 0 L 4 4 L 8 0 Z" Fill="#999" />
    </Grid>
    <ControlTemplate.Triggers>
      <Trigger Property="ToggleButton.IsMouseOver" Value="true">
        <Setter TargetName="Arrow" Property="Fill" Value="#fff" />
      </Trigger>
      <Trigger Property="ToggleButton.IsChecked" Value="true">
        <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource BlueBrush}" />
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <Style x:Key="PackageManagerSmallComboBox" TargetType="{x:Type ComboBox}">
    <Setter Property="SnapsToDevicePixels" Value="true" />
    <Setter Property="OverridesDefaultStyle" Value="true" />
    <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto" />
    <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
    <Setter Property="ScrollViewer.CanContentScroll" Value="true" />
    <Setter Property="MinWidth" Value="40" />
    <Setter Property="Padding" Value="0" />
    <Setter Property="MinHeight" Value="20" />
    <Setter Property="MaxHeight" Value="40" />
    <Setter Property="FontSize" Value="10" />
    <Setter Property="Foreground" Value="#C7C7C7" />
    <Setter Property="ItemContainerStyle" Value="{DynamicResource PackageManagerComboBoxItemStyle}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="ComboBox">
          <Grid>
            <ToggleButton Name="ToggleButton" Grid.Column="2" ClickMode="Press" Focusable="false" IsChecked="{Binding Path=IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" Template="{DynamicResource PackageManagerComboBoxToggleButton}" />
            <ContentPresenter Name="ContentSite" Margin="1,3,12,3" HorizontalAlignment="Left" VerticalAlignment="Center" Content="{TemplateBinding SelectionBoxItem}" ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}" ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}" IsHitTestVisible="False" />
            <TextBox x:Name="PART_EditableTextBox" Margin="3,3,23,3" Padding="10" HorizontalAlignment="Left" VerticalAlignment="Center" Background="#666666" CaretBrush="#bbbbbb" Focusable="True" Foreground="#bbbbbb" IsReadOnly="{TemplateBinding IsReadOnly}" Style="{x:Null}" Template="{StaticResource ComboBoxTextBox}" Visibility="Hidden" />
            <Popup Name="Popup" AllowsTransparency="True" Focusable="False" IsOpen="{TemplateBinding IsDropDownOpen}" Placement="Bottom" PopupAnimation="Slide">
              <Grid Name="DropDown" MinWidth="{TemplateBinding ActualWidth}" MaxHeight="{TemplateBinding MaxDropDownHeight}" SnapsToDevicePixels="True">
                <Border x:Name="DropDownBorder" Background="#535353" BorderBrush="{DynamicResource MidLightBlueBrush}" BorderThickness="0,6,0,0" />
                <ScrollViewer Margin="0,6,0,6" SnapsToDevicePixels="True">
                  <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Contained" />
                </ScrollViewer>
              </Grid>
            </Popup>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="HasItems" Value="false">
              <Setter TargetName="DropDownBorder" Property="MinHeight" Value="95" />
            </Trigger>
            <Trigger Property="IsGrouping" Value="true">
              <Setter Property="ScrollViewer.CanContentScroll" Value="false" />
            </Trigger>
            <Trigger SourceName="Popup" Property="Popup.AllowsTransparency" Value="true">
              <Setter TargetName="DropDownBorder" Property="CornerRadius" Value="0" />
              <Setter TargetName="DropDownBorder" Property="Margin" Value="0,0,0,0" />
            </Trigger>
            <Trigger Property="IsEditable" Value="true">
              <Setter Property="IsTabStop" Value="false" />
              <Setter TargetName="PART_EditableTextBox" Property="Visibility" Value="Visible" />
              <Setter TargetName="ContentSite" Property="Visibility" Value="Hidden" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Style.Triggers />
  </Style>
  <Style x:Key="DataGridStyle1" TargetType="{x:Type DataGrid}">
    <Setter Property="ColumnHeaderStyle" Value="{DynamicResource ColumnHeaderStyle1}" />
    <Setter Property="RowStyle" Value="{x:Null}" />
    <Setter Property="FontFamily" Value="{StaticResource ArtifaktElementRegular}" />
    <Setter Property="CellStyle" Value="{DynamicResource CellStyle1}" />
    <Setter Property="RowHeaderWidth" Value="0" />
    <Setter Property="BorderThickness" Value="0.5" />
    <Setter Property="BorderBrush" Value="{StaticResource DarkMidGreyBrush}" />
    <Setter Property="ColumnWidth" Value="Auto" />
    <Setter Property="GridLinesVisibility" Value="Vertical" />
    <Setter Property="VerticalGridLinesBrush" Value="{StaticResource PMInnerVerticleLineColorBrush}" />
    <Setter Property="UseLayoutRounding" Value="True" />
    <Setter Property="SnapsToDevicePixels" Value="True" />
  </Style>
  <ControlTemplate x:Key="LibraryScrollViewerControlTemplate" TargetType="{x:Type ScrollViewer}">
    <Grid x:Name="Grid" Background="{TemplateBinding Background}">
      <Grid.ColumnDefinitions>
        <ColumnDefinition />
        <ColumnDefinition Width="Auto" />
      </Grid.ColumnDefinitions>
      <Grid.RowDefinitions>
        <RowDefinition />
        <RowDefinition Height="Auto" />
      </Grid.RowDefinitions>
      <ScrollContentPresenter x:Name="PART_ScrollContentPresenter" CanContentScroll="{TemplateBinding CanContentScroll}" CanHorizontallyScroll="False" CanVerticallyScroll="True" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" Grid.RowSpan="2" Margin="{TemplateBinding Padding}" Grid.ColumnSpan="2" />
      <ScrollBar x:Name="PART_VerticalScrollBar" AutomationProperties.AutomationId="VerticalScrollBar" Cursor="Arrow" Grid.Column="1" Maximum="{TemplateBinding ScrollableHeight}" Minimum="0" Grid.Row="0" Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}" Value="{Binding VerticalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" ViewportSize="{TemplateBinding ViewportHeight}" Width="8" Style="{DynamicResource LibraryScrollBarStyle}" />
    </Grid>
  </ControlTemplate>
</ResourceDictionary>