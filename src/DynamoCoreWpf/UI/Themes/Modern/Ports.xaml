<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:command="clr-namespace:GalaSoft.MvvmLight.Command;assembly=GalaSoft.MvvmLight.Platform"
    xmlns:controls="clr-namespace:Dynamo.Views;assembly=DynamoCore"
    xmlns:diag="clr-namespace:System.Diagnostics;assembly=WindowsBase"
    xmlns:dynui="clr-namespace:Dynamo.UI.Controls;assembly=DynamoCoreWpf"
    xmlns:fa="http://schemas.fontawesome.io/icons/"
    xmlns:interactivity="clr-namespace:System.Windows.Interactivity;assembly=System.Windows.Interactivity"
    xmlns:nodes="clr-namespace:Dynamo.Graph.Nodes;assembly=DynamoCore"
    xmlns:p="clr-namespace:Dynamo.Wpf.Properties;assembly=DynamoCoreWpf"
    xmlns:ui="clr-namespace:Dynamo.UI;assembly=DynamoCoreWpf"
    xmlns:viewModels="clr-namespace:Dynamo.ViewModels;assembly=DynamoCoreWpf"
    xmlns:views="clr-namespace:Dynamo.UI.Views;assembly=DynamoCoreWpf">

    <!-- Templates

    Use this to add color resources:
    ==========================================
    <Color x:Key="ColorKey" >#FFFFFFAE</Color>

    You can use this to create a style for a button, just change the TargetType or add
    other control separated by commas and add setter nodes to change properties:
    ==========================================
    <Style x:Key="SimpleStyle" TargetType="Button">
        <Setter Property="Background" Value="Red" />
    </Style>

    -->

    <!--  Add your resources here  -->

    <ResourceDictionary.MergedDictionaries>
        <ui:SharedResourceDictionary Source="{x:Static ui:SharedDictionaryManager.DynamoConvertersDictionaryUri}" />
        <ui:SharedResourceDictionary Source="{x:Static ui:SharedDictionaryManager.DynamoModernDictionaryUri}" />
    </ResourceDictionary.MergedDictionaries>
    <DataTemplate DataType="{x:Type viewModels:PortViewModel}">
        <Grid>
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="Auto" />
            </Grid.ColumnDefinitions>
            <Border
                x:Name="MainBorder"
                Grid.Column="0"
                Grid.ColumnSpan="2"
                Height="40px"
                Background="#4D4D4D"
                BorderBrush="#D5D5D5"
                Opacity="1.0"
                UseLayoutRounding="true">
                <StackPanel Orientation="Horizontal">
                    <Grid
                        Name="mainGrid"
                        Grid.Column="0"
                        Height="{Binding Path=Height}"
                        Margin="{Binding Path=MarginThickness}"
                        Background="Transparent"
                        IsEnabled="{Binding Path=IsEnabled}"
                        IsHitTestVisible="True"
                        ToolTipService.ShowDuration="60000">

                        <interactivity:Interaction.Triggers>
                            <!--  Bind Connect command to left click  -->
                            <views:HandlingEventTrigger EventName="MouseLeftButtonDown">
                                <interactivity:InvokeCommandAction Command="{Binding Path=ConnectCommand}" />
                            </views:HandlingEventTrigger>
                        </interactivity:Interaction.Triggers>

                        <Grid.ContextMenu>
                            <ContextMenu Visibility="{Binding Path=DefaultValueEnabled, Converter={StaticResource BooleanToVisibilityConverter}}">
                                <MenuItem
                                    Header="{x:Static p:Resources.PortViewContextMenuUserDefaultValue}"
                                    IsCheckable="True"
                                    IsChecked="{Binding Path=UsingDefaultValue, Mode=TwoWay}"
                                    IsEnabled="{Binding Path=DefaultValueEnabled, Mode=OneWay}" />
                            </ContextMenu>
                        </Grid.ContextMenu>

                        <Grid.ToolTip>
                            <dynui:DynamoToolTip AttachmentSide="{Binding Path=PortType, Converter={StaticResource PortToAttachmentConverter}}" Style="{DynamicResource ResourceKey=SLightToolTip}">
                                <Grid>
                                    <TextBlock
                                        MaxWidth="320"
                                        Text="{Binding Path=ToolTipContent}"
                                        TextWrapping="Wrap" />
                                </Grid>
                            </dynui:DynamoToolTip>
                        </Grid.ToolTip>

                        <!--  Bind NodeAutoComplete to double left click  -->
                        <Grid.InputBindings>
                            <MouseBinding Command="{Binding Path=NodeAutoCompleteCommand}" MouseAction="LeftDoubleClick" />
                        </Grid.InputBindings>

                        <!--
                            We could have changed the Grid opacity directly here but didn't
                            The reason is that if the opacity of the Grid is modified, the
                            internal text box will also appear semi-transparent. This is why an
                            intermediary Border is required just for mouse-over highlighting.
                        -->

                        <!--
                            Port is contained in another rectangle to ensure that hit area is extended outside the grid.
                            Minimum Width is specified on the rectangle, rather than the grid. Otherwise, if the port's width is less than
                            the grid's width, the outside rectangle is shrinked to fit the grid. Port snapping cannot occur in that case
                            as no mouse events are generated.This happens only for codeblock node.
                        -->
                        <Rectangle
                            Fill="Transparent"
                            IsHitTestVisible="{Binding IsHitTestVisible}"
                            SnapsToDevicePixels="True">
                            <interactivity:Interaction.Triggers>
                                <views:HandlingEventTrigger EventName="MouseEnter">
                                    <interactivity:InvokeCommandAction Command="{Binding Path=MouseEnterCommand}" CommandParameter="{Binding}" />
                                </views:HandlingEventTrigger>
                                <views:HandlingEventTrigger EventName="MouseLeave">
                                    <interactivity:InvokeCommandAction Command="{Binding Path=MouseLeaveCommand}" CommandParameter="{Binding}" />
                                </views:HandlingEventTrigger>
                                <views:HandlingEventTrigger EventName="MouseLeftButtonDown">
                                    <interactivity:InvokeCommandAction Command="{Binding Path=MouseLeftButtonDownCommand}" CommandParameter="{Binding}" />
                                </views:HandlingEventTrigger>
                            </interactivity:Interaction.Triggers>
                            <Rectangle.Margin>
                                <MultiBinding Converter="{StaticResource SnapRegionMarginConverter}">
                                    <Binding ElementName="portNameTb" Path="ActualWidth" />
                                    <Binding Path="PortModel" />
                                </MultiBinding>
                            </Rectangle.Margin>
                        </Rectangle>
                        <Rectangle
                            Name="highlightOverlay"
                            MinWidth="19"
                            Margin="0,0,0,0"
                            Fill="{Binding Path=ShouldKeepListStructure, Converter={StaticResource KeepListStructureHighlightColorConverter}}"
                            IsHitTestVisible="True">
                            <interactivity:Interaction.Triggers>
                                <views:HandlingEventTrigger EventName="MouseEnter">
                                    <interactivity:InvokeCommandAction Command="{Binding Path=MouseEnterCommand}" CommandParameter="{Binding}" />
                                </views:HandlingEventTrigger>
                                <views:HandlingEventTrigger EventName="MouseLeave">
                                    <interactivity:InvokeCommandAction Command="{Binding Path=MouseLeaveCommand}" CommandParameter="{Binding}" />
                                </views:HandlingEventTrigger>
                            </interactivity:Interaction.Triggers>
                            <Rectangle.Style>
                                <Style TargetType="{x:Type Rectangle}">
                                    <Style.Triggers>
                                        <Trigger Property="IsMouseOver" Value="True">
                                            <Setter Property="Opacity" Value="1.0" />
                                        </Trigger>
                                        <Trigger Property="IsMouseOver" Value="False">
                                            <Setter Property="Opacity" Value="0.0" />
                                        </Trigger>
                                    </Style.Triggers>
                                </Style>
                            </Rectangle.Style>
                        </Rectangle>     
                        <StackPanel HorizontalAlignment="Stretch" Orientation="Horizontal">
                            <TextBlock
                                Name="portNameTb"
                                Width="Auto"
                                Margin="13,0,13,8"
                                HorizontalAlignment="Stretch"
                                VerticalAlignment="Center"
                                FontFamily="{StaticResource ArtifaktElementRegular}"
                                FontSize="17px"
                                FontWeight="Regular"
                                Foreground="#D9D9D9"
                                IsHitTestVisible="False"
                                Style="{StaticResource SZoomFadeText}"
                                Text="{Binding Path=PortName, Converter={StaticResource PortNameConverter}}">

                                <!--<TextBlock.Style>
                            <Style TargetType="TextBlock">
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding UsingDefaultValue}" Value="True">
                                        <Setter Property="FontStyle" Value="Italic" />
                                    </DataTrigger>
                                    <DataTrigger Binding="{Binding UsingDefaultValue}" Value="False">
                                        <Setter Property="FontStyle" Value="Normal" />
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </TextBlock.Style>-->
                            </TextBlock>
                            <!--  We wrap the text block in a grid so that it wont be displayed on output port  -->
                            <Grid HorizontalAlignment="Right" Visibility="{Binding Path=UseLevelVisibility}">
                                <!--
                                    This is is a stub UI element just occupy the space of List@Level spinner
                                    so that input port highlight will get wider area if "Use Levels" option is off
                                -->
                                <Grid
                                    Width="45"
                                    HorizontalAlignment="Right"
                                    Background="{x:Null}"
                                    IsHitTestVisible="False"
                                    Visibility="{Binding Path=UseLevels, Converter={StaticResource InverseBoolToVisibilityCollapsedConverter}}" />
                            </Grid>
                        </StackPanel>
                    </Grid>

                    <Grid
                        Name="useLevelGrid"
                        Grid.Column="1"
                        Height="{Binding Path=Height}"
                        Margin="{Binding Path=MarginThickness}"

                        HorizontalAlignment="Stretch"
                        Background="Transparent"
                        Cursor="Hand"
                        IsHitTestVisible="True"                        
                        Visibility="{Binding Path=UseLevelVisibility}">
                        <Rectangle
                            Name="highlightOverlayForArrow"
                            MinWidth="10"
                            Margin="0,0,0,1"
                            Fill="{Binding Path=ShouldKeepListStructure, Converter={StaticResource KeepListStructureHighlightColorConverter}}"
                            IsHitTestVisible="True">
                            <interactivity:Interaction.Triggers>
                                <views:HandlingEventTrigger EventName="MouseLeftButtonDown">
                                    <interactivity:InvokeCommandAction Command="{Binding Path=MouseLeftButtonDownOnLevelCommand}" CommandParameter="{Binding}" />
                                </views:HandlingEventTrigger>
                            </interactivity:Interaction.Triggers>
                            <Rectangle.Style>
                                <Style TargetType="{x:Type Rectangle}">
                                    <Style.Triggers>
                                        <Trigger Property="IsMouseOver" Value="True">
                                            <Setter Property="Opacity" Value="1.0" />
                                        </Trigger>
                                        <Trigger Property="IsMouseOver" Value="False">
                                            <Setter Property="Opacity" Value="0.0" />
                                        </Trigger>
                                    </Style.Triggers>
                                </Style>
                            </Rectangle.Style>
                        </Rectangle>
                        <StackPanel Orientation="Horizontal">
                            <dynui:UseLevelSpinner
                                x:Name="useLevelSpinner"
                                Width="45"
                                Height="16"
                                VerticalAlignment="Center"
                                KeepListStructure="{Binding Path=ShouldKeepListStructure}"
                                Level="{Binding Path=Level, Mode=TwoWay}"
                                Visibility="{Binding Path=UseLevels, Converter={StaticResource BooleanToVisibilityCollapsedConverter}, FallbackValue=Collapsed}" />
                            <fa:FontAwesome
                                Width="15"
                                HorizontalAlignment="Center"
                                VerticalAlignment="Center"
                                Background="{x:Null}"
                                Margin="0,0,0,7"
                                Foreground="#D9D9D9"
                                FontSize="17px"
                                FontWeight="Regular"
                                Icon="ChevronRight"
                                IsHitTestVisible="False" />
                        </StackPanel>
                        <dynui:UseLevelPopup
                            x:Name="UseLevelPopup"
                            AllowsTransparency="True"
                            IsOpen="{Binding Path=ShowUseLevelMenu}"
                            Placement="Right"
                            StaysOpen="False">
                            <Grid Background="Transparent">
                                <Grid.Resources>
                                    <ResourceDictionary>
                                        <Style TargetType="CheckBox">
                                            <Setter Property="FontFamily" Value="{StaticResource OpenSansRegular}" />
                                            <Setter Property="Foreground" Value="#5E5C5A" />
                                            <Setter Property="FontSize" Value="12" />
                                            <Style.Triggers>
                                                <Trigger Property="IsEnabled" Value="false">
                                                    <Setter Property="Foreground" Value="#999999" />
                                                </Trigger>
                                            </Style.Triggers>
                                        </Style>
                                    </ResourceDictionary>
                                </Grid.Resources>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="10" />
                                    <ColumnDefinition Width="*" />
                                </Grid.ColumnDefinitions>
                                <Path
                                    Grid.Column="0"
                                    Margin="1,0,0,0"
                                    Data="M 0,10 L 12,5 12,15 Z"
                                    Fill="#E5E2DE"
                                    Stroke="#5E5C5A" />
                                <Border
                                    Grid.Column="1"
                                    Padding="2"
                                    Background="#E5E2DE"
                                    BorderBrush="#5E5C5A"
                                    BorderThickness="1"
                                    CornerRadius="2">
                                    <StackPanel>
                                        <CheckBox
                                            Name="UseLevel"
                                            Margin="5,5,5,0"
                                            Command="{Binding Path=UseLevelsCommand}"
                                            CommandParameter="{Binding Path=IsChecked, RelativeSource={RelativeSource Self}}"
                                            Content="{x:Static p:Resources.UseLevelPopupMenuItem}"
                                            IsChecked="{Binding Path=UseLevels, Mode=OneWay}" />
                                        <Separator Margin="5,5,5,0" />
                                        <CheckBox
                                            Margin="5,5,5,0"
                                            Command="{Binding Path=KeepListStructureCommand}"
                                            CommandParameter="{Binding Path=IsChecked, RelativeSource={RelativeSource Self}}"
                                            Content="{x:Static p:Resources.UseLevelKeepListStructurePopupMenuItem}"
                                            IsChecked="{Binding Path=ShouldKeepListStructure, Mode=OneWay}"
                                            IsEnabled="{Binding ElementName=UseLevel, Path=IsChecked}" />
                                        <TextBlock
                                            Margin="5,0,5,5"
                                            Padding="20,0,0,0"
                                            Focusable="False"
                                            FontFamily="{StaticResource OpenSansRegular}"
                                            FontSize="9"
                                            Foreground="#999999"
                                            Text="{x:Static p:Resources.UseLevelKeepListStructureHint}" />
                                    </StackPanel>
                                </Border>
                                <Path
                                    Grid.Column="1"
                                    Data="M 0,7.5 L 1,7.5 L 1,12.5 L0,12.5 Z"
                                    Fill="#E5E2DE"
                                    Stroke="#E5E2DE" />
                            </Grid>
                        </dynui:UseLevelPopup>
                    </Grid>
                </StackPanel>
                <Border.Style>
                    <Style TargetType="Border">
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding Path=PortType}" Value="{x:Static nodes:PortType.Input}">
                                <Setter Property="CornerRadius" Value="0,12,12,0" />
                                <Setter Property="BorderThickness" Value="0,2,2,2" />
                            </DataTrigger>
                            <DataTrigger Binding="{Binding Path=PortType}" Value="{x:Static nodes:PortType.Output}">
                                <Setter Property="CornerRadius" Value="12,0,0,12" />
                                <Setter Property="BorderThickness" Value="2,2,0,2" />
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </Border.Style>
            </Border>
        </Grid>
    </DataTemplate>
</ResourceDictionary>