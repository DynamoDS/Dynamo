<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:command="clr-namespace:GalaSoft.MvvmLight.Command;assembly=GalaSoft.MvvmLight.Platform"
                    xmlns:configuration="clr-namespace:Dynamo.Configuration;assembly=DynamoCore"
                    xmlns:controls="clr-namespace:Dynamo.Views;assembly=DynamoCore"
                    xmlns:diag="clr-namespace:System.Diagnostics;assembly=WindowsBase"
                    xmlns:dynui="clr-namespace:Dynamo.UI.Controls;assembly=DynamoCoreWpf"
                    xmlns:fa="http://schemas.fontawesome.io/icons/"
                    xmlns:interactivity="clr-namespace:Dynamo.Microsoft.Xaml.Behaviors;assembly=Dynamo.Microsoft.Xaml.Behaviors"
                    xmlns:nodes="clr-namespace:Dynamo.Graph.Nodes;assembly=DynamoCore"
                    xmlns:p="clr-namespace:Dynamo.Wpf.Properties;assembly=DynamoCoreWpf"
                    xmlns:ui="clr-namespace:Dynamo.UI;assembly=DynamoCoreWpf"
                    xmlns:viewModels="clr-namespace:Dynamo.ViewModels;assembly=DynamoCoreWpf"
                    xmlns:views="clr-namespace:Dynamo.UI.Views;assembly=DynamoCoreWpf">

    <!-- Templates

    Use this to add color resources:
    ==========================================
    <Color x:Key="ColorKey" >#FFFFFFAE</Color>

    You can use this to create a style for a button, just change the TargetType or add
    other control separated by commas and add setter nodes to change properties:
    ==========================================
    <Style x:Key="SimpleStyle" TargetType="Button">
        <Setter Property="Background" Value="Red" />
    </Style>

    -->

    <!--  Add your resources here  -->

    <ResourceDictionary.MergedDictionaries>
        <ui:SharedResourceDictionary Source="{x:Static ui:SharedDictionaryManager.DynamoConvertersDictionaryUri}" />
        <ui:SharedResourceDictionary Source="{x:Static ui:SharedDictionaryManager.DynamoColorsAndBrushesDictionaryUri}" />
        <ui:SharedResourceDictionary Source="{x:Static ui:SharedDictionaryManager.DynamoModernDictionaryUri}" />
    </ResourceDictionary.MergedDictionaries>
    <DataTemplate DataType="{x:Type viewModels:PortViewModel}">
        <!--  Grid that contains the entire port  -->
        <Grid Name="mainGrid" HorizontalAlignment="Stretch">
            <!--
                The main border shows rounded edges and changes color according to multiple conditions
                This logic is defined in the ViewModel. None of the elements in this Border are interactive, so they
                can live in the lowest level of Z-Order
            -->
            <Border x:Name="mainBorder" SnapsToDevicePixels="True">
                <!--  DockPanel that positions the visible port name and the UseLevelArrow  -->
                <DockPanel x:Name="mainDockPanel" FlowDirection="LeftToRight">
                    <Grid Name="portNameGrid"
                          DockPanel.Dock="Left"
                          IsEnabled="{Binding Path=IsEnabled}"
                          IsHitTestVisible="True"
                          ToolTipService.ShowDuration="60000">
                        <Rectangle Fill="Transparent"
                                   IsHitTestVisible="{Binding IsHitTestVisible}"
                                   SnapsToDevicePixels="True">
                            <interactivity:Interaction.Triggers>
                                <views:HandlingEventTrigger EventName="MouseEnter">
                                    <interactivity:InvokeCommandAction Command="{Binding Path=MouseEnterCommand}" CommandParameter="{Binding}" />
                                </views:HandlingEventTrigger>
                                <views:HandlingEventTrigger EventName="MouseLeave">
                                    <interactivity:InvokeCommandAction Command="{Binding Path=MouseLeaveCommand}" CommandParameter="{Binding}" />
                                </views:HandlingEventTrigger>
                                <views:HandlingEventTrigger EventName="MouseLeftButtonDown">
                                    <interactivity:InvokeCommandAction Command="{Binding Path=MouseLeftButtonDownCommand}" CommandParameter="{Binding}" />
                                </views:HandlingEventTrigger>
                            </interactivity:Interaction.Triggers>
                            <Rectangle.Margin>
                                <MultiBinding Converter="{StaticResource SnapRegionMarginConverter}">
                                    <Binding ElementName="portNameTb" Path="ActualWidth" />
                                    <Binding Path="PortModel" />
                                </MultiBinding>
                            </Rectangle.Margin>
                        </Rectangle>
                        <TextBlock Name="portNameTb"
                                   Width="Auto"
                                   HorizontalAlignment="Left"
                                   VerticalAlignment="Center"
                                   FontFamily="{StaticResource ArtifaktElementRegular}"
                                   FontSize="12px"
                                   FontWeight="Medium"
                                   Foreground="#DCDCDC"
                                   IsHitTestVisible="False"
                                   Text="{Binding Path=PortName}">
                            <TextBlock.Style>
                                <Style TargetType="TextBlock">
                                    <Setter Property="Margin" Value="13,0,10,5" />
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding Path=IsPortCondensed}" Value="True">
                                            <Setter Property="Margin" Value="7,0,0,0" />
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </TextBlock.Style>
                        </TextBlock>
                        <Grid.Style>
                            <Style>
                                <Setter Property="Grid.Height" Value="{Binding Path=Height}" />
                                <Setter Property="Grid.Margin" Value="{Binding Path=MarginThickness}" />
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding Path=IsPortCondensed}" Value="True">
                                        <Setter Property="Grid.Height" Value="14px" />
                                        <Setter Property="Grid.Margin" Value="0,1,2,0" />
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </Grid.Style>
                    </Grid>
                    <Grid Width="50"
                          DockPanel.Dock="Left"
                          Visibility="{Binding Path=UseLevels, Converter={StaticResource BooleanToVisibilityCollapsedConverter}, FallbackValue=Collapsed}" />
                    <Grid Name="useLevelArrowGrid"
                          HorizontalAlignment="Right"
                          Visibility="{Binding Path=UseLevelVisibility}">
                        <Label x:Name="useLevelArrow"
                               Height="{Binding Path=Height}"
                               Margin="0,0,0,8"
                               Padding="0"
                               HorizontalAlignment="Center"
                               VerticalAlignment="Center"
                               HorizontalContentAlignment="Center"
                               VerticalContentAlignment="Center"
                               Content="&gt;"
                               FontSize="16px"
                               FontWeight="Medium"
                               Foreground="{StaticResource PrimaryCharcoal200Brush}"
                               IsHitTestVisible="False"
                               Style="{StaticResource SZoomFadeLabel}" />
                        <Grid.Style>
                            <Style TargetType="Grid">
                                <Setter Property="Height" Value="{Binding Path=Height}" />
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding Path=PortType}" Value="{x:Static nodes:PortType.Input}">
                                        <Setter Property="Margin" Value="0,1,6,0" />
                                    </DataTrigger>
                                    <DataTrigger Binding="{Binding Path=PortType}" Value="{x:Static nodes:PortType.Output}">
                                        <Setter Property="Margin" Value="0,1,10,0" />
                                    </DataTrigger>
                                    <DataTrigger Binding="{Binding Path=IsPortCondensed}" Value="True">
                                        <Setter Property="Grid.Height" Value="{Binding Source={x:Static configuration:Configurations.CodeBlockOutputPortHeightInPixels}}" />
                                        <Setter Property="Grid.Margin" Value="0" />
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </Grid.Style>
                    </Grid>
                </DockPanel>
                <!--  Inputs and outputs have different corner radius and border conditions  -->
                <Border.Style>
                    <Style TargetType="Border">
                        <Setter Property="Background" Value="{Binding PortBackgroundColor, UpdateSourceTrigger=PropertyChanged}" />
                        <Setter Property="Height" Value="29px" />
                        <Setter Property="BorderBrush" Value="{Binding PortBorderBrushColor, UpdateSourceTrigger=PropertyChanged}" />
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding Path=PortType}" Value="{x:Static nodes:PortType.Input}">
                                <Setter Property="CornerRadius" Value="0,11,11,0" />
                                <Setter Property="BorderThickness" Value="0,1,1,1" />
                            </DataTrigger>
                            <DataTrigger Binding="{Binding Path=PortType}" Value="{x:Static nodes:PortType.Output}">
                                <Setter Property="CornerRadius" Value="11,0,0,11" />
                                <Setter Property="BorderThickness" Value="1,1,0,1" />
                            </DataTrigger>
                            <DataTrigger Binding="{Binding Path=IsPortCondensed}" Value="True">
                                <Setter Property="CornerRadius" Value="0" />
                                <Setter Property="BorderThickness" Value="0" />
                                <Setter Property="Height" Value="14px" />
                                <Setter Property="Width" Value="20px" />
                            </DataTrigger>
                            <!--  Used for styling output ports when they are 'condensed' i.e. on a code block  -->
                            <DataTrigger Binding="{Binding Path=IsPortCondensed}" Value="True">
                                <Setter Property="Background" Value="#666666" />
                                <Setter Property="BorderBrush" Value="Transparent" />
                                <Setter Property="BorderThickness" Value="0" />
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </Border.Style>
            </Border>
            <!--  Marker that appears to the left side of an input port  -->
            <Rectangle x:Name="portValueMarker"
                       Width="6px"
                       Height="29px"
                       HorizontalAlignment="Left"
                       VerticalAlignment="Center"
                       Fill="{Binding PortValueMarkerColor, UpdateSourceTrigger=PropertyChanged}"
                       SnapsToDevicePixels="True">
                <Rectangle.Style>
                    <Style TargetType="Rectangle">
                        <Setter Property="Visibility" Value="Visible" />
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding Path=PortType}" Value="{x:Static nodes:PortType.Output}">
                                <Setter Property="Visibility" Value="Collapsed" />
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </Rectangle.Style>
            </Rectangle>
            <!--
                Interactive overlay for the port, highlights the port on MouseOver and
                contains MouseClick event handling and ToolTip logic. Since the overlay is interactive, it needs to
                live higher up in the Z-Order than the non-interactive elements in the mainBorder for MouseOver and
                MouseClick events to fire.
            -->
            <Border x:Name="mainBorderHighlightOverlay"
                    BorderBrush="Transparent"
                    Opacity="0.2"
                    SnapsToDevicePixels="True">
                <Border.Style>
                    <Style TargetType="Border">
                        <Setter Property="Height" Value="29px" />
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding Path=PortType}" Value="{x:Static nodes:PortType.Input}">
                                <Setter Property="CornerRadius" Value="0,11,11,0" />
                                <Setter Property="BorderThickness" Value="0,1,1,1" />
                            </DataTrigger>
                            <DataTrigger Binding="{Binding Path=PortType}" Value="{x:Static nodes:PortType.Output}">
                                <Setter Property="CornerRadius" Value="11,0,0,11" />
                                <Setter Property="BorderThickness" Value="1,1,0,1" />
                            </DataTrigger>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="Background" Value="White" />
                            </Trigger>
                            <Trigger Property="IsMouseOver" Value="False">
                                <Setter Property="Background" Value="Transparent" />
                            </Trigger>
                            <DataTrigger Binding="{Binding Path=IsPortCondensed}" Value="True">
                                <Setter Property="CornerRadius" Value="0" />
                                <Setter Property="BorderThickness" Value="0" />
                                <Setter Property="Height" Value="{Binding Source={x:Static configuration:Configurations.CodeBlockOutputPortHeightInPixels}}" />
                                <Setter Property="Margin" Value="0" />
                                <Setter Property="Width" Value="20px" />
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </Border.Style>
                <interactivity:Interaction.Triggers>
                    <!--  Bind Connect command to left click  -->
                    <views:HandlingEventTrigger EventName="MouseLeftButtonDown">
                        <interactivity:InvokeCommandAction Command="{Binding Path=ConnectCommand}" />
                    </views:HandlingEventTrigger>
                </interactivity:Interaction.Triggers>

                <Border.ToolTip>
                    <dynui:DynamoToolTip AttachmentSide="{Binding Path=PortType, Converter={StaticResource PortToAttachmentConverter}}" Style="{DynamicResource ResourceKey=SLightToolTip}">
                        <Grid>
                            <TextBlock MaxWidth="320"
                                       Text="{Binding Path=ToolTipContent}"
                                       TextWrapping="Wrap" />
                        </Grid>
                    </dynui:DynamoToolTip>
                </Border.ToolTip>

                <!--  Bind NodeAutoComplete to double left click  -->
                <Border.InputBindings>
                    <MouseBinding Command="{Binding Path=NodeAutoCompleteCommand}" MouseAction="LeftDoubleClick" />
                </Border.InputBindings>

                <!--
                    We could have changed the Grid opacity directly here but didn't
                    The reason is that if the opacity of the Grid is modified, the
                    internal text box will also appear semi-transparent. This is why an
                    intermediary Border is required just for mouse-over highlighting.
                -->

                <!--
                    Port is contained in another rectangle to ensure that hit area is extended outside the grid.
                    Minimum Width is specified on the rectangle, rather than the grid. Otherwise, if the port's width is less than
                    the grid's width, the outside rectangle is shrinked to fit the grid. Port snapping cannot occur in that case
                    as no mouse events are generated.This happens only for codeblock node.
                -->
            </Border>
            <!--
                Contains the interactive elements which need to have the highest-level of Z-Order so that they
                may be interacted with *above* the mainBorderHighlightOverlay layer.
                This is the UseLevelsSpinner and UseLevelsControl.
            -->
            <DockPanel Name="interactionControlsDockPanel"
                       Height="29px"
                       HorizontalAlignment="Stretch"
                       VerticalAlignment="Center"
                       FlowDirection="LeftToRight"
                       IsHitTestVisible="True"
                       Visibility="{Binding Path=UseLevelVisibility}">
                <Rectangle x:Name="useLevelArrowHighlightOverlay"
                           Width="15"
                           Height="15px"
                           HorizontalAlignment="Right"
                           DockPanel.Dock="Right"
                           IsHitTestVisible="True"
                           Visibility="{Binding Path=UseLevelVisibility}">
                    <interactivity:Interaction.Triggers>
                        <views:HandlingEventTrigger EventName="MouseLeftButtonDown">
                            <interactivity:InvokeCommandAction Command="{Binding Path=MouseLeftButtonDownOnLevelCommand}" CommandParameter="{Binding}" />
                        </views:HandlingEventTrigger>
                    </interactivity:Interaction.Triggers>
                    <Rectangle.Style>
                        <Style TargetType="{x:Type Rectangle}">
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding Path=PortType}" Value="{x:Static nodes:PortType.Input}">
                                    <Setter Property="Margin" Value="3,0,5,0" />
                                </DataTrigger>
                                <DataTrigger Binding="{Binding Path=PortType}" Value="{x:Static nodes:PortType.Output}">
                                    <Setter Property="Margin" Value="0,0,8,0" />
                                </DataTrigger>
                                <Trigger Property="IsMouseOver" Value="True">
                                    <Setter Property="Fill" Value="#E5E2DE" />
                                    <Setter Property="Opacity" Value="0.3" />
                                </Trigger>
                                <Trigger Property="IsMouseOver" Value="False">
                                    <Setter Property="Fill" Value="#E5E2DE" />
                                    <Setter Property="Opacity" Value="0.0" />
                                </Trigger>
                            </Style.Triggers>
                        </Style>
                    </Rectangle.Style>
                </Rectangle>
                <TextBlock Name="fakePortNameTb"
                           Width="Auto"
                           Margin="13,0,10,5"
                           HorizontalAlignment="Left"
                           VerticalAlignment="Center"
                           DockPanel.Dock="Left"
                           FontFamily="{StaticResource ArtifaktElementRegular}"
                           FontSize="12px"
                           FontWeight="Medium"
                           Foreground="Transparent"
                           IsHitTestVisible="False"
                           Opacity="0.4"
                           Style="{StaticResource SZoomFadeText}"
                           Text="{Binding Path=PortName}" />
                <dynui:UseLevelSpinner x:Name="useLevelControl"
                                       Width="50"
                                       Height="25"
                                       Margin="0,0,0,0"
                                       Background="{Binding UseLevelsMenuColor, UpdateSourceTrigger=PropertyChanged}"
                                       HorizontalAlignment="Right"
                                       VerticalAlignment="Center"
                                       DockPanel.Dock="Right"
                                       KeepListStructure="{Binding Path=ShouldKeepListStructure}"
                                       Level="{Binding Path=Level, Mode=TwoWay}"
                                       Visibility="{Binding UseLevelSpinnerVisible, UpdateSourceTrigger=PropertyChanged}" />
                <dynui:UseLevelPopup x:Name="UseLevelPopup"
                                     AllowsTransparency="True"
                                     IsOpen="{Binding Path=ShowUseLevelMenu}"
                                     Placement="Right"
                                     StaysOpen="False">
                    <Grid Background="Transparent">
                        <Grid.Resources>
                            <ResourceDictionary>
                                <Style TargetType="CheckBox">
                                    <Setter Property="FontFamily" Value="{StaticResource ArtifaktElementRegular}" />
                                    <Setter Property="Foreground" Value="{StaticResource DarkGreyBrush}" />
                                    <Setter Property="Margin" Value="0" />
                                    <Setter Property="FontSize" Value="14px" />
                                    <Setter Property="Template">
                                        <Setter.Value>
                                            <ControlTemplate TargetType="{x:Type CheckBox}">
                                                <Grid>
                                                    <Grid.ColumnDefinitions>
                                                        <ColumnDefinition Width="20px" />
                                                        <ColumnDefinition Width="Auto" />
                                                    </Grid.ColumnDefinitions>
                                                    <Rectangle x:Name="outerRectangle"
                                                               Grid.Column="0"
                                                               Width="14px"
                                                               Height="14px"
                                                               Stroke="{StaticResource PrimaryCharcoal300Brush}"
                                                               StrokeThickness="1" />
                                                    <Rectangle x:Name="highlightRectangle"
                                                               Grid.Column="0"
                                                               Width="14px"
                                                               Height="14px"
                                                               Fill="Transparent"
                                                               Stroke="{StaticResource PrimaryCharcoal300Brush}"
                                                               StrokeThickness="1" />
                                                    <Path x:Name="tick"
                                                          Grid.Column="0"
                                                          Width="14px"
                                                          Height="14px"
                                                          Data="M3,7 l3,3 l5,-6"
                                                          Opacity="0"
                                                          Stretch="None"
                                                          Stroke="White"
                                                          StrokeThickness="2" />
                                                    <ContentPresenter x:Name="content"
                                                                      Grid.Column="1"
                                                                      Margin="4,0,0,0"
                                                                      HorizontalAlignment="Center"
                                                                      VerticalAlignment="Center"
                                                                      TextBlock.Foreground="{StaticResource DarkGreyBrush}" />
                                                </Grid>
                                                <ControlTemplate.Triggers>
                                                    <Trigger Property="IsMouseOver" Value="True">
                                                        <Setter TargetName="highlightRectangle" Property="Fill" Value="LightGray" />
                                                    </Trigger>
                                                    <Trigger Property="IsChecked" Value="True">
                                                        <Setter TargetName="outerRectangle" Property="Fill" Value="{StaticResource PortUseLevelsCheckBoxColor}" />
                                                        <Setter TargetName="tick" Property="Opacity" Value="1.0" />
                                                    </Trigger>
                                                    <Trigger Property="IsChecked" Value="False">
                                                        <Setter TargetName="outerRectangle" Property="Fill" Value="Transparent" />
                                                        <Setter TargetName="tick" Property="Opacity" Value="0.0" />
                                                    </Trigger>
                                                    <Trigger Property="IsEnabled" Value="False">
                                                        <Setter TargetName="highlightRectangle" Property="Stroke" Value="LightGray" />
                                                        <Setter TargetName="content" Property="TextBlock.Foreground" Value="LightGray" />
                                                    </Trigger>
                                                </ControlTemplate.Triggers>
                                            </ControlTemplate>
                                        </Setter.Value>
                                    </Setter>
                                </Style>
                            </ResourceDictionary>
                        </Grid.Resources>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="10" />
                            <ColumnDefinition Width="*" />
                        </Grid.ColumnDefinitions>
                        <Path Grid.Column="0"
                              Margin="1,0,0,0"
                              Data="M 0,10 L 12,5 12,15 Z"
                              Fill="White"
                              Stroke="#999999" />
                        <Border Grid.Column="1"
                                Padding="5"
                                Background="White"
                                BorderBrush="#999999 "
                                BorderThickness="1"
                                CornerRadius="2">
                            <StackPanel>
                                <CheckBox Name="UseLevel"
                                          Margin="0,3,5,3"
                                          HorizontalAlignment="Left"
                                          Command="{Binding Path=UseLevelsCommand}"
                                          CommandParameter="{Binding Path=IsChecked, RelativeSource={RelativeSource Self}}"
                                          Content="{x:Static p:Resources.UseLevelPopupMenuItem}"
                                          IsChecked="{Binding Path=UseLevels, Mode=OneWay}"
                                          Visibility="{Binding UseLevelCheckBoxVisibility, Converter={StaticResource BooleanToVisibilityCollapsedConverter}}" />
                                <CheckBox Margin="0,3,5,3"
                                          HorizontalAlignment="Left"
                                          Command="{Binding Path=KeepListStructureCommand}"
                                          CommandParameter="{Binding Path=IsChecked, RelativeSource={RelativeSource Self}}"
                                          Content="{x:Static p:Resources.UseLevelKeepListStructurePopupMenuItem}"
                                          IsChecked="{Binding Path=ShouldKeepListStructure, Mode=OneWay}"
                                          IsEnabled="{Binding ElementName=UseLevel, Path=IsChecked}"
                                          Visibility="{Binding UseLevelCheckBoxVisibility, Converter={StaticResource BooleanToVisibilityCollapsedConverter}}" />
                                <CheckBox Margin="0,3,5,3"
                                          HorizontalAlignment="Left"
                                          Content="{x:Static p:Resources.PortViewContextMenuUserDefaultValue}"
                                          IsChecked="{Binding Path=UsingDefaultValue, Mode=TwoWay}"
                                          Visibility="{Binding UseDefaultValueCheckBoxVisibility, Converter={StaticResource BooleanToVisibilityCollapsedConverter}}" />
                                <Button Margin="0,3"
                                        HorizontalAlignment="Left"
                                        Command="{Binding Path=BreakConnectionsCommand}"
                                        Content="{x:Static p:Resources.BreakConnectionPopupMenuItem}"
                                        IsEnabled="{Binding OutputPortBreakConnectionsButtonEnabled, UpdateSourceTrigger=PropertyChanged}"
                                        Style="{StaticResource PopupButtonStyle}"
                                        Visibility="{Binding OutputPortConnectionsButtonsVisible, Converter={StaticResource BooleanToVisibilityCollapsedConverter}}" />
                                <Button Margin="0,3"
                                        HorizontalAlignment="Left"
                                        Command="{Binding Path=HideConnectionsCommand}"
                                        Content="{Binding ShowHideWiresButtonContent, UpdateSourceTrigger=PropertyChanged}"
                                        IsEnabled="{Binding HideWiresButtonEnabled, UpdateSourceTrigger=PropertyChanged}"
                                        Style="{StaticResource PopupButtonStyle}"
                                        Visibility="{Binding OutputPortConnectionsButtonsVisible, Converter={StaticResource BooleanToVisibilityCollapsedConverter}}" />

                                <Button Margin="0,3"
                                        HorizontalAlignment="Left"
                                        Command="{Binding Path=EditPortPropertiesCommand}"
                                        Content="{x:Static p:Resources.RenamePortPopupMenuItem}"
                                        IsEnabled="{Binding RenameNodeButtonEnabled, UpdateSourceTrigger=PropertyChanged}"
                                        Style="{StaticResource PopupButtonStyle}"
                                        Visibility="{Binding OutputPortConnectionsButtonsVisible, Converter={StaticResource BooleanToVisibilityCollapsedConverter}}" />

                            </StackPanel>
                        </Border>
                        <Path Grid.Column="1"
                              Data="M 0,7.5 L 1,7.5 L 1,12.5 L0,12.5 Z"
                              Fill="White"
                              Stroke="White" />
                    </Grid>
                </dynui:UseLevelPopup>
            </DockPanel>
            <Grid.Style>
                <Style>
                    <Setter Property="Grid.Height" Value="35px" />
                    <Style.Triggers>
                        <DataTrigger Binding="{Binding Path=IsPortCondensed}" Value="True">
                            <Setter Property="Grid.Height" Value="14px" />
                        </DataTrigger>
                    </Style.Triggers>
                </Style>
            </Grid.Style>
        </Grid>
    </DataTemplate>
</ResourceDictionary>
