<ResourceDictionary   xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                      xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                      xmlns:controls="clr-namespace:Dynamo.Views;assembly=DynamoCore"
                      xmlns:viewModels="clr-namespace:Dynamo.ViewModels;assembly=DynamoCoreWpf"
                      xmlns:dynui="clr-namespace:Dynamo.UI.Controls;assembly=DynamoCoreWpf"
                      xmlns:interactivity="clr-namespace:System.Windows.Interactivity;assembly=System.Windows.Interactivity"
                      xmlns:views="clr-namespace:Dynamo.UI.Views;assembly=DynamoCoreWpf"
                      xmlns:ui="clr-namespace:Dynamo.UI;assembly=DynamoCoreWpf"
                      xmlns:fa="http://schemas.fontawesome.io/icons/"
                      xmlns:diag="clr-namespace:System.Diagnostics;assembly=WindowsBase"
                      xmlns:command="clr-namespace:GalaSoft.MvvmLight.Command;assembly=GalaSoft.MvvmLight.Platform"
                      xmlns:p="clr-namespace:Dynamo.Wpf.Properties;assembly=DynamoCoreWpf">

    <!-- Templates
        
    Use this to add color resources:
    ==========================================
    <Color x:Key="ColorKey" >#FFFFFFAE</Color>
    
    You can use this to create a style for a button, just change the TargetType or add 
    other control separated by commas and add setter nodes to change properties:
    ==========================================
    <Style x:Key="SimpleStyle" TargetType="Button">
        <Setter Property="Background" Value="Red" />
    </Style>
        
    -->

    <!-- Add your resources here -->

    <ResourceDictionary.MergedDictionaries>
        <ui:SharedResourceDictionary Source="{x:Static ui:SharedDictionaryManager.DynamoConvertersDictionaryUri}" />
        <ui:SharedResourceDictionary Source="{x:Static ui:SharedDictionaryManager.DynamoModernDictionaryUri}" />
    </ResourceDictionary.MergedDictionaries>
    <DataTemplate DataType="{x:Type viewModels:PortViewModel}">
        <Grid>
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*"/>
                <ColumnDefinition Width="Auto"/>
            </Grid.ColumnDefinitions>
            <Grid
                Name="mainGrid"
                Grid.Column="0"
                Background="Transparent"
                IsHitTestVisible="True"
                Margin="{Binding Path=MarginThickness}"
                Height="{Binding Path=Height}"
                ToolTipService.ShowDuration="60000"
                IsEnabled="{Binding Path=IsEnabled}">

                <interactivity:Interaction.Triggers>
                    <views:HandlingEventTrigger EventName="MouseLeftButtonDown">
                        <interactivity:InvokeCommandAction Command="{Binding Path=ConnectCommand}" />
                    </views:HandlingEventTrigger>
                </interactivity:Interaction.Triggers>

                <Grid.ContextMenu>
                    <ContextMenu Visibility="{Binding Path=DefaultValueEnabled, Converter={StaticResource BooleanToVisibilityConverter}}">
                        <MenuItem
                            Header="{x:Static p:Resources.PortViewContextMenuUserDefaultValue}"
                            IsCheckable="True"
                            IsEnabled="{Binding Path=DefaultValueEnabled, Mode=OneWay}"
                            IsChecked="{Binding Path=UsingDefaultValue, Mode=TwoWay}" />
                    </ContextMenu>
                </Grid.ContextMenu>

                <Grid.ToolTip>
                    <dynui:DynamoToolTip AttachmentSide="{Binding Path=PortType, Converter={StaticResource PortToAttachmentConverter}}" Style="{DynamicResource ResourceKey=SLightToolTip}">
                        <Grid>
                            <TextBlock MaxWidth="320" TextWrapping="Wrap" Text="{Binding Path=ToolTipContent}"></TextBlock>
                        </Grid>
                    </dynui:DynamoToolTip>
                </Grid.ToolTip>

                <!--
                We could have changed the Grid opacity directly here but didn't
                The reason is that if the opacity of the Grid is modified, the 
                internal text box will also appear semi-transparent. This is why an 
                intermediary Border is required just for mouse-over highlighting.
            -->

                <!--
               Port is contained in another rectangle to ensure that hit area is extended outside the grid.
               Minimum Width is specified on the rectangle, rather than the grid. Otherwise, if the port's width is less than
               the grid's width, the outside rectangle is shrinked to fit the grid. Port snapping cannot occur in that case 
               as no mouse events are generated.This happens only for codeblock node. 
            -->
                <Rectangle
                    Fill="Transparent"
                    SnapsToDevicePixels="True"
                    IsHitTestVisible="{Binding IsHitTestVisible}">

                    <interactivity:Interaction.Triggers>
                        <views:HandlingEventTrigger EventName="MouseEnter">
                            <interactivity:InvokeCommandAction Command="{Binding Path=MouseEnterCommand}" CommandParameter="{Binding}" />
                        </views:HandlingEventTrigger>
                        <views:HandlingEventTrigger EventName="MouseLeave">
                            <interactivity:InvokeCommandAction Command="{Binding Path=MouseLeaveCommand}" CommandParameter="{Binding}" />
                        </views:HandlingEventTrigger>
                        <views:HandlingEventTrigger EventName="MouseLeftButtonDown">
                            <interactivity:InvokeCommandAction Command="{Binding Path=MouseLeftButtonDownCommand}" CommandParameter="{Binding}" />
                        </views:HandlingEventTrigger>
                    </interactivity:Interaction.Triggers>
                    <Rectangle.Margin>
                        <MultiBinding Converter="{StaticResource SnapRegionMarginConverter}">
                            <Binding ElementName="portNameTb" Path="ActualWidth"/>
                            <Binding Path="PortModel"/>
                        </MultiBinding>
                    </Rectangle.Margin>
                </Rectangle>
                <Rectangle Name="highlightOverlay"
                       Fill="{Binding Path=ShouldKeepListStructure, Converter={StaticResource KeepListStructureHighlightColorConverter}}"
                       MinWidth="19"
                       Margin="0,0,0,1"
                       IsHitTestVisible="True">
                    <interactivity:Interaction.Triggers>
                        <views:HandlingEventTrigger EventName="MouseEnter">
                            <interactivity:InvokeCommandAction Command="{Binding Path=MouseEnterCommand}" CommandParameter="{Binding}" />
                        </views:HandlingEventTrigger>
                        <views:HandlingEventTrigger EventName="MouseLeave">
                            <interactivity:InvokeCommandAction Command="{Binding Path=MouseLeaveCommand}" CommandParameter="{Binding}" />
                        </views:HandlingEventTrigger>
                    </interactivity:Interaction.Triggers>
                    <Rectangle.Style>
                        <Style TargetType="{x:Type Rectangle}">
                            <Style.Triggers>
                                <Trigger Property="IsMouseOver" Value="True">
                                    <Setter Property="Opacity" Value="1.0"></Setter>
                                </Trigger>
                                <Trigger Property="IsMouseOver" Value="False">
                                    <Setter Property="Opacity" Value="0.5"></Setter>
                                </Trigger>
                            </Style.Triggers>
                        </Style>
                    </Rectangle.Style>
                </Rectangle>

                <StackPanel Orientation="Horizontal" HorizontalAlignment="Stretch">
                    <TextBlock Name="portNameTb"
                       Width="Auto"
                       HorizontalAlignment="Stretch"
                       Style="{StaticResource SZoomFadeText}"
                       Text="{Binding Path=PortName, Converter={StaticResource PortNameConverter} }"
                       VerticalAlignment="Center"
                       FontSize="13"
                       FontFamily="{StaticResource OpenSansRegular}"
                       Padding="6,7,6,7"
                       IsHitTestVisible="False"
                       Background="{x:Null}"
                       Foreground="#555555">
                        <TextBlock.Style>
                            <Style TargetType="TextBlock">
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding UsingDefaultValue}" Value="True">
                                        <Setter Property="FontStyle"
                                                Value="Italic" />
                                    </DataTrigger>
                                    <DataTrigger Binding="{Binding UsingDefaultValue}" Value="False">
                                        <Setter Property="FontStyle"
                                                Value="Normal" />
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </TextBlock.Style>
                </TextBlock>
                <!-- We wrap the text block in a grid so that it wont be displayed on output port-->
                <Grid Visibility="{Binding Path=UseLevelVisibility}" HorizontalAlignment="Right"> 
                    <!-- This is is a stub UI element just occupy the space of List@Level spinner
                         so that input port highlight will get wider area if "Use Levels" option is off -->
                    <Grid
                        HorizontalAlignment="Right"
                        Width="45"
                        Background="{x:Null}"
                        IsHitTestVisible="False"
                        Visibility="{Binding Path=UseLevels, Converter={StaticResource InverseBoolToVisibilityCollapsedConverter}}"/>
                </Grid>
                </StackPanel>
            </Grid>

            <Grid Name="useLevelGrid"
                  Cursor="Hand"
                  Grid.Column="1"
                  Background="Transparent"
                  HorizontalAlignment="Stretch"
                  IsHitTestVisible="True"
                  Margin="{Binding Path=MarginThickness}"
                  Height="{Binding Path=Height}"
                  Visibility="{Binding Path=UseLevelVisibility}">
                <Rectangle
                    Name="highlightOverlayForArrow" 
                    Fill="{Binding Path=ShouldKeepListStructure, Converter={StaticResource KeepListStructureHighlightColorConverter}}"
                    MinWidth="10"
                    Margin="0,0,0,1"
                    IsHitTestVisible="True">
                    <interactivity:Interaction.Triggers>
                        <views:HandlingEventTrigger EventName="MouseLeftButtonDown">
                            <interactivity:InvokeCommandAction Command="{Binding Path=MouseLeftButtonDownOnLevelCommand}" CommandParameter="{Binding}" />
                        </views:HandlingEventTrigger>
                    </interactivity:Interaction.Triggers>
                    <Rectangle.Style>
                        <Style TargetType="{x:Type Rectangle}">
                            <Style.Triggers>
                                <Trigger Property="IsMouseOver" Value="True">
                                    <Setter Property="Opacity" Value="1.0"></Setter>
                                </Trigger>
                                <Trigger Property="IsMouseOver" Value="False">
                                    <Setter Property="Opacity" Value="0.5"></Setter>
                                </Trigger>
                            </Style.Triggers>
                        </Style>
                    </Rectangle.Style>
                </Rectangle>
                <StackPanel Orientation="Horizontal">
                    <dynui:UseLevelSpinner x:Name="useLevelSpinner"
                                           VerticalAlignment="Center"
                                           Width="45"
                                           Height="16"
                                           Level="{Binding Path=Level, Mode=TwoWay}"
                                           KeepListStructure="{Binding Path=ShouldKeepListStructure}"
                                           Visibility="{Binding Path=UseLevels, Converter={StaticResource BooleanToVisibilityCollapsedConverter}, FallbackValue=Collapsed}">
                    </dynui:UseLevelSpinner>
                    <fa:FontAwesome Icon="ChevronRight"
                                    Width="10"
                                    HorizontalAlignment="Center"
                                    VerticalAlignment="Center"
                                    IsHitTestVisible="False"
                                    Background="{x:Null}"
                                    Foreground="#555555"/>
                </StackPanel>
                <dynui:UseLevelPopup
                    x:Name="MyPopup"
                    Placement="Right"
                    AllowsTransparency="True"
                    IsOpen="{Binding Path=ShowUseLevelMenu}"
                    StaysOpen="False">
                    <Grid Background="Transparent">
                        <Grid.Resources>
                            <ResourceDictionary>
                                <Style TargetType="CheckBox">
                                    <Setter Property="FontFamily" Value="{StaticResource OpenSansRegular}"/>
                                    <Setter Property="Foreground" Value="#5E5C5A"/>
                                    <Setter Property="FontSize" Value="12"/>
                                    <Style.Triggers>
                                        <Trigger Property="IsEnabled" Value="false">
                                            <Setter Property="Foreground" Value="#999999"/>
                                        </Trigger>
                                    </Style.Triggers>
                                </Style>
                            </ResourceDictionary>
                        </Grid.Resources>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="10"/>
                            <ColumnDefinition Width="*"/>
                        </Grid.ColumnDefinitions>
                        <Path Grid.Column="0" Stroke="#5E5C5A" Fill="#E5E2DE" Margin="1,0,0,0" Data="M 0,10 L 12,5 12,15 Z"/>
                        <Border BorderBrush="#5E5C5A" BorderThickness="1" CornerRadius="2" Padding="2" Background="#E5E2DE" Grid.Column="1">
                            <StackPanel>
                                <CheckBox 
                                    Margin="5, 5, 5, 0"
                                    Content="{x:Static p:Resources.UseLevelPopupMenuItem}"
                                    IsChecked="{Binding Path=UseLevels, Mode=OneWay}"
                                    Command="{Binding Path=UseLevelsCommand}"
                                    CommandParameter="{Binding Path=IsChecked, RelativeSource={RelativeSource Self}}"
                                    Name="UseLevel"/>
                                <Separator Margin ="5, 5, 5, 0"/>
                                <CheckBox
                                    Margin="5, 5, 5, 0"
                                    Content="{x:Static p:Resources.UseLevelKeepListStructurePopupMenuItem}"
                                    IsChecked="{Binding Path=ShouldKeepListStructure, Mode=OneWay}"
                                    Command="{Binding Path=KeepListStructureCommand}"
                                    CommandParameter="{Binding Path=IsChecked, RelativeSource={RelativeSource Self}}"
                                    IsEnabled="{Binding ElementName=UseLevel, Path=IsChecked}"/>
                                <TextBlock 
                                    Margin="5, 0, 5, 5"
                                    FontFamily="{StaticResource OpenSansRegular}" 
                                    FontSize="9" 
                                    Foreground="#999999" 
                                    Focusable="False" 
                                    Padding="20, 0, 0, 0"
                                    Text="{x:Static p:Resources.UseLevelKeepListStructureHint}"/>
                            </StackPanel>
                        </Border>
                        <Path Grid.Column="1" Stroke="#E5E2DE" Fill="#E5E2DE" Data="M 0,7.5 L 1,7.5 L 1,12.5 L0,12.5 Z"/>
                    </Grid>
                </dynui:UseLevelPopup>
            </Grid>
        </Grid>
    </DataTemplate>
</ResourceDictionary>