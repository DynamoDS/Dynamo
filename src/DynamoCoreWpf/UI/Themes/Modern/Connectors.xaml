<ResourceDictionary   xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                      xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" 
                      xmlns:viewModels="clr-namespace:Dynamo.ViewModels;assembly=DynamoCoreWpf"
                      xmlns:ui="clr-namespace:Dynamo.UI;assembly=DynamoCoreWpf"
                      xmlns:i="clr-namespace:System.Windows.Interactivity;assembly=System.Windows.Interactivity"
                      xmlns:views="clr-namespace:Dynamo.Controls;assembly=DynamoCoreWpf"
                      xmlns:nodes="clr-namespace:Dynamo.Nodes;assembly=DynamoCoreWpf"
                      xmlns:mouse="clr-namespace:Dynamo.Wpf.UI;assembly=DynamoCoreWpf">

    <ResourceDictionary.MergedDictionaries>
        <ui:SharedResourceDictionary Source="{x:Static ui:SharedDictionaryManager.DynamoConvertersDictionaryUri}" />
    </ResourceDictionary.MergedDictionaries>
    <DataTemplate DataType="{x:Type viewModels:ConnectorContextMenuViewModel}">
        <views:ConnectorContextMenuView DataContext="{Binding}" />
    </DataTemplate>
    <DataTemplate DataType="{x:Type viewModels:ConnectorAnchorViewModel}">
        <views:ConnectorAnchorView DataContext="{Binding}" />
    </DataTemplate>
    <DataTemplate DataType="{x:Type viewModels:ConnectorPinViewModel}">
        <nodes:ConnectorPinView DataContext="{Binding}" />
    </DataTemplate>
    <!--Template used for displaying connectorPins on canvas-->
    <DataTemplate x:Key="ShowPinCollection">
        <!--Defines how each item in the collection is displayed-->
        <ItemsControl x:Name="ic" ItemsSource="{Binding}">
            <ItemsControl.ItemsPanel>
                <ItemsPanelTemplate>
                    <Canvas/>
                </ItemsPanelTemplate>
            </ItemsControl.ItemsPanel>
            <ItemsControl.ItemContainerStyle>
                <!--Presents each item bound to its Left,Top (x,y)-->
                <Style TargetType="ContentPresenter">
                    <Setter Property="Canvas.Left" Value="{Binding Path=Left}" />
                    <Setter Property="Canvas.Top" Value="{Binding Path=Top}" />
                </Style>
            </ItemsControl.ItemContainerStyle>
        </ItemsControl>
    </DataTemplate>

    <Style x:Key="SConnector" TargetType="Path">
        <Style.Triggers>
            <!--<EventTrigger RoutedEvent="MouseEnter">
                <BeginStoryboard>
                    <Storyboard>
                        <DoubleAnimation From="3" To="6" Duration="0" Storyboard.TargetProperty="StrokeThickness"></DoubleAnimation>
                    </Storyboard>
                </BeginStoryboard>
            </EventTrigger>
            <EventTrigger RoutedEvent="MouseLeave">
                <BeginStoryboard>
                    <Storyboard>
                        <DoubleAnimation From="6" To="3" Duration="0" Storyboard.TargetProperty="StrokeThickness"></DoubleAnimation>
                    </Storyboard>
                </BeginStoryboard>
            </EventTrigger>-->
            <DataTrigger Binding="{Binding Path=IsConnecting, Mode=OneWay}" Value="True">
                <Setter Property="StrokeDashArray" Value="2"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=IsFrozen, Mode=OneWay}" Value="True">
                <Setter Property="StrokeDashArray" Value="2"/>
                <Setter Property="Opacity" Value="0.5"/>
            </DataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=IsTemporarilyDisplayed, Mode=OneWay}" Value="True"/>
                    <Condition Binding="{Binding Path=IsCollapsed, Mode=OneWay}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter Property="Opacity" Value="0.4"/>
                    <Setter Property="ToolTipService.IsEnabled" Value="True"/>
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=IsTemporarilyDisplayed, Mode=OneWay}" Value="False"/>
                    <Condition Binding="{Binding Path=IsCollapsed, Mode=OneWay}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter Property="Opacity" Value="0.0"/>
                    <Setter Property="ToolTipService.IsEnabled" Value="False"/>
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>
            <DataTrigger Binding="{Binding Path=IsCollapsed, Mode=OneWay}" Value="False">
                <Setter Property="Opacity" Value="1.0"/>
                <Setter Property="ToolTipService.IsEnabled" Value="True"/>
            </DataTrigger>
        </Style.Triggers>
    </Style>
    
    <DataTemplate DataType="{x:Type viewModels:ConnectorViewModel}">
        <Grid x:Name="MainGrid"
              Visibility="Visible">
            <i:Interaction.Triggers>
                <i:EventTrigger EventName="MouseRightButtonDown">
                    <i:InvokeCommandAction Command="{Binding InstantiateContextMenuCommand}"/>
                </i:EventTrigger>
            </i:Interaction.Triggers>
            <Grid.Resources>
                <SolidColorBrush x:Key="BConnectorSelection"
                                 Color="{Binding PreviewState, Converter={StaticResource ConnectionStateToColorConverter}, UpdateSourceTrigger=PropertyChanged}">
                </SolidColorBrush>
            </Grid.Resources>

            <Canvas x:Name="MainCanvas" Canvas.Top="0" Canvas.Left="0" ZIndex="1">
                <Ellipse  Name="endDot" Width="8" Height="8" Margin="-5"  Fill="{Binding PreviewState, Converter={StaticResource ConnectionStateToBrushConverter}}" IsHitTestVisible="False"
                          Canvas.Top="{Binding CurvePoint3.Y}" Canvas.Left="{Binding CurvePoint3.X}" Canvas.ZIndex="1"/>
                <Ellipse  Name="startDot" Width="8" Height="8" Margin="-5"  Fill="{Binding PreviewState, Converter={StaticResource ConnectionStateToBrushConverter}}" IsHitTestVisible="False"
                          Canvas.Top="{Binding CurvePoint0.Y}" Canvas.Left="{Binding CurvePoint0.X}" Canvas.ZIndex="1"/>
            </Canvas>

            <!--Bezier Path-->
            <Path Stroke="{DynamicResource BConnectorSelection}" StrokeThickness="3"
              Name="connector"
              Visibility="{Binding BezVisibility, Converter={StaticResource BooleanToVisibilityConverter}}" 
              Style="{StaticResource SConnector}" Canvas.ZIndex="-1" 
                  Data="{Binding ComputedBezierPathGeometry, UpdateSourceTrigger=PropertyChanged}">
                <i:Interaction.Behaviors>
                    <mouse:MouseBehaviour MouseX="{Binding PanelX, Mode=OneWayToSource, UpdateSourceTrigger=PropertyChanged}" MouseY="{Binding PanelY, Mode=OneWayToSource,  UpdateSourceTrigger=PropertyChanged}" />
                </i:Interaction.Behaviors>
                <i:Interaction.Triggers>
                    <i:EventTrigger  EventName="MouseEnter">
                        <i:InvokeCommandAction Command="{Binding MouseHoverCommand}"/>
                    </i:EventTrigger>
                    <i:EventTrigger  EventName="MouseLeave">
                        <i:InvokeCommandAction Command="{Binding MouseUnhoverCommand}"/>
                    </i:EventTrigger>
                </i:Interaction.Triggers>
            </Path>
            <ContentControl Content="{Binding ConnectorContextMenuViewModel}"
                        HorizontalAlignment="Stretch"
                        VerticalAlignment="Stretch"/>
            <ContentControl Content="{Binding ConnectorAnchorViewModel}"
                        HorizontalAlignment="Stretch"
                        VerticalAlignment="Stretch"/>
            <ContentControl Content="{Binding ConnectorPinViewCollection}"
                            ContentTemplate="{StaticResource ShowPinCollection}"/>
        </Grid>
        <DataTemplate.Triggers>
            <DataTrigger Binding="{Binding Path=IsFrozen, Mode=OneWay}" Value="True">               
                <Setter TargetName="endDot"  Property="Opacity" Value="0.5"/>
                <Setter TargetName="startDot" Property="Opacity" Value="0.5"/>
            </DataTrigger>
        </DataTemplate.Triggers>
    </DataTemplate>

</ResourceDictionary>