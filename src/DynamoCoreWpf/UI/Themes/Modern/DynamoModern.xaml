<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:clr="clr-namespace:System;assembly=mscorlib"
                    xmlns:controls="clr-namespace:Dynamo.Views;assembly=DynamoCoreWpf"
                    xmlns:nodes="clr-namespace:Dynamo.Nodes;assembly=DynamoCore"
                    xmlns:ui="clr-namespace:Dynamo.UI;assembly=DynamoCoreWpf"
                    xmlns:p="clr-namespace:Dynamo.Wpf.Properties;assembly=DynamoCoreWpf"
                    xmlns:avalonedit="clr-namespace:ICSharpCode.AvalonEdit;assembly=ICSharpCode.AvalonEdit"
                    xmlns:dynui="clr-namespace:Dynamo.UI.Controls;assembly=DynamoCoreWpf"
                    xmlns:fa="clr-namespace:FontAwesome.WPF;assembly=FontAwesome.WPF">

    <ResourceDictionary.MergedDictionaries>
        <ui:SharedResourceDictionary Source="{x:Static ui:SharedDictionaryManager.DynamoConvertersDictionaryUri}" />
    </ResourceDictionary.MergedDictionaries>

    <!--Control colors.-->
    <Color x:Key="WindowColor">#FFE8EDF9</Color>
    <Color x:Key="ContentAreaColorLight">#FFC5CBF9</Color>
    <Color x:Key="ContentAreaColorDark">#FF7381F9</Color>

    <Color x:Key="DisabledControlLightColor">#FFE8EDF9</Color>
    <Color x:Key="DisabledControlDarkColor">#FFC5CBF9</Color>
    <Color x:Key="DisabledForegroundColor">#FF888888</Color>

    <Color x:Key="SelectedBackgroundColor">#a1dbff</Color>
    <Color x:Key="SelectedUnfocusedColor">#FFDDDDDD</Color>

    <Color x:Key="ControlLightColor">White</Color>
    <Color x:Key="ControlMediumColor">#FF7381F9</Color>
    <Color x:Key="ControlDarkColor">#FF211AA9</Color>

    <Color x:Key="ControlMouseOverColor">#FF3843C4</Color>
    <Color x:Key="ControlPressedColor">#FF211AA9</Color>


    <Color x:Key="GlyphColor">#FF444444</Color>
    <Color x:Key="GlyphMouseOver">sc#1, 0.004391443, 0.002428215, 0.242281124</Color>

    <!--Border colors-->
    <Color x:Key="BorderLightColor">#FFCCCCCC</Color>
    <Color x:Key="BorderMediumColor">#FF888888</Color>
    <Color x:Key="BorderDarkColor">#FF444444</Color>

    <Color x:Key="PressedBorderLightColor">#FF888888</Color>
    <Color x:Key="PressedBorderDarkColor">#FF444444</Color>

    <Color x:Key="DisabledBorderLightColor">#FFAAAAAA</Color>
    <Color x:Key="DisabledBorderDarkColor">#FF888888</Color>

    <Color x:Key="DefaultBorderBrushDarkColor">Black</Color>

    <!--Control-specific resources.-->
    <Color x:Key="HeaderTopColor">#FFC5CBF9</Color>
    <Color x:Key="DatagridCurrentCellBorderColor">Black</Color>
    <Color x:Key="SliderTrackDarkColor">#FFC5CBF9</Color>
    <Color x:Key="NavButtonFrameColor">#FF3843C4</Color>

    <clr:Double x:Key="NodeNameHeight">27</clr:Double>

    <!--InfoBubble colors-->
    <SolidColorBrush x:Key="InfoBubbleBackNormalBrush"
                     Color="White"></SolidColorBrush>
    <SolidColorBrush x:Key="InfoBubbleTextNormalBrush"
                     Color="#333333"></SolidColorBrush>
    <SolidColorBrush x:Key="InfoBubbleEdgeNormalBrush"
                     Color="#A5D1E2"></SolidColorBrush>

    <LinearGradientBrush x:Key="MenuPopupBrush"
                         EndPoint="0.5,1"
                         StartPoint="0.5,0">
        <GradientStop Color="{DynamicResource ControlLightColor}"
                      Offset="0" />
        <GradientStop Color="{DynamicResource ControlMediumColor}"
                      Offset="0.5" />
        <GradientStop Color="{DynamicResource ControlLightColor}"
                      Offset="1" />
    </LinearGradientBrush>

    <LinearGradientBrush x:Key="SpinnerNormalBrush" EndPoint="0,1" StartPoint="0,0">
        <GradientStop Color="#EEE" Offset="0.0"/>
        <GradientStop Color="#CBC6BE" Offset="1.0"/>
    </LinearGradientBrush>
    <LinearGradientBrush x:Key="SpinnerNormalBorderBrush" EndPoint="0,1" StartPoint="0,0">
        <GradientStop Color="#CCC" Offset="0.0"/>
        <GradientStop Color="#444" Offset="1.0"/>
    </LinearGradientBrush>
    <LinearGradientBrush x:Key="SpinnerHoverBrush" EndPoint="0,1" StartPoint="0,0">
        <GradientStop Color="#FFF" Offset="0.0"/>
        <GradientStop Color="#CBC6BE" Offset="1.0"/>
    </LinearGradientBrush>
    <LinearGradientBrush x:Key="SpinnerPressedBrush" EndPoint="0,1" StartPoint="0,0">
        <GradientStop Color="#BBB" Offset="0.0"/>
        <GradientStop Color="#EEE" Offset="0.1"/>
        <GradientStop Color="#EEE" Offset="0.9"/>
        <GradientStop Color="#FFF" Offset="1.0"/>
    </LinearGradientBrush>
    <LinearGradientBrush x:Key="SpinnerPressedBorderBrush" EndPoint="0,1" StartPoint="0,0">
        <GradientStop Color="#444" Offset="0.0"/>
        <GradientStop Color="#888" Offset="1.0"/>
    </LinearGradientBrush>

    <!-- Embedded Font -->
    <!-- Open Sans (under Apache License, version 2.0)
         Link: http://www.google.com/fonts/specimen/Open+Sans -->
    <FontFamily x:Key="Inconsolata">../../Fonts/#Inconsolata</FontFamily>
    <FontFamily x:Key="OpenSansRegular">../../Fonts/#Open Sans</FontFamily>
    <FontFamily x:Key="OpenSansItalic">../../Fonts/#Open Sans Italic</FontFamily>
    <FontFamily x:Key="OpenSansLight">../../Fonts/#Open Sans Light</FontFamily>
    <FontFamily x:Key="OpenSansSemibold">../../Fonts/#Open Sans Semibold</FontFamily>
    <FontFamily x:Key="OpenSansBold">../../Fonts/#Open Sans Bold</FontFamily>
    <FontFamily x:Key="OpenSansLightItalic">../../Fonts/#Open Sans Light Italic</FontFamily>
    <FontFamily x:Key="OpenSansSemiboldItalic">../../Fonts/#Open Sans Semibold Italic</FontFamily>
    <FontFamily x:Key="OpenSansBoldItalic">../../Fonts/#Open Sans Bold Italic</FontFamily>

    <!-- Window Common Styling -->
    <Style x:Key="DynamoWindowStyle"
           TargetType="{x:Type Window}">
        <Setter Property="FontFamily"
                Value="{StaticResource OpenSansRegular}" />
        <Setter Property="SnapsToDevicePixels"
                Value="True" />
        <Setter Property="Background"
                Value="#343434" />
    </Style>

    <Image x:Key="ComboDownIcon_normal"
           Source="pack://application:,,,/DynamoCoreWpf;component/UI/Images/tick_selected.png" />

    <ControlTemplate x:Key="ComboBoxToggleButton" 
                     TargetType="ToggleButton">
        <Grid>
            <Border x:Name="Border"
                    Background="#2c2c2c"
                    BorderBrush="#444444"
                    BorderThickness="1" />
            <Path x:Name="Arrow"
                  Fill="#999"
                  HorizontalAlignment="Right"
                  VerticalAlignment="Center"
                  Margin="0,0,10,0"
                  Data="M 0 0 L 4 4 L 8 0 Z" />
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="ToggleButton.IsMouseOver"
                     Value="true">
                <Setter TargetName="Arrow"
                        Property="Fill"
                        Value="#fff" />
            </Trigger>
            <Trigger Property="ToggleButton.IsChecked"
                     Value="true">
                <Setter TargetName="Border"
                        Property="Background"
                        Value="#333" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <ControlTemplate x:Key="ComboBoxTextBox"
                     TargetType="TextBox">
        <Border x:Name="PART_ContentHost"
                Focusable="False" />
    </ControlTemplate>

    <SolidColorBrush x:Key="SComboBoxBackground"
                     Color="#2c2c2c" />
    <SolidColorBrush x:Key="SComboBoxBorder"
                     Color="#444444" />
    <Style x:Key="SComboBox"
           TargetType="{x:Type ComboBox}">
        <Setter Property="SnapsToDevicePixels"
                Value="true" />
        <Setter Property="OverridesDefaultStyle"
                Value="true" />
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility"
                Value="Auto" />
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility"
                Value="Auto" />
        <Setter Property="ScrollViewer.CanContentScroll"
                Value="true" />
        <Setter Property="MinWidth"
                Value="120" />
        <Setter Property="MinHeight"
                Value="20" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ComboBox">
                    <Grid>
                        <ToggleButton Name="ToggleButton"
                                      Template="{StaticResource ComboBoxToggleButton}"
                                      Grid.Column="2"
                                      Focusable="false"
                                      IsChecked="{Binding Path=IsDropDownOpen,Mode=TwoWay,RelativeSource={RelativeSource TemplatedParent}}"
                                      ClickMode="Press">
                        </ToggleButton>
                        <ContentPresenter Name="ContentSite"
                                          IsHitTestVisible="False"
                                          Content="{TemplateBinding SelectionBoxItem}"
                                          ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}"
                                          ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}"
                                          Margin="9,3,23,3"
                                          VerticalAlignment="Center"
                                          HorizontalAlignment="Left" />
                        <TextBox x:Name="PART_EditableTextBox"
                                 Style="{x:Null}"
                                 Template="{StaticResource ComboBoxTextBox}"
                                 HorizontalAlignment="Left"
                                 VerticalAlignment="Center"
                                 Margin="3,3,23,3"
                                 Padding="10"
                                 Focusable="True"
                                 Foreground="#bbbbbb"
                                 CaretBrush="#bbbbbb"
                                 Visibility="Hidden"
                                 IsReadOnly="{TemplateBinding IsReadOnly}" />
                        <Popup Name="Popup"
                               Placement="Bottom"
                               IsOpen="{TemplateBinding IsDropDownOpen}"
                               AllowsTransparency="True"
                               Focusable="False"
                               PopupAnimation="Slide">
                            <Grid Name="DropDown"
                                  SnapsToDevicePixels="True"
                                  MinWidth="{TemplateBinding ActualWidth}"
                                  MaxHeight="{TemplateBinding MaxDropDownHeight}">
                                <Border x:Name="DropDownBorder"
                                        Background="#2c2c2c"
                                        BorderThickness="1,0,1,1"
                                        BorderBrush="#444444" />
                                <ScrollViewer Margin="4,6,4,6"
                                              SnapsToDevicePixels="True">
                                    <StackPanel IsItemsHost="True"
                                                KeyboardNavigation.DirectionalNavigation="Contained" />
                                </ScrollViewer>
                            </Grid>
                        </Popup>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="HasItems"
                                 Value="false">
                            <Setter TargetName="DropDownBorder"
                                    Property="MinHeight"
                                    Value="95" />
                        </Trigger>
                        <Trigger Property="IsGrouping"
                                 Value="true">
                            <Setter Property="ScrollViewer.CanContentScroll"
                                    Value="false" />
                        </Trigger>
                        <Trigger SourceName="Popup"
                                 Property="Popup.AllowsTransparency"
                                 Value="true">
                            <Setter TargetName="DropDownBorder"
                                    Property="CornerRadius"
                                    Value="4" />
                            <Setter TargetName="DropDownBorder"
                                    Property="Margin"
                                    Value="0,2,0,0" />
                        </Trigger>
                        <Trigger Property="IsEditable"
                                 Value="true">
                            <Setter Property="IsTabStop"
                                    Value="false" />
                            <Setter TargetName="PART_EditableTextBox"
                                    Property="Visibility"
                                    Value="Visible" />
                            <Setter TargetName="ContentSite"
                                    Property="Visibility"
                                    Value="Hidden" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
        </Style.Triggers>
    </Style>

    <Style x:Key="SSearchOnlineToggleButton"
           TargetType="{x:Type ToggleButton}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate>

                    <Grid x:Name="container"
                          Background="Transparent">
                        <Grid x:Name="inner"
                              Background="#333">

                            <Image Width="24"
                                   Height="24"
                                   x:Name="display"
                                   Source="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Tag}"></Image>

                        </Grid>
                    </Grid>

                    <ControlTemplate.Triggers>

                        <Trigger Property="ToggleButton.IsChecked"
                                 Value="True">
                            <Setter TargetName="inner"
                                    Property="Background"
                                    Value="LightBlue" />
                        </Trigger>

                        <Trigger Property="ToggleButton.IsMouseOver"
                                 Value="true">
                            <Setter TargetName="inner"
                                    Property="Background"
                                    Value="LightBlue" />
                        </Trigger>

                    </ControlTemplate.Triggers>

                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--Zoom fade text-->
    <Style x:Key="SZoomFadeText"
           TargetType="{x:Type TextBlock}">
        <Style.Triggers>
            <DataTrigger Binding="{Binding Path=DataContext.Zoom, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type controls:WorkspaceView}}, Converter={StaticResource ZoomToBooleanConverter}}"
                         Value="true">
                <DataTrigger.EnterActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetProperty="Opacity"
                                             To="1.0"
                                             Duration="0:0:0.2" />
                        </Storyboard>
                    </BeginStoryboard>
                </DataTrigger.EnterActions>
                <DataTrigger.ExitActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetProperty="Opacity"
                                             To="0.0"
                                             Duration="0:0:0.2" />
                        </Storyboard>
                    </BeginStoryboard>
                </DataTrigger.ExitActions>
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <!--Zoom fade preview-->
    <Style x:Key="SZoomFadePreview"
           TargetType="{x:Type Border}">
        <Style.Triggers>
            <DataTrigger Binding="{Binding Path=DataContext.Zoom, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type controls:WorkspaceView}}, Converter={StaticResource ZoomToBooleanConverter}}"
                         Value="true">
                <DataTrigger.EnterActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetProperty="Opacity"
                                             To="0.4"
                                             Duration="0:0:0.5" />
                        </Storyboard>
                    </BeginStoryboard>
                </DataTrigger.EnterActions>
                <DataTrigger.ExitActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetProperty="Opacity"
                                             To="0.7"
                                             Duration="0:0:0.5" />
                        </Storyboard>
                    </BeginStoryboard>
                </DataTrigger.ExitActions>
            </DataTrigger>
        </Style.Triggers>
    </Style>



    <Style x:Key="SZoomFadeTextBox"
           TargetType="{x:Type TextBox}">
        <Style.Triggers>
            <DataTrigger Binding="{Binding Path=DataContext.Zoom, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type controls:WorkspaceView}}, Converter={StaticResource ZoomToBooleanConverter}}"
                         Value="true">
                <DataTrigger.EnterActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetProperty="Opacity"
                                             To="1.0"
                                             Duration="0:0:0.2" />
                        </Storyboard>
                    </BeginStoryboard>
                </DataTrigger.EnterActions>
                <DataTrigger.ExitActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetProperty="Opacity"
                                             To="0.0"
                                             Duration="0:0:0.2" />
                        </Storyboard>
                    </BeginStoryboard>
                </DataTrigger.ExitActions>
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <LinearGradientBrush x:Key="ButtonGradientBackground"
                         StartPoint="0.5,0"
                         EndPoint="0.5,1">
        <GradientStop Color="#444"
                      Offset="0.0" />
        <GradientStop Color="#2E2E2E"
                      Offset="1.0" />
    </LinearGradientBrush>

    <LinearGradientBrush x:Key="DarkButtonGradientBackground"
                         StartPoint="0.5,0"
                         EndPoint="0.5,1">
        <GradientStop Color="#111"
                      Offset="0.0" />
        <GradientStop Color="#000"
                      Offset="1.0" />
    </LinearGradientBrush>

    <Style x:Key="SImageButton"
           TargetType="{x:Type Button}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate>

                    <Grid x:Name="container"
                          Background="Transparent">
                        <Grid x:Name="inner"
                              Background="{StaticResource ButtonGradientBackground}">

                            <Image Width="24"
                                   Height="24"
                                   x:Name="display"
                                   Source="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Tag}"></Image>

                        </Grid>
                    </Grid>

                    <ControlTemplate.Triggers>

                        <Trigger Property="ToggleButton.IsMouseOver"
                                 Value="true">
                            <Setter TargetName="inner"
                                    Property="Background"
                                    Value="LightBlue" />
                        </Trigger>

                    </ControlTemplate.Triggers>

                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="SCustomizableBadgeButton"
           TargetType="{x:Type Button}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate>

                    <Border x:Name="container"
                            Background="Transparent">
                        <Border x:Name="inner"
                                Background="#55000000"
                                CornerRadius="2"
                                Margin="3">
                            <TextBlock x:Name="text"
                                       HorizontalAlignment="Center"
                                       Margin="3"
                                       FontSize="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=FontSize}"
                                       Foreground="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Foreground}"
                                       FontWeight="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=FontWeight}"
                                       Text="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Content}"></TextBlock>
                        </Border>
                    </Border>

                    <ControlTemplate.Triggers>

                        <Trigger Property="Button.IsMouseOver"
                                 Value="true">
                            <Setter TargetName="inner"
                                    Property="Background"
                                    Value="#88000000" />
                        </Trigger>

                        <Trigger Property="IsEnabled"
                                 Value="false">
                            <Setter TargetName="text"
                                    Property="Foreground"
                                    Value="#666" />
                        </Trigger>

                    </ControlTemplate.Triggers>

                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <Style x:Key="SBadgeButton"
           TargetType="{x:Type Button}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate>

                    <Border x:Name="container"
                            Background="Transparent">
                        <Border x:Name="inner"
                                Background="#55000000"
                                CornerRadius="2"
                                Margin="3">
                            <TextBlock x:Name="text"
                                       HorizontalAlignment="Center"
                                       VerticalAlignment="Center"
                                       Margin="3"
                                       FontSize="11"
                                       Foreground="#BBB"
                                       FontWeight="Bold"
                                       Text="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Content}"></TextBlock>
                        </Border>
                    </Border>

                    <ControlTemplate.Triggers>

                        <Trigger Property="Button.IsMouseOver"
                                 Value="true">
                            <Setter TargetName="inner"
                                    Property="Background"
                                    Value="#88000000" />
                        </Trigger>

                        <Trigger Property="IsEnabled"
                                 Value="false">
                            <Setter TargetName="text"
                                    Property="Foreground"
                                    Value="#666" />
                        </Trigger>

                    </ControlTemplate.Triggers>

                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>



    <Style x:Key="SDarkTextBox"
           BasedOn="{StaticResource {x:Type TextBox}}"
           TargetType="{x:Type TextBox}">
        <Setter Property="Foreground"
                Value="#bbbbbb" />
        <Setter Property="CaretBrush"
                Value="White" />
        <Setter Property="HorizontalAlignment"
                Value="Stretch" />
        <Setter Property="FontSize"
                Value="14px" />
        <Setter Property="Padding"
                Value="5" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBox}">
                    <Border Name="borderText"
                            BorderThickness="1px"
                            BorderBrush="#444"
                            Background="#2c2c2c">
                        <Grid>
                            <ScrollViewer x:Name="PART_ContentHost"
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                          Style="{DynamicResource ResourceKey=SDarkScrollViewer}"
                                          Margin="5,5,0,0" />
                            <TextBlock x:Name="previewText"
                                       Foreground="#555555"
                                       FontSize="{TemplateBinding FontSize}"
                                       Padding="{TemplateBinding Padding}"
                                       Margin="5,5,0,0"
                                       IsHitTestVisible="False"
                                       Visibility="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Text.IsEmpty, Converter={StaticResource BooleanToVisibilityConverter}}"
                                       Text="{TemplateBinding Tag}" />
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsKeyboardFocusWithin"
                                 Value="True">
                            <Setter TargetName="borderText"
                                    Property="BorderBrush"
                                    Value="#666666" />
                        </Trigger>

                        <Trigger Property="IsEnabled"
                                 Value="False">
                            <Setter Property="Foreground"
                                    Value="#555555" />
                            <Setter TargetName="borderText"
                                    Property="BorderBrush"
                                    Value="#444444" />
                        </Trigger>

                        <Trigger Property="Text"
                                 Value="">
                            <Setter Property="Visibility"
                                    TargetName="previewText"
                                    Value="Visible" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="STextButton"
           TargetType="{x:Type Button}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate>

                    <Border x:Name="container"
                            Background="Transparent"
                            BorderBrush="#3c3c3c"
                            BorderThickness="1">
                        <Grid x:Name="inner"
                              Background="#373737">

                            <TextBlock x:Name="text"
                                       HorizontalAlignment="Center"
                                       VerticalAlignment="Center"
                                       Margin="10, 10, 10, 10"
                                       Foreground="#bbbbbb"
                                       FontSize="14px"
                                       Text="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Content}"></TextBlock>
                        </Grid>
                    </Border>

                    <ControlTemplate.Triggers>

                        <Trigger Property="Button.IsMouseOver"
                                 Value="true">
                            <Setter TargetName="container"
                                    Property="BorderBrush"
                                    Value="#656565" />
                            <Setter TargetName="inner"
                                    Property="Background"
                                    Value="#373737" />
                        </Trigger>

                        <Trigger Property="Button.IsPressed"
                                 Value="true">
                            <Setter TargetName="container"
                                    Property="BorderBrush"
                                    Value="#656565" />
                            <Setter TargetName="inner"
                                    Property="Background"
                                    Value="#272727" />
                        </Trigger>

                        <Trigger Property="IsEnabled"
                                 Value="true">
                            <Setter TargetName="text"
                                    Property="Foreground"
                                    Value="#bbbbbb" />
                        </Trigger>

                        <Trigger Property="IsEnabled"
                                 Value="false">
                            <Setter TargetName="container"
                                    Property="BorderBrush"
                                    Value="Transparent" />
                            <Setter TargetName="inner"
                                    Property="Background"
                                    Value="#373737" />
                            <Setter TargetName="text"
                                    Property="Foreground"
                                    Value="#555555" />
                        </Trigger>

                    </ControlTemplate.Triggers>

                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="SmallTextButton" TargetType="{x:Type Button}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate>
                    <Border x:Name="container"
                                Background="Transparent"
                                BorderBrush="#3c3c3c"
                                BorderThickness="1">
                        <Grid x:Name="inner"
                                    Background="#373737">
                            <TextBlock x:Name="text"
                                       HorizontalAlignment="Center"
                                       VerticalAlignment="Center"
                                       Margin="5,0"
                                       Foreground="#bbbbbb"
                                       FontSize="10px"
                                       Text="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Content}"></TextBlock>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="Button.IsMouseOver"
                                    Value="true">
                            <Setter TargetName="container"
                                        Property="BorderBrush"
                                        Value="#656565" />
                            <Setter TargetName="inner"
                                        Property="Background"
                                        Value="#373737" />
                        </Trigger>
                        <Trigger Property="Button.IsPressed"
                                    Value="true">
                            <Setter TargetName="container"
                                        Property="BorderBrush"
                                        Value="#656565" />
                            <Setter TargetName="inner"
                                        Property="Background"
                                        Value="#272727" />
                        </Trigger>
                        <Trigger Property="IsEnabled"
                                    Value="true">
                            <Setter TargetName="text"
                                        Property="Foreground"
                                        Value="#bbbbbb" />
                        </Trigger>
                        <Trigger Property="IsEnabled"
                                    Value="false">
                            <Setter TargetName="container"
                                        Property="BorderBrush"
                                        Value="Transparent" />
                            <Setter TargetName="inner"
                                        Property="Background"
                                        Value="#373737" />
                            <Setter TargetName="text"
                                        Property="Foreground"
                                        Value="#555555" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="STextButtonWithShapeIcon"
           TargetType="{x:Type Button}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate>

                    <Border x:Name="container"
                            Background="Transparent"
                            BorderBrush="#3c3c3c"
                            BorderThickness="1">
                        <Grid x:Name="inner"
                              Background="#373737">

                            <StackPanel Orientation="Horizontal">
                                <ContentControl Content="{DynamicResource ResourceKey=Shape}" />
                                <TextBlock x:Name="text"
                                           HorizontalAlignment="Center"
                                           VerticalAlignment="Center"
                                           Margin="10, 10, 10, 10"
                                           Foreground="#bbbbbb"
                                           FontSize="14px"
                                           Text="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Content}"></TextBlock>
                            </StackPanel>
                        </Grid>
                    </Border>

                    <ControlTemplate.Triggers>

                        <Trigger Property="Button.IsMouseOver"
                                 Value="true">
                            <Setter TargetName="container"
                                    Property="BorderBrush"
                                    Value="#656565" />
                            <Setter TargetName="inner"
                                    Property="Background"
                                    Value="#373737" />
                        </Trigger>

                        <Trigger Property="Button.IsPressed"
                                 Value="true">
                            <Setter TargetName="container"
                                    Property="BorderBrush"
                                    Value="#656565" />
                            <Setter TargetName="inner"
                                    Property="Background"
                                    Value="#272727" />
                        </Trigger>

                        <Trigger Property="IsEnabled"
                                 Value="true">
                            <Setter TargetName="text"
                                    Property="Foreground"
                                    Value="#bbbbbb" />
                        </Trigger>

                        <Trigger Property="IsEnabled"
                                 Value="false">
                            <Setter TargetName="container"
                                    Property="BorderBrush"
                                    Value="Transparent" />
                            <Setter TargetName="inner"
                                    Property="Background"
                                    Value="#373737" />
                            <Setter TargetName="text"
                                    Property="Foreground"
                                    Value="#555555" />
                        </Trigger>

                    </ControlTemplate.Triggers>

                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="SButtonWithShapeIcon"
           TargetType="{x:Type Button}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate>

                    <Border x:Name="container"
                            Background="Transparent"
                            BorderBrush="#3c3c3c"
                            BorderThickness="1">
                        <Grid x:Name="inner"
                              Background="#373737">

                            <StackPanel Orientation="Horizontal">
                                <ContentControl Content="{DynamicResource ResourceKey=Shape}" />
                            </StackPanel>
                        </Grid>
                    </Border>

                    <ControlTemplate.Triggers>

                        <Trigger Property="Button.IsMouseOver"
                                 Value="true">
                            <Setter TargetName="container"
                                    Property="BorderBrush"
                                    Value="#656565" />
                            <Setter TargetName="inner"
                                    Property="Background"
                                    Value="#373737" />
                        </Trigger>

                        <Trigger Property="Button.IsPressed"
                                 Value="true">
                            <Setter TargetName="container"
                                    Property="BorderBrush"
                                    Value="#656565" />
                            <Setter TargetName="inner"
                                    Property="Background"
                                    Value="#272727" />
                        </Trigger>

                        <Trigger Property="IsEnabled"
                                 Value="false">
                            <Setter TargetName="container"
                                    Property="BorderBrush"
                                    Value="Transparent" />
                            <Setter TargetName="inner"
                                    Property="Background"
                                    Value="#373737" />
                        </Trigger>

                    </ControlTemplate.Triggers>

                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <Style x:Key="STextButtonDefault"
           TargetType="{x:Type Button}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate>

                    <Border x:Name="container"
                            Background="Transparent"
                            BorderBrush="#3F3F3F"
                            BorderThickness="1">
                        <Grid x:Name="inner"
                              Background="#CCCCCC">

                            <TextBlock x:Name="text"
                                       HorizontalAlignment="Center"
                                       VerticalAlignment="Center"
                                       Margin="10, 10, 10, 10"
                                       Foreground="#3F3F3F"
                                       FontSize="14px"
                                       Text="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Content}"></TextBlock>
                        </Grid>
                    </Border>

                    <ControlTemplate.Triggers>

                        <Trigger Property="Button.IsMouseOver"
                                 Value="true">
                            <Setter TargetName="container"
                                    Property="BorderBrush"
                                    Value="#4192D9" />
                            <Setter TargetName="inner"
                                    Property="Background"
                                    Value="#CCCCCC" />
                            <Setter TargetName="text"
                                    Property="Foreground"
                                    Value="#3F3F3F" />
                        </Trigger>

                        <Trigger Property="Button.IsPressed"
                                 Value="true">
                            <Setter TargetName="container"
                                    Property="BorderBrush"
                                    Value="#4192D9" />
                            <Setter TargetName="inner"
                                    Property="Background"
                                    Value="#CCCCCC" />
                            <Setter TargetName="text"
                                    Property="Foreground"
                                    Value="#3F3F3F" />
                        </Trigger>

                        <Trigger Property="IsEnabled"
                                 Value="true">
                            <Setter TargetName="container"
                                    Property="BorderBrush"
                                    Value="#3F3F3F" />
                            <Setter TargetName="inner"
                                    Property="Background"
                                    Value="#CCCCCC" />
                            <Setter TargetName="text"
                                    Property="Foreground"
                                    Value="#3F3F3F" />
                        </Trigger>

                        <Trigger Property="IsEnabled"
                                 Value="false">
                            <Setter TargetName="container"
                                    Property="BorderBrush"
                                    Value="#666666" />
                            <Setter TargetName="inner"
                                    Property="Background"
                                    Value="#666666" />
                            <Setter TargetName="text"
                                    Property="Foreground"
                                    Value="#777777" />
                        </Trigger>

                    </ControlTemplate.Triggers>

                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="SErrorTextButton"
           TargetType="{x:Type Button}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate>

                    <Grid x:Name="container"
                          Background="Transparent">
                        <Border x:Name="inner"
                                BorderBrush="#bd362f"
                                BorderThickness="1">

                            <Border.Background>
                                <LinearGradientBrush  StartPoint="0.5,0"
                                                      EndPoint="0.5,1">
                                    <GradientStop Color="#ee5f5b"
                                                  Offset="0.0" />
                                    <GradientStop Color="#bd362f"
                                                  Offset="1.0" />
                                </LinearGradientBrush>
                            </Border.Background>

                            <TextBlock x:Name="text"
                                       HorizontalAlignment="Center"
                                       Foreground="WhiteSmoke"
                                       Margin="7,10,7,7"
                                       FontSize="14"
                                       Text="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Content}"></TextBlock>
                        </Border>
                    </Grid>

                    <ControlTemplate.Triggers>

                        <Trigger Property="Button.IsMouseOver"
                                 Value="true">
                            <Setter TargetName="inner"
                                    Property="Background"
                                    Value="LightBlue" />
                        </Trigger>

                        <Trigger Property="IsEnabled"
                                 Value="true">
                            <Setter TargetName="text"
                                    Property="Foreground"
                                    Value="WhiteSmoke" />
                        </Trigger>

                        <Trigger Property="IsEnabled"
                                 Value="false">
                            <Setter TargetName="text"
                                    Property="Foreground"
                                    Value="DarkGray" />
                        </Trigger>

                    </ControlTemplate.Triggers>

                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="SNodeTextButton"
           TargetType="{x:Type Button}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate>

                    <Grid x:Name="container"
                          Background="Transparent">
                        <Grid x:Name="inner">

                            <Grid.Background>
                                <LinearGradientBrush  StartPoint="0.5,0"
                                                      EndPoint="0.5,1">
                                    <GradientStop Color="#CCFFFFFF"
                                                  Offset="0.0" />
                                    <GradientStop Color="#55FFFFFF"
                                                  Offset="1.0" />
                                </LinearGradientBrush>
                            </Grid.Background>

                            <TextBlock x:Name="text"
                                       HorizontalAlignment="Center"
                                       Foreground="Black"
                                       Margin="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Margin}"
                                       FontSize="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=FontSize}"
                                       Text="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Content}"
                                       Padding="3"
                                       Style="{StaticResource SZoomFadeText}"></TextBlock>
                        </Grid>
                    </Grid>

                    <ControlTemplate.Triggers>

                        <Trigger Property="Button.IsMouseOver"
                                 Value="true">
                            <Setter TargetName="inner"
                                    Property="Background"
                                    Value="#CCFFFFFF" />
                        </Trigger>

                        <Trigger Property="IsEnabled"
                                 Value="false">
                            <Setter TargetName="text"
                                    Property="Foreground"
                                    Value="DarkGray" />
                            <Setter TargetName="inner"
                                    Property="Background"
                                    Value="#CCFFFFFF" />
                        </Trigger>

                        <Trigger Property="IsEnabled"
                                 Value="true">
                            <Setter TargetName="text"
                                    Property="Foreground"
                                    Value="Black" />
                        </Trigger>

                    </ControlTemplate.Triggers>

                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type CheckBox}">
        <Setter Property="SnapsToDevicePixels"
                Value="true" />
        <Setter Property="OverridesDefaultStyle"
                Value="true" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="CheckBox">
                    <BulletDecorator Background="Transparent"
                                     VerticalAlignment="Center">
                        <BulletDecorator.Bullet>
                            <Border x:Name="Border"
                                    Width="13"
                                    Height="13"
                                    BorderThickness="1"
                                    BorderBrush="#666666"
                                    Background="#373737">
                                <Image x:Name="CheckBoxTick"
                                       Width="7"
                                       Height="7"
                                       VerticalAlignment="Center"
                                       HorizontalAlignment="Center"
                                       Visibility="Hidden"
                                       Source="pack://application:,,,/DynamoCoreWpf;component/UI/Images/tick_selected.png" />
                            </Border>
                        </BulletDecorator.Bullet>

                        <ContentPresenter x:Name="contentPresent"
                                          TextBlock.FontSize="14px"
                                          TextBlock.Foreground="#bbbbbb"
                                          Margin="5,0,5,0"
                                          Content="{TemplateBinding Content}"
                                          ContentTemplate="{TemplateBinding ContentTemplate}" />
                    </BulletDecorator>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked"
                                 Value="true">
                            <Setter TargetName="CheckBoxTick"
                                    Property="Visibility"
                                    Value="Visible" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="True">
                            <Setter TargetName="contentPresent" 
                                    Property="TextBlock.Foreground" 
                                    Value="#bbbbbb"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="contentPresent" 
                                    Property="TextBlock.Foreground" 
                                    Value="#444444"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="SSearchButton"
           TargetType="{x:Type Button}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate>

                    <Grid x:Name="container"
                          Background="Transparent">
                        <Grid x:Name="inner"
                              Background="#333">

                            <Image Width="24"
                                   Height="24"
                                   x:Name="display"
                                   Source="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Tag}"></Image>

                        </Grid>
                    </Grid>

                    <ControlTemplate.Triggers>

                        <!--<Trigger Property="ToggleButton.IsMouseOver" Value="true">
                <Setter TargetName="inner" Property = "Background" Value="LightBlue"/>
              </Trigger>-->

                    </ControlTemplate.Triggers>

                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="SDarkScrollViewer"
           TargetType="{x:Type ScrollViewer}">
        <Setter Property="HorizontalScrollBarVisibility"
                Value="Hidden" />
        <Setter Property="VerticalScrollBarVisibility"
                Value="Hidden" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ScrollViewer}">
                    <Grid>
                        <Grid Background="{TemplateBinding Background}">
                            <ScrollContentPresenter x:Name="PART_ScrollContentPresenter"
                                                    Margin="{TemplateBinding Padding}"
                                                    Content="{TemplateBinding Content}"
                                                    ContentTemplate="{TemplateBinding ContentTemplate}"
                                                    CanContentScroll="{TemplateBinding CanContentScroll}" />
                        </Grid>
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*" />
                                <ColumnDefinition Width="Auto" />
                            </Grid.ColumnDefinitions>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="*" />
                                <RowDefinition Height="Auto" />
                            </Grid.RowDefinitions>
                            <ScrollBar x:Name="PART_VerticalScrollBar"
                                       Grid.Column="1"
                                       Minimum="0.0"
                                       Maximum="{TemplateBinding ScrollableHeight}"
                                       ViewportSize="{TemplateBinding ViewportHeight}"
                                       Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=VerticalOffset, Mode=OneWay}"
                                       Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}"
                                       Cursor="Arrow"
                                       AutomationProperties.AutomationId="VerticalScrollBar" />
                            <ScrollBar x:Name="PART_HorizontalScrollBar"
                                       Orientation="Horizontal"
                                       Grid.Row="1"
                                       Minimum="0.0"
                                       Maximum="{TemplateBinding ScrollableWidth}"
                                       ViewportSize="{TemplateBinding ViewportWidth}"
                                       Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=HorizontalOffset, Mode=OneWay}"
                                       Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}"
                                       Cursor="Arrow"
                                       AutomationProperties.AutomationId="HorizontalScrollBar" />
                        </Grid>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsEnabled"
                     Value="false">
                <Setter Property="Foreground"
                        Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
            </Trigger>
            <Trigger Property="IsMouseOver"
                     Value="true">
                <Setter Property="HorizontalScrollBarVisibility"
                        Value="Visible" />
                <Setter Property="VerticalScrollBarVisibility"
                        Value="Visible" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <!--Scrollbar Thumbs-->
    <Style x:Key="SScrollThumbs"
           TargetType="{x:Type Thumb}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <Grid x:Name="Grid">
                        <Rectangle HorizontalAlignment="Stretch"
                                   VerticalAlignment="Stretch"
                                   Width="Auto"
                                   Height="Auto"
                                   Fill="Transparent" />
                        <Border x:Name="Rectangle1"
                                CornerRadius="3"
                                HorizontalAlignment="Stretch"
                                VerticalAlignment="Stretch"
                                Width="Auto"
                                Height="Auto"
                                Background="{TemplateBinding Background}" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="Tag"
                                 Value="Horizontal">
                            <Setter TargetName="Rectangle1"
                                    Property="Width"
                                    Value="Auto" />
                            <Setter TargetName="Rectangle1"
                                    Property="Height"
                                    Value="7" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--ScrollBars-->
    <Style x:Key="{x:Type ScrollBar}"
           TargetType="{x:Type ScrollBar}">
        <Setter Property="Stylus.IsFlicksEnabled"
                Value="false" />
        <Setter Property="Foreground"
                Value="#888" />
        <Setter Property="Background"
                Value="Transparent" />
        <Setter Property="Width"
                Value="8" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ScrollBar}">
                    <Grid x:Name="GridRoot"
                          Width="6"
                          Background="{TemplateBinding Background}">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="0.00001*" />
                        </Grid.RowDefinitions>

                        <Track x:Name="PART_Track"
                               Grid.Row="0"
                               IsDirectionReversed="true"
                               Focusable="false">
                            <Track.Thumb>
                                <Thumb x:Name="Thumb"
                                       Background="{TemplateBinding Foreground}"
                                       Style="{DynamicResource SScrollThumbs}" />
                            </Track.Thumb>
                            <Track.IncreaseRepeatButton>
                                <RepeatButton x:Name="PageUp"
                                              Command="ScrollBar.PageDownCommand"
                                              Opacity="0"
                                              Focusable="false" />
                            </Track.IncreaseRepeatButton>
                            <Track.DecreaseRepeatButton>
                                <RepeatButton x:Name="PageDown"
                                              Command="ScrollBar.PageUpCommand"
                                              Opacity="0"
                                              Focusable="false" />
                            </Track.DecreaseRepeatButton>
                        </Track>
                    </Grid>

                    <ControlTemplate.Triggers>
                        <Trigger SourceName="Thumb"
                                 Property="IsMouseOver"
                                 Value="true">
                            <Setter Value="{DynamicResource ButtonSelectBrush}"
                                    TargetName="Thumb"
                                    Property="Background" />
                        </Trigger>
                        <Trigger SourceName="Thumb"
                                 Property="IsDragging"
                                 Value="true">
                            <Setter Value="{DynamicResource DarkBrush}"
                                    TargetName="Thumb"
                                    Property="Background" />
                        </Trigger>

                        <Trigger Property="IsEnabled"
                                 Value="false">
                            <Setter TargetName="Thumb"
                                    Property="Visibility"
                                    Value="Collapsed" />
                        </Trigger>
                        <Trigger Property="Orientation"
                                 Value="Horizontal">
                            <Setter TargetName="GridRoot"
                                    Property="LayoutTransform">
                                <Setter.Value>
                                    <RotateTransform Angle="-90" />
                                </Setter.Value>
                            </Setter>
                            <Setter TargetName="PART_Track"
                                    Property="LayoutTransform">
                                <Setter.Value>
                                    <RotateTransform Angle="-90" />
                                </Setter.Value>
                            </Setter>
                            <Setter Property="Width"
                                    Value="Auto" />
                            <Setter Property="Height"
                                    Value="8" />
                            <Setter TargetName="Thumb"
                                    Property="Tag"
                                    Value="Horizontal" />
                            <Setter TargetName="PageDown"
                                    Property="Command"
                                    Value="ScrollBar.PageLeftCommand" />
                            <Setter TargetName="PageUp"
                                    Property="Command"
                                    Value="ScrollBar.PageRightCommand" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--Connectors-->

    <clr:Int32 x:Key="connector_end_dot_size">6</clr:Int32>
    <clr:Int32 x:Key="connector_stroke_thickness">2</clr:Int32>
    <clr:Double x:Key="connector_stroke_opacity">0.6</clr:Double>
    <clr:Double x:Key="connector_bezier_offset">20.0</clr:Double>


    <!-- Tool Tip Control -->
    <Style x:Key="SLightToolTip"
           TargetType="{x:Type dynui:DynamoToolTip}">
        <Setter Property="OverridesDefaultStyle"
                Value="true" />
        <Setter Property="HasDropShadow"
                Value="False" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type dynui:DynamoToolTip}">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition MinWidth="1"></ColumnDefinition>
                            <ColumnDefinition Width="Auto"></ColumnDefinition>
                            <ColumnDefinition MinWidth="1"></ColumnDefinition>
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition MinHeight="1"></RowDefinition>
                            <RowDefinition Height="Auto"></RowDefinition>
                            <RowDefinition MinHeight="1"></RowDefinition>
                        </Grid.RowDefinitions>
                        <Border Grid.Row="1"
                                Grid.Column="1"
                                Margin="-1"
                                BorderThickness="1"
                                BorderBrush="{StaticResource InfoBubbleEdgeNormalBrush}"
                                Background="{StaticResource InfoBubbleBackNormalBrush}">
                        </Border>
                        <Path HorizontalAlignment="Center"
                              VerticalAlignment="Center"
                              Stroke="{StaticResource InfoBubbleEdgeNormalBrush}"
                              StrokeThickness="1"
                              Fill="{StaticResource InfoBubbleBackNormalBrush}">
                            <Grid.Row>
                                <Binding RelativeSource="{RelativeSource TemplatedParent}"
                                         Converter="{StaticResource AttachmentToRowColumnConverter}"
                                         ConverterParameter="Row" />
                            </Grid.Row>
                            <Grid.Column>
                                <Binding RelativeSource="{RelativeSource TemplatedParent}"
                                         Converter="{StaticResource AttachmentToRowColumnConverter}"
                                         ConverterParameter="Column" />
                            </Grid.Column>
                            <Path.Data>
                                <PathGeometry>
                                    <PathFigure IsClosed="False">
                                        <PathFigure.StartPoint>
                                            <Binding RelativeSource="{RelativeSource TemplatedParent}"
                                                     Converter="{StaticResource AttachmentToPathConverter}"
                                                     ConverterParameter="Start" />
                                        </PathFigure.StartPoint>
                                        <PolyLineSegment>
                                            <PolyLineSegment.Points>
                                                <Binding RelativeSource="{RelativeSource TemplatedParent}"
                                                         Converter="{StaticResource AttachmentToPathConverter}"
                                                         ConverterParameter="Points" />
                                            </PolyLineSegment.Points>
                                        </PolyLineSegment>
                                    </PathFigure>
                                </PathGeometry>
                            </Path.Data>
                        </Path>
                        <ContentPresenter Grid.Column="1"
                                          Grid.Row="1"
                                          Margin="4"
                                          HorizontalAlignment="Left"
                                          VerticalAlignment="Top" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="StartPageListBox"
           TargetType="ListBox">
        <Setter Property="SnapsToDevicePixels"
                Value="true" />
        <Setter Property="OverridesDefaultStyle"
                Value="true" />
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility"
                Value="Hidden" />
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility"
                Value="Auto" />
        <Setter Property="ScrollViewer.CanContentScroll"
                Value="true" />
        <Setter Property="MaxHeight"
                Value="190" />
        <Setter Property="Margin"
                Value="0,0,0,60" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ListBox">
                    <ScrollViewer Margin="0,2,0,2"
                                  Focusable="false">
                        <StackPanel IsItemsHost="True" />
                    </ScrollViewer>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="ItemTemplate">
            <Setter.Value>
                <DataTemplate>
                    <Grid Background="Transparent">
                        <Grid.ToolTip>
                            <Binding Path="ToolTip" />
                        </Grid.ToolTip>
                        <StackPanel Orientation="Horizontal">
                            <Image Width="31"
                                   Margin="5,0,14,0"
                                   Source="{Binding Icon}"
                                   Visibility="{Binding IconVisibility}" />
                            <TextBlock Text="{Binding Caption}"
                                       Margin="6,7,0,8"
                                       FontSize="14"
                                       FontFamily="{StaticResource OpenSansRegular}"
                                       VerticalAlignment="Center" />
                            <TextBlock Text="{Binding SubScript}"
                                       Margin="16,0,0,0"
                                       Foreground="#888"
                                       FontSize="10"
                                       FontFamily="{StaticResource OpenSansRegular}"
                                       VerticalAlignment="Center" />
                        </StackPanel>
                    </Grid>
                </DataTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="StartPageListBoxItem"
           TargetType="ListBoxItem">
        <Setter Property="SnapsToDevicePixels"
                Value="true" />
        <Setter Property="OverridesDefaultStyle"
                Value="true" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ListBoxItem">
                    <Border x:Name="Border"
                            Padding="2"
                            SnapsToDevicePixels="true">
                        <Border.Background>
                            <SolidColorBrush Color="Transparent" />
                        </Border.Background>
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualState x:Name="Normal" />
                                <VisualState x:Name="Disabled" />
                                <VisualState x:Name="MouseOver">
                                    <Storyboard>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="Border"
                                                                      Storyboard.TargetProperty="(Panel.Background).(SolidColorBrush.Color)">
                                            <EasingColorKeyFrame KeyTime="0"
                                                                 Value="#a1dbff" />
                                        </ColorAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="SelectionStates">
                                <VisualState x:Name="Unselected" />
                                <VisualState x:Name="Selected" />
                                <VisualState x:Name="SelectedUnfocused" />
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <ContentPresenter />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="StartPageLabel"
           TargetType="Label">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Label">
                    <Border x:Name="border"
                            Background="Transparent">
                        <StackPanel Orientation="Horizontal">
                            <ContentControl />
                            <Label x:Name="label"
                                   Foreground="#888888"
                                   FontSize="12"
                                   Content="{TemplateBinding Content}"
                                   FontFamily="{StaticResource OpenSansRegular}"/>
                        </StackPanel>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver"
                                 Value="True">
                            <Setter TargetName="label"
                                    Property="Foreground"
                                    Value="#333" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="StartPageTreeView"
           TargetType="TreeView">
        <Setter Property="OverridesDefaultStyle"
                Value="True" />
        <Setter Property="SnapsToDevicePixels"
                Value="True" />
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility"
                Value="Auto" />
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility"
                Value="Auto" />
        <Setter Property="MaxHeight"
                Value="230" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="TreeView">
                    <Border Name="Border"
                            CornerRadius="1"
                            BorderThickness="1">
                        <Border.BorderBrush>
                            <SolidColorBrush Color="{DynamicResource BorderMediumColor}" />
                        </Border.BorderBrush>
                        <Border.Background>
                            <SolidColorBrush Color="{DynamicResource ControlLightColor}" />
                        </Border.Background>
                        <ScrollViewer Focusable="False"
                                      CanContentScroll="False"
                                      Padding="4">
                            <ItemsPresenter />
                        </ScrollViewer>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ExpandCollapseToggleStyle"
           TargetType="ToggleButton">
        <Setter Property="Focusable"
                Value="False" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ToggleButton">
                    <Grid Width="15"
                          Height="13"
                          Background="Transparent">
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CheckStates">
                                <VisualState x:Name="Checked">
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)"
                                                                       Storyboard.TargetName="Collapsed">
                                            <DiscreteObjectKeyFrame KeyTime="0"
                                                                    Value="{x:Static Visibility.Hidden}" />
                                        </ObjectAnimationUsingKeyFrames>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)"
                                                                       Storyboard.TargetName="Expanded">
                                            <DiscreteObjectKeyFrame KeyTime="0"
                                                                    Value="{x:Static Visibility.Visible}" />
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Unchecked" />
                                <VisualState x:Name="Indeterminate" />
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <Path x:Name="Collapsed"
                              HorizontalAlignment="Left"
                              VerticalAlignment="Center"
                              Margin="1,1,1,1"
                              Data="M 4 0 L 8 4 L 4 8 Z">
                            <Path.Fill>
                                <SolidColorBrush Color="{DynamicResource GlyphColor}" />
                            </Path.Fill>
                        </Path>
                        <Path x:Name="Expanded"
                              HorizontalAlignment="Left"
                              VerticalAlignment="Center"
                              Margin="1,1,1,1"
                              Data="M 0 4 L 8 4 L 4 8 Z"
                              Visibility="Hidden">
                            <Path.Fill>
                                <SolidColorBrush Color="{DynamicResource GlyphColor}" />
                            </Path.Fill>
                        </Path>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="TreeViewItemFocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Border>
                        <Rectangle Margin="0,0,0,0"
                                   StrokeThickness="5"
                                   Stroke="Black"
                                   StrokeDashArray="1 2"
                                   Opacity="0" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="StartPageTreeViewItem"
           TargetType="TreeViewItem">
        <Setter Property="IsExpanded"
                Value="True" />
        <Setter Property="Background"
                Value="Transparent" />
        <Setter Property="HorizontalContentAlignment"
                Value="{Binding Path=HorizontalContentAlignment,
    RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
        <Setter Property="VerticalContentAlignment"
                Value="{Binding Path=VerticalContentAlignment,
    RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
        <Setter Property="Padding"
                Value="1,0,0,0" />
        <Setter Property="Foreground"
                Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
        <Setter Property="FocusVisualStyle"
                Value="{StaticResource TreeViewItemFocusVisual}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TreeViewItem}">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition MinWidth="19"
                                              Width="Auto" />
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="*" />
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto" />
                            <RowDefinition />
                        </Grid.RowDefinitions>
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="SelectionStates">
                                <VisualState x:Name="Selected">
                                    <Storyboard>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="Bd"
                                                                      Storyboard.TargetProperty="(Panel.Background).
                    (SolidColorBrush.Color)">
                                            <EasingColorKeyFrame KeyTime="0"
                                                                 Value="{StaticResource SelectedBackgroundColor}" />
                                        </ColorAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Unselected" />
                                <VisualState x:Name="SelectedInactive">
                                    <Storyboard>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="Bd"
                                                                      Storyboard.TargetProperty="(Panel.Background).
                    (SolidColorBrush.Color)">
                                            <EasingColorKeyFrame KeyTime="0"
                                                                 Value="{StaticResource SelectedUnfocusedColor}" />
                                        </ColorAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="ExpansionStates">
                                <VisualState x:Name="Expanded">
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)"
                                                                       Storyboard.TargetName="ItemsHost">
                                            <DiscreteObjectKeyFrame KeyTime="0"
                                                                    Value="{x:Static Visibility.Visible}" />
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Collapsed" />
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <ToggleButton x:Name="Expander"
                                      Style="{StaticResource ExpandCollapseToggleStyle}"
                                      ClickMode="Press"
                                      IsChecked="{Binding IsExpanded, 
            RelativeSource={RelativeSource TemplatedParent}}" />
                        <Border x:Name="Bd"
                                Grid.Column="1"
                                Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                Padding="{TemplateBinding Padding}">
                            <ContentPresenter x:Name="PART_Header"
                                              ContentSource="Header"
                                              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" />
                        </Border>
                        <ItemsPresenter x:Name="ItemsHost"
                                        Grid.Row="1"
                                        Grid.Column="1"
                                        Grid.ColumnSpan="2"
                                        Visibility="Collapsed" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="HasItems"
                                 Value="false">
                            <Setter TargetName="Expander"
                                    Property="Visibility"
                                    Value="Hidden" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="HasHeader"
                                           Value="false" />
                                <Condition Property="Width"
                                           Value="Auto" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="PART_Header"
                                    Property="MinWidth"
                                    Value="75" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="HasHeader"
                                           Value="false" />
                                <Condition Property="Height"
                                           Value="Auto" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="PART_Header"
                                    Property="MinHeight"
                                    Value="19" />
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="InOutPortControlStyle"
           TargetType="ItemsControl">
        <Setter Property="ItemsPanel">
            <Setter.Value>
                <ItemsPanelTemplate>
                    <dynui:InOutPortPanel VerticalAlignment="Stretch"
                                          HorizontalAlignment="Center" />
                </ItemsPanelTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{x:Type dynui:ImageCheckBox}"
           TargetType="{x:Type dynui:ImageCheckBox}">
        <Setter Property="SnapsToDevicePixels"
                Value="true" />
        <Setter Property="OverridesDefaultStyle"
                Value="true" />
        <Setter Property="Cursor"
                Value="Hand" />
        <Setter Property="FocusVisualStyle"
                Value="{DynamicResource CheckBoxFocusVisual}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type dynui:ImageCheckBox}">
                    <Grid>
                        <Canvas>
                            <Canvas.Clip>
                                <RectangleGeometry>
                                    <RectangleGeometry.Rect>
                                        <MultiBinding Converter="{StaticResource ViewButtonClipRectConverter}">
                                            <Binding Path="Width"
                                                     RelativeSource="{RelativeSource TemplatedParent}" />
                                            <Binding Path="Height"
                                                     RelativeSource="{RelativeSource TemplatedParent}" />
                                        </MultiBinding>
                                    </RectangleGeometry.Rect>
                                </RectangleGeometry>
                            </Canvas.Clip>
                            <Image Name="buttonStateImage">
                                <Image.Width>
                                    <Binding Path="Width"
                                             RelativeSource="{RelativeSource TemplatedParent}" />
                                </Image.Width>
                                <Image.Source>
                                    <Binding Path="StateImage"
                                             RelativeSource="{RelativeSource TemplatedParent}" />
                                </Image.Source>
                                <Image.RenderTransform>
                                    <TranslateTransform />
                                </Image.RenderTransform>
                            </Image>
                            <Image Name="buttonCheckImage">
                                <Image.Width>
                                    <Binding Path="Width"
                                             RelativeSource="{RelativeSource TemplatedParent}" />
                                </Image.Width>
                                <Image.Source>
                                    <Binding Path="CheckImage"
                                             RelativeSource="{RelativeSource TemplatedParent}" />
                                </Image.Source>
                                <Image.RenderTransform>
                                    <TranslateTransform />
                                </Image.RenderTransform>
                            </Image>
                        </Canvas>
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualState x:Name="Normal" />
                                <VisualState x:Name="MouseOver">
                                    <Storyboard>
                                        <DoubleAnimation x:Name="hoverOverAnimation"
                                                         Storyboard.TargetName="buttonStateImage"
                                                         Storyboard.TargetProperty="(UIElement.RenderTransform).(TranslateTransform.Y)"
                                                         Duration="0" />
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Pressed">
                                    <Storyboard>
                                        <DoubleAnimation x:Name="pressedAnimation"
                                                         Storyboard.TargetName="buttonStateImage"
                                                         Storyboard.TargetProperty="(UIElement.RenderTransform).(TranslateTransform.Y)"
                                                         Duration="0" />
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Disabled" />
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="CheckStates">
                                <VisualState x:Name="Checked">
                                    <Storyboard>
                                        <DoubleAnimation x:Name="checkedAnimation"
                                                         Storyboard.TargetName="buttonCheckImage"
                                                         Storyboard.TargetProperty="(UIElement.RenderTransform).(TranslateTransform.Y)"
                                                         Duration="0" />
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Unchecked" />
                                <VisualState x:Name="Indeterminate" />
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="Path"
           x:Key="TreeViewItemPath">
        <Setter Property="Stroke">
            <Setter.Value>
                <SolidColorBrush Color="{DynamicResource GlyphColor}" />
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <DataTrigger Binding="{Binding Path=IsMouseOver,
                                           RelativeSource={RelativeSource
                                           AncestorType={x:Type Grid}}}"
                         Value="True">
                <Setter Property="Stroke"
                        Value="#FF1BBBFA" />
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="{x:Type dynui:ImageButton}"
           TargetType="{x:Type dynui:ImageButton}">
        <Setter Property="SnapsToDevicePixels"
                Value="true" />
        <Setter Property="OverridesDefaultStyle"
                Value="true" />
        <Setter Property="Cursor"
                Value="Hand" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type dynui:ImageButton}">
                    <Grid>
                        <Canvas>
                            <Canvas.Clip>
                                <RectangleGeometry>
                                    <RectangleGeometry.Rect>
                                        <MultiBinding Converter="{StaticResource ViewButtonClipRectConverter}">
                                            <Binding Path="Width"
                                                     RelativeSource="{RelativeSource TemplatedParent}" />
                                            <Binding Path="Height"
                                                     RelativeSource="{RelativeSource TemplatedParent}" />
                                        </MultiBinding>
                                    </RectangleGeometry.Rect>
                                </RectangleGeometry>
                            </Canvas.Clip>
                            <Image Name="buttonStateImage">
                                <Image.Width>
                                    <Binding Path="Width"
                                             RelativeSource="{RelativeSource TemplatedParent}" />
                                </Image.Width>
                                <Image.Source>
                                    <Binding Path="StateImage"
                                             RelativeSource="{RelativeSource TemplatedParent}" />
                                </Image.Source>
                                <Image.RenderTransform>
                                    <TranslateTransform />
                                </Image.RenderTransform>
                            </Image>
                        </Canvas>
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualState x:Name="Normal" />
                                <VisualState x:Name="MouseOver">
                                    <Storyboard>
                                        <DoubleAnimation x:Name="hoverOverAnimation"
                                                         Storyboard.TargetName="buttonStateImage"
                                                         Storyboard.TargetProperty="(UIElement.RenderTransform).(TranslateTransform.Y)"
                                                         Duration="0" />
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Pressed">
                                    <Storyboard>
                                        <DoubleAnimation x:Name="pressedAnimation"
                                                         Storyboard.TargetName="buttonStateImage"
                                                         Storyboard.TargetProperty="(UIElement.RenderTransform).(TranslateTransform.Y)"
                                                         Duration="0" />
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Disabled">
                                    <Storyboard>
                                        <DoubleAnimation x:Name="disabledAnimation"
                                                         Storyboard.TargetName="buttonStateImage"
                                                         Storyboard.TargetProperty="(UIElement.RenderTransform).(TranslateTransform.Y)"
                                                         Duration="0" />
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type dynui:ImageRepeatButton}">
        <Setter Property="SnapsToDevicePixels"
                Value="true" />
        <Setter Property="OverridesDefaultStyle"
                Value="true" />
        <Setter Property="Cursor"
                Value="Hand" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type dynui:ImageRepeatButton}">
                    <Grid>
                        <Canvas>
                            <Canvas.Clip>
                                <RectangleGeometry>
                                    <RectangleGeometry.Rect>
                                        <MultiBinding Converter="{StaticResource ViewButtonClipRectConverter}">
                                            <Binding Path="Width"
                                                     RelativeSource="{RelativeSource TemplatedParent}" />
                                            <Binding Path="Height"
                                                     RelativeSource="{RelativeSource TemplatedParent}" />
                                        </MultiBinding>
                                    </RectangleGeometry.Rect>
                                </RectangleGeometry>
                            </Canvas.Clip>
                            <Image Name="buttonStateImage">
                                <Image.Width>
                                    <Binding Path="Width"
                                             RelativeSource="{RelativeSource TemplatedParent}" />
                                </Image.Width>
                                <Image.Source>
                                    <Binding Path="StateImage"
                                             RelativeSource="{RelativeSource TemplatedParent}" />
                                </Image.Source>
                                <Image.RenderTransform>
                                    <TranslateTransform />
                                </Image.RenderTransform>
                            </Image>
                        </Canvas>
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualState x:Name="Normal" />
                                <VisualState x:Name="MouseOver">
                                    <Storyboard>
                                        <DoubleAnimation x:Name="hoverOverAnimation"
                                                         Storyboard.TargetName="buttonStateImage"
                                                         Storyboard.TargetProperty="(UIElement.RenderTransform).(TranslateTransform.Y)"
                                                         Duration="0" />
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Pressed">
                                    <Storyboard>
                                        <DoubleAnimation x:Name="pressedAnimation"
                                                         Storyboard.TargetName="buttonStateImage"
                                                         Storyboard.TargetProperty="(UIElement.RenderTransform).(TranslateTransform.Y)"
                                                         Duration="0" />
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Disabled">
                                    <Storyboard>
                                        <DoubleAnimation x:Name="disabledAnimation"
                                                         Storyboard.TargetName="buttonStateImage"
                                                         Storyboard.TargetProperty="(UIElement.RenderTransform).(TranslateTransform.Y)"
                                                         Duration="0" />
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="FocusStates">
                                <VisualState x:Name="Focused" />
                                <VisualState x:Name="Unfocused" />
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="LibraryPopupContentStyle"
           TargetType="ContentControl">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ContentControl">
                    <Grid>
                        <Border Background="{StaticResource FilterPopupBackgroundColor}"
                                BorderBrush="{StaticResource FilterPopupBorderColor}"
                                BorderThickness="1"
                                Margin="0,11,0,0"
                                CornerRadius="5">
                            <ContentPresenter />
                        </Border>
                        <Path x:Name="arrow"
                              Fill="{StaticResource FilterPopupBackgroundColor}"
                              Stroke="{StaticResource FilterPopupBorderColor}"
                              Data="M 5 12 L 15 0 L 25 12" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="LibraryIconsStyle"
           TargetType="{x:Type fa:ImageAwesome}">
        <Setter Property="Foreground"
                Value="{Binding IsAnySearchResult, 
                                Converter={StaticResource FilterIconForegroundConverter}}" />
        <Style.Triggers>
            <Trigger Property="IsMouseOver"
                     Value="True">
                <Setter Property="Foreground"
                        Value="White" />
                <Setter Property="Cursor"
                        Value="Hand" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="LayoutButtonStyle"
           TargetType="{x:Type Border}">
        <Setter Property="Background"
                Value="#01000000" />
        <Style.Triggers>
            <Trigger Property="IsMouseOver"
                     Value="True">
                <Setter Property="Background"
                        Value="{StaticResource FilterPopupBorderColor}" />
                <Setter Property="Cursor"
                        Value="Hand" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="FilterTextBlockStyle"
           TargetType="{x:Type TextBlock}">
        <Setter Property="Foreground"
                Value="{StaticResource NodeNameForeground}" />
        <Style.Triggers>
            <Trigger Property="IsMouseOver"
                     Value="True">
                <Setter Property="TextBlock.TextDecorations"
                        Value="Underline" />
                <Setter Property="Cursor"
                        Value="Hand" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style TargetType="{x:Type dynui:UseLevelSpinner}">
        <Style.Resources>
            <Style TargetType="{x:Type RepeatButton}" x:Key="IncreaseButton" BasedOn="{x:Null}">
                <Setter Property="MinWidth" Value="12" />
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type RepeatButton}">
                            <Grid>
                                <Border Name="Border" BorderThickness="1" BorderBrush="{StaticResource SpinnerNormalBorderBrush}" CornerRadius="0 1 0 0" Margin="0" Padding="0" Background="{StaticResource SpinnerNormalBrush}"></Border>
                                <ContentPresenter HorizontalAlignment="Center" x:Name="ContentPresenter" VerticalAlignment="Center" Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}"/>
                            </Grid>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsMouseOver" Value="True">
                                    <Setter TargetName="Border" Property="Background" Value="{StaticResource SpinnerHoverBrush}"/>
                                </Trigger>

                                <Trigger Property="IsPressed" Value="True">
                                    <Setter TargetName="Border" Property="Background" Value="{StaticResource SpinnerPressedBrush}"/>
                                    <Setter TargetName="Border" Property="BorderBrush" Value="{StaticResource SpinnerPressedBorderBrush}"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <Style TargetType="{x:Type RepeatButton}" x:Key="DecreaseButton" BasedOn="{x:Null}">
                <Setter Property="MinWidth" Value="12" />
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type RepeatButton}">
                            <Grid>
                                <Border Name="Border" BorderThickness="1" BorderBrush="{StaticResource SpinnerNormalBorderBrush}" CornerRadius="0 0 1 0" Margin="0" Padding="0" Background="{StaticResource SpinnerNormalBrush}"></Border>
                                <ContentPresenter HorizontalAlignment="Center" x:Name="ContentPresenter" VerticalAlignment="Center" Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}"/>
                            </Grid>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsMouseOver" Value="True">
                                    <Setter TargetName="Border" Property="Background" Value="{StaticResource SpinnerHoverBrush}"/>
                                </Trigger>

                                <Trigger Property="IsPressed" Value="True">
                                    <Setter TargetName="Border" Property="Background" Value="{StaticResource SpinnerPressedBrush}"/>
                                    <Setter TargetName="Border" Property="BorderBrush" Value="{StaticResource SpinnerPressedBorderBrush}"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
        </Style.Resources>

        <Setter Property="Background" Value="#ffffffff" />
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="BorderBrush" Value="#ff848484"/>

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type dynui:UseLevelSpinner}">
                    <Grid SnapsToDevicePixels="True" Background="{TemplateBinding Background}">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*"/>
                            <ColumnDefinition Width="Auto"/>
                        </Grid.ColumnDefinitions>

                        <Grid.RowDefinitions>
                            <RowDefinition Height="*" />
                            <RowDefinition Height="*" />
                        </Grid.RowDefinitions>

                        <TextBox 
                            Name="textbox"
                            BorderThickness="0"
                            Margin="0"
                            Grid.Column="0"
                            Grid.RowSpan="2"
                            Background="Transparent"
                            VerticalContentAlignment="Center" 
                            FontFamily="{StaticResource OpenSansRegular}"
                            FontSize="10"
                            IsEnabled="False"/>

                        <RepeatButton Margin="0" Padding="0" Command="{x:Static dynui:UseLevelSpinner.IncreaseCommand}"
                            Grid.Column="1" Grid.Row="0" Focusable="False" Style="{StaticResource IncreaseButton}">
                            <Path Fill="{TemplateBinding Foreground}" Width="5" Height="3" Stretch="Fill" Stroke="{x:Null}" Data="M0,1L1,0 2,1z"/>
                        </RepeatButton>

                        <RepeatButton Margin="0" Padding="0" Command="{x:Static dynui:UseLevelSpinner.DecreaseCommand}"
                            Grid.Column="1" Grid.Row="1" Focusable="False" Style="{StaticResource DecreaseButton}">
                            <Path Fill="{TemplateBinding Foreground}" Width="5" Height="3" Stretch="Fill" Stroke="{x:Null}" Data="M0,0L2,0 1,1z"/>
                        </RepeatButton>

                        <Border CornerRadius="1" Grid.ColumnSpan="2" Grid.RowSpan="2" BorderThickness="{TemplateBinding BorderThickness}"
                            BorderBrush="{TemplateBinding BorderBrush}">
                        </Border>
                    </Grid>

                    <ControlTemplate.Triggers>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <SolidColorBrush x:Key="PreferencesWindowBackgroundColor" 
                             Color="#535353" />
    <SolidColorBrush x:Key="PreferencesWindowItemDarkerBackgroundColor"
                     Color="#353535"/>
    <SolidColorBrush x:Key="PreferencesWindowFontColor" 
                             Color="#E5E5E5" />
    <SolidColorBrush x:Key="PreferencesWindowButtonColor" 
                             Color="#0696D7" />
    <SolidColorBrush x:Key="PreferencesWindowTabSelectedColor" 
                             Color="#ADE4DE" />
    <SolidColorBrush x:Key="PreferencesWindowButtonPressedColor" 
                             Color="#0778B0" />
    <SolidColorBrush x:Key="PreferencesWindowButtonMouseOverFontColor" 
                             Color="#CDCBCB" />
    <SolidColorBrush x:Key="CloseButtonMouseOverBackground" 
                             Color="#E81123" />
    <SolidColorBrush x:Key="CloseButtonPressed" 
                             Color="#B70F1B" />
    <SolidColorBrush x:Key="CloseButtonMouseOverForeground" 
                             Color="#FFFFFF" />
    <SolidColorBrush x:Key="TabItemUnSelected" 
                             Color="DarkGray" />
    <SolidColorBrush x:Key="SecondaryGray" 
                             Color="#707070" />
    <SolidColorBrush x:Key="SemiTransparent" 
                             Color="#80000000" />


    <!--Usual button color for the Preferences Window-->
    <Color x:Key="PreferencesToogleCheckedColor" R="6" G="150" B="215" A="255"/>
    
    <!--Gray Window Background Color-->
    <Color x:Key="PreferencesToogleUnCheckedColor" R="229" G="229" B="229" A="229"/>

    <!--White Window Color for borders-->
    <Color x:Key="PreferencesToogleBorderColor" R="255" G="255" B="255" A="255"/>

    <Style x:Key="DarkTextBlock"
           TargetType="TextBlock">
        <Setter Property="FontSize"
                Value="12">
        </Setter>
        <Setter Property="TextTrimming"
            Value="CharacterEllipsis">
        </Setter>
    </Style>

    <Style x:Key="PreferenceTitleLabelStyle"
            TargetType="{x:Type Label}">
        <Setter Property="Foreground"
                Value="{StaticResource PreferencesWindowFontColor}">
        </Setter>
        <Setter Property="FontSize"
                Value="14">
        </Setter>
    </Style>

    <Style x:Key="CaptionButtonStyleClose" 
                   TargetType="Button">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Grid x:Name="LayoutRoot" 
                                  Background="Transparent" 
                                  Width="46" 
                                  Height="40">
                        <TextBlock x:Name="txt" 
                                           Text="{TemplateBinding Content}" 
                                           FontFamily="Segoe MDL2 Assets" 
                                           FontSize="14" 
                                           Foreground="{StaticResource PreferencesWindowFontColor}" 
                                           HorizontalAlignment="Center" 
                                           VerticalAlignment="Center"
                                           RenderOptions.ClearTypeHint="Auto" 
                                           TextOptions.TextRenderingMode="Aliased"  
                                           TextOptions.TextFormattingMode="Display"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" 
                                         Value="True">
                            <Setter TargetName="LayoutRoot" 
                                            Property="Background" 
                                            Value="{StaticResource CloseButtonMouseOverBackground}"/>
                            <Setter TargetName="txt" 
                                            Property="Foreground" 
                                            Value="{StaticResource CloseButtonMouseOverForeground}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" 
                                         Value="True">
                            <Setter TargetName="LayoutRoot" 
                                            Property="Background" 
                                            Value="{StaticResource CloseButtonPressed}"/>
                            <Setter TargetName="txt" 
                                            Property="Foreground" 
                                            Value="{StaticResource CloseButtonMouseOverForeground}"/>
                            <Setter TargetName="txt" 
                                            Property="FontSize" 
                                            Value="12"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="CloseButtonStyle" 
                   TargetType="Button" 
                   BasedOn="{StaticResource CaptionButtonStyleClose}">
        <Setter Property="Content" 
                        Value="&#xE8BB;"/>
    </Style>

    <Style x:Key="NormalButtonStyle" 
                   TargetType="Button">
        <Setter Property="Foreground" 
                        Value="{StaticResource PreferencesWindowFontColor}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border Name="border"
                                    Background="{StaticResource PreferencesWindowButtonColor}"
                                    BorderThickness="1"
                                    Padding="4,2"
                                    BorderBrush="Transparent"
                                    CornerRadius="3">
                        <Grid >
                            <ContentPresenter HorizontalAlignment="Center"
                                                      VerticalAlignment="Center" 
                                                      Name="contentShadow">
                            </ContentPresenter>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsPressed" 
                                         Value="True">
                            <Setter TargetName="border" 
                                            Property="Background" 
                                            Value="{StaticResource PreferencesWindowButtonPressedColor}" />
                            <Setter Property="FontSize" 
                                            Value="11"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" 
                                         Value="True">
                            <Setter TargetName="border" 
                                            Property="Background" 
                                            Value="{StaticResource PreferencesWindowButtonPressedColor}" />
                            <Setter Property="Foreground" 
                                            Value="{StaticResource PreferencesWindowButtonMouseOverFontColor}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate >
            </Setter.Value>
        </Setter>
    </Style>

    <ControlTemplate x:Key="ExpanderToggleButton" TargetType="{x:Type ToggleButton}">
        <Border Name="Border" 
                Grid.Row="0" 
                Background="{StaticResource SecondaryGray}" 
                BorderThickness="1" 
                CornerRadius="1" >
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="*" />
                    <ColumnDefinition Width="Auto" />
                </Grid.ColumnDefinitions>
                <!--Draws a plus (+) sign on the expander-->
                <Path x:Name="Sign"
                      Grid.Column="1"
                      Data="M 0,6 H 12 M 6,0 V 12 Z"
                      Stroke="{StaticResource PreferencesWindowFontColor}"
                      Width="12"
                      Height="12"
                      Margin="0,10,15,10"
                      StrokeThickness="2"
                      HorizontalAlignment="Center"
                      VerticalAlignment="Center"
                      >
                </Path>
                <ContentPresenter x:Name="HeaderContent" 
                                    Grid.Column="0" 
                                    Margin="15,0,0,0"  
                                    RecognizesAccessKey="True" 
                                    VerticalAlignment="Center"
                                    Width="{Binding
                                        RelativeSource={RelativeSource
                                        Mode=FindAncestor,
                                        AncestorType={x:Type Expander}},
                                        Path=ActualWidth}"/>
            </Grid>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="IsChecked" Value="true">
                <!--Sets the sign on the expander to a minus (-)-->
                <Setter TargetName="Sign" Property="Data" Value="M 0,6 H 12 Z" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Background" TargetName="Border" Value="{x:Null}"/>
                <Setter Property="BorderBrush" TargetName="Border" Value="{x:Null}"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    
    <DataTemplate x:Key="expanderHeader">
        <TextBlock
            Text="{Binding}" 
            FontSize="14"
            FontWeight="Medium">
        </TextBlock>
    </DataTemplate>
    
    <Style TargetType="Expander" x:Key="MenuExpanderStyle">
        <Setter Property="Background" Value="{StaticResource SecondaryGray}"/>
        <Setter Property="Foreground" Value="{StaticResource PreferencesWindowFontColor}"/>
        <Setter Property="HeaderTemplate" Value="{StaticResource expanderHeader}"/>
        <Setter Property="Template">
            <Setter.Value>
                <!-- Control template for expander -->
                <ControlTemplate TargetType="Expander" x:Name="exp">
                    <Grid>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Name="ContentRow" Height="0"/>
                        </Grid.RowDefinitions>
                        <Border Name="Border" Grid.Row="0" Background="{x:Null}" BorderBrush="{x:Null}" BorderThickness="1" CornerRadius="0,0,0,0">
                            <ToggleButton IsChecked="{Binding Path=IsExpanded,Mode=TwoWay,RelativeSource={RelativeSource TemplatedParent}}" OverridesDefaultStyle="True" Template="{StaticResource ExpanderToggleButton}" Background="#FF4682B4">
                                <ToggleButton.Content>
                                    <ContentPresenter ContentSource="Header" RecognizesAccessKey="True" />
                                </ToggleButton.Content>
                            </ToggleButton>
                        </Border>
                        <Border x:Name="Content" 
                                Grid.Row="1" 
                                BorderThickness="1,0,1,1"
                                CornerRadius="0,0,4,4" >
                            <ContentPresenter Margin="12,0,0,15" />
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsExpanded" Value="True">
                            <Setter TargetName="ContentRow" Property="Height" Value="{Binding ElementName=Content,Path=Height}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>




    <!-- This expander style is similar to the MenuExpanderStyle and the only difference is the left-margin spacing -->
    <Style TargetType="Expander" x:Key="WorkspaceReferencesExpanderStyle">
        <Setter Property="Background" Value="{StaticResource SecondaryGray}"/>
        <Setter Property="Foreground" Value="{StaticResource PreferencesWindowFontColor}"/>
        <Setter Property="HeaderTemplate" Value="{StaticResource expanderHeader}"/>
        <Setter Property="Template">
            <Setter.Value>
                <!-- Control template for expander -->
                <ControlTemplate TargetType="Expander" x:Name="exp">
                    <Grid>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Name="ContentRow" Height="0"/>
                        </Grid.RowDefinitions>
                        <Border Name="Border" Grid.Row="0" Background="{x:Null}" BorderBrush="{x:Null}" BorderThickness="1" CornerRadius="0,0,0,0">
                            <ToggleButton IsChecked="{Binding Path=IsExpanded,Mode=TwoWay,RelativeSource={RelativeSource TemplatedParent}}" OverridesDefaultStyle="True" Template="{StaticResource ExpanderToggleButton}" Background="#FF4682B4">
                                <ToggleButton.Content>
                                    <ContentPresenter ContentSource="Header" RecognizesAccessKey="True" />
                                </ToggleButton.Content>
                            </ToggleButton>
                        </Border>
                        <Border x:Name="Content" 
                                Grid.Row="1" 
                                BorderThickness="1,0,1,1"
                                CornerRadius="0,0,4,4" >
                            <ContentPresenter Margin="2,0,0,15" />
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsExpanded" Value="True">
                            <Setter TargetName="ContentRow" Property="Height" Value="{Binding ElementName=Content,Path=Height}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="LeftTab" 
                   TargetType="{x:Type TabItem}">
        <Setter Property="HorizontalAlignment" 
                Value="Left"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TabItem}">
                    <Border Margin="2" 
                                    Name="TabBorder" 
                                    CornerRadius="6" 
                                    BorderBrush="Transparent" 
                                    Background="Transparent" 
                                    BorderThickness="2" 
                                    HorizontalAlignment="Stretch" 
                                    VerticalAlignment="Stretch">
                        <StackPanel Orientation="Horizontal" 
                                            HorizontalAlignment="Stretch" 
                                            VerticalAlignment="Stretch">
                            <Grid Name="TabPanel" 
                                          Width="150"
                                          Height="30">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="5" />
                                    <ColumnDefinition Width="*" />
                                </Grid.ColumnDefinitions>
                                <Label x:Name="SelectedItem" 
                                               Grid.Column="0"/>
                                <ContentPresenter x:Name="ContentSection"
                                                          Grid.Column="1" 
                                                          ContentSource="Header" 
                                                          VerticalAlignment="Center" 
                                                          HorizontalAlignment="Stretch" 
                                                          Margin="5,0,0,0"/>
                            </Grid>
                        </StackPanel>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsSelected" 
                                         Value="True">
                            <Setter TargetName="SelectedItem" 
                                            Property="Background" 
                                            Value="{StaticResource PreferencesWindowTabSelectedColor}" />
                            <Setter Property="Foreground" 
                                            Value="{StaticResource PreferencesWindowFontColor}" />
                            <Setter Property="FontWeight" 
                                            Value="Bold" />
                        </Trigger>
                        <Trigger Property="IsSelected" 
                                         Value="False">
                            <Setter TargetName="SelectedItem" 
                                            Property="Background" 
                                            Value="{StaticResource PreferencesWindowBackgroundColor}" />
                            <Setter Property="Foreground" 
                                            Value="{StaticResource TabItemUnSelected}" />
                            <Setter Property="FontWeight" 
                                            Value="Regular" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--This is a Toogle button shown in the Preferences Window for the General tab, when is checked shows a Blue button-->
    <Style x:Key="EllipseToggleButton1"
           TargetType="{x:Type ToggleButton}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Grid x:Name="mainGrid">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto"/>
                        </Grid.ColumnDefinitions>
                        <Border Grid.Column="0" Name="_borderOn"
                                Background="Transparent"
                                Width="{TemplateBinding Width}">
                            <Grid>
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="Auto"/>
                                </Grid.RowDefinitions>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="Auto"/>
                                    <ColumnDefinition Width="Auto"/>
                                    <ColumnDefinition Width="*" />
                                    <ColumnDefinition Width="Auto"/>
                                    <ColumnDefinition Width="Auto"/>
                                </Grid.ColumnDefinitions>
                                <Border Grid.Row="0" Grid.RowSpan="1" Grid.Column="1"
                                        Grid.ColumnSpan="3" Background="{StaticResource PreferencesWindowButtonColor}"
                                        Panel.ZIndex="1"/>
                                <Ellipse Name="ButtonBackgroundOn"
                                         Grid.Row="0" Grid.RowSpan="1" Grid.Column="0"
                                         Grid.ColumnSpan="2" 
                                         Fill="{StaticResource PreferencesWindowButtonColor}"
                                         Width="{TemplateBinding Height}"
                                         Panel.ZIndex="0"/>
                                <Ellipse Grid.Row="0" Grid.RowSpan="1"
                                         Grid.Column="3" Grid.ColumnSpan="2"
                                         Width="{TemplateBinding Height}"
                                         Height="{TemplateBinding Height}"
                                         Fill="{StaticResource CloseButtonMouseOverForeground}"
                                         Panel.ZIndex="3"
                                         Stroke="{StaticResource PreferencesWindowButtonColor}"
                                         StrokeThickness="4"/>
                            </Grid>
                        </Border>
                        
                        <Border Grid.Column="0" Name="_borderOff"
                                Background="Transparent"
                                Width="{TemplateBinding Width}">
                            <Grid>
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="Auto"/>
                                </Grid.RowDefinitions>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="Auto"/>
                                    <ColumnDefinition Width="Auto"/>
                                    <ColumnDefinition Width="*" />
                                    <ColumnDefinition Width="Auto"/>
                                    <ColumnDefinition Width="Auto"/>
                                </Grid.ColumnDefinitions>
                                <Border Grid.Row="0" Grid.RowSpan="1" Grid.Column="1"
                                        Grid.ColumnSpan="3" Background="{StaticResource TabItemUnSelected}"
                                        Panel.ZIndex="1"/>
                                <Ellipse Name="ButtonBackgroundOff"
                                         Grid.Row="0" Grid.RowSpan="1" Grid.Column="3"
                                         Grid.ColumnSpan="2" 
                                         Width="{TemplateBinding Height}"
                                         Height="{TemplateBinding Height}"
                                         Fill="{StaticResource TabItemUnSelected}"
                                         Panel.ZIndex="0"/>
                                <Ellipse Grid.Row="0" Grid.RowSpan="1"
                                         Grid.Column="0" Grid.ColumnSpan="2"
                                         Fill="{StaticResource CloseButtonMouseOverForeground}"
                                         Width="{TemplateBinding Height}"
                                         Height="{TemplateBinding Height}"
                                         Panel.ZIndex="3"
                                         Stroke="{StaticResource TabItemUnSelected}"
                                         StrokeThickness="4"/>
                            </Grid>
                        </Border>
                    </Grid>

                    <!-- triggers toggle visual appearance -->
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter TargetName="_borderOff" Property="Visibility"
                                    Value="Collapsed" />
                            <Setter TargetName="_borderOn" Property="Visibility"
                                    Value="Visible" />
                        </Trigger>
                        <Trigger Property="IsChecked" Value="False">
                            <Setter TargetName="_borderOff" Property="Visibility"
                                    Value="Visible" />
                            <Setter TargetName="_borderOn" Property="Visibility"
                                    Value="Collapsed" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="mainGrid" Property="OpacityMask"
                                    Value="{StaticResource SemiTransparent}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--Due that the comboboxes in the design show a different button than the usual ones, we need a new style for the toggle button--> 
    <ControlTemplate x:Key="NoBordersComboBoxToggleButton" 
                       TargetType="{x:Type ToggleButton}">
        <Grid>
            <Grid.ColumnDefinitions>
                <ColumnDefinition />
                <ColumnDefinition Width="20" />
            </Grid.ColumnDefinitions>
            <Border x:Name="Border" 
                    Grid.ColumnSpan="2"
                    CornerRadius="0"
                    Background="{StaticResource PreferencesWindowBackgroundColor}"
                    BorderBrush="#FF97A0A5"
                    BorderThickness="0,0,0,1" />
            <Border Grid.Column="0"
                    CornerRadius="0" 
                    Margin="1" 
                    Background="{StaticResource PreferencesWindowBackgroundColor}" 
                    BorderBrush="#FF97A0A5"
                    BorderThickness="0,0,0,0" />
            <!--This Path will draw a small triangle symbol inside the toogle button-->
            <Path x:Name="Arrow"
                    Grid.Column="1"     
                    Fill="{StaticResource PreferencesWindowFontColor}"
                    HorizontalAlignment="Center"
                    VerticalAlignment="Center"
                    Data="M0,0 L0,2 L4,6 L8,2 L8,0 L4,4 z" />
        </Grid>
    </ControlTemplate>

    <!--This ControlTemplate for TextBox is used inside the NoBordersComboBox control-->
    <ControlTemplate x:Key="NoBordersComboBoxTextBox" 
                   TargetType="{x:Type TextBox}">
    <Border x:Name="PART_ContentHost" 
            Focusable="False" 
            Background="{TemplateBinding Background}" />
    </ControlTemplate>

    <!--This is the main Style for the new ComboBox in the Preferences window General tab and using the previous templated declared-->
    <Style x:Key="NoBordersComboBoxStyle" 
           TargetType="{x:Type ComboBox}">
        <Setter Property="SnapsToDevicePixels" 
                Value="true"/>
        <Setter Property="OverridesDefaultStyle" 
                Value="true"/>
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" 
                Value="Auto"/>
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" 
                Value="Auto"/>
        <Setter Property="ScrollViewer.CanContentScroll" 
                Value="true"/>
        <Setter Property="Foreground" 
                Value="{StaticResource PreferencesWindowFontColor}"/>
        <Setter Property="FontWeight" 
                Value="Regular"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ComboBox}">
                    <Grid>
                        <!--Toogle button that is shown in the right side of the combobox and when is clicked displays a list of all the values-->
                        <ToggleButton Name="ToggleButton" 
                                    Template="{StaticResource NoBordersComboBoxToggleButton}" 
                                    Grid.Column="2" 
                                    Focusable="false"
                                    IsChecked="{Binding Path=IsDropDownOpen,Mode=TwoWay,RelativeSource={RelativeSource TemplatedParent}}"
                                    ClickMode="Press">
                        </ToggleButton>
                        <ContentPresenter Name="ContentSite" 
                                        IsHitTestVisible="False"  
                                        Content="{TemplateBinding SelectionBoxItem}"
                                        ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}"
                                        ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}"
                                        Margin="3,3,23,3"
                                        VerticalAlignment="Center"
                                        HorizontalAlignment="Left" />
                        <!--This TextBox shows the current comboboxitem value selected-->
                        <TextBox x:Name="PART_EditableTextBox"
                                    Style="{x:Null}" 
                                    Template="{StaticResource NoBordersComboBoxTextBox}" 
                                    HorizontalAlignment="Left" 
                                    VerticalAlignment="Center" 
                                    Margin="3,3,23,3"
                                    Focusable="True" 
                                    Background="#FF3F3F3F"
                                    Foreground="{StaticResource PreferencesWindowFontColor}"
                                    Visibility="Hidden"
                                    IsReadOnly="{TemplateBinding IsReadOnly}"/>
                        <!--The Popup is the window with all the comboboxitems displayed when the user clicks the combobox toogle button-->
                        <Popup Name="Popup"
                                  Placement="Bottom"
                                  IsOpen="{TemplateBinding IsDropDownOpen}"
                                  AllowsTransparency="True" 
                                  Focusable="False"
                                  PopupAnimation="Slide">

                            <Grid Name="DropDown"
                                  SnapsToDevicePixels="True"                
                                  MinWidth="{TemplateBinding ActualWidth}"
                                  MaxHeight="{TemplateBinding MaxDropDownHeight}">
                                <Border x:Name="DropDownBorder"
                                                Background="#FF3F3F3F"
                                                BorderThickness="1"
                                                BorderBrush="#888888"/>
                                <ScrollViewer Margin="4,6,4,6" 
                                                      SnapsToDevicePixels="True">
                                    <StackPanel IsItemsHost="True" 
                                                KeyboardNavigation.DirectionalNavigation="Contained" />
                                </ScrollViewer>
                            </Grid>
                        </Popup>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="HasItems" 
                                 Value="false">
                            <Setter TargetName="DropDownBorder" 
                                    Property="MinHeight" 
                                    Value="95"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" 
                                 Value="false">
                            <Setter Property="Foreground" 
                                    Value="#888888"/>
                        </Trigger>
                        <Trigger Property="IsGrouping" 
                                 Value="true">
                            <Setter Property="ScrollViewer.CanContentScroll" 
                                    Value="false"/>
                        </Trigger>
                        <Trigger SourceName="Popup" 
                                 Property="Popup.AllowsTransparency" 
                                 Value="true">
                            <Setter TargetName="DropDownBorder" 
                                    Property="CornerRadius" Value="0"/>
                            <Setter TargetName="DropDownBorder" 
                                    Property="Margin" Value="0,2,0,0"/>
                        </Trigger>
                        <Trigger Property="IsEditable"  
                                 Value="true">
                            <Setter Property="IsTabStop" 
                                    Value="false"/>
                            <Setter TargetName="PART_EditableTextBox" 
                                    Property="Visibility" 
                                    Value="Visible"/>
                            <Setter TargetName="ContentSite" 
                                    Property="Visibility" 
                                    Value="Hidden"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--Style for the comboboxitems in NoBordersComboBoxStyle due that they need to have the same background color and font color-->
    <Style x:Key="NoBordersComboItemStyle" 
           TargetType="{x:Type ComboBoxItem}">
        <Setter Property="SnapsToDevicePixels" 
                    Value="true"/>
        <Setter Property="Foreground" 
                    Value="White"/>
        <Setter Property="OverridesDefaultStyle" 
                    Value="true"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ComboBoxItem}">
                    <Border Name="Border"
                              Padding="2"
                              SnapsToDevicePixels="true">
                        <ContentPresenter />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsHighlighted" 
                                 Value="true">
                            <Setter TargetName="Border" 
                                  Property="Background" 
                                  Value="#FF4F4F4F"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" 
                                 Value="false">
                            <Setter Property="Foreground" 
                                  Value="#888888"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

 
    <!--This radio button style was created for the Preferences window -> General Tab, the font color is white and background color is gray-->
    <Style x:Key="RunSettingsRadioButtons"
           TargetType="{x:Type RadioButton}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RadioButton}">
                    <BulletDecorator Background="{StaticResource PreferencesWindowBackgroundColor}" 
                                     Cursor="Hand">
                        <BulletDecorator.Bullet>
                            <Grid Width="18"
                                  Height="18">
                                <!--The main white circle filled with White color (see the trigger IsChecked -> True-->
                                <Ellipse x:Name="MainEllipse"
                                         StrokeThickness="1"
                                         Stroke="Black">
                                </Ellipse>
                                <!--The black circle inside the MainEllipse which indicates which radio button is checked-->
                                <Ellipse x:Name="SelectedEllipse"
                                         Margin="5"
                                         Visibility="Collapsed"
                                         Fill="Black">
                                </Ellipse>
                            </Grid>
                        </BulletDecorator.Bullet>
                        <!--Text element next to each radio button-->
                        <TextBlock Margin="3,1,0,0" 
                                   Foreground="{StaticResource PreferencesWindowFontColor}" 
                                   FontWeight="Regular"
                                   FontFamily="Calibri" 
                                   FontSize="12">
                            <ContentPresenter />
                        </TextBlock>
                    </BulletDecorator>
                    <!--If item is checked, trigger the visibility of the mark-->
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" 
                                 Value="true">
                            <!--If item is checked, trigger the visibility to Visible of the SelectedEllipse and change the color of the MainEllipse into White for better highlighting-->
                            <Setter TargetName="SelectedEllipse" 
                                    Property="Visibility" 
                                    Value="Visible"/>
                            <Setter TargetName="MainEllipse" 
                                    Property="Fill" 
                                    Value="{StaticResource PreferencesWindowFontColor}"/>
                        </Trigger>
                        <Trigger Property="IsChecked" 
                                 Value="false">
                            <!--If item is checked, trigger the visibility to Collapse of the SelectedEllipse and change the color of the  MainEllipse into White for better highlighting-->
                            <Setter TargetName="SelectedEllipse" 
                                    Property="Visibility" 
                                    Value="Collapsed"/>
                            <Setter TargetName="MainEllipse" 
                                    Property="Fill" 
                                    Value="{StaticResource PreferencesWindowBackgroundColor}"/>
                            <Setter TargetName="MainEllipse" 
                                Property="Stroke" 
                                Value="{StaticResource PreferencesWindowFontColor}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <SolidColorBrush x:Key="PreferencesWindowVisualSettingsBackground" 
                     Color="#535353" />

    <SolidColorBrush x:Key="PreferencesWindowVisualSettingsAddStyleBackground" 
                     Color="#666666" />

    <!--This Style will be used in the radio buttons located in the Preferences -> Visual Settings ->  Geometry Scaling section-->
    <Style x:Key="GeometryScaleRadioButtons"
           TargetType="{x:Type RadioButton}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RadioButton}">
                    <BulletDecorator Background="{StaticResource PreferencesWindowBackgroundColor}" 
                                     Cursor="Hand">
                        <BulletDecorator.Bullet>
                            <Grid Width="18"
                                  Height="18">
                                <!--The main white circle filled with White color (see the trigger IsChecked -> True-->
                                <Ellipse x:Name="MainEllipse"
                                         StrokeThickness="1"
                                         Stroke="Black">
                                </Ellipse>
                                <!--The black circle inside the MainEllipse which indicates which radio button is checked-->
                                <Ellipse x:Name="SelectedEllipse"
                                         Margin="5"
                                         Visibility="Collapsed"
                                         Fill="Black">
                                </Ellipse>
                            </Grid>
                        </BulletDecorator.Bullet>
                        <!--Text element next to each radio button-->
                        <TextBlock x:Name="RadioTextBlock"
                                   Margin="3,1,0,0" 
                                   Foreground="{StaticResource PreferencesWindowFontColor}" 
                                   FontWeight="Regular"
                                   FontSize="12">
                            <ContentPresenter />
                        </TextBlock>
                    </BulletDecorator>
                    <!--If item is checked, trigger the visibility of the mark-->
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" 
                                 Value="true">
                            <!--If item is checked, trigger the visibility to Visible of the SelectedEllipse and change the color of the MainEllipse into White for better highlighting-->
                            <Setter TargetName="SelectedEllipse" 
                                    Property="Visibility" 
                                    Value="Visible"/>
                            <Setter TargetName="MainEllipse" 
                                    Property="Fill" 
                                    Value="{StaticResource PreferencesWindowFontColor}"/>
                            <Setter TargetName="RadioTextBlock"
                                    Property="FontWeight"
                                    Value="Bold"/>
                        </Trigger>
                        <Trigger Property="IsChecked" 
                                 Value="false">
                            <!--If item is checked, trigger the visibility to Collapse of the SelectedEllipse and change the color of the  MainEllipse into White for better highlighting-->
                            <Setter TargetName="SelectedEllipse" 
                                    Property="Visibility" 
                                    Value="Collapsed"/>
                            <Setter TargetName="MainEllipse" 
                                    Property="Fill" 
                                    Value="{StaticResource PreferencesWindowBackgroundColor}"/>
                            <Setter TargetName="MainEllipse" 
                                    Property="Stroke" 
                                    Value="{StaticResource PreferencesWindowFontColor}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--This Style will be used for some TextBlocks located in "Preferences -> Visual Settings ->  Geometry Scaling section" that have a very specific behavior of showing a descrition below-->
    <Style x:Key="GeometryScaleDescTextBox"
                   TargetType="{x:Type TextBlock}">
        <Setter Property="Background" 
                Value="#474747"/>
        <Setter Property="Foreground" 
                Value="White"/>
        <Setter Property="TextWrapping" 
                Value="Wrap"/>
        <Setter Property="FontSize" 
                Value="11"/>
        <Setter Property="FontWeight" 
                Value="Regular"/>
    </Style>

    <!--This Style will be used for a TextBox located in "Preferences -> Visual Settings -> Group Styles when adding a new Style
    The specific behaviour for the TextBox is that doesn't have borders and has some text that is deleted when the user starts typing-->
    <Style x:Key="TextBoxWaterMarkStyle" 
           TargetType="{x:Type TextBox}">
        <Setter Property="Background" 
                Value="#666666" />
        <Setter Property="Foreground" 
                Value="White" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBox}">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition />
                            <ColumnDefinition Width="20" />
                        </Grid.ColumnDefinitions>
                        <Border Grid.Row="0"
                                Background="#666666" 
                                BorderBrush="{StaticResource PreferencesWindowButtonColor}" 
                                Grid.ColumnSpan="2"
                                BorderThickness="0,0,0,2"/>
                        <ScrollViewer x:Name="PART_ContentHost" 
                                      Margin="5,0,0,0" 
                                      VerticalAlignment="Center" />

                        <!--This Label will show the WaterMark text that will be deleted once the user starts typing-->
                        <Label Grid.Row="0"
                                Margin="5,0,0,0" 
                                x:Name="WaterMarkLabel" 
                                Content="{TemplateBinding Tag}" 
                                VerticalAlignment="Center"
                                Visibility="Collapsed" 
                                Foreground="LightGray"/>

                        <!--This is the Canvas for the exclamation mark appearing when the Style that the user is trying to insert already exists-->
                        <Canvas Grid.Column="1" 
                                Visibility="{Binding Path=IsWarningEnabled, Converter={StaticResource BooleanToVisibilityConverter}}"
                                ToolTip="{x:Static p:Resources.PreferencesViewStyleWarning}">
                            <Polygon 
                                         Points="10,5 18,20 2,20">
                                <Polygon.Fill>
                                    <SolidColorBrush Color="#FAA21B" />
                                </Polygon.Fill>
                            </Polygon>

                            <Line x:Name="exclamationMark"
                                    X1="10" Y1="8"
                                    X2="10" Y2="15"
                                    Stroke="Black"
                                    StrokeThickness="2"/>
                            <Ellipse x:Name="exclamationPoint"
                                    Height="2"
                                    Width="2"
                                    Canvas.Top="17"
                                    Canvas.Left="9"
                                    Canvas.Right="10"
                                    Fill="Black"/>
                        </Canvas>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <MultiTrigger>
                            <!--When the user delete the text (Text property is empty) typed when we show again the WaterMark text-->
                            <MultiTrigger.Conditions>
                                <Condition Property="Text" 
                                           Value=""/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Visibility" 
                                    TargetName="WaterMarkLabel" 
                                    Value="Visible"/>
                        </MultiTrigger>
                        <Trigger Property="IsEnabled" 
                                 Value="False">
                            <Setter Property="Foreground" 
                                    Value="DimGray"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--This Style will be used in the button for adding a Style in the "Group Styles" section-->
    <Style x:Key="FlatButtonStyle"
           TargetType="Button">
        <Setter Property="Foreground"
                Value="#6DD2FF" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border x:Name="ButtonBorder" 
                                    CornerRadius="4" 
                                    BorderBrush="#E0E0E0"
                                    Background="Transparent">
                        <TextBlock VerticalAlignment="Center"
                                    HorizontalAlignment="Center">
                                <ContentPresenter />
                        </TextBlock>
                    </Border>
                    <!--Following the Autodesk Hig Standards some colors of the button will be changed according to the event-->
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" 
                                 Value="True">
                            <Setter TargetName="ButtonBorder" 
                                    Property="BorderThickness" 
                                    Value="1" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="ButtonBorder" 
                                    Property="BorderThickness" 
                                    Value="2" />
                        </Trigger>
                        <Trigger Property="IsFocused" Value="True">
                            <Setter TargetName="ButtonBorder" 
                                    Property="BorderBrush" 
                                    Value="#A2D4EB" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <!--When the mouse is over the button the cursor will change to a hand-->
            <Trigger Property="IsMouseOver"
                     Value="true">
                <Setter Property="Cursor" Value="Hand"/>
            </Trigger>
            <Trigger Property="IsEnabled"
                     Value="false">
                <Setter Property="Foreground"
                        Value="#BBBBBB" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <!--This Style will be used for the Buttons that have a border and transparent background like Save and Cancel in the Preferences->Visual Settings tab-->
    <Style x:Key="OutlinedButtonStyle"
           TargetType="Button">
        <Setter Property="Foreground"
                Value="{StaticResource PreferencesWindowFontColor}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border x:Name="ButtonBorder" 
                                    CornerRadius="4" 
                                    BorderBrush="#E0E0E0"
                                    BorderThickness="0.5"
                                    Background="Transparent">
                        <TextBlock VerticalAlignment="Center"
                                   HorizontalAlignment="Center">
                            <ContentPresenter />
                        </TextBlock>
                    </Border>
                    <!--According to the Hig Autodesk standards for Outlined buttons some colors/properties will be changed according to the event generated-->
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" 
                                 Value="True">
                            <Setter Property="Button.Effect">
                                <Setter.Value>
                                    <DropShadowEffect Color="Black" 
                                                      Direction="320" 
                                                      ShadowDepth="3" 
                                                      BlurRadius="5" 
                                                      Opacity="0.5" />
                                </Setter.Value>
                            </Setter>
                            <Setter TargetName="ButtonBorder" 
                                    Property="BorderThickness" 
                                    Value="1" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="ButtonBorder" 
                                    Property="BorderThickness" 
                                    Value="2" />
                        </Trigger>
                        <Trigger Property="IsFocused" Value="True">
                            <Setter TargetName="ButtonBorder" 
                                    Property="BorderBrush" 
                                    Value="#A2D4EB" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver"
                     Value="true">
                <Setter Property="Cursor" 
                        Value="Hand"/>
            </Trigger>
            <Trigger Property="IsEnabled"
                     Value="false">
                <Setter Property="Foreground"
                        Value="#BBBBBB" />
            </Trigger>
        </Style.Triggers>
    </Style>
    
    

    <!--This Style will be used for the small trash icon button that appears when a new Style is created in the Visual Settings tab-->
    <Style x:Key="FlatIconButtonStyle" 
           TargetType="{x:Type Button}">
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Opacity" Value=".5" />
            </Trigger>
        </Style.Triggers>
        <Setter Property="Background" 
                Value="Transparent"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="removeStyleBorder" 
                            Background="{TemplateBinding Background}">
                        <Grid>
                            <Rectangle x:Name="backgroundRectangle"
                                       Fill="{TemplateBinding Background}"/>
                            <Rectangle x:Name="borderRectangle"
                                       Fill="Transparent"
                                       Stroke="Transparent"
                                       StrokeThickness="2"/>
                            <ContentPresenter HorizontalAlignment="Center" 
                                              VerticalAlignment="Center"/>
                        </Grid>
                    </Border>
                    <!--According to the Hig Autodesk standards for icon buttons some colors/properties will be changed according to the event generated-->
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" 
                                 Value="True">
                            <Setter TargetName="backgroundRectangle"
                                    Property="Fill" 
                                    Value="{StaticResource PreferencesWindowButtonColor}"/>
                            <Setter TargetName="backgroundRectangle" 
                                    Property="Opacity" 
                                    Value="0.2"/>
                            <Setter TargetName="borderRectangle" 
                                    Property="Stroke" 
                                    Value="{StaticResource PreferencesWindowButtonColor}" />
                        </Trigger>
                        <Trigger Property="IsPressed" 
                                 Value="True">
                            <Setter TargetName="backgroundRectangle"
                                    Property="Fill" 
                                    Value="{StaticResource PreferencesWindowButtonColor}"/>
                            <Setter TargetName="backgroundRectangle" 
                                    Property="Opacity" 
                                    Value="0.8"/>
                            <Setter TargetName="borderRectangle" 
                                    Property="Stroke" 
                                    Value="{StaticResource PreferencesWindowButtonColor}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--This Style will be used for the ColorPicker button that is shown when adding a new Style in the Preferences -> Visual Settings tab-->
    <Style x:Key="ButtonColorPickerStyle" 
           TargetType="{x:Type Button}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="removeStyleBorder" 
                            Background="{TemplateBinding Background}">
                        <Grid>
                            <Rectangle x:Name="borderRectangle"
                                       Fill="Transparent"
                                       Stroke="Transparent"
                                       StrokeThickness="2"/>
                            <ContentPresenter HorizontalAlignment="Center" 
                                              VerticalAlignment="Center"/>
                        </Grid>
                    </Border>
                    <!--According to the Hig Autodesk standards for icon buttons some colors/properties will be changed according to the event generated-->
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" 
                                 Value="True">
                            <Setter TargetName="borderRectangle" 
                                    Property="Stroke" 
                                    Value="{StaticResource PreferencesWindowButtonColor}" />
                        </Trigger>
                        <Trigger Property="IsPressed" 
                                 Value="True">
                            <Setter TargetName="borderRectangle"
                                    Property="Fill" 
                                    Value="{StaticResource PreferencesWindowButtonColor}"/>
                            <Setter TargetName="borderRectangle" 
                                    Property="Stroke" 
                                    Value="{StaticResource PreferencesWindowButtonColor}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


</ResourceDictionary>
