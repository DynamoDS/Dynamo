<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:avalonedit="clr-namespace:ICSharpCode.AvalonEdit;assembly=ICSharpCode.AvalonEdit"
                    xmlns:clr="clr-namespace:System;assembly=mscorlib"
                    xmlns:controls="clr-namespace:Dynamo.Views;assembly=DynamoCoreWpf"
                    xmlns:nodes="clr-namespace:Dynamo.Nodes;assembly=DynamoCoreWpf"
                    xmlns:dynui="clr-namespace:Dynamo.UI.Controls;assembly=DynamoCoreWpf"
                    xmlns:fa="clr-namespace:FontAwesome.WPF;assembly=FontAwesome.WPF"
                    xmlns:p="clr-namespace:Dynamo.Wpf.Properties;assembly=DynamoCoreWpf"
                    xmlns:ui="clr-namespace:Dynamo.UI;assembly=DynamoCoreWpf">

    <ResourceDictionary.MergedDictionaries>
        <ui:SharedResourceDictionary Source="{x:Static ui:SharedDictionaryManager.DynamoConvertersDictionaryUri}" />
        <ui:SharedResourceDictionary Source="{x:Static ui:SharedDictionaryManager.DynamoColorsAndBrushesDictionaryUri}" />
    </ResourceDictionary.MergedDictionaries>

    <!--  Control colors.  -->
    <Color x:Key="WindowColor">#FFE8EDF9</Color>
    <Color x:Key="ContentAreaColorLight">#FFC5CBF9</Color>
    <Color x:Key="ContentAreaColorDark">#FF7381F9</Color>

    <Color x:Key="DisabledControlLightColor">#FFE8EDF9</Color>
    <Color x:Key="DisabledControlDarkColor">#FFC5CBF9</Color>
    <Color x:Key="DisabledForegroundColor">#FF888888</Color>

    <Color x:Key="SelectedBackgroundColor">#a1dbff</Color>
    <Color x:Key="SelectedUnfocusedColor">#FFDDDDDD</Color>

    <Color x:Key="ControlLightColor">White</Color>
    <Color x:Key="ControlMediumColor">#FF7381F9</Color>
    <Color x:Key="ControlDarkColor">#FF211AA9</Color>

    <Color x:Key="ControlMouseOverColor">#FF3843C4</Color>
    <Color x:Key="ControlPressedColor">#FF211AA9</Color>


    <Color x:Key="GlyphColor">#FF444444</Color>
    <Color x:Key="GlyphMouseOver">sc#1, 0.004391443, 0.002428215, 0.242281124</Color>

    <!--  Border colors  -->
    <Color x:Key="BorderBasicColor">#FFFFFF</Color>
    <Color x:Key="BorderLightColor">#FFCCCCCC</Color>
    <Color x:Key="BorderMediumColor">#FF888888</Color>
    <Color x:Key="BorderDarkColor">#FF444444</Color>
    <Color x:Key="BorderPressedColor">#38ABDF</Color>

    <Color x:Key="PressedBorderLightColor">#FF888888</Color>
    <Color x:Key="PressedBorderDarkColor">#FF444444</Color>

    <Color x:Key="DisabledBorderLightColor">#FFAAAAAA</Color>
    <Color x:Key="DisabledBorderDarkColor">#FF888888</Color>

    <Color x:Key="DefaultBorderBrushDarkColor">Black</Color>


    <!--  Control-specific resources.  -->
    <Color x:Key="HeaderTopColor">#FFC5CBF9</Color>
    <Color x:Key="DatagridCurrentCellBorderColor">Black</Color>
    <Color x:Key="SliderTrackDarkColor">#FFC5CBF9</Color>
    <Color x:Key="NavButtonFrameColor">#FF3843C4</Color>

    <Color x:Key="DarkThemeBodyMediumColor">#F5F5F5</Color>
    <Color x:Key="DarkThemeInputBoxBackgroundColor">#353535</Color>

    <SolidColorBrush x:Key="DarkThemeBodyMediumBrush" Color="{DynamicResource DarkThemeBodyMediumColor}" />
    <SolidColorBrush x:Key="DarkThemeInputBoxBackgroundBrush" Color="{DynamicResource DarkThemeInputBoxBackgroundColor}" />

    <clr:Double x:Key="NodeNameHeight">53</clr:Double>


    <!--  InfoBubble colors  -->
    <SolidColorBrush x:Key="InfoBubbleBackNormalBrush" Color="White" />
    <SolidColorBrush x:Key="InfoBubbleTextNormalBrush" Color="#333333" />
    <SolidColorBrush x:Key="InfoBubbleEdgeNormalBrush" Color="#999999" />

    <LinearGradientBrush x:Key="MenuPopupBrush" StartPoint="0.5,0" EndPoint="0.5,1">
        <GradientStop Offset="0" Color="{DynamicResource ControlLightColor}" />
        <GradientStop Offset="0.5" Color="{DynamicResource ControlMediumColor}" />
        <GradientStop Offset="1" Color="{DynamicResource ControlLightColor}" />
    </LinearGradientBrush>

    <LinearGradientBrush x:Key="SpinnerNormalBrush" StartPoint="0,0" EndPoint="0,1">
        <GradientStop Offset="0.0" Color="#EEE" />
        <GradientStop Offset="1.0" Color="#CBC6BE" />
    </LinearGradientBrush>
    <LinearGradientBrush x:Key="SpinnerNormalBorderBrush" StartPoint="0,0" EndPoint="0,1">
        <GradientStop Offset="0.0" Color="#CCC" />
        <GradientStop Offset="1.0" Color="#444" />
    </LinearGradientBrush>
    <LinearGradientBrush x:Key="SpinnerHoverBrush" StartPoint="0,0" EndPoint="0,1">
        <GradientStop Offset="0.0" Color="#FFF" />
        <GradientStop Offset="1.0" Color="#CBC6BE" />
    </LinearGradientBrush>
    <LinearGradientBrush x:Key="SpinnerPressedBrush" StartPoint="0,0" EndPoint="0,1">
        <GradientStop Offset="0.0" Color="#BBB" />
        <GradientStop Offset="0.1" Color="#EEE" />
        <GradientStop Offset="0.9" Color="#EEE" />
        <GradientStop Offset="1.0" Color="#FFF" />
    </LinearGradientBrush>
    <LinearGradientBrush x:Key="SpinnerPressedBorderBrush" StartPoint="0,0" EndPoint="0,1">
        <GradientStop Offset="0.0" Color="#444" />
        <GradientStop Offset="1.0" Color="#888" />
    </LinearGradientBrush>

    <!--  Embedded Font  -->
    <!--
        Open Sans (under Apache License, version 2.0)
        Link: http://www.google.com/fonts/specimen/Open+Sans
    -->
    <FontFamily x:Key="Inconsolata">../../Fonts/#Inconsolata</FontFamily>
    <FontFamily x:Key="OpenSansRegular">../../Fonts/#Open Sans</FontFamily>
    <FontFamily x:Key="OpenSansItalic">../../Fonts/#Open Sans Italic</FontFamily>
    <FontFamily x:Key="OpenSansLight">../../Fonts/#Open Sans Light</FontFamily>
    <FontFamily x:Key="OpenSansSemibold">../../Fonts/#Open Sans Semibold</FontFamily>
    <FontFamily x:Key="OpenSansBold">../../Fonts/#Open Sans Bold</FontFamily>
    <FontFamily x:Key="OpenSansLightItalic">../../Fonts/#Open Sans Light Italic</FontFamily>
    <FontFamily x:Key="OpenSansSemiboldItalic">../../Fonts/#Open Sans Semibold Italic</FontFamily>
    <FontFamily x:Key="OpenSansBoldItalic">../../Fonts/#Open Sans Bold Italic</FontFamily>
    <FontFamily x:Key="ArtifaktElementRegular">../../Fonts/Autodesk/#Artifakt Element Regular</FontFamily>
    <FontFamily x:Key="ArtifaktElementBold">../../Fonts/Autodesk/#Artifakt Element Bold</FontFamily>
    <FontFamily x:Key="SourceCodePro">../../Fonts/#Source Code Pro</FontFamily>

    <!--  Window Common Styling  -->
    <Style x:Key="DynamoWindowStyle" TargetType="{x:Type Window}">
        <Setter Property="FontFamily" Value="{StaticResource ArtifaktElementRegular}" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="Background" Value="#343434" />
    </Style>

    <!--  Generic Dynamo ToolTip  -->
    <Style x:Key="GenericToolTipLight" TargetType="ToolTip">
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Setter Property="MaxWidth" Value="300" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ToolTip">
                    <Grid x:Name="PopupGrid">
                        <Grid x:Name="ShadowBackground" Background="Transparent">
                            <Path Margin="5 0 0 0" Width="20" Height="6" HorizontalAlignment="Left" VerticalAlignment="Top" Data="M0,6 L6,0 12,6Z" Stroke="Gray" Fill="White" Stretch="None" />
                            <Border BorderThickness="1 0 1 1" CornerRadius="3" Margin="0 5 7 7" BorderBrush="#999999" Background="white" Padding="10,8">
                                <ContentPresenter/>
                            </Border>
                            <Border BorderThickness="0 1 0 0" CornerRadius="0 0 3 0" Margin="16 5 9 0" HorizontalAlignment="Stretch" VerticalAlignment="Top" Height="7" BorderBrush="#999999" />
                            <Border BorderThickness="0 1 0 0" CornerRadius="3 0 0 0" Margin="0 5 0 0"  HorizontalAlignment="Left" VerticalAlignment="Top" Height="7" Width="6" BorderBrush="#999999" />
                        </Grid>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Resources>
            <Style TargetType="ContentPresenter">
                <Style.Resources>
                    <Style TargetType="TextBlock">
                        <Setter Property="TextWrapping" Value="Wrap" />
                        <Setter Property="FontFamily" Value="{StaticResource ArtifaktElementRegular}" />
                        <Setter Property="FontSize" Value="12px" />
                        <Setter Property="Foreground" Value="#232323" />
                    </Style>
                </Style.Resources>
            </Style>
        </Style.Resources>
    </Style>

    <Style x:Key="GenericToolTipLightTop" TargetType="ToolTip" BasedOn="{StaticResource GenericToolTipLight}">
        <Setter Property="Placement" Value="Top"></Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ToolTip">
                    <Grid x:Name="PopupGrid">
                        <Grid x:Name="ShadowBackground" Background="Transparent">
                            <Path Margin="5 0 0 0" x:Name="TooltipPointer" Width="20" Height="6" HorizontalAlignment="Left" VerticalAlignment="Bottom" Data="M0,0 L6,6 12,0Z" Stroke="Gray" Fill="White" Stretch="None"/>
                            <Border BorderThickness="1 1 1 0" CornerRadius="3" Margin="0 7 7 5" BorderBrush="#999999" Background="white" Padding="10,8">
                                <ContentPresenter/>
                            </Border>
                            <Border BorderThickness="0 0 0 1" CornerRadius="0 0 3 0" Margin="16 0 9 5" HorizontalAlignment="Stretch" VerticalAlignment="Bottom" Height="7" BorderBrush="#999999" />
                            <Border BorderThickness="0 0 0 1" CornerRadius="0 0 0 3" Margin="0 0 0 5"  HorizontalAlignment="Left" VerticalAlignment="Bottom" Height="7" Width="6" BorderBrush="#999999" />
                        </Grid>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Image x:Key="ComboDownIcon_normal" Source="pack://application:,,,/DynamoCoreWpf;component/UI/Images/tick_selected.png" />

    <ControlTemplate x:Key="ComboBoxToggleButton" TargetType="ToggleButton">
        <Grid>
            <Border x:Name="Border"
                    Background="#2c2c2c"
                    BorderBrush="#444444"
                    BorderThickness="1" />
            <Path x:Name="Arrow"
                  Margin="0,0,10,0"
                  HorizontalAlignment="Right"
                  VerticalAlignment="Center"
                  Data="M 0 0 L 4 4 L 8 0 Z"
                  Fill="#999" />
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="ToggleButton.IsMouseOver" Value="true">
                <Setter TargetName="Arrow" Property="Fill" Value="#fff" />
            </Trigger>
            <Trigger Property="ToggleButton.IsChecked" Value="true">
                <Setter TargetName="Border" Property="Background" Value="#333" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <ControlTemplate x:Key="ComboBoxTextBox" TargetType="TextBox">
        <Border x:Name="PART_ContentHost" Focusable="False" />
    </ControlTemplate>

    <SolidColorBrush x:Key="SComboBoxBackground" Color="#2c2c2c" />
    <SolidColorBrush x:Key="SComboBoxBorder" Color="#444444" />
    <Style x:Key="SComboBox" TargetType="{x:Type ComboBox}">
        <Setter Property="SnapsToDevicePixels" Value="true" />
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto" />
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
        <Setter Property="ScrollViewer.CanContentScroll" Value="true" />
        <Setter Property="MinWidth" Value="120" />
        <Setter Property="Padding" Value="12,3" />
        <Setter Property="MinHeight" Value="20" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ComboBox">
                    <Grid>
                        <ToggleButton Name="ToggleButton"
                                      Grid.Column="2"
                                      ClickMode="Press"
                                      Focusable="false"
                                      IsChecked="{Binding Path=IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                                      Template="{StaticResource ComboBoxToggleButton}" />
                        <ContentPresenter Name="ContentSite"
                                          Margin="9,3,23,3"
                                          HorizontalAlignment="Left"
                                          VerticalAlignment="Center"
                                          Content="{TemplateBinding SelectionBoxItem}"
                                          ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}"
                                          ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}"
                                          IsHitTestVisible="False" />
                        <TextBox x:Name="PART_EditableTextBox"
                                 Margin="3,3,23,3"
                                 Padding="10"
                                 HorizontalAlignment="Left"
                                 VerticalAlignment="Center"
                                 Background="#666666"
                                 CaretBrush="#bbbbbb"
                                 Focusable="True"
                                 Foreground="#bbbbbb"
                                 IsReadOnly="{TemplateBinding IsReadOnly}"
                                 Style="{x:Null}"
                                 Template="{StaticResource ComboBoxTextBox}"
                                 Visibility="Hidden" />
                        <Popup Name="Popup"
                               AllowsTransparency="True"
                               Focusable="False"
                               IsOpen="{TemplateBinding IsDropDownOpen}"
                               Placement="Bottom"
                               PopupAnimation="Slide">
                            <Grid Name="DropDown"
                                  MinWidth="{TemplateBinding ActualWidth}"
                                  MaxHeight="{TemplateBinding MaxDropDownHeight}"
                                  SnapsToDevicePixels="True">
                                <Border x:Name="DropDownBorder"
                                        Background="#2c2c2c"
                                        BorderBrush="#444444"
                                        BorderThickness="1,0,1,1" />
                                <ScrollViewer Margin="4,6,4,6" SnapsToDevicePixels="True">
                                    <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Contained" />
                                </ScrollViewer>
                            </Grid>
                        </Popup>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="HasItems" Value="false">
                            <Setter TargetName="DropDownBorder" Property="MinHeight" Value="95" />
                        </Trigger>
                        <Trigger Property="IsGrouping" Value="true">
                            <Setter Property="ScrollViewer.CanContentScroll" Value="false" />
                        </Trigger>
                        <Trigger SourceName="Popup" Property="Popup.AllowsTransparency" Value="true">
                            <Setter TargetName="DropDownBorder" Property="CornerRadius" Value="4" />
                            <Setter TargetName="DropDownBorder" Property="Margin" Value="0,2,0,0" />
                        </Trigger>
                        <Trigger Property="IsEditable" Value="true">
                            <Setter Property="IsTabStop" Value="false" />
                            <Setter TargetName="PART_EditableTextBox" Property="Visibility" Value="Visible" />
                            <Setter TargetName="ContentSite" Property="Visibility" Value="Hidden" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers />
    </Style>

    <Style x:Key="SSearchOnlineToggleButton" TargetType="{x:Type ToggleButton}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate>

                    <Grid x:Name="container" Background="Transparent">
                        <Grid x:Name="inner" Background="#333">

                            <Image x:Name="display"
                                   Width="24"
                                   Height="24"
                                   Source="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Tag}" />

                        </Grid>
                    </Grid>

                    <ControlTemplate.Triggers>

                        <Trigger Property="ToggleButton.IsChecked" Value="True">
                            <Setter TargetName="inner" Property="Background" Value="LightBlue" />
                        </Trigger>

                        <Trigger Property="ToggleButton.IsMouseOver" Value="true">
                            <Setter TargetName="inner" Property="Background" Value="LightBlue" />
                        </Trigger>

                    </ControlTemplate.Triggers>

                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="RefreshRunSettingsComboBox"
           TargetType="{x:Type ComboBox}">
        <Setter Property="SnapsToDevicePixels"
                        Value="true" />
                <Setter Property="OverridesDefaultStyle"
                        Value="true" />
                <Setter Property="ScrollViewer.HorizontalScrollBarVisibility"
                        Value="Auto" />
                <Setter Property="ScrollViewer.VerticalScrollBarVisibility"
                        Value="Auto" />
                <Setter Property="ScrollViewer.CanContentScroll"
                        Value="true" />
                <Setter Property="MinWidth"
                        Value="120" />
                <Setter Property="Padding"
                        Value="12,3" />
                <Setter Property="MinHeight"
                        Value="20" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ComboBox">
                    <Grid>
                        <ToggleButton Name="ToggleButton"
                                      ClickMode="Press"
                                      Focusable="false"
                                      IsChecked="{Binding Path=IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}">
                            <ToggleButton.Style>
                                <Style TargetType="ToggleButton">
                                    <Setter Property="Template">
                                        <Setter.Value>
                                            <ControlTemplate TargetType="{x:Type ToggleButton}">
                                                <Grid HorizontalAlignment="Stretch"
                                                      VerticalAlignment="Stretch">
                                                    <Grid.ColumnDefinitions>
                                                        <ColumnDefinition />
                                                        <ColumnDefinition Width="20" />
                                                    </Grid.ColumnDefinitions>
                                                    <Border Grid.Column="0"
                                                            Grid.ColumnSpan="2"
                                                            Background="#2A2A2A" />
                                                    <Border x:Name="Border"
                                                            Grid.Column="1" />
                                                    <Rectangle x:Name="BlueUnderline"
                                                               Grid.Column="0"
                                                               Grid.ColumnSpan="2"
                                                               Height="1px"
                                                               VerticalAlignment="Bottom" />
                                                    <Path x:Name="Arrow"
                                                          Grid.Column="1"
                                                          HorizontalAlignment="Center"
                                                          VerticalAlignment="Center"
                                                          Data="M0,0 L0,2 L4,6 L8,2 L8,0 L4,4 z"
                                                          Fill="White" />
                                                </Grid>
                                                <ControlTemplate.Triggers>
                                                    <Trigger Property="ToggleButton.IsMouseOver"
                                                             Value="true">
                                                        <Setter TargetName="BlueUnderline"
                                                                Property="Fill"
                                                                Value="White" />
                                                    </Trigger>
                                                    <Trigger Property="ToggleButton.IsChecked"
                                                             Value="true">
                                                        <Setter TargetName="Arrow"
                                                                Property="Fill"
                                                                Value="#6AC0E7" />
                                                        <Setter TargetName="Arrow"
                                                                Property="Data"
                                                                Value="M0,6 L0,4 L4,0 L8,4 L8,6 L4,2 z" />
                                                        <Setter TargetName="BlueUnderline"
                                                                Property="Fill"
                                                                Value="#6AC0E7" />
                                                    </Trigger>
                                                    <Trigger Property="IsEnabled"
                                                             Value="False">
                                                        <Setter TargetName="Border"
                                                                Property="Background"
                                                                Value="#3C3C3C" />
                                                        <Setter TargetName="Border"
                                                                Property="BorderBrush"
                                                                Value="#AAAAAA" />
                                                        <Setter Property="Foreground"
                                                                Value="#888888" />
                                                        <Setter TargetName="Arrow"
                                                                Property="Fill"
                                                                Value="#888888" />
                                                    </Trigger>
                                                </ControlTemplate.Triggers>
                                            </ControlTemplate>
                                        </Setter.Value>
                                    </Setter>
                                </Style>
                            </ToggleButton.Style>
                        </ToggleButton>
                        <ContentPresenter Name="ContentSite"
                                          Margin="9,3,23,3"
                                          HorizontalAlignment="Left"
                                          VerticalAlignment="Center"
                                          Content="{TemplateBinding SelectionBoxItem}"
                                          ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}"
                                          ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}"
                                          IsHitTestVisible="False" />
                        <TextBox x:Name="PART_EditableTextBox"
                                 Margin="3,3,23,3"
                                 Padding="10"
                                 HorizontalAlignment="Left"
                                 VerticalAlignment="Center"
                                 Background="Transparent"
                                 CaretBrush="#bbbbbb"
                                 Focusable="True"
                                 Foreground="#bbbbbb"
                                 IsReadOnly="{TemplateBinding IsReadOnly}"
                                 Style="{x:Null}"
                                 Template="{StaticResource ComboBoxTextBox}"
                                 Visibility="Hidden" />
                        <Popup Name="Popup"
                               AllowsTransparency="True"
                               Focusable="False"
                               IsOpen="{TemplateBinding IsDropDownOpen}"
                               Placement="Bottom"
                               PopupAnimation="Slide">
                            <Grid Name="DropDown"
                                  MinWidth="{TemplateBinding ActualWidth}"
                                  MaxHeight="{TemplateBinding MaxDropDownHeight}"
                                  SnapsToDevicePixels="True">
                                <Border x:Name="DropDownBorder"
                                        Background="#535353"
                                        BorderThickness="0" />
                                <ScrollViewer Margin="4,6,4,6"
                                              SnapsToDevicePixels="True">
                                    <StackPanel IsItemsHost="True"
                                                KeyboardNavigation.DirectionalNavigation="Contained" />
                                </ScrollViewer>
                            </Grid>
                        </Popup>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="HasItems"
                                 Value="false">
                            <Setter TargetName="DropDownBorder"
                                    Property="MinHeight"
                                    Value="95" />
                        </Trigger>
                        <Trigger Property="IsGrouping"
                                 Value="true">
                            <Setter Property="ScrollViewer.CanContentScroll"
                                    Value="false" />
                        </Trigger>
                        <Trigger SourceName="Popup"
                                 Property="Popup.AllowsTransparency"
                                 Value="true">
                            <Setter TargetName="DropDownBorder"
                                    Property="CornerRadius"
                                    Value="4" />
                            <Setter TargetName="DropDownBorder"
                                    Property="Margin"
                                    Value="0,2,0,0" />
                        </Trigger>
                        <Trigger Property="IsEditable"
                                 Value="true">
                            <Setter Property="IsTabStop"
                                    Value="false" />
                            <Setter TargetName="PART_EditableTextBox"
                                    Property="Visibility"
                                    Value="Visible" />
                            <Setter TargetName="ContentSite"
                                    Property="Visibility"
                                    Value="Hidden" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  Zoom fade text  -->
    <Style x:Key="SZoomFadeText" TargetType="{x:Type TextBlock}">
        <Style.Triggers>
            <DataTrigger Binding="{Binding Path=DataContext.Zoom, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type controls:WorkspaceView}}, Converter={StaticResource ZoomToBooleanConverter}}" Value="true">
                <DataTrigger.EnterActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetProperty="Opacity"
                                             To="1.0"
                                             Duration="0:0:0.2" />
                        </Storyboard>
                    </BeginStoryboard>
                </DataTrigger.EnterActions>
                <DataTrigger.ExitActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetProperty="Opacity"
                                             To="0.0"
                                             Duration="0:0:0.2" />
                        </Storyboard>
                    </BeginStoryboard>
                </DataTrigger.ExitActions>
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <!--  Zoom fade label  -->
    <Style x:Key="SZoomFadeLabel" TargetType="{x:Type Label}">
        <Style.Triggers>
            <DataTrigger Binding="{Binding Path=DataContext.Zoom, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type controls:WorkspaceView}}, Converter={StaticResource ZoomToBooleanConverter}}" Value="true">
                <DataTrigger.EnterActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetProperty="Opacity"
                                             To="1.0"
                                             Duration="0:0:0.2" />
                        </Storyboard>
                    </BeginStoryboard>
                </DataTrigger.EnterActions>
                <DataTrigger.ExitActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetProperty="Opacity"
                                             To="0.0"
                                             Duration="0:0:0.2" />
                        </Storyboard>
                    </BeginStoryboard>
                </DataTrigger.ExitActions>
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <!--  Zoom fade preview  -->
    <Style x:Key="SZoomFadePreview" TargetType="{x:Type Border}">
        <Style.Triggers>
            <DataTrigger Binding="{Binding Path=DataContext.Zoom, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type controls:WorkspaceView}}, Converter={StaticResource ZoomToBooleanConverter}}" Value="true">
                <DataTrigger.EnterActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetProperty="Opacity"
                                             To="0.4"
                                             Duration="0:0:0.5" />
                        </Storyboard>
                    </BeginStoryboard>
                </DataTrigger.EnterActions>
                <DataTrigger.ExitActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetProperty="Opacity"
                                             To="0.7"
                                             Duration="0:0:0.5" />
                        </Storyboard>
                    </BeginStoryboard>
                </DataTrigger.ExitActions>
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <!--  Zoom fade-in preview  -->
    <Style x:Key="SZoomFadeInPreview" TargetType="{x:Type Border}">
        <Style.Triggers>
            <DataTrigger Binding="{Binding Path=DataContext.Zoom, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type controls:WorkspaceView}}, Converter={StaticResource ZoomToBooleanConverter}}" Value="true">
                <DataTrigger.EnterActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetProperty="Opacity"
                                             To="0.0"
                                             Duration="0:0:0.5" />
                        </Storyboard>
                    </BeginStoryboard>
                </DataTrigger.EnterActions>
                <DataTrigger.ExitActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetProperty="Opacity"
                                             To="0.5"
                                             Duration="0:0:0.5" />
                        </Storyboard>
                    </BeginStoryboard>
                </DataTrigger.ExitActions>
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <!--  Zoom fade-in preview  -->
    <Style x:Key="SZoomFadeOutPreview" TargetType="{x:Type Border}">
        <Style.Triggers>
            <DataTrigger Binding="{Binding Path=DataContext.Zoom, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type controls:WorkspaceView}}, Converter={StaticResource ZoomToBooleanConverter}}" Value="true">
                <DataTrigger.EnterActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetProperty="Opacity"
                                             To="0.5"
                                             Duration="0:0:0.5" />
                        </Storyboard>
                    </BeginStoryboard>
                </DataTrigger.EnterActions>
                <DataTrigger.ExitActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetProperty="Opacity"
                                             To="0.0"
                                             Duration="0:0:0.5" />
                        </Storyboard>
                    </BeginStoryboard>
                </DataTrigger.ExitActions>
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <!--  Zoom fade-out framework element  -->
    <Style x:Key="SZoomFadeOutFrameworkElement" TargetType="{x:Type FrameworkElement}">
        <Style.Triggers>
            <DataTrigger Binding="{Binding Path=DataContext.Zoom, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type controls:WorkspaceView}}, Converter={StaticResource ZoomToBooleanConverter}}" Value="true">
                <DataTrigger.EnterActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetProperty="Opacity"
                                             To="1.0"
                                             Duration="0:0:0.2" />
                        </Storyboard>
                    </BeginStoryboard>
                </DataTrigger.EnterActions>
                <DataTrigger.ExitActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetProperty="Opacity"
                                             To="0.0"
                                             Duration="0:0:0.2" />
                        </Storyboard>
                    </BeginStoryboard>
                </DataTrigger.ExitActions>
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <!--  Zoom fade-in framework element  -->
    <Style x:Key="SZoomFadeInFrameworkElement" TargetType="{x:Type FrameworkElement}">
        <Style.Triggers>
            <DataTrigger Binding="{Binding Path=DataContext.Zoom, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type controls:WorkspaceView}}, Converter={StaticResource ZoomToBooleanConverter}}" Value="true">
                <DataTrigger.EnterActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetProperty="Opacity"
                                             To="0.0"
                                             Duration="0:0:0.2" />
                        </Storyboard>
                    </BeginStoryboard>
                </DataTrigger.EnterActions>
                <DataTrigger.ExitActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetProperty="Opacity"
                                             To="1.0"
                                             Duration="0:0:0.2" />
                        </Storyboard>
                    </BeginStoryboard>
                </DataTrigger.ExitActions>
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="TextButtonStyle" TargetType="Button">
        <Setter Property="HorizontalAlignment" Value="Right" />
        <Setter Property="Cursor" Value="Hand" />
        <Setter Property="VerticalAlignment" Value="Top" />
        <Setter Property="Margin" Value="18,0,0,0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <TextBlock x:Name="textBlock"
                               HorizontalAlignment="Center"
                               VerticalAlignment="Center"
                               FontFamily="{StaticResource ArtifaktElementBold}"
                               FontSize="14px"
                               Foreground="#6DD2FF"
                               Text="{TemplateBinding Content}" />
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="textBlock" Property="Foreground" Value="White" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="textBlock" Property="Foreground" Value="#999999" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="TextButtonLink" TargetType="Button">
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="Cursor" Value="Hand" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <TextBlock 
                               Name="textBlock"        
                               HorizontalAlignment="Left"                               
                               FontFamily="{StaticResource ArtifaktElementRegular}"
                               FontSize="14px"
                               Background="Transparent"                        
                               Foreground="#006FB4"
                               Text="{TemplateBinding Content}"/>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="textBlock" Property="Background" Value="Transparent" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="InputStyle" TargetType="{x:Type TextBox}">
        <Setter Property="Margin" Value="0,0,0,12" />
        <Setter Property="MinWidth" Value="62px" />
        <Setter Property="CaretBrush" Value="{StaticResource PrimaryCharcoal200Brush}" />
        <Setter Property="Padding" Value="10,12,10,8"/>
        <Setter Property="FontFamily" Value="{StaticResource ArtifaktElementRegular}"/>
        <Setter Property="FontSize" Value="12px" />
        <Setter Property="Foreground" Value="{StaticResource PrimaryCharcoal200Brush}"/>
        <Setter Property="TextWrapping" Value="Wrap"/>

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBox}">
                    <Grid>
                        <Border 
                            Background="#353535"
                            BorderBrush="Transparent"                            
                            BorderThickness="1"
                            />
                        <ScrollViewer x:Name="PART_ContentHost" VerticalAlignment="Center"/>
                        <Label  x:Name="WaterMarkLabel"
                                Padding="13,13,10,8"
                                Content="{TemplateBinding Tag}" 
                                VerticalAlignment="Center"
                                Visibility="Collapsed"
                                FontFamily="{StaticResource ArtifaktElementRegular}"
                                FontSize="12px"
                                Foreground="{StaticResource PrimaryCharcoal200Brush}"
                                IsHitTestVisible="False"
                                Opacity="0.5"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="Text" Value=""/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Visibility" TargetName="WaterMarkLabel" Value="Visible"/>
                        </MultiTrigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Foreground" Value="{StaticResource PrimaryCharcoal200Brush}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="InputStyleWithIcon" TargetType="{x:Type TextBox}">
        <Setter Property="Margin" Value="0,0,0,12" />
        <Setter Property="MinWidth" Value="62px" />
        <Setter Property="CaretBrush" Value="{StaticResource PrimaryCharcoal200Brush}" />
        <Setter Property="Padding" Value="10,12,10,8"/>
        <Setter Property="FontFamily" Value="{StaticResource ArtifaktElementRegular}"/>
        <Setter Property="FontSize" Value="12px" />
        <Setter Property="Foreground" Value="{StaticResource PrimaryCharcoal200Brush}"/>
        <Setter Property="TextWrapping" Value="Wrap"/>

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBox}">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition />
                            <ColumnDefinition Width="25" />
                        </Grid.ColumnDefinitions>
                        <Border Grid.Row="0"
							Grid.ColumnSpan="2"
                            Background="#353535"
                            BorderBrush="Transparent"                            
                            BorderThickness="1"
                            />
                        <ScrollViewer x:Name="PART_ContentHost" VerticalAlignment="Center"/>
                        <Label  x:Name="WaterMarkLabel"
								Grid.Row="0"
                                Padding="13,13,10,8"
                                Content="{TemplateBinding Tag}" 
                                VerticalAlignment="Center"
                                Visibility="Collapsed"
                                FontFamily="{StaticResource ArtifaktElementRegular}"
                                FontSize="12px"
                                Foreground="{StaticResource PrimaryCharcoal200Brush}"
                                IsHitTestVisible="False"
                                Opacity="0.5"/>
                        <!--  This is the Canvas for the exclamation mark appearing when the Style that the user is trying to insert already exists  -->
                        <Canvas Grid.Column="1" Margin="0,5,5,0"
                                Visibility="{Binding Path=IsWarningEnabled, Converter={StaticResource BooleanToVisibilityConverter}}">
                            <Canvas.ToolTip>
                                <ToolTip Content="{Binding CurrentWarningMessage}" Style="{StaticResource GenericToolTipLight}"/>
                            </Canvas.ToolTip>
                            <Path Fill="#FAA21B">
                                <Path.Data>
                                    <CombinedGeometry GeometryCombineMode="Exclude">
                                        <CombinedGeometry.Geometry1>
                                            <PathGeometry>
                                                <PathGeometry.Figures>
                                                    <PathFigureCollection>
                                                        <PathFigure IsClosed="True" StartPoint="10,5">
                                                            <PathFigure.Segments>
                                                                <PathSegmentCollection>
                                                                    <LineSegment Point="18,20" />
                                                                    <LineSegment Point="2,20" />
                                                                </PathSegmentCollection>
                                                            </PathFigure.Segments>
                                                        </PathFigure>
                                                    </PathFigureCollection>
                                                </PathGeometry.Figures>
                                            </PathGeometry>
                                        </CombinedGeometry.Geometry1>
                                        <CombinedGeometry.Geometry2>
                                            <GeometryGroup FillRule="EvenOdd">
                                                <EllipseGeometry Center="10,18" RadiusX="1.5" RadiusY="1.5"/>
                                                <RectangleGeometry Rect="8.5,8.5,3,7.5"/>
                                            </GeometryGroup>
                                        </CombinedGeometry.Geometry2>
                                    </CombinedGeometry>
                                </Path.Data>
                            </Path>
                        </Canvas>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="Text" Value=""/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Visibility" TargetName="WaterMarkLabel" Value="Visible"/>
                        </MultiTrigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Foreground" Value="{StaticResource PrimaryCharcoal200Brush}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="LabelStyle" TargetType="TextBlock">
        <Setter Property="FontFamily" Value="{StaticResource ArtifaktElementBold}" />
        <Setter Property="FontWeight" Value="Bold" />
        <Setter Property="FontSize" Value="14px" />
        <Setter Property="Foreground" Value="{StaticResource PrimaryCharcoal200Brush}" />
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="Margin" Value="0,0,0,5" />
    </Style>

    <Style x:Key="SubLabelStyle" TargetType="TextBlock">
        <Setter Property="FontFamily" Value="{StaticResource ArtifaktElementRegular}" />
        <Setter Property="FontSize" Value="12px" />
        <Setter Property="Foreground" Value="{StaticResource PrimaryCharcoal200Brush}" />
        <Setter Property="Margin" Value="0,0,0,5" />
    </Style>

    <Style x:Key="SZoomFadeTextBox" TargetType="{x:Type TextBox}">
        <Style.Triggers>
            <DataTrigger Binding="{Binding Path=DataContext.Zoom, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type controls:WorkspaceView}}, Converter={StaticResource ZoomToBooleanConverter}}" Value="true">
                <DataTrigger.EnterActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetProperty="Opacity"
                                             To="1.0"
                                             Duration="0:0:0.2" />
                        </Storyboard>
                    </BeginStoryboard>
                </DataTrigger.EnterActions>
                <DataTrigger.ExitActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetProperty="Opacity"
                                             To="0.0"
                                             Duration="0:0:0.2" />
                        </Storyboard>
                    </BeginStoryboard>
                </DataTrigger.ExitActions>
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <LinearGradientBrush x:Key="ButtonGradientBackground" StartPoint="0.5,0" EndPoint="0.5,1">
        <GradientStop Offset="0.0" Color="#444" />
        <GradientStop Offset="1.0" Color="#2E2E2E" />
    </LinearGradientBrush>

    <LinearGradientBrush x:Key="DarkButtonGradientBackground" StartPoint="0.5,0" EndPoint="0.5,1">
        <GradientStop Offset="0.0" Color="#111" />
        <GradientStop Offset="1.0" Color="#000" />
    </LinearGradientBrush>

    <Style x:Key="SImageButton" TargetType="{x:Type Button}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate>

                    <Grid x:Name="container" Background="Transparent">
                        <Grid x:Name="inner" Background="{StaticResource ButtonGradientBackground}">

                            <Image x:Name="display"
                                   Width="24"
                                   Height="24"
                                   Source="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Tag}" />

                        </Grid>
                    </Grid>

                    <ControlTemplate.Triggers>

                        <Trigger Property="ToggleButton.IsMouseOver" Value="true">
                            <Setter TargetName="inner" Property="Background" Value="LightBlue" />
                        </Trigger>

                    </ControlTemplate.Triggers>

                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="SCustomizableBadgeButton" TargetType="{x:Type Button}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate>

                    <Border x:Name="container" Background="Transparent">
                        <Border x:Name="inner"
                                Margin="3"
                                Background="#55000000"
                                CornerRadius="2">
                            <TextBlock x:Name="text"
                                       Margin="3"
                                       HorizontalAlignment="Center"
                                       FontSize="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=FontSize}"
                                       FontWeight="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=FontWeight}"
                                       Foreground="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Foreground}"
                                       Text="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Content}" />
                        </Border>
                    </Border>

                    <ControlTemplate.Triggers>

                        <Trigger Property="Button.IsMouseOver" Value="true">
                            <Setter TargetName="inner" Property="Background" Value="#88000000" />
                        </Trigger>

                        <Trigger Property="IsEnabled" Value="false">
                            <Setter TargetName="text" Property="Foreground" Value="#666" />
                        </Trigger>

                    </ControlTemplate.Triggers>

                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="SBadgeButton" TargetType="{x:Type Button}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate>
                    <Grid x:Name="bordersGrid">
                        <Border x:Name="container" 
                                Background="Transparent">
                            <Border x:Name="inner"
                                        Margin="3"
                                        Background="#55000000"
                                        CornerRadius="2">
                                <TextBlock x:Name="text"
                                               Margin="3"
                                               HorizontalAlignment="Center"
                                               VerticalAlignment="Center"
                                               FontSize="11"
                                               FontWeight="Bold"
                                               Foreground="#BBB"
                                               Text="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Content}" />
                            </Border>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>

                        <Trigger Property="Button.IsMouseOver" Value="true">
                            <Setter TargetName="inner" Property="Background" Value="#88000000" />
                        </Trigger>

                        <Trigger Property="IsEnabled" Value="false">
                            <Setter TargetName="text" Property="Foreground" Value="#666" />
                        </Trigger>

                    </ControlTemplate.Triggers>

                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <Style x:Key="SDarkTextBox"
           BasedOn="{StaticResource {x:Type TextBox}}"
           TargetType="{x:Type TextBox}">
        <Setter Property="Foreground" Value="#bbbbbb" />
        <Setter Property="CaretBrush" Value="White" />
        <Setter Property="HorizontalAlignment" Value="Stretch" />
        <Setter Property="FontSize" Value="14px" />
        <Setter Property="Padding" Value="5" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBox}">
                    <Border Name="borderText"
                            Background="#2c2c2c"
                            BorderBrush="#444"
                            BorderThickness="1px">
                        <Grid>
                            <ScrollViewer x:Name="PART_ContentHost"
                                          Margin="5,5,0,0"
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                          Style="{DynamicResource ResourceKey=SDarkScrollViewer}" />
                            <TextBlock x:Name="previewText"
                                       Margin="5,5,0,0"
                                       Padding="{TemplateBinding Padding}"
                                       FontSize="{TemplateBinding FontSize}"
                                       Foreground="#555555"
                                       IsHitTestVisible="False"
                                       Text="{TemplateBinding Tag}"
                                       Visibility="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Text.IsEmpty, Converter={StaticResource BooleanToVisibilityConverter}}" />
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsKeyboardFocusWithin" Value="True">
                            <Setter TargetName="borderText" Property="BorderBrush" Value="#666666" />
                        </Trigger>

                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Foreground" Value="#555555" />
                            <Setter TargetName="borderText" Property="BorderBrush" Value="#444444" />
                        </Trigger>

                        <Trigger Property="Text" Value="">
                            <Setter TargetName="previewText" Property="Visibility" Value="Visible" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="SLightTextBox"
           BasedOn="{StaticResource {x:Type TextBox}}"
           TargetType="{x:Type TextBox}">
        <Setter Property="Foreground" Value="{DynamicResource DarkerGreyBrush}" />
        <Setter Property="CaretBrush" Value="White" />
        <Setter Property="HorizontalAlignment" Value="Stretch" />
        <Setter Property="FontSize" Value="11px" />
        <Setter Property="Padding" Value="5" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBox}">
                    <Border Name="borderText"
                            Background="{DynamicResource LightMidGreyOpacityBrush}"
                            BorderBrush="#444"
                            BorderThickness="0px">
                        <Grid>
                            <ScrollViewer x:Name="PART_ContentHost"
                                          Margin="5,5,0,0"
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                          Style="{DynamicResource ResourceKey=SDarkScrollViewer}" />
                            <TextBlock x:Name="previewText"
                                       Margin="5,5,0,0"
                                       Padding="{TemplateBinding Padding}"
                                       FontSize="{TemplateBinding FontSize}"
                                       Foreground="#555555"
                                       IsHitTestVisible="False"
                                       Text="{TemplateBinding Tag}"
                                       Visibility="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Text.IsEmpty, Converter={StaticResource BooleanToVisibilityConverter}}" />
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsKeyboardFocusWithin" Value="True">
                            <Setter TargetName="borderText" Property="BorderBrush" Value="#666666" />
                        </Trigger>

                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Foreground" Value="#555555" />
                            <Setter TargetName="borderText" Property="BorderBrush" Value="#444444" />
                        </Trigger>

                        <Trigger Property="Text" Value="">
                            <Setter TargetName="previewText" Property="Visibility" Value="Visible" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="STextButton" TargetType="{x:Type Button}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate>

                    <Border x:Name="container"
                            Background="Transparent"
                            BorderBrush="#3c3c3c"
                            BorderThickness="1">
                        <Grid x:Name="inner" Background="#373737">

                            <TextBlock x:Name="text"
                                       Margin="10,10,10,10"
                                       HorizontalAlignment="Center"
                                       VerticalAlignment="Center"
                                       FontSize="14px"
                                       Foreground="#bbbbbb"
                                       Text="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Content}" />
                        </Grid>
                    </Border>

                    <ControlTemplate.Triggers>

                        <Trigger Property="Button.IsMouseOver" Value="true">
                            <Setter TargetName="container" Property="BorderBrush" Value="#656565" />
                            <Setter TargetName="inner" Property="Background" Value="#373737" />
                        </Trigger>

                        <Trigger Property="Button.IsPressed" Value="true">
                            <Setter TargetName="container" Property="BorderBrush" Value="#656565" />
                            <Setter TargetName="inner" Property="Background" Value="#272727" />
                        </Trigger>

                        <Trigger Property="IsEnabled" Value="true">
                            <Setter TargetName="text" Property="Foreground" Value="#bbbbbb" />
                        </Trigger>

                        <Trigger Property="IsEnabled" Value="false">
                            <Setter TargetName="container" Property="BorderBrush" Value="Transparent" />
                            <Setter TargetName="inner" Property="Background" Value="#373737" />
                            <Setter TargetName="text" Property="Foreground" Value="#555555" />
                        </Trigger>

                    </ControlTemplate.Triggers>

                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="SmallTextButton" TargetType="{x:Type Button}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate>
                    <Border x:Name="container"
                            Background="Transparent"
                            BorderBrush="#3c3c3c"
                            BorderThickness="1">
                        <Grid x:Name="inner" Background="#373737">
                            <TextBlock x:Name="text"
                                       Margin="5,0"
                                       HorizontalAlignment="Center"
                                       VerticalAlignment="Center"
                                       FontSize="10px"
                                       Foreground="#bbbbbb"
                                       Text="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Content}" />
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="Button.IsMouseOver" Value="true">
                            <Setter TargetName="container" Property="BorderBrush" Value="#656565" />
                            <Setter TargetName="inner" Property="Background" Value="#373737" />
                        </Trigger>
                        <Trigger Property="Button.IsPressed" Value="true">
                            <Setter TargetName="container" Property="BorderBrush" Value="#656565" />
                            <Setter TargetName="inner" Property="Background" Value="#272727" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="true">
                            <Setter TargetName="text" Property="Foreground" Value="#bbbbbb" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter TargetName="container" Property="BorderBrush" Value="Transparent" />
                            <Setter TargetName="inner" Property="Background" Value="#373737" />
                            <Setter TargetName="text" Property="Foreground" Value="#555555" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="STextButtonWithShapeIcon" TargetType="{x:Type Button}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate>

                    <Border x:Name="container"
                            Background="Transparent"
                            BorderBrush="#3c3c3c"
                            BorderThickness="1">
                        <Grid x:Name="inner" Background="#373737">

                            <StackPanel Orientation="Horizontal">
                                <ContentControl Content="{DynamicResource ResourceKey=Shape}" />
                                <TextBlock x:Name="text"
                                           Margin="10,10,10,10"
                                           HorizontalAlignment="Center"
                                           VerticalAlignment="Center"
                                           FontSize="14px"
                                           Foreground="#bbbbbb"
                                           Text="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Content}" />
                            </StackPanel>
                        </Grid>
                    </Border>

                    <ControlTemplate.Triggers>

                        <Trigger Property="Button.IsMouseOver" Value="true">
                            <Setter TargetName="container" Property="BorderBrush" Value="#656565" />
                            <Setter TargetName="inner" Property="Background" Value="#373737" />
                        </Trigger>

                        <Trigger Property="Button.IsPressed" Value="true">
                            <Setter TargetName="container" Property="BorderBrush" Value="#656565" />
                            <Setter TargetName="inner" Property="Background" Value="#272727" />
                        </Trigger>

                        <Trigger Property="IsEnabled" Value="true">
                            <Setter TargetName="text" Property="Foreground" Value="#bbbbbb" />
                        </Trigger>

                        <Trigger Property="IsEnabled" Value="false">
                            <Setter TargetName="container" Property="BorderBrush" Value="Transparent" />
                            <Setter TargetName="inner" Property="Background" Value="#373737" />
                            <Setter TargetName="text" Property="Foreground" Value="#555555" />
                        </Trigger>

                    </ControlTemplate.Triggers>

                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="SButtonWithShapeIcon" TargetType="{x:Type Button}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate>
                    <Border x:Name="container"
                            Background="Transparent"
                            BorderBrush="#3c3c3c"
                            BorderThickness="1">
                        <Grid x:Name="inner" Background="#373737">
                            <StackPanel Orientation="Horizontal">
                                <ContentControl Content="{DynamicResource ResourceKey=Shape}" />
                            </StackPanel>
                        </Grid>
                    </Border>

                    <ControlTemplate.Triggers>

                        <Trigger Property="Button.IsMouseOver" Value="true">
                            <Setter TargetName="container" Property="BorderBrush" Value="#656565" />
                            <Setter TargetName="inner" Property="Background" Value="#373737" />
                        </Trigger>

                        <Trigger Property="Button.IsPressed" Value="true">
                            <Setter TargetName="container" Property="BorderBrush" Value="#656565" />
                            <Setter TargetName="inner" Property="Background" Value="#272727" />
                        </Trigger>

                        <Trigger Property="IsEnabled" Value="false">
                            <Setter TargetName="container" Property="BorderBrush" Value="Transparent" />
                            <Setter TargetName="inner" Property="Background" Value="#373737" />
                        </Trigger>

                    </ControlTemplate.Triggers>

                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <Style x:Key="STextButtonDefault" TargetType="{x:Type Button}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate>

                    <Border x:Name="container"
                            Background="Transparent"
                            BorderBrush="#3F3F3F"
                            BorderThickness="2">
                        <Grid x:Name="inner" Background="#CCCCCC">

                            <TextBlock x:Name="text"
                                       Margin="10,10,10,10"
                                       HorizontalAlignment="Center"
                                       VerticalAlignment="Center"
                                       FontSize="17px"
                                       Foreground="#3F3F3F"
                                       Text="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Content}" />
                        </Grid>
                    </Border>

                    <ControlTemplate.Triggers>

                        <Trigger Property="Button.IsMouseOver" Value="true">
                            <Setter TargetName="container" Property="BorderBrush" Value="#4192D9" />
                            <Setter TargetName="inner" Property="Background" Value="#CCCCCC" />
                            <Setter TargetName="text" Property="Foreground" Value="#3F3F3F" />
                        </Trigger>

                        <Trigger Property="Button.IsPressed" Value="true">
                            <Setter TargetName="container" Property="BorderBrush" Value="#4192D9" />
                            <Setter TargetName="inner" Property="Background" Value="#CCCCCC" />
                            <Setter TargetName="text" Property="Foreground" Value="#3F3F3F" />
                        </Trigger>

                        <Trigger Property="IsEnabled" Value="true">
                            <Setter TargetName="container" Property="BorderBrush" Value="#3F3F3F" />
                            <Setter TargetName="inner" Property="Background" Value="#CCCCCC" />
                            <Setter TargetName="text" Property="Foreground" Value="#3F3F3F" />
                        </Trigger>

                        <Trigger Property="IsEnabled" Value="false">
                            <Setter TargetName="container" Property="BorderBrush" Value="#666666" />
                            <Setter TargetName="inner" Property="Background" Value="#666666" />
                            <Setter TargetName="text" Property="Foreground" Value="#777777" />
                        </Trigger>

                    </ControlTemplate.Triggers>

                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="SErrorTextButton" TargetType="{x:Type Button}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate>

                    <Grid x:Name="container" Background="Transparent">
                        <Border x:Name="inner"
                                BorderBrush="#bd362f"
                                BorderThickness="1">

                            <Border.Background>
                                <LinearGradientBrush StartPoint="0.5,0" EndPoint="0.5,1">
                                    <GradientStop Offset="0.0" Color="#ee5f5b" />
                                    <GradientStop Offset="1.0" Color="#bd362f" />
                                </LinearGradientBrush>
                            </Border.Background>

                            <TextBlock x:Name="text"
                                       Margin="7,10,7,7"
                                       HorizontalAlignment="Center"
                                       FontSize="14"
                                       Foreground="WhiteSmoke"
                                       Text="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Content}" />
                        </Border>
                    </Grid>

                    <ControlTemplate.Triggers>

                        <Trigger Property="Button.IsMouseOver" Value="true">
                            <Setter TargetName="inner" Property="Background" Value="LightBlue" />
                        </Trigger>

                        <Trigger Property="IsEnabled" Value="true">
                            <Setter TargetName="text" Property="Foreground" Value="WhiteSmoke" />
                        </Trigger>

                        <Trigger Property="IsEnabled" Value="false">
                            <Setter TargetName="text" Property="Foreground" Value="DarkGray" />
                        </Trigger>

                    </ControlTemplate.Triggers>

                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="SNodeTextButton" TargetType="{x:Type Button}">
        <Setter Property="FontSize" Value="17px"/>
        <Setter Property="Foreground" Value="{StaticResource Blue300Brush}" />
        <Setter Property="Background" Value="#4D4D4D" />

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate>
                    <Grid x:Name="container"
                          Background="Transparent"
                          Width="{TemplateBinding Width}"
                          Height="{TemplateBinding Height}">
                        <Border x:Name="roundedBorder"
                                HorizontalAlignment="Stretch"
                                Background="{TemplateBinding Background}"
                                CornerRadius="4">
                            <TextBlock x:Name="text"
                                       Margin="0,1,0,0"
                                       Padding="0"
                                       Foreground="{TemplateBinding Foreground}"
                                       HorizontalAlignment="Center"
                                       VerticalAlignment="Center"
                                       FontSize="{TemplateBinding FontSize}"
                                       FontWeight="Bold"
                                       Style="{StaticResource SZoomFadeText}"
                                       Text="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Content}" />
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="Button.IsMouseOver" Value="true">
                            <Setter Property="Background" Value="#535353" />
                            <Setter Property="Foreground" Value="{StaticResource Blue300Brush}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type nodes:DynamoNodeButton}" BasedOn="{StaticResource SNodeTextButton}" />

    <Style x:Key="SingleCharButton" TargetType="{x:Type Button}" BasedOn="{StaticResource SNodeTextButton}">
        <Setter Property="Foreground" Value="#999999" />
        <Setter Property="FontSize" Value="28px" />
        <Setter Property="Height" Value="22px" />
        <Setter Property="Width" Value="22px" />
    </Style>

    <Style x:Key="AddRemoveButton" TargetType="{x:Type Button}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate>
                    <Grid x:Name="container" Background="Transparent">
                        <Border x:Name="roundedBorder"
                                Width="22px"
                                Height="22px"
                                HorizontalAlignment="Stretch"
                                Background="#4D4D4D"
                                CornerRadius="4">
                            <TextBlock x:Name="text"
                                       Margin="0,1,0,0"
                                       Padding="0"
                                       HorizontalAlignment="Center"
                                       VerticalAlignment="Center"
                                       FontSize="28px"
                                       FontWeight="Bold"
                                       Foreground="#999999"
                                       Style="{StaticResource SZoomFadeText}"
                                       Text="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Content}" />
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="Button.IsMouseOver" Value="true">
                            <Setter TargetName="roundedBorder" Property="Background" Value="#535353" />
                            <Setter TargetName="text" Property="Foreground" Value="{StaticResource Blue300Brush}" />
                        </Trigger>

                        <DataTrigger Binding="{Binding ElementName=text, Path=Text}" Value="+">
                            <Setter TargetName="text" Property="Margin" Value="1,3,0,0" />
                            <Setter TargetName="container" Property="Margin" Value="0,0,1,0" />
                            <Setter TargetName="roundedBorder" Property="CornerRadius" Value="4,0,0,4" />
                        </DataTrigger>
                        <DataTrigger Binding="{Binding ElementName=text, Path=Text}" Value="-">
                            <Setter TargetName="text" Property="Margin" Value="0,3,1,0" />
                            <Setter TargetName="container" Property="Margin" Value="1,0,0,0" />
                            <Setter TargetName="roundedBorder" Property="CornerRadius" Value="0,4,4,0" />
                        </DataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="DismissButtonStyle"
           TargetType="Button">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate>
                    <Grid Name="ButtonGrid">
                        <Rectangle Name="ButtonBackground"
                                   Width="{TemplateBinding Width}"
                                   Height="{TemplateBinding Height}"
                                   Fill="White" />
                        <Path Name="DiagonalLine1"
                              Data="M 0,0 50,50"
                              Stretch="UniformToFill"
                              Stroke="{StaticResource MidGreyBrush}" />
                        <Path Name="DiagonalLine2"
                              Data="M 50,0 0,50"
                              Stretch="UniformToFill"
                              Stroke="{StaticResource MidGreyBrush}" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver"
                                 Value="True">
                            <Setter TargetName="ButtonBackground"
                                    Property="Fill"
                                    Value="LightGray" />
                        </Trigger>
                        <Trigger Property="Button.IsPressed"
                                 Value="True">
                            <Setter TargetName="ButtonBackground"
                                    Property="Fill"
                                    Value="{StaticResource PrimaryCharcoal100Brush}" />
                            <Setter TargetName="DiagonalLine1"
                                    Property="Stroke"
                                    Value="{StaticResource Blue300Brush}" />
                            <Setter TargetName="DiagonalLine2"
                                    Property="Stroke"
                                    Value="{StaticResource Blue300Brush}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
               
    <Style x:Key="RadioButton" TargetType="{x:Type RadioButton}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RadioButton}">
                    <BulletDecorator Background="Transparent" Cursor="Hand">
                        <BulletDecorator.Bullet>
                            <Grid Width="18"
                                  Height="18"
                                  HorizontalAlignment="Center"
                                  VerticalAlignment="Center">
                                <!--  Define size of the Bullet  -->
                                <!--  The two borders  -->
                                <Ellipse Name="RadioOuter"
                                         Width="12px"
                                         Height="12px"
                                         HorizontalAlignment="Center"
                                         VerticalAlignment="Center"
                                         Fill="Transparent"
                                         Stroke="#C0C0C0"
                                         StrokeThickness="1" />
                                <Ellipse Name="RadioMark"
                                         Width="12px"
                                         Height="12px"
                                         HorizontalAlignment="Center"
                                         VerticalAlignment="Center"
                                         Fill="Transparent"
                                         Stroke="#EEEEEE"
                                         StrokeThickness="3 "
                                         Visibility="Hidden" />
                                <Ellipse Name="RadioHover"
                                         Width="16px"
                                         Height="16px"
                                         HorizontalAlignment="Center"
                                         VerticalAlignment="Center"
                                         Fill="Transparent"
                                         Opacity="0.2"
                                         Stroke="White"
                                         StrokeThickness="2"
                                         Visibility="Hidden" />
                            </Grid>
                        </BulletDecorator.Bullet>
                        <!--  Text element  -->
                        <TextBlock Margin="3,1,6,0"
                                   FontFamily="{StaticResource ArtifaktElementRegular}"
                                   FontSize="16px"
                                   Foreground="#EEEEEE">
                            <ContentPresenter />
                        </TextBlock>
                    </BulletDecorator>
                    <!--  If item is checked, trigger the visibility of the mark  -->
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="true">
                            <!--  If item is checked, trigger the visibility of the mark and change the color of the selected bullet into a darker gray for better highlighting  -->
                            <Setter TargetName="RadioMark" Property="Visibility" Value="Visible" />
                            <Setter TargetName="RadioOuter" Property="Stroke" Value="#FFADADAD" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter TargetName="RadioHover" Property="Visibility" Value="Visible" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter TargetName="RadioHover" Property="StrokeThickness" Value="4px" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <ControlTemplate x:Key="RefreshComboBoxToggleButton" TargetType="{x:Type ToggleButton}">
        <Grid Height="29px"
              HorizontalAlignment="Stretch"
              VerticalAlignment="Top">
            <Grid.ColumnDefinitions>
                <ColumnDefinition />
                <ColumnDefinition Width="20" />
            </Grid.ColumnDefinitions>
            <Border Grid.Column="0"
                    Grid.ColumnSpan="2"
                    Background="#666666" />
            <Border x:Name="Border" Grid.Column="1" />
            <Border Grid.Column="0"
                    Grid.ColumnSpan="2"
                    BorderBrush="#4A4A4A"
                    BorderThickness="0,1,1,1" />
            <Rectangle x:Name="BlueUnderline"
                       Grid.Column="0"
                       Grid.ColumnSpan="2"
                       Height="1px"
                       VerticalAlignment="Bottom" />
            <Path x:Name="Arrow"
                  Grid.Column="1"
                  HorizontalAlignment="Center"
                  VerticalAlignment="Center"
                  Data="M0,0 L0,2 L4,6 L8,2 L8,0 L4,4 z"
                  Fill="White" />
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="ToggleButton.IsMouseOver" Value="true">
                <Setter TargetName="Border" Property="Background" Value="#808080" />
            </Trigger>
            <Trigger Property="ToggleButton.IsChecked" Value="true">
                <Setter TargetName="Arrow" Property="Fill" Value="#6AC0E7" />
                <Setter TargetName="Arrow" Property="Data" Value="M0,6 L0,4 L4,0 L8,4 L8,6 L4,2 z" />
                <Setter TargetName="BlueUnderline" Property="Fill" Value="#6AC0E7" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter TargetName="Border" Property="Background" Value="#EEEEEE" />
                <Setter TargetName="Border" Property="BorderBrush" Value="#AAAAAA" />
                <Setter Property="Foreground" Value="#888888" />
                <Setter TargetName="Arrow" Property="Fill" Value="#888888" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <Style x:Key="RefreshComboBox" TargetType="{x:Type ComboBox}">
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto" />
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
        <Setter Property="ScrollViewer.CanContentScroll" Value="true" />
        <Setter Property="MinWidth" Value="300px" />
        <Setter Property="Margin" Value="-6,0,0,0" />
        <Setter Property="Height" Value="29px" />
        <Setter Property="Foreground" Value="#DCDCDC" />
        <Setter Property="FontSize" Value="16px" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ComboBox}">
                    <Grid>
                        <ToggleButton Name="ToggleButton"
                                      Grid.Column="2"
                                      ClickMode="Press"
                                      Focusable="false"
                                      IsChecked="{Binding Path=IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                                      Template="{StaticResource RefreshComboBoxToggleButton}" />
                        <ContentPresenter Name="ContentSite"
                                          Margin="10,0,20,0"
                                          HorizontalAlignment="Left"
                                          VerticalAlignment="Center"
                                          Content="{TemplateBinding SelectionBoxItem}"
                                          ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}"
                                          ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}"
                                          IsHitTestVisible="False" />
                        <TextBox x:Name="PART_EditableTextBox"
                                 Margin="0,0,25,4"
                                 HorizontalAlignment="Left"
                                 VerticalAlignment="Center"
                                 Focusable="True"
                                 FontFamily="{StaticResource ArtifaktElementRegular}"
                                 FontSize="18px"
                                 Foreground="#F5F5F5"
                                 IsReadOnly="{TemplateBinding IsReadOnly}"
                                 Visibility="Hidden" />
                        <Popup Name="Popup"
                               AllowsTransparency="True"
                               Focusable="False"
                               IsOpen="{TemplateBinding IsDropDownOpen}"
                               Placement="Bottom"
                               PopupAnimation="Slide"
                               VerticalOffset="-6">
                            <Grid Name="DropDown"
                                  MinWidth="{TemplateBinding ActualWidth}"
                                  MaxHeight="{TemplateBinding MaxDropDownHeight}"
                                  SnapsToDevicePixels="True">
                                <Border x:Name="DropDownBorder" Background="#666666" />
                                <ScrollViewer Margin="0"
                                              SnapsToDevicePixels="True"
                                              VerticalScrollBarVisibility="Visible">
                                    <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Contained" />
                                </ScrollViewer>
                            </Grid>
                        </Popup>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="HasItems" Value="false">
                            <Setter TargetName="DropDownBorder" Property="MinHeight" Value="95" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="#888888" />
                        </Trigger>
                        <Trigger Property="IsGrouping" Value="true">
                            <Setter Property="ScrollViewer.CanContentScroll" Value="false" />
                        </Trigger>
                        <Trigger SourceName="Popup" Property="Popup.AllowsTransparency" Value="true">
                            <Setter TargetName="DropDownBorder" Property="CornerRadius" Value="0" />
                            <Setter TargetName="DropDownBorder" Property="Margin" Value="0,0,0,0" />
                        </Trigger>
                        <Trigger Property="IsEditable" Value="true">
                            <Setter Property="IsTabStop" Value="false" />
                            <Setter TargetName="PART_EditableTextBox" Property="Visibility" Value="Visible" />
                            <Setter TargetName="ContentSite" Property="Visibility" Value="Hidden" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  SimpleStyles: ComboBoxItem  -->
    <Style x:Key="{x:Type ComboBoxItem}" TargetType="{x:Type ComboBoxItem}">
        <Setter Property="SnapsToDevicePixels" Value="true" />
        <Setter Property="Foreground" Value="#DCDCDC" />
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ComboBoxItem}">
                    <Border Name="Border"
                            Padding="10,5"
                            SnapsToDevicePixels="true">
                        <ContentPresenter />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsHighlighted" Value="true">
                            <Setter TargetName="Border" Property="Background" Value="#808080" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="#888888" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type CheckBox}">
        <Setter Property="SnapsToDevicePixels" Value="true" />
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="CheckBox">
                    <BulletDecorator VerticalAlignment="Center" Background="Transparent">
                        <BulletDecorator.Bullet>
                            <Border x:Name="Border"
                                    Width="13"
                                    Height="13"
                                    Background="#373737"
                                    BorderBrush="#666666"
                                    BorderThickness="1">
                                <Image x:Name="CheckBoxTick"
                                       Width="7"
                                       Height="7"
                                       HorizontalAlignment="Center"
                                       VerticalAlignment="Center"
                                       Source="pack://application:,,,/DynamoCoreWpf;component/UI/Images/tick_selected.png"
                                       Visibility="Hidden" />
                            </Border>
                        </BulletDecorator.Bullet>

                        <ContentPresenter x:Name="contentPresent"
                                          Margin="5,0,5,0"
                                          Content="{TemplateBinding Content}"
                                          ContentTemplate="{TemplateBinding ContentTemplate}"
                                          TextBlock.FontSize="14px"
                                          TextBlock.Foreground="#bbbbbb" />
                    </BulletDecorator>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="true">
                            <Setter TargetName="CheckBoxTick" Property="Visibility" Value="Visible" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="True">
                            <Setter TargetName="contentPresent" Property="TextBlock.Foreground" Value="#bbbbbb" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="contentPresent" Property="TextBlock.Foreground" Value="#444444" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="SSearchButton" TargetType="{x:Type Button}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate>

                    <Grid x:Name="container" Background="Transparent">
                        <Grid x:Name="inner" Background="#333">

                            <Image x:Name="display"
                                   Width="24"
                                   Height="24"
                                   Source="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Tag}" />

                        </Grid>
                    </Grid>

                    <ControlTemplate.Triggers>

                        <!--<Trigger Property="ToggleButton.IsMouseOver" Value="true">
                <Setter TargetName="inner" Property = "Background" Value="LightBlue"/>
              </Trigger>-->

                    </ControlTemplate.Triggers>

                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="SDarkScrollViewer" TargetType="{x:Type ScrollViewer}">
        <Setter Property="HorizontalScrollBarVisibility" Value="Hidden" />
        <Setter Property="VerticalScrollBarVisibility" Value="Hidden" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ScrollViewer}">
                    <Grid>
                        <Grid Background="{TemplateBinding Background}">
                            <ScrollContentPresenter x:Name="PART_ScrollContentPresenter"
                                                    Margin="{TemplateBinding Padding}"
                                                    CanContentScroll="{TemplateBinding CanContentScroll}"
                                                    Content="{TemplateBinding Content}"
                                                    ContentTemplate="{TemplateBinding ContentTemplate}" />
                        </Grid>
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*" />
                                <ColumnDefinition Width="Auto" />
                            </Grid.ColumnDefinitions>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="*" />
                                <RowDefinition Height="Auto" />
                            </Grid.RowDefinitions>
                            <ScrollBar x:Name="PART_VerticalScrollBar"
                                       Grid.Column="1"
                                       AutomationProperties.AutomationId="VerticalScrollBar"
                                       Cursor="Arrow"
                                       Maximum="{TemplateBinding ScrollableHeight}"
                                       Minimum="0.0"
                                       ViewportSize="{TemplateBinding ViewportHeight}"
                                       Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}"
                                       Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=VerticalOffset, Mode=OneWay}" />
                            <ScrollBar x:Name="PART_HorizontalScrollBar"
                                       Grid.Row="1"
                                       AutomationProperties.AutomationId="HorizontalScrollBar"
                                       Cursor="Arrow"
                                       Maximum="{TemplateBinding ScrollableWidth}"
                                       Minimum="0.0"
                                       Orientation="Horizontal"
                                       ViewportSize="{TemplateBinding ViewportWidth}"
                                       Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}"
                                       Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=HorizontalOffset, Mode=OneWay}" />
                        </Grid>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
            </Trigger>
            <Trigger Property="IsMouseOver" Value="true">
                <Setter Property="HorizontalScrollBarVisibility" Value="Visible" />
                <Setter Property="VerticalScrollBarVisibility" Value="Visible" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <!--  Scrollbar Thumbs  -->
    <Style x:Key="SScrollThumbs" TargetType="{x:Type Thumb}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <Grid x:Name="Grid">
                        <Rectangle Width="Auto"
                                   Height="Auto"
                                   HorizontalAlignment="Stretch"
                                   VerticalAlignment="Stretch"
                                   Fill="Transparent" />
                        <Border x:Name="Rectangle1"
                                Width="Auto"
                                Height="Auto"
                                HorizontalAlignment="Stretch"
                                VerticalAlignment="Stretch"
                                Background="{TemplateBinding Background}"
                                CornerRadius="3" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="Tag" Value="Horizontal">
                            <Setter TargetName="Rectangle1" Property="Width" Value="Auto" />
                            <Setter TargetName="Rectangle1" Property="Height" Value="7" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  ScrollBars  -->
    <Style x:Key="{x:Type ScrollBar}" TargetType="{x:Type ScrollBar}">
        <Setter Property="Stylus.IsFlicksEnabled" Value="false" />
        <Setter Property="Foreground" Value="#888" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Width" Value="8" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ScrollBar}">
                    <Grid x:Name="GridRoot"
                          Width="6"
                          Background="{TemplateBinding Background}">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="0.00001*" />
                        </Grid.RowDefinitions>

                        <Track x:Name="PART_Track"
                               Grid.Row="0"
                               Focusable="false"
                               IsDirectionReversed="true">
                            <Track.Resources>
                                <!-- Set the Thumb's minimum height to 25.
                                     The Thumb's minimum height is half the
                                     value of VerticalScrollBarButtonHeightKey. -->
                                <clr:Double x:Key="{x:Static SystemParameters.VerticalScrollBarButtonHeightKey}">
                                    50
                                </clr:Double>
                            </Track.Resources>
                            <Track.Thumb>
                                <Thumb x:Name="Thumb"
                                       Background="{TemplateBinding Foreground}"
                                       Style="{DynamicResource SScrollThumbs}" />
                            </Track.Thumb>
                            <Track.IncreaseRepeatButton>
                                <RepeatButton x:Name="PageUp"
                                              Command="ScrollBar.PageDownCommand"
                                              Focusable="false"
                                              Opacity="0" />
                            </Track.IncreaseRepeatButton>
                            <Track.DecreaseRepeatButton>
                                <RepeatButton x:Name="PageDown"
                                              Command="ScrollBar.PageUpCommand"
                                              Focusable="false"
                                              Opacity="0" />
                            </Track.DecreaseRepeatButton>
                        </Track>
                    </Grid>

                    <ControlTemplate.Triggers>
                        <Trigger SourceName="Thumb" Property="IsMouseOver" Value="true">
                            <Setter TargetName="Thumb" Property="Background" Value="{DynamicResource ButtonSelectBrush}" />
                        </Trigger>
                        <Trigger SourceName="Thumb" Property="IsDragging" Value="true">
                            <Setter TargetName="Thumb" Property="Background" Value="{DynamicResource DarkBrush}" />
                        </Trigger>

                        <Trigger Property="IsEnabled" Value="false">
                            <Setter TargetName="Thumb" Property="Visibility" Value="Collapsed" />
                        </Trigger>
                        <Trigger Property="Orientation" Value="Horizontal">
                            <Setter TargetName="GridRoot" Property="LayoutTransform">
                                <Setter.Value>
                                    <RotateTransform Angle="-90" />
                                </Setter.Value>
                            </Setter>
                            <Setter TargetName="PART_Track" Property="LayoutTransform">
                                <Setter.Value>
                                    <RotateTransform Angle="-90" />
                                </Setter.Value>
                            </Setter>
                            <Setter Property="Width" Value="Auto" />
                            <Setter Property="Height" Value="8" />
                            <Setter TargetName="Thumb" Property="Tag" Value="Horizontal" />
                            <Setter TargetName="PageDown" Property="Command" Value="ScrollBar.PageLeftCommand" />
                            <Setter TargetName="PageUp" Property="Command" Value="ScrollBar.PageRightCommand" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  Connectors  -->

    <clr:Int32 x:Key="connector_end_dot_size">6</clr:Int32>
    <clr:Int32 x:Key="connector_stroke_thickness">2</clr:Int32>
    <clr:Double x:Key="connector_stroke_opacity">0.6</clr:Double>
    <clr:Double x:Key="connector_bezier_offset">20.0</clr:Double>


    <!--  Tool Tip Control  -->
    <Style x:Key="SLightToolTip" TargetType="{x:Type dynui:DynamoToolTip}">
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Setter Property="HasDropShadow" Value="False" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type dynui:DynamoToolTip}">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition MinWidth="1" />
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition MinWidth="1" />
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition MinHeight="1" />
                            <RowDefinition Height="Auto" />
                            <RowDefinition MinHeight="1" />
                        </Grid.RowDefinitions>
                        <Border Grid.Row="1"
                                Grid.Column="1"
                                Margin="-1"
                                Background="{StaticResource InfoBubbleBackNormalBrush}"
                                BorderBrush="{StaticResource InfoBubbleEdgeNormalBrush}"
                                BorderThickness="1"
                                CornerRadius="2" />
                        <Path HorizontalAlignment="Center"
                              VerticalAlignment="Center"
                              Fill="{StaticResource InfoBubbleBackNormalBrush}"
                              Stroke="{StaticResource InfoBubbleEdgeNormalBrush}"
                              StrokeThickness="1">
                            <Grid.Row>
                                <Binding Converter="{StaticResource AttachmentToRowColumnConverter}"
                                         ConverterParameter="Row"
                                         RelativeSource="{RelativeSource TemplatedParent}" />
                            </Grid.Row>
                            <Grid.Column>
                                <Binding Converter="{StaticResource AttachmentToRowColumnConverter}"
                                         ConverterParameter="Column"
                                         RelativeSource="{RelativeSource TemplatedParent}" />
                            </Grid.Column>
                            <Path.Data>
                                <PathGeometry>
                                    <PathFigure IsClosed="False">
                                        <PathFigure.StartPoint>
                                            <Binding Converter="{StaticResource AttachmentToPathConverter}"
                                                     ConverterParameter="Start"
                                                     RelativeSource="{RelativeSource TemplatedParent}" />
                                        </PathFigure.StartPoint>
                                        <PolyLineSegment>
                                            <PolyLineSegment.Points>
                                                <Binding Converter="{StaticResource AttachmentToPathConverter}"
                                                         ConverterParameter="Points"
                                                         RelativeSource="{RelativeSource TemplatedParent}" />
                                            </PolyLineSegment.Points>
                                        </PolyLineSegment>
                                    </PathFigure>
                                </PathGeometry>
                            </Path.Data>
                        </Path>
                        <ContentPresenter Grid.Row="1"
                                          Grid.Column="1"
                                          Margin="4"
                                          HorizontalAlignment="Left"
                                          VerticalAlignment="Top"
                                          TextBlock.FontSize="14" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="StartPageListBox" TargetType="ListBox">
        <Setter Property="SnapsToDevicePixels" Value="true" />
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Hidden" />
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
        <Setter Property="ScrollViewer.CanContentScroll" Value="true" />
        <Setter Property="MaxHeight" Value="220" />
        <Setter Property="Margin" Value="0,0,0,60" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ListBox">
                    <ScrollViewer Margin="0,2,0,2" Focusable="false">
                        <StackPanel IsItemsHost="True" />
                    </ScrollViewer>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="ItemTemplate">
            <Setter.Value>
                <DataTemplate>
                    <Grid Background="Transparent">
                        <Grid.ToolTip>
                            <Binding Path="ToolTip" />
                        </Grid.ToolTip>
                        <StackPanel Orientation="Horizontal">
                            <Image Width="31"
                                   Margin="5,0,14,0"
                                   Source="{Binding Icon}"
                                   Visibility="{Binding IconVisibility}" />
                            <TextBlock Margin="6,7,0,8"
                                       VerticalAlignment="Center"
                                       FontFamily="{StaticResource ArtifaktElementRegular}"
                                       FontSize="16"
                                       Text="{Binding Caption}" />
                            <TextBlock Margin="16,0,0,0"
                                       VerticalAlignment="Center"
                                       FontFamily="{StaticResource ArtifaktElementRegular}"
                                       FontSize="12"
                                       Foreground="#888"
                                       Text="{Binding SubScript}" />
                        </StackPanel>
                    </Grid>
                </DataTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="StartPageListBoxItem" TargetType="ListBoxItem">
        <Setter Property="SnapsToDevicePixels" Value="true" />
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ListBoxItem">
                    <Border x:Name="Border"
                            Padding="2"
                            SnapsToDevicePixels="true">
                        <Border.Background>
                            <SolidColorBrush Color="Transparent" />
                        </Border.Background>
                        <ContentPresenter />
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualState x:Name="Normal" />
                                <VisualState x:Name="Disabled" />
                                <VisualState x:Name="MouseOver">
                                    <Storyboard>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="Border" Storyboard.TargetProperty="(Panel.Background).(SolidColorBrush.Color)">
                                            <EasingColorKeyFrame KeyTime="0" Value="#EEEEEE" />
                                        </ColorAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="SelectionStates">
                                <VisualState x:Name="Unselected" />
                                <VisualState x:Name="Selected" />
                                <VisualState x:Name="SelectedUnfocused" />
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="StartPageLabel" TargetType="Label">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Label">
                    <Border x:Name="border" Background="Transparent">
                        <StackPanel Orientation="Horizontal">
                            <ContentControl />
                            <Label x:Name="label"
                                   Content="{TemplateBinding Content}"
                                   FontFamily="{StaticResource ArtifaktElementRegular}"
                                   FontSize="16"
                                   Foreground="#888888" />
                        </StackPanel>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="label" Property="Foreground" Value="#333" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="StartPageTreeView" TargetType="TreeView">
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto" />
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
        <Setter Property="MaxHeight" Value="230" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="TreeView">
                    <Border Name="Border"
                            BorderThickness="1"
                            CornerRadius="1">
                        <Border.BorderBrush>
                            <SolidColorBrush Color="{DynamicResource BorderMediumColor}" />
                        </Border.BorderBrush>
                        <Border.Background>
                            <SolidColorBrush Color="{DynamicResource ControlLightColor}" />
                        </Border.Background>
                        <ScrollViewer Padding="4"
                                      CanContentScroll="False"
                                      Focusable="False">
                            <ItemsPresenter />
                        </ScrollViewer>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ExpandCollapseToggleStyle" TargetType="ToggleButton">
        <Setter Property="Focusable" Value="False" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ToggleButton">
                    <Grid Width="15"
                          Height="13"
                          Background="Transparent">
                        <Path x:Name="Collapsed"
                              Margin="1,1,1,1"
                              HorizontalAlignment="Left"
                              VerticalAlignment="Center"
                              Data="M 4 0 L 8 4 L 4 8 Z">
                            <Path.Fill>
                                <SolidColorBrush Color="{DynamicResource GlyphColor}" />
                            </Path.Fill>
                        </Path>
                        <Path x:Name="Expanded"
                              Margin="1,1,1,1"
                              HorizontalAlignment="Left"
                              VerticalAlignment="Center"
                              Data="M 0 4 L 8 4 L 4 8 Z"
                              Visibility="Hidden">
                            <Path.Fill>
                                <SolidColorBrush Color="{DynamicResource GlyphColor}" />
                            </Path.Fill>
                        </Path>
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CheckStates">
                                <VisualState x:Name="Checked">
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="Collapsed" Storyboard.TargetProperty="(UIElement.Visibility)">
                                            <DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Hidden}" />
                                        </ObjectAnimationUsingKeyFrames>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="Expanded" Storyboard.TargetProperty="(UIElement.Visibility)">
                                            <DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Visible}" />
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Unchecked" />
                                <VisualState x:Name="Indeterminate" />
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="TreeViewItemFocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Border>
                        <Rectangle Margin="0,0,0,0"
                                   Opacity="0"
                                   Stroke="Black"
                                   StrokeDashArray="1 2"
                                   StrokeThickness="5" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="StartPageTreeViewItem" TargetType="TreeViewItem">
        <Setter Property="IsExpanded" Value="True" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="HorizontalContentAlignment" Value="{Binding Path=HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
        <Setter Property="VerticalContentAlignment" Value="{Binding Path=VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
        <Setter Property="Padding" Value="1,0,0,0" />
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
        <Setter Property="FocusVisualStyle" Value="{StaticResource TreeViewItemFocusVisual}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TreeViewItem}">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto" MinWidth="19" />
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="*" />
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto" />
                            <RowDefinition />
                        </Grid.RowDefinitions>
                        <ToggleButton x:Name="Expander"
                                      ClickMode="Press"
                                      IsChecked="{Binding IsExpanded, RelativeSource={RelativeSource TemplatedParent}}"
                                      Style="{StaticResource ExpandCollapseToggleStyle}" />
                        <Border x:Name="Bd"
                                Grid.Column="1"
                                Padding="{TemplateBinding Padding}"
                                Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}">
                            <ContentPresenter x:Name="PART_Header"
                                              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                              ContentSource="Header" />
                        </Border>
                        <ItemsPresenter x:Name="ItemsHost"
                                        Grid.Row="1"
                                        Grid.Column="1"
                                        Grid.ColumnSpan="2"
                                        Visibility="Collapsed" />
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="SelectionStates">
                                <VisualState x:Name="Selected">
                                    <Storyboard>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="Bd" Storyboard.TargetProperty="(Panel.Background).                     (SolidColorBrush.Color)">
                                            <EasingColorKeyFrame KeyTime="0" Value="{StaticResource SelectedBackgroundColor}" />
                                        </ColorAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Unselected" />
                                <VisualState x:Name="SelectedInactive">
                                    <Storyboard>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="Bd" Storyboard.TargetProperty="(Panel.Background).                     (SolidColorBrush.Color)">
                                            <EasingColorKeyFrame KeyTime="0" Value="{StaticResource SelectedUnfocusedColor}" />
                                        </ColorAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="ExpansionStates">
                                <VisualState x:Name="Expanded">
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="ItemsHost" Storyboard.TargetProperty="(UIElement.Visibility)">
                                            <DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Visible}" />
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Collapsed" />
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="HasItems" Value="false">
                            <Setter TargetName="Expander" Property="Visibility" Value="Hidden" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="HasHeader" Value="false" />
                                <Condition Property="Width" Value="Auto" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="PART_Header" Property="MinWidth" Value="75" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="HasHeader" Value="false" />
                                <Condition Property="Height" Value="Auto" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="PART_Header" Property="MinHeight" Value="19" />
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="InOutPortControlStyle" TargetType="ItemsControl">
        <Setter Property="ItemsPanel">
            <Setter.Value>
                <ItemsPanelTemplate>
                    <dynui:InOutPortPanel HorizontalAlignment="Center" VerticalAlignment="Stretch" />
                </ItemsPanelTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{x:Type dynui:ImageCheckBox}" TargetType="{x:Type dynui:ImageCheckBox}">
        <Setter Property="SnapsToDevicePixels" Value="true" />
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Setter Property="Cursor" Value="Hand" />
        <Setter Property="FocusVisualStyle" Value="{DynamicResource CheckBoxFocusVisual}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type dynui:ImageCheckBox}">
                    <Grid>
                        <Canvas>
                            <Canvas.Clip>
                                <RectangleGeometry>
                                    <RectangleGeometry.Rect>
                                        <MultiBinding Converter="{StaticResource ViewButtonClipRectConverter}">
                                            <Binding Path="Width" RelativeSource="{RelativeSource TemplatedParent}" />
                                            <Binding Path="Height" RelativeSource="{RelativeSource TemplatedParent}" />
                                        </MultiBinding>
                                    </RectangleGeometry.Rect>
                                </RectangleGeometry>
                            </Canvas.Clip>
                            <Image Name="buttonStateImage">
                                <Image.Width>
                                    <Binding Path="Width" RelativeSource="{RelativeSource TemplatedParent}" />
                                </Image.Width>
                                <Image.Source>
                                    <Binding Path="StateImage" RelativeSource="{RelativeSource TemplatedParent}" />
                                </Image.Source>
                                <Image.RenderTransform>
                                    <TranslateTransform />
                                </Image.RenderTransform>
                            </Image>
                            <Image Name="buttonCheckImage">
                                <Image.Width>
                                    <Binding Path="Width" RelativeSource="{RelativeSource TemplatedParent}" />
                                </Image.Width>
                                <Image.Source>
                                    <Binding Path="CheckImage" RelativeSource="{RelativeSource TemplatedParent}" />
                                </Image.Source>
                                <Image.RenderTransform>
                                    <TranslateTransform />
                                </Image.RenderTransform>
                            </Image>
                        </Canvas>
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualState x:Name="Normal" />
                                <VisualState x:Name="MouseOver">
                                    <Storyboard>
                                        <DoubleAnimation x:Name="hoverOverAnimation"
                                                         Storyboard.TargetName="buttonStateImage"
                                                         Storyboard.TargetProperty="(UIElement.RenderTransform).(TranslateTransform.Y)"
                                                         Duration="0" />
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Pressed">
                                    <Storyboard>
                                        <DoubleAnimation x:Name="pressedAnimation"
                                                         Storyboard.TargetName="buttonStateImage"
                                                         Storyboard.TargetProperty="(UIElement.RenderTransform).(TranslateTransform.Y)"
                                                         Duration="0" />
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Disabled" />
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="CheckStates">
                                <VisualState x:Name="Checked">
                                    <Storyboard>
                                        <DoubleAnimation x:Name="checkedAnimation"
                                                         Storyboard.TargetName="buttonCheckImage"
                                                         Storyboard.TargetProperty="(UIElement.RenderTransform).(TranslateTransform.Y)"
                                                         Duration="0" />
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Unchecked" />
                                <VisualState x:Name="Indeterminate" />
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="TreeViewItemPath" TargetType="Path">
        <Setter Property="Stroke">
            <Setter.Value>
                <SolidColorBrush Color="{DynamicResource GlyphColor}" />
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <DataTrigger Binding="{Binding Path=IsMouseOver, RelativeSource={RelativeSource AncestorType={x:Type Grid}}}" Value="True">
                <Setter Property="Stroke" Value="#FF1BBBFA" />
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="{x:Type dynui:ImageButton}" TargetType="{x:Type dynui:ImageButton}">
        <Setter Property="SnapsToDevicePixels" Value="true" />
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Setter Property="Cursor" Value="Hand" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type dynui:ImageButton}">
                    <Grid>
                        <Canvas>
                            <Canvas.Clip>
                                <RectangleGeometry>
                                    <RectangleGeometry.Rect>
                                        <MultiBinding Converter="{StaticResource ViewButtonClipRectConverter}">
                                            <Binding Path="Width" RelativeSource="{RelativeSource TemplatedParent}" />
                                            <Binding Path="Height" RelativeSource="{RelativeSource TemplatedParent}" />
                                        </MultiBinding>
                                    </RectangleGeometry.Rect>
                                </RectangleGeometry>
                            </Canvas.Clip>
                            <Image Name="buttonStateImage">
                                <Image.Width>
                                    <Binding Path="Width" RelativeSource="{RelativeSource TemplatedParent}" />
                                </Image.Width>
                                <Image.Source>
                                    <Binding Path="StateImage" RelativeSource="{RelativeSource TemplatedParent}" />
                                </Image.Source>
                                <Image.RenderTransform>
                                    <TranslateTransform />
                                </Image.RenderTransform>
                            </Image>
                        </Canvas>
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualState x:Name="Normal" />
                                <VisualState x:Name="MouseOver">
                                    <Storyboard>
                                        <DoubleAnimation x:Name="hoverOverAnimation"
                                                         Storyboard.TargetName="buttonStateImage"
                                                         Storyboard.TargetProperty="(UIElement.RenderTransform).(TranslateTransform.Y)"
                                                         Duration="0" />
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Pressed">
                                    <Storyboard>
                                        <DoubleAnimation x:Name="pressedAnimation"
                                                         Storyboard.TargetName="buttonStateImage"
                                                         Storyboard.TargetProperty="(UIElement.RenderTransform).(TranslateTransform.Y)"
                                                         Duration="0" />
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Disabled">
                                    <Storyboard>
                                        <DoubleAnimation x:Name="disabledAnimation"
                                                         Storyboard.TargetName="buttonStateImage"
                                                         Storyboard.TargetProperty="(UIElement.RenderTransform).(TranslateTransform.Y)"
                                                         Duration="0" />
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type dynui:ImageRepeatButton}">
        <Setter Property="SnapsToDevicePixels" Value="true" />
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Setter Property="Cursor" Value="Hand" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type dynui:ImageRepeatButton}">
                    <Grid>
                        <Canvas>
                            <Canvas.Clip>
                                <RectangleGeometry>
                                    <RectangleGeometry.Rect>
                                        <MultiBinding Converter="{StaticResource ViewButtonClipRectConverter}">
                                            <Binding Path="Width" RelativeSource="{RelativeSource TemplatedParent}" />
                                            <Binding Path="Height" RelativeSource="{RelativeSource TemplatedParent}" />
                                        </MultiBinding>
                                    </RectangleGeometry.Rect>
                                </RectangleGeometry>
                            </Canvas.Clip>
                            <Image Name="buttonStateImage">
                                <Image.Width>
                                    <Binding Path="Width" RelativeSource="{RelativeSource TemplatedParent}" />
                                </Image.Width>
                                <Image.Source>
                                    <Binding Path="StateImage" RelativeSource="{RelativeSource TemplatedParent}" />
                                </Image.Source>
                                <Image.RenderTransform>
                                    <TranslateTransform />
                                </Image.RenderTransform>
                            </Image>
                        </Canvas>
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualState x:Name="Normal" />
                                <VisualState x:Name="MouseOver">
                                    <Storyboard>
                                        <DoubleAnimation x:Name="hoverOverAnimation"
                                                         Storyboard.TargetName="buttonStateImage"
                                                         Storyboard.TargetProperty="(UIElement.RenderTransform).(TranslateTransform.Y)"
                                                         Duration="0" />
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Pressed">
                                    <Storyboard>
                                        <DoubleAnimation x:Name="pressedAnimation"
                                                         Storyboard.TargetName="buttonStateImage"
                                                         Storyboard.TargetProperty="(UIElement.RenderTransform).(TranslateTransform.Y)"
                                                         Duration="0" />
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Disabled">
                                    <Storyboard>
                                        <DoubleAnimation x:Name="disabledAnimation"
                                                         Storyboard.TargetName="buttonStateImage"
                                                         Storyboard.TargetProperty="(UIElement.RenderTransform).(TranslateTransform.Y)"
                                                         Duration="0" />
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="FocusStates">
                                <VisualState x:Name="Focused" />
                                <VisualState x:Name="Unfocused" />
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="LibraryPopupContentStyle" TargetType="ContentControl">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ContentControl">
                    <Grid>
                        <Border Margin="0,11,0,0"
                                Background="{StaticResource FilterPopupBackgroundColor}"
                                BorderBrush="{StaticResource FilterPopupBorderColor}"
                                BorderThickness="1"
                                CornerRadius="5">
                            <ContentPresenter />
                        </Border>
                        <Path x:Name="arrow"
                              Data="M 5 12 L 15 0 L 25 12"
                              Fill="{StaticResource FilterPopupBackgroundColor}"
                              Stroke="{StaticResource FilterPopupBorderColor}" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="LibraryIconsStyle" TargetType="{x:Type fa:ImageAwesome}">
        <Setter Property="Foreground" Value="{Binding IsAnySearchResult, Converter={StaticResource FilterIconForegroundConverter}}" />
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Foreground" Value="White" />
                <Setter Property="Cursor" Value="Hand" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="LayoutButtonStyle" TargetType="{x:Type Border}">
        <Setter Property="Background" Value="#01000000" />
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{StaticResource FilterPopupBorderColor}" />
                <Setter Property="Cursor" Value="Hand" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="FilterTextBlockStyle" TargetType="{x:Type TextBlock}">
        <Setter Property="Foreground" Value="{StaticResource NodeNameForeground}" />
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="TextBlock.TextDecorations" Value="Underline" />
                <Setter Property="Cursor" Value="Hand" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style TargetType="{x:Type dynui:UseLevelSpinner}">
        <Style.Resources>
            <Style x:Key="IncreaseButton"
                   BasedOn="{x:Null}"
                   TargetType="{x:Type RepeatButton}">
                <Setter Property="MinWidth" Value="12" />
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type RepeatButton}">
                            <Grid>
                                <Border Name="Border"
                                        Margin="0"
                                        Padding="0"
                                        Background="{TemplateBinding Background}"
                                        BorderThickness="0">
                                    <Path Margin="1,1,0,0"
                                          HorizontalAlignment="Center"
                                          VerticalAlignment="Center"
                                          Data="M-2.5,1 L0,-2 L2.5,1"
                                          Stretch="None"
                                          Stroke="#6AC0E7" />
                                </Border>
                            </Grid>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsMouseOver" Value="True">
                                    <Setter TargetName="Border" Property="Background" Value="Gray" />
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <Style x:Key="DecreaseButton"
                   BasedOn="{x:Null}"
                   TargetType="{x:Type RepeatButton}">
                <Setter Property="MinWidth" Value="12" />
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type RepeatButton}">
                            <Grid>
                                <Border Name="Border"
                                        Margin="0"
                                        Padding="0"
                                        Background="{TemplateBinding Background}">
                                    <Path Margin="1,0,0,1"
                                          HorizontalAlignment="Center"
                                          VerticalAlignment="Center"
                                          Data="M-2.5,-1 L0,2 L2.5,-1"
                                          Stretch="None"
                                          Stroke="#6AC0E7" />
                                </Border>
                            </Grid>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsMouseOver" Value="True">
                                    <Setter TargetName="Border" Property="Background" Value="Gray" />
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
        </Style.Resources>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type dynui:UseLevelSpinner}">
                    <Grid x:Name="TemplateGrid"
                          Width="{TemplateBinding Width}"
                          Background="{TemplateBinding Background}"
                          SnapsToDevicePixels="True">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*" />
                            <ColumnDefinition Width="1" />
                            <ColumnDefinition Width="12" />
                        </Grid.ColumnDefinitions>

                        <Grid.RowDefinitions>
                            <RowDefinition Height="*" />
                            <RowDefinition Height="*" />
                        </Grid.RowDefinitions>

                        <TextBox Name="textbox"
                                 Grid.RowSpan="2"
                                 Grid.Column="0"
                                 Margin="0"
                                 Padding="0"
                                 VerticalContentAlignment="Center"
                                 Background="{TemplateBinding Background}"
                                 BorderThickness="0"
                                 CaretBrush="Transparent"
                                 FontFamily="{StaticResource ArtifaktElementRegular}"
                                 FontSize="10px"
                                 FontWeight="Medium"
                                 Foreground="White"
                                 IsHitTestVisible="False"
                                 Opacity="1.0"
                                 Style="{StaticResource SZoomFadeTextBox}" />
                        <Rectangle Grid.Row="0"
                                   Grid.RowSpan="2"
                                   Grid.Column="1"
                                   Fill="#666666" />
                        <RepeatButton Grid.Row="0"
                                      Grid.Column="2"
                                      Margin="0"
                                      Padding="0"
                                      Background="{TemplateBinding Background}"
                                      Command="{x:Static dynui:UseLevelSpinner.IncreaseCommand}"
                                      Focusable="False"
                                      Style="{StaticResource IncreaseButton}" />
                        <RepeatButton Grid.Row="1"
                                      Grid.Column="2"
                                      Margin="0"
                                      Padding="0"
                                      Background="{TemplateBinding Background}"
                                      Command="{x:Static dynui:UseLevelSpinner.DecreaseCommand}"
                                      Focusable="False"
                                      Style="{StaticResource DecreaseButton}" />
                        <Border Grid.Row="0"
                                Grid.RowSpan="2"
                                Grid.Column="0"
                                Grid.ColumnSpan="3"
                                BorderBrush="{TemplateBinding Background}"
                                BorderThickness="1" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <SolidColorBrush x:Key="PreferencesWindowBackgroundColor" Color="#535353" />
    <SolidColorBrush x:Key="PreferencesWindowItemDarkerBackgroundColor" Color="#353535" />
    <SolidColorBrush x:Key="PreferencesWindowFontColor" Color="#E5E5E5" />
    <SolidColorBrush x:Key="PreferencesWindowButtonColor" Color="#0696D7" />
    <SolidColorBrush x:Key="PreferencesWindowTabSelectedColor" Color="#ADE4DE" />
    <SolidColorBrush x:Key="CloseButtonMouseOverForeground" Color="#FFFFFF" />
    <SolidColorBrush x:Key="PreferencesWindowButtonPressedColor" Color="#0778B0" />
    <SolidColorBrush x:Key="PreferencesWindowButtonMouseOverFontColor" Color="#CDCBCB" />
    <SolidColorBrush x:Key="TabItemUnSelected" Color="DarkGray" />
    <SolidColorBrush x:Key="SecondaryGray" Color="#707070" />
    <SolidColorBrush x:Key="SemiTransparent" Color="#80000000" />

    <!--  Usual button color for the Preferences Window  -->
    <Color x:Key="PreferencesToogleCheckedColor"
           A="255"
           B="215"
           G="150"
           R="6" />

    <!--  Gray Window Background Color  -->
    <Color x:Key="PreferencesToogleUnCheckedColor"
           A="229"
           B="229"
           G="229"
           R="229" />

    <!--  White Window Color for borders  -->
    <Color x:Key="PreferencesToogleBorderColor"
           A="255"
           B="255"
           G="255"
           R="255" />

    <Style x:Key="DarkTextBlock" TargetType="TextBlock">
        <Setter Property="FontSize" Value="12" />
        <Setter Property="TextTrimming" Value="CharacterEllipsis" />
    </Style>

    <Style x:Key="PreferenceTitleLabelStyle" TargetType="{x:Type Label}">
        <Setter Property="Foreground" Value="{StaticResource PreferencesWindowFontColor}" />
        <Setter Property="FontSize" Value="14" />
    </Style>

    <Style x:Key="ToggleInfoStyle" TargetType="{x:Type Image}">
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="False">
                <Setter Property="Source" Value="pack://application:,,,/DynamoCoreWpf;component/UI/Images/default_info_16px.png" />
            </Trigger>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Source" Value="pack://application:,,,/DynamoCoreWpf;component/UI/Images/whiteinfotab.png" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- Window Control Button Styles - Base Button -->
    <Style x:Key="BaseButtonStyle" TargetType="Button">
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" Value=".5" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Window Control Button Dark Styles - Close Button -->
    <Style x:Key="CloseButtonDarkStyle" TargetType="Button" BasedOn="{StaticResource BaseButtonStyle}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Grid>
                        <Image Name="closeIcon"  Width="16" Height="16" Source="pack://application:,,,/DynamoCoreWpf;component/UI/Images/TitleBarButtons/close-darktheme-default-16px.png"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="closeIcon" Property="Source" Value="pack://application:,,,/DynamoCoreWpf;component/UI/Images/TitleBarButtons/close-darktheme-hover-16px.png" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Window Control Button Light Styles - Close Button -->
    <Style x:Key="CloseButtonStyle" TargetType="Button" BasedOn="{StaticResource BaseButtonStyle}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Grid>
                        <Image Name="closeIcon"  Width="16" Height="16" Source="pack://application:,,,/DynamoCoreWpf;component/UI/Images/TitleBarButtons/close-lighttheme-default-16px.png"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="closeIcon" Property="Source" Value="pack://application:,,,/DynamoCoreWpf;component/UI/Images/TitleBarButtons/close-lighttheme-hover-16px.png" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Window Control Button Dark Styles - Minimize Button -->
    <Style x:Key="MinimizeButtonDarkStyle" TargetType="Button" BasedOn="{StaticResource BaseButtonStyle}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Grid>
                        <Image Name="minimizeIcon"  Width="16" Height="16" Source="pack://application:,,,/DynamoCoreWpf;component/UI/Images/TitleBarButtons/min-darktheme-default-16px.png"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="minimizeIcon" Property="Source" Value="pack://application:,,,/DynamoCoreWpf;component/UI/Images/TitleBarButtons/min-darktheme-hover-16px.png" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Window Control Button Light Styles - Minimize Button -->
    <Style x:Key="MinimizeButtonStyle" TargetType="Button" BasedOn="{StaticResource BaseButtonStyle}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Grid>
                        <Image Name="minimizeIcon"  Width="16" Height="16" Source="pack://application:,,,/DynamoCoreWpf;component/UI/Images/TitleBarButtons/min-lighttheme-default-16px.png"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="minimizeIcon" Property="Source" Value="pack://application:,,,/DynamoCoreWpf;component/UI/Images/TitleBarButtons/min-lighttheme-hover-16px.png" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Window Control Button Dark Styles - Maximize Button -->
    <Style x:Key="MaximizeButtonDarkStyle" TargetType="Button" BasedOn="{StaticResource BaseButtonStyle}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Grid>
                        <Image Name="maximizeIcon"  Width="16" Height="16" Source="pack://application:,,,/DynamoCoreWpf;component/UI/Images/TitleBarButtons/max-darktheme-default-16px.png"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="maximizeIcon" Property="Source" Value="pack://application:,,,/DynamoCoreWpf;component/UI/Images/TitleBarButtons/max-darktheme-hover-16px.png" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Window Control Button Light Styles - Maximize Button -->
    <Style x:Key="MaximizeButtonStyle" TargetType="Button" BasedOn="{StaticResource BaseButtonStyle}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Grid>
                        <Image Name="maximizeIcon"  Width="16" Height="16" Source="pack://application:,,,/DynamoCoreWpf;component/UI/Images/TitleBarButtons/max-lighttheme-default-16px.png"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="maximizeIcon" Property="Source" Value="pack://application:,,,/DynamoCoreWpf;component/UI/Images/TitleBarButtons/max-lighttheme-hover-16px.png" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Window Control Button Dark Styles - Restore Button -->
    <Style x:Key="RestoreButtonDarkStyle" TargetType="Button" BasedOn="{StaticResource BaseButtonStyle}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Grid>
                        <Image Name="restoreIcon"  Width="16" Height="16" Source="pack://application:,,,/DynamoCoreWpf;component/UI/Images/TitleBarButtons/restore-darktheme-default-16px.png"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="restoreIcon" Property="Source" Value="pack://application:,,,/DynamoCoreWpf;component/UI/Images/TitleBarButtons/restore-darktheme-hover-16px.png" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Window Control Button Light Styles - Restore Button -->
    <Style x:Key="RestoreButtonStyle" TargetType="Button" BasedOn="{StaticResource BaseButtonStyle}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Grid>
                        <Image Name="restoreIcon"  Width="16" Height="16" Source="pack://application:,,,/DynamoCoreWpf;component/UI/Images/TitleBarButtons/restore-lighttheme-default-16px.png"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="restoreIcon" Property="Source" Value="pack://application:,,,/DynamoCoreWpf;component/UI/Images/TitleBarButtons/restore-lighttheme-hover-16px.png" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="DownButtonStyle" TargetType="Button">
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Grid>
                        <Image Name="downIcon"  Width="16" Height="16" Source="pack://application:,,,/DynamoCoreWpf;component/UI/Images/down_16_16.png"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="downIcon" Property="Source" Value="pack://application:,,,/DynamoCoreWpf;component/UI/Images/down-hover-16px.png" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" Value=".5" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="UpButtonStyle" TargetType="Button">
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Grid>
                        <Image Name="upIcon"  Width="16" Height="16" Source="pack://application:,,,/DynamoCoreWpf;component/UI/Images/up_16_16.png"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="upIcon" Property="Source" Value="pack://application:,,,/DynamoCoreWpf;component/UI/Images/up-hover-16px.png" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" Value=".5" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="EditFolderButtonStyle" TargetType="Button">
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Grid>
                        <Image Name="folderIcon"  Width="16" Height="16" Source="pack://application:,,,/DynamoCoreWpf;component/UI/Images/edit_folder_16px_default.png"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="folderIcon" Property="Source" Value="pack://application:,,,/DynamoCoreWpf;component/UI/Images/edit_folder_16px_hover.png" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" Value=".5" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="MenuButtonStyle" TargetType="Button">
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Grid>
                        <Image Name="menuIcon"  Width="16" Height="16" Source="pack://application:,,,/DynamoCoreWpf;component/UI/Images/menu_16_16.png"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="menuIcon" Property="Source" Value="pack://application:,,,/DynamoCoreWpf;component/UI/Images/menu-hover-16px.png" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" Value=".5" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="CtaButtonStyle" TargetType="Button">
        <Setter Property="HorizontalAlignment" Value="Right" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="Margin" Value="15,0,0,0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Grid>
                        <Border x:Name="mouseOverBorder"
                                Margin="2"
                                BorderThickness="2"
                                BorderBrush="#ECECEC"
                                Visibility="Hidden"
                                CornerRadius="2"/>
                        <Border x:Name="mousePressedBorder"
                                Margin="0"
                                BorderThickness="4"
                                Visibility="Hidden"
                                BorderBrush="{StaticResource PrimaryCharcoal200Brush}"
                                CornerRadius="4"/>
                        <Border x:Name="border"
                                Margin="4"
                                Height="36px"
                                Padding="8,0,8,0"
                                BorderThickness="1"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                Background="{TemplateBinding Background}"
                                CornerRadius="2">
                            <TextBlock x:Name="textBlock"
                                       HorizontalAlignment="Center"
                                       Margin="0,1,0,0"
                                       VerticalAlignment="Center"
                                       FontFamily="{StaticResource ArtifaktElementRegular}"
                                       FontSize="14px"
                                       Foreground="{TemplateBinding Foreground}"
                                       Text="{TemplateBinding Content}" />
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="border" Property="Opacity" Value="0.9" />
                            <Setter TargetName="mouseOverBorder" Property="Visibility" Value="Visible" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="border" Property="Opacity" Value="0.9" />
                            <Setter TargetName="mousePressedBorder" Property="Visibility" Value="Visible" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="border" Property="Background" Value="#707070" />
                            <Setter TargetName="border" Property="BorderBrush" Value="#707070" />
                            <Setter TargetName="textBlock" Property="Opacity" Value="0.7" />
                            <Setter Property="Cursor" Value="No" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="SolidButtonStyle" TargetType="Button">
        <Setter Property="BorderBrush" Value="{StaticResource PreferencesWindowButtonColor}" />
        <Setter Property="Foreground" Value="White" />
        <Setter Property="Background" Value="{StaticResource PreferencesWindowButtonColor}" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="Margin" Value="15,0,0,0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Grid>
                        <Border x:Name="mouseOverBorder"
                                BorderThickness="2"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                Background="{TemplateBinding Background}"
                                Margin="0,4,4,4"
                                Visibility="Hidden"
                                CornerRadius="2"/>
                        <Border x:Name="mousePressedBorder"
                                BorderThickness="4"
                                Visibility="Hidden"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                Background="{TemplateBinding Background}"
                                CornerRadius="4"/>
                        <Border x:Name="border"
                                Margin="0,4,4,4"
                                Height="30px"
                                Padding="8,0,8,0"
                                BorderThickness="1"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                Background="{TemplateBinding Background}"
                                CornerRadius="2">
                            <TextBlock x:Name="textBlock"
                                       HorizontalAlignment="Center"
                                       VerticalAlignment="Center"
                                       FontFamily="{StaticResource ArtifaktElementRegular}"
                                       FontSize="14px"
                                       Foreground="{TemplateBinding Foreground}"
                                       Text="{TemplateBinding Content}" />
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="border" Property="Opacity" Value="0.9" />
                            <Setter TargetName="mouseOverBorder" Property="Visibility" Value="Visible" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="border" Property="Opacity" Value="0.9" />
                            <Setter TargetName="mousePressedBorder" Property="Visibility" Value="Visible" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--This style is similar than SolidButtonStyle (used in several buttons in the PreferencesView), the only changes are in a Border.Height, TextBlock.FontSize and the Background color triggered when the Button is disabled. I think the FontSize/Height is smaller due that the AddStyle button is in a smaller space than the other buttons (based in the Figma design).-->
    <Style x:Key="SolidButtonStyleSmaller" TargetType="Button">
        <Setter Property="BorderBrush" Value="{StaticResource PreferencesWindowButtonColor}" />
        <Setter Property="Foreground" Value="White" />
        <Setter Property="Background" Value="{StaticResource PreferencesWindowButtonColor}" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="HorizontalAlignment" Value="Center" />
        <Setter Property="Margin" Value="15,0,0,0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Grid>
                        <Border x:Name="mouseOverBorder"
                                Margin="4"
                                BorderThickness="2"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                Background="{TemplateBinding Background}"
                                Visibility="Hidden"
                                CornerRadius="2"/>
                        <Border x:Name="mousePressedBorder"
                                BorderThickness="4"
                                Visibility="Hidden"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                Background="{TemplateBinding Background}"
                                CornerRadius="4"/>
                        <Border x:Name="border"
                                Margin="4"
                                Height="24px"
                                Padding="8,0,8,0"
                                BorderThickness="1"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                Background="{TemplateBinding Background}"
                                CornerRadius="2">
                            <TextBlock x:Name="textBlock"
                                       HorizontalAlignment="Center"
                                       VerticalAlignment="Center"
                                       FontFamily="{StaticResource ArtifaktElementRegular}"
                                       FontSize="12px"
                                       Foreground="{TemplateBinding Foreground}"
                                       Text="{TemplateBinding Content}" />
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="border" Property="Opacity" Value="0.9" />
                            <Setter TargetName="mouseOverBorder" Property="Visibility" Value="Visible" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="border" Property="Opacity" Value="0.9" />
                            <Setter TargetName="mousePressedBorder" Property="Visibility" Value="Visible" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="border" Property="Background" Value="#0696D7" />
                            <Setter TargetName="border" Property="Opacity" Value="0.6" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="PopupButtonStyle" TargetType="Button">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Foreground" Value="#4D4D4D" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="Margin" Value="8" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Grid>
                        <Border Name="border"
                                Padding="4"
                                Background="Transparent"
                                BorderBrush="Transparent"
                                BorderThickness="0" />
                        <ContentPresenter Name="contentpresenter"
                                          HorizontalAlignment="Center"
                                          VerticalAlignment="Center"
                                          TextBlock.FontSize="13px"
                                          TextBlock.Foreground="#4D4D4D" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="border" Property="Background" Value="Transparent" />
                            <Setter TargetName="contentpresenter" Property="Opacity" Value="0.5" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="border" Property="Background" Value="#99E0FF" />
                            <Setter TargetName="border" Property="Opacity" Value="0.3" />
                            <Setter Property="Foreground" Value="{StaticResource PreferencesWindowButtonMouseOverFontColor}" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="border" Property="Background" Value="#99E0FF" />
                            <Setter TargetName="border" Property="Opacity" Value="0.5" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="NormalButtonStyle" TargetType="Button">
        <Setter Property="Foreground" Value="{StaticResource PreferencesWindowFontColor}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border Name="border"
                            Padding="4,2"
                            Background="{StaticResource PreferencesWindowButtonColor}"
                            BorderBrush="Transparent"
                            BorderThickness="1"
                            CornerRadius="3">
                        <Grid>
                            <ContentPresenter Name="contentShadow"
                                              HorizontalAlignment="Center"
                                              VerticalAlignment="Center" />
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="border" Property="Background" Value="{StaticResource PreferencesWindowButtonPressedColor}" />
                            <Setter Property="FontSize" Value="11" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="border" Property="Background" Value="{StaticResource PreferencesWindowButtonPressedColor}" />
                            <Setter Property="Foreground" Value="{StaticResource PreferencesWindowButtonMouseOverFontColor}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <SolidColorBrush x:Key="ExpanderCaretToggleButtonBackground" Color="#4d4d4d" />
    <SolidColorBrush x:Key="ExpanderCaretToggleButtonSelectedBackground" Color="#3c3c3c" />

    <ControlTemplate x:Key="ExpanderCaretToggleButton" TargetType="{x:Type ToggleButton}">
        <Border Name="Border"
                Grid.Row="0"
                Background="{StaticResource ExpanderCaretToggleButtonBackground}"
                BorderThickness="1"
                CornerRadius="1">
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="*" />
                    <ColumnDefinition Width="Auto" />
                </Grid.ColumnDefinitions>
                <Image x:Name="Caret"
                       Grid.Column="0"
                       Width="16"
                       Height="16"
                       Margin="5,10,0,10"
                       HorizontalAlignment="Left"
                       VerticalAlignment="Center"
                       Source="pack://application:,,,/DynamoCoreWpf;component/UI/Images/Caret_Down.png" />
                <ContentPresenter x:Name="HeaderContent"
                                  Grid.Column="0"
                                  Width="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Expander}}, Path=ActualWidth}"
                                  Margin="0,0,0,0"
                                  VerticalAlignment="Center"
                                  RecognizesAccessKey="True" />
            </Grid>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="IsChecked" Value="true">
                <!--  Sets the icon on the expander to caret up (-)  -->
                <Setter TargetName="Border" Property="Background" Value="{StaticResource ExpanderCaretToggleButtonSelectedBackground}" />
                <Setter TargetName="Caret" Property="Source" Value="pack://application:,,,/DynamoCoreWpf;component/UI/Images/caret_up.png" />
            </Trigger>
            <Trigger Property="IsChecked" Value="false">
                <Setter TargetName="Border" Property="Background" Value="{StaticResource ExpanderCaretToggleButtonBackground}" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <ControlTemplate x:Key="ExpanderPlusToggleButton" TargetType="{x:Type ToggleButton}">
        <Border Name="Border"
                Grid.Row="0"
                Background="{StaticResource SecondaryGray}"
                BorderThickness="1"
                CornerRadius="1">
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="*" />
                    <ColumnDefinition Width="Auto" />
                </Grid.ColumnDefinitions>
                <!--  Draws a plus (+) sign on the expander  -->
                <Path x:Name="Sign"
                      Grid.Column="1"
                      Width="12"
                      Height="12"
                      Margin="0,10,15,10"
                      HorizontalAlignment="Center"
                      VerticalAlignment="Center"
                      Data="M 0,6 H 12 M 6,0 V 12 Z"
                      Stroke="{StaticResource PreferencesWindowFontColor}"
                      StrokeThickness="2" />
                <ContentPresenter x:Name="HeaderContent"
                                  Grid.Column="0"
                                  Width="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Expander}}, Path=ActualWidth}"
                                  Margin="15,0,0,0"
                                  VerticalAlignment="Center"
                                  RecognizesAccessKey="True" />
            </Grid>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="IsChecked" Value="true">
                <!--  Sets the sign on the expander to a minus (-)  -->
                <Setter TargetName="Sign" Property="Data" Value="M 0,6 H 12 Z" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter TargetName="Border" Property="Background" Value="{x:Null}" />
                <Setter TargetName="Border" Property="BorderBrush" Value="{x:Null}" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <DataTemplate x:Key="expanderHeader">
        <TextBlock FontSize="14"
                   FontWeight="Medium"
                   Text="{Binding}" />
    </DataTemplate>


    <Style x:Key="InstalledPackagesExpanderStyle" TargetType="Expander">
        <Setter Property="Template">
            <Setter.Value>
                <!--  Control template for expander  -->
                <ControlTemplate x:Name="exp" TargetType="Expander">
                    <Grid>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto" />
                            <RowDefinition Name="ContentRow" Height="0" />
                        </Grid.RowDefinitions>
                        <Border Name="Border"
                                Grid.Row="0"
                                Background="{x:Null}"
                                BorderBrush="{x:Null}"
                                BorderThickness="1"
                                CornerRadius="0,0,0,0">
                            <ToggleButton IsChecked="{Binding Path=IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" Template="{StaticResource ExpanderCaretToggleButton}">
                                <ToggleButton.Content>
                                    <ContentPresenter ContentSource="Header"
                                                      OverridesDefaultStyle="True"
                                                      RecognizesAccessKey="True" />
                                </ToggleButton.Content>
                            </ToggleButton>
                        </Border>
                        <Border x:Name="Content"
                                Grid.Row="1"
                                BorderThickness="1,0,1,1"
                                CornerRadius="0,0,4,4">
                            <!--  The Margin is necesary so that the Content is perfectly aligned with the Header  -->
                            <ContentPresenter Margin="1,-3,1,0" />
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsExpanded" Value="True">
                            <Setter TargetName="ContentRow" Property="Height" Value="{Binding ElementName=Content, Path=Height}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ContextMenuNoLeftColumnStyle" TargetType="{x:Type ContextMenu}">
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="Grid.IsSharedSizeScope" Value="true" />
        <Setter Property="HasDropShadow" Value="True" />
        <Setter Property="Foreground" Value="{StaticResource PreferencesWindowFontColor}" />
        <Setter Property="Background" Value="{StaticResource PreferencesWindowItemDarkerBackgroundColor}" />
        <Setter Property="FontSize" Value="10" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ContextMenu}">
                    <Border x:Name="Border"
                            Background="{StaticResource PreferencesWindowItemDarkerBackgroundColor}"
                            BorderThickness="1">
                        <ItemsPresenter />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="ItemsPanel">
            <Setter.Value>
                <ItemsPanelTemplate>
                    <StackPanel Margin="-25,0,0,0" />
                </ItemsPanelTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ContextMenuItemStyle" TargetType="{x:Type MenuItem}">
        <Setter Property="IsChecked" Value="{DynamicResource IsChecked}" />
        <Setter Property="Height" Value="Auto" />
        <Setter Property="MinWidth" Value="250" />
        <Setter Property="Width" Value="Auto" />
        <Setter Property="Padding" Value="20,0,0,0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type MenuItem}">
                    <DockPanel x:Name="dockPanel"
                               HorizontalAlignment="Stretch"
                               Background="Transparent"
                               SnapsToDevicePixels="true">
                        <Label x:Name="checkBox"
                               Margin="0,0,-20,0"
                               HorizontalAlignment="Left"
                               VerticalAlignment="Center"
                               HorizontalContentAlignment="Center"
                               VerticalContentAlignment="Center"
                               Content="✓"
                               DockPanel.Dock="Left"
                               FontSize="9px"
                               Foreground="White"
                               Visibility="Collapsed" />
                        <ContentPresenter x:Name="ContentPresenter"
                                          Margin="{TemplateBinding Padding}"
                                          VerticalAlignment="Center"
                                          ContentSource="Header"
                                          DockPanel.Dock="Left"
                                          RecognizesAccessKey="True"
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                          TextBlock.Foreground="{StaticResource NodeContextMenuForeground}" />
                        <Label x:Name="subMenuArrow"
                               Margin="0,0,15,7"
                               Padding="0"
                               VerticalAlignment="Center"
                               Content="&gt;"
                               DockPanel.Dock="Right"
                               FontFamily="{StaticResource ArtifaktElementRegular}"
                               FontSize="13px"
                               Foreground="{StaticResource Blue300Brush}">
                            <Label.RenderTransform>
                                <ScaleTransform ScaleX="1" ScaleY="1.5" />
                            </Label.RenderTransform>
                            <Label.Style>
                                <Style TargetType="{x:Type Label}">
                                    <Setter Property="Visibility" Value="Hidden" />
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType={x:Type MenuItem}}, Path=HasItems}" Value="True">
                                            <Setter Property="Visibility" Value="Visible" />
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </Label.Style>
                        </Label>
                        <Popup x:Name="PART_Popup"
                               AllowsTransparency="true"
                               Focusable="false"
                               HorizontalOffset="0"
                               IsOpen="{Binding IsSubmenuOpen, RelativeSource={RelativeSource TemplatedParent}}"
                               Placement="Right"
                               VerticalOffset="-2">
                            <Border Background="{TemplateBinding Background}"
                                    BorderBrush="Transparent"
                                    BorderThickness="0">
                                <ScrollViewer x:Name="SubMenuScrollViewer"
                                              CanContentScroll="true"
                                              Style="{DynamicResource {ComponentResourceKey ResourceId=MenuScrollViewer,
                                                                                            TypeInTargetAssembly={x:Type FrameworkElement}}}">
                                    <Grid RenderOptions.ClearTypeHint="Enabled">
                                        <ItemsPresenter x:Name="ItemsPresenter"
                                                        Grid.IsSharedSizeScope="true"
                                                        KeyboardNavigation.DirectionalNavigation="Cycle"
                                                        KeyboardNavigation.TabNavigation="Cycle"
                                                        SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                                    </Grid>
                                </ScrollViewer>
                            </Border>
                        </Popup>
                    </DockPanel>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="ContentPresenter" Property="TextBlock.Opacity" Value="0.5" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="ContentPresenter" Property="TextBlock.Foreground" Value="White" />
                            <Setter TargetName="dockPanel" Property="Background" Value="{StaticResource NodeContextMenuBackgroundHighlight}" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="False">
                            <Setter TargetName="dockPanel" Property="Background" Value="{StaticResource NodeContextMenuBackground}" />
                        </Trigger>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter TargetName="checkBox" Property="Visibility" Value="Visible" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ContextMenuItemFixedWidthStyle" TargetType="{x:Type MenuItem}">
        <Setter Property="IsChecked" Value="{DynamicResource IsChecked}" />
        <Setter Property="Height" Value="Auto" />
        <Setter Property="MinWidth" Value="250" />
        <Setter Property="Width" Value="Auto" />
        <Setter Property="Padding" Value="20,0,0,0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type MenuItem}">
                    <DockPanel x:Name="dockPanel"
                               HorizontalAlignment="Stretch"
                               Background="Transparent"
                               SnapsToDevicePixels="true">
                        <Label x:Name="checkBox"
                               Margin="0,0,-20,0"
                               HorizontalAlignment="Left"
                               VerticalAlignment="Center"
                               HorizontalContentAlignment="Center"
                               VerticalContentAlignment="Center"
                               Content="✓"
                               DockPanel.Dock="Left"
                               FontSize="9px"
                               Foreground="White"
                               Visibility="Collapsed" />
                        <ContentPresenter x:Name="ContentPresenter"
                                          Margin="{TemplateBinding Padding}"
                                          VerticalAlignment="Center"
                                          ContentSource="Header"
                                          DockPanel.Dock="Left"
                                          RecognizesAccessKey="True"
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                          TextBlock.Foreground="{StaticResource NodeContextMenuForeground}" />
                        <Label x:Name="subMenuArrow"
                               Margin="0,0,15,7"
                               Padding="0"
                               VerticalAlignment="Center"
                               Content="&gt;"
                               DockPanel.Dock="Right"
                               FontFamily="{StaticResource ArtifaktElementRegular}"
                               FontSize="13px"
                               Foreground="{StaticResource Blue300Brush}">
                            <Label.RenderTransform>
                                <ScaleTransform ScaleX="1" ScaleY="1.5" />
                            </Label.RenderTransform>
                            <Label.Style>
                                <Style TargetType="{x:Type Label}">
                                    <Setter Property="Visibility" Value="Hidden" />
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType={x:Type MenuItem}}, Path=HasItems}" Value="True">
                                            <Setter Property="Visibility" Value="Visible" />
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </Label.Style>
                        </Label>
                        <Popup x:Name="PART_Popup"
                               AllowsTransparency="true"
                               Focusable="false"
                               HorizontalOffset="0"
                               MaxWidth="182"
                               IsOpen="{Binding IsSubmenuOpen, RelativeSource={RelativeSource TemplatedParent}}"
                               Placement="Right"
                               VerticalOffset="-2">
                            <Border Background="{TemplateBinding Background}"
                                    BorderThickness="0">
                                <ScrollViewer x:Name="SubMenuScrollViewer"
                                              CanContentScroll="true"
                                              Style="{DynamicResource {ComponentResourceKey ResourceId=MenuScrollViewer,
                                                                                            TypeInTargetAssembly={x:Type FrameworkElement}}}">
                                    <Grid RenderOptions.ClearTypeHint="Enabled">
                                        <ItemsPresenter x:Name="ItemsPresenter"
                                                        Grid.IsSharedSizeScope="true"
                                                        KeyboardNavigation.DirectionalNavigation="Cycle"
                                                        KeyboardNavigation.TabNavigation="Cycle"
                                                        SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                                    </Grid>
                                </ScrollViewer>
                            </Border>
                        </Popup>
                    </DockPanel>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="ContentPresenter" Property="TextBlock.Opacity" Value="0.5" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="ContentPresenter" Property="TextBlock.Foreground" Value="White" />
                            <Setter TargetName="dockPanel" Property="Background" Value="{StaticResource NodeContextMenuBackgroundHighlight}" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="False">
                            <Setter TargetName="dockPanel" Property="Background" Value="{StaticResource NodeContextMenuBackground}" />
                        </Trigger>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter TargetName="checkBox" Property="Visibility" Value="Visible" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ContextMenuSeparatorStyle" TargetType="Separator">
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Separator}">
                    <Border Height="1"
                            Margin="15,8,15,8"
                            Background="{StaticResource NodeContextMenuSeparatorColor}" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ContextMenuStyle" TargetType="{x:Type ContextMenu}">
        <Setter Property="Placement" Value="MousePoint" />
        <Setter Property="Foreground" Value="{StaticResource NodeContextMenuForeground}" />
        <Setter Property="FontSize" Value="13px" />
        <Setter Property="FontFamily" Value="{StaticResource ArtifaktElementRegular}" />
        <Setter Property="FontWeight" Value="Medium" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ContextMenu}">
                    <Border x:Name="Border"
                            Background="{TemplateBinding Background}"
                            BorderThickness="0px">
                        <StackPanel IsItemsHost="True"
                                    Margin="0,10"
                                    ClipToBounds="True"
                                    Orientation="Vertical" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Resources>
            <!--  Separator  -->
            <Style x:Key="{x:Static MenuItem.SeparatorStyleKey}"
                   BasedOn="{StaticResource ContextMenuSeparatorStyle}"
                   TargetType="Separator" />

            <!--  MenuItem Style  -->
            <Style x:Key="{x:Type MenuItem}"
                   BasedOn="{StaticResource ContextMenuItemStyle}"
                   TargetType="MenuItem" />
        </Style.Resources>
    </Style>

    <Style x:Key="MenuExpanderStyle" TargetType="Expander">
        <Setter Property="Background" Value="{StaticResource SecondaryGray}" />
        <Setter Property="Foreground" Value="{StaticResource PreferencesWindowFontColor}" />
        <Setter Property="HeaderTemplate" Value="{StaticResource expanderHeader}" />
        <Setter Property="Template">
            <Setter.Value>
                <!--  Control template for expander  -->
                <ControlTemplate x:Name="exp" TargetType="Expander">
                    <Grid>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto" />
                            <RowDefinition Name="ContentRow" Height="0" />
                        </Grid.RowDefinitions>
                        <Border Name="Border"
                                Grid.Row="0"
                                Background="{x:Null}"
                                BorderBrush="{x:Null}"
                                BorderThickness="1"
                                CornerRadius="0,0,0,0">
                            <ToggleButton Background="#FF4682B4"
                                          IsChecked="{Binding Path=IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                                          OverridesDefaultStyle="True"
                                          Template="{StaticResource ExpanderPlusToggleButton}">
                                <ToggleButton.Content>
                                    <ContentPresenter ContentSource="Header"
                                                      RecognizesAccessKey="True"
                                                      TextBlock.FontFamily="{StaticResource ArtifaktElementRegular}" />
                                </ToggleButton.Content>
                            </ToggleButton>
                        </Border>
                        <Border x:Name="Content"
                                Grid.Row="1"
                                BorderThickness="1,0,1,1"
                                CornerRadius="0,0,4,4">
                            <ContentPresenter Margin="12,0,0,12" />
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsExpanded" Value="True">
                            <Setter TargetName="ContentRow" Property="Height" Value="{Binding ElementName=Content, Path=Height}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>




    <!--  This expander style is similar to the MenuExpanderStyle and the only difference is the left-margin spacing  -->
    <Style x:Key="WorkspaceReferencesExpanderStyle" TargetType="Expander">
        <Setter Property="Background" Value="{StaticResource SecondaryGray}" />
        <Setter Property="Foreground" Value="{StaticResource PreferencesWindowFontColor}" />
        <Setter Property="Template">
            <Setter.Value>
                <!--  Control template for expander  -->
                <ControlTemplate x:Name="exp" TargetType="Expander">
                    <Grid>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto" />
                            <RowDefinition Name="ContentRow" Height="0" />
                        </Grid.RowDefinitions>
                        <Border Name="Border"
                                Grid.Row="0"
                                Background="{x:Null}"
                                BorderBrush="{x:Null}"
                                BorderThickness="1"
                                CornerRadius="0,0,0,0">
                            <ToggleButton Background="#FF4682B4"
                                          IsChecked="{Binding Path=IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                                          OverridesDefaultStyle="True"
                                          Template="{StaticResource ExpanderPlusToggleButton}">
                                <ToggleButton.Content>
                                    <ContentPresenter ContentSource="Header" RecognizesAccessKey="True" />
                                </ToggleButton.Content>
                            </ToggleButton>
                        </Border>
                        <Border x:Name="Content"
                                Grid.Row="1"
                                BorderThickness="1,0,1,1"
                                CornerRadius="0,0,4,4">
                            <ContentPresenter Margin="2,0,0,15" />
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsExpanded" Value="True">
                            <Setter TargetName="ContentRow" Property="Height" Value="{Binding ElementName=Content, Path=Height}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="LeftTab" TargetType="{x:Type TabItem}">
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TabItem}">
                    <Border Name="TabBorder"
                            Margin="2"
                            HorizontalAlignment="Stretch"
                            VerticalAlignment="Stretch"
                            Background="Transparent"
                            BorderBrush="Transparent"
                            BorderThickness="2"
                            CornerRadius="6">
                        <StackPanel HorizontalAlignment="Stretch"
                                    VerticalAlignment="Stretch"
                                    Orientation="Horizontal">
                            <Grid Name="TabPanel"
                                  Width="165"
                                  Height="30">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="5" />
                                    <ColumnDefinition Width="*" />
                                </Grid.ColumnDefinitions>
                                <Label x:Name="SelectedItem" Grid.Column="0" />
                                <ContentPresenter x:Name="ContentSection"
                                                  Grid.Column="1"
                                                  Margin="5,0,0,0"
                                                  HorizontalAlignment="Stretch"
                                                  VerticalAlignment="Center"
                                                  ContentSource="Header" />
                            </Grid>
                        </StackPanel>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter TargetName="SelectedItem" Property="Background" Value="{StaticResource PreferencesWindowTabSelectedColor}" />
                            <Setter Property="Foreground" Value="{StaticResource PreferencesWindowFontColor}" />
                            <Setter Property="FontWeight" Value="Bold" />
                        </Trigger>
                        <Trigger Property="IsSelected" Value="False">
                            <Setter TargetName="SelectedItem" Property="Background" Value="{StaticResource PreferencesWindowBackgroundColor}" />
                            <Setter Property="Foreground" Value="{StaticResource TabItemUnSelected}" />
                            <Setter Property="FontWeight" Value="Regular" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  This is a Toogle button shown in the Preferences Window for the General tab, when is checked shows a Blue button  -->
    <Style x:Key="EllipseToggleButton1" TargetType="{x:Type ToggleButton}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Grid x:Name="mainGrid">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto" />
                        </Grid.ColumnDefinitions>
                        <Border Name="_borderOn"
                                Grid.Column="0"
                                Width="{TemplateBinding Width}"
                                Background="Transparent">
                            <Grid>
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="Auto" />
                                </Grid.RowDefinitions>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="Auto" />
                                    <ColumnDefinition Width="Auto" />
                                    <ColumnDefinition Width="*" />
                                    <ColumnDefinition Width="Auto" />
                                    <ColumnDefinition Width="Auto" />
                                </Grid.ColumnDefinitions>
                                <Border Grid.Row="0"
                                        Grid.RowSpan="1"
                                        Grid.Column="1"
                                        Grid.ColumnSpan="3"
                                        Panel.ZIndex="1"
                                        Background="{StaticResource PreferencesWindowButtonColor}" />
                                <Ellipse Name="ButtonBackgroundOn"
                                         Grid.Row="0"
                                         Grid.RowSpan="1"
                                         Grid.Column="0"
                                         Grid.ColumnSpan="2"
                                         Width="{TemplateBinding Height}"
                                         Panel.ZIndex="0"
                                         Fill="{StaticResource PreferencesWindowButtonColor}" />
                                <Ellipse Grid.Row="0"
                                         Grid.RowSpan="1"
                                         Grid.Column="3"
                                         Grid.ColumnSpan="2"
                                         Width="{TemplateBinding Height}"
                                         Height="{TemplateBinding Height}"
                                         Panel.ZIndex="3"
                                         Fill="{StaticResource CloseButtonMouseOverForeground}"
                                         Stroke="{StaticResource PreferencesWindowButtonColor}"
                                         StrokeThickness="4" />
                            </Grid>
                        </Border>

                        <Border Name="_borderOff"
                                Grid.Column="0"
                                Width="{TemplateBinding Width}"
                                Background="Transparent">
                            <Grid>
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="Auto" />
                                </Grid.RowDefinitions>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="Auto" />
                                    <ColumnDefinition Width="Auto" />
                                    <ColumnDefinition Width="*" />
                                    <ColumnDefinition Width="Auto" />
                                    <ColumnDefinition Width="Auto" />
                                </Grid.ColumnDefinitions>
                                <Border Grid.Row="0"
                                        Grid.RowSpan="1"
                                        Grid.Column="1"
                                        Grid.ColumnSpan="3"
                                        Panel.ZIndex="1"
                                        Background="{StaticResource TabItemUnSelected}" />
                                <Ellipse Name="ButtonBackgroundOff"
                                         Grid.Row="0"
                                         Grid.RowSpan="1"
                                         Grid.Column="3"
                                         Grid.ColumnSpan="2"
                                         Width="{TemplateBinding Height}"
                                         Height="{TemplateBinding Height}"
                                         Panel.ZIndex="0"
                                         Fill="{StaticResource TabItemUnSelected}" />
                                <Ellipse Grid.Row="0"
                                         Grid.RowSpan="1"
                                         Grid.Column="0"
                                         Grid.ColumnSpan="2"
                                         Width="{TemplateBinding Height}"
                                         Height="{TemplateBinding Height}"
                                         Panel.ZIndex="3"
                                         Fill="{StaticResource CloseButtonMouseOverForeground}"
                                         Stroke="{StaticResource TabItemUnSelected}"
                                         StrokeThickness="4" />
                            </Grid>
                        </Border>
                    </Grid>

                    <!--  triggers toggle visual appearance  -->
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter TargetName="_borderOff" Property="Visibility" Value="Collapsed" />
                            <Setter TargetName="_borderOn" Property="Visibility" Value="Visible" />
                        </Trigger>
                        <Trigger Property="IsChecked" Value="False">
                            <Setter TargetName="_borderOff" Property="Visibility" Value="Visible" />
                            <Setter TargetName="_borderOn" Property="Visibility" Value="Collapsed" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="mainGrid" Property="OpacityMask" Value="{StaticResource SemiTransparent}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  Due that the comboboxes in the design show a different button than the usual ones, we need a new style for the toggle button  -->
    <ControlTemplate x:Key="NoBordersComboBoxToggleButton" TargetType="{x:Type ToggleButton}">
        <Grid>
            <Grid.ColumnDefinitions>
                <ColumnDefinition />
                <ColumnDefinition Width="20" />
            </Grid.ColumnDefinitions>
            <Border x:Name="Border"
                    Grid.ColumnSpan="2"
                    Background="{StaticResource PreferencesWindowBackgroundColor}"
                    BorderBrush="#FF97A0A5"
                    BorderThickness="0,0,0,1"
                    CornerRadius="0" />
            <Border Grid.Column="0"
                    Margin="1"
                    Background="{StaticResource PreferencesWindowBackgroundColor}"
                    BorderBrush="#FF97A0A5"
                    BorderThickness="0,0,0,0"
                    CornerRadius="0" />
            <!--  This Path will draw a small triangle symbol inside the toogle button  -->
            <Path x:Name="Arrow"
                  Grid.Column="1"
                  HorizontalAlignment="Center"
                  VerticalAlignment="Center"
                  Data="M0,0 L0,2 L4,6 L8,2 L8,0 L4,4 z"
                  Fill="{StaticResource PreferencesWindowFontColor}" />
        </Grid>
    </ControlTemplate>

    <!--  This ControlTemplate for TextBox is used inside the NoBordersComboBox control  -->
    <ControlTemplate x:Key="NoBordersComboBoxTextBox" TargetType="{x:Type TextBox}">
        <Border x:Name="PART_ContentHost"
                Background="{TemplateBinding Background}"
                Focusable="False" />
    </ControlTemplate>

    <!--  This is the main Style for the new ComboBox in the Preferences window General tab and using the previous templated declared  -->
    <Style x:Key="NoBordersComboBoxStyle" TargetType="{x:Type ComboBox}">
        <Setter Property="SnapsToDevicePixels" Value="true" />
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto" />
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
        <Setter Property="ScrollViewer.CanContentScroll" Value="true" />
        <Setter Property="Foreground" Value="{StaticResource PreferencesWindowFontColor}" />
        <Setter Property="FontWeight" Value="Regular" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ComboBox}">
                    <Grid>
                        <!--  Toogle button that is shown in the right side of the combobox and when is clicked displays a list of all the values  -->
                        <ToggleButton Name="ToggleButton"
                                      Grid.Column="2"
                                      ClickMode="Press"
                                      Focusable="false"
                                      IsChecked="{Binding Path=IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                                      Template="{StaticResource NoBordersComboBoxToggleButton}" />
                        <ContentPresenter Name="ContentSite"
                                          Margin="3,3,23,3"
                                          HorizontalAlignment="Left"
                                          VerticalAlignment="Center"
                                          Content="{TemplateBinding SelectionBoxItem}"
                                          ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}"
                                          ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}"
                                          IsHitTestVisible="False" />
                        <!--  This TextBox shows the current comboboxitem value selected  -->
                        <TextBox x:Name="PART_EditableTextBox"
                                 Margin="3,3,23,3"
                                 HorizontalAlignment="Left"
                                 VerticalAlignment="Center"
                                 Background="#FF3F3F3F"
                                 Focusable="True"
                                 Foreground="{StaticResource PreferencesWindowFontColor}"
                                 IsReadOnly="{TemplateBinding IsReadOnly}"
                                 Style="{x:Null}"
                                 Template="{StaticResource NoBordersComboBoxTextBox}"
                                 Visibility="Hidden" />
                        <!--  The Popup is the window with all the comboboxitems displayed when the user clicks the combobox toogle button  -->
                        <Popup Name="Popup"
                               AllowsTransparency="True"
                               Focusable="False"
                               IsOpen="{TemplateBinding IsDropDownOpen}"
                               Placement="Bottom"
                               PopupAnimation="Slide">

                            <Grid Name="DropDown"
                                  MinWidth="{TemplateBinding ActualWidth}"
                                  MaxHeight="{TemplateBinding MaxDropDownHeight}"
                                  SnapsToDevicePixels="True">
                                <Border x:Name="DropDownBorder"
                                        Background="#FF3F3F3F"
                                        BorderBrush="#888888"
                                        BorderThickness="1" />
                                <ScrollViewer Margin="4,6,4,6" SnapsToDevicePixels="True">
                                    <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Contained" />
                                </ScrollViewer>
                            </Grid>
                        </Popup>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="HasItems" Value="false">
                            <Setter TargetName="DropDownBorder" Property="MinHeight" Value="95" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="#888888" />
                        </Trigger>
                        <Trigger Property="IsGrouping" Value="true">
                            <Setter Property="ScrollViewer.CanContentScroll" Value="false" />
                        </Trigger>
                        <Trigger SourceName="Popup" Property="Popup.AllowsTransparency" Value="true">
                            <Setter TargetName="DropDownBorder" Property="CornerRadius" Value="0" />
                            <Setter TargetName="DropDownBorder" Property="Margin" Value="0,2,0,0" />
                        </Trigger>
                        <Trigger Property="IsEditable" Value="true">
                            <Setter Property="IsTabStop" Value="false" />
                            <Setter TargetName="PART_EditableTextBox" Property="Visibility" Value="Visible" />
                            <Setter TargetName="ContentSite" Property="Visibility" Value="Hidden" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  Style for the comboboxitems in NoBordersComboBoxStyle due that they need to have the same background color and font color  -->
    <Style x:Key="NoBordersComboItemStyle" TargetType="{x:Type ComboBoxItem}">
        <Setter Property="SnapsToDevicePixels" Value="true" />
        <Setter Property="Foreground" Value="White" />
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ComboBoxItem}">
                    <Border Name="Border"
                            Padding="2"
                            SnapsToDevicePixels="true">
                        <ContentPresenter />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsHighlighted" Value="true">
                            <Setter TargetName="Border" Property="Background" Value="#FF4F4F4F" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="#888888" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <!--  This radio button style was created for the Preferences window -> General Tab, the font color is white and background color is gray  -->
    <Style x:Key="RunSettingsRadioButtons" TargetType="{x:Type RadioButton}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RadioButton}">
                    <BulletDecorator Background="{StaticResource PreferencesWindowBackgroundColor}" Cursor="Hand">
                        <BulletDecorator.Bullet>
                            <Grid Width="18" Height="18">
                                <!--  The main white circle filled with White color (see the trigger IsChecked -> True  -->
                                <Ellipse x:Name="MainEllipse"
                                         Stroke="Black"
                                         StrokeThickness="1" />
                                <!--  The black circle inside the MainEllipse which indicates which radio button is checked  -->
                                <Ellipse x:Name="SelectedEllipse"
                                         Margin="5"
                                         Fill="Black"
                                         Visibility="Collapsed" />
                            </Grid>
                        </BulletDecorator.Bullet>
                        <!--  Text element next to each radio button  -->
                        <TextBlock Margin="3,1,0,0"
                                   FontFamily="Calibri"
                                   FontSize="12"
                                   FontWeight="Regular"
                                   Foreground="{StaticResource PreferencesWindowFontColor}">
                            <ContentPresenter />
                        </TextBlock>
                    </BulletDecorator>
                    <!--  If item is checked, trigger the visibility of the mark  -->
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="true">
                            <!--  If item is checked, trigger the visibility to Visible of the SelectedEllipse and change the color of the MainEllipse into White for better highlighting  -->
                            <Setter TargetName="SelectedEllipse" Property="Visibility" Value="Visible" />
                            <Setter TargetName="MainEllipse" Property="Fill" Value="{StaticResource PreferencesWindowFontColor}" />
                        </Trigger>
                        <Trigger Property="IsChecked" Value="false">
                            <!--  If item is checked, trigger the visibility to Collapse of the SelectedEllipse and change the color of the  MainEllipse into White for better highlighting  -->
                            <Setter TargetName="SelectedEllipse" Property="Visibility" Value="Collapsed" />
                            <Setter TargetName="MainEllipse" Property="Fill" Value="{StaticResource PreferencesWindowBackgroundColor}" />
                            <Setter TargetName="MainEllipse" Property="Stroke" Value="{StaticResource PreferencesWindowFontColor}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <SolidColorBrush x:Key="PreferencesWindowVisualSettingsBackground" Color="#535353" />

    <SolidColorBrush x:Key="PreferencesWindowVisualSettingsAddStyleBackground" Color="#666666" />

    <!--  This Style will be used in the radio buttons located in the Preferences -> Visual Settings ->  Geometry Scaling section  -->
    <Style x:Key="GeometryScaleRadioButtons" TargetType="{x:Type RadioButton}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RadioButton}">
                    <BulletDecorator Background="{StaticResource PreferencesWindowBackgroundColor}" Cursor="Hand">
                        <BulletDecorator.Bullet>
                            <Grid Width="18" Height="18">
                                <!--  The main white circle filled with White color (see the trigger IsChecked -> True  -->
                                <Ellipse x:Name="MainEllipse"
                                         Stroke="Black"
                                         StrokeThickness="1" />
                                <!--  The black circle inside the MainEllipse which indicates which radio button is checked  -->
                                <Ellipse x:Name="SelectedEllipse"
                                         Margin="5"
                                         Fill="Black"
                                         Visibility="Collapsed" />
                            </Grid>
                        </BulletDecorator.Bullet>
                        <!--  Text element next to each radio button  -->
                        <TextBlock x:Name="RadioTextBlock"
                                   Margin="3,1,0,0"
                                   FontSize="12"
                                   FontWeight="Regular"
                                   Foreground="{StaticResource PreferencesWindowFontColor}">
                            <ContentPresenter />
                        </TextBlock>
                    </BulletDecorator>
                    <!--  If item is checked, trigger the visibility of the mark  -->
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="true">
                            <!--  If item is checked, trigger the visibility to Visible of the SelectedEllipse and change the color of the MainEllipse into White for better highlighting  -->
                            <Setter TargetName="SelectedEllipse" Property="Visibility" Value="Visible" />
                            <Setter TargetName="MainEllipse" Property="Fill" Value="{StaticResource PreferencesWindowFontColor}" />
                            <Setter TargetName="RadioTextBlock" Property="FontWeight" Value="Bold" />
                        </Trigger>
                        <Trigger Property="IsChecked" Value="false">
                            <!--  If item is checked, trigger the visibility to Collapse of the SelectedEllipse and change the color of the  MainEllipse into White for better highlighting  -->
                            <Setter TargetName="SelectedEllipse" Property="Visibility" Value="Collapsed" />
                            <Setter TargetName="MainEllipse" Property="Fill" Value="{StaticResource PreferencesWindowBackgroundColor}" />
                            <Setter TargetName="MainEllipse" Property="Stroke" Value="{StaticResource PreferencesWindowFontColor}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  This Style will be used for some TextBlocks located in "Preferences -> Visual Settings ->  Geometry Scaling section" that have a very specific behavior of showing a descrition below  -->
    <Style x:Key="GeometryScaleDescTextBox" TargetType="{x:Type TextBlock}">
        <Setter Property="Background" Value="#474747" />
        <Setter Property="Foreground" Value="White" />
        <Setter Property="TextWrapping" Value="Wrap" />
        <Setter Property="FontSize" Value="11" />
        <Setter Property="FontWeight" Value="Regular" />
    </Style>

    <!--
        This Style will be used for a TextBox located in "Preferences -> Visual Settings -> Group Styles when adding a new Style
        The specific behaviour for the TextBox is that doesn't have borders and has some text that is deleted when the user starts typing
    -->
    <Style x:Key="TextBoxWaterMarkStyle" TargetType="{x:Type TextBox}">
        <Setter Property="Background" Value="#666666" />
        <Setter Property="Foreground" Value="White" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBox}">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition />
                            <ColumnDefinition Width="20" />
                        </Grid.ColumnDefinitions>
                        <Border Grid.Row="0"
                                Grid.ColumnSpan="2"
                                Background="#666666"
                                BorderBrush="{StaticResource PreferencesWindowButtonColor}"
                                BorderThickness="0,0,0,2" />
                        <ScrollViewer x:Name="PART_ContentHost"
                                      Margin="5,0,0,0"
                                      VerticalAlignment="Center" />

                        <!--  This Label will show the WaterMark text that will be deleted once the user starts typing  -->
                        <Label x:Name="WaterMarkLabel"
                               Grid.Row="0"
                               Margin="5,0,0,0"
                               VerticalAlignment="Center"
                               Content="{TemplateBinding Tag}"
                               Foreground="LightGray"
                               Visibility="Collapsed" />

                        <!--  This is the Canvas for the exclamation mark appearing when the Style that the user is trying to insert already exists  -->
                        <Canvas Grid.Column="1"
                                Visibility="{Binding Path=IsWarningEnabled, Converter={StaticResource BooleanToVisibilityConverter}}">
                            <Canvas.ToolTip>
                                <ToolTip Content="{Binding CurrentWarningMessage}" Style="{StaticResource GenericToolTipLight}"/>
                            </Canvas.ToolTip>
                            <Path Fill="#FAA21B">
                                <Path.Data>
                                    <CombinedGeometry GeometryCombineMode="Exclude">
                                        <CombinedGeometry.Geometry1>
                                            <PathGeometry>
                                                <PathGeometry.Figures>
                                                    <PathFigureCollection>
                                                        <PathFigure IsClosed="True" StartPoint="10,5">
                                                            <PathFigure.Segments>
                                                                <PathSegmentCollection>
                                                                    <LineSegment Point="18,20" />
                                                                    <LineSegment Point="2,20" />
                                                                </PathSegmentCollection>
                                                            </PathFigure.Segments>
                                                        </PathFigure>
                                                    </PathFigureCollection>
                                                </PathGeometry.Figures>
                                            </PathGeometry>
                                        </CombinedGeometry.Geometry1>
                                        <CombinedGeometry.Geometry2>
                                            <GeometryGroup FillRule="EvenOdd">
                                                <EllipseGeometry Center="10,18" RadiusX="1.5" RadiusY="1.5"/>
                                                <RectangleGeometry Rect="8.5,8.5,3,7.5"/>
                                            </GeometryGroup>
                                        </CombinedGeometry.Geometry2>
                                    </CombinedGeometry>
                                </Path.Data>
                            </Path>
                        </Canvas>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <MultiTrigger>
                            <!--  When the user delete the text (Text property is empty) typed when we show again the WaterMark text  -->
                            <MultiTrigger.Conditions>
                                <Condition Property="Text" Value="" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="WaterMarkLabel" Property="Visibility" Value="Visible" />
                        </MultiTrigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Foreground" Value="DimGray" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <SolidColorBrush x:Key="Button.Outline.MouseOver.Border"
                     Opacity="0.15"
                     Color="#FFFFFF" />
    <SolidColorBrush x:Key="Button.Outline.Pressed.Border"
                     Opacity="0.35"
                     Color="#38ABDF" />
    <SolidColorBrush x:Key="Button.Outline.Default.Border"
                     Color="Transparent" />
    <!--  This Style will be used for the Buttons that have a border and transparent background like Save and Cancel in the Preferences->Visual Settings tab  -->
    <Style x:Key="OutlinedButtonStyle" TargetType="Button">
        <Setter Property="Foreground" Value="{StaticResource PreferencesWindowFontColor}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border x:Name="ButtonBorder"
                            BorderThickness="2"
                            Background="Transparent"
                            BorderBrush="{StaticResource Button.Outline.Default.Border}"
                            CornerRadius="2">
                        <Grid Background="Transparent">
                            <Rectangle Stroke="#FFFFFF" 
                                       RadiusX="2" 
                                       RadiusY="2" 
                                       Opacity="0.5" 
                                       StrokeThickness="1"/>
                            <TextBlock HorizontalAlignment="Center" 
                                       VerticalAlignment="Center" 
                                       Padding="10,0,10,0">
                                <ContentPresenter />
                            </TextBlock>
                        </Grid>
                    </Border>
                    <!--  According to the Hig Autodesk standards for Outlined buttons some colors/properties will be changed according to the event generated  -->
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="ButtonBorder" Property="BorderBrush" Value="{StaticResource Button.Outline.MouseOver.Border}" />
                            <Setter TargetName="ButtonBorder" Property="BorderThickness" Value="2" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="ButtonBorder" Property="BorderBrush" Value="{StaticResource Button.Outline.Pressed.Border}" />
                            <Setter TargetName="ButtonBorder" Property="BorderThickness" Value="2" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="true">
                <Setter Property="Cursor" Value="Hand" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Foreground" Value="#BBBBBB" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <!--This Style will be used in the FileTrustWarning.xaml file (there is one already using inverted colors) specifically for the Buttons "Settings" and "No, close file"-->
    <Style x:Key="OutlinedButtonStyleInverted" TargetType="Button">
        <Setter Property="Foreground" Value="Black" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border x:Name="ButtonBorder"
                            BorderThickness="2"
                            Background="Transparent"
                            BorderBrush="{StaticResource Button.Outline.Default.Border}"
                            CornerRadius="2">
                        <Grid Background="Transparent">
                            <Rectangle Stroke="Black" 
                                       RadiusX="2" 
                                       RadiusY="2" 
                                       Opacity="0.5" 
                                       StrokeThickness="1"/>
                            <TextBlock HorizontalAlignment="Center" 
                                       VerticalAlignment="Center" 
                                       FontSize="14"
                                       FontFamily="{StaticResource ArtifaktElementRegular}"
                                       Padding="10,0,10,0">
                                <ContentPresenter />
                            </TextBlock>
                        </Grid>
                    </Border>
                    <!--  According to the Hig Autodesk standards for Outlined buttons some colors/properties will be changed according to the event generated  -->
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="ButtonBorder" Property="BorderBrush" Value="{StaticResource Button.Outline.MouseOver.Border}" />
                            <Setter TargetName="ButtonBorder" Property="BorderThickness" Value="2" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="ButtonBorder" Property="BorderBrush" Value="{StaticResource Button.Outline.Pressed.Border}" />
                            <Setter TargetName="ButtonBorder" Property="BorderThickness" Value="2" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="true">
                <Setter Property="Cursor" Value="Hand" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Foreground" Value="{StaticResource DynamoStandardLabelTextBrush}" />
            </Trigger>
        </Style.Triggers>
    </Style>


    <!--  This Style will be used for Note Text block (used when Note is on edit mode)  -->
    <Style x:Key="NoteTextBoxStyle" TargetType="TextBox">
        <Setter Property="FontFamily" Value="Trebuchet" />
        <Setter Property="FontSize" Value="12" />
        <Setter Property="Foreground" Value="#222" />
        <Setter Property="Background" Value="#EEE" />
        <Setter Property="Padding" Value="10" />
        <Setter Property="TextWrapping" Value="Wrap" />
    </Style>

    <!--  This Style will be used for Note Text block (used when Note is not on edit mode)  -->
    <Style x:Key="NoteTextBlockStyle" TargetType="TextBlock">
        <Setter Property="FontFamily" Value="Trebuchet" />
        <Setter Property="FontSize" Value="12" />
        <Setter Property="Foreground" Value="#222" />
        <Setter Property="Padding" Value="10" />
        <Setter Property="TextWrapping" Value="Wrap" />
    </Style>

    <!--  This style will be used for setting the style of the Note's user control  -->
    <Style x:Key="NoteUserControlStyle" TargetType="UserControl">
        <Setter Property="BorderBrush" Value="#549ee7" />
        <Setter Property="Effect">
            <Setter.Value>
                <DropShadowEffect BlurRadius="9.0"
                                  Opacity="0.25"
                                  ShadowDepth="0"
                                  Color="#222" />
            </Setter.Value>
        </Setter>
    </Style>

    <!--  This Style will be used for the small trash icon button that appears when a new Style is created in the Visual Settings tab  -->
    <Style x:Key="FlatIconButtonStyle" TargetType="{x:Type Button}">
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Opacity" Value=".5" />
            </Trigger>
        </Style.Triggers>
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="removeStyleBorder" Background="{TemplateBinding Background}">
                        <Grid>
                            <Rectangle x:Name="backgroundRectangle" Fill="{TemplateBinding Background}" />
                            <Rectangle x:Name="borderRectangle"
                                       Fill="Transparent"
                                       Stroke="Transparent"
                                       StrokeThickness="2" />
                            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
                        </Grid>
                    </Border>
                    <!--  According to the Hig Autodesk standards for icon buttons some colors/properties will be changed according to the event generated  -->
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="backgroundRectangle" Property="Fill" Value="{StaticResource PreferencesWindowButtonColor}" />
                            <Setter TargetName="backgroundRectangle" Property="Opacity" Value="0.2" />
                            <Setter TargetName="borderRectangle" Property="Stroke" Value="{StaticResource PreferencesWindowButtonColor}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="backgroundRectangle" Property="Fill" Value="{StaticResource PreferencesWindowButtonColor}" />
                            <Setter TargetName="backgroundRectangle" Property="Opacity" Value="0.8" />
                            <Setter TargetName="borderRectangle" Property="Stroke" Value="{StaticResource PreferencesWindowButtonColor}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  This Style will be used for the ColorPicker button that is shown when adding a new Style in the Preferences -> Visual Settings tab  -->
    <Style x:Key="ButtonColorPickerStyle" TargetType="{x:Type Button}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="removeStyleBorder" Background="{TemplateBinding Background}">
                        <Grid>
                            <Rectangle x:Name="borderRectangle"
                                       Fill="Transparent"
                                       Stroke="Transparent"
                                       StrokeThickness="2" />
                            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
                        </Grid>
                    </Border>
                    <!--  According to the Hig Autodesk standards for icon buttons some colors/properties will be changed according to the event generated  -->
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="borderRectangle" Property="Stroke" Value="{StaticResource PreferencesWindowButtonColor}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="borderRectangle" Property="Fill" Value="{StaticResource PreferencesWindowButtonColor}" />
                            <Setter TargetName="borderRectangle" Property="Stroke" Value="{StaticResource PreferencesWindowButtonColor}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <SolidColorBrush x:Key="PopupWhiteColor" Color="#FFFFFF" />

    <Color x:Key="PopupTitleBorderColor"
           A="255"
           B="128"
           G="128"
           R="128" />

    <SolidColorBrush x:Key="PopupRatingControlBackColor" Color="#F5F5F5" />

    <SolidColorBrush x:Key="CheckMarkBackColor" Color="#87B340" />
    
    <!--  Style for the buttons in a Tooltip part of the Dynamo Guided Tours  -->
    <Style x:Key="CaretButtonStyle" TargetType="{x:Type Button}">
        <Setter Property="Width" Value="5" />
        <Setter Property="Height" Value="10" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="CaretButtonBorder"
                            Background="{StaticResource PopupWhiteColor}"
                            BorderBrush="Transparent"
                            BorderThickness="0">
                        <Canvas Width="5" Height="10">
                            <Line x:Name="caret_upper"
                                  Stroke="Black"
                                  X1="5"
                                  X2="0"
                                  Y1="0"
                                  Y2="5" />
                            <Line x:Name="caret_bottom"
                                  Stroke="Black"
                                  X1="0"
                                  X2="5"
                                  Y1="5"
                                  Y2="10" />
                        </Canvas>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="Tag" Value="Invert">
                            <Setter TargetName="caret_upper" Property="RenderTransform">
                                <Setter.Value>
                                    <RotateTransform Angle="180" CenterX="2" CenterY="5" />
                                </Setter.Value>
                            </Setter>
                            <Setter TargetName="caret_bottom" Property="RenderTransform">
                                <Setter.Value>
                                    <RotateTransform Angle="180" CenterX="2" CenterY="5" />
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="caret_upper" Property="Stroke" Value="{StaticResource PreferencesWindowButtonColor}" />
                            <Setter TargetName="caret_bottom" Property="Stroke" Value="{StaticResource PreferencesWindowButtonColor}" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="caret_upper" Property="Stroke" Value="{StaticResource PreferencesWindowButtonColor}" />
                            <Setter TargetName="caret_bottom" Property="Stroke" Value="{StaticResource PreferencesWindowButtonColor}" />
                            <Setter Property="Cursor" Value="Hand" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="caret_upper" Property="Stroke" Value="Gray" />
                            <Setter TargetName="caret_bottom" Property="Stroke" Value="Gray" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  Style for the close popup button in a Tooltip part of the Dynamo Guided Tours  -->
    <Style x:Key="PopupCloseButtonStyle" TargetType="{x:Type Button}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="CloseButtonBorder"
                            Background="Transparent"
                            BorderBrush="Transparent"
                            BorderThickness="0">
                        <Canvas Margin="0,0,0,0">
                            <Line x:Name="line1"
                                  Stroke="#808080"
                                  StrokeThickness="1"
                                  X1="0"
                                  X2="13"
                                  Y1="0"
                                  Y2="13" />
                            <Line x:Name="line2"
                                  Stroke="#808080"
                                  StrokeThickness="1"
                                  X1="0"
                                  X2="13"
                                  Y1="13"
                                  Y2="0" />
                        </Canvas>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="line1" Property="Stroke" Value="Red" />
                            <Setter TargetName="line2" Property="Stroke" Value="Red" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="line1" Property="Stroke" Value="{StaticResource PreferencesWindowButtonColor}" />
                            <Setter TargetName="line2" Property="Stroke" Value="{StaticResource PreferencesWindowButtonColor}" />
                            <Setter Property="Cursor" Value="Hand" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <SolidColorBrush x:Key="Button.MouseOver.Border"
                     Opacity="0.15"
                     Color="#808080" />
    <SolidColorBrush x:Key="Button.Pressed.Border"
                     Opacity="0.25"
                     Color="#808080" />
    <Style x:Key="PoupButtonStyle" TargetType="{x:Type Button}">
        <Setter Property="MinWidth" Value="80" />
        <Setter Property="MaxHeight" Value="36" />
        <Setter Property="BorderThickness" Value="36" />
        <Setter Property="Foreground" Value="{StaticResource PopupWhiteColor}" />
        <Setter Property="Background" Value="{StaticResource PreferencesWindowButtonColor}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="PopupButtonBorder"
                            Background="{StaticResource PreferencesWindowButtonColor}"
                            BorderThickness="1"
                            CornerRadius="4">
                        <ContentPresenter HorizontalAlignment="Center"
                                          VerticalAlignment="Center"
                                          Content="{TemplateBinding Content}" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="PopupButtonBorder" Property="BorderBrush" Value="{StaticResource Button.MouseOver.Border}" />
                            <Setter TargetName="PopupButtonBorder" Property="BorderThickness" Value="2" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="PopupButtonBorder" Property="BorderBrush" Value="{StaticResource Button.Pressed.Border}" />
                            <Setter TargetName="PopupButtonBorder" Property="BorderThickness" Value="4" />
                            <Setter TargetName="PopupButtonBorder" Property="Background" Value="{StaticResource PreferencesWindowButtonColor}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <!--  Style for the exit button in the exit modal of Dynamo Guided Tours  -->
    <Style x:Key="PoupExitButtonStyle" TargetType="{x:Type Button}">
        <Setter Property="MaxHeight" Value="36" />
        <Setter Property="FontSize" Value="14" />
        <Setter Property="BorderThickness" Value="36" />
        <Setter Property="Foreground" Value="Black" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="PopupButtonBorder"
                            Background="{StaticResource PopupWhiteColor}"
                            BorderBrush="#808080"
                            Opacity="0.5"
                            BorderThickness="1"
                            CornerRadius="2">
                        <ContentPresenter HorizontalAlignment="Center"
                                          VerticalAlignment="Center"
                                          Content="{TemplateBinding Content}" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="PopupContentStyle" TargetType="{x:Type ContentControl}">
        <Setter Property="ContentTemplate">
            <Setter.Value>
                <DataTemplate>
                    <Border BorderBrush="White" BorderThickness="2" 
                            Background="White"
                         CornerRadius="5,5,5,5" >

                    </Border>
                </DataTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="PoupTitleLabelStyle" TargetType="{x:Type Label}">
        <Setter Property="FontFamily" Value="Artifakt Element" />
        <Setter Property="FontSize" Value="20" />
        <Setter Property="Height" Value="34" />
        <Setter Property="Foreground" Value="#535353" />
    </Style>

    <Style x:Key="PoupPathRectangleStyle" TargetType="{x:Type Path}">
        <Setter Property="Fill" Value="{StaticResource PopupWhiteColor}" />
    </Style>

    <Style x:Key="PoupPathPointerStyle" TargetType="{x:Type Path}">
        <Setter Property="Fill" Value="{StaticResource PopupWhiteColor}" />
    </Style>

    <Style x:Key="CustomRichTextBoxStyle" TargetType="{x:Type RichTextBox}">
        <Setter Property="FontSize" Value="14" />
        <Setter Property="FontFamily" Value="Artifakt Element" />
        <Setter Property="IsReadOnly" Value="True" />
        <Setter Property="Background" Value="{StaticResource PopupWhiteColor}" />
        <Setter Property="BorderThickness" Value="0" />
    </Style>

    <Style x:Key="SurveyTitleLabelStyle" TargetType="{x:Type Label}">
        <Setter Property="FontFamily" Value="Artifakt Element" />
        <Setter Property="FontSize" Value="20" />
        <Setter Property="Height" Value="34" />
        <Setter Property="Foreground" Value="#3C3C3C" />
    </Style>

    <Style x:Key="RatingTitleLabelStyle" TargetType="{x:Type Label}">
        <Setter Property="FontFamily" Value="Artifakt Element" />
        <Setter Property="FontSize" Value="12" />
        <Setter Property="Foreground" Value="#3C3C3C" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
    </Style>

    <!--  Style for the Exit Tour popup, that will appear when a tooltip is closed before the tour completion  -->
    <Style x:Key="RealTimeInfoCloseButtonStyle" TargetType="{x:Type Button}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="CloseButtonBorder"
                            Background="Transparent"
                            BorderBrush="Transparent"
                            BorderThickness="0">
                        <Canvas Margin="0,0,0,0">
                            <Line x:Name="line1"
                                  Stroke="#D9D9D9"
                                  StrokeThickness="1"
                                  X1="0"
                                  X2="13"
                                  Y1="0"
                                  Y2="13" />
                            <Line x:Name="line2"
                                  Stroke="#D9D9D9"
                                  StrokeThickness="1"
                                  X1="0"
                                  X2="13"
                                  Y1="13"
                                  Y2="0" />
                        </Canvas>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="line1" Property="Stroke" Value="{StaticResource PreferencesWindowButtonColor}" />
                            <Setter TargetName="line2" Property="Stroke" Value="{StaticResource PreferencesWindowButtonColor}" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="line1" Property="Stroke" Value="{StaticResource PreferencesWindowButtonColor}" />
                            <Setter TargetName="line2" Property="Stroke" Value="{StaticResource PreferencesWindowButtonColor}" />
                            <Setter Property="Cursor" Value="Hand" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <SolidColorBrush x:Key="RealTimeInfoWindowIconColor" Color="#38ABDF" />
    <SolidColorBrush x:Key="RealTimeInfoWindowBackgroundColor" Color="#535353" />
    <Style x:Key="PopupStepCounterFontStyle"
           TargetType="Label">
        <Setter Property="FontSize" Value="14" />
        <Setter Property="FontFamily" Value="Artifakt Element" />
    </Style>
    <!--  Style for the Core Node Element Button Selection  -->
    <Style x:Key="SelectionButtonStyle" TargetType="Button">
                <Setter Property="VerticalAlignment" Value="Center" />
                <Setter Property="Height" Value="32" />
                <Setter Property="Padding" Value="0,0,0,0" />
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="Button">
                            <Grid>
                                <Border x:Name="mouseOverBorder"                                
                                    Margin="2"
                                    BorderThickness="2"
                                    CornerRadius="1"
                                    Visibility="Hidden">
                                    <Border.BorderBrush>
                                        <SolidColorBrush Color="{StaticResource BorderBasicColor}" Opacity="0.15"/>
                                    </Border.BorderBrush>
                                </Border >
                                <Border x:Name="mousePressedBorder"                                
                                    Margin="2"
                                    BorderThickness="2"
                                    CornerRadius="1"
                                    Visibility="Hidden">
                                    <Border.BorderBrush>
                                        <SolidColorBrush Color="{StaticResource BorderPressedColor}" Opacity="0.35"/>
                                    </Border.BorderBrush>
                                </Border >
                                <Border x:Name="border"
                                    Margin="4"
                                    Padding="8,0,8,0"
                                    BorderThickness="1"                                                                                                                             
                                    Background="{TemplateBinding Background}"
                                CornerRadius="1">
                                    <Border.BorderBrush>
                                        <SolidColorBrush Color="{StaticResource BorderBasicColor}" Opacity="0.5"/>
                                    </Border.BorderBrush>

                                    <TextBlock x:Name="textBlock"
                                       HorizontalAlignment="Center"
                                        Padding="0,0,0,0"
                                       VerticalAlignment="Center"
                                       FontFamily="{StaticResource ArtifaktElementRegular}"
                                       Foreground="white"
                                       Text="{TemplateBinding Content}"                                       
                                       Opacity="1"/>
                                </Border>
                            </Grid>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsMouseOver" Value="True">
                                    <Setter TargetName="mouseOverBorder" Property="Visibility" Value="Visible" />
                                </Trigger>
                                <Trigger Property="IsPressed" Value="True">
                                    <Setter TargetName="mousePressedBorder" Property="Visibility" Value="Visible" />
                                </Trigger>
                                <Trigger Property="IsEnabled" Value="False">
                                    <Setter TargetName="border" Property="Background" Value="{StaticResource SecondaryGray}" />
                                    <Setter TargetName="border" Property="BorderBrush" Value="{StaticResource SecondaryGray}" />
                                    <Setter TargetName="textBlock" Property="Opacity" Value="0.7" />
                                    <Setter Property="Cursor" Value="No" />
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
    <!--This Style that will be used only for the GroupStyle MenuItem entry in the ContextMenu -->
    <Style x:Key="MenuItemGroupStyle" TargetType="{x:Type MenuItem}" BasedOn="{StaticResource ContextMenuItemStyle}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type MenuItem}">
                    <DockPanel x:Name="dockPanel"
                               HorizontalAlignment="Stretch"
                               Background="Transparent"
                               SnapsToDevicePixels="true">
                        <Label x:Name="checkBox"
                               Margin="0,0,-20,0"
                               HorizontalAlignment="Left"
                               VerticalAlignment="Center"
                               HorizontalContentAlignment="Center"
                               VerticalContentAlignment="Center"
                               Content="✓"
                               DockPanel.Dock="Left"
                               FontSize="9px"
                               Foreground="White"
                               Visibility="Collapsed" />
                        <ContentPresenter x:Name="ContentPresenter"
                                          Margin="{TemplateBinding Padding}"
                                          VerticalAlignment="Center"
                                          ContentSource="Header"
                                          DockPanel.Dock="Left"
                                          RecognizesAccessKey="True"
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                          TextBlock.Foreground="{StaticResource NodeContextMenuForeground}" />
                        <Label x:Name="subMenuArrow"
                               Margin="0,0,15,7"
                               Padding="0"
                               VerticalAlignment="Center"
                               Content="&gt;"
                               DockPanel.Dock="Right"
                               FontFamily="{StaticResource ArtifaktElementRegular}"
                               FontSize="13px"
                               Foreground="{StaticResource Blue300Brush}">
                            <Label.RenderTransform>
                                <ScaleTransform ScaleX="1" ScaleY="1.5" />
                            </Label.RenderTransform>
                            <Label.Style>
                                <Style TargetType="{x:Type Label}">
                                    <Setter Property="Visibility" Value="Hidden" />
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType={x:Type MenuItem}}, Path=HasItems}" Value="True">
                                            <Setter Property="Visibility" Value="Visible" />
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </Label.Style>
                        </Label>
                        <Popup x:Name="PART_Popup"
                               AllowsTransparency="true"
                               Focusable="false"
                               MaxHeight="350"
                               HorizontalOffset="0"
                               IsOpen="{Binding IsSubmenuOpen, RelativeSource={RelativeSource TemplatedParent}}"
                               Placement="Right"
                               VerticalOffset="-2">
                            <Border Background="{TemplateBinding Background}"
                                    BorderBrush="Transparent"
                                    BorderThickness="0">
                                <ScrollViewer x:Name="SubMenuScrollViewer"
                                              CanContentScroll="true"
                                              Style="{DynamicResource {ComponentResourceKey ResourceId=MenuScrollViewer,
                                                                                            TypeInTargetAssembly={x:Type FrameworkElement}}}">
                                    <Grid RenderOptions.ClearTypeHint="Enabled">
                                        <ItemsPresenter x:Name="ItemsPresenter"
                                                        Grid.IsSharedSizeScope="true"
                                                        KeyboardNavigation.DirectionalNavigation="Cycle"
                                                        KeyboardNavigation.TabNavigation="Cycle"
                                                        SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                                    </Grid>
                                </ScrollViewer>
                            </Border>
                        </Popup>
                    </DockPanel>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="ContentPresenter" Property="TextBlock.Opacity" Value="0.5" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="ContentPresenter" Property="TextBlock.Foreground" Value="White" />
                            <Setter TargetName="dockPanel" Property="Background" Value="{StaticResource NodeContextMenuBackgroundHighlight}" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="False">
                            <Setter TargetName="dockPanel" Property="Background" Value="{StaticResource NodeContextMenuBackground}" />
                        </Trigger>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter TargetName="checkBox" Property="Visibility" Value="Visible" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <SolidColorBrush x:Key="BorderBrushMouseOver" Color="#FFFFFF" Opacity="0.15"/>

    <Style x:Key="ListBoxItemStyle" TargetType="ListBoxItem">
        <Setter Property="Focusable" Value="{Binding Path=IsDefault, Converter={StaticResource InverseBooleanConverter}}"/>
        <Setter Property="Padding" Value="0"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ListBoxItem">
                    <Grid Margin="0,0,10,5"
                                  MinWidth="186"
                                  MinHeight="67">
                        <Border x:Name="mouseOverBorder"
                                        Margin="2"
                                        BorderThickness="2"
                                        BorderBrush="{StaticResource BorderBrushMouseOver}"
                                        Visibility="Hidden"
                                        CornerRadius="2"/>
                        <Border x:Name="mousePressedBorder"
                                        Margin="0"
                                        BorderThickness="4"
                                        Visibility="Hidden"
                                        BorderBrush="{TemplateBinding BorderBrush}"
                                        Background="Transparent"
                                        CornerRadius="4"/>
                        <Border Name="selectedItemBorder"
                                        Margin="4"
                                        Background="Transparent"
                                        SnapsToDevicePixels="true">
                        </Border>
                        <ContentPresenter/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsSelected" 
                                         Value="True">
                            <Setter Property="BorderBrush" 
                                            TargetName="selectedItemBorder" 
                                            Value="{StaticResource PreferencesWindowButtonColor}"/>
                            <Setter Property="BorderThickness"
                                            TargetName="selectedItemBorder"
                                            Value="2"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" 
                                                   Value="True"/>
                                <Condition Property="Focusable"
                                                   Value="True"/>
                            </MultiTrigger.Conditions>
                            <MultiTrigger.Setters>
                                <Setter TargetName="selectedItemBorder" 
                                                Property="Opacity" 
                                                Value="0.9" />
                                <Setter TargetName="mouseOverBorder" 
                                                Property="Visibility" 
                                                Value="Visible" />
                            </MultiTrigger.Setters>
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <!--This Style is using in the FileTrustWarning.xaml file for the only checkbox in the Popup-->
    <Style x:Key="CheckBoxFileTrustStyle" TargetType="{x:Type CheckBox}">
    <Setter Property="SnapsToDevicePixels" Value="true" />
    <Setter Property="OverridesDefaultStyle" Value="true" />
    <Setter Property="Template">
        <Setter.Value>
            <ControlTemplate TargetType="CheckBox">
                <BulletDecorator VerticalAlignment="Center" 
                                 Background="Transparent">
                    <BulletDecorator.Bullet>
                        <Border x:Name="Border"
                                    Width="13"
                                    Height="13"
                                    Background="#373737"
                                    BorderBrush="{StaticResource MidGreyBrush}"
                                    BorderThickness="1">
                            <Image x:Name="CheckBoxTick"
                                       Width="7"
                                       Height="7"
                                       HorizontalAlignment="Center"
                                       VerticalAlignment="Center"
                                       Source="pack://application:,,,/DynamoCoreWpf;component/UI/Images/tick_selected.png"
                                       Visibility="Hidden" />
                        </Border>
                    </BulletDecorator.Bullet>

                    <ContentPresenter x:Name="contentPresent"
                                          Margin="5,0,5,0"
                                          Content="{TemplateBinding Content}"
                                          ContentTemplate="{TemplateBinding ContentTemplate}"
                                          TextBlock.FontSize="14px"
                                          TextBlock.Foreground="Black" />
                </BulletDecorator>
                <ControlTemplate.Triggers>
                    <Trigger Property="IsChecked" Value="true">
                            <Setter TargetName="CheckBoxTick" Property="Visibility" Value="Visible" />
                        </Trigger>
                    <Trigger Property="IsChecked" Value="false">
                        <Setter TargetName="Border" Property="Background" Value="White" />
                    </Trigger>
                    <Trigger Property="IsEnabled" Value="True">
                    <Setter TargetName="contentPresent" Property="TextBlock.Foreground" Value="Black" />
                    </Trigger>
                    <Trigger Property="IsEnabled" Value="False">
                        <Setter TargetName="contentPresent" Property="TextBlock.Foreground" Value="{StaticResource NormalBorderBrush}" />
                    </Trigger>
                </ControlTemplate.Triggers>
            </ControlTemplate>
        </Setter.Value>
    </Setter>
    </Style>

    <!-- UI No Style Window Border Style -->
    <Style x:Key="NoStyleWindowBorderStyle" TargetType="{x:Type Border}">
        <Setter Property="Background" Value="White"/>
        <Setter Property="CornerRadius" Value="6"/>
        <Setter Property="BorderThickness" Value="4"/>
        <Setter Property="Effect">
            <Setter.Value>
                <DropShadowEffect Color="#000" ShadowDepth="0" Opacity="0.25" BlurRadius="10.0" />
            </Setter.Value>
        </Setter>
    </Style>

    <!-- A rectangle used as a divider line -->
    <Style x:Key="DividerRectangleStyle" TargetType="{x:Type Rectangle}">
        <Setter Property="Height" Value="1px"/>
        <Setter Property="Margin" Value="0 20 0 15"/>
        <Setter Property="VerticalAlignment" Value="Bottom"/>
        <Setter Property="Fill" Value="#B7B7B7"/>
        <Setter Property="UseLayoutRounding" Value="True"/>
    </Style>

    <!-- The default style for a TextBox in the Dark Theme -->
    <Style x:Key="InputBoxDarkThemeStyle" TargetType="{x:Type TextBox}">
        <Setter Property="FontFamily" Value="{StaticResource ArtifaktElementRegular}" />
        <Setter Property="Foreground" Value="{StaticResource DarkThemeBodyMediumBrush}"/>
        <Setter Property="Background" Value="#353535"/>
        <Setter Property="UseLayoutRounding" Value="True"/>
        <Setter Property="FontSize" Value="12px"/>
        <Setter Property="Padding" Value="10"/>
        <Setter Property="MinLines" Value="2"/>
        <Setter Property="VerticalAlignment" Value="Stretch"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="AcceptsReturn" Value="True"/>
        <Setter Property="AcceptsTab" Value="True"/>
        <Setter Property="TextWrapping" Value="Wrap"/>
        <Setter Property="HorizontalScrollBarVisibility" Value="Disabled"/>
        <Setter Property="VerticalScrollBarVisibility" Value="Auto"/>
    </Style>

    <!-- Colors -->
    <Color x:Key="MidGray">#999999</Color>
    <Color x:Key="LightGray">#CCCCCC</Color>
    <Color x:Key="Blue">#38abdf</Color>
    <Color x:Key="MidLightBlue">#366a81</Color>
    <Color x:Key="MidBlue">#365868</Color>
    <Color x:Key="MidDarkBlue">#375f71</Color>
    <Color x:Key="TextColor">#F5F5F5</Color>
    <Color x:Key="GrayOpacity">#5C5C5C5C</Color>

    <!--  Brushes  -->
    <SolidColorBrush x:Key="MidGrayBrush" Color="{StaticResource MidGray}" />
    <SolidColorBrush x:Key="LightGrayBrush" Color="{StaticResource LightGray}" />
    <SolidColorBrush x:Key="BlueBrush" Color="{StaticResource Blue}" />
    <SolidColorBrush x:Key="MidLightBlueBrush" Color="{StaticResource MidLightBlue}" />
    <SolidColorBrush x:Key="MidBlueBrush" Color="{StaticResource MidBlue}" />
    <SolidColorBrush x:Key="MidDarkBlueBrush" Color="{StaticResource MidDarkBlue}" />
    <SolidColorBrush x:Key="TextColorBrush" Color="{StaticResource TextColor}" />
    <SolidColorBrush x:Key="GrayOpacityBrush" Color="{StaticResource GrayOpacity}" />

    <!-- Controls behaviour for mouseover on TextBox -->
    <Style x:Key="BorderInputBoxDarkThemeStyle" TargetType="Border">
        <Setter Property="BorderThickness" Value="0 0 0 1"></Setter>
        <Setter Property="Background" Value="Transparent"></Setter>
        <Setter Property="BorderBrush" Value="{StaticResource MidGrayBrush}"></Setter>
        <Style.Triggers>
            <DataTrigger Binding="{Binding ElementName=editText, Path=IsMouseOver}" Value="True">
                <Setter Property="BorderBrush" Value="{StaticResource LightGrayBrush}"></Setter>
            </DataTrigger>
            <DataTrigger Binding="{Binding ElementName=editText, Path=IsFocused}" Value="True">
                <Setter Property="BorderBrush" Value="{StaticResource BlueBrush}"></Setter>
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <!-- Controls behaviour for mouseover on TextBox -->
    <Style x:Key="RectangleInputBoxDarkThemeStyle" TargetType="Rectangle">
        <Setter Property="Opacity" Value="0"/>
        <Setter Property="Fill" Value="{StaticResource MidDarkBlueBrush}"/>
        <Style.Triggers>
            <DataTrigger Binding="{Binding ElementName=editText, Path=IsFocused}" Value="True">
                <DataTrigger.EnterActions>
                    <BeginStoryboard>
                        <Storyboard SpeedRatio="2">
                            <DoubleAnimation Storyboard.TargetProperty="Opacity"
                                                     To="0.75" Duration="0:0:1" />
                        </Storyboard>
                    </BeginStoryboard>
                </DataTrigger.EnterActions>
                <DataTrigger.ExitActions>
                    <BeginStoryboard>
                        <Storyboard SpeedRatio="2">
                            <DoubleAnimation Storyboard.TargetProperty="Opacity"
                                                     To="0" Duration="0:0:1" />
                        </Storyboard>
                    </BeginStoryboard>
                </DataTrigger.ExitActions>
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <!-- TextBox Style for inputting text with a grey/blue bottom bar to highlight hover/focus behavior -->
    <Style x:Key="HintingInputStyle" TargetType="TextBox">
        <Setter Property="Margin" Value="0,0,0,12" />
        <Setter Property="MinWidth" Value="62px" />
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="Cursor" Value="IBeam" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="TextBox">
                    <Grid>
                        <TextBox x:Name="InputTextBox"
                                     Padding="8,10"
                                     Background="{StaticResource DarkThemeInputBoxBackgroundBrush}"
                                     BorderThickness="0"
                                     CaretBrush="{StaticResource Blue300Brush}"
                                     Focusable="True"
                                     FontFamily="{StaticResource ArtifaktElementRegular}"
                                     FontSize="12px"
                                     Foreground="{StaticResource PrimaryCharcoal200Brush}"
                                     MaxLength="{TemplateBinding MaxLength}"
                                     Tag="{TemplateBinding Tag}"
                                     Text="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Text, UpdateSourceTrigger=PropertyChanged}"
                                     TextWrapping="Wrap" />
                        <TextBlock x:Name="WatermarkLabel"
                                       Padding="10"
                                       FontFamily="{StaticResource ArtifaktElementRegular}"
                                       FontSize="12px"
                                       Foreground="{StaticResource PrimaryCharcoal200Brush}"
                                       IsHitTestVisible="False"
                                       Opacity="0.5"
                                       Text="{TemplateBinding Tag}">
                            <TextBlock.Style>
                                <Style TargetType="{x:Type TextBlock}">
                                    <Setter Property="Visibility" Value="Collapsed" />
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding Text, ElementName=InputTextBox}" Value="">
                                            <Setter Property="Visibility" Value="Visible" />
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </TextBlock.Style>
                        </TextBlock>
                        <StackPanel Height="4px" VerticalAlignment="Bottom">
                            <Rectangle Name="Underline"
                                       Height="1px"
                                       Fill="#9B9B9B"
                                       Opacity="0"/>
                            <Rectangle Name="UnderlineShadow"
                                       Height="3px"
                                       Fill="#6E6E6E"
                                       Opacity="0"/>
                        </StackPanel>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <DataTrigger Binding="{Binding IsMouseOver, ElementName=InputTextBox}" Value="True">
                            <DataTrigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard SpeedRatio="10">
                                        <DoubleAnimation Storyboard.TargetName="Underline" Storyboard.TargetProperty="Opacity"
                                                         To="0.75" Duration="0:0:1" />
                                        <DoubleAnimation Storyboard.TargetName="UnderlineShadow" Storyboard.TargetProperty="Opacity"
                                                                 To="0.75" Duration="0:0:1" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </DataTrigger.EnterActions>
                            <DataTrigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard SpeedRatio="2">
                                        <DoubleAnimation Storyboard.TargetName="Underline" Storyboard.TargetProperty="Opacity"
                                                                 To="0" Duration="0:0:1" />
                                        <DoubleAnimation Storyboard.TargetName="UnderlineShadow" Storyboard.TargetProperty="Opacity"
                                                                 To="0" Duration="0:0:1" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </DataTrigger.ExitActions>

                        </DataTrigger>
                        <DataTrigger Binding="{Binding IsFocused, ElementName=InputTextBox}" Value="True">
                            <Setter TargetName="Underline" Property="Rectangle.Fill" Value="{StaticResource Blue300Brush}" />
                            <Setter TargetName="UnderlineShadow" Property="Rectangle.Fill" Value="#497386" />
                            <DataTrigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard SpeedRatio="10" Name="FocusedStoryboard" >
                                        <DoubleAnimation Storyboard.TargetName="Underline" Storyboard.TargetProperty="Opacity"
                                                                 To="0.75" Duration="0:0:1" />
                                        <DoubleAnimation Storyboard.TargetName="UnderlineShadow" Storyboard.TargetProperty="Opacity"
                                                                 To="0.75" Duration="0:0:1" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </DataTrigger.EnterActions>
                            <DataTrigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard SpeedRatio="2" FillBehavior="Stop">
                                        <DoubleAnimation Storyboard.TargetName="Underline" Storyboard.TargetProperty="Opacity"
                                                                 To="0" Duration="0:0:1" />
                                        <DoubleAnimation Storyboard.TargetName="UnderlineShadow" Storyboard.TargetProperty="Opacity"
                                                                 To="0" Duration="0:0:1" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </DataTrigger.ExitActions>
                        </DataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="False">
                <Setter Property="BorderBrush" Value="{StaticResource DarkMidGreyBrush}" />
            </Trigger>
        </Style.Triggers>
    </Style>
    
    <!-- Expander used inside sliders and the custom dropdown. --> 
    <ControlTemplate x:Key="ExpanderTemplate" TargetType="Expander">
        <Border
            Background="{TemplateBinding Control.Background}"
            BorderBrush="{TemplateBinding Control.BorderBrush}"
            BorderThickness="{TemplateBinding Control.BorderThickness}"
            CornerRadius="3"
            SnapsToDevicePixels="True">
            <DockPanel>
                <ToggleButton IsChecked="{Binding Path=IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}">
                    <ToggleButton.Style>
                        <Style TargetType="ToggleButton">
                            <Setter Property="Control.Template">
                                <Setter.Value>
                                    <ControlTemplate TargetType="ToggleButton">
                                        <Border Padding="{TemplateBinding Control.Padding}">
                                            <Grid Margin="0,0,0,0" VerticalAlignment="Top">
                                                <Grid.ColumnDefinitions>
                                                    <ColumnDefinition Width="27" />
                                                    <ColumnDefinition Width="*" />
                                                </Grid.ColumnDefinitions>
                                                <Rectangle
                                                    Name="ButtonBackgroundRectangle"
                                                    Width="29"
                                                    Height="27"
                                                    HorizontalAlignment="Center"
                                                    VerticalAlignment="Center"
                                                    Fill="#3C3C3C" />
                                                <Border
                                                    Name="ButtonBorder"
                                                    Grid.Column="0"
                                                    Width="21"
                                                    Height="21"
                                                    HorizontalAlignment="Center"
                                                    VerticalAlignment="Center"
                                                    Background="Transparent"
                                                    BorderBrush="{StaticResource Blue300Brush}"
                                                    BorderThickness="1.5"
                                                    CornerRadius="1"
                                                    SnapsToDevicePixels="True" />
                                                <Polygon
                                                    Name="Triangle"
                                                    Grid.Column="0"
                                                    Fill="{StaticResource Blue300Brush}"
                                                    Points="11,12.5 13.5,15.5,16,12.5"
                                                    SnapsToDevicePixels="True"
                                                    Stroke="{StaticResource Blue300Brush}"
                                                    StrokeThickness="1" />
                                                <ContentPresenter
                                                    Grid.Column="1"
                                                    HorizontalAlignment="Left"
                                                    VerticalAlignment="Center"
                                                    Content="{TemplateBinding ContentControl.Content}"
                                                    ContentStringFormat="{TemplateBinding ContentControl.ContentStringFormat}"
                                                    ContentTemplate="{TemplateBinding ContentControl.ContentTemplate}"
                                                    RecognizesAccessKey="True"
                                                    SnapsToDevicePixels="True" />
                                            </Grid>
                                        </Border>
                                        <ControlTemplate.Triggers>
                                            <Trigger Property="ToggleButton.IsChecked" Value="True">
                                                <Setter TargetName="Triangle" Property="Points" Value="11,15.5 13.5,12.5,16,15.5" />
                                            </Trigger>
                                            <Trigger Property="UIElement.IsMouseOver" Value="True">

                                                <Setter TargetName="ButtonBackgroundRectangle" Property="Fill" Value="#282828" />
                                            </Trigger>
                                            <Trigger Property="ButtonBase.IsPressed" Value="True">
                                                <Setter TargetName="ButtonBorder" Property="BorderBrush" Value="White" />
                                                <Setter TargetName="Triangle" Property="Stroke" Value="White" />
                                                <Setter TargetName="Triangle" Property="Fill" Value="White" />
                                                <Setter TargetName="Triangle" Property="StrokeThickness" Value="2" />
                                            </Trigger>
                                        </ControlTemplate.Triggers>
                                    </ControlTemplate>
                                </Setter.Value>
                            </Setter>
                        </Style>
                    </ToggleButton.Style>
                </ToggleButton>
                <ContentPresenter
                    Name="ExpandSite"
                    Margin="{TemplateBinding Control.Padding}"
                    HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                    VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"
                    Content="{TemplateBinding ContentControl.Content}"
                    ContentStringFormat="{TemplateBinding ContentControl.ContentStringFormat}"
                    ContentTemplate="{TemplateBinding ContentControl.ContentTemplate}"
                    DockPanel.Dock="Bottom"
                    Focusable="False"
                    Visibility="Collapsed" />
            </DockPanel>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="Expander.IsExpanded" Value="True">
                <Setter TargetName="ExpandSite" Property="UIElement.Visibility" Value="Visible" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    
    <!-- TextBlock as a Link -->
    <Style x:Key="TextBlockLink" TargetType="TextBlock">
        <Setter Property="Foreground" Value="{StaticResource TextBlockLinkForegroundColor}" />
        <Setter Property="Cursor" Value="Hand" />
    </Style>

    <!-- Common Information Icon -->
    <Style x:Key="InformationIcon" TargetType="{x:Type Image}">
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="False">
                <Setter Property="Source" Value="pack://application:,,,/DynamoCoreWpf;component/UI/Images/info-default-16px.png" />
            </Trigger>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Source" Value="pack://application:,,,/DynamoCoreWpf;component/UI/Images/info-hover-16px.png" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- Common Question Icon -->
    <Style x:Key="QuestionIcon" TargetType="{x:Type Image}">
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="False">
                <Setter Property="Source" Value="pack://application:,,,/DynamoCoreWpf;component/UI/Images/question-default-16px.png" />
            </Trigger>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Source" Value="pack://application:,,,/DynamoCoreWpf;component/UI/Images/question-hover-16px.png" />
            </Trigger>
        </Style.Triggers>
    </Style>

</ResourceDictionary>
