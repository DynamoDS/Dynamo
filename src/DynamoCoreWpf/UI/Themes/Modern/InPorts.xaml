<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:dynui="clr-namespace:Dynamo.UI.Controls;assembly=DynamoCoreWpf"
                    xmlns:interactivity="clr-namespace:Dynamo.Microsoft.Xaml.Behaviors;assembly=Dynamo.Microsoft.Xaml.Behaviors"
                    xmlns:p="clr-namespace:Dynamo.Wpf.Properties;assembly=DynamoCoreWpf"
                    xmlns:ui="clr-namespace:Dynamo.UI;assembly=DynamoCoreWpf"
                    xmlns:viewModels="clr-namespace:Dynamo.ViewModels;assembly=DynamoCoreWpf"
                    xmlns:views="clr-namespace:Dynamo.UI.Views;assembly=DynamoCoreWpf">
    <ResourceDictionary.MergedDictionaries>
        <ui:SharedResourceDictionary Source="{x:Static ui:SharedDictionaryManager.DynamoConvertersDictionaryUri}" />
        <ui:SharedResourceDictionary Source="{x:Static ui:SharedDictionaryManager.DynamoColorsAndBrushesDictionaryUri}" />
        <ui:SharedResourceDictionary Source="{x:Static ui:SharedDictionaryManager.DynamoModernDictionaryUri}" />
    </ResourceDictionary.MergedDictionaries>
    <DataTemplate DataType="{x:Type viewModels:InPortViewModel}">

        <!--  Grid that contains the entire port  -->
        <Grid Name="MainGrid"
              Height="35px"
              Background="Transparent"
              IsHitTestVisible="True">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Name="PortSnappingColumn" Width="25px" />
                <ColumnDefinition Name="ValueMarkerColumn" Width="5px" />
                <ColumnDefinition Name="GapBetweenValueMarkerAndPortName" Width="6px" />
                <ColumnDefinition Name="PortNameColumn" Width="*" />
                <ColumnDefinition Name="GapBetweenPortNameAndUseLevelSpinner" Width="6px" />
                <ColumnDefinition Name="UseLevelSpinnerColumn" Width="Auto" />
                <ColumnDefinition Name="ChevronColumn" Width="Auto" />
            </Grid.ColumnDefinitions>

            <interactivity:Interaction.Triggers>
                <!--  Bind Connect command to left click  -->
                <views:HandlingEventTrigger EventName="MouseLeftButtonDown">
                    <interactivity:InvokeCommandAction Command="{Binding Path=ConnectCommand}" />
                </views:HandlingEventTrigger>
                <views:HandlingEventTrigger EventName="MouseRightButtonDown">
                    <interactivity:InvokeCommandAction Command="{Binding Path=NodePortContextMenuCommand}" CommandParameter="{Binding}" />
                </views:HandlingEventTrigger>
            </interactivity:Interaction.Triggers>

            <!--  Bind NodeAutoComplete to double left click  -->
            <Grid.InputBindings>
                <MouseBinding Command="{Binding Path=NodeAutoCompleteCommand}" MouseAction="LeftDoubleClick" />
            </Grid.InputBindings>

            <!--  Enables Port Snapping  -->
            <Rectangle x:Name="PortSnapping"
                       Grid.Column="0"
                       Grid.ColumnSpan="7"
                       Canvas.ZIndex="1"
                       Fill="Transparent"
                       IsHitTestVisible="{Binding IsHitTestVisible}"
                       SnapsToDevicePixels="True">
                <interactivity:Interaction.Triggers>
                    <views:HandlingEventTrigger EventName="MouseEnter">
                        <interactivity:InvokeCommandAction Command="{Binding Path=MouseEnterCommand}" CommandParameter="{Binding}" />
                    </views:HandlingEventTrigger>
                    <views:HandlingEventTrigger EventName="MouseLeave">
                        <interactivity:InvokeCommandAction Command="{Binding Path=MouseLeaveCommand}" CommandParameter="{Binding}" />
                    </views:HandlingEventTrigger>
                </interactivity:Interaction.Triggers>
            </Rectangle>

            <!--  Sets the port background color  -->
            <Border x:Name="PortBackgroundBorder"
                    Grid.Column="1"
                    Grid.ColumnSpan="6"
                    Height="29px"
                    Background="{Binding PortBackgroundColor, UpdateSourceTrigger=PropertyChanged}"
                    BorderThickness="0"
                    CornerRadius="0,11,11,0"
                    IsHitTestVisible="False"
                    SnapsToDevicePixels="True" />

            <!--  A small marker on the left of the port, indicating whether it's been honored  -->
            <Rectangle x:Name="PortValueMarker"
                       Grid.Column="1"
                       Height="29px"
                       VerticalAlignment="Center"
                       Fill="{Binding PortValueMarkerColor, UpdateSourceTrigger=PropertyChanged}"
                       IsHitTestVisible="False"
                       SnapsToDevicePixels="True" />

            <!--  A rectangular marker indicating that the port has a default value  -->
            <Border x:Name="PortDefaultValueMarker"
                    Grid.Column="0"
                    Width="4"
                    Height="27px"
                    Margin="0,0,1,0"
                    HorizontalAlignment="Right"
                    Background="{Binding PortValueMarkerColor, UpdateSourceTrigger=PropertyChanged}"
                    Visibility="{Binding PortDefaultValueMarkerVisible, Converter={StaticResource BooleanToVisibilityCollapsedConverter}}" />

            <!--  The name of this port  -->
            <TextBlock x:Name="PortNameTextBox"
                       Grid.Column="3"
                       Width="Auto"
                       Margin="0,1,5,0"
                       VerticalAlignment="Center"
                       FontFamily="{StaticResource ArtifaktElementRegular}"
                       FontSize="12px"
                       Foreground="#DCDCDC"
                       IsHitTestVisible="False"
                       Text="{Binding Path=PortName}" />

            <!--  The small '>' marker users click on to open the port context menu  -->
            <TextBlock x:Name="Chevron"
                       Grid.Column="6"
                       Width="20px"
                       Padding="0,1,1,0"
                       VerticalAlignment="Center"
                       FontSize="16px"
                       Foreground="{StaticResource PrimaryCharcoal200Brush}"
                       IsHitTestVisible="False"
                       Text="&gt;"
                       TextAlignment="Center"
                       Visibility="{Binding UseLevelVisibility}" />

            <!--  A semi-transparent overlay which displays when users move their mouse over the port  -->
            <Border x:Name="MainBorderHighlightOverlay"
                    Grid.Column="1"
                    Grid.ColumnSpan="6"
                    Height="29px"
                    BorderBrush="Transparent"
                    CornerRadius="0,11,11,0"
                    IsHitTestVisible="True"
                    Opacity="0.2"
                    SnapsToDevicePixels="True">
                <Border.Style>
                    <Style TargetType="Border">
                        <Style.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="Background" Value="White" />
                            </Trigger>
                            <Trigger Property="IsMouseOver" Value="False">
                                <Setter Property="Background" Value="Transparent" />
                            </Trigger>
                        </Style.Triggers>
                    </Style>
                </Border.Style>

                <Border.ToolTip>
                    <dynui:DynamoToolTip AttachmentSide="Left" Style="{DynamicResource ResourceKey=SLightToolTip}">
                        <Grid>
                            <TextBlock MaxWidth="320"
                                       Text="{Binding Path=ToolTipContent}"
                                       TextWrapping="Wrap" />
                        </Grid>
                    </dynui:DynamoToolTip>
                </Border.ToolTip>
            </Border>

            <!--  Contains the UseLevelSpinner, letting users select List Levels etc  -->
            <Grid Grid.Column="5" Visibility="{Binding Path=UseLevels, Converter={StaticResource BooleanToVisibilityConverter}}">
                <dynui:UseLevelSpinner x:Name="useLevelControl"
                                       Width="50px"
                                       Height="25px"
                                       VerticalAlignment="Center"
                                       Background="{StaticResource DarkGreyBrush}"
                                       DockPanel.Dock="Right"
                                       KeepListStructure="{Binding Path=ShouldKeepListStructure}"
                                       Level="{Binding Path=Level, Mode=TwoWay}"
                                       Visibility="{Binding UseLevelVisibility}" />
            </Grid>

            <!--  A semi-transparent overlay above the chevron, which displays when a user's mouse moves over it  -->
            <Border x:Name="ChevronHighlightOverlay"
                    Grid.Column="6"
                    Width="20px"
                    Height="27px"
                    CornerRadius="0,11,11,0"
                    IsHitTestVisible="True"
                    Visibility="{Binding UseLevelVisibility}">
                <Border.InputBindings>
                    <MouseBinding Command="{Binding Path=NodePortContextMenuCommand}" MouseAction="LeftClick" />
                </Border.InputBindings>
                <Border.Style>
                    <Style TargetType="{x:Type Border}">
                        <Style.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="Background" Value="#E5E2DE" />
                                <Setter Property="Opacity" Value="0.3" />
                            </Trigger>
                            <Trigger Property="IsMouseOver" Value="False">
                                <Setter Property="Background" Value="#E5E2DE" />
                                <Setter Property="Opacity" Value="0.0" />
                            </Trigger>
                        </Style.Triggers>
                    </Style>
                </Border.Style>
            </Border>

            <!--  The outer border around this port  -->
            <Border x:Name="PortBorderBrush"
                    Grid.Column="1"
                    Grid.ColumnSpan="6"
                    Height="29px"
                    BorderBrush="{Binding PortBorderBrushColor, UpdateSourceTrigger=PropertyChanged}"
                    BorderThickness="0,1,1,1"
                    CornerRadius="0,11,11,0"
                    IsHitTestVisible="True"
                    SnapsToDevicePixels="True" />
        </Grid>
    </DataTemplate>
</ResourceDictionary>