<UserControl x:Class="Dynamo.Views.WorkspaceView"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
             xmlns:controls="clr-namespace:Dynamo.Controls"
             xmlns:ui="clr-namespace:Dynamo.UI.Controls"
             xmlns:views="clr-namespace:Dynamo.Views"
             xmlns:p="clr-namespace:Dynamo.Wpf.Properties"
             mc:Ignorable="d"
             d:DesignHeight="300"
             d:DesignWidth="300"
             MouseLeftButtonDown="OnMouseLeftButtonDown"
             MouseUp="OnMouseRelease"
             MouseMove="OnMouseMove"
             KeyDown="WorkspaceView_KeyDown"
             KeyUp="WorkspaceView_KeyUp"
             IsHitTestVisible="{Binding IsCurrentSpace}"
             AllowDrop="True"
             Drop="OnWorkspaceDrop">

    <Grid HorizontalAlignment="Stretch"
          VerticalAlignment="Stretch">
        <Canvas Name="outerCanvas"
                ClipToBounds="True">
            <Canvas.IsHitTestVisible>
                <Binding Path="DataContext.ShouldBeHitTestVisible"
                         RelativeSource="{RelativeSource FindAncestor, AncestorType={x:Type TabControl}}" />
            </Canvas.IsHitTestVisible>

            <controls:ZoomBorder x:Name="zoomBorder"
                                 ClipToBounds="True"
                                 BorderThickness="0"
                                 Width="{Binding Path=ActualWidth, ElementName=outerCanvas}"
                                 Height="{Binding Path=ActualHeight, ElementName=outerCanvas}"
                                 Cursor="{Binding CurrentCursor}"
                                 ForceCursor="{Binding IsCursorForced}">
                <Grid>
                    <ItemsControl Name="WorkspaceElements"
                                  ItemsSource="{Binding WorkspaceElements}">

                        <!--Resources for the ItemsControl can now be found in DataTemplates.xml-->

                        <ItemsControl.ItemsPanel>
                            <ItemsPanelTemplate>
                                <controls:DragCanvas x:Name="DragCanvas"
                                                     UseLayoutRounding="True"
                                                     Width="0"
                                                     Height="0"
                                                     HorizontalAlignment="Left"
                                                     VerticalAlignment="Top"
                                                     Visibility="Visible"
                                                     ContextMenuOpening="WorkBench_ContextMenuOpening"
                                                     AllowDragOutOfView="True"
                                                     Loaded="WorkBench_OnLoaded"
                                                     IsItemsHost="True">
                                    <Canvas.Background>
                                        <SolidColorBrush Color="Transparent" />
                                    </Canvas.Background>
                                    <Canvas.Opacity>
                                        <Binding Path="DataContext.CanNavigateBackground"
                                                 RelativeSource="{RelativeSource FindAncestor, AncestorType={x:Type controls:DynamoView}}"
                                                 Converter="{StaticResource NavigationToOpacityConverter}">
                                        </Binding>
                                    </Canvas.Opacity>
                                </controls:DragCanvas>
                            </ItemsPanelTemplate>
                        </ItemsControl.ItemsPanel>

                        <ItemsControl.ItemContainerStyle>
                            <Style TargetType="ContentPresenter">
                                <Setter Property="Canvas.Left"
                                        Value="{Binding Left}" />
                                <Setter Property="Canvas.Top"
                                        Value="{Binding Top}" />
                                <Setter Property="Panel.ZIndex"
                                        Value="{Binding ZIndex}" />
                            </Style>
                        </ItemsControl.ItemContainerStyle>

                    </ItemsControl>

                    <Canvas Name="selectionCanvas"
                            HorizontalAlignment="Stretch"
                            VerticalAlignment="Stretch">
                        <Rectangle x:Name="selectionBox"
                                   Visibility="Collapsed"
                                   Stroke="Black"
                                   StrokeThickness="1"
                                   IsHitTestVisible="False" />
                    </Canvas>
                </Grid>

            </controls:ZoomBorder>

            <Canvas.ContextMenu>
                <ContextMenu>
                    <MenuItem Name="WorkspaceLacingMenu"
                              Header="{x:Static p:Resources.ContextMenuLacing}">
                        <MenuItem IsCheckable="True"
                                  Command="{Binding Path=SetArgumentLacingCommand}"
                                  CommandParameter="Shortest"
                                  Header="{x:Static p:Resources.ContextMenuLacingShortest}">
                            <MenuItem.IsChecked>
                                <Binding Path="SelectionArgumentLacing"
                                         Mode="OneWay"
                                         Converter="{StaticResource EnumToBoolConverter}"
                                         ConverterParameter="Shortest" />
                            </MenuItem.IsChecked>
                        </MenuItem>
                        <MenuItem IsCheckable="True"
                                  Command="{Binding Path=SetArgumentLacingCommand}"
                                  CommandParameter="Longest"
                                  Header="{x:Static p:Resources.ContextMenuLacingLongest}">
                            <MenuItem.IsChecked>
                                <Binding Path="SelectionArgumentLacing"
                                         Mode="OneWay"
                                         Converter="{StaticResource EnumToBoolConverter}"
                                         ConverterParameter="Longest" />
                            </MenuItem.IsChecked>
                        </MenuItem>
                        <MenuItem IsCheckable="True"
                                  Command="{Binding Path=SetArgumentLacingCommand}"
                                  CommandParameter="CrossProduct"
                                  Header="{x:Static p:Resources.ContextMenuLacingCrossProduct}">
                            <MenuItem.IsChecked>
                                <Binding Path="SelectionArgumentLacing"
                                         Mode="OneWay"
                                         Converter="{StaticResource EnumToBoolConverter}"
                                         ConverterParameter="CrossProduct" />
                            </MenuItem.IsChecked>
                        </MenuItem>
                    </MenuItem>


                    <MenuItem IsEnabled="{Binding Path=HasSelection}"
                              Header="{x:Static  p:Resources.ContextMenuShowAllGeometry}"
                              Command="{Binding Path=ShowHideAllGeometryPreviewCommand}"
                              CommandParameter="true"
                              Visibility="{Binding Path=AnyNodeVisible, Converter={StaticResource InverseBoolToVisibilityCollapsedConverter}}"/>

                    <MenuItem IsEnabled="{Binding Path=HasSelection}"
                              Header="{x:Static p:Resources.ContextMenuHideAllGeometry}"
                              Command="{Binding Path=ShowHideAllGeometryPreviewCommand}"
                              CommandParameter="false"
                              Visibility="{Binding Path=AnyNodeVisible, Converter={StaticResource BooleanToVisibilityCollapsedConverter}}"/>

                    <MenuItem IsEnabled="{Binding Path=HasSelection}"
                              Header="{x:Static  p:Resources.ContextMenuShowUpstreamPreview}"
                              Command="{Binding Path=ShowHideAllUpstreamPreviewCommand}"
                              CommandParameter="true"
                              Visibility="{Binding Path=AnyNodeUpstreamVisible, Converter={StaticResource InverseBoolToVisibilityCollapsedConverter}}" />

                    <MenuItem IsEnabled="{Binding Path=HasSelection}"
                              Header="{x:Static p:Resources.ContextMenuHideUpstreamPreview}"
                              Command="{Binding Path=ShowHideAllUpstreamPreviewCommand}"
                              CommandParameter="false"
                              Visibility="{Binding Path=AnyNodeUpstreamVisible, Converter={StaticResource BooleanToVisibilityCollapsedConverter}}" />

                    <MenuItem  Header="{x:Static p:Resources.DynamoViewEditMenuAlignSelection}"
                               Name="Align">
                        <MenuItem  Header="{x:Static p:Resources.DynamoViewEditMenuAlignXAverage}"
                                   Command="{Binding AlignSelectedCommand}"
                                   CommandParameter="HorizontalCenter" />
                        <MenuItem  Header="{x:Static p:Resources.DynamoViewEditMenuAlignLeft}"
                                   Command="{Binding AlignSelectedCommand}"
                                   CommandParameter="HorizontalLeft" />
                        <MenuItem  Header="{x:Static p:Resources.DynamoViewEditMenuAlignRight}"
                                   Command="{Binding AlignSelectedCommand}"
                                   CommandParameter="HorizontalRight" />
                        <MenuItem  Header="{x:Static p:Resources.DynamoViewEditMenuAlignYAverage}"
                                   Command="{Binding AlignSelectedCommand}"
                                   CommandParameter="VerticalCenter" />
                        <MenuItem  Header="{x:Static p:Resources.DynamoViewEditMenuAlignTop}"
                                   Command="{Binding AlignSelectedCommand}"
                                   CommandParameter="VerticalTop" />
                        <MenuItem  Header="{x:Static p:Resources.DynamoViewEditMenuAlighBottom}"
                                   Command="{Binding AlignSelectedCommand}"
                                   CommandParameter="VerticalBottom" />
                        <MenuItem  Header="{x:Static p:Resources.DynamoViewEditMenuAlignYDistribute}"
                                   Command="{Binding AlignSelectedCommand}"
                                   CommandParameter="VerticalDistribute" />
                        <MenuItem  Header="{x:Static p:Resources.DynamoViewEditMenuAlignXDistribute}"
                                   Command="{Binding AlignSelectedCommand}"
                                   CommandParameter="HorizontalDistribute" />
                    </MenuItem>

                    <MenuItem  Header="{x:Static p:Resources.ContextMenuNodesFromSelection}"
                               Command="{Binding NodeFromSelectionCommand}" />

                    <MenuItem  Header="{x:Static p:Resources.ContextMenuNodeToCode}"
                               Command="{Binding NodeToCodeCommand}" 
                               Visibility="{Binding Path=CanRunNodeToCode, Converter={StaticResource BooleanToVisibilityCollapsedConverter}}"/>

                    <MenuItem  Header="{x:Static p:Resources.ContextCreateGroupFromSelection}"                                 
                               Command="{Binding DynamoViewModel.AddAnnotationCommand}" />
                    
                    <MenuItem  Header="{x:Static p:Resources.ContextMenuNodesFromGeometry}"
                               Visibility="{Binding Path=CanFindNodesFromElements, Converter={StaticResource BooleanToVisibilityCollapsedConverter}}"
                               Command="{Binding FindNodesFromSelectionCommand}" />

                    <Separator Visibility="{Binding Path=IsHomeSpace, Converter={StaticResource InverseBoolToVisibilityCollapsedConverter}}" />

                    <MenuItem  Header="{x:Static p:Resources.ContextMenuEditCustomNodeProperty}"
                               Click="WorkspacePropertyEditClick"
                               Visibility="{Binding Path=IsHomeSpace, Converter={StaticResource InverseBoolToVisibilityCollapsedConverter}}" />
                    <MenuItem  Header="{x:Static p:Resources.ContextMenuPublishCustomNode}"
                               Name="Publish"
                               Command="{Binding DynamoViewModel.PublishCurrentWorkspaceCommand }"
                               Visibility="{Binding Path=IsHomeSpace, Converter={StaticResource InverseBoolToVisibilityCollapsedConverter}}" />

                    <Separator />

                    <MenuItem Header="{x:Static p:Resources.ContextMenuGeometryView}"
                              Command="{Binding DynamoViewModel.ToggleCanNavigateBackgroundCommand}" />
                    <MenuItem Header="{x:Static p:Resources.ContextMenuPan}"
                              Command="{Binding DynamoViewModel.TogglePanCommand}">
                        <MenuItem.IsChecked>
                            <Binding Path="DynamoViewModel.IsPanning"
                                     Mode="OneWay" />
                        </MenuItem.IsChecked>
                    </MenuItem>
                    <MenuItem Header="{x:Static p:Resources.ContextMenuFitToScreen}"
                              Command="{Binding DynamoViewModel.FitViewCommand}" />

                </ContextMenu>
            </Canvas.ContextMenu>

        </Canvas>

        <StackPanel Name="viewControlPanel"
                    Orientation="Vertical"
                    Margin="4"
                    HorizontalAlignment="Right"
                    VerticalAlignment="Top">

            <ui:ImageButton Width="30"
                            Height="28"
                            StateImage="/DynamoCoreWpf;component/UI/Images/Canvas/canvas-button-fit-view-states.png">
                <ui:ImageButton.Command>
                    <Binding Path="DataContext.FitViewCommand"
                             RelativeSource="{RelativeSource FindAncestor, AncestorType={x:Type controls:DynamoView}}" />
                </ui:ImageButton.Command>
            </ui:ImageButton>

            <ui:ImageRepeatButton Width="30"
                                  Height="24"
                                  StateImage="/DynamoCoreWpf;component/UI/Images/Canvas/canvas-button-zoom-in-states.png">
                <ui:ImageRepeatButton.Command>
                    <Binding Path="DataContext.ZoomInCommand"
                             RelativeSource="{RelativeSource FindAncestor, AncestorType={x:Type controls:DynamoView}}" />
                </ui:ImageRepeatButton.Command>
            </ui:ImageRepeatButton>

            <ui:ImageRepeatButton Width="30"
                                  Height="28"
                                  StateImage="/DynamoCoreWpf;component/UI/Images/Canvas/canvas-button-zoom-out-states.png">
                <ui:ImageRepeatButton.Command>
                    <Binding Path="DataContext.ZoomOutCommand"
                             RelativeSource="{RelativeSource FindAncestor, AncestorType={x:Type controls:DynamoView}}" />
                </ui:ImageRepeatButton.Command>
            </ui:ImageRepeatButton>

            <ui:ImageCheckBox Width="30"
                              Height="30"
                              StateImage="/DynamoCoreWpf;component/UI/Images/Canvas/canvas-button-pan-states.png"
                              CheckImage="/DynamoCoreWpf;component/UI/Images/Canvas/canvas-button-pan-check.png">
                <ui:ImageCheckBox.Command>
                    <Binding Path="DataContext.TogglePanCommand"
                             RelativeSource="{RelativeSource FindAncestor, AncestorType={x:Type controls:DynamoView}}" />
                </ui:ImageCheckBox.Command>
                <ui:ImageCheckBox.IsChecked>
                    <Binding Path="DataContext.IsPanning"
                             Mode="OneWay"
                             RelativeSource="{RelativeSource FindAncestor, AncestorType={x:Type controls:DynamoView}}" />
                </ui:ImageCheckBox.IsChecked>
            </ui:ImageCheckBox>

            <ui:ImageCheckBox Width="30"
                              Height="30"
                              StateImage="/DynamoCoreWpf;component/UI/Images/Canvas/canvas-button-orbit-states.png"
                              CheckImage="/DynamoCoreWpf;component/UI/Images/Canvas/canvas-button-orbit-check.png">
                <ui:ImageCheckBox.Command>
                    <Binding Path="DataContext.ToggleOrbitCommand"
                             RelativeSource="{RelativeSource FindAncestor, AncestorType={x:Type controls:DynamoView}}" />
                </ui:ImageCheckBox.Command>
                <ui:ImageCheckBox.IsChecked>
                    <Binding Path="DataContext.IsOrbiting"
                             Mode="OneWay"
                             RelativeSource="{RelativeSource FindAncestor, AncestorType={x:Type controls:DynamoView}}" />
                </ui:ImageCheckBox.IsChecked>
                <ui:ImageCheckBox.Visibility>
                    <Binding Path="DataContext.CanNavigateBackground"
                             Converter="{StaticResource BooleanToVisibilityConverter}"
                             RelativeSource="{RelativeSource FindAncestor, AncestorType={x:Type controls:DynamoView}}" />
                </ui:ImageCheckBox.Visibility>
            </ui:ImageCheckBox>

        </StackPanel>

        <StackPanel Name="statusBarPanel"
                    Orientation="Horizontal"
                    HorizontalAlignment="Right"
                    VerticalAlignment="Bottom"
                    Height="Auto">
            <ui:ImageCheckBox Width="56"
                              Height="30"
                              Margin="4,4,0,4"
                              StateImage="/DynamoCoreWpf;component/UI/Images/Canvas/canvas-button-geom-states.png"
                              CheckImage="/DynamoCoreWpf;component/UI/Images/Canvas/canvas-button-geom-check.png"
                              ToolTip="{x:Static p:Resources.InCanvasGeomButtonToolTip}"
                              >
                <ui:ImageCheckBox.IsChecked>
                    <Binding Path="DataContext.CanNavigateBackground"
                             RelativeSource="{RelativeSource FindAncestor, AncestorType={x:Type controls:DynamoView}}" />
                </ui:ImageCheckBox.IsChecked>
            </ui:ImageCheckBox>
            <ui:ImageCheckBox Width="55"
                              Height="30"
                              Margin="0,4,4,4"
                              StateImage="/DynamoCoreWpf;component/UI/Images/Canvas/canvas-button-node-states.png"
                              CheckImage="/DynamoCoreWpf;component/UI/Images/Canvas/canvas-button-node-check.png"
                              ToolTip="{x:Static p:Resources.InCanvasNodeButtonToolTip}">
                <ui:ImageCheckBox.IsChecked>
                    <Binding Path="DataContext.CanNavigateBackground"
                             RelativeSource="{RelativeSource FindAncestor, AncestorType={x:Type controls:DynamoView}}"
                             Converter="{StaticResource InverseBooleanConverter}" />
                </ui:ImageCheckBox.IsChecked>
            </ui:ImageCheckBox>
        </StackPanel>

        <Popup Name="InCanvasSearchBar"
               StaysOpen="True"
               AllowsTransparency="True"
               IsOpen="False"
               Placement="MousePoint">
            <ui:InCanvasSearchControl />
        </Popup>

    </Grid>
</UserControl>
