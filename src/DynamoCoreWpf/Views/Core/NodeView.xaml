<UserControl
    x:Class="Dynamo.Controls.NodeView"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:configuration="clr-namespace:Dynamo.Configuration;assembly=DynamoCore"
    xmlns:dynui="clr-namespace:Dynamo.UI.Controls"
    xmlns:p="clr-namespace:Dynamo.Wpf.Properties"
    Name="topControl"
    Width="Auto"
    Height="Auto"
    x:FieldModifier="public"
    MouseEnter="OnNodeViewMouseEnter"
    MouseLeave="OnNodeViewMouseLeave"
    MouseLeftButtonDown="topControl_MouseLeftButtonDown"
    MouseRightButtonDown="topControl_MouseRightButtonDown"
    PreviewMouseLeftButtonDown="OnPreviewMouseLeftButtonDown"
    PreviewMouseMove="OnNodeViewMouseMove">

    <Grid
        Name="grid"
        HorizontalAlignment="Left"
        x:FieldModifier="public">
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto" />
            <RowDefinition Height="Auto">
                <!--  MaxHeight="{StaticResource NodeNameHeight}"  -->
            </RowDefinition>
            <RowDefinition Height="Auto" />
            <RowDefinition Height="Auto" />
            <RowDefinition Height="Auto" />
        </Grid.RowDefinitions>

        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="Auto" />
            <ColumnDefinition Width="Auto" />
            <ColumnDefinition Width="Auto" />
        </Grid.ColumnDefinitions>

        <!--  CONTEXT MENU  -->

        <Grid.ContextMenu>
            <ContextMenu Name="MainContextMenu" x:FieldModifier="public">
                <MenuItem
                    Name="deleteElem_cm"
                    Command="{Binding Path=DeleteCommand}"
                    Header="{x:Static p:Resources.ContextMenuDelete}" />
                <MenuItem
                    Name="createGroup_cm"
                    Command="{Binding Path=CreateGroupCommand}"
                    Header="{x:Static p:Resources.ContextCreateGroupFromSelection}" />
                <MenuItem
                    Name="unGroup_cm"
                    Command="{Binding Path=UngroupCommand}"
                    Header="{x:Static p:Resources.ContextUnGroupFromSelection}" />
                <MenuItem
                    Name="addtoGroup"
                    Command="{Binding Path=AddToGroupCommand}"
                    Header="{x:Static p:Resources.ContextAddGroupFromSelection}" />
                <MenuItem Header="{x:Static p:Resources.ContextMenuLacing}" Visibility="{Binding Path=ArgumentLacing, Converter={StaticResource LacingToVisibilityConverter}, Mode=OneWay}">
                    <MenuItem
                        Command="{Binding Path=SetLacingTypeCommand}"
                        CommandParameter="Auto"
                        Header="{x:Static p:Resources.ContextMenuLacingAuto}"
                        IsCheckable="True"
                        IsChecked="{Binding Path=ArgumentLacing, Converter={StaticResource EnumToBoolConverter}, ConverterParameter=Auto, Mode=OneWay}" />
                    <MenuItem
                        Command="{Binding Path=SetLacingTypeCommand}"
                        CommandParameter="Shortest"
                        Header="{x:Static p:Resources.ContextMenuLacingShortest}"
                        IsCheckable="True"
                        IsChecked="{Binding Path=ArgumentLacing, Converter={StaticResource EnumToBoolConverter}, ConverterParameter=Shortest, Mode=OneWay}" />
                    <MenuItem
                        Command="{Binding Path=SetLacingTypeCommand}"
                        CommandParameter="Longest"
                        Header="{x:Static p:Resources.ContextMenuLacingLongest}"
                        IsCheckable="True"
                        IsChecked="{Binding Path=ArgumentLacing, Converter={StaticResource EnumToBoolConverter}, ConverterParameter=Longest, Mode=OneWay}" />
                    <MenuItem
                        Command="{Binding Path=SetLacingTypeCommand}"
                        CommandParameter="CrossProduct"
                        Header="{x:Static p:Resources.ContextMenuLacingCrossProduct}"
                        IsCheckable="True"
                        IsChecked="{Binding Path=ArgumentLacing, Converter={StaticResource EnumToBoolConverter}, ConverterParameter=CrossProduct, Mode=OneWay}" />
                </MenuItem>
                <MenuItem
                    Name="nodeIsFrozen"
                    Command="{Binding Path=ToggleIsFrozenCommand}"
                    Header="{x:Static p:Resources.NodesRunStatus}"
                    IsChecked="{Binding IsFrozenExplicitly, Mode=OneWay}"
                    IsEnabled="{Binding CanToggleFrozen, Mode=OneWay}" />
                <MenuItem
                    Name="isVisible_cm"
                    Command="{Binding Path=ToggleIsVisibleCommand}"
                    Header="{x:Static p:Resources.NodeContextMenuPreview}"
                    IsChecked="{Binding Path=IsVisible, Mode=OneWay}"
                    Visibility="{Binding Path=ShowsVisibilityToggles, Converter={StaticResource BooleanToVisibilityCollapsedConverter}}" />
                <MenuItem
                    Name="isDisplayLabelsEnabled_cm"
                    Header="{x:Static p:Resources.NodeContextMenuShowLabels}"
                    IsCheckable="True"
                    IsChecked="{Binding Path=IsDisplayingLabels, Mode=TwoWay}"
                    IsEnabled="{Binding Path=CanDisplayLabels}" />
                <MenuItem
                    Name="enablePeriodicUpdate"
                    Header="{x:Static p:Resources.NodeContextMenuEnablePeriodicUpdate}"
                    IsCheckable="True"
                    IsChecked="{Binding Path=EnablePeriodicUpdate, Mode=OneWay}"
                    IsEnabled="False"
                    Visibility="{Binding PeriodicUpdateVisibility}" />
                <MenuItem
                    Name="rename_cm"
                    Command="{Binding Path=RenameCommand}"
                    Header="{x:Static p:Resources.NodeContextMenuRenameNode}" />
                <MenuItem
                    Name="isInput_cm"
                    Header="{x:Static p:Resources.NodeContextMenuIsInput}"
                    IsCheckable="True"
                    IsChecked="{Binding Path=IsSetAsInput, Mode=TwoWay}"
                    Visibility="{Binding Path=IsInput, Converter={StaticResource BooleanToVisibilityCollapsedConverter}}" />
                <MenuItem
                    Name="isOutput_cm"
                    Header="{x:Static p:Resources.NodeContextMenuIsOutput}"
                    IsCheckable="True"
                    IsChecked="{Binding Path=IsSetAsOutput, Mode=TwoWay}"
                    Visibility="{Binding Path=IsOutput, Converter={StaticResource BooleanToVisibilityCollapsedConverter}}" />
                <MenuItem
                    Name="help_cm"
                    Command="{Binding Path=ShowHelpCommand}"
                    Header="{x:Static p:Resources.NodeContextMenuHelp}" />
            </ContextMenu>
        </Grid.ContextMenu>

        <!--Border
            Name="NodeMask"
            Background="White"
            CornerRadius="7" />-->

        <Rectangle
            Name="frozenBorder"
            Grid.Row="1"
            Grid.RowSpan="3"
            Grid.ColumnSpan="3"
            Margin="-5,-5,-5,-5"
            Canvas.ZIndex="1"
            Opacity=".5"
            Stroke="#444"
            StrokeDashArray="2"
            StrokeThickness="3">
            <Rectangle.Style>
                <Style TargetType="{x:Type Rectangle}">
                    <Setter Property="Visibility" Value="Hidden" />
                    <Style.Triggers>
                        <DataTrigger Binding="{Binding IsFrozen}" Value="True">
                            <Setter Property="Visibility" Value="Visible" />
                        </DataTrigger>
                    </Style.Triggers>
                </Style>
            </Rectangle.Style>
        </Rectangle>

        <Border
            Name="customNodeBorder0"
            Grid.Row="0"
            Grid.ColumnSpan="3"
            Height="6"
            Margin="8,0,8,-1"
            VerticalAlignment="Bottom"
            Background="#dbd7d1"
            BorderBrush="#aaaaaa"
            BorderThickness="1"
            Canvas.ZIndex="1">
            <Border.Visibility>
                <Binding
                    Converter="{StaticResource BooleanToVisibilityConverter}"
                    Mode="OneWay"
                    Path="IsCustomFunction"
                    UpdateSourceTrigger="PropertyChanged" />
            </Border.Visibility>
        </Border>

        <Border
            Name="customNodeBorder1"
            Grid.Row="0"
            Grid.ColumnSpan="3"
            Height="4"
            Margin="4,0,4,-1"
            VerticalAlignment="Bottom"
            Background="#dbd7d1"
            BorderBrush="#888888"
            BorderThickness="1"
            Canvas.ZIndex="2">
            <Border.Visibility>
                <Binding
                    Converter="{StaticResource BooleanToVisibilityConverter}"
                    Mode="OneWay"
                    Path="IsCustomFunction"
                    UpdateSourceTrigger="PropertyChanged" />
            </Border.Visibility>
        </Border>

        <Rectangle
            Name="nodeBackground"
            Grid.Row="1"
            Grid.RowSpan="3"
            Grid.ColumnSpan="3"
            Canvas.ZIndex="10">
            <Rectangle.Style>
                <Style TargetType="{x:Type Rectangle}">
                    <Style.Triggers>
                        <DataTrigger Binding="{Binding IsFrozen}" Value="True">
                            <Setter Property="Opacity" Value="0.5" />
                        </DataTrigger>
                    </Style.Triggers>
                </Style>
            </Rectangle.Style>
            <Rectangle.Fill>
                <Binding
                    Converter="{StaticResource StateToColorConverter}"
                    ConverterParameter="BodyBackground"
                    Mode="OneWay"
                    Path="State"
                    UpdateSourceTrigger="PropertyChanged" />

            </Rectangle.Fill>
        </Rectangle>

        <Rectangle
            Name="NameBackground"
            Grid.Row="1"
            Grid.ColumnSpan="3"
            Canvas.ZIndex="11"
            IsHitTestVisible="True"
            MouseDown="NameBlock_OnMouseDown"
            StrokeThickness="0,0,0,1"
            ToolTipService.ShowDuration="60000">
            <Rectangle.Stroke>
                <Binding
                    Converter="{StaticResource StateToColorConverter}"
                    ConverterParameter="HeaderBorder"
                    Mode="OneWay"
                    Path="State"
                    UpdateSourceTrigger="PropertyChanged" />
            </Rectangle.Stroke>
            <Rectangle.Style>
                <Style TargetType="{x:Type Rectangle}">
                    <Style.Triggers>
                        <DataTrigger Binding="{Binding IsFrozen}" Value="True">
                            <Setter Property="Opacity" Value="0.5" />
                        </DataTrigger>
                    </Style.Triggers>
                </Style>
            </Rectangle.Style>
            <Rectangle.Fill>
                <Binding
                    Converter="{StaticResource StateToColorConverter}"
                    ConverterParameter="HeaderBackground"
                    Mode="OneWay"
                    Path="State"
                    UpdateSourceTrigger="PropertyChanged" />
            </Rectangle.Fill>
            <Rectangle.ToolTip>
                <dynui:DynamoToolTip AttachmentSide="Top" Style="{DynamicResource ResourceKey=SLightToolTip}">
                    <Grid>
                        <StackPanel MaxWidth="320" Orientation="Vertical">
                            <StackPanel>
                                <TextBlock Text="{x:Static p:Resources.NodeTooltipOriginalName}" TextWrapping="Wrap" />
                                <TextBlock
                                    FontWeight="Regular"
                                    Text="{Binding Path=OriginalName}"
                                    TextWrapping="Wrap" />
                            </StackPanel>
                            <!--  Space for splitting the original name and description  -->
                            <StackPanel>
                                <TextBlock Text="&#xD;" />
                            </StackPanel>
                            <StackPanel>
                                <TextBlock Text="{x:Static p:Resources.NodeTooltipDescription}" TextWrapping="Wrap" />
                                <TextBlock
                                    FontWeight="Normal"
                                    Text="{Binding Path=Description}"
                                    TextWrapping="Wrap" />
                            </StackPanel>
                        </StackPanel>
                    </Grid>
                </dynui:DynamoToolTip>
            </Rectangle.ToolTip>
        </Rectangle>

        <Border
            Name="previewStateNameBlock"
            Grid.Row="1"
            Grid.RowSpan="1"
            Grid.ColumnSpan="3"
            Margin="1,1,1,1"
            Background="#99B8CA"
            Canvas.ZIndex="12"
            MouseDown="NameBlock_OnMouseDown"
            Opacity=".4"
            Style="{StaticResource SZoomFadePreview}"
            ToolTipService.ShowDuration="60000">
            <Border.Visibility>
                <Binding
                    Converter="{StaticResource InverseBoolToVisibilityConverter}"
                    Mode="OneWay"
                    Path="IsVisible"
                    UpdateSourceTrigger="PropertyChanged" />
            </Border.Visibility>
            <Border.ToolTip>
                <dynui:DynamoToolTip AttachmentSide="Top" Style="{DynamicResource ResourceKey=SLightToolTip}">
                    <Grid>
                        <StackPanel MaxWidth="320" Orientation="Vertical">
                            <StackPanel>
                                <TextBlock Text="{x:Static p:Resources.NodeTooltipOriginalName}" TextWrapping="Wrap" />
                                <TextBlock
                                    FontWeight="SemiBold"
                                    Text="{Binding Path=OriginalName}"
                                    TextWrapping="Wrap" />
                            </StackPanel>
                            <!--  Space for splitting the original name and description  -->
                            <StackPanel>
                                <TextBlock Text="&#xD;" />
                            </StackPanel>
                            <StackPanel>
                                <TextBlock Text="{x:Static p:Resources.NodeTooltipDescription}" TextWrapping="Wrap" />
                                <TextBlock
                                    FontWeight="Normal"
                                    Text="{Binding Path=Description}"
                                    TextWrapping="Wrap" />
                            </StackPanel>
                        </StackPanel>
                    </Grid>
                </dynui:DynamoToolTip>
            </Border.ToolTip>
        </Border>
        <Border
            Name="previewState"
            Grid.Row="2"
            Grid.RowSpan="2"
            Grid.ColumnSpan="3"
            Margin="1,1,1,1"
            Background="#99B8CA"
            Canvas.ZIndex="12"
            Opacity=".4"
            Style="{StaticResource SZoomFadePreview}">
            <Border.Visibility>
                <Binding
                    Converter="{StaticResource InverseBoolToVisibilityConverter}"
                    Mode="OneWay"
                    Path="IsVisible"
                    UpdateSourceTrigger="PropertyChanged" />
            </Border.Visibility>
        </Border>

        <StackPanel
            Grid.Row="1"
            Grid.ColumnSpan="3"
            Margin="3,0,3,0"
            HorizontalAlignment="Left"
            Panel.ZIndex="12"
            Orientation="Horizontal">
            <Ellipse Grid.Row="1" Margin="6" Width="20" Height="20" Fill="#E6E6E6"/>
            <TextBlock
                Name="NameBlock"
                Grid.ColumnSpan="3"
                Margin="10,9,0,9"
                Padding="5"
                VerticalAlignment="Center"
                Background="{x:Null}"
                FontFamily="{StaticResource OpenSansRegular}"
                FontSize="15"
                IsHitTestVisible="False"
                Style="{StaticResource SZoomFadeText}"
                Text="{Binding Name, UpdateSourceTrigger=PropertyChanged}"
                TextAlignment="Center">
                <TextBlock.Foreground>
                    <Binding
                        Converter="{StaticResource StateToColorConverter}"
                        ConverterParameter="HeaderForeground"
                        Mode="OneWay"
                        Path="State"
                        UpdateSourceTrigger="PropertyChanged" />
                </TextBlock.Foreground>
            </TextBlock>

            <Border
                Width="Auto"
                Height="12"
                Margin="3,0,3,0"
                Background="{StaticResource renamedLabelBackground}"
                CornerRadius="3,3,3,3">
                <Border.Style>
                    <Style TargetType="{x:Type Border}">
                        <Setter Property="Visibility" Value="Collapsed" />
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding IsRenamed}" Value="True">
                                <Setter Property="Visibility" Value="Visible" />
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </Border.Style>
                <TextBlock
                    Width="Auto"
                    Margin="2,0,2,0"
                    HorizontalAlignment="Center"
                    VerticalAlignment="Center"
                    FontFamily="Consolas"
                    FontSize="8"
                    FontStyle="Italic"
                    Text="{x:Static p:Resources.NodeRenamedLabel}">
                    <TextBlock.Style>
                        <Style TargetType="{x:Type TextBlock}">
                            <Setter Property="Visibility" Value="Hidden" />
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding IsRenamed}" Value="True">
                                    <Setter Property="Visibility" Value="Visible" />
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </TextBlock.Style>
                </TextBlock>
            </Border>

        </StackPanel>
        <!--  INPUT PORTS  -->
        <ItemsControl
            Name="inputPortControl"
            Margin="0,8,0,0"
            Grid.Row="2"
            Grid.Column="0"
            HorizontalContentAlignment="Stretch"
            Canvas.ZIndex="20"
            ItemsSource="{Binding Path=InPorts}"
            Style="{StaticResource InOutPortControlStyle}" />

        <!--  OUTPUT PORTS  -->
        <ItemsControl
            Name="outputPortControl"
            Margin="0,8,0,0"
            Grid.Row="2"
            Grid.Column="2"
            HorizontalContentAlignment="Stretch"
            Canvas.ZIndex="20"
            ItemsSource="{Binding Path=OutPorts}"
            Style="{StaticResource InOutPortControlStyle}" />

        <Grid
            Name="centralGrid"
            Grid.Row="2"
            Grid.Column="1"
            Canvas.ZIndex="20">

            <Grid.RowDefinitions>
                <RowDefinition Height="auto" />
                <RowDefinition Height="*" />
                <RowDefinition Height="*" />
            </Grid.RowDefinitions>

            <!--  INPUT GRID  -->

            <Grid
                Name="inputGrid"
                MinHeight="{Binding Source={x:Static configuration:Configurations.PortHeightInPixels}}"
                Margin="8,8,8,0"
                HorizontalAlignment="Stretch"
                VerticalAlignment="Stretch"
                x:FieldModifier="public"
                Canvas.ZIndex="21"
                IsEnabled="{Binding Path=IsInteractionEnabled}" />

        </Grid>

        <StackPanel
            Name="GlyphStackPanel"
            Grid.Row="3"
            Grid.Column="0"
            Grid.ColumnSpan="3"
            Height="25"
            HorizontalAlignment="Right"
            Canvas.ZIndex="30"
            Orientation="Horizontal"
            Visibility="{Binding ShouldShowGlyphBar, Converter={StaticResource BooleanToVisibilityCollapsedConverter}}">

            <Grid>
                <TextBlock
                    Name="lacingOptionTextBlock"
                    Margin="5"
                    HorizontalAlignment="Right"
                    VerticalAlignment="Center"
                    FontFamily="Tahoma"
                    FontSize="8"
                    FontWeight="Bold"
                    Foreground="#99000000"
                    Text="{Binding Path=ArgumentLacing, Converter={StaticResource LacingToAbbreviationConverter}}"
                    ToolTip="{Binding Path=ArgumentLacing, Converter={StaticResource LacingToTooltipConverter}}"
                    Visibility="{Binding Path=ArgumentLacing, Converter={StaticResource LacingToVisibilityConverter}}" />
            </Grid>
        </StackPanel>

        <Grid
            Name="PresentationGrid"
            Grid.Row="3"
            Grid.Column="0"
            Grid.ColumnSpan="3"
            Margin="5"
            x:FieldModifier="public"
            Visibility="Collapsed"
            ZIndex="50">
            <!--  DO NOT ERASE THIS GRID TO BE USED FOR PRESENTING IMAGES, 3D VIEWS, ETC.  -->
        </Grid>

        <Rectangle
            Name="nodeBorder"
            Grid.Row="1"
            Grid.RowSpan="3"
            Grid.ColumnSpan="3"
            Canvas.ZIndex="40"
            Fill="Transparent"
            IsHitTestVisible="False"
            StrokeThickness="1">
            <Rectangle.Stroke>
                <Binding
                    Converter="{StaticResource StateToColorConverter}"
                    ConverterParameter="OuterBorder"
                    Mode="OneWay"
                    Path="State"
                    UpdateSourceTrigger="PropertyChanged" />
            </Rectangle.Stroke>
        </Rectangle>

        <Rectangle
            Name="selectionBorder"
            Grid.Row="1"
            Grid.RowSpan="3"
            Grid.ColumnSpan="3"
            Margin="-1"
            Canvas.ZIndex="41"
            Fill="Transparent"
            IsHitTestVisible="False"
            Stroke="{Binding PreviewState, Converter={StaticResource ConnectionStateToBrushConverter}}"
            StrokeThickness="2">
            <Rectangle.Visibility>
                <Binding
                    Converter="{StaticResource ConnectionStateToVisibilityCollapsedConverter}"
                    Mode="OneWay"
                    Path="PreviewState"
                    UpdateSourceTrigger="PropertyChanged" />
            </Rectangle.Visibility>
        </Rectangle>

        <!--  DO NOT ERASE. THIS IS FOR DEBUGGING  -->
        <!--<Rectangle Name="ForceReexecBorder"
                   Grid.Row="1"
                   Grid.ColumnSpan="3"
                   Grid.RowSpan="3"
                   Fill="Transparent"
                   Stroke="#FFF000"
                   StrokeThickness="5"
                   StrokeLineJoin="Round"
                   IsHitTestVisible="False"
                   Canvas.ZIndex="100"
                   Opacity="2"
                   Margin="-1">
            <Rectangle.Visibility>
                <Binding Path="ShowExecutionPreview"
                         UpdateSourceTrigger="PropertyChanged"
                         Mode="OneWay"
                         Converter="{StaticResource BooleanToVisibilityConverter}">
                </Binding>
            </Rectangle.Visibility>
        </Rectangle>-->

        <Canvas
            Name="expansionBay"
            Grid.Row="4"
            Grid.Column="0"
            Grid.ColumnSpan="3"
            Margin="0,4,0,0"
            HorizontalAlignment="Left"
            Background="Blue" />

        <Canvas
            Grid.Row="4"
            Grid.Column="0"
            Grid.ColumnSpan="3"
            ClipToBounds="False"
            Visibility="{Binding ShowDebugASTs, Converter={StaticResource BooleanToVisibilityCollapsedConverter}}">
            <Label HorizontalContentAlignment="Center" Content="{Binding ASTText}" />
        </Canvas>
    </Grid>
</UserControl>
