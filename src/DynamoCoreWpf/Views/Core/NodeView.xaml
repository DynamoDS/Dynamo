<UserControl
    x:Class="Dynamo.Controls.NodeView"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:configuration="clr-namespace:Dynamo.Configuration;assembly=DynamoCore"
    xmlns:dynui="clr-namespace:Dynamo.UI.Controls"
    xmlns:p="clr-namespace:Dynamo.Wpf.Properties"
    xmlns:ui="clr-namespace:Dynamo.UI"
    Name="topControl"
    Width="Auto"
    Height="Auto"
    x:FieldModifier="public"
    MouseEnter="OnNodeViewMouseEnter"
    MouseLeave="OnNodeViewMouseLeave"
    MouseLeftButtonDown="topControl_MouseLeftButtonDown"
    PreviewMouseLeftButtonDown="OnPreviewMouseLeftButtonDown"
    PreviewMouseMove="OnNodeViewMouseMove">

    <Grid
        Name="grid"
        HorizontalAlignment="Left"
        x:FieldModifier="public"
        ContextMenuService.IsEnabled="false">
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto" />
            <RowDefinition Height="Auto" />
            <RowDefinition Height="Auto" />
            <RowDefinition Height="Auto" />
            <RowDefinition Height="Auto" />
        </Grid.RowDefinitions>

        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="Auto" />
            <ColumnDefinition Width="*" MinWidth="40" />
            <ColumnDefinition Width="Auto" />
        </Grid.ColumnDefinitions>

        <!--  CONTEXT MENU  -->
        <Grid.ContextMenu>
            <ContextMenu Name="MainContextMenu" x:FieldModifier="public">
                <ContextMenu.Resources>
                    <ResourceDictionary>
                        <ResourceDictionary.MergedDictionaries>
                            <ui:SharedResourceDictionary Source="{x:Static ui:SharedDictionaryManager.DynamoConvertersDictionaryUri}" />
                            <ui:SharedResourceDictionary Source="{x:Static ui:SharedDictionaryManager.DynamoModernDictionaryUri}" />
                        </ResourceDictionary.MergedDictionaries>
                        <Style TargetType="{x:Type MenuItem}">
                            <Setter Property="Height" Value="30" />
                            <Setter Property="Width" Value="240" />
                            <Setter Property="Padding" Value="15,0,0,0" />
                            <Setter Property="Template">
                                <Setter.Value>
                                    <ControlTemplate TargetType="{x:Type MenuItem}">
                                        <DockPanel
                                            x:Name="dockPanel"
                                            HorizontalAlignment="Stretch"
                                            Background="Transparent"
                                            SnapsToDevicePixels="true">
                                            <ContentPresenter
                                                x:Name="ContentPresenter"
                                                Margin="{TemplateBinding Padding}"
                                                VerticalAlignment="Center"
                                                ContentSource="Header"
                                                DockPanel.Dock="Left"
                                                RecognizesAccessKey="True"
                                                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                                TextBlock.Foreground="#EEEEEE" />
                                            <Border
                                                x:Name="dismissedAlertsBadge"
                                                Height="15"
                                                MinWidth="15"
                                                Margin="7,0,0,1"
                                                VerticalAlignment="Center"
                                                Background="#EBEBEB"
                                                CornerRadius="7.5"
                                                DockPanel.Dock="Left"
                                                Visibility="Hidden">
                                                <Label
                                                    Padding="2,2,2,0"
                                                    HorizontalAlignment="Center"
                                                    VerticalAlignment="Center"
                                                    HorizontalContentAlignment="Center"
                                                    VerticalContentAlignment="Center"
                                                    Content="{Binding NumberOfDismissedAlerts, UpdateSourceTrigger=PropertyChanged}"
                                                    FontFamily="{StaticResource ArtifaktElementRegular}"
                                                    FontSize="9px"
                                                    Foreground="#4D4D4D" />
                                            </Border>
                                            <Label
                                                x:Name="subMenuArrow"
                                                Margin="0,0,15,7"
                                                Padding="0"
                                                VerticalAlignment="Center"
                                                Content="&gt;"
                                                DockPanel.Dock="Right"
                                                FontFamily="{StaticResource ArtifaktElementRegular}"
                                                FontSize="13px"
                                                Foreground="#6AC0E7">
                                                <Label.RenderTransform>
                                                    <ScaleTransform ScaleX="1" ScaleY="1.5" />
                                                </Label.RenderTransform>
                                                <Label.Style>
                                                    <Style TargetType="{x:Type Label}">
                                                        <Setter Property="Visibility" Value="Hidden" />
                                                        <Style.Triggers>
                                                            <DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType={x:Type MenuItem}}, Path=HasItems}" Value="True">
                                                                <Setter Property="Visibility" Value="Visible" />
                                                            </DataTrigger>
                                                        </Style.Triggers>
                                                    </Style>
                                                </Label.Style>
                                            </Label>
                                            <Popup
                                                x:Name="PART_Popup"
                                                AllowsTransparency="true"
                                                Focusable="false"
                                                HorizontalOffset="0"
                                                IsOpen="{Binding IsSubmenuOpen, RelativeSource={RelativeSource TemplatedParent}}"
                                                Placement="Left"
                                                VerticalOffset="-2">
                                                <Border
                                                    Background="{TemplateBinding Background}"
                                                    BorderBrush="Transparent"
                                                    BorderThickness="0">
                                                    <ScrollViewer
                                                        x:Name="SubMenuScrollViewer"
                                                        CanContentScroll="true"
                                                        Style="{DynamicResource {ComponentResourceKey ResourceId=MenuScrollViewer,
                                                                                                      TypeInTargetAssembly={x:Type FrameworkElement}}}">
                                                        <Grid RenderOptions.ClearTypeHint="Enabled">
                                                            <ItemsPresenter
                                                                x:Name="ItemsPresenter"
                                                                Margin="2"
                                                                Grid.IsSharedSizeScope="true"
                                                                KeyboardNavigation.DirectionalNavigation="Cycle"
                                                                KeyboardNavigation.TabNavigation="Cycle"
                                                                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                                                        </Grid>
                                                    </ScrollViewer>
                                                </Border>
                                            </Popup>
                                        </DockPanel>
                                        <ControlTemplate.Triggers>
                                            <Trigger Property="IsEnabled" Value="False">
                                                <Setter TargetName="ContentPresenter" Property="TextBlock.Opacity" Value="0.5" />
                                            </Trigger>
                                            <Trigger Property="IsMouseOver" Value="True">
                                                <Setter TargetName="ContentPresenter" Property="TextBlock.Foreground" Value="White" />
                                                <Setter TargetName="dockPanel" Property="Background" Value="#282828" />
                                            </Trigger>
                                            <Trigger Property="IsMouseOver" Value="False">
                                                <Setter TargetName="dockPanel" Property="Background" Value="#666666" />
                                            </Trigger>
                                            <DataTrigger Binding="{Binding ElementName=ContentPresenter, Path=Content}" Value="Dismissed Alerts">
                                                <Setter TargetName="dismissedAlertsBadge" Property="Visibility" Value="Visible" />
                                            </DataTrigger>
                                        </ControlTemplate.Triggers>
                                    </ControlTemplate>
                                </Setter.Value>
                            </Setter>
                        </Style>
                        <Style x:Key="{x:Static MenuItem.SeparatorStyleKey}" TargetType="Separator">
                            <Setter Property="OverridesDefaultStyle" Value="true" />
                            <Setter Property="Template">
                                <Setter.Value>
                                    <ControlTemplate TargetType="{x:Type Separator}">
                                        <Border
                                            Height="1"
                                            Margin="15,8,15,8"
                                            Background="#AFAFAF" />
                                    </ControlTemplate>
                                </Setter.Value>
                            </Setter>
                        </Style>
                    </ResourceDictionary>
                </ContextMenu.Resources>
                <MenuItem
                    Name="deleteElem_cm"
                    Command="{Binding Path=DeleteCommand}"
                    Header="{x:Static p:Resources.ContextMenuDelete}" />
                <MenuItem Header="{x:Static p:Resources.ContextMenuGroups}">
                    <MenuItem
                        Name="createGroup_cm"
                        Command="{Binding Path=CreateGroupCommand}"
                        Header="{x:Static p:Resources.ContextCreateGroupFromSelection}" />
                    <MenuItem
                        Name="unGroup_cm"
                        Command="{Binding Path=UngroupCommand}"
                        Header="{x:Static p:Resources.ContextUnGroupFromSelection}" />
                    <MenuItem
                        Name="addtoGroup"
                        Command="{Binding Path=AddToGroupCommand}"
                        Header="{x:Static p:Resources.ContextAddGroupFromSelection}" />
                </MenuItem>
                <MenuItem
                    Name="isVisible_cm"
                    Command="{Binding Path=ToggleIsVisibleCommand}"
                    Header="{x:Static p:Resources.NodeContextMenuPreview}"
                    IsChecked="{Binding Path=IsVisible, Mode=OneWay}"
                    Visibility="{Binding Path=ShowsVisibilityToggles, Converter={StaticResource BooleanToVisibilityCollapsedConverter}}" />
                <MenuItem
                    Name="nodeIsFrozen"
                    Command="{Binding Path=ToggleIsFrozenCommand}"
                    Header="{x:Static p:Resources.NodesRunStatus}"
                    IsChecked="{Binding IsFrozenExplicitly, Mode=OneWay}"
                    IsEnabled="{Binding CanToggleFrozen, Mode=OneWay}" />
                <MenuItem
                    Name="isDisplayLabelsEnabled_cm"
                    Header="{x:Static p:Resources.NodeContextMenuShowLabels}"
                    IsCheckable="True"
                    IsChecked="{Binding Path=IsDisplayingLabels, Mode=TwoWay}"
                    IsEnabled="{Binding Path=CanDisplayLabels}" />
                <MenuItem
                    Name="rename_cm"
                    Command="{Binding Path=RenameCommand}"
                    Header="{x:Static p:Resources.NodeContextMenuRenameNode}" />
                <MenuItem Header="{x:Static p:Resources.ContextMenuLacing}" Visibility="{Binding Path=ArgumentLacing, Converter={StaticResource LacingToVisibilityConverter}, Mode=OneWay}">
                    <MenuItem
                        Command="{Binding Path=SetLacingTypeCommand}"
                        CommandParameter="Auto"
                        Header="{x:Static p:Resources.ContextMenuLacingAuto}"
                        IsCheckable="True"
                        IsChecked="{Binding Path=ArgumentLacing, Converter={StaticResource EnumToBoolConverter}, ConverterParameter=Auto, Mode=OneWay}" />
                    <MenuItem
                        Command="{Binding Path=SetLacingTypeCommand}"
                        CommandParameter="Shortest"
                        Header="{x:Static p:Resources.ContextMenuLacingShortest}"
                        IsCheckable="True"
                        IsChecked="{Binding Path=ArgumentLacing, Converter={StaticResource EnumToBoolConverter}, ConverterParameter=Shortest, Mode=OneWay}" />
                    <MenuItem
                        Command="{Binding Path=SetLacingTypeCommand}"
                        CommandParameter="Longest"
                        Header="{x:Static p:Resources.ContextMenuLacingLongest}"
                        IsCheckable="True"
                        IsChecked="{Binding Path=ArgumentLacing, Converter={StaticResource EnumToBoolConverter}, ConverterParameter=Longest, Mode=OneWay}" />
                    <MenuItem
                        Command="{Binding Path=SetLacingTypeCommand}"
                        CommandParameter="CrossProduct"
                        Header="{x:Static p:Resources.ContextMenuLacingCrossProduct}"
                        IsCheckable="True"
                        IsChecked="{Binding Path=ArgumentLacing, Converter={StaticResource EnumToBoolConverter}, ConverterParameter=CrossProduct, Mode=OneWay}" />
                </MenuItem>
                <MenuItem Name="dismissedAlerts" Header="Dismissed Alerts" />
                <Separator />
                <MenuItem
                    Name="isInput_cm"
                    Header="{x:Static p:Resources.NodeContextMenuIsInput}"
                    IsCheckable="True"
                    IsChecked="{Binding Path=IsSetAsInput, Mode=TwoWay}"
                    Visibility="{Binding Path=IsInput, Converter={StaticResource BooleanToVisibilityCollapsedConverter}}" />
                <MenuItem
                    Name="isOutput_cm"
                    Header="{x:Static p:Resources.NodeContextMenuIsOutput}"
                    IsCheckable="True"
                    IsChecked="{Binding Path=IsSetAsOutput, Mode=TwoWay}"
                    Visibility="{Binding Path=IsOutput, Converter={StaticResource BooleanToVisibilityCollapsedConverter}}" />
                <Separator />
                <MenuItem
                    Name="help_cm"
                    Command="{Binding Path=ShowHelpCommand}"
                    Header="{x:Static p:Resources.NodeContextMenuHelp}" />
                <ContextMenu.Style>
                    <Style TargetType="{x:Type ContextMenu}">
                        <Setter Property="Placement" Value="MousePoint" />
                        <Setter Property="Foreground" Value="#EEEEEE" />
                        <Setter Property="FontSize" Value="13px" />
                        <Setter Property="FontFamily" Value="{StaticResource ArtifaktElementRegular}" />
                        <Setter Property="FontWeight" Value="Medium" />
                        <Setter Property="SnapsToDevicePixels" Value="True" />
                        <Setter Property="OverridesDefaultStyle" Value="True" />
                        <Setter Property="Template">
                            <Setter.Value>
                                <ControlTemplate TargetType="{x:Type ContextMenu}">
                                    <Border
                                        x:Name="Border"
                                        Background="#666666"
                                        BorderThickness="0px">
                                        <StackPanel
                                            Margin="0,5"
                                            ClipToBounds="True"
                                            IsItemsHost="True"
                                            Orientation="Vertical" />
                                    </Border>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                    </Style>
                </ContextMenu.Style>
            </ContextMenu>
        </Grid.ContextMenu>

        <!--  Graphical Styling of Custom Nodes  -->
        <Border
            Name="customNodeBorder0"
            Grid.Row="0"
            Grid.ColumnSpan="3"
            Height="8"
            Margin="16,0"
            VerticalAlignment="Bottom"
            Background="#959595"
            Canvas.ZIndex="1"
            CornerRadius="6,6,0,0">
            <Border.Visibility>
                <Binding
                    Converter="{StaticResource BooleanToVisibilityConverter}"
                    Mode="OneWay"
                    Path="IsCustomFunction"
                    UpdateSourceTrigger="PropertyChanged" />
            </Border.Visibility>
        </Border>
        <Border
            Name="customNodeBorder1"
            Grid.Row="0"
            Grid.ColumnSpan="3"
            Height="4"
            Margin="8,0"
            VerticalAlignment="Bottom"
            Background="#747474"
            Canvas.ZIndex="2"
            CornerRadius="6,6,0,0">
            <Border.Visibility>
                <Binding
                    Converter="{StaticResource BooleanToVisibilityConverter}"
                    Mode="OneWay"
                    Path="IsCustomFunction"
                    UpdateSourceTrigger="PropertyChanged" />
            </Border.Visibility>
        </Border>

        <!--  Node Body Background  -->
        <Border
            Name="nodeBackground"
            Grid.Row="1"
            Grid.RowSpan="3"
            Grid.ColumnSpan="3"
            Background="{StaticResource DarkerGreyBrush}"
            Canvas.ZIndex="10"
            CornerRadius="8,8,0,0" />

        <!--  Node Header Background  -->
        <Border
            Name="nameBackground"
            Grid.Row="1"
            Grid.Column="0"
            Grid.ColumnSpan="3"
            Height="57px"
            Background="{StaticResource DarkMidGreyBrush}"
            Canvas.ZIndex="12"
            CornerRadius="8,8,0,0">
            <Rectangle
                Fill="Transparent"
                IsHitTestVisible="True"
                MouseDown="NameBlock_OnMouseDown"
                ToolTipService.ShowDuration="60000">
                <Rectangle.ToolTip>
                    <dynui:DynamoToolTip AttachmentSide="Top" Style="{DynamicResource ResourceKey=SLightToolTip}">
                        <Grid>
                            <StackPanel MaxWidth="320" Orientation="Vertical">
                                <StackPanel>
                                    <TextBlock
                                        Padding="10px"
                                        FontFamily="{StaticResource ArtifaktElementRegular}"
                                        FontWeight="Medium"
                                        Text="{x:Static p:Resources.NodeTooltipOriginalName}"
                                        TextWrapping="Wrap" />
                                    <TextBlock
                                        Padding="10px"
                                        FontFamily="{StaticResource ArtifaktElementRegular}"
                                        FontWeight="Medium"
                                        Text="{Binding Path=OriginalName}"
                                        TextWrapping="Wrap" />
                                </StackPanel>
                                <!--  Space for splitting the original name and description  -->
                                <StackPanel>
                                    <TextBlock Text="&#xD;" />
                                </StackPanel>
                                <StackPanel>
                                    <TextBlock
                                        Padding="10px"
                                        FontFamily="{StaticResource ArtifaktElementRegular}"
                                        FontWeight="Medium"
                                        Text="{x:Static p:Resources.NodeTooltipDescription}"
                                        TextWrapping="Wrap" />
                                    <TextBlock
                                        Padding="10px"
                                        FontFamily="{StaticResource ArtifaktElementRegular}"
                                        FontWeight="Medium"
                                        Text="{Binding Path=Description}"
                                        TextWrapping="Wrap" />
                                </StackPanel>
                            </StackPanel>
                        </Grid>
                    </dynui:DynamoToolTip>
                </Rectangle.ToolTip>
            </Rectangle>
        </Border>

        <!--  Displays Tooltip when the user's mouse hovers over the node header  -->
        <Border
            Name="previewStateNameBlock"
            Grid.Row="1"
            Grid.ColumnSpan="3"
            Margin="1,1,1,1"
            Canvas.ZIndex="12"
            MouseDown="NameBlock_OnMouseDown"
            Opacity=".4"
            Style="{StaticResource SZoomFadePreview}"
            ToolTipService.ShowDuration="60000">
            <Border.ToolTip>
                <dynui:DynamoToolTip AttachmentSide="Top" Style="{DynamicResource ResourceKey=SLightToolTip}">
                    <Grid>
                        <StackPanel MaxWidth="320" Orientation="Vertical">
                            <StackPanel>
                                <TextBlock Text="{x:Static p:Resources.NodeTooltipOriginalName}" TextWrapping="Wrap" />
                                <TextBlock
                                    FontFamily="{StaticResource ArtifaktElementRegular}"
                                    FontWeight="Medium"
                                    Text="{Binding Path=OriginalName}"
                                    TextWrapping="Wrap" />
                            </StackPanel>
                            <!--  Space for splitting the original name and description  -->
                            <StackPanel>
                                <TextBlock Text="&#xD;" />
                            </StackPanel>
                            <StackPanel>
                                <TextBlock Text="{x:Static p:Resources.NodeTooltipDescription}" TextWrapping="Wrap" />
                                <TextBlock
                                    FontWeight="Normal"
                                    Text="{Binding Path=Description}"
                                    TextWrapping="Wrap" />
                            </StackPanel>
                        </StackPanel>
                    </Grid>
                </dynui:DynamoToolTip>
            </Border.ToolTip>
        </Border>

        <!--  Displays the node's header content, such as its icon, name and whether it's been renamed  -->
        <DockPanel
            Name="nodeHeaderContent"
            Grid.Row="1"
            Grid.ColumnSpan="3"
            Margin="10,6"
            HorizontalAlignment="Stretch"
            Panel.ZIndex="12"
            FlowDirection="LeftToRight">
            <Ellipse
                Width="30"
                Height="30"
                Fill="#E6E6E6" />
            <TextBlock
                Name="NameBlock"
                Margin="10,0,0,0"
                VerticalAlignment="Center"
                Background="{x:Null}"
                FontFamily="{StaticResource ArtifaktElementRegular}"
                FontSize="16px"
                FontWeight="Medium"
                IsHitTestVisible="False"
                Style="{StaticResource SZoomFadeText}"
                Text="{Binding Name, UpdateSourceTrigger=PropertyChanged}"
                TextAlignment="Center">
                <TextBlock.Foreground>
                    <Binding
                        Converter="{StaticResource StateToColorConverter}"
                        ConverterParameter="HeaderForeground"
                        Mode="OneWay"
                        Path="State"
                        UpdateSourceTrigger="PropertyChanged" />
                </TextBlock.Foreground>
            </TextBlock>
            <!--  Ellipse sits within Grid to increase size of MouseOver/ToolTip area  -->
            <Grid
                HorizontalAlignment="Right"
                VerticalAlignment="Center"
                Panel.ZIndex="100"
                Background="Transparent"
                DockPanel.Dock="Right">
                <Ellipse
                    Name="nodeRenamedBlueDot"
                    Width="9"
                    Height="9"
                    Margin="5"
                    Fill="{StaticResource Blue300Brush}"
                    Visibility="{Binding IsRenamed, Converter={StaticResource BooleanToVisibilityCollapsedConverter}}" />
                <Grid.ToolTip>
                    <dynui:DynamoToolTip AttachmentSide="Top" Style="{DynamicResource ResourceKey=SLightToolTip}">
                        <Grid>
                            <TextBlock
                                Padding="8,10"
                                FontFamily="{StaticResource ArtifaktElementRegular}"
                                FontSize="14"
                                FontWeight="Medium"
                                Text="{Binding Path=OriginalName, UpdateSourceTrigger=PropertyChanged, StringFormat='Renamed from {0}'}"
                                TextAlignment="Center"
                                TextWrapping="Wrap" />
                        </Grid>
                    </dynui:DynamoToolTip>
                </Grid.ToolTip>
            </Grid>
        </DockPanel>


        <!--  INPUT PORTS  -->
        <ItemsControl
            Name="inputPortControl"
            Grid.Row="2"
            Grid.Column="0"
            Margin="0,8,0,8"
            HorizontalContentAlignment="Stretch"
            Canvas.ZIndex="20"
            ItemsSource="{Binding Path=InPorts}"
            Style="{StaticResource InOutPortControlStyle}" />

        <!--  OUTPUT PORTS  -->
        <ItemsControl
            Name="outputPortControl"
            Grid.Row="2"
            Grid.Column="2"
            Margin="0,8,0,8"
            HorizontalContentAlignment="Stretch"
            Canvas.ZIndex="20"
            ItemsSource="{Binding Path=OutPorts}"
            Style="{StaticResource InOutPortControlStyle}" />

        <Grid
            Name="centralGrid"
            Grid.Row="2"
            Grid.Column="1"
            Margin="10,0,10,10"
            Canvas.ZIndex="20">

            <Grid.RowDefinitions>
                <RowDefinition Height="auto" />
                <RowDefinition Height="*" />
                <RowDefinition Height="*" />
            </Grid.RowDefinitions>

            <!--  INPUT GRID  -->

            <Grid
                Name="inputGrid"
                MinHeight="{Binding Source={x:Static configuration:Configurations.PortHeightInPixels}}"
                Margin="0,11,0,0"
                HorizontalAlignment="Stretch"
                VerticalAlignment="Stretch"
                x:FieldModifier="public"
                Canvas.ZIndex="21"
                IsEnabled="{Binding Path=IsInteractionEnabled}" />

        </Grid>

        <StackPanel
            Name="GlyphStackPanel"
            Grid.Row="3"
            Grid.Column="0"
            Grid.ColumnSpan="3"
            Margin="0,0,9,14"
            HorizontalAlignment="Right"
            VerticalAlignment="Bottom"
            Canvas.ZIndex="30"
            FlowDirection="RightToLeft"
            Orientation="Horizontal"
            Visibility="{Binding ShouldShowGlyphBar, Converter={StaticResource BooleanToVisibilityCollapsedConverter}}">
            <Button x:Name="OptionsButton" Click="OptionsButton_Click">
                <Button.Style>
                    <Style TargetType="{x:Type Button}">
                        <Setter Property="Template">
                            <Setter.Value>
                                <ControlTemplate TargetType="{x:Type Button}">
                                    <Border
                                        x:Name="DotsBackgroundBorder"
                                        Width="29"
                                        Height="29"
                                        Background="Transparent"
                                        CornerRadius="2">
                                        <StackPanel
                                            Width="28"
                                            Height="28"
                                            HorizontalAlignment="Center"
                                            Orientation="Vertical">
                                            <Ellipse
                                                Width="5"
                                                Height="5"
                                                Margin="0,5,0,2"
                                                Fill="Transparent"
                                                SnapsToDevicePixels="True"
                                                Stroke="{StaticResource Blue300Brush}"
                                                StrokeThickness="1" />
                                            <Ellipse
                                                Width="5"
                                                Height="5"
                                                Margin="0,0,0,1.5"
                                                Fill="Transparent"
                                                SnapsToDevicePixels="True"
                                                Stroke="{StaticResource Blue300Brush}"
                                                StrokeThickness="1" />
                                            <Ellipse
                                                Width="5"
                                                Height="5"
                                                Margin="0,0,0,4"
                                                Fill="Transparent"
                                                SnapsToDevicePixels="True"
                                                Stroke="{StaticResource Blue300Brush}"
                                                StrokeThickness="1" />
                                        </StackPanel>
                                    </Border>
                                    <ControlTemplate.Triggers>
                                        <Trigger Property="IsMouseOver" Value="True">
                                            <Setter TargetName="DotsBackgroundBorder" Property="Background" Value="#282828" />
                                        </Trigger>
                                        <Trigger Property="IsMouseOver" Value="False">
                                            <Setter TargetName="DotsBackgroundBorder" Property="Background" Value="Transparent" />
                                        </Trigger>
                                    </ControlTemplate.Triggers>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                    </Style>
                </Button.Style>
            </Button>
            <Grid
                Name="AlertsGlyph"
                Width="Auto"
                Height="20"
                MinWidth="20"
                Margin="3,0">
                <Border Background="#EBEBEB" CornerRadius="10">
                    <Label
                        Padding="3,2,3,0"
                        HorizontalAlignment="Center"
                        VerticalAlignment="Center"
                        HorizontalContentAlignment="Center"
                        VerticalContentAlignment="Center"
                        Content="{Binding NumberOfAlerts, UpdateSourceTrigger=PropertyChanged}"
                        FontFamily="{StaticResource ArtifaktElementRegular}"
                        FontSize="10px"
                        Foreground="#000000"
                        Style="{StaticResource SZoomFadeLabel}" />
                </Border>
            </Grid>
            <Label
                x:Name="LacingIconGlyph"
                Margin="2,0,0,0"
                Padding="0,2,0,0"
                VerticalContentAlignment="Center"
                Content="{Binding Path=ArgumentLacing, Converter={StaticResource LacingToAbbreviationConverter}}"
                FontFamily="{StaticResource ArtifaktElementRegular}"
                FontSize="10px"
                Foreground="#EBEBEB"
                Style="{StaticResource SZoomFadeLabel}"
                ToolTip="{Binding Path=ArgumentLacing, Converter={StaticResource LacingToTooltipConverter}}"
                Visibility="{Binding Path=ArgumentLacing, Converter={StaticResource LacingToVisibilityConverter}}" />
            <Grid
                x:Name="HiddenEyeGlyph"
                Width="20px"
                Height="15px"
                Margin="3,0,0,0"
                Visibility="{Binding Path=IsVisible, Converter={StaticResource InverseBoolToVisibilityConverter}, Mode=OneWay}">
                <Path
                    Canvas.ZIndex="2"
                    Data="M20,0 L1,15"
                    Stroke="#3C3C3C"
                    StrokeThickness="3" />
                <Path
                    Canvas.ZIndex="2"
                    Data="M20,0 L1,15"
                    Stroke="#EEEEEE" />
                <Ellipse
                    Width="8px"
                    Height="8px"
                    Canvas.ZIndex="1"
                    Stroke="#EEEEEE" />
                <Path Stroke="#EEEEEE" StrokeThickness="1">
                    <Path.Data>
                        <PathGeometry>
                            <PathGeometry.Figures>
                                <PathFigure IsClosed="False" StartPoint="0,7.5">
                                    <ArcSegment Point="20,7.5" Size="20 50" />
                                </PathFigure>
                            </PathGeometry.Figures>
                        </PathGeometry>
                    </Path.Data>
                </Path>
                <Path Stroke="#EEEEEE" StrokeThickness="1">
                    <Path.Data>
                        <PathGeometry>
                            <PathGeometry.Figures>
                                <PathFigure IsClosed="False" StartPoint="20,7.5">
                                    <ArcSegment Point="0,7.5" Size="20 40" />
                                </PathFigure>
                            </PathGeometry.Figures>
                        </PathGeometry>
                    </Path.Data>
                </Path>
            </Grid>
        </StackPanel>

        <Grid
            Name="PresentationGrid"
            Grid.Row="3"
            Grid.Column="0"
            Grid.ColumnSpan="3"
            Margin="13,0,0,14"
            HorizontalAlignment="Left"
            VerticalAlignment="Center"
            x:FieldModifier="public"
            Visibility="Collapsed"
            ZIndex="50">
            <!--  DO NOT ERASE THIS GRID TO BE USED FOR PRESENTING IMAGES, 3D VIEWS, ETC.  -->
        </Grid>

        <Rectangle
            Name="nodeBorder"
            Grid.Row="1"
            Grid.RowSpan="3"
            Grid.ColumnSpan="3"
            Canvas.ZIndex="40"
            Fill="Transparent"
            IsHitTestVisible="False" />

        <!--  Displays when the node is selected  -->
        <Border
            Name="selectionBorder"
            Grid.Row="1"
            Grid.RowSpan="3"
            Grid.ColumnSpan="3"
            Margin="-1"
            Background="Transparent"
            BorderBrush="{Binding PreviewState, Converter={StaticResource ConnectionStateToBrushConverter}}"
            BorderThickness="4"
            Canvas.ZIndex="41"
            CornerRadius="8,8,0,0"
            IsHitTestVisible="False" />

        <!--  DO NOT ERASE. THIS IS FOR DEBUGGING  -->
        <!--<Rectangle Name="ForceReexecBorder"
                   Grid.Row="1"
                   Grid.ColumnSpan="3"
                   Grid.RowSpan="3"
                   Fill="Transparent"
                   Stroke="#FFF000"
                   StrokeThickness="5"
                   StrokeLineJoin="Round"
                   IsHitTestVisible="False"
                   Canvas.ZIndex="100"
                   Opacity="2"
                   Margin="-1">
            <Rectangle.Visibility>
                <Binding Path="ShowExecutionPreview"
                         UpdateSourceTrigger="PropertyChanged"
                         Mode="OneWay"
                         Converter="{StaticResource BooleanToVisibilityConverter}">
                </Binding>
            </Rectangle.Visibility>
        </Rectangle>-->

        <Canvas
            Name="expansionBay"
            Grid.Row="4"
            Grid.Column="0"
            Grid.ColumnSpan="3"
            Margin="0,4,0,0"
            HorizontalAlignment="Left"
            Background="Blue" />

        <Canvas
            Grid.Row="4"
            Grid.Column="0"
            Grid.ColumnSpan="3"
            ClipToBounds="False"
            Visibility="{Binding ShowDebugASTs, Converter={StaticResource BooleanToVisibilityCollapsedConverter}}">
            <Label HorizontalContentAlignment="Center" Content="{Binding ASTText}" />
        </Canvas>
    </Grid>
</UserControl>
