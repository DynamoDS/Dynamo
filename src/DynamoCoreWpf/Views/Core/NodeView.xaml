<UserControl x:Class="Dynamo.Controls.NodeView"
             x:FieldModifier="public"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:dynui="clr-namespace:Dynamo.UI.Controls"
             xmlns:p="clr-namespace:Dynamo.Wpf.Properties"
             xmlns:configuration="clr-namespace:Dynamo.Configuration;assembly=DynamoCore"
             Height="Auto"
             Width="Auto"
             Name="topControl"
             MouseLeftButtonDown="topControl_MouseLeftButtonDown"
             MouseRightButtonDown="topControl_MouseRightButtonDown"
             MouseEnter="OnNodeViewMouseEnter"
             MouseLeave="OnNodeViewMouseLeave"
             PreviewMouseMove="OnNodeViewMouseMove"
             PreviewMouseLeftButtonDown="OnPreviewMouseLeftButtonDown">

    <Grid Name="grid"
          x:FieldModifier="public"
          HorizontalAlignment="Left">
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"></RowDefinition>
            <RowDefinition Height="Auto"
                           MaxHeight="{StaticResource NodeNameHeight}">
            </RowDefinition>
            <RowDefinition Height="Auto"></RowDefinition>
            <RowDefinition Height="Auto"></RowDefinition>
            <RowDefinition Height="Auto"></RowDefinition>
        </Grid.RowDefinitions>

        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="Auto"></ColumnDefinition>
            <ColumnDefinition Width="*"
                              MinWidth="40"></ColumnDefinition>
            <ColumnDefinition Width="Auto"></ColumnDefinition>
        </Grid.ColumnDefinitions>

        <!-- CONTEXT MENU -->

        <Grid.ContextMenu>
            <ContextMenu Name="MainContextMenu"
                         x:FieldModifier="public">
                <MenuItem Name="deleteElem_cm"
                          Header="{x:Static p:Resources.ContextMenuDelete}"
                          Command="{Binding Path=DeleteCommand}" />
                <MenuItem Name="createGroup_cm"
                          Header="{x:Static p:Resources.ContextCreateGroupFromSelection}"
                          Command="{Binding Path=CreateGroupCommand}" />
                <MenuItem Name="unGroup_cm"
                          Header="{x:Static p:Resources.ContextUnGroupFromSelection}"
                          Command="{Binding Path=UngroupCommand}" />
                <MenuItem Name="addtoGroup"
                          Header="{x:Static p:Resources.ContextAddGroupFromSelection}"
                          Command="{Binding Path=AddToGroupCommand}" />
                <MenuItem Header="{x:Static p:Resources.ContextMenuLacing}"
                          Visibility="{Binding Path=ArgumentLacing, Converter={StaticResource LacingToVisibilityConverter},Mode=OneWay}">
                    <MenuItem IsCheckable="True"
                              IsChecked="{Binding Path=ArgumentLacing,Converter={StaticResource EnumToBoolConverter},ConverterParameter=Auto,Mode=OneWay}"
                              Command="{Binding Path=SetLacingTypeCommand}"
                              CommandParameter="Auto"
                              Header="{x:Static p:Resources.ContextMenuLacingAuto}" />
                    <MenuItem IsCheckable="True"
                              IsChecked="{Binding Path=ArgumentLacing,Converter={StaticResource EnumToBoolConverter},ConverterParameter=Shortest,Mode=OneWay}"
                              Command="{Binding Path=SetLacingTypeCommand}"
                              CommandParameter="Shortest"
                              Header="{x:Static p:Resources.ContextMenuLacingShortest}" />
                    <MenuItem IsCheckable="True"
                              IsChecked="{Binding Path=ArgumentLacing,Converter={StaticResource EnumToBoolConverter},ConverterParameter=Longest,Mode=OneWay}"
                              Command="{Binding Path=SetLacingTypeCommand}"
                              CommandParameter="Longest"
                              Header="{x:Static p:Resources.ContextMenuLacingLongest}" />
                    <MenuItem IsCheckable="True"
                              IsChecked="{Binding Path=ArgumentLacing,Converter={StaticResource EnumToBoolConverter},ConverterParameter=CrossProduct,Mode=OneWay}"
                              Command="{Binding Path=SetLacingTypeCommand}"
                              CommandParameter="CrossProduct"
                              Header="{x:Static p:Resources.ContextMenuLacingCrossProduct}" />
                </MenuItem>
                <MenuItem Name="nodeIsFrozen"
                          Header="{x:Static p:Resources.NodesRunStatus}"
                          IsChecked="{Binding IsFrozenExplicitly,Mode=OneWay}"
                          IsEnabled="{Binding CanToggleFrozen, Mode=OneWay}"
                          Command="{Binding Path=ToggleIsFrozenCommand}" />
                <MenuItem Name="isVisible_cm"
                          Header="{x:Static p:Resources.NodeContextMenuPreview}"
                          IsChecked="{Binding Path=IsVisible,Mode=OneWay}"
                          Command="{Binding Path=ToggleIsVisibleCommand}"
                          Visibility="{Binding Path=ShowsVisibilityToggles, Converter={StaticResource BooleanToVisibilityCollapsedConverter}}" />
                <MenuItem Name="isDisplayLabelsEnabled_cm"
                          Header="{x:Static p:Resources.NodeContextMenuShowLabels}"
                          IsChecked="{Binding Path=IsDisplayingLabels, Mode=TwoWay}"
                          IsCheckable="True"
                          IsEnabled="{Binding Path=CanDisplayLabels}" />
                <MenuItem Name="enablePeriodicUpdate"
                          Header="{x:Static p:Resources.NodeContextMenuEnablePeriodicUpdate}"
                          IsCheckable="True"
                          IsChecked="{Binding Path=EnablePeriodicUpdate, Mode=OneWay}"
                          Visibility="{Binding PeriodicUpdateVisibility}"
                          IsEnabled="False" />
                <MenuItem Name="rename_cm"
                          Header="{x:Static p:Resources.NodeContextMenuRenameNode}"
                          Command="{Binding Path=RenameCommand}" />
                <MenuItem Name="isInput_cm"
                          Header="{x:Static p:Resources.NodeContextMenuIsInput}"
                          IsChecked="{Binding Path=IsSetAsInput,Mode=TwoWay}"
                          Visibility="{Binding Path=IsInput, Converter={StaticResource BooleanToVisibilityCollapsedConverter}}"
                          IsCheckable="True" />
                <MenuItem Name="isOutput_cm"
                          Header="{x:Static p:Resources.NodeContextMenuIsOutput}"
                          IsChecked="{Binding Path=IsSetAsOutput,Mode=TwoWay}"
                          Visibility="{Binding Path=IsOutput, Converter={StaticResource BooleanToVisibilityCollapsedConverter}}"
                          IsCheckable="True" />
                <MenuItem Name="help_cm"
                          Header="{x:Static p:Resources.NodeContextMenuHelp}"
                          Command="{Binding Path=ShowHelpCommand}" />
            </ContextMenu>
        </Grid.ContextMenu>

        <Rectangle Name="frozenBorder"
                   Grid.Row="1"
                   Grid.ColumnSpan="3"
                   Grid.RowSpan="3"
                   Canvas.ZIndex="1"
                   Margin="-5,-5,-5,-5"
                   StrokeDashArray="2"
                   StrokeThickness="3"
                   Opacity=".5"
                   Stroke="#444">
            <Rectangle.Style>
                <Style TargetType="{x:Type Rectangle}">
                    <Setter Property="Visibility"
                            Value="Hidden" />
                    <Style.Triggers>
                        <DataTrigger Binding="{Binding IsFrozen}"
                                     Value="True">
                            <Setter Property="Visibility"
                                    Value="Visible" />
                        </DataTrigger>
                    </Style.Triggers>
                </Style>
            </Rectangle.Style>
        </Rectangle>

        <Border Name="customNodeBorder0"
                Grid.Row="0"
                Grid.ColumnSpan="3"
                Canvas.ZIndex="1"
                Height="6"
                Margin="8,0,8,-1"
                VerticalAlignment="Bottom"
                BorderThickness="1"
                BorderBrush="#aaaaaa"
                Background="#dbd7d1">
            <Border.Visibility>
                <Binding Path="IsCustomFunction"
                         UpdateSourceTrigger="PropertyChanged"
                         Mode="OneWay"
                         Converter="{StaticResource BooleanToVisibilityConverter}">
                </Binding>
            </Border.Visibility>
        </Border>

        <Border Name="customNodeBorder1"
                Grid.Row="0"
                Grid.ColumnSpan="3"
                Canvas.ZIndex="2"
                Height="4"
                Margin="4,0,4,-1"
                VerticalAlignment="Bottom"
                BorderThickness="1"
                BorderBrush="#888888"
                Background="#dbd7d1">
            <Border.Visibility>
                <Binding Path="IsCustomFunction"
                         UpdateSourceTrigger="PropertyChanged"
                         Mode="OneWay"
                         Converter="{StaticResource BooleanToVisibilityConverter}">
                </Binding>
            </Border.Visibility>
        </Border>

        <Rectangle Name="nodeBackground"
                   Grid.Row="1"
                   Grid.ColumnSpan="3"
                   Grid.RowSpan="3"
                   Canvas.ZIndex="10">
            <Rectangle.Style>
                <Style TargetType="{x:Type Rectangle}">
                    <Style.Triggers>
                        <DataTrigger Binding="{Binding IsFrozen}"
                                     Value="True">
                            <Setter Property="Opacity"
                                    Value="0.5" />
                        </DataTrigger>
                    </Style.Triggers>
                </Style>
            </Rectangle.Style>
            <Rectangle.Fill>
                <Binding Path="State"
                         UpdateSourceTrigger="PropertyChanged"
                         Mode="OneWay"
                         ConverterParameter="BodyBackground"
                         Converter="{StaticResource StateToColorConverter}">
                </Binding>

            </Rectangle.Fill>
        </Rectangle>

        <Rectangle Name="NameBackground"
                   Grid.Row="1"
                   Grid.ColumnSpan="3"
                   StrokeThickness="0,0,0,1"
                   IsHitTestVisible="True"
                   Canvas.ZIndex="11"
                   ToolTipService.ShowDuration="60000"
                   MouseDown="NameBlock_OnMouseDown">
            <Rectangle.Stroke>
                <Binding Path="State"
                         UpdateSourceTrigger="PropertyChanged"
                         Mode="OneWay"
                         ConverterParameter="HeaderBorder"
                         Converter="{StaticResource StateToColorConverter}">
                </Binding>
            </Rectangle.Stroke>
            <Rectangle.Style>
                <Style TargetType="{x:Type Rectangle}">
                    <Style.Triggers>
                        <DataTrigger Binding="{Binding IsFrozen}"
                                     Value="True">
                            <Setter Property="Opacity"
                                    Value="0.5" />
                        </DataTrigger>
                    </Style.Triggers>
                </Style>
            </Rectangle.Style>
            <Rectangle.Fill>
                <Binding Path="State"
                         UpdateSourceTrigger="PropertyChanged"
                         Mode="OneWay"
                         ConverterParameter="HeaderBackground"
                         Converter="{StaticResource StateToColorConverter}">
                </Binding>
            </Rectangle.Fill>
            <Rectangle.ToolTip>
                <dynui:DynamoToolTip AttachmentSide="Top"
                                     Style="{DynamicResource ResourceKey=SLightToolTip}">
                    <Grid>
                        <StackPanel Orientation="Vertical"
                                    MaxWidth="320">
                            <StackPanel>
                                <TextBlock TextWrapping="Wrap"
                                           Text="{x:Static p:Resources.NodeTooltipOriginalName}">
                                </TextBlock>
                                <TextBlock TextWrapping="Wrap"
                                           Text="{Binding Path=OriginalName}"
                                           FontWeight="SemiBold">
                                </TextBlock>
                            </StackPanel>
                            <!--Space for splitting the original name and description-->
                            <StackPanel>
                                <TextBlock Text="&#xD;" />
                            </StackPanel>
                            <StackPanel>
                                <TextBlock TextWrapping="Wrap"
                                           Text="{x:Static p:Resources.NodeTooltipDescription}">
                                </TextBlock>
                                <TextBlock TextWrapping="Wrap"
                                           Text="{Binding Path=Description}"
                                           FontWeight="Normal">
                                </TextBlock>
                            </StackPanel>
                        </StackPanel>
                    </Grid>
                </dynui:DynamoToolTip>
            </Rectangle.ToolTip>
        </Rectangle>

        <Border Name="previewStateNameBlock"
                Grid.Row="1"
                Grid.ColumnSpan="3"
                Grid.RowSpan="1"
                Canvas.ZIndex="12"
                Margin="1,1,1,1"
                Background="#99B8CA"
                Opacity=".4"
                Style="{StaticResource SZoomFadePreview}"
                ToolTipService.ShowDuration="60000"
                MouseDown="NameBlock_OnMouseDown">
            <Border.Visibility>
                <Binding Path="IsVisible"
                         UpdateSourceTrigger="PropertyChanged"
                         Mode="OneWay"
                         Converter="{StaticResource InverseBoolToVisibilityConverter}">
                </Binding>
            </Border.Visibility>
            <Border.ToolTip>
                <dynui:DynamoToolTip AttachmentSide="Top"
                                     Style="{DynamicResource ResourceKey=SLightToolTip}">
                    <Grid>
                        <StackPanel Orientation="Vertical"
                                    MaxWidth="320">
                            <StackPanel>
                                <TextBlock TextWrapping="Wrap"
                                           Text="{x:Static p:Resources.NodeTooltipOriginalName}">
                                </TextBlock>
                                <TextBlock TextWrapping="Wrap"
                                           Text="{Binding Path=OriginalName}"
                                           FontWeight="SemiBold">
                                </TextBlock>
                            </StackPanel>
                            <!--Space for splitting the original name and description-->
                            <StackPanel>
                                <TextBlock Text="&#xD;" />
                            </StackPanel>
                            <StackPanel>
                                <TextBlock TextWrapping="Wrap"
                                           Text="{x:Static p:Resources.NodeTooltipDescription}">
                                </TextBlock>
                                <TextBlock TextWrapping="Wrap"
                                           Text="{Binding Path=Description}"
                                           FontWeight="Normal">
                                </TextBlock>
                            </StackPanel>
                        </StackPanel>
                    </Grid>
                </dynui:DynamoToolTip>
            </Border.ToolTip>
        </Border>
        <Border Name="previewState"
                Grid.Row="2"
                Grid.ColumnSpan="3"
                Grid.RowSpan="2"
                Canvas.ZIndex="12"
                Margin="1,1,1,1"
                Background="#99B8CA"
                Opacity=".4"
                Style="{StaticResource SZoomFadePreview}">
            <Border.Visibility>
                <Binding Path="IsVisible"
                         UpdateSourceTrigger="PropertyChanged"
                         Mode="OneWay"
                         Converter="{StaticResource InverseBoolToVisibilityConverter}">
                </Binding>
            </Border.Visibility>
        </Border>

        <StackPanel Orientation="Horizontal"
                    Grid.Row="1"
                    Grid.ColumnSpan="3"
                    Panel.ZIndex="12"
                    HorizontalAlignment="Center"
                    Margin="3 0 3 0">
            <TextBlock Name="NameBlock"
                       VerticalAlignment="Center"
                       HorizontalAlignment="Stretch"
                       Grid.ColumnSpan="3"
                       Text="{Binding Name, UpdateSourceTrigger=PropertyChanged}"
                       Padding="5"
                       FontSize="13"
                       FontWeight="SemiBold"
                       FontFamily="{StaticResource OpenSansSemibold}"
                       TextAlignment="Center"
                       IsHitTestVisible="False"
                       Background="{x:Null}"
                       Style="{StaticResource SZoomFadeText}">
                <TextBlock.Foreground>
                    <Binding Path="State"
                             UpdateSourceTrigger="PropertyChanged"
                             Mode="OneWay"
                             ConverterParameter="HeaderForeground"
                             Converter="{StaticResource StateToColorConverter}">
                    </Binding>
                </TextBlock.Foreground>
            </TextBlock>

            <Border CornerRadius="3,3,3,3"
                    Height="12"
                    Width="Auto"
                    Background="{StaticResource renamedLabelBackground}"
                    Margin="3 0 3 0">
                <Border.Style>
                    <Style TargetType="{x:Type Border}">
                        <Setter Property="Visibility"
                                Value="Collapsed" />
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding IsRenamed}"
                                         Value="True">
                                <Setter Property="Visibility"
                                        Value="Visible" />
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </Border.Style>
                <TextBlock Text="Renamed"
                           HorizontalAlignment="Center"
                           VerticalAlignment="Center"
                           FontStyle="Italic"
                           FontSize="8"
                           Width="Auto"
                           FontFamily="Consolas"
                           Margin="2 0 2 0">
                    <TextBlock.Style>
                        <Style TargetType="{x:Type TextBlock}">
                            <Setter Property="Visibility"
                                    Value="Hidden" />
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding IsRenamed}"
                                             Value="True">
                                    <Setter Property="Visibility"
                                            Value="Visible" />
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </TextBlock.Style>
                </TextBlock>
            </Border>

        </StackPanel>

        




        <!-- INPUT PORTS -->
        <ItemsControl Name="inputPortControl"
                      Grid.Row="2"
                      Grid.Column="0"
                      Canvas.ZIndex="20"
                      HorizontalContentAlignment="Stretch"
                      Style="{StaticResource InOutPortControlStyle}"
                      ItemsSource="{Binding Path=InPorts}">
        </ItemsControl>

        <!-- OUTPUT PORTS -->
        <ItemsControl Name="outputPortControl"
                      Grid.Row="2"
                      Grid.Column="2"
                      Canvas.ZIndex="20"
                      HorizontalContentAlignment="Stretch"
                      Style="{StaticResource InOutPortControlStyle}"
                      ItemsSource="{Binding Path=OutPorts}">
        </ItemsControl>

        <Grid Name="centralGrid"
              Grid.Column="1"
              Grid.Row="2"
              Canvas.ZIndex="20">

            <Grid.RowDefinitions>
                <RowDefinition Height="auto"></RowDefinition>
                <RowDefinition Height="*"></RowDefinition>
                <RowDefinition Height="*"></RowDefinition>
            </Grid.RowDefinitions>

            <!-- INPUT GRID -->

            <Grid Name="inputGrid"
                  x:FieldModifier="public"
                  VerticalAlignment="Stretch"
                  HorizontalAlignment="Stretch"
                  Canvas.ZIndex="21"
                  IsEnabled="{Binding Path=IsInteractionEnabled}"
                  MinHeight="{Binding Source={x:Static configuration:Configurations.PortHeightInPixels}}">
            </Grid>

        </Grid>

        <StackPanel Name="GlyphStackPanel"
                    HorizontalAlignment="Right"
                    Orientation="Horizontal"
                    Grid.Column="0"
                    Grid.Row="3"
                    Grid.ColumnSpan="3"
                    Canvas.ZIndex="30"
                    Height="25"
                    Visibility="{Binding ShouldShowGlyphBar, Converter={StaticResource BooleanToVisibilityCollapsedConverter}}">

            <Grid>
                <TextBlock Name="lacingOptionTextBlock"
                           Text="{Binding Path=ArgumentLacing, Converter={StaticResource LacingToAbbreviationConverter}}"
                           ToolTip="{Binding Path=ArgumentLacing, Converter={StaticResource LacingToTooltipConverter}}"
                           Visibility="{Binding Path=ArgumentLacing, Converter={StaticResource LacingToVisibilityConverter}}"
                           FontFamily="Tahoma"
                           FontSize="8"
                           Margin="5"
                           HorizontalAlignment="Right"
                           VerticalAlignment="Center"
                           Foreground="#99000000"
                           FontWeight="Bold" />
            </Grid>
        </StackPanel>

        <Grid Name="PresentationGrid"
              x:FieldModifier="public"
              Grid.Row="3"
              Grid.Column="0"
              Grid.ColumnSpan="3"
              Margin="5"
              ZIndex="50"
              Visibility="Collapsed">
            <!--DO NOT ERASE THIS GRID TO BE USED FOR PRESENTING IMAGES, 3D VIEWS, ETC.-->
        </Grid>

        <Rectangle Name="nodeBorder"
                   Grid.Row="1"
                   Grid.ColumnSpan="3"
                   Grid.RowSpan="3"
                   StrokeThickness="1"
                   Fill="Transparent"
                   IsHitTestVisible="False"
                   Canvas.ZIndex="40">
            <Rectangle.Stroke>
                <Binding Path="State"
                         UpdateSourceTrigger="PropertyChanged"
                         Mode="OneWay"
                         ConverterParameter="OuterBorder"
                         Converter="{StaticResource StateToColorConverter}">
                </Binding>
            </Rectangle.Stroke>
        </Rectangle>

        <Rectangle Name="selectionBorder"
                   Grid.Row="1"
                   Grid.ColumnSpan="3"
                   Grid.RowSpan="3"
                   Fill="Transparent"
                   Stroke="{Binding PreviewState, Converter={StaticResource ConnectionStateToBrushConverter}}"
                   StrokeThickness="2"
                   IsHitTestVisible="False"
                   Canvas.ZIndex="41"
                   Margin="-1">
            <Rectangle.Visibility>
                <Binding Path="PreviewState"
                         UpdateSourceTrigger="PropertyChanged"
                         Mode="OneWay"
                         Converter="{StaticResource ConnectionStateToVisibilityCollapsedConverter}">
                </Binding>
            </Rectangle.Visibility>
        </Rectangle>

        <!--DO NOT ERASE. THIS IS FOR DEBUGGING-->
        <!--<Rectangle Name="ForceReexecBorder"
                   Grid.Row="1"
                   Grid.ColumnSpan="3"
                   Grid.RowSpan="3"
                   Fill="Transparent"
                   Stroke="#FFF000"
                   StrokeThickness="5"
                   StrokeLineJoin="Round"
                   IsHitTestVisible="False"                   
                   Canvas.ZIndex="100"
                   Opacity="2"
                   Margin="-1">
            <Rectangle.Visibility>
                <Binding Path="ShowExecutionPreview"
                         UpdateSourceTrigger="PropertyChanged"
                         Mode="OneWay"
                         Converter="{StaticResource BooleanToVisibilityConverter}">
                </Binding>
            </Rectangle.Visibility>
        </Rectangle>-->

        <Canvas Name="expansionBay"
                Grid.Row="4"
                Grid.Column="0"
                Grid.ColumnSpan="3"
                Margin="0,4,0,0"
                HorizontalAlignment="Left"
                Background="Blue" />

        <Canvas ClipToBounds="False"
                Grid.Row="4"
                Grid.Column="0"
                Grid.ColumnSpan="3"
                Visibility="{Binding ShowDebugASTs, Converter={StaticResource BooleanToVisibilityCollapsedConverter}}">
            <Label Content="{Binding ASTText}"
                   HorizontalContentAlignment="Center"></Label>
        </Canvas>
    </Grid>
</UserControl>
