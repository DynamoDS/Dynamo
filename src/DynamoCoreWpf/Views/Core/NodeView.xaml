<UserControl x:Class="Dynamo.Controls.NodeView"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:configuration="clr-namespace:Dynamo.Configuration;assembly=DynamoCore"
             xmlns:dynui="clr-namespace:Dynamo.UI.Controls"
             xmlns:p="clr-namespace:Dynamo.Wpf.Properties"
             xmlns:ui="clr-namespace:Dynamo.UI"
             xmlns:viewmodels="clr-namespace:Dynamo.ViewModels"
             Name="topControl"
             Width="Auto"
             Height="Auto"
             x:FieldModifier="public"
             MouseEnter="OnNodeViewMouseEnter"
             MouseLeave="OnNodeViewMouseLeave"
             MouseLeftButtonDown="topControl_MouseLeftButtonDown"
             MouseRightButtonDown="topControl_MouseRightButtonDown"
             PreviewMouseLeftButtonDown="OnPreviewMouseLeftButtonDown"
             PreviewMouseMove="OnNodeViewMouseMove">

    <Grid Name="grid"
          HorizontalAlignment="Left"
          x:FieldModifier="public"
          ContextMenuService.IsEnabled="false"
          Visibility="{Binding IsCollapsed, Converter={StaticResource InverseBoolToVisibilityConverter}}">
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto" />
            <RowDefinition Height="Auto" />
            <RowDefinition Height="Auto" />
            <RowDefinition Height="Auto" MinHeight="24" />
            <RowDefinition Height="Auto" />
        </Grid.RowDefinitions>
        <!--  Sets grid to 70% opacity when node is frozen  -->
        <Grid.Style>
            <Style>
                <Style.Triggers>
                    <DataTrigger Binding="{Binding IsFrozen, UpdateSourceTrigger=PropertyChanged}" Value="True">
                        <Setter Property="Grid.Opacity" Value="0.7" />
                    </DataTrigger>
                </Style.Triggers>
            </Style>
        </Grid.Style>
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="Auto" />
            <ColumnDefinition Width="*" MinWidth="10" />
            <ColumnDefinition Width="Auto" />
        </Grid.ColumnDefinitions>

        <!--  CONTEXT MENU  -->
        <Grid.ContextMenu>
            <ContextMenu Name="MainContextMenu" x:FieldModifier="public">
                <ContextMenu.Resources>
                    <ResourceDictionary>
                        <ResourceDictionary.MergedDictionaries>
                            <ui:SharedResourceDictionary Source="{x:Static ui:SharedDictionaryManager.DynamoConvertersDictionaryUri}" />
                            <ui:SharedResourceDictionary Source="{x:Static ui:SharedDictionaryManager.DynamoModernDictionaryUri}" />
                        </ResourceDictionary.MergedDictionaries>
                        <Style TargetType="{x:Type MenuItem}">
                            <Setter Property="IsChecked" Value="{DynamicResource IsChecked}" />
                            <Setter Property="Height" Value="30" />
                            <Setter Property="Width" Value="240" />
                            <Setter Property="Padding" Value="20,0,20,0" />
                            <Setter Property="Template">
                                <Setter.Value>
                                    <ControlTemplate TargetType="{x:Type MenuItem}">
                                        <DockPanel x:Name="dockPanel"
                                                   HorizontalAlignment="Stretch"
                                                   Background="Transparent"
                                                   SnapsToDevicePixels="true">
                                            <Label x:Name="checkBox"
                                                   Margin="2,0,-20,0"
                                                   HorizontalAlignment="Left"
                                                   VerticalAlignment="Center"
                                                   HorizontalContentAlignment="Center"
                                                   VerticalContentAlignment="Center"
                                                   Content="✓"
                                                   DockPanel.Dock="Left"
                                                   FontSize="9px"
                                                   Foreground="White"
                                                   Visibility="Collapsed" />
                                            <ContentPresenter x:Name="ContentPresenter"
                                                              Margin="{TemplateBinding Padding}"
                                                              VerticalAlignment="Center"
                                                              ContentSource="Header"
                                                              DockPanel.Dock="Left"
                                                              RecognizesAccessKey="True"
                                                              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                                              TextBlock.Foreground="{StaticResource NodeContextMenuForeground}" />
                                            <Border x:Name="dismissedAlertsBadge"
                                                    Height="15"
                                                    MinWidth="15"
                                                    Margin="-15,0,0,1"
                                                    HorizontalAlignment="Left"
                                                    VerticalAlignment="Center"
                                                    Background="{StaticResource NodeDismissedWarningsGlyphBackground}"
                                                    CornerRadius="7.5"
                                                    DockPanel.Dock="Left"
                                                    Visibility="Hidden">
                                                <Label Padding="2,2,2,0"
                                                       HorizontalAlignment="Center"
                                                       VerticalAlignment="Center"
                                                       HorizontalContentAlignment="Center"
                                                       VerticalContentAlignment="Center"
                                                       Content="{Binding NumberOfDismissedAlerts, UpdateSourceTrigger=PropertyChanged}"
                                                       FontFamily="{StaticResource ArtifaktElementRegular}"
                                                       FontSize="9px"
                                                       Foreground="{StaticResource NodeDismissedWarningsGlyphForeground}" />
                                            </Border>
                                            <Label x:Name="subMenuArrow"
                                                   Margin="0,0,20,7"
                                                   Padding="0"
                                                   VerticalAlignment="Center"
                                                   Content="&gt;"
                                                   DockPanel.Dock="Right"
                                                   FontFamily="{StaticResource ArtifaktElementRegular}"
                                                   FontSize="13px"
                                                   Foreground="{StaticResource Blue300Brush}">
                                                <Label.RenderTransform>
                                                    <ScaleTransform ScaleX="1" ScaleY="1.5" />
                                                </Label.RenderTransform>
                                                <Label.Style>
                                                    <Style TargetType="{x:Type Label}">
                                                        <Setter Property="Visibility" Value="Hidden" />
                                                        <Style.Triggers>
                                                            <DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType={x:Type MenuItem}}, Path=HasItems}" Value="True">
                                                                <Setter Property="Visibility" Value="Visible" />
                                                            </DataTrigger>
                                                        </Style.Triggers>
                                                    </Style>
                                                </Label.Style>
                                            </Label>
                                            <Popup x:Name="PART_Popup"
                                                   AllowsTransparency="true"
                                                   Focusable="false"
                                                   HorizontalOffset="0"
                                                   IsOpen="{Binding IsSubmenuOpen, RelativeSource={RelativeSource TemplatedParent}}"
                                                   Placement="Left"
                                                   VerticalOffset="-2">
                                                <Border Background="{TemplateBinding Background}"
                                                        BorderBrush="Transparent"
                                                        BorderThickness="0">
                                                    <ScrollViewer x:Name="SubMenuScrollViewer"
                                                                  CanContentScroll="true"
                                                                  Style="{DynamicResource {ComponentResourceKey ResourceId=MenuScrollViewer,
                                                                                                                TypeInTargetAssembly={x:Type FrameworkElement}}}">
                                                        <Grid RenderOptions.ClearTypeHint="Enabled">
                                                            <ItemsPresenter x:Name="ItemsPresenter"
                                                                            Margin="2"
                                                                            Grid.IsSharedSizeScope="true"
                                                                            KeyboardNavigation.DirectionalNavigation="Cycle"
                                                                            KeyboardNavigation.TabNavigation="Cycle"
                                                                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                                                        </Grid>
                                                    </ScrollViewer>
                                                </Border>
                                            </Popup>
                                        </DockPanel>
                                        <ControlTemplate.Triggers>
                                            <Trigger Property="IsEnabled" Value="False">
                                                <Setter TargetName="ContentPresenter" Property="TextBlock.Opacity" Value="0.5" />
                                            </Trigger>
                                            <Trigger Property="IsMouseOver" Value="True">
                                                <Setter TargetName="ContentPresenter" Property="TextBlock.Foreground" Value="White" />
                                                <Setter TargetName="dockPanel" Property="Background" Value="{StaticResource NodeContextMenuBackgroundHighlight}" />
                                            </Trigger>
                                            <Trigger Property="IsMouseOver" Value="False">
                                                <Setter TargetName="dockPanel" Property="Background" Value="{StaticResource NodeContextMenuBackground}" />
                                            </Trigger>
                                            <DataTrigger Binding="{Binding ElementName=ContentPresenter, Path=Content}" Value="Dismissed Alerts">
                                                <Setter TargetName="dismissedAlertsBadge" Property="Visibility" Value="Visible" />
                                            </DataTrigger>
                                            <Trigger Property="IsChecked" Value="True">
                                                <Setter TargetName="checkBox" Property="Visibility" Value="Visible" />
                                            </Trigger>
                                        </ControlTemplate.Triggers>
                                    </ControlTemplate>
                                </Setter.Value>
                            </Setter>
                        </Style>
                        <Style x:Key="{x:Static MenuItem.SeparatorStyleKey}" TargetType="Separator">
                            <Setter Property="OverridesDefaultStyle" Value="true" />
                            <Setter Property="Template">
                                <Setter.Value>
                                    <ControlTemplate TargetType="{x:Type Separator}">
                                        <Border Height="1"
                                                Margin="20,8,20,8"
                                                Background="{StaticResource NodeContextMenuSeparatorColor}" />
                                    </ControlTemplate>
                                </Setter.Value>
                            </Setter>
                        </Style>
                    </ResourceDictionary>
                </ContextMenu.Resources>
                <MenuItem Name="deleteElem_cm"
                          Command="{Binding Path=DeleteCommand}"
                          Header="{x:Static p:Resources.ContextMenuDelete}"
                          IsCheckable="False" />
                <MenuItem Header="{x:Static p:Resources.ContextMenuGroups}" IsCheckable="False">
                    <MenuItem Name="createGroup_cm"
                              Command="{Binding Path=CreateGroupCommand}"
                              Header="{x:Static p:Resources.ContextCreateGroupFromSelection}" />
                    <MenuItem Name="unGroup_cm"
                              Command="{Binding Path=UngroupCommand}"
                              Header="{x:Static p:Resources.ContextUnGroupFromSelection}" />
                    <MenuItem Name="addtoGroup"
                              Command="{Binding Path=AddToGroupCommand}"
                              Header="{x:Static p:Resources.ContextAddGroupFromSelection}" />
                </MenuItem>
                <MenuItem Name="isVisible_cm"
                          Command="{Binding Path=ToggleIsVisibleCommand}"
                          Header="{x:Static p:Resources.NodeContextMenuPreview}"
                          IsCheckable="True"
                          IsChecked="{Binding Path=IsVisible, Mode=OneWay}"
                          Visibility="{Binding Path=ShowsVisibilityToggles, Converter={StaticResource BooleanToVisibilityCollapsedConverter}}" />
                <MenuItem Name="nodeIsFrozen"
                          Command="{Binding Path=ToggleIsFrozenCommand}"
                          Header="{x:Static p:Resources.NodesRunStatus}"
                          IsCheckable="True"
                          IsChecked="{Binding IsFrozenExplicitly, Mode=OneWay}"
                          IsEnabled="{Binding CanToggleFrozen, Mode=OneWay}" />
                <MenuItem Name="isDisplayLabelsEnabled_cm"
                          Header="{x:Static p:Resources.NodeContextMenuShowLabels}"
                          IsCheckable="True"
                          IsChecked="{Binding Path=IsDisplayingLabels, Mode=TwoWay}"
                          IsEnabled="{Binding Path=CanDisplayLabels}" />
                <MenuItem Name="rename_cm"
                          Command="{Binding Path=RenameCommand}"
                          Header="{x:Static p:Resources.NodeContextMenuRenameNode}"
                          IsCheckable="False" />
                <MenuItem Header="{x:Static p:Resources.ContextMenuLacing}"
                          IsCheckable="False"
                          Visibility="{Binding Path=ArgumentLacing, Converter={StaticResource LacingToVisibilityConverter}, Mode=OneWay}">
                    <MenuItem Command="{Binding Path=SetLacingTypeCommand}"
                              CommandParameter="Auto"
                              Header="{x:Static p:Resources.ContextMenuLacingAuto}"
                              IsCheckable="True"
                              IsChecked="{Binding Path=ArgumentLacing, Converter={StaticResource EnumToBoolConverter}, ConverterParameter=Auto, Mode=OneWay}" />
                    <MenuItem Command="{Binding Path=SetLacingTypeCommand}"
                              CommandParameter="Shortest"
                              Header="{x:Static p:Resources.ContextMenuLacingShortest}"
                              IsCheckable="True"
                              IsChecked="{Binding Path=ArgumentLacing, Converter={StaticResource EnumToBoolConverter}, ConverterParameter=Shortest, Mode=OneWay}" />
                    <MenuItem Command="{Binding Path=SetLacingTypeCommand}"
                              CommandParameter="Longest"
                              Header="{x:Static p:Resources.ContextMenuLacingLongest}"
                              IsCheckable="True"
                              IsChecked="{Binding Path=ArgumentLacing, Converter={StaticResource EnumToBoolConverter}, ConverterParameter=Longest, Mode=OneWay}" />
                    <MenuItem Command="{Binding Path=SetLacingTypeCommand}"
                              CommandParameter="CrossProduct"
                              Header="{x:Static p:Resources.ContextMenuLacingCrossProduct}"
                              IsCheckable="True"
                              IsChecked="{Binding Path=ArgumentLacing, Converter={StaticResource EnumToBoolConverter}, ConverterParameter=CrossProduct, Mode=OneWay}" />
                </MenuItem>
                <MenuItem Name="dismissedAlerts" Header="Dismissed Alerts" />
                <Separator Visibility="{Binding Path=IsInputOrOutput, Converter={StaticResource BooleanToVisibilityCollapsedConverter}}"/>
                <MenuItem Name="isInput_cm"
                          Header="{x:Static p:Resources.NodeContextMenuIsInput}"
                          IsCheckable="True"
                          IsChecked="{Binding Path=IsSetAsInput, Mode=TwoWay}"
                          Visibility="{Binding Path=IsInput, Converter={StaticResource BooleanToVisibilityCollapsedConverter}}" />
                <MenuItem Name="isOutput_cm"
                          Header="{x:Static p:Resources.NodeContextMenuIsOutput}"
                          IsCheckable="True"
                          IsChecked="{Binding Path=IsSetAsOutput, Mode=TwoWay}"
                          Visibility="{Binding Path=IsOutput, Converter={StaticResource BooleanToVisibilityCollapsedConverter}}" />
                <Separator />
                <MenuItem Name="help_cm"
                          Command="{Binding Path=ShowHelpCommand}"
                          Header="{x:Static p:Resources.NodeContextMenuHelp}"
                          IsCheckable="False" />
                <ContextMenu.Style>
                    <Style TargetType="{x:Type ContextMenu}">
                        <Setter Property="Placement" Value="MousePoint" />
                        <Setter Property="Foreground" Value="{StaticResource NodeContextMenuForeground}" />
                        <Setter Property="FontSize" Value="13px" />
                        <Setter Property="FontFamily" Value="{StaticResource ArtifaktElementRegular}" />
                        <Setter Property="FontWeight" Value="Medium" />
                        <Setter Property="SnapsToDevicePixels" Value="True" />
                        <Setter Property="OverridesDefaultStyle" Value="True" />
                        <Setter Property="Template">
                            <Setter.Value>
                                <ControlTemplate TargetType="{x:Type ContextMenu}">
                                    <Border x:Name="Border"
                                            Background="{StaticResource NodeContextMenuBackground}"
                                            BorderThickness="0px">
                                        <StackPanel Margin="0,10"
                                                    ClipToBounds="True"
                                                    IsItemsHost="True"
                                                    Orientation="Vertical" />
                                    </Border>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                    </Style>
                </ContextMenu.Style>
            </ContextMenu>
        </Grid.ContextMenu>

        <!--  Graphical Styling of Custom Nodes  -->
        <Border Name="customNodeBorder0"
                Grid.Row="0"
                Grid.ColumnSpan="3"
                Height="8"
                Margin="16,0"
                VerticalAlignment="Bottom"
                Background="#959595"
                Canvas.ZIndex="0"
                CornerRadius="6,6,0,0">
            <Border.Visibility>
                <Binding Converter="{StaticResource BooleanToVisibilityConverter}"
                         Mode="OneWay"
                         Path="IsCustomFunction"
                         UpdateSourceTrigger="PropertyChanged" />
            </Border.Visibility>
        </Border>
        <Border Name="customNodeBorder1"
                Grid.Row="0"
                Grid.ColumnSpan="3"
                Height="4"
                Margin="8,0"
                VerticalAlignment="Bottom"
                Background="#747474"
                Canvas.ZIndex="0"
                CornerRadius="6,6,0,0">
            <Border.Visibility>
                <Binding Converter="{StaticResource BooleanToVisibilityConverter}"
                         Mode="OneWay"
                         Path="IsCustomFunction"
                         UpdateSourceTrigger="PropertyChanged" />
            </Border.Visibility>
        </Border>

        <!--  Node Body Background  -->
        <Border Name="nodeBackground"
                Grid.Row="1"
                Grid.RowSpan="4"
                Grid.ColumnSpan="3"
                Background="{StaticResource DarkerGreyBrush}"
                Canvas.ZIndex="1"
                CornerRadius="8,8,0,0" />

        <!--  Node Header Background  -->
        <Border Name="nameBackground"
                Grid.Row="1"
                Grid.Column="0"
                Grid.ColumnSpan="3"
                Height="46px"
                Background="{StaticResource DarkMidGreyBrush}"
                Canvas.ZIndex="2"
                CornerRadius="8,8,0,0">
            <Rectangle Fill="Transparent"
                       IsHitTestVisible="True"
                       MouseDown="NameBlock_OnMouseDown"
                       ToolTipService.ShowDuration="60000">
                <Rectangle.ToolTip>
                    <dynui:DynamoToolTip AttachmentSide="Top" Style="{DynamicResource ResourceKey=SLightToolTip}">
                        <Grid>
                            <StackPanel MaxWidth="320"
                                        Margin="10"
                                        Orientation="Vertical">
                                <StackPanel>
                                    <TextBlock FontFamily="{StaticResource ArtifaktElementRegular}"
                                               FontWeight="Medium"
                                               TextWrapping="Wrap">
                                        <Run Text="{x:Static p:Resources.NodeTooltipOriginalName}" />
                                        <Run Text="{Binding Path=OriginalName, Mode=OneWay}" />
                                    </TextBlock>
                                    <TextBlock Text="&#x0a;" />
                                    <TextBlock FontFamily="{StaticResource ArtifaktElementRegular}"
                                               FontWeight="Medium"
                                               TextWrapping="Wrap">
                                        <Run Text="{x:Static p:Resources.NodeTooltipDescription}" />
                                        <Run Text="{Binding Path=Description, Mode=OneWay}" />
                                    </TextBlock>
                                </StackPanel>
                            </StackPanel>
                        </Grid>
                    </dynui:DynamoToolTip>
                </Rectangle.ToolTip>
            </Rectangle>
        </Border>

        <!--  Displays the node's header content, such as its icon, name and whether it's been renamed  -->
        <DockPanel Name="nodeHeaderContent"
                   Grid.Row="1"
                   Grid.ColumnSpan="3"
                   Margin="6"
                   HorizontalAlignment="Stretch"
                   VerticalAlignment="Top"
                   Panel.ZIndex="3"
                   FlowDirection="LeftToRight">
            <!--  The Icon for this Node  -->
            <Ellipse Name="nodeIcon"
                     Width="34"
                     Height="34">
                <Ellipse.Style>
                    <Style TargetType="Ellipse">
                        <Setter Property="Fill">
                            <Setter.Value>
                                <ImageBrush ImageSource="{Binding ImageSource}" Stretch="UniformToFill" />
                            </Setter.Value>
                        </Setter>
                        <Style.Triggers>
                            <!--  If no icon can be found, use default icon  -->
                            <DataTrigger Binding="{Binding ImageSource, UpdateSourceTrigger=PropertyChanged}" Value="{x:Null}">
                                <Setter Property="Fill">
                                    <Setter.Value>
                                        <ImageBrush ImageSource="/DynamoCoreWpf;component/UI/Images/default-node-icon.png" Stretch="UniformToFill" />
                                    </Setter.Value>
                                </Setter>
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </Ellipse.Style>
            </Ellipse>

            <TextBlock Name="NameBlock"
                       Margin="6,3,6,0"
                       VerticalAlignment="Center"
                       Background="{x:Null}"
                       FontFamily="{StaticResource ArtifaktElementRegular}"
                       FontSize="16px"
                       FontWeight="Medium"
                       Foreground="{StaticResource PrimaryCharcoal200Brush}"
                       IsHitTestVisible="False"
                       Style="{StaticResource SZoomFadeText}"
                       Text="{Binding Name, UpdateSourceTrigger=PropertyChanged}"
                       TextAlignment="Center" />
            <!--  Ellipse sits within Grid to increase size of MouseOver/ToolTip area  -->
            <Grid HorizontalAlignment="Right"
                  VerticalAlignment="Center"
                  Panel.ZIndex="100"
                  Background="Transparent"
                  DockPanel.Dock="Right">
                <Ellipse Name="nodeRenamedBlueDot"
                         Width="8"
                         Height="8"
                         Margin="0,2,6,0"
                         Fill="{StaticResource Blue300Brush}"
                         Visibility="{Binding IsRenamed, Converter={StaticResource BooleanToVisibilityConverter}}" />
                <Grid.ToolTip>
                    <dynui:DynamoToolTip AttachmentSide="Top" Style="{DynamicResource ResourceKey=SLightToolTip}">
                        <Grid>
                            <TextBlock Padding="8,10"
                                       FontFamily="{StaticResource ArtifaktElementRegular}"
                                       FontSize="14"
                                       FontWeight="Medium"
                                       Text="{Binding Path=OriginalName, UpdateSourceTrigger=PropertyChanged, StringFormat='Renamed from {0}'}"
                                       TextAlignment="Center"
                                       TextWrapping="Wrap" />
                        </Grid>
                    </dynui:DynamoToolTip>
                </Grid.ToolTip>
            </Grid>
        </DockPanel>

        <!--  INPUT PORTS  -->
        <ItemsControl Name="inputPortControl"
                      Grid.Row="2"
                      Grid.Column="0"
                      Margin="0,3,0,0"
                      VerticalAlignment="Top"
                      HorizontalContentAlignment="Stretch"
                      Canvas.ZIndex="4"
                      ItemsSource="{Binding Path=InPorts}"
                      Style="{StaticResource InOutPortControlStyle}" />

        <!--  OUTPUT PORTS  -->
        <ItemsControl Name="outputPortControl"
                      Grid.Row="2"
                      Grid.Column="2"
                      Margin="{Binding OriginalName, Converter={StaticResource NodeOriginalNameToMarginConverter}}"
                      VerticalAlignment="Top"
                      HorizontalContentAlignment="Stretch"
                      Canvas.ZIndex="4"
                      ItemsSource="{Binding Path=OutPorts}"
                      Style="{StaticResource InOutPortControlStyle}" />

        <Grid Name="centralGrid"
              Grid.Row="2"
              Grid.Column="1"
              Margin="6,6,6,3"
              VerticalAlignment="Top"
              Canvas.ZIndex="4">

            <Grid.RowDefinitions>
                <RowDefinition Height="auto" />
                <RowDefinition Height="*" />
                <RowDefinition Height="*" />
            </Grid.RowDefinitions>

            <!--  INPUT GRID  -->

            <Grid Name="inputGrid"
                  MinHeight="{Binding Source={x:Static configuration:Configurations.PortHeightInPixels}}"
                  HorizontalAlignment="Stretch"
                  VerticalAlignment="Stretch"
                  x:FieldModifier="public"
                  Canvas.ZIndex="5"
                  IsEnabled="{Binding Path=IsInteractionEnabled}" />
        </Grid>

        <StackPanel Name="GlyphStackPanel"
                    Grid.Row="3"
                    Grid.Column="0"
                    Grid.ColumnSpan="3"
                    Margin="0,0,6,2"
                    HorizontalAlignment="Right"
                    VerticalAlignment="Bottom"
                    Canvas.ZIndex="4"
                    FlowDirection="LeftToRight"
                    Orientation="Horizontal">
            <Grid x:Name="HiddenEyeGlyph" Visibility="{Binding Path=IsVisible, Converter={StaticResource InverseBoolToVisibilityConverter}, Mode=OneWay}">
                <Image Width="16px"
                       Height="16px"
                       HorizontalAlignment="Center"
                       VerticalAlignment="Center"
                       Source="/DynamoCoreWpf;component/UI/Images/hidden.png"
                       Stretch="UniformToFill" />
            </Grid>
            <Label x:Name="LacingIconGlyph"
                   Margin="0,1,0,-1"
                   HorizontalContentAlignment="Center"
                   VerticalContentAlignment="Center"
                   Content="{Binding Path=ArgumentLacing, Converter={StaticResource LacingToAbbreviationConverter}}"
                   FontFamily="{StaticResource ArtifaktElementRegular}"
                   FontSize="10px"
                   Foreground="{StaticResource NodeLacingGlyphBackground}"
                   Style="{StaticResource SZoomFadeLabel}"
                   ToolTip="{Binding Path=ArgumentLacing, Converter={StaticResource LacingToTooltipConverter}}"
                   ToolTipService.ShowDuration="30000"
                   Visibility="{Binding Path=ArgumentLacing, Converter={StaticResource LacingToVisibilityConverter}}" />
            <Grid Name="AlertsGlyph"
                  Width="Auto"
                  Height="16">
                <Border Background="{StaticResource NodeDismissedWarningsGlyphBackground}" CornerRadius="10">
                    <Label Padding="3,2,3,0"
                           HorizontalAlignment="Center"
                           VerticalAlignment="Center"
                           HorizontalContentAlignment="Center"
                           VerticalContentAlignment="Center"
                           Content="{Binding NumberOfDismissedAlerts, UpdateSourceTrigger=PropertyChanged}"
                           FontFamily="{StaticResource ArtifaktElementRegular}"
                           FontSize="10px"
                           Foreground="Black"
                           Style="{StaticResource SZoomFadeLabel}" />
                </Border>
                <Grid.Style>
                    <Style TargetType="Grid">
                        <Setter Property="Visibility" Value="Visible" />
                        <Setter Property="MinWidth" Value="16" />
                        <Setter Property="Margin" Value="3,0,0,0" />
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding NumberOfDismissedAlerts}" Value="0">
                                <Setter Property="Grid.MinWidth" Value="0" />
                                <Setter Property="Grid.Margin" Value="0" />
                                <Setter Property="Visibility" Value="Collapsed" />
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </Grid.Style>
            </Grid>
            <Button x:Name="OptionsButton"
                    Click="OptionsButton_Click"
                    ToolTip="{x:Static p:Resources.ContextMenu}">
                <Button.Style>
                    <Style TargetType="{x:Type Button}">
                        <Setter Property="Template">
                            <Setter.Value>
                                <ControlTemplate TargetType="{x:Type Button}">
                                    <Grid>
                                        <Border x:Name="DotsBackgroundBorder"
                                                Width="24"
                                                Height="24"
                                                Background="Transparent"
                                                CornerRadius="2" />
                                        <Image x:Name="DotsImage"
                                               Width="16px"
                                               Height="16px"
                                               Margin="1.5,0,0,0"
                                               Stretch="UniformToFill"
                                               HorizontalAlignment="Center"
                                               VerticalAlignment="Center" />
                                    </Grid>
                                    <ControlTemplate.Triggers>
                                        <Trigger Property="IsMouseOver" Value="True">
                                            <Setter TargetName="DotsBackgroundBorder" Property="Background" Value="{StaticResource NodeOptionsButtonBackground}" />
                                            <Setter TargetName="DotsImage" Property="Source" Value="/DynamoCoreWpf;component/UI/Images/more-vertical_selected_16px.png" />
                                        </Trigger>
                                        <Trigger Property="IsMouseOver" Value="False">
                                            <Setter TargetName="DotsBackgroundBorder" Property="Background" Value="Transparent" />
                                            <Setter TargetName="DotsImage" Property="Source" Value="/DynamoCoreWpf;component/UI/Images/more-vertical.png" />
                                        </Trigger>
                                    </ControlTemplate.Triggers>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                    </Style>
                </Button.Style>
            </Button>
        </StackPanel>

        <Grid Name="PresentationGrid"
              Grid.Row="2"
              Grid.RowSpan="2"
              Grid.Column="1"
              Margin="6,6,6,3"
              HorizontalAlignment="Left"
              VerticalAlignment="Bottom"
              x:FieldModifier="public"
              Visibility="Collapsed"
              ZIndex="3">
            <!--  DO NOT ERASE THIS GRID TO BE USED FOR PRESENTING IMAGES, 3D VIEWS, ETC.  -->
        </Grid>

        <Border Name="nodeBorder"
                Grid.Row="1"
                Grid.RowSpan="4"
                Grid.ColumnSpan="3"
                Margin="-1"
                BorderBrush="#F9F9F9"
                BorderThickness="1"
                Canvas.ZIndex="5"
                CornerRadius="8,8,0,0"
                IsHitTestVisible="False"
                SnapsToDevicePixels="True" />

        <!--  Displays when the node is frozen  -->
        <Border Name="nodeIsFrozenOverlay"
                Grid.Row="1"
                Grid.RowSpan="4"
                Grid.ColumnSpan="3"
                Margin="-8"
                Background="{StaticResource NodeFrozenOverlayBackground}"
                Canvas.ZIndex="0"
                CornerRadius="8,8,0,0"
                IsHitTestVisible="True"
                Visibility="{Binding Path=IsFrozen, Converter={StaticResource BooleanToVisibilityCollapsedConverter}, UpdateSourceTrigger=PropertyChanged}" />

        <!--  Displays when the node is selected  -->
        <Border Name="selectionBorder"
                Grid.Row="1"
                Grid.RowSpan="4"
                Grid.ColumnSpan="3"
                Margin="-3"
                Background="Transparent"
                BorderBrush="{StaticResource Blue300Brush}"
                BorderThickness="4"
                Canvas.ZIndex="6"
                CornerRadius="10,10,0,0"
                IsHitTestVisible="False">
            <Border.Visibility>
                <Binding Converter="{StaticResource BooleanToVisibilityConverter}"
                         Mode="OneWay"
                         Path="IsSelected"
                         UpdateSourceTrigger="PropertyChanged" />
            </Border.Visibility>
        </Border>

        <!--  DO NOT ERASE. THIS IS FOR DEBUGGING  -->
        <!--<Rectangle Name="ForceReexecBorder"
                   Grid.Row="1"
                   Grid.ColumnSpan="3"
                   Grid.RowSpan="4"
                   Fill="Transparent"
                   Stroke="#FFF000"
                   StrokeThickness="5"
                   StrokeLineJoin="Round"
                   IsHitTestVisible="False"
                   Canvas.ZIndex="5"
                   Opacity="2"
                   Margin="-1">
            <Rectangle.Visibility>
                <Binding Path="ShowExecutionPreview"
                         UpdateSourceTrigger="PropertyChanged"
                         Mode="OneWay"
                         Converter="{StaticResource BooleanToVisibilityConverter}">
                </Binding>
            </Rectangle.Visibility>
        </Rectangle>-->

        <Canvas Name="expansionBay"
                Grid.Row="4"
                Grid.Column="0"
                Grid.ColumnSpan="3"
                Margin="0,4,0,0"
                HorizontalAlignment="Left"
                Background="Blue" />

        <Canvas Grid.Row="4"
                Grid.Column="0"
                Grid.ColumnSpan="3"
                ClipToBounds="False"
                Visibility="{Binding ShowDebugASTs, Converter={StaticResource BooleanToVisibilityCollapsedConverter}}">
            <Label HorizontalContentAlignment="Center" Content="{Binding ASTText}" />
        </Canvas>
    </Grid>
</UserControl>
