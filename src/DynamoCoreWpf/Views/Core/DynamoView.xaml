<Window x:Class="Dynamo.Controls.DynamoView"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:views="clr-namespace:Dynamo.Views"
        xmlns:sys="clr-namespace:System;assembly=mscorlib"
        xmlns:controls="clr-namespace:Dynamo.Controls"
        xmlns:uictrls="clr-namespace:Dynamo.UI.Controls"
        xmlns:service="clr-namespace:Dynamo.Services"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:viewModels="clr-namespace:Dynamo.ViewModels"
        d:DataContext="{d:DesignInstance viewModels:DynamoViewModel, IsDesignTimeCreatable=False}"
        mc:Ignorable="d"
        xmlns:ui="clr-namespace:Dynamo.UI"
        xmlns:p="clr-namespace:Dynamo.Wpf.Properties;assembly=DynamoCoreWpf"
        xmlns:controls1="clr-namespace:Dynamo.Wpf.Controls"
        xmlns:configuration="clr-namespace:Dynamo.Configuration;assembly=DynamoCore"
        xmlns:workspaces="clr-namespace:Dynamo.Graph.Workspaces;assembly=DynamoCore"
        x:Name="_this"
        Height="768"
        Width="1024"
        Closing="WindowClosing"
        Closed="WindowClosed"
        MinHeight="600"
        MinWidth="800"
        AllowsTransparency="False"
        KeyDown="DynamoView_KeyDown"
        KeyUp="DynamoView_KeyUp"
        Background="#FF353535"
        SnapsToDevicePixels="True"
        ResizeMode="CanResizeWithGrip"
        UseLayoutRounding="True"
        Style="{DynamicResource DynamoWindowStyle}">

    <Window.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <ui:SharedResourceDictionary Source="{x:Static ui:SharedDictionaryManager.DynamoModernDictionaryUri}" />
                <ui:SharedResourceDictionary Source="{x:Static ui:SharedDictionaryManager.DynamoConvertersDictionaryUri}" />
                <ui:SharedResourceDictionary Source="{x:Static ui:SharedDictionaryManager.DynamoColorsAndBrushesDictionaryUri}" />
                <ui:SharedResourceDictionary Source="{x:Static ui:SharedDictionaryManager.MenuStyleDictionaryUri}" />
            </ResourceDictionary.MergedDictionaries>
        </ResourceDictionary>
    </Window.Resources>

    <Window.InputBindings>

        <KeyBinding Key="Tab"
                    Command="{Binding Path=DataContext.SelectNeighborsCommand, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type controls:DynamoView}}}" />

        <KeyBinding Key="Delete"
                    Command="{Binding Path=DataContext.DeleteCommand, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type controls:DynamoView}}}" />
        <KeyBinding Key="N"
                    Modifiers="Control"
                    Command="{Binding Path=DataContext.NewHomeWorkspaceCommand, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type controls:DynamoView}}}" />
        <KeyBinding Key="N"
                    Modifiers="Control+Shift"
                    Command="{Binding Path=DataContext.ShowNewFunctionDialogCommand, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type controls:DynamoView}}}" />
        <KeyBinding Key="R"
                    Modifiers="Control+Shift"
                    Command="{Binding Path=DataContext.SaveRecordedCommand, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type controls:DynamoView}}}" />
        <KeyBinding Key="Q"
                    Modifiers="Control+Shift"
                    Command="{Binding Path=DataContext.InsertPausePlaybackCommand, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type controls:DynamoView}}}" />
        <KeyBinding Key="L"
                    Modifiers="Control"
                    Command="{Binding Path=DataContext.GraphAutoLayoutCommand, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type controls:DynamoView}}}" />
        <KeyBinding Key="I"
                    Modifiers="Control"
                    Command="{Binding Path=DataContext.BackgroundPreviewViewModel.ToggleIsolationModeCommand, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type controls:DynamoView}}}" />
        <KeyBinding Key="Tab"
                    Command="{Binding Path=DataContext.SelectNeighborsCommand, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type controls:DynamoView}}}" />

        <KeyBinding Key="C"
                    Modifiers="Control"
                    Command="{Binding Path=DataContext.CopyCommand, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type controls:DynamoView}}}" />
        <KeyBinding Key="Z"
                    Modifiers="Control"
                    Command="{Binding Path=DataContext.UndoCommand, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type controls:DynamoView}}}" />
        <KeyBinding Key="Y"
                    Modifiers="Control"
                    Command="{Binding Path=DataContext.RedoCommand, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type controls:DynamoView}}}" />
        <KeyBinding Key="A"
                    Modifiers="Control"
                    Command="{Binding Path=DataContext.SelectAllCommand, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type controls:DynamoView}}}" />

        <KeyBinding Key="D"
                    Modifiers="Control"
                    Command="{Binding Path=DataContext.NodeFromSelectionCommand, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type controls:DynamoView}}}" />
        <KeyBinding Key="V"
                    Modifiers="Control"
                    Command="{Binding Path=DataContext.PasteCommand, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type controls:DynamoView}}}" />

        <KeyBinding Key="B"
                    Modifiers="Control"
                    Command="{Binding Path=DataContext.BackgroundPreviewViewModel.ToggleCanNavigateBackgroundCommand, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type controls:DynamoView}}}" />

        <KeyBinding Key="W"
                    Modifiers="Control"
                    Command="{Binding Path=DataContext.AddNoteCommand, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type controls:DynamoView}}}" />
        <KeyBinding Key="V"
                    Modifiers="Control"
                    Command="{Binding Path=DataContext.PasteCommand, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type controls:DynamoView}}}" />
        <KeyBinding Key="S"
                    Modifiers="Control"
                    Command="{Binding Path=DataContext.ShowSaveDialogIfNeededAndSaveResultCommand, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type controls:DynamoView}}}" />
        <KeyBinding Key="S"
                    Modifiers="Control+Shift"
                    Command="{Binding Path=DataContext.ShowSaveDialogAndSaveResultCommand, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type controls:DynamoView}}}" />
        <KeyBinding Key="O"
                    Modifiers="Control"
                    Command="{Binding Path=DataContext.ShowOpenDialogAndOpenResultCommand, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type controls:DynamoView}}}" />
        <KeyBinding Key="H"
                    Modifiers="Control"
                    Command="{Binding Path=DataContext.HomeCommand, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type controls:DynamoView}}}" />
        <KeyBinding Key="Up"
                    Modifiers="Control+Shift"
                    Command="{Binding Path=DataContext.ToggleConsoleShowingCommand, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type controls:DynamoView}}}" />
        <KeyBinding Key="F4"
                    Modifiers="Alt"
                    Command="{Binding Path=DataContext.ExitCommand, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type controls:DynamoView}}}" />
        <KeyBinding Key="D"
                    Modifiers="Ctrl+Alt"
                    Command="{Binding Path=DataContext.DumpLibraryToXmlCommand, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type controls:DynamoView}}}" />
        <KeyBinding Key="G"
                    Modifiers="Control"
                    Command="{Binding Path=DataContext.AddAnnotationCommand, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type controls:DynamoView}}}" />
        <KeyBinding Key="U"
                    Modifiers="Control"
                    Command="{Binding Path=DataContext.UngroupAnnotationCommand, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type controls:DynamoView}}}" />
        <KeyBinding Key="Left"
                    Modifiers="Ctrl+Alt"
                    CommandParameter="Left"
                    Command="{Binding Path=DataContext.PanCommand, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type controls:DynamoView}}}" />
        <KeyBinding Key="Right"
                    Modifiers="Ctrl+Alt"
                    CommandParameter="Right"
                    Command="{Binding Path=DataContext.PanCommand, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type controls:DynamoView}}}" />
        <KeyBinding Key="Up"
                    Modifiers="Ctrl+Alt"
                    CommandParameter="Up"
                    Command="{Binding Path=DataContext.PanCommand, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type controls:DynamoView}}}" />
        <KeyBinding Key="Down"
                    Modifiers="Ctrl+Alt"
                    CommandParameter="Down"
                    Command="{Binding Path=DataContext.PanCommand, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type controls:DynamoView}}}" />
        <KeyBinding Key="OemPlus"
                    Modifiers="Ctrl"
                    Command="{Binding Path=DataContext.ZoomInCommand, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type controls:DynamoView}}}" />
        <KeyBinding Key="OemMinus"
                    Modifiers="Ctrl"
                    Command="{Binding Path=DataContext.ZoomOutCommand, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type controls:DynamoView}}}" />
        <KeyBinding Key="Add"
                    Modifiers="Ctrl"
                    Command="{Binding Path=DataContext.ZoomInCommand, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type controls:DynamoView}}}" />
        <KeyBinding Key="Subtract"
                    Modifiers="Ctrl"
                    Command="{Binding Path=DataContext.ZoomOutCommand, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type controls:DynamoView}}}" />
        <KeyBinding Key="D0"
                    Modifiers="Ctrl"
                    Command="{Binding Path=DataContext.FitViewCommand, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type controls:DynamoView}}}" />
        <KeyBinding Key="P"
                    Modifiers="Ctrl"
                    Command="{Binding Path=DataContext.BackgroundPreviewViewModel.TogglePanCommand, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type controls:DynamoView}}}" />

        <KeyBinding Key="F5"
                    Modifiers="Shift"
                    Command="{Binding Path=DataContext.HomeSpaceViewModel.RunSettingsViewModel.CancelRunCommand, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type controls:DynamoView}}}" />
        <KeyBinding Key="F5"
                    Command="{Binding Path=DataContext.HomeSpaceViewModel.RunSettingsViewModel.RunExpressionCommand, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type controls:DynamoView}}}"
                    CommandParameter="{Binding Path=DataContext.HomeSpaceViewModel.RunSettingsViewModel.RunInDebug, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type controls:DynamoView}}}" />
        <MouseBinding Gesture="Shift+LeftDoubleClick"
                      Command="{Binding Path=DataContext.HomeSpaceViewModel.ShowInCanvasSearchCommand, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type controls:DynamoView}}}"
                      CommandParameter="{x:Static viewModels:ShowHideFlags.Show}"/>
        <KeyBinding Key="T"
                    Modifiers="Control"
                    Command="{Binding Path=DataContext.ShowNewPresetsDialogCommand, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type controls:DynamoView}}}" />
    </Window.InputBindings>

    <Grid Name="mainGrid"
          FocusManager.IsFocusScope="True"
          PreviewMouseDown="Window_PreviewMouseDown"
          PreviewMouseUp="Window_PreviewMouseUp"
          PreviewMouseLeftButtonUp="Window_PreviewMouseLeftButtonUp">

        <Grid.RowDefinitions>
            <RowDefinition Height="Auto" />
            <RowDefinition Height="Auto" />
            <RowDefinition Height="*" />
            <RowDefinition Height="Auto" />
            <RowDefinition Name="consoleRow"
                           Height="{Binding ConsoleHeight, Mode=TwoWay, Converter={StaticResource ConsoleHeightConverter}}" />
            <RowDefinition Height="48" />
        </Grid.RowDefinitions>

        <Grid.ColumnDefinitions>
            <ColumnDefinition MaxWidth="500"
                              MinWidth="1"
                              Name="LeftExtensionsViewColumn">
                <ColumnDefinition.Width>
                    <Binding Path="LibraryWidth"
                             Mode="TwoWay"
                             Converter="{StaticResource ConsoleHeightConverter}" />
                </ColumnDefinition.Width>
            </ColumnDefinition>
            <!--MinWidth fix for GridSplitter dragging in frameless window-->
            <ColumnDefinition Width="Auto" />
            <ColumnDefinition Width="5*" MinWidth="200" />
            <ColumnDefinition Width="Auto" />
            <ColumnDefinition MaxWidth="500"
                              MinWidth="1"
                              Name="RightExtensionsViewColumn">
            </ColumnDefinition>
        </Grid.ColumnDefinitions>

        <!--Titlebar-->
        <Border BorderBrush="{StaticResource BorderBrushWhite}"
                BorderThickness="0,0,0,1"
                Grid.Row="0"
                Grid.Column="0"
                Grid.ColumnSpan="5"
                Height="26"
                Name="titleBar">

            <Grid Name="titleBarGrid">

                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="*" />
                    <ColumnDefinition Width="Auto" />
                </Grid.ColumnDefinitions>

                <!--Menu-->
                <Menu IsMainMenu="True"
                      Name="menu1"
                      Style="{StaticResource MainMenu}">
                 <!--Accessor key = false. This is to include underscore in header(only for SubMenuItem-->
                    <Menu.Resources>
                        <Style x:Key="SubMenuItemOverride"
                            BasedOn="{StaticResource MenuItemStyle}"
                            TargetType="{x:Type MenuItem}">

                            <Style.Resources>                              
                                <!--  SubmenuItem  -->
                                <ControlTemplate x:Key="{x:Static MenuItem.SubmenuItemTemplateKey}"
                                                          TargetType="MenuItem">
                                    
                                    <Border Name="Border"
                                            Height="25" Background="Transparent">
                                        <Grid MinWidth="200">
                                            <Grid.ColumnDefinitions>
                                                <ColumnDefinition Width="Auto" />
                                                <ColumnDefinition Width="*" />
                                            </Grid.ColumnDefinitions>
                                            <ContentPresenter Name="HeaderHost"
                                                              Grid.Column="0"
                                                              Margin="5,0,0,0"
                                                              HorizontalAlignment="Stretch"
                                                              VerticalAlignment="Center"
                                                              ContentSource="Header"
                                                              RecognizesAccessKey="False" />                                         
                                        </Grid>
                                    </Border>
                                    <ControlTemplate.Triggers>
                                        <Trigger Property="IsHighlighted"
                                                           Value="true">
                                            <Setter TargetName="Border"
                                                              Property="Background"
                                                              Value="{StaticResource HighlightedBrush}" />
                                            <Setter TargetName="HeaderHost"
                                                               Property="TextBlock.Foreground"
                                                               Value="{StaticResource ActiveForegroundBrush}" />
                                            <Setter TargetName="Border"
                                                                Property="BorderBrush"
                                                                Value="Transparent" />
                                        </Trigger>
                                        <Trigger Property="IsEnabled"
                                                                Value="false">
                                            <Setter Property="Foreground"
                                                                 Value="{StaticResource DisabledForegroundBrush}" />
                                        </Trigger>
                                    </ControlTemplate.Triggers>
                                </ControlTemplate>
                            </Style.Resources>                         
                            <Style.Triggers>                                                              
                                <Trigger Property="Role"
                                    Value="SubmenuItem">
                                    <Setter Property="Template"
                                      Value="{StaticResource {x:Static MenuItem.SubmenuItemTemplateKey}}" />
                                </Trigger>
                            </Style.Triggers>
                        </Style>
                    </Menu.Resources>

                    <MenuItem Header="{x:Static p:Resources.DynamoViewFileMenu}"
                              Name="fileMenu"
                              Focusable="False">
                        <MenuItem Header="{x:Static p:Resources.DynamoViewFileMenuNew}"
                                  Name="newMenu"
                                  Focusable="False">
                            <MenuItem Header="{x:Static p:Resources.DynamoViewFileMenuNewHomeWorkSpace}"
                                      Command="{Binding NewHomeWorkspaceCommand}"
                                      Name="newHomeWorkspace"
                                      InputGestureText="Ctrl + N"
                                      Focusable="False">
                            </MenuItem>
                            <MenuItem Header="{x:Static p:Resources.DynamoViewFileMenuNewCustomNode}"
                                      Command="{Binding ShowNewFunctionDialogCommand}"
                                      Name="newFuncButton"
                                      InputGestureText="Ctrl + Shift + N"
                                      Focusable="False">
                            </MenuItem>
                        </MenuItem>
                        <MenuItem Header="{x:Static p:Resources.DynamoViewFileMenuOpen}"
                                  Command="{Binding ShowOpenDialogAndOpenResultCommand}"
                                  Name="openButton"
                                  InputGestureText="Ctrl + O"
                                  Focusable="False">
                            <MenuItem.Icon>
                                <Image Source="/DynamoCoreWpf;component/UI/Images/openHS.png"
                                       Width="14"
                                       Height="14" />
                            </MenuItem.Icon>
                        </MenuItem>
                        <MenuItem Header="{x:Static p:Resources.DynamoViewFileMenuRecentFiles}"
                                  ItemsSource="{Binding RecentFiles}">
                            <MenuItem.ItemContainerStyle>
                                <Style TargetType="MenuItem">
                                    <Setter Property="Header"
                                            Value="{Binding Converter={StaticResource FilePathDisplayConverter}}" />
                                    <Setter Property="Command"
                                            Value="{Binding DataContext.OpenRecentCommand, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type MenuItem}, AncestorLevel=1}}" />
                                    <Setter Property="CommandParameter"
                                            Value="{Binding}" />
                                </Style>
                            </MenuItem.ItemContainerStyle>
                        </MenuItem>
                        <Separator />
                        <MenuItem Header="{x:Static p:Resources.DynamoViewFileMenuSave}"
                                  Command="{Binding ShowSaveDialogIfNeededAndSaveResultCommand}"
                                  Name="saveThisButton"
                                  InputGestureText="Ctrl + S"
                                  Focusable="False">
                            <MenuItem.Icon>
                                <Image Source="/DynamoCoreWpf;component/UI/Images/saveHS.png"
                                       Width="14"
                                       Height="14" />
                            </MenuItem.Icon>
                        </MenuItem>
                        <MenuItem Focusable="False"
                                  Header="{x:Static p:Resources.DynamoViewFileMenuSaveAs}"
                                  Command="{Binding ShowSaveDialogAndSaveResultCommand}"
                                  Name="saveButton"
                                  InputGestureText="Ctrl + Shift + S">
                            <MenuItem.Icon>
                                <Image Source="/DynamoCoreWpf;component/UI/Images/saveHS.png"
                                       Width="14"
                                       Height="14" />
                            </MenuItem.Icon>
                        </MenuItem>
                        <Separator />
                        <MenuItem Focusable="False"
                                  Header="{x:Static p:Resources.DynamoViewFileMenuImport}"
                                  Command="{Binding Path=DataContext.ImportLibraryCommand, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type controls:DynamoView}}}"
                                  Name="importLibrary" />
                        <Separator />
                        <MenuItem Focusable="False"
                                  Header="{x:Static p:Resources.DynamoViewFileMenuExportAsImage}"
                                  Command="{Binding ShowSaveImageDialogAndSaveResultCommand}"
                                  Name="saveImage">
                            <MenuItem.Icon>
                                <Image Source="/DynamoCoreWpf;component/UI/Images/screenshot_normal.png"
                                       Width="14"
                                       Height="14" />
                            </MenuItem.Icon>
                        </MenuItem>
                        <MenuItem Focusable="False"
                                  Header="{x:Static p:Resources.DynamoViewFileMenuExport3DAsImage}"
                                  Command="{Binding ShowSaveImageDialogAndSaveResultCommand}"
                                  CommandParameter="{x:Static p:Resources.ScreenShotFrom3DParameter}"
                                  Name="save3DImage">
                            <MenuItem.Icon>
                                <Image Source="/DynamoCoreWpf;component/UI/Images/screenshot_normal.png"
                                       Width="14"
                                       Height="14" />
                            </MenuItem.Icon>
                        </MenuItem>
                        <MenuItem Focusable="False"
                                  Header="{x:Static p:Resources.DynamoViewFileMenuExportToSTL}"
                                  Command="{Binding ExportToSTLCommand}"
                                  Name="saveSTL">
                        </MenuItem>
                        <Separator />
                        <MenuItem Header="{x:Static p:Resources.DynamoViewFiileMenuExit}"
                                  Command="{Binding ExitCommand}"
                                  Name="exit"
                                  InputGestureText="Alt + F4"
                                  Focusable="False" />
                    </MenuItem>

                    <MenuItem Header="{x:Static p:Resources.DynamoViewEditMenu}"
                              Name="editMenu"
                              Focusable="False">
                        <MenuItem Focusable="False"
                                  Header="{x:Static p:Resources.DynamoViewEditMenuUndo}"
                                  Command="{Binding UndoCommand}"
                                  Name="undo"
                                  InputGestureText="Ctrl + Z" />
                        <MenuItem Focusable="False"
                                  Header="{x:Static p:Resources.DynamoViewEditMenuRedo}"
                                  Command="{Binding RedoCommand}"
                                  Name="redo"
                                  InputGestureText="Ctrl + Y" />
                        <Separator />
                        <MenuItem Focusable="False"
                                  Header="{x:Static p:Resources.DynamoViewEditMenuCopy}"
                                  Command="{Binding CopyCommand}"
                                  Name="copy"
                                  InputGestureText="Ctrl + C" />
                        <MenuItem Focusable="False"
                                  Header="{x:Static p:Resources.DynamoViewEditMenuPaste}"
                                  Command="{Binding PasteCommand}"
                                  Name="paste"
                                  InputGestureText="Ctrl + V" />
                        <Separator />

                        <MenuItem Focusable="False"
                                  Header="{x:Static p:Resources.DynamoViewEditMenuCreateNote}"
                                  Command="{Binding AddNoteCommand}"
                                  Name="noteMenuItem"
                                  InputGestureText="Ctrl + W" />
                        <MenuItem Focusable="False"
                                  Header="{x:Static p:Resources.DynamoViewEditMenuCreateGroup}"
                                  Command="{Binding AddAnnotationCommand}"
                                  Name="noteMenuAnnotation"
                                  InputGestureText="Ctrl + G" />
                        <MenuItem Focusable="False"
                                  Header="{x:Static p:Resources.GroupContextMenuUngroup}"
                                  Command="{Binding UngroupAnnotationCommand}"
                                  Name="ungroupGroup"
                                  InputGestureText="Ctrl + U" />
                        <MenuItem Focusable="False"                                
                                  Header="{x:Static p:Resources.DynamoViewEditMenuCreateCustomNode}"
                                  Command="{Binding Path=NodeFromSelectionCommand}"
                                  Name="nodeFromSelection"
                                  InputGestureText="Ctrl + D" />
                       
                        <MenuItem Focusable="False"
                                  Header="{x:Static p:Resources.DynamoViewEditMenuSelectAll}"
                                  Command="{Binding SelectAllCommand}"
                                  Name="selectAll"
                                  InputGestureText="Ctrl + A" />
                        <MenuItem Focusable="False"
                                  Header="{x:Static p:Resources.DynamoViewEditMenuDeleteSelected}"
                                  Command="{Binding DeleteCommand}"
                                  Name="deleteSelected"
                                  InputGestureText="Delete" />
                        <!--<MenuItem Focusable="False" Header="{x:Static p:Resources.DynamoViewEditMenuSelectNeighbours}" Command="{Binding Path=ExpandSelectionCommand}"  Name="expandSelect" InputGestureText="Tab"/>-->
                        <MenuItem  Header="{x:Static p:Resources.DynamoViewEditMenuAlignSelection}"
                                   Name="Align">
                            <MenuItem  Header="{x:Static p:Resources.DynamoViewEditMenuAlignXAverage}"
                                       Command="{Binding AlignSelectedCommand}"
                                       CommandParameter="HorizontalCenter"
                                       Focusable="False" />
                            <MenuItem  Header="{x:Static p:Resources.DynamoViewEditMenuAlignLeft}"
                                       Command="{Binding AlignSelectedCommand}"
                                       CommandParameter="HorizontalLeft"
                                       Focusable="False" />
                            <MenuItem  Header="{x:Static p:Resources.DynamoViewEditMenuAlignRight}"
                                       Command="{Binding AlignSelectedCommand}"
                                       CommandParameter="HorizontalRight"
                                       Focusable="False" />
                            <MenuItem  Header="{x:Static p:Resources.DynamoViewEditMenuAlignYAverage}"
                                       Command="{Binding AlignSelectedCommand}"
                                       CommandParameter="VerticalCenter"
                                       Focusable="False" />
                            <MenuItem  Header="{x:Static p:Resources.DynamoViewEditMenuAlignTop}"
                                       Command="{Binding AlignSelectedCommand}"
                                       CommandParameter="VerticalTop"
                                       Focusable="False" />
                            <MenuItem  Header="{x:Static p:Resources.DynamoViewEditMenuAlighBottom}"
                                       Command="{Binding AlignSelectedCommand}"
                                       CommandParameter="VerticalBottom"
                                       Focusable="False" />
                            <MenuItem  Header="{x:Static p:Resources.DynamoViewEditMenuAlignYDistribute}"
                                       Command="{Binding AlignSelectedCommand}"
                                       CommandParameter="VerticalDistribute"
                                       Focusable="False" />
                            <MenuItem  Header="{x:Static p:Resources.DynamoViewEditMenuAlignXDistribute}"
                                       Command="{Binding AlignSelectedCommand}"
                                       CommandParameter="HorizontalDistribute"
                                       Focusable="False" />
                        </MenuItem>
                        <Separator />
                        <MenuItem Focusable="False"
                                  Header="{x:Static p:Resources.DynamoViewEditMenuCleanupLayout}"
                                  Command="{Binding GraphAutoLayoutCommand}"
                                  Name="GraphAutoLayout"
                                  InputGestureText="Ctrl + L" />
                    </MenuItem>

                    <MenuItem Header="{x:Static p:Resources.DynamoViewViewMenu}"
                              Name="viewMenu"
                              Focusable="False">
                        <MenuItem Header="{x:Static p:Resources.DynamoViewViewMenuZoom}"
                                  Name="zoomMenu">
                            <MenuItem  Header="{x:Static p:Resources.DynamoViewViewMenuZoomIn}"
                                       Command="{Binding ZoomInCommand}"
                                       InputGestureText="Ctrl + =" />
                            <MenuItem  Header="{x:Static p:Resources.DynamoViewViewMenuZoomOut}"
                                       Command="{Binding ZoomOutCommand}"
                                       InputGestureText="Ctrl + -" />
                        </MenuItem>

                        <MenuItem Header="{x:Static p:Resources.DynamoViewViewMenuPan}"
                                  Name="panMenu">
                            <MenuItem  Header="{x:Static p:Resources.DynamoViewViewMenuPanLeft}"
                                       Command="{Binding PanCommand}"
                                       CommandParameter="Left"
                                       InputGestureText="Ctrl + Alt + Left" />
                            <MenuItem  Header="{x:Static p:Resources.DynamoViewViewMenuPanRight}"
                                       Command="{Binding PanCommand}"
                                       CommandParameter="Right"
                                       InputGestureText="Ctrl + Alt + Right" />
                            <MenuItem  Header="{x:Static p:Resources.DynamoViewViewMenuPanUp}"
                                       Command="{Binding PanCommand}"
                                       CommandParameter="Up"
                                       InputGestureText="Ctrl + Alt + Up" />
                            <MenuItem  Header="{x:Static p:Resources.DynamoViewViewMenuPanDown}"
                                       Command="{Binding PanCommand}"
                                       CommandParameter="Down"
                                       InputGestureText="Ctrl + Alt + Down" />
                        </MenuItem>

                        <MenuItem Focusable="False"
                                  IsCheckable="True"
                                  IsChecked="{Binding Path=ConsoleHeight, Converter={StaticResource ConsoleHeightToBoolConverter},Mode=TwoWay}"
                                  Header="{x:Static p:Resources.DynamoViewViewMenuShowConsole}"
                                  Command="{Binding ToggleConsoleShowingCommand}"
                                  InputGestureText="Ctrl + Shift + Up" />

                        <MenuItem Header="{x:Static p:Resources.DynamoViewViewMenuConnector}"
                                  Name="connectorMenu">
                            <MenuItem Focusable="False"
                                      Header="{x:Static p:Resources.DynamoViewViewMenuConnectorType}"
                                      IsEnabled="True">
                                <MenuItem Focusable="False"
                                          Name="settings_curves"
                                          IsCheckable="True"
                                          IsChecked="{Binding Path=ConnectorType,Converter={StaticResource EnumToBoolConverter},ConverterParameter=BEZIER, Mode=TwoWay}"
                                          Command="{Binding SetConnectorTypeCommand}"
                                          CommandParameter="BEZIER"
                                          Header="{x:Static p:Resources.DynamoViewViewMenuConnectorTypeCurve}" />
                                <MenuItem Name="settings_plines"
                                          IsCheckable="True"
                                          IsChecked="{Binding Path=ConnectorType,Converter={StaticResource EnumToBoolConverter},ConverterParameter=POLYLINE, Mode=TwoWay}"
                                          Command="{Binding SetConnectorTypeCommand}"
                                          CommandParameter="POLYLINE"
                                          Header="{x:Static p:Resources.DynamoViewViewMenuConnectorTypePolylines}" />
                            </MenuItem>
                            <MenuItem Focusable="False"
                                      Header="{x:Static p:Resources.DynamoViewViewMenuShowConnectors}"
                                      IsCheckable="True"
                                      Name="ShowHideConnectorsMenuItem"
                                      IsChecked="{Binding Path=IsShowingConnectors}"
                                      Command="{Binding ShowHideConnectorsCommand}">
                            </MenuItem>
                        </MenuItem>

                        <MenuItem Header="{x:Static p:Resources.DynamoViewViewMenu3DPreview}"
                                  Name="background3dMenu"
                                  Focusable="False">

                            <MenuItem Header="{x:Static p:Resources.DynamoViewViewMenuAvailablePreviews}" ItemsSource="{Binding Watch3DViewModels}">
                                <MenuItem.ItemContainerStyle>
                                    <Style TargetType="MenuItem">
                                        <Setter Property="Header" Value="{Binding Name}"/>
                                        <Setter Property="IsCheckable" Value="True"/>
                                        <Setter Property="IsChecked" Value="{Binding Active}"/>
                                        <Setter Property="Focusable" Value="False"/>
                                        <Setter Property="IsEnabled" Value="{Binding CanBeActivated}"/>
                                    </Style>
                                </MenuItem.ItemContainerStyle>
                            </MenuItem>

                            <MenuItem Header="{x:Static p:Resources.DynamoViewViewMenuShowGrid}"
                                      IsEnabled="True"
                                      IsChecked="{Binding PreferenceSettings.IsBackgroundGridVisible}"
                                      Focusable="False"
                                      Command="{Binding ToggleBackgroundGridVisibilityCommand}" />

                            <MenuItem Header="{x:Static p:Resources.DynamoViewViewMenuPreviewNavigate}"
                                      IsEnabled="{Binding BackgroundPreviewActive}"
                                      IsChecked="{Binding Path=BackgroundPreviewViewModel.CanNavigateBackground}"
                                      InputGestureText="Ctrl + B"
                                      Focusable="False"
                                      Command="{Binding Path=BackgroundPreviewViewModel.ToggleCanNavigateBackgroundCommand}" />
                        </MenuItem>
                    </MenuItem>

                    <MenuItem Header="{x:Static p:Resources.DynamoViewPackageMenu}"
                              Name="PackageManagerMenu"
                              Focusable="False"
                              IsEnabled="True">
                        <MenuItem Focusable="False"
                                  Header="{x:Static p:Resources.DynamoViewPackageMenuSearchPackage}"
                                  Command="{Binding Path=DataContext.ShowPackageManagerSearchCommand, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type controls:DynamoView}}}"
                                  Name="showPMSearch" />
                        <MenuItem Focusable="False"
                                  Header="{x:Static p:Resources.DynamoViewPackageMenuManagePackage}"
                                  Command="{Binding Path=DataContext.ShowInstalledPackagesCommand, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type controls:DynamoView}}}"
                                  Name="showPMInstalled" />
                        <MenuItem Focusable="False"
                                  Header="{x:Static p:Resources.DynamoViewPackageMenuPublishPackage}"
                                  Command="{Binding Path=DataContext.PublishNewPackageCommand, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type controls:DynamoView}}}"
                                  Name="publishNewPackage" />
                        <MenuItem Focusable="False"
                                  Header="{x:Static p:Resources.DynamoViewPackageMenuPublishNodes}"
                                  Command="{Binding Path=DataContext.PublishSelectedNodesCommand, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type controls:DynamoView}}}"
                                  Name="publishSelected" />
                        <MenuItem Focusable="False"
                                  Header="{x:Static p:Resources.DynamoViewPackageMenuPublishWorkspace}"
                                  Command="{Binding Path=DataContext.PublishCurrentWorkspaceCommand, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type controls:DynamoView}}}"
                                  Name="publishCurrent" />
                    </MenuItem>

                    <MenuItem Header="{x:Static p:Resources.DynamoViewSettingMenu}"
                              Name="SettingsMenu"
                              Focusable="False"
                              IsEnabled="True"
                              SubmenuOpened="OnSettingsSubMenuOpened">
                        <MenuItem Header="{x:Static p:Resources.DynamoViewSettingMenuShowDataReportingDialog}"
                                  Name="ToggleIsAnalyticsReportingApprovedCommand"
                                  Command="{Binding Path=ToggleIsAnalyticsReportingApprovedCommand, Source={x:Static service:UsageReportingManager.Instance} }"
                                  CommandParameter="{Binding  RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type controls:DynamoView}}}"
                                  ToolTip="{x:Static p:Resources.DynamoViewSettingMenuShowDataReportingDialogTooltip}"
                                  Visibility="{Binding HideReportOptions, Converter={StaticResource InverseBoolToVisibilityCollapsedConverter}}"
                                  Focusable="False"/>
                        <Separator />
                        <MenuItem Focusable="False" 
                                  Name="ShowNodeExecution" 
                                  IsCheckable="True" 
                                  IsChecked="{Binding ShowRunPreview}" 
                                  Header="{x:Static p:Resources.DynamoViewSettingShowRunPreview}"
                                  ToolTipService.ShowOnDisabled="True" 
                                  ToolTip="{Binding HomeSpaceViewModel.RunSettingsViewModel.RunButtonEnabled, Converter={StaticResource RunPreviewToolTipConverter}}"
                                  IsEnabled="{Binding HomeSpaceViewModel.RunSettingsViewModel.RunButtonEnabled, Converter={StaticResource RunPreviewConverter}}"/>

                        <MenuItem Focusable="False"
                                  Header="{x:Static p:Resources.DynamoViewSettingMenuNumberFormat}"
                                  Name="NumberFormat">
                            <MenuItem Focusable="False"
                                      Header="{x:Static p:Resources.DynamoViewSettingMenuNumber0}"
                                      IsCheckable="True"
                                      IsChecked="{Binding PreferenceSettings.NumberFormat,Converter={StaticResource NumberFormatToBoolConverter},ConverterParameter=f0, Mode=TwoWay}"
                                      Command="{Binding SetNumberFormatCommand}"
                                      CommandParameter="f0" />
                            <MenuItem Focusable="False"
                                      Header="{x:Static p:Resources.DynamoViewSettingMenuNumber00}"
                                      IsCheckable="True"
                                      IsChecked="{Binding PreferenceSettings.NumberFormat,Converter={StaticResource NumberFormatToBoolConverter},ConverterParameter=f1, Mode=TwoWay}"
                                      Command="{Binding SetNumberFormatCommand}"
                                      CommandParameter="f1" />
                            <MenuItem Focusable="False"
                                      Header="{x:Static p:Resources.DynamoViewSettingMenuNumber000}"
                                      IsCheckable="True"
                                      IsChecked="{Binding PreferenceSettings.NumberFormat,Converter={StaticResource NumberFormatToBoolConverter},ConverterParameter=f2, Mode=TwoWay}"
                                      Command="{Binding SetNumberFormatCommand}"
                                      CommandParameter="f2" />
                            <MenuItem Focusable="False"
                                      Header="{x:Static p:Resources.DynamoViewSettingMenuNumber0000}"
                                      IsCheckable="True"
                                      IsChecked="{Binding PreferenceSettings.NumberFormat,Converter={StaticResource NumberFormatToBoolConverter},ConverterParameter=f3, Mode=TwoWay}"
                                      Command="{Binding SetNumberFormatCommand}"
                                      CommandParameter="f3" />
                            <MenuItem Focusable="False"
                                      Header="{x:Static p:Resources.DynamoViewSettingMenuNumber00000}"
                                      IsCheckable="True"
                                      IsChecked="{Binding PreferenceSettings.NumberFormat,Converter={StaticResource NumberFormatToBoolConverter},ConverterParameter=f4, Mode=TwoWay}"
                                      Command="{Binding SetNumberFormatCommand}"
                                      CommandParameter="f4" />
                        </MenuItem>
                        <MenuItem Focusable="False"
                                  Header="{x:Static p:Resources.DynamoViewSettingMenuRenderPrecision}">
                            <StackPanel Orientation="Horizontal"
                                        Width="Auto">
                                <TextBlock Text="{x:Static p:Resources.DynamoViewSettingMenuLowRenderPrecision}"
                                           Margin="0,0,10,0"></TextBlock>
                                <Slider Width="100"
                                        Minimum="8"
                                        Maximum="512"
                                        Value="{Binding Path=RenderPackageFactoryViewModel.MaxTessellationDivisions, Mode=TwoWay}"></Slider>
                                <TextBlock Text="{x:Static p:Resources.DynamoViewSettingMenuHighRenderPrecision}"
                                           Margin="10,0,0,0"></TextBlock>
                            </StackPanel>
                        </MenuItem>
                        <MenuItem Focusable="False"
                                  Name="ChangeScaleFactorMenu"
                                  Header="{x:Static p:Resources.DynamoViewSettingsMenuChangeScaleFactor}"
                                  Command="{Binding ChangeScaleFactorCommand}" />
                        <Separator />
                        <MenuItem Focusable="False"
                                  IsCheckable="True"
                                  IsChecked="{Binding Path=BackgroundPreviewViewModel.IsolationMode, Mode=TwoWay}"
                                  Header="{x:Static p:Resources.DynamoViewSettingsMenuIsolationMode}"
                                  InputGestureText="Ctrl + I"/>
                        <MenuItem Focusable="False"
                                  IsCheckable="True"
                                  IsChecked="{Binding Path=RenderPackageFactoryViewModel.ShowEdges, Mode=TwoWay}"
                                  Header="{x:Static p:Resources.DynamoViewSettingsMenuShowEdges}"></MenuItem>
                        <MenuItem Focusable="False"
                                  IsCheckable="True"
                                  IsChecked="{Binding ShowPreviewBubbles, Mode=TwoWay}"
                                  Header="{x:Static p:Resources.DynamoViewSettingsMenuShowPreviewBubbles}"/>
                        <MenuItem Focusable="False"
                                  IsCheckable="True"
                                  IsChecked="{Binding ShowCodeBlockLineNumber, Mode=TwoWay}"
                                  Header="{x:Static p:Resources.DynamoViewSettingsMenuShowCodeBlockNodeLineNumber}"/>
                        <MenuItem Focusable="False"
                                  IsCheckable="True"
                                  IsChecked="{Binding IsIronPythonDialogDisabled, Mode=TwoWay}"
                                  Header="{x:Static p:Resources.DynamoViewSettingsMenuIsIronPythonDialogDisabled}"
                                  Visibility="{Binding IsPython2ObsoleteDebugModeEnabled, Converter={StaticResource BooleanToVisibilityCollapsedConverter}}"/>
                        <MenuItem Focusable="False"
                                  IsCheckable="True"
                                  IsChecked="{Binding ShowTabsAndSpacesInScriptEditor, Mode=TwoWay}"
                                  Header="{x:Static p:Resources.DynamoViewSettingsMenuShowTabsAndSpacesInScriptEditor}"/>
                        <MenuItem Focusable="False"
                                  Header="{x:Static p:Resources.DynamoViewSettingsDefaultPythonEngine}"
                                  Name="PythonEngine">
                            <MenuItem Focusable="False"
                                      Header="{x:Static p:Resources.DefaultPythonEngineNone}"
                                      IsCheckable="True"
                                      IsChecked="{Binding DefaultPythonEngine,Converter={StaticResource CompareToParameterConverter},ConverterParameter='', Mode=TwoWay}"/>
                            <MenuItem Focusable="False"
                                      Header="IronPython2"
                                      IsCheckable="True"
                                      IsChecked="{Binding DefaultPythonEngine,Converter={StaticResource CompareToParameterConverter},ConverterParameter='IronPython2', Mode=TwoWay}"/>
                            <MenuItem Focusable="False"
                                      Header="CPython3"
                                      IsCheckable="True"
                                      IsChecked="{Binding DefaultPythonEngine,Converter={StaticResource CompareToParameterConverter},ConverterParameter='CPython3', Mode=TwoWay}" />
                        </MenuItem>
                        <MenuItem Focusable="False"
                                  Header="{x:Static p:Resources.DynamoViewSettingMenuManagePackagePath}"
                                  Command="{Binding ManagePackagePathsCommand}"
                                  Name="managePackagePaths" />
                        <Separator />
                        <MenuItem Focusable="False"
                                  Header="{x:Static p:Resources.DynamoViewSettingExperimental}">
                            <MenuItem Name="EnableTSpline"
                                  IsCheckable="True"
                                  IsChecked="{Binding EnableTSpline}"
                                  Header="{x:Static p:Resources.DynamoViewSettingEnableTSplineNodes}" />
                        </MenuItem>
                    </MenuItem>

                    <MenuItem Header="{x:Static p:Resources.DynamoViewHelpMenu}"
                              Focusable="False">
                        <MenuItem Focusable="False"
                                  Header="{x:Static p:Resources.StartPageWhatsNew}"
                                  Command="{Binding ShowGalleryCommand}">
                            <MenuItem.Icon>
                                <Image Source="/DynamoCoreWpf;component/UI/Images/icon-whats-new-small.png"
                                       Width="13" Height="14" />
                            </MenuItem.Icon>
                        </MenuItem>
                        <MenuItem Focusable="False"
                                  Header="{x:Static p:Resources.DynamoViewHepMenuSamples}"
                                  Name="SamplesMenu"
                                  IsEnabled="{Binding Path=HomeSpaceViewModel.RunSettingsViewModel.RunEnabled}">
                            <MenuItem.Icon>
                                <Image Source="/DynamoCoreWpf;component/UI/Images/OpenSelectedItemHS.png"
                                       Width="14" Height="14" />
                            </MenuItem.Icon>
                        </MenuItem>
                        <MenuItem Focusable="False"
                                  Header="{x:Static p:Resources.DynamoViewHelpDictionary}"
                                  Command="{Binding GoToDictionaryCommand}">
                            <MenuItem.Icon>
                                <Image Source="/DynamoCoreWpf;component/UI/Images/icon-dictionary-small.png"
                                           Width="13" Height="14" />
                            </MenuItem.Icon>
                        </MenuItem>
                        <MenuItem Header="{x:Static p:Resources.DynamoViewHelpMenuReportBug}"
                                  Command="{Binding ReportABugCommand}"
                                  Focusable="False" />
                        <MenuItem Header="{x:Static p:Resources.DynamoViewHelpMenuGotoWebsite}"
                                  Command="{Binding GoToSourceCodeCommand}"
                                  Focusable="False" />
                        <MenuItem Header="{x:Static p:Resources.DynamoViewHelpMenuGotoWiki}"
                                  Command="{Binding GoToWikiCommand}"
                                  Focusable="False" />
                        <MenuItem Header="{x:Static p:Resources.DynamoViewHelpMenuDisplayStartPage}"
                                  Command="{Binding DisplayStartPageCommand}"
                                  Focusable="False" />
                        <MenuItem Header="{x:Static p:Resources.DynamoViewHelpMenuAbout}"
                                  Command="{Binding ShowAboutWindowCommand}"
                                  Focusable="False" />
                    </MenuItem>

                    <MenuItem Header="{x:Static p:Resources.DynamoViewDebugMenu}"
                              Focusable="False"
                              Visibility="{Binding IsDebugBuild, Converter={StaticResource BooleanToVisibilityCollapsedConverter}}">
                        <MenuItem Focusable="False"
                                  Name="VerboseLogging"
                                  IsCheckable="True"
                                  IsChecked="{Binding VerboseLogging}"
                                  Header="{x:Static p:Resources.DynamoViewDebugMenuVerboseLogging}" />
                        <MenuItem Focusable="False"
                                  Name="ShowDebugASTs"
                                  IsCheckable="True"
                                  Header="{x:Static p:Resources.DynamoViewDebugMenuShowDebugAST}"
                                  IsChecked="{Binding ShowDebugASTs}"></MenuItem>
                        <MenuItem Focusable="False"
                                  Name="ForceReexec"
                                  Header="{x:Static p:Resources.DynamoViewDebugMenuForceReExecute}"
                                  Command="{Binding ForceRunExpressionCommand}"
                                  CommandParameter="{Binding Path=HomeSpaceViewModel.RunSettingsViewModel.RunInDebug}"
                                  IsEnabled="{Binding Path=HomeSpaceViewModel.RunSettingsViewModel.RunButtonEnabled}"></MenuItem>
                        <MenuItem Focusable="False"
                                  Name="MutateTest"
                                  Header="{x:Static p:Resources.DynamoViewDebugMenuRunMutationTest}"
                                  Command="{Binding MutateTestDelegateCommand}"
                                  CommandParameter="{Binding Path=HomeSpaceViewModel.RunSettingsViewModel.RunInDebug}"
                                  IsEnabled="{Binding Path=HomeSpaceViewModel.RunSettingsViewModel.RunButtonEnabled}"></MenuItem>
                        <MenuItem Focusable="False"
                                  Name="CheckDailyBuilds"
                                  Header="{x:Static p:Resources.DynamoViewDebugMenuCheckDailyBuild}"
                                  DataContext="{Binding Path=Model.UpdateManager}"
                                  IsCheckable="True"
                                  IsChecked="{Binding Path=CheckNewerDailyBuilds, Mode=TwoWay}"></MenuItem>
                        <MenuItem Focusable="False"
                                  Name="ForceUpdate"
                                  Header="{x:Static p:Resources.DynamoViewDebugMenuForceUpdate}"
                                  DataContext="{Binding Path=Model.UpdateManager}"
                                  IsCheckable="True"
                                  IsChecked="{Binding Path=ForceUpdate, Mode=TwoWay}" />
                        <MenuItem Focusable="False"
                                  Header="{x:Static p:Resources.DynamoViewDebugMenuDumpLibrary}"
                                  Command="{Binding DumpLibraryToXmlCommand}"
                                  IsEnabled="True" />
                        <MenuItem Focusable="False"
                                  Name="DebugModes"
                                  Header="{x:Static p:Resources.DynamoViewDebugMenuDebugModes}"
                                  Click="OnDebugModesClick"
                                  IsCheckable="False" />
               </MenuItem>
                </Menu>

                <!--Titlebar buttons-->
                <Grid Name="titleBarButtonsGrid"
                      Grid.Column="1">
                </Grid>

            </Grid>
        </Border>

        <!--Shortcuts Toolbar-->
        <Grid Grid.Row="1"
              Grid.Column="0"
              Grid.ColumnSpan="5"
              Name="shortcutsBarGrid">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*"></ColumnDefinition>
                <ColumnDefinition Width="Auto"></ColumnDefinition>
            </Grid.ColumnDefinitions>
            
            <Grid Name="loginGrid" 
                  Grid.Row="0" 
                  Grid.Column="1">
            </Grid>
            
            <Border Name="shortcutBarBorder"
                Grid.Row="0"
                Grid.Column="0"
                Height="32"
                BorderBrush="{StaticResource BorderBrushWhite}"
                BorderThickness="0,0,0,1">
                <Grid Name="shortcutBarGrid">
                </Grid>
            </Border>

        </Grid>

        <!--Canvas-->
        <Grid HorizontalAlignment="Stretch"
              VerticalAlignment="Stretch"
              Grid.Row="2"
              Grid.Column="2"
              Grid.RowSpan="3"
              Background="#232323"
              Name="background_grid"
              IsHitTestVisible="{Binding BackgroundPreviewViewModel.CanNavigateBackground}">
            <Canvas Name="backgroundCanvas"
                    Margin="0,20,0,0"
                    ClipToBounds="True">
                <Canvas.Background>
                    <SolidColorBrush Color="{Binding ViewingHomespace, Converter={StaticResource WorkspaceBackgroundColorConverter}}" />
                </Canvas.Background>
            </Canvas>

            <!-- The BackgroundPreview is now created in the DynamoView_Loaded method.-->
            
        </Grid>

        <!--
            Do not style the background of this border,
            Background3DPreview controls will be blocked if you do so.
            Please ensure that mouse events will be able to pass through this layer,
            when Navigate Background 3D Preview is set to true.
        -->
        <!--Workspace-->
        <Border Margin="0"
                BorderBrush="Black"
                BorderThickness="0"
                Name="border"
                Grid.Row="2"
                Grid.Column="2"
                SizeChanged="Workspace_SizeChanged">

            <Grid AllowDrop="True"
                  Drop="DynamoView_OnDrop">
                <TabControl ItemsSource="{Binding Path=Workspaces, NotifyOnTargetUpdated=True}"
                            Name="WorkspaceTabs"
                            SelectedIndex="{Binding CurrentWorkspaceIndex}"
                            Background="#232323"
                            Padding="0"
                            TargetUpdated="WorkspaceTabs_TargetUpdated"
                            SelectionChanged="WorkspaceTabs_SelectionChanged"
                            SizeChanged="WorkspaceTabs_SizeChanged">

                    <TabControl.Resources>

                        <Style TargetType="{x:Type TabControl}">
                            <Setter Property="OverridesDefaultStyle"
                                    Value="True" />
                            <Setter Property="SnapsToDevicePixels"
                                    Value="True" />
                            <Setter Property="Template">
                                <Setter.Value>
                                    <ControlTemplate TargetType="{x:Type TabControl}">
                                        <Grid KeyboardNavigation.TabNavigation="Local">
                                            <Grid.RowDefinitions>
                                                <RowDefinition Height="Auto" />
                                                <RowDefinition Height="*" />
                                            </Grid.RowDefinitions>
                                            <Border BorderBrush="{StaticResource BorderBrushWhite}"
                                                    BorderThickness="1,0,0,1"
                                                    Grid.Row="0">
                                                <Grid>
                                                    <Grid.ColumnDefinitions>
                                                        <ColumnDefinition Width="*" />
                                                        <ColumnDefinition Width="Auto" />
                                                    </Grid.ColumnDefinitions>
                                                    <ScrollViewer Grid.Column="0"
                                                                  Margin="0,-1,0,0"
                                                                  HorizontalScrollBarVisibility="Hidden"
                                                                  VerticalScrollBarVisibility="Disabled">
                                                        <TabPanel x:Name="HeaderPanel"
                                                                  IsItemsHost="True"
                                                                  KeyboardNavigation.TabIndex="1"
                                                                  Background="Transparent" />
                                                    </ScrollViewer>
                                                    <Menu x:Name="TabControlMenu"
                                                          Grid.Column="1"
                                                          Background="Transparent"
                                                          SnapsToDevicePixels="True">
                                                        <Menu.Resources>
                                                            <sys:Double x:Key="ButtonWidthAndHeight">19</sys:Double>
                                                            <Style x:Key="TabMenuButtonStyle"
                                                                   TargetType="{x:Type MenuItem}">
                                                                <Setter Property="Focusable"
                                                                        Value="False" />
                                                                <Setter Property="Height"
                                                                        Value="{StaticResource ButtonWidthAndHeight}" />
                                                                <Setter Property="Width"
                                                                        Value="{StaticResource ButtonWidthAndHeight}" />
                                                                <Setter Property="Template">
                                                                    <Setter.Value>
                                                                        <ControlTemplate TargetType="{x:Type MenuItem}">
                                                                            <Border Name="ButtonBorder"
                                                                                    Margin="0"
                                                                                    Background="Transparent"
                                                                                    BorderThickness="0"
                                                                                    VerticalAlignment="Center"
                                                                                    HorizontalAlignment="Center"
                                                                                    Padding="0">
                                                                                <Grid VerticalAlignment="Center"
                                                                                      HorizontalAlignment="Center">
                                                                                    <ContentPresenter ContentSource="Header"
                                                                                                      HorizontalAlignment="Center"
                                                                                                      VerticalAlignment="Center" />
                                                                                    <Image Name="TabMenuButtonImage"
                                                                                           Width="16"
                                                                                           Height="16">
                                                                                        <Image.Style>
                                                                                            <Style TargetType="{x:Type Image}">
                                                                                                <Style.Triggers>
                                                                                                    <Trigger Property="IsMouseOver"
                                                                                                             Value="False">
                                                                                                        <Setter Property="Source"
                                                                                                                Value="/DynamoCoreWpf;component/UI/Images/tabs_button_normal.png" />
                                                                                                    </Trigger>
                                                                                                    <Trigger Property="IsMouseOver"
                                                                                                             Value="True">
                                                                                                        <Setter Property="Source"
                                                                                                                Value="/DynamoCoreWpf;component/UI/Images/tabs_button_hover.png" />
                                                                                                    </Trigger>
                                                                                                </Style.Triggers>
                                                                                            </Style>
                                                                                        </Image.Style>
                                                                                    </Image>
                                                                                    <Popup Name="Popup"
                                                                                           Placement="Custom"
                                                                                           CustomPopupPlacementCallback="PlacePopup"
                                                                                           IsOpen="{TemplateBinding IsSubmenuOpen}"
                                                                                           AllowsTransparency="True"
                                                                                           Focusable="False"
                                                                                           PopupAnimation="Fade">
                                                                                        <Border Name="SubmenuBorder"
                                                                                                SnapsToDevicePixels="True"
                                                                                                BorderBrush="{StaticResource NormalBorderBrush}"
                                                                                                Background="{StaticResource NormalBackgroundBrush}"
                                                                                                BorderThickness="1">
                                                                                            <StackPanel IsItemsHost="True"
                                                                                                        KeyboardNavigation.DirectionalNavigation="Cycle" />
                                                                                        </Border>
                                                                                    </Popup>
                                                                                </Grid>
                                                                            </Border>
                                                                            <ControlTemplate.Triggers>
                                                                                <Trigger Property="IsHighlighted"
                                                                                         Value="true">
                                                                                    <Setter TargetName="TabMenuButtonImage"
                                                                                            Property="Source"
                                                                                            Value="/DynamoCoreWpf;component/UI/Images/tabs_button_hover.png" />
                                                                                </Trigger>
                                                                            </ControlTemplate.Triggers>
                                                                        </ControlTemplate>
                                                                    </Setter.Value>
                                                                </Setter>
                                                            </Style>

                                                            <!-- The style for MenuItems that represent TabItems -->
                                                            <Style x:Key="TabMenuItem"
                                                                   BasedOn="{StaticResource MenuItemStyle}"
                                                                   TargetType="{x:Type MenuItem}">

                                                                <Style.Resources>
                                                                    <!--  SubmenuHeader  -->
                                                                    <ControlTemplate x:Key="{x:Static MenuItem.SubmenuHeaderTemplateKey}"
                                                                                     TargetType="MenuItem">
                                                                        <Border Name="Border"
                                                                                Height="25">
                                                                            <Grid>
                                                                                <Grid.ColumnDefinitions>
                                                                                    <ColumnDefinition Width="*"
                                                                                                      MinWidth="100" />
                                                                                </Grid.ColumnDefinitions>
                                                                                <ContentPresenter Name="HeaderHost"
                                                                                                  Grid.Column="0"
                                                                                                  Margin="5,0"
                                                                                                  HorizontalAlignment="Stretch"
                                                                                                  VerticalAlignment="Center"
                                                                                                  ContentSource="Header"
                                                                                                  RecognizesAccessKey="True" />
                                                                                <Popup Name="Popup"
                                                                                       AllowsTransparency="True"
                                                                                       Focusable="False"
                                                                                       HorizontalOffset="-2"
                                                                                       IsOpen="{TemplateBinding IsSubmenuOpen}"
                                                                                       Placement="Left"
                                                                                       PopupAnimation="Fade">
                                                                                    <Border Name="SubmenuBorder"
                                                                                            Margin="0 0 5 5"
                                                                                            Background="{StaticResource NormalBackgroundBrush}"
                                                                                            BorderBrush="{StaticResource NormalBorderBrush}"
                                                                                            BorderThickness="1"
                                                                                            SnapsToDevicePixels="True">
                                                                                        <StackPanel IsItemsHost="True"
                                                                                                    KeyboardNavigation.DirectionalNavigation="Cycle" />
                                                                                        <Border.Effect>
                                                                                            <DropShadowEffect BlurRadius="5"
                                                                                                              Opacity="0.4"
                                                                                                              ShadowDepth="3" />
                                                                                        </Border.Effect>
                                                                                    </Border>
                                                                                </Popup>
                                                                            </Grid>
                                                                        </Border>
                                                                        <ControlTemplate.Triggers>
                                                                            <Trigger Property="IsHighlighted"
                                                                                     Value="true">
                                                                                <Setter TargetName="Border"
                                                                                        Property="Background"
                                                                                        Value="{StaticResource HighlightedBrush}" />
                                                                                <Setter TargetName="HeaderHost"
                                                                                        Property="TextBlock.Foreground"
                                                                                        Value="{StaticResource ActiveForegroundBrush}" />
                                                                                <Setter TargetName="Border"
                                                                                        Property="BorderBrush"
                                                                                        Value="Transparent" />
                                                                            </Trigger>
                                                                            <Trigger Property="IsEnabled"
                                                                                     Value="false">
                                                                                <Setter Property="Foreground"
                                                                                        Value="{StaticResource DisabledForegroundBrush}" />
                                                                            </Trigger>
                                                                        </ControlTemplate.Triggers>
                                                                    </ControlTemplate>

                                                                    <!--  SubmenuItem  -->
                                                                    <ControlTemplate x:Key="{x:Static MenuItem.SubmenuItemTemplateKey}"
                                                                                     TargetType="MenuItem">
                                                                        <Border Name="Border"
                                                                                Height="25">
                                                                            <Grid MinWidth="200">
                                                                                <Grid.ColumnDefinitions>
                                                                                    <ColumnDefinition Width="Auto" />
                                                                                    <ColumnDefinition Width="*" />
                                                                                </Grid.ColumnDefinitions>
                                                                                <ContentPresenter Name="HeaderHost"
                                                                                                  Grid.Column="0"
                                                                                                  Margin="5,0,0,0"
                                                                                                  HorizontalAlignment="Stretch"
                                                                                                  VerticalAlignment="Center"
                                                                                                  ContentSource="Header"
                                                                                                  RecognizesAccessKey="True" />
                                                                                <ContentPresenter Name="SaveStateHost"
                                                                                                  Grid.Column="1"
                                                                                                  Margin="0,0,5,0"
                                                                                                  HorizontalAlignment="Stretch"
                                                                                                  VerticalAlignment="Center"
                                                                                                  ContentSource="Tag"
                                                                                                  RecognizesAccessKey="True" />
                                                                            </Grid>
                                                                        </Border>
                                                                        <ControlTemplate.Triggers>
                                                                            <Trigger Property="IsHighlighted"
                                                                                     Value="true">
                                                                                <Setter TargetName="Border"
                                                                                        Property="Background"
                                                                                        Value="{StaticResource HighlightedBrush}" />
                                                                                <Setter TargetName="HeaderHost"
                                                                                        Property="TextBlock.Foreground"
                                                                                        Value="{StaticResource ActiveForegroundBrush}" />
                                                                                <Setter TargetName="Border"
                                                                                        Property="BorderBrush"
                                                                                        Value="Transparent" />
                                                                            </Trigger>
                                                                            <Trigger Property="IsEnabled"
                                                                                     Value="false">
                                                                                <Setter Property="Foreground"
                                                                                        Value="{StaticResource DisabledForegroundBrush}" />
                                                                            </Trigger>
                                                                        </ControlTemplate.Triggers>
                                                                    </ControlTemplate>
                                                                </Style.Resources>

                                                                <EventSetter Event="Click"
                                                                             Handler="TabControlMenuItem_Click" />

                                                                <Style.Triggers>
                                                                    <DataTrigger Binding="{Binding Path=FileName, Converter={StaticResource PathToSaveStateConverter}}"
                                                                                 Value="Unsaved">
                                                                        <Setter Property="Header"
                                                                                Value="{Binding Name}" />
                                                                    </DataTrigger>
                                                                    <DataTrigger Binding="{Binding Path=FileName, Converter={StaticResource PathToSaveStateConverter}}"
                                                                                 Value="Saved">
                                                                        <Setter Property="Header"
                                                                                Value="{Binding FileName, Converter={StaticResource PathToFileNameConverter}}" />
                                                                    </DataTrigger>

                                                                    <DataTrigger Binding="{Binding HasUnsavedChanges}"
                                                                                 Value="True">
                                                                        <Setter Property="Tag"
                                                                                Value="*" />
                                                                    </DataTrigger>

                                                                    <DataTrigger Binding="{Binding HasUnsavedChanges}"
                                                                                 Value="False">
                                                                        <Setter Property="Tag"
                                                                                Value="" />
                                                                    </DataTrigger>

                                                                    <Trigger Property="Role"
                                                                             Value="SubmenuHeader">
                                                                        <Setter Property="Template"
                                                                                Value="{StaticResource {x:Static MenuItem.SubmenuHeaderTemplateKey}}" />
                                                                    </Trigger>
                                                                    <Trigger Property="Role"
                                                                             Value="SubmenuItem">
                                                                        <Setter Property="Template"
                                                                                Value="{StaticResource {x:Static MenuItem.SubmenuItemTemplateKey}}" />
                                                                    </Trigger>
                                                                </Style.Triggers>
                                                            </Style>
                                                        </Menu.Resources>
                                                        <MenuItem Style="{StaticResource TabMenuButtonStyle}"
                                                                  ItemsSource="{Binding RelativeSource={RelativeSource FindAncestor,AncestorType={x:Type TabControl}},Path=Items}"
                                                                  ItemContainerStyle="{StaticResource TabMenuItem}">
                                                        </MenuItem>
                                                    </Menu>
                                                </Grid>
                                            </Border>
                                            <Border x:Name="Border"
                                                    Grid.Row="1"
                                                    BorderBrush="{Binding Path=ViewingHomespace, Converter={StaticResource WorkspaceBackgroundBrushConverter}}"
                                                    BorderThickness="0,1,0,0">
                                                <ContentPresenter x:Name="PART_SelectedContentHost"
                                                                  ContentSource="SelectedContent" />
                                            </Border>
                                        </Grid>
                                    </ControlTemplate>
                                </Setter.Value>
                            </Setter>
                        </Style>

                        <Style TargetType="{x:Type Button}"
                               x:Key="CloseButtonStyle">
                            <Setter Property="OverridesDefaultStyle"
                                    Value="True" />
                            <Setter Property="SnapsToDevicePixels"
                                    Value="true" />
                            <Setter Property="VerticalAlignment"
                                    Value="Center" />
                            <Setter Property="HorizontalAlignment"
                                    Value="Center" />
                            <Setter Property="Margin"
                                    Value="0,0,0,0" />
                            <Setter Property="Background"
                                    Value="Transparent" />
                            <Setter Property="BorderThickness"
                                    Value="0" />
                            <Setter Property="Padding"
                                    Value="0" />
                            <!--<EventSetter Event="Click"
                                         Handler="TabCloseButton_Click" />-->
                            <Setter Property="Template">
                                <Setter.Value>
                                    <ControlTemplate TargetType="Button">
                                        <Border x:Name="Border"
                                                Background="Transparent"
                                                BorderThickness="0 0 0 0">
                                            <ContentPresenter Margin="0 1 0 0" />
                                        </Border>
                                    </ControlTemplate>
                                </Setter.Value>
                            </Setter>

                            <!-- The close button for workspace is no longer hidden on the HOME 
                                 tab page, since it is used to bring up the Start Page when pressed.
                            
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding Converter={StaticResource WorkspaceTypeConverter}}"
                                             Value="{x:Type models:HomeWorkspaceModel}">
                                    <Setter Property="Visibility"
                                            Value="Collapsed" />
                                </DataTrigger>
                            </Style.Triggers>
                            -->

                        </Style>

                        <Style TargetType="{x:Type TabItem}">
                            <Setter Property="MaxWidth"
                                    Value="{Binding Source={x:Static configuration:Configurations.TabDefaultWidth}}" />
                            <Setter Property="Width">
                                <Setter.Value>
                                    <MultiBinding Converter="{StaticResource TabSizeConverter}">
                                        <Binding RelativeSource="{RelativeSource Mode=FindAncestor, AncestorType={x:Type TabControl}}" />
                                        <Binding RelativeSource="{RelativeSource Mode=FindAncestor, AncestorType={x:Type TabControl}}"
                                                 Path="ActualWidth" />
                                        <Binding RelativeSource="{RelativeSource Mode=FindAncestor, AncestorType={x:Type TabControl}}"
                                                 Path="Items.Count" />
                                        <!--<Binding Path="Visibility" />-->
                                    </MultiBinding>
                                </Setter.Value>
                            </Setter>
                            <Setter Property="Template">
                                <Setter.Value>
                                    <ControlTemplate TargetType="{x:Type TabItem}">
                                        <Border Name="Border"
                                                BorderBrush="{StaticResource BorderBrushWhite}"
                                                CornerRadius="0,0,0,0">
                                            <Border.Style>
                                                <Style TargetType="Border">
                                                    <Style.Triggers>
                                                        <!--<DataTrigger Binding="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType={x:Type TabItem}},Path=IsSelected}" Value="True">
                                                            <Setter Property="Background" Value="{Binding ViewingHomespace, Converter={StaticResource WorkspaceBackgroundBrushConverter}}"/>
                                                            <Setter Property="BorderThickness" Value="1,0,1,1"/>
                                                        </DataTrigger>-->
                                                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType={x:Type TabItem}},Path=IsSelected}"
                                                                     Value="False">
                                                            <Setter Property="Background"
                                                                    Value="{StaticResource WorkspaceTabBorderSelectedFalse}" />
                                                            <Setter Property="BorderThickness"
                                                                    Value="0,1,1,0" />
                                                            <Setter Property="Margin"
                                                                    Value="0,0,0,-1" />
                                                        </DataTrigger>
                                                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType={x:Type TabItem}},Path=IsSelected}"
                                                                     Value="True">
                                                            <Setter Property="Background"
                                                                    Value="{StaticResource WorkspaceTabBorderSelectedTrue}" />
                                                            <Setter Property="BorderThickness"
                                                                    Value="0,0,1,0" />
                                                            <Setter Property="Margin"
                                                                    Value="0" />
                                                        </DataTrigger>
                                                    </Style.Triggers>
                                                </Style>
                                            </Border.Style>
                                            <Grid Margin="0,0,0,0">
                                                <Grid.ColumnDefinitions>
                                                    <ColumnDefinition Width="*" />
                                                    <ColumnDefinition Width="Auto" />
                                                </Grid.ColumnDefinitions>
                                                <ContentPresenter x:Name="ContentSite"
                                                                  Grid.Column="0"
                                                                  VerticalAlignment="Center"
                                                                  ContentSource="Header" />
                                                <Button Style="{StaticResource CloseButtonStyle}"
                                                        Command="{Binding HideCommand}"
                                                        Grid.Column="1">
                                                    <Image Width="16"
                                                           Height="16">
                                                        <Image.Style>
                                                            <Style TargetType="{x:Type Image}">
                                                                <Style.Triggers>
                                                                    <Trigger Property="IsMouseOver"
                                                                             Value="False">
                                                                        <Setter Property="Source"
                                                                                Value="/DynamoCoreWpf;component/UI/Images/closetab_normal.png" />
                                                                    </Trigger>
                                                                    <Trigger Property="IsMouseOver"
                                                                             Value="True">
                                                                        <Setter Property="Source"
                                                                                Value="/DynamoCoreWpf;component/UI/Images/closetab_hover.png" />
                                                                    </Trigger>
                                                                </Style.Triggers>
                                                            </Style>
                                                        </Image.Style>
                                                    </Image>
                                                </Button>
                                            </Grid>
                                        </Border>

                                    </ControlTemplate>
                                </Setter.Value>
                            </Setter>
                        </Style>

                    </TabControl.Resources>

                    <TabControl.ItemTemplate>

                        <DataTemplate>

                            <!--<Button>

                            <Button.Template>
                                <ControlTemplate TargetType="Button">
                                    <ContentPresenter Content="{TemplateBinding Content}"/>
                                </ControlTemplate>
                            </Button.Template>

                            <Button.InputBindings>
                                <MouseBinding Gesture="MiddleClick" Command="{Binding HideCommand}" />
                            </Button.InputBindings>-->

                            <Grid Height="20">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="Auto" />
                                    <ColumnDefinition Width="*" />
                                </Grid.ColumnDefinitions>

                                <StackPanel Orientation="Horizontal"
                                            VerticalAlignment="Center">

                                    <TextBlock Name="WorkspaceName"
                                               Margin="8,0,0,0"
                                               Padding="0,0,0,0"
                                               HorizontalAlignment="Stretch"
                                               VerticalAlignment="Center"
                                               TextTrimming="CharacterEllipsis">
                                        <TextBlock.Style>
                                            <Style TargetType="TextBlock">
                                                <Style.Triggers>

                                                    <DataTrigger Binding="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType={x:Type TabItem}},Path=IsSelected}"
                                                                 Value="True">
                                                        <Setter Property="Foreground"
                                                                Value="{StaticResource WorkspaceTabHeaderActiveTextBrush}"></Setter>
                                                        <Setter Property="FontWeight"
                                                                Value="SemiBold" />
                                                    </DataTrigger>

                                                    <DataTrigger Binding="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType={x:Type TabItem}},Path=IsSelected}"
                                                                 Value="False">
                                                        <Setter Property="Foreground"
                                                                Value="{StaticResource WorkspaceTabHeaderInactiveTextBrush}"></Setter>
                                                        <Setter Property="FontWeight"
                                                                Value="Normal" />
                                                    </DataTrigger>

                                                    <MultiDataTrigger>
                                                        <MultiDataTrigger.Conditions>
                                                            <Condition Binding="{Binding Converter={StaticResource WorkspaceTypeConverter}}"
                                                                       Value="{x:Type workspaces:HomeWorkspaceModel}" />
                                                            <Condition Binding="{Binding Path=FileName, Converter={StaticResource PathToSaveStateConverter}}"
                                                                       Value="Unsaved" />
                                                        </MultiDataTrigger.Conditions>
                                                        <Setter Property="Text"
                                                                Value="Home" />
                                                    </MultiDataTrigger>

                                                    <MultiDataTrigger>
                                                        <MultiDataTrigger.Conditions>
                                                            <Condition Binding="{Binding Converter={StaticResource WorkspaceTypeConverter}}"
                                                                       Value="{x:Type workspaces:HomeWorkspaceModel}" />
                                                            <Condition Binding="{Binding Path=FileName, Converter={StaticResource PathToSaveStateConverter}}"
                                                                       Value="Saved" />
                                                        </MultiDataTrigger.Conditions>
                                                        <Setter Property="Text"
                                                                Value="{Binding Path=FileName, Converter={StaticResource PathToFileNameConverter}}" />
                                                    </MultiDataTrigger>

                                                    <MultiDataTrigger>
                                                        <MultiDataTrigger.Conditions>
                                                            <Condition Binding="{Binding Converter={StaticResource WorkspaceTypeConverter}}"
                                                                       Value="{x:Type workspaces:CustomNodeWorkspaceModel}" />
                                                            <Condition Binding="{Binding Path=FileName, Converter={StaticResource PathToSaveStateConverter}}"
                                                                       Value="Unsaved" />
                                                        </MultiDataTrigger.Conditions>
                                                        <Setter Property="Text"
                                                                Value="{Binding Name}" />
                                                    </MultiDataTrigger>

                                                    <MultiDataTrigger>
                                                        <MultiDataTrigger.Conditions>
                                                            <Condition Binding="{Binding Converter={StaticResource WorkspaceTypeConverter}}"
                                                                       Value="{x:Type workspaces:CustomNodeWorkspaceModel}" />
                                                            <Condition Binding="{Binding Path=FileName, Converter={StaticResource PathToSaveStateConverter}}"
                                                                       Value="Saved" />
                                                        </MultiDataTrigger.Conditions>
                                                        <Setter Property="Text"
                                                                Value="{Binding Path=FileName, Converter={StaticResource PathToFileNameConverter}}" />
                                                    </MultiDataTrigger>

                                                </Style.Triggers>
                                            </Style>
                                        </TextBlock.Style>
                                    </TextBlock>

                                    <TextBlock Name="WorkspaceSaveState"
                                               Margin="0,0,0,0"
                                               VerticalAlignment="Center">
                                        <TextBlock.Style>
                                            <Style TargetType="TextBlock">
                                                <Style.Triggers>
                                                    <DataTrigger Binding="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType={x:Type TabItem}},Path=IsSelected}"
                                                                 Value="True">
                                                        <Setter Property="Foreground"
                                                                Value="{StaticResource WorkspaceTabHeaderActiveTextBrush}"></Setter>
                                                        <Setter Property="FontWeight"
                                                                Value="SemiBold" />
                                                    </DataTrigger>

                                                    <DataTrigger Binding="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType={x:Type TabItem}},Path=IsSelected}"
                                                                 Value="False">
                                                        <Setter Property="Foreground"
                                                                Value="{StaticResource WorkspaceTabHeaderInactiveTextBrush}"></Setter>
                                                        <Setter Property="FontWeight"
                                                                Value="Normal" />
                                                    </DataTrigger>

                                                    <DataTrigger Binding="{Binding HasUnsavedChanges}"
                                                                 Value="True">
                                                        <Setter Property="Text"
                                                                Value="*" />
                                                    </DataTrigger>

                                                    <DataTrigger Binding="{Binding HasUnsavedChanges}"
                                                                 Value="False">
                                                        <Setter Property="Text"
                                                                Value="" />
                                                    </DataTrigger>
                                                </Style.Triggers>
                                            </Style>
                                        </TextBlock.Style>
                                    </TextBlock>

                                </StackPanel>

                            </Grid>
                            <!--</Button>-->

                        </DataTemplate>

                    </TabControl.ItemTemplate>

                    <TabControl.ContentTemplate>
                        <DataTemplate>
                            <views:WorkspaceView></views:WorkspaceView>
                        </DataTemplate>
                    </TabControl.ContentTemplate>

                </TabControl>
            </Grid>

        </Border>

        <!--Collapsed Left Sidebar-->
        <StackPanel Grid.Row="2"
                    Grid.Column="2"
                    Orientation="Vertical"
                    Name="collapsedLibrarySidebar"
                    Width="Auto"
                    Height="Auto"
                    Background="{StaticResource HighlightedBrush}"
                    HorizontalAlignment="Left"
                    VerticalAlignment="Top"
                    Margin="0,310,0,0">
            <Grid Background="#353535"
                  Width="Auto"
                  Cursor="Hand">
                <Button Click="OnCollapsedLeftSidebarClick"
                        Template="{DynamicResource BackgroundButton}">
                    <Button.Resources>
                        <ControlTemplate x:Key="BackgroundButton"
                                         TargetType="Button">
                            <Border Name="border"
                                    BorderThickness="0"
                                    BorderBrush="Black"
                                    VerticalAlignment="Stretch"
                                    Padding="5,0,5,0">
                                <ContentPresenter HorizontalAlignment="Stretch"
                                                  VerticalAlignment="Stretch" />
                            </Border>
                        </ControlTemplate>
                    </Button.Resources>
                    <Grid Mouse.MouseEnter="LibraryHandle_MouseEnter"
                          Mouse.MouseLeave="LibraryHandle_MouseLeave">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*" />
                            <ColumnDefinition Width="Auto" />
                        </Grid.ColumnDefinitions>
                        <StackPanel Orientation="Horizontal" 
                                    HorizontalAlignment="Center">
                            <TextBlock Grid.Column="0"
                                   Name="LibrarySidebarText"
                                   VerticalAlignment="Center"
                                   Foreground="#aaaaaa"
                                   FontWeight="Normal"
                                   Margin="5,0,0,5"
                                   Text="{x:Static p:Resources.LibraryViewTitle}">
                            </TextBlock>
                            <Image Grid.Column="0"
                               Name="LibrarySidebarIcon"
                               Source="/DynamoCoreWpf;component/UI/Images/expand_normal.png"
                               Visibility="Visible"
                               Width="10"
                               Height="10"
                               Margin="5,5,5,5"
                               RenderTransformOrigin="0.5, 0.5">
                                <Image.RenderTransform>
                                    <RotateTransform Angle="-90" />
                                </Image.RenderTransform>
                            </Image>
                        </StackPanel>
                    </Grid>
                </Button>
            </Grid>

            <StackPanel.RenderTransform>
                <RotateTransform Angle="-90" />
            </StackPanel.RenderTransform>
        </StackPanel>
        
        <!--Collapsed Extension Sidebar-->
        <StackPanel Grid.Row="2"
                    Grid.Column="2"
                    Orientation="Vertical"
                    Name="collapsedExtensionSidebar"
                    Width="Auto"
                    Height="Auto"
                    Background="{StaticResource HighlightedBrush}"
                    HorizontalAlignment="Right"
                    VerticalAlignment="Top"
                    Margin="0,310,0,0"
                    RenderTransformOrigin="1,0">
            <Grid Background="#353535"
                  Width="Auto"
                  Cursor="Hand">
                <Button Click="OnCollapsedRightSidebarClick"
                        Template="{DynamicResource BackgroundButton}">
                    <Button.Resources>
                        <ControlTemplate x:Key="BackgroundButton"
                                         TargetType="Button">
                            <Border Name="border"
                                    BorderThickness="0"
                                    BorderBrush="Black"
                                    VerticalAlignment="Stretch"
                                    Padding="5,0,5,0">
                                <ContentPresenter HorizontalAlignment="Stretch"
                                                  VerticalAlignment="Stretch" />
                            </Border>
                        </ControlTemplate>
                    </Button.Resources>
                    <Grid Mouse.MouseEnter="ExtensionHandle_MouseEnter"
                          Mouse.MouseLeave="ExtensionHandle_MouseLeave">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*" />
                            <ColumnDefinition Width="Auto" />
                        </Grid.ColumnDefinitions>
                        <StackPanel Orientation="Horizontal" 
                                    HorizontalAlignment="Center">
                            <Image Grid.Column="0"
                               Name="ExtensionSidebarIcon"
                               Source="/DynamoCoreWpf;component/UI/Images/expand_normal.png"
                               Visibility="Visible"
                               Width="10"
                               Height="10"
                               Margin="5,5,5,5"
                               RenderTransformOrigin="0.5, 0.5">
                                <Image.RenderTransform>
                                    <RotateTransform Angle="-90" />
                                </Image.RenderTransform>
                            </Image>
                            <TextBlock Grid.Column="0"
                                   Name="ExtensionSidebarText"
                                   VerticalAlignment="Center"
                                   Foreground="#aaaaaa"
                                   FontWeight="Normal"
                                   Margin="0,5,5,0"
                                   Text="{x:Static p:Resources.ExtensionsViewTitle}"
                                   RenderTransformOrigin="0.5,0.5">
                                <TextBlock.RenderTransform>
                                    <RotateTransform Angle="180"/>
                                </TextBlock.RenderTransform>
                            </TextBlock>
                        </StackPanel>
                    </Grid>
                </Button>

            </Grid>

            <StackPanel.RenderTransform>
                <RotateTransform Angle="90" />
            </StackPanel.RenderTransform>
        </StackPanel>

        <!--Console Log Area-->
        <ScrollViewer Name="LogScroller"
                      VerticalAlignment="Stretch"
                      VerticalScrollBarVisibility="Auto"
                      HorizontalAlignment="Stretch"
                      HorizontalScrollBarVisibility="Hidden"
                      Background="Black"
                      Opacity="1"
                      Visibility="Visible"
                      Grid.Row="4"
                      Grid.Column="0"
                      Grid.ColumnSpan="5">

            <ScrollViewer.ContextMenu>
                <ContextMenu>
                    <MenuItem Header="{x:Static p:Resources.DynamoViewContextMenuClearLog}"
                              Command="{Binding ClearLogCommand}" />
                </ContextMenu>
            </ScrollViewer.ContextMenu>

            <TextBox Text="{Binding Path=LogText, Mode=OneWay}"
                     Foreground="#FF888888"
                     BorderThickness="0"
                     BorderBrush="#00000000"
                     Background="Black"
                     Margin="0"
                     TextWrapping="Wrap"
                     IsReadOnly="True"
                     IsReadOnlyCaretVisible="True"
                     IsUndoEnabled="False"
                     IsTabStop="False"
                     FontFamily="Consolas"
                     TextChanged="TextBoxBase_OnTextChanged" />
        </ScrollViewer>

        <!--Left Sidebar Library-->
        <Grid Height="Auto"
              Width="Auto"
              HorizontalAlignment="Stretch"
              Name="sidebarGrid"
              VerticalAlignment="Stretch"
              Visibility="Visible"
              Grid.Row="2"
              Grid.Column="0"
              Grid.RowSpan="2">
        </Grid>

        <!--Right Extensions Sidebar-->
        <Grid Height="Auto"
              Width="Auto"
              HorizontalAlignment="Stretch"
              Name="sidebarExtensionsGrid"
              VerticalAlignment="Stretch"
              Visibility="Visible"
              Grid.Row="2"
              Grid.Column="4"
              Grid.RowSpan="2">
            <TabControl Name="tabDynamic" Background="#353535" BorderThickness="0" ItemsSource="{Binding}">
                <TabControl.Resources>
                    <!--Styling for the close button in the tab-->
                    <Style TargetType="{x:Type Button}"
                               x:Key="CloseButtonStyle">
                        <Setter Property="OverridesDefaultStyle"
                                    Value="True" />
                        <Setter Property="SnapsToDevicePixels"
                                    Value="true" />
                        <Setter Property="VerticalAlignment"
                                    Value="Center" />
                        <Setter Property="HorizontalAlignment"
                                    Value="Right" />
                        <Setter Property="Margin"
                                    Value="8,2,0,0" />
                        <Setter Property="Background"
                                    Value="Transparent" />
                        <Setter Property="BorderThickness"
                                    Value="0" />
                        <Setter Property="Padding"
                                    Value="0" />
                        <Setter Property="Template">
                            <Setter.Value>
                                <ControlTemplate TargetType="Button">
                                    <Border x:Name="Border"
                                                Background="Transparent"
                                                BorderThickness="0 0 0 0">
                                        <ContentPresenter Margin="0 0 0 0" />
                                    </Border>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                    </Style>
                    
                    <!--Template for tab header in the extensions side bar-->
                    <DataTemplate x:Key="TabHeader" DataType="TabItem">
                        <DockPanel HorizontalAlignment="Stretch" Name ="TabPanel" MinWidth="{Binding Source={x:Static configuration:Configurations.ExtensionsSideBarTabMinWidth}}">
                            <TextBlock Text="{Binding RelativeSource={RelativeSource AncestorType={x:Type TabItem}}, Path=Header}" HorizontalAlignment="Stretch"/>
                            <!--Button to close a particular tab-->
                            <Button Name="CloseButton" Style="{StaticResource CloseButtonStyle}" DockPanel.Dock="Right" Click="CloseExtensionTab"
                                              CommandParameter="{Binding RelativeSource={RelativeSource AncestorType={x:Type TabItem}}, Path=Name}">
                                <Image Width="14" Height="14" HorizontalAlignment="Right" VerticalAlignment="Center">
                                    <Image.Style>
                                        <Style TargetType="{x:Type Image}">
                                            <Style.Triggers>
                                                <Trigger Property="IsMouseOver" Value="False">
                                                    <Setter Property="Source"
                                                            Value="/DynamoCoreWpf;component/UI/Images/closetab_normal.png" />
                                                </Trigger>
                                                <Trigger Property="IsMouseOver" Value="True">
                                                    <Setter Property="Source"
                                                            Value="/DynamoCoreWpf;component/UI/Images/closetab_hover.png" />
                                                </Trigger>
                                            </Style.Triggers>
                                        </Style>
                                    </Image.Style>
                                </Image>
                            </Button>
                        </DockPanel>
                    </DataTemplate>
                    
                    <!--Styling for the tab in the extensions side bar-->
                    <Style TargetType="{x:Type TabItem}">
                        <Setter Property="MinWidth" Value="{Binding Source={x:Static configuration:Configurations.ExtensionsSideBarTabMinWidth}}" />
                        <Setter Property="Template">
                            <Setter.Value>
                                <ControlTemplate TargetType="{x:Type TabItem}">
                                    <Grid>
                                        <Border Name="Border" Margin="0,0,0,0"  BorderThickness="1 0 1 0" 
                                                        BorderBrush="{StaticResource BorderBrushWhite}">
                                            <ContentPresenter x:Name="ContentSite" VerticalAlignment="Center"
                                                     HorizontalAlignment="Stretch"
                                                     ContentSource="Header" Margin="3,0,0,3"
                                                     RecognizesAccessKey="True">
                                            </ContentPresenter>
                                        </Border>
                                    </Grid>
                                    <!--Properties for selected and unselected tabs-->
                                    <ControlTemplate.Triggers>
                                        <Trigger Property="IsSelected" Value="true">
                                            <Setter Property="Foreground"
                                                         Value="{StaticResource WorkspaceTabHeaderActiveTextBrush}" />
                                        </Trigger>
                                        <Trigger Property="IsSelected" Value="false">
                                            <Setter Property="Foreground"
                                                         Value="{StaticResource WorkspaceTabHeaderInactiveTextBrush}" />
                                            <Setter TargetName="Border" Property="Background"
                                                         Value="{StaticResource HighlightedBrush}" />
                                        </Trigger>
                                    </ControlTemplate.Triggers>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                    </Style>
                </TabControl.Resources>
            </TabControl>
        </Grid>

        <!--Bottom Panel including RunMode etc-->
        <WrapPanel Orientation="Horizontal"
                   Grid.Row="5"
                   Grid.Column="0"
                   Grid.RowSpan="1"
                   HorizontalAlignment="Stretch"
                   VerticalAlignment="Stretch"
                   Grid.ColumnSpan="5">

            <WrapPanel.Background>
                <LinearGradientBrush  StartPoint="0.5,0"
                                      EndPoint="0.5,1">
                    <GradientStop Color="#222"
                                  Offset="0.0" />
                    <GradientStop Color="#111"
                                  Offset="1.0" />
                </LinearGradientBrush>
            </WrapPanel.Background>

            <Grid Name="bottomBarGrid"
                  Grid.Row="4"
                  Grid.Column="0"
                  Grid.RowSpan="1"
                  Grid.ColumnSpan="5"
                  HorizontalAlignment="Stretch"
                  VerticalAlignment="Stretch">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="*"></ColumnDefinition>
                    <ColumnDefinition Width="*"></ColumnDefinition>
                </Grid.ColumnDefinitions>

                <WrapPanel Orientation="Horizontal"
                           Grid.Row="0"
                           Grid.Column="0"
                           HorizontalAlignment="Stretch"
                           VerticalAlignment="Stretch" 
                           Visibility="{Binding IsAbleToGoHome, Converter={StaticResource InverseBoolToVisibilityConverter}}">

                        <controls1:RunSettingsControl x:Name="RunSettingsControl"
                                                    Margin="2.5,5,5,5" 
                                                     VerticalAlignment="Stretch"
                                                     DataContext="{Binding Path=HomeSpaceViewModel.RunSettingsViewModel}"/>
                </WrapPanel>
                
                <!--NotificationControl for showing run-time notifications-->
                <controls1:NotificationsControl Grid.Column="1"/>
                
            </Grid>

        </WrapPanel>


        <!--Split Between Console and Canvas-->
        <GridSplitter ResizeDirection="Rows"
                      Grid.Column="2"
                      Grid.ColumnSpan="1"
                      Grid.Row="3"
                      Grid.RowSpan="1"
                      Width="Auto"
                      Height="2"
                      Name="horizontalSplitter"
                      HorizontalAlignment="Stretch"
                      VerticalAlignment="Stretch"
                      Margin="0"
                      Background="#999"
                      Cursor="/DynamoCoreWpf;component/UI/Images/resize_vertical.cur" />

        <!--Split Between Library and Canvas-->
        <GridSplitter ResizeDirection="Auto"
                      Grid.Column="1"
                      Grid.Row="2"
                      Grid.RowSpan="2"
                      Height="Auto"
                      Width="3"
                      Name="verticalSplitter"
                      HorizontalAlignment="Stretch"
                      VerticalAlignment="Stretch"
                      Margin="0"
                      Background="Transparent"
                      Cursor="/DynamoCoreWpf;component/UI/Images/resize_horizontal.cur" />
        
        <!--Split Between Extension and Canvas-->
        <GridSplitter ResizeDirection="Auto"
                      Grid.Column="3"
                      Grid.Row="2"
                      Grid.RowSpan="2"
                      Height="Auto"
                      Width="3"
                      Name="extensionSplitter"
                      HorizontalAlignment="Stretch"
                      VerticalAlignment="Stretch"
                      Margin="0"
                      Background="Transparent"
                      Cursor="/DynamoCoreWpf;component/UI/Images/resize_horizontal.cur" />

        <!--Start Page-->
        <ItemsControl Name="startPageItemsControl"
                      Grid.Row="2"
                      Grid.RowSpan="4"
                      Grid.Column="0"
                      Grid.ColumnSpan="5">
            <ItemsControl.ItemTemplate>
                <DataTemplate DataType="{x:Type uictrls:StartPageViewModel}">
                    <Grid>
                        <Grid.Height>
                            <Binding Path="ActualHeight"
                                     Mode="OneWay"
                                     RelativeSource="{RelativeSource FindAncestor, AncestorType={x:Type ItemsControl}}" />
                        </Grid.Height>
                        <uictrls:StartPageView />
                    </Grid>
                </DataTemplate>
            </ItemsControl.ItemTemplate>
            <ItemsControl.Visibility>
                <Binding Path="DataContext.ShowStartPage"
                         Mode="OneWay"
                         RelativeSource="{RelativeSource FindAncestor, AncestorType={x:Type controls:DynamoView}}"
                         Converter="{StaticResource BooleanToVisibilityConverter}"
                         UpdateSourceTrigger="Explicit" />
            </ItemsControl.Visibility>
        </ItemsControl>

        <!--Gallery or What's new-->
        <Grid Name="galleryBackground"
              Visibility="Hidden"
              MouseLeftButtonDown="OnGalleryBackgroundMouseClick">
            <Grid.Background>
                <SolidColorBrush Color="Black" Opacity="0.8"/>
            </Grid.Background>
        </Grid>

        <Grid Name="FocusableGrid" Width="0" Height="0" Focusable="True"/>
    </Grid>

</Window>
