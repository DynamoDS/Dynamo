<UserControl
    x:Class="Dynamo.Nodes.AnnotationView"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:System="clr-namespace:System;assembly=mscorlib"
    xmlns:controls="clr-namespace:Dynamo.Controls"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:dynui="clr-namespace:Dynamo.UI.Controls"
    xmlns:fa="http://schemas.fontawesome.io/icons/"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:nodes="clr-namespace:Dynamo.Graph.Nodes;assembly=DynamoCore"
    xmlns:p="clr-namespace:Dynamo.Wpf.Properties"
    xmlns:utilities="clr-namespace:Dynamo.Wpf.Utilities"
    xmlns:viewModels="clr-namespace:Dynamo.ViewModels"
    xmlns:views="clr-namespace:Dynamo.Views"
    Name="Group"
    Canvas.Left="{Binding Left, Mode=TwoWay}"
    Canvas.Top="{Binding Top, Mode=TwoWay}"
    Width="Auto"
    Height="Auto"
    d:DataContext="{d:DesignInstance Type=viewModels:AnnotationViewModel}"
    AllowDrop="True"
    IsHitTestVisible="True"
    MouseLeftButtonDown="AnnotationView_OnMouseLeftButtonDown"
    MouseRightButtonDown="AnnotationView_OnMouseRightButtonDown"
    Visibility="{Binding IsCollapsed, Converter={StaticResource InverseBoolToVisibilityCollapsedConverter}}"
    mc:Ignorable="d">

    <UserControl.Resources>
        <utilities:GroupStyleItemSelector x:Key="GroupStyleItemSelector" />
        <controls:StringToBrushColorConverter x:Key="StringToBrushColorConverter" />
        <controls:TextForegroundSaturationColorConverter x:Key="TextForegroundSaturationColorConverter" />
        <controls:BackgroundConditionEvaluator x:Key="BackgroundConditionEvaluator" />
        <controls:ZoomToVisibilityCollapsedConverter x:Key="ZoomToVisibilityCollapsedConverter" />
        <CornerRadius
            x:Key="ExpanderCornerRadius"
            TopLeft="10"
            TopRight="10" />
        <Style x:Key="ColorSelectorListBox" TargetType="ListBox">
            <Setter Property="SnapsToDevicePixels" Value="true" />
            <Setter Property="OverridesDefaultStyle" Value="true" />
            <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Disabled" />
            <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Hidden" />
            <Setter Property="ScrollViewer.CanContentScroll" Value="true" />
            <Setter Property="Width" Value="150" />
            <Setter Property="Height" Value="54" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="ListBox">
                        <Grid Margin="0,13,4,8">
                            <ScrollViewer Margin="0" Focusable="false">
                                <WrapPanel IsItemsHost="True" />
                            </ScrollViewer>
                        </Grid>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style x:Key="ColorSelectorListBoxItem" TargetType="ListBoxItem">
            <Setter Property="SnapsToDevicePixels" Value="true" />
            <Setter Property="OverridesDefaultStyle" Value="true" />
            <Setter Property="Width" Value="18" />
            <Setter Property="Height" Value="20" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="ListBoxItem">
                        <Grid Margin="0,0,4,5" SnapsToDevicePixels="true">
                            <Grid.Background>
                                <SolidColorBrush Color="Transparent" />
                            </Grid.Background>
                            <ContentPresenter />
                            <Border
                                x:Name="Border"
                                Background="Transparent"
                                BorderBrush="Black"
                                BorderThickness="1"
                                Opacity="0.25" />
                            <VisualStateManager.VisualStateGroups>
                                <VisualStateGroup x:Name="CommonStates">
                                    <VisualState x:Name="Normal" />
                                    <VisualState x:Name="MouseOver">
                                        <Storyboard>
                                            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="Border" Storyboard.TargetProperty="Opacity">
                                                <EasingDoubleKeyFrame KeyTime="0" Value="1.0" />
                                            </DoubleAnimationUsingKeyFrames>
                                        </Storyboard>
                                    </VisualState>
                                </VisualStateGroup>
                                <VisualStateGroup x:Name="SelectionStates">
                                    <VisualState x:Name="Unselected" />
                                    <VisualState x:Name="Selected">
                                        <Storyboard>
                                            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="Border" Storyboard.TargetProperty="Opacity">
                                                <EasingDoubleKeyFrame KeyTime="0" Value="1.0" />
                                            </DoubleAnimationUsingKeyFrames>
                                        </Storyboard>
                                    </VisualState>
                                    <VisualState x:Name="SelectedUnfocused" />
                                </VisualStateGroup>
                            </VisualStateManager.VisualStateGroups>
                        </Grid>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <ControlTemplate x:Key="GroupExpanderTemplate" TargetType="{x:Type ToggleButton}">
            <Border
                x:Name="expanderBorder"
                Padding="{TemplateBinding Padding}"
                Background="{TemplateBinding Background}"
                BorderBrush="{TemplateBinding BorderBrush}"
                BorderThickness="{TemplateBinding BorderThickness}">
                <Grid>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto" />
                    </Grid.ColumnDefinitions>
                    <Rectangle Grid.ColumnSpan="1" Fill="Transparent" />
                    <Image
                        x:Name="sign"
                        Width="16"
                        Height="16"
                        Source="/DynamoCoreWpf;component/UI/Images/caret_down_grey_48px.png" />
                </Grid>
            </Border>
            <ControlTemplate.Triggers>
                <MultiDataTrigger>
                    <MultiDataTrigger.Conditions>
                        <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsMouseOver}" Value="False" />
                        <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsChecked}" Value="False" />
                        <Condition Binding="{Binding Background, Converter={StaticResource BackgroundConditionEvaluator}}" Value="False" />
                    </MultiDataTrigger.Conditions>
                    <Setter TargetName="sign" Property="Source" Value="/DynamoCoreWpf;component/UI/Images/caret_down_grey_48px.png" />
                </MultiDataTrigger>

                <MultiDataTrigger>
                    <MultiDataTrigger.Conditions>
                        <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsMouseOver}" Value="False" />
                        <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsChecked}" Value="False" />
                        <Condition Binding="{Binding Background, Converter={StaticResource BackgroundConditionEvaluator}}" Value="True" />
                    </MultiDataTrigger.Conditions>
                    <Setter TargetName="sign" Property="Source" Value="/DynamoCoreWpf;component/UI/Images/caret_down_white_48px.png" />
                </MultiDataTrigger>

                <MultiDataTrigger>
                    <MultiDataTrigger.Conditions>
                        <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsMouseOver}" Value="True" />
                        <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsChecked}" Value="False" />
                    </MultiDataTrigger.Conditions>
                    <Setter TargetName="sign" Property="Source" Value="/DynamoCoreWpf;component/UI/Images/caret_down_hover_48px.png" />
                </MultiDataTrigger>

                <MultiDataTrigger>
                    <MultiDataTrigger.Conditions>
                        <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsMouseOver}" Value="False" />
                        <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsChecked}" Value="True" />
                        <Condition Binding="{Binding Background, Converter={StaticResource BackgroundConditionEvaluator}}" Value="False" />
                    </MultiDataTrigger.Conditions>
                    <Setter TargetName="sign" Property="Source" Value="/DynamoCoreWpf;component/UI/Images/caret_up_grey_48px.png" />
                </MultiDataTrigger>

                <MultiDataTrigger>
                    <MultiDataTrigger.Conditions>
                        <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsMouseOver}" Value="False" />
                        <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsChecked}" Value="True" />
                        <Condition Binding="{Binding Background, Converter={StaticResource BackgroundConditionEvaluator}}" Value="True" />
                    </MultiDataTrigger.Conditions>
                    <Setter TargetName="sign" Property="Source" Value="/DynamoCoreWpf;component/UI/Images/caret_up_white_48px.png" />
                </MultiDataTrigger>

                <MultiDataTrigger>
                    <MultiDataTrigger.Conditions>
                        <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsMouseOver}" Value="True" />
                        <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsChecked}" Value="True" />
                    </MultiDataTrigger.Conditions>
                    <Setter TargetName="sign" Property="Source" Value="/DynamoCoreWpf;component/UI/Images/caret_up_hover_48px.png" />
                </MultiDataTrigger>
            </ControlTemplate.Triggers>
        </ControlTemplate>

        <ControlTemplate x:Key="FrozenButtonZoomedInTemplate" TargetType="Button">
            <Image x:Name="FrozenImageZoomedIn" Source="/DynamoCoreWpf;component/UI/Images/Annotations/frozen-dark-64px.png" />
            <ControlTemplate.Triggers>
                <MultiDataTrigger>
                    <MultiDataTrigger.Conditions>
                        <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="True" />
                    </MultiDataTrigger.Conditions>
                    <Setter TargetName="FrozenImageZoomedIn" Property="Source" Value="/DynamoCoreWpf;component/UI/Images/Annotations/frozen-hover-64px.png" />
                </MultiDataTrigger>
                <MultiDataTrigger>
                    <MultiDataTrigger.Conditions>
                        <Condition Binding="{Binding DataContext.Background, RelativeSource={RelativeSource AncestorType=UserControl}, Converter={StaticResource BackgroundConditionEvaluator}}" Value="True" />
                        <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="False" />
                    </MultiDataTrigger.Conditions>
                    <Setter TargetName="FrozenImageZoomedIn" Property="Source" Value="/DynamoCoreWpf;component/UI/Images/Annotations/frozen-light-64px.png" />
                </MultiDataTrigger>
            </ControlTemplate.Triggers>
        </ControlTemplate>

        <ControlTemplate x:Key="FrozenButtonZoomedOutTemplate" TargetType="Button">
            <Image
                x:Name="FrozenImageZoomedOut"
                Width="{TemplateBinding Width}"
                Height="{TemplateBinding Height}"
                Source="/DynamoCoreWpf;component/UI/Images/Annotations/frozen-dark-64px.png" />
            <ControlTemplate.Triggers>
                <MultiDataTrigger>
                    <MultiDataTrigger.Conditions>
                        <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="True" />
                    </MultiDataTrigger.Conditions>
                    <Setter TargetName="FrozenImageZoomedOut" Property="Source" Value="/DynamoCoreWpf;component/UI/Images/Annotations/frozen-hover-64px.png" />
                </MultiDataTrigger>
            </ControlTemplate.Triggers>
        </ControlTemplate>

        <Style TargetType="{x:Type Expander}">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Expander}">
                        <Grid>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto" />
                                <RowDefinition x:Name="ContentRow" Height="0" />
                            </Grid.RowDefinitions>
                            <Border
                                x:Name="headerBorder"
                                Grid.Row="0"
                                Margin="0"
                                Padding="0"
                                CornerRadius="{StaticResource ExpanderCornerRadius}"
                                ToolTipService.IsEnabled="{TemplateBinding IsExpanded,
                                                                           Converter={StaticResource InverseBooleanConverter}}">
                                <Border.Background>
                                    <SolidColorBrush Color="{Binding RelativeSource={RelativeSource AncestorType={x:Type UserControl}}, Path=DataContext.Background}" />
                                </Border.Background>
                                <Border.ToolTip>
                                    <dynui:DynamoToolTip
                                        Margin="5,0,0,0"
                                        AttachmentSide="Top"
                                        Style="{DynamicResource ResourceKey=SLightToolTip}">
                                        <StackPanel MaxWidth="320" Orientation="Vertical">
                                            <TextBlock Margin="0,0,0,10" Text="{Binding AnnotationText}" />
                                            <TextBlock Text="{Binding AnnotationDescriptionText}" TextWrapping="WrapWithOverflow" />
                                        </StackPanel>
                                    </dynui:DynamoToolTip>
                                </Border.ToolTip>
                                <Grid>
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="*" />
                                        <ColumnDefinition Width="Auto" />
                                        <ColumnDefinition Width="Auto" />
                                        <ColumnDefinition Width="Auto" />
                                    </Grid.ColumnDefinitions>
                                    <ContentPresenter
                                        Grid.ColumnSpan="3"
                                        Margin="4"
                                        HorizontalAlignment="Left"
                                        ContentSource="Header"
                                        RecognizesAccessKey="True" />

                                    <!--  Warning/Error Icon  -->
                                    <Image
                                        Grid.Column="0"
                                        Width="16px"
                                        Height="16px"
                                        Margin="0,0,2.5,2.5"
                                        HorizontalAlignment="Right"
                                        VerticalAlignment="Bottom">
                                        <Image.Style>
                                            <Style TargetType="Image">
                                                <Style.Triggers>
                                                    <DataTrigger Binding="{Binding AnnotationModel.GroupState}" Value="{x:Static nodes:ElementState.Warning}">
                                                        <Setter Property="Source" Value="/DynamoCoreWpf;component/UI/Images/warning.png" />
                                                    </DataTrigger>
                                                    <DataTrigger Binding="{Binding AnnotationModel.GroupState}" Value="{x:Static nodes:ElementState.Error}">
                                                        <Setter Property="Source" Value="/DynamoCoreWpf;component/UI/Images/error.png" />
                                                    </DataTrigger>
                                                </Style.Triggers>
                                            </Style>
                                        </Image.Style>
                                    </Image>

                                    <!--  Frozen Button/Icon  -->
                                    <Grid>
                                        <Grid.Style>
                                            <Style TargetType="Grid">
                                                <Setter Property="Visibility" Value="Visible" />
                                                <Style.Triggers>
                                                    <DataTrigger Binding="{Binding Path=DataContext.Zoom, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type views:WorkspaceView}}, Converter={StaticResource ZoomToVisibilityCollapsedConverter}}" Value="Visible">
                                                        <Setter Property="Visibility" Value="Collapsed" />
                                                    </DataTrigger>
                                                </Style.Triggers>
                                            </Style>
                                        </Grid.Style>
                                        <Button
                                            Width="16"
                                            Height="16"
                                            Margin="0,0,3.5,3"
                                            HorizontalAlignment="Right"
                                            VerticalAlignment="Bottom"
                                            Command="{Binding Path=ToggleIsFrozenGroupCommand}"
                                            Template="{StaticResource FrozenButtonZoomedInTemplate}"
                                            Visibility="{Binding DataContext.AnnotationModel.IsFrozen, RelativeSource={RelativeSource AncestorType=UserControl}, Converter={StaticResource BooleanToVisibilityCollapsedConverter}}">
                                            <Button.ToolTip>
                                                <ToolTip Style="{StaticResource GenericToolTipLight}">
                                                    <TextBlock Text="{x:Static p:Resources.GroupFrozenButtonToolTip}" />
                                                </ToolTip>
                                            </Button.ToolTip>
                                        </Button>
                                    </Grid>

                                    <!--  Expander button  -->
                                    <ToggleButton
                                        Grid.Column="2"
                                        Margin="0,0,0,2.5"
                                        VerticalAlignment="Bottom"
                                        IsChecked="{Binding IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                                        OverridesDefaultStyle="True"
                                        Template="{StaticResource GroupExpanderTemplate}" />

                                    <!--  Group context menu  -->
                                    <Button
                                        x:Name="contextMenu"
                                        Grid.Column="3"
                                        Height="16"
                                        Margin="0,2.5,0,2.5"
                                        VerticalAlignment="Bottom"
                                        Background="Transparent"
                                        BorderBrush="Transparent"
                                        BorderThickness="0"
                                        Click="contextMenu_Click">
                                        <Button.Style>
                                            <Style TargetType="{x:Type Button}">
                                                <Setter Property="OverridesDefaultStyle" Value="True" />
                                                <Setter Property="Template">
                                                    <Setter.Value>
                                                        <ControlTemplate TargetType="Button">
                                                            <Border
                                                                Name="border"
                                                                Background="{TemplateBinding Background}"
                                                                BorderThickness="0">
                                                                <Image
                                                                    x:Name="menuIcon"
                                                                    Width="16"
                                                                    Height="16" />
                                                            </Border>
                                                            <ControlTemplate.Triggers>
                                                                <MultiDataTrigger>
                                                                    <MultiDataTrigger.Conditions>
                                                                        <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsMouseOver}" Value="False" />
                                                                        <Condition Binding="{Binding Background, Converter={StaticResource BackgroundConditionEvaluator}}" Value="False" />
                                                                    </MultiDataTrigger.Conditions>
                                                                    <Setter TargetName="menuIcon" Property="Source" Value="/DynamoCoreWpf;component/UI/Images/menu_grey_48px.png" />
                                                                </MultiDataTrigger>
                                                                <MultiDataTrigger>
                                                                    <MultiDataTrigger.Conditions>
                                                                        <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsMouseOver}" Value="False" />
                                                                        <Condition Binding="{Binding Background, Converter={StaticResource BackgroundConditionEvaluator}}" Value="True" />
                                                                    </MultiDataTrigger.Conditions>
                                                                    <Setter TargetName="menuIcon" Property="Source" Value="/DynamoCoreWpf;component/UI/Images/menu_white_48px.png" />
                                                                </MultiDataTrigger>
                                                                <MultiDataTrigger>
                                                                    <MultiDataTrigger.Conditions>
                                                                        <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsMouseOver}" Value="True" />
                                                                    </MultiDataTrigger.Conditions>
                                                                    <Setter TargetName="menuIcon" Property="Source" Value="/DynamoCoreWpf;component/UI/Images/menu_hover_48px.png" />
                                                                </MultiDataTrigger>
                                                            </ControlTemplate.Triggers>
                                                        </ControlTemplate>
                                                    </Setter.Value>
                                                </Setter>
                                            </Style>
                                        </Button.Style>
                                    </Button>
                                </Grid>
                            </Border>

                            <Border x:Name="Content" Grid.Row="1">
                                <ContentPresenter />
                            </Border>
                        </Grid>

                        <ControlTemplate.Triggers>
                            <Trigger Property="IsExpanded" Value="True">
                                <Setter TargetName="ContentRow" Property="Height" Value="{Binding Height, ElementName=Content}" />
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <ControlTemplate x:Key="CollapsedPortToggleButtonTemplate" TargetType="ToggleButton">
            <Border Background="Transparent">
                <StackPanel Margin="{TemplateBinding Margin}" Orientation="Horizontal">
                    <TextBlock VerticalAlignment="Center" Foreground="{Binding Background, Converter={StaticResource TextForegroundSaturationColorConverter}, ConverterParameter=groupPortToggle}">
                        <TextBlock.Text>
                            <MultiBinding StringFormat="{}{0} {1}">
                                <Binding Path="Tag" RelativeSource="{RelativeSource TemplatedParent}" />
                                <Binding Path="Content" RelativeSource="{RelativeSource TemplatedParent}" />
                            </MultiBinding>
                        </TextBlock.Text>
                    </TextBlock>
                    <Path
                        x:Name="ArrowPath"
                        Width="8"
                        Height="6"
                        Margin="6,0,0,0"
                        VerticalAlignment="Center"
                        Data="M0,0 L0,2 L4,6 L8,2 L8,0 L4,4 z"
                        Fill="{Binding Background, Converter={StaticResource TextForegroundSaturationColorConverter}, ConverterParameter=groupPortToggle}"
                        Stretch="Fill">
                        <Path.RenderTransform>
                            <RotateTransform x:Name="PathRotation" Angle="0" CenterX="4" CenterY="3" />
                        </Path.RenderTransform>
                    </Path>
                </StackPanel>
            </Border>
            <ControlTemplate.Triggers>
                <Trigger Property="IsChecked" Value="True">
                    <Setter TargetName="ArrowPath" Property="RenderTransform">
                        <Setter.Value>
                            <RotateTransform Angle="0" CenterX="4" CenterY="3" />
                        </Setter.Value>
                    </Setter>
                </Trigger>
                <Trigger Property="IsChecked" Value="False">
                    <Setter TargetName="ArrowPath" Property="RenderTransform">
                        <Setter.Value>
                            <RotateTransform Angle="180" CenterX="4" CenterY="3" />
                        </Setter.Value>
                    </Setter>
                </Trigger>
            </ControlTemplate.Triggers>
        </ControlTemplate>

        <Style x:Key="BaseCollapsedPortToggleStyle" TargetType="ToggleButton">
            <Setter Property="Background" Value="Transparent" />
            <Setter Property="BorderThickness" Value="0" />
            <Setter Property="Cursor" Value="Hand" />
            <Setter Property="Template" Value="{StaticResource CollapsedPortToggleButtonTemplate}" />
        </Style>

        <Style x:Key="GroupResizeThumbStyle" TargetType="{x:Type Thumb}">
            <Setter Property="SnapsToDevicePixels" Value="True" />
            <Setter Property="Margin" Value="0,0,2.5,2.5" />
            <Setter Property="Width" Value="10" />
            <Setter Property="Height" Value="10" />
            <Setter Property="HorizontalAlignment" Value="Right" />
            <Setter Property="VerticalAlignment" Value="Bottom" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Thumb}">
                        <Polygon Fill="{Binding DataContext.Background, RelativeSource={RelativeSource AncestorType=UserControl}, Converter={StaticResource TextForegroundSaturationColorConverter}, ConverterParameter=resizeThumb}" Points="0,8 8,8 8,0" />
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
    </UserControl.Resources>

    <Grid
        Name="AnnotationGrid"
        Height="Auto"
        IsHitTestVisible="True">
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto" />
            <RowDefinition Height="*" />
        </Grid.RowDefinitions>
        <Grid.ContextMenu>
            <ContextMenu
                Name="AnnotationContextMenu"
                Background="{StaticResource PreferencesWindowVisualSettingsAddStyleBackground}"
                Style="{StaticResource ContextMenuStyle}">
                <MenuItem
                    Name="DeleteAnnotation"
                    Click="OnDeleteAnnotation"
                    Header="{x:Static p:Resources.GroupContextMenuDeleteGroup}" />
                <MenuItem
                    Name="FreezeAnnotation"
                    Command="{Binding Path=ToggleIsFrozenGroupCommand}"
                    Header="{x:Static p:Resources.GroupContextMenuFreezeGroup}"
                    IsCheckable="true"
                    IsChecked="{Binding Path=AnnotationModel.IsFrozen, Mode=OneWay}" />
                <MenuItem
                    Name="UngroupAnnotation"
                    Click="OnUngroupAnnotation"
                    Header="{x:Static p:Resources.GroupContextMenuUngroup}" />
                <MenuItem
                    Name="PreviewAnnotation"
                    Command="{Binding Path=ToggleIsVisibleGroupCommand}"
                    Header="{x:Static p:Resources.GroupContextMenuPreview}"
                    IsCheckable="true"
                    IsChecked="{Binding Path=AnnotationModel.IsVisible, Mode=OneWay}" />
                <MenuItem
                    Name="unGroup_cm"
                    Command="{Binding Path=RemoveGroupFromGroupCommand}"
                    Header="{x:Static p:Resources.ContextUnGroupFromSelection}" />
                <MenuItem
                    Name="AddGroupToGroup"
                    Command="{Binding AddGroupToGroupCommand}"
                    Header="{x:Static p:Resources.GroupContextMenuAddGroupToGroup}" />
                <MenuItem
                    Name="GraphLayoutAnnotation"
                    Click="OnGraphLayoutAnnotation"
                    Header="{x:Static p:Resources.GroupContextMenuGraphLayout}" />
                <MenuItem
                    Name="GroupStyleAnnotation"
                    Header="{x:Static p:Resources.GroupStyleContextAnnotation}"
                    ItemContainerStyleSelector="{StaticResource GroupStyleItemSelector}"
                    ItemsSource="{Binding GroupStyleList}"
                    Style="{StaticResource MenuItemGroupStyle}"
                    SubmenuOpened="GroupStyleAnnotation_SubmenuOpened">
                    <MenuItem.Resources>
                        <Style x:Key="GroupStyleSeparatorStyle" TargetType="{x:Type MenuItem}">
                            <Setter Property="Template">
                                <Setter.Value>
                                    <ControlTemplate>
                                        <Border Height="1" Background="{StaticResource PreferencesWindowVisualSettingsAddStyleBackground}">
                                            <Border
                                                Height="1"
                                                MaxWidth="150"
                                                Background="{StaticResource NodeContextMenuSeparatorColor}" />
                                        </Border>
                                    </ControlTemplate>
                                </Setter.Value>
                            </Setter>
                        </Style>

                        <Style x:Key="GroupStyleItemStyle" TargetType="{x:Type MenuItem}">
                            <Setter Property="MenuItem.IsChecked" Value="{Binding IsChecked}" />
                            <EventSetter Event="Click" Handler="GroupStyleCheckmark_Click" />
                            <Setter Property="MenuItem.Template">
                                <Setter.Value>
                                    <ControlTemplate TargetType="{x:Type MenuItem}">
                                        <StackPanel
                                            x:Name="groupStyleStackPanel"
                                            MinWidth="150"
                                            Background="{StaticResource PreferencesWindowVisualSettingsAddStyleBackground}"
                                            Orientation="Horizontal">
                                            <Label
                                                x:Name="buttonColorPicker"
                                                Width="15"
                                                Height="15"
                                                Margin="5,0,5,0"
                                                Background="{Binding HexColorString, Converter={StaticResource StringToBrushColorConverter}}"
                                                FontFamily="{StaticResource ArtifaktElementRegular}"
                                                FontSize="14px" />
                                            <TextBlock
                                                MaxWidth="148"
                                                Margin="5,0,5,0"
                                                FontFamily="{StaticResource ArtifaktElementRegular}"
                                                FontSize="14px"
                                                FontWeight="Medium"
                                                Foreground="{StaticResource NodeContextMenuForeground}"
                                                Text="{Binding Name}"
                                                TextTrimming="CharacterEllipsis" />
                                        </StackPanel>
                                        <ControlTemplate.Triggers>
                                            <Trigger Property="IsMouseOver" Value="True">
                                                <Setter TargetName="groupStyleStackPanel" Property="Background" Value="{StaticResource NodeContextMenuBackgroundHighlight}" />
                                            </Trigger>
                                            <Trigger Property="IsMouseOver" Value="False">
                                                <Setter TargetName="groupStyleStackPanel" Property="Background" Value="{StaticResource NodeContextMenuBackground}" />
                                            </Trigger>
                                        </ControlTemplate.Triggers>
                                    </ControlTemplate>
                                </Setter.Value>
                            </Setter>
                        </Style>
                    </MenuItem.Resources>
                </MenuItem>
                <MenuItem
                    Name="ColorMenuItem"
                    Header="{x:Static p:Resources.GroupContextMenuColor}"
                    Style="{StaticResource ContextMenuItemFixedWidthStyle}">
                    <ListBox
                        Height="Auto"
                        ItemContainerStyle="{StaticResource ColorSelectorListBoxItem}"
                        SelectionChanged="OnNodeColorSelectionChanged"
                        Style="{StaticResource ColorSelectorListBox}">
                        <ListBox.Items>
                            <Rectangle Fill="#d4b6db" />
                            <Rectangle Fill="#ffb8d8" />
                            <Rectangle Fill="#ffc999" />
                            <Rectangle Fill="#e8f7ad" />
                            <Rectangle Fill="#b9f9e1" />
                            <Rectangle Fill="#a4e1ff" />
                            <Rectangle Fill="#b5b5b5" />
                            <Rectangle Fill="#FFFFFF" />
                            <Rectangle Fill="#bb87c6" />
                            <Rectangle Fill="#ff7bac" />
                            <Rectangle Fill="#ffaa45" />
                            <Rectangle Fill="#c1d676" />
                            <Rectangle Fill="#71c6a8" />
                            <Rectangle Fill="#48b9ff" />
                            <Rectangle Fill="#848484" />
                            <Rectangle Fill="#d8d8d8" />
                        </ListBox.Items>
                    </ListBox>
                </MenuItem>
                <MenuItem
                    Name="ChangeSize"
                    Header="{x:Static p:Resources.GroupContextMenuFont}"
                    Style="{StaticResource ContextMenuItemFixedWidthStyle}">
                    <MenuItem
                        Name="FontSize0"
                        Command="{Binding ChangeFontSize}"
                        CommandParameter="14"
                        Header="14"
                        IsChecked="{Binding Path=FontSize, Converter={StaticResource MenuItemCheckConverter}, ConverterParameter=14}" />
                    <MenuItem
                        Name="FontSize1"
                        Command="{Binding ChangeFontSize}"
                        CommandParameter="18"
                        Header="18"
                        IsChecked="{Binding Path=FontSize, Converter={StaticResource MenuItemCheckConverter}, ConverterParameter=18}" />
                    <MenuItem
                        Name="FontSize2"
                        Command="{Binding ChangeFontSize}"
                        CommandParameter="24"
                        Header="24"
                        IsChecked="{Binding Path=FontSize, Converter={StaticResource MenuItemCheckConverter}, ConverterParameter=24}" />
                    <MenuItem
                        Name="FontSize3"
                        Command="{Binding ChangeFontSize}"
                        CommandParameter="30"
                        Header="30"
                        IsChecked="{Binding Path=FontSize, Converter={StaticResource MenuItemCheckConverter}, ConverterParameter=30}" />
                    <MenuItem
                        Name="FontSize4"
                        Command="{Binding ChangeFontSize}"
                        CommandParameter="36"
                        Header="36"
                        IsChecked="{Binding Path=FontSize, Converter={StaticResource MenuItemCheckConverter}, ConverterParameter=36}" />
                    <MenuItem
                        Name="FontSize5"
                        Command="{Binding ChangeFontSize}"
                        CommandParameter="48"
                        Header="48"
                        IsChecked="{Binding Path=FontSize, Converter={StaticResource MenuItemCheckConverter}, ConverterParameter=48}" />
                    <MenuItem
                        Name="FontSize6"
                        Command="{Binding ChangeFontSize}"
                        CommandParameter="60"
                        Header="60"
                        IsChecked="{Binding Path=FontSize, Converter={StaticResource MenuItemCheckConverter}, ConverterParameter=60}" />
                    <MenuItem
                        Name="FontSize7"
                        Command="{Binding ChangeFontSize}"
                        CommandParameter="72"
                        Header="72"
                        IsChecked="{Binding Path=FontSize, Converter={StaticResource MenuItemCheckConverter}, ConverterParameter=72}" />
                    <MenuItem
                        Name="FontSize8"
                        Command="{Binding ChangeFontSize}"
                        CommandParameter="96"
                        Header="96"
                        IsChecked="{Binding Path=FontSize, Converter={StaticResource MenuItemCheckConverter}, ConverterParameter=96}" />

                </MenuItem>
            </ContextMenu>
        </Grid.ContextMenu>

        <!--  Frozen button on zoomed out  -->
        <Grid
            Grid.Row="0"
            Grid.RowSpan="2"
            Grid.Column="0"
            Grid.ColumnSpan="4"
            Panel.ZIndex="1">
            <Grid.Style>
                <Style TargetType="Grid">
                    <Setter Property="Visibility" Value="Collapsed" />
                    <Style.Triggers>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding DataContext.AnnotationModel.IsFrozen, RelativeSource={RelativeSource AncestorType=UserControl}}" Value="True" />
                                <Condition Binding="{Binding DataContext.IsExpanded, RelativeSource={RelativeSource AncestorType=UserControl}}" Value="False" />
                                <Condition Binding="{Binding Path=DataContext.Zoom, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type views:WorkspaceView}}, Converter={StaticResource ZoomToVisibilityCollapsedConverter}}" Value="Visible" />
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Visibility" Value="Visible" />
                        </MultiDataTrigger>
                    </Style.Triggers>
                </Style>
            </Grid.Style>
            <Button
                Width="64"
                Height="64"
                Command="{Binding Path=ToggleIsFrozenGroupCommand}"
                Template="{StaticResource FrozenButtonZoomedOutTemplate}">
                <Button.ToolTip>
                    <ToolTip Style="{StaticResource GenericToolTipLight}">
                        <TextBlock Text="{x:Static p:Resources.GroupFrozenButtonToolTip}" />
                    </ToolTip>
                </Button.ToolTip>
            </Button>
        </Grid>

        <!--  Persistent border shows around the entire group at all time  -->
        <Border
            Name="persistentBorder"
            Grid.RowSpan="2"
            Margin="-1"
            BorderThickness="2"
            Canvas.ZIndex="41"
            CornerRadius="{StaticResource ExpanderCornerRadius}"
            IsHitTestVisible="False"
            Visibility="{Binding Nodes, Converter={StaticResource ListHasMoreThanNItemsToVisibilityConverter}}">
            <Border.BorderBrush>
                <SolidColorBrush Color="{Binding Background}" />
            </Border.BorderBrush>
        </Border>

        <!--  Selection border shows around the entire group when its selected in the workspace  -->
        <Border
            Name="selectionBorder"
            Grid.RowSpan="2"
            Margin="-1"
            Background="Transparent"
            BorderBrush="{Binding PreviewState, Converter={StaticResource ConnectionStateToBrushConverter}}"
            BorderThickness="2"
            Canvas.ZIndex="41"
            CornerRadius="{StaticResource ExpanderCornerRadius}"
            IsHitTestVisible="False">
            <Border.Visibility>
                <Binding
                    Converter="{StaticResource ConnectionStateToVisibilityCollapsedConverter}"
                    Mode="OneWay"
                    Path="PreviewState"
                    UpdateSourceTrigger="PropertyChanged" />
            </Border.Visibility>
        </Border>

        <!--
            If a node is dragged over this group (and that node does not already belong to another group)
            this border is activated, indicating that the node can be dropped into the group.
            The visibility of this is controlled by the AnnotationViewModel property 'NodeHoveringState'
            which is set in the StateMachine.
        -->
        <Border
            x:Name="nodeHoveringStateBorder"
            Grid.RowSpan="2"
            Margin="-4px"
            Background="Transparent"
            BorderBrush="#CCCCCC"
            BorderThickness="6px"
            Canvas.ZIndex="41"
            CornerRadius="{StaticResource ExpanderCornerRadius}"
            IsHitTestVisible="False"
            Visibility="{Binding NodeHoveringState, Converter={StaticResource BooleanToVisibilityCollapsedConverter}}" />

        <!--
            The entire group is embedded in this expander, which is consist of two parts
            - The header: holds the Title and Description of the group and also a context menu icon
            - The description is only visible when the Expander is expanded.
            - The content grid: this grid holds all of the content in the group:
            - the AnnotationRectangle canvas: this is where the content (nodes, notes and groups) live
            this is a Path with a background color set by the ViewModel, the canvas will cutout any
            nested groups AnnotationRectangle to avoid overlaps
            - ResizeThumb: this is used to manually expand the size of the group, the thumb has no icon
            but will convert the mouse courser to visually show the user that they can resize the group
            when hovering over the bottom right corner.
        -->
        <Expander
            x:Name="GroupExpander"
            Grid.Row="0"
            Width="{Binding Width}"
            IsExpanded="{Binding IsExpanded, Mode=TwoWay}">
            <Expander.Header>
                <Grid
                    x:Name="TextBlockGrid"
                    Grid.Row="0"
                    Height="auto"
                    MaxWidth="{Binding Width}"
                    Margin="5,0,5,0"
                    VerticalAlignment="Top">
                    <Grid.RowDefinitions>
                        <RowDefinition x:Name="GroupNameRow" Height="Auto" />
                        <RowDefinition x:Name="GroupDescriptionRow" Height="Auto" />
                    </Grid.RowDefinitions>
                    <ContentControl
                        x:Name="GroupNameControl"
                        Grid.Row="0"
                        Width="{Binding Width}"
                        MinHeight="20"
                        Margin="0,0,0,10">
                        <Grid Margin="0,0,20,0">
                            <TextBlock
                                x:Name="GroupTextBlock"
                                FontFamily="Trebuchet"
                                FontSize="{Binding FontSize}"
                                Foreground="{Binding Background, Converter={StaticResource TextForegroundSaturationColorConverter}}"
                                LineStackingStrategy="BlockLineHeight"
                                Text="{Binding AnnotationText, Converter={StaticResource AnnotationTextConverter}, ConverterParameter='TextBlock'}"
                                TextWrapping="WrapWithOverflow"
                                Visibility="Visible" />
                            <TextBox
                                Name="GroupTextBox"
                                Grid.Column="0"
                                AcceptsReturn="True"
                                AcceptsTab="True"
                                FontFamily="Trebuchet"
                                FontSize="{Binding FontSize}"
                                GotFocus="GroupTextBox_OnGotFocus"
                                IsVisibleChanged="GroupTextBox_OnIsVisibleChanged"
                                Text="{Binding AnnotationText, Converter={StaticResource AnnotationTextConverter}, ConverterParameter='TextBox'}"
                                TextChanged="GroupTextBox_OnTextChanged"
                                TextWrapping="WrapWithOverflow"
                                Visibility="Collapsed" />
                        </Grid>
                    </ContentControl>

                    <ContentControl
                        x:Name="GroupDescriptionControls"
                        Grid.Row="1"
                        MinHeight="20"
                        Margin="0,-10,30,0"
                        IsVisibleChanged="GroupDescriptionTextBlock_IsVisibleChanged"
                        SizeChanged="GroupDescriptionControls_SizeChanged">
                        <Grid>
                            <TextBlock
                                x:Name="GroupDescriptionTextBlock"
                                FontFamily="Trebuchet"
                                FontSize="12"
                                Foreground="{Binding Background, Converter={StaticResource TextForegroundSaturationColorConverter}}"
                                LineStackingStrategy="BlockLineHeight"
                                Text="{Binding AnnotationDescriptionText, Converter={StaticResource AnnotationTextConverter}}"
                                TextWrapping="Wrap"
                                Visibility="Visible" />
                            <TextBox
                                Name="GroupDescriptionTextBox"
                                AcceptsReturn="True"
                                AcceptsTab="True"
                                FontFamily="Trebuchet"
                                FontSize="12"
                                GotFocus="GroupDescriptionTextBox_GotFocus"
                                IsVisibleChanged="GroupDescriptionTextBox_OnIsVisibleChanged"
                                Text="{Binding AnnotationDescriptionText, Converter={StaticResource AnnotationTextConverter}}"
                                TextChanged="GroupDescriptionTextBox_TextChanged"
                                TextWrapping="Wrap"
                                Visibility="Collapsed" />
                        </Grid>
                        <ContentControl.Style>
                            <Style TargetType="{x:Type ContentControl}">
                                <Setter Property="Visibility" Value="Collapsed" />
                                <Style.Triggers>
                                    <MultiDataTrigger>
                                        <MultiDataTrigger.Conditions>
                                            <Condition Value="True">
                                                <Condition.Binding>
                                                    <Binding ElementName="GroupExpander" Path="IsExpanded" />
                                                </Condition.Binding>
                                            </Condition>
                                        </MultiDataTrigger.Conditions>
                                        <Setter Property="Visibility" Value="Visible" />
                                    </MultiDataTrigger>
                                </Style.Triggers>
                            </Style>
                        </ContentControl.Style>
                    </ContentControl>
                    <Grid.Triggers>

                        <EventTrigger RoutedEvent="ContentControl.MouseDoubleClick" SourceName="GroupNameControl">
                            <BeginStoryboard>
                                <Storyboard>
                                    <ObjectAnimationUsingKeyFrames
                                        Storyboard.TargetName="GroupTextBlock"
                                        Storyboard.TargetProperty="(TextBlock.Visibility)"
                                        Duration="0">
                                        <DiscreteObjectKeyFrame KeyTime="0" Value="{Binding ElementName=TextBlockGrid, Path=Visibility, Converter={StaticResource GroupTitleVisibilityConverter}, ConverterParameter=FlipTextblock}" />
                                    </ObjectAnimationUsingKeyFrames>

                                    <ObjectAnimationUsingKeyFrames
                                        Storyboard.TargetName="GroupTextBox"
                                        Storyboard.TargetProperty="(TextBox.Visibility)"
                                        Duration="0">
                                        <DiscreteObjectKeyFrame KeyTime="0" Value="{Binding ElementName=TextBlockGrid, Path=Visibility, Converter={StaticResource GroupTitleVisibilityConverter}, ConverterParameter=FlipTextbox}" />
                                    </ObjectAnimationUsingKeyFrames>

                                    <BooleanAnimationUsingKeyFrames Storyboard.TargetName="GroupTextBox" Storyboard.TargetProperty="(TextBox.Focusable)">
                                        <DiscreteBooleanKeyFrame KeyTime="0" Value="True" />
                                    </BooleanAnimationUsingKeyFrames>
                                </Storyboard>
                            </BeginStoryboard>
                        </EventTrigger>

                        <EventTrigger RoutedEvent="ContentControl.MouseDoubleClick" SourceName="GroupDescriptionControls">
                            <BeginStoryboard>
                                <Storyboard>
                                    <ObjectAnimationUsingKeyFrames
                                        Storyboard.TargetName="GroupDescriptionTextBlock"
                                        Storyboard.TargetProperty="(TextBlock.Visibility)"
                                        Duration="0">
                                        <DiscreteObjectKeyFrame KeyTime="0" Value="{Binding ElementName=TextBlockGrid, Path=Visibility, Converter={StaticResource GroupTitleVisibilityConverter}, ConverterParameter=FlipTextblock}" />
                                    </ObjectAnimationUsingKeyFrames>
                                    <ObjectAnimationUsingKeyFrames
                                        Storyboard.TargetName="GroupDescriptionTextBox"
                                        Storyboard.TargetProperty="(TextBox.Visibility)"
                                        Duration="0">
                                        <DiscreteObjectKeyFrame KeyTime="0" Value="{Binding ElementName=TextBlockGrid, Path=Visibility, Converter={StaticResource GroupTitleVisibilityConverter}, ConverterParameter=FlipTextbox}" />
                                    </ObjectAnimationUsingKeyFrames>

                                    <BooleanAnimationUsingKeyFrames Storyboard.TargetName="GroupDescriptionTextBox" Storyboard.TargetProperty="(TextBox.Focusable)">
                                        <DiscreteBooleanKeyFrame KeyTime="0" Value="True" />
                                    </BooleanAnimationUsingKeyFrames>
                                </Storyboard>
                            </BeginStoryboard>
                        </EventTrigger>


                        <EventTrigger RoutedEvent="TextBox.LostKeyboardFocus" SourceName="GroupTextBox">
                            <BeginStoryboard>
                                <Storyboard>
                                    <ObjectAnimationUsingKeyFrames
                                        Storyboard.TargetName="GroupTextBlock"
                                        Storyboard.TargetProperty="(TextBlock.Visibility)"
                                        Duration="0">
                                        <DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Visible}" />
                                    </ObjectAnimationUsingKeyFrames>

                                    <ObjectAnimationUsingKeyFrames
                                        Storyboard.TargetName="GroupTextBox"
                                        Storyboard.TargetProperty="(TextBox.Visibility)"
                                        Duration="0">
                                        <DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Collapsed}" />
                                    </ObjectAnimationUsingKeyFrames>

                                    <BooleanAnimationUsingKeyFrames Storyboard.TargetName="GroupTextBox" Storyboard.TargetProperty="(TextBox.Focusable)">
                                        <DiscreteBooleanKeyFrame KeyTime="0" Value="True" />
                                    </BooleanAnimationUsingKeyFrames>
                                </Storyboard>
                            </BeginStoryboard>
                        </EventTrigger>
                        <EventTrigger RoutedEvent="TextBox.LostKeyboardFocus" SourceName="GroupDescriptionTextBox">
                            <BeginStoryboard>
                                <Storyboard>
                                    <ObjectAnimationUsingKeyFrames
                                        Storyboard.TargetName="GroupDescriptionTextBlock"
                                        Storyboard.TargetProperty="(TextBlock.Visibility)"
                                        Duration="0">
                                        <DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Visible}" />
                                    </ObjectAnimationUsingKeyFrames>

                                    <ObjectAnimationUsingKeyFrames
                                        Storyboard.TargetName="GroupDescriptionTextBox"
                                        Storyboard.TargetProperty="(TextBox.Visibility)"
                                        Duration="0">
                                        <DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Collapsed}" />
                                    </ObjectAnimationUsingKeyFrames>

                                    <BooleanAnimationUsingKeyFrames Storyboard.TargetName="GroupDescriptionTextBox" Storyboard.TargetProperty="(TextBox.Focusable)">
                                        <DiscreteBooleanKeyFrame KeyTime="0" Value="True" />
                                    </BooleanAnimationUsingKeyFrames>
                                </Storyboard>
                            </BeginStoryboard>
                        </EventTrigger>
                    </Grid.Triggers>
                </Grid>
            </Expander.Header>

            <Grid>
                <Canvas
                    Name="AnnotationRectangle"
                    Width="{Binding Width}"
                    Height="{Binding ModelAreaHeight}"
                    Background="Transparent"
                    IsHitTestVisible="True"
                    Opacity="0.5"
                    Visibility="{Binding IsExpanded, Converter={StaticResource BooleanToVisibilityCollapsedConverter}}">
                    <Path Stroke="Transparent" StrokeThickness="0">
                        <Path.Fill>
                            <SolidColorBrush Color="{Binding Background}" />
                        </Path.Fill>
                        <Path.Data>
                            <CombinedGeometry GeometryCombineMode="Exclude">
                                <CombinedGeometry.Geometry1>
                                    <RectangleGeometry Rect="{Binding ModelAreaRect}" />
                                </CombinedGeometry.Geometry1>
                                <CombinedGeometry.Geometry2>
                                    <GeometryGroup Children="{Binding NestedGroupsGeometries}" FillRule="EvenOdd" />
                                </CombinedGeometry.Geometry2>
                            </CombinedGeometry>
                        </Path.Data>
                    </Path>
                </Canvas>

                <Thumb
                    x:Name="ResizeThumb"
                    DragDelta="AnnotationRectangleThumb_DragDelta"
                    MouseEnter="Thumb_MouseEnter"
                    MouseLeave="Thumb_MouseLeave"
                    Style="{StaticResource GroupResizeThumbStyle}" />
            </Grid>
        </Expander>
        <!--
            The CollapsedAnnotationRectangle is visible whenever the expander is collapsed. In this state the
            expander header is still visible but will hide the group description text. This border has 3 children
            - inputPortControl: This will display any input port of nodes that are either not connected or connected
            to nodes outside of the group
            - outputPortControl: This will display any output port of nodes that are either not connected or connected
            to nodes outside of the group
            - GroupContentIcons: This will display the node icons of all Input/Output ports that are on the group
            it also shows a counter of all nodes that are in between the input/output nodes.
        -->
        <Border
            x:Name="CollapsedAnnotationRectangle"
            Grid.Row="1"
            Width="{Binding Width}"
            Height="{Binding ModelAreaHeight}"
            Visibility="{Binding ElementName=GroupExpander, Path=IsExpanded, Converter={StaticResource InverseBoolToVisibilityCollapsedConverter}}">
            <Border.Background>
                <SolidColorBrush Opacity="0.5" Color="{Binding Background}" />
            </Border.Background>
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="auto" />
                    <ColumnDefinition Width="*" />
                    <ColumnDefinition Width="auto" />
                </Grid.ColumnDefinitions>
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto" />
                    <RowDefinition Height="*" />
                </Grid.RowDefinitions>
                <!--  INPUT PORTS  -->
                <Grid Name="inputPortsGrid"
                      Grid.Row="0"
                      Grid.Column="0">
                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="34" />
                        <RowDefinition Height="Auto" />
                    </Grid.RowDefinitions>
                    <!--  Main Input Ports  -->
                    <ItemsControl Name="inputPortControl"
                                  Grid.Row="0"
                                  Margin="-25,10"
                                  HorizontalContentAlignment="Left"
                                  Canvas.ZIndex="20"
                                  ItemsSource="{Binding Path=InPorts}" />
                    <!--  Collapse/expand ports  -->
                    <ToggleButton Name="inputToggleControl"
                                  Grid.Row="1"
                                  Margin="5,0,-20,0"
                                  HorizontalAlignment="Left"
                                  Click="OptionalPortsToggle_Click"
                                  Content="{x:Static p:Resources.GroupOptionalInportsText}"
                                  IsChecked="{Binding IsOptionalInPortsCollapsed, Mode=TwoWay}"
                                  Tag="{Binding OptionalInPorts.Count}">
                        <ToggleButton.Style>
                            <Style BasedOn="{StaticResource BaseCollapsedPortToggleStyle}" TargetType="ToggleButton">
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding OptionalInPorts.Count}" Value="0">
                                        <Setter Property="Visibility" Value="Collapsed" />
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </ToggleButton.Style>
                    </ToggleButton>
                    <!--  Optional Input Ports  -->
                    <ItemsControl Name="optionalInputPortControl"
                                  Grid.Row="2"
                                  Margin="-25,0"
                                  HorizontalContentAlignment="Left"
                                  Canvas.ZIndex="20"
                                  ItemsSource="{Binding Path=OptionalInPorts}">
                        <ItemsControl.Style>
                            <Style TargetType="ItemsControl">
                                <Setter Property="Visibility" Value="Collapsed" />
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding IsOptionalInPortsCollapsed}" Value="False">
                                        <Setter Property="Visibility" Value="Visible" />
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </ItemsControl.Style>
                    </ItemsControl>
                </Grid>

                <!--  OUTPUT PORTS  -->
                <Grid Name="outputPortsGrid"
                      Grid.Row="0"
                      Grid.Column="2">
                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="Auto" />
                    </Grid.RowDefinitions>
                    <!--  Main Output Ports  -->
                    <ItemsControl Name="outputPortControl"
                                  Grid.Row="0"
                                  Margin="-25,10"
                                  HorizontalContentAlignment="Right"
                                  Canvas.ZIndex="20"
                                  ItemsSource="{Binding Path=OutPorts}" />
                    <!--  Collapse/expand ports  -->
                    <ToggleButton Name="outputToggleControl"
                                  Grid.Row="1"
                                  Margin="0,0,5,0"
                                  HorizontalAlignment="Right"
                                  Click="UnconnectedPortsToggle_Click"
                                  Content="{x:Static p:Resources.GroupUnconnectedOutportsText}"
                                  IsChecked="{Binding IsUnconnectedOutPortsCollapsed, Mode=TwoWay}"
                                  Tag="{Binding UnconnectedOutPorts.Count}">
                        <ToggleButton.Style>
                            <Style BasedOn="{StaticResource BaseCollapsedPortToggleStyle}" TargetType="ToggleButton">
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding UnconnectedOutPorts.Count}" Value="0">
                                        <Setter Property="Visibility" Value="Collapsed" />
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </ToggleButton.Style>
                    </ToggleButton>
                    <!--  Unconnected Output Ports  -->
                    <ItemsControl Name="unconnectedOutputPortControl"
                                  Grid.Row="2"
                                  Margin="-25,0"
                                  HorizontalContentAlignment="Right"
                                  Canvas.ZIndex="20"
                                  ItemsSource="{Binding Path=UnconnectedOutPorts}">
                        <ItemsControl.Style>
                            <Style TargetType="ItemsControl">
                                <Setter Property="Visibility" Value="Collapsed" />
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding IsUnconnectedOutPortsCollapsed}" Value="False">
                                        <Setter Property="Visibility" Value="Visible" />
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </ItemsControl.Style>
                    </ItemsControl>
                </Grid>

                <Grid
                    x:Name="GroupContent"
                    Grid.Row="1"
                    Grid.ColumnSpan="3">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="*" />
                        <ColumnDefinition Width="Auto" />
                        <ColumnDefinition Width="*" />
                    </Grid.ColumnDefinitions>
                    <Label
                        x:Name="NestedGroups"
                        Grid.Column="0"
                        Margin="0"
                        HorizontalAlignment="Right"
                        VerticalAlignment="Center"
                        Content="{Binding NestedGroups, Converter={StaticResource NestedGroupsLabelConverter}}"
                        ToolTipService.IsEnabled="{Binding NestedGroups, Converter={StaticResource CollectionHasMoreThanNItemsToBoolConverter}}"
                        ToolTipService.ShowOnDisabled="False">
                        <Label.ToolTip>
                            <dynui:DynamoToolTip
                                Margin="5,0,0,0"
                                AttachmentSide="Bottom"
                                Style="{DynamicResource ResourceKey=SLightToolTip}">
                                <ListView ItemsSource="{Binding NestedGroups}">
                                    <ListView.Resources>
                                        <DataTemplate x:Key="MultipleItems" DataType="{x:Type viewModels:AnnotationViewModel}">
                                            <TextBlock Text="{Binding AnnotationText}" />
                                        </DataTemplate>
                                    </ListView.Resources>
                                    <ListView.Style>
                                        <Style TargetType="{x:Type ListView}">
                                            <Setter Property="Background" Value="Transparent" />
                                            <Setter Property="BorderThickness" Value="0" />
                                            <Style.Triggers>
                                                <DataTrigger Binding="{Binding NestedGroups, Converter={StaticResource CollectionHasMoreThanNItemsToBoolConverter}}" Value="True">
                                                    <Setter Property="ItemTemplate" Value="{StaticResource MultipleItems}" />
                                                </DataTrigger>
                                            </Style.Triggers>
                                        </Style>
                                    </ListView.Style>
                                </ListView>
                            </dynui:DynamoToolTip>
                        </Label.ToolTip>
                    </Label>

                    <Border
                        x:Name="NodeCount"
                        Grid.Column="1"
                        Width="{Binding Path=ActualHeight, ElementName=NodeCount}"
                        Height="32"
                        Margin="10"
                        VerticalAlignment="Bottom"
                        Background="#EEEEEE"
                        BorderBrush="#FFFFFF"
                        BorderThickness="1"
                        CornerRadius="{Binding Path=ActualHeight, ElementName=NodeCount}">
                        <TextBlock
                            HorizontalAlignment="Center"
                            VerticalAlignment="Center"
                            FontSize="14"
                            Text="{Binding NodeContentCount, Mode=OneWay, StringFormat='+{0}'}" />
                    </Border>
                </Grid>

                <Thumb
                    x:Name="ResizeThumbCollapsed"
                    Grid.Row="1"
                    Grid.Column="2"
                    DragDelta="CollapsedAnnotationRectangleThumb_DragDelta"
                    MouseEnter="Thumb_MouseEnter"
                    MouseLeave="Thumb_MouseLeave"
                    Style="{StaticResource GroupResizeThumbStyle}" />
            </Grid>
        </Border>
    </Grid>
</UserControl>

