<UserControl Name="Group"
             x:Class="Dynamo.Nodes.AnnotationView"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
             xmlns:System="clr-namespace:System;assembly=mscorlib"
             xmlns:p="clr-namespace:Dynamo.Wpf.Properties"
             xmlns:controls="clr-namespace:Dynamo.Controls"
             xmlns:views="clr-namespace:Dynamo.Views"
             xmlns:viewModels="clr-namespace:Dynamo.ViewModels"
             xmlns:dynui="clr-namespace:Dynamo.UI.Controls"
             xmlns:fa="http://schemas.fontawesome.io/icons/"
             xmlns:nodes="clr-namespace:Dynamo.Graph.Nodes;assembly=DynamoCore"
             xmlns:utilities="clr-namespace:Dynamo.Wpf.Utilities"
             mc:Ignorable="d"
             Height="Auto"
             Width="Auto"
             Visibility="{Binding IsCollapsed, Converter={StaticResource InverseBoolToVisibilityCollapsedConverter}}"
             MouseLeftButtonDown="AnnotationView_OnMouseLeftButtonDown"
             MouseRightButtonDown="AnnotationView_OnMouseRightButtonDown"
             Canvas.Left="{Binding Left, Mode=TwoWay}"
             Canvas.Top="{Binding Top, Mode=TwoWay}"
             AllowDrop="True"
             IsHitTestVisible="True"
             d:DataContext="{d:DesignInstance Type=viewModels:AnnotationViewModel}">

    <UserControl.Resources>
        <utilities:GroupStyleItemSelector x:Key="GroupStyleItemSelector"/>
        <controls:StringToBrushColorConverter x:Key="StringToBrushColorConverter"/>
        <CornerRadius x:Key="ExpanderCornerRadius"
                      TopLeft="10"
                      TopRight="10" />
        <Style x:Key="ColorSelectorListBox"
               TargetType="ListBox">
            <Setter Property="SnapsToDevicePixels"
                    Value="true" />
            <Setter Property="OverridesDefaultStyle"
                    Value="true" />
            <Setter Property="ScrollViewer.HorizontalScrollBarVisibility"
                    Value="Disabled" />
            <Setter Property="ScrollViewer.VerticalScrollBarVisibility"
                    Value="Hidden" />
            <Setter Property="ScrollViewer.CanContentScroll"
                    Value="true" />
            <Setter Property="Width"
                    Value="150" />
            <Setter Property="Height"
                    Value="54" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="ListBox">
                        <Grid Margin="0,13,4,8">
                            <ScrollViewer Margin="0"
                                          Focusable="false">
                                <WrapPanel IsItemsHost="True" />
                            </ScrollViewer>
                        </Grid>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style x:Key="ColorSelectorListBoxItem"
               TargetType="ListBoxItem">
            <Setter Property="SnapsToDevicePixels"
                    Value="true" />
            <Setter Property="OverridesDefaultStyle"
                    Value="true" />
            <Setter Property="Width"
                    Value="18" />
            <Setter Property="Height"
                    Value="20" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="ListBoxItem">
                        <Grid Margin="0,0,4,5"
                              SnapsToDevicePixels="true">
                            <Grid.Background>
                                <SolidColorBrush Color="Transparent" />
                            </Grid.Background>
                            <VisualStateManager.VisualStateGroups>
                                <VisualStateGroup x:Name="CommonStates">
                                    <VisualState x:Name="Normal" />
                                    <VisualState x:Name="MouseOver">
                                        <Storyboard>
                                            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="Border"
                                                                           Storyboard.TargetProperty="Opacity">
                                                <EasingDoubleKeyFrame KeyTime="0"
                                                                      Value="1.0" />
                                            </DoubleAnimationUsingKeyFrames>
                                        </Storyboard>
                                    </VisualState>
                                </VisualStateGroup>
                                <VisualStateGroup x:Name="SelectionStates">
                                    <VisualState x:Name="Unselected" />
                                    <VisualState x:Name="Selected">
                                        <Storyboard>
                                            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="Border"
                                                                           Storyboard.TargetProperty="Opacity">
                                                <EasingDoubleKeyFrame KeyTime="0"
                                                                      Value="1.0" />
                                            </DoubleAnimationUsingKeyFrames>
                                        </Storyboard>
                                    </VisualState>
                                    <VisualState x:Name="SelectedUnfocused" />
                                </VisualStateGroup>
                            </VisualStateManager.VisualStateGroups>
                            <ContentPresenter />
                            <Border x:Name="Border"
                                    Opacity="0.25"
                                    BorderThickness="1"
                                    BorderBrush="Black"
                                    Background="Transparent" />
                        </Grid>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <ControlTemplate x:Key="GroupExpanderTemplate"
                         TargetType="{x:Type ToggleButton}">
            <Border x:Name="expanderBorder"
                    Background="{TemplateBinding Background}"
                    BorderBrush="{TemplateBinding BorderBrush}"
                    BorderThickness="{TemplateBinding BorderThickness}"
                    Padding="{TemplateBinding Padding}">
                <Grid>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto" />
                    </Grid.ColumnDefinitions>
                    <Rectangle Fill="Transparent"
                               Grid.ColumnSpan="1" />
                    <Image x:Name="sign"
                           Source="/DynamoCoreWpf;component/UI/Images/caret_down_grey_48px.png"
                           Width="16"
                           Height="16" />
                </Grid>
            </Border>
            <ControlTemplate.Triggers>
                <MultiDataTrigger>
                    <MultiDataTrigger.Conditions>
                        <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsMouseOver}" Value="False"/>
                        <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsChecked}" Value="False"/>
                    </MultiDataTrigger.Conditions>

                    <Setter Property="Source"
                            TargetName="sign"
                            Value="/DynamoCoreWpf;component/UI/Images/caret_down_grey_48px.png" />
                </MultiDataTrigger>
                <MultiDataTrigger>
                    <MultiDataTrigger.Conditions>
                        <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsMouseOver}" Value="True"/>
                        <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsChecked}" Value="False"/>
                    </MultiDataTrigger.Conditions>

                    <Setter Property="Source"
                            TargetName="sign"
                            Value="/DynamoCoreWpf;component/UI/Images/caret_down_hover_48px.png" />
                </MultiDataTrigger>
                <MultiDataTrigger>
                    <MultiDataTrigger.Conditions>
                        <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsMouseOver}" Value="False"/>
                        <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsChecked}" Value="True"/>
                    </MultiDataTrigger.Conditions>

                    <Setter Property="Source"
                            TargetName="sign"
                            Value="/DynamoCoreWpf;component/UI/Images/caret_up_grey_48px.png" />
                </MultiDataTrigger>
                <MultiDataTrigger>
                    <MultiDataTrigger.Conditions>
                        <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsMouseOver}" Value="True"/>
                        <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsChecked}" Value="True"/>
                    </MultiDataTrigger.Conditions>

                    <Setter Property="Source"
                            TargetName="sign"
                            Value="/DynamoCoreWpf;component/UI/Images/caret_up_hover_48px.png" />
                </MultiDataTrigger>
            </ControlTemplate.Triggers>
        </ControlTemplate>

        <Style TargetType="{x:Type Expander}">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Expander}">
                        <Grid>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto" />
                                <RowDefinition x:Name="ContentRow"
                                               Height="0" />
                            </Grid.RowDefinitions>
                            <Border x:Name="headerBorder"
                                    Grid.Row="0"
                                    CornerRadius="{StaticResource ExpanderCornerRadius}"
                                    Padding="0"
                                    Margin="0"
                                    ToolTipService.IsEnabled="{TemplateBinding IsExpanded, Converter={StaticResource InverseBooleanConverter}}">
                                <Border.Background>
                                    <SolidColorBrush Color="{Binding RelativeSource={RelativeSource AncestorType={x:Type UserControl}}, Path=DataContext.Background}"></SolidColorBrush>
                                </Border.Background>
                                <Border.ToolTip>
                                    <dynui:DynamoToolTip AttachmentSide="Top"
                                                         Style="{DynamicResource ResourceKey=SLightToolTip}"
                                                         Margin="5,0,0,0">
                                        <StackPanel Orientation="Vertical"
                                                    MaxWidth="320">
                                            <TextBlock Text="{Binding AnnotationText}"
                                                       Margin="0,0,0,10" />
                                            <TextBlock Text="{Binding AnnotationDescriptionText}"
                                                       TextWrapping="WrapWithOverflow" />
                                        </StackPanel>
                                    </dynui:DynamoToolTip>
                                </Border.ToolTip>
                                <Grid>
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="*" />
                                        <ColumnDefinition Width="Auto" />
                                        <ColumnDefinition Width="Auto" />
                                    </Grid.ColumnDefinitions>
                                    <ContentPresenter Grid.ColumnSpan="3"
                                                      Margin="4"
                                                      ContentSource="Header"
                                                      RecognizesAccessKey="True"
                                                      HorizontalAlignment="Left">
                                    </ContentPresenter>

                                    <!--  Warning/Error Icon  -->
                                    <Image Grid.Column="0"
                                           Width="16px"
                                           Height="16px"
                                           VerticalAlignment="Bottom"
                                           HorizontalAlignment="Right"
                                           Margin="0,0,2.5,2.5">
                                        <Image.Style>
                                            <Style TargetType="Image">
                                                <Style.Triggers>
                                                    <DataTrigger Binding="{Binding AnnotationModel.GroupState}" Value="{x:Static nodes:ElementState.Warning}">
                                                        <Setter Property="Source" Value="/DynamoCoreWpf;component/UI/Images/warning.png"/>
                                                    </DataTrigger>
                                                    <DataTrigger Binding="{Binding AnnotationModel.GroupState}" Value="{x:Static nodes:ElementState.Error}">
                                                        <Setter Property="Source" Value="/DynamoCoreWpf;component/UI/Images/error.png"/>
                                                    </DataTrigger>
                                                </Style.Triggers>
                                            </Style>
                                        </Image.Style>
                                    </Image>

                                    <!--Expander button-->
                                    <ToggleButton OverridesDefaultStyle="True"
                                                  Grid.Column="1"
                                                  Margin="0,0,0,2.5"
                                                  Template="{StaticResource GroupExpanderTemplate}"
                                                  IsChecked="{Binding IsExpanded, Mode=TwoWay, 
                                                RelativeSource={RelativeSource TemplatedParent}}"
                                                  VerticalAlignment="Bottom" />

                                    <!--Group context menu-->
                                    <Button x:Name="contextMenu"
                                            Grid.Column="2"
                                            Background="Transparent"
                                            BorderBrush="Transparent"
                                            BorderThickness="0"
                                            Margin="0,2.5,0,2.5"
                                            Height="16"
                                            VerticalAlignment="Bottom"
                                            Click="contextMenu_Click">
                                        <Button.Content>
                                            <Image>
                                                <Image.Style>
                                                    <Style TargetType="{x:Type Image}">
                                                        <Setter Property="Source" Value="/DynamoCoreWpf;component/UI/Images/menu_grey_48px.png"/>
                                                        <Style.Triggers>
                                                            <Trigger Property="IsMouseOver" Value="True">
                                                                <Setter Property="Source" Value="/DynamoCoreWpf;component/UI/Images/menu_hover_48px.png"/>
                                                            </Trigger>
                                                        </Style.Triggers>
                                                    </Style>
                                                </Image.Style>
                                            </Image>
                                        </Button.Content>
                                        <Button.Style>
                                            <Style TargetType="{x:Type Button}">
                                                <Setter Property="OverridesDefaultStyle" Value="True"/>
                                                <Setter Property="Template">
                                                    <Setter.Value>
                                                        <ControlTemplate TargetType="Button">
                                                            <Border Name="border" BorderThickness="0" Background="{TemplateBinding Background}">
                                                                <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
                                                            </Border>
                                                            <ControlTemplate.Triggers>
                                                                <Trigger Property="IsMouseOver" Value="True">
                                                                    <Setter Property="Background" Value="{StaticResource HighlightedBrush}"/>
                                                                </Trigger>
                                                            </ControlTemplate.Triggers>
                                                        </ControlTemplate>
                                                    </Setter.Value>
                                                </Setter>
                                            </Style>
                                        </Button.Style>
                                    </Button>
                                </Grid>
                            </Border>

                            <Border x:Name="Content"
                                    Grid.Row="1">
                                <ContentPresenter />
                            </Border>
                        </Grid>

                        <ControlTemplate.Triggers>
                            <Trigger Property="IsExpanded"
                                     Value="True">
                                <Setter TargetName="ContentRow"
                                        Property="Height"
                                        Value="{Binding Height, ElementName=Content}" />
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
    </UserControl.Resources>

    <Grid Name="AnnotationGrid"
          Height="Auto"
          IsHitTestVisible="True">
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"></RowDefinition>
            <RowDefinition Height="*"></RowDefinition>
        </Grid.RowDefinitions>
        <Grid.ContextMenu>
            <ContextMenu Name="AnnotationContextMenu" 
                         Background="{StaticResource PreferencesWindowVisualSettingsAddStyleBackground}" 
                         Style="{StaticResource ContextMenuStyle}">
                <MenuItem Name="DeleteAnnotation"
                          Click="OnDeleteAnnotation"
                          Header="{x:Static p:Resources.GroupContextMenuDeleteGroup}" />
                <MenuItem Name="UngroupAnnotation"
                          Click="OnUngroupAnnotation"
                          Header="{x:Static p:Resources.GroupContextMenuUngroup}" />
                <MenuItem Name="unGroup_cm"
                          Command="{Binding Path=RemoveGroupFromGroupCommand}"
                          Header="{x:Static p:Resources.ContextUnGroupFromSelection}" />
                <MenuItem Name="AddGroupToGroup"
                          Command="{Binding AddGroupToGroupCommand}"
                          Header="{x:Static p:Resources.GroupContextMenuAddGroupToGroup}" />
                <MenuItem Name="GraphLayoutAnnotation"
                          Click="OnGraphLayoutAnnotation"
                          Header="{x:Static p:Resources.GroupContextMenuGraphLayout}" />
                <MenuItem Name="GroupStyleAnnotation"
                          ItemsSource="{Binding GroupStyleList}"
                          Style="{StaticResource MenuItemGroupStyle}"
                          SubmenuOpened="GroupStyleAnnotation_SubmenuOpened"
                          Header="{x:Static p:Resources.GroupStyleContextAnnotation}"
                          ItemContainerStyleSelector="{StaticResource GroupStyleItemSelector}">
                    <MenuItem.Resources>
                        <Style x:Key="GroupStyleSeparatorStyle" TargetType="{x:Type MenuItem}">
                            <Setter Property="Template">
                                <Setter.Value>
                                    <ControlTemplate>
                                        <Border Height="1"
                                                Background="{StaticResource PreferencesWindowVisualSettingsAddStyleBackground}">
                                            <Border Height="1"
                                                    MaxWidth="150"
                                                    Background="{StaticResource NodeContextMenuSeparatorColor}">
                                            </Border>
                                        </Border>
                                    </ControlTemplate>
                                </Setter.Value>
                            </Setter>
                        </Style>

                        <Style x:Key="GroupStyleItemStyle" TargetType="{x:Type MenuItem}">
                            <Setter Property="MenuItem.IsChecked"
                                    Value="{Binding IsChecked}"/>
                            <EventSetter Event="Click" 
                                             Handler="GroupStyleCheckmark_Click"/>
                            <Setter Property="MenuItem.Template">
                                <Setter.Value>
                                    <ControlTemplate TargetType="{x:Type MenuItem}">
                                        <StackPanel x:Name="groupStyleStackPanel"
                                                    Orientation="Horizontal"
                                                    MinWidth="150"
                                                    Background="{StaticResource PreferencesWindowVisualSettingsAddStyleBackground}">
                                            <Label x:Name="buttonColorPicker"
                                                   Margin="5,0,5,0"
                                                   FontFamily="{StaticResource ArtifaktElementRegular}"
                                                   FontSize="14px"
                                                   Background="{Binding HexColorString, Converter={StaticResource StringToBrushColorConverter}}" 
                                                   Width="15" 
                                                   Height="15"/>
                                            <TextBlock Text="{Binding Name}" 
                                                        TextTrimming="CharacterEllipsis"
                                                        MaxWidth="148"
                                                        Margin="5,0,5,0"
                                                        Foreground="{StaticResource NodeContextMenuForeground}"
                                                        FontFamily="{StaticResource ArtifaktElementRegular}"
                                                        FontSize="14px"
                                                        FontWeight="Medium"/>
                                        </StackPanel>
                                        <ControlTemplate.Triggers>
                                            <Trigger Property="IsMouseOver" Value="True">
                                                <Setter TargetName="groupStyleStackPanel" Property="Background" Value="{StaticResource NodeContextMenuBackgroundHighlight}" />
                                            </Trigger>
                                            <Trigger Property="IsMouseOver" Value="False">
                                                <Setter TargetName="groupStyleStackPanel" Property="Background" Value="{StaticResource NodeContextMenuBackground}" />
                                            </Trigger>
                                        </ControlTemplate.Triggers>
                                    </ControlTemplate>
                                </Setter.Value>
                            </Setter>
                        </Style>
                    </MenuItem.Resources>
                </MenuItem>
                <MenuItem Name="ColorMenuItem" 
                          Header="{x:Static p:Resources.GroupContextMenuColor}"
                          Style="{StaticResource ContextMenuItemFixedWidthStyle}">
                    <ListBox ItemContainerStyle="{StaticResource ColorSelectorListBoxItem}"
                             SelectionChanged="OnNodeColorSelectionChanged"
                             Height="Auto"
                             Style="{StaticResource ColorSelectorListBox}">
                        <ListBox.Items>
                            <Rectangle Fill="#d4b6db" />
                            <Rectangle Fill="#ffb8d8" />
                            <Rectangle Fill="#ffc999" />
                            <Rectangle Fill="#e8f7ad" />
                            <Rectangle Fill="#b9f9e1" />
                            <Rectangle Fill="#a4e1ff" />
                            <Rectangle Fill="#b5b5b5" />
                            <Rectangle Fill="#FFFFFF" />
                            <Rectangle Fill="#bb87c6" />
                            <Rectangle Fill="#ff7bac" />
                            <Rectangle Fill="#ffaa45" />
                            <Rectangle Fill="#c1d676" />
                            <Rectangle Fill="#71c6a8" />
                            <Rectangle Fill="#48b9ff" />
                            <Rectangle Fill="#848484" />
                            <Rectangle Fill="#d8d8d8" />
                        </ListBox.Items>
                    </ListBox>
                </MenuItem>
                <MenuItem Name="ChangeSize" 
                          Header="{x:Static p:Resources.GroupContextMenuFont}"
                          Style="{StaticResource ContextMenuItemFixedWidthStyle}">
                    <MenuItem Name="FontSize0"
                              Command="{Binding ChangeFontSize}"
                              CommandParameter="14"
                              Header="14"
                              IsChecked="{Binding Path=FontSize, Converter={StaticResource MenuItemCheckConverter}, ConverterParameter=14}" />
                    <MenuItem Name="FontSize1"
                              Command="{Binding ChangeFontSize}"
                              CommandParameter="18"
                              Header="18"
                              IsChecked="{Binding Path=FontSize, Converter={StaticResource MenuItemCheckConverter}, ConverterParameter=18}" />
                    <MenuItem Name="FontSize2"
                              Command="{Binding ChangeFontSize}"
                              CommandParameter="24"
                              Header="24"
                              IsChecked="{Binding Path=FontSize, Converter={StaticResource MenuItemCheckConverter}, ConverterParameter=24}" />
                    <MenuItem Name="FontSize3"
                              Command="{Binding ChangeFontSize}"
                              CommandParameter="30"
                              Header="30"
                              IsChecked="{Binding Path=FontSize, Converter={StaticResource MenuItemCheckConverter}, ConverterParameter=30}" />
                    <MenuItem Name="FontSize4"
                              Command="{Binding ChangeFontSize}"
                              CommandParameter="36"
                              Header="36"
                              IsChecked="{Binding Path=FontSize, Converter={StaticResource MenuItemCheckConverter}, ConverterParameter=36}" />
                    <MenuItem Name="FontSize5"
                              Command="{Binding ChangeFontSize}"
                              CommandParameter="48"
                              Header="48"
                              IsChecked="{Binding Path=FontSize, Converter={StaticResource MenuItemCheckConverter}, ConverterParameter=48}" />
                    <MenuItem Name="FontSize6"
                              Command="{Binding ChangeFontSize}"
                              CommandParameter="60"
                              Header="60"
                              IsChecked="{Binding Path=FontSize, Converter={StaticResource MenuItemCheckConverter}, ConverterParameter=60}" />
                    <MenuItem Name="FontSize7"
                              Command="{Binding ChangeFontSize}"
                              CommandParameter="72"
                              Header="72"
                              IsChecked="{Binding Path=FontSize, Converter={StaticResource MenuItemCheckConverter}, ConverterParameter=72}" />
                    <MenuItem Name="FontSize8"
                              Command="{Binding ChangeFontSize}"
                              CommandParameter="96"
                              Header="96"
                              IsChecked="{Binding Path=FontSize, Converter={StaticResource MenuItemCheckConverter}, ConverterParameter=96}" />

                </MenuItem>
            </ContextMenu>
        </Grid.ContextMenu>

        <!--Persistent border shows around the entire group at all time-->
        <Border Name="persistentBorder"
                Grid.RowSpan="2"
                BorderThickness="2"
                CornerRadius="{StaticResource ExpanderCornerRadius}"
                IsHitTestVisible="False"
                Canvas.ZIndex="41"
                Visibility="{Binding Nodes, Converter={StaticResource ListHasMoreThanNItemsToVisibilityConverter}}"
                Margin="-1">
            <Border.BorderBrush>
                <SolidColorBrush Color="{Binding Background}" />
            </Border.BorderBrush>
        </Border>

        <!--Selection border shows around the entire group when its selected in the workspace-->
        <Border Name="selectionBorder"
                Grid.RowSpan="2"
                Background="Transparent"
                BorderBrush="{Binding PreviewState, Converter={StaticResource ConnectionStateToBrushConverter}}"
                BorderThickness="2"
                CornerRadius="{StaticResource ExpanderCornerRadius}"
                IsHitTestVisible="False"
                Canvas.ZIndex="41"
                Margin="-1">
            <Border.Visibility>
                <Binding Path="PreviewState"
                         UpdateSourceTrigger="PropertyChanged"
                         Mode="OneWay"
                         Converter="{StaticResource ConnectionStateToVisibilityCollapsedConverter}">
                </Binding>
            </Border.Visibility>
        </Border>

        <!--
        If a node is dragged over this group (and that node does not already belong to another group)
        this border is activated, indicating that the node can be dropped into the group.
        The visibility of this is controlled by the AnnotationViewModel property 'NodeHoveringState'
        which is set in the StateMachine.
        -->
        <Border x:Name="nodeHoveringStateBorder"
                Grid.RowSpan="2"
                Background="Transparent"
                CornerRadius="{StaticResource ExpanderCornerRadius}"
                IsHitTestVisible="False"
                Canvas.ZIndex="41"
                BorderBrush="#CCCCCC"
                BorderThickness="6px"
                Visibility="{Binding NodeHoveringState, Converter={StaticResource BooleanToVisibilityCollapsedConverter}}"
                Margin="-4px">
        </Border>

        <!--
        The entire group is embedded in this expander, which is consist of two parts
        - The header: holds the Title and Description of the group and also a context menu icon
            - The description is only visible when the Expander is expanded.
        - The content grid: this grid holds all of the content in the group:
            - the AnnotationRectangle canvas: this is where the content (nodes, notes and groups) live
              this is a Path with a background color set by the ViewModel, the canvas will cutout any
              nested groups AnnotationRectangle to avoid overlaps
            - ResizeThumb: this is used to manually expand the size of the group, the thumb has no icon
              but will convert the mouse courser to visually show the user that they can resize the group
              when hovering over the bottom right corner.
        -->
        <Expander x:Name="GroupExpander"
                  Width="{Binding Width}"
                  IsExpanded="{Binding IsExpanded, Mode=TwoWay}"
                  Grid.Row="0">
            <Expander.Header>
                <Grid x:Name="TextBlockGrid"
                      Grid.Row="0"
                      Height="auto"
                      MaxWidth="{Binding Width}"
                      Margin="5,0,5,0"
                      VerticalAlignment="Top">
                    <Grid.RowDefinitions>
                        <RowDefinition x:Name="GroupNameRow"
                                       Height="Auto" />
                        <RowDefinition x:Name="GroupDescriptionRow"
                                       Height="Auto" />
                    </Grid.RowDefinitions>
                    <ContentControl x:Name="GroupNameControl"
                                    Grid.Row="0"
                                    Width="{Binding Width}"
                                    MinHeight="20"
                                    Margin="0,0,0,10">
                        <Grid Margin="0,0,20,0">
                            <TextBlock x:Name="GroupTextBlock"
                                       Text="{Binding AnnotationText, Converter={StaticResource AnnotationTextConverter}, ConverterParameter='TextBlock'}"
                                       FontFamily="Trebuchet"
                                       FontSize="{Binding FontSize}"
                                       LineStackingStrategy="BlockLineHeight"
                                       TextWrapping="WrapWithOverflow"
                                       Visibility="Visible">
                            </TextBlock>
                            <TextBox Name="GroupTextBox"
                                     Grid.Column="0"
                                     Visibility="Collapsed"
                                     Text="{Binding AnnotationText,Converter={StaticResource AnnotationTextConverter}, ConverterParameter='TextBox'}"
                                     TextWrapping="WrapWithOverflow"
                                     FontFamily="Trebuchet"
                                     FontSize="{Binding FontSize}"
                                     IsVisibleChanged="GroupTextBox_OnIsVisibleChanged"
                                     GotFocus="GroupTextBox_OnGotFocus"
                                     TextChanged="GroupTextBox_OnTextChanged"
                                     AcceptsReturn="True"
                                     AcceptsTab="True">
                            </TextBox>
                        </Grid>
                    </ContentControl>

                    <ContentControl x:Name="GroupDescriptionControls"
                                    Grid.Row="1"
                                    MinHeight="20"
                                    Margin="0,-10,30,0"
                                    SizeChanged="GroupDescriptionControls_SizeChanged"
                                    IsVisibleChanged="GroupDescriptionTextBlock_IsVisibleChanged">
                        <Grid>
                            <TextBlock x:Name="GroupDescriptionTextBlock"
                                       Text="{Binding AnnotationDescriptionText, Converter={StaticResource AnnotationTextConverter}}"
                                       FontFamily="Trebuchet"
                                       FontSize="12"
                                       LineStackingStrategy="BlockLineHeight"
                                       TextWrapping="Wrap"
                                       Visibility="Visible">
                            </TextBlock>
                            <TextBox Name="GroupDescriptionTextBox"
                                     Visibility="Collapsed"
                                     Text="{Binding AnnotationDescriptionText, Converter={StaticResource AnnotationTextConverter}}"
                                     TextWrapping="Wrap"
                                     FontFamily="Trebuchet"
                                     FontSize="12"
                                     IsVisibleChanged="GroupDescriptionTextBox_OnIsVisibleChanged"
                                     GotFocus="GroupDescriptionTextBox_GotFocus"
                                     TextChanged="GroupDescriptionTextBox_TextChanged"
                                     AcceptsReturn="True"
                                     AcceptsTab="True">
                            </TextBox>
                        </Grid>
                        <ContentControl.Style>
                            <Style TargetType="{x:Type ContentControl}">
                                <Setter Property="Visibility"
                                        Value="Collapsed" />
                                <Style.Triggers>
                                    <MultiDataTrigger>
                                        <MultiDataTrigger.Conditions>
                                            <Condition Value="True">
                                                <Condition.Binding>
                                                    <Binding ElementName="GroupExpander"
                                                             Path="IsExpanded" />
                                                </Condition.Binding>
                                            </Condition>
                                        </MultiDataTrigger.Conditions>
                                        <Setter Property="Visibility"
                                                Value="Visible" />
                                    </MultiDataTrigger>
                                </Style.Triggers>
                            </Style>
                        </ContentControl.Style>
                    </ContentControl>
                    <Grid.Triggers>

                        <EventTrigger  SourceName="GroupNameControl"
                                       RoutedEvent="ContentControl.MouseDoubleClick">
                            <BeginStoryboard>
                                <Storyboard>
                                    <ObjectAnimationUsingKeyFrames Duration="0"
                                                                   Storyboard.TargetName="GroupTextBlock"
                                                                   Storyboard.TargetProperty="(TextBlock.Visibility)">
                                        <DiscreteObjectKeyFrame KeyTime="0"
                                                                Value="{Binding ElementName=TextBlockGrid, Path=Visibility,
                            Converter={StaticResource GroupTitleVisibilityConverter },ConverterParameter=FlipTextblock}">
                                        </DiscreteObjectKeyFrame>
                                    </ObjectAnimationUsingKeyFrames>

                                    <ObjectAnimationUsingKeyFrames Duration="0"
                                                                   Storyboard.TargetName="GroupTextBox"
                                                                   Storyboard.TargetProperty="(TextBox.Visibility)">
                                        <DiscreteObjectKeyFrame KeyTime="0"
                                                                Value="{Binding ElementName=TextBlockGrid, Path=Visibility,
                            Converter={StaticResource GroupTitleVisibilityConverter },ConverterParameter=FlipTextbox}" />
                                    </ObjectAnimationUsingKeyFrames>

                                    <BooleanAnimationUsingKeyFrames Storyboard.TargetName="GroupTextBox"
                                                                    Storyboard.TargetProperty="(TextBox.Focusable)">
                                        <DiscreteBooleanKeyFrame KeyTime="0"
                                                                 Value="True" />
                                    </BooleanAnimationUsingKeyFrames>
                                </Storyboard>
                            </BeginStoryboard>
                        </EventTrigger>

                        <EventTrigger SourceName="GroupDescriptionControls"
                                      RoutedEvent="ContentControl.MouseDoubleClick">
                            <BeginStoryboard>
                                <Storyboard>
                                    <ObjectAnimationUsingKeyFrames Duration="0"
                                                                   Storyboard.TargetName="GroupDescriptionTextBlock"
                                                                   Storyboard.TargetProperty="(TextBlock.Visibility)">
                                        <DiscreteObjectKeyFrame KeyTime="0"
                                                                Value="{Binding ElementName=TextBlockGrid, Path=Visibility,
                            Converter={StaticResource GroupTitleVisibilityConverter },ConverterParameter=FlipTextblock}">
                                        </DiscreteObjectKeyFrame>
                                    </ObjectAnimationUsingKeyFrames>
                                    <ObjectAnimationUsingKeyFrames Duration="0"
                                                                   Storyboard.TargetName="GroupDescriptionTextBox"
                                                                   Storyboard.TargetProperty="(TextBox.Visibility)">
                                        <DiscreteObjectKeyFrame KeyTime="0"
                                                                Value="{Binding ElementName=TextBlockGrid, Path=Visibility,
                            Converter={StaticResource GroupTitleVisibilityConverter },ConverterParameter=FlipTextbox}" />
                                    </ObjectAnimationUsingKeyFrames>

                                    <BooleanAnimationUsingKeyFrames Storyboard.TargetName="GroupDescriptionTextBox"
                                                                    Storyboard.TargetProperty="(TextBox.Focusable)">
                                        <DiscreteBooleanKeyFrame KeyTime="0"
                                                                 Value="True" />
                                    </BooleanAnimationUsingKeyFrames>
                                </Storyboard>
                            </BeginStoryboard>
                        </EventTrigger>


                        <EventTrigger  SourceName="GroupTextBox"
                                       RoutedEvent="TextBox.LostKeyboardFocus">
                            <BeginStoryboard>
                                <Storyboard>
                                    <ObjectAnimationUsingKeyFrames Duration="0"
                                                                   Storyboard.TargetName="GroupTextBlock"
                                                                   Storyboard.TargetProperty="(TextBlock.Visibility)">
                                        <DiscreteObjectKeyFrame KeyTime="0"
                                                                Value="{x:Static Visibility.Visible}" />
                                    </ObjectAnimationUsingKeyFrames>

                                    <ObjectAnimationUsingKeyFrames Duration="0"
                                                                   Storyboard.TargetName="GroupTextBox"
                                                                   Storyboard.TargetProperty="(TextBox.Visibility)">
                                        <DiscreteObjectKeyFrame KeyTime="0"
                                                                Value="{x:Static Visibility.Collapsed}" />
                                    </ObjectAnimationUsingKeyFrames>

                                    <BooleanAnimationUsingKeyFrames Storyboard.TargetName="GroupTextBox"
                                                                    Storyboard.TargetProperty="(TextBox.Focusable)">
                                        <DiscreteBooleanKeyFrame KeyTime="0"
                                                                 Value="True" />
                                    </BooleanAnimationUsingKeyFrames>
                                </Storyboard>
                            </BeginStoryboard>
                        </EventTrigger>
                        <EventTrigger SourceName="GroupDescriptionTextBox"
                                      RoutedEvent="TextBox.LostKeyboardFocus">
                            <BeginStoryboard>
                                <Storyboard>
                                    <ObjectAnimationUsingKeyFrames Duration="0"
                                                                   Storyboard.TargetName="GroupDescriptionTextBlock"
                                                                   Storyboard.TargetProperty="(TextBlock.Visibility)">
                                        <DiscreteObjectKeyFrame KeyTime="0"
                                                                Value="{x:Static Visibility.Visible}" />
                                    </ObjectAnimationUsingKeyFrames>

                                    <ObjectAnimationUsingKeyFrames Duration="0"
                                                                   Storyboard.TargetName="GroupDescriptionTextBox"
                                                                   Storyboard.TargetProperty="(TextBox.Visibility)">
                                        <DiscreteObjectKeyFrame KeyTime="0"
                                                                Value="{x:Static Visibility.Collapsed}" />
                                    </ObjectAnimationUsingKeyFrames>

                                    <BooleanAnimationUsingKeyFrames Storyboard.TargetName="GroupDescriptionTextBox"
                                                                    Storyboard.TargetProperty="(TextBox.Focusable)">
                                        <DiscreteBooleanKeyFrame KeyTime="0"
                                                                 Value="True" />
                                    </BooleanAnimationUsingKeyFrames>
                                </Storyboard>
                            </BeginStoryboard>
                        </EventTrigger>
                    </Grid.Triggers>
                </Grid>
            </Expander.Header>

            <Grid>
                <Canvas  Name="AnnotationRectangle"
                         Width="{Binding Width}"
                         Height="{Binding ModelAreaHeight}"
                         IsHitTestVisible="True"
                         Background="Transparent"
                         Opacity="0.5"
                         Visibility="{Binding IsExpanded, Converter={StaticResource BooleanToVisibilityCollapsedConverter}}">
                    <Path Stroke="Transparent"
                          StrokeThickness="0">
                        <Path.Fill>
                            <SolidColorBrush Color="{Binding Background}"></SolidColorBrush>
                        </Path.Fill>
                        <Path.Data>
                            <CombinedGeometry GeometryCombineMode="Exclude">
                                <CombinedGeometry.Geometry1>
                                    <RectangleGeometry Rect="{Binding ModelAreaRect}" />
                                </CombinedGeometry.Geometry1>
                                <CombinedGeometry.Geometry2>
                                    <GeometryGroup FillRule="EvenOdd"
                                                   Children="{Binding NestedGroupsGeometries}" />
                                </CombinedGeometry.Geometry2>
                            </CombinedGeometry>
                        </Path.Data>
                    </Path>
                </Canvas>

                <Thumb x:Name="ResizeThumb"
                       Width="10"
                       Height="10"
                       HorizontalAlignment="Right"
                       VerticalAlignment="Bottom"
                       DragDelta="AnnotationRectangleThumb_DragDelta"
                       MouseEnter="Thumb_MouseEnter"
                       MouseLeave="Thumb_MouseLeave">
                    <Thumb.Style>
                        <Style TargetType="{x:Type Thumb}">
                            <Setter Property="Template">
                                <Setter.Value>
                                    <ControlTemplate TargetType="{x:Type Thumb}">
                                        <Border BorderThickness="0"
                                                BorderBrush="Transparent"
                                                Background="Transparent" />
                                    </ControlTemplate>
                                </Setter.Value>
                            </Setter>
                        </Style>
                    </Thumb.Style>
                </Thumb>
            </Grid>
        </Expander>
        <!--
        The CollapsedAnnotationRectangle is visible whenever the expander is collapsed. In this state the
        expander header is still visible but will hide the group description text. This border has 3 children
            - inputPortControl: This will display any input port of nodes that are either not connected or connected
              to nodes outside of the group
            - outputPortControl: This will display any output port of nodes that are either not connected or connected
              to nodes outside of the group
            - GroupContentIcons: This will display the node icons of all Input/Output ports that are on the group
              it also shows a counter of all nodes that are in between the input/output nodes.
        -->
        <Border x:Name="CollapsedAnnotationRectangle"
                Width="{Binding Width}"
                Visibility="{Binding ElementName=GroupExpander, Path=IsExpanded, Converter={StaticResource InverseBoolToVisibilityCollapsedConverter}}"
                Grid.Row="1">
            <Border.Background>
                <SolidColorBrush Color="{Binding Background}" Opacity="0.5" />
            </Border.Background>
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="auto" />
                    <ColumnDefinition Width="*" />
                    <ColumnDefinition Width="auto" />
                </Grid.ColumnDefinitions>
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto" />
                    <RowDefinition Height="Auto" />
                </Grid.RowDefinitions>

                <!--INPUT PORTS-->
                <ItemsControl Name="inputPortControl"
                              Grid.Column="0"
                              Grid.Row="0"
                              Canvas.ZIndex="20"
                              HorizontalContentAlignment="Left"
                              ItemsSource="{Binding Path=InPorts}"
                              Margin="-25,10">
                </ItemsControl>

                <!--OUTPUT PORTS-->
                <ItemsControl Name="outputPortControl"
                              Grid.Column="2"
                              Grid.Row="0"
                              Canvas.ZIndex="20"
                              HorizontalContentAlignment="Right"
                              ItemsSource="{Binding Path=OutPorts}"
                              Margin="-25,10">
                </ItemsControl>

                <Grid x:Name="GroupContent"
                      Grid.Row="1"
                      Grid.ColumnSpan="3">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="*" />
                        <ColumnDefinition Width="Auto" />
                        <ColumnDefinition Width="*" />
                    </Grid.ColumnDefinitions>
                    <Label x:Name="NestedGroups"
                           Grid.Column="0"
                           Content="{Binding NestedGroups, Converter={StaticResource NestedGroupsLabelConverter}}"
                           Margin="0"
                           VerticalAlignment="Center"
                           HorizontalAlignment="Right"
                           ToolTipService.ShowOnDisabled="False"
                           ToolTipService.IsEnabled="{Binding NestedGroups, Converter={StaticResource CollectionHasMoreThanNItemsToBoolConverter}}">
                        <Label.ToolTip>
                            <dynui:DynamoToolTip AttachmentSide="Bottom"
                                                 Style="{DynamicResource ResourceKey=SLightToolTip}"
                                                 Margin="5,0,0,0">
                                <ListView ItemsSource="{Binding NestedGroups}">
                                    <ListView.Resources>
                                        <DataTemplate x:Key="MultipleItems"
                                                      DataType="{x:Type viewModels:AnnotationViewModel}">
                                            <TextBlock Text="{Binding AnnotationText}" />
                                        </DataTemplate>
                                    </ListView.Resources>
                                    <ListView.Style>
                                        <Style TargetType="{x:Type ListView}">
                                            <Setter Property="Background"
                                                    Value="Transparent" />
                                            <Setter Property="BorderThickness"
                                                    Value="0" />
                                            <Style.Triggers>
                                                <DataTrigger Binding="{Binding NestedGroups, 
                                                                        Converter={StaticResource CollectionHasMoreThanNItemsToBoolConverter}}"
                                                             Value="True">
                                                    <Setter Property="ItemTemplate"
                                                            Value="{StaticResource MultipleItems}" />
                                                </DataTrigger>
                                            </Style.Triggers>
                                        </Style>
                                    </ListView.Style>
                                </ListView>
                            </dynui:DynamoToolTip>
                        </Label.ToolTip>
                    </Label>

                    <Border x:Name="NodeCount"
                            Grid.Column="1"
                            BorderThickness="1"
                            BorderBrush="#FFFFFF"
                            Background="#EEEEEE"
                            CornerRadius="{Binding Path=ActualHeight, ElementName=NodeCount}"
                            Width="{Binding Path=ActualHeight, ElementName=NodeCount}"
                            Height="32"
                            Margin="10">
                        <TextBlock Text="{Binding NodeContentCount, Mode=OneWay, StringFormat='+{0}'}"
                                   HorizontalAlignment="Center"
                                   VerticalAlignment="Center"
                                   FontSize="14" />
                    </Border>
                </Grid>
            </Grid>
        </Border>
    </Grid>
</UserControl>
    
