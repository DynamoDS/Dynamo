{
    "success": true,
    "message": "Found packages",
    "content": [
      {
        "_id": "584cd9eefdef23aa6e0000d6",
        "name": "Synthetic",
        "__v": 3,
        "white_list": false,
        "versions": [
          {
            "_id": "584cd9eefdef23aa6e0000d7",
            "contains_binaries": true,
            "node_libraries": [
              "Synthetic.Core, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null",
              "Synthetic.Revit, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null"
            ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-prod/82dbfb97-024a-47fc-b2b4-2af4c3389144gregPkg346.zip",
            "contents": "Json.Decode - Input a text string formated in JSON, return a nested list., Json.Encode - Input a title and list of list pairs, node encodes the lists into JSON., RoundInches - Round a number to the nearest inch or fractional inch.",
            "engine_metadata": "",
            "engine_version": "1.2.1.3083",
            "created": "2016-12-11T04:45:34.665Z",
            "full_dependency_versions": [
              "1.2.161210"
            ],
            "full_dependency_ids": [
              {
                "_id": "584cd9eefdef23aa6e0000d6",
                "name": "Synthetic"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "1.2.161210"
          },
          {
            "_id": "584e1ccefdef23aa6e0000de",
            "contains_binaries": true,
            "node_libraries": [
              "Synthetic.Core, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null",
              "Synthetic.Revit, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null",
              "Synthetic.UI, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null"
            ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-prod/5e46649f-5343-4f5e-a05a-97b3dc1f87a9gregPkg469.zip",
            "contents": "Json.Decode - Input a text string formated in JSON, return a nested list., Json.Encode - Input a title and list of list pairs, node encodes the lists into JSON., RoundInches - Round a number to the nearest inch or fractional inch.",
            "engine_metadata": "",
            "engine_version": "1.2.1.3083",
            "created": "2016-12-12T03:43:10.240Z",
            "full_dependency_versions": [
              "1.2.161211"
            ],
            "full_dependency_ids": [
              {
                "_id": "584cd9eefdef23aa6e0000d6",
                "name": "Synthetic"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "1.2.161211"
          }
        ],
        "latest_version_update": "2016-12-12T03:43:10.240Z",
        "num_versions": 2,
        "comments": [ ],
        "num_comments": 0,
        "latest_comment": "1970-01-01T00:00:00.000Z",
        "votes": 0,
        "downloads": 182,
        "repository_url": "https://github.com/amcgoey/Synthetic",
        "site_url": "https://github.com/amcgoey/Synthetic",
        "banned": false,
        "deprecated": false,
        "group": "Synthetic",
        "engine": "dynamo",
        "license": "The MIT License (MIT) Copyright (c) 2016 Arthur McGoey.  Refer to repository for full license info.",
        "used_by": [ ],
        "num_dependents": 0,
        "description": "Synthetic provides Dynamo nodes for manipulating data, and accessing Revit API objects.  Includes nodes for documents, worksets, view templates, dictionary data types, and Enum (enumerations).  Please refer to the example definitions in the extra folder.  The examples show how to use many of the included nodes.\n\nUPDATED: Reorganized all the UI nodes into their own section.  This may break the past nodes.  Significantly updated the DialogRevitTask class.  My apologies for any nodes that break due to the changes.  The package organization should be settled now.",
        "maintainers": [
          {
            "_id": "54e2cfe2dcee4dfd260000f3",
            "username": "mcgoey.unm"
          }
        ],
        "keywords": [
          "document",
          "workset",
          "view",
          "template",
          "dictionary",
          "enum",
          "enumeration",
          "dialog",
          "form",
          "color"
        ],
        "created": "2016-12-11T04:45:34.665Z"
      },
      {
        
        "_id": "55cd54b0662bf0e9080000b4",
        "__v": 15,
        "name": "UtilityNodes",
        "white_list": false,
        "versions": [
          {
            "_id": "55cd54b0662bf0e9080000b5",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/39070c26-3f38-43fb-8381-f233c68bcd72gregPkg334.zip",
            "contents": "GetSharedCord - This will return Start and End point from a family.",
            "engine_metadata": "",
            "engine_version": "0.8.2.2240",
            "created": "2015-08-14T02:38:40.206Z",
            "full_dependency_versions": [ "0.0.1" ],
            "full_dependency_ids": [
              {
                "_id": "55cd54b0662bf0e9080000b4",
                "name": "UtilityNodes"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "0.0.1"
          },
          {
            "_id": "55d2cfbc662bf0e9080000da",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/20fccb08-6b4d-40b5-96cf-d93e39a5e2e4gregPkg804.zip",
            "contents": "GetMidPoint - Input two points and it will return mid point, GetSharedCord - This will return Start and End point from a family., RotateAdaptiveComponentDuringPlacement - This will provide you opportunity to rotate Adaptive Componenet while placement.",
            "engine_metadata": "",
            "engine_version": "0.8.2.2255",
            "created": "2015-08-18T06:25:00.651Z",
            "full_dependency_versions": [ "0.0.2" ],
            "full_dependency_ids": [
              {
                "_id": "55cd54b0662bf0e9080000b4",
                "name": "UtilityNodes"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "0.0.2"
          },
          {
            "_id": "55dec360662bf0e90800011a",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/e65c2808-f08d-4da5-b841-ca0f3c60ac5agregPkg146.zip",
            "contents": "GetMidPoint - Input two points and it will return mid point, GetSharedCord - This will return Start and End point from a family., RotateAdaptiveComponentDuringPlacement - This will provide you opportunity to rotate Adaptive Componenet while placement., RecursivePattern - Takes a PolyCurve and returns a smaller PolyCurve in the pattern",
            "engine_metadata": "",
            "engine_version": "0.8.2.2371",
            "created": "2015-08-27T07:59:28.424Z",
            "full_dependency_versions": [ "0.0.3" ],
            "full_dependency_ids": [
              {
                "_id": "55cd54b0662bf0e9080000b4",
                "name": "UtilityNodes"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "0.0.3"
          },
          {
            "_id": "55ee7c4e662bf0e908000156",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/ef7bc17b-8219-4f88-ab39-54ffd7274114gregPkg242.zip",
            "contents": "GetMidPoint - Input two points and it will return mid point, GetSharedCord - This will return Start and End point from a family., RecursivePattern - Takes a PolyCurve and returns a smaller PolyCurve in the pattern, RotateAdaptiveComponentDuringPlacement - This will provide you opportunity to rotate Adaptive Componenet while placement.",
            "engine_metadata": "",
            "engine_version": "0.8.3.2500",
            "created": "2015-09-08T06:12:30.029Z",
            "full_dependency_versions": [ "9.8.2015" ],
            "full_dependency_ids": [
              {
                "_id": "55cd54b0662bf0e9080000b4",
                "name": "UtilityNodes"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "9.8.2015"
          },
          {
            "_id": "56a729e1c3e9ee4a0800002e",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/9eeab99b-096b-4f0d-ab0f-c70e1815327egregPkg484.zip",
            "contents": "CreatePointGrid - This custom node will created 4point array by providing array of 2 lines., GetMidPoint - Input two points and it will return mid point, GetSharedCord - This will return Start and End point from a family., RecursivePattern - Takes a PolyCurve and returns a smaller PolyCurve in the pattern, RotateAdaptiveComponentDuringPlacement - This will provide you opportunity to rotate Adaptive Componenet while placement.",
            "engine_metadata": "",
            "engine_version": "0.9.1.3897",
            "created": "2016-01-26T08:10:09.737Z",
            "full_dependency_versions": [ "27.1.2016" ],
            "full_dependency_ids": [
              {
                "_id": "55cd54b0662bf0e9080000b4",
                "name": "UtilityNodes"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "27.1.2016"
          },
          {
            "_id": "57ad7c2e4172a48a35000049",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-prod/dea0f7af-3f2e-4861-851b-53b1db35994cgregPkg762.zip",
            "contents": "CreatePointGrid - This custom node will created 4point array by providing array of 2 lines., GetMidPoint - Input two points and it will return mid point, GetSharedCord - This will return Start and End point from a family., RecursivePattern - Takes a PolyCurve and returns a smaller PolyCurve in the pattern, RotateAdaptiveComponentDuringPlacement - This will provide you opportunity to rotate Adaptive Componenet while placement.",
            "engine_metadata": "",
            "engine_version": "1.1.1.2240",
            "created": "2016-08-12T07:35:10.435Z",
            "full_dependency_versions": [ "28.8.2016" ],
            "full_dependency_ids": [
              {
                "_id": "55cd54b0662bf0e9080000b4",
                "name": "UtilityNodes"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "28.8.2016"
          },
          {
            "_id": "57be8bee4172a48a350000cd",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-prod/29a8b98b-81a0-4f01-bf1e-c3bfdc986f24gregPkg720.zip",
            "contents": "CreatePointGrid - This custom node will created 4point array by providing array of 2 lines., GetMidPoint - Input two points and it will return mid point, GetSharedCord - This will return Start and End point from a family., RecursivePattern - Takes a PolyCurve and returns a smaller PolyCurve in the pattern, RotateAdaptiveComponentDuringPlacement - This will provide you opportunity to rotate Adaptive Componenet while placement.",
            "engine_metadata": "",
            "engine_version": "1.1.1.2356",
            "created": "2016-08-25T06:10:54.781Z",
            "full_dependency_versions": [ "29.8.2016" ],
            "full_dependency_ids": [
              {
                "_id": "55cd54b0662bf0e9080000b4",
                "name": "UtilityNodes"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "29.8.2016"
          },
          {
            "_id": "582971ee5af9f3713d00005e",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-prod/8801fe00-24b8-4bf3-ae9a-6c86b68c7835gregPkg130.zip",
            "contents": "CreatePointGrid - This custom node will created 4point array by providing array of 2 lines., GetMidPoint - Input two points and it will return mid point, GetSharedCord - This will return Start and End point from a family., RecursivePattern - Takes a PolyCurve and returns a smaller PolyCurve in the pattern, RotateAdaptiveComponentDuringPlacement - This will provide you opportunity to rotate Adaptive Componenet while placement.",
            "engine_metadata": "",
            "engine_version": "1.2.0.2690",
            "created": "2016-11-14T08:12:30.446Z",
            "full_dependency_versions": [ "30.11.2016" ],
            "full_dependency_ids": [
              {
                "_id": "55cd54b0662bf0e9080000b4",
                "name": "UtilityNodes"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "30.11.2016"
          }
        ],
        "latest_version_update": "2016-11-14T08:12:30.446Z",
        "num_versions": 8,
        "comments": [ ],
        "num_comments": 0,
        "latest_comment": "1970-01-01T00:00:00.000Z",
        "votes": 0,
        "downloads": 363,
        "repository_url": "",
        "site_url": "",
        "banned": false,
        "deprecated": false,
        "group": "UtilityNodes",
        "engine": "dynamo",
        "license": "",
        "used_by": [ ],
        "num_dependents": 0,
        "description": "These are the bunch of Custom Nodes which are useful in many scenarios. Look for description on each custom node about what they do.",
        "maintainers": [
          {
            "_id": "530da612bfe42595360000b0",
            "username": "critesh"
          }
        ],
        "keywords": null,
        "created": "2015-08-14T02:38:40.206Z"
      },
      {
        "_id": "52f996f8bfe425953600006e",
        "__v": 3,
        "name": "Quad Points on Face",
        "white_list": false,
        "versions": [
          {
            "_id": "52f996f8bfe425953600006f",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/7f21ebd0-b610-4191-a216-c983aee11901gregPkg235.zip",
            "contents": "Quad Points on Face - Creates a regular grid of points on a face in quad groups",
            "engine_metadata": "",
            "engine_version": "0.6.3.16056",
            "created": "2014-02-11T03:20:24.126Z",
            "full_dependency_versions": [
              "0.0.1",
              "0.0.1"
            ],
            "full_dependency_ids": [
              {
                "_id": "52f996f8bfe425953600006e",
                "name": "Quad Points on Face"
              },
              {
                "_id": "522930128faf243666000003",
                "name": "Quads from Rectangular Grid"
              }
            ],
            "direct_dependency_versions": [
              "0.0.1"
            ],
            "direct_dependency_ids": [
              {
                "_id": "522930128faf243666000003",
                "name": "Quads from Rectangular Grid"
              }
            ],
            "change_log": "",
            "version": "0.0.1"
          },
          {
            "_id": "549f57893bdbc3ea4a000013",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/66f57f8f-d258-40b7-a632-99d0fa49a111gregPkg655.zip",
            "contents": "Quad Points on Face - Creates a regular grid of points on a face in quad groups",
            "engine_metadata": "",
            "engine_version": "0.7.5.3566",
            "created": "2014-12-28T01:06:17.540Z",
            "full_dependency_versions": [
              "0.1.0",
              "0.1.0"
            ],
            "full_dependency_ids": [
              {
                "_id": "52f996f8bfe425953600006e",
                "name": "Quad Points on Face"
              },
              {
                "_id": "522930128faf243666000003",
                "name": "Quads from Rectangular Grid"
              }
            ],
            "direct_dependency_versions": [
              "0.1.0"
            ],
            "direct_dependency_ids": [
              {
                "_id": "522930128faf243666000003",
                "name": "Quads from Rectangular Grid"
              }
            ],
            "change_log": "",
            "version": "0.1.0"
          }
        ],
        "latest_version_update": "2014-12-28T01:06:17.540Z",
        "num_versions": 2,
        "comments": [ ],
        "num_comments": 0,
        "latest_comment": "1970-01-01T00:00:00.000Z",
        "votes": -1,
        "downloads": 959,
        "repository_url": "",
        "site_url": "",
        "banned": false,
        "deprecated": false,
        "group": "",
        "engine": "dynamo",
        "license": "MIT",
        "used_by": [ ],
        "num_dependents": 0,
        "description": "Creates a regular grid of points on a face in quad groups",
        "maintainers": [
          {
            "_id": "5224cf86e2f476ca05000053",
            "username": "kronz"
          }
        ],
        "keywords": [
          "face",
          "uv",
          "quad",
          "paneling"
        ],
        "created": "2014-02-11T03:20:24.126Z"
      },
      {

        "_id": "53e99ce50e5572016a00018a",
        "__v": 178,
        "name": "archi-lab.net",
        "white_list": false,
        "versions": [
          {
            "_id": "53e99ce50e5572016a00018b",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/4cad0f0e-e98a-439a-9d5a-c620539f621fgregPkg248.zip",
            "contents": "GH Point to DY Point - Converts CSV Grasshopper export of points into a Dynamo point list. , ElementId - Queries Revit elements for ElementId, Id as string, Id as Integer, and GUID as string., Duplicate Item Indices - Searches an input list for duplicate entries and lists their index numbers. Couple with Get From List to delete duplicates from a list., Dispatch - Works exactly like the Dispatch component in Grasshopper. Input a list and a matching pattern of True/False to split list into two lists one containing all True arguments while other all False arguments. , Override Fill Pattern in View - Overrides fill pattern of any element in an active view to specified fill pattern and color, Get Documents - Queries all linked Revit files and retrieves their Name, LinkInstance and Document properties., Schedules on Sheets - Queries all schedules and produces two lists: one with all schedules that are placed on sheets and one with schedules that are not placed on sheets., Fill Pattern - Get Fill Pattern by Name, Id to Element - Selects elements in a model from id input (ElementId, string, integer or GUID), Slice String - Slices X number of leading or trailing characters from string (boolean true will slice from left while boolean set to false from right)",
            "engine_metadata": "",
            "engine_version": "0.7.1.26723",
            "created": "2014-08-12T04:49:41.531Z",
            "full_dependency_versions": [ "0.0.1" ],
            "full_dependency_ids": [
              {
                "_id": "53e99ce50e5572016a00018a",
                "name": "archi-lab.net"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "0.0.1"
          },
          {
            "_id": "53f54d300e5572016a000199",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/ff595deb-9502-418b-a63c-05f672be12fcgregPkg349.zip",
            "contents": "Change Family Type - Changes family type of a family by passing in an Element and type id of the type we want to change it to. , Combine by Pattern - Combines two list based on a input pattern of true and false., Current Document - Retrieves Current Document, Delete Unnamed Reference Planes - Does just what the name says. , Dispatch - Works exactly like the Dispatch component in Grasshopper. Input a list and a matching pattern of True/False to split list into two lists one containing all True arguments while other all False arguments. , Duplicate Item Indices - Searches an input list for duplicate entries and lists their index numbers. Couple with Get From List to delete duplicates from a list., ElementId - Queries Revit elements for ElementId, Id as string, Id as Integer, and GUID as string., Fill Pattern - Get Fill Pattern by Name, Get Design Options - Queries all of the design options currently in the project., Get Documents - Queries all linked Revit files and retrieves their Name, LinkInstance and Document properties., Get Worksets - Retrieves user worksets from specified document, GH Point to DY Point - Converts CSV Grasshopper export of points into a Dynamo point list. , Id to Element - Selects elements in a model from id input (ElementId, string, integer or GUID), Override Fill Pattern in View - Overrides fill pattern of any element in an active view to specified fill pattern and color, Schedules on Sheets - Queries all schedules and produces two lists: one with all schedules that are placed on sheets and one with schedules that are not placed on sheets., Slice String - Slices X number of leading or trailing characters from string (boolean true will slice from left while boolean set to false from right)",
            "engine_metadata": "",
            "engine_version": "0.7.1.26723",
            "created": "2014-08-21T01:36:48.715Z",
            "full_dependency_versions": [ "2014.8.20" ],
            "full_dependency_ids": [
              {
                "_id": "53e99ce50e5572016a00018a",
                "name": "archi-lab.net"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2014.8.20"
          },
          {
            "_id": "545bced2895fdbc25e000004",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/4483f5e3-090b-49ce-9c2f-247700721befgregPkg283.zip",
            "contents": "Change Family Type - Changes family type of a family by passing in an Element and type id of the type we want to change it to. , Color Settings - This node creates color settings for the Analysis Visualization Framework. , Colored Surface Settings - This node creates settings for the colored surface display style of the Analysis Visualization Framework., Combine by Pattern - Combines two list based on a input pattern of true and false., Current Document - Retrieves Current Document, Delete Linked Model Keynote Tags - Deletes all Keynote Tags that are tagging elements in the linked model. if element in the linked model has a keynote assigned thus a keynote tag reads a proper value it will not be deleted. , Delete Unnamed Reference Planes - Does just what the name says. , Dispatch - Works exactly like the Dispatch component in Grasshopper. Input a list and a matching pattern of True/False to split list into two lists one containing all True arguments while other all False arguments. , Door Set Handing - Determines door set handing (whether its a left or right handed door). Input takes doors, and output will split them into two lists (right and left)., Duplicate Item Indices - Searches an input list for duplicate entries and lists their index numbers. Couple with Get From List to delete duplicates from a list., ElementId - Queries Revit elements for ElementId, Id as string, Id as Integer, and GUID as string., Fill Pattern - Get Fill Pattern by Name, Get All Keynote Tags - Selects all Keynote Tags instances in the model. , Get Design Options - Queries all of the design options currently in the project., Get Documents - Queries all linked Revit files and retrieves their Name, LinkInstance and Document properties., Get Text Note Type by Name - This node will select a text note type by name. , Get Worksets - Retrieves user worksets from specified document, GH Point to DY Point - Converts CSV Grasshopper export of points into a Dynamo point list. , Id to Element - Selects elements in a model from id input (ElementId, string, integer or GUID), Legend Settings - This node sets all settings for the Legend display with Analysis Visualization Framework of Revit. , Override Fill Pattern in View - Overrides fill pattern of any element in an active view to specified fill pattern and color, PolyCurve by Profile Family Type - It takes an input of a profile family type and extract curves from it converting them to polycurves and curve segments for use in Dynamo (sweeps)., Schedules on Sheets - Queries all schedules and produces two lists: one with all schedules that are placed on sheets and one with schedules that are not placed on sheets., Slice String - Slices X number of leading or trailing characters from string (boolean true will slice from left while boolean set to false from right), Get All Views - This node will query all views in the model and return them based on category",
            "engine_metadata": "",
            "engine_version": "0.7.4.3090",
            "created": "2014-11-06T19:41:06.277Z",
            "full_dependency_versions": [ "2014.11.6" ],
            "full_dependency_ids": [
              {
                "_id": "53e99ce50e5572016a00018a",
                "name": "archi-lab.net"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2014.11.6"
          },
          {
            "_id": "545fd475895fdbc25e000010",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/e5dd31f9-265b-40aa-8b1c-43052c3c2b4bgregPkg813.zip",
            "contents": "Change Family Type - Changes family type of a family by passing in an Element and type id of the type we want to change it to. , Color Settings - This node creates color settings for the Analysis Visualization Framework. , Colored Surface Settings - This node creates settings for the colored surface display style of the Analysis Visualization Framework., Combine by Pattern - Combines two list based on a input pattern of true and false., Current Document - Retrieves Current Document, Delete Linked Model Keynote Tags - Deletes all Keynote Tags that are tagging elements in the linked model. if element in the linked model has a keynote assigned thus a keynote tag reads a proper value it will not be deleted. , Delete Unnamed Reference Planes - Does just what the name says. , Dispatch - Works exactly like the Dispatch component in Grasshopper. Input a list and a matching pattern of True/False to split list into two lists one containing all True arguments while other all False arguments. , Door Set Handing - Determines door set handing (whether its a left or right handed door). Input takes doors, and output will split them into two lists (right and left)., Duplicate Item Indices - Searches an input list for duplicate entries and lists their index numbers. Couple with Get From List to delete duplicates from a list., ElementId - Queries Revit elements for ElementId, Id as string, Id as Integer, and GUID as string., Fill Pattern - Get Fill Pattern by Name, Get All Keynote Tags - Selects all Keynote Tags instances in the model. , Get All Views - This node will query all views in the model and return them based on category, Get Design Options - Queries all of the design options currently in the project., Get Documents - Queries all linked Revit files and retrieves their Name, LinkInstance and Document properties., Get Text Note Type by Name - This node will select a text note type by name. , Get Worksets - Retrieves user worksets from specified document, GH Point to DY Point - Converts CSV Grasshopper export of points into a Dynamo point list. , Id to Element - Selects elements in a model from id input (ElementId, string, integer or GUID), Legend Settings - This node sets all settings for the Legend display with Analysis Visualization Framework of Revit. , Override Fill Pattern in View - Overrides fill pattern of any element in an active view to specified fill pattern and color, PolyCurve by Profile Family Type - It takes an input of a profile family type and extract curves from it converting them to polycurves and curve segments for use in Dynamo (sweeps)., Schedules on Sheets - Queries all schedules and produces two lists: one with all schedules that are placed on sheets and one with schedules that are not placed on sheets., Slice String - Slices X number of leading or trailing characters from string (boolean true will slice from left while boolean set to false from right), Rotate Family - This node will rotate a family in Revit around a given axis by supplied angle (in radians). Please remember that every time you run your definition it will rotate family by given angle every time. ",
            "engine_metadata": "",
            "engine_version": "0.7.4.3090",
            "created": "2014-11-09T20:54:13.306Z",
            "full_dependency_versions": [ "2014.11.9" ],
            "full_dependency_ids": [
              {
                "_id": "53e99ce50e5572016a00018a",
                "name": "archi-lab.net"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2014.11.9"
          },
          {
            "_id": "54604396895fdbc25e000011",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/e78780a6-919d-4904-b213-e14d068d4c92gregPkg28.zip",
            "contents": "Change Family Type - Changes family type of a family by passing in an Element and type id of the type we want to change it to. , Color Settings - This node creates color settings for the Analysis Visualization Framework. , Colored Surface Settings - This node creates settings for the colored surface display style of the Analysis Visualization Framework., Combine by Pattern - Combines two list based on a input pattern of true and false., Current Document - Retrieves Current Document, Delete Linked Model Keynote Tags - Deletes all Keynote Tags that are tagging elements in the linked model. if element in the linked model has a keynote assigned thus a keynote tag reads a proper value it will not be deleted. , Delete Unnamed Reference Planes - Does just what the name says. , Dispatch - Works exactly like the Dispatch component in Grasshopper. Input a list and a matching pattern of True/False to split list into two lists one containing all True arguments while other all False arguments. , Door Set Handing - Determines door set handing (whether its a left or right handed door). Input takes doors, and output will split them into two lists (right and left)., Duplicate Item Indices - Searches an input list for duplicate entries and lists their index numbers. Couple with Get From List to delete duplicates from a list., Fill Pattern - Get Fill Pattern by Name, Get All Keynote Tags - Selects all Keynote Tags instances in the model. , Get All Views - This node will query all views in the model and return them based on category, Get Design Options - Queries all of the design options currently in the project., Get Documents - Queries all linked Revit files and retrieves their Name, LinkInstance and Document properties., Get Text Note Type by Name - This node will select a text note type by name. , Get Worksets - Retrieves user worksets from specified document, GH Point to DY Point - Converts CSV Grasshopper export of points into a Dynamo point list. , Id to Element - Selects elements in a model from id input (ElementId, string, integer or GUID), Legend Settings - This node sets all settings for the Legend display with Analysis Visualization Framework of Revit. , Override Fill Pattern in View - Overrides fill pattern of any element in an active view to specified fill pattern and color, PolyCurve by Profile Family Type - It takes an input of a profile family type and extract curves from it converting them to polycurves and curve segments for use in Dynamo (sweeps)., Rotate Family - This node will rotate a family in Revit around a given axis by supplied angle (in radians). Please remember that every time you run your definition it will rotate family by given angle every time. , Schedules on Sheets - Queries all schedules and produces two lists: one with all schedules that are placed on sheets and one with schedules that are not placed on sheets., Slice String - Slices X number of leading or trailing characters from string (boolean true will slice from left while boolean set to false from right)",
            "engine_metadata": "",
            "engine_version": "0.7.4.3090",
            "created": "2014-11-10T04:48:22.049Z",
            "full_dependency_versions": [ "2014.11.10" ],
            "full_dependency_ids": [
              {
                "_id": "53e99ce50e5572016a00018a",
                "name": "archi-lab.net"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2014.11.10"
          },
          {
            "_id": "546043b7895fdbc25e000012",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/c7764b44-0611-4916-8fb6-2d04b34da430gregPkg507.zip",
            "contents": "Change Family Type - Changes family type of a family by passing in an Element and type id of the type we want to change it to. , Color Settings - This node creates color settings for the Analysis Visualization Framework. , Colored Surface Settings - This node creates settings for the colored surface display style of the Analysis Visualization Framework., Combine by Pattern - Combines two list based on a input pattern of true and false., Current Document - Retrieves Current Document, Delete Linked Model Keynote Tags - Deletes all Keynote Tags that are tagging elements in the linked model. if element in the linked model has a keynote assigned thus a keynote tag reads a proper value it will not be deleted. , Delete Unnamed Reference Planes - Does just what the name says. , Dispatch - Works exactly like the Dispatch component in Grasshopper. Input a list and a matching pattern of True/False to split list into two lists one containing all True arguments while other all False arguments. , Door Set Handing - Determines door set handing (whether its a left or right handed door). Input takes doors, and output will split them into two lists (right and left)., Duplicate Item Indices - Searches an input list for duplicate entries and lists their index numbers. Couple with Get From List to delete duplicates from a list., Fill Pattern - Get Fill Pattern by Name, Get All Keynote Tags - Selects all Keynote Tags instances in the model. , Get All Views - This node will query all views in the model and return them based on category, Get Design Options - Queries all of the design options currently in the project., Get Documents - Queries all linked Revit files and retrieves their Name, LinkInstance and Document properties., Get Text Note Type by Name - This node will select a text note type by name. , Get Worksets - Retrieves user worksets from specified document, GH Point to DY Point - Converts CSV Grasshopper export of points into a Dynamo point list. , Id to Element - Selects elements in a model from id input (ElementId, string, integer or GUID), Legend Settings - This node sets all settings for the Legend display with Analysis Visualization Framework of Revit. , Override Fill Pattern in View - Overrides fill pattern of any element in an active view to specified fill pattern and color, PolyCurve by Profile Family Type - It takes an input of a profile family type and extract curves from it converting them to polycurves and curve segments for use in Dynamo (sweeps)., Rotate Family - This node will rotate a family in Revit around a given axis by supplied angle (in radians). Please remember that every time you run your definition it will rotate family by given angle every time. , Schedules on Sheets - Queries all schedules and produces two lists: one with all schedules that are placed on sheets and one with schedules that are not placed on sheets., Slice String - Slices X number of leading or trailing characters from string (boolean true will slice from left while boolean set to false from right), Element Ids - This node will query an element id that can be used with Revit nodes. Dynamo Element Id node returns integer value. ",
            "engine_metadata": "",
            "engine_version": "0.7.4.3090",
            "created": "2014-11-10T04:48:55.407Z",
            "full_dependency_versions": [ "2014.11.11" ],
            "full_dependency_ids": [
              {
                "_id": "53e99ce50e5572016a00018a",
                "name": "archi-lab.net"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2014.11.11"
          },
          {
            "_id": "5472d9f2b77c84600c000037",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/caeb7919-6875-44d3-bf95-ea704ab41a71gregPkg148.zip",
            "contents": "Change Family Type - Changes family type of a family by passing in an Element and type id of the type we want to change it to. , Color Settings - This node creates color settings for the Analysis Visualization Framework. , Colored Surface Settings - This node creates settings for the colored surface display style of the Analysis Visualization Framework., Combine by Pattern - Combines two list based on a input pattern of true and false., Current Document - Retrieves Current Document, Delete Linked Model Keynote Tags - Deletes all Keynote Tags that are tagging elements in the linked model. if element in the linked model has a keynote assigned thus a keynote tag reads a proper value it will not be deleted. , Delete Unnamed Reference Planes - Does just what the name says. , Dispatch - Works exactly like the Dispatch component in Grasshopper. Input a list and a matching pattern of True/False to split list into two lists one containing all True arguments while other all False arguments. , Door Set Handing - Determines door set handing (whether its a left or right handed door). Input takes doors, and output will split them into two lists (right and left)., Duplicate Item Indices - Searches an input list for duplicate entries and lists their index numbers. Couple with Get From List to delete duplicates from a list., Element Ids - This node will query an element id that can be used with Revit nodes. Dynamo Element Id node returns integer value. , Fill Pattern - Get Fill Pattern by Name, Get All Keynote Tags - Selects all Keynote Tags instances in the model. , Get All Views - This node will query all views in the model and return them based on category, Get Design Options - Queries all of the design options currently in the project., Get Documents - Queries all linked Revit files and retrieves their Name, LinkInstance and Document properties., Get Text Note Type by Name - This node will select a text note type by name. , Get Worksets - Retrieves user worksets from specified document, GH Point to DY Point - Converts CSV Grasshopper export of points into a Dynamo point list. , Id to Element - Selects elements in a model from id input (ElementId, string, integer or GUID), Legend Settings - This node sets all settings for the Legend display with Analysis Visualization Framework of Revit. , Override Fill Pattern in View - Overrides fill pattern of any element in an active view to specified fill pattern and color, PolyCurve by Profile Family Type - It takes an input of a profile family type and extract curves from it converting them to polycurves and curve segments for use in Dynamo (sweeps)., Rotate Family - This node will rotate a family in Revit around a given axis by supplied angle (in radians). Please remember that every time you run your definition it will rotate family by given angle every time. , Schedules on Sheets - Queries all schedules and produces two lists: one with all schedules that are placed on sheets and one with schedules that are not placed on sheets., Slice String - Slices X number of leading or trailing characters from string (boolean true will slice from left while boolean set to false from right), Colored Surface Display Style - This node will generate a Colored Surface Display Style from inputs of points, values, and instance surface for analysis to be aplied to. Also, use color and legend settings (part of archi-lab package) to create style colors and visibility., Delete Linked Model Keynote Tags - Deletes all Keynote Tags that are tagging elements in the linked model. if element in the linked model has a keynote assigned thus a keynote tag reads a proper value it will not be deleted. , Get All Keynote Tags - Selects all Keynote Tags instances in the model. , Marker&Text Display Style - This node will take an input of Points and a matching input of values to create Analysis Display Style in Revit. Use Legend, Marker and Color Settings nodes to fully customize your display style. , Remap UV Domain - This node takes an input of a reference face and a list of UVs that get remapped into that face's UV Domain. The output is a list of UV Coordinates in that surface's domain. , Rotate Family - This node will rotate a family in Revit around a given axis by supplied angle (in radians). Please remember that every time you run your definition it will rotate family by given angle every time. ",
            "engine_metadata": "",
            "engine_version": "0.7.4.3090",
            "created": "2014-11-24T07:10:42.487Z",
            "full_dependency_versions": [ "2014.11.24" ],
            "full_dependency_ids": [
              {
                "_id": "53e99ce50e5572016a00018a",
                "name": "archi-lab.net"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2014.11.24"
          },
          {
            "_id": "54794e86b77c84600c000057",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/8278411e-37c9-4ecc-83f1-d1f40bda1ba5gregPkg280.zip",
            "contents": "Change Family Type - Changes family type of a family by passing in an Element and type id of the type we want to change it to. , Color Settings - This node creates color settings for the Analysis Visualization Framework. , Colored Surface Display Style - This node will generate a Colored Surface Display Style from inputs of points, values, and instance surface for analysis to be aplied to. Also, use color and legend settings (part of archi-lab package) to create style colors and visibility., Colored Surface Settings - This node creates settings for the colored surface display style of the Analysis Visualization Framework., Combine by Pattern - Combines two list based on a input pattern of true and false., Current Document - Retrieves Current Document, Delete Linked Model Keynote Tags - Deletes all Keynote Tags that are tagging elements in the linked model. if element in the linked model has a keynote assigned thus a keynote tag reads a proper value it will not be deleted. , Delete Unnamed Reference Planes - Does just what the name says. , Dispatch - Works exactly like the Dispatch component in Grasshopper. Input a list and a matching pattern of True/False to split list into two lists one containing all True arguments while other all False arguments. , Door Set Handing - Determines door set handing (whether its a left or right handed door). Input takes doors, and output will split them into two lists (right and left)., Duplicate Item Indices - Searches an input list for duplicate entries and lists their index numbers. Couple with Get From List to delete duplicates from a list., Element Ids - This node will query an element id that can be used with Revit nodes. Dynamo Element Id node returns integer value. , Fill Pattern - Get Fill Pattern by Name, Get All Keynote Tags - Selects all Keynote Tags instances in the model. , Get All Views - This node will query all views in the model and return them based on category, Get Design Options - Queries all of the design options currently in the project., Get Documents - Queries all linked Revit files and retrieves their Name, LinkInstance and Document properties., Get Text Note Type by Name - This node will select a text note type by name. , Get Worksets - Retrieves user worksets from specified document, GH Point to DY Point - Converts CSV Grasshopper export of points into a Dynamo point list. , Id to Element - Selects elements in a model from id input (ElementId, string, integer or GUID), Legend Settings - This node sets all settings for the Legend display with Analysis Visualization Framework of Revit. , Marker&Text Display Style - This node will take an input of Points and a matching input of values to create Analysis Display Style in Revit. Use Legend, Marker and Color Settings nodes to fully customize your display style. , Override Fill Pattern in View - Overrides fill pattern of any element in an active view to specified fill pattern and color, PolyCurve by Profile Family Type - It takes an input of a profile family type and extract curves from it converting them to polycurves and curve segments for use in Dynamo (sweeps)., Remap UV Domain - This node takes an input of a reference face and a list of UVs that get remapped into that face's UV Domain. The output is a list of UV Coordinates in that surface's domain. , Rotate Family - This node will rotate a family in Revit around a given axis by supplied angle (in radians). Please remember that every time you run your definition it will rotate family by given angle every time. , Schedules on Sheets - Queries all schedules and produces two lists: one with all schedules that are placed on sheets and one with schedules that are not placed on sheets., Slice String - Slices X number of leading or trailing characters from string (boolean true will slice from left while boolean set to false from right), Marker Settings - This node will generate AnalysisDisplayMarkerAndTextSettings to be used with a Marker Analysis Display Style. Inputs are: Marker Shape(Circle, Triangle, Rectangle), Marker Size, Show Text (Boolean), Rounding, TextDisplayMethod (Show All, Show None, Show Predefined). ",
            "engine_metadata": "",
            "engine_version": "0.7.4.3090",
            "created": "2014-11-29T04:41:42.257Z",
            "full_dependency_versions": [ "2014.11.28" ],
            "full_dependency_ids": [
              {
                "_id": "53e99ce50e5572016a00018a",
                "name": "archi-lab.net"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2014.11.28"
          },
          {
            "_id": "54c04022dcee4dfd2600007a",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/9d895ef6-0fca-48f2-b15c-9dbf4ef393a4gregPkg138.zip",
            "contents": "Change Family Type - Changes family type of a family by passing in an Element and type id of the type we want to change it to. , Color Settings - This node creates color settings for the Analysis Visualization Framework. , Colored Surface Display Style - This node will generate a Colored Surface Display Style from inputs of points, values, and instance surface for analysis to be aplied to. Also, use color and legend settings (part of archi-lab package) to create style colors and visibility., Colored Surface Settings - This node creates settings for the colored surface display style of the Analysis Visualization Framework., Combine by Pattern - Combines two list based on a input pattern of true and false., Current Document - Retrieves Current Document, Delete Linked Model Keynote Tags - Deletes all Keynote Tags that are tagging elements in the linked model. if element in the linked model has a keynote assigned thus a keynote tag reads a proper value it will not be deleted. , Delete Unnamed Reference Planes - Does just what the name says. , Dispatch - Works exactly like the Dispatch component in Grasshopper. Input a list and a matching pattern of True/False to split list into two lists one containing all True arguments while other all False arguments. , Door Set Handing - Determines door set handing (whether its a left or right handed door). Input takes doors, and output will split them into two lists (right and left)., Duplicate Item Indices - Searches an input list for duplicate entries and lists their index numbers. Couple with Get From List to delete duplicates from a list., Element Ids - This node will query an element id that can be used with Revit nodes. Dynamo Element Id node returns integer value. , Fill Pattern - Get Fill Pattern by Name, Get All Keynote Tags - Selects all Keynote Tags instances in the model. , Get All Views - This node will query all views in the model and return them based on category, Get Design Options - Queries all of the design options currently in the project., Get Documents - Queries all linked Revit files and retrieves their Name, LinkInstance and Document properties., Get Text Note Type by Name - This node will select a text note type by name. , Get Worksets - Retrieves user worksets from specified document, GH Point to DY Point - Converts CSV Grasshopper export of points into a Dynamo point list. , Id to Element - Selects elements in a model from id input (ElementId, string, integer or GUID), Legend Settings - This node sets all settings for the Legend display with Analysis Visualization Framework of Revit. , Marker Settings - This node will generate AnalysisDisplayMarkerAndTextSettings to be used with a Marker Analysis Display Style. Inputs are: Marker Shape(Circle, Triangle, Rectangle), Marker Size, Show Text (Boolean), Rounding, TextDisplayMethod (Show All, Show None, Show Predefined). , Marker&Text Display Style - This node will take an input of Points and a matching input of values to create Analysis Display Style in Revit. Use Legend, Marker and Color Settings nodes to fully customize your display style. , Override Fill Pattern in View - Overrides fill pattern of any element in an active view to specified fill pattern and color, PolyCurve by Profile Family Type - It takes an input of a profile family type and extract curves from it converting them to polycurves and curve segments for use in Dynamo (sweeps)., Remap UV Domain - This node takes an input of a reference face and a list of UVs that get remapped into that face's UV Domain. The output is a list of UV Coordinates in that surface's domain. , Rotate Family - This node will rotate a family in Revit around a given axis by supplied angle (in radians). Please remember that every time you run your definition it will rotate family by given angle every time. , Schedules on Sheets - Queries all schedules and produces two lists: one with all schedules that are placed on sheets and one with schedules that are not placed on sheets., Slice String - Slices X number of leading or trailing characters from string (boolean true will slice from left while boolean set to false from right), Get Line Style by Name - This node will return a line style object by its name. Line styles can be either Drafting or Model Line Property. ",
            "engine_metadata": "",
            "engine_version": "0.7.5.3566",
            "created": "2015-01-22T00:11:14.057Z",
            "full_dependency_versions": [ "2015.1.21" ],
            "full_dependency_ids": [
              {
                "_id": "53e99ce50e5572016a00018a",
                "name": "archi-lab.net"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2015.1.21"
          },
          {
            "_id": "54c07aa7dcee4dfd2600007b",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/71b99d74-bf87-4d1e-9468-03fb9d0ab8eagregPkg382.zip",
            "contents": "Change Family Type - Changes family type of a family by passing in an Element and type id of the type we want to change it to. , Color Settings - This node creates color settings for the Analysis Visualization Framework. , Colored Surface Display Style - This node will generate a Colored Surface Display Style from inputs of points, values, and instance surface for analysis to be aplied to. Also, use color and legend settings (part of archi-lab package) to create style colors and visibility., Colored Surface Settings - This node creates settings for the colored surface display style of the Analysis Visualization Framework., Combine by Pattern - Combines two list based on a input pattern of true and false., Current Document - Retrieves Current Document, Delete Linked Model Keynote Tags - Deletes all Keynote Tags that are tagging elements in the linked model. if element in the linked model has a keynote assigned thus a keynote tag reads a proper value it will not be deleted. , Delete Unnamed Reference Planes - Does just what the name says. , Dispatch - Works exactly like the Dispatch component in Grasshopper. Input a list and a matching pattern of True/False to split list into two lists one containing all True arguments while other all False arguments. , Door Set Handing - Determines door set handing (whether its a left or right handed door). Input takes doors, and output will split them into two lists (right and left)., Duplicate Item Indices - Searches an input list for duplicate entries and lists their index numbers. Couple with Get From List to delete duplicates from a list., Element Ids - This node will query an element id that can be used with Revit nodes. Dynamo Element Id node returns integer value. , Fill Pattern - Get Fill Pattern by Name, Get All Keynote Tags - Selects all Keynote Tags instances in the model. , Get All Views - This node will query all views in the model and return them based on category, Get Design Options - Queries all of the design options currently in the project., Get Documents - Queries all linked Revit files and retrieves their Name, LinkInstance and Document properties., Get Line Style by Name - This node will return a line style object by its name. Line styles can be either Drafting or Model Line Property. , Get Text Note Type by Name - This node will select a text note type by name. , Get Worksets - Retrieves user worksets from specified document, GH Point to DY Point - Converts CSV Grasshopper export of points into a Dynamo point list. , Id to Element - Selects elements in a model from id input (ElementId, string, integer or GUID), Legend Settings - This node sets all settings for the Legend display with Analysis Visualization Framework of Revit. , Marker Settings - This node will generate AnalysisDisplayMarkerAndTextSettings to be used with a Marker Analysis Display Style. Inputs are: Marker Shape(Circle, Triangle, Rectangle), Marker Size, Show Text (Boolean), Rounding, TextDisplayMethod (Show All, Show None, Show Predefined). , Marker&Text Display Style - This node will take an input of Points and a matching input of values to create Analysis Display Style in Revit. Use Legend, Marker and Color Settings nodes to fully customize your display style. , Override Fill Pattern in View - Overrides fill pattern of any element in an active view to specified fill pattern and color, PolyCurve by Profile Family Type - It takes an input of a profile family type and extract curves from it converting them to polycurves and curve segments for use in Dynamo (sweeps)., Remap UV Domain - This node takes an input of a reference face and a list of UVs that get remapped into that face's UV Domain. The output is a list of UV Coordinates in that surface's domain. , Rotate Family - This node will rotate a family in Revit around a given axis by supplied angle (in radians). Please remember that every time you run your definition it will rotate family by given angle every time. , Schedules on Sheets - Queries all schedules and produces two lists: one with all schedules that are placed on sheets and one with schedules that are not placed on sheets., Slice String - Slices X number of leading or trailing characters from string (boolean true will slice from left while boolean set to false from right), Group Curves - This node will take any input of flat list of curves and group them into sublists containing \"joinable\" curves that is continous curves. They might form closed curves or open curves. Use PolyCurve.ByJoinedCurves to convert output groups of curves into single PolyCurves",
            "engine_metadata": "",
            "engine_version": "0.7.5.3566",
            "created": "2015-01-22T04:20:55.192Z",
            "full_dependency_versions": [ "2015.1.22" ],
            "full_dependency_ids": [
              {
                "_id": "53e99ce50e5572016a00018a",
                "name": "archi-lab.net"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2015.1.22"
          },
          {
            "_id": "54c5c3ccdcee4dfd26000089",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/526c290d-ee91-41b6-8eb9-51cc66812b8bgregPkg947.zip",
            "contents": "Change Family Type - Changes family type of a family by passing in an Element and type id of the type we want to change it to. , Color Settings - This node creates color settings for the Analysis Visualization Framework. , Colored Surface Display Style - This node will generate a Colored Surface Display Style from inputs of points, values, and instance surface for analysis to be aplied to. Also, use color and legend settings (part of archi-lab package) to create style colors and visibility., Colored Surface Settings - This node creates settings for the colored surface display style of the Analysis Visualization Framework., Combine by Pattern - Combines two list based on a input pattern of true and false., Current Document - Retrieves Current Document, Delete Linked Model Keynote Tags - Deletes all Keynote Tags that are tagging elements in the linked model. if element in the linked model has a keynote assigned thus a keynote tag reads a proper value it will not be deleted. , Delete Unnamed Reference Planes - Does just what the name says. , Dispatch - Works exactly like the Dispatch component in Grasshopper. Input a list and a matching pattern of True/False to split list into two lists one containing all True arguments while other all False arguments. , Door Set Handing - Determines door set handing (whether its a left or right handed door). Input takes doors, and output will split them into two lists (right and left)., Duplicate Item Indices - Searches an input list for duplicate entries and lists their index numbers. Couple with Get From List to delete duplicates from a list., Element Ids - This node will query an element id that can be used with Revit nodes. Dynamo Element Id node returns integer value. , Fill Pattern - Get Fill Pattern by Name, Get All Keynote Tags - Selects all Keynote Tags instances in the model. , Get All Views - This node will query all views in the model and return them based on category, Get Design Options - Queries all of the design options currently in the project., Get Documents - Queries all linked Revit files and retrieves their Name, LinkInstance and Document properties., Get Line Style by Name - This node will return a line style object by its name. Line styles can be either Drafting or Model Line Property. , Get Text Note Type by Name - This node will select a text note type by name. , Get Worksets - Retrieves user worksets from specified document, GH Point to DY Point - Converts CSV Grasshopper export of points into a Dynamo point list. , Group Curves - This node will take any input of flat list of curves and group them into sublists containing \"joinable\" curves that is continous curves. They might form closed curves or open curves. Use PolyCurve.ByJoinedCurves to convert output groups of curves into single PolyCurves, Id to Element - Selects elements in a model from id input (ElementId, string, integer or GUID), Legend Settings - This node sets all settings for the Legend display with Analysis Visualization Framework of Revit. , Marker Settings - This node will generate AnalysisDisplayMarkerAndTextSettings to be used with a Marker Analysis Display Style. Inputs are: Marker Shape(Circle, Triangle, Rectangle), Marker Size, Show Text (Boolean), Rounding, TextDisplayMethod (Show All, Show None, Show Predefined). , Marker&Text Display Style - This node will take an input of Points and a matching input of values to create Analysis Display Style in Revit. Use Legend, Marker and Color Settings nodes to fully customize your display style. , Override Fill Pattern in View - Overrides fill pattern of any element in an active view to specified fill pattern and color, PolyCurve by Profile Family Type - It takes an input of a profile family type and extract curves from it converting them to polycurves and curve segments for use in Dynamo (sweeps)., Remap UV Domain - This node takes an input of a reference face and a list of UVs that get remapped into that face's UV Domain. The output is a list of UV Coordinates in that surface's domain. , Rotate Family - This node will rotate a family in Revit around a given axis by supplied angle (in radians). Please remember that every time you run your definition it will rotate family by given angle every time. , Schedules on Sheets - Queries all schedules and produces two lists: one with all schedules that are placed on sheets and one with schedules that are not placed on sheets., Slice String - Slices X number of leading or trailing characters from string (boolean true will slice from left while boolean set to false from right)",
            "engine_metadata": "",
            "engine_version": "0.7.5.3566",
            "created": "2015-01-26T04:34:20.526Z",
            "full_dependency_versions": [ "2015.1.25" ],
            "full_dependency_ids": [
              {
                "_id": "53e99ce50e5572016a00018a",
                "name": "archi-lab.net"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2015.1.25"
          },
          {
            "_id": "54c81d87dcee4dfd26000099",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/f3cb0db2-b6ba-4437-9430-c2ea97dfffd3gregPkg897.zip",
            "contents": "Change Family Type - Changes family type of a family by passing in an Element and type id of the type we want to change it to. , Color Settings - This node creates color settings for the Analysis Visualization Framework. , Colored Surface Display Style - This node will generate a Colored Surface Display Style from inputs of points, values, and instance surface for analysis to be aplied to. Also, use color and legend settings (part of archi-lab package) to create style colors and visibility., Colored Surface Settings - This node creates settings for the colored surface display style of the Analysis Visualization Framework., Combine by Pattern - Combines two list based on a input pattern of true and false., Current Document - Retrieves Current Document, Delete Linked Model Keynote Tags - Deletes all Keynote Tags that are tagging elements in the linked model. if element in the linked model has a keynote assigned thus a keynote tag reads a proper value it will not be deleted. , Delete Unnamed Reference Planes - Does just what the name says. , Dispatch - Works exactly like the Dispatch component in Grasshopper. Input a list and a matching pattern of True/False to split list into two lists one containing all True arguments while other all False arguments. , Door Set Handing - Determines door set handing (whether its a left or right handed door). Input takes doors, and output will split them into two lists (right and left)., Duplicate Item Indices - Searches an input list for duplicate entries and lists their index numbers. Couple with Get From List to delete duplicates from a list., Element Ids - This node will query an element id that can be used with Revit nodes. Dynamo Element Id node returns integer value. , Fill Pattern - Get Fill Pattern by Name, Get All Keynote Tags - Selects all Keynote Tags instances in the model. , Get All Views - This node will query all views in the model and return them based on category, Get Design Options - Queries all of the design options currently in the project., Get Documents - Queries all linked Revit files and retrieves their Name, LinkInstance and Document properties., Get Line Style by Name - This node will return a line style object by its name. Line styles can be either Drafting or Model Line Property. , Get Text Note Type by Name - This node will select a text note type by name. , Get Worksets - Retrieves user worksets from specified document, GH Point to DY Point - Converts CSV Grasshopper export of points into a Dynamo point list. , Group Curves - This node will take any input of flat list of curves and group them into sublists containing \"joinable\" curves that is continous curves. They might form closed curves or open curves. Use PolyCurve.ByJoinedCurves to convert output groups of curves into single PolyCurves, Id to Element - Selects elements in a model from id input (ElementId, string, integer or GUID), Legend Settings - This node sets all settings for the Legend display with Analysis Visualization Framework of Revit. , Marker Settings - This node will generate AnalysisDisplayMarkerAndTextSettings to be used with a Marker Analysis Display Style. Inputs are: Marker Shape(Circle, Triangle, Rectangle), Marker Size, Show Text (Boolean), Rounding, TextDisplayMethod (Show All, Show None, Show Predefined). , Marker&Text Display Style - This node will take an input of Points and a matching input of values to create Analysis Display Style in Revit. Use Legend, Marker and Color Settings nodes to fully customize your display style. , Override Fill Pattern in View - Overrides fill pattern of any element in an active view to specified fill pattern and color, PolyCurve by Profile Family Type - It takes an input of a profile family type and extract curves from it converting them to polycurves and curve segments for use in Dynamo (sweeps)., Remap UV Domain - This node takes an input of a reference face and a list of UVs that get remapped into that face's UV Domain. The output is a list of UV Coordinates in that surface's domain. , Rotate Family - This node will rotate a family in Revit around a given axis by supplied angle (in radians). Please remember that every time you run your definition it will rotate family by given angle every time. , Schedules on Sheets - Queries all schedules and produces two lists: one with all schedules that are placed on sheets and one with schedules that are not placed on sheets., Slice String - Slices X number of leading or trailing characters from string (boolean true will slice from left while boolean set to false from right), Apply View Template - This node will allow you to apply a view template to a set of views., Cell Style Settings - This node will generate a Cell Style Settings that can be used to override cell properties. , Delete Elements - This node will delete elements from Revit project., Get All Detail Groups - This node will retrieve all instances of Detail Groups in the model., Get Unplaced Groups - This node will retrieve all unplaced groups in the model., Key Schedule - This node will take a key schedule, data and a list of parameters and populate it with infomation from data parameter. Visit www.archi-lab.net for more information on how to prep this node for take off. , New Section Box View By Elements - This node will create new section box around specified elements and apply it to a new 3D View with a specified name. Section box will be offset from the elements by a supplied offset values. , Schedule Appearance - This node allows you to control the appearance of the schedule. For now it supports only title, header and body text type. , Schedule Formatting - This node will allow you to control schedule formatiing options like column width, whether a column is hidden, column heading etc. , Schedule Sorting Grouping - This node will allow you to specify sorting/grouping parameters in schedule as well parameters like sorting order, whether its a footer or header. Visit archi-lab.net for more information. , Schedule Title Appearance - This node will override the appearance of the title. ",
            "engine_metadata": "",
            "engine_version": "0.7.5.3566",
            "created": "2015-01-27T23:21:43.392Z",
            "full_dependency_versions": [ "2015.1.27" ],
            "full_dependency_ids": [
              {
                "_id": "53e99ce50e5572016a00018a",
                "name": "archi-lab.net"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2015.1.27"
          },
          {
            "_id": "54cafba8dcee4dfd260000a2",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/eb568357-a6f5-4d2e-80a9-25c3d4ddc6fbgregPkg576.zip",
            "contents": "Apply View Template - This node will allow you to apply a view template to a set of views., Cell Style Settings - This node will generate a Cell Style Settings that can be used to override cell properties. , Change Family Type - Changes family type of a family by passing in an Element and type id of the type we want to change it to. , Color Settings - This node creates color settings for the Analysis Visualization Framework. , Colored Surface Display Style - This node will generate a Colored Surface Display Style from inputs of points, values, and instance surface for analysis to be aplied to. Also, use color and legend settings (part of archi-lab package) to create style colors and visibility., Colored Surface Settings - This node creates settings for the colored surface display style of the Analysis Visualization Framework., Combine by Pattern - Combines two list based on a input pattern of true and false., Current Document - Retrieves Current Document, Delete Elements - This node will delete elements from Revit project., Delete Linked Model Keynote Tags - Deletes all Keynote Tags that are tagging elements in the linked model. if element in the linked model has a keynote assigned thus a keynote tag reads a proper value it will not be deleted. , Delete Unnamed Reference Planes - Does just what the name says. , Dispatch - Works exactly like the Dispatch component in Grasshopper. Input a list and a matching pattern of True/False to split list into two lists one containing all True arguments while other all False arguments. , Door Set Handing - Determines door set handing (whether its a left or right handed door). Input takes doors, and output will split them into two lists (right and left)., Duplicate Item Indices - Searches an input list for duplicate entries and lists their index numbers. Couple with Get From List to delete duplicates from a list., Element Ids - This node will query an element id that can be used with Revit nodes. Dynamo Element Id node returns integer value. , Fill Pattern - Get Fill Pattern by Name, Get All Detail Groups - This node will retrieve all instances of Detail Groups in the model., Get All Keynote Tags - Selects all Keynote Tags instances in the model. , Get All Views - This node will query all views in the model and return them based on category, Get Design Options - Queries all of the design options currently in the project., Get Documents - Queries all linked Revit files and retrieves their Name, LinkInstance and Document properties., Get Line Style by Name - This node will return a line style object by its name. Line styles can be either Drafting or Model Line Property. , Get Text Note Type by Name - This node will select a text note type by name. , Get Unplaced Groups - This node will retrieve all unplaced groups in the model., Get Worksets - Retrieves user worksets from specified document, GH Point to DY Point - Converts CSV Grasshopper export of points into a Dynamo point list. , Group Curves - This node will take any input of flat list of curves and group them into sublists containing \"joinable\" curves that is continous curves. They might form closed curves or open curves. Use PolyCurve.ByJoinedCurves to convert output groups of curves into single PolyCurves, Id to Element - Selects elements in a model from id input (ElementId, string, integer or GUID), Key Schedule - This node will take a key schedule, data and a list of parameters and populate it with infomation from data parameter. Visit www.archi-lab.net for more information on how to prep this node for take off. , Legend Settings - This node sets all settings for the Legend display with Analysis Visualization Framework of Revit. , Marker Settings - This node will generate AnalysisDisplayMarkerAndTextSettings to be used with a Marker Analysis Display Style. Inputs are: Marker Shape(Circle, Triangle, Rectangle), Marker Size, Show Text (Boolean), Rounding, TextDisplayMethod (Show All, Show None, Show Predefined). , Marker&Text Display Style - This node will take an input of Points and a matching input of values to create Analysis Display Style in Revit. Use Legend, Marker and Color Settings nodes to fully customize your display style. , New Section Box View By Elements - This node will create new section box around specified elements and apply it to a new 3D View with a specified name. Section box will be offset from the elements by a supplied offset values. , Override Fill Pattern in View - Overrides fill pattern of any element in an active view to specified fill pattern and color, PolyCurve by Profile Family Type - It takes an input of a profile family type and extract curves from it converting them to polycurves and curve segments for use in Dynamo (sweeps)., Remap UV Domain - This node takes an input of a reference face and a list of UVs that get remapped into that face's UV Domain. The output is a list of UV Coordinates in that surface's domain. , Rotate Family - This node will rotate a family in Revit around a given axis by supplied angle (in radians). Please remember that every time you run your definition it will rotate family by given angle every time. , Schedule Appearance - This node allows you to control the appearance of the schedule. For now it supports only title, header and body text type. , Schedule Formatting - This node will allow you to control schedule formatiing options like column width, whether a column is hidden, column heading etc. , Schedule Sorting Grouping - This node will allow you to specify sorting/grouping parameters in schedule as well parameters like sorting order, whether its a footer or header. Visit archi-lab.net for more information. , Schedule Title Appearance - This node will override the appearance of the title. , Schedules on Sheets - Queries all schedules and produces two lists: one with all schedules that are placed on sheets and one with schedules that are not placed on sheets., Slice String - Slices X number of leading or trailing characters from string (boolean true will slice from left while boolean set to false from right)",
            "engine_metadata": "",
            "engine_version": "0.7.5.3566",
            "created": "2015-01-30T03:34:00.679Z",
            "full_dependency_versions": [ "2015.1.29" ],
            "full_dependency_ids": [
              {
                "_id": "53e99ce50e5572016a00018a",
                "name": "archi-lab.net"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2015.1.29"
          },
          {
            "_id": "54d7c1cddcee4dfd260000d1",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/6d61366f-c309-4e79-9106-8b1828184dc9gregPkg456.zip",
            "contents": "Apply View Template - This node will allow you to apply a view template to a set of views., Cell Style Settings - This node will generate a Cell Style Settings that can be used to override cell properties. , Change Family Type - Changes family type of a family by passing in an Element and type id of the type we want to change it to. , Color Settings - This node creates color settings for the Analysis Visualization Framework. , Colored Surface Display Style - This node will generate a Colored Surface Display Style from inputs of points, values, and instance surface for analysis to be aplied to. Also, use color and legend settings (part of archi-lab package) to create style colors and visibility., Colored Surface Settings - This node creates settings for the colored surface display style of the Analysis Visualization Framework., Combine by Pattern - Combines two list based on a input pattern of true and false., Current Document - Retrieves Current Document, Delete Elements - This node will delete elements from Revit project., Delete Linked Model Keynote Tags - Deletes all Keynote Tags that are tagging elements in the linked model. if element in the linked model has a keynote assigned thus a keynote tag reads a proper value it will not be deleted. , Delete Unnamed Reference Planes - Does just what the name says. , Dispatch - Works exactly like the Dispatch component in Grasshopper. Input a list and a matching pattern of True/False to split list into two lists one containing all True arguments while other all False arguments. , Door Set Handing - Determines door set handing (whether its a left or right handed door). Input takes doors, and output will split them into two lists (right and left)., Duplicate Item Indices - Searches an input list for duplicate entries and lists their index numbers. Couple with Get From List to delete duplicates from a list., Element Ids - This node will query an element id that can be used with Revit nodes. Dynamo Element Id node returns integer value. , Fill Pattern - Get Fill Pattern by Name, Get All Detail Groups - This node will retrieve all instances of Detail Groups in the model., Get All Keynote Tags - Selects all Keynote Tags instances in the model. , Get All Views - This node will query all views in the model and return them based on category, Get Design Options - Queries all of the design options currently in the project., Get Documents - Queries all linked Revit files and retrieves their Name, LinkInstance and Document properties., Get Line Style by Name - This node will return a line style object by its name. Line styles can be either Drafting or Model Line Property. , Get Text Note Type by Name - This node will select a text note type by name. , Get Unplaced Groups - This node will retrieve all unplaced groups in the model., Get Worksets - Retrieves user worksets from specified document, GH Point to DY Point - Converts CSV Grasshopper export of points into a Dynamo point list. , Group Curves - This node will take any input of flat list of curves and group them into sublists containing \"joinable\" curves that is continous curves. They might form closed curves or open curves. Use PolyCurve.ByJoinedCurves to convert output groups of curves into single PolyCurves, Id to Element - Selects elements in a model from id input (ElementId, string, integer or GUID), Key Schedule - This node will take a key schedule, data and a list of parameters and populate it with infomation from data parameter. Visit www.archi-lab.net for more information on how to prep this node for take off. , Legend Settings - This node sets all settings for the Legend display with Analysis Visualization Framework of Revit. , Marker Settings - This node will generate AnalysisDisplayMarkerAndTextSettings to be used with a Marker Analysis Display Style. Inputs are: Marker Shape(Circle, Triangle, Rectangle), Marker Size, Show Text (Boolean), Rounding, TextDisplayMethod (Show All, Show None, Show Predefined). , Marker&Text Display Style - This node will take an input of Points and a matching input of values to create Analysis Display Style in Revit. Use Legend, Marker and Color Settings nodes to fully customize your display style. , New Section Box View By Elements - This node will create new section box around specified elements and apply it to a new 3D View with a specified name. Section box will be offset from the elements by a supplied offset values. , Override Fill Pattern in View - Overrides fill pattern of any element in an active view to specified fill pattern and color, PolyCurve by Profile Family Type - It takes an input of a profile family type and extract curves from it converting them to polycurves and curve segments for use in Dynamo (sweeps)., Remap UV Domain - This node takes an input of a reference face and a list of UVs that get remapped into that face's UV Domain. The output is a list of UV Coordinates in that surface's domain. , Rotate Family - This node will rotate a family in Revit around a given axis by supplied angle (in radians). Please remember that every time you run your definition it will rotate family by given angle every time. , Schedule Appearance - This node allows you to control the appearance of the schedule. For now it supports only title, header and body text type. , Schedule Formatting - This node will allow you to control schedule formatiing options like column width, whether a column is hidden, column heading etc. , Schedule Sorting Grouping - This node will allow you to specify sorting/grouping parameters in schedule as well parameters like sorting order, whether its a footer or header. Visit archi-lab.net for more information. , Schedule Title Appearance - This node will override the appearance of the title. , Schedules on Sheets - Queries all schedules and produces two lists: one with all schedules that are placed on sheets and one with schedules that are not placed on sheets., Slice String - Slices X number of leading or trailing characters from string (boolean true will slice from left while boolean set to false from right), Filled Region Area - This node will query an area from the filled region, Filled Region Boundary Curves - This node will get the boundary curves for a filled region., Get Filled Regions - This node will query up all Filled Regions in the project as well as those in the active view only. ",
            "engine_metadata": "",
            "engine_version": "0.7.5.3566",
            "created": "2015-02-08T20:06:37.469Z",
            "full_dependency_versions": [ "2015.2.8" ],
            "full_dependency_ids": [
              {
                "_id": "53e99ce50e5572016a00018a",
                "name": "archi-lab.net"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2015.2.8"
          },
          {
            "_id": "54d7c829dcee4dfd260000d2",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/35fd5159-c02c-4a09-9494-0053462ed219gregPkg356.zip",
            "contents": "Apply View Template - This node will allow you to apply a view template to a set of views., Cell Style Settings - This node will generate a Cell Style Settings that can be used to override cell properties. , Change Family Type - Changes family type of a family by passing in an Element and type id of the type we want to change it to. , Color Settings - This node creates color settings for the Analysis Visualization Framework. , Colored Surface Display Style - This node will generate a Colored Surface Display Style from inputs of points, values, and instance surface for analysis to be aplied to. Also, use color and legend settings (part of archi-lab package) to create style colors and visibility., Colored Surface Settings - This node creates settings for the colored surface display style of the Analysis Visualization Framework., Combine by Pattern - Combines two list based on a input pattern of true and false., Current Document - Retrieves Current Document, Delete Elements - This node will delete elements from Revit project., Delete Linked Model Keynote Tags - Deletes all Keynote Tags that are tagging elements in the linked model. if element in the linked model has a keynote assigned thus a keynote tag reads a proper value it will not be deleted. , Delete Unnamed Reference Planes - Does just what the name says. , Dispatch - Works exactly like the Dispatch component in Grasshopper. Input a list and a matching pattern of True/False to split list into two lists one containing all True arguments while other all False arguments. , Door Set Handing - Determines door set handing (whether its a left or right handed door). Input takes doors, and output will split them into two lists (right and left)., Duplicate Item Indices - Searches an input list for duplicate entries and lists their index numbers. Couple with Get From List to delete duplicates from a list., Element Ids - This node will query an element id that can be used with Revit nodes. Dynamo Element Id node returns integer value. , Fill Pattern - Get Fill Pattern by Name, Filled Region Area - This node will query an area from the filled region, Filled Region Boundary Curves - This node will get the boundary curves for a filled region., Get All Detail Groups - This node will retrieve all instances of Detail Groups in the model., Get All Keynote Tags - Selects all Keynote Tags instances in the model. , Get All Views - This node will query all views in the model and return them based on category, Get Design Options - Queries all of the design options currently in the project., Get Documents - Queries all linked Revit files and retrieves their Name, LinkInstance and Document properties., Get Filled Regions - This node will query up all Filled Regions in the project as well as those in the active view only. , Get Line Style by Name - This node will return a line style object by its name. Line styles can be either Drafting or Model Line Property. , Get Text Note Type by Name - This node will select a text note type by name. , Get Unplaced Groups - This node will retrieve all unplaced groups in the model., Get Worksets - Retrieves user worksets from specified document, GH Point to DY Point - Converts CSV Grasshopper export of points into a Dynamo point list. , Group Curves - This node will take any input of flat list of curves and group them into sublists containing \"joinable\" curves that is continous curves. They might form closed curves or open curves. Use PolyCurve.ByJoinedCurves to convert output groups of curves into single PolyCurves, Id to Element - Selects elements in a model from id input (ElementId, string, integer or GUID), Key Schedule - This node will take a key schedule, data and a list of parameters and populate it with infomation from data parameter. Visit www.archi-lab.net for more information on how to prep this node for take off. , Legend Settings - This node sets all settings for the Legend display with Analysis Visualization Framework of Revit. , Marker Settings - This node will generate AnalysisDisplayMarkerAndTextSettings to be used with a Marker Analysis Display Style. Inputs are: Marker Shape(Circle, Triangle, Rectangle), Marker Size, Show Text (Boolean), Rounding, TextDisplayMethod (Show All, Show None, Show Predefined). , Marker&Text Display Style - This node will take an input of Points and a matching input of values to create Analysis Display Style in Revit. Use Legend, Marker and Color Settings nodes to fully customize your display style. , New Section Box View By Elements - This node will create new section box around specified elements and apply it to a new 3D View with a specified name. Section box will be offset from the elements by a supplied offset values. , Override Fill Pattern in View - Overrides fill pattern of any element in an active view to specified fill pattern and color, PolyCurve by Profile Family Type - It takes an input of a profile family type and extract curves from it converting them to polycurves and curve segments for use in Dynamo (sweeps)., Remap UV Domain - This node takes an input of a reference face and a list of UVs that get remapped into that face's UV Domain. The output is a list of UV Coordinates in that surface's domain. , Rotate Family - This node will rotate a family in Revit around a given axis by supplied angle (in radians). Please remember that every time you run your definition it will rotate family by given angle every time. , Schedule Appearance - This node allows you to control the appearance of the schedule. For now it supports only title, header and body text type. , Schedule Formatting - This node will allow you to control schedule formatiing options like column width, whether a column is hidden, column heading etc. , Schedule Sorting Grouping - This node will allow you to specify sorting/grouping parameters in schedule as well parameters like sorting order, whether its a footer or header. Visit archi-lab.net for more information. , Schedule Title Appearance - This node will override the appearance of the title. , Schedules on Sheets - Queries all schedules and produces two lists: one with all schedules that are placed on sheets and one with schedules that are not placed on sheets., Slice String - Slices X number of leading or trailing characters from string (boolean true will slice from left while boolean set to false from right), Get Rooms by Level - Filters Rooms by level.",
            "engine_metadata": "",
            "engine_version": "0.7.5.3566",
            "created": "2015-02-08T20:33:45.405Z",
            "full_dependency_versions": [ "2015.2.9" ],
            "full_dependency_ids": [
              {
                "_id": "53e99ce50e5572016a00018a",
                "name": "archi-lab.net"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2015.2.9"
          },
          {
            "_id": "54d7c93fdcee4dfd260000d3",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/611aa2c5-0890-4a3b-b801-098ba3d09ec8gregPkg810.zip",
            "contents": "Apply View Template - This node will allow you to apply a view template to a set of views., Cell Style Settings - This node will generate a Cell Style Settings that can be used to override cell properties. , Change Family Type - Changes family type of a family by passing in an Element and type id of the type we want to change it to. , Color Settings - This node creates color settings for the Analysis Visualization Framework. , Colored Surface Display Style - This node will generate a Colored Surface Display Style from inputs of points, values, and instance surface for analysis to be aplied to. Also, use color and legend settings (part of archi-lab package) to create style colors and visibility., Colored Surface Settings - This node creates settings for the colored surface display style of the Analysis Visualization Framework., Combine by Pattern - Combines two list based on a input pattern of true and false., Current Document - Retrieves Current Document, Delete Elements - This node will delete elements from Revit project., Delete Linked Model Keynote Tags - Deletes all Keynote Tags that are tagging elements in the linked model. if element in the linked model has a keynote assigned thus a keynote tag reads a proper value it will not be deleted. , Delete Unnamed Reference Planes - Does just what the name says. , Dispatch - Works exactly like the Dispatch component in Grasshopper. Input a list and a matching pattern of True/False to split list into two lists one containing all True arguments while other all False arguments. , Door Set Handing - Determines door set handing (whether its a left or right handed door). Input takes doors, and output will split them into two lists (right and left)., Duplicate Item Indices - Searches an input list for duplicate entries and lists their index numbers. Couple with Get From List to delete duplicates from a list., Element Ids - This node will query an element id that can be used with Revit nodes. Dynamo Element Id node returns integer value. , Fill Pattern - Get Fill Pattern by Name, Filled Region Area - This node will query an area from the filled region, Filled Region Boundary Curves - This node will get the boundary curves for a filled region., Get All Detail Groups - This node will retrieve all instances of Detail Groups in the model., Get All Keynote Tags - Selects all Keynote Tags instances in the model. , Get All Views - This node will query all views in the model and return them based on category, Get Design Options - Queries all of the design options currently in the project., Get Documents - Queries all linked Revit files and retrieves their Name, LinkInstance and Document properties., Get Filled Regions - This node will query up all Filled Regions in the project as well as those in the active view only. , Get Line Style by Name - This node will return a line style object by its name. Line styles can be either Drafting or Model Line Property. , Get Rooms by Level - Filters Rooms by level., Get Text Note Type by Name - This node will select a text note type by name. , Get Unplaced Groups - This node will retrieve all unplaced groups in the model., Get Worksets - Retrieves user worksets from specified document, GH Point to DY Point - Converts CSV Grasshopper export of points into a Dynamo point list. , Group Curves - This node will take any input of flat list of curves and group them into sublists containing \"joinable\" curves that is continous curves. They might form closed curves or open curves. Use PolyCurve.ByJoinedCurves to convert output groups of curves into single PolyCurves, Id to Element - Selects elements in a model from id input (ElementId, string, integer or GUID), Key Schedule - This node will take a key schedule, data and a list of parameters and populate it with infomation from data parameter. Visit www.archi-lab.net for more information on how to prep this node for take off. , Legend Settings - This node sets all settings for the Legend display with Analysis Visualization Framework of Revit. , Marker Settings - This node will generate AnalysisDisplayMarkerAndTextSettings to be used with a Marker Analysis Display Style. Inputs are: Marker Shape(Circle, Triangle, Rectangle), Marker Size, Show Text (Boolean), Rounding, TextDisplayMethod (Show All, Show None, Show Predefined). , Marker&Text Display Style - This node will take an input of Points and a matching input of values to create Analysis Display Style in Revit. Use Legend, Marker and Color Settings nodes to fully customize your display style. , New Section Box View By Elements - This node will create new section box around specified elements and apply it to a new 3D View with a specified name. Section box will be offset from the elements by a supplied offset values. , Override Fill Pattern in View - Overrides fill pattern of any element in an active view to specified fill pattern and color, PolyCurve by Profile Family Type - It takes an input of a profile family type and extract curves from it converting them to polycurves and curve segments for use in Dynamo (sweeps)., Remap UV Domain - This node takes an input of a reference face and a list of UVs that get remapped into that face's UV Domain. The output is a list of UV Coordinates in that surface's domain. , Rotate Family - This node will rotate a family in Revit around a given axis by supplied angle (in radians). Please remember that every time you run your definition it will rotate family by given angle every time. , Schedule Appearance - This node allows you to control the appearance of the schedule. For now it supports only title, header and body text type. , Schedule Formatting - This node will allow you to control schedule formatiing options like column width, whether a column is hidden, column heading etc. , Schedule Sorting Grouping - This node will allow you to specify sorting/grouping parameters in schedule as well parameters like sorting order, whether its a footer or header. Visit archi-lab.net for more information. , Schedule Title Appearance - This node will override the appearance of the title. , Schedules on Sheets - Queries all schedules and produces two lists: one with all schedules that are placed on sheets and one with schedules that are not placed on sheets., Slice String - Slices X number of leading or trailing characters from string (boolean true will slice from left while boolean set to false from right), Select Model Lines by Style - This node will select all model lines in the revit project by a line style name. ",
            "engine_metadata": "",
            "engine_version": "0.7.5.3566",
            "created": "2015-02-08T20:38:23.531Z",
            "full_dependency_versions": [ "2015.2.10" ],
            "full_dependency_ids": [
              {
                "_id": "53e99ce50e5572016a00018a",
                "name": "archi-lab.net"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2015.2.10"
          },
          {
            "_id": "54d80d08dcee4dfd260000d4",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/30312246-0063-4b65-a614-b8488389be2cgregPkg805.zip",
            "contents": "Apply View Template - This node will allow you to apply a view template to a set of views., Cell Style Settings - This node will generate a Cell Style Settings that can be used to override cell properties. , Change Family Type - Changes family type of a family by passing in an Element and type id of the type we want to change it to. , Color Settings - This node creates color settings for the Analysis Visualization Framework. , Colored Surface Display Style - This node will generate a Colored Surface Display Style from inputs of points, values, and instance surface for analysis to be aplied to. Also, use color and legend settings (part of archi-lab package) to create style colors and visibility., Colored Surface Settings - This node creates settings for the colored surface display style of the Analysis Visualization Framework., Combine by Pattern - Combines two list based on a input pattern of true and false., Current Document - Retrieves Current Document, Delete Elements - This node will delete elements from Revit project., Delete Linked Model Keynote Tags - Deletes all Keynote Tags that are tagging elements in the linked model. if element in the linked model has a keynote assigned thus a keynote tag reads a proper value it will not be deleted. , Delete Unnamed Reference Planes - Does just what the name says. , Dispatch - Works exactly like the Dispatch component in Grasshopper. Input a list and a matching pattern of True/False to split list into two lists one containing all True arguments while other all False arguments. , Door Set Handing - Determines door set handing (whether its a left or right handed door). Input takes doors, and output will split them into two lists (right and left)., Duplicate Item Indices - Searches an input list for duplicate entries and lists their index numbers. Couple with Get From List to delete duplicates from a list., Element Ids - This node will query an element id that can be used with Revit nodes. Dynamo Element Id node returns integer value. , Fill Pattern - Get Fill Pattern by Name, Filled Region Area - This node will query an area from the filled region, Filled Region Boundary Curves - This node will get the boundary curves for a filled region., Get All Detail Groups - This node will retrieve all instances of Detail Groups in the model., Get All Keynote Tags - Selects all Keynote Tags instances in the model. , Get All Views - This node will query all views in the model and return them based on category, Get Design Options - Queries all of the design options currently in the project., Get Documents - Queries all linked Revit files and retrieves their Name, LinkInstance and Document properties., Get Filled Regions - This node will query up all Filled Regions in the project as well as those in the active view only. , Get Line Style by Name - This node will return a line style object by its name. Line styles can be either Drafting or Model Line Property. , Get Rooms by Level - Filters Rooms by level., Get Text Note Type by Name - This node will select a text note type by name. , Get Unplaced Groups - This node will retrieve all unplaced groups in the model., Get Worksets - Retrieves user worksets from specified document, GH Point to DY Point - Converts CSV Grasshopper export of points into a Dynamo point list. , Group Curves - This node will take any input of flat list of curves and group them into sublists containing \"joinable\" curves that is continous curves. They might form closed curves or open curves. Use PolyCurve.ByJoinedCurves to convert output groups of curves into single PolyCurves, Id to Element - Selects elements in a model from id input (ElementId, string, integer or GUID), Key Schedule - This node will take a key schedule, data and a list of parameters and populate it with infomation from data parameter. Visit www.archi-lab.net for more information on how to prep this node for take off. , Legend Settings - This node sets all settings for the Legend display with Analysis Visualization Framework of Revit. , Marker Settings - This node will generate AnalysisDisplayMarkerAndTextSettings to be used with a Marker Analysis Display Style. Inputs are: Marker Shape(Circle, Triangle, Rectangle), Marker Size, Show Text (Boolean), Rounding, TextDisplayMethod (Show All, Show None, Show Predefined). , Marker&Text Display Style - This node will take an input of Points and a matching input of values to create Analysis Display Style in Revit. Use Legend, Marker and Color Settings nodes to fully customize your display style. , New Section Box View By Elements - This node will create new section box around specified elements and apply it to a new 3D View with a specified name. Section box will be offset from the elements by a supplied offset values. , Override Fill Pattern in View - Overrides fill pattern of any element in an active view to specified fill pattern and color, PolyCurve by Profile Family Type - It takes an input of a profile family type and extract curves from it converting them to polycurves and curve segments for use in Dynamo (sweeps)., Remap UV Domain - This node takes an input of a reference face and a list of UVs that get remapped into that face's UV Domain. The output is a list of UV Coordinates in that surface's domain. , Rotate Family - This node will rotate a family in Revit around a given axis by supplied angle (in radians). Please remember that every time you run your definition it will rotate family by given angle every time. , Schedule Appearance - This node allows you to control the appearance of the schedule. For now it supports only title, header and body text type. , Schedule Formatting - This node will allow you to control schedule formatiing options like column width, whether a column is hidden, column heading etc. , Schedule Sorting Grouping - This node will allow you to specify sorting/grouping parameters in schedule as well parameters like sorting order, whether its a footer or header. Visit archi-lab.net for more information. , Schedule Title Appearance - This node will override the appearance of the title. , Schedules on Sheets - Queries all schedules and produces two lists: one with all schedules that are placed on sheets and one with schedules that are not placed on sheets., Select Model Lines by Style - This node will select all model lines in the revit project by a line style name. , Slice String - Slices X number of leading or trailing characters from string (boolean true will slice from left while boolean set to false from right), Add Shared Parameter to Project - This node will add a parameter to shared parameter file and then add it to the project. , Parameter Group - This node will return all available Parameter Groups, Parameter Types - This node will return all available Paramter Types.",
            "engine_metadata": "",
            "engine_version": "0.7.5.3566",
            "created": "2015-02-09T01:27:36.533Z",
            "full_dependency_versions": [ "2015.2.11" ],
            "full_dependency_ids": [
              {
                "_id": "53e99ce50e5572016a00018a",
                "name": "archi-lab.net"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2015.2.11"
          },
          {
            "_id": "54d8352bdcee4dfd260000d5",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/b698c234-d5b2-4eb8-b484-ccaa64d67b5cgregPkg863.zip",
            "contents": "Add Shared Parameter to Project - This node will add a parameter to shared parameter file and then add it to the project. , Apply View Template - This node will allow you to apply a view template to a set of views., Cell Style Settings - This node will generate a Cell Style Settings that can be used to override cell properties. , Change Family Type - Changes family type of a family by passing in an Element and type id of the type we want to change it to. , Color Settings - This node creates color settings for the Analysis Visualization Framework. , Colored Surface Display Style - This node will generate a Colored Surface Display Style from inputs of points, values, and instance surface for analysis to be aplied to. Also, use color and legend settings (part of archi-lab package) to create style colors and visibility., Colored Surface Settings - This node creates settings for the colored surface display style of the Analysis Visualization Framework., Combine by Pattern - Combines two list based on a input pattern of true and false., Current Document - Retrieves Current Document, Delete Elements - This node will delete elements from Revit project., Delete Linked Model Keynote Tags - Deletes all Keynote Tags that are tagging elements in the linked model. if element in the linked model has a keynote assigned thus a keynote tag reads a proper value it will not be deleted. , Delete Unnamed Reference Planes - Does just what the name says. , Dispatch - Works exactly like the Dispatch component in Grasshopper. Input a list and a matching pattern of True/False to split list into two lists one containing all True arguments while other all False arguments. , Door Set Handing - Determines door set handing (whether its a left or right handed door). Input takes doors, and output will split them into two lists (right and left)., Duplicate Item Indices - Searches an input list for duplicate entries and lists their index numbers. Couple with Get From List to delete duplicates from a list., Element Ids - This node will query an element id that can be used with Revit nodes. Dynamo Element Id node returns integer value. , Fill Pattern - Get Fill Pattern by Name, Filled Region Area - This node will query an area from the filled region, Filled Region Boundary Curves - This node will get the boundary curves for a filled region., Get All Detail Groups - This node will retrieve all instances of Detail Groups in the model., Get All Keynote Tags - Selects all Keynote Tags instances in the model. , Get All Views - This node will query all views in the model and return them based on category, Get Design Options - Queries all of the design options currently in the project., Get Documents - Queries all linked Revit files and retrieves their Name, LinkInstance and Document properties., Get Filled Regions - This node will query up all Filled Regions in the project as well as those in the active view only. , Get Line Style by Name - This node will return a line style object by its name. Line styles can be either Drafting or Model Line Property. , Get Rooms by Level - Filters Rooms by level., Get Text Note Type by Name - This node will select a text note type by name. , Get Unplaced Groups - This node will retrieve all unplaced groups in the model., Get Worksets - Retrieves user worksets from specified document, GH Point to DY Point - Converts CSV Grasshopper export of points into a Dynamo point list. , Group Curves - This node will take any input of flat list of curves and group them into sublists containing \"joinable\" curves that is continous curves. They might form closed curves or open curves. Use PolyCurve.ByJoinedCurves to convert output groups of curves into single PolyCurves, Id to Element - Selects elements in a model from id input (ElementId, string, integer or GUID), Key Schedule - This node will take a key schedule, data and a list of parameters and populate it with infomation from data parameter. Visit www.archi-lab.net for more information on how to prep this node for take off. , Legend Settings - This node sets all settings for the Legend display with Analysis Visualization Framework of Revit. , Marker Settings - This node will generate AnalysisDisplayMarkerAndTextSettings to be used with a Marker Analysis Display Style. Inputs are: Marker Shape(Circle, Triangle, Rectangle), Marker Size, Show Text (Boolean), Rounding, TextDisplayMethod (Show All, Show None, Show Predefined). , Marker&Text Display Style - This node will take an input of Points and a matching input of values to create Analysis Display Style in Revit. Use Legend, Marker and Color Settings nodes to fully customize your display style. , New Section Box View By Elements - This node will create new section box around specified elements and apply it to a new 3D View with a specified name. Section box will be offset from the elements by a supplied offset values. , Override Fill Pattern in View - Overrides fill pattern of any element in an active view to specified fill pattern and color, Parameter Group - This node will return all available Parameter Groups, Parameter Types - This node will return all available Paramter Types., PolyCurve by Profile Family Type - It takes an input of a profile family type and extract curves from it converting them to polycurves and curve segments for use in Dynamo (sweeps)., Remap UV Domain - This node takes an input of a reference face and a list of UVs that get remapped into that face's UV Domain. The output is a list of UV Coordinates in that surface's domain. , Rotate Family - This node will rotate a family in Revit around a given axis by supplied angle (in radians). Please remember that every time you run your definition it will rotate family by given angle every time. , Schedule Appearance - This node allows you to control the appearance of the schedule. For now it supports only title, header and body text type. , Schedule Formatting - This node will allow you to control schedule formatiing options like column width, whether a column is hidden, column heading etc. , Schedule Sorting Grouping - This node will allow you to specify sorting/grouping parameters in schedule as well parameters like sorting order, whether its a footer or header. Visit archi-lab.net for more information. , Schedule Title Appearance - This node will override the appearance of the title. , Schedules on Sheets - Queries all schedules and produces two lists: one with all schedules that are placed on sheets and one with schedules that are not placed on sheets., Select Model Lines by Style - This node will select all model lines in the revit project by a line style name. , Slice String - Slices X number of leading or trailing characters from string (boolean true will slice from left while boolean set to false from right), Elements Fom Linked File in Room - This node will check what elements from a linked model are inside of any of the rooms in the current model. , Elements in Room - This node will check if any of the elements are inside any of the supplied rooms. , Get All Elements From Linked Model - This node is based on code posted by Julien Benoit. Big thanks to Julien for sharing his work. This node will retrieve all elements of a given category from a given linked model. ",
            "engine_metadata": "",
            "engine_version": "0.7.5.3566",
            "created": "2015-02-09T04:18:51.951Z",
            "full_dependency_versions": [ "2015.2.12" ],
            "full_dependency_ids": [
              {
                "_id": "53e99ce50e5572016a00018a",
                "name": "archi-lab.net"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2015.2.12"
          },
          {
            "_id": "54e40acddcee4dfd260000f7",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/0af0e2ec-7dd3-4214-b54b-7b22c2682be6gregPkg860.zip",
            "contents": "Add Shared Parameter to Project - This node will add a parameter to shared parameter file and then add it to the project. , Apply View Template - This node will allow you to apply a view template to a set of views., Cell Style Settings - This node will generate a Cell Style Settings that can be used to override cell properties. , Change Family Type - Changes family type of a family by passing in an Element and type id of the type we want to change it to. , Color Settings - This node creates color settings for the Analysis Visualization Framework. , Colored Surface Display Style - This node will generate a Colored Surface Display Style from inputs of points, values, and instance surface for analysis to be aplied to. Also, use color and legend settings (part of archi-lab package) to create style colors and visibility., Colored Surface Settings - This node creates settings for the colored surface display style of the Analysis Visualization Framework., Combine by Pattern - Combines two list based on a input pattern of true and false., Current Document - Retrieves Current Document, Delete Elements - This node will delete elements from Revit project., Delete Linked Model Keynote Tags - Deletes all Keynote Tags that are tagging elements in the linked model. if element in the linked model has a keynote assigned thus a keynote tag reads a proper value it will not be deleted. , Delete Unnamed Reference Planes - Does just what the name says. , Dispatch - Works exactly like the Dispatch component in Grasshopper. Input a list and a matching pattern of True/False to split list into two lists one containing all True arguments while other all False arguments. , Door Set Handing - Determines door set handing (whether its a left or right handed door). Input takes doors, and output will split them into two lists (right and left)., Duplicate Item Indices - Searches an input list for duplicate entries and lists their index numbers. Couple with Get From List to delete duplicates from a list., Element Ids - This node will query an element id that can be used with Revit nodes. Dynamo Element Id node returns integer value. , Elements Fom Linked File in Room - This node will check what elements from a linked model are inside of any of the rooms in the current model. , Elements in Room - This node will check if any of the elements are inside any of the supplied rooms. , Fill Pattern - Get Fill Pattern by Name, Filled Region Area - This node will query an area from the filled region, Filled Region Boundary Curves - This node will get the boundary curves for a filled region., Get All Detail Groups - This node will retrieve all instances of Detail Groups in the model., Get All Elements From Linked Model - This node is based on code posted by Julien Benoit. Big thanks to Julien for sharing his work. This node will retrieve all elements of a given category from a given linked model. , Get All Keynote Tags - Selects all Keynote Tags instances in the model. , Get All Views - This node will query all views in the model and return them based on category, Get Design Options - Queries all of the design options currently in the project., Get Documents - Queries all linked Revit files and retrieves their Name, LinkInstance and Document properties., Get Filled Regions - This node will query up all Filled Regions in the project as well as those in the active view only. , Get Line Style by Name - This node will return a line style object by its name. Line styles can be either Drafting or Model Line Property. , Get Rooms by Level - Filters Rooms by level., Get Text Note Type by Name - This node will select a text note type by name. , Get Unplaced Groups - This node will retrieve all unplaced groups in the model., Get Worksets - Retrieves user worksets from specified document, GH Point to DY Point - Converts CSV Grasshopper export of points into a Dynamo point list. , Group Curves - This node will take any input of flat list of curves and group them into sublists containing \"joinable\" curves that is continous curves. They might form closed curves or open curves. Use PolyCurve.ByJoinedCurves to convert output groups of curves into single PolyCurves, Id to Element - Selects elements in a model from id input (ElementId, string, integer or GUID), Key Schedule - This node will take a key schedule, data and a list of parameters and populate it with infomation from data parameter. Visit www.archi-lab.net for more information on how to prep this node for take off. , Legend Settings - This node sets all settings for the Legend display with Analysis Visualization Framework of Revit. , Marker Settings - This node will generate AnalysisDisplayMarkerAndTextSettings to be used with a Marker Analysis Display Style. Inputs are: Marker Shape(Circle, Triangle, Rectangle), Marker Size, Show Text (Boolean), Rounding, TextDisplayMethod (Show All, Show None, Show Predefined). , Marker&Text Display Style - This node will take an input of Points and a matching input of values to create Analysis Display Style in Revit. Use Legend, Marker and Color Settings nodes to fully customize your display style. , New Section Box View By Elements - This node will create new section box around specified elements and apply it to a new 3D View with a specified name. Section box will be offset from the elements by a supplied offset values. , Override Fill Pattern in View - Overrides fill pattern of any element in an active view to specified fill pattern and color, Parameter Group - This node will return all available Parameter Groups, Parameter Types - This node will return all available Paramter Types., PolyCurve by Profile Family Type - It takes an input of a profile family type and extract curves from it converting them to polycurves and curve segments for use in Dynamo (sweeps)., Remap UV Domain - This node takes an input of a reference face and a list of UVs that get remapped into that face's UV Domain. The output is a list of UV Coordinates in that surface's domain. , Rotate Family - This node will rotate a family in Revit around a given axis by supplied angle (in radians). Please remember that every time you run your definition it will rotate family by given angle every time. , Schedule Appearance - This node allows you to control the appearance of the schedule. For now it supports only title, header and body text type. , Schedule Formatting - This node will allow you to control schedule formatiing options like column width, whether a column is hidden, column heading etc. , Schedule Sorting Grouping - This node will allow you to specify sorting/grouping parameters in schedule as well parameters like sorting order, whether its a footer or header. Visit archi-lab.net for more information. , Schedule Title Appearance - This node will override the appearance of the title. , Schedules on Sheets - Queries all schedules and produces two lists: one with all schedules that are placed on sheets and one with schedules that are not placed on sheets., Select Model Lines by Style - This node will select all model lines in the revit project by a line style name. , Slice String - Slices X number of leading or trailing characters from string (boolean true will slice from left while boolean set to false from right), Get Level by Name - This node will retrieve a Revit Level Element by its name. ",
            "engine_metadata": "",
            "engine_version": "0.7.5.3566",
            "created": "2015-02-18T03:45:17.290Z",
            "full_dependency_versions": [ "2015.2.17" ],
            "full_dependency_ids": [
              {
                "_id": "53e99ce50e5572016a00018a",
                "name": "archi-lab.net"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2015.2.17"
          },
          {
            "_id": "54efe35cdcee4dfd26000119",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/5836aa7b-ced7-4054-9855-c3e4339e4b5bgregPkg294.zip",
            "contents": "Add Shared Parameter to Project - This node will add a parameter to shared parameter file and then add it to the project. , Apply View Template - This node will allow you to apply a view template to a set of views., Cell Style Settings - This node will generate a Cell Style Settings that can be used to override cell properties. , Change Family Type - Changes family type of a family by passing in an Element and type id of the type we want to change it to. , Color Settings - This node creates color settings for the Analysis Visualization Framework. , Colored Surface Display Style - This node will generate a Colored Surface Display Style from inputs of points, values, and instance surface for analysis to be aplied to. Also, use color and legend settings (part of archi-lab package) to create style colors and visibility., Colored Surface Settings - This node creates settings for the colored surface display style of the Analysis Visualization Framework., Combine by Pattern - Combines two list based on a input pattern of true and false., Current Document - Retrieves Current Document, Delete Elements - This node will delete elements from Revit project., Delete Linked Model Keynote Tags - Deletes all Keynote Tags that are tagging elements in the linked model. if element in the linked model has a keynote assigned thus a keynote tag reads a proper value it will not be deleted. , Delete Unnamed Reference Planes - Does just what the name says. , Dispatch - Works exactly like the Dispatch component in Grasshopper. Input a list and a matching pattern of True/False to split list into two lists one containing all True arguments while other all False arguments. , Door Set Handing - Determines door set handing (whether its a left or right handed door). Input takes doors, and output will split them into two lists (right and left)., Duplicate Item Indices - Searches an input list for duplicate entries and lists their index numbers. Couple with Get From List to delete duplicates from a list., Element Ids - This node will query an element id that can be used with Revit nodes. Dynamo Element Id node returns integer value. , Elements Fom Linked File in Room - This node will check what elements from a linked model are inside of any of the rooms in the current model. , Elements in Room - This node will check if any of the elements are inside any of the supplied rooms. , Fill Pattern - Get Fill Pattern by Name, Filled Region Area - This node will query an area from the filled region, Filled Region Boundary Curves - This node will get the boundary curves for a filled region., Get All Detail Groups - This node will retrieve all instances of Detail Groups in the model., Get All Elements From Linked Model - This node is based on code posted by Julien Benoit. Big thanks to Julien for sharing his work. This node will retrieve all elements of a given category from a given linked model. , Get All Keynote Tags - Selects all Keynote Tags instances in the model. , Get All Views - This node will query all views in the model and return them based on category, Get Design Options - Queries all of the design options currently in the project., Get Documents - Queries all linked Revit files and retrieves their Name, LinkInstance and Document properties., Get Filled Regions - This node will query up all Filled Regions in the project as well as those in the active view only. , Get Level by Name - This node will retrieve a Revit Level Element by its name. , Get Line Style by Name - This node will return a line style object by its name. Line styles can be either Drafting or Model Line Property. , Get Rooms by Level - Filters Rooms by level., Get Text Note Type by Name - This node will select a text note type by name. , Get Unplaced Groups - This node will retrieve all unplaced groups in the model., Get Worksets - Retrieves user worksets from specified document, GH Point to DY Point - Converts CSV Grasshopper export of points into a Dynamo point list. , Group Curves - This node will take any input of flat list of curves and group them into sublists containing \"joinable\" curves that is continous curves. They might form closed curves or open curves. Use PolyCurve.ByJoinedCurves to convert output groups of curves into single PolyCurves, Id to Element - Selects elements in a model from id input (ElementId, string, integer or GUID), Key Schedule - This node will take a key schedule, data and a list of parameters and populate it with infomation from data parameter. Visit www.archi-lab.net for more information on how to prep this node for take off. , Legend Settings - This node sets all settings for the Legend display with Analysis Visualization Framework of Revit. , Marker Settings - This node will generate AnalysisDisplayMarkerAndTextSettings to be used with a Marker Analysis Display Style. Inputs are: Marker Shape(Circle, Triangle, Rectangle), Marker Size, Show Text (Boolean), Rounding, TextDisplayMethod (Show All, Show None, Show Predefined). , Marker&Text Display Style - This node will take an input of Points and a matching input of values to create Analysis Display Style in Revit. Use Legend, Marker and Color Settings nodes to fully customize your display style. , New Section Box View By Elements - This node will create new section box around specified elements and apply it to a new 3D View with a specified name. Section box will be offset from the elements by a supplied offset values. , Override Fill Pattern in View - Overrides fill pattern of any element in an active view to specified fill pattern and color, Parameter Group - This node will return all available Parameter Groups, Parameter Types - This node will return all available Paramter Types., PolyCurve by Profile Family Type - It takes an input of a profile family type and extract curves from it converting them to polycurves and curve segments for use in Dynamo (sweeps)., Remap UV Domain - This node takes an input of a reference face and a list of UVs that get remapped into that face's UV Domain. The output is a list of UV Coordinates in that surface's domain. , Rotate Family - This node will rotate a family in Revit around a given axis by supplied angle (in radians). Please remember that every time you run your definition it will rotate family by given angle every time. , Schedule Appearance - This node allows you to control the appearance of the schedule. For now it supports only title, header and body text type. , Schedule Formatting - This node will allow you to control schedule formatiing options like column width, whether a column is hidden, column heading etc. , Schedule Sorting Grouping - This node will allow you to specify sorting/grouping parameters in schedule as well parameters like sorting order, whether its a footer or header. Visit archi-lab.net for more information. , Schedule Title Appearance - This node will override the appearance of the title. , Schedules on Sheets - Queries all schedules and produces two lists: one with all schedules that are placed on sheets and one with schedules that are not placed on sheets., Select Model Lines by Style - This node will select all model lines in the revit project by a line style name. , Slice String - Slices X number of leading or trailing characters from string (boolean true will slice from left while boolean set to false from right)",
            "engine_metadata": "",
            "engine_version": "0.7.6.4145",
            "created": "2015-02-27T03:24:12.004Z",
            "full_dependency_versions": [ "2015.2.26" ],
            "full_dependency_ids": [
              {
                "_id": "53e99ce50e5572016a00018a",
                "name": "archi-lab.net"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2015.2.26"
          },
          {
            "_id": "54f3be46dcee4dfd26000120",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/120b76d8-24bf-40f4-ba01-c274ce908baegregPkg579.zip",
            "contents": "Add Shared Parameter to Project - This node will add a parameter to shared parameter file and then add it to the project. , Apply View Template - This node will allow you to apply a view template to a set of views., Cell Style Settings - This node will generate a Cell Style Settings that can be used to override cell properties. , Change Family Type - Changes family type of a family by passing in an Element and type id of the type we want to change it to. , Color Settings - This node creates color settings for the Analysis Visualization Framework. , Colored Surface Display Style - This node will generate a Colored Surface Display Style from inputs of points, values, and instance surface for analysis to be aplied to. Also, use color and legend settings (part of archi-lab package) to create style colors and visibility., Colored Surface Settings - This node creates settings for the colored surface display style of the Analysis Visualization Framework., Combine by Pattern - Combines two list based on a input pattern of true and false., Current Document - Retrieves Current Document, Delete Elements - This node will delete elements from Revit project., Delete Linked Model Keynote Tags - Deletes all Keynote Tags that are tagging elements in the linked model. if element in the linked model has a keynote assigned thus a keynote tag reads a proper value it will not be deleted. , Delete Unnamed Reference Planes - Does just what the name says. , Dispatch - Works exactly like the Dispatch component in Grasshopper. Input a list and a matching pattern of True/False to split list into two lists one containing all True arguments while other all False arguments. , Door Set Handing - Determines door set handing (whether its a left or right handed door). Input takes doors, and output will split them into two lists (right and left)., Duplicate Item Indices - Searches an input list for duplicate entries and lists their index numbers. Couple with Get From List to delete duplicates from a list., Element Ids - This node will query an element id that can be used with Revit nodes. Dynamo Element Id node returns integer value. , Elements Fom Linked File in Room - This node will check what elements from a linked model are inside of any of the rooms in the current model. , Elements in Room - This node will check if any of the elements are inside any of the supplied rooms. , Fill Pattern - Get Fill Pattern by Name, Filled Region Area - This node will query an area from the filled region, Filled Region Boundary Curves - This node will get the boundary curves for a filled region., Get All Detail Groups - This node will retrieve all instances of Detail Groups in the model., Get All Elements From Linked Model - This node is based on code posted by Julien Benoit. Big thanks to Julien for sharing his work. This node will retrieve all elements of a given category from a given linked model. , Get All Keynote Tags - Selects all Keynote Tags instances in the model. , Get All Views - This node will query all views in the model and return them based on category, Get Design Options - Queries all of the design options currently in the project., Get Documents - Queries all linked Revit files and retrieves their Name, LinkInstance and Document properties., Get Filled Regions - This node will query up all Filled Regions in the project as well as those in the active view only. , Get Level by Name - This node will retrieve a Revit Level Element by its name. , Get Line Style by Name - This node will return a line style object by its name. Line styles can be either Drafting or Model Line Property. , Get Rooms by Level - Filters Rooms by level., Get Text Note Type by Name - This node will select a text note type by name. , Get Unplaced Groups - This node will retrieve all unplaced groups in the model., Get Worksets - Retrieves user worksets from specified document, GH Point to DY Point - Converts CSV Grasshopper export of points into a Dynamo point list. , Group Curves - This node will take any input of flat list of curves and group them into sublists containing \"joinable\" curves that is continous curves. They might form closed curves or open curves. Use PolyCurve.ByJoinedCurves to convert output groups of curves into single PolyCurves, Id to Element - Selects elements in a model from id input (ElementId, string, integer or GUID), Key Schedule - This node will take a key schedule, data and a list of parameters and populate it with infomation from data parameter. Visit www.archi-lab.net for more information on how to prep this node for take off. , Legend Settings - This node sets all settings for the Legend display with Analysis Visualization Framework of Revit. , Marker Settings - This node will generate AnalysisDisplayMarkerAndTextSettings to be used with a Marker Analysis Display Style. Inputs are: Marker Shape(Circle, Triangle, Rectangle), Marker Size, Show Text (Boolean), Rounding, TextDisplayMethod (Show All, Show None, Show Predefined). , Marker&Text Display Style - This node will take an input of Points and a matching input of values to create Analysis Display Style in Revit. Use Legend, Marker and Color Settings nodes to fully customize your display style. , New Section Box View By Elements - This node will create new section box around specified elements and apply it to a new 3D View with a specified name. Section box will be offset from the elements by a supplied offset values. , Override Fill Pattern in View - Overrides fill pattern of any element in an active view to specified fill pattern and color, Parameter Group - This node will return all available Parameter Groups, Parameter Types - This node will return all available Paramter Types., PolyCurve by Profile Family Type - It takes an input of a profile family type and extract curves from it converting them to polycurves and curve segments for use in Dynamo (sweeps)., Remap UV Domain - This node takes an input of a reference face and a list of UVs that get remapped into that face's UV Domain. The output is a list of UV Coordinates in that surface's domain. , Rotate Family - This node will rotate a family in Revit around a given axis by supplied angle (in radians). Please remember that every time you run your definition it will rotate family by given angle every time. , Schedule Appearance - This node allows you to control the appearance of the schedule. For now it supports only title, header and body text type. , Schedule Formatting - This node will allow you to control schedule formatiing options like column width, whether a column is hidden, column heading etc. , Schedule Sorting Grouping - This node will allow you to specify sorting/grouping parameters in schedule as well parameters like sorting order, whether its a footer or header. Visit archi-lab.net for more information. , Schedule Title Appearance - This node will override the appearance of the title. , Schedules on Sheets - Queries all schedules and produces two lists: one with all schedules that are placed on sheets and one with schedules that are not placed on sheets., Select Model Lines by Style - This node will select all model lines in the revit project by a line style name. , Slice String - Slices X number of leading or trailing characters from string (boolean true will slice from left while boolean set to false from right), Create Annotation Tag - This node will create an annotation tag at a given location, of given type and in a supplied view. If only single view is supplied then all tags will be created in that view. ",
            "engine_metadata": "",
            "engine_version": "0.7.6.4145",
            "created": "2015-03-02T01:35:02.237Z",
            "full_dependency_versions": [ "2015.3.1" ],
            "full_dependency_ids": [
              {
                "_id": "53e99ce50e5572016a00018a",
                "name": "archi-lab.net"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2015.3.1"
          },
          {
            "_id": "550244dd0c7eac9b57000046",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/16081d48-4620-426f-9143-205142930b06gregPkg798.zip",
            "contents": "Add Shared Parameter to Project - This node will add a parameter to shared parameter file and then add it to the project. , Apply View Template - This node will allow you to apply a view template to a set of views., Cell Style Settings - This node will generate a Cell Style Settings that can be used to override cell properties. , Change Family Type - Changes family type of a family by passing in an Element and type id of the type we want to change it to. , Color Settings - This node creates color settings for the Analysis Visualization Framework. , Colored Surface Display Style - This node will generate a Colored Surface Display Style from inputs of points, values, and instance surface for analysis to be aplied to. Also, use color and legend settings (part of archi-lab package) to create style colors and visibility., Colored Surface Settings - This node creates settings for the colored surface display style of the Analysis Visualization Framework., Combine by Pattern - Combines two list based on a input pattern of true and false., Create Annotation Tag - This node will create an annotation tag at a given location, of given type and in a supplied view. If only single view is supplied then all tags will be created in that view. , Current Document - Retrieves Current Document, Delete Elements - This node will delete elements from Revit project., Delete Linked Model Keynote Tags - Deletes all Keynote Tags that are tagging elements in the linked model. if element in the linked model has a keynote assigned thus a keynote tag reads a proper value it will not be deleted. , Delete Unnamed Reference Planes - Does just what the name says. , Dispatch - Works exactly like the Dispatch component in Grasshopper. Input a list and a matching pattern of True/False to split list into two lists one containing all True arguments while other all False arguments. , Door Set Handing - Determines door set handing (whether its a left or right handed door). Input takes doors, and output will split them into two lists (right and left)., Duplicate Item Indices - Searches an input list for duplicate entries and lists their index numbers. Couple with Get From List to delete duplicates from a list., Element Ids - This node will query an element id that can be used with Revit nodes. Dynamo Element Id node returns integer value. , Elements Fom Linked File in Room - This node will check what elements from a linked model are inside of any of the rooms in the current model. , Elements in Room - This node will check if any of the elements are inside any of the supplied rooms. , Fill Pattern - Get Fill Pattern by Name, Filled Region Area - This node will query an area from the filled region, Filled Region Boundary Curves - This node will get the boundary curves for a filled region., Get All Detail Groups - This node will retrieve all instances of Detail Groups in the model., Get All Elements From Linked Model - This node is based on code posted by Julien Benoit. Big thanks to Julien for sharing his work. This node will retrieve all elements of a given category from a given linked model. , Get All Keynote Tags - Selects all Keynote Tags instances in the model. , Get All Views - This node will query all views in the model and return them based on category, Get Design Options - Queries all of the design options currently in the project., Get Documents - Queries all linked Revit files and retrieves their Name, LinkInstance and Document properties., Get Filled Regions - This node will query up all Filled Regions in the project as well as those in the active view only. , Get Level by Name - This node will retrieve a Revit Level Element by its name. , Get Line Style by Name - This node will return a line style object by its name. Line styles can be either Drafting or Model Line Property. , Get Rooms by Level - Filters Rooms by level., Get Text Note Type by Name - This node will select a text note type by name. , Get Unplaced Groups - This node will retrieve all unplaced groups in the model., Get Worksets - Retrieves user worksets from specified document, GH Point to DY Point - Converts CSV Grasshopper export of points into a Dynamo point list. , Group Curves - This node will take any input of flat list of curves and group them into sublists containing \"joinable\" curves that is continous curves. They might form closed curves or open curves. Use PolyCurve.ByJoinedCurves to convert output groups of curves into single PolyCurves, Id to Element - Selects elements in a model from id input (ElementId, string, integer or GUID), Key Schedule - This node will take a key schedule, data and a list of parameters and populate it with infomation from data parameter. Visit www.archi-lab.net for more information on how to prep this node for take off. , Legend Settings - This node sets all settings for the Legend display with Analysis Visualization Framework of Revit. , Marker Settings - This node will generate AnalysisDisplayMarkerAndTextSettings to be used with a Marker Analysis Display Style. Inputs are: Marker Shape(Circle, Triangle, Rectangle), Marker Size, Show Text (Boolean), Rounding, TextDisplayMethod (Show All, Show None, Show Predefined). , Marker&Text Display Style - This node will take an input of Points and a matching input of values to create Analysis Display Style in Revit. Use Legend, Marker and Color Settings nodes to fully customize your display style. , New Section Box View By Elements - This node will create new section box around specified elements and apply it to a new 3D View with a specified name. Section box will be offset from the elements by a supplied offset values. , Override Fill Pattern in View - Overrides fill pattern of any element in an active view to specified fill pattern and color, Parameter Group - This node will return all available Parameter Groups, Parameter Types - This node will return all available Paramter Types., PolyCurve by Profile Family Type - It takes an input of a profile family type and extract curves from it converting them to polycurves and curve segments for use in Dynamo (sweeps)., Remap UV Domain - This node takes an input of a reference face and a list of UVs that get remapped into that face's UV Domain. The output is a list of UV Coordinates in that surface's domain. , Rotate Family - This node will rotate a family in Revit around a given axis by supplied angle (in radians). Please remember that every time you run your definition it will rotate family by given angle every time. , Schedule Appearance - This node allows you to control the appearance of the schedule. For now it supports only title, header and body text type. , Schedule Formatting - This node will allow you to control schedule formatiing options like column width, whether a column is hidden, column heading etc. , Schedule Sorting Grouping - This node will allow you to specify sorting/grouping parameters in schedule as well parameters like sorting order, whether its a footer or header. Visit archi-lab.net for more information. , Schedule Title Appearance - This node will override the appearance of the title. , Schedules on Sheets - Queries all schedules and produces two lists: one with all schedules that are placed on sheets and one with schedules that are not placed on sheets., Select Model Lines by Style - This node will select all model lines in the revit project by a line style name. , Slice String - Slices X number of leading or trailing characters from string (boolean true will slice from left while boolean set to false from right)",
            "engine_metadata": "",
            "engine_version": "0.7.6.4145",
            "created": "2015-03-13T02:01:01.120Z",
            "full_dependency_versions": [ "2015.3.12" ],
            "full_dependency_ids": [
              {
                "_id": "53e99ce50e5572016a00018a",
                "name": "archi-lab.net"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2015.3.12"
          },
          {
            "_id": "5525faa15899bb3705000056",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/d392146f-92c7-4a44-9ef1-6b86ea333afagregPkg982.zip",
            "contents": "Add Shared Parameter to Project - This node will add a parameter to shared parameter file and then add it to the project. , Apply View Template - This node will allow you to apply a view template to a set of views., Cell Style Settings - This node will generate a Cell Style Settings that can be used to override cell properties. , Change Family Type - Changes family type of a family by passing in an Element and type id of the type we want to change it to. , Color Settings - This node creates color settings for the Analysis Visualization Framework. , Colored Surface Display Style - This node will generate a Colored Surface Display Style from inputs of points, values, and instance surface for analysis to be aplied to. Also, use color and legend settings (part of archi-lab package) to create style colors and visibility., Colored Surface Settings - This node creates settings for the colored surface display style of the Analysis Visualization Framework., Combine by Pattern - Combines two list based on a input pattern of true and false., Create Annotation Tag - This node will create an annotation tag at a given location, of given type and in a supplied view. If only single view is supplied then all tags will be created in that view. , Current Document - Retrieves Current Document, Delete Elements - This node will delete elements from Revit project., Delete Linked Model Keynote Tags - Deletes all Keynote Tags that are tagging elements in the linked model. if element in the linked model has a keynote assigned thus a keynote tag reads a proper value it will not be deleted. , Delete Unnamed Reference Planes - Does just what the name says. , Dispatch - Works exactly like the Dispatch component in Grasshopper. Input a list and a matching pattern of True/False to split list into two lists one containing all True arguments while other all False arguments. , Door Set Handing - Determines door set handing (whether its a left or right handed door). Input takes doors, and output will split them into two lists (right and left)., Duplicate Item Indices - Searches an input list for duplicate entries and lists their index numbers. Couple with Get From List to delete duplicates from a list., Element Ids - This node will query an element id that can be used with Revit nodes. Dynamo Element Id node returns integer value. , Elements Fom Linked File in Room - This node will check what elements from a linked model are inside of any of the rooms in the current model. , Elements in Room - This node will check if any of the elements are inside any of the supplied rooms. , Fill Pattern - Get Fill Pattern by Name, Filled Region Area - This node will query an area from the filled region, Filled Region Boundary Curves - This node will get the boundary curves for a filled region., Get All Detail Groups - This node will retrieve all instances of Detail Groups in the model., Get All Elements From Linked Model - This node is based on code posted by Julien Benoit. Big thanks to Julien for sharing his work. This node will retrieve all elements of a given category from a given linked model. , Get All Keynote Tags - Selects all Keynote Tags instances in the model. , Get All Views - This node will query all views in the model and return them based on category, Get Design Options - Queries all of the design options currently in the project., Get Documents - Queries all linked Revit files and retrieves their Name, LinkInstance and Document properties., Get Filled Regions - This node will query up all Filled Regions in the project as well as those in the active view only. , Get Level by Name - This node will retrieve a Revit Level Element by its name. , Get Line Style by Name - This node will return a line style object by its name. Line styles can be either Drafting or Model Line Property. , Get Rooms by Level - Filters Rooms by level., Get Text Note Type by Name - This node will select a text note type by name. , Get Unplaced Groups - This node will retrieve all unplaced groups in the model., Get Worksets - Retrieves user worksets from specified document, GH Point to DY Point - Converts CSV Grasshopper export of points into a Dynamo point list. , Group Curves - This node will take any input of flat list of curves and group them into sublists containing \"joinable\" curves that is continous curves. They might form closed curves or open curves. Use PolyCurve.ByJoinedCurves to convert output groups of curves into single PolyCurves, Id to Element - Selects elements in a model from id input (ElementId, string, integer or GUID), Key Schedule - This node will take a key schedule, data and a list of parameters and populate it with infomation from data parameter. Visit www.archi-lab.net for more information on how to prep this node for take off. , Legend Settings - This node sets all settings for the Legend display with Analysis Visualization Framework of Revit. , Marker Settings - This node will generate AnalysisDisplayMarkerAndTextSettings to be used with a Marker Analysis Display Style. Inputs are: Marker Shape(Circle, Triangle, Rectangle), Marker Size, Show Text (Boolean), Rounding, TextDisplayMethod (Show All, Show None, Show Predefined). , Marker&Text Display Style - This node will take an input of Points and a matching input of values to create Analysis Display Style in Revit. Use Legend, Marker and Color Settings nodes to fully customize your display style. , New Section Box View By Elements - This node will create new section box around specified elements and apply it to a new 3D View with a specified name. Section box will be offset from the elements by a supplied offset values. , Override Fill Pattern in View - Overrides fill pattern of any element in an active view to specified fill pattern and color, Parameter Group - This node will return all available Parameter Groups, Parameter Types - This node will return all available Paramter Types., PolyCurve by Profile Family Type - It takes an input of a profile family type and extract curves from it converting them to polycurves and curve segments for use in Dynamo (sweeps)., Remap UV Domain - This node takes an input of a reference face and a list of UVs that get remapped into that face's UV Domain. The output is a list of UV Coordinates in that surface's domain. , Rotate Family - This node will rotate a family in Revit around a given axis by supplied angle (in radians). Please remember that every time you run your definition it will rotate family by given angle every time. , Schedule Appearance - This node allows you to control the appearance of the schedule. For now it supports only title, header and body text type. , Schedule Formatting - This node will allow you to control schedule formatiing options like column width, whether a column is hidden, column heading etc. , Schedule Sorting Grouping - This node will allow you to specify sorting/grouping parameters in schedule as well parameters like sorting order, whether its a footer or header. Visit archi-lab.net for more information. , Schedule Title Appearance - This node will override the appearance of the title. , Schedules on Sheets - Queries all schedules and produces two lists: one with all schedules that are placed on sheets and one with schedules that are not placed on sheets., Select Model Lines by Style - This node will select all model lines in the revit project by a line style name. , Slice String - Slices X number of leading or trailing characters from string (boolean true will slice from left while boolean set to false from right), Export Image By View - This node will export an image to any Revit supported file type. It takes input of views, range, file type, size, resolution, zoom and direction as well as file path where images are to be saved. , Fit Direction Type - This node will query up possible fit direction types that can be used while exporting images from Revit., Image Export Range - This node will query up possible range options for exporting images., Image File Type - This node will query up all possibe file types that can be used when exporting images from Revit., Image Resolution - This node will query possible image resolution settings to be used when exporting images out of Revit. , Zoom Fit Type - This node will query up possible zoom fit types that can be used when exporting images from Revit. ",
            "engine_metadata": "",
            "engine_version": "0.8.1.872",
            "created": "2015-04-09T04:05:53.629Z",
            "full_dependency_versions": [ "2015.4.9" ],
            "full_dependency_ids": [
              {
                "_id": "53e99ce50e5572016a00018a",
                "name": "archi-lab.net"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2015.4.9"
          },
          {
            "_id": "5528418d5899bb3705000064",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/c06cc6f5-8513-4727-992a-f90e46c24b97gregPkg280.zip",
            "contents": "Add Shared Parameter to Project - This node will add a parameter to shared parameter file and then add it to the project. , Apply View Template - This node will allow you to apply a view template to a set of views., Cell Style Settings - This node will generate a Cell Style Settings that can be used to override cell properties. , Change Family Type - Changes family type of a family by passing in an Element and type id of the type we want to change it to. , Color Settings - This node creates color settings for the Analysis Visualization Framework. , Colored Surface Display Style - This node will generate a Colored Surface Display Style from inputs of points, values, and instance surface for analysis to be aplied to. Also, use color and legend settings (part of archi-lab package) to create style colors and visibility., Colored Surface Settings - This node creates settings for the colored surface display style of the Analysis Visualization Framework., Combine by Pattern - Combines two list based on a input pattern of true and false., Create Annotation Tag - This node will create an annotation tag at a given location, of given type and in a supplied view. If only single view is supplied then all tags will be created in that view. , Current Document - Retrieves Current Document, Delete Elements - This node will delete elements from Revit project., Delete Linked Model Keynote Tags - Deletes all Keynote Tags that are tagging elements in the linked model. if element in the linked model has a keynote assigned thus a keynote tag reads a proper value it will not be deleted. , Delete Unnamed Reference Planes - Does just what the name says. , Dispatch - Works exactly like the Dispatch component in Grasshopper. Input a list and a matching pattern of True/False to split list into two lists one containing all True arguments while other all False arguments. , Door Set Handing - Determines door set handing (whether its a left or right handed door). Input takes doors, and output will split them into two lists (right and left)., Duplicate Item Indices - Searches an input list for duplicate entries and lists their index numbers. Couple with Get From List to delete duplicates from a list., Element Ids - This node will query an element id that can be used with Revit nodes. Dynamo Element Id node returns integer value. , Elements Fom Linked File in Room - This node will check what elements from a linked model are inside of any of the rooms in the current model. , Elements in Room - This node will check if any of the elements are inside any of the supplied rooms. , Export Image By View - This node will export an image to any Revit supported file type. It takes input of views, range, file type, size, resolution, zoom and direction as well as file path where images are to be saved. , Fill Pattern - Get Fill Pattern by Name, Filled Region Area - This node will query an area from the filled region, Filled Region Boundary Curves - This node will get the boundary curves for a filled region., Fit Direction Type - This node will query up possible fit direction types that can be used while exporting images from Revit., Get All Detail Groups - This node will retrieve all instances of Detail Groups in the model., Get All Elements From Linked Model - This node is based on code posted by Julien Benoit. Big thanks to Julien for sharing his work. This node will retrieve all elements of a given category from a given linked model. , Get All Keynote Tags - Selects all Keynote Tags instances in the model. , Get All Views - This node will query all views in the model and return them based on category, Get Design Options - Queries all of the design options currently in the project., Get Documents - Queries all linked Revit files and retrieves their Name, LinkInstance and Document properties., Get Filled Regions - This node will query up all Filled Regions in the project as well as those in the active view only. , Get Level by Name - This node will retrieve a Revit Level Element by its name. , Get Line Style by Name - This node will return a line style object by its name. Line styles can be either Drafting or Model Line Property. , Get Rooms by Level - Filters Rooms by level., Get Text Note Type by Name - This node will select a text note type by name. , Get Unplaced Groups - This node will retrieve all unplaced groups in the model., Get Worksets - Retrieves user worksets from specified document, GH Point to DY Point - Converts CSV Grasshopper export of points into a Dynamo point list. , Group Curves - This node will take any input of flat list of curves and group them into sublists containing \"joinable\" curves that is continous curves. They might form closed curves or open curves. Use PolyCurve.ByJoinedCurves to convert output groups of curves into single PolyCurves, Id to Element - Selects elements in a model from id input (ElementId, string, integer or GUID), Image Export Range - This node will query up possible range options for exporting images., Image File Type - This node will query up all possibe file types that can be used when exporting images from Revit., Image Resolution - This node will query possible image resolution settings to be used when exporting images out of Revit. , Key Schedule - This node will take a key schedule, data and a list of parameters and populate it with infomation from data parameter. Visit www.archi-lab.net for more information on how to prep this node for take off. , Legend Settings - This node sets all settings for the Legend display with Analysis Visualization Framework of Revit. , Marker Settings - This node will generate AnalysisDisplayMarkerAndTextSettings to be used with a Marker Analysis Display Style. Inputs are: Marker Shape(Circle, Triangle, Rectangle), Marker Size, Show Text (Boolean), Rounding, TextDisplayMethod (Show All, Show None, Show Predefined). , Marker&Text Display Style - This node will take an input of Points and a matching input of values to create Analysis Display Style in Revit. Use Legend, Marker and Color Settings nodes to fully customize your display style. , New Section Box View By Elements - This node will create new section box around specified elements and apply it to a new 3D View with a specified name. Section box will be offset from the elements by a supplied offset values. , Override Fill Pattern in View - Overrides fill pattern of any element in an active view to specified fill pattern and color, Parameter Group - This node will return all available Parameter Groups, Parameter Types - This node will return all available Paramter Types., PolyCurve by Profile Family Type - It takes an input of a profile family type and extract curves from it converting them to polycurves and curve segments for use in Dynamo (sweeps)., Remap UV Domain - This node takes an input of a reference face and a list of UVs that get remapped into that face's UV Domain. The output is a list of UV Coordinates in that surface's domain. , Rotate Family - This node will rotate a family in Revit around a given axis by supplied angle (in radians). Please remember that every time you run your definition it will rotate family by given angle every time. , Schedule Appearance - This node allows you to control the appearance of the schedule. For now it supports only title, header and body text type. , Schedule Formatting - This node will allow you to control schedule formatiing options like column width, whether a column is hidden, column heading etc. , Schedule Sorting Grouping - This node will allow you to specify sorting/grouping parameters in schedule as well parameters like sorting order, whether its a footer or header. Visit archi-lab.net for more information. , Schedule Title Appearance - This node will override the appearance of the title. , Schedules on Sheets - Queries all schedules and produces two lists: one with all schedules that are placed on sheets and one with schedules that are not placed on sheets., Select Model Lines by Style - This node will select all model lines in the revit project by a line style name. , Slice String - Slices X number of leading or trailing characters from string (boolean true will slice from left while boolean set to false from right), Zoom Fit Type - This node will query up possible zoom fit types that can be used when exporting images from Revit. , Floor Plan by Room - This node will create a view for each Room on the input list. It uses Room's bounding box to set the Crop Region and the offset value (ft) to offset it. , List Contains - This node will check if input list contains any items from another list. ",
            "engine_metadata": "",
            "engine_version": "0.8.0.950",
            "created": "2015-04-10T21:33:01.154Z",
            "full_dependency_versions": [ "2015.4.10" ],
            "full_dependency_ids": [
              {
                "_id": "53e99ce50e5572016a00018a",
                "name": "archi-lab.net"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2015.4.10"
          },
          {
            "_id": "552b17275899bb370500006b",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/70e0accc-900b-4a9d-83e7-647ef716852agregPkg166.zip",
            "contents": "Add Shared Parameter to Project - This node will add a parameter to shared parameter file and then add it to the project. , Apply View Template - This node will allow you to apply a view template to a set of views., Cell Style Settings - This node will generate a Cell Style Settings that can be used to override cell properties. , Change Family Type - Changes family type of a family by passing in an Element and type id of the type we want to change it to. , Color Settings - This node creates color settings for the Analysis Visualization Framework. , Colored Surface Display Style - This node will generate a Colored Surface Display Style from inputs of points, values, and instance surface for analysis to be aplied to. Also, use color and legend settings (part of archi-lab package) to create style colors and visibility., Colored Surface Settings - This node creates settings for the colored surface display style of the Analysis Visualization Framework., Combine by Pattern - Combines two list based on a input pattern of true and false., Create Annotation Tag - This node will create an annotation tag at a given location, of given type and in a supplied view. If only single view is supplied then all tags will be created in that view. , Current Document - Retrieves Current Document, Delete Elements - This node will delete elements from Revit project., Delete Linked Model Keynote Tags - Deletes all Keynote Tags that are tagging elements in the linked model. if element in the linked model has a keynote assigned thus a keynote tag reads a proper value it will not be deleted. , Delete Unnamed Reference Planes - Does just what the name says. , Dispatch - Works exactly like the Dispatch component in Grasshopper. Input a list and a matching pattern of True/False to split list into two lists one containing all True arguments while other all False arguments. , Door Set Handing - Determines door set handing (whether its a left or right handed door). Input takes doors, and output will split them into two lists (right and left)., Duplicate Item Indices - Searches an input list for duplicate entries and lists their index numbers. Couple with Get From List to delete duplicates from a list., Element Ids - This node will query an element id that can be used with Revit nodes. Dynamo Element Id node returns integer value. , Elements Fom Linked File in Room - This node will check what elements from a linked model are inside of any of the rooms in the current model. , Elements in Room - This node will check if any of the elements are inside any of the supplied rooms. , Export Image By View - This node will export an image to any Revit supported file type. It takes input of views, range, file type, size, resolution, zoom and direction as well as file path where images are to be saved. , Fill Pattern - Get Fill Pattern by Name, Filled Region Area - This node will query an area from the filled region, Filled Region Boundary Curves - This node will get the boundary curves for a filled region., Fit Direction Type - This node will query up possible fit direction types that can be used while exporting images from Revit., Floor Plan by Room - This node will create a view for each Room on the input list. It uses Room's bounding box to set the Crop Region and the offset value (ft) to offset it. , Get All Detail Groups - This node will retrieve all instances of Detail Groups in the model., Get All Elements From Linked Model - This node is based on code posted by Julien Benoit. Big thanks to Julien for sharing his work. This node will retrieve all elements of a given category from a given linked model. , Get All Keynote Tags - Selects all Keynote Tags instances in the model. , Get All Views - This node will query all views in the model and return them based on category, Get Design Options - Queries all of the design options currently in the project., Get Documents - Queries all linked Revit files and retrieves their Name, LinkInstance and Document properties., Get Filled Regions - This node will query up all Filled Regions in the project as well as those in the active view only. , Get Level by Name - This node will retrieve a Revit Level Element by its name. , Get Line Style by Name - This node will return a line style object by its name. Line styles can be either Drafting or Model Line Property. , Get Rooms by Level - Filters Rooms by level., Get Text Note Type by Name - This node will select a text note type by name. , Get Unplaced Groups - This node will retrieve all unplaced groups in the model., Get Worksets - Retrieves user worksets from specified document, GH Point to DY Point - Converts CSV Grasshopper export of points into a Dynamo point list. , Group Curves - This node will take any input of flat list of curves and group them into sublists containing \"joinable\" curves that is continous curves. They might form closed curves or open curves. Use PolyCurve.ByJoinedCurves to convert output groups of curves into single PolyCurves, Id to Element - Selects elements in a model from id input (ElementId, string, integer or GUID), Image Export Range - This node will query up possible range options for exporting images., Image File Type - This node will query up all possibe file types that can be used when exporting images from Revit., Image Resolution - This node will query possible image resolution settings to be used when exporting images out of Revit. , Key Schedule - This node will take a key schedule, data and a list of parameters and populate it with infomation from data parameter. Visit www.archi-lab.net for more information on how to prep this node for take off. , Legend Settings - This node sets all settings for the Legend display with Analysis Visualization Framework of Revit. , List Contains - This node will check if input list contains any items from another list. , Marker Settings - This node will generate AnalysisDisplayMarkerAndTextSettings to be used with a Marker Analysis Display Style. Inputs are: Marker Shape(Circle, Triangle, Rectangle), Marker Size, Show Text (Boolean), Rounding, TextDisplayMethod (Show All, Show None, Show Predefined). , Marker&Text Display Style - This node will take an input of Points and a matching input of values to create Analysis Display Style in Revit. Use Legend, Marker and Color Settings nodes to fully customize your display style. , New Section Box View By Elements - This node will create new section box around specified elements and apply it to a new 3D View with a specified name. Section box will be offset from the elements by a supplied offset values. , Override Fill Pattern in View - Overrides fill pattern of any element in an active view to specified fill pattern and color, Parameter Group - This node will return all available Parameter Groups, Parameter Types - This node will return all available Paramter Types., PolyCurve by Profile Family Type - It takes an input of a profile family type and extract curves from it converting them to polycurves and curve segments for use in Dynamo (sweeps)., Remap UV Domain - This node takes an input of a reference face and a list of UVs that get remapped into that face's UV Domain. The output is a list of UV Coordinates in that surface's domain. , Rotate Family - This node will rotate a family in Revit around a given axis by supplied angle (in radians). Please remember that every time you run your definition it will rotate family by given angle every time. , Schedule Appearance - This node allows you to control the appearance of the schedule. For now it supports only title, header and body text type. , Schedule Formatting - This node will allow you to control schedule formatiing options like column width, whether a column is hidden, column heading etc. , Schedule Sorting Grouping - This node will allow you to specify sorting/grouping parameters in schedule as well parameters like sorting order, whether its a footer or header. Visit archi-lab.net for more information. , Schedule Title Appearance - This node will override the appearance of the title. , Schedules on Sheets - Queries all schedules and produces two lists: one with all schedules that are placed on sheets and one with schedules that are not placed on sheets., Select Model Lines by Style - This node will select all model lines in the revit project by a line style name. , Slice String - Slices X number of leading or trailing characters from string (boolean true will slice from left while boolean set to false from right), Zoom Fit Type - This node will query up possible zoom fit types that can be used when exporting images from Revit. , Structural Framing Model Checker - This node will check location lines of all framing members to make sure that they are coincident with the start/end points of the columns. If not, they will be either re-created to be, or simply adjusted. , Get Structural Column Location Line - This node will query the Structural Column for its location curve and if that is a line, it will return it. ",
            "engine_metadata": "",
            "engine_version": "0.8.0.950",
            "created": "2015-04-13T01:08:55.646Z",
            "full_dependency_versions": [ "2015.4.12" ],
            "full_dependency_ids": [
              {
                "_id": "53e99ce50e5572016a00018a",
                "name": "archi-lab.net"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2015.4.12"
          },
          {
            "_id": "55492e2fa8367b986100006d",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/a0192e15-c93a-40c2-a185-ae4f8cfa6469gregPkg291.zip",
            "contents": "Add Shared Parameter to Project - This node will add a parameter to shared parameter file and then add it to the project. , Apply View Template - This node will allow you to apply a view template to a set of views., Cell Style Settings - This node will generate a Cell Style Settings that can be used to override cell properties. , Change Family Type - Changes family type of a family by passing in an Element and type id of the type we want to change it to. , Color Settings - This node creates color settings for the Analysis Visualization Framework. , Colored Surface Display Style - This node will generate a Colored Surface Display Style from inputs of points, values, and instance surface for analysis to be aplied to. Also, use color and legend settings (part of archi-lab package) to create style colors and visibility., Colored Surface Settings - This node creates settings for the colored surface display style of the Analysis Visualization Framework., Combine by Pattern - Combines two list based on a input pattern of true and false., Create Annotation Tag - This node will create an annotation tag at a given location, of given type and in a supplied view. If only single view is supplied then all tags will be created in that view. , Current Document - Retrieves Current Document, Delete Elements - This node will delete elements from Revit project., Delete Linked Model Keynote Tags - Deletes all Keynote Tags that are tagging elements in the linked model. if element in the linked model has a keynote assigned thus a keynote tag reads a proper value it will not be deleted. , Delete Unnamed Reference Planes - Does just what the name says. , Dispatch - Works exactly like the Dispatch component in Grasshopper. Input a list and a matching pattern of True/False to split list into two lists one containing all True arguments while other all False arguments. , Door Set Handing - Determines door set handing (whether its a left or right handed door). Input takes doors, and output will split them into two lists (right and left)., Duplicate Item Indices - Searches an input list for duplicate entries and lists their index numbers. Couple with Get From List to delete duplicates from a list., Element Ids - This node will query an element id that can be used with Revit nodes. Dynamo Element Id node returns integer value. , Elements Fom Linked File in Room - This node will check what elements from a linked model are inside of any of the rooms in the current model. , Elements in Room - This node will check if any of the elements are inside any of the supplied rooms. , Export Image By View - This node will export an image to any Revit supported file type. It takes input of views, range, file type, size, resolution, zoom and direction as well as file path where images are to be saved. , Fill Pattern - Get Fill Pattern by Name, Filled Region Area - This node will query an area from the filled region, Filled Region Boundary Curves - This node will get the boundary curves for a filled region., Fit Direction Type - This node will query up possible fit direction types that can be used while exporting images from Revit., Floor Plan by Room - This node will create a view for each Room on the input list. It uses Room's bounding box to set the Crop Region and the offset value (ft) to offset it. , Get All Detail Groups - This node will retrieve all instances of Detail Groups in the model., Get All Elements From Linked Model - This node is based on code posted by Julien Benoit. Big thanks to Julien for sharing his work. This node will retrieve all elements of a given category from a given linked model. , Get All Keynote Tags - Selects all Keynote Tags instances in the model. , Get All Views - This node will query all views in the model and return them based on category, Get Design Options - Queries all of the design options currently in the project., Get Documents - Queries all linked Revit files and retrieves their Name, LinkInstance and Document properties., Get Filled Regions - This node will query up all Filled Regions in the project as well as those in the active view only. , Get Level by Name - This node will retrieve a Revit Level Element by its name. , Get Line Style by Name - This node will return a line style object by its name. Line styles can be either Drafting or Model Line Property. , Get Rooms by Level - Filters Rooms by level., Get Structural Column Location Line - This node will query the Structural Column for its location curve and if that is a line, it will return it. , Get Text Note Type by Name - This node will select a text note type by name. , Get Unplaced Groups - This node will retrieve all unplaced groups in the model., Get Worksets - Retrieves user worksets from specified document, GH Point to DY Point - Converts CSV Grasshopper export of points into a Dynamo point list. , Group Curves - This node will take any input of flat list of curves and group them into sublists containing \"joinable\" curves that is continous curves. They might form closed curves or open curves. Use PolyCurve.ByJoinedCurves to convert output groups of curves into single PolyCurves, Id to Element - Selects elements in a model from id input (ElementId, string, integer or GUID), Image Export Range - This node will query up possible range options for exporting images., Image File Type - This node will query up all possibe file types that can be used when exporting images from Revit., Image Resolution - This node will query possible image resolution settings to be used when exporting images out of Revit. , Key Schedule - This node will take a key schedule, data and a list of parameters and populate it with infomation from data parameter. Visit www.archi-lab.net for more information on how to prep this node for take off. , Legend Settings - This node sets all settings for the Legend display with Analysis Visualization Framework of Revit. , List Contains - This node will check if input list contains any items from another list. , Marker Settings - This node will generate AnalysisDisplayMarkerAndTextSettings to be used with a Marker Analysis Display Style. Inputs are: Marker Shape(Circle, Triangle, Rectangle), Marker Size, Show Text (Boolean), Rounding, TextDisplayMethod (Show All, Show None, Show Predefined). , Marker&Text Display Style - This node will take an input of Points and a matching input of values to create Analysis Display Style in Revit. Use Legend, Marker and Color Settings nodes to fully customize your display style. , New Section Box View By Elements - This node will create new section box around specified elements and apply it to a new 3D View with a specified name. Section box will be offset from the elements by a supplied offset values. , Override Fill Pattern in View - Overrides fill pattern of any element in an active view to specified fill pattern and color, Parameter Group - This node will return all available Parameter Groups, Parameter Types - This node will return all available Paramter Types., PolyCurve by Profile Family Type - It takes an input of a profile family type and extract curves from it converting them to polycurves and curve segments for use in Dynamo (sweeps)., Remap UV Domain - This node takes an input of a reference face and a list of UVs that get remapped into that face's UV Domain. The output is a list of UV Coordinates in that surface's domain. , Rotate Family - This node will rotate a family in Revit around a given axis by supplied angle (in radians). Please remember that every time you run your definition it will rotate family by given angle every time. , Schedule Appearance - This node allows you to control the appearance of the schedule. For now it supports only title, header and body text type. , Schedule Formatting - This node will allow you to control schedule formatiing options like column width, whether a column is hidden, column heading etc. , Schedule Sorting Grouping - This node will allow you to specify sorting/grouping parameters in schedule as well parameters like sorting order, whether its a footer or header. Visit archi-lab.net for more information. , Schedule Title Appearance - This node will override the appearance of the title. , Schedules on Sheets - Queries all schedules and produces two lists: one with all schedules that are placed on sheets and one with schedules that are not placed on sheets., Select Model Lines by Style - This node will select all model lines in the revit project by a line style name. , Slice String - Slices X number of leading or trailing characters from string (boolean true will slice from left while boolean set to false from right), Structural Framing Model Checker - This node will check location lines of all framing members to make sure that they are coincident with the start/end points of the columns. If not, they will be either re-created to be, or simply adjusted. , Zoom Fit Type - This node will query up possible zoom fit types that can be used when exporting images from Revit. , Get Elements by Category_Level - This node will collect elements by Category and Level. , Phase Demolished - This node will query an elements for Phase that it was demolished in. If element was not demolished at any time it will return -1 as an invalid element id. , Transform Origin - This node will query an element for an origin point of its geometry tranform property. ",
            "engine_metadata": "",
            "engine_version": "0.8.0.950",
            "created": "2015-05-05T20:55:11.019Z",
            "full_dependency_versions": [ "2015.5.5" ],
            "full_dependency_ids": [
              {
                "_id": "53e99ce50e5572016a00018a",
                "name": "archi-lab.net"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2015.5.5"
          },
          {
            "_id": "55930ccef2ae5a9a07000102",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/e3716dcb-6bb4-43c8-9384-7dcc18fd58f5gregPkg968.zip",
            "contents": "Add Shared Parameter to Project - This node will add a parameter to shared parameter file and then add it to the project. , Apply View Template - This node will allow you to apply a view template to a set of views., Cell Style Settings - This node will generate a Cell Style Settings that can be used to override cell properties. , Change Family Type - Changes family type of a family by passing in an Element and type id of the type we want to change it to. , Clear List - This node will remove all Null and Empty Lists from any list. , Color Settings - This node creates color settings for the Analysis Visualization Framework. , Colored Surface Display Style - This node will generate a Colored Surface Display Style from inputs of points, values, and instance surface for analysis to be aplied to. Also, use color and legend settings (part of archi-lab package) to create style colors and visibility., Colored Surface Settings - This node creates settings for the colored surface display style of the Analysis Visualization Framework., Combine by Pattern - Combines two list based on a input pattern of true and false., Create Annotation Tag - This node will create an annotation tag at a given location, of given type and in a supplied view. If only single view is supplied then all tags will be created in that view. , Current Document - Retrieves Current Document, Delete Elements - This node will delete elements from Revit project., Delete Linked Model Keynote Tags - Deletes all Keynote Tags that are tagging elements in the linked model. if element in the linked model has a keynote assigned thus a keynote tag reads a proper value it will not be deleted. , Delete Unnamed Reference Planes - Does just what the name says. , Dispatch - Works exactly like the Dispatch component in Grasshopper. Input a list and a matching pattern of True/False to split list into two lists one containing all True arguments while other all False arguments. , Door Set Handing - Determines door set handing (whether its a left or right handed door). Input takes doors, and output will split them into two lists (right and left)., Duplicate Item Indices - Searches an input list for duplicate entries and lists their index numbers. Couple with Get From List to delete duplicates from a list., Element Ids - This node will query an element id that can be used with Revit nodes. Dynamo Element Id node returns integer value. , Elements Fom Linked File in Room - This node will check what elements from a linked model are inside of any of the rooms in the current model. , Elements in Room - This node will check if any of the elements are inside any of the supplied rooms. , Fill Pattern - Get Fill Pattern by Name, Filled Region Area - This node will query an area from the filled region, Filled Region Boundary Curves - This node will get the boundary curves for a filled region., Get All Detail Groups - This node will retrieve all instances of Detail Groups in the model., Get All Elements From Linked Model - This node is based on code posted by Julien Benoit. Big thanks to Julien for sharing his work. This node will retrieve all elements of a given category from a given linked model. , Get All Keynote Tags - Selects all Keynote Tags instances in the model. , Get All Views - This node will query all views in the model and return them based on category, Get Design Options - Queries all of the design options currently in the project., Get Documents - Queries all linked Revit files and retrieves their Name, LinkInstance and Document properties., Get Filled Regions - This node will query up all Filled Regions in the project as well as those in the active view only. , Get Level by Name - This node will retrieve a Revit Level Element by its name. , Get Line Style by Name - This node will return a line style object by its name. Line styles can be either Drafting or Model Line Property. , Get Rooms by Level - Filters Rooms by level., Get Text Note Type by Name - This node will select a text note type by name. , Get Unplaced Groups - This node will retrieve all unplaced groups in the model., Get Worksets - Retrieves user worksets from specified document, GH Point to DY Point - Converts CSV Grasshopper export of points into a Dynamo point list. , Group Curves - This node will take any input of flat list of curves and group them into sublists containing \"joinable\" curves that is continous curves. They might form closed curves or open curves. Use PolyCurve.ByJoinedCurves to convert output groups of curves into single PolyCurves, Id to Element - Selects elements in a model from id input (ElementId, string, integer or GUID), Key Schedule - This node will take a key schedule, data and a list of parameters and populate it with infomation from data parameter. Visit www.archi-lab.net for more information on how to prep this node for take off. , Legend Settings - This node sets all settings for the Legend display with Analysis Visualization Framework of Revit. , Marker Settings - This node will generate AnalysisDisplayMarkerAndTextSettings to be used with a Marker Analysis Display Style. Inputs are: Marker Shape(Circle, Triangle, Rectangle), Marker Size, Show Text (Boolean), Rounding, TextDisplayMethod (Show All, Show None, Show Predefined). , Marker&Text Display Style - This node will take an input of Points and a matching input of values to create Analysis Display Style in Revit. Use Legend, Marker and Color Settings nodes to fully customize your display style. , Mass Addition - This node will attempt to sum all elements contained within it. , New Section Box View By Elements - This node will create new section box around specified elements and apply it to a new 3D View with a specified name. Section box will be offset from the elements by a supplied offset values. , Override Fill Pattern in View - Overrides fill pattern of any element in an active view to specified fill pattern and color, Parameter Group - This node will return all available Parameter Groups, Parameter Types - This node will return all available Paramter Types., PolyCurve by Profile Family Type - It takes an input of a profile family type and extract curves from it converting them to polycurves and curve segments for use in Dynamo (sweeps)., Remap UV Domain - This node takes an input of a reference face and a list of UVs that get remapped into that face's UV Domain. The output is a list of UV Coordinates in that surface's domain. , Rotate Family - This node will rotate a family in Revit around a given axis by supplied angle (in radians). Please remember that every time you run your definition it will rotate family by given angle every time. , Schedule Appearance - This node allows you to control the appearance of the schedule. For now it supports only title, header and body text type. , Schedule Formatting - This node will allow you to control schedule formatiing options like column width, whether a column is hidden, column heading etc. , Schedule Sorting Grouping - This node will allow you to specify sorting/grouping parameters in schedule as well parameters like sorting order, whether its a footer or header. Visit archi-lab.net for more information. , Schedule Title Appearance - This node will override the appearance of the title. , Schedules on Sheets - Queries all schedules and produces two lists: one with all schedules that are placed on sheets and one with schedules that are not placed on sheets., Select Model Lines by Style - This node will select all model lines in the revit project by a line style name. , Slice String - Slices X number of leading or trailing characters from string (boolean true will slice from left while boolean set to false from right)",
            "engine_metadata": "",
            "engine_version": "0.8.0.950",
            "created": "2015-06-30T21:40:30.266Z",
            "full_dependency_versions": [ "2015.6.30" ],
            "full_dependency_ids": [
              {
                "_id": "53e99ce50e5572016a00018a",
                "name": "archi-lab.net"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2015.6.30"
          },
          {
            "_id": "559add1cf2ae5a9a07000116",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/0ced7b4f-1b61-4d67-a579-672545c6e129gregPkg422.zip",
            "contents": "Add Shared Parameter to Project - This node will add a parameter to shared parameter file and then add it to the project. , Apply View Template - This node will allow you to apply a view template to a set of views., Cell Style Settings - This node will generate a Cell Style Settings that can be used to override cell properties. , Change Family Type - Changes family type of a family by passing in an Element and type id of the type we want to change it to. , Clear List - This node will remove all Null and Empty Lists from any list. , Color Settings - This node creates color settings for the Analysis Visualization Framework. , Colored Surface Display Style - This node will generate a Colored Surface Display Style from inputs of points, values, and instance surface for analysis to be aplied to. Also, use color and legend settings (part of archi-lab package) to create style colors and visibility., Colored Surface Settings - This node creates settings for the colored surface display style of the Analysis Visualization Framework., Combine by Pattern - Combines two list based on a input pattern of true and false., Create Annotation Tag - This node will create an annotation tag at a given location, of given type and in a supplied view. If only single view is supplied then all tags will be created in that view. , Current Document - Retrieves Current Document, Delete Elements - This node will delete elements from Revit project., Delete Linked Model Keynote Tags - Deletes all Keynote Tags that are tagging elements in the linked model. if element in the linked model has a keynote assigned thus a keynote tag reads a proper value it will not be deleted. , Delete Unnamed Reference Planes - Does just what the name says. , Dispatch - Works exactly like the Dispatch component in Grasshopper. Input a list and a matching pattern of True/False to split list into two lists one containing all True arguments while other all False arguments. , Door Set Handing - Determines door set handing (whether its a left or right handed door). Input takes doors, and output will split them into two lists (right and left)., Duplicate Item Indices - Searches an input list for duplicate entries and lists their index numbers. Couple with Get From List to delete duplicates from a list., Element Ids - This node will query an element id that can be used with Revit nodes. Dynamo Element Id node returns integer value. , Elements Fom Linked File in Room - This node will check what elements from a linked model are inside of any of the rooms in the current model. , Elements in Room - This node will check if any of the elements are inside any of the supplied rooms. , Fill Pattern - Get Fill Pattern by Name, Filled Region Area - This node will query an area from the filled region, Filled Region Boundary Curves - This node will get the boundary curves for a filled region., Get All Detail Groups - This node will retrieve all instances of Detail Groups in the model., Get All Elements From Linked Model - This node is based on code posted by Julien Benoit. Big thanks to Julien for sharing his work. This node will retrieve all elements of a given category from a given linked model. , Get All Keynote Tags - Selects all Keynote Tags instances in the model. , Get All Views - This node will query all views in the model and return them based on category, Get Design Options - Queries all of the design options currently in the project., Get Documents - Queries all linked Revit files and retrieves their Name, LinkInstance and Document properties., Get Filled Regions - This node will query up all Filled Regions in the project as well as those in the active view only. , Get Level by Name - This node will retrieve a Revit Level Element by its name. , Get Line Style by Name - This node will return a line style object by its name. Line styles can be either Drafting or Model Line Property. , Get Rooms by Level - Filters Rooms by level., Get Text Note Type by Name - This node will select a text note type by name. , Get Unplaced Groups - This node will retrieve all unplaced groups in the model., Get Worksets - Retrieves user worksets from specified document, GH Point to DY Point - Converts CSV Grasshopper export of points into a Dynamo point list. , Group Curves - This node will take any input of flat list of curves and group them into sublists containing \"joinable\" curves that is continous curves. They might form closed curves or open curves. Use PolyCurve.ByJoinedCurves to convert output groups of curves into single PolyCurves, Id to Element - Selects elements in a model from id input (ElementId, string, integer or GUID), Key Schedule - This node will take a key schedule, data and a list of parameters and populate it with infomation from data parameter. Visit www.archi-lab.net for more information on how to prep this node for take off. , Legend Settings - This node sets all settings for the Legend display with Analysis Visualization Framework of Revit. , Marker Settings - This node will generate AnalysisDisplayMarkerAndTextSettings to be used with a Marker Analysis Display Style. Inputs are: Marker Shape(Circle, Triangle, Rectangle), Marker Size, Show Text (Boolean), Rounding, TextDisplayMethod (Show All, Show None, Show Predefined). , Marker&Text Display Style - This node will take an input of Points and a matching input of values to create Analysis Display Style in Revit. Use Legend, Marker and Color Settings nodes to fully customize your display style. , Mass Addition - This node will attempt to sum all elements contained within it. , New Section Box View By Elements - This node will create new section box around specified elements and apply it to a new 3D View with a specified name. Section box will be offset from the elements by a supplied offset values. , Override Fill Pattern in View - Overrides fill pattern of any element in an active view to specified fill pattern and color, Parameter Group - This node will return all available Parameter Groups, Parameter Types - This node will return all available Paramter Types., PolyCurve by Profile Family Type - It takes an input of a profile family type and extract curves from it converting them to polycurves and curve segments for use in Dynamo (sweeps)., Remap UV Domain - This node takes an input of a reference face and a list of UVs that get remapped into that face's UV Domain. The output is a list of UV Coordinates in that surface's domain. , Rotate Family - This node will rotate a family in Revit around a given axis by supplied angle (in radians). Please remember that every time you run your definition it will rotate family by given angle every time. , Schedule Appearance - This node allows you to control the appearance of the schedule. For now it supports only title, header and body text type. , Schedule Formatting - This node will allow you to control schedule formatiing options like column width, whether a column is hidden, column heading etc. , Schedule Sorting Grouping - This node will allow you to specify sorting/grouping parameters in schedule as well parameters like sorting order, whether its a footer or header. Visit archi-lab.net for more information. , Schedule Title Appearance - This node will override the appearance of the title. , Schedules on Sheets - Queries all schedules and produces two lists: one with all schedules that are placed on sheets and one with schedules that are not placed on sheets., Select Model Lines by Style - This node will select all model lines in the revit project by a line style name. , Slice String - Slices X number of leading or trailing characters from string (boolean true will slice from left while boolean set to false from right), View Sets - This node will query up all user defined view sets in a project and return their names., String From List - This node will take an input of a list or nested list and then join each element in a list with a given seperator while adding a suffix., Rename Files - This node will use an \"identifier\" to pick out files from a supplied directory to rename files to a new name supplied. Please make sure to match list lengths of identifier and new name inputs., Print Settings - This node will query up all user defined print settings. , Print Range - This node will query available print range settings., Print PDF - This node will allow you to initiate a printing routine in revit from a set of views/sheets, printer name, print settings and print range. , Local Printers Names - This node will query all locally installed printers and return their names., Get Views from View Set - This node will take a name of a view set and return views/sheet elements contained in it. , Get Built In Parameter - This node will take an input of a built in parameter name and element to return that parameters value. ",
            "engine_metadata": "",
            "engine_version": "0.8.0.950",
            "created": "2015-07-06T19:55:08.041Z",
            "full_dependency_versions": [ "2015.7.6" ],
            "full_dependency_ids": [
              {
                "_id": "53e99ce50e5572016a00018a",
                "name": "archi-lab.net"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2015.7.6"
          },
          {
            "_id": "55a7e9a4662bf0e90800001d",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/d084a32b-3e51-4d24-aa1b-bec50a9a7008gregPkg49.zip",
            "contents": "Add Shared Parameter to Project - This node will add a parameter to shared parameter file and then add it to the project. , Apply View Template - This node will allow you to apply a view template to a set of views., Cell Style Settings - This node will generate a Cell Style Settings that can be used to override cell properties. , Change Family Type - Changes family type of a family by passing in an Element and type id of the type we want to change it to. , Clear List - This node will remove all Null and Empty Lists from any list. , Color Settings - This node creates color settings for the Analysis Visualization Framework. , Colored Surface Display Style - This node will generate a Colored Surface Display Style from inputs of points, values, and instance surface for analysis to be aplied to. Also, use color and legend settings (part of archi-lab package) to create style colors and visibility., Colored Surface Settings - This node creates settings for the colored surface display style of the Analysis Visualization Framework., Combine by Pattern - Combines two list based on a input pattern of true and false., Create Annotation Tag - This node will create an annotation tag at a given location, of given type and in a supplied view. If only single view is supplied then all tags will be created in that view. , Current Document - Retrieves Current Document, Delete Elements - This node will delete elements from Revit project., Delete Linked Model Keynote Tags - Deletes all Keynote Tags that are tagging elements in the linked model. if element in the linked model has a keynote assigned thus a keynote tag reads a proper value it will not be deleted. , Delete Unnamed Reference Planes - Does just what the name says. , Dispatch - Works exactly like the Dispatch component in Grasshopper. Input a list and a matching pattern of True/False to split list into two lists one containing all True arguments while other all False arguments. , Door Set Handing - Determines door set handing (whether its a left or right handed door). Input takes doors, and output will split them into two lists (right and left)., Duplicate Item Indices - Searches an input list for duplicate entries and lists their index numbers. Couple with Get From List to delete duplicates from a list., Element Ids - This node will query an element id that can be used with Revit nodes. Dynamo Element Id node returns integer value. , Elements Fom Linked File in Room - This node will check what elements from a linked model are inside of any of the rooms in the current model. , Elements in Room - This node will check if any of the elements are inside any of the supplied rooms. , Elements on Sheet - This node will return elements on sheet., Fill Pattern - Get Fill Pattern by Name, Filled Region Area - This node will query an area from the filled region, Filled Region Boundary Curves - This node will get the boundary curves for a filled region., Get All Detail Groups - This node will retrieve all instances of Detail Groups in the model., Get All Dimension Styles - This node will query all of the available dimension styles (this includes linear as well as arc, circle etc). , Get All Elements From Linked Model - This node is based on code posted by Julien Benoit. Big thanks to Julien for sharing his work. This node will retrieve all elements of a given category from a given linked model. , Get All Keynote Tags - Selects all Keynote Tags instances in the model. , Get All Views - This node will query all views in the model and return them based on category, Get Built In Parameter - This node will take an input of a built in parameter name and element to return that parameters value. , Get Design Options - Queries all of the design options currently in the project., Get Documents - Queries all linked Revit files and retrieves their Name, LinkInstance and Document properties., Get Elements by Category/Level - This node will filter for all elements of a given category on a given level., Get Filled Regions - This node will query up all Filled Regions in the project as well as those in the active view only. , Get Level by Name - This node will retrieve a Revit Level Element by its name. , Get Line Style by Name - This node will return a line style object by its name. Line styles can be either Drafting or Model Line Property. , Get Rooms by Level - Filters Rooms by level., Get Tagged Element Id - Retrives an Element Id from input of element tags. For example if wall tags are inputted it will return tagged wall Ids., Get Text Note Type by Name - This node will select a text note type by name. , Get Unplaced Groups - This node will retrieve all unplaced groups in the model., Get Views from View Set - This node will take a name of a view set and return views/sheet elements contained in it. , Get Worksets - Retrieves user worksets from specified document, GH Point to DY Point - Converts CSV Grasshopper export of points into a Dynamo point list. , Group Curves - This node will take any input of flat list of curves and group them into sublists containing \"joinable\" curves that is continous curves. They might form closed curves or open curves. Use PolyCurve.ByJoinedCurves to convert output groups of curves into single PolyCurves, Id to Element - Selects elements in a model from id input (ElementId, string, integer or GUID), Key Schedule - This node will take a key schedule, data and a list of parameters and populate it with infomation from data parameter. Visit www.archi-lab.net for more information on how to prep this node for take off. , Legend Settings - This node sets all settings for the Legend display with Analysis Visualization Framework of Revit. , Local Printers Names - This node will query all locally installed printers and return their names., Marker Settings - This node will generate AnalysisDisplayMarkerAndTextSettings to be used with a Marker Analysis Display Style. Inputs are: Marker Shape(Circle, Triangle, Rectangle), Marker Size, Show Text (Boolean), Rounding, TextDisplayMethod (Show All, Show None, Show Predefined). , Marker&Text Display Style - This node will take an input of Points and a matching input of values to create Analysis Display Style in Revit. Use Legend, Marker and Color Settings nodes to fully customize your display style. , Mass Addition - This node will attempt to sum all elements contained within it. , New Section Box View By Elements - This node will create new section box around specified elements and apply it to a new 3D View with a specified name. Section box will be offset from the elements by a supplied offset values. , Override Fill Pattern in View - Overrides fill pattern of any element in an active view to specified fill pattern and color, Parameter Group - This node will return all available Parameter Groups, Parameter Types - This node will return all available Paramter Types., Phase Demolished - This node will query a Phase Demolished setting of an element and return phase id. If id is -1 that means that element was not demolished. , PolyCurve by Profile Family Type - It takes an input of a profile family type and extract curves from it converting them to polycurves and curve segments for use in Dynamo (sweeps)., Print PDF - This node will allow you to initiate a printing routine in revit from a set of views/sheets, printer name, print settings and print range. , Print Range - This node will query available print range settings., Print Settings - This node will query up all user defined print settings. , Remap UV Domain - This node takes an input of a reference face and a list of UVs that get remapped into that face's UV Domain. The output is a list of UV Coordinates in that surface's domain. , Rename Files - This node will use an \"identifier\" to pick out files from a supplied directory to rename files to a new name supplied. Please make sure to match list lengths of identifier and new name inputs., Rotate Family - This node will rotate a family in Revit around a given axis by supplied angle (in radians). Please remember that every time you run your definition it will rotate family by given angle every time. , Schedule Appearance - This node allows you to control the appearance of the schedule. For now it supports only title, header and body text type. , Schedule Formatting - This node will allow you to control schedule formatiing options like column width, whether a column is hidden, column heading etc. , Schedule Sorting Grouping - This node will allow you to specify sorting/grouping parameters in schedule as well parameters like sorting order, whether its a footer or header. Visit archi-lab.net for more information. , Schedule Title Appearance - This node will override the appearance of the title. , Schedules on Sheets - Queries all schedules and produces two lists: one with all schedules that are placed on sheets and one with schedules that are not placed on sheets., Select Model Lines by Style - This node will select all model lines in the revit project by a line style name. , Set BuiltIn Parameter - This node will take an input of a built in parameter name and set that parameter to given value for given elements. , Slice String - Slices X number of leading or trailing characters from string (boolean true will slice from left while boolean set to false from right), String From List - This node will take an input of a list or nested list and then join each element in a list with a given seperator while adding a suffix., View Sets - This node will query up all user defined view sets in a project and return their names.",
            "engine_metadata": "",
            "engine_version": "0.8.0.950",
            "created": "2015-07-16T17:28:04.414Z",
            "full_dependency_versions": [ "2015.7.16" ],
            "full_dependency_ids": [
              {
                "_id": "53e99ce50e5572016a00018a",
                "name": "archi-lab.net"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2015.7.16"
          },
          {
            "_id": "55ad0405662bf0e90800002e",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/3db2d3a7-54bf-43e2-9663-13fc89a4e09cgregPkg409.zip",
            "contents": "Add Shared Parameter to Project - This node will add a parameter to shared parameter file and then add it to the project. , Apply View Template - This node will allow you to apply a view template to a set of views., Cell Style Settings - This node will generate a Cell Style Settings that can be used to override cell properties. , Change Family Type - Changes family type of a family by passing in an Element and type id of the type we want to change it to. , Clear List - This node will remove all Null and Empty Lists from any list. , Color Settings - This node creates color settings for the Analysis Visualization Framework. , Colored Surface Display Style - This node will generate a Colored Surface Display Style from inputs of points, values, and instance surface for analysis to be aplied to. Also, use color and legend settings (part of archi-lab package) to create style colors and visibility., Colored Surface Settings - This node creates settings for the colored surface display style of the Analysis Visualization Framework., Combine by Pattern - Combines two list based on a input pattern of true and false., Create Annotation Tag - This node will create an annotation tag at a given location, of given type and in a supplied view. If only single view is supplied then all tags will be created in that view. , Current Document - Retrieves Current Document, Delete Elements - This node will delete elements from Revit project., Delete Linked Model Keynote Tags - Deletes all Keynote Tags that are tagging elements in the linked model. if element in the linked model has a keynote assigned thus a keynote tag reads a proper value it will not be deleted. , Delete Unnamed Reference Planes - Does just what the name says. , Dispatch - Works exactly like the Dispatch component in Grasshopper. Input a list and a matching pattern of True/False to split list into two lists one containing all True arguments while other all False arguments. , Door Set Handing - Determines door set handing (whether its a left or right handed door). Input takes doors, and output will split them into two lists (right and left)., Duplicate Item Indices - Searches an input list for duplicate entries and lists their index numbers. Couple with Get From List to delete duplicates from a list., Element Ids - This node will query an element id that can be used with Revit nodes. Dynamo Element Id node returns integer value. , Elements Fom Linked File in Room - This node will check what elements from a linked model are inside of any of the rooms in the current model. , Elements in Room - This node will check if any of the elements are inside any of the supplied rooms. , Elements on Sheet - This node will return elements on sheet., Fill Pattern - Get Fill Pattern by Name, Filled Region Area - This node will query an area from the filled region, Filled Region Boundary Curves - This node will get the boundary curves for a filled region., Get All Detail Groups - This node will retrieve all instances of Detail Groups in the model., Get All Dimension Styles - This node will query all of the available dimension styles (this includes linear as well as arc, circle etc). , Get All Elements From Linked Model - This node is based on code posted by Julien Benoit. Big thanks to Julien for sharing his work. This node will retrieve all elements of a given category from a given linked model. , Get All Keynote Tags - Selects all Keynote Tags instances in the model. , Get All Views - This node will query all views in the model and return them based on category, Get Built In Parameter - This node will take an input of a built in parameter name and element to return that parameters value. , Get Design Options - Queries all of the design options currently in the project., Get Documents - Queries all linked Revit files and retrieves their Name, LinkInstance and Document properties., Get Elements by Category/Level - This node will filter for all elements of a given category on a given level., Get Filled Regions - This node will query up all Filled Regions in the project as well as those in the active view only. , Get Level by Name - This node will retrieve a Revit Level Element by its name. , Get Line Style by Name - This node will return a line style object by its name. Line styles can be either Drafting or Model Line Property. , Get Rooms by Level - Filters Rooms by level., Get Tagged Element Id - Retrives an Element Id from input of element tags. For example if wall tags are inputted it will return tagged wall Ids., Get Text Note Type by Name - This node will select a text note type by name. , Get Unplaced Groups - This node will retrieve all unplaced groups in the model., Get Views from View Set - This node will take a name of a view set and return views/sheet elements contained in it. , Get Worksets - Retrieves user worksets from specified document, GH Point to DY Point - Converts CSV Grasshopper export of points into a Dynamo point list. , Group Curves - This node will take any input of flat list of curves and group them into sublists containing \"joinable\" curves that is continous curves. They might form closed curves or open curves. Use PolyCurve.ByJoinedCurves to convert output groups of curves into single PolyCurves, Id to Element - Selects elements in a model from id input (ElementId, string, integer or GUID), Key Schedule - This node will take a key schedule, data and a list of parameters and populate it with infomation from data parameter. Visit www.archi-lab.net for more information on how to prep this node for take off. , Legend Settings - This node sets all settings for the Legend display with Analysis Visualization Framework of Revit. , Local Printers Names - This node will query all locally installed printers and return their names., Marker Settings - This node will generate AnalysisDisplayMarkerAndTextSettings to be used with a Marker Analysis Display Style. Inputs are: Marker Shape(Circle, Triangle, Rectangle), Marker Size, Show Text (Boolean), Rounding, TextDisplayMethod (Show All, Show None, Show Predefined). , Marker&Text Display Style - This node will take an input of Points and a matching input of values to create Analysis Display Style in Revit. Use Legend, Marker and Color Settings nodes to fully customize your display style. , Mass Addition - This node will attempt to sum all elements contained within it. , New Section Box View By Elements - This node will create new section box around specified elements and apply it to a new 3D View with a specified name. Section box will be offset from the elements by a supplied offset values. , Override Fill Pattern in View - Overrides fill pattern of any element in an active view to specified fill pattern and color, Parameter Group - This node will return all available Parameter Groups, Parameter Types - This node will return all available Paramter Types., Phase Demolished - This node will query a Phase Demolished setting of an element and return phase id. If id is -1 that means that element was not demolished. , PolyCurve by Profile Family Type - It takes an input of a profile family type and extract curves from it converting them to polycurves and curve segments for use in Dynamo (sweeps)., Print PDF - This node will allow you to initiate a printing routine in revit from a set of views/sheets, printer name, print settings and print range. , Print Range - This node will query available print range settings., Print Settings - This node will query up all user defined print settings. , Remap UV Domain - This node takes an input of a reference face and a list of UVs that get remapped into that face's UV Domain. The output is a list of UV Coordinates in that surface's domain. , Rename Files - This node will use an \"identifier\" to pick out files from a supplied directory to rename files to a new name supplied. Please make sure to match list lengths of identifier and new name inputs., Rotate Family - This node will rotate a family in Revit around a given axis by supplied angle (in radians). Please remember that every time you run your definition it will rotate family by given angle every time. , Schedule Appearance - This node allows you to control the appearance of the schedule. For now it supports only title, header and body text type. , Schedule Formatting - This node will allow you to control schedule formatiing options like column width, whether a column is hidden, column heading etc. , Schedule Sorting Grouping - This node will allow you to specify sorting/grouping parameters in schedule as well parameters like sorting order, whether its a footer or header. Visit archi-lab.net for more information. , Schedule Title Appearance - This node will override the appearance of the title. , Schedules on Sheets - Queries all schedules and produces two lists: one with all schedules that are placed on sheets and one with schedules that are not placed on sheets., Select Model Lines by Style - This node will select all model lines in the revit project by a line style name. , Set BuiltIn Parameter - This node will take an input of a built in parameter name and set that parameter to given value for given elements. , Slice String - Slices X number of leading or trailing characters from string (boolean true will slice from left while boolean set to false from right), String From List - This node will take an input of a list or nested list and then join each element in a list with a given seperator while adding a suffix., View Sets - This node will query up all user defined view sets in a project and return their names.",
            "engine_metadata": "",
            "engine_version": "0.8.0.950",
            "created": "2015-07-20T14:21:57.835Z",
            "full_dependency_versions": [ "2015.7.20" ],
            "full_dependency_ids": [
              {
                "_id": "53e99ce50e5572016a00018a",
                "name": "archi-lab.net"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2015.7.20"
          },
          {
            "_id": "55bff393662bf0e908000070",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/fa4ab1c3-dc16-4e80-aad2-42cfa55f592fgregPkg849.zip",
            "contents": "Add Shared Parameter to Project - This node will add a parameter to shared parameter file and then add it to the project. , Apply View Template - This node will allow you to apply a view template to a set of views., Cell Style Settings - This node will generate a Cell Style Settings that can be used to override cell properties. , Change Family Type - Changes family type of a family by passing in an Element and type id of the type we want to change it to. , Clear List - This node will remove all Null and Empty Lists from any list. , Color Settings - This node creates color settings for the Analysis Visualization Framework. , Colored Surface Display Style - This node will generate a Colored Surface Display Style from inputs of points, values, and instance surface for analysis to be aplied to. Also, use color and legend settings (part of archi-lab package) to create style colors and visibility., Colored Surface Settings - This node creates settings for the colored surface display style of the Analysis Visualization Framework., Combine by Pattern - Combines two list based on a input pattern of true and false., Create Annotation Tag - This node will create an annotation tag at a given location, of given type and in a supplied view. If only single view is supplied then all tags will be created in that view. , Current Document - Retrieves Current Document, Delete Elements - This node will delete elements from Revit project., Delete Linked Model Keynote Tags - Deletes all Keynote Tags that are tagging elements in the linked model. if element in the linked model has a keynote assigned thus a keynote tag reads a proper value it will not be deleted. , Delete Unnamed Reference Planes - Does just what the name says. , Dispatch - Works exactly like the Dispatch component in Grasshopper. Input a list and a matching pattern of True/False to split list into two lists one containing all True arguments while other all False arguments. , Door Set Handing - Determines door set handing (whether its a left or right handed door). Input takes doors, and output will split them into two lists (right and left)., Duplicate Item Indices - Searches an input list for duplicate entries and lists their index numbers. Couple with Get From List to delete duplicates from a list., Element Ids - This node will query an element id that can be used with Revit nodes. Dynamo Element Id node returns integer value. , Elements Fom Linked File in Room - This node will check what elements from a linked model are inside of any of the rooms in the current model. , Elements in Room - This node will check if any of the elements are inside any of the supplied rooms. , Elements on Sheet - This node will return elements on sheet., Fill Pattern - Get Fill Pattern by Name, Filled Region Area - This node will query an area from the filled region, Filled Region Boundary Curves - This node will get the boundary curves for a filled region., Get All Detail Groups - This node will retrieve all instances of Detail Groups in the model., Get All Dimension Styles - This node will query all of the available dimension styles (this includes linear as well as arc, circle etc). , Get All Elements From Linked Model - This node is based on code posted by Julien Benoit. Big thanks to Julien for sharing his work. This node will retrieve all elements of a given category from a given linked model. , Get All Keynote Tags - Selects all Keynote Tags instances in the model. , Get All Views - This node will query all views in the model and return them based on category, Get Built In Parameter - This node will take an input of a built in parameter name and element to return that parameters value. , Get Design Options - Queries all of the design options currently in the project., Get Documents - Queries all linked Revit files and retrieves their Name, LinkInstance and Document properties., Get Elements by Category/Level - This node will filter for all elements of a given category on a given level., Get Filled Regions - This node will query up all Filled Regions in the project as well as those in the active view only. , Get Level by Name - This node will retrieve a Revit Level Element by its name. , Get Line Style by Name - This node will return a line style object by its name. Line styles can be either Drafting or Model Line Property. , Get Rooms by Level - Filters Rooms by level., Get Text Note Type by Name - This node will select a text note type by name. , Get Unplaced Groups - This node will retrieve all unplaced groups in the model., Get Views from View Set - This node will take a name of a view set and return views/sheet elements contained in it. , Get Worksets - Retrieves user worksets from specified document, GH Point to DY Point - Converts CSV Grasshopper export of points into a Dynamo point list. , Group Curves - This node will take any input of flat list of curves and group them into sublists containing \"joinable\" curves that is continous curves. They might form closed curves or open curves. Use PolyCurve.ByJoinedCurves to convert output groups of curves into single PolyCurves, Id to Element - Selects elements in a model from id input (ElementId, string, integer or GUID), Key Schedule - This node will take a key schedule, data and a list of parameters and populate it with infomation from data parameter. Visit www.archi-lab.net for more information on how to prep this node for take off. , Legend Settings - This node sets all settings for the Legend display with Analysis Visualization Framework of Revit. , Local Printers Names - This node will query all locally installed printers and return their names., Marker Settings - This node will generate AnalysisDisplayMarkerAndTextSettings to be used with a Marker Analysis Display Style. Inputs are: Marker Shape(Circle, Triangle, Rectangle), Marker Size, Show Text (Boolean), Rounding, TextDisplayMethod (Show All, Show None, Show Predefined). , Marker&Text Display Style - This node will take an input of Points and a matching input of values to create Analysis Display Style in Revit. Use Legend, Marker and Color Settings nodes to fully customize your display style. , Mass Addition - This node will attempt to sum all elements contained within it. , New Section Box View By Elements - This node will create new section box around specified elements and apply it to a new 3D View with a specified name. Section box will be offset from the elements by a supplied offset values. , Override Fill Pattern in View - Overrides fill pattern of any element in an active view to specified fill pattern and color, Parameter Group - This node will return all available Parameter Groups, Parameter Types - This node will return all available Paramter Types., Phase Demolished - This node will query a Phase Demolished setting of an element and return phase id. If id is -1 that means that element was not demolished. , PolyCurve by Profile Family Type - It takes an input of a profile family type and extract curves from it converting them to polycurves and curve segments for use in Dynamo (sweeps)., Print PDF - This node will allow you to initiate a printing routine in revit from a set of views/sheets, printer name, print settings and print range. , Print Range - This node will query available print range settings., Print Settings - This node will query up all user defined print settings. , Remap UV Domain - This node takes an input of a reference face and a list of UVs that get remapped into that face's UV Domain. The output is a list of UV Coordinates in that surface's domain. , Rename Files - This node will use an \"identifier\" to pick out files from a supplied directory to rename files to a new name supplied. Please make sure to match list lengths of identifier and new name inputs., Rotate Family - This node will rotate a family in Revit around a given axis by supplied angle (in radians). Please remember that every time you run your definition it will rotate family by given angle every time. , Schedule Appearance - This node allows you to control the appearance of the schedule. For now it supports only title, header and body text type. , Schedule Formatting - This node will allow you to control schedule formatiing options like column width, whether a column is hidden, column heading etc. , Schedule Sorting Grouping - This node will allow you to specify sorting/grouping parameters in schedule as well parameters like sorting order, whether its a footer or header. Visit archi-lab.net for more information. , Schedule Title Appearance - This node will override the appearance of the title. , Schedules on Sheets - Queries all schedules and produces two lists: one with all schedules that are placed on sheets and one with schedules that are not placed on sheets., Select Model Lines by Style - This node will select all model lines in the revit project by a line style name. , Set BuiltIn Parameter - This node will take an input of a built in parameter name and set that parameter to given value for given elements. , Slice String - Slices X number of leading or trailing characters from string (boolean true will slice from left while boolean set to false from right), String From List - This node will take an input of a list or nested list and then join each element in a list with a given seperator while adding a suffix., View Sets - This node will query up all user defined view sets in a project and return their names., Isolate in View - This node will take input of elements and a view to isolate selected elements in a view.",
            "engine_metadata": "",
            "engine_version": "0.8.1.1942",
            "created": "2015-08-03T23:04:51.514Z",
            "full_dependency_versions": [ "2015.8.3" ],
            "full_dependency_ids": [
              {
                "_id": "53e99ce50e5572016a00018a",
                "name": "archi-lab.net"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2015.8.3"
          },
          {
            "_id": "55c50d47662bf0e90800008a",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/f59795b3-6f54-4f2c-93eb-f554d6cf02a4gregPkg753.zip",
            "contents": "Add Shared Parameter to Project - This node will add a parameter to shared parameter file and then add it to the project. , Apply View Template - This node will allow you to apply a view template to a set of views., Cell Style Settings - This node will generate a Cell Style Settings that can be used to override cell properties. , Change Family Type - Changes family type of a family by passing in an Element and type id of the type we want to change it to. , Clear List - This node will remove all Null and Empty Lists from any list. , Color Settings - This node creates color settings for the Analysis Visualization Framework. , Colored Surface Display Style - This node will generate a Colored Surface Display Style from inputs of points, values, and instance surface for analysis to be aplied to. Also, use color and legend settings (part of archi-lab package) to create style colors and visibility., Colored Surface Settings - This node creates settings for the colored surface display style of the Analysis Visualization Framework., Combine by Pattern - Combines two list based on a input pattern of true and false., Create Annotation Tag - This node will create an annotation tag at a given location, of given type and in a supplied view. If only single view is supplied then all tags will be created in that view. , Current Document - Retrieves Current Document, Delete Elements - This node will delete elements from Revit project., Delete Linked Model Keynote Tags - Deletes all Keynote Tags that are tagging elements in the linked model. if element in the linked model has a keynote assigned thus a keynote tag reads a proper value it will not be deleted. , Delete Unnamed Reference Planes - Does just what the name says. , Dispatch - Works exactly like the Dispatch component in Grasshopper. Input a list and a matching pattern of True/False to split list into two lists one containing all True arguments while other all False arguments. , Door Set Handing - Determines door set handing (whether its a left or right handed door). Input takes doors, and output will split them into two lists (right and left)., Duplicate Item Indices - Searches an input list for duplicate entries and lists their index numbers. Couple with Get From List to delete duplicates from a list., Element Ids - This node will query an element id that can be used with Revit nodes. Dynamo Element Id node returns integer value. , Elements Fom Linked File in Room - This node will check what elements from a linked model are inside of any of the rooms in the current model. , Elements in Room - This node will check if any of the elements are inside any of the supplied rooms. , Elements on Sheet - This node will return elements on sheet., Fill Pattern - Get Fill Pattern by Name, Filled Region Area - This node will query an area from the filled region, Filled Region Boundary Curves - This node will get the boundary curves for a filled region., Get All Detail Groups - This node will retrieve all instances of Detail Groups in the model., Get All Dimension Styles - This node will query all of the available dimension styles (this includes linear as well as arc, circle etc). , Get All Elements From Linked Model - This node is based on code posted by Julien Benoit. Big thanks to Julien for sharing his work. This node will retrieve all elements of a given category from a given linked model. , Get All Keynote Tags - Selects all Keynote Tags instances in the model. , Get All Views - This node will query all views in the model and return them based on category, Get Built In Parameter - This node will take an input of a built in parameter name and element to return that parameters value. , Get Design Options - Queries all of the design options currently in the project., Get Documents - Queries all linked Revit files and retrieves their Name, LinkInstance and Document properties., Get Elements by Category/Level - This node will filter for all elements of a given category on a given level., Get Filled Regions - This node will query up all Filled Regions in the project as well as those in the active view only. , Get Level by Name - This node will retrieve a Revit Level Element by its name. , Get Line Style by Name - This node will return a line style object by its name. Line styles can be either Drafting or Model Line Property. , Get Rooms by Level - Filters Rooms by level., Get Tagged Element Id - Retrives an Element Id from input of element tags. For example if wall tags are inputted it will return tagged wall Ids., Get Text Note Type by Name - This node will select a text note type by name. , Get Unplaced Groups - This node will retrieve all unplaced groups in the model., Get Views from View Set - This node will take a name of a view set and return views/sheet elements contained in it. , Get Worksets - Retrieves user worksets from specified document, GH Point to DY Point - Converts CSV Grasshopper export of points into a Dynamo point list. , Group Curves - This node will take any input of flat list of curves and group them into sublists containing \"joinable\" curves that is continous curves. They might form closed curves or open curves. Use PolyCurve.ByJoinedCurves to convert output groups of curves into single PolyCurves, Id to Element - Selects elements in a model from id input (ElementId, string, integer or GUID), Isolate in View - This node will take input of elements and a view to isolate selected elements in a view., Key Schedule - This node will take a key schedule, data and a list of parameters and populate it with infomation from data parameter. Visit www.archi-lab.net for more information on how to prep this node for take off. , Legend Settings - This node sets all settings for the Legend display with Analysis Visualization Framework of Revit. , Local Printers Names - This node will query all locally installed printers and return their names., Marker Settings - This node will generate AnalysisDisplayMarkerAndTextSettings to be used with a Marker Analysis Display Style. Inputs are: Marker Shape(Circle, Triangle, Rectangle), Marker Size, Show Text (Boolean), Rounding, TextDisplayMethod (Show All, Show None, Show Predefined). , Marker&Text Display Style - This node will take an input of Points and a matching input of values to create Analysis Display Style in Revit. Use Legend, Marker and Color Settings nodes to fully customize your display style. , Mass Addition - This node will attempt to sum all elements contained within it. , New Section Box View By Elements - This node will create new section box around specified elements and apply it to a new 3D View with a specified name. Section box will be offset from the elements by a supplied offset values. , Override Fill Pattern in View - Overrides fill pattern of any element in an active view to specified fill pattern and color, Parameter Group - This node will return all available Parameter Groups, Parameter Types - This node will return all available Paramter Types., Phase Demolished - This node will query a Phase Demolished setting of an element and return phase id. If id is -1 that means that element was not demolished. , PolyCurve by Profile Family Type - It takes an input of a profile family type and extract curves from it converting them to polycurves and curve segments for use in Dynamo (sweeps)., Print PDF - This node will allow you to initiate a printing routine in revit from a set of views/sheets, printer name, print settings and print range. , Print Range - This node will query available print range settings., Print Settings - This node will query up all user defined print settings. , Remap UV Domain - This node takes an input of a reference face and a list of UVs that get remapped into that face's UV Domain. The output is a list of UV Coordinates in that surface's domain. , Rename Files - This node will use an \"identifier\" to pick out files from a supplied directory to rename files to a new name supplied. Please make sure to match list lengths of identifier and new name inputs., Rotate Family - This node will rotate a family in Revit around a given axis by supplied angle (in radians). Please remember that every time you run your definition it will rotate family by given angle every time. , Schedule Appearance - This node allows you to control the appearance of the schedule. For now it supports only title, header and body text type. , Schedule Formatting - This node will allow you to control schedule formatiing options like column width, whether a column is hidden, column heading etc. , Schedule Sorting Grouping - This node will allow you to specify sorting/grouping parameters in schedule as well parameters like sorting order, whether its a footer or header. Visit archi-lab.net for more information. , Schedule Title Appearance - This node will override the appearance of the title. , Schedules on Sheets - Queries all schedules and produces two lists: one with all schedules that are placed on sheets and one with schedules that are not placed on sheets., Select Model Lines by Style - This node will select all model lines in the revit project by a line style name. , Set BuiltIn Parameter - This node will take an input of a built in parameter name and set that parameter to given value for given elements. , Slice String - Slices X number of leading or trailing characters from string (boolean true will slice from left while boolean set to false from right), String From List - This node will take an input of a list or nested list and then join each element in a list with a given seperator while adding a suffix., View Sets - This node will query up all user defined view sets in a project and return their names.",
            "engine_metadata": "",
            "engine_version": "0.8.1.1942",
            "created": "2015-08-07T19:55:51.350Z",
            "full_dependency_versions": [ "2015.8.7" ],
            "full_dependency_ids": [
              {
                "_id": "53e99ce50e5572016a00018a",
                "name": "archi-lab.net"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2015.8.7"
          },
          {
            "_id": "55ceaf74662bf0e9080000c9",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/a28efd6d-7082-4055-be90-b2086d230965gregPkg656.zip",
            "contents": "Add Shared Parameter to Project - This node will add a parameter to shared parameter file and then add it to the project. , Apply View Template - This node will allow you to apply a view template to a set of views., Cell Style Settings - This node will generate a Cell Style Settings that can be used to override cell properties. , Change Family Type - Changes family type of a family by passing in an Element and type id of the type we want to change it to. , Clear List - This node will remove all Null and Empty Lists from any list. , Color Settings - This node creates color settings for the Analysis Visualization Framework. , Colored Surface Display Style - This node will generate a Colored Surface Display Style from inputs of points, values, and instance surface for analysis to be aplied to. Also, use color and legend settings (part of archi-lab package) to create style colors and visibility., Colored Surface Settings - This node creates settings for the colored surface display style of the Analysis Visualization Framework., Combine by Pattern - Combines two list based on a input pattern of true and false., Create Annotation Tag - This node will create an annotation tag at a given location, of given type and in a supplied view. If only single view is supplied then all tags will be created in that view. , Current Document - Retrieves Current Document, Delete Elements - This node will delete elements from Revit project., Delete Linked Model Keynote Tags - Deletes all Keynote Tags that are tagging elements in the linked model. if element in the linked model has a keynote assigned thus a keynote tag reads a proper value it will not be deleted. , Delete Unnamed Reference Planes - Does just what the name says. , Dispatch - Works exactly like the Dispatch component in Grasshopper. Input a list and a matching pattern of True/False to split list into two lists one containing all True arguments while other all False arguments. , Door Set Handing - Determines door set handing (whether its a left or right handed door). Input takes doors, and output will split them into two lists (right and left)., Duplicate Item Indices - Searches an input list for duplicate entries and lists their index numbers. Couple with Get From List to delete duplicates from a list., Element Ids - This node will query an element id that can be used with Revit nodes. Dynamo Element Id node returns integer value. , Elements Fom Linked File in Room - This node will check what elements from a linked model are inside of any of the rooms in the current model. , Elements in Room - This node will check if any of the elements are inside any of the supplied rooms. , Elements on Sheet - This node will return elements on sheet., Fill Pattern - Get Fill Pattern by Name, Filled Region Area - This node will query an area from the filled region, Filled Region Boundary Curves - This node will get the boundary curves for a filled region., Get All Detail Groups - This node will retrieve all instances of Detail Groups in the model., Get All Dimension Styles - This node will query all of the available dimension styles (this includes linear as well as arc, circle etc). , Get All Elements From Linked Model - This node is based on code posted by Julien Benoit. Big thanks to Julien for sharing his work. This node will retrieve all elements of a given category from a given linked model. , Get All Keynote Tags - Selects all Keynote Tags instances in the model. , Get All Views - This node will query all views in the model and return them based on category, Get Built In Parameter - This node will take an input of a built in parameter name and element to return that parameters value. , Get Design Options - Queries all of the design options currently in the project., Get Documents - Queries all linked Revit files and retrieves their Name, LinkInstance and Document properties., Get Elements by Category/Level - This node will filter for all elements of a given category on a given level., Get Filled Regions - This node will query up all Filled Regions in the project as well as those in the active view only. , Get Level by Name - This node will retrieve a Revit Level Element by its name. , Get Line Style by Name - This node will return a line style object by its name. Line styles can be either Drafting or Model Line Property. , Get Rooms by Level - Filters Rooms by level., Get Tagged Element Id - Retrives an Element Id from input of element tags. For example if wall tags are inputted it will return tagged wall Ids., Get Text Note Type by Name - This node will select a text note type by name. , Get Unplaced Groups - This node will retrieve all unplaced groups in the model., Get Views from View Set - This node will take a name of a view set and return views/sheet elements contained in it. , Get Worksets - Retrieves user worksets from specified document, GH Point to DY Point - Converts CSV Grasshopper export of points into a Dynamo point list. , Group Curves - This node will take any input of flat list of curves and group them into sublists containing \"joinable\" curves that is continous curves. They might form closed curves or open curves. Use PolyCurve.ByJoinedCurves to convert output groups of curves into single PolyCurves, Id to Element - Selects elements in a model from id input (ElementId, string, integer or GUID), Isolate in View - This node will take input of elements and a view to isolate selected elements in a view., Key Schedule - This node will take a key schedule, data and a list of parameters and populate it with infomation from data parameter. Visit www.archi-lab.net for more information on how to prep this node for take off. , Legend Settings - This node sets all settings for the Legend display with Analysis Visualization Framework of Revit. , Local Printers Names - This node will query all locally installed printers and return their names., Marker Settings - This node will generate AnalysisDisplayMarkerAndTextSettings to be used with a Marker Analysis Display Style. Inputs are: Marker Shape(Circle, Triangle, Rectangle), Marker Size, Show Text (Boolean), Rounding, TextDisplayMethod (Show All, Show None, Show Predefined). , Marker&Text Display Style - This node will take an input of Points and a matching input of values to create Analysis Display Style in Revit. Use Legend, Marker and Color Settings nodes to fully customize your display style. , Mass Addition - This node will attempt to sum all elements contained within it. , New Section Box View By Elements - This node will create new section box around specified elements and apply it to a new 3D View with a specified name. Section box will be offset from the elements by a supplied offset values. , Override Fill Pattern in View - Overrides fill pattern of any element in an active view to specified fill pattern and color, Parameter Group - This node will return all available Parameter Groups, Parameter Types - This node will return all available Paramter Types., Phase Demolished - This node will query a Phase Demolished setting of an element and return phase id. If id is -1 that means that element was not demolished. , PolyCurve by Profile Family Type - It takes an input of a profile family type and extract curves from it converting them to polycurves and curve segments for use in Dynamo (sweeps)., Print PDF - This node will allow you to initiate a printing routine in revit from a set of views/sheets, printer name, print settings and print range. , Print Range - This node will query available print range settings., Print Settings - This node will query up all user defined print settings. , Remap UV Domain - This node takes an input of a reference face and a list of UVs that get remapped into that face's UV Domain. The output is a list of UV Coordinates in that surface's domain. , Rename Files - This node will use an \"identifier\" to pick out files from a supplied directory to rename files to a new name supplied. Please make sure to match list lengths of identifier and new name inputs., Rotate Family - This node will rotate a family in Revit around a given axis by supplied angle (in radians). Please remember that every time you run your definition it will rotate family by given angle every time. , Schedule Appearance - This node allows you to control the appearance of the schedule. For now it supports only title, header and body text type. , Schedule Formatting - This node will allow you to control schedule formatiing options like column width, whether a column is hidden, column heading etc. , Schedule Sorting Grouping - This node will allow you to specify sorting/grouping parameters in schedule as well parameters like sorting order, whether its a footer or header. Visit archi-lab.net for more information. , Schedule Title Appearance - This node will override the appearance of the title. , Schedules on Sheets - Queries all schedules and produces two lists: one with all schedules that are placed on sheets and one with schedules that are not placed on sheets., Select Model Lines by Style - This node will select all model lines in the revit project by a line style name. , Set BuiltIn Parameter - This node will take an input of a built in parameter name and set that parameter to given value for given elements. , Slice String - Slices X number of leading or trailing characters from string (boolean true will slice from left while boolean set to false from right), String From List - This node will take an input of a list or nested list and then join each element in a list with a given seperator while adding a suffix., View Sets - This node will query up all user defined view sets in a project and return their names., Get All Line Styles - This node will return all available line styles.",
            "engine_metadata": "",
            "engine_version": "0.8.2.2166",
            "created": "2015-08-15T03:18:12.202Z",
            "full_dependency_versions": [ "2015.8.14" ],
            "full_dependency_ids": [
              {
                "_id": "53e99ce50e5572016a00018a",
                "name": "archi-lab.net"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2015.8.14"
          },
          {
            "_id": "55d102cd662bf0e9080000cc",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/ad4bc291-ab64-4795-8133-659a506d28c1gregPkg56.zip",
            "contents": "Add Shared Parameter to Project - This node will add a parameter to shared parameter file and then add it to the project. , Apply View Template - This node will allow you to apply a view template to a set of views., Cell Style Settings - This node will generate a Cell Style Settings that can be used to override cell properties. , Change Family Type - Changes family type of a family by passing in an Element and type id of the type we want to change it to. , Clear List - This node will remove all Null and Empty Lists from any list. , Color Settings - This node creates color settings for the Analysis Visualization Framework. , Colored Surface Display Style - This node will generate a Colored Surface Display Style from inputs of points, values, and instance surface for analysis to be aplied to. Also, use color and legend settings (part of archi-lab package) to create style colors and visibility., Colored Surface Settings - This node creates settings for the colored surface display style of the Analysis Visualization Framework., Combine by Pattern - Combines two list based on a input pattern of true and false., Create Annotation Tag - This node will create an annotation tag at a given location, of given type and in a supplied view. If only single view is supplied then all tags will be created in that view. , Current Document - Retrieves Current Document, Delete Elements - This node will delete elements from Revit project., Delete Linked Model Keynote Tags - Deletes all Keynote Tags that are tagging elements in the linked model. if element in the linked model has a keynote assigned thus a keynote tag reads a proper value it will not be deleted. , Delete Unnamed Reference Planes - Does just what the name says. , Dispatch - Works exactly like the Dispatch component in Grasshopper. Input a list and a matching pattern of True/False to split list into two lists one containing all True arguments while other all False arguments. , Door Set Handing - Determines door set handing (whether its a left or right handed door). Input takes doors, and output will split them into two lists (right and left)., Duplicate Item Indices - Searches an input list for duplicate entries and lists their index numbers. Couple with Get From List to delete duplicates from a list., Element Ids - This node will query an element id that can be used with Revit nodes. Dynamo Element Id node returns integer value. , Elements Fom Linked File in Room - This node will check what elements from a linked model are inside of any of the rooms in the current model. , Elements in Room - This node will check if any of the elements are inside any of the supplied rooms. , Elements on Sheet - This node will return elements on sheet., Fill Pattern - Get Fill Pattern by Name, Filled Region Area - This node will query an area from the filled region, Filled Region Boundary Curves - This node will get the boundary curves for a filled region., Get All Detail Groups - This node will retrieve all instances of Detail Groups in the model., Get All Dimension Styles - This node will query all of the available dimension styles (this includes linear as well as arc, circle etc). , Get All Elements From Linked Model - This node is based on code posted by Julien Benoit. Big thanks to Julien for sharing his work. This node will retrieve all elements of a given category from a given linked model. , Get All Keynote Tags - Selects all Keynote Tags instances in the model. , Get All Line Styles - This node will return all available line styles., Get All Views - This node will query all views in the model and return them based on category, Get Built In Parameter - This node will take an input of a built in parameter name and element to return that parameters value. , Get Design Options - Queries all of the design options currently in the project., Get Documents - Queries all linked Revit files and retrieves their Name, LinkInstance and Document properties., Get Elements by Category/Level - This node will filter for all elements of a given category on a given level., Get Filled Regions - This node will query up all Filled Regions in the project as well as those in the active view only. , Get Level by Name - This node will retrieve a Revit Level Element by its name. , Get Line Style by Name - This node will return a line style object by its name. Line styles can be either Drafting or Model Line Property. , Get Rooms by Level - Filters Rooms by level., Get Text Note Type by Name - This node will select a text note type by name. , Get Unplaced Groups - This node will retrieve all unplaced groups in the model., Get Views from View Set - This node will take a name of a view set and return views/sheet elements contained in it. , Get Worksets - Retrieves user worksets from specified document, GH Point to DY Point - Converts CSV Grasshopper export of points into a Dynamo point list. , Group Curves - This node will take any input of flat list of curves and group them into sublists containing \"joinable\" curves that is continous curves. They might form closed curves or open curves. Use PolyCurve.ByJoinedCurves to convert output groups of curves into single PolyCurves, Id to Element - Selects elements in a model from id input (ElementId, string, integer or GUID), Isolate in View - This node will take input of elements and a view to isolate selected elements in a view., Key Schedule - This node will take a key schedule, data and a list of parameters and populate it with infomation from data parameter. Visit www.archi-lab.net for more information on how to prep this node for take off. , Legend Settings - This node sets all settings for the Legend display with Analysis Visualization Framework of Revit. , Local Printers Names - This node will query all locally installed printers and return their names., Marker Settings - This node will generate AnalysisDisplayMarkerAndTextSettings to be used with a Marker Analysis Display Style. Inputs are: Marker Shape(Circle, Triangle, Rectangle), Marker Size, Show Text (Boolean), Rounding, TextDisplayMethod (Show All, Show None, Show Predefined). , Marker&Text Display Style - This node will take an input of Points and a matching input of values to create Analysis Display Style in Revit. Use Legend, Marker and Color Settings nodes to fully customize your display style. , Mass Addition - This node will attempt to sum all elements contained within it. , New Section Box View By Elements - This node will create new section box around specified elements and apply it to a new 3D View with a specified name. Section box will be offset from the elements by a supplied offset values. , Override Fill Pattern in View - Overrides fill pattern of any element in an active view to specified fill pattern and color, Parameter Group - This node will return all available Parameter Groups, Parameter Types - This node will return all available Paramter Types., Phase Demolished - This node will query a Phase Demolished setting of an element and return phase id. If id is -1 that means that element was not demolished. , PolyCurve by Profile Family Type - It takes an input of a profile family type and extract curves from it converting them to polycurves and curve segments for use in Dynamo (sweeps)., Print PDF - This node will allow you to initiate a printing routine in revit from a set of views/sheets, printer name, print settings and print range. , Print Range - This node will query available print range settings., Print Settings - This node will query up all user defined print settings. , Remap UV Domain - This node takes an input of a reference face and a list of UVs that get remapped into that face's UV Domain. The output is a list of UV Coordinates in that surface's domain. , Rename Files - This node will use an \"identifier\" to pick out files from a supplied directory to rename files to a new name supplied. Please make sure to match list lengths of identifier and new name inputs., Rotate Family - This node will rotate a family in Revit around a given axis by supplied angle (in radians). Please remember that every time you run your definition it will rotate family by given angle every time. , Schedule Appearance - This node allows you to control the appearance of the schedule. For now it supports only title, header and body text type. , Schedule Formatting - This node will allow you to control schedule formatiing options like column width, whether a column is hidden, column heading etc. , Schedule Sorting Grouping - This node will allow you to specify sorting/grouping parameters in schedule as well parameters like sorting order, whether its a footer or header. Visit archi-lab.net for more information. , Schedule Title Appearance - This node will override the appearance of the title. , Schedules on Sheets - Queries all schedules and produces two lists: one with all schedules that are placed on sheets and one with schedules that are not placed on sheets., Select Model Lines by Style - This node will select all model lines in the revit project by a line style name. , Set BuiltIn Parameter - This node will take an input of a built in parameter name and set that parameter to given value for given elements. , Slice String - Slices X number of leading or trailing characters from string (boolean true will slice from left while boolean set to false from right), String From List - This node will take an input of a list or nested list and then join each element in a list with a given seperator while adding a suffix., View Sets - This node will query up all user defined view sets in a project and return their names.",
            "engine_metadata": "",
            "engine_version": "0.8.2.2223",
            "created": "2015-08-16T21:38:21.567Z",
            "full_dependency_versions": [ "2015.8.15" ],
            "full_dependency_ids": [
              {
                "_id": "53e99ce50e5572016a00018a",
                "name": "archi-lab.net"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2015.8.15"
          },
          {
            "_id": "55d73967662bf0e9080000fe",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/bcebe113-8f5e-4a24-8ceb-3497c529d2f2gregPkg921.zip",
            "contents": "Add Shared Parameter to Project - This node will add a parameter to shared parameter file and then add it to the project. , Apply View Template - This node will allow you to apply a view template to a set of views., Cell Style Settings - This node will generate a Cell Style Settings that can be used to override cell properties. , Change Family Type - Changes family type of a family by passing in an Element and type id of the type we want to change it to. , Clear List - This node will remove all Null and Empty Lists from any list. , Color Settings - This node creates color settings for the Analysis Visualization Framework. , Colored Surface Display Style - This node will generate a Colored Surface Display Style from inputs of points, values, and instance surface for analysis to be aplied to. Also, use color and legend settings (part of archi-lab package) to create style colors and visibility., Colored Surface Settings - This node creates settings for the colored surface display style of the Analysis Visualization Framework., Combine by Pattern - Combines two list based on a input pattern of true and false., Create Annotation Tag - This node will create an annotation tag at a given location, of given type and in a supplied view. If only single view is supplied then all tags will be created in that view. , Current Document - Retrieves Current Document, Delete Elements - This node will delete elements from Revit project., Delete Linked Model Keynote Tags - Deletes all Keynote Tags that are tagging elements in the linked model. if element in the linked model has a keynote assigned thus a keynote tag reads a proper value it will not be deleted. , Delete Unnamed Reference Planes - Does just what the name says. , Dispatch - Works exactly like the Dispatch component in Grasshopper. Input a list and a matching pattern of True/False to split list into two lists one containing all True arguments while other all False arguments. , Door Set Handing - Determines door set handing (whether its a left or right handed door). Input takes doors, and output will split them into two lists (right and left)., Duplicate Item Indices - Searches an input list for duplicate entries and lists their index numbers. Couple with Get From List to delete duplicates from a list., Element Ids - This node will query an element id that can be used with Revit nodes. Dynamo Element Id node returns integer value. , Elements Fom Linked File in Room - This node will check what elements from a linked model are inside of any of the rooms in the current model. , Elements in Room - This node will check if any of the elements are inside any of the supplied rooms. , Elements on Sheet - This node will return elements on sheet., Fill Pattern - Get Fill Pattern by Name, Filled Region Area - This node will query an area from the filled region, Filled Region Boundary Curves - This node will get the boundary curves for a filled region., Get All Detail Groups - This node will retrieve all instances of Detail Groups in the model., Get All Dimension Styles - This node will query all of the available dimension styles (this includes linear as well as arc, circle etc). , Get All Elements From Linked Model - This node is based on code posted by Julien Benoit. Big thanks to Julien for sharing his work. This node will retrieve all elements of a given category from a given linked model. , Get All Keynote Tags - Selects all Keynote Tags instances in the model. , Get All Line Styles - This node will return all available line styles., Get All Views - This node will query all views in the model and return them based on category, Get Built In Parameter - This node will take an input of a built in parameter name and element to return that parameters value. , Get Design Options - Queries all of the design options currently in the project., Get Documents - Queries all linked Revit files and retrieves their Name, LinkInstance and Document properties., Get Elements by Category/Level - This node will filter for all elements of a given category on a given level., Get Filled Regions - This node will query up all Filled Regions in the project as well as those in the active view only. , Get Level by Name - This node will retrieve a Revit Level Element by its name. , Get Line Style by Name - This node will return a line style object by its name. Line styles can be either Drafting or Model Line Property. , Get Rooms by Level - Filters Rooms by level., Get Tagged Element Id - Retrives an Element Id from input of element tags. For example if wall tags are inputted it will return tagged wall Ids., Get Text Note Type by Name - This node will select a text note type by name. , Get Unplaced Groups - This node will retrieve all unplaced groups in the model., Get Views from View Set - This node will take a name of a view set and return views/sheet elements contained in it. , Get Worksets - Retrieves user worksets from specified document, GH Point to DY Point - Converts CSV Grasshopper export of points into a Dynamo point list. , Group Curves - This node will take any input of flat list of curves and group them into sublists containing \"joinable\" curves that is continous curves. They might form closed curves or open curves. Use PolyCurve.ByJoinedCurves to convert output groups of curves into single PolyCurves, Id to Element - Selects elements in a model from id input (ElementId, string, integer or GUID), Isolate in View - This node will take input of elements and a view to isolate selected elements in a view., Key Schedule - This node will take a key schedule, data and a list of parameters and populate it with infomation from data parameter. Visit www.archi-lab.net for more information on how to prep this node for take off. , Legend Settings - This node sets all settings for the Legend display with Analysis Visualization Framework of Revit. , Local Printers Names - This node will query all locally installed printers and return their names., Marker Settings - This node will generate AnalysisDisplayMarkerAndTextSettings to be used with a Marker Analysis Display Style. Inputs are: Marker Shape(Circle, Triangle, Rectangle), Marker Size, Show Text (Boolean), Rounding, TextDisplayMethod (Show All, Show None, Show Predefined). , Marker&Text Display Style - This node will take an input of Points and a matching input of values to create Analysis Display Style in Revit. Use Legend, Marker and Color Settings nodes to fully customize your display style. , Mass Addition - This node will attempt to sum all elements contained within it. , New Section Box View By Elements - This node will create new section box around specified elements and apply it to a new 3D View with a specified name. Section box will be offset from the elements by a supplied offset values. , Override Fill Pattern in View - Overrides fill pattern of any element in an active view to specified fill pattern and color, Parameter Group - This node will return all available Parameter Groups, Parameter Types - This node will return all available Paramter Types., Phase Demolished - This node will query a Phase Demolished setting of an element and return phase id. If id is -1 that means that element was not demolished. , PolyCurve by Profile Family Type - It takes an input of a profile family type and extract curves from it converting them to polycurves and curve segments for use in Dynamo (sweeps)., Print PDF - This node will allow you to initiate a printing routine in revit from a set of views/sheets, printer name, print settings and print range. , Print Range - This node will query available print range settings., Remap UV Domain - This node takes an input of a reference face and a list of UVs that get remapped into that face's UV Domain. The output is a list of UV Coordinates in that surface's domain. , Rename Files - This node will use an \"identifier\" to pick out files from a supplied directory to rename files to a new name supplied. Please make sure to match list lengths of identifier and new name inputs., Rotate Family - This node will rotate a family in Revit around a given axis by supplied angle (in radians). Please remember that every time you run your definition it will rotate family by given angle every time. , Schedule Appearance - This node allows you to control the appearance of the schedule. For now it supports only title, header and body text type. , Schedule Formatting - This node will allow you to control schedule formatiing options like column width, whether a column is hidden, column heading etc. , Schedule Sorting Grouping - This node will allow you to specify sorting/grouping parameters in schedule as well parameters like sorting order, whether its a footer or header. Visit archi-lab.net for more information. , Schedule Title Appearance - This node will override the appearance of the title. , Schedules on Sheets - Queries all schedules and produces two lists: one with all schedules that are placed on sheets and one with schedules that are not placed on sheets., Select Model Lines by Style - This node will select all model lines in the revit project by a line style name. , Set BuiltIn Parameter - This node will take an input of a built in parameter name and set that parameter to given value for given elements. , Slice String - Slices X number of leading or trailing characters from string (boolean true will slice from left while boolean set to false from right), String From List - This node will take an input of a list or nested list and then join each element in a list with a given seperator while adding a suffix., View Sets - This node will query up all user defined view sets in a project and return their names.",
            "engine_metadata": "",
            "engine_version": "0.8.2.2223",
            "created": "2015-08-21T14:44:55.523Z",
            "full_dependency_versions": [ "2015.8.20" ],
            "full_dependency_ids": [
              {
                "_id": "53e99ce50e5572016a00018a",
                "name": "archi-lab.net"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2015.8.20"
          },
          {
            "_id": "55d74a39662bf0e9080000ff",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/22dd96fe-3ffa-491e-ac24-26ae3ec22dfdgregPkg774.zip",
            "contents": "Add Shared Parameter to Project - This node will add a parameter to shared parameter file and then add it to the project. , Apply View Template - This node will allow you to apply a view template to a set of views., Cell Style Settings - This node will generate a Cell Style Settings that can be used to override cell properties. , Change Family Type - Changes family type of a family by passing in an Element and type id of the type we want to change it to. , Clear List - This node will remove all Null and Empty Lists from any list. , Color Settings - This node creates color settings for the Analysis Visualization Framework. , Colored Surface Display Style - This node will generate a Colored Surface Display Style from inputs of points, values, and instance surface for analysis to be aplied to. Also, use color and legend settings (part of archi-lab package) to create style colors and visibility., Colored Surface Settings - This node creates settings for the colored surface display style of the Analysis Visualization Framework., Combine by Pattern - Combines two list based on a input pattern of true and false., Create Annotation Tag - This node will create an annotation tag at a given location, of given type and in a supplied view. If only single view is supplied then all tags will be created in that view. , Current Document - Retrieves Current Document, Delete Elements - This node will delete elements from Revit project., Delete Linked Model Keynote Tags - Deletes all Keynote Tags that are tagging elements in the linked model. if element in the linked model has a keynote assigned thus a keynote tag reads a proper value it will not be deleted. , Delete Unnamed Reference Planes - Does just what the name says. , Dispatch - Works exactly like the Dispatch component in Grasshopper. Input a list and a matching pattern of True/False to split list into two lists one containing all True arguments while other all False arguments. , Door Set Handing - Determines door set handing (whether its a left or right handed door). Input takes doors, and output will split them into two lists (right and left)., Duplicate Item Indices - Searches an input list for duplicate entries and lists their index numbers. Couple with Get From List to delete duplicates from a list., Element Ids - This node will query an element id that can be used with Revit nodes. Dynamo Element Id node returns integer value. , Elements Fom Linked File in Room - This node will check what elements from a linked model are inside of any of the rooms in the current model. , Elements in Room - This node will check if any of the elements are inside any of the supplied rooms. , Elements on Sheet - This node will return elements on sheet., Fill Pattern - Get Fill Pattern by Name, Filled Region Area - This node will query an area from the filled region, Filled Region Boundary Curves - This node will get the boundary curves for a filled region., Get All Detail Groups - This node will retrieve all instances of Detail Groups in the model., Get All Dimension Styles - This node will query all of the available dimension styles (this includes linear as well as arc, circle etc). , Get All Elements From Linked Model - This node is based on code posted by Julien Benoit. Big thanks to Julien for sharing his work. This node will retrieve all elements of a given category from a given linked model. , Get All Keynote Tags - Selects all Keynote Tags instances in the model. , Get All Line Styles - This node will return all available line styles., Get All Views - This node will query all views in the model and return them based on category, Get Built In Parameter - This node will take an input of a built in parameter name and element to return that parameters value. , Get Design Options - Queries all of the design options currently in the project., Get Documents - Queries all linked Revit files and retrieves their Name, LinkInstance and Document properties., Get Elements by Category/Level - This node will filter for all elements of a given category on a given level., Get Filled Regions - This node will query up all Filled Regions in the project as well as those in the active view only. , Get Level by Name - This node will retrieve a Revit Level Element by its name. , Get Line Style by Name - This node will return a line style object by its name. Line styles can be either Drafting or Model Line Property. , Get Rooms by Level - Filters Rooms by level., Get Tagged Element Id - Retrives an Element Id from input of element tags. For example if wall tags are inputted it will return tagged wall Ids., Get Text Note Type by Name - This node will select a text note type by name. , Get Unplaced Groups - This node will retrieve all unplaced groups in the model., Get Views from View Set - This node will take a name of a view set and return views/sheet elements contained in it. , Get Worksets - Retrieves user worksets from specified document, GH Point to DY Point - Converts CSV Grasshopper export of points into a Dynamo point list. , Group Curves - This node will take any input of flat list of curves and group them into sublists containing \"joinable\" curves that is continous curves. They might form closed curves or open curves. Use PolyCurve.ByJoinedCurves to convert output groups of curves into single PolyCurves, Id to Element - Selects elements in a model from id input (ElementId, string, integer or GUID), Isolate in View - This node will take input of elements and a view to isolate selected elements in a view., Key Schedule - This node will take a key schedule, data and a list of parameters and populate it with infomation from data parameter. Visit www.archi-lab.net for more information on how to prep this node for take off. , Legend Settings - This node sets all settings for the Legend display with Analysis Visualization Framework of Revit. , Local Printers Names - This node will query all locally installed printers and return their names., Marker Settings - This node will generate AnalysisDisplayMarkerAndTextSettings to be used with a Marker Analysis Display Style. Inputs are: Marker Shape(Circle, Triangle, Rectangle), Marker Size, Show Text (Boolean), Rounding, TextDisplayMethod (Show All, Show None, Show Predefined). , Marker&Text Display Style - This node will take an input of Points and a matching input of values to create Analysis Display Style in Revit. Use Legend, Marker and Color Settings nodes to fully customize your display style. , Mass Addition - This node will attempt to sum all elements contained within it. , New Section Box View By Elements - This node will create new section box around specified elements and apply it to a new 3D View with a specified name. Section box will be offset from the elements by a supplied offset values. , Override Fill Pattern in View - Overrides fill pattern of any element in an active view to specified fill pattern and color, Parameter Group - This node will return all available Parameter Groups, Phase Demolished - This node will query a Phase Demolished setting of an element and return phase id. If id is -1 that means that element was not demolished. , PolyCurve by Profile Family Type - It takes an input of a profile family type and extract curves from it converting them to polycurves and curve segments for use in Dynamo (sweeps)., Print PDF - This node will allow you to initiate a printing routine in revit from a set of views/sheets, printer name, print settings and print range. , Remap UV Domain - This node takes an input of a reference face and a list of UVs that get remapped into that face's UV Domain. The output is a list of UV Coordinates in that surface's domain. , Rename Files - This node will use an \"identifier\" to pick out files from a supplied directory to rename files to a new name supplied. Please make sure to match list lengths of identifier and new name inputs., Rotate Family - This node will rotate a family in Revit around a given axis by supplied angle (in radians). Please remember that every time you run your definition it will rotate family by given angle every time. , Schedule Appearance - This node allows you to control the appearance of the schedule. For now it supports only title, header and body text type. , Schedule Formatting - This node will allow you to control schedule formatiing options like column width, whether a column is hidden, column heading etc. , Schedule Sorting Grouping - This node will allow you to specify sorting/grouping parameters in schedule as well parameters like sorting order, whether its a footer or header. Visit archi-lab.net for more information. , Schedule Title Appearance - This node will override the appearance of the title. , Schedules on Sheets - Queries all schedules and produces two lists: one with all schedules that are placed on sheets and one with schedules that are not placed on sheets., Select Model Lines by Style - This node will select all model lines in the revit project by a line style name. , Set BuiltIn Parameter - This node will take an input of a built in parameter name and set that parameter to given value for given elements. , Slice String - Slices X number of leading or trailing characters from string (boolean true will slice from left while boolean set to false from right), String From List - This node will take an input of a list or nested list and then join each element in a list with a given seperator while adding a suffix.",
            "engine_metadata": "",
            "engine_version": "0.8.2.2223",
            "created": "2015-08-21T15:56:41.865Z",
            "full_dependency_versions": [ "2015.8.21" ],
            "full_dependency_ids": [
              {
                "_id": "53e99ce50e5572016a00018a",
                "name": "archi-lab.net"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2015.8.21"
          },
          {
            "_id": "55d74d1b662bf0e908000100",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/805c13e9-d41e-45a8-8a68-4bc1857dda4cgregPkg690.zip",
            "contents": "Add Shared Parameter to Project - This node will add a parameter to shared parameter file and then add it to the project. , Apply View Template - This node will allow you to apply a view template to a set of views., Cell Style Settings - This node will generate a Cell Style Settings that can be used to override cell properties. , Change Family Type - Changes family type of a family by passing in an Element and type id of the type we want to change it to. , Clear List - This node will remove all Null and Empty Lists from any list. , Color Settings - This node creates color settings for the Analysis Visualization Framework. , Colored Surface Display Style - This node will generate a Colored Surface Display Style from inputs of points, values, and instance surface for analysis to be aplied to. Also, use color and legend settings (part of archi-lab package) to create style colors and visibility., Colored Surface Settings - This node creates settings for the colored surface display style of the Analysis Visualization Framework., Combine by Pattern - Combines two list based on a input pattern of true and false., Create Annotation Tag - This node will create an annotation tag at a given location, of given type and in a supplied view. If only single view is supplied then all tags will be created in that view. , Current Document - Retrieves Current Document, Delete Elements - This node will delete elements from Revit project., Delete Linked Model Keynote Tags - Deletes all Keynote Tags that are tagging elements in the linked model. if element in the linked model has a keynote assigned thus a keynote tag reads a proper value it will not be deleted. , Delete Unnamed Reference Planes - Does just what the name says. , Dispatch - Works exactly like the Dispatch component in Grasshopper. Input a list and a matching pattern of True/False to split list into two lists one containing all True arguments while other all False arguments. , Door Set Handing - Determines door set handing (whether its a left or right handed door). Input takes doors, and output will split them into two lists (right and left)., Duplicate Item Indices - Searches an input list for duplicate entries and lists their index numbers. Couple with Get From List to delete duplicates from a list., Element Ids - This node will query an element id that can be used with Revit nodes. Dynamo Element Id node returns integer value. , Elements Fom Linked File in Room - This node will check what elements from a linked model are inside of any of the rooms in the current model. , Elements in Room - This node will check if any of the elements are inside any of the supplied rooms. , Elements on Sheet - This node will return elements on sheet., Fill Pattern - Get Fill Pattern by Name, Filled Region Area - This node will query an area from the filled region, Filled Region Boundary Curves - This node will get the boundary curves for a filled region., Get All Detail Groups - This node will retrieve all instances of Detail Groups in the model., Get All Dimension Styles - This node will query all of the available dimension styles (this includes linear as well as arc, circle etc). , Get All Elements From Linked Model - This node is based on code posted by Julien Benoit. Big thanks to Julien for sharing his work. This node will retrieve all elements of a given category from a given linked model. , Get All Keynote Tags - Selects all Keynote Tags instances in the model. , Get All Line Styles - This node will return all available line styles., Get All Views - This node will query all views in the model and return them based on category, Get Built In Parameter - This node will take an input of a built in parameter name and element to return that parameters value. , Get Design Options - Queries all of the design options currently in the project., Get Documents - Queries all linked Revit files and retrieves their Name, LinkInstance and Document properties., Get Elements by Category/Level - This node will filter for all elements of a given category on a given level., Get Filled Regions - This node will query up all Filled Regions in the project as well as those in the active view only. , Get Level by Name - This node will retrieve a Revit Level Element by its name. , Get Line Style by Name - This node will return a line style object by its name. Line styles can be either Drafting or Model Line Property. , Get Rooms by Level - Filters Rooms by level., Get Tagged Element Id - Retrives an Element Id from input of element tags. For example if wall tags are inputted it will return tagged wall Ids., Get Text Note Type by Name - This node will select a text note type by name. , Get Unplaced Groups - This node will retrieve all unplaced groups in the model., Get Views from View Set - This node will take a name of a view set and return views/sheet elements contained in it. , Get Worksets - Retrieves user worksets from specified document, GH Point to DY Point - Converts CSV Grasshopper export of points into a Dynamo point list. , Group Curves - This node will take any input of flat list of curves and group them into sublists containing \"joinable\" curves that is continous curves. They might form closed curves or open curves. Use PolyCurve.ByJoinedCurves to convert output groups of curves into single PolyCurves, Id to Element - Selects elements in a model from id input (ElementId, string, integer or GUID), Isolate in View - This node will take input of elements and a view to isolate selected elements in a view., Key Schedule - This node will take a key schedule, data and a list of parameters and populate it with infomation from data parameter. Visit www.archi-lab.net for more information on how to prep this node for take off. , Legend Settings - This node sets all settings for the Legend display with Analysis Visualization Framework of Revit. , Local Printers Names - This node will query all locally installed printers and return their names., Marker Settings - This node will generate AnalysisDisplayMarkerAndTextSettings to be used with a Marker Analysis Display Style. Inputs are: Marker Shape(Circle, Triangle, Rectangle), Marker Size, Show Text (Boolean), Rounding, TextDisplayMethod (Show All, Show None, Show Predefined). , Marker&Text Display Style - This node will take an input of Points and a matching input of values to create Analysis Display Style in Revit. Use Legend, Marker and Color Settings nodes to fully customize your display style. , Mass Addition - This node will attempt to sum all elements contained within it. , New Section Box View By Elements - This node will create new section box around specified elements and apply it to a new 3D View with a specified name. Section box will be offset from the elements by a supplied offset values. , Override Fill Pattern in View - Overrides fill pattern of any element in an active view to specified fill pattern and color, Parameter Group - This node will return all available Parameter Groups, Phase Demolished - This node will query a Phase Demolished setting of an element and return phase id. If id is -1 that means that element was not demolished. , PolyCurve by Profile Family Type - It takes an input of a profile family type and extract curves from it converting them to polycurves and curve segments for use in Dynamo (sweeps)., Print PDF - This node will allow you to initiate a printing routine in revit from a set of views/sheets, printer name, print settings and print range. , Remap UV Domain - This node takes an input of a reference face and a list of UVs that get remapped into that face's UV Domain. The output is a list of UV Coordinates in that surface's domain. , Rename Files - This node will use an \"identifier\" to pick out files from a supplied directory to rename files to a new name supplied. Please make sure to match list lengths of identifier and new name inputs., Rotate Family - This node will rotate a family in Revit around a given axis by supplied angle (in radians). Please remember that every time you run your definition it will rotate family by given angle every time. , Schedule Appearance - This node allows you to control the appearance of the schedule. For now it supports only title, header and body text type. , Schedule Formatting - This node will allow you to control schedule formatiing options like column width, whether a column is hidden, column heading etc. , Schedule Sorting Grouping - This node will allow you to specify sorting/grouping parameters in schedule as well parameters like sorting order, whether its a footer or header. Visit archi-lab.net for more information. , Schedule Title Appearance - This node will override the appearance of the title. , Schedules on Sheets - Queries all schedules and produces two lists: one with all schedules that are placed on sheets and one with schedules that are not placed on sheets., Select Model Lines by Style - This node will select all model lines in the revit project by a line style name. , Set BuiltIn Parameter - This node will take an input of a built in parameter name and set that parameter to given value for given elements. , Slice String - Slices X number of leading or trailing characters from string (boolean true will slice from left while boolean set to false from right), String From List - This node will take an input of a list or nested list and then join each element in a list with a given seperator while adding a suffix.",
            "engine_metadata": "",
            "engine_version": "0.8.2.2223",
            "created": "2015-08-21T16:08:59.836Z",
            "full_dependency_versions": [ "2015.8.22" ],
            "full_dependency_ids": [
              {
                "_id": "53e99ce50e5572016a00018a",
                "name": "archi-lab.net"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2015.8.22"
          },
          {
            "_id": "55d7ddfc662bf0e908000101",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/0a12ce4c-361c-48e3-80b0-b8ad749d8af2gregPkg680.zip",
            "contents": "Add Shared Parameter to Project - This node will add a parameter to shared parameter file and then add it to the project. , Apply View Template - This node will allow you to apply a view template to a set of views., Cell Style Settings - This node will generate a Cell Style Settings that can be used to override cell properties. , Change Family Type - Changes family type of a family by passing in an Element and type id of the type we want to change it to. , Clear List - This node will remove all Null and Empty Lists from any list. , Color Settings - This node creates color settings for the Analysis Visualization Framework. , Colored Surface Display Style - This node will generate a Colored Surface Display Style from inputs of points, values, and instance surface for analysis to be aplied to. Also, use color and legend settings (part of archi-lab package) to create style colors and visibility., Colored Surface Settings - This node creates settings for the colored surface display style of the Analysis Visualization Framework., Combine by Pattern - Combines two list based on a input pattern of true and false., Create Annotation Tag - This node will create an annotation tag at a given location, of given type and in a supplied view. If only single view is supplied then all tags will be created in that view. , Current Document - Retrieves Current Document, Delete Elements - This node will delete elements from Revit project., Delete Linked Model Keynote Tags - Deletes all Keynote Tags that are tagging elements in the linked model. if element in the linked model has a keynote assigned thus a keynote tag reads a proper value it will not be deleted. , Delete Unnamed Reference Planes - Does just what the name says. , Dispatch - Works exactly like the Dispatch component in Grasshopper. Input a list and a matching pattern of True/False to split list into two lists one containing all True arguments while other all False arguments. , Door Set Handing - Determines door set handing (whether its a left or right handed door). Input takes doors, and output will split them into two lists (right and left)., Duplicate Item Indices - Searches an input list for duplicate entries and lists their index numbers. Couple with Get From List to delete duplicates from a list., Element Ids - This node will query an element id that can be used with Revit nodes. Dynamo Element Id node returns integer value. , Elements Fom Linked File in Room - This node will check what elements from a linked model are inside of any of the rooms in the current model. , Elements in Room - This node will check if any of the elements are inside any of the supplied rooms. , Elements on Sheet - This node will return elements on sheet., Fill Pattern - Get Fill Pattern by Name, Filled Region Area - This node will query an area from the filled region, Filled Region Boundary Curves - This node will get the boundary curves for a filled region., Get All Detail Groups - This node will retrieve all instances of Detail Groups in the model., Get All Dimension Styles - This node will query all of the available dimension styles (this includes linear as well as arc, circle etc). , Get All Elements From Linked Model - This node is based on code posted by Julien Benoit. Big thanks to Julien for sharing his work. This node will retrieve all elements of a given category from a given linked model. , Get All Keynote Tags - Selects all Keynote Tags instances in the model. , Get All Line Styles - This node will return all available line styles., Get All Views - This node will query all views in the model and return them based on category, Get Built In Parameter - This node will take an input of a built in parameter name and element to return that parameters value. , Get Design Options - Queries all of the design options currently in the project., Get Documents - Queries all linked Revit files and retrieves their Name, LinkInstance and Document properties., Get Elements by Category/Level - This node will filter for all elements of a given category on a given level., Get Filled Regions - This node will query up all Filled Regions in the project as well as those in the active view only. , Get Level by Name - This node will retrieve a Revit Level Element by its name. , Get Line Style by Name - This node will return a line style object by its name. Line styles can be either Drafting or Model Line Property. , Get Rooms by Level - Filters Rooms by level., Get Tagged Element Id - Retrives an Element Id from input of element tags. For example if wall tags are inputted it will return tagged wall Ids., Get Text Note Type by Name - This node will select a text note type by name. , Get Unplaced Groups - This node will retrieve all unplaced groups in the model., Get Views from View Set - This node will take a name of a view set and return views/sheet elements contained in it. , Get Worksets - Retrieves user worksets from specified document, GH Point to DY Point - Converts CSV Grasshopper export of points into a Dynamo point list. , Group Curves - This node will take any input of flat list of curves and group them into sublists containing \"joinable\" curves that is continous curves. They might form closed curves or open curves. Use PolyCurve.ByJoinedCurves to convert output groups of curves into single PolyCurves, Id to Element - Selects elements in a model from id input (ElementId, string, integer or GUID), Isolate in View - This node will take input of elements and a view to isolate selected elements in a view., Key Schedule - This node will take a key schedule, data and a list of parameters and populate it with infomation from data parameter. Visit www.archi-lab.net for more information on how to prep this node for take off. , Legend Settings - This node sets all settings for the Legend display with Analysis Visualization Framework of Revit. , Local Printers Names - This node will query all locally installed printers and return their names., Marker Settings - This node will generate AnalysisDisplayMarkerAndTextSettings to be used with a Marker Analysis Display Style. Inputs are: Marker Shape(Circle, Triangle, Rectangle), Marker Size, Show Text (Boolean), Rounding, TextDisplayMethod (Show All, Show None, Show Predefined). , Marker&Text Display Style - This node will take an input of Points and a matching input of values to create Analysis Display Style in Revit. Use Legend, Marker and Color Settings nodes to fully customize your display style. , Mass Addition - This node will attempt to sum all elements contained within it. , New Section Box View By Elements - This node will create new section box around specified elements and apply it to a new 3D View with a specified name. Section box will be offset from the elements by a supplied offset values. , Override Fill Pattern in View - Overrides fill pattern of any element in an active view to specified fill pattern and color, Parameter Group - This node will return all available Parameter Groups, Phase Demolished - This node will query a Phase Demolished setting of an element and return phase id. If id is -1 that means that element was not demolished. , PolyCurve by Profile Family Type - It takes an input of a profile family type and extract curves from it converting them to polycurves and curve segments for use in Dynamo (sweeps)., Print PDF - This node will allow you to initiate a printing routine in revit from a set of views/sheets, printer name, print settings and print range. , Remap UV Domain - This node takes an input of a reference face and a list of UVs that get remapped into that face's UV Domain. The output is a list of UV Coordinates in that surface's domain. , Rename Files - This node will use an \"identifier\" to pick out files from a supplied directory to rename files to a new name supplied. Please make sure to match list lengths of identifier and new name inputs., Rotate Family - This node will rotate a family in Revit around a given axis by supplied angle (in radians). Please remember that every time you run your definition it will rotate family by given angle every time. , Schedule Appearance - This node allows you to control the appearance of the schedule. For now it supports only title, header and body text type. , Schedule Formatting - This node will allow you to control schedule formatiing options like column width, whether a column is hidden, column heading etc. , Schedule Sorting Grouping - This node will allow you to specify sorting/grouping parameters in schedule as well parameters like sorting order, whether its a footer or header. Visit archi-lab.net for more information. , Schedule Title Appearance - This node will override the appearance of the title. , Schedules on Sheets - Queries all schedules and produces two lists: one with all schedules that are placed on sheets and one with schedules that are not placed on sheets., Select Model Lines by Style - This node will select all model lines in the revit project by a line style name. , Set BuiltIn Parameter - This node will take an input of a built in parameter name and set that parameter to given value for given elements. , Slice String - Slices X number of leading or trailing characters from string (boolean true will slice from left while boolean set to false from right), String From List - This node will take an input of a list or nested list and then join each element in a list with a given seperator while adding a suffix.",
            "engine_metadata": "",
            "engine_version": "0.8.2.2166",
            "created": "2015-08-22T02:27:08.357Z",
            "full_dependency_versions": [ "2015.8.23" ],
            "full_dependency_ids": [
              {
                "_id": "53e99ce50e5572016a00018a",
                "name": "archi-lab.net"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2015.8.23"
          },
          {
            "_id": "55dfc854662bf0e908000122",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/f8dcc98a-a8bd-42b1-b46e-3e3d24aa82dfgregPkg416.zip",
            "contents": "Add Shared Parameter to Project - This node will add a parameter to shared parameter file and then add it to the project. , Apply View Template - This node will allow you to apply a view template to a set of views., Cell Style Settings - This node will generate a Cell Style Settings that can be used to override cell properties. , Change Family Type - Changes family type of a family by passing in an Element and type id of the type we want to change it to. , Clear List - This node will remove all Null and Empty Lists from any list. , Color Settings - This node creates color settings for the Analysis Visualization Framework. , Colored Surface Display Style - This node will generate a Colored Surface Display Style from inputs of points, values, and instance surface for analysis to be aplied to. Also, use color and legend settings (part of archi-lab package) to create style colors and visibility., Colored Surface Settings - This node creates settings for the colored surface display style of the Analysis Visualization Framework., Combine by Pattern - Combines two list based on a input pattern of true and false., Create Annotation Tag - This node will create an annotation tag at a given location, of given type and in a supplied view. If only single view is supplied then all tags will be created in that view. , Current Document - Retrieves Current Document, Delete Elements - This node will delete elements from Revit project., Delete Linked Model Keynote Tags - Deletes all Keynote Tags that are tagging elements in the linked model. if element in the linked model has a keynote assigned thus a keynote tag reads a proper value it will not be deleted. , Delete Unnamed Reference Planes - Does just what the name says. , Dispatch - Works exactly like the Dispatch component in Grasshopper. Input a list and a matching pattern of True/False to split list into two lists one containing all True arguments while other all False arguments. , Door Set Handing - Determines door set handing (whether its a left or right handed door). Input takes doors, and output will split them into two lists (right and left)., Duplicate Item Indices - Searches an input list for duplicate entries and lists their index numbers. Couple with Get From List to delete duplicates from a list., Element Ids - This node will query an element id that can be used with Revit nodes. Dynamo Element Id node returns integer value. , Elements Fom Linked File in Room - This node will check what elements from a linked model are inside of any of the rooms in the current model. , Elements in Room - This node will check if any of the elements are inside any of the supplied rooms. , Elements on Sheet - This node will return elements on sheet., Fill Pattern - Get Fill Pattern by Name, Filled Region Area - This node will query an area from the filled region, Filled Region Boundary Curves - This node will get the boundary curves for a filled region., Get All Detail Groups - This node will retrieve all instances of Detail Groups in the model., Get All Dimension Styles - This node will query all of the available dimension styles (this includes linear as well as arc, circle etc). , Get All Elements From Linked Model - This node is based on code posted by Julien Benoit. Big thanks to Julien for sharing his work. This node will retrieve all elements of a given category from a given linked model. , Get All Keynote Tags - Selects all Keynote Tags instances in the model. , Get All Line Styles - This node will return all available line styles., Get All Views - This node will query all views in the model and return them based on category, Get Built In Parameter - This node will take an input of a built in parameter name and element to return that parameters value. , Get Design Options - Queries all of the design options currently in the project., Get Documents - Queries all linked Revit files and retrieves their Name, LinkInstance and Document properties., Get Elements by Category/Level - This node will filter for all elements of a given category on a given level., Get Filled Regions - This node will query up all Filled Regions in the project as well as those in the active view only. , Get Level by Name - This node will retrieve a Revit Level Element by its name. , Get Line Style by Name - This node will return a line style object by its name. Line styles can be either Drafting or Model Line Property. , Get Rooms by Level - Filters Rooms by level., Get Tagged Element Id - Retrives an Element Id from input of element tags. For example if wall tags are inputted it will return tagged wall Ids., Get Text Note Type by Name - This node will select a text note type by name. , Get Unplaced Groups - This node will retrieve all unplaced groups in the model., Get Views from View Set - This node will take a name of a view set and return views/sheet elements contained in it. , Get Worksets - Retrieves user worksets from specified document, GH Point to DY Point - Converts CSV Grasshopper export of points into a Dynamo point list. , Group Curves - This node will take any input of flat list of curves and group them into sublists containing \"joinable\" curves that is continous curves. They might form closed curves or open curves. Use PolyCurve.ByJoinedCurves to convert output groups of curves into single PolyCurves, Id to Element - Selects elements in a model from id input (ElementId, string, integer or GUID), Isolate in View - This node will take input of elements and a view to isolate selected elements in a view., Key Schedule - This node will take a key schedule, data and a list of parameters and populate it with infomation from data parameter. Visit www.archi-lab.net for more information on how to prep this node for take off. , Legend Settings - This node sets all settings for the Legend display with Analysis Visualization Framework of Revit. , Local Printers Names - This node will query all locally installed printers and return their names., Marker Settings - This node will generate AnalysisDisplayMarkerAndTextSettings to be used with a Marker Analysis Display Style. Inputs are: Marker Shape(Circle, Triangle, Rectangle), Marker Size, Show Text (Boolean), Rounding, TextDisplayMethod (Show All, Show None, Show Predefined). , Marker&Text Display Style - This node will take an input of Points and a matching input of values to create Analysis Display Style in Revit. Use Legend, Marker and Color Settings nodes to fully customize your display style. , Mass Addition - This node will attempt to sum all elements contained within it. , New Section Box View By Elements - This node will create new section box around specified elements and apply it to a new 3D View with a specified name. Section box will be offset from the elements by a supplied offset values. , Override Fill Pattern in View - Overrides fill pattern of any element in an active view to specified fill pattern and color, Parameter Group - This node will return all available Parameter Groups, Phase Demolished - This node will query a Phase Demolished setting of an element and return phase id. If id is -1 that means that element was not demolished. , PolyCurve by Profile Family Type - It takes an input of a profile family type and extract curves from it converting them to polycurves and curve segments for use in Dynamo (sweeps)., Print PDF - This node will allow you to initiate a printing routine in revit from a set of views/sheets, printer name, print settings and print range. , Remap UV Domain - This node takes an input of a reference face and a list of UVs that get remapped into that face's UV Domain. The output is a list of UV Coordinates in that surface's domain. , Rename Files - This node will use an \"identifier\" to pick out files from a supplied directory to rename files to a new name supplied. Please make sure to match list lengths of identifier and new name inputs., Rotate Family - This node will rotate a family in Revit around a given axis by supplied angle (in radians). Please remember that every time you run your definition it will rotate family by given angle every time. , Schedule Appearance - This node allows you to control the appearance of the schedule. For now it supports only title, header and body text type. , Schedule Formatting - This node will allow you to control schedule formatiing options like column width, whether a column is hidden, column heading etc. , Schedule Sorting Grouping - This node will allow you to specify sorting/grouping parameters in schedule as well parameters like sorting order, whether its a footer or header. Visit archi-lab.net for more information. , Schedule Title Appearance - This node will override the appearance of the title. , Schedules on Sheets - Queries all schedules and produces two lists: one with all schedules that are placed on sheets and one with schedules that are not placed on sheets., Select Model Lines by Style - This node will select all model lines in the revit project by a line style name. , Set BuiltIn Parameter - This node will take an input of a built in parameter name and set that parameter to given value for given elements. , Slice String - Slices X number of leading or trailing characters from string (boolean true will slice from left while boolean set to false from right), String From List - This node will take an input of a list or nested list and then join each element in a list with a given seperator while adding a suffix.",
            "engine_metadata": "",
            "engine_version": "0.8.2.2371",
            "created": "2015-08-28T02:32:52.186Z",
            "full_dependency_versions": [ "2015.8.24" ],
            "full_dependency_ids": [
              {
                "_id": "53e99ce50e5572016a00018a",
                "name": "archi-lab.net"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2015.8.24"
          },
          {
            "_id": "55e23de6662bf0e908000124",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/b259064b-39c7-497e-afc8-a89ea230ac43gregPkg931.zip",
            "contents": "Add Shared Parameter to Project - This node will add a parameter to shared parameter file and then add it to the project. , Apply View Template - This node will allow you to apply a view template to a set of views., Cell Style Settings - This node will generate a Cell Style Settings that can be used to override cell properties. , Change Family Type - Changes family type of a family by passing in an Element and type id of the type we want to change it to. , Clear List - This node will remove all Null and Empty Lists from any list. , Color Settings - This node creates color settings for the Analysis Visualization Framework. , Colored Surface Display Style - This node will generate a Colored Surface Display Style from inputs of points, values, and instance surface for analysis to be aplied to. Also, use color and legend settings (part of archi-lab package) to create style colors and visibility., Colored Surface Settings - This node creates settings for the colored surface display style of the Analysis Visualization Framework., Combine by Pattern - Combines two list based on a input pattern of true and false., Create Annotation Tag - This node will create an annotation tag at a given location, of given type and in a supplied view. If only single view is supplied then all tags will be created in that view. , Current Document - Retrieves Current Document, Delete Elements - This node will delete elements from Revit project., Delete Linked Model Keynote Tags - Deletes all Keynote Tags that are tagging elements in the linked model. if element in the linked model has a keynote assigned thus a keynote tag reads a proper value it will not be deleted. , Delete Unnamed Reference Planes - Does just what the name says. , Dispatch - Works exactly like the Dispatch component in Grasshopper. Input a list and a matching pattern of True/False to split list into two lists one containing all True arguments while other all False arguments. , Door Set Handing - Determines door set handing (whether its a left or right handed door). Input takes doors, and output will split them into two lists (right and left)., Duplicate Item Indices - Searches an input list for duplicate entries and lists their index numbers. Couple with Get From List to delete duplicates from a list., Element Ids - This node will query an element id that can be used with Revit nodes. Dynamo Element Id node returns integer value. , Elements Fom Linked File in Room - This node will check what elements from a linked model are inside of any of the rooms in the current model. , Elements in Room - This node will check if any of the elements are inside any of the supplied rooms. , Elements on Sheet - This node will return elements on sheet., Fill Pattern - Get Fill Pattern by Name, Filled Region Area - This node will query an area from the filled region, Filled Region Boundary Curves - This node will get the boundary curves for a filled region., Get All Detail Groups - This node will retrieve all instances of Detail Groups in the model., Get All Dimension Styles - This node will query all of the available dimension styles (this includes linear as well as arc, circle etc). , Get All Elements From Linked Model - This node is based on code posted by Julien Benoit. Big thanks to Julien for sharing his work. This node will retrieve all elements of a given category from a given linked model. , Get All Keynote Tags - Selects all Keynote Tags instances in the model. , Get All Line Styles - This node will return all available line styles., Get All Views - This node will query all views in the model and return them based on category, Get Built In Parameter - This node will take an input of a built in parameter name and element to return that parameters value. , Get Design Options - Queries all of the design options currently in the project., Get Documents - Queries all linked Revit files and retrieves their Name, LinkInstance and Document properties., Get Elements by Category/Level - This node will filter for all elements of a given category on a given level., Get Filled Regions - This node will query up all Filled Regions in the project as well as those in the active view only. , Get Level by Name - This node will retrieve a Revit Level Element by its name. , Get Line Style by Name - This node will return a line style object by its name. Line styles can be either Drafting or Model Line Property. , Get Rooms by Level - Filters Rooms by level., Get Tagged Element Id - Retrives an Element Id from input of element tags. For example if wall tags are inputted it will return tagged wall Ids., Get Text Note Type by Name - This node will select a text note type by name. , Get Unplaced Groups - This node will retrieve all unplaced groups in the model., Get Views from View Set - This node will take a name of a view set and return views/sheet elements contained in it. , Get Worksets - Retrieves user worksets from specified document, GH Point to DY Point - Converts CSV Grasshopper export of points into a Dynamo point list. , Group Curves - This node will take any input of flat list of curves and group them into sublists containing \"joinable\" curves that is continous curves. They might form closed curves or open curves. Use PolyCurve.ByJoinedCurves to convert output groups of curves into single PolyCurves, Id to Element - Selects elements in a model from id input (ElementId, string, integer or GUID), Isolate in View - This node will take input of elements and a view to isolate selected elements in a view., Key Schedule - This node will take a key schedule, data and a list of parameters and populate it with infomation from data parameter. Visit www.archi-lab.net for more information on how to prep this node for take off. , Legend Settings - This node sets all settings for the Legend display with Analysis Visualization Framework of Revit. , Local Printers Names - This node will query all locally installed printers and return their names., Marker Settings - This node will generate AnalysisDisplayMarkerAndTextSettings to be used with a Marker Analysis Display Style. Inputs are: Marker Shape(Circle, Triangle, Rectangle), Marker Size, Show Text (Boolean), Rounding, TextDisplayMethod (Show All, Show None, Show Predefined). , Marker&Text Display Style - This node will take an input of Points and a matching input of values to create Analysis Display Style in Revit. Use Legend, Marker and Color Settings nodes to fully customize your display style. , Mass Addition - This node will attempt to sum all elements contained within it. , New Section Box View By Elements - This node will create new section box around specified elements and apply it to a new 3D View with a specified name. Section box will be offset from the elements by a supplied offset values. , Override Fill Pattern in View - Overrides fill pattern of any element in an active view to specified fill pattern and color, Parameter Group - This node will return all available Parameter Groups, Phase Demolished - This node will query a Phase Demolished setting of an element and return phase id. If id is -1 that means that element was not demolished. , PolyCurve by Profile Family Type - It takes an input of a profile family type and extract curves from it converting them to polycurves and curve segments for use in Dynamo (sweeps)., Print PDF - This node will allow you to initiate a printing routine in revit from a set of views/sheets, printer name, print settings and print range. , Remap UV Domain - This node takes an input of a reference face and a list of UVs that get remapped into that face's UV Domain. The output is a list of UV Coordinates in that surface's domain. , Rename Files - This node will use an \"identifier\" to pick out files from a supplied directory to rename files to a new name supplied. Please make sure to match list lengths of identifier and new name inputs., Rotate Family - This node will rotate a family in Revit around a given axis by supplied angle (in radians). Please remember that every time you run your definition it will rotate family by given angle every time. , Schedule Appearance - This node allows you to control the appearance of the schedule. For now it supports only title, header and body text type. , Schedule Formatting - This node will allow you to control schedule formatiing options like column width, whether a column is hidden, column heading etc. , Schedule Sorting Grouping - This node will allow you to specify sorting/grouping parameters in schedule as well parameters like sorting order, whether its a footer or header. Visit archi-lab.net for more information. , Schedule Title Appearance - This node will override the appearance of the title. , Schedules on Sheets - Queries all schedules and produces two lists: one with all schedules that are placed on sheets and one with schedules that are not placed on sheets., Select Model Lines by Style - This node will select all model lines in the revit project by a line style name. , Set BuiltIn Parameter - This node will take an input of a built in parameter name and set that parameter to given value for given elements. , Slice String - Slices X number of leading or trailing characters from string (boolean true will slice from left while boolean set to false from right), String From List - This node will take an input of a list or nested list and then join each element in a list with a given seperator while adding a suffix.",
            "engine_metadata": "",
            "engine_version": "0.8.2.2371",
            "created": "2015-08-29T23:19:02.712Z",
            "full_dependency_versions": [ "2015.8.25" ],
            "full_dependency_ids": [
              {
                "_id": "53e99ce50e5572016a00018a",
                "name": "archi-lab.net"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2015.8.25"
          },
          {
            "_id": "55e34efe662bf0e908000127",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/29fa9e09-691b-44e9-b060-3fa9dbb05346gregPkg830.zip",
            "contents": "Add Shared Parameter to Project - This node will add a parameter to shared parameter file and then add it to the project. , Apply View Template - This node will allow you to apply a view template to a set of views., Cell Style Settings - This node will generate a Cell Style Settings that can be used to override cell properties. , Change Family Type - Changes family type of a family by passing in an Element and type id of the type we want to change it to. , Clear List - This node will remove all Null and Empty Lists from any list. , Color Settings - This node creates color settings for the Analysis Visualization Framework. , Colored Surface Display Style - This node will generate a Colored Surface Display Style from inputs of points, values, and instance surface for analysis to be aplied to. Also, use color and legend settings (part of archi-lab package) to create style colors and visibility., Colored Surface Settings - This node creates settings for the colored surface display style of the Analysis Visualization Framework., Combine by Pattern - Combines two list based on a input pattern of true and false., Create Annotation Tag - This node will create an annotation tag at a given location, of given type and in a supplied view. If only single view is supplied then all tags will be created in that view. , Current Document - Retrieves Current Document, Delete Elements - This node will delete elements from Revit project., Delete Linked Model Keynote Tags - Deletes all Keynote Tags that are tagging elements in the linked model. if element in the linked model has a keynote assigned thus a keynote tag reads a proper value it will not be deleted. , Delete Unnamed Reference Planes - Does just what the name says. , Dispatch - Works exactly like the Dispatch component in Grasshopper. Input a list and a matching pattern of True/False to split list into two lists one containing all True arguments while other all False arguments. , Door Set Handing - Determines door set handing (whether its a left or right handed door). Input takes doors, and output will split them into two lists (right and left)., Duplicate Item Indices - Searches an input list for duplicate entries and lists their index numbers. Couple with Get From List to delete duplicates from a list., Element Ids - This node will query an element id that can be used with Revit nodes. Dynamo Element Id node returns integer value. , Elements Fom Linked File in Room - This node will check what elements from a linked model are inside of any of the rooms in the current model. , Elements in Room - This node will check if any of the elements are inside any of the supplied rooms. , Elements on Sheet - This node will return elements on sheet., Fill Pattern - Get Fill Pattern by Name, Filled Region Area - This node will query an area from the filled region, Filled Region Boundary Curves - This node will get the boundary curves for a filled region., Get All Detail Groups - This node will retrieve all instances of Detail Groups in the model., Get All Dimension Styles - This node will query all of the available dimension styles (this includes linear as well as arc, circle etc). , Get All Elements From Linked Model - This node is based on code posted by Julien Benoit. Big thanks to Julien for sharing his work. This node will retrieve all elements of a given category from a given linked model. , Get All Keynote Tags - Selects all Keynote Tags instances in the model. , Get All Line Styles - This node will return all available line styles., Get All Views - This node will query all views in the model and return them based on category, Get Built In Parameter - This node will take an input of a built in parameter name and element to return that parameters value. , Get Design Options - Queries all of the design options currently in the project., Get Documents - Queries all linked Revit files and retrieves their Name, LinkInstance and Document properties., Get Elements by Category/Level - This node will filter for all elements of a given category on a given level., Get Filled Regions - This node will query up all Filled Regions in the project as well as those in the active view only. , Get Level by Name - This node will retrieve a Revit Level Element by its name. , Get Line Style by Name - This node will return a line style object by its name. Line styles can be either Drafting or Model Line Property. , Get Rooms by Level - Filters Rooms by level., Get Tagged Element Id - Retrives an Element Id from input of element tags. For example if wall tags are inputted it will return tagged wall Ids., Get Text Note Type by Name - This node will select a text note type by name. , Get Unplaced Groups - This node will retrieve all unplaced groups in the model., Get Views from View Set - This node will take a name of a view set and return views/sheet elements contained in it. , Get Worksets - Retrieves user worksets from specified document, GH Point to DY Point - Converts CSV Grasshopper export of points into a Dynamo point list. , Group Curves - This node will take any input of flat list of curves and group them into sublists containing \"joinable\" curves that is continous curves. They might form closed curves or open curves. Use PolyCurve.ByJoinedCurves to convert output groups of curves into single PolyCurves, Id to Element - Selects elements in a model from id input (ElementId, string, integer or GUID), Isolate in View - This node will take input of elements and a view to isolate selected elements in a view., Key Schedule - This node will take a key schedule, data and a list of parameters and populate it with infomation from data parameter. Visit www.archi-lab.net for more information on how to prep this node for take off. , Legend Settings - This node sets all settings for the Legend display with Analysis Visualization Framework of Revit. , Local Printers Names - This node will query all locally installed printers and return their names., Marker Settings - This node will generate AnalysisDisplayMarkerAndTextSettings to be used with a Marker Analysis Display Style. Inputs are: Marker Shape(Circle, Triangle, Rectangle), Marker Size, Show Text (Boolean), Rounding, TextDisplayMethod (Show All, Show None, Show Predefined). , Marker&Text Display Style - This node will take an input of Points and a matching input of values to create Analysis Display Style in Revit. Use Legend, Marker and Color Settings nodes to fully customize your display style. , Mass Addition - This node will attempt to sum all elements contained within it. , New Section Box View By Elements - This node will create new section box around specified elements and apply it to a new 3D View with a specified name. Section box will be offset from the elements by a supplied offset values. , Override Fill Pattern in View - Overrides fill pattern of any element in an active view to specified fill pattern and color, Parameter Group - This node will return all available Parameter Groups, Phase Demolished - This node will query a Phase Demolished setting of an element and return phase id. If id is -1 that means that element was not demolished. , PolyCurve by Profile Family Type - It takes an input of a profile family type and extract curves from it converting them to polycurves and curve segments for use in Dynamo (sweeps)., Print PDF - This node will allow you to initiate a printing routine in revit from a set of views/sheets, printer name, print settings and print range. , Remap UV Domain - This node takes an input of a reference face and a list of UVs that get remapped into that face's UV Domain. The output is a list of UV Coordinates in that surface's domain. , Rename Files - This node will use an \"identifier\" to pick out files from a supplied directory to rename files to a new name supplied. Please make sure to match list lengths of identifier and new name inputs., Rotate Family - This node will rotate a family in Revit around a given axis by supplied angle (in radians). Please remember that every time you run your definition it will rotate family by given angle every time. , Schedule Appearance - This node allows you to control the appearance of the schedule. For now it supports only title, header and body text type. , Schedule Formatting - This node will allow you to control schedule formatiing options like column width, whether a column is hidden, column heading etc. , Schedule Sorting Grouping - This node will allow you to specify sorting/grouping parameters in schedule as well parameters like sorting order, whether its a footer or header. Visit archi-lab.net for more information. , Schedule Title Appearance - This node will override the appearance of the title. , Schedules on Sheets - Queries all schedules and produces two lists: one with all schedules that are placed on sheets and one with schedules that are not placed on sheets., Select Model Lines by Style - This node will select all model lines in the revit project by a line style name. , Set BuiltIn Parameter - This node will take an input of a built in parameter name and set that parameter to given value for given elements. , Slice String - Slices X number of leading or trailing characters from string (boolean true will slice from left while boolean set to false from right), String From List - This node will take an input of a list or nested list and then join each element in a list with a given seperator while adding a suffix.",
            "engine_metadata": "",
            "engine_version": "0.8.2.2311",
            "created": "2015-08-30T18:44:14.011Z",
            "full_dependency_versions": [ "2015.8.26" ],
            "full_dependency_ids": [
              {
                "_id": "53e99ce50e5572016a00018a",
                "name": "archi-lab.net"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2015.8.26"
          },
          {
            "_id": "55e382fd662bf0e908000128",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/5f51c08f-8b90-4075-b236-5696d58d7687gregPkg858.zip",
            "contents": "Add Shared Parameter to Project - This node will add a parameter to shared parameter file and then add it to the project. , Apply View Template - This node will allow you to apply a view template to a set of views., Cell Style Settings - This node will generate a Cell Style Settings that can be used to override cell properties. , Change Family Type - Changes family type of a family by passing in an Element and type id of the type we want to change it to. , Clear List - This node will remove all Null and Empty Lists from any list. , Color Settings - This node creates color settings for the Analysis Visualization Framework. , Colored Surface Display Style - This node will generate a Colored Surface Display Style from inputs of points, values, and instance surface for analysis to be aplied to. Also, use color and legend settings (part of archi-lab package) to create style colors and visibility., Colored Surface Settings - This node creates settings for the colored surface display style of the Analysis Visualization Framework., Combine by Pattern - Combines two list based on a input pattern of true and false., Create Annotation Tag - This node will create an annotation tag at a given location, of given type and in a supplied view. If only single view is supplied then all tags will be created in that view. , Current Document - Retrieves Current Document, Delete Elements - This node will delete elements from Revit project., Delete Linked Model Keynote Tags - Deletes all Keynote Tags that are tagging elements in the linked model. if element in the linked model has a keynote assigned thus a keynote tag reads a proper value it will not be deleted. , Delete Unnamed Reference Planes - Does just what the name says. , Dispatch - Works exactly like the Dispatch component in Grasshopper. Input a list and a matching pattern of True/False to split list into two lists one containing all True arguments while other all False arguments. , Door Set Handing - Determines door set handing (whether its a left or right handed door). Input takes doors, and output will split them into two lists (right and left)., Duplicate Item Indices - Searches an input list for duplicate entries and lists their index numbers. Couple with Get From List to delete duplicates from a list., Element Ids - This node will query an element id that can be used with Revit nodes. Dynamo Element Id node returns integer value. , Elements Fom Linked File in Room - This node will check what elements from a linked model are inside of any of the rooms in the current model. , Elements in Room - This node will check if any of the elements are inside any of the supplied rooms. , Elements on Sheet - This node will return elements on sheet., Fill Pattern - Get Fill Pattern by Name, Filled Region Area - This node will query an area from the filled region, Filled Region Boundary Curves - This node will get the boundary curves for a filled region., Get All Detail Groups - This node will retrieve all instances of Detail Groups in the model., Get All Dimension Styles - This node will query all of the available dimension styles (this includes linear as well as arc, circle etc). , Get All Elements From Linked Model - This node is based on code posted by Julien Benoit. Big thanks to Julien for sharing his work. This node will retrieve all elements of a given category from a given linked model. , Get All Keynote Tags - Selects all Keynote Tags instances in the model. , Get All Line Styles - This node will return all available line styles., Get All Views - This node will query all views in the model and return them based on category, Get Built In Parameter - This node will take an input of a built in parameter name and element to return that parameters value. , Get Design Options - Queries all of the design options currently in the project., Get Documents - Queries all linked Revit files and retrieves their Name, LinkInstance and Document properties., Get Elements by Category/Level - This node will filter for all elements of a given category on a given level., Get Filled Regions - This node will query up all Filled Regions in the project as well as those in the active view only. , Get Level by Name - This node will retrieve a Revit Level Element by its name. , Get Line Style by Name - This node will return a line style object by its name. Line styles can be either Drafting or Model Line Property. , Get Rooms by Level - Filters Rooms by level., Get Tagged Element Id - Retrives an Element Id from input of element tags. For example if wall tags are inputted it will return tagged wall Ids., Get Text Note Type by Name - This node will select a text note type by name. , Get Unplaced Groups - This node will retrieve all unplaced groups in the model., Get Views from View Set - This node will take a name of a view set and return views/sheet elements contained in it. , Get Worksets - Retrieves user worksets from specified document, GH Point to DY Point - Converts CSV Grasshopper export of points into a Dynamo point list. , Group Curves - This node will take any input of flat list of curves and group them into sublists containing \"joinable\" curves that is continous curves. They might form closed curves or open curves. Use PolyCurve.ByJoinedCurves to convert output groups of curves into single PolyCurves, Id to Element - Selects elements in a model from id input (ElementId, string, integer or GUID), Isolate in View - This node will take input of elements and a view to isolate selected elements in a view., Key Schedule - This node will take a key schedule, data and a list of parameters and populate it with infomation from data parameter. Visit www.archi-lab.net for more information on how to prep this node for take off. , Legend Settings - This node sets all settings for the Legend display with Analysis Visualization Framework of Revit. , Local Printers Names - This node will query all locally installed printers and return their names., Marker Settings - This node will generate AnalysisDisplayMarkerAndTextSettings to be used with a Marker Analysis Display Style. Inputs are: Marker Shape(Circle, Triangle, Rectangle), Marker Size, Show Text (Boolean), Rounding, TextDisplayMethod (Show All, Show None, Show Predefined). , Marker&Text Display Style - This node will take an input of Points and a matching input of values to create Analysis Display Style in Revit. Use Legend, Marker and Color Settings nodes to fully customize your display style. , Mass Addition - This node will attempt to sum all elements contained within it. , New Section Box View By Elements - This node will create new section box around specified elements and apply it to a new 3D View with a specified name. Section box will be offset from the elements by a supplied offset values. , Override Fill Pattern in View - Overrides fill pattern of any element in an active view to specified fill pattern and color, Parameter Group - This node will return all available Parameter Groups, Phase Demolished - This node will query a Phase Demolished setting of an element and return phase id. If id is -1 that means that element was not demolished. , PolyCurve by Profile Family Type - It takes an input of a profile family type and extract curves from it converting them to polycurves and curve segments for use in Dynamo (sweeps)., Print PDF - This node will allow you to initiate a printing routine in revit from a set of views/sheets, printer name, print settings and print range. , Remap UV Domain - This node takes an input of a reference face and a list of UVs that get remapped into that face's UV Domain. The output is a list of UV Coordinates in that surface's domain. , Rename Files - This node will use an \"identifier\" to pick out files from a supplied directory to rename files to a new name supplied. Please make sure to match list lengths of identifier and new name inputs., Rotate Family - This node will rotate a family in Revit around a given axis by supplied angle (in radians). Please remember that every time you run your definition it will rotate family by given angle every time. , Schedule Appearance - This node allows you to control the appearance of the schedule. For now it supports only title, header and body text type. , Schedule Formatting - This node will allow you to control schedule formatiing options like column width, whether a column is hidden, column heading etc. , Schedule Sorting Grouping - This node will allow you to specify sorting/grouping parameters in schedule as well parameters like sorting order, whether its a footer or header. Visit archi-lab.net for more information. , Schedule Title Appearance - This node will override the appearance of the title. , Schedules on Sheets - Queries all schedules and produces two lists: one with all schedules that are placed on sheets and one with schedules that are not placed on sheets., Select Model Lines by Style - This node will select all model lines in the revit project by a line style name. , Set BuiltIn Parameter - This node will take an input of a built in parameter name and set that parameter to given value for given elements. , Slice String - Slices X number of leading or trailing characters from string (boolean true will slice from left while boolean set to false from right), String From List - This node will take an input of a list or nested list and then join each element in a list with a given seperator while adding a suffix.",
            "engine_metadata": "",
            "engine_version": "0.8.2.2311",
            "created": "2015-08-30T22:26:05.748Z",
            "full_dependency_versions": [ "2015.8.27" ],
            "full_dependency_ids": [
              {
                "_id": "53e99ce50e5572016a00018a",
                "name": "archi-lab.net"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2015.8.27"
          },
          {
            "_id": "55e4dc3f662bf0e90800012b",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/d5f91c33-a9c0-442b-86ff-c6835896615egregPkg629.zip",
            "contents": "Add Shared Parameter to Project - This node will add a parameter to shared parameter file and then add it to the project. , Apply View Template - This node will allow you to apply a view template to a set of views., Cell Style Settings - This node will generate a Cell Style Settings that can be used to override cell properties. , Change Family Type - Changes family type of a family by passing in an Element and type id of the type we want to change it to. , Clear List - This node will remove all Null and Empty Lists from any list. , Color Settings - This node creates color settings for the Analysis Visualization Framework. , Colored Surface Display Style - This node will generate a Colored Surface Display Style from inputs of points, values, and instance surface for analysis to be aplied to. Also, use color and legend settings (part of archi-lab package) to create style colors and visibility., Colored Surface Settings - This node creates settings for the colored surface display style of the Analysis Visualization Framework., Combine by Pattern - Combines two list based on a input pattern of true and false., Create Annotation Tag - This node will create an annotation tag at a given location, of given type and in a supplied view. If only single view is supplied then all tags will be created in that view. , Current Document - Retrieves Current Document, Delete Elements - This node will delete elements from Revit project., Delete Linked Model Keynote Tags - Deletes all Keynote Tags that are tagging elements in the linked model. if element in the linked model has a keynote assigned thus a keynote tag reads a proper value it will not be deleted. , Delete Unnamed Reference Planes - Does just what the name says. , Dispatch - Works exactly like the Dispatch component in Grasshopper. Input a list and a matching pattern of True/False to split list into two lists one containing all True arguments while other all False arguments. , Door Set Handing - Determines door set handing (whether its a left or right handed door). Input takes doors, and output will split them into two lists (right and left)., Duplicate Item Indices - Searches an input list for duplicate entries and lists their index numbers. Couple with Get From List to delete duplicates from a list., Element Ids - This node will query an element id that can be used with Revit nodes. Dynamo Element Id node returns integer value. , Elements Fom Linked File in Room - This node will check what elements from a linked model are inside of any of the rooms in the current model. , Elements in Room - This node will check if any of the elements are inside any of the supplied rooms. , Elements on Sheet - This node will return elements on sheet., Fill Pattern - Get Fill Pattern by Name, Filled Region Area - This node will query an area from the filled region, Filled Region Boundary Curves - This node will get the boundary curves for a filled region., Get All Detail Groups - This node will retrieve all instances of Detail Groups in the model., Get All Dimension Styles - This node will query all of the available dimension styles (this includes linear as well as arc, circle etc). , Get All Elements From Linked Model - This node is based on code posted by Julien Benoit. Big thanks to Julien for sharing his work. This node will retrieve all elements of a given category from a given linked model. , Get All Keynote Tags - Selects all Keynote Tags instances in the model. , Get All Line Styles - This node will return all available line styles., Get All Views - This node will query all views in the model and return them based on category, Get Built In Parameter - This node will take an input of a built in parameter name and element to return that parameters value. , Get Design Options - Queries all of the design options currently in the project., Get Documents - Queries all linked Revit files and retrieves their Name, LinkInstance and Document properties., Get Elements by Category/Level - This node will filter for all elements of a given category on a given level., Get Filled Regions - This node will query up all Filled Regions in the project as well as those in the active view only. , Get Level by Name - This node will retrieve a Revit Level Element by its name. , Get Line Style by Name - This node will return a line style object by its name. Line styles can be either Drafting or Model Line Property. , Get Rooms by Level - Filters Rooms by level., Get Tagged Element Id - Retrives an Element Id from input of element tags. For example if wall tags are inputted it will return tagged wall Ids., Get Text Note Type by Name - This node will select a text note type by name. , Get Unplaced Groups - This node will retrieve all unplaced groups in the model., Get Views from View Set - This node will take a name of a view set and return views/sheet elements contained in it. , Get Worksets - Retrieves user worksets from specified document, GH Point to DY Point - Converts CSV Grasshopper export of points into a Dynamo point list. , Group Curves - This node will take any input of flat list of curves and group them into sublists containing \"joinable\" curves that is continous curves. They might form closed curves or open curves. Use PolyCurve.ByJoinedCurves to convert output groups of curves into single PolyCurves, Id to Element - Selects elements in a model from id input (ElementId, string, integer or GUID), Isolate in View - This node will take input of elements and a view to isolate selected elements in a view., Key Schedule - This node will take a key schedule, data and a list of parameters and populate it with infomation from data parameter. Visit www.archi-lab.net for more information on how to prep this node for take off. , Legend Settings - This node sets all settings for the Legend display with Analysis Visualization Framework of Revit. , Local Printers Names - This node will query all locally installed printers and return their names., Marker Settings - This node will generate AnalysisDisplayMarkerAndTextSettings to be used with a Marker Analysis Display Style. Inputs are: Marker Shape(Circle, Triangle, Rectangle), Marker Size, Show Text (Boolean), Rounding, TextDisplayMethod (Show All, Show None, Show Predefined). , Marker&Text Display Style - This node will take an input of Points and a matching input of values to create Analysis Display Style in Revit. Use Legend, Marker and Color Settings nodes to fully customize your display style. , Mass Addition - This node will attempt to sum all elements contained within it. , New Section Box View By Elements - This node will create new section box around specified elements and apply it to a new 3D View with a specified name. Section box will be offset from the elements by a supplied offset values. , Override Fill Pattern in View - Overrides fill pattern of any element in an active view to specified fill pattern and color, Parameter Group - This node will return all available Parameter Groups, Phase Demolished - This node will query a Phase Demolished setting of an element and return phase id. If id is -1 that means that element was not demolished. , PolyCurve by Profile Family Type - It takes an input of a profile family type and extract curves from it converting them to polycurves and curve segments for use in Dynamo (sweeps)., Print PDF - This node will allow you to initiate a printing routine in revit from a set of views/sheets, printer name, print settings and print range. , Remap UV Domain - This node takes an input of a reference face and a list of UVs that get remapped into that face's UV Domain. The output is a list of UV Coordinates in that surface's domain. , Rename Files - This node will use an \"identifier\" to pick out files from a supplied directory to rename files to a new name supplied. Please make sure to match list lengths of identifier and new name inputs., Rotate Family - This node will rotate a family in Revit around a given axis by supplied angle (in radians). Please remember that every time you run your definition it will rotate family by given angle every time. , Schedule Appearance - This node allows you to control the appearance of the schedule. For now it supports only title, header and body text type. , Schedule Formatting - This node will allow you to control schedule formatiing options like column width, whether a column is hidden, column heading etc. , Schedule Sorting Grouping - This node will allow you to specify sorting/grouping parameters in schedule as well parameters like sorting order, whether its a footer or header. Visit archi-lab.net for more information. , Schedule Title Appearance - This node will override the appearance of the title. , Schedules on Sheets - Queries all schedules and produces two lists: one with all schedules that are placed on sheets and one with schedules that are not placed on sheets., Select Model Lines by Style - This node will select all model lines in the revit project by a line style name. , Set BuiltIn Parameter - This node will take an input of a built in parameter name and set that parameter to given value for given elements. , Slice String - Slices X number of leading or trailing characters from string (boolean true will slice from left while boolean set to false from right), String From List - This node will take an input of a list or nested list and then join each element in a list with a given seperator while adding a suffix., Get All Revisions - This node will return all Revisions currently defined in the mode., Revision Properties - This node will return some most common Revision properties like Description or Issue Date., Revisions on Sheet - This node will return all Revisions specified in \"Revisions on Sheet\" selection of the sheet., Set Revisions on Sheet - This node will set the Revisions on Sheet property of the sheet. ",
            "engine_metadata": "",
            "engine_version": "0.8.2.2311",
            "created": "2015-08-31T22:59:11.713Z",
            "full_dependency_versions": [ "2015.8.28" ],
            "full_dependency_ids": [
              {
                "_id": "53e99ce50e5572016a00018a",
                "name": "archi-lab.net"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2015.8.28"
          },
          {
            "_id": "55e5b31b662bf0e90800012f",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/3b7a6cd6-eef3-4165-80ae-be1746fbf223gregPkg807.zip",
            "contents": "Add Shared Parameter to Project - This node will add a parameter to shared parameter file and then add it to the project. , Apply View Template - This node will allow you to apply a view template to a set of views., Cell Style Settings - This node will generate a Cell Style Settings that can be used to override cell properties. , Change Family Type - Changes family type of a family by passing in an Element and type id of the type we want to change it to. , Clear List - This node will remove all Null and Empty Lists from any list. , Color Settings - This node creates color settings for the Analysis Visualization Framework. , Colored Surface Display Style - This node will generate a Colored Surface Display Style from inputs of points, values, and instance surface for analysis to be aplied to. Also, use color and legend settings (part of archi-lab package) to create style colors and visibility., Colored Surface Settings - This node creates settings for the colored surface display style of the Analysis Visualization Framework., Combine by Pattern - Combines two list based on a input pattern of true and false., Create Annotation Tag - This node will create an annotation tag at a given location, of given type and in a supplied view. If only single view is supplied then all tags will be created in that view. , Current Document - Retrieves Current Document, Delete Elements - This node will delete elements from Revit project., Delete Linked Model Keynote Tags - Deletes all Keynote Tags that are tagging elements in the linked model. if element in the linked model has a keynote assigned thus a keynote tag reads a proper value it will not be deleted. , Delete Unnamed Reference Planes - Does just what the name says. , Dispatch - Works exactly like the Dispatch component in Grasshopper. Input a list and a matching pattern of True/False to split list into two lists one containing all True arguments while other all False arguments. , Door Set Handing - Determines door set handing (whether its a left or right handed door). Input takes doors, and output will split them into two lists (right and left)., Duplicate Item Indices - Searches an input list for duplicate entries and lists their index numbers. Couple with Get From List to delete duplicates from a list., Element Ids - This node will query an element id that can be used with Revit nodes. Dynamo Element Id node returns integer value. , Elements Fom Linked File in Room - This node will check what elements from a linked model are inside of any of the rooms in the current model. , Elements in Room - This node will check if any of the elements are inside any of the supplied rooms. , Elements on Sheet - This node will return elements on sheet., Fill Pattern - Get Fill Pattern by Name, Filled Region Area - This node will query an area from the filled region, Filled Region Boundary Curves - This node will get the boundary curves for a filled region., Get All Detail Groups - This node will retrieve all instances of Detail Groups in the model., Get All Dimension Styles - This node will query all of the available dimension styles (this includes linear as well as arc, circle etc). , Get All Elements From Linked Model - This node is based on code posted by Julien Benoit. Big thanks to Julien for sharing his work. This node will retrieve all elements of a given category from a given linked model. , Get All Keynote Tags - Selects all Keynote Tags instances in the model. , Get All Line Styles - This node will return all available line styles., Get All Revisions - This node will return all Revisions currently defined in the mode., Get All Views - This node will query all views in the model and return them based on category, Get Built In Parameter - This node will take an input of a built in parameter name and element to return that parameters value. , Get Design Options - Queries all of the design options currently in the project., Get Documents - Queries all linked Revit files and retrieves their Name, LinkInstance and Document properties., Get Elements by Category/Level - This node will filter for all elements of a given category on a given level., Get Filled Regions - This node will query up all Filled Regions in the project as well as those in the active view only. , Get Level by Name - This node will retrieve a Revit Level Element by its name. , Get Line Style by Name - This node will return a line style object by its name. Line styles can be either Drafting or Model Line Property. , Get Rooms by Level - Filters Rooms by level., Get Tagged Element Id - Retrives an Element Id from input of element tags. For example if wall tags are inputted it will return tagged wall Ids., Get Text Note Type by Name - This node will select a text note type by name. , Get Unplaced Groups - This node will retrieve all unplaced groups in the model., Get Views from View Set - This node will take a name of a view set and return views/sheet elements contained in it. , Get Worksets - Retrieves user worksets from specified document, GH Point to DY Point - Converts CSV Grasshopper export of points into a Dynamo point list. , Group Curves - This node will take any input of flat list of curves and group them into sublists containing \"joinable\" curves that is continous curves. They might form closed curves or open curves. Use PolyCurve.ByJoinedCurves to convert output groups of curves into single PolyCurves, Id to Element - Selects elements in a model from id input (ElementId, string, integer or GUID), Isolate in View - This node will take input of elements and a view to isolate selected elements in a view., Key Schedule - This node will take a key schedule, data and a list of parameters and populate it with infomation from data parameter. Visit www.archi-lab.net for more information on how to prep this node for take off. , Legend Settings - This node sets all settings for the Legend display with Analysis Visualization Framework of Revit. , Local Printers Names - This node will query all locally installed printers and return their names., Marker Settings - This node will generate AnalysisDisplayMarkerAndTextSettings to be used with a Marker Analysis Display Style. Inputs are: Marker Shape(Circle, Triangle, Rectangle), Marker Size, Show Text (Boolean), Rounding, TextDisplayMethod (Show All, Show None, Show Predefined). , Marker&Text Display Style - This node will take an input of Points and a matching input of values to create Analysis Display Style in Revit. Use Legend, Marker and Color Settings nodes to fully customize your display style. , Mass Addition - This node will attempt to sum all elements contained within it. , New Section Box View By Elements - This node will create new section box around specified elements and apply it to a new 3D View with a specified name. Section box will be offset from the elements by a supplied offset values. , Override Fill Pattern in View - Overrides fill pattern of any element in an active view to specified fill pattern and color, Parameter Group - This node will return all available Parameter Groups, Phase Demolished - This node will query a Phase Demolished setting of an element and return phase id. If id is -1 that means that element was not demolished. , PolyCurve by Profile Family Type - It takes an input of a profile family type and extract curves from it converting them to polycurves and curve segments for use in Dynamo (sweeps)., Print PDF - This node will allow you to initiate a printing routine in revit from a set of views/sheets, printer name, print settings and print range. , Remap UV Domain - This node takes an input of a reference face and a list of UVs that get remapped into that face's UV Domain. The output is a list of UV Coordinates in that surface's domain. , Rename Files - This node will use an \"identifier\" to pick out files from a supplied directory to rename files to a new name supplied. Please make sure to match list lengths of identifier and new name inputs., Revision Properties - This node will return some most common Revision properties like Description or Issue Date., Revisions on Sheet - This node will return all Revisions specified in \"Revisions on Sheet\" selection of the sheet., Rotate Family - This node will rotate a family in Revit around a given axis by supplied angle (in radians). Please remember that every time you run your definition it will rotate family by given angle every time. , Schedule Appearance - This node allows you to control the appearance of the schedule. For now it supports only title, header and body text type. , Schedule Formatting - This node will allow you to control schedule formatiing options like column width, whether a column is hidden, column heading etc. , Schedule Sorting Grouping - This node will allow you to specify sorting/grouping parameters in schedule as well parameters like sorting order, whether its a footer or header. Visit archi-lab.net for more information. , Schedule Title Appearance - This node will override the appearance of the title. , Schedules on Sheets - Queries all schedules and produces two lists: one with all schedules that are placed on sheets and one with schedules that are not placed on sheets., Select Model Lines by Style - This node will select all model lines in the revit project by a line style name. , Set BuiltIn Parameter - This node will take an input of a built in parameter name and set that parameter to given value for given elements. , Set Revisions on Sheet - This node will set the Revisions on Sheet property of the sheet. , Slice String - Slices X number of leading or trailing characters from string (boolean true will slice from left while boolean set to false from right), String From List - This node will take an input of a list or nested list and then join each element in a list with a given seperator while adding a suffix.",
            "engine_metadata": "",
            "engine_version": "0.8.2.2311",
            "created": "2015-09-01T14:15:55.197Z",
            "full_dependency_versions": [ "2015.8.29" ],
            "full_dependency_ids": [
              {
                "_id": "53e99ce50e5572016a00018a",
                "name": "archi-lab.net"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2015.8.29"
          },
          {
            "_id": "55e5ea25662bf0e908000130",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/904d1b20-6afd-4277-a3c1-e7144b9b7ce4gregPkg960.zip",
            "contents": "Add Shared Parameter to Project - This node will add a parameter to shared parameter file and then add it to the project. , Apply View Template - This node will allow you to apply a view template to a set of views., Cell Style Settings - This node will generate a Cell Style Settings that can be used to override cell properties. , Change Family Type - Changes family type of a family by passing in an Element and type id of the type we want to change it to. , Clear List - This node will remove all Null and Empty Lists from any list. , Color Settings - This node creates color settings for the Analysis Visualization Framework. , Colored Surface Display Style - This node will generate a Colored Surface Display Style from inputs of points, values, and instance surface for analysis to be aplied to. Also, use color and legend settings (part of archi-lab package) to create style colors and visibility., Colored Surface Settings - This node creates settings for the colored surface display style of the Analysis Visualization Framework., Combine by Pattern - Combines two list based on a input pattern of true and false., Create Annotation Tag - This node will create an annotation tag at a given location, of given type and in a supplied view. If only single view is supplied then all tags will be created in that view. , Current Document - Retrieves Current Document, Delete Elements - This node will delete elements from Revit project., Delete Linked Model Keynote Tags - Deletes all Keynote Tags that are tagging elements in the linked model. if element in the linked model has a keynote assigned thus a keynote tag reads a proper value it will not be deleted. , Delete Unnamed Reference Planes - Does just what the name says. , Dispatch - Works exactly like the Dispatch component in Grasshopper. Input a list and a matching pattern of True/False to split list into two lists one containing all True arguments while other all False arguments. , Door Set Handing - Determines door set handing (whether its a left or right handed door). Input takes doors, and output will split them into two lists (right and left)., Duplicate Item Indices - Searches an input list for duplicate entries and lists their index numbers. Couple with Get From List to delete duplicates from a list., Element Ids - This node will query an element id that can be used with Revit nodes. Dynamo Element Id node returns integer value. , Elements Fom Linked File in Room - This node will check what elements from a linked model are inside of any of the rooms in the current model. , Elements in Room - This node will check if any of the elements are inside any of the supplied rooms. , Elements on Sheet - This node will return elements on sheet., Fill Pattern - Get Fill Pattern by Name, Filled Region Area - This node will query an area from the filled region, Filled Region Boundary Curves - This node will get the boundary curves for a filled region., Get All Detail Groups - This node will retrieve all instances of Detail Groups in the model., Get All Dimension Styles - This node will query all of the available dimension styles (this includes linear as well as arc, circle etc). , Get All Elements From Linked Model - This node is based on code posted by Julien Benoit. Big thanks to Julien for sharing his work. This node will retrieve all elements of a given category from a given linked model. , Get All Keynote Tags - Selects all Keynote Tags instances in the model. , Get All Line Styles - This node will return all available line styles., Get All Revisions - This node will return all Revisions currently defined in the mode., Get All Views - This node will query all views in the model and return them based on category, Get Built In Parameter - This node will take an input of a built in parameter name and element to return that parameters value. , Get Design Options - Queries all of the design options currently in the project., Get Documents - Queries all linked Revit files and retrieves their Name, LinkInstance and Document properties., Get Elements by Category/Level - This node will filter for all elements of a given category on a given level., Get Filled Regions - This node will query up all Filled Regions in the project as well as those in the active view only. , Get Level by Name - This node will retrieve a Revit Level Element by its name. , Get Line Style by Name - This node will return a line style object by its name. Line styles can be either Drafting or Model Line Property. , Get Rooms by Level - Filters Rooms by level., Get Tagged Element Id - Retrives an Element Id from input of element tags. For example if wall tags are inputted it will return tagged wall Ids., Get Text Note Type by Name - This node will select a text note type by name. , Get Unplaced Groups - This node will retrieve all unplaced groups in the model., Get Views from View Set - This node will take a name of a view set and return views/sheet elements contained in it. , Get Worksets - Retrieves user worksets from specified document, GH Point to DY Point - Converts CSV Grasshopper export of points into a Dynamo point list. , Group Curves - This node will take any input of flat list of curves and group them into sublists containing \"joinable\" curves that is continous curves. They might form closed curves or open curves. Use PolyCurve.ByJoinedCurves to convert output groups of curves into single PolyCurves, Id to Element - Selects elements in a model from id input (ElementId, string, integer or GUID), Isolate in View - This node will take input of elements and a view to isolate selected elements in a view., Key Schedule - This node will take a key schedule, data and a list of parameters and populate it with infomation from data parameter. Visit www.archi-lab.net for more information on how to prep this node for take off. , Legend Settings - This node sets all settings for the Legend display with Analysis Visualization Framework of Revit. , Local Printers Names - This node will query all locally installed printers and return their names., Marker Settings - This node will generate AnalysisDisplayMarkerAndTextSettings to be used with a Marker Analysis Display Style. Inputs are: Marker Shape(Circle, Triangle, Rectangle), Marker Size, Show Text (Boolean), Rounding, TextDisplayMethod (Show All, Show None, Show Predefined). , Marker&Text Display Style - This node will take an input of Points and a matching input of values to create Analysis Display Style in Revit. Use Legend, Marker and Color Settings nodes to fully customize your display style. , Mass Addition - This node will attempt to sum all elements contained within it. , New Section Box View By Elements - This node will create new section box around specified elements and apply it to a new 3D View with a specified name. Section box will be offset from the elements by a supplied offset values. , Override Fill Pattern in View - Overrides fill pattern of any element in an active view to specified fill pattern and color, Parameter Group - This node will return all available Parameter Groups, Phase Demolished - This node will query a Phase Demolished setting of an element and return phase id. If id is -1 that means that element was not demolished. , PolyCurve by Profile Family Type - It takes an input of a profile family type and extract curves from it converting them to polycurves and curve segments for use in Dynamo (sweeps)., Print PDF - This node will allow you to initiate a printing routine in revit from a set of views/sheets, printer name, print settings and print range. , Remap UV Domain - This node takes an input of a reference face and a list of UVs that get remapped into that face's UV Domain. The output is a list of UV Coordinates in that surface's domain. , Rename Files - This node will use an \"identifier\" to pick out files from a supplied directory to rename files to a new name supplied. Please make sure to match list lengths of identifier and new name inputs., Revision Properties - This node will return some most common Revision properties like Description or Issue Date., Revisions on Sheet - This node will return all Revisions specified in \"Revisions on Sheet\" selection of the sheet., Rotate Family - This node will rotate a family in Revit around a given axis by supplied angle (in radians). Please remember that every time you run your definition it will rotate family by given angle every time. , Schedule Appearance - This node allows you to control the appearance of the schedule. For now it supports only title, header and body text type. , Schedule Formatting - This node will allow you to control schedule formatiing options like column width, whether a column is hidden, column heading etc. , Schedule Sorting Grouping - This node will allow you to specify sorting/grouping parameters in schedule as well parameters like sorting order, whether its a footer or header. Visit archi-lab.net for more information. , Schedule Title Appearance - This node will override the appearance of the title. , Schedules on Sheets - Queries all schedules and produces two lists: one with all schedules that are placed on sheets and one with schedules that are not placed on sheets., Select Model Lines by Style - This node will select all model lines in the revit project by a line style name. , Set BuiltIn Parameter - This node will take an input of a built in parameter name and set that parameter to given value for given elements. , Set Revisions on Sheet - This node will set the Revisions on Sheet property of the sheet. , Slice String - Slices X number of leading or trailing characters from string (boolean true will slice from left while boolean set to false from right), String From List - This node will take an input of a list or nested list and then join each element in a list with a given seperator while adding a suffix., Get All Viewport Types - This node will retrieve all Viewport Types currently in the model. ",
            "engine_metadata": "",
            "engine_version": "0.8.2.2311",
            "created": "2015-09-01T18:10:45.785Z",
            "full_dependency_versions": [ "2015.8.30" ],
            "full_dependency_ids": [
              {
                "_id": "53e99ce50e5572016a00018a",
                "name": "archi-lab.net"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2015.8.30"
          },
          {
            "_id": "55e8532f662bf0e90800013b",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/6c95b900-cd3e-4a72-b6ba-e44ee95bb1a2gregPkg53.zip",
            "contents": "Add Shared Parameter to Project - This node will add a parameter to shared parameter file and then add it to the project. , Apply View Template - This node will allow you to apply a view template to a set of views., Cell Style Settings - This node will generate a Cell Style Settings that can be used to override cell properties. , Change Family Type - Changes family type of a family by passing in an Element and type id of the type we want to change it to. , Clear List - This node will remove all Null and Empty Lists from any list. , Color Settings - This node creates color settings for the Analysis Visualization Framework. , Colored Surface Display Style - This node will generate a Colored Surface Display Style from inputs of points, values, and instance surface for analysis to be aplied to. Also, use color and legend settings (part of archi-lab package) to create style colors and visibility., Colored Surface Settings - This node creates settings for the colored surface display style of the Analysis Visualization Framework., Combine by Pattern - Combines two list based on a input pattern of true and false., Create Annotation Tag - This node will create an annotation tag at a given location, of given type and in a supplied view. If only single view is supplied then all tags will be created in that view. , Current Document - Retrieves Current Document, Delete Elements - This node will delete elements from Revit project., Delete Linked Model Keynote Tags - Deletes all Keynote Tags that are tagging elements in the linked model. if element in the linked model has a keynote assigned thus a keynote tag reads a proper value it will not be deleted. , Delete Unnamed Reference Planes - Does just what the name says. , Dispatch - Works exactly like the Dispatch component in Grasshopper. Input a list and a matching pattern of True/False to split list into two lists one containing all True arguments while other all False arguments. , Door Set Handing - Determines door set handing (whether its a left or right handed door). Input takes doors, and output will split them into two lists (right and left)., Duplicate Item Indices - Searches an input list for duplicate entries and lists their index numbers. Couple with Get From List to delete duplicates from a list., Element Ids - This node will query an element id that can be used with Revit nodes. Dynamo Element Id node returns integer value. , Elements Fom Linked File in Room - This node will check what elements from a linked model are inside of any of the rooms in the current model. , Elements in Room - This node will check if any of the elements are inside any of the supplied rooms. , Elements on Sheet - This node will return elements on sheet., Fill Pattern - Get Fill Pattern by Name, Filled Region Area - This node will query an area from the filled region, Filled Region Boundary Curves - This node will get the boundary curves for a filled region., Get All Detail Groups - This node will retrieve all instances of Detail Groups in the model., Get All Dimension Styles - This node will query all of the available dimension styles (this includes linear as well as arc, circle etc). , Get All Elements From Linked Model - This node is based on code posted by Julien Benoit. Big thanks to Julien for sharing his work. This node will retrieve all elements of a given category from a given linked model. , Get All Keynote Tags - Selects all Keynote Tags instances in the model. , Get All Line Styles - This node will return all available line styles., Get All Revisions - This node will return all Revisions currently defined in the mode., Get All Viewport Types - This node will retrieve all Viewport Types currently in the model. , Get All Views - This node will query all views in the model and return them based on category, Get Built In Parameter - This node will take an input of a built in parameter name and element to return that parameters value. , Get Design Options - Queries all of the design options currently in the project., Get Documents - Queries all linked Revit files and retrieves their Name, LinkInstance and Document properties., Get Elements by Category/Level - This node will filter for all elements of a given category on a given level., Get Filled Regions - This node will query up all Filled Regions in the project as well as those in the active view only. , Get Level by Name - This node will retrieve a Revit Level Element by its name. , Get Line Style by Name - This node will return a line style object by its name. Line styles can be either Drafting or Model Line Property. , Get Rooms by Level - Filters Rooms by level., Get Tagged Element Id - Retrives an Element Id from input of element tags. For example if wall tags are inputted it will return tagged wall Ids., Get Text Note Type by Name - This node will select a text note type by name. , Get Unplaced Groups - This node will retrieve all unplaced groups in the model., Get Views from View Set - This node will take a name of a view set and return views/sheet elements contained in it. , Get Worksets - Retrieves user worksets from specified document, GH Point to DY Point - Converts CSV Grasshopper export of points into a Dynamo point list. , Group Curves - This node will take any input of flat list of curves and group them into sublists containing \"joinable\" curves that is continous curves. They might form closed curves or open curves. Use PolyCurve.ByJoinedCurves to convert output groups of curves into single PolyCurves, Id to Element - Selects elements in a model from id input (ElementId, string, integer or GUID), Isolate in View - This node will take input of elements and a view to isolate selected elements in a view., Key Schedule - This node will take a key schedule, data and a list of parameters and populate it with infomation from data parameter. Visit www.archi-lab.net for more information on how to prep this node for take off. , Legend Settings - This node sets all settings for the Legend display with Analysis Visualization Framework of Revit. , Local Printers Names - This node will query all locally installed printers and return their names., Marker Settings - This node will generate AnalysisDisplayMarkerAndTextSettings to be used with a Marker Analysis Display Style. Inputs are: Marker Shape(Circle, Triangle, Rectangle), Marker Size, Show Text (Boolean), Rounding, TextDisplayMethod (Show All, Show None, Show Predefined). , Marker&Text Display Style - This node will take an input of Points and a matching input of values to create Analysis Display Style in Revit. Use Legend, Marker and Color Settings nodes to fully customize your display style. , Mass Addition - This node will attempt to sum all elements contained within it. , New Section Box View By Elements - This node will create new section box around specified elements and apply it to a new 3D View with a specified name. Section box will be offset from the elements by a supplied offset values. , Override Fill Pattern in View - Overrides fill pattern of any element in an active view to specified fill pattern and color, Parameter Group - This node will return all available Parameter Groups, Phase Demolished - This node will query a Phase Demolished setting of an element and return phase id. If id is -1 that means that element was not demolished. , PolyCurve by Profile Family Type - It takes an input of a profile family type and extract curves from it converting them to polycurves and curve segments for use in Dynamo (sweeps)., Print PDF - This node will allow you to initiate a printing routine in revit from a set of views/sheets, printer name, print settings and print range. , Remap UV Domain - This node takes an input of a reference face and a list of UVs that get remapped into that face's UV Domain. The output is a list of UV Coordinates in that surface's domain. , Rename Files - This node will use an \"identifier\" to pick out files from a supplied directory to rename files to a new name supplied. Please make sure to match list lengths of identifier and new name inputs., Revision Properties - This node will return some most common Revision properties like Description or Issue Date., Revisions on Sheet - This node will return all Revisions specified in \"Revisions on Sheet\" selection of the sheet., Rotate Family - This node will rotate a family in Revit around a given axis by supplied angle (in radians). Please remember that every time you run your definition it will rotate family by given angle every time. , Schedule Appearance - This node allows you to control the appearance of the schedule. For now it supports only title, header and body text type. , Schedule Formatting - This node will allow you to control schedule formatiing options like column width, whether a column is hidden, column heading etc. , Schedule Sorting Grouping - This node will allow you to specify sorting/grouping parameters in schedule as well parameters like sorting order, whether its a footer or header. Visit archi-lab.net for more information. , Schedule Title Appearance - This node will override the appearance of the title. , Schedules on Sheets - Queries all schedules and produces two lists: one with all schedules that are placed on sheets and one with schedules that are not placed on sheets., Select Model Lines by Style - This node will select all model lines in the revit project by a line style name. , Set BuiltIn Parameter - This node will take an input of a built in parameter name and set that parameter to given value for given elements. , Set Revisions on Sheet - This node will set the Revisions on Sheet property of the sheet. , Slice String - Slices X number of leading or trailing characters from string (boolean true will slice from left while boolean set to false from right), String From List - This node will take an input of a list or nested list and then join each element in a list with a given seperator while adding a suffix.",
            "engine_metadata": "",
            "engine_version": "0.8.2.2311",
            "created": "2015-09-03T14:03:27.376Z",
            "full_dependency_versions": [ "2015.8.31" ],
            "full_dependency_ids": [
              {
                "_id": "53e99ce50e5572016a00018a",
                "name": "archi-lab.net"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2015.8.31"
          },
          {
            "_id": "55f88f08662bf0e90800018a",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/82ed4fdb-ea55-45ac-8580-cb93260999d1gregPkg909.zip",
            "contents": "Add Shared Parameter to Project - This node will add a parameter to shared parameter file and then add it to the project. , Apply View Template - This node will allow you to apply a view template to a set of views., Cell Style Settings - This node will generate a Cell Style Settings that can be used to override cell properties. , Change Family Type - Changes family type of a family by passing in an Element and type id of the type we want to change it to. , Clear List - This node will remove all Null and Empty Lists from any list. , Color Settings - This node creates color settings for the Analysis Visualization Framework. , Colored Surface Display Style - This node will generate a Colored Surface Display Style from inputs of points, values, and instance surface for analysis to be aplied to. Also, use color and legend settings (part of archi-lab package) to create style colors and visibility., Colored Surface Settings - This node creates settings for the colored surface display style of the Analysis Visualization Framework., Combine by Pattern - Combines two list based on a input pattern of true and false., Create Annotation Tag - This node will create an annotation tag at a given location, of given type and in a supplied view. If only single view is supplied then all tags will be created in that view. , Current Document - Retrieves Current Document, Delete Elements - This node will delete elements from Revit project., Delete Linked Model Keynote Tags - Deletes all Keynote Tags that are tagging elements in the linked model. if element in the linked model has a keynote assigned thus a keynote tag reads a proper value it will not be deleted. , Delete Unnamed Reference Planes - Does just what the name says. , Dispatch - Works exactly like the Dispatch component in Grasshopper. Input a list and a matching pattern of True/False to split list into two lists one containing all True arguments while other all False arguments. , Door Set Handing - Determines door set handing (whether its a left or right handed door). Input takes doors, and output will split them into two lists (right and left)., Duplicate Item Indices - Searches an input list for duplicate entries and lists their index numbers. Couple with Get From List to delete duplicates from a list., Element Ids - This node will query an element id that can be used with Revit nodes. Dynamo Element Id node returns integer value. , Elements Fom Linked File in Room - This node will check what elements from a linked model are inside of any of the rooms in the current model. , Elements in Room - This node will check if any of the elements are inside any of the supplied rooms. , Elements on Sheet - This node will return elements on sheet., Fill Pattern - Get Fill Pattern by Name, Filled Region Area - This node will query an area from the filled region, Filled Region Boundary Curves - This node will get the boundary curves for a filled region., Get All Detail Groups - This node will retrieve all instances of Detail Groups in the model., Get All Dimension Styles - This node will query all of the available dimension styles (this includes linear as well as arc, circle etc). , Get All Elements From Linked Model - This node is based on code posted by Julien Benoit. Big thanks to Julien for sharing his work. This node will retrieve all elements of a given category from a given linked model. , Get All Keynote Tags - Selects all Keynote Tags instances in the model. , Get All Line Styles - This node will return all available line styles., Get All Revisions - This node will return all Revisions currently defined in the mode., Get All Viewport Types - This node will retrieve all Viewport Types currently in the model. , Get All Views - This node will query all views in the model and return them based on category, Get Built In Parameter - This node will take an input of a built in parameter name and element to return that parameters value. , Get Design Options - Queries all of the design options currently in the project., Get Documents - Queries all linked Revit files and retrieves their Name, LinkInstance and Document properties., Get Elements by Category/Level - This node will filter for all elements of a given category on a given level., Get Filled Regions - This node will query up all Filled Regions in the project as well as those in the active view only. , Get Level by Name - This node will retrieve a Revit Level Element by its name. , Get Line Style by Name - This node will return a line style object by its name. Line styles can be either Drafting or Model Line Property. , Get Rooms by Level - Filters Rooms by level., Get Tagged Element Id - Retrives an Element Id from input of element tags. For example if wall tags are inputted it will return tagged wall Ids., Get Text Note Type by Name - This node will select a text note type by name. , Get Unplaced Groups - This node will retrieve all unplaced groups in the model., Get Views from View Set - This node will take a name of a view set and return views/sheet elements contained in it. , Get Worksets - Retrieves user worksets from specified document, GH Point to DY Point - Converts CSV Grasshopper export of points into a Dynamo point list. , Group Curves - This node will take any input of flat list of curves and group them into sublists containing \"joinable\" curves that is continous curves. They might form closed curves or open curves. Use PolyCurve.ByJoinedCurves to convert output groups of curves into single PolyCurves, Id to Element - Selects elements in a model from id input (ElementId, string, integer or GUID), Isolate in View - This node will take input of elements and a view to isolate selected elements in a view., Key Schedule - This node will take a key schedule, data and a list of parameters and populate it with infomation from data parameter. Visit www.archi-lab.net for more information on how to prep this node for take off. , Legend Settings - This node sets all settings for the Legend display with Analysis Visualization Framework of Revit. , Local Printers Names - This node will query all locally installed printers and return their names., Marker Settings - This node will generate AnalysisDisplayMarkerAndTextSettings to be used with a Marker Analysis Display Style. Inputs are: Marker Shape(Circle, Triangle, Rectangle), Marker Size, Show Text (Boolean), Rounding, TextDisplayMethod (Show All, Show None, Show Predefined). , Marker&Text Display Style - This node will take an input of Points and a matching input of values to create Analysis Display Style in Revit. Use Legend, Marker and Color Settings nodes to fully customize your display style. , Mass Addition - This node will attempt to sum all elements contained within it. , New Section Box View By Elements - This node will create new section box around specified elements and apply it to a new 3D View with a specified name. Section box will be offset from the elements by a supplied offset values. , Override Fill Pattern in View - Overrides fill pattern of any element in an active view to specified fill pattern and color, Parameter Group - This node will return all available Parameter Groups, Phase Demolished - This node will query a Phase Demolished setting of an element and return phase id. If id is -1 that means that element was not demolished. , PolyCurve by Profile Family Type - It takes an input of a profile family type and extract curves from it converting them to polycurves and curve segments for use in Dynamo (sweeps)., Print PDF - This node will allow you to initiate a printing routine in revit from a set of views/sheets, printer name, print settings and print range. , Remap UV Domain - This node takes an input of a reference face and a list of UVs that get remapped into that face's UV Domain. The output is a list of UV Coordinates in that surface's domain. , Rename Files - This node will use an \"identifier\" to pick out files from a supplied directory to rename files to a new name supplied. Please make sure to match list lengths of identifier and new name inputs., Revision Properties - This node will return some most common Revision properties like Description or Issue Date., Revisions on Sheet - This node will return all Revisions specified in \"Revisions on Sheet\" selection of the sheet., Rotate Family - This node will rotate a family in Revit around a given axis by supplied angle (in radians). Please remember that every time you run your definition it will rotate family by given angle every time. , Schedule Appearance - This node allows you to control the appearance of the schedule. For now it supports only title, header and body text type. , Schedule Formatting - This node will allow you to control schedule formatiing options like column width, whether a column is hidden, column heading etc. , Schedule Sorting Grouping - This node will allow you to specify sorting/grouping parameters in schedule as well parameters like sorting order, whether its a footer or header. Visit archi-lab.net for more information. , Schedule Title Appearance - This node will override the appearance of the title. , Schedules on Sheets - Queries all schedules and produces two lists: one with all schedules that are placed on sheets and one with schedules that are not placed on sheets., Select Model Lines by Style - This node will select all model lines in the revit project by a line style name. , Set BuiltIn Parameter - This node will take an input of a built in parameter name and set that parameter to given value for given elements. , Set Revisions on Sheet - This node will set the Revisions on Sheet property of the sheet. , Slice String - Slices X number of leading or trailing characters from string (boolean true will slice from left while boolean set to false from right), String From List - This node will take an input of a list or nested list and then join each element in a list with a given seperator while adding a suffix., Create Placeholder Sheet - This node will create placeholder sheets from a sheet number/name. , Export Image by View - This node will export a list of Views and save them as images (JPG, BMP etc)., Get Host Element - This node will retrieve a host element from hosted element. Ex. feed in door, get wall., Get Sheet Viewports - This node will query a sheet for viewports (views) that are placed on it., Get Type Parameter - This node will retrieve a type parameter by its name., Set Type Parameter - This node will set a type parameter for an element., Tag Host Element - This node will retrieve an element that is hosting a given tag. , Tag Text - This node will retireve a text content of a tag. , Transform Origin - This node will query an element for its Transform (Coordinate System) and then return its Origin point. , Viewport Properties - This node will return certain properties from a Viewport input. ",
            "engine_metadata": "",
            "engine_version": "0.8.2.2311",
            "created": "2015-09-15T21:35:04.016Z",
            "full_dependency_versions": [ "2015.9.15" ],
            "full_dependency_ids": [
              {
                "_id": "53e99ce50e5572016a00018a",
                "name": "archi-lab.net"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2015.9.15"
          },
          {
            "_id": "55fb6c29662bf0e9080001a4",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/aa154149-3a08-4ebe-9026-728af0cf0458gregPkg674.zip",
            "contents": "Add Shared Parameter to Project - This node will add a parameter to shared parameter file and then add it to the project. , Apply View Template - This node will allow you to apply a view template to a set of views., Cell Style Settings - This node will generate a Cell Style Settings that can be used to override cell properties. , Change Family Type - Changes family type of a family by passing in an Element and type id of the type we want to change it to. , Clear List - This node will remove all Null and Empty Lists from any list. , Color Settings - This node creates color settings for the Analysis Visualization Framework. , Colored Surface Display Style - This node will generate a Colored Surface Display Style from inputs of points, values, and instance surface for analysis to be aplied to. Also, use color and legend settings (part of archi-lab package) to create style colors and visibility., Colored Surface Settings - This node creates settings for the colored surface display style of the Analysis Visualization Framework., Combine by Pattern - Combines two list based on a input pattern of true and false., Create Annotation Tag - This node will create an annotation tag at a given location, of given type and in a supplied view. If only single view is supplied then all tags will be created in that view. , Create Placeholder Sheet - This node will create placeholder sheets from a sheet number/name. , Current Document - Retrieves Current Document, Delete Elements - This node will delete elements from Revit project., Delete Linked Model Keynote Tags - Deletes all Keynote Tags that are tagging elements in the linked model. if element in the linked model has a keynote assigned thus a keynote tag reads a proper value it will not be deleted. , Delete Unnamed Reference Planes - Does just what the name says. , Dispatch - Works exactly like the Dispatch component in Grasshopper. Input a list and a matching pattern of True/False to split list into two lists one containing all True arguments while other all False arguments. , Door Set Handing - Determines door set handing (whether its a left or right handed door). Input takes doors, and output will split them into two lists (right and left)., Duplicate Item Indices - Searches an input list for duplicate entries and lists their index numbers. Couple with Get From List to delete duplicates from a list., Element Ids - This node will query an element id that can be used with Revit nodes. Dynamo Element Id node returns integer value. , Elements Fom Linked File in Room - This node will check what elements from a linked model are inside of any of the rooms in the current model. , Elements in Room - This node will check if any of the elements are inside any of the supplied rooms. , Elements on Sheet - This node will return elements on sheet., Export Image by View - This node will export a list of Views and save them as images (JPG, BMP etc)., Fill Pattern - Get Fill Pattern by Name, Filled Region Area - This node will query an area from the filled region, Filled Region Boundary Curves - This node will get the boundary curves for a filled region., Get All Detail Groups - This node will retrieve all instances of Detail Groups in the model., Get All Dimension Styles - This node will query all of the available dimension styles (this includes linear as well as arc, circle etc). , Get All Elements From Linked Model - This node is based on code posted by Julien Benoit. Big thanks to Julien for sharing his work. This node will retrieve all elements of a given category from a given linked model. , Get All Keynote Tags - Selects all Keynote Tags instances in the model. , Get All Line Styles - This node will return all available line styles., Get All Revisions - This node will return all Revisions currently defined in the mode., Get All Viewport Types - This node will retrieve all Viewport Types currently in the model. , Get All Views - This node will query all views in the model and return them based on category, Get Built In Parameter - This node will take an input of a built in parameter name and element to return that parameters value. , Get Design Options - Queries all of the design options currently in the project., Get Documents - Queries all linked Revit files and retrieves their Name, LinkInstance and Document properties., Get Elements by Category/Level - This node will filter for all elements of a given category on a given level., Get Filled Regions - This node will query up all Filled Regions in the project as well as those in the active view only. , Get Host Element - This node will retrieve a host element from hosted element. Ex. feed in door, get wall., Get Level by Name - This node will retrieve a Revit Level Element by its name. , Get Line Style by Name - This node will return a line style object by its name. Line styles can be either Drafting or Model Line Property. , Get Rooms by Level - Filters Rooms by level., Get Sheet Viewports - This node will query a sheet for viewports (views) that are placed on it., Get Tagged Element Id - Retrives an Element Id from input of element tags. For example if wall tags are inputted it will return tagged wall Ids., Get Text Note Type by Name - This node will select a text note type by name. , Get Type Parameter - This node will retrieve a type parameter by its name., Get Unplaced Groups - This node will retrieve all unplaced groups in the model., Get Views from View Set - This node will take a name of a view set and return views/sheet elements contained in it. , Get Worksets - Retrieves user worksets from specified document, GH Point to DY Point - Converts CSV Grasshopper export of points into a Dynamo point list. , Group Curves - This node will take any input of flat list of curves and group them into sublists containing \"joinable\" curves that is continous curves. They might form closed curves or open curves. Use PolyCurve.ByJoinedCurves to convert output groups of curves into single PolyCurves, Id to Element - Selects elements in a model from id input (ElementId, string, integer or GUID), Isolate in View - This node will take input of elements and a view to isolate selected elements in a view., Key Schedule - This node will take a key schedule, data and a list of parameters and populate it with infomation from data parameter. Visit www.archi-lab.net for more information on how to prep this node for take off. , Legend Settings - This node sets all settings for the Legend display with Analysis Visualization Framework of Revit. , Local Printers Names - This node will query all locally installed printers and return their names., Marker Settings - This node will generate AnalysisDisplayMarkerAndTextSettings to be used with a Marker Analysis Display Style. Inputs are: Marker Shape(Circle, Triangle, Rectangle), Marker Size, Show Text (Boolean), Rounding, TextDisplayMethod (Show All, Show None, Show Predefined). , Marker&Text Display Style - This node will take an input of Points and a matching input of values to create Analysis Display Style in Revit. Use Legend, Marker and Color Settings nodes to fully customize your display style. , Mass Addition - This node will attempt to sum all elements contained within it. , New Section Box View By Elements - This node will create new section box around specified elements and apply it to a new 3D View with a specified name. Section box will be offset from the elements by a supplied offset values. , Override Fill Pattern in View - Overrides fill pattern of any element in an active view to specified fill pattern and color, Parameter Group - This node will return all available Parameter Groups, Phase Demolished - This node will query a Phase Demolished setting of an element and return phase id. If id is -1 that means that element was not demolished. , PolyCurve by Profile Family Type - It takes an input of a profile family type and extract curves from it converting them to polycurves and curve segments for use in Dynamo (sweeps)., Print PDF - This node will allow you to initiate a printing routine in revit from a set of views/sheets, printer name, print settings and print range. , Remap UV Domain - This node takes an input of a reference face and a list of UVs that get remapped into that face's UV Domain. The output is a list of UV Coordinates in that surface's domain. , Rename Files - This node will use an \"identifier\" to pick out files from a supplied directory to rename files to a new name supplied. Please make sure to match list lengths of identifier and new name inputs., Revision Properties - This node will return some most common Revision properties like Description or Issue Date., Revisions on Sheet - This node will return all Revisions specified in \"Revisions on Sheet\" selection of the sheet., Rotate Family - This node will rotate a family in Revit around a given axis by supplied angle (in radians). Please remember that every time you run your definition it will rotate family by given angle every time. , Schedule Appearance - This node allows you to control the appearance of the schedule. For now it supports only title, header and body text type. , Schedule Formatting - This node will allow you to control schedule formatiing options like column width, whether a column is hidden, column heading etc. , Schedule Sorting Grouping - This node will allow you to specify sorting/grouping parameters in schedule as well parameters like sorting order, whether its a footer or header. Visit archi-lab.net for more information. , Schedule Title Appearance - This node will override the appearance of the title. , Schedules on Sheets - Queries all schedules and produces two lists: one with all schedules that are placed on sheets and one with schedules that are not placed on sheets., Select Model Lines by Style - This node will select all model lines in the revit project by a line style name. , Set BuiltIn Parameter - This node will take an input of a built in parameter name and set that parameter to given value for given elements. , Set Type Parameter - This node will set a type parameter for an element., Slice String - Slices X number of leading or trailing characters from string (boolean true will slice from left while boolean set to false from right), String From List - This node will take an input of a list or nested list and then join each element in a list with a given seperator while adding a suffix., Tag Host Element - This node will retrieve an element that is hosting a given tag. , Tag Text - This node will retireve a text content of a tag. , Transform Origin - This node will query an element for its Transform (Coordinate System) and then return its Origin point. , Viewport Properties - This node will return certain properties from a Viewport input. ",
            "engine_metadata": "",
            "engine_version": "0.8.2.2371",
            "created": "2015-09-18T01:43:05.381Z",
            "full_dependency_versions": [ "2015.9.16" ],
            "full_dependency_ids": [
              {
                "_id": "53e99ce50e5572016a00018a",
                "name": "archi-lab.net"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2015.9.16"
          },
          {
            "_id": "560a9b62662bf0e908000206",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/8cb0d10a-b885-4662-8033-a57088ef9a82gregPkg178.zip",
            "contents": "Add Shared Parameter to Project - This node will add a parameter to shared parameter file and then add it to the project. , Apply View Template - This node will allow you to apply a view template to a set of views., Cell Style Settings - This node will generate a Cell Style Settings that can be used to override cell properties. , Change Family Type - Changes family type of a family by passing in an Element and type id of the type we want to change it to. , Clear List - This node will remove all Null and Empty Lists from any list. , Color Settings - This node creates color settings for the Analysis Visualization Framework. , Colored Surface Display Style - This node will generate a Colored Surface Display Style from inputs of points, values, and instance surface for analysis to be aplied to. Also, use color and legend settings (part of archi-lab package) to create style colors and visibility., Colored Surface Settings - This node creates settings for the colored surface display style of the Analysis Visualization Framework., Combine by Pattern - Combines two list based on a input pattern of true and false., Create Annotation Tag - This node will create an annotation tag at a given location, of given type and in a supplied view. If only single view is supplied then all tags will be created in that view. , Create Placeholder Sheet - This node will create placeholder sheets from a sheet number/name. , Current Document - Retrieves Current Document, Delete Elements - This node will delete elements from Revit project., Delete Linked Model Keynote Tags - Deletes all Keynote Tags that are tagging elements in the linked model. if element in the linked model has a keynote assigned thus a keynote tag reads a proper value it will not be deleted. , Delete Unnamed Reference Planes - Does just what the name says. , Dispatch - Works exactly like the Dispatch component in Grasshopper. Input a list and a matching pattern of True/False to split list into two lists one containing all True arguments while other all False arguments. , Door Set Handing - Determines door set handing (whether its a left or right handed door). Input takes doors, and output will split them into two lists (right and left)., Duplicate Item Indices - Searches an input list for duplicate entries and lists their index numbers. Couple with Get From List to delete duplicates from a list., Element Ids - This node will query an element id that can be used with Revit nodes. Dynamo Element Id node returns integer value. , Elements Fom Linked File in Room - This node will check what elements from a linked model are inside of any of the rooms in the current model. , Elements in Room - This node will check if any of the elements are inside any of the supplied rooms. , Elements on Sheet - This node will return elements on sheet., Export Image by View - This node will export a list of Views and save them as images (JPG, BMP etc)., Fill Pattern - Get Fill Pattern by Name, Filled Region Area - This node will query an area from the filled region, Filled Region Boundary Curves - This node will get the boundary curves for a filled region., Get All Detail Groups - This node will retrieve all instances of Detail Groups in the model., Get All Dimension Styles - This node will query all of the available dimension styles (this includes linear as well as arc, circle etc). , Get All Elements From Linked Model - This node is based on code posted by Julien Benoit. Big thanks to Julien for sharing his work. This node will retrieve all elements of a given category from a given linked model. , Get All Keynote Tags - Selects all Keynote Tags instances in the model. , Get All Line Styles - This node will return all available line styles., Get All Revisions - This node will return all Revisions currently defined in the mode., Get All Viewport Types - This node will retrieve all Viewport Types currently in the model. , Get All Views - This node will query all views in the model and return them based on category, Get Built In Parameter - This node will take an input of a built in parameter name and element to return that parameters value. , Get Design Options - Queries all of the design options currently in the project., Get Documents - Queries all linked Revit files and retrieves their Name, LinkInstance and Document properties., Get Elements by Category/Level - This node will filter for all elements of a given category on a given level., Get Filled Regions - This node will query up all Filled Regions in the project as well as those in the active view only. , Get Host Element - This node will retrieve a host element from hosted element. Ex. feed in door, get wall., Get Level by Name - This node will retrieve a Revit Level Element by its name. , Get Line Style by Name - This node will return a line style object by its name. Line styles can be either Drafting or Model Line Property. , Get Rooms by Level - Filters Rooms by level., Get Sheet Viewports - This node will query a sheet for viewports (views) that are placed on it., Get Tagged Element Id - Retrives an Element Id from input of element tags. For example if wall tags are inputted it will return tagged wall Ids., Get Text Note Type by Name - This node will select a text note type by name. , Get Type Parameter - This node will retrieve a type parameter by its name., Get Unplaced Groups - This node will retrieve all unplaced groups in the model., Get Views from View Set - This node will take a name of a view set and return views/sheet elements contained in it. , Get Worksets - Retrieves user worksets from specified document, GH Point to DY Point - Converts CSV Grasshopper export of points into a Dynamo point list. , Group Curves - This node will take any input of flat list of curves and group them into sublists containing \"joinable\" curves that is continous curves. They might form closed curves or open curves. Use PolyCurve.ByJoinedCurves to convert output groups of curves into single PolyCurves, Id to Element - Selects elements in a model from id input (ElementId, string, integer or GUID), Isolate in View - This node will take input of elements and a view to isolate selected elements in a view., Key Schedule - This node will take a key schedule, data and a list of parameters and populate it with infomation from data parameter. Visit www.archi-lab.net for more information on how to prep this node for take off. , Legend Settings - This node sets all settings for the Legend display with Analysis Visualization Framework of Revit. , Local Printers Names - This node will query all locally installed printers and return their names., Marker Settings - This node will generate AnalysisDisplayMarkerAndTextSettings to be used with a Marker Analysis Display Style. Inputs are: Marker Shape(Circle, Triangle, Rectangle), Marker Size, Show Text (Boolean), Rounding, TextDisplayMethod (Show All, Show None, Show Predefined). , Marker&Text Display Style - This node will take an input of Points and a matching input of values to create Analysis Display Style in Revit. Use Legend, Marker and Color Settings nodes to fully customize your display style. , Mass Addition - This node will attempt to sum all elements contained within it. , New Section Box View By Elements - This node will create new section box around specified elements and apply it to a new 3D View with a specified name. Section box will be offset from the elements by a supplied offset values. , Override Fill Pattern in View - Overrides fill pattern of any element in an active view to specified fill pattern and color, Parameter Group - This node will return all available Parameter Groups, Phase Demolished - This node will query a Phase Demolished setting of an element and return phase id. If id is -1 that means that element was not demolished. , PolyCurve by Profile Family Type - It takes an input of a profile family type and extract curves from it converting them to polycurves and curve segments for use in Dynamo (sweeps)., Print PDF - This node will allow you to initiate a printing routine in revit from a set of views/sheets, printer name, print settings and print range. , Remap UV Domain - This node takes an input of a reference face and a list of UVs that get remapped into that face's UV Domain. The output is a list of UV Coordinates in that surface's domain. , Rename Files - This node will use an \"identifier\" to pick out files from a supplied directory to rename files to a new name supplied. Please make sure to match list lengths of identifier and new name inputs., Revision Properties - This node will return some most common Revision properties like Description or Issue Date., Revisions on Sheet - This node will return all Revisions specified in \"Revisions on Sheet\" selection of the sheet., Rotate Family - This node will rotate a family in Revit around a given axis by supplied angle (in radians). Please remember that every time you run your definition it will rotate family by given angle every time. , Schedule Appearance - This node allows you to control the appearance of the schedule. For now it supports only title, header and body text type. , Schedule Formatting - This node will allow you to control schedule formatiing options like column width, whether a column is hidden, column heading etc. , Schedule Sorting Grouping - This node will allow you to specify sorting/grouping parameters in schedule as well parameters like sorting order, whether its a footer or header. Visit archi-lab.net for more information. , Schedule Title Appearance - This node will override the appearance of the title. , Schedules on Sheets - Queries all schedules and produces two lists: one with all schedules that are placed on sheets and one with schedules that are not placed on sheets., Select Model Lines by Style - This node will select all model lines in the revit project by a line style name. , Set BuiltIn Parameter - This node will take an input of a built in parameter name and set that parameter to given value for given elements. , Set Type Parameter - This node will set a type parameter for an element., Slice String - Slices X number of leading or trailing characters from string (boolean true will slice from left while boolean set to false from right), String From List - This node will take an input of a list or nested list and then join each element in a list with a given seperator while adding a suffix., Tag Host Element - This node will retrieve an element that is hosting a given tag. , Tag Text - This node will retireve a text content of a tag. , Transform Origin - This node will query an element for its Transform (Coordinate System) and then return its Origin point. , Viewport Properties - This node will return certain properties from a Viewport input. , Add Revisions to Sheet - This node will add specified revisions to a sheet. , Remove Revision from Sheet - This node will remove specified Revisions from a sheet.",
            "engine_metadata": "",
            "engine_version": "0.8.2.2311",
            "created": "2015-09-29T14:08:34.820Z",
            "full_dependency_versions": [ "2015.9.29" ],
            "full_dependency_ids": [
              {
                "_id": "53e99ce50e5572016a00018a",
                "name": "archi-lab.net"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2015.9.29"
          },
          {
            "_id": "560d887c662bf0e90800021c",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/ac5c05ec-1965-4986-842b-0b171a4f2c1dgregPkg798.zip",
            "contents": "Add Revisions to Sheet - This node will add specified revisions to a sheet. , Add Shared Parameter to Project - This node will add a parameter to shared parameter file and then add it to the project. , Apply View Template - This node will allow you to apply a view template to a set of views., Cell Style Settings - This node will generate a Cell Style Settings that can be used to override cell properties. , Change Family Type - Changes family type of a family by passing in an Element and type id of the type we want to change it to. , Clear List - This node will remove all Null and Empty Lists from any list. , Color Settings - This node creates color settings for the Analysis Visualization Framework. , Colored Surface Display Style - This node will generate a Colored Surface Display Style from inputs of points, values, and instance surface for analysis to be aplied to. Also, use color and legend settings (part of archi-lab package) to create style colors and visibility., Colored Surface Settings - This node creates settings for the colored surface display style of the Analysis Visualization Framework., Combine by Pattern - Combines two list based on a input pattern of true and false., Create Annotation Tag - This node will create an annotation tag at a given location, of given type and in a supplied view. If only single view is supplied then all tags will be created in that view. , Create Placeholder Sheet - This node will create placeholder sheets from a sheet number/name. , Current Document - Retrieves Current Document, Delete Elements - This node will delete elements from Revit project., Delete Linked Model Keynote Tags - Deletes all Keynote Tags that are tagging elements in the linked model. if element in the linked model has a keynote assigned thus a keynote tag reads a proper value it will not be deleted. , Delete Unnamed Reference Planes - Does just what the name says. , Dispatch - Works exactly like the Dispatch component in Grasshopper. Input a list and a matching pattern of True/False to split list into two lists one containing all True arguments while other all False arguments. , Door Set Handing - Determines door set handing (whether its a left or right handed door). Input takes doors, and output will split them into two lists (right and left)., Duplicate Item Indices - Searches an input list for duplicate entries and lists their index numbers. Couple with Get From List to delete duplicates from a list., Element Ids - This node will query an element id that can be used with Revit nodes. Dynamo Element Id node returns integer value. , Elements Fom Linked File in Room - This node will check what elements from a linked model are inside of any of the rooms in the current model. , Elements in Room - This node will check if any of the elements are inside any of the supplied rooms. , Elements on Sheet - This node will return elements on sheet., Export Image by View - This node will export a list of Views and save them as images (JPG, BMP etc)., Fill Pattern - Get Fill Pattern by Name, Filled Region Area - This node will query an area from the filled region, Filled Region Boundary Curves - This node will get the boundary curves for a filled region., Get All Detail Groups - This node will retrieve all instances of Detail Groups in the model., Get All Dimension Styles - This node will query all of the available dimension styles (this includes linear as well as arc, circle etc). , Get All Elements From Linked Model - This node is based on code posted by Julien Benoit. Big thanks to Julien for sharing his work. This node will retrieve all elements of a given category from a given linked model. , Get All Keynote Tags - Selects all Keynote Tags instances in the model. , Get All Line Styles - This node will return all available line styles., Get All Revisions - This node will return all Revisions currently defined in the mode., Get All Viewport Types - This node will retrieve all Viewport Types currently in the model. , Get All Views - This node will query all views in the model and return them based on category, Get Built In Parameter - This node will take an input of a built in parameter name and element to return that parameters value. , Get Design Options - Queries all of the design options currently in the project., Get Documents - Queries all linked Revit files and retrieves their Name, LinkInstance and Document properties., Get Elements by Category/Level - This node will filter for all elements of a given category on a given level., Get Filled Regions - This node will query up all Filled Regions in the project as well as those in the active view only. , Get Host Element - This node will retrieve a host element from hosted element. Ex. feed in door, get wall., Get Level by Name - This node will retrieve a Revit Level Element by its name. , Get Line Style by Name - This node will return a line style object by its name. Line styles can be either Drafting or Model Line Property. , Get Rooms by Level - Filters Rooms by level., Get Sheet Viewports - This node will query a sheet for viewports (views) that are placed on it., Get Tagged Element Id - Retrives an Element Id from input of element tags. For example if wall tags are inputted it will return tagged wall Ids., Get Text Note Type by Name - This node will select a text note type by name. , Get Type Parameter - This node will retrieve a type parameter by its name., Get Unplaced Groups - This node will retrieve all unplaced groups in the model., Get Views from View Set - This node will take a name of a view set and return views/sheet elements contained in it. , Get Worksets - Retrieves user worksets from specified document, GH Point to DY Point - Converts CSV Grasshopper export of points into a Dynamo point list. , Group Curves - This node will take any input of flat list of curves and group them into sublists containing \"joinable\" curves that is continous curves. They might form closed curves or open curves. Use PolyCurve.ByJoinedCurves to convert output groups of curves into single PolyCurves, Id to Element - Selects elements in a model from id input (ElementId, string, integer or GUID), Isolate in View - This node will take input of elements and a view to isolate selected elements in a view., Key Schedule - This node will take a key schedule, data and a list of parameters and populate it with infomation from data parameter. Visit www.archi-lab.net for more information on how to prep this node for take off. , Legend Settings - This node sets all settings for the Legend display with Analysis Visualization Framework of Revit. , Local Printers Names - This node will query all locally installed printers and return their names., Marker Settings - This node will generate AnalysisDisplayMarkerAndTextSettings to be used with a Marker Analysis Display Style. Inputs are: Marker Shape(Circle, Triangle, Rectangle), Marker Size, Show Text (Boolean), Rounding, TextDisplayMethod (Show All, Show None, Show Predefined). , Marker&Text Display Style - This node will take an input of Points and a matching input of values to create Analysis Display Style in Revit. Use Legend, Marker and Color Settings nodes to fully customize your display style. , Mass Addition - This node will attempt to sum all elements contained within it. , New Section Box View By Elements - This node will create new section box around specified elements and apply it to a new 3D View with a specified name. Section box will be offset from the elements by a supplied offset values. , Override Fill Pattern in View - Overrides fill pattern of any element in an active view to specified fill pattern and color, Parameter Group - This node will return all available Parameter Groups, Phase Demolished - This node will query a Phase Demolished setting of an element and return phase id. If id is -1 that means that element was not demolished. , PolyCurve by Profile Family Type - It takes an input of a profile family type and extract curves from it converting them to polycurves and curve segments for use in Dynamo (sweeps)., Print PDF - This node will allow you to initiate a printing routine in revit from a set of views/sheets, printer name, print settings and print range. , Remap UV Domain - This node takes an input of a reference face and a list of UVs that get remapped into that face's UV Domain. The output is a list of UV Coordinates in that surface's domain. , Remove Revision from Sheet - This node will remove specified Revisions from a sheet., Rename Files - This node will use an \"identifier\" to pick out files from a supplied directory to rename files to a new name supplied. Please make sure to match list lengths of identifier and new name inputs., Revision Properties - This node will return some most common Revision properties like Description or Issue Date., Revisions on Sheet - This node will return all Revisions specified in \"Revisions on Sheet\" selection of the sheet., Rotate Family - This node will rotate a family in Revit around a given axis by supplied angle (in radians). Please remember that every time you run your definition it will rotate family by given angle every time. , Schedule Appearance - This node allows you to control the appearance of the schedule. For now it supports only title, header and body text type. , Schedule Formatting - This node will allow you to control schedule formatiing options like column width, whether a column is hidden, column heading etc. , Schedule Sorting Grouping - This node will allow you to specify sorting/grouping parameters in schedule as well parameters like sorting order, whether its a footer or header. Visit archi-lab.net for more information. , Schedule Title Appearance - This node will override the appearance of the title. , Schedules on Sheets - Queries all schedules and produces two lists: one with all schedules that are placed on sheets and one with schedules that are not placed on sheets., Select Model Lines by Style - This node will select all model lines in the revit project by a line style name. , Set BuiltIn Parameter - This node will take an input of a built in parameter name and set that parameter to given value for given elements. , Set Type Parameter - This node will set a type parameter for an element., Slice String - Slices X number of leading or trailing characters from string (boolean true will slice from left while boolean set to false from right), String From List - This node will take an input of a list or nested list and then join each element in a list with a given seperator while adding a suffix., Tag Host Element - This node will retrieve an element that is hosting a given tag. , Tag Text - This node will retireve a text content of a tag. , Transform Origin - This node will query an element for its Transform (Coordinate System) and then return its Origin point. , Viewport Properties - This node will return certain properties from a Viewport input. ",
            "engine_metadata": "",
            "engine_version": "0.8.2.2371",
            "created": "2015-10-01T19:24:44.476Z",
            "full_dependency_versions": [ "2015.9.30" ],
            "full_dependency_ids": [
              {
                "_id": "53e99ce50e5572016a00018a",
                "name": "archi-lab.net"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2015.9.30"
          },
          {
            "_id": "560dd928662bf0e90800021e",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/390f19e0-42ed-4bc8-a3f6-9db751f294fagregPkg952.zip",
            "contents": "Add Revisions to Sheet - This node will add specified revisions to a sheet. , Add Shared Parameter to Project - This node will add a parameter to shared parameter file and then add it to the project. , Apply View Template - This node will allow you to apply a view template to a set of views., Cell Style Settings - This node will generate a Cell Style Settings that can be used to override cell properties. , Change Family Type - Changes family type of a family by passing in an Element and type id of the type we want to change it to. , Clear List - This node will remove all Null and Empty Lists from any list. , Color Settings - This node creates color settings for the Analysis Visualization Framework. , Colored Surface Display Style - This node will generate a Colored Surface Display Style from inputs of points, values, and instance surface for analysis to be aplied to. Also, use color and legend settings (part of archi-lab package) to create style colors and visibility., Colored Surface Settings - This node creates settings for the colored surface display style of the Analysis Visualization Framework., Combine by Pattern - Combines two list based on a input pattern of true and false., Create Annotation Tag - This node will create an annotation tag at a given location, of given type and in a supplied view. If only single view is supplied then all tags will be created in that view. , Create Placeholder Sheet - This node will create placeholder sheets from a sheet number/name. , Current Document - Retrieves Current Document, Delete Elements - This node will delete elements from Revit project., Delete Linked Model Keynote Tags - Deletes all Keynote Tags that are tagging elements in the linked model. if element in the linked model has a keynote assigned thus a keynote tag reads a proper value it will not be deleted. , Delete Unnamed Reference Planes - Does just what the name says. , Dispatch - Works exactly like the Dispatch component in Grasshopper. Input a list and a matching pattern of True/False to split list into two lists one containing all True arguments while other all False arguments. , Door Set Handing - Determines door set handing (whether its a left or right handed door). Input takes doors, and output will split them into two lists (right and left)., Duplicate Item Indices - Searches an input list for duplicate entries and lists their index numbers. Couple with Get From List to delete duplicates from a list., Element Ids - This node will query an element id that can be used with Revit nodes. Dynamo Element Id node returns integer value. , Elements Fom Linked File in Room - This node will check what elements from a linked model are inside of any of the rooms in the current model. , Elements in Room - This node will check if any of the elements are inside any of the supplied rooms. , Elements on Sheet - This node will return elements on sheet., Export Image by View - This node will export a list of Views and save them as images (JPG, BMP etc)., Fill Pattern - Get Fill Pattern by Name, Filled Region Area - This node will query an area from the filled region, Filled Region Boundary Curves - This node will get the boundary curves for a filled region., Get All Detail Groups - This node will retrieve all instances of Detail Groups in the model., Get All Dimension Styles - This node will query all of the available dimension styles (this includes linear as well as arc, circle etc). , Get All Elements From Linked Model - This node is based on code posted by Julien Benoit. Big thanks to Julien for sharing his work. This node will retrieve all elements of a given category from a given linked model. , Get All Keynote Tags - Selects all Keynote Tags instances in the model. , Get All Line Styles - This node will return all available line styles., Get All Revisions - This node will return all Revisions currently defined in the mode., Get All Viewport Types - This node will retrieve all Viewport Types currently in the model. , Get All Views - This node will query all views in the model and return them based on category, Get Built In Parameter - This node will take an input of a built in parameter name and element to return that parameters value. , Get Design Options - Queries all of the design options currently in the project., Get Documents - Queries all linked Revit files and retrieves their Name, LinkInstance and Document properties., Get Elements by Category/Level - This node will filter for all elements of a given category on a given level., Get Filled Regions - This node will query up all Filled Regions in the project as well as those in the active view only. , Get Host Element - This node will retrieve a host element from hosted element. Ex. feed in door, get wall., Get Level by Name - This node will retrieve a Revit Level Element by its name. , Get Line Style by Name - This node will return a line style object by its name. Line styles can be either Drafting or Model Line Property. , Get Rooms by Level - Filters Rooms by level., Get Sheet Viewports - This node will query a sheet for viewports (views) that are placed on it., Get Tagged Element Id - Retrives an Element Id from input of element tags. For example if wall tags are inputted it will return tagged wall Ids., Get Text Note Type by Name - This node will select a text note type by name. , Get Type Parameter - This node will retrieve a type parameter by its name., Get Unplaced Groups - This node will retrieve all unplaced groups in the model., Get Views from View Set - This node will take a name of a view set and return views/sheet elements contained in it. , Get Worksets - Retrieves user worksets from specified document, GH Point to DY Point - Converts CSV Grasshopper export of points into a Dynamo point list. , Group Curves - This node will take any input of flat list of curves and group them into sublists containing \"joinable\" curves that is continous curves. They might form closed curves or open curves. Use PolyCurve.ByJoinedCurves to convert output groups of curves into single PolyCurves, Id to Element - Selects elements in a model from id input (ElementId, string, integer or GUID), Isolate in View - This node will take input of elements and a view to isolate selected elements in a view., Key Schedule - This node will take a key schedule, data and a list of parameters and populate it with infomation from data parameter. Visit www.archi-lab.net for more information on how to prep this node for take off. , Legend Settings - This node sets all settings for the Legend display with Analysis Visualization Framework of Revit. , Local Printers Names - This node will query all locally installed printers and return their names., Marker Settings - This node will generate AnalysisDisplayMarkerAndTextSettings to be used with a Marker Analysis Display Style. Inputs are: Marker Shape(Circle, Triangle, Rectangle), Marker Size, Show Text (Boolean), Rounding, TextDisplayMethod (Show All, Show None, Show Predefined). , Marker&Text Display Style - This node will take an input of Points and a matching input of values to create Analysis Display Style in Revit. Use Legend, Marker and Color Settings nodes to fully customize your display style. , Mass Addition - This node will attempt to sum all elements contained within it. , New Section Box View By Elements - This node will create new section box around specified elements and apply it to a new 3D View with a specified name. Section box will be offset from the elements by a supplied offset values. , Override Fill Pattern in View - Overrides fill pattern of any element in an active view to specified fill pattern and color, Parameter Group - This node will return all available Parameter Groups, Phase Demolished - This node will query a Phase Demolished setting of an element and return phase id. If id is -1 that means that element was not demolished. , PolyCurve by Profile Family Type - It takes an input of a profile family type and extract curves from it converting them to polycurves and curve segments for use in Dynamo (sweeps)., Print PDF - This node will allow you to initiate a printing routine in revit from a set of views/sheets, printer name, print settings and print range. , Remap UV Domain - This node takes an input of a reference face and a list of UVs that get remapped into that face's UV Domain. The output is a list of UV Coordinates in that surface's domain. , Remove Revision from Sheet - This node will remove specified Revisions from a sheet., Rename Files - This node will use an \"identifier\" to pick out files from a supplied directory to rename files to a new name supplied. Please make sure to match list lengths of identifier and new name inputs., Revision Properties - This node will return some most common Revision properties like Description or Issue Date., Revisions on Sheet - This node will return all Revisions specified in \"Revisions on Sheet\" selection of the sheet., Rotate Family - This node will rotate a family in Revit around a given axis by supplied angle (in radians). Please remember that every time you run your definition it will rotate family by given angle every time. , Schedule Appearance - This node allows you to control the appearance of the schedule. For now it supports only title, header and body text type. , Schedule Formatting - This node will allow you to control schedule formatiing options like column width, whether a column is hidden, column heading etc. , Schedule Sorting Grouping - This node will allow you to specify sorting/grouping parameters in schedule as well parameters like sorting order, whether its a footer or header. Visit archi-lab.net for more information. , Schedule Title Appearance - This node will override the appearance of the title. , Schedules on Sheets - Queries all schedules and produces two lists: one with all schedules that are placed on sheets and one with schedules that are not placed on sheets., Select Model Lines by Style - This node will select all model lines in the revit project by a line style name. , Set BuiltIn Parameter - This node will take an input of a built in parameter name and set that parameter to given value for given elements. , Set Type Parameter - This node will set a type parameter for an element., Slice String - Slices X number of leading or trailing characters from string (boolean true will slice from left while boolean set to false from right), String From List - This node will take an input of a list or nested list and then join each element in a list with a given seperator while adding a suffix., Tag Host Element - This node will retrieve an element that is hosting a given tag. , Tag Text - This node will retireve a text content of a tag. , Transform Origin - This node will query an element for its Transform (Coordinate System) and then return its Origin point. , Viewport Properties - This node will return certain properties from a Viewport input. ",
            "engine_metadata": "",
            "engine_version": "0.8.2.2371",
            "created": "2015-10-02T01:08:56.273Z",
            "full_dependency_versions": [ "2015.10.1" ],
            "full_dependency_ids": [
              {
                "_id": "53e99ce50e5572016a00018a",
                "name": "archi-lab.net"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2015.10.1"
          },
          {
            "_id": "56105d25662bf0e908000225",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/66957c00-9cb8-47b3-9088-aa3f883a1999gregPkg61.zip",
            "contents": "Add Revisions to Sheet - This node will add specified revisions to a sheet. , Add Shared Parameter to Project - This node will add a parameter to shared parameter file and then add it to the project. , Apply View Template - This node will allow you to apply a view template to a set of views., Cell Style Settings - This node will generate a Cell Style Settings that can be used to override cell properties. , Change Family Type - Changes family type of a family by passing in an Element and type id of the type we want to change it to. , Clear List - This node will remove all Null and Empty Lists from any list. , Color Settings - This node creates color settings for the Analysis Visualization Framework. , Colored Surface Display Style - This node will generate a Colored Surface Display Style from inputs of points, values, and instance surface for analysis to be aplied to. Also, use color and legend settings (part of archi-lab package) to create style colors and visibility., Colored Surface Settings - This node creates settings for the colored surface display style of the Analysis Visualization Framework., Combine by Pattern - Combines two list based on a input pattern of true and false., Create Annotation Tag - This node will create an annotation tag at a given location, of given type and in a supplied view. If only single view is supplied then all tags will be created in that view. , Create Placeholder Sheet - This node will create placeholder sheets from a sheet number/name. , Current Document - Retrieves Current Document, Delete Elements - This node will delete elements from Revit project., Delete Linked Model Keynote Tags - Deletes all Keynote Tags that are tagging elements in the linked model. if element in the linked model has a keynote assigned thus a keynote tag reads a proper value it will not be deleted. , Delete Unnamed Reference Planes - Does just what the name says. , Dispatch - Works exactly like the Dispatch component in Grasshopper. Input a list and a matching pattern of True/False to split list into two lists one containing all True arguments while other all False arguments. , Door Set Handing - Determines door set handing (whether its a left or right handed door). Input takes doors, and output will split them into two lists (right and left)., Duplicate Item Indices - Searches an input list for duplicate entries and lists their index numbers. Couple with Get From List to delete duplicates from a list., Element Ids - This node will query an element id that can be used with Revit nodes. Dynamo Element Id node returns integer value. , Elements Fom Linked File in Room - This node will check what elements from a linked model are inside of any of the rooms in the current model. , Elements in Room - This node will check if any of the elements are inside any of the supplied rooms. , Elements on Sheet - This node will return elements on sheet., Export Image by View - This node will export a list of Views and save them as images (JPG, BMP etc)., Fill Pattern - Get Fill Pattern by Name, Filled Region Area - This node will query an area from the filled region, Filled Region Boundary Curves - This node will get the boundary curves for a filled region., Get All Detail Groups - This node will retrieve all instances of Detail Groups in the model., Get All Dimension Styles - This node will query all of the available dimension styles (this includes linear as well as arc, circle etc). , Get All Elements From Linked Model - This node is based on code posted by Julien Benoit. Big thanks to Julien for sharing his work. This node will retrieve all elements of a given category from a given linked model. , Get All Keynote Tags - Selects all Keynote Tags instances in the model. , Get All Line Styles - This node will return all available line styles., Get All Revisions - This node will return all Revisions currently defined in the mode., Get All Viewport Types - This node will retrieve all Viewport Types currently in the model. , Get All Views - This node will query all views in the model and return them based on category, Get Built In Parameter - This node will take an input of a built in parameter name and element to return that parameters value. , Get Design Options - Queries all of the design options currently in the project., Get Documents - Queries all linked Revit files and retrieves their Name, LinkInstance and Document properties., Get Elements by Category/Level - This node will filter for all elements of a given category on a given level., Get Filled Regions - This node will query up all Filled Regions in the project as well as those in the active view only. , Get Host Element - This node will retrieve a host element from hosted element. Ex. feed in door, get wall., Get Level by Name - This node will retrieve a Revit Level Element by its name. , Get Line Style by Name - This node will return a line style object by its name. Line styles can be either Drafting or Model Line Property. , Get Rooms by Level - Filters Rooms by level., Get Sheet Viewports - This node will query a sheet for viewports (views) that are placed on it., Get Tagged Element Id - Retrives an Element Id from input of element tags. For example if wall tags are inputted it will return tagged wall Ids., Get Text Note Type by Name - This node will select a text note type by name. , Get Type Parameter - This node will retrieve a type parameter by its name., Get Unplaced Groups - This node will retrieve all unplaced groups in the model., Get Views from View Set - This node will take a name of a view set and return views/sheet elements contained in it. , Get Worksets - Retrieves user worksets from specified document, GH Point to DY Point - Converts CSV Grasshopper export of points into a Dynamo point list. , Group Curves - This node will take any input of flat list of curves and group them into sublists containing \"joinable\" curves that is continous curves. They might form closed curves or open curves. Use PolyCurve.ByJoinedCurves to convert output groups of curves into single PolyCurves, Id to Element - Selects elements in a model from id input (ElementId, string, integer or GUID), Isolate in View - This node will take input of elements and a view to isolate selected elements in a view., Key Schedule - This node will take a key schedule, data and a list of parameters and populate it with infomation from data parameter. Visit www.archi-lab.net for more information on how to prep this node for take off. , Legend Settings - This node sets all settings for the Legend display with Analysis Visualization Framework of Revit. , Local Printers Names - This node will query all locally installed printers and return their names., Marker Settings - This node will generate AnalysisDisplayMarkerAndTextSettings to be used with a Marker Analysis Display Style. Inputs are: Marker Shape(Circle, Triangle, Rectangle), Marker Size, Show Text (Boolean), Rounding, TextDisplayMethod (Show All, Show None, Show Predefined). , Marker&Text Display Style - This node will take an input of Points and a matching input of values to create Analysis Display Style in Revit. Use Legend, Marker and Color Settings nodes to fully customize your display style. , Mass Addition - This node will attempt to sum all elements contained within it. , New Section Box View By Elements - This node will create new section box around specified elements and apply it to a new 3D View with a specified name. Section box will be offset from the elements by a supplied offset values. , Override Fill Pattern in View - Overrides fill pattern of any element in an active view to specified fill pattern and color, Parameter Group - This node will return all available Parameter Groups, Phase Demolished - This node will query a Phase Demolished setting of an element and return phase id. If id is -1 that means that element was not demolished. , PolyCurve by Profile Family Type - It takes an input of a profile family type and extract curves from it converting them to polycurves and curve segments for use in Dynamo (sweeps)., Print PDF - This node will allow you to initiate a printing routine in revit from a set of views/sheets, printer name, print settings and print range. , Remap UV Domain - This node takes an input of a reference face and a list of UVs that get remapped into that face's UV Domain. The output is a list of UV Coordinates in that surface's domain. , Remove Revision from Sheet - This node will remove specified Revisions from a sheet., Rename Files - This node will use an \"identifier\" to pick out files from a supplied directory to rename files to a new name supplied. Please make sure to match list lengths of identifier and new name inputs., Revision Properties - This node will return some most common Revision properties like Description or Issue Date., Revisions on Sheet - This node will return all Revisions specified in \"Revisions on Sheet\" selection of the sheet., Rotate Family - This node will rotate a family in Revit around a given axis by supplied angle (in radians). Please remember that every time you run your definition it will rotate family by given angle every time. , Schedule Appearance - This node allows you to control the appearance of the schedule. For now it supports only title, header and body text type. , Schedule Formatting - This node will allow you to control schedule formatiing options like column width, whether a column is hidden, column heading etc. , Schedule Sorting Grouping - This node will allow you to specify sorting/grouping parameters in schedule as well parameters like sorting order, whether its a footer or header. Visit archi-lab.net for more information. , Schedule Title Appearance - This node will override the appearance of the title. , Schedules on Sheets - Queries all schedules and produces two lists: one with all schedules that are placed on sheets and one with schedules that are not placed on sheets., Select Model Lines by Style - This node will select all model lines in the revit project by a line style name. , Set BuiltIn Parameter - This node will take an input of a built in parameter name and set that parameter to given value for given elements. , Set Type Parameter - This node will set a type parameter for an element., Slice String - Slices X number of leading or trailing characters from string (boolean true will slice from left while boolean set to false from right), String From List - This node will take an input of a list or nested list and then join each element in a list with a given seperator while adding a suffix., Tag Host Element - This node will retrieve an element that is hosting a given tag. , Tag Text - This node will retireve a text content of a tag. , Transform Origin - This node will query an element for its Transform (Coordinate System) and then return its Origin point. , Viewport Properties - This node will return certain properties from a Viewport input. , Curve.Level - This node will return a level that a given curve is located on. , Level.LevelAbove - This node takes an input of level and returns level above it. ",
            "engine_metadata": "",
            "engine_version": "0.8.2.2371",
            "created": "2015-10-03T22:56:37.615Z",
            "full_dependency_versions": [ "2015.10.3" ],
            "full_dependency_ids": [
              {
                "_id": "53e99ce50e5572016a00018a",
                "name": "archi-lab.net"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2015.10.3"
          },
          {
            "_id": "56129f9b662bf0e90800022e",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/73ea6761-c63f-4aca-9e63-f5aee7afee06gregPkg663.zip",
            "contents": "Add Revisions to Sheet - This node will add specified revisions to a sheet. , Add Shared Parameter to Project - This node will add a parameter to shared parameter file and then add it to the project. , Apply View Template - This node will allow you to apply a view template to a set of views., Cell Style Settings - This node will generate a Cell Style Settings that can be used to override cell properties. , Change Family Type - Changes family type of a family by passing in an Element and type id of the type we want to change it to. , Clear List - This node will remove all Null and Empty Lists from any list. , Color Settings - This node creates color settings for the Analysis Visualization Framework. , Colored Surface Display Style - This node will generate a Colored Surface Display Style from inputs of points, values, and instance surface for analysis to be aplied to. Also, use color and legend settings (part of archi-lab package) to create style colors and visibility., Colored Surface Settings - This node creates settings for the colored surface display style of the Analysis Visualization Framework., Combine by Pattern - Combines two list based on a input pattern of true and false., Create Annotation Tag - This node will create an annotation tag at a given location, of given type and in a supplied view. If only single view is supplied then all tags will be created in that view. , Create Placeholder Sheet - This node will create placeholder sheets from a sheet number/name. , Current Document - Retrieves Current Document, Curve.Level - This node will return a level that a given curve is located on. , Delete Elements - This node will delete elements from Revit project., Delete Linked Model Keynote Tags - Deletes all Keynote Tags that are tagging elements in the linked model. if element in the linked model has a keynote assigned thus a keynote tag reads a proper value it will not be deleted. , Delete Unnamed Reference Planes - Does just what the name says. , Dispatch - Works exactly like the Dispatch component in Grasshopper. Input a list and a matching pattern of True/False to split list into two lists one containing all True arguments while other all False arguments. , Door Set Handing - Determines door set handing (whether its a left or right handed door). Input takes doors, and output will split them into two lists (right and left)., Duplicate Item Indices - Searches an input list for duplicate entries and lists their index numbers. Couple with Get From List to delete duplicates from a list., Element Ids - This node will query an element id that can be used with Revit nodes. Dynamo Element Id node returns integer value. , Elements Fom Linked File in Room - This node will check what elements from a linked model are inside of any of the rooms in the current model. , Elements in Room - This node will check if any of the elements are inside any of the supplied rooms. , Elements on Sheet - This node will return elements on sheet., Export Image by View - This node will export a list of Views and save them as images (JPG, BMP etc)., Fill Pattern - Get Fill Pattern by Name, Filled Region Area - This node will query an area from the filled region, Filled Region Boundary Curves - This node will get the boundary curves for a filled region., Get All Detail Groups - This node will retrieve all instances of Detail Groups in the model., Get All Dimension Styles - This node will query all of the available dimension styles (this includes linear as well as arc, circle etc). , Get All Elements From Linked Model - This node is based on code posted by Julien Benoit. Big thanks to Julien for sharing his work. This node will retrieve all elements of a given category from a given linked model. , Get All Keynote Tags - Selects all Keynote Tags instances in the model. , Get All Line Styles - This node will return all available line styles., Get All Revisions - This node will return all Revisions currently defined in the mode., Get All Viewport Types - This node will retrieve all Viewport Types currently in the model. , Get All Views - This node will query all views in the model and return them based on category, Get Built In Parameter - This node will take an input of a built in parameter name and element to return that parameters value. , Get Design Options - Queries all of the design options currently in the project., Get Documents - Queries all linked Revit files and retrieves their Name, LinkInstance and Document properties., Get Elements by Category/Level - This node will filter for all elements of a given category on a given level., Get Filled Regions - This node will query up all Filled Regions in the project as well as those in the active view only. , Get Host Element - This node will retrieve a host element from hosted element. Ex. feed in door, get wall., Get Level by Name - This node will retrieve a Revit Level Element by its name. , Get Line Style by Name - This node will return a line style object by its name. Line styles can be either Drafting or Model Line Property. , Get Rooms by Level - Filters Rooms by level., Get Sheet Viewports - This node will query a sheet for viewports (views) that are placed on it., Get Tagged Element Id - Retrives an Element Id from input of element tags. For example if wall tags are inputted it will return tagged wall Ids., Get Text Note Type by Name - This node will select a text note type by name. , Get Type Parameter - This node will retrieve a type parameter by its name., Get Unplaced Groups - This node will retrieve all unplaced groups in the model., Get Views from View Set - This node will take a name of a view set and return views/sheet elements contained in it. , Get Worksets - Retrieves user worksets from specified document, GH Point to DY Point - Converts CSV Grasshopper export of points into a Dynamo point list. , Group Curves - This node will take any input of flat list of curves and group them into sublists containing \"joinable\" curves that is continous curves. They might form closed curves or open curves. Use PolyCurve.ByJoinedCurves to convert output groups of curves into single PolyCurves, Id to Element - Selects elements in a model from id input (ElementId, string, integer or GUID), Isolate in View - This node will take input of elements and a view to isolate selected elements in a view., Key Schedule - This node will take a key schedule, data and a list of parameters and populate it with infomation from data parameter. Visit www.archi-lab.net for more information on how to prep this node for take off. , Legend Settings - This node sets all settings for the Legend display with Analysis Visualization Framework of Revit. , Level.LevelAbove - This node takes an input of level and returns level above it. , Local Printers Names - This node will query all locally installed printers and return their names., Marker Settings - This node will generate AnalysisDisplayMarkerAndTextSettings to be used with a Marker Analysis Display Style. Inputs are: Marker Shape(Circle, Triangle, Rectangle), Marker Size, Show Text (Boolean), Rounding, TextDisplayMethod (Show All, Show None, Show Predefined). , Marker&Text Display Style - This node will take an input of Points and a matching input of values to create Analysis Display Style in Revit. Use Legend, Marker and Color Settings nodes to fully customize your display style. , Mass Addition - This node will attempt to sum all elements contained within it. , New Section Box View By Elements - This node will create new section box around specified elements and apply it to a new 3D View with a specified name. Section box will be offset from the elements by a supplied offset values. , Override Fill Pattern in View - Overrides fill pattern of any element in an active view to specified fill pattern and color, Parameter Group - This node will return all available Parameter Groups, Phase Demolished - This node will query a Phase Demolished setting of an element and return phase id. If id is -1 that means that element was not demolished. , PolyCurve by Profile Family Type - It takes an input of a profile family type and extract curves from it converting them to polycurves and curve segments for use in Dynamo (sweeps)., Print PDF - This node will allow you to initiate a printing routine in revit from a set of views/sheets, printer name, print settings and print range. , Remap UV Domain - This node takes an input of a reference face and a list of UVs that get remapped into that face's UV Domain. The output is a list of UV Coordinates in that surface's domain. , Remove Revision from Sheet - This node will remove specified Revisions from a sheet., Rename Files - This node will use an \"identifier\" to pick out files from a supplied directory to rename files to a new name supplied. Please make sure to match list lengths of identifier and new name inputs., Revision Properties - This node will return some most common Revision properties like Description or Issue Date., Revisions on Sheet - This node will return all Revisions specified in \"Revisions on Sheet\" selection of the sheet., Rotate Family - This node will rotate a family in Revit around a given axis by supplied angle (in radians). Please remember that every time you run your definition it will rotate family by given angle every time. , Schedule Appearance - This node allows you to control the appearance of the schedule. For now it supports only title, header and body text type. , Schedule Formatting - This node will allow you to control schedule formatiing options like column width, whether a column is hidden, column heading etc. , Schedule Sorting Grouping - This node will allow you to specify sorting/grouping parameters in schedule as well parameters like sorting order, whether its a footer or header. Visit archi-lab.net for more information. , Schedule Title Appearance - This node will override the appearance of the title. , Schedules on Sheets - Queries all schedules and produces two lists: one with all schedules that are placed on sheets and one with schedules that are not placed on sheets., Select Model Lines by Style - This node will select all model lines in the revit project by a line style name. , Set BuiltIn Parameter - This node will take an input of a built in parameter name and set that parameter to given value for given elements. , Set Type Parameter - This node will set a type parameter for an element., Slice String - Slices X number of leading or trailing characters from string (boolean true will slice from left while boolean set to false from right), String From List - This node will take an input of a list or nested list and then join each element in a list with a given seperator while adding a suffix., Tag Host Element - This node will retrieve an element that is hosting a given tag. , Tag Text - This node will retireve a text content of a tag. , Transform Origin - This node will query an element for its Transform (Coordinate System) and then return its Origin point. , Viewport Properties - This node will return certain properties from a Viewport input. , Workset.ByName - This node will create a new workset by name.",
            "engine_metadata": "",
            "engine_version": "0.8.2.2311",
            "created": "2015-10-05T16:04:43.642Z",
            "full_dependency_versions": [ "2015.10.4" ],
            "full_dependency_ids": [
              {
                "_id": "53e99ce50e5572016a00018a",
                "name": "archi-lab.net"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2015.10.4"
          },
          {
            "_id": "561822fd662bf0e908000249",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/1b3d774e-4d55-4606-ab19-063aa53cbda1gregPkg179.zip",
            "contents": "Add Revisions to Sheet - This node will add specified revisions to a sheet. , Add Shared Parameter to Project - This node will add a parameter to shared parameter file and then add it to the project. , Apply View Template - This node will allow you to apply a view template to a set of views., Cell Style Settings - This node will generate a Cell Style Settings that can be used to override cell properties. , Change Family Type - Changes family type of a family by passing in an Element and type id of the type we want to change it to. , Clear List - This node will remove all Null and Empty Lists from any list. , Color Settings - This node creates color settings for the Analysis Visualization Framework. , Colored Surface Display Style - This node will generate a Colored Surface Display Style from inputs of points, values, and instance surface for analysis to be aplied to. Also, use color and legend settings (part of archi-lab package) to create style colors and visibility., Colored Surface Settings - This node creates settings for the colored surface display style of the Analysis Visualization Framework., Combine by Pattern - Combines two list based on a input pattern of true and false., Create Annotation Tag - This node will create an annotation tag at a given location, of given type and in a supplied view. If only single view is supplied then all tags will be created in that view. , Create Placeholder Sheet - This node will create placeholder sheets from a sheet number/name. , Current Document - Retrieves Current Document, Curve.Level - This node will return a level that a given curve is located on. , Delete Elements - This node will delete elements from Revit project., Delete Linked Model Keynote Tags - Deletes all Keynote Tags that are tagging elements in the linked model. if element in the linked model has a keynote assigned thus a keynote tag reads a proper value it will not be deleted. , Delete Unnamed Reference Planes - Does just what the name says. , Dispatch - Works exactly like the Dispatch component in Grasshopper. Input a list and a matching pattern of True/False to split list into two lists one containing all True arguments while other all False arguments. , Door Set Handing - Determines door set handing (whether its a left or right handed door). Input takes doors, and output will split them into two lists (right and left)., Duplicate Item Indices - Searches an input list for duplicate entries and lists their index numbers. Couple with Get From List to delete duplicates from a list., Element Ids - This node will query an element id that can be used with Revit nodes. Dynamo Element Id node returns integer value. , Elements Fom Linked File in Room - This node will check what elements from a linked model are inside of any of the rooms in the current model. , Elements in Room - This node will check if any of the elements are inside any of the supplied rooms. , Elements on Sheet - This node will return elements on sheet., Export Image by View - This node will export a list of Views and save them as images (JPG, BMP etc)., Fill Pattern - Get Fill Pattern by Name, Filled Region Area - This node will query an area from the filled region, Filled Region Boundary Curves - This node will get the boundary curves for a filled region., Get All Detail Groups - This node will retrieve all instances of Detail Groups in the model., Get All Dimension Styles - This node will query all of the available dimension styles (this includes linear as well as arc, circle etc). , Get All Elements From Linked Model - This node is based on code posted by Julien Benoit. Big thanks to Julien for sharing his work. This node will retrieve all elements of a given category from a given linked model. , Get All Keynote Tags - Selects all Keynote Tags instances in the model. , Get All Line Styles - This node will return all available line styles., Get All Revisions - This node will return all Revisions currently defined in the mode., Get All Viewport Types - This node will retrieve all Viewport Types currently in the model. , Get All Views - This node will query all views in the model and return them based on category, Get Built In Parameter - This node will take an input of a built in parameter name and element to return that parameters value. , Get Design Options - Queries all of the design options currently in the project., Get Documents - Queries all linked Revit files and retrieves their Name, LinkInstance and Document properties., Get Elements by Category/Level - This node will filter for all elements of a given category on a given level., Get Filled Regions - This node will query up all Filled Regions in the project as well as those in the active view only. , Get Host Element - This node will retrieve a host element from hosted element. Ex. feed in door, get wall., Get Level by Name - This node will retrieve a Revit Level Element by its name. , Get Line Style by Name - This node will return a line style object by its name. Line styles can be either Drafting or Model Line Property. , Get Rooms by Level - Filters Rooms by level., Get Sheet Viewports - This node will query a sheet for viewports (views) that are placed on it., Get Tagged Element Id - Retrives an Element Id from input of element tags. For example if wall tags are inputted it will return tagged wall Ids., Get Text Note Type by Name - This node will select a text note type by name. , Get Type Parameter - This node will retrieve a type parameter by its name., Get Unplaced Groups - This node will retrieve all unplaced groups in the model., Get Views from View Set - This node will take a name of a view set and return views/sheet elements contained in it. , Get Worksets - Retrieves user worksets from specified document, GH Point to DY Point - Converts CSV Grasshopper export of points into a Dynamo point list. , Group Curves - This node will take any input of flat list of curves and group them into sublists containing \"joinable\" curves that is continous curves. They might form closed curves or open curves. Use PolyCurve.ByJoinedCurves to convert output groups of curves into single PolyCurves, Id to Element - Selects elements in a model from id input (ElementId, string, integer or GUID), Isolate in View - This node will take input of elements and a view to isolate selected elements in a view., Key Schedule - This node will take a key schedule, data and a list of parameters and populate it with infomation from data parameter. Visit www.archi-lab.net for more information on how to prep this node for take off. , Legend Settings - This node sets all settings for the Legend display with Analysis Visualization Framework of Revit. , Level.LevelAbove - This node takes an input of level and returns level above it. , Local Printers Names - This node will query all locally installed printers and return their names., Marker Settings - This node will generate AnalysisDisplayMarkerAndTextSettings to be used with a Marker Analysis Display Style. Inputs are: Marker Shape(Circle, Triangle, Rectangle), Marker Size, Show Text (Boolean), Rounding, TextDisplayMethod (Show All, Show None, Show Predefined). , Marker&Text Display Style - This node will take an input of Points and a matching input of values to create Analysis Display Style in Revit. Use Legend, Marker and Color Settings nodes to fully customize your display style. , Mass Addition - This node will attempt to sum all elements contained within it. , New Section Box View By Elements - This node will create new section box around specified elements and apply it to a new 3D View with a specified name. Section box will be offset from the elements by a supplied offset values. , Override Fill Pattern in View - Overrides fill pattern of any element in an active view to specified fill pattern and color, Parameter Group - This node will return all available Parameter Groups, Phase Demolished - This node will query a Phase Demolished setting of an element and return phase id. If id is -1 that means that element was not demolished. , PolyCurve by Profile Family Type - It takes an input of a profile family type and extract curves from it converting them to polycurves and curve segments for use in Dynamo (sweeps)., Print PDF - This node will allow you to initiate a printing routine in revit from a set of views/sheets, printer name, print settings and print range. , Remap UV Domain - This node takes an input of a reference face and a list of UVs that get remapped into that face's UV Domain. The output is a list of UV Coordinates in that surface's domain. , Remove Revision from Sheet - This node will remove specified Revisions from a sheet., Rename Files - This node will use an \"identifier\" to pick out files from a supplied directory to rename files to a new name supplied. Please make sure to match list lengths of identifier and new name inputs., Revision Properties - This node will return some most common Revision properties like Description or Issue Date., Revisions on Sheet - This node will return all Revisions specified in \"Revisions on Sheet\" selection of the sheet., Rotate Family - This node will rotate a family in Revit around a given axis by supplied angle (in radians). Please remember that every time you run your definition it will rotate family by given angle every time. , Schedule Appearance - This node allows you to control the appearance of the schedule. For now it supports only title, header and body text type. , Schedule Formatting - This node will allow you to control schedule formatiing options like column width, whether a column is hidden, column heading etc. , Schedule Sorting Grouping - This node will allow you to specify sorting/grouping parameters in schedule as well parameters like sorting order, whether its a footer or header. Visit archi-lab.net for more information. , Schedule Title Appearance - This node will override the appearance of the title. , Schedules on Sheets - Queries all schedules and produces two lists: one with all schedules that are placed on sheets and one with schedules that are not placed on sheets., Select Model Lines by Style - This node will select all model lines in the revit project by a line style name. , Set BuiltIn Parameter - This node will take an input of a built in parameter name and set that parameter to given value for given elements. , Set Type Parameter - This node will set a type parameter for an element., Slice String - Slices X number of leading or trailing characters from string (boolean true will slice from left while boolean set to false from right), String From List - This node will take an input of a list or nested list and then join each element in a list with a given seperator while adding a suffix., Tag Host Element - This node will retrieve an element that is hosting a given tag. , Tag Text - This node will retireve a text content of a tag. , Transform Origin - This node will query an element for its Transform (Coordinate System) and then return its Origin point. , Viewport Properties - This node will return certain properties from a Viewport input. , Workset.ByName - This node will create a new workset by name.",
            "engine_metadata": "",
            "engine_version": "0.8.2.2311",
            "created": "2015-10-09T20:26:37.872Z",
            "full_dependency_versions": [ "2015.10.9" ],
            "full_dependency_ids": [
              {
                "_id": "53e99ce50e5572016a00018a",
                "name": "archi-lab.net"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2015.10.9"
          },
          {
            "_id": "561ae9be662bf0e90800024d",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/153b8681-18dd-448a-812e-8f55e3d6916egregPkg721.zip",
            "contents": "Add Revisions to Sheet - This node will add specified revisions to a sheet. , Add Shared Parameter to Project - This node will add a parameter to shared parameter file and then add it to the project. , Apply View Template - This node will allow you to apply a view template to a set of views., Cell Style Settings - This node will generate a Cell Style Settings that can be used to override cell properties. , Change Family Type - Changes family type of a family by passing in an Element and type id of the type we want to change it to. , Clear List - This node will remove all Null and Empty Lists from any list. , Color Settings - This node creates color settings for the Analysis Visualization Framework. , Colored Surface Display Style - This node will generate a Colored Surface Display Style from inputs of points, values, and instance surface for analysis to be aplied to. Also, use color and legend settings (part of archi-lab package) to create style colors and visibility., Colored Surface Settings - This node creates settings for the colored surface display style of the Analysis Visualization Framework., Combine by Pattern - Combines two list based on a input pattern of true and false., Create Annotation Tag - This node will create an annotation tag at a given location, of given type and in a supplied view. If only single view is supplied then all tags will be created in that view. , Create Placeholder Sheet - This node will create placeholder sheets from a sheet number/name. , Current Document - Retrieves Current Document, Curve.Level - This node will return a level that a given curve is located on. , Delete Elements - This node will delete elements from Revit project., Delete Linked Model Keynote Tags - Deletes all Keynote Tags that are tagging elements in the linked model. if element in the linked model has a keynote assigned thus a keynote tag reads a proper value it will not be deleted. , Delete Unnamed Reference Planes - Does just what the name says. , Dispatch - Works exactly like the Dispatch component in Grasshopper. Input a list and a matching pattern of True/False to split list into two lists one containing all True arguments while other all False arguments. , Door Set Handing - Determines door set handing (whether its a left or right handed door). Input takes doors, and output will split them into two lists (right and left)., Duplicate Item Indices - Searches an input list for duplicate entries and lists their index numbers. Couple with Get From List to delete duplicates from a list., Element Ids - This node will query an element id that can be used with Revit nodes. Dynamo Element Id node returns integer value. , Elements Fom Linked File in Room - This node will check what elements from a linked model are inside of any of the rooms in the current model. , Elements in Room - This node will check if any of the elements are inside any of the supplied rooms. , Elements on Sheet - This node will return elements on sheet., Export Image by View - This node will export a list of Views and save them as images (JPG, BMP etc)., Fill Pattern - Get Fill Pattern by Name, Filled Region Area - This node will query an area from the filled region, Filled Region Boundary Curves - This node will get the boundary curves for a filled region., Get All Detail Groups - This node will retrieve all instances of Detail Groups in the model., Get All Dimension Styles - This node will query all of the available dimension styles (this includes linear as well as arc, circle etc). , Get All Elements From Linked Model - This node is based on code posted by Julien Benoit. Big thanks to Julien for sharing his work. This node will retrieve all elements of a given category from a given linked model. , Get All Keynote Tags - Selects all Keynote Tags instances in the model. , Get All Line Styles - This node will return all available line styles., Get All Revisions - This node will return all Revisions currently defined in the mode., Get All Viewport Types - This node will retrieve all Viewport Types currently in the model. , Get All Views - This node will query all views in the model and return them based on category, Get Built In Parameter - This node will take an input of a built in parameter name and element to return that parameters value. , Get Design Options - Queries all of the design options currently in the project., Get Documents - Queries all linked Revit files and retrieves their Name, LinkInstance and Document properties., Get Elements by Category/Level - This node will filter for all elements of a given category on a given level., Get Filled Regions - This node will query up all Filled Regions in the project as well as those in the active view only. , Get Host Element - This node will retrieve a host element from hosted element. Ex. feed in door, get wall., Get Level by Name - This node will retrieve a Revit Level Element by its name. , Get Line Style by Name - This node will return a line style object by its name. Line styles can be either Drafting or Model Line Property. , Get Rooms by Level - Filters Rooms by level., Get Sheet Viewports - This node will query a sheet for viewports (views) that are placed on it., Get Tagged Element Id - Retrives an Element Id from input of element tags. For example if wall tags are inputted it will return tagged wall Ids., Get Text Note Type by Name - This node will select a text note type by name. , Get Type Parameter - This node will retrieve a type parameter by its name., Get Unplaced Groups - This node will retrieve all unplaced groups in the model., Get Views from View Set - This node will take a name of a view set and return views/sheet elements contained in it. , Get Worksets - Retrieves user worksets from specified document, GH Point to DY Point - Converts CSV Grasshopper export of points into a Dynamo point list. , Group Curves - This node will take any input of flat list of curves and group them into sublists containing \"joinable\" curves that is continous curves. They might form closed curves or open curves. Use PolyCurve.ByJoinedCurves to convert output groups of curves into single PolyCurves, Id to Element - Selects elements in a model from id input (ElementId, string, integer or GUID), Isolate in View - This node will take input of elements and a view to isolate selected elements in a view., Key Schedule - This node will take a key schedule, data and a list of parameters and populate it with infomation from data parameter. Visit www.archi-lab.net for more information on how to prep this node for take off. , Legend Settings - This node sets all settings for the Legend display with Analysis Visualization Framework of Revit. , Level.LevelAbove - This node takes an input of level and returns level above it. , Local Printers Names - This node will query all locally installed printers and return their names., Marker Settings - This node will generate AnalysisDisplayMarkerAndTextSettings to be used with a Marker Analysis Display Style. Inputs are: Marker Shape(Circle, Triangle, Rectangle), Marker Size, Show Text (Boolean), Rounding, TextDisplayMethod (Show All, Show None, Show Predefined). , Marker&Text Display Style - This node will take an input of Points and a matching input of values to create Analysis Display Style in Revit. Use Legend, Marker and Color Settings nodes to fully customize your display style. , Mass Addition - This node will attempt to sum all elements contained within it. , New Section Box View By Elements - This node will create new section box around specified elements and apply it to a new 3D View with a specified name. Section box will be offset from the elements by a supplied offset values. , Override Fill Pattern in View - Overrides fill pattern of any element in an active view to specified fill pattern and color, Parameter Group - This node will return all available Parameter Groups, Phase Demolished - This node will query a Phase Demolished setting of an element and return phase id. If id is -1 that means that element was not demolished. , PolyCurve by Profile Family Type - It takes an input of a profile family type and extract curves from it converting them to polycurves and curve segments for use in Dynamo (sweeps)., Print PDF - This node will allow you to initiate a printing routine in revit from a set of views/sheets, printer name, print settings and print range. , Remap UV Domain - This node takes an input of a reference face and a list of UVs that get remapped into that face's UV Domain. The output is a list of UV Coordinates in that surface's domain. , Remove Revision from Sheet - This node will remove specified Revisions from a sheet., Rename Files - This node will use an \"identifier\" to pick out files from a supplied directory to rename files to a new name supplied. Please make sure to match list lengths of identifier and new name inputs., Revision Properties - This node will return some most common Revision properties like Description or Issue Date., Revisions on Sheet - This node will return all Revisions specified in \"Revisions on Sheet\" selection of the sheet., Rotate Family - This node will rotate a family in Revit around a given axis by supplied angle (in radians). Please remember that every time you run your definition it will rotate family by given angle every time. , Schedule Appearance - This node allows you to control the appearance of the schedule. For now it supports only title, header and body text type. , Schedule Formatting - This node will allow you to control schedule formatiing options like column width, whether a column is hidden, column heading etc. , Schedule Sorting Grouping - This node will allow you to specify sorting/grouping parameters in schedule as well parameters like sorting order, whether its a footer or header. Visit archi-lab.net for more information. , Schedule Title Appearance - This node will override the appearance of the title. , Schedules on Sheets - Queries all schedules and produces two lists: one with all schedules that are placed on sheets and one with schedules that are not placed on sheets., Select Model Lines by Style - This node will select all model lines in the revit project by a line style name. , Set BuiltIn Parameter - This node will take an input of a built in parameter name and set that parameter to given value for given elements. , Set Type Parameter - This node will set a type parameter for an element., Slice String - Slices X number of leading or trailing characters from string (boolean true will slice from left while boolean set to false from right), String From List - This node will take an input of a list or nested list and then join each element in a list with a given seperator while adding a suffix., Tag Host Element - This node will retrieve an element that is hosting a given tag. , Tag Text - This node will retireve a text content of a tag. , Transform Origin - This node will query an element for its Transform (Coordinate System) and then return its Origin point. , Viewport Properties - This node will return certain properties from a Viewport input. , Workset.ByName - This node will create a new workset by name., Image Import Options - This node will generate import options needed when importing images into Revit models. , Image.Import - This node will import an image into specified view based on image import options. , Image.Reload - This node will reload an image if its already imported. ",
            "engine_metadata": "",
            "engine_version": "0.8.2.2371",
            "created": "2015-10-11T22:59:10.636Z",
            "full_dependency_versions": [ "2015.10.11" ],
            "full_dependency_ids": [
              {
                "_id": "53e99ce50e5572016a00018a",
                "name": "archi-lab.net"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2015.10.11"
          },
          {
            "_id": "562702d7662bf0e908000277",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/ba152998-12ed-4965-9e52-807598d860b7gregPkg691.zip",
            "contents": "Add Revisions to Sheet - This node will add specified revisions to a sheet. , Add Shared Parameter to Project - This node will add a parameter to shared parameter file and then add it to the project. , Apply View Template - This node will allow you to apply a view template to a set of views., Cell Style Settings - This node will generate a Cell Style Settings that can be used to override cell properties. , Change Family Type - Changes family type of a family by passing in an Element and type id of the type we want to change it to. , Clear List - This node will remove all Null and Empty Lists from any list. , Color Settings - This node creates color settings for the Analysis Visualization Framework. , Colored Surface Display Style - This node will generate a Colored Surface Display Style from inputs of points, values, and instance surface for analysis to be aplied to. Also, use color and legend settings (part of archi-lab package) to create style colors and visibility., Colored Surface Settings - This node creates settings for the colored surface display style of the Analysis Visualization Framework., Combine by Pattern - Combines two list based on a input pattern of true and false., Create Annotation Tag - This node will create an annotation tag at a given location, of given type and in a supplied view. If only single view is supplied then all tags will be created in that view. , Create Placeholder Sheet - This node will create placeholder sheets from a sheet number/name. , Current Document - Retrieves Current Document, Curve.Level - This node will return a level that a given curve is located on. , Delete Elements - This node will delete elements from Revit project., Delete Linked Model Keynote Tags - Deletes all Keynote Tags that are tagging elements in the linked model. if element in the linked model has a keynote assigned thus a keynote tag reads a proper value it will not be deleted. , Delete Unnamed Reference Planes - Does just what the name says. , Dispatch - Works exactly like the Dispatch component in Grasshopper. Input a list and a matching pattern of True/False to split list into two lists one containing all True arguments while other all False arguments. , Door Set Handing - Determines door set handing (whether its a left or right handed door). Input takes doors, and output will split them into two lists (right and left)., Duplicate Item Indices - Searches an input list for duplicate entries and lists their index numbers. Couple with Get From List to delete duplicates from a list., Element Ids - This node will query an element id that can be used with Revit nodes. Dynamo Element Id node returns integer value. , Elements Fom Linked File in Room - This node will check what elements from a linked model are inside of any of the rooms in the current model. , Elements in Room - This node will check if any of the elements are inside any of the supplied rooms. , Elements on Sheet - This node will return elements on sheet., Export Image by View - This node will export a list of Views and save them as images (JPG, BMP etc)., Fill Pattern - Get Fill Pattern by Name, Filled Region Area - This node will query an area from the filled region, Filled Region Boundary Curves - This node will get the boundary curves for a filled region., Get All Detail Groups - This node will retrieve all instances of Detail Groups in the model., Get All Dimension Styles - This node will query all of the available dimension styles (this includes linear as well as arc, circle etc). , Get All Elements From Linked Model - This node is based on code posted by Julien Benoit. Big thanks to Julien for sharing his work. This node will retrieve all elements of a given category from a given linked model. , Get All Keynote Tags - Selects all Keynote Tags instances in the model. , Get All Line Styles - This node will return all available line styles., Get All Revisions - This node will return all Revisions currently defined in the mode., Get All Viewport Types - This node will retrieve all Viewport Types currently in the model. , Get All Views - This node will query all views in the model and return them based on category, Get Built In Parameter - This node will take an input of a built in parameter name and element to return that parameters value. , Get Design Options - Queries all of the design options currently in the project., Get Documents - Queries all linked Revit files and retrieves their Name, LinkInstance and Document properties., Get Elements by Category/Level - This node will filter for all elements of a given category on a given level., Get Filled Regions - This node will query up all Filled Regions in the project as well as those in the active view only. , Get Host Element - This node will retrieve a host element from hosted element. Ex. feed in door, get wall., Get Level by Name - This node will retrieve a Revit Level Element by its name. , Get Line Style by Name - This node will return a line style object by its name. Line styles can be either Drafting or Model Line Property. , Get Rooms by Level - Filters Rooms by level., Get Sheet Viewports - This node will query a sheet for viewports (views) that are placed on it., Get Tagged Element Id - Retrives an Element Id from input of element tags. For example if wall tags are inputted it will return tagged wall Ids., Get Text Note Type by Name - This node will select a text note type by name. , Get Type Parameter - This node will retrieve a type parameter by its name., Get Unplaced Groups - This node will retrieve all unplaced groups in the model., Get Views from View Set - This node will take a name of a view set and return views/sheet elements contained in it. , Get Worksets - Retrieves user worksets from specified document, GH Point to DY Point - Converts CSV Grasshopper export of points into a Dynamo point list. , Group Curves - This node will take any input of flat list of curves and group them into sublists containing \"joinable\" curves that is continous curves. They might form closed curves or open curves. Use PolyCurve.ByJoinedCurves to convert output groups of curves into single PolyCurves, Id to Element - Selects elements in a model from id input (ElementId, string, integer or GUID), Isolate in View - This node will take input of elements and a view to isolate selected elements in a view., Key Schedule - This node will take a key schedule, data and a list of parameters and populate it with infomation from data parameter. Visit www.archi-lab.net for more information on how to prep this node for take off. , Legend Settings - This node sets all settings for the Legend display with Analysis Visualization Framework of Revit. , Level.LevelAbove - This node takes an input of level and returns level above it. , Local Printers Names - This node will query all locally installed printers and return their names., Marker Settings - This node will generate AnalysisDisplayMarkerAndTextSettings to be used with a Marker Analysis Display Style. Inputs are: Marker Shape(Circle, Triangle, Rectangle), Marker Size, Show Text (Boolean), Rounding, TextDisplayMethod (Show All, Show None, Show Predefined). , Marker&Text Display Style - This node will take an input of Points and a matching input of values to create Analysis Display Style in Revit. Use Legend, Marker and Color Settings nodes to fully customize your display style. , Mass Addition - This node will attempt to sum all elements contained within it. , New Section Box View By Elements - This node will create new section box around specified elements and apply it to a new 3D View with a specified name. Section box will be offset from the elements by a supplied offset values. , Override Fill Pattern in View - Overrides fill pattern of any element in an active view to specified fill pattern and color, Parameter Group - This node will return all available Parameter Groups, Phase Demolished - This node will query a Phase Demolished setting of an element and return phase id. If id is -1 that means that element was not demolished. , PolyCurve by Profile Family Type - It takes an input of a profile family type and extract curves from it converting them to polycurves and curve segments for use in Dynamo (sweeps)., Print PDF - This node will allow you to initiate a printing routine in revit from a set of views/sheets, printer name, print settings and print range. , Remap UV Domain - This node takes an input of a reference face and a list of UVs that get remapped into that face's UV Domain. The output is a list of UV Coordinates in that surface's domain. , Remove Revision from Sheet - This node will remove specified Revisions from a sheet., Rename Files - This node will use an \"identifier\" to pick out files from a supplied directory to rename files to a new name supplied. Please make sure to match list lengths of identifier and new name inputs., Revision Properties - This node will return some most common Revision properties like Description or Issue Date., Revisions on Sheet - This node will return all Revisions specified in \"Revisions on Sheet\" selection of the sheet., Rotate Family - This node will rotate a family in Revit around a given axis by supplied angle (in radians). Please remember that every time you run your definition it will rotate family by given angle every time. , Schedule Appearance - This node allows you to control the appearance of the schedule. For now it supports only title, header and body text type. , Schedule Formatting - This node will allow you to control schedule formatiing options like column width, whether a column is hidden, column heading etc. , Schedule Sorting Grouping - This node will allow you to specify sorting/grouping parameters in schedule as well parameters like sorting order, whether its a footer or header. Visit archi-lab.net for more information. , Schedule Title Appearance - This node will override the appearance of the title. , Schedules on Sheets - Queries all schedules and produces two lists: one with all schedules that are placed on sheets and one with schedules that are not placed on sheets., Select Model Lines by Style - This node will select all model lines in the revit project by a line style name. , Set BuiltIn Parameter - This node will take an input of a built in parameter name and set that parameter to given value for given elements. , Set Type Parameter - This node will set a type parameter for an element., Slice String - Slices X number of leading or trailing characters from string (boolean true will slice from left while boolean set to false from right), String From List - This node will take an input of a list or nested list and then join each element in a list with a given seperator while adding a suffix., Tag Host Element - This node will retrieve an element that is hosting a given tag. , Tag Text - This node will retireve a text content of a tag. , Transform Origin - This node will query an element for its Transform (Coordinate System) and then return its Origin point. , Viewport Properties - This node will return certain properties from a Viewport input. , Workset.ByName - This node will create a new workset by name.",
            "engine_metadata": "",
            "engine_version": "0.8.2.2392",
            "created": "2015-10-21T03:13:27.146Z",
            "full_dependency_versions": [ "2015.10.20" ],
            "full_dependency_ids": [
              {
                "_id": "53e99ce50e5572016a00018a",
                "name": "archi-lab.net"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2015.10.20"
          },
          {
            "_id": "563ce390662bf0e9080002ee",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/0d72c4c5-9bb4-4432-bfc5-ea01b00ec03cgregPkg476.zip",
            "contents": "Add Revisions to Sheet - This node will add specified revisions to a sheet. , Add Shared Parameter to Project - This node will add a parameter to shared parameter file and then add it to the project. , Apply View Template - This node will allow you to apply a view template to a set of views., Cell Style Settings - This node will generate a Cell Style Settings that can be used to override cell properties. , Change Family Type - Changes family type of a family by passing in an Element and type id of the type we want to change it to. , Clear List - This node will remove all Null and Empty Lists from any list. , Color Settings - This node creates color settings for the Analysis Visualization Framework. , Colored Surface Display Style - This node will generate a Colored Surface Display Style from inputs of points, values, and instance surface for analysis to be aplied to. Also, use color and legend settings (part of archi-lab package) to create style colors and visibility., Colored Surface Settings - This node creates settings for the colored surface display style of the Analysis Visualization Framework., Combine by Pattern - Combines two list based on a input pattern of true and false., Create Annotation Tag - This node will create an annotation tag at a given location, of given type and in a supplied view. If only single view is supplied then all tags will be created in that view. , Create Placeholder Sheet - This node will create placeholder sheets from a sheet number/name. , Current Document - Retrieves Current Document, Curve.Level - This node will return a level that a given curve is located on. , Delete Elements - This node will delete elements from Revit project., Delete Linked Model Keynote Tags - Deletes all Keynote Tags that are tagging elements in the linked model. if element in the linked model has a keynote assigned thus a keynote tag reads a proper value it will not be deleted. , Delete Unnamed Reference Planes - Does just what the name says. , Dispatch - Works exactly like the Dispatch component in Grasshopper. Input a list and a matching pattern of True/False to split list into two lists one containing all True arguments while other all False arguments. , Door Set Handing - Determines door set handing (whether its a left or right handed door). Input takes doors, and output will split them into two lists (right and left)., Duplicate Item Indices - Searches an input list for duplicate entries and lists their index numbers. Couple with Get From List to delete duplicates from a list., Element Ids - This node will query an element id that can be used with Revit nodes. Dynamo Element Id node returns integer value. , Elements Fom Linked File in Room - This node will check what elements from a linked model are inside of any of the rooms in the current model. , Elements in Room - This node will check if any of the elements are inside any of the supplied rooms. , Elements on Sheet - This node will return elements on sheet., Export Image by View - This node will export a list of Views and save them as images (JPG, BMP etc)., Fill Pattern - Get Fill Pattern by Name, Filled Region Area - This node will query an area from the filled region, Filled Region Boundary Curves - This node will get the boundary curves for a filled region., Get All Detail Groups - This node will retrieve all instances of Detail Groups in the model., Get All Dimension Styles - This node will query all of the available dimension styles (this includes linear as well as arc, circle etc). , Get All Elements From Linked Model - This node is based on code posted by Julien Benoit. Big thanks to Julien for sharing his work. This node will retrieve all elements of a given category from a given linked model. , Get All Keynote Tags - Selects all Keynote Tags instances in the model. , Get All Line Styles - This node will return all available line styles., Get All Revisions - This node will return all Revisions currently defined in the mode., Get All Viewport Types - This node will retrieve all Viewport Types currently in the model. , Get All Views - This node will query all views in the model and return them based on category, Get Built In Parameter - This node will take an input of a built in parameter name and element to return that parameters value. , Get Design Options - Queries all of the design options currently in the project., Get Documents - Queries all linked Revit files and retrieves their Name, LinkInstance and Document properties., Get Elements by Category/Level - This node will filter for all elements of a given category on a given level., Get Filled Regions - This node will query up all Filled Regions in the project as well as those in the active view only. , Get Host Element - This node will retrieve a host element from hosted element. Ex. feed in door, get wall., Get Level by Name - This node will retrieve a Revit Level Element by its name. , Get Line Style by Name - This node will return a line style object by its name. Line styles can be either Drafting or Model Line Property. , Get Rooms by Level - Filters Rooms by level., Get Sheet Viewports - This node will query a sheet for viewports (views) that are placed on it., Get Tagged Element Id - Retrives an Element Id from input of element tags. For example if wall tags are inputted it will return tagged wall Ids., Get Text Note Type by Name - This node will select a text note type by name. , Get Type Parameter - This node will retrieve a type parameter by its name., Get Unplaced Groups - This node will retrieve all unplaced groups in the model., Get Views from View Set - This node will take a name of a view set and return views/sheet elements contained in it. , Get Worksets - Retrieves user worksets from specified document, GH Point to DY Point - Converts CSV Grasshopper export of points into a Dynamo point list. , Group Curves - This node will take any input of flat list of curves and group them into sublists containing \"joinable\" curves that is continous curves. They might form closed curves or open curves. Use PolyCurve.ByJoinedCurves to convert output groups of curves into single PolyCurves, Id to Element - Selects elements in a model from id input (ElementId, string, integer or GUID), Isolate in View - This node will take input of elements and a view to isolate selected elements in a view., Key Schedule - This node will take a key schedule, data and a list of parameters and populate it with infomation from data parameter. Visit www.archi-lab.net for more information on how to prep this node for take off. , Legend Settings - This node sets all settings for the Legend display with Analysis Visualization Framework of Revit. , Level.LevelAbove - This node takes an input of level and returns level above it. , Local Printers Names - This node will query all locally installed printers and return their names., Marker Settings - This node will generate AnalysisDisplayMarkerAndTextSettings to be used with a Marker Analysis Display Style. Inputs are: Marker Shape(Circle, Triangle, Rectangle), Marker Size, Show Text (Boolean), Rounding, TextDisplayMethod (Show All, Show None, Show Predefined). , Marker&Text Display Style - This node will take an input of Points and a matching input of values to create Analysis Display Style in Revit. Use Legend, Marker and Color Settings nodes to fully customize your display style. , Mass Addition - This node will attempt to sum all elements contained within it. , New Section Box View By Elements - This node will create new section box around specified elements and apply it to a new 3D View with a specified name. Section box will be offset from the elements by a supplied offset values. , Override Fill Pattern in View - Overrides fill pattern of any element in an active view to specified fill pattern and color, Parameter Group - This node will return all available Parameter Groups, Phase Demolished - This node will query a Phase Demolished setting of an element and return phase id. If id is -1 that means that element was not demolished. , PolyCurve by Profile Family Type - It takes an input of a profile family type and extract curves from it converting them to polycurves and curve segments for use in Dynamo (sweeps)., Print PDF - This node will allow you to initiate a printing routine in revit from a set of views/sheets, printer name, print settings and print range. , Remap UV Domain - This node takes an input of a reference face and a list of UVs that get remapped into that face's UV Domain. The output is a list of UV Coordinates in that surface's domain. , Remove Revision from Sheet - This node will remove specified Revisions from a sheet., Rename Files - This node will use an \"identifier\" to pick out files from a supplied directory to rename files to a new name supplied. Please make sure to match list lengths of identifier and new name inputs., Revision Properties - This node will return some most common Revision properties like Description or Issue Date., Revisions on Sheet - This node will return all Revisions specified in \"Revisions on Sheet\" selection of the sheet., Rotate Family - This node will rotate a family in Revit around a given axis by supplied angle (in radians). Please remember that every time you run your definition it will rotate family by given angle every time. , Schedule Appearance - This node allows you to control the appearance of the schedule. For now it supports only title, header and body text type. , Schedule Formatting - This node will allow you to control schedule formatiing options like column width, whether a column is hidden, column heading etc. , Schedule Sorting Grouping - This node will allow you to specify sorting/grouping parameters in schedule as well parameters like sorting order, whether its a footer or header. Visit archi-lab.net for more information. , Schedule Title Appearance - This node will override the appearance of the title. , Schedules on Sheets - Queries all schedules and produces two lists: one with all schedules that are placed on sheets and one with schedules that are not placed on sheets., Select Model Lines by Style - This node will select all model lines in the revit project by a line style name. , Set BuiltIn Parameter - This node will take an input of a built in parameter name and set that parameter to given value for given elements. , Set Type Parameter - This node will set a type parameter for an element., Slice String - Slices X number of leading or trailing characters from string (boolean true will slice from left while boolean set to false from right), String From List - This node will take an input of a list or nested list and then join each element in a list with a given seperator while adding a suffix., Tag Host Element - This node will retrieve an element that is hosting a given tag. , Tag Text - This node will retireve a text content of a tag. , Transform Origin - This node will query an element for its Transform (Coordinate System) and then return its Origin point. , Viewport Properties - This node will return certain properties from a Viewport input. , Workset.ByName - This node will create a new workset by name., FloorPlan.ByRoom - This node takes input of a Room and creates a Floor Plan View with Crop Box set around that room. , String.Contains - This node takes a list of strings and checks if any string contains a matching string from filter input. , StructuralFraming.BeamByCurve - This node will take an input of curves and attempt to make a structural framing member by type and level. ",
            "engine_metadata": "",
            "engine_version": "0.8.2.2392",
            "created": "2015-11-06T17:29:52.247Z",
            "full_dependency_versions": [ "2015.11.6" ],
            "full_dependency_ids": [
              {
                "_id": "53e99ce50e5572016a00018a",
                "name": "archi-lab.net"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2015.11.6"
          },
          {
            "_id": "56421e2c662bf0e908000319",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/33206d28-63ec-4734-8549-239030ffb5c3gregPkg870.zip",
            "contents": "Add Revisions to Sheet - This node will add specified revisions to a sheet. , Add Shared Parameter to Project - This node will add a parameter to shared parameter file and then add it to the project. , Apply View Template - This node will allow you to apply a view template to a set of views., Cell Style Settings - This node will generate a Cell Style Settings that can be used to override cell properties. , Change Family Type - Changes family type of a family by passing in an Element and type id of the type we want to change it to. , Clear List - This node will remove all Null and Empty Lists from any list. , Color Settings - This node creates color settings for the Analysis Visualization Framework. , Colored Surface Display Style - This node will generate a Colored Surface Display Style from inputs of points, values, and instance surface for analysis to be aplied to. Also, use color and legend settings (part of archi-lab package) to create style colors and visibility., Colored Surface Settings - This node creates settings for the colored surface display style of the Analysis Visualization Framework., Combine by Pattern - Combines two list based on a input pattern of true and false., Create Annotation Tag - This node will create an annotation tag at a given location, of given type and in a supplied view. If only single view is supplied then all tags will be created in that view. , Create Placeholder Sheet - This node will create placeholder sheets from a sheet number/name. , Current Document - Retrieves Current Document, Curve.Level - This node will return a level that a given curve is located on. , Delete Elements - This node will delete elements from Revit project., Delete Linked Model Keynote Tags - Deletes all Keynote Tags that are tagging elements in the linked model. if element in the linked model has a keynote assigned thus a keynote tag reads a proper value it will not be deleted. , Delete Unnamed Reference Planes - Does just what the name says. , Dispatch - Works exactly like the Dispatch component in Grasshopper. Input a list and a matching pattern of True/False to split list into two lists one containing all True arguments while other all False arguments. , Door Set Handing - Determines door set handing (whether its a left or right handed door). Input takes doors, and output will split them into two lists (right and left)., Duplicate Item Indices - Searches an input list for duplicate entries and lists their index numbers. Couple with Get From List to delete duplicates from a list., Element Ids - This node will query an element id that can be used with Revit nodes. Dynamo Element Id node returns integer value. , Elements Fom Linked File in Room - This node will check what elements from a linked model are inside of any of the rooms in the current model. , Elements in Room - This node will check if any of the elements are inside any of the supplied rooms. , Elements on Sheet - This node will return elements on sheet., Export Image by View - This node will export a list of Views and save them as images (JPG, BMP etc)., Fill Pattern - Get Fill Pattern by Name, Filled Region Area - This node will query an area from the filled region, Filled Region Boundary Curves - This node will get the boundary curves for a filled region., FloorPlan.ByRoom - This node takes input of a Room and creates a Floor Plan View with Crop Box set around that room. , Get All Detail Groups - This node will retrieve all instances of Detail Groups in the model., Get All Dimension Styles - This node will query all of the available dimension styles (this includes linear as well as arc, circle etc). , Get All Elements From Linked Model - This node is based on code posted by Julien Benoit. Big thanks to Julien for sharing his work. This node will retrieve all elements of a given category from a given linked model. , Get All Keynote Tags - Selects all Keynote Tags instances in the model. , Get All Line Styles - This node will return all available line styles., Get All Revisions - This node will return all Revisions currently defined in the mode., Get All Viewport Types - This node will retrieve all Viewport Types currently in the model. , Get All Views - This node will query all views in the model and return them based on category, Get Built In Parameter - This node will take an input of a built in parameter name and element to return that parameters value. , Get Design Options - Queries all of the design options currently in the project., Get Documents - Queries all linked Revit files and retrieves their Name, LinkInstance and Document properties., Get Elements by Category/Level - This node will filter for all elements of a given category on a given level., Get Filled Regions - This node will query up all Filled Regions in the project as well as those in the active view only. , Get Host Element - This node will retrieve a host element from hosted element. Ex. feed in door, get wall., Get Level by Name - This node will retrieve a Revit Level Element by its name. , Get Line Style by Name - This node will return a line style object by its name. Line styles can be either Drafting or Model Line Property. , Get Rooms by Level - Filters Rooms by level., Get Sheet Viewports - This node will query a sheet for viewports (views) that are placed on it., Get Tagged Element Id - Retrives an Element Id from input of element tags. For example if wall tags are inputted it will return tagged wall Ids., Get Text Note Type by Name - This node will select a text note type by name. , Get Type Parameter - This node will retrieve a type parameter by its name., Get Unplaced Groups - This node will retrieve all unplaced groups in the model., Get Views from View Set - This node will take a name of a view set and return views/sheet elements contained in it. , Get Worksets - Retrieves user worksets from specified document, GH Point to DY Point - Converts CSV Grasshopper export of points into a Dynamo point list. , Group Curves - This node will take any input of flat list of curves and group them into sublists containing \"joinable\" curves that is continous curves. They might form closed curves or open curves. Use PolyCurve.ByJoinedCurves to convert output groups of curves into single PolyCurves, Id to Element - Selects elements in a model from id input (ElementId, string, integer or GUID), Isolate in View - This node will take input of elements and a view to isolate selected elements in a view., Key Schedule - This node will take a key schedule, data and a list of parameters and populate it with infomation from data parameter. Visit www.archi-lab.net for more information on how to prep this node for take off. , Legend Settings - This node sets all settings for the Legend display with Analysis Visualization Framework of Revit. , Level.LevelAbove - This node takes an input of level and returns level above it. , Local Printers Names - This node will query all locally installed printers and return their names., Marker Settings - This node will generate AnalysisDisplayMarkerAndTextSettings to be used with a Marker Analysis Display Style. Inputs are: Marker Shape(Circle, Triangle, Rectangle), Marker Size, Show Text (Boolean), Rounding, TextDisplayMethod (Show All, Show None, Show Predefined). , Marker&Text Display Style - This node will take an input of Points and a matching input of values to create Analysis Display Style in Revit. Use Legend, Marker and Color Settings nodes to fully customize your display style. , Mass Addition - This node will attempt to sum all elements contained within it. , New Section Box View By Elements - This node will create new section box around specified elements and apply it to a new 3D View with a specified name. Section box will be offset from the elements by a supplied offset values. , Override Fill Pattern in View - Overrides fill pattern of any element in an active view to specified fill pattern and color, Parameter Group - This node will return all available Parameter Groups, Phase Demolished - This node will query a Phase Demolished setting of an element and return phase id. If id is -1 that means that element was not demolished. , PolyCurve by Profile Family Type - It takes an input of a profile family type and extract curves from it converting them to polycurves and curve segments for use in Dynamo (sweeps)., Print PDF - This node will allow you to initiate a printing routine in revit from a set of views/sheets, printer name, print settings and print range. , Remap UV Domain - This node takes an input of a reference face and a list of UVs that get remapped into that face's UV Domain. The output is a list of UV Coordinates in that surface's domain. , Remove Revision from Sheet - This node will remove specified Revisions from a sheet., Rename Files - This node will use an \"identifier\" to pick out files from a supplied directory to rename files to a new name supplied. Please make sure to match list lengths of identifier and new name inputs., Revision Properties - This node will return some most common Revision properties like Description or Issue Date., Revisions on Sheet - This node will return all Revisions specified in \"Revisions on Sheet\" selection of the sheet., Rotate Family - This node will rotate a family in Revit around a given axis by supplied angle (in radians). Please remember that every time you run your definition it will rotate family by given angle every time. , Schedule Appearance - This node allows you to control the appearance of the schedule. For now it supports only title, header and body text type. , Schedule Formatting - This node will allow you to control schedule formatiing options like column width, whether a column is hidden, column heading etc. , Schedule Sorting Grouping - This node will allow you to specify sorting/grouping parameters in schedule as well parameters like sorting order, whether its a footer or header. Visit archi-lab.net for more information. , Schedule Title Appearance - This node will override the appearance of the title. , Schedules on Sheets - Queries all schedules and produces two lists: one with all schedules that are placed on sheets and one with schedules that are not placed on sheets., Select Model Lines by Style - This node will select all model lines in the revit project by a line style name. , Set BuiltIn Parameter - This node will take an input of a built in parameter name and set that parameter to given value for given elements. , Set Type Parameter - This node will set a type parameter for an element., Slice String - Slices X number of leading or trailing characters from string (boolean true will slice from left while boolean set to false from right), String From List - This node will take an input of a list or nested list and then join each element in a list with a given seperator while adding a suffix., String.Contains - This node takes a list of strings and checks if any string contains a matching string from filter input. , StructuralFraming.BeamByCurve - This node will take an input of curves and attempt to make a structural framing member by type and level. , Tag Host Element - This node will retrieve an element that is hosting a given tag. , Tag Text - This node will retireve a text content of a tag. , Transform Origin - This node will query an element for its Transform (Coordinate System) and then return its Origin point. , Viewport Properties - This node will return certain properties from a Viewport input. , Workset.ByName - This node will create a new workset by name.",
            "engine_metadata": "",
            "engine_version": "0.9.1.2912",
            "created": "2015-11-10T16:41:16.486Z",
            "full_dependency_versions": [ "2015.11.10" ],
            "full_dependency_ids": [
              {
                "_id": "53e99ce50e5572016a00018a",
                "name": "archi-lab.net"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2015.11.10"
          },
          {
            "_id": "56428018662bf0e90800031d",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/f8b4c6bb-d52c-4d06-9a6f-9c5ccece6a27gregPkg802.zip",
            "contents": "Add Revisions to Sheet - This node will add specified revisions to a sheet. , Add Shared Parameter to Project - This node will add a parameter to shared parameter file and then add it to the project. , Apply View Template - This node will allow you to apply a view template to a set of views., Cell Style Settings - This node will generate a Cell Style Settings that can be used to override cell properties. , Change Family Type - Changes family type of a family by passing in an Element and type id of the type we want to change it to. , Clear List - This node will remove all Null and Empty Lists from any list. , Color Settings - This node creates color settings for the Analysis Visualization Framework. , Colored Surface Display Style - This node will generate a Colored Surface Display Style from inputs of points, values, and instance surface for analysis to be aplied to. Also, use color and legend settings (part of archi-lab package) to create style colors and visibility., Colored Surface Settings - This node creates settings for the colored surface display style of the Analysis Visualization Framework., Combine by Pattern - Combines two list based on a input pattern of true and false., Create Annotation Tag - This node will create an annotation tag at a given location, of given type and in a supplied view. If only single view is supplied then all tags will be created in that view. , Create Placeholder Sheet - This node will create placeholder sheets from a sheet number/name. , Current Document - Retrieves Current Document, Curve.Level - This node will return a level that a given curve is located on. , Delete Elements - This node will delete elements from Revit project., Delete Linked Model Keynote Tags - Deletes all Keynote Tags that are tagging elements in the linked model. if element in the linked model has a keynote assigned thus a keynote tag reads a proper value it will not be deleted. , Delete Unnamed Reference Planes - Does just what the name says. , Dispatch - Works exactly like the Dispatch component in Grasshopper. Input a list and a matching pattern of True/False to split list into two lists one containing all True arguments while other all False arguments. , Door Set Handing - Determines door set handing (whether its a left or right handed door). Input takes doors, and output will split them into two lists (right and left)., Duplicate Item Indices - Searches an input list for duplicate entries and lists their index numbers. Couple with Get From List to delete duplicates from a list., Element Ids - This node will query an element id that can be used with Revit nodes. Dynamo Element Id node returns integer value. , Elements Fom Linked File in Room - This node will check what elements from a linked model are inside of any of the rooms in the current model. , Elements in Room - This node will check if any of the elements are inside any of the supplied rooms. , Elements on Sheet - This node will return elements on sheet., Export Image by View - This node will export a list of Views and save them as images (JPG, BMP etc)., Fill Pattern - Get Fill Pattern by Name, Filled Region Area - This node will query an area from the filled region, Filled Region Boundary Curves - This node will get the boundary curves for a filled region., FloorPlan.ByRoom - This node takes input of a Room and creates a Floor Plan View with Crop Box set around that room. , Get All Detail Groups - This node will retrieve all instances of Detail Groups in the model., Get All Dimension Styles - This node will query all of the available dimension styles (this includes linear as well as arc, circle etc). , Get All Elements From Linked Model - This node is based on code posted by Julien Benoit. Big thanks to Julien for sharing his work. This node will retrieve all elements of a given category from a given linked model. , Get All Keynote Tags - Selects all Keynote Tags instances in the model. , Get All Line Styles - This node will return all available line styles., Get All Revisions - This node will return all Revisions currently defined in the mode., Get All Viewport Types - This node will retrieve all Viewport Types currently in the model. , Get All Views - This node will query all views in the model and return them based on category, Get Built In Parameter - This node will take an input of a built in parameter name and element to return that parameters value. , Get Design Options - Queries all of the design options currently in the project., Get Documents - Queries all linked Revit files and retrieves their Name, LinkInstance and Document properties., Get Elements by Category/Level - This node will filter for all elements of a given category on a given level., Get Filled Regions - This node will query up all Filled Regions in the project as well as those in the active view only. , Get Host Element - This node will retrieve a host element from hosted element. Ex. feed in door, get wall., Get Level by Name - This node will retrieve a Revit Level Element by its name. , Get Line Style by Name - This node will return a line style object by its name. Line styles can be either Drafting or Model Line Property. , Get Rooms by Level - Filters Rooms by level., Get Sheet Viewports - This node will query a sheet for viewports (views) that are placed on it., Get Tagged Element Id - Retrives an Element Id from input of element tags. For example if wall tags are inputted it will return tagged wall Ids., Get Text Note Type by Name - This node will select a text note type by name. , Get Type Parameter - This node will retrieve a type parameter by its name., Get Unplaced Groups - This node will retrieve all unplaced groups in the model., Get Views from View Set - This node will take a name of a view set and return views/sheet elements contained in it. , Get Worksets - Retrieves user worksets from specified document, GH Point to DY Point - Converts CSV Grasshopper export of points into a Dynamo point list. , Group Curves - This node will take any input of flat list of curves and group them into sublists containing \"joinable\" curves that is continous curves. They might form closed curves or open curves. Use PolyCurve.ByJoinedCurves to convert output groups of curves into single PolyCurves, Id to Element - Selects elements in a model from id input (ElementId, string, integer or GUID), Isolate in View - This node will take input of elements and a view to isolate selected elements in a view., Key Schedule - This node will take a key schedule, data and a list of parameters and populate it with infomation from data parameter. Visit www.archi-lab.net for more information on how to prep this node for take off. , Legend Settings - This node sets all settings for the Legend display with Analysis Visualization Framework of Revit. , Level.LevelAbove - This node takes an input of level and returns level above it. , Local Printers Names - This node will query all locally installed printers and return their names., Marker Settings - This node will generate AnalysisDisplayMarkerAndTextSettings to be used with a Marker Analysis Display Style. Inputs are: Marker Shape(Circle, Triangle, Rectangle), Marker Size, Show Text (Boolean), Rounding, TextDisplayMethod (Show All, Show None, Show Predefined). , Marker&Text Display Style - This node will take an input of Points and a matching input of values to create Analysis Display Style in Revit. Use Legend, Marker and Color Settings nodes to fully customize your display style. , Mass Addition - This node will attempt to sum all elements contained within it. , New Section Box View By Elements - This node will create new section box around specified elements and apply it to a new 3D View with a specified name. Section box will be offset from the elements by a supplied offset values. , Override Fill Pattern in View - Overrides fill pattern of any element in an active view to specified fill pattern and color, Parameter Group - This node will return all available Parameter Groups, Phase Demolished - This node will query a Phase Demolished setting of an element and return phase id. If id is -1 that means that element was not demolished. , PolyCurve by Profile Family Type - It takes an input of a profile family type and extract curves from it converting them to polycurves and curve segments for use in Dynamo (sweeps)., Print PDF - This node will allow you to initiate a printing routine in revit from a set of views/sheets, printer name, print settings and print range. , Remap UV Domain - This node takes an input of a reference face and a list of UVs that get remapped into that face's UV Domain. The output is a list of UV Coordinates in that surface's domain. , Remove Revision from Sheet - This node will remove specified Revisions from a sheet., Rename Files - This node will use an \"identifier\" to pick out files from a supplied directory to rename files to a new name supplied. Please make sure to match list lengths of identifier and new name inputs., Revision Properties - This node will return some most common Revision properties like Description or Issue Date., Revisions on Sheet - This node will return all Revisions specified in \"Revisions on Sheet\" selection of the sheet., Rotate Family - This node will rotate a family in Revit around a given axis by supplied angle (in radians). Please remember that every time you run your definition it will rotate family by given angle every time. , Schedule Appearance - This node allows you to control the appearance of the schedule. For now it supports only title, header and body text type. , Schedule Formatting - This node will allow you to control schedule formatiing options like column width, whether a column is hidden, column heading etc. , Schedule Sorting Grouping - This node will allow you to specify sorting/grouping parameters in schedule as well parameters like sorting order, whether its a footer or header. Visit archi-lab.net for more information. , Schedule Title Appearance - This node will override the appearance of the title. , Schedules on Sheets - Queries all schedules and produces two lists: one with all schedules that are placed on sheets and one with schedules that are not placed on sheets., Select Model Lines by Style - This node will select all model lines in the revit project by a line style name. , Set BuiltIn Parameter - This node will take an input of a built in parameter name and set that parameter to given value for given elements. , Set Type Parameter - This node will set a type parameter for an element., Slice String - Slices X number of leading or trailing characters from string (boolean true will slice from left while boolean set to false from right), String From List - This node will take an input of a list or nested list and then join each element in a list with a given seperator while adding a suffix., String.Contains - This node takes a list of strings and checks if any string contains a matching string from filter input. , StructuralFraming.BeamByCurve - This node will take an input of curves and attempt to make a structural framing member by type and level. , Tag Host Element - This node will retrieve an element that is hosting a given tag. , Tag Text - This node will retireve a text content of a tag. , Transform Origin - This node will query an element for its Transform (Coordinate System) and then return its Origin point. , Viewport Properties - This node will return certain properties from a Viewport input. , Workset.ByName - This node will create a new workset by name.",
            "engine_metadata": "",
            "engine_version": "0.9.1.2912",
            "created": "2015-11-10T23:39:04.875Z",
            "full_dependency_versions": [ "2015.11.11" ],
            "full_dependency_ids": [
              {
                "_id": "53e99ce50e5572016a00018a",
                "name": "archi-lab.net"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2015.11.11"
          },
          {
            "_id": "564398f5662bf0e908000321",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/c36d228c-889f-4b28-aa94-de7709705b2cgregPkg975.zip",
            "contents": "Add Revisions to Sheet - This node will add specified revisions to a sheet. , Add Shared Parameter to Project - This node will add a parameter to shared parameter file and then add it to the project. , Apply View Template - This node will allow you to apply a view template to a set of views., Cell Style Settings - This node will generate a Cell Style Settings that can be used to override cell properties. , Change Family Type - Changes family type of a family by passing in an Element and type id of the type we want to change it to. , Clear List - This node will remove all Null and Empty Lists from any list. , Color Settings - This node creates color settings for the Analysis Visualization Framework. , Colored Surface Display Style - This node will generate a Colored Surface Display Style from inputs of points, values, and instance surface for analysis to be aplied to. Also, use color and legend settings (part of archi-lab package) to create style colors and visibility., Colored Surface Settings - This node creates settings for the colored surface display style of the Analysis Visualization Framework., Combine by Pattern - Combines two list based on a input pattern of true and false., Create Annotation Tag - This node will create an annotation tag at a given location, of given type and in a supplied view. If only single view is supplied then all tags will be created in that view. , Create Placeholder Sheet - This node will create placeholder sheets from a sheet number/name. , Current Document - Retrieves Current Document, Curve.Level - This node will return a level that a given curve is located on. , Delete Elements - This node will delete elements from Revit project., Delete Linked Model Keynote Tags - Deletes all Keynote Tags that are tagging elements in the linked model. if element in the linked model has a keynote assigned thus a keynote tag reads a proper value it will not be deleted. , Delete Unnamed Reference Planes - Does just what the name says. , Dispatch - Works exactly like the Dispatch component in Grasshopper. Input a list and a matching pattern of True/False to split list into two lists one containing all True arguments while other all False arguments. , Door Set Handing - Determines door set handing (whether its a left or right handed door). Input takes doors, and output will split them into two lists (right and left)., Duplicate Item Indices - Searches an input list for duplicate entries and lists their index numbers. Couple with Get From List to delete duplicates from a list., Element Ids - This node will query an element id that can be used with Revit nodes. Dynamo Element Id node returns integer value. , Elements Fom Linked File in Room - This node will check what elements from a linked model are inside of any of the rooms in the current model. , Elements in Room - This node will check if any of the elements are inside any of the supplied rooms. , Elements on Sheet - This node will return elements on sheet., Export Image by View - This node will export a list of Views and save them as images (JPG, BMP etc)., Fill Pattern - Get Fill Pattern by Name, Filled Region Area - This node will query an area from the filled region, Filled Region Boundary Curves - This node will get the boundary curves for a filled region., FloorPlan.ByRoom - This node takes input of a Room and creates a Floor Plan View with Crop Box set around that room. , Get All Detail Groups - This node will retrieve all instances of Detail Groups in the model., Get All Dimension Styles - This node will query all of the available dimension styles (this includes linear as well as arc, circle etc). , Get All Elements From Linked Model - This node is based on code posted by Julien Benoit. Big thanks to Julien for sharing his work. This node will retrieve all elements of a given category from a given linked model. , Get All Keynote Tags - Selects all Keynote Tags instances in the model. , Get All Line Styles - This node will return all available line styles., Get All Revisions - This node will return all Revisions currently defined in the mode., Get All Viewport Types - This node will retrieve all Viewport Types currently in the model. , Get All Views - This node will query all views in the model and return them based on category, Get Built In Parameter - This node will take an input of a built in parameter name and element to return that parameters value. , Get Design Options - Queries all of the design options currently in the project., Get Documents - Queries all linked Revit files and retrieves their Name, LinkInstance and Document properties., Get Elements by Category/Level - This node will filter for all elements of a given category on a given level., Get Filled Regions - This node will query up all Filled Regions in the project as well as those in the active view only. , Get Host Element - This node will retrieve a host element from hosted element. Ex. feed in door, get wall., Get Level by Name - This node will retrieve a Revit Level Element by its name. , Get Line Style by Name - This node will return a line style object by its name. Line styles can be either Drafting or Model Line Property. , Get Rooms by Level - Filters Rooms by level., Get Sheet Viewports - This node will query a sheet for viewports (views) that are placed on it., Get Tagged Element Id - Retrives an Element Id from input of element tags. For example if wall tags are inputted it will return tagged wall Ids., Get Text Note Type by Name - This node will select a text note type by name. , Get Type Parameter - This node will retrieve a type parameter by its name., Get Unplaced Groups - This node will retrieve all unplaced groups in the model., Get Views from View Set - This node will take a name of a view set and return views/sheet elements contained in it. , Get Worksets - Retrieves user worksets from specified document, GH Point to DY Point - Converts CSV Grasshopper export of points into a Dynamo point list. , Group Curves - This node will take any input of flat list of curves and group them into sublists containing \"joinable\" curves that is continous curves. They might form closed curves or open curves. Use PolyCurve.ByJoinedCurves to convert output groups of curves into single PolyCurves, Id to Element - Selects elements in a model from id input (ElementId, string, integer or GUID), Isolate in View - This node will take input of elements and a view to isolate selected elements in a view., Key Schedule - This node will take a key schedule, data and a list of parameters and populate it with infomation from data parameter. Visit www.archi-lab.net for more information on how to prep this node for take off. , Legend Settings - This node sets all settings for the Legend display with Analysis Visualization Framework of Revit. , Level.LevelAbove - This node takes an input of level and returns level above it. , Local Printers Names - This node will query all locally installed printers and return their names., Marker Settings - This node will generate AnalysisDisplayMarkerAndTextSettings to be used with a Marker Analysis Display Style. Inputs are: Marker Shape(Circle, Triangle, Rectangle), Marker Size, Show Text (Boolean), Rounding, TextDisplayMethod (Show All, Show None, Show Predefined). , Marker&Text Display Style - This node will take an input of Points and a matching input of values to create Analysis Display Style in Revit. Use Legend, Marker and Color Settings nodes to fully customize your display style. , Mass Addition - This node will attempt to sum all elements contained within it. , New Section Box View By Elements - This node will create new section box around specified elements and apply it to a new 3D View with a specified name. Section box will be offset from the elements by a supplied offset values. , Override Fill Pattern in View - Overrides fill pattern of any element in an active view to specified fill pattern and color, Parameter Group - This node will return all available Parameter Groups, Phase Demolished - This node will query a Phase Demolished setting of an element and return phase id. If id is -1 that means that element was not demolished. , PolyCurve by Profile Family Type - It takes an input of a profile family type and extract curves from it converting them to polycurves and curve segments for use in Dynamo (sweeps)., Print PDF - This node will allow you to initiate a printing routine in revit from a set of views/sheets, printer name, print settings and print range. , Remap UV Domain - This node takes an input of a reference face and a list of UVs that get remapped into that face's UV Domain. The output is a list of UV Coordinates in that surface's domain. , Remove Revision from Sheet - This node will remove specified Revisions from a sheet., Rename Files - This node will use an \"identifier\" to pick out files from a supplied directory to rename files to a new name supplied. Please make sure to match list lengths of identifier and new name inputs., Revision Properties - This node will return some most common Revision properties like Description or Issue Date., Revisions on Sheet - This node will return all Revisions specified in \"Revisions on Sheet\" selection of the sheet., Rotate Family - This node will rotate a family in Revit around a given axis by supplied angle (in radians). Please remember that every time you run your definition it will rotate family by given angle every time. , Schedule Appearance - This node allows you to control the appearance of the schedule. For now it supports only title, header and body text type. , Schedule Formatting - This node will allow you to control schedule formatiing options like column width, whether a column is hidden, column heading etc. , Schedule Sorting Grouping - This node will allow you to specify sorting/grouping parameters in schedule as well parameters like sorting order, whether its a footer or header. Visit archi-lab.net for more information. , Schedule Title Appearance - This node will override the appearance of the title. , Schedules on Sheets - Queries all schedules and produces two lists: one with all schedules that are placed on sheets and one with schedules that are not placed on sheets., Select Model Lines by Style - This node will select all model lines in the revit project by a line style name. , Set BuiltIn Parameter - This node will take an input of a built in parameter name and set that parameter to given value for given elements. , Set Type Parameter - This node will set a type parameter for an element., Slice String - Slices X number of leading or trailing characters from string (boolean true will slice from left while boolean set to false from right), String From List - This node will take an input of a list or nested list and then join each element in a list with a given seperator while adding a suffix., String.Contains - This node takes a list of strings and checks if any string contains a matching string from filter input. , StructuralFraming.BeamByCurve - This node will take an input of curves and attempt to make a structural framing member by type and level. , Tag Host Element - This node will retrieve an element that is hosting a given tag. , Tag Text - This node will retireve a text content of a tag. , Transform Origin - This node will query an element for its Transform (Coordinate System) and then return its Origin point. , Viewport Properties - This node will return certain properties from a Viewport input. , Workset.ByName - This node will create a new workset by name., Element.IsOfType - This nodes yields true or false, checking if input elements are of given Element Type., Room.AtPoint - This node will attempt to retrieve a room at a given point in model. , Room.Boundaries - This node returns all Room bounding curves and elements that generated them (walls, separation lines etc)., RoomBoundaries.CleanNulls - This node will take a set of room boundary curves and elements and remove nulls from element list while joining curves to mainatain matching list structure. , Wall.ExteriorDirection - This node returns exterior direction of the wall as a vector.",
            "engine_metadata": "",
            "engine_version": "0.9.1.2912",
            "created": "2015-11-11T19:37:25.866Z",
            "full_dependency_versions": [ "2015.11.12" ],
            "full_dependency_ids": [
              {
                "_id": "53e99ce50e5572016a00018a",
                "name": "archi-lab.net"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2015.11.12"
          },
          {
            "_id": "5669ecc55c568ad00c000016",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/5a3b165d-1390-4b9c-886d-ef7f7f904d4fgregPkg731.zip",
            "contents": "Add Revisions to Sheet - This node will add specified revisions to a sheet. , Add Shared Parameter to Project - This node will add a parameter to shared parameter file and then add it to the project. , Apply View Template - This node will allow you to apply a view template to a set of views., Cell Style Settings - This node will generate a Cell Style Settings that can be used to override cell properties. , Change Family Type - Changes family type of a family by passing in an Element and type id of the type we want to change it to. , Clear List - This node will remove all Null and Empty Lists from any list. , Color Settings - This node creates color settings for the Analysis Visualization Framework. , Colored Surface Display Style - This node will generate a Colored Surface Display Style from inputs of points, values, and instance surface for analysis to be aplied to. Also, use color and legend settings (part of archi-lab package) to create style colors and visibility., Colored Surface Settings - This node creates settings for the colored surface display style of the Analysis Visualization Framework., Combine by Pattern - Combines two list based on a input pattern of true and false., Create Annotation Tag - This node will create an annotation tag at a given location, of given type and in a supplied view. If only single view is supplied then all tags will be created in that view. , Create Placeholder Sheet - This node will create placeholder sheets from a sheet number/name. , Current Document - Retrieves Current Document, Curve.Level - This node will return a level that a given curve is located on. , Delete Elements - This node will delete elements from Revit project., Delete Linked Model Keynote Tags - Deletes all Keynote Tags that are tagging elements in the linked model. if element in the linked model has a keynote assigned thus a keynote tag reads a proper value it will not be deleted. , Delete Unnamed Reference Planes - Does just what the name says. , Dispatch - Works exactly like the Dispatch component in Grasshopper. Input a list and a matching pattern of True/False to split list into two lists one containing all True arguments while other all False arguments. , Door Set Handing - Determines door set handing (whether its a left or right handed door). Input takes doors, and output will split them into two lists (right and left)., Duplicate Item Indices - Searches an input list for duplicate entries and lists their index numbers. Couple with Get From List to delete duplicates from a list., Element Ids - This node will query an element id that can be used with Revit nodes. Dynamo Element Id node returns integer value. , Element.IsOfType - This nodes yields true or false, checking if input elements are of given Element Type., Elements Fom Linked File in Room - This node will check what elements from a linked model are inside of any of the rooms in the current model. , Elements in Room - This node will check if any of the elements are inside any of the supplied rooms. , Elements on Sheet - This node will return elements on sheet., Export Image by View - This node will export a list of Views and save them as images (JPG, BMP etc)., Fill Pattern - Get Fill Pattern by Name, Filled Region Area - This node will query an area from the filled region, Filled Region Boundary Curves - This node will get the boundary curves for a filled region., FloorPlan.ByRoom - This node takes input of a Room and creates a Floor Plan View with Crop Box set around that room. , Get All Detail Groups - This node will retrieve all instances of Detail Groups in the model., Get All Dimension Styles - This node will query all of the available dimension styles (this includes linear as well as arc, circle etc). , Get All Elements From Linked Model - This node is based on code posted by Julien Benoit. Big thanks to Julien for sharing his work. This node will retrieve all elements of a given category from a given linked model. , Get All Keynote Tags - Selects all Keynote Tags instances in the model. , Get All Line Styles - This node will return all available line styles., Get All Revisions - This node will return all Revisions currently defined in the mode., Get All Viewport Types - This node will retrieve all Viewport Types currently in the model. , Get All Views - This node will query all views in the model and return them based on category, Get Built In Parameter - This node will take an input of a built in parameter name and element to return that parameters value. , Get Design Options - Queries all of the design options currently in the project., Get Documents - Queries all linked Revit files and retrieves their Name, LinkInstance and Document properties., Get Elements by Category/Level - This node will filter for all elements of a given category on a given level., Get Filled Regions - This node will query up all Filled Regions in the project as well as those in the active view only. , Get Host Element - This node will retrieve a host element from hosted element. Ex. feed in door, get wall., Get Level by Name - This node will retrieve a Revit Level Element by its name. , Get Line Style by Name - This node will return a line style object by its name. Line styles can be either Drafting or Model Line Property. , Get Rooms by Level - Filters Rooms by level., Get Sheet Viewports - This node will query a sheet for viewports (views) that are placed on it., Get Tagged Element Id - Retrives an Element Id from input of element tags. For example if wall tags are inputted it will return tagged wall Ids., Get Text Note Type by Name - This node will select a text note type by name. , Get Type Parameter - This node will retrieve a type parameter by its name., Get Unplaced Groups - This node will retrieve all unplaced groups in the model., Get Views from View Set - This node will take a name of a view set and return views/sheet elements contained in it. , Get Worksets - Retrieves user worksets from specified document, GH Point to DY Point - Converts CSV Grasshopper export of points into a Dynamo point list. , Group Curves - This node will take any input of flat list of curves and group them into sublists containing \"joinable\" curves that is continous curves. They might form closed curves or open curves. Use PolyCurve.ByJoinedCurves to convert output groups of curves into single PolyCurves, Id to Element - Selects elements in a model from id input (ElementId, string, integer or GUID), Isolate in View - This node will take input of elements and a view to isolate selected elements in a view., Key Schedule - This node will take a key schedule, data and a list of parameters and populate it with infomation from data parameter. Visit www.archi-lab.net for more information on how to prep this node for take off. , Legend Settings - This node sets all settings for the Legend display with Analysis Visualization Framework of Revit. , Level.LevelAbove - This node takes an input of level and returns level above it. , Local Printers Names - This node will query all locally installed printers and return their names., Marker Settings - This node will generate AnalysisDisplayMarkerAndTextSettings to be used with a Marker Analysis Display Style. Inputs are: Marker Shape(Circle, Triangle, Rectangle), Marker Size, Show Text (Boolean), Rounding, TextDisplayMethod (Show All, Show None, Show Predefined). , Marker&Text Display Style - This node will take an input of Points and a matching input of values to create Analysis Display Style in Revit. Use Legend, Marker and Color Settings nodes to fully customize your display style. , Mass Addition - This node will attempt to sum all elements contained within it. , New Section Box View By Elements - This node will create new section box around specified elements and apply it to a new 3D View with a specified name. Section box will be offset from the elements by a supplied offset values. , Override Fill Pattern in View - Overrides fill pattern of any element in an active view to specified fill pattern and color, Parameter Group - This node will return all available Parameter Groups, Phase Demolished - This node will query a Phase Demolished setting of an element and return phase id. If id is -1 that means that element was not demolished. , PolyCurve by Profile Family Type - It takes an input of a profile family type and extract curves from it converting them to polycurves and curve segments for use in Dynamo (sweeps)., Print PDF - This node will allow you to initiate a printing routine in revit from a set of views/sheets, printer name, print settings and print range. , Remap UV Domain - This node takes an input of a reference face and a list of UVs that get remapped into that face's UV Domain. The output is a list of UV Coordinates in that surface's domain. , Remove Revision from Sheet - This node will remove specified Revisions from a sheet., Rename Files - This node will use an \"identifier\" to pick out files from a supplied directory to rename files to a new name supplied. Please make sure to match list lengths of identifier and new name inputs., Revision Properties - This node will return some most common Revision properties like Description or Issue Date., Revisions on Sheet - This node will return all Revisions specified in \"Revisions on Sheet\" selection of the sheet., Room.AtPoint - This node will attempt to retrieve a room at a given point in model. , Room.Boundaries - This node returns all Room bounding curves and elements that generated them (walls, separation lines etc)., RoomBoundaries.CleanNulls - This node will take a set of room boundary curves and elements and remove nulls from element list while joining curves to mainatain matching list structure. , Rotate Family - This node will rotate a family in Revit around a given axis by supplied angle (in radians). Please remember that every time you run your definition it will rotate family by given angle every time. , Schedule Appearance - This node allows you to control the appearance of the schedule. For now it supports only title, header and body text type. , Schedule Formatting - This node will allow you to control schedule formatiing options like column width, whether a column is hidden, column heading etc. , Schedule Sorting Grouping - This node will allow you to specify sorting/grouping parameters in schedule as well parameters like sorting order, whether its a footer or header. Visit archi-lab.net for more information. , Schedule Title Appearance - This node will override the appearance of the title. , Schedules on Sheets - Queries all schedules and produces two lists: one with all schedules that are placed on sheets and one with schedules that are not placed on sheets., Select Model Lines by Style - This node will select all model lines in the revit project by a line style name. , Set BuiltIn Parameter - This node will take an input of a built in parameter name and set that parameter to given value for given elements. , Set Type Parameter - This node will set a type parameter for an element., Slice String - Slices X number of leading or trailing characters from string (boolean true will slice from left while boolean set to false from right), String From List - This node will take an input of a list or nested list and then join each element in a list with a given seperator while adding a suffix., String.Contains - This node takes a list of strings and checks if any string contains a matching string from filter input. , StructuralFraming.BeamByCurve - This node will take an input of curves and attempt to make a structural framing member by type and level. , Tag Host Element - This node will retrieve an element that is hosting a given tag. , Tag Text - This node will retireve a text content of a tag. , Transform Origin - This node will query an element for its Transform (Coordinate System) and then return its Origin point. , Viewport Properties - This node will return certain properties from a Viewport input. , Wall.ExteriorDirection - This node returns exterior direction of the wall as a vector., Workset.ByName - This node will create a new workset by name., Elements in Space - This node will take an input of Spaces and Elements and attempt to group all elements by Room that it is located in. For elements that are placed by Line and not a Point, a mid point of line will be used to determine location. , Material.ImportAllFromProject - This node will import (copy) all materials from specified project into current model. By default it will not override existing materials. , Material.MaterialAssetElement - This node retrieves a Material Asset Element from Material. If such is not defined it will return an Invalid Element Id (-1), Material.SetMaterialAssetByAssetId - This node will set the material asset by asset id. Please make sure that the two input lists match in length. , Material.SetMaterialAssetByMaterial - This node will copy a material asset element from source Material to a list of target materials. It esentially makes all materials inherit its Rendering Appearance. Useful for \"clay\" renderings. ",
            "engine_metadata": "",
            "engine_version": "0.9.1.2912",
            "created": "2015-12-10T21:21:09.014Z",
            "full_dependency_versions": [ "2015.12.10" ],
            "full_dependency_ids": [
              {
                "_id": "53e99ce50e5572016a00018a",
                "name": "archi-lab.net"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2015.12.10"
          },
          {
            "_id": "569c4e15c6d90c553d000021",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/0b1f1263-054d-4b77-a06f-c86a3c528c83gregPkg716.zip",
            "contents": "Add Revisions to Sheet - This node will add specified revisions to a sheet. , Add Shared Parameter to Project - This node will add a parameter to shared parameter file and then add it to the project. , Apply View Template - This node will allow you to apply a view template to a set of views., Cell Style Settings - This node will generate a Cell Style Settings that can be used to override cell properties. , Change Family Type - Changes family type of a family by passing in an Element and type id of the type we want to change it to. , Clear List - This node will remove all Null and Empty Lists from any list. , Color Settings - This node creates color settings for the Analysis Visualization Framework. , Colored Surface Display Style - This node will generate a Colored Surface Display Style from inputs of points, values, and instance surface for analysis to be aplied to. Also, use color and legend settings (part of archi-lab package) to create style colors and visibility., Colored Surface Settings - This node creates settings for the colored surface display style of the Analysis Visualization Framework., Combine by Pattern - Combines two list based on a input pattern of true and false., Create Annotation Tag - This node will create an annotation tag at a given location, of given type and in a supplied view. If only single view is supplied then all tags will be created in that view. , Create Placeholder Sheet - This node will create placeholder sheets from a sheet number/name. , Current Document - Retrieves Current Document, Curve.Level - This node will return a level that a given curve is located on. , Delete Elements - This node will delete elements from Revit project., Delete Linked Model Keynote Tags - Deletes all Keynote Tags that are tagging elements in the linked model. if element in the linked model has a keynote assigned thus a keynote tag reads a proper value it will not be deleted. , Delete Unnamed Reference Planes - Does just what the name says. , Dispatch - Works exactly like the Dispatch component in Grasshopper. Input a list and a matching pattern of True/False to split list into two lists one containing all True arguments while other all False arguments. , Door Set Handing - Determines door set handing (whether its a left or right handed door). Input takes doors, and output will split them into two lists (right and left)., Duplicate Item Indices - Searches an input list for duplicate entries and lists their index numbers. Couple with Get From List to delete duplicates from a list., Element Ids - This node will query an element id that can be used with Revit nodes. Dynamo Element Id node returns integer value. , Element.IsOfType - This nodes yields true or false, checking if input elements are of given Element Type., Elements Fom Linked File in Room - This node will check what elements from a linked model are inside of any of the rooms in the current model. , Elements in Room - This node will check if any of the elements are inside any of the supplied rooms. , Elements in Space - This node will take an input of Spaces and Elements and attempt to group all elements by Room that it is located in. For elements that are placed by Line and not a Point, a mid point of line will be used to determine location. , Elements on Sheet - This node will return elements on sheet., Export Image by View - This node will export a list of Views and save them as images (JPG, BMP etc)., Fill Pattern - Get Fill Pattern by Name, Filled Region Area - This node will query an area from the filled region, Filled Region Boundary Curves - This node will get the boundary curves for a filled region., FloorPlan.ByRoom - This node takes input of a Room and creates a Floor Plan View with Crop Box set around that room. , Get All Detail Groups - This node will retrieve all instances of Detail Groups in the model., Get All Dimension Styles - This node will query all of the available dimension styles (this includes linear as well as arc, circle etc). , Get All Elements From Linked Model - This node is based on code posted by Julien Benoit. Big thanks to Julien for sharing his work. This node will retrieve all elements of a given category from a given linked model. , Get All Keynote Tags - Selects all Keynote Tags instances in the model. , Get All Line Styles - This node will return all available line styles., Get All Revisions - This node will return all Revisions currently defined in the mode., Get All Viewport Types - This node will retrieve all Viewport Types currently in the model. , Get All Views - This node will query all views in the model and return them based on category, Get Built In Parameter - This node will take an input of a built in parameter name and element to return that parameters value. , Get Design Options - Queries all of the design options currently in the project., Get Documents - Queries all linked Revit files and retrieves their Name, LinkInstance and Document properties., Get Elements by Category/Level - This node will filter for all elements of a given category on a given level., Get Filled Regions - This node will query up all Filled Regions in the project as well as those in the active view only. , Get Host Element - This node will retrieve a host element from hosted element. Ex. feed in door, get wall., Get Level by Name - This node will retrieve a Revit Level Element by its name. , Get Line Style by Name - This node will return a line style object by its name. Line styles can be either Drafting or Model Line Property. , Get Rooms by Level - Filters Rooms by level., Get Sheet Viewports - This node will query a sheet for viewports (views) that are placed on it., Get Tagged Element Id - Retrives an Element Id from input of element tags. For example if wall tags are inputted it will return tagged wall Ids., Get Text Note Type by Name - This node will select a text note type by name. , Get Type Parameter - This node will retrieve a type parameter by its name., Get Unplaced Groups - This node will retrieve all unplaced groups in the model., Get Views from View Set - This node will take a name of a view set and return views/sheet elements contained in it. , Get Worksets - Retrieves user worksets from specified document, GH Point to DY Point - Converts CSV Grasshopper export of points into a Dynamo point list. , Group Curves - This node will take any input of flat list of curves and group them into sublists containing \"joinable\" curves that is continous curves. They might form closed curves or open curves. Use PolyCurve.ByJoinedCurves to convert output groups of curves into single PolyCurves, Id to Element - Selects elements in a model from id input (ElementId, string, integer or GUID), Isolate in View - This node will take input of elements and a view to isolate selected elements in a view., Key Schedule - This node will take a key schedule, data and a list of parameters and populate it with infomation from data parameter. Visit www.archi-lab.net for more information on how to prep this node for take off. , Legend Settings - This node sets all settings for the Legend display with Analysis Visualization Framework of Revit. , Level.LevelAbove - This node takes an input of level and returns level above it. , Local Printers Names - This node will query all locally installed printers and return their names., Marker Settings - This node will generate AnalysisDisplayMarkerAndTextSettings to be used with a Marker Analysis Display Style. Inputs are: Marker Shape(Circle, Triangle, Rectangle), Marker Size, Show Text (Boolean), Rounding, TextDisplayMethod (Show All, Show None, Show Predefined). , Marker&Text Display Style - This node will take an input of Points and a matching input of values to create Analysis Display Style in Revit. Use Legend, Marker and Color Settings nodes to fully customize your display style. , Mass Addition - This node will attempt to sum all elements contained within it. , Material.ImportAllFromProject - This node will import (copy) all materials from specified project into current model. By default it will not override existing materials. , Material.MaterialAssetElement - This node retrieves a Material Asset Element from Material. If such is not defined it will return an Invalid Element Id (-1), Material.SetMaterialAssetByAssetId - This node will set the material asset by asset id. Please make sure that the two input lists match in length. , Material.SetMaterialAssetByMaterial - This node will copy a material asset element from source Material to a list of target materials. It esentially makes all materials inherit its Rendering Appearance. Useful for \"clay\" renderings. , New Section Box View By Elements - This node will create new section box around specified elements and apply it to a new 3D View with a specified name. Section box will be offset from the elements by a supplied offset values. , Override Fill Pattern in View - Overrides fill pattern of any element in an active view to specified fill pattern and color, Parameter Group - This node will return all available Parameter Groups, Phase Demolished - This node will query a Phase Demolished setting of an element and return phase id. If id is -1 that means that element was not demolished. , PolyCurve by Profile Family Type - It takes an input of a profile family type and extract curves from it converting them to polycurves and curve segments for use in Dynamo (sweeps)., Print PDF - This node will allow you to initiate a printing routine in revit from a set of views/sheets, printer name, print settings and print range. , Remap UV Domain - This node takes an input of a reference face and a list of UVs that get remapped into that face's UV Domain. The output is a list of UV Coordinates in that surface's domain. , Remove Revision from Sheet - This node will remove specified Revisions from a sheet., Rename Files - This node will use an \"identifier\" to pick out files from a supplied directory to rename files to a new name supplied. Please make sure to match list lengths of identifier and new name inputs., Revision Properties - This node will return some most common Revision properties like Description or Issue Date., Revisions on Sheet - This node will return all Revisions specified in \"Revisions on Sheet\" selection of the sheet., Room.AtPoint - This node will attempt to retrieve a room at a given point in model. , Room.Boundaries - This node returns all Room bounding curves and elements that generated them (walls, separation lines etc)., RoomBoundaries.CleanNulls - This node will take a set of room boundary curves and elements and remove nulls from element list while joining curves to mainatain matching list structure. , Rotate Family - This node will rotate a family in Revit around a given axis by supplied angle (in radians). Please remember that every time you run your definition it will rotate family by given angle every time. , Schedule Appearance - This node allows you to control the appearance of the schedule. For now it supports only title, header and body text type. , Schedule Formatting - This node will allow you to control schedule formatiing options like column width, whether a column is hidden, column heading etc. , Schedule Sorting Grouping - This node will allow you to specify sorting/grouping parameters in schedule as well parameters like sorting order, whether its a footer or header. Visit archi-lab.net for more information. , Schedule Title Appearance - This node will override the appearance of the title. , Schedules on Sheets - Queries all schedules and produces two lists: one with all schedules that are placed on sheets and one with schedules that are not placed on sheets., Select Model Lines by Style - This node will select all model lines in the revit project by a line style name. , Set BuiltIn Parameter - This node will take an input of a built in parameter name and set that parameter to given value for given elements. , Set Type Parameter - This node will set a type parameter for an element., Slice String - Slices X number of leading or trailing characters from string (boolean true will slice from left while boolean set to false from right), String From List - This node will take an input of a list or nested list and then join each element in a list with a given seperator while adding a suffix., String.Contains - This node takes a list of strings and checks if any string contains a matching string from filter input. , StructuralFraming.BeamByCurve - This node will take an input of curves and attempt to make a structural framing member by type and level. , Tag Host Element - This node will retrieve an element that is hosting a given tag. , Tag Text - This node will retireve a text content of a tag. , Transform Origin - This node will query an element for its Transform (Coordinate System) and then return its Origin point. , Viewport Properties - This node will return certain properties from a Viewport input. , Wall.ExteriorDirection - This node returns exterior direction of the wall as a vector., Workset.ByName - This node will create a new workset by name., Floor.Area - This node return floor area. , Survey Point - This node will retrieve a Survey Point from a Revit model. ",
            "engine_metadata": "",
            "engine_version": "0.9.1.2912",
            "created": "2016-01-18T02:29:41.462Z",
            "full_dependency_versions": [ "2016.1.16" ],
            "full_dependency_ids": [
              {
                "_id": "53e99ce50e5572016a00018a",
                "name": "archi-lab.net"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2016.1.16"
          },
          {
            "_id": "56a7b2c2c3e9ee4a08000039",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/1967c2ba-876c-444d-9c42-d9fdcd8594dbgregPkg859.zip",
            "contents": "Add Revisions to Sheet - This node will add specified revisions to a sheet. , Add Shared Parameter to Project - This node will add a parameter to shared parameter file and then add it to the project. , Apply View Template - This node will allow you to apply a view template to a set of views., Cell Style Settings - This node will generate a Cell Style Settings that can be used to override cell properties. , Change Family Type - Changes family type of a family by passing in an Element and type id of the type we want to change it to. , Clear List - This node will remove all Null and Empty Lists from any list. , Color Settings - This node creates color settings for the Analysis Visualization Framework. , Colored Surface Display Style - This node will generate a Colored Surface Display Style from inputs of points, values, and instance surface for analysis to be aplied to. Also, use color and legend settings (part of archi-lab package) to create style colors and visibility., Colored Surface Settings - This node creates settings for the colored surface display style of the Analysis Visualization Framework., Combine by Pattern - Combines two list based on a input pattern of true and false., Create Annotation Tag - This node will create an annotation tag at a given location, of given type and in a supplied view. If only single view is supplied then all tags will be created in that view. , Create Placeholder Sheet - This node will create placeholder sheets from a sheet number/name. , Current Document - Retrieves Current Document, Curve.Level - This node will return a level that a given curve is located on. , Delete Elements - This node will delete elements from Revit project., Delete Linked Model Keynote Tags - Deletes all Keynote Tags that are tagging elements in the linked model. if element in the linked model has a keynote assigned thus a keynote tag reads a proper value it will not be deleted. , Delete Unnamed Reference Planes - Does just what the name says. , Dispatch - Works exactly like the Dispatch component in Grasshopper. Input a list and a matching pattern of True/False to split list into two lists one containing all True arguments while other all False arguments. , Door Set Handing - Determines door set handing (whether its a left or right handed door). Input takes doors, and output will split them into two lists (right and left)., Duplicate Item Indices - Searches an input list for duplicate entries and lists their index numbers. Couple with Get From List to delete duplicates from a list., Element Ids - This node will query an element id that can be used with Revit nodes. Dynamo Element Id node returns integer value. , Element.IsOfType - This nodes yields true or false, checking if input elements are of given Element Type., Elements Fom Linked File in Room - This node will check what elements from a linked model are inside of any of the rooms in the current model. , Elements in Room - This node will check if any of the elements are inside any of the supplied rooms. , Elements in Space - This node will take an input of Spaces and Elements and attempt to group all elements by Room that it is located in. For elements that are placed by Line and not a Point, a mid point of line will be used to determine location. , Elements on Sheet - This node will return elements on sheet., Export Image by View - This node will export a list of Views and save them as images (JPG, BMP etc)., Fill Pattern - Get Fill Pattern by Name, Filled Region Area - This node will query an area from the filled region, Filled Region Boundary Curves - This node will get the boundary curves for a filled region., Floor.Area - This node return floor area. , FloorPlan.ByRoom - This node takes input of a Room and creates a Floor Plan View with Crop Box set around that room. , Get All Detail Groups - This node will retrieve all instances of Detail Groups in the model., Get All Dimension Styles - This node will query all of the available dimension styles (this includes linear as well as arc, circle etc). , Get All Elements From Linked Model - This node is based on code posted by Julien Benoit. Big thanks to Julien for sharing his work. This node will retrieve all elements of a given category from a given linked model. , Get All Keynote Tags - Selects all Keynote Tags instances in the model. , Get All Line Styles - This node will return all available line styles., Get All Revisions - This node will return all Revisions currently defined in the mode., Get All Viewport Types - This node will retrieve all Viewport Types currently in the model. , Get All Views - This node will query all views in the model and return them based on category, Get Built In Parameter - This node will take an input of a built in parameter name and element to return that parameters value. , Get Design Options - Queries all of the design options currently in the project., Get Documents - Queries all linked Revit files and retrieves their Name, LinkInstance and Document properties., Get Elements by Category/Level - This node will filter for all elements of a given category on a given level., Get Filled Regions - This node will query up all Filled Regions in the project as well as those in the active view only. , Get Host Element - This node will retrieve a host element from hosted element. Ex. feed in door, get wall., Get Level by Name - This node will retrieve a Revit Level Element by its name. , Get Line Style by Name - This node will return a line style object by its name. Line styles can be either Drafting or Model Line Property. , Get Rooms by Level - Filters Rooms by level., Get Sheet Viewports - This node will query a sheet for viewports (views) that are placed on it., Get Tagged Element Id - Retrives an Element Id from input of element tags. For example if wall tags are inputted it will return tagged wall Ids., Get Text Note Type by Name - This node will select a text note type by name. , Get Type Parameter - This node will retrieve a type parameter by its name., Get Unplaced Groups - This node will retrieve all unplaced groups in the model., Get Views from View Set - This node will take a name of a view set and return views/sheet elements contained in it. , Get Worksets - Retrieves user worksets from specified document, GH Point to DY Point - Converts CSV Grasshopper export of points into a Dynamo point list. , Group Curves - This node will take any input of flat list of curves and group them into sublists containing \"joinable\" curves that is continous curves. They might form closed curves or open curves. Use PolyCurve.ByJoinedCurves to convert output groups of curves into single PolyCurves, Id to Element - Selects elements in a model from id input (ElementId, string, integer or GUID), Isolate in View - This node will take input of elements and a view to isolate selected elements in a view., Key Schedule - This node will take a key schedule, data and a list of parameters and populate it with infomation from data parameter. Visit www.archi-lab.net for more information on how to prep this node for take off. , Legend Settings - This node sets all settings for the Legend display with Analysis Visualization Framework of Revit. , Level.LevelAbove - This node takes an input of level and returns level above it. , Local Printers Names - This node will query all locally installed printers and return their names., Marker Settings - This node will generate AnalysisDisplayMarkerAndTextSettings to be used with a Marker Analysis Display Style. Inputs are: Marker Shape(Circle, Triangle, Rectangle), Marker Size, Show Text (Boolean), Rounding, TextDisplayMethod (Show All, Show None, Show Predefined). , Marker&Text Display Style - This node will take an input of Points and a matching input of values to create Analysis Display Style in Revit. Use Legend, Marker and Color Settings nodes to fully customize your display style. , Mass Addition - This node will attempt to sum all elements contained within it. , Material.ImportAllFromProject - This node will import (copy) all materials from specified project into current model. By default it will not override existing materials. , Material.MaterialAssetElement - This node retrieves a Material Asset Element from Material. If such is not defined it will return an Invalid Element Id (-1), Material.SetMaterialAssetByAssetId - This node will set the material asset by asset id. Please make sure that the two input lists match in length. , Material.SetMaterialAssetByMaterial - This node will copy a material asset element from source Material to a list of target materials. It esentially makes all materials inherit its Rendering Appearance. Useful for \"clay\" renderings. , New Section Box View By Elements - This node will create new section box around specified elements and apply it to a new 3D View with a specified name. Section box will be offset from the elements by a supplied offset values. , Override Fill Pattern in View - Overrides fill pattern of any element in an active view to specified fill pattern and color, Parameter Group - This node will return all available Parameter Groups, Phase Demolished - This node will query a Phase Demolished setting of an element and return phase id. If id is -1 that means that element was not demolished. , PolyCurve by Profile Family Type - It takes an input of a profile family type and extract curves from it converting them to polycurves and curve segments for use in Dynamo (sweeps)., Print PDF - This node will allow you to initiate a printing routine in revit from a set of views/sheets, printer name, print settings and print range. , Remap UV Domain - This node takes an input of a reference face and a list of UVs that get remapped into that face's UV Domain. The output is a list of UV Coordinates in that surface's domain. , Remove Revision from Sheet - This node will remove specified Revisions from a sheet., Rename Files - This node will use an \"identifier\" to pick out files from a supplied directory to rename files to a new name supplied. Please make sure to match list lengths of identifier and new name inputs., Revision Properties - This node will return some most common Revision properties like Description or Issue Date., Revisions on Sheet - This node will return all Revisions specified in \"Revisions on Sheet\" selection of the sheet., Room.AtPoint - This node will attempt to retrieve a room at a given point in model. , Room.Boundaries - This node returns all Room bounding curves and elements that generated them (walls, separation lines etc)., RoomBoundaries.CleanNulls - This node will take a set of room boundary curves and elements and remove nulls from element list while joining curves to mainatain matching list structure. , Rotate Family - This node will rotate a family in Revit around a given axis by supplied angle (in radians). Please remember that every time you run your definition it will rotate family by given angle every time. , Schedule Appearance - This node allows you to control the appearance of the schedule. For now it supports only title, header and body text type. , Schedule Formatting - This node will allow you to control schedule formatiing options like column width, whether a column is hidden, column heading etc. , Schedule Sorting Grouping - This node will allow you to specify sorting/grouping parameters in schedule as well parameters like sorting order, whether its a footer or header. Visit archi-lab.net for more information. , Schedule Title Appearance - This node will override the appearance of the title. , Schedules on Sheets - Queries all schedules and produces two lists: one with all schedules that are placed on sheets and one with schedules that are not placed on sheets., Select Model Lines by Style - This node will select all model lines in the revit project by a line style name. , Set BuiltIn Parameter - This node will take an input of a built in parameter name and set that parameter to given value for given elements. , Set Type Parameter - This node will set a type parameter for an element., Slice String - Slices X number of leading or trailing characters from string (boolean true will slice from left while boolean set to false from right), String From List - This node will take an input of a list or nested list and then join each element in a list with a given seperator while adding a suffix., String.Contains - This node takes a list of strings and checks if any string contains a matching string from filter input. , StructuralFraming.BeamByCurve - This node will take an input of curves and attempt to make a structural framing member by type and level. , Survey Point - This node will retrieve a Survey Point from a Revit model. , Tag Host Element - This node will retrieve an element that is hosting a given tag. , Tag Text - This node will retireve a text content of a tag. , Transform Origin - This node will query an element for its Transform (Coordinate System) and then return its Origin point. , Viewport Properties - This node will return certain properties from a Viewport input. , Wall.ExteriorDirection - This node returns exterior direction of the wall as a vector., Workset.ByName - This node will create a new workset by name., Elements.ByCategoryAndView - This node retrieves all elements of given Category in given view. , FamilyInstance.ByLine - This node creates a new Family Instance by Type, Line and View. , FamilyInstance.FamilyType - This node will return a  Family Type of a given Family Instance. If no Family Type can be assigned to a Family then it will return Null. , TextNote.ByViewPointAndType - This node creates a unwrapped (single line) text note in a given view, at a given location with a given text note type style assigned. , View.HideElements - This node will hide elements in specified view., View.UnhideElements - This node will unhide specified elemeints in given views.",
            "engine_metadata": "",
            "engine_version": "0.9.1.2912",
            "created": "2016-01-26T17:54:10.480Z",
            "full_dependency_versions": [ "2016.1.26" ],
            "full_dependency_ids": [
              {
                "_id": "53e99ce50e5572016a00018a",
                "name": "archi-lab.net"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2016.1.26"
          },
          {
            "_id": "56afb304c3e9ee4a08000077",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/9e06be82-373e-44f6-bd0e-b99cfe18cdb8gregPkg590.zip",
            "contents": "Add Revisions to Sheet - This node will add specified revisions to a sheet. , Add Shared Parameter to Project - This node will add a parameter to shared parameter file and then add it to the project. , Apply View Template - This node will allow you to apply a view template to a set of views., Cell Style Settings - This node will generate a Cell Style Settings that can be used to override cell properties. , Change Family Type - Changes family type of a family by passing in an Element and type id of the type we want to change it to. , Clear List - This node will remove all Null and Empty Lists from any list. , Color Settings - This node creates color settings for the Analysis Visualization Framework. , Colored Surface Display Style - This node will generate a Colored Surface Display Style from inputs of points, values, and instance surface for analysis to be aplied to. Also, use color and legend settings (part of archi-lab package) to create style colors and visibility., Colored Surface Settings - This node creates settings for the colored surface display style of the Analysis Visualization Framework., Combine by Pattern - Combines two list based on a input pattern of true and false., Create Annotation Tag - This node will create an annotation tag at a given location, of given type and in a supplied view. If only single view is supplied then all tags will be created in that view. , Create Placeholder Sheet - This node will create placeholder sheets from a sheet number/name. , Current Document - Retrieves Current Document, Curve.Level - This node will return a level that a given curve is located on. , Delete Elements - This node will delete elements from Revit project., Delete Linked Model Keynote Tags - Deletes all Keynote Tags that are tagging elements in the linked model. if element in the linked model has a keynote assigned thus a keynote tag reads a proper value it will not be deleted. , Delete Unnamed Reference Planes - Does just what the name says. , Dispatch - Works exactly like the Dispatch component in Grasshopper. Input a list and a matching pattern of True/False to split list into two lists one containing all True arguments while other all False arguments. , Door Set Handing - Determines door set handing (whether its a left or right handed door). Input takes doors, and output will split them into two lists (right and left)., Duplicate Item Indices - Searches an input list for duplicate entries and lists their index numbers. Couple with Get From List to delete duplicates from a list., Element Ids - This node will query an element id that can be used with Revit nodes. Dynamo Element Id node returns integer value. , Element.IsOfType - This nodes yields true or false, checking if input elements are of given Element Type., Elements Fom Linked File in Room - This node will check what elements from a linked model are inside of any of the rooms in the current model. , Elements in Room - This node will check if any of the elements are inside any of the supplied rooms. , Elements in Space - This node will take an input of Spaces and Elements and attempt to group all elements by Room that it is located in. For elements that are placed by Line and not a Point, a mid point of line will be used to determine location. , Elements on Sheet - This node will return elements on sheet., Elements.ByCategoryAndView - This node retrieves all elements of given Category in given view. , Export Image by View - This node will export a list of Views and save them as images (JPG, BMP etc)., FamilyInstance.ByLine - This node creates a new Family Instance by Type, Line and View. , FamilyInstance.FamilyType - This node will return a  Family Type of a given Family Instance. If no Family Type can be assigned to a Family then it will return Null. , Fill Pattern - Get Fill Pattern by Name, Filled Region Area - This node will query an area from the filled region, Filled Region Boundary Curves - This node will get the boundary curves for a filled region., Floor.Area - This node return floor area. , FloorPlan.ByRoom - This node takes input of a Room and creates a Floor Plan View with Crop Box set around that room. , Get All Detail Groups - This node will retrieve all instances of Detail Groups in the model., Get All Dimension Styles - This node will query all of the available dimension styles (this includes linear as well as arc, circle etc). , Get All Elements From Linked Model - This node is based on code posted by Julien Benoit. Big thanks to Julien for sharing his work. This node will retrieve all elements of a given category from a given linked model. , Get All Keynote Tags - Selects all Keynote Tags instances in the model. , Get All Line Styles - This node will return all available line styles., Get All Revisions - This node will return all Revisions currently defined in the mode., Get All Viewport Types - This node will retrieve all Viewport Types currently in the model. , Get All Views - This node will query all views in the model and return them based on category, Get Built In Parameter - This node will take an input of a built in parameter name and element to return that parameters value. , Get Design Options - Queries all of the design options currently in the project., Get Documents - Queries all linked Revit files and retrieves their Name, LinkInstance and Document properties., Get Elements by Category/Level - This node will filter for all elements of a given category on a given level., Get Filled Regions - This node will query up all Filled Regions in the project as well as those in the active view only. , Get Host Element - This node will retrieve a host element from hosted element. Ex. feed in door, get wall., Get Level by Name - This node will retrieve a Revit Level Element by its name. , Get Line Style by Name - This node will return a line style object by its name. Line styles can be either Drafting or Model Line Property. , Get Rooms by Level - Filters Rooms by level., Get Sheet Viewports - This node will query a sheet for viewports (views) that are placed on it., Get Tagged Element Id - Retrives an Element Id from input of element tags. For example if wall tags are inputted it will return tagged wall Ids., Get Text Note Type by Name - This node will select a text note type by name. , Get Type Parameter - This node will retrieve a type parameter by its name., Get Unplaced Groups - This node will retrieve all unplaced groups in the model., Get Views from View Set - This node will take a name of a view set and return views/sheet elements contained in it. , Get Worksets - Retrieves user worksets from specified document, GH Point to DY Point - Converts CSV Grasshopper export of points into a Dynamo point list. , Group Curves - This node will take any input of flat list of curves and group them into sublists containing \"joinable\" curves that is continous curves. They might form closed curves or open curves. Use PolyCurve.ByJoinedCurves to convert output groups of curves into single PolyCurves, Id to Element - Selects elements in a model from id input (ElementId, string, integer or GUID), Isolate in View - This node will take input of elements and a view to isolate selected elements in a view., Key Schedule - This node will take a key schedule, data and a list of parameters and populate it with infomation from data parameter. Visit www.archi-lab.net for more information on how to prep this node for take off. , Legend Settings - This node sets all settings for the Legend display with Analysis Visualization Framework of Revit. , Level.LevelAbove - This node takes an input of level and returns level above it. , Local Printers Names - This node will query all locally installed printers and return their names., Marker Settings - This node will generate AnalysisDisplayMarkerAndTextSettings to be used with a Marker Analysis Display Style. Inputs are: Marker Shape(Circle, Triangle, Rectangle), Marker Size, Show Text (Boolean), Rounding, TextDisplayMethod (Show All, Show None, Show Predefined). , Marker&Text Display Style - This node will take an input of Points and a matching input of values to create Analysis Display Style in Revit. Use Legend, Marker and Color Settings nodes to fully customize your display style. , Mass Addition - This node will attempt to sum all elements contained within it. , Material.ImportAllFromProject - This node will import (copy) all materials from specified project into current model. By default it will not override existing materials. , Material.MaterialAssetElement - This node retrieves a Material Asset Element from Material. If such is not defined it will return an Invalid Element Id (-1), Material.SetMaterialAssetByAssetId - This node will set the material asset by asset id. Please make sure that the two input lists match in length. , Material.SetMaterialAssetByMaterial - This node will copy a material asset element from source Material to a list of target materials. It esentially makes all materials inherit its Rendering Appearance. Useful for \"clay\" renderings. , New Section Box View By Elements - This node will create new section box around specified elements and apply it to a new 3D View with a specified name. Section box will be offset from the elements by a supplied offset values. , Override Fill Pattern in View - Overrides fill pattern of any element in an active view to specified fill pattern and color, Parameter Group - This node will return all available Parameter Groups, Phase Demolished - This node will query a Phase Demolished setting of an element and return phase id. If id is -1 that means that element was not demolished. , PolyCurve by Profile Family Type - It takes an input of a profile family type and extract curves from it converting them to polycurves and curve segments for use in Dynamo (sweeps)., Print PDF - This node will allow you to initiate a printing routine in revit from a set of views/sheets, printer name, print settings and print range. , Remap UV Domain - This node takes an input of a reference face and a list of UVs that get remapped into that face's UV Domain. The output is a list of UV Coordinates in that surface's domain. , Remove Revision from Sheet - This node will remove specified Revisions from a sheet., Rename Files - This node will use an \"identifier\" to pick out files from a supplied directory to rename files to a new name supplied. Please make sure to match list lengths of identifier and new name inputs., Revision Properties - This node will return some most common Revision properties like Description or Issue Date., Revisions on Sheet - This node will return all Revisions specified in \"Revisions on Sheet\" selection of the sheet., Room.AtPoint - This node will attempt to retrieve a room at a given point in model. , Room.Boundaries - This node returns all Room bounding curves and elements that generated them (walls, separation lines etc)., RoomBoundaries.CleanNulls - This node will take a set of room boundary curves and elements and remove nulls from element list while joining curves to mainatain matching list structure. , Rotate Family - This node will rotate a family in Revit around a given axis by supplied angle (in radians). Please remember that every time you run your definition it will rotate family by given angle every time. , Schedule Appearance - This node allows you to control the appearance of the schedule. For now it supports only title, header and body text type. , Schedule Formatting - This node will allow you to control schedule formatiing options like column width, whether a column is hidden, column heading etc. , Schedule Sorting Grouping - This node will allow you to specify sorting/grouping parameters in schedule as well parameters like sorting order, whether its a footer or header. Visit archi-lab.net for more information. , Schedule Title Appearance - This node will override the appearance of the title. , Schedules on Sheets - Queries all schedules and produces two lists: one with all schedules that are placed on sheets and one with schedules that are not placed on sheets., Select Model Lines by Style - This node will select all model lines in the revit project by a line style name. , Set BuiltIn Parameter - This node will take an input of a built in parameter name and set that parameter to given value for given elements. , Set Type Parameter - This node will set a type parameter for an element., Slice String - Slices X number of leading or trailing characters from string (boolean true will slice from left while boolean set to false from right), String From List - This node will take an input of a list or nested list and then join each element in a list with a given seperator while adding a suffix., String.Contains - This node takes a list of strings and checks if any string contains a matching string from filter input. , StructuralFraming.BeamByCurve - This node will take an input of curves and attempt to make a structural framing member by type and level. , Survey Point - This node will retrieve a Survey Point from a Revit model. , Tag Host Element - This node will retrieve an element that is hosting a given tag. , Tag Text - This node will retireve a text content of a tag. , TextNote.ByViewPointAndType - This node creates a unwrapped (single line) text note in a given view, at a given location with a given text note type style assigned. , Transform Origin - This node will query an element for its Transform (Coordinate System) and then return its Origin point. , View.HideElements - This node will hide elements in specified view., View.UnhideElements - This node will unhide specified elemeints in given views., Viewport Properties - This node will return certain properties from a Viewport input. , Wall.ExteriorDirection - This node returns exterior direction of the wall as a vector., Workset.ByName - This node will create a new workset by name., FamilyInstance.TotalTransform - This node returns a Total Transform of a family instance., Transform.ToPoint - This node takes a Transform and an input point that will be translated by the Transform. ",
            "engine_metadata": "",
            "engine_version": "0.9.1.2912",
            "created": "2016-02-01T19:33:24.637Z",
            "full_dependency_versions": [ "2016.2.1" ],
            "full_dependency_ids": [
              {
                "_id": "53e99ce50e5572016a00018a",
                "name": "archi-lab.net"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2016.2.1"
          },
          {
            "_id": "56b8e563c3e9ee4a080000c8",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/7fc3a4c5-3eb3-4cd3-b149-e2abef253a1dgregPkg445.zip",
            "contents": "Add Revisions to Sheet - This node will add specified revisions to a sheet. , Add Shared Parameter to Project - This node will add a parameter to shared parameter file and then add it to the project. , Apply View Template - This node will allow you to apply a view template to a set of views., Cell Style Settings - This node will generate a Cell Style Settings that can be used to override cell properties. , Change Family Type - Changes family type of a family by passing in an Element and type id of the type we want to change it to. , Clear List - This node will remove all Null and Empty Lists from any list. , Color Settings - This node creates color settings for the Analysis Visualization Framework. , Colored Surface Display Style - This node will generate a Colored Surface Display Style from inputs of points, values, and instance surface for analysis to be aplied to. Also, use color and legend settings (part of archi-lab package) to create style colors and visibility., Colored Surface Settings - This node creates settings for the colored surface display style of the Analysis Visualization Framework., Combine by Pattern - Combines two list based on a input pattern of true and false., Create Annotation Tag - This node will create an annotation tag at a given location, of given type and in a supplied view. If only single view is supplied then all tags will be created in that view. , Create Placeholder Sheet - This node will create placeholder sheets from a sheet number/name. , Current Document - Retrieves Current Document, Curve.Level - This node will return a level that a given curve is located on. , Delete Elements - This node will delete elements from Revit project., Delete Linked Model Keynote Tags - Deletes all Keynote Tags that are tagging elements in the linked model. if element in the linked model has a keynote assigned thus a keynote tag reads a proper value it will not be deleted. , Delete Unnamed Reference Planes - Does just what the name says. , Dispatch - Works exactly like the Dispatch component in Grasshopper. Input a list and a matching pattern of True/False to split list into two lists one containing all True arguments while other all False arguments. , Door Set Handing - Determines door set handing (whether its a left or right handed door). Input takes doors, and output will split them into two lists (right and left)., Duplicate Item Indices - Searches an input list for duplicate entries and lists their index numbers. Couple with Get From List to delete duplicates from a list., Element Ids - This node will query an element id that can be used with Revit nodes. Dynamo Element Id node returns integer value. , Element.IsOfType - This nodes yields true or false, checking if input elements are of given Element Type., Elements Fom Linked File in Room - This node will check what elements from a linked model are inside of any of the rooms in the current model. , Elements in Room - This node will check if any of the elements are inside any of the supplied rooms. , Elements in Space - This node will take an input of Spaces and Elements and attempt to group all elements by Room that it is located in. For elements that are placed by Line and not a Point, a mid point of line will be used to determine location. , Elements on Sheet - This node will return elements on sheet., Elements.ByCategoryAndView - This node retrieves all elements of given Category in given view. , Export Image by View - This node will export a list of Views and save them as images (JPG, BMP etc)., FamilyInstance.ByLine - This node creates a new Family Instance by Type, Line and View. , FamilyInstance.FamilyType - This node will return a  Family Type of a given Family Instance. If no Family Type can be assigned to a Family then it will return Null. , FamilyInstance.TotalTransform - This node returns a Total Transform of a family instance., Fill Pattern - Get Fill Pattern by Name, Filled Region Area - This node will query an area from the filled region, Filled Region Boundary Curves - This node will get the boundary curves for a filled region., Floor.Area - This node return floor area. , FloorPlan.ByRoom - This node takes input of a Room and creates a Floor Plan View with Crop Box set around that room. , Get All Detail Groups - This node will retrieve all instances of Detail Groups in the model., Get All Dimension Styles - This node will query all of the available dimension styles (this includes linear as well as arc, circle etc). , Get All Elements From Linked Model - This node is based on code posted by Julien Benoit. Big thanks to Julien for sharing his work. This node will retrieve all elements of a given category from a given linked model. , Get All Keynote Tags - Selects all Keynote Tags instances in the model. , Get All Line Styles - This node will return all available line styles., Get All Revisions - This node will return all Revisions currently defined in the mode., Get All Viewport Types - This node will retrieve all Viewport Types currently in the model. , Get All Views - This node will query all views in the model and return them based on category, Get Built In Parameter - This node will take an input of a built in parameter name and element to return that parameters value. , Get Design Options - Queries all of the design options currently in the project., Get Documents - Queries all linked Revit files and retrieves their Name, LinkInstance and Document properties., Get Elements by Category/Level - This node will filter for all elements of a given category on a given level., Get Filled Regions - This node will query up all Filled Regions in the project as well as those in the active view only. , Get Host Element - This node will retrieve a host element from hosted element. Ex. feed in door, get wall., Get Level by Name - This node will retrieve a Revit Level Element by its name. , Get Line Style by Name - This node will return a line style object by its name. Line styles can be either Drafting or Model Line Property. , Get Rooms by Level - Filters Rooms by level., Get Sheet Viewports - This node will query a sheet for viewports (views) that are placed on it., Get Tagged Element Id - Retrives an Element Id from input of element tags. For example if wall tags are inputted it will return tagged wall Ids., Get Text Note Type by Name - This node will select a text note type by name. , Get Type Parameter - This node will retrieve a type parameter by its name., Get Unplaced Groups - This node will retrieve all unplaced groups in the model., Get Views from View Set - This node will take a name of a view set and return views/sheet elements contained in it. , Get Worksets - Retrieves user worksets from specified document, GH Point to DY Point - Converts CSV Grasshopper export of points into a Dynamo point list. , Group Curves - This node will take any input of flat list of curves and group them into sublists containing \"joinable\" curves that is continous curves. They might form closed curves or open curves. Use PolyCurve.ByJoinedCurves to convert output groups of curves into single PolyCurves, Id to Element - Selects elements in a model from id input (ElementId, string, integer or GUID), Isolate in View - This node will take input of elements and a view to isolate selected elements in a view., Key Schedule - This node will take a key schedule, data and a list of parameters and populate it with infomation from data parameter. Visit www.archi-lab.net for more information on how to prep this node for take off. , Legend Settings - This node sets all settings for the Legend display with Analysis Visualization Framework of Revit. , Level.LevelAbove - This node takes an input of level and returns level above it. , Local Printers Names - This node will query all locally installed printers and return their names., Marker Settings - This node will generate AnalysisDisplayMarkerAndTextSettings to be used with a Marker Analysis Display Style. Inputs are: Marker Shape(Circle, Triangle, Rectangle), Marker Size, Show Text (Boolean), Rounding, TextDisplayMethod (Show All, Show None, Show Predefined). , Marker&Text Display Style - This node will take an input of Points and a matching input of values to create Analysis Display Style in Revit. Use Legend, Marker and Color Settings nodes to fully customize your display style. , Mass Addition - This node will attempt to sum all elements contained within it. , Material.ImportAllFromProject - This node will import (copy) all materials from specified project into current model. By default it will not override existing materials. , Material.MaterialAssetElement - This node retrieves a Material Asset Element from Material. If such is not defined it will return an Invalid Element Id (-1), Material.SetMaterialAssetByAssetId - This node will set the material asset by asset id. Please make sure that the two input lists match in length. , Material.SetMaterialAssetByMaterial - This node will copy a material asset element from source Material to a list of target materials. It esentially makes all materials inherit its Rendering Appearance. Useful for \"clay\" renderings. , New Section Box View By Elements - This node will create new section box around specified elements and apply it to a new 3D View with a specified name. Section box will be offset from the elements by a supplied offset values. , Override Fill Pattern in View - Overrides fill pattern of any element in an active view to specified fill pattern and color, Parameter Group - This node will return all available Parameter Groups, Phase Demolished - This node will query a Phase Demolished setting of an element and return phase id. If id is -1 that means that element was not demolished. , PolyCurve by Profile Family Type - It takes an input of a profile family type and extract curves from it converting them to polycurves and curve segments for use in Dynamo (sweeps)., Print PDF - This node will allow you to initiate a printing routine in revit from a set of views/sheets, printer name, print settings and print range. , Remap UV Domain - This node takes an input of a reference face and a list of UVs that get remapped into that face's UV Domain. The output is a list of UV Coordinates in that surface's domain. , Remove Revision from Sheet - This node will remove specified Revisions from a sheet., Rename Files - This node will use an \"identifier\" to pick out files from a supplied directory to rename files to a new name supplied. Please make sure to match list lengths of identifier and new name inputs., Revision Properties - This node will return some most common Revision properties like Description or Issue Date., Revisions on Sheet - This node will return all Revisions specified in \"Revisions on Sheet\" selection of the sheet., Room.AtPoint - This node will attempt to retrieve a room at a given point in model. , Room.Boundaries - This node returns all Room bounding curves and elements that generated them (walls, separation lines etc)., RoomBoundaries.CleanNulls - This node will take a set of room boundary curves and elements and remove nulls from element list while joining curves to mainatain matching list structure. , Rotate Family - This node will rotate a family in Revit around a given axis by supplied angle (in radians). Please remember that every time you run your definition it will rotate family by given angle every time. , Schedule Appearance - This node allows you to control the appearance of the schedule. For now it supports only title, header and body text type. , Schedule Formatting - This node will allow you to control schedule formatiing options like column width, whether a column is hidden, column heading etc. , Schedule Sorting Grouping - This node will allow you to specify sorting/grouping parameters in schedule as well parameters like sorting order, whether its a footer or header. Visit archi-lab.net for more information. , Schedule Title Appearance - This node will override the appearance of the title. , Schedules on Sheets - Queries all schedules and produces two lists: one with all schedules that are placed on sheets and one with schedules that are not placed on sheets., Select Model Lines by Style - This node will select all model lines in the revit project by a line style name. , Set BuiltIn Parameter - This node will take an input of a built in parameter name and set that parameter to given value for given elements. , Set Type Parameter - This node will set a type parameter for an element., Slice String - Slices X number of leading or trailing characters from string (boolean true will slice from left while boolean set to false from right), String From List - This node will take an input of a list or nested list and then join each element in a list with a given seperator while adding a suffix., String.Contains - This node takes a list of strings and checks if any string contains a matching string from filter input. , StructuralFraming.BeamByCurve - This node will take an input of curves and attempt to make a structural framing member by type and level. , Survey Point - This node will retrieve a Survey Point from a Revit model. , Tag Host Element - This node will retrieve an element that is hosting a given tag. , Tag Text - This node will retireve a text content of a tag. , TextNote.ByViewPointAndType - This node creates a unwrapped (single line) text note in a given view, at a given location with a given text note type style assigned. , Transform Origin - This node will query an element for its Transform (Coordinate System) and then return its Origin point. , Transform.ToPoint - This node takes a Transform and an input point that will be translated by the Transform. , View.HideElements - This node will hide elements in specified view., View.UnhideElements - This node will unhide specified elemeints in given views., Viewport Properties - This node will return certain properties from a Viewport input. , Wall.ExteriorDirection - This node returns exterior direction of the wall as a vector., Workset.ByName - This node will create a new workset by name.",
            "engine_metadata": "",
            "engine_version": "0.9.1.3872",
            "created": "2016-02-08T18:58:43.965Z",
            "full_dependency_versions": [ "2016.2.7" ],
            "full_dependency_ids": [
              {
                "_id": "53e99ce50e5572016a00018a",
                "name": "archi-lab.net"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2016.2.7"
          },
          {
            "_id": "56b929dbc3e9ee4a080000ca",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/b4860d47-0961-4851-bda2-9155c8301488gregPkg145.zip",
            "contents": "Add Revisions to Sheet - This node will add specified revisions to a sheet. , Add Shared Parameter to Project - This node will add a parameter to shared parameter file and then add it to the project. , Apply View Template - This node will allow you to apply a view template to a set of views., Cell Style Settings - This node will generate a Cell Style Settings that can be used to override cell properties. , Change Family Type - Changes family type of a family by passing in an Element and type id of the type we want to change it to. , Clear List - This node will remove all Null and Empty Lists from any list. , Color Settings - This node creates color settings for the Analysis Visualization Framework. , Colored Surface Display Style - This node will generate a Colored Surface Display Style from inputs of points, values, and instance surface for analysis to be aplied to. Also, use color and legend settings (part of archi-lab package) to create style colors and visibility., Colored Surface Settings - This node creates settings for the colored surface display style of the Analysis Visualization Framework., Combine by Pattern - Combines two list based on a input pattern of true and false., Create Annotation Tag - This node will create an annotation tag at a given location, of given type and in a supplied view. If only single view is supplied then all tags will be created in that view. , Create Placeholder Sheet - This node will create placeholder sheets from a sheet number/name. , Current Document - Retrieves Current Document, Curve.Level - This node will return a level that a given curve is located on. , Delete Elements - This node will delete elements from Revit project., Delete Linked Model Keynote Tags - Deletes all Keynote Tags that are tagging elements in the linked model. if element in the linked model has a keynote assigned thus a keynote tag reads a proper value it will not be deleted. , Delete Unnamed Reference Planes - Does just what the name says. , Dispatch - Works exactly like the Dispatch component in Grasshopper. Input a list and a matching pattern of True/False to split list into two lists one containing all True arguments while other all False arguments. , Door Set Handing - Determines door set handing (whether its a left or right handed door). Input takes doors, and output will split them into two lists (right and left)., Duplicate Item Indices - Searches an input list for duplicate entries and lists their index numbers. Couple with Get From List to delete duplicates from a list., Element Ids - This node will query an element id that can be used with Revit nodes. Dynamo Element Id node returns integer value. , Element.IsOfType - This nodes yields true or false, checking if input elements are of given Element Type., Elements Fom Linked File in Room - This node will check what elements from a linked model are inside of any of the rooms in the current model. , Elements in Room - This node will check if any of the elements are inside any of the supplied rooms. , Elements in Space - This node will take an input of Spaces and Elements and attempt to group all elements by Room that it is located in. For elements that are placed by Line and not a Point, a mid point of line will be used to determine location. , Elements on Sheet - This node will return elements on sheet., Elements.ByCategoryAndView - This node retrieves all elements of given Category in given view. , Export Image by View - This node will export a list of Views and save them as images (JPG, BMP etc)., FamilyInstance.ByLine - This node creates a new Family Instance by Type, Line and View. , FamilyInstance.FamilyType - This node will return a  Family Type of a given Family Instance. If no Family Type can be assigned to a Family then it will return Null. , FamilyInstance.TotalTransform - This node returns a Total Transform of a family instance., Fill Pattern - Get Fill Pattern by Name, Filled Region Area - This node will query an area from the filled region, Filled Region Boundary Curves - This node will get the boundary curves for a filled region., Floor.Area - This node return floor area. , FloorPlan.ByRoom - This node takes input of a Room and creates a Floor Plan View with Crop Box set around that room. , Get All Detail Groups - This node will retrieve all instances of Detail Groups in the model., Get All Dimension Styles - This node will query all of the available dimension styles (this includes linear as well as arc, circle etc). , Get All Elements From Linked Model - This node is based on code posted by Julien Benoit. Big thanks to Julien for sharing his work. This node will retrieve all elements of a given category from a given linked model. , Get All Keynote Tags - Selects all Keynote Tags instances in the model. , Get All Line Styles - This node will return all available line styles., Get All Revisions - This node will return all Revisions currently defined in the mode., Get All Viewport Types - This node will retrieve all Viewport Types currently in the model. , Get All Views - This node will query all views in the model and return them based on category, Get Built In Parameter - This node will take an input of a built in parameter name and element to return that parameters value. , Get Design Options - Queries all of the design options currently in the project., Get Documents - Queries all linked Revit files and retrieves their Name, LinkInstance and Document properties., Get Elements by Category/Level - This node will filter for all elements of a given category on a given level., Get Filled Regions - This node will query up all Filled Regions in the project as well as those in the active view only. , Get Host Element - This node will retrieve a host element from hosted element. Ex. feed in door, get wall., Get Level by Name - This node will retrieve a Revit Level Element by its name. , Get Line Style by Name - This node will return a line style object by its name. Line styles can be either Drafting or Model Line Property. , Get Rooms by Level - Filters Rooms by level., Get Sheet Viewports - This node will query a sheet for viewports (views) that are placed on it., Get Tagged Element Id - Retrives an Element Id from input of element tags. For example if wall tags are inputted it will return tagged wall Ids., Get Text Note Type by Name - This node will select a text note type by name. , Get Type Parameter - This node will retrieve a type parameter by its name., Get Unplaced Groups - This node will retrieve all unplaced groups in the model., Get Views from View Set - This node will take a name of a view set and return views/sheet elements contained in it. , Get Worksets - Retrieves user worksets from specified document, GH Point to DY Point - Converts CSV Grasshopper export of points into a Dynamo point list. , Group Curves - This node will take any input of flat list of curves and group them into sublists containing \"joinable\" curves that is continous curves. They might form closed curves or open curves. Use PolyCurve.ByJoinedCurves to convert output groups of curves into single PolyCurves, Id to Element - Selects elements in a model from id input (ElementId, string, integer or GUID), Isolate in View - This node will take input of elements and a view to isolate selected elements in a view., Key Schedule - This node will take a key schedule, data and a list of parameters and populate it with infomation from data parameter. Visit www.archi-lab.net for more information on how to prep this node for take off. , Legend Settings - This node sets all settings for the Legend display with Analysis Visualization Framework of Revit. , Level.LevelAbove - This node takes an input of level and returns level above it. , Local Printers Names - This node will query all locally installed printers and return their names., Marker Settings - This node will generate AnalysisDisplayMarkerAndTextSettings to be used with a Marker Analysis Display Style. Inputs are: Marker Shape(Circle, Triangle, Rectangle), Marker Size, Show Text (Boolean), Rounding, TextDisplayMethod (Show All, Show None, Show Predefined). , Marker&Text Display Style - This node will take an input of Points and a matching input of values to create Analysis Display Style in Revit. Use Legend, Marker and Color Settings nodes to fully customize your display style. , Mass Addition - This node will attempt to sum all elements contained within it. , Material.ImportAllFromProject - This node will import (copy) all materials from specified project into current model. By default it will not override existing materials. , Material.MaterialAssetElement - This node retrieves a Material Asset Element from Material. If such is not defined it will return an Invalid Element Id (-1), Material.SetMaterialAssetByAssetId - This node will set the material asset by asset id. Please make sure that the two input lists match in length. , Material.SetMaterialAssetByMaterial - This node will copy a material asset element from source Material to a list of target materials. It esentially makes all materials inherit its Rendering Appearance. Useful for \"clay\" renderings. , New Section Box View By Elements - This node will create new section box around specified elements and apply it to a new 3D View with a specified name. Section box will be offset from the elements by a supplied offset values. , Override Fill Pattern in View - Overrides fill pattern of any element in an active view to specified fill pattern and color, Parameter Group - This node will return all available Parameter Groups, Phase Demolished - This node will query a Phase Demolished setting of an element and return phase id. If id is -1 that means that element was not demolished. , PolyCurve by Profile Family Type - It takes an input of a profile family type and extract curves from it converting them to polycurves and curve segments for use in Dynamo (sweeps)., Print PDF - This node will allow you to initiate a printing routine in revit from a set of views/sheets, printer name, print settings and print range. , Remap UV Domain - This node takes an input of a reference face and a list of UVs that get remapped into that face's UV Domain. The output is a list of UV Coordinates in that surface's domain. , Remove Revision from Sheet - This node will remove specified Revisions from a sheet., Rename Files - This node will use an \"identifier\" to pick out files from a supplied directory to rename files to a new name supplied. Please make sure to match list lengths of identifier and new name inputs., Revision Properties - This node will return some most common Revision properties like Description or Issue Date., Revisions on Sheet - This node will return all Revisions specified in \"Revisions on Sheet\" selection of the sheet., Room.AtPoint - This node will attempt to retrieve a room at a given point in model. , Room.Boundaries - This node returns all Room bounding curves and elements that generated them (walls, separation lines etc)., RoomBoundaries.CleanNulls - This node will take a set of room boundary curves and elements and remove nulls from element list while joining curves to mainatain matching list structure. , Rotate Family - This node will rotate a family in Revit around a given axis by supplied angle (in radians). Please remember that every time you run your definition it will rotate family by given angle every time. , Schedule Appearance - This node allows you to control the appearance of the schedule. For now it supports only title, header and body text type. , Schedule Formatting - This node will allow you to control schedule formatiing options like column width, whether a column is hidden, column heading etc. , Schedule Sorting Grouping - This node will allow you to specify sorting/grouping parameters in schedule as well parameters like sorting order, whether its a footer or header. Visit archi-lab.net for more information. , Schedule Title Appearance - This node will override the appearance of the title. , Schedules on Sheets - Queries all schedules and produces two lists: one with all schedules that are placed on sheets and one with schedules that are not placed on sheets., Select Model Lines by Style - This node will select all model lines in the revit project by a line style name. , Set BuiltIn Parameter - This node will take an input of a built in parameter name and set that parameter to given value for given elements. , Set Type Parameter - This node will set a type parameter for an element., Slice String - Slices X number of leading or trailing characters from string (boolean true will slice from left while boolean set to false from right), String From List - This node will take an input of a list or nested list and then join each element in a list with a given seperator while adding a suffix., String.Contains - This node takes a list of strings and checks if any string contains a matching string from filter input. , StructuralFraming.BeamByCurve - This node will take an input of curves and attempt to make a structural framing member by type and level. , Survey Point - This node will retrieve a Survey Point from a Revit model. , Tag Host Element - This node will retrieve an element that is hosting a given tag. , Tag Text - This node will retireve a text content of a tag. , TextNote.ByViewPointAndType - This node creates a unwrapped (single line) text note in a given view, at a given location with a given text note type style assigned. , Transform Origin - This node will query an element for its Transform (Coordinate System) and then return its Origin point. , Transform.ToPoint - This node takes a Transform and an input point that will be translated by the Transform. , View.HideElements - This node will hide elements in specified view., View.UnhideElements - This node will unhide specified elemeints in given views., Viewport Properties - This node will return certain properties from a Viewport input. , Wall.ExteriorDirection - This node returns exterior direction of the wall as a vector., Workset.ByName - This node will create a new workset by name., LineStyle.ReplaceAndDelete - This node accepts lists of Line Styles that correlate 1:1 where first item from Replace input will be replaced with first item from ReplaceWith and if boolean is set to True that Style will be deleted. , WarningReport.Parse - This node will parse a Revit Warning HTML report file and extract warnings by their type. It also lists warning counts and Element Ids of elements causing the warnings.",
            "engine_metadata": "",
            "engine_version": "0.9.1.3872",
            "created": "2016-02-08T23:50:51.391Z",
            "full_dependency_versions": [ "2016.2.8" ],
            "full_dependency_ids": [
              {
                "_id": "53e99ce50e5572016a00018a",
                "name": "archi-lab.net"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2016.2.8"
          },
          {
            "_id": "56bbd891c3e9ee4a080000e9",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/069cf2ef-c5fd-44ab-91f7-f8925f6a2c30gregPkg658.zip",
            "contents": "Add Revisions to Sheet - This node will add specified revisions to a sheet. , Add Shared Parameter to Project - This node will add a parameter to shared parameter file and then add it to the project. , Apply View Template - This node will allow you to apply a view template to a set of views., Cell Style Settings - This node will generate a Cell Style Settings that can be used to override cell properties. , Change Family Type - Changes family type of a family by passing in an Element and type id of the type we want to change it to. , Clear List - This node will remove all Null and Empty Lists from any list. , Color Settings - This node creates color settings for the Analysis Visualization Framework. , Colored Surface Display Style - This node will generate a Colored Surface Display Style from inputs of points, values, and instance surface for analysis to be aplied to. Also, use color and legend settings (part of archi-lab package) to create style colors and visibility., Colored Surface Settings - This node creates settings for the colored surface display style of the Analysis Visualization Framework., Combine by Pattern - Combines two list based on a input pattern of true and false., Create Annotation Tag - This node will create an annotation tag at a given location, of given type and in a supplied view. If only single view is supplied then all tags will be created in that view. , Create Placeholder Sheet - This node will create placeholder sheets from a sheet number/name. , Current Document - Retrieves Current Document, Curve.Level - This node will return a level that a given curve is located on. , Delete Elements - This node will delete elements from Revit project., Delete Linked Model Keynote Tags - Deletes all Keynote Tags that are tagging elements in the linked model. if element in the linked model has a keynote assigned thus a keynote tag reads a proper value it will not be deleted. , Delete Unnamed Reference Planes - Does just what the name says. , Dispatch - Works exactly like the Dispatch component in Grasshopper. Input a list and a matching pattern of True/False to split list into two lists one containing all True arguments while other all False arguments. , Door Set Handing - Determines door set handing (whether its a left or right handed door). Input takes doors, and output will split them into two lists (right and left)., Duplicate Item Indices - Searches an input list for duplicate entries and lists their index numbers. Couple with Get From List to delete duplicates from a list., Element Ids - This node will query an element id that can be used with Revit nodes. Dynamo Element Id node returns integer value. , Element.IsOfType - This nodes yields true or false, checking if input elements are of given Element Type., Elements Fom Linked File in Room - This node will check what elements from a linked model are inside of any of the rooms in the current model. , Elements in Room - This node will check if any of the elements are inside any of the supplied rooms. , Elements in Space - This node will take an input of Spaces and Elements and attempt to group all elements by Room that it is located in. For elements that are placed by Line and not a Point, a mid point of line will be used to determine location. , Elements on Sheet - This node will return elements on sheet., Elements.ByCategoryAndView - This node retrieves all elements of given Category in given view. , Export Image by View - This node will export a list of Views and save them as images (JPG, BMP etc)., FamilyInstance.ByLine - This node creates a new Family Instance by Type, Line and View. , FamilyInstance.FamilyType - This node will return a  Family Type of a given Family Instance. If no Family Type can be assigned to a Family then it will return Null. , FamilyInstance.TotalTransform - This node returns a Total Transform of a family instance., Fill Pattern - Get Fill Pattern by Name, Filled Region Area - This node will query an area from the filled region, Filled Region Boundary Curves - This node will get the boundary curves for a filled region., Floor.Area - This node return floor area. , FloorPlan.ByRoom - This node takes input of a Room and creates a Floor Plan View with Crop Box set around that room. , Get All Detail Groups - This node will retrieve all instances of Detail Groups in the model., Get All Dimension Styles - This node will query all of the available dimension styles (this includes linear as well as arc, circle etc). , Get All Elements From Linked Model - This node is based on code posted by Julien Benoit. Big thanks to Julien for sharing his work. This node will retrieve all elements of a given category from a given linked model. , Get All Keynote Tags - Selects all Keynote Tags instances in the model. , Get All Line Styles - This node will return all available line styles., Get All Revisions - This node will return all Revisions currently defined in the mode., Get All Viewport Types - This node will retrieve all Viewport Types currently in the model. , Get All Views - This node will query all views in the model and return them based on category, Get Built In Parameter - This node will take an input of a built in parameter name and element to return that parameters value. , Get Design Options - Queries all of the design options currently in the project., Get Documents - Queries all linked Revit files and retrieves their Name, LinkInstance and Document properties., Get Elements by Category/Level - This node will filter for all elements of a given category on a given level., Get Filled Regions - This node will query up all Filled Regions in the project as well as those in the active view only. , Get Host Element - This node will retrieve a host element from hosted element. Ex. feed in door, get wall., Get Level by Name - This node will retrieve a Revit Level Element by its name. , Get Line Style by Name - This node will return a line style object by its name. Line styles can be either Drafting or Model Line Property. , Get Rooms by Level - Filters Rooms by level., Get Sheet Viewports - This node will query a sheet for viewports (views) that are placed on it., Get Tagged Element Id - Retrives an Element Id from input of element tags. For example if wall tags are inputted it will return tagged wall Ids., Get Text Note Type by Name - This node will select a text note type by name. , Get Type Parameter - This node will retrieve a type parameter by its name., Get Unplaced Groups - This node will retrieve all unplaced groups in the model., Get Views from View Set - This node will take a name of a view set and return views/sheet elements contained in it. , Get Worksets - Retrieves user worksets from specified document, GH Point to DY Point - Converts CSV Grasshopper export of points into a Dynamo point list. , Group Curves - This node will take any input of flat list of curves and group them into sublists containing \"joinable\" curves that is continous curves. They might form closed curves or open curves. Use PolyCurve.ByJoinedCurves to convert output groups of curves into single PolyCurves, Id to Element - Selects elements in a model from id input (ElementId, string, integer or GUID), Isolate in View - This node will take input of elements and a view to isolate selected elements in a view., Key Schedule - This node will take a key schedule, data and a list of parameters and populate it with infomation from data parameter. Visit www.archi-lab.net for more information on how to prep this node for take off. , Legend Settings - This node sets all settings for the Legend display with Analysis Visualization Framework of Revit. , Level.LevelAbove - This node takes an input of level and returns level above it. , Local Printers Names - This node will query all locally installed printers and return their names., Marker Settings - This node will generate AnalysisDisplayMarkerAndTextSettings to be used with a Marker Analysis Display Style. Inputs are: Marker Shape(Circle, Triangle, Rectangle), Marker Size, Show Text (Boolean), Rounding, TextDisplayMethod (Show All, Show None, Show Predefined). , Marker&Text Display Style - This node will take an input of Points and a matching input of values to create Analysis Display Style in Revit. Use Legend, Marker and Color Settings nodes to fully customize your display style. , Mass Addition - This node will attempt to sum all elements contained within it. , Material.ImportAllFromProject - This node will import (copy) all materials from specified project into current model. By default it will not override existing materials. , Material.MaterialAssetElement - This node retrieves a Material Asset Element from Material. If such is not defined it will return an Invalid Element Id (-1), Material.SetMaterialAssetByAssetId - This node will set the material asset by asset id. Please make sure that the two input lists match in length. , Material.SetMaterialAssetByMaterial - This node will copy a material asset element from source Material to a list of target materials. It esentially makes all materials inherit its Rendering Appearance. Useful for \"clay\" renderings. , New Section Box View By Elements - This node will create new section box around specified elements and apply it to a new 3D View with a specified name. Section box will be offset from the elements by a supplied offset values. , Override Fill Pattern in View - Overrides fill pattern of any element in an active view to specified fill pattern and color, Parameter Group - This node will return all available Parameter Groups, Phase Demolished - This node will query a Phase Demolished setting of an element and return phase id. If id is -1 that means that element was not demolished. , PolyCurve by Profile Family Type - It takes an input of a profile family type and extract curves from it converting them to polycurves and curve segments for use in Dynamo (sweeps)., Print PDF - This node will allow you to initiate a printing routine in revit from a set of views/sheets, printer name, print settings and print range. , Remap UV Domain - This node takes an input of a reference face and a list of UVs that get remapped into that face's UV Domain. The output is a list of UV Coordinates in that surface's domain. , Remove Revision from Sheet - This node will remove specified Revisions from a sheet., Rename Files - This node will use an \"identifier\" to pick out files from a supplied directory to rename files to a new name supplied. Please make sure to match list lengths of identifier and new name inputs., Revision Properties - This node will return some most common Revision properties like Description or Issue Date., Revisions on Sheet - This node will return all Revisions specified in \"Revisions on Sheet\" selection of the sheet., Room.AtPoint - This node will attempt to retrieve a room at a given point in model. , Room.Boundaries - This node returns all Room bounding curves and elements that generated them (walls, separation lines etc)., RoomBoundaries.CleanNulls - This node will take a set of room boundary curves and elements and remove nulls from element list while joining curves to mainatain matching list structure. , Rotate Family - This node will rotate a family in Revit around a given axis by supplied angle (in radians). Please remember that every time you run your definition it will rotate family by given angle every time. , Schedule Appearance - This node allows you to control the appearance of the schedule. For now it supports only title, header and body text type. , Schedule Formatting - This node will allow you to control schedule formatiing options like column width, whether a column is hidden, column heading etc. , Schedule Sorting Grouping - This node will allow you to specify sorting/grouping parameters in schedule as well parameters like sorting order, whether its a footer or header. Visit archi-lab.net for more information. , Schedule Title Appearance - This node will override the appearance of the title. , Schedules on Sheets - Queries all schedules and produces two lists: one with all schedules that are placed on sheets and one with schedules that are not placed on sheets., Select Model Lines by Style - This node will select all model lines in the revit project by a line style name. , Set BuiltIn Parameter - This node will take an input of a built in parameter name and set that parameter to given value for given elements. , Set Type Parameter - This node will set a type parameter for an element., Slice String - Slices X number of leading or trailing characters from string (boolean true will slice from left while boolean set to false from right), String From List - This node will take an input of a list or nested list and then join each element in a list with a given seperator while adding a suffix., String.Contains - This node takes a list of strings and checks if any string contains a matching string from filter input. , StructuralFraming.BeamByCurve - This node will take an input of curves and attempt to make a structural framing member by type and level. , Survey Point - This node will retrieve a Survey Point from a Revit model. , Tag Host Element - This node will retrieve an element that is hosting a given tag. , Tag Text - This node will retireve a text content of a tag. , TextNote.ByViewPointAndType - This node creates a unwrapped (single line) text note in a given view, at a given location with a given text note type style assigned. , Transform Origin - This node will query an element for its Transform (Coordinate System) and then return its Origin point. , Transform.ToPoint - This node takes a Transform and an input point that will be translated by the Transform. , View.HideElements - This node will hide elements in specified view., View.UnhideElements - This node will unhide specified elemeints in given views., Viewport Properties - This node will return certain properties from a Viewport input. , Wall.ExteriorDirection - This node returns exterior direction of the wall as a vector., Workset.ByName - This node will create a new workset by name.",
            "engine_metadata": "",
            "engine_version": "0.9.1.3872",
            "created": "2016-02-11T00:40:49.608Z",
            "full_dependency_versions": [ "2016.2.10" ],
            "full_dependency_ids": [
              {
                "_id": "53e99ce50e5572016a00018a",
                "name": "archi-lab.net"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2016.2.10"
          },
          {
            "_id": "5748d74ee70394822f00001f",
            "contains_binaries": true,
            "node_libraries": [ "archilabTypes, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "archilabUI, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-prod/fe7bfb1b-8f6e-4291-aadd-8f1fa5bb7d93gregPkg409.zip",
            "contents": "Add Revisions to Sheet - This node will add specified revisions to a sheet. , Add Shared Parameter to Project - This node will add a parameter to shared parameter file and then add it to the project. , Apply View Template - This node will allow you to apply a view template to a set of views., Cell Style Settings - This node will generate a Cell Style Settings that can be used to override cell properties. , Change Family Type - Changes family type of a family by passing in an Element and type id of the type we want to change it to. , Clear List - This node will remove all Null and Empty Lists from any list. , Color Settings - This node creates color settings for the Analysis Visualization Framework. , Colored Surface Display Style - This node will generate a Colored Surface Display Style from inputs of points, values, and instance surface for analysis to be aplied to. Also, use color and legend settings (part of archi-lab package) to create style colors and visibility., Colored Surface Settings - This node creates settings for the colored surface display style of the Analysis Visualization Framework., Combine by Pattern - Combines two list based on a input pattern of true and false., Create Annotation Tag - This node will create an annotation tag at a given location, of given type and in a supplied view. If only single view is supplied then all tags will be created in that view. , Create Placeholder Sheet - This node will create placeholder sheets from a sheet number/name. , Current Document - Retrieves Current Document, Curve.Level - This node will return a level that a given curve is located on. , Delete Elements - This node will delete elements from Revit project., Delete Linked Model Keynote Tags - Deletes all Keynote Tags that are tagging elements in the linked model. if element in the linked model has a keynote assigned thus a keynote tag reads a proper value it will not be deleted. , Delete Unnamed Reference Planes - Does just what the name says. , Dispatch - Works exactly like the Dispatch component in Grasshopper. Input a list and a matching pattern of True/False to split list into two lists one containing all True arguments while other all False arguments. , Door Set Handing - Determines door set handing (whether its a left or right handed door). Input takes doors, and output will split them into two lists (right and left)., Duplicate Item Indices - Searches an input list for duplicate entries and lists their index numbers. Couple with Get From List to delete duplicates from a list., Element Ids - This node will query an element id that can be used with Revit nodes. Dynamo Element Id node returns integer value. , Element.IsOfType - This nodes yields true or false, checking if input elements are of given Element Type., Elements Fom Linked File in Room - This node will check what elements from a linked model are inside of any of the rooms in the current model. , Elements in Room - This node will check if any of the elements are inside any of the supplied rooms. , Elements in Space - This node will take an input of Spaces and Elements and attempt to group all elements by Room that it is located in. For elements that are placed by Line and not a Point, a mid point of line will be used to determine location. , Elements on Sheet - This node will return elements on sheet., Elements.ByCategoryAndView - This node retrieves all elements of given Category in given view. , Export Image by View - This node will export a list of Views and save them as images (JPG, BMP etc)., FamilyInstance.ByLine - This node creates a new Family Instance by Type, Line and View. , FamilyInstance.FamilyType - This node will return a  Family Type of a given Family Instance. If no Family Type can be assigned to a Family then it will return Null. , FamilyInstance.TotalTransform - This node returns a Total Transform of a family instance., Fill Pattern - Get Fill Pattern by Name, Filled Region Area - This node will query an area from the filled region, Filled Region Boundary Curves - This node will get the boundary curves for a filled region., Floor.Area - This node return floor area. , FloorPlan.ByRoom - This node takes input of a Room and creates a Floor Plan View with Crop Box set around that room. , Get All Detail Groups - This node will retrieve all instances of Detail Groups in the model., Get All Dimension Styles - This node will query all of the available dimension styles (this includes linear as well as arc, circle etc). , Get All Elements From Linked Model - This node is based on code posted by Julien Benoit. Big thanks to Julien for sharing his work. This node will retrieve all elements of a given category from a given linked model. , Get All Keynote Tags - Selects all Keynote Tags instances in the model. , Get All Line Styles - This node will return all available line styles., Get All Revisions - This node will return all Revisions currently defined in the mode., Get All Viewport Types - This node will retrieve all Viewport Types currently in the model. , Get All Views - This node will query all views in the model and return them based on category, Get Built In Parameter - This node will take an input of a built in parameter name and element to return that parameters value. , Get Design Options - Queries all of the design options currently in the project., Get Documents - Queries all linked Revit files and retrieves their Name, LinkInstance and Document properties., Get Elements by Category/Level - This node will filter for all elements of a given category on a given level., Get Filled Regions - This node will query up all Filled Regions in the project as well as those in the active view only. , Get Host Element - This node will retrieve a host element from hosted element. Ex. feed in door, get wall., Get Level by Name - This node will retrieve a Revit Level Element by its name. , Get Line Style by Name - This node will return a line style object by its name. Line styles can be either Drafting or Model Line Property. , Get Rooms by Level - Filters Rooms by level., Get Sheet Viewports - This node will query a sheet for viewports (views) that are placed on it., Get Tagged Element Id - Retrives an Element Id from input of element tags. For example if wall tags are inputted it will return tagged wall Ids., Get Text Note Type by Name - This node will select a text note type by name. , Get Type Parameter - This node will retrieve a type parameter by its name., Get Unplaced Groups - This node will retrieve all unplaced groups in the model., Get Views from View Set - This node will take a name of a view set and return views/sheet elements contained in it. , Get Worksets - Retrieves user worksets from specified document, GH Point to DY Point - Converts CSV Grasshopper export of points into a Dynamo point list. , Group Curves - This node will take any input of flat list of curves and group them into sublists containing \"joinable\" curves that is continous curves. They might form closed curves or open curves. Use PolyCurve.ByJoinedCurves to convert output groups of curves into single PolyCurves, Id to Element - Selects elements in a model from id input (ElementId, string, integer or GUID), Isolate in View - This node will take input of elements and a view to isolate selected elements in a view., Key Schedule - This node will take a key schedule, data and a list of parameters and populate it with infomation from data parameter. Visit www.archi-lab.net for more information on how to prep this node for take off. , Legend Settings - This node sets all settings for the Legend display with Analysis Visualization Framework of Revit. , Level.LevelAbove - This node takes an input of level and returns level above it. , Local Printers Names - This node will query all locally installed printers and return their names., Marker Settings - This node will generate AnalysisDisplayMarkerAndTextSettings to be used with a Marker Analysis Display Style. Inputs are: Marker Shape(Circle, Triangle, Rectangle), Marker Size, Show Text (Boolean), Rounding, TextDisplayMethod (Show All, Show None, Show Predefined). , Marker&Text Display Style - This node will take an input of Points and a matching input of values to create Analysis Display Style in Revit. Use Legend, Marker and Color Settings nodes to fully customize your display style. , Mass Addition - This node will attempt to sum all elements contained within it. , Material.ImportAllFromProject - This node will import (copy) all materials from specified project into current model. By default it will not override existing materials. , Material.MaterialAssetElement - This node retrieves a Material Asset Element from Material. If such is not defined it will return an Invalid Element Id (-1), Material.SetMaterialAssetByAssetId - This node will set the material asset by asset id. Please make sure that the two input lists match in length. , Material.SetMaterialAssetByMaterial - This node will copy a material asset element from source Material to a list of target materials. It esentially makes all materials inherit its Rendering Appearance. Useful for \"clay\" renderings. , New Section Box View By Elements - This node will create new section box around specified elements and apply it to a new 3D View with a specified name. Section box will be offset from the elements by a supplied offset values. , Override Fill Pattern in View - Overrides fill pattern of any element in an active view to specified fill pattern and color, Parameter Group - This node will return all available Parameter Groups, Phase Demolished - This node will query a Phase Demolished setting of an element and return phase id. If id is -1 that means that element was not demolished. , PolyCurve by Profile Family Type - It takes an input of a profile family type and extract curves from it converting them to polycurves and curve segments for use in Dynamo (sweeps)., Print PDF - This node will allow you to initiate a printing routine in revit from a set of views/sheets, printer name, print settings and print range. , Remap UV Domain - This node takes an input of a reference face and a list of UVs that get remapped into that face's UV Domain. The output is a list of UV Coordinates in that surface's domain. , Remove Revision from Sheet - This node will remove specified Revisions from a sheet., Rename Files - This node will use an \"identifier\" to pick out files from a supplied directory to rename files to a new name supplied. Please make sure to match list lengths of identifier and new name inputs., Revision Properties - This node will return some most common Revision properties like Description or Issue Date., Revisions on Sheet - This node will return all Revisions specified in \"Revisions on Sheet\" selection of the sheet., Room.AtPoint - This node will attempt to retrieve a room at a given point in model. , Room.Boundaries - This node returns all Room bounding curves and elements that generated them (walls, separation lines etc)., RoomBoundaries.CleanNulls - This node will take a set of room boundary curves and elements and remove nulls from element list while joining curves to mainatain matching list structure. , Rotate Family - This node will rotate a family in Revit around a given axis by supplied angle (in radians). Please remember that every time you run your definition it will rotate family by given angle every time. , Schedule Appearance - This node allows you to control the appearance of the schedule. For now it supports only title, header and body text type. , Schedule Formatting - This node will allow you to control schedule formatiing options like column width, whether a column is hidden, column heading etc. , Schedule Sorting Grouping - This node will allow you to specify sorting/grouping parameters in schedule as well parameters like sorting order, whether its a footer or header. Visit archi-lab.net for more information. , Schedule Title Appearance - This node will override the appearance of the title. , Schedules on Sheets - Queries all schedules and produces two lists: one with all schedules that are placed on sheets and one with schedules that are not placed on sheets., Select Model Lines by Style - This node will select all model lines in the revit project by a line style name. , Set BuiltIn Parameter - This node will take an input of a built in parameter name and set that parameter to given value for given elements. , Set Type Parameter - This node will set a type parameter for an element., Slice String - Slices X number of leading or trailing characters from string (boolean true will slice from left while boolean set to false from right), String From List - This node will take an input of a list or nested list and then join each element in a list with a given seperator while adding a suffix., String.Contains - This node takes a list of strings and checks if any string contains a matching string from filter input. , StructuralFraming.BeamByCurve - This node will take an input of curves and attempt to make a structural framing member by type and level. , Survey Point - This node will retrieve a Survey Point from a Revit model. , Tag Host Element - This node will retrieve an element that is hosting a given tag. , Tag Text - This node will retireve a text content of a tag. , TextNote.ByViewPointAndType - This node creates a unwrapped (single line) text note in a given view, at a given location with a given text note type style assigned. , Transform Origin - This node will query an element for its Transform (Coordinate System) and then return its Origin point. , Transform.ToPoint - This node takes a Transform and an input point that will be translated by the Transform. , View.HideElements - This node will hide elements in specified view., View.UnhideElements - This node will unhide specified elemeints in given views., Viewport Properties - This node will return certain properties from a Viewport input. , Wall.ExteriorDirection - This node returns exterior direction of the wall as a vector., Workset.ByName - This node will create a new workset by name.",
            "engine_metadata": "",
            "engine_version": "1.0.0.1180",
            "created": "2016-05-27T23:25:02.284Z",
            "full_dependency_versions": [ "2016.5.27" ],
            "full_dependency_ids": [
              {
                "_id": "53e99ce50e5572016a00018a",
                "name": "archi-lab.net"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2016.5.27"
          },
          {
            "_id": "57f55cffd3d589541a000030",
            "contains_binaries": true,
            "node_libraries": [ "Archi-lab_Grimshaw, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "archilabUI, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-prod/33cce993-9d5b-4847-80a9-ee84e2196a9egregPkg381.zip",
            "contents": "Add Revisions to Sheet - This node will add specified revisions to a sheet. , Add Shared Parameter to Project - This node will add a parameter to shared parameter file and then add it to the project. , Cell Style Settings - This node will generate a Cell Style Settings that can be used to override cell properties. , Change Family Type - Changes family type of a family by passing in an Element and type id of the type we want to change it to. , Clear List - This node will remove all Null and Empty Lists from any list. , Color Settings - This node creates color settings for the Analysis Visualization Framework. , Colored Surface Display Style - This node will generate a Colored Surface Display Style from inputs of points, values, and instance surface for analysis to be aplied to. Also, use color and legend settings (part of archi-lab package) to create style colors and visibility., Colored Surface Settings - This node creates settings for the colored surface display style of the Analysis Visualization Framework., Combine by Pattern - Combines two list based on a input pattern of true and false., Create Annotation Tag - This node will create an annotation tag at a given location, of given type and in a supplied view. If only single view is supplied then all tags will be created in that view. , Current Document - Retrieves Current Document, Curve.Level - This node will return a level that a given curve is located on. , Delete Linked Model Keynote Tags - Deletes all Keynote Tags that are tagging elements in the linked model. if element in the linked model has a keynote assigned thus a keynote tag reads a proper value it will not be deleted. , Delete Unnamed Reference Planes - Does just what the name says. , Dispatch - Works exactly like the Dispatch component in Grasshopper. Input a list and a matching pattern of True/False to split list into two lists one containing all True arguments while other all False arguments. , Door Set Handing - Determines door set handing (whether its a left or right handed door). Input takes doors, and output will split them into two lists (right and left)., Duplicate Item Indices - Searches an input list for duplicate entries and lists their index numbers. Couple with Get From List to delete duplicates from a list., Element Ids - This node will query an element id that can be used with Revit nodes. Dynamo Element Id node returns integer value. , Element.IsOfType - This nodes yields true or false, checking if input elements are of given Element Type., Elements Fom Linked File in Room - This node will check what elements from a linked model are inside of any of the rooms in the current model. , Elements in Room - This node will check if any of the elements are inside any of the supplied rooms. , Elements in Space - This node will take an input of Spaces and Elements and attempt to group all elements by Room that it is located in. For elements that are placed by Line and not a Point, a mid point of line will be used to determine location. , Elements on Sheet - This node will return elements on sheet., Export Image by View - This node will export a list of Views and save them as images (JPG, BMP etc)., FamilyInstance.FamilyType - This node will return a  Family Type of a given Family Instance. If no Family Type can be assigned to a Family then it will return Null. , FamilyInstance.TotalTransform - This node returns a Total Transform of a family instance., Fill Pattern - Get Fill Pattern by Name, Filled Region Area - This node will query an area from the filled region, Filled Region Boundary Curves - This node will get the boundary curves for a filled region., Floor.Area - This node return floor area. , FloorPlan.ByRoom - This node takes input of a Room and creates a Floor Plan View with Crop Box set around that room. , Get All Detail Groups - This node will retrieve all instances of Detail Groups in the model., Get All Dimension Styles - This node will query all of the available dimension styles (this includes linear as well as arc, circle etc). , Get All Elements From Linked Model - This node is based on code posted by Julien Benoit. Big thanks to Julien for sharing his work. This node will retrieve all elements of a given category from a given linked model. , Get All Keynote Tags - Selects all Keynote Tags instances in the model. , Get All Line Styles - This node will return all available line styles., Get All Revisions - This node will return all Revisions currently defined in the mode., Get All Viewport Types - This node will retrieve all Viewport Types currently in the model. , Get Built In Parameter - This node will take an input of a built in parameter name and element to return that parameters value. , Get Design Options - Queries all of the design options currently in the project., Get Documents - Queries all linked Revit files and retrieves their Name, LinkInstance and Document properties., Get Filled Regions - This node will query up all Filled Regions in the project as well as those in the active view only. , Get Host Element - This node will retrieve a host element from hosted element. Ex. feed in door, get wall., Get Level by Name - This node will retrieve a Revit Level Element by its name. , Get Line Style by Name - This node will return a line style object by its name. Line styles can be either Drafting or Model Line Property. , Get Rooms by Level - Filters Rooms by level., Get Tagged Element Id - Retrives an Element Id from input of element tags. For example if wall tags are inputted it will return tagged wall Ids., Get Text Note Type by Name - This node will select a text note type by name. , Get Type Parameter - This node will retrieve a type parameter by its name., Get Unplaced Groups - This node will retrieve all unplaced groups in the model., Get Views from View Set - This node will take a name of a view set and return views/sheet elements contained in it. , GH Point to DY Point - Converts CSV Grasshopper export of points into a Dynamo point list. , Group Curves - This node will take any input of flat list of curves and group them into sublists containing \"joinable\" curves that is continous curves. They might form closed curves or open curves. Use PolyCurve.ByJoinedCurves to convert output groups of curves into single PolyCurves, Id to Element - Selects elements in a model from id input (ElementId, string, integer or GUID), Isolate in View - This node will take input of elements and a view to isolate selected elements in a view., Key Schedule - This node will take a key schedule, data and a list of parameters and populate it with infomation from data parameter. Visit www.archi-lab.net for more information on how to prep this node for take off. , Legend Settings - This node sets all settings for the Legend display with Analysis Visualization Framework of Revit. , Level.LevelAbove - This node takes an input of level and returns level above it. , Local Printers Names - This node will query all locally installed printers and return their names., Marker Settings - This node will generate AnalysisDisplayMarkerAndTextSettings to be used with a Marker Analysis Display Style. Inputs are: Marker Shape(Circle, Triangle, Rectangle), Marker Size, Show Text (Boolean), Rounding, TextDisplayMethod (Show All, Show None, Show Predefined). , Marker&Text Display Style - This node will take an input of Points and a matching input of values to create Analysis Display Style in Revit. Use Legend, Marker and Color Settings nodes to fully customize your display style. , Mass Addition - This node will attempt to sum all elements contained within it. , Material.ImportAllFromProject - This node will import (copy) all materials from specified project into current model. By default it will not override existing materials. , Material.MaterialAssetElement - This node retrieves a Material Asset Element from Material. If such is not defined it will return an Invalid Element Id (-1), Material.SetMaterialAssetByAssetId - This node will set the material asset by asset id. Please make sure that the two input lists match in length. , Material.SetMaterialAssetByMaterial - This node will copy a material asset element from source Material to a list of target materials. It esentially makes all materials inherit its Rendering Appearance. Useful for \"clay\" renderings. , New Section Box View By Elements - This node will create new section box around specified elements and apply it to a new 3D View with a specified name. Section box will be offset from the elements by a supplied offset values. , Override Fill Pattern in View - Overrides fill pattern of any element in an active view to specified fill pattern and color, Parameter Group - This node will return all available Parameter Groups, PolyCurve by Profile Family Type - It takes an input of a profile family type and extract curves from it converting them to polycurves and curve segments for use in Dynamo (sweeps)., Print PDF - This node will allow you to initiate a printing routine in revit from a set of views/sheets, printer name, print settings and print range. , Remap UV Domain - This node takes an input of a reference face and a list of UVs that get remapped into that face's UV Domain. The output is a list of UV Coordinates in that surface's domain. , Remove Revision from Sheet - This node will remove specified Revisions from a sheet., Rename Files - This node will use an \"identifier\" to pick out files from a supplied directory to rename files to a new name supplied. Please make sure to match list lengths of identifier and new name inputs., Revision Properties - This node will return some most common Revision properties like Description or Issue Date., Room.AtPoint - This node will attempt to retrieve a room at a given point in model. , Room.Boundaries - This node returns all Room bounding curves and elements that generated them (walls, separation lines etc)., RoomBoundaries.CleanNulls - This node will take a set of room boundary curves and elements and remove nulls from element list while joining curves to mainatain matching list structure. , Rotate Family - This node will rotate a family in Revit around a given axis by supplied angle (in radians). Please remember that every time you run your definition it will rotate family by given angle every time. , Schedule Appearance - This node allows you to control the appearance of the schedule. For now it supports only title, header and body text type. , Schedule Formatting - This node will allow you to control schedule formatiing options like column width, whether a column is hidden, column heading etc. , Schedule Sorting Grouping - This node will allow you to specify sorting/grouping parameters in schedule as well parameters like sorting order, whether its a footer or header. Visit archi-lab.net for more information. , Schedule Title Appearance - This node will override the appearance of the title. , Schedules on Sheets - Queries all schedules and produces two lists: one with all schedules that are placed on sheets and one with schedules that are not placed on sheets., Select Model Lines by Style - This node will select all model lines in the revit project by a line style name. , Set BuiltIn Parameter - This node will take an input of a built in parameter name and set that parameter to given value for given elements. , Set Type Parameter - This node will set a type parameter for an element., Slice String - Slices X number of leading or trailing characters from string (boolean true will slice from left while boolean set to false from right), String From List - This node will take an input of a list or nested list and then join each element in a list with a given seperator while adding a suffix., String.Contains - This node takes a list of strings and checks if any string contains a matching string from filter input. , StructuralFraming.BeamByCurve - This node will take an input of curves and attempt to make a structural framing member by type and level. , Survey Point - This node will retrieve a Survey Point from a Revit model. , Tag Host Element - This node will retrieve an element that is hosting a given tag. , Tag Text - This node will retireve a text content of a tag. , TextNote.ByViewPointAndType - This node creates a unwrapped (single line) text note in a given view, at a given location with a given text note type style assigned. , Transform Origin - This node will query an element for its Transform (Coordinate System) and then return its Origin point. , Transform.ToPoint - This node takes a Transform and an input point that will be translated by the Transform. , View.HideElements - This node will hide elements in specified view., View.UnhideElements - This node will unhide specified elemeints in given views., Viewport Properties - This node will return certain properties from a Viewport input. , Wall.ExteriorDirection - This node returns exterior direction of the wall as a vector.",
            "engine_metadata": "",
            "engine_version": "1.2.0.2654",
            "created": "2016-10-05T20:05:19.715Z",
            "full_dependency_versions": [ "2016.12.1" ],
            "full_dependency_ids": [
              {
                "_id": "53e99ce50e5572016a00018a",
                "name": "archi-lab.net"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2016.12.1"
          },
          {
            "_id": "5838b267fdef23aa6e00001f",
            "contains_binaries": true,
            "node_libraries": [ "Archi-lab_Grimshaw, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "archilabUI, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-prod/78082a6f-4ed7-405f-b050-cd9ac7dddc8fgregPkg673.zip",
            "contents": "Add Revisions to Sheet - This node will add specified revisions to a sheet. , Add Shared Parameter to Project - This node will add a parameter to shared parameter file and then add it to the project. , Cell Style Settings - This node will generate a Cell Style Settings that can be used to override cell properties. , Change Family Type - Changes family type of a family by passing in an Element and type id of the type we want to change it to. , Clear List - This node will remove all Null and Empty Lists from any list. , Color Settings - This node creates color settings for the Analysis Visualization Framework. , Colored Surface Display Style - This node will generate a Colored Surface Display Style from inputs of points, values, and instance surface for analysis to be aplied to. Also, use color and legend settings (part of archi-lab package) to create style colors and visibility., Colored Surface Settings - This node creates settings for the colored surface display style of the Analysis Visualization Framework., Combine by Pattern - Combines two list based on a input pattern of true and false., Create Annotation Tag - This node will create an annotation tag at a given location, of given type and in a supplied view. If only single view is supplied then all tags will be created in that view. , Current Document - Retrieves Current Document, Curve.Level - This node will return a level that a given curve is located on. , Delete Linked Model Keynote Tags - Deletes all Keynote Tags that are tagging elements in the linked model. if element in the linked model has a keynote assigned thus a keynote tag reads a proper value it will not be deleted. , Delete Unnamed Reference Planes - Does just what the name says. , Dispatch - Works exactly like the Dispatch component in Grasshopper. Input a list and a matching pattern of True/False to split list into two lists one containing all True arguments while other all False arguments. , Door Set Handing - Determines door set handing (whether its a left or right handed door). Input takes doors, and output will split them into two lists (right and left)., Duplicate Item Indices - Searches an input list for duplicate entries and lists their index numbers. Couple with Get From List to delete duplicates from a list., Element Ids - This node will query an element id that can be used with Revit nodes. Dynamo Element Id node returns integer value. , Element.IsOfType - This nodes yields true or false, checking if input elements are of given Element Type., Elements Fom Linked File in Room - This node will check what elements from a linked model are inside of any of the rooms in the current model. , Elements in Room - This node will check if any of the elements are inside any of the supplied rooms. , Elements in Space - This node will take an input of Spaces and Elements and attempt to group all elements by Room that it is located in. For elements that are placed by Line and not a Point, a mid point of line will be used to determine location. , Elements on Sheet - This node will return elements on sheet., Export Image by View - This node will export a list of Views and save them as images (JPG, BMP etc)., FamilyInstance.FamilyType - This node will return a  Family Type of a given Family Instance. If no Family Type can be assigned to a Family then it will return Null. , FamilyInstance.TotalTransform - This node returns a Total Transform of a family instance., Fill Pattern - Get Fill Pattern by Name, Filled Region Area - This node will query an area from the filled region, Filled Region Boundary Curves - This node will get the boundary curves for a filled region., Floor.Area - This node return floor area. , FloorPlan.ByRoom - This node takes input of a Room and creates a Floor Plan View with Crop Box set around that room. , Get All Detail Groups - This node will retrieve all instances of Detail Groups in the model., Get All Dimension Styles - This node will query all of the available dimension styles (this includes linear as well as arc, circle etc). , Get All Elements From Linked Model - This node is based on code posted by Julien Benoit. Big thanks to Julien for sharing his work. This node will retrieve all elements of a given category from a given linked model. , Get All Keynote Tags - Selects all Keynote Tags instances in the model. , Get All Line Styles - This node will return all available line styles., Get All Revisions - This node will return all Revisions currently defined in the mode., Get All Viewport Types - This node will retrieve all Viewport Types currently in the model. , Get Built In Parameter - This node will take an input of a built in parameter name and element to return that parameters value. , Get Design Options - Queries all of the design options currently in the project., Get Documents - Queries all linked Revit files and retrieves their Name, LinkInstance and Document properties., Get Filled Regions - This node will query up all Filled Regions in the project as well as those in the active view only. , Get Host Element - This node will retrieve a host element from hosted element. Ex. feed in door, get wall., Get Level by Name - This node will retrieve a Revit Level Element by its name. , Get Line Style by Name - This node will return a line style object by its name. Line styles can be either Drafting or Model Line Property. , Get Rooms by Level - Filters Rooms by level., Get Tagged Element Id - Retrives an Element Id from input of element tags. For example if wall tags are inputted it will return tagged wall Ids., Get Text Note Type by Name - This node will select a text note type by name. , Get Type Parameter - This node will retrieve a type parameter by its name., Get Unplaced Groups - This node will retrieve all unplaced groups in the model., Get Views from View Set - This node will take a name of a view set and return views/sheet elements contained in it. , GH Point to DY Point - Converts CSV Grasshopper export of points into a Dynamo point list. , Group Curves - This node will take any input of flat list of curves and group them into sublists containing \"joinable\" curves that is continous curves. They might form closed curves or open curves. Use PolyCurve.ByJoinedCurves to convert output groups of curves into single PolyCurves, Id to Element - Selects elements in a model from id input (ElementId, string, integer or GUID), Isolate in View - This node will take input of elements and a view to isolate selected elements in a view., Key Schedule - This node will take a key schedule, data and a list of parameters and populate it with infomation from data parameter. Visit www.archi-lab.net for more information on how to prep this node for take off. , Legend Settings - This node sets all settings for the Legend display with Analysis Visualization Framework of Revit. , Level.LevelAbove - This node takes an input of level and returns level above it. , Local Printers Names - This node will query all locally installed printers and return their names., Marker Settings - This node will generate AnalysisDisplayMarkerAndTextSettings to be used with a Marker Analysis Display Style. Inputs are: Marker Shape(Circle, Triangle, Rectangle), Marker Size, Show Text (Boolean), Rounding, TextDisplayMethod (Show All, Show None, Show Predefined). , Marker&Text Display Style - This node will take an input of Points and a matching input of values to create Analysis Display Style in Revit. Use Legend, Marker and Color Settings nodes to fully customize your display style. , Mass Addition - This node will attempt to sum all elements contained within it. , Material.ImportAllFromProject - This node will import (copy) all materials from specified project into current model. By default it will not override existing materials. , Material.MaterialAssetElement - This node retrieves a Material Asset Element from Material. If such is not defined it will return an Invalid Element Id (-1), Material.SetMaterialAssetByAssetId - This node will set the material asset by asset id. Please make sure that the two input lists match in length. , Material.SetMaterialAssetByMaterial - This node will copy a material asset element from source Material to a list of target materials. It esentially makes all materials inherit its Rendering Appearance. Useful for \"clay\" renderings. , New Section Box View By Elements - This node will create new section box around specified elements and apply it to a new 3D View with a specified name. Section box will be offset from the elements by a supplied offset values. , Override Fill Pattern in View - Overrides fill pattern of any element in an active view to specified fill pattern and color, Parameter Group - This node will return all available Parameter Groups, PolyCurve by Profile Family Type - It takes an input of a profile family type and extract curves from it converting them to polycurves and curve segments for use in Dynamo (sweeps)., Print PDF - This node will allow you to initiate a printing routine in revit from a set of views/sheets, printer name, print settings and print range. , Remap UV Domain - This node takes an input of a reference face and a list of UVs that get remapped into that face's UV Domain. The output is a list of UV Coordinates in that surface's domain. , Remove Revision from Sheet - This node will remove specified Revisions from a sheet., Rename Files - This node will use an \"identifier\" to pick out files from a supplied directory to rename files to a new name supplied. Please make sure to match list lengths of identifier and new name inputs., Revision Properties - This node will return some most common Revision properties like Description or Issue Date., Room.AtPoint - This node will attempt to retrieve a room at a given point in model. , Room.Boundaries - This node returns all Room bounding curves and elements that generated them (walls, separation lines etc)., RoomBoundaries.CleanNulls - This node will take a set of room boundary curves and elements and remove nulls from element list while joining curves to mainatain matching list structure. , Rotate Family - This node will rotate a family in Revit around a given axis by supplied angle (in radians). Please remember that every time you run your definition it will rotate family by given angle every time. , Schedule Appearance - This node allows you to control the appearance of the schedule. For now it supports only title, header and body text type. , Schedule Formatting - This node will allow you to control schedule formatiing options like column width, whether a column is hidden, column heading etc. , Schedule Sorting Grouping - This node will allow you to specify sorting/grouping parameters in schedule as well parameters like sorting order, whether its a footer or header. Visit archi-lab.net for more information. , Schedule Title Appearance - This node will override the appearance of the title. , Schedules on Sheets - Queries all schedules and produces two lists: one with all schedules that are placed on sheets and one with schedules that are not placed on sheets., Select Model Lines by Style - This node will select all model lines in the revit project by a line style name. , Set BuiltIn Parameter - This node will take an input of a built in parameter name and set that parameter to given value for given elements. , Set Type Parameter - This node will set a type parameter for an element., Slice String - Slices X number of leading or trailing characters from string (boolean true will slice from left while boolean set to false from right), String From List - This node will take an input of a list or nested list and then join each element in a list with a given seperator while adding a suffix., String.Contains - This node takes a list of strings and checks if any string contains a matching string from filter input. , StructuralFraming.BeamByCurve - This node will take an input of curves and attempt to make a structural framing member by type and level. , Survey Point - This node will retrieve a Survey Point from a Revit model. , Tag Host Element - This node will retrieve an element that is hosting a given tag. , Tag Text - This node will retireve a text content of a tag. , TextNote.ByViewPointAndType - This node creates a unwrapped (single line) text note in a given view, at a given location with a given text note type style assigned. , Transform Origin - This node will query an element for its Transform (Coordinate System) and then return its Origin point. , Transform.ToPoint - This node takes a Transform and an input point that will be translated by the Transform. , View.HideElements - This node will hide elements in specified view., View.UnhideElements - This node will unhide specified elemeints in given views., Viewport Properties - This node will return certain properties from a Viewport input. , Wall.ExteriorDirection - This node returns exterior direction of the wall as a vector.",
            "engine_metadata": "",
            "engine_version": "1.2.1.3187",
            "created": "2016-11-25T21:51:35.254Z",
            "full_dependency_versions": [ "2016.12.2" ],
            "full_dependency_ids": [
              {
                "_id": "53e99ce50e5572016a00018a",
                "name": "archi-lab.net"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2016.12.2"
          },
          {
            "_id": "583df0acfdef23aa6e00003c",
            "contains_binaries": true,
            "node_libraries": [ "Archi-lab_Grimshaw, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "archilabUI, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-prod/b88e3ce8-0209-405a-b8b3-be42c613d73cgregPkg870.zip",
            "contents": "Add Revisions to Sheet - This node will add specified revisions to a sheet. , Add Shared Parameter to Project - This node will add a parameter to shared parameter file and then add it to the project. , Cell Style Settings - This node will generate a Cell Style Settings that can be used to override cell properties. , Change Family Type - Changes family type of a family by passing in an Element and type id of the type we want to change it to. , Clear List - This node will remove all Null and Empty Lists from any list. , Color Settings - This node creates color settings for the Analysis Visualization Framework. , Colored Surface Display Style - This node will generate a Colored Surface Display Style from inputs of points, values, and instance surface for analysis to be aplied to. Also, use color and legend settings (part of archi-lab package) to create style colors and visibility., Colored Surface Settings - This node creates settings for the colored surface display style of the Analysis Visualization Framework., Combine by Pattern - Combines two list based on a input pattern of true and false., Create Annotation Tag - This node will create an annotation tag at a given location, of given type and in a supplied view. If only single view is supplied then all tags will be created in that view. , Current Document - Retrieves Current Document, Curve.Level - This node will return a level that a given curve is located on. , Delete Linked Model Keynote Tags - Deletes all Keynote Tags that are tagging elements in the linked model. if element in the linked model has a keynote assigned thus a keynote tag reads a proper value it will not be deleted. , Delete Unnamed Reference Planes - Does just what the name says. , Dispatch - Works exactly like the Dispatch component in Grasshopper. Input a list and a matching pattern of True/False to split list into two lists one containing all True arguments while other all False arguments. , Door Set Handing - Determines door set handing (whether its a left or right handed door). Input takes doors, and output will split them into two lists (right and left)., Duplicate Item Indices - Searches an input list for duplicate entries and lists their index numbers. Couple with Get From List to delete duplicates from a list., Element Ids - This node will query an element id that can be used with Revit nodes. Dynamo Element Id node returns integer value. , Element.IsOfType - This nodes yields true or false, checking if input elements are of given Element Type., Elements Fom Linked File in Room - This node will check what elements from a linked model are inside of any of the rooms in the current model. , Elements in Room - This node will check if any of the elements are inside any of the supplied rooms. , Elements in Space - This node will take an input of Spaces and Elements and attempt to group all elements by Room that it is located in. For elements that are placed by Line and not a Point, a mid point of line will be used to determine location. , Elements on Sheet - This node will return elements on sheet., Export Image by View - This node will export a list of Views and save them as images (JPG, BMP etc)., FamilyInstance.FamilyType - This node will return a  Family Type of a given Family Instance. If no Family Type can be assigned to a Family then it will return Null. , FamilyInstance.TotalTransform - This node returns a Total Transform of a family instance., Fill Pattern - Get Fill Pattern by Name, Filled Region Area - This node will query an area from the filled region, Filled Region Boundary Curves - This node will get the boundary curves for a filled region., Floor.Area - This node return floor area. , FloorPlan.ByRoom - This node takes input of a Room and creates a Floor Plan View with Crop Box set around that room. , Get All Detail Groups - This node will retrieve all instances of Detail Groups in the model., Get All Dimension Styles - This node will query all of the available dimension styles (this includes linear as well as arc, circle etc). , Get All Elements From Linked Model - This node is based on code posted by Julien Benoit. Big thanks to Julien for sharing his work. This node will retrieve all elements of a given category from a given linked model. , Get All Keynote Tags - Selects all Keynote Tags instances in the model. , Get All Line Styles - This node will return all available line styles., Get All Revisions - This node will return all Revisions currently defined in the mode., Get All Viewport Types - This node will retrieve all Viewport Types currently in the model. , Get Built In Parameter - This node will take an input of a built in parameter name and element to return that parameters value. , Get Design Options - Queries all of the design options currently in the project., Get Documents - Queries all linked Revit files and retrieves their Name, LinkInstance and Document properties., Get Filled Regions - This node will query up all Filled Regions in the project as well as those in the active view only. , Get Host Element - This node will retrieve a host element from hosted element. Ex. feed in door, get wall., Get Level by Name - This node will retrieve a Revit Level Element by its name. , Get Line Style by Name - This node will return a line style object by its name. Line styles can be either Drafting or Model Line Property. , Get Rooms by Level - Filters Rooms by level., Get Tagged Element Id - Retrives an Element Id from input of element tags. For example if wall tags are inputted it will return tagged wall Ids., Get Text Note Type by Name - This node will select a text note type by name. , Get Type Parameter - This node will retrieve a type parameter by its name., Get Unplaced Groups - This node will retrieve all unplaced groups in the model., Get Views from View Set - This node will take a name of a view set and return views/sheet elements contained in it. , GH Point to DY Point - Converts CSV Grasshopper export of points into a Dynamo point list. , Group Curves - This node will take any input of flat list of curves and group them into sublists containing \"joinable\" curves that is continous curves. They might form closed curves or open curves. Use PolyCurve.ByJoinedCurves to convert output groups of curves into single PolyCurves, Id to Element - Selects elements in a model from id input (ElementId, string, integer or GUID), Isolate in View - This node will take input of elements and a view to isolate selected elements in a view., Key Schedule - This node will take a key schedule, data and a list of parameters and populate it with infomation from data parameter. Visit www.archi-lab.net for more information on how to prep this node for take off. , Legend Settings - This node sets all settings for the Legend display with Analysis Visualization Framework of Revit. , Level.LevelAbove - This node takes an input of level and returns level above it. , Local Printers Names - This node will query all locally installed printers and return their names., Marker Settings - This node will generate AnalysisDisplayMarkerAndTextSettings to be used with a Marker Analysis Display Style. Inputs are: Marker Shape(Circle, Triangle, Rectangle), Marker Size, Show Text (Boolean), Rounding, TextDisplayMethod (Show All, Show None, Show Predefined). , Marker&Text Display Style - This node will take an input of Points and a matching input of values to create Analysis Display Style in Revit. Use Legend, Marker and Color Settings nodes to fully customize your display style. , Mass Addition - This node will attempt to sum all elements contained within it. , Material.ImportAllFromProject - This node will import (copy) all materials from specified project into current model. By default it will not override existing materials. , Material.MaterialAssetElement - This node retrieves a Material Asset Element from Material. If such is not defined it will return an Invalid Element Id (-1), Material.SetMaterialAssetByAssetId - This node will set the material asset by asset id. Please make sure that the two input lists match in length. , Material.SetMaterialAssetByMaterial - This node will copy a material asset element from source Material to a list of target materials. It esentially makes all materials inherit its Rendering Appearance. Useful for \"clay\" renderings. , New Section Box View By Elements - This node will create new section box around specified elements and apply it to a new 3D View with a specified name. Section box will be offset from the elements by a supplied offset values. , Override Fill Pattern in View - Overrides fill pattern of any element in an active view to specified fill pattern and color, Parameter Group - This node will return all available Parameter Groups, PolyCurve by Profile Family Type - It takes an input of a profile family type and extract curves from it converting them to polycurves and curve segments for use in Dynamo (sweeps)., Print PDF - This node will allow you to initiate a printing routine in revit from a set of views/sheets, printer name, print settings and print range. , Remap UV Domain - This node takes an input of a reference face and a list of UVs that get remapped into that face's UV Domain. The output is a list of UV Coordinates in that surface's domain. , Remove Revision from Sheet - This node will remove specified Revisions from a sheet., Rename Files - This node will use an \"identifier\" to pick out files from a supplied directory to rename files to a new name supplied. Please make sure to match list lengths of identifier and new name inputs., Revision Properties - This node will return some most common Revision properties like Description or Issue Date., Room.AtPoint - This node will attempt to retrieve a room at a given point in model. , Room.Boundaries - This node returns all Room bounding curves and elements that generated them (walls, separation lines etc)., RoomBoundaries.CleanNulls - This node will take a set of room boundary curves and elements and remove nulls from element list while joining curves to mainatain matching list structure. , Rotate Family - This node will rotate a family in Revit around a given axis by supplied angle (in radians). Please remember that every time you run your definition it will rotate family by given angle every time. , Schedule Appearance - This node allows you to control the appearance of the schedule. For now it supports only title, header and body text type. , Schedule Formatting - This node will allow you to control schedule formatiing options like column width, whether a column is hidden, column heading etc. , Schedule Sorting Grouping - This node will allow you to specify sorting/grouping parameters in schedule as well parameters like sorting order, whether its a footer or header. Visit archi-lab.net for more information. , Schedule Title Appearance - This node will override the appearance of the title. , Schedules on Sheets - Queries all schedules and produces two lists: one with all schedules that are placed on sheets and one with schedules that are not placed on sheets., Select Model Lines by Style - This node will select all model lines in the revit project by a line style name. , Set BuiltIn Parameter - This node will take an input of a built in parameter name and set that parameter to given value for given elements. , Set Type Parameter - This node will set a type parameter for an element., Slice String - Slices X number of leading or trailing characters from string (boolean true will slice from left while boolean set to false from right), String From List - This node will take an input of a list or nested list and then join each element in a list with a given seperator while adding a suffix., String.Contains - This node takes a list of strings and checks if any string contains a matching string from filter input. , StructuralFraming.BeamByCurve - This node will take an input of curves and attempt to make a structural framing member by type and level. , Survey Point - This node will retrieve a Survey Point from a Revit model. , Tag Host Element - This node will retrieve an element that is hosting a given tag. , Tag Text - This node will retireve a text content of a tag. , TextNote.ByViewPointAndType - This node creates a unwrapped (single line) text note in a given view, at a given location with a given text note type style assigned. , Transform Origin - This node will query an element for its Transform (Coordinate System) and then return its Origin point. , Transform.ToPoint - This node takes a Transform and an input point that will be translated by the Transform. , View.HideElements - This node will hide elements in specified view., View.UnhideElements - This node will unhide specified elemeints in given views., Viewport Properties - This node will return certain properties from a Viewport input. , Wall.ExteriorDirection - This node returns exterior direction of the wall as a vector.",
            "engine_metadata": "",
            "engine_version": "1.2.0.2690",
            "created": "2016-11-29T21:18:36.254Z",
            "full_dependency_versions": [ "2016.12.3" ],
            "full_dependency_ids": [
              {
                "_id": "53e99ce50e5572016a00018a",
                "name": "archi-lab.net"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2016.12.3"
          },
          {
            "_id": "583e1005fdef23aa6e00003d",
            "contains_binaries": true,
            "node_libraries": [ "Archi-lab_Grimshaw, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "archilabUI, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-prod/b2c71f2b-e579-4d20-ac49-7a0416e8a063gregPkg402.zip",
            "contents": "Add Revisions to Sheet - This node will add specified revisions to a sheet. , Add Shared Parameter to Project - This node will add a parameter to shared parameter file and then add it to the project. , Cell Style Settings - This node will generate a Cell Style Settings that can be used to override cell properties. , Change Family Type - Changes family type of a family by passing in an Element and type id of the type we want to change it to. , Clear List - This node will remove all Null and Empty Lists from any list. , Color Settings - This node creates color settings for the Analysis Visualization Framework. , Colored Surface Display Style - This node will generate a Colored Surface Display Style from inputs of points, values, and instance surface for analysis to be aplied to. Also, use color and legend settings (part of archi-lab package) to create style colors and visibility., Colored Surface Settings - This node creates settings for the colored surface display style of the Analysis Visualization Framework., Combine by Pattern - Combines two list based on a input pattern of true and false., Create Annotation Tag - This node will create an annotation tag at a given location, of given type and in a supplied view. If only single view is supplied then all tags will be created in that view. , Current Document - Retrieves Current Document, Curve.Level - This node will return a level that a given curve is located on. , Delete Linked Model Keynote Tags - Deletes all Keynote Tags that are tagging elements in the linked model. if element in the linked model has a keynote assigned thus a keynote tag reads a proper value it will not be deleted. , Delete Unnamed Reference Planes - Does just what the name says. , Dispatch - Works exactly like the Dispatch component in Grasshopper. Input a list and a matching pattern of True/False to split list into two lists one containing all True arguments while other all False arguments. , Door Set Handing - Determines door set handing (whether its a left or right handed door). Input takes doors, and output will split them into two lists (right and left)., Duplicate Item Indices - Searches an input list for duplicate entries and lists their index numbers. Couple with Get From List to delete duplicates from a list., Element Ids - This node will query an element id that can be used with Revit nodes. Dynamo Element Id node returns integer value. , Element.IsOfType - This nodes yields true or false, checking if input elements are of given Element Type., Elements Fom Linked File in Room - This node will check what elements from a linked model are inside of any of the rooms in the current model. , Elements in Room - This node will check if any of the elements are inside any of the supplied rooms. , Elements in Space - This node will take an input of Spaces and Elements and attempt to group all elements by Room that it is located in. For elements that are placed by Line and not a Point, a mid point of line will be used to determine location. , Elements on Sheet - This node will return elements on sheet., Export Image by View - This node will export a list of Views and save them as images (JPG, BMP etc)., FamilyInstance.FamilyType - This node will return a  Family Type of a given Family Instance. If no Family Type can be assigned to a Family then it will return Null. , FamilyInstance.TotalTransform - This node returns a Total Transform of a family instance., Fill Pattern - Get Fill Pattern by Name, Filled Region Area - This node will query an area from the filled region, Filled Region Boundary Curves - This node will get the boundary curves for a filled region., Floor.Area - This node return floor area. , FloorPlan.ByRoom - This node takes input of a Room and creates a Floor Plan View with Crop Box set around that room. , Get All Detail Groups - This node will retrieve all instances of Detail Groups in the model., Get All Dimension Styles - This node will query all of the available dimension styles (this includes linear as well as arc, circle etc). , Get All Elements From Linked Model - This node is based on code posted by Julien Benoit. Big thanks to Julien for sharing his work. This node will retrieve all elements of a given category from a given linked model. , Get All Keynote Tags - Selects all Keynote Tags instances in the model. , Get All Line Styles - This node will return all available line styles., Get All Revisions - This node will return all Revisions currently defined in the mode., Get All Viewport Types - This node will retrieve all Viewport Types currently in the model. , Get Built In Parameter - This node will take an input of a built in parameter name and element to return that parameters value. , Get Design Options - Queries all of the design options currently in the project., Get Documents - Queries all linked Revit files and retrieves their Name, LinkInstance and Document properties., Get Filled Regions - This node will query up all Filled Regions in the project as well as those in the active view only. , Get Host Element - This node will retrieve a host element from hosted element. Ex. feed in door, get wall., Get Level by Name - This node will retrieve a Revit Level Element by its name. , Get Line Style by Name - This node will return a line style object by its name. Line styles can be either Drafting or Model Line Property. , Get Rooms by Level - Filters Rooms by level., Get Tagged Element Id - Retrives an Element Id from input of element tags. For example if wall tags are inputted it will return tagged wall Ids., Get Text Note Type by Name - This node will select a text note type by name. , Get Type Parameter - This node will retrieve a type parameter by its name., Get Unplaced Groups - This node will retrieve all unplaced groups in the model., Get Views from View Set - This node will take a name of a view set and return views/sheet elements contained in it. , GH Point to DY Point - Converts CSV Grasshopper export of points into a Dynamo point list. , Group Curves - This node will take any input of flat list of curves and group them into sublists containing \"joinable\" curves that is continous curves. They might form closed curves or open curves. Use PolyCurve.ByJoinedCurves to convert output groups of curves into single PolyCurves, Id to Element - Selects elements in a model from id input (ElementId, string, integer or GUID), Isolate in View - This node will take input of elements and a view to isolate selected elements in a view., Key Schedule - This node will take a key schedule, data and a list of parameters and populate it with infomation from data parameter. Visit www.archi-lab.net for more information on how to prep this node for take off. , Legend Settings - This node sets all settings for the Legend display with Analysis Visualization Framework of Revit. , Level.LevelAbove - This node takes an input of level and returns level above it. , Local Printers Names - This node will query all locally installed printers and return their names., Marker Settings - This node will generate AnalysisDisplayMarkerAndTextSettings to be used with a Marker Analysis Display Style. Inputs are: Marker Shape(Circle, Triangle, Rectangle), Marker Size, Show Text (Boolean), Rounding, TextDisplayMethod (Show All, Show None, Show Predefined). , Marker&Text Display Style - This node will take an input of Points and a matching input of values to create Analysis Display Style in Revit. Use Legend, Marker and Color Settings nodes to fully customize your display style. , Mass Addition - This node will attempt to sum all elements contained within it. , Material.ImportAllFromProject - This node will import (copy) all materials from specified project into current model. By default it will not override existing materials. , Material.MaterialAssetElement - This node retrieves a Material Asset Element from Material. If such is not defined it will return an Invalid Element Id (-1), Material.SetMaterialAssetByAssetId - This node will set the material asset by asset id. Please make sure that the two input lists match in length. , Material.SetMaterialAssetByMaterial - This node will copy a material asset element from source Material to a list of target materials. It esentially makes all materials inherit its Rendering Appearance. Useful for \"clay\" renderings. , New Section Box View By Elements - This node will create new section box around specified elements and apply it to a new 3D View with a specified name. Section box will be offset from the elements by a supplied offset values. , Override Fill Pattern in View - Overrides fill pattern of any element in an active view to specified fill pattern and color, Parameter Group - This node will return all available Parameter Groups, PolyCurve by Profile Family Type - It takes an input of a profile family type and extract curves from it converting them to polycurves and curve segments for use in Dynamo (sweeps)., Print PDF - This node will allow you to initiate a printing routine in revit from a set of views/sheets, printer name, print settings and print range. , Remap UV Domain - This node takes an input of a reference face and a list of UVs that get remapped into that face's UV Domain. The output is a list of UV Coordinates in that surface's domain. , Remove Revision from Sheet - This node will remove specified Revisions from a sheet., Rename Files - This node will use an \"identifier\" to pick out files from a supplied directory to rename files to a new name supplied. Please make sure to match list lengths of identifier and new name inputs., Revision Properties - This node will return some most common Revision properties like Description or Issue Date., Room.AtPoint - This node will attempt to retrieve a room at a given point in model. , Room.Boundaries - This node returns all Room bounding curves and elements that generated them (walls, separation lines etc)., RoomBoundaries.CleanNulls - This node will take a set of room boundary curves and elements and remove nulls from element list while joining curves to mainatain matching list structure. , Rotate Family - This node will rotate a family in Revit around a given axis by supplied angle (in radians). Please remember that every time you run your definition it will rotate family by given angle every time. , Schedule Appearance - This node allows you to control the appearance of the schedule. For now it supports only title, header and body text type. , Schedule Formatting - This node will allow you to control schedule formatiing options like column width, whether a column is hidden, column heading etc. , Schedule Sorting Grouping - This node will allow you to specify sorting/grouping parameters in schedule as well parameters like sorting order, whether its a footer or header. Visit archi-lab.net for more information. , Schedule Title Appearance - This node will override the appearance of the title. , Schedules on Sheets - Queries all schedules and produces two lists: one with all schedules that are placed on sheets and one with schedules that are not placed on sheets., Select Model Lines by Style - This node will select all model lines in the revit project by a line style name. , Set BuiltIn Parameter - This node will take an input of a built in parameter name and set that parameter to given value for given elements. , Set Type Parameter - This node will set a type parameter for an element., Slice String - Slices X number of leading or trailing characters from string (boolean true will slice from left while boolean set to false from right), String From List - This node will take an input of a list or nested list and then join each element in a list with a given seperator while adding a suffix., String.Contains - This node takes a list of strings and checks if any string contains a matching string from filter input. , StructuralFraming.BeamByCurve - This node will take an input of curves and attempt to make a structural framing member by type and level. , Survey Point - This node will retrieve a Survey Point from a Revit model. , Tag Host Element - This node will retrieve an element that is hosting a given tag. , Tag Text - This node will retireve a text content of a tag. , TextNote.ByViewPointAndType - This node creates a unwrapped (single line) text note in a given view, at a given location with a given text note type style assigned. , Transform Origin - This node will query an element for its Transform (Coordinate System) and then return its Origin point. , Transform.ToPoint - This node takes a Transform and an input point that will be translated by the Transform. , View.HideElements - This node will hide elements in specified view., View.UnhideElements - This node will unhide specified elemeints in given views., Viewport Properties - This node will return certain properties from a Viewport input. , Wall.ExteriorDirection - This node returns exterior direction of the wall as a vector.",
            "engine_metadata": "",
            "engine_version": "1.2.0.2690",
            "created": "2016-11-29T23:32:21.046Z",
            "full_dependency_versions": [ "2016.12.4" ],
            "full_dependency_ids": [
              {
                "_id": "53e99ce50e5572016a00018a",
                "name": "archi-lab.net"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2016.12.4"
          },
          {
            "_id": "585353f5fdef23aa6e000135",
            "contains_binaries": true,
            "node_libraries": [ "Archi-lab_Grimshaw, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "archilabUI, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-prod/2b611a3a-f9f1-4c7c-bdef-bd85e6d1e8cagregPkg142.zip",
            "contents": "Add Revisions to Sheet - This node will add specified revisions to a sheet. , Add Shared Parameter to Project - This node will add a parameter to shared parameter file and then add it to the project. , Cell Style Settings - This node will generate a Cell Style Settings that can be used to override cell properties. , Change Family Type - Changes family type of a family by passing in an Element and type id of the type we want to change it to. , Clear List - This node will remove all Null and Empty Lists from any list. , Color Settings - This node creates color settings for the Analysis Visualization Framework. , Colored Surface Display Style - This node will generate a Colored Surface Display Style from inputs of points, values, and instance surface for analysis to be aplied to. Also, use color and legend settings (part of archi-lab package) to create style colors and visibility., Colored Surface Settings - This node creates settings for the colored surface display style of the Analysis Visualization Framework., Combine by Pattern - Combines two list based on a input pattern of true and false., Create Annotation Tag - This node will create an annotation tag at a given location, of given type and in a supplied view. If only single view is supplied then all tags will be created in that view. , Current Document - Retrieves Current Document, Curve.Level - This node will return a level that a given curve is located on. , Delete Linked Model Keynote Tags - Deletes all Keynote Tags that are tagging elements in the linked model. if element in the linked model has a keynote assigned thus a keynote tag reads a proper value it will not be deleted. , Delete Unnamed Reference Planes - Does just what the name says. , Dispatch - Works exactly like the Dispatch component in Grasshopper. Input a list and a matching pattern of True/False to split list into two lists one containing all True arguments while other all False arguments. , Door Set Handing - Determines door set handing (whether its a left or right handed door). Input takes doors, and output will split them into two lists (right and left)., Duplicate Item Indices - Searches an input list for duplicate entries and lists their index numbers. Couple with Get From List to delete duplicates from a list., Element Ids - This node will query an element id that can be used with Revit nodes. Dynamo Element Id node returns integer value. , Element.IsOfType - This nodes yields true or false, checking if input elements are of given Element Type., Elements Fom Linked File in Room - This node will check what elements from a linked model are inside of any of the rooms in the current model. , Elements in Room - This node will check if any of the elements are inside any of the supplied rooms. , Elements in Space - This node will take an input of Spaces and Elements and attempt to group all elements by Room that it is located in. For elements that are placed by Line and not a Point, a mid point of line will be used to determine location. , Elements on Sheet - This node will return elements on sheet., Export Image by View - This node will export a list of Views and save them as images (JPG, BMP etc)., FamilyInstance.FamilyType - This node will return a  Family Type of a given Family Instance. If no Family Type can be assigned to a Family then it will return Null. , FamilyInstance.TotalTransform - This node returns a Total Transform of a family instance., Fill Pattern - Get Fill Pattern by Name, Filled Region Area - This node will query an area from the filled region, Filled Region Boundary Curves - This node will get the boundary curves for a filled region., Floor.Area - This node return floor area. , FloorPlan.ByRoom - This node takes input of a Room and creates a Floor Plan View with Crop Box set around that room. , Get All Detail Groups - This node will retrieve all instances of Detail Groups in the model., Get All Dimension Styles - This node will query all of the available dimension styles (this includes linear as well as arc, circle etc). , Get All Elements From Linked Model - This node is based on code posted by Julien Benoit. Big thanks to Julien for sharing his work. This node will retrieve all elements of a given category from a given linked model. , Get All Keynote Tags - Selects all Keynote Tags instances in the model. , Get All Line Styles - This node will return all available line styles., Get All Revisions - This node will return all Revisions currently defined in the mode., Get All Viewport Types - This node will retrieve all Viewport Types currently in the model. , Get Built In Parameter - This node will take an input of a built in parameter name and element to return that parameters value. , Get Design Options - Queries all of the design options currently in the project., Get Documents - Queries all linked Revit files and retrieves their Name, LinkInstance and Document properties., Get Filled Regions - This node will query up all Filled Regions in the project as well as those in the active view only. , Get Host Element - This node will retrieve a host element from hosted element. Ex. feed in door, get wall., Get Level by Name - This node will retrieve a Revit Level Element by its name. , Get Line Style by Name - This node will return a line style object by its name. Line styles can be either Drafting or Model Line Property. , Get Rooms by Level - Filters Rooms by level., Get Tagged Element Id - Retrives an Element Id from input of element tags. For example if wall tags are inputted it will return tagged wall Ids., Get Text Note Type by Name - This node will select a text note type by name. , Get Type Parameter - This node will retrieve a type parameter by its name., Get Unplaced Groups - This node will retrieve all unplaced groups in the model., Get Views from View Set - This node will take a name of a view set and return views/sheet elements contained in it. , GH Point to DY Point - Converts CSV Grasshopper export of points into a Dynamo point list. , Group Curves - This node will take any input of flat list of curves and group them into sublists containing \"joinable\" curves that is continous curves. They might form closed curves or open curves. Use PolyCurve.ByJoinedCurves to convert output groups of curves into single PolyCurves, Id to Element - Selects elements in a model from id input (ElementId, string, integer or GUID), Isolate in View - This node will take input of elements and a view to isolate selected elements in a view., Key Schedule - This node will take a key schedule, data and a list of parameters and populate it with infomation from data parameter. Visit www.archi-lab.net for more information on how to prep this node for take off. , Legend Settings - This node sets all settings for the Legend display with Analysis Visualization Framework of Revit. , Level.LevelAbove - This node takes an input of level and returns level above it. , Local Printers Names - This node will query all locally installed printers and return their names., Marker Settings - This node will generate AnalysisDisplayMarkerAndTextSettings to be used with a Marker Analysis Display Style. Inputs are: Marker Shape(Circle, Triangle, Rectangle), Marker Size, Show Text (Boolean), Rounding, TextDisplayMethod (Show All, Show None, Show Predefined). , Marker&Text Display Style - This node will take an input of Points and a matching input of values to create Analysis Display Style in Revit. Use Legend, Marker and Color Settings nodes to fully customize your display style. , Mass Addition - This node will attempt to sum all elements contained within it. , Material.ImportAllFromProject - This node will import (copy) all materials from specified project into current model. By default it will not override existing materials. , Material.MaterialAssetElement - This node retrieves a Material Asset Element from Material. If such is not defined it will return an Invalid Element Id (-1), Material.SetMaterialAssetByAssetId - This node will set the material asset by asset id. Please make sure that the two input lists match in length. , Material.SetMaterialAssetByMaterial - This node will copy a material asset element from source Material to a list of target materials. It esentially makes all materials inherit its Rendering Appearance. Useful for \"clay\" renderings. , New Section Box View By Elements - This node will create new section box around specified elements and apply it to a new 3D View with a specified name. Section box will be offset from the elements by a supplied offset values. , Override Fill Pattern in View - Overrides fill pattern of any element in an active view to specified fill pattern and color, Parameter Group - This node will return all available Parameter Groups, PolyCurve by Profile Family Type - It takes an input of a profile family type and extract curves from it converting them to polycurves and curve segments for use in Dynamo (sweeps)., Print PDF - This node will allow you to initiate a printing routine in revit from a set of views/sheets, printer name, print settings and print range. , Remap UV Domain - This node takes an input of a reference face and a list of UVs that get remapped into that face's UV Domain. The output is a list of UV Coordinates in that surface's domain. , Remove Revision from Sheet - This node will remove specified Revisions from a sheet., Rename Files - This node will use an \"identifier\" to pick out files from a supplied directory to rename files to a new name supplied. Please make sure to match list lengths of identifier and new name inputs., Revision Properties - This node will return some most common Revision properties like Description or Issue Date., Room.AtPoint - This node will attempt to retrieve a room at a given point in model. , Room.Boundaries - This node returns all Room bounding curves and elements that generated them (walls, separation lines etc)., RoomBoundaries.CleanNulls - This node will take a set of room boundary curves and elements and remove nulls from element list while joining curves to mainatain matching list structure. , Rotate Family - This node will rotate a family in Revit around a given axis by supplied angle (in radians). Please remember that every time you run your definition it will rotate family by given angle every time. , Schedule Appearance - This node allows you to control the appearance of the schedule. For now it supports only title, header and body text type. , Schedule Formatting - This node will allow you to control schedule formatiing options like column width, whether a column is hidden, column heading etc. , Schedule Sorting Grouping - This node will allow you to specify sorting/grouping parameters in schedule as well parameters like sorting order, whether its a footer or header. Visit archi-lab.net for more information. , Schedule Title Appearance - This node will override the appearance of the title. , Schedules on Sheets - Queries all schedules and produces two lists: one with all schedules that are placed on sheets and one with schedules that are not placed on sheets., Select Model Lines by Style - This node will select all model lines in the revit project by a line style name. , Set BuiltIn Parameter - This node will take an input of a built in parameter name and set that parameter to given value for given elements. , Set Type Parameter - This node will set a type parameter for an element., Slice String - Slices X number of leading or trailing characters from string (boolean true will slice from left while boolean set to false from right), String From List - This node will take an input of a list or nested list and then join each element in a list with a given seperator while adding a suffix., String.Contains - This node takes a list of strings and checks if any string contains a matching string from filter input. , StructuralFraming.BeamByCurve - This node will take an input of curves and attempt to make a structural framing member by type and level. , Survey Point - This node will retrieve a Survey Point from a Revit model. , Tag Host Element - This node will retrieve an element that is hosting a given tag. , Tag Text - This node will retireve a text content of a tag. , TextNote.ByViewPointAndType - This node creates a unwrapped (single line) text note in a given view, at a given location with a given text note type style assigned. , Transform Origin - This node will query an element for its Transform (Coordinate System) and then return its Origin point. , Transform.ToPoint - This node takes a Transform and an input point that will be translated by the Transform. , View.HideElements - This node will hide elements in specified view., View.UnhideElements - This node will unhide specified elemeints in given views., Viewport Properties - This node will return certain properties from a Viewport input. , Wall.ExteriorDirection - This node returns exterior direction of the wall as a vector.",
            "engine_metadata": "",
            "engine_version": "1.2.1.3187",
            "created": "2016-12-16T02:39:49.448Z",
            "full_dependency_versions": [ "2016.12.5" ],
            "full_dependency_ids": [
              {
                "_id": "53e99ce50e5572016a00018a",
                "name": "archi-lab.net"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2016.12.5"
          },
          {
            "_id": "58535600fdef23aa6e000136",
            "contains_binaries": true,
            "node_libraries": [ "Archi-lab_Grimshaw, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "archilabUI, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-prod/773eeffb-465c-41f8-9d0f-0be497376426gregPkg105.zip",
            "contents": "Add Revisions to Sheet - This node will add specified revisions to a sheet. , Add Shared Parameter to Project - This node will add a parameter to shared parameter file and then add it to the project. , Cell Style Settings - This node will generate a Cell Style Settings that can be used to override cell properties. , Change Family Type - Changes family type of a family by passing in an Element and type id of the type we want to change it to. , Clear List - This node will remove all Null and Empty Lists from any list. , Color Settings - This node creates color settings for the Analysis Visualization Framework. , Colored Surface Display Style - This node will generate a Colored Surface Display Style from inputs of points, values, and instance surface for analysis to be aplied to. Also, use color and legend settings (part of archi-lab package) to create style colors and visibility., Colored Surface Settings - This node creates settings for the colored surface display style of the Analysis Visualization Framework., Combine by Pattern - Combines two list based on a input pattern of true and false., Create Annotation Tag - This node will create an annotation tag at a given location, of given type and in a supplied view. If only single view is supplied then all tags will be created in that view. , Current Document - Retrieves Current Document, Curve.Level - This node will return a level that a given curve is located on. , Delete Linked Model Keynote Tags - Deletes all Keynote Tags that are tagging elements in the linked model. if element in the linked model has a keynote assigned thus a keynote tag reads a proper value it will not be deleted. , Delete Unnamed Reference Planes - Does just what the name says. , Dispatch - Works exactly like the Dispatch component in Grasshopper. Input a list and a matching pattern of True/False to split list into two lists one containing all True arguments while other all False arguments. , Door Set Handing - Determines door set handing (whether its a left or right handed door). Input takes doors, and output will split them into two lists (right and left)., Duplicate Item Indices - Searches an input list for duplicate entries and lists their index numbers. Couple with Get From List to delete duplicates from a list., Element Ids - This node will query an element id that can be used with Revit nodes. Dynamo Element Id node returns integer value. , Element.IsOfType - This nodes yields true or false, checking if input elements are of given Element Type., Elements Fom Linked File in Room - This node will check what elements from a linked model are inside of any of the rooms in the current model. , Elements in Room - This node will check if any of the elements are inside any of the supplied rooms. , Elements in Space - This node will take an input of Spaces and Elements and attempt to group all elements by Room that it is located in. For elements that are placed by Line and not a Point, a mid point of line will be used to determine location. , Elements on Sheet - This node will return elements on sheet., Export Image by View - This node will export a list of Views and save them as images (JPG, BMP etc)., FamilyInstance.FamilyType - This node will return a  Family Type of a given Family Instance. If no Family Type can be assigned to a Family then it will return Null. , FamilyInstance.TotalTransform - This node returns a Total Transform of a family instance., Fill Pattern - Get Fill Pattern by Name, Filled Region Area - This node will query an area from the filled region, Filled Region Boundary Curves - This node will get the boundary curves for a filled region., Floor.Area - This node return floor area. , FloorPlan.ByRoom - This node takes input of a Room and creates a Floor Plan View with Crop Box set around that room. , Get All Detail Groups - This node will retrieve all instances of Detail Groups in the model., Get All Dimension Styles - This node will query all of the available dimension styles (this includes linear as well as arc, circle etc). , Get All Elements From Linked Model - This node is based on code posted by Julien Benoit. Big thanks to Julien for sharing his work. This node will retrieve all elements of a given category from a given linked model. , Get All Keynote Tags - Selects all Keynote Tags instances in the model. , Get All Line Styles - This node will return all available line styles., Get All Revisions - This node will return all Revisions currently defined in the mode., Get All Viewport Types - This node will retrieve all Viewport Types currently in the model. , Get Built In Parameter - This node will take an input of a built in parameter name and element to return that parameters value. , Get Design Options - Queries all of the design options currently in the project., Get Documents - Queries all linked Revit files and retrieves their Name, LinkInstance and Document properties., Get Filled Regions - This node will query up all Filled Regions in the project as well as those in the active view only. , Get Host Element - This node will retrieve a host element from hosted element. Ex. feed in door, get wall., Get Level by Name - This node will retrieve a Revit Level Element by its name. , Get Line Style by Name - This node will return a line style object by its name. Line styles can be either Drafting or Model Line Property. , Get Rooms by Level - Filters Rooms by level., Get Tagged Element Id - Retrives an Element Id from input of element tags. For example if wall tags are inputted it will return tagged wall Ids., Get Text Note Type by Name - This node will select a text note type by name. , Get Type Parameter - This node will retrieve a type parameter by its name., Get Unplaced Groups - This node will retrieve all unplaced groups in the model., Get Views from View Set - This node will take a name of a view set and return views/sheet elements contained in it. , Group Curves - This node will take any input of flat list of curves and group them into sublists containing \"joinable\" curves that is continous curves. They might form closed curves or open curves. Use PolyCurve.ByJoinedCurves to convert output groups of curves into single PolyCurves, Id to Element - Selects elements in a model from id input (ElementId, string, integer or GUID), Isolate in View - This node will take input of elements and a view to isolate selected elements in a view., Key Schedule - This node will take a key schedule, data and a list of parameters and populate it with infomation from data parameter. Visit www.archi-lab.net for more information on how to prep this node for take off. , Legend Settings - This node sets all settings for the Legend display with Analysis Visualization Framework of Revit. , Level.LevelAbove - This node takes an input of level and returns level above it. , Local Printers Names - This node will query all locally installed printers and return their names., Marker Settings - This node will generate AnalysisDisplayMarkerAndTextSettings to be used with a Marker Analysis Display Style. Inputs are: Marker Shape(Circle, Triangle, Rectangle), Marker Size, Show Text (Boolean), Rounding, TextDisplayMethod (Show All, Show None, Show Predefined). , Marker&Text Display Style - This node will take an input of Points and a matching input of values to create Analysis Display Style in Revit. Use Legend, Marker and Color Settings nodes to fully customize your display style. , Mass Addition - This node will attempt to sum all elements contained within it. , Material.ImportAllFromProject - This node will import (copy) all materials from specified project into current model. By default it will not override existing materials. , Material.MaterialAssetElement - This node retrieves a Material Asset Element from Material. If such is not defined it will return an Invalid Element Id (-1), Material.SetMaterialAssetByAssetId - This node will set the material asset by asset id. Please make sure that the two input lists match in length. , Material.SetMaterialAssetByMaterial - This node will copy a material asset element from source Material to a list of target materials. It esentially makes all materials inherit its Rendering Appearance. Useful for \"clay\" renderings. , New Section Box View By Elements - This node will create new section box around specified elements and apply it to a new 3D View with a specified name. Section box will be offset from the elements by a supplied offset values. , Override Fill Pattern in View - Overrides fill pattern of any element in an active view to specified fill pattern and color, Parameter Group - This node will return all available Parameter Groups, PolyCurve by Profile Family Type - It takes an input of a profile family type and extract curves from it converting them to polycurves and curve segments for use in Dynamo (sweeps)., Print PDF - This node will allow you to initiate a printing routine in revit from a set of views/sheets, printer name, print settings and print range. , Remap UV Domain - This node takes an input of a reference face and a list of UVs that get remapped into that face's UV Domain. The output is a list of UV Coordinates in that surface's domain. , Remove Revision from Sheet - This node will remove specified Revisions from a sheet., Rename Files - This node will use an \"identifier\" to pick out files from a supplied directory to rename files to a new name supplied. Please make sure to match list lengths of identifier and new name inputs., Revision Properties - This node will return some most common Revision properties like Description or Issue Date., Room.AtPoint - This node will attempt to retrieve a room at a given point in model. , Room.Boundaries - This node returns all Room bounding curves and elements that generated them (walls, separation lines etc)., RoomBoundaries.CleanNulls - This node will take a set of room boundary curves and elements and remove nulls from element list while joining curves to mainatain matching list structure. , Rotate Family - This node will rotate a family in Revit around a given axis by supplied angle (in radians). Please remember that every time you run your definition it will rotate family by given angle every time. , Schedule Appearance - This node allows you to control the appearance of the schedule. For now it supports only title, header and body text type. , Schedule Formatting - This node will allow you to control schedule formatiing options like column width, whether a column is hidden, column heading etc. , Schedule Sorting Grouping - This node will allow you to specify sorting/grouping parameters in schedule as well parameters like sorting order, whether its a footer or header. Visit archi-lab.net for more information. , Schedule Title Appearance - This node will override the appearance of the title. , Schedules on Sheets - Queries all schedules and produces two lists: one with all schedules that are placed on sheets and one with schedules that are not placed on sheets., Select Model Lines by Style - This node will select all model lines in the revit project by a line style name. , Set BuiltIn Parameter - This node will take an input of a built in parameter name and set that parameter to given value for given elements. , Set Type Parameter - This node will set a type parameter for an element., Slice String - Slices X number of leading or trailing characters from string (boolean true will slice from left while boolean set to false from right), String From List - This node will take an input of a list or nested list and then join each element in a list with a given seperator while adding a suffix., String.Contains - This node takes a list of strings and checks if any string contains a matching string from filter input. , StructuralFraming.BeamByCurve - This node will take an input of curves and attempt to make a structural framing member by type and level. , Survey Point - This node will retrieve a Survey Point from a Revit model. , Tag Host Element - This node will retrieve an element that is hosting a given tag. , Tag Text - This node will retireve a text content of a tag. , TextNote.ByViewPointAndType - This node creates a unwrapped (single line) text note in a given view, at a given location with a given text note type style assigned. , Transform Origin - This node will query an element for its Transform (Coordinate System) and then return its Origin point. , Transform.ToPoint - This node takes a Transform and an input point that will be translated by the Transform. , View.HideElements - This node will hide elements in specified view., View.UnhideElements - This node will unhide specified elemeints in given views., Viewport Properties - This node will return certain properties from a Viewport input. , Wall.ExteriorDirection - This node returns exterior direction of the wall as a vector.",
            "engine_metadata": "",
            "engine_version": "1.2.1.3187",
            "created": "2016-12-16T02:48:32.724Z",
            "full_dependency_versions": [ "2016.12.6" ],
            "full_dependency_ids": [
              {
                "_id": "53e99ce50e5572016a00018a",
                "name": "archi-lab.net"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2016.12.6"
          },
          {
            "_id": "58536999fdef23aa6e000138",
            "contains_binaries": true,
            "node_libraries": [ "Archi-lab_Grimshaw, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "archilabUI, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-prod/cf2ee7a9-fffc-4de4-8a63-142e76f51854gregPkg335.zip",
            "contents": "Add Revisions to Sheet - This node will add specified revisions to a sheet. , Add Shared Parameter to Project - This node will add a parameter to shared parameter file and then add it to the project. , Cell Style Settings - This node will generate a Cell Style Settings that can be used to override cell properties. , Change Family Type - Changes family type of a family by passing in an Element and type id of the type we want to change it to. , Clear List - This node will remove all Null and Empty Lists from any list. , Color Settings - This node creates color settings for the Analysis Visualization Framework. , Colored Surface Display Style - This node will generate a Colored Surface Display Style from inputs of points, values, and instance surface for analysis to be aplied to. Also, use color and legend settings (part of archi-lab package) to create style colors and visibility., Colored Surface Settings - This node creates settings for the colored surface display style of the Analysis Visualization Framework., Combine by Pattern - Combines two list based on a input pattern of true and false., Create Annotation Tag - This node will create an annotation tag at a given location, of given type and in a supplied view. If only single view is supplied then all tags will be created in that view. , Current Document - Retrieves Current Document, Curve.Level - This node will return a level that a given curve is located on. , Delete Linked Model Keynote Tags - Deletes all Keynote Tags that are tagging elements in the linked model. if element in the linked model has a keynote assigned thus a keynote tag reads a proper value it will not be deleted. , Delete Unnamed Reference Planes - Does just what the name says. , Dispatch - Works exactly like the Dispatch component in Grasshopper. Input a list and a matching pattern of True/False to split list into two lists one containing all True arguments while other all False arguments. , Door Set Handing - Determines door set handing (whether its a left or right handed door). Input takes doors, and output will split them into two lists (right and left)., Duplicate Item Indices - Searches an input list for duplicate entries and lists their index numbers. Couple with Get From List to delete duplicates from a list., Element Ids - This node will query an element id that can be used with Revit nodes. Dynamo Element Id node returns integer value. , Element.IsOfType - This nodes yields true or false, checking if input elements are of given Element Type., Elements Fom Linked File in Room - This node will check what elements from a linked model are inside of any of the rooms in the current model. , Elements in Room - This node will check if any of the elements are inside any of the supplied rooms. , Elements in Space - This node will take an input of Spaces and Elements and attempt to group all elements by Room that it is located in. For elements that are placed by Line and not a Point, a mid point of line will be used to determine location. , Elements on Sheet - This node will return elements on sheet., Export Image by View - This node will export a list of Views and save them as images (JPG, BMP etc)., FamilyInstance.FamilyType - This node will return a  Family Type of a given Family Instance. If no Family Type can be assigned to a Family then it will return Null. , FamilyInstance.TotalTransform - This node returns a Total Transform of a family instance., Fill Pattern - Get Fill Pattern by Name, Filled Region Area - This node will query an area from the filled region, Filled Region Boundary Curves - This node will get the boundary curves for a filled region., Floor.Area - This node return floor area. , FloorPlan.ByRoom - This node takes input of a Room and creates a Floor Plan View with Crop Box set around that room. , Get All Detail Groups - This node will retrieve all instances of Detail Groups in the model., Get All Dimension Styles - This node will query all of the available dimension styles (this includes linear as well as arc, circle etc). , Get All Elements From Linked Model - This node is based on code posted by Julien Benoit. Big thanks to Julien for sharing his work. This node will retrieve all elements of a given category from a given linked model. , Get All Keynote Tags - Selects all Keynote Tags instances in the model. , Get All Line Styles - This node will return all available line styles., Get All Revisions - This node will return all Revisions currently defined in the mode., Get All Viewport Types - This node will retrieve all Viewport Types currently in the model. , Get Built In Parameter - This node will take an input of a built in parameter name and element to return that parameters value. , Get Design Options - Queries all of the design options currently in the project., Get Documents - Queries all linked Revit files and retrieves their Name, LinkInstance and Document properties., Get Filled Regions - This node will query up all Filled Regions in the project as well as those in the active view only. , Get Host Element - This node will retrieve a host element from hosted element. Ex. feed in door, get wall., Get Level by Name - This node will retrieve a Revit Level Element by its name. , Get Line Style by Name - This node will return a line style object by its name. Line styles can be either Drafting or Model Line Property. , Get Rooms by Level - Filters Rooms by level., Get Tagged Element Id - Retrives an Element Id from input of element tags. For example if wall tags are inputted it will return tagged wall Ids., Get Text Note Type by Name - This node will select a text note type by name. , Get Type Parameter - This node will retrieve a type parameter by its name., Get Unplaced Groups - This node will retrieve all unplaced groups in the model., Get Views from View Set - This node will take a name of a view set and return views/sheet elements contained in it. , Group Curves - This node will take any input of flat list of curves and group them into sublists containing \"joinable\" curves that is continous curves. They might form closed curves or open curves. Use PolyCurve.ByJoinedCurves to convert output groups of curves into single PolyCurves, Isolate in View - This node will take input of elements and a view to isolate selected elements in a view., Key Schedule - This node will take a key schedule, data and a list of parameters and populate it with infomation from data parameter. Visit www.archi-lab.net for more information on how to prep this node for take off. , Legend Settings - This node sets all settings for the Legend display with Analysis Visualization Framework of Revit. , Level.LevelAbove - This node takes an input of level and returns level above it. , Local Printers Names - This node will query all locally installed printers and return their names., Marker Settings - This node will generate AnalysisDisplayMarkerAndTextSettings to be used with a Marker Analysis Display Style. Inputs are: Marker Shape(Circle, Triangle, Rectangle), Marker Size, Show Text (Boolean), Rounding, TextDisplayMethod (Show All, Show None, Show Predefined). , Marker&Text Display Style - This node will take an input of Points and a matching input of values to create Analysis Display Style in Revit. Use Legend, Marker and Color Settings nodes to fully customize your display style. , Mass Addition - This node will attempt to sum all elements contained within it. , Material.ImportAllFromProject - This node will import (copy) all materials from specified project into current model. By default it will not override existing materials. , Material.MaterialAssetElement - This node retrieves a Material Asset Element from Material. If such is not defined it will return an Invalid Element Id (-1), Material.SetMaterialAssetByAssetId - This node will set the material asset by asset id. Please make sure that the two input lists match in length. , Material.SetMaterialAssetByMaterial - This node will copy a material asset element from source Material to a list of target materials. It esentially makes all materials inherit its Rendering Appearance. Useful for \"clay\" renderings. , New Section Box View By Elements - This node will create new section box around specified elements and apply it to a new 3D View with a specified name. Section box will be offset from the elements by a supplied offset values. , Override Fill Pattern in View - Overrides fill pattern of any element in an active view to specified fill pattern and color, PolyCurve by Profile Family Type - It takes an input of a profile family type and extract curves from it converting them to polycurves and curve segments for use in Dynamo (sweeps)., Print PDF - This node will allow you to initiate a printing routine in revit from a set of views/sheets, printer name, print settings and print range. , Remap UV Domain - This node takes an input of a reference face and a list of UVs that get remapped into that face's UV Domain. The output is a list of UV Coordinates in that surface's domain. , Remove Revision from Sheet - This node will remove specified Revisions from a sheet., Rename Files - This node will use an \"identifier\" to pick out files from a supplied directory to rename files to a new name supplied. Please make sure to match list lengths of identifier and new name inputs., Revision Properties - This node will return some most common Revision properties like Description or Issue Date., Room.AtPoint - This node will attempt to retrieve a room at a given point in model. , Room.Boundaries - This node returns all Room bounding curves and elements that generated them (walls, separation lines etc)., RoomBoundaries.CleanNulls - This node will take a set of room boundary curves and elements and remove nulls from element list while joining curves to mainatain matching list structure. , Rotate Family - This node will rotate a family in Revit around a given axis by supplied angle (in radians). Please remember that every time you run your definition it will rotate family by given angle every time. , Schedule Appearance - This node allows you to control the appearance of the schedule. For now it supports only title, header and body text type. , Schedule Formatting - This node will allow you to control schedule formatiing options like column width, whether a column is hidden, column heading etc. , Schedule Sorting Grouping - This node will allow you to specify sorting/grouping parameters in schedule as well parameters like sorting order, whether its a footer or header. Visit archi-lab.net for more information. , Schedule Title Appearance - This node will override the appearance of the title. , Schedules on Sheets - Queries all schedules and produces two lists: one with all schedules that are placed on sheets and one with schedules that are not placed on sheets., Select Model Lines by Style - This node will select all model lines in the revit project by a line style name. , Set BuiltIn Parameter - This node will take an input of a built in parameter name and set that parameter to given value for given elements. , Set Type Parameter - This node will set a type parameter for an element., Slice String - Slices X number of leading or trailing characters from string (boolean true will slice from left while boolean set to false from right), String From List - This node will take an input of a list or nested list and then join each element in a list with a given seperator while adding a suffix., String.Contains - This node takes a list of strings and checks if any string contains a matching string from filter input. , StructuralFraming.BeamByCurve - This node will take an input of curves and attempt to make a structural framing member by type and level. , Survey Point - This node will retrieve a Survey Point from a Revit model. , Tag Host Element - This node will retrieve an element that is hosting a given tag. , Tag Text - This node will retireve a text content of a tag. , TextNote.ByViewPointAndType - This node creates a unwrapped (single line) text note in a given view, at a given location with a given text note type style assigned. , Transform Origin - This node will query an element for its Transform (Coordinate System) and then return its Origin point. , Transform.ToPoint - This node takes a Transform and an input point that will be translated by the Transform. , View.HideElements - This node will hide elements in specified view., View.UnhideElements - This node will unhide specified elemeints in given views., Viewport Properties - This node will return certain properties from a Viewport input. , Wall.ExteriorDirection - This node returns exterior direction of the wall as a vector.",
            "engine_metadata": "",
            "engine_version": "1.2.1.3187",
            "created": "2016-12-16T04:12:09.534Z",
            "full_dependency_versions": [ "2016.12.7" ],
            "full_dependency_ids": [
              {
                "_id": "53e99ce50e5572016a00018a",
                "name": "archi-lab.net"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2016.12.7"
          },
          {
            "_id": "5877c516ca6a5edb6500001c",
            "contains_binaries": true,
            "node_libraries": [ "Archi-lab_Grimshaw, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "archilabUI, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-prod/67d1959e-df63-4a80-b94a-7e04bff910fbgregPkg189.zip",
            "contents": "Add Revisions to Sheet - This node will add specified revisions to a sheet. , Add Shared Parameter to Project - This node will add a parameter to shared parameter file and then add it to the project. , Cell Style Settings - This node will generate a Cell Style Settings that can be used to override cell properties. , Change Family Type - Changes family type of a family by passing in an Element and type id of the type we want to change it to. , Clear List - This node will remove all Null and Empty Lists from any list. , Color Settings - This node creates color settings for the Analysis Visualization Framework. , Colored Surface Display Style - This node will generate a Colored Surface Display Style from inputs of points, values, and instance surface for analysis to be aplied to. Also, use color and legend settings (part of archi-lab package) to create style colors and visibility., Colored Surface Settings - This node creates settings for the colored surface display style of the Analysis Visualization Framework., Combine by Pattern - Combines two list based on a input pattern of true and false., Create Annotation Tag - This node will create an annotation tag at a given location, of given type and in a supplied view. If only single view is supplied then all tags will be created in that view. , Current Document - Retrieves Current Document, Curve.Level - This node will return a level that a given curve is located on. , Delete Linked Model Keynote Tags - Deletes all Keynote Tags that are tagging elements in the linked model. if element in the linked model has a keynote assigned thus a keynote tag reads a proper value it will not be deleted. , Delete Unnamed Reference Planes - Does just what the name says. , Dispatch - Works exactly like the Dispatch component in Grasshopper. Input a list and a matching pattern of True/False to split list into two lists one containing all True arguments while other all False arguments. , Door Set Handing - Determines door set handing (whether its a left or right handed door). Input takes doors, and output will split them into two lists (right and left)., Duplicate Item Indices - Searches an input list for duplicate entries and lists their index numbers. Couple with Get From List to delete duplicates from a list., Element Ids - This node will query an element id that can be used with Revit nodes. Dynamo Element Id node returns integer value. , Element.IsOfType - This nodes yields true or false, checking if input elements are of given Element Type., Elements Fom Linked File in Room - This node will check what elements from a linked model are inside of any of the rooms in the current model. , Elements in Room - This node will check if any of the elements are inside any of the supplied rooms. , Elements in Space - This node will take an input of Spaces and Elements and attempt to group all elements by Room that it is located in. For elements that are placed by Line and not a Point, a mid point of line will be used to determine location. , Elements on Sheet - This node will return elements on sheet., Export Image by View - This node will export a list of Views and save them as images (JPG, BMP etc)., FamilyInstance.FamilyType - This node will return a  Family Type of a given Family Instance. If no Family Type can be assigned to a Family then it will return Null. , FamilyInstance.TotalTransform - This node returns a Total Transform of a family instance., Fill Pattern - Get Fill Pattern by Name, Filled Region Area - This node will query an area from the filled region, Filled Region Boundary Curves - This node will get the boundary curves for a filled region., Floor.Area - This node return floor area. , FloorPlan.ByRoom - This node takes input of a Room and creates a Floor Plan View with Crop Box set around that room. , Get All Detail Groups - This node will retrieve all instances of Detail Groups in the model., Get All Dimension Styles - This node will query all of the available dimension styles (this includes linear as well as arc, circle etc). , Get All Elements From Linked Model - This node is based on code posted by Julien Benoit. Big thanks to Julien for sharing his work. This node will retrieve all elements of a given category from a given linked model. , Get All Keynote Tags - Selects all Keynote Tags instances in the model. , Get All Line Styles - This node will return all available line styles., Get All Revisions - This node will return all Revisions currently defined in the mode., Get All Viewport Types - This node will retrieve all Viewport Types currently in the model. , Get Built In Parameter - This node will take an input of a built in parameter name and element to return that parameters value. , Get Design Options - Queries all of the design options currently in the project., Get Documents - Queries all linked Revit files and retrieves their Name, LinkInstance and Document properties., Get Filled Regions - This node will query up all Filled Regions in the project as well as those in the active view only. , Get Host Element - This node will retrieve a host element from hosted element. Ex. feed in door, get wall., Get Level by Name - This node will retrieve a Revit Level Element by its name. , Get Line Style by Name - This node will return a line style object by its name. Line styles can be either Drafting or Model Line Property. , Get Rooms by Level - Filters Rooms by level., Get Tagged Element Id - Retrives an Element Id from input of element tags. For example if wall tags are inputted it will return tagged wall Ids., Get Text Note Type by Name - This node will select a text note type by name. , Get Type Parameter - This node will retrieve a type parameter by its name., Get Unplaced Groups - This node will retrieve all unplaced groups in the model., Get Views from View Set - This node will take a name of a view set and return views/sheet elements contained in it. , Group Curves - This node will take any input of flat list of curves and group them into sublists containing \"joinable\" curves that is continous curves. They might form closed curves or open curves. Use PolyCurve.ByJoinedCurves to convert output groups of curves into single PolyCurves, Isolate in View - This node will take input of elements and a view to isolate selected elements in a view., Key Schedule - This node will take a key schedule, data and a list of parameters and populate it with infomation from data parameter. Visit www.archi-lab.net for more information on how to prep this node for take off. , Legend Settings - This node sets all settings for the Legend display with Analysis Visualization Framework of Revit. , Level.LevelAbove - This node takes an input of level and returns level above it. , Local Printers Names - This node will query all locally installed printers and return their names., Marker Settings - This node will generate AnalysisDisplayMarkerAndTextSettings to be used with a Marker Analysis Display Style. Inputs are: Marker Shape(Circle, Triangle, Rectangle), Marker Size, Show Text (Boolean), Rounding, TextDisplayMethod (Show All, Show None, Show Predefined). , Marker&Text Display Style - This node will take an input of Points and a matching input of values to create Analysis Display Style in Revit. Use Legend, Marker and Color Settings nodes to fully customize your display style. , Mass Addition - This node will attempt to sum all elements contained within it. , Material.ImportAllFromProject - This node will import (copy) all materials from specified project into current model. By default it will not override existing materials. , Material.MaterialAssetElement - This node retrieves a Material Asset Element from Material. If such is not defined it will return an Invalid Element Id (-1), Material.SetMaterialAssetByAssetId - This node will set the material asset by asset id. Please make sure that the two input lists match in length. , Material.SetMaterialAssetByMaterial - This node will copy a material asset element from source Material to a list of target materials. It esentially makes all materials inherit its Rendering Appearance. Useful for \"clay\" renderings. , New Section Box View By Elements - This node will create new section box around specified elements and apply it to a new 3D View with a specified name. Section box will be offset from the elements by a supplied offset values. , Override Fill Pattern in View - Overrides fill pattern of any element in an active view to specified fill pattern and color, PolyCurve by Profile Family Type - It takes an input of a profile family type and extract curves from it converting them to polycurves and curve segments for use in Dynamo (sweeps)., Print PDF - This node will allow you to initiate a printing routine in revit from a set of views/sheets, printer name, print settings and print range. , Remap UV Domain - This node takes an input of a reference face and a list of UVs that get remapped into that face's UV Domain. The output is a list of UV Coordinates in that surface's domain. , Remove Revision from Sheet - This node will remove specified Revisions from a sheet., Rename Files - This node will use an \"identifier\" to pick out files from a supplied directory to rename files to a new name supplied. Please make sure to match list lengths of identifier and new name inputs., Revision Properties - This node will return some most common Revision properties like Description or Issue Date., Room.AtPoint - This node will attempt to retrieve a room at a given point in model. , Room.Boundaries - This node returns all Room bounding curves and elements that generated them (walls, separation lines etc)., RoomBoundaries.CleanNulls - This node will take a set of room boundary curves and elements and remove nulls from element list while joining curves to mainatain matching list structure. , Rotate Family - This node will rotate a family in Revit around a given axis by supplied angle (in radians). Please remember that every time you run your definition it will rotate family by given angle every time. , Schedule Appearance - This node allows you to control the appearance of the schedule. For now it supports only title, header and body text type. , Schedule Formatting - This node will allow you to control schedule formatiing options like column width, whether a column is hidden, column heading etc. , Schedule Sorting Grouping - This node will allow you to specify sorting/grouping parameters in schedule as well parameters like sorting order, whether its a footer or header. Visit archi-lab.net for more information. , Schedule Title Appearance - This node will override the appearance of the title. , Schedules on Sheets - Queries all schedules and produces two lists: one with all schedules that are placed on sheets and one with schedules that are not placed on sheets., Select Model Lines by Style - This node will select all model lines in the revit project by a line style name. , Set BuiltIn Parameter - This node will take an input of a built in parameter name and set that parameter to given value for given elements. , Set Type Parameter - This node will set a type parameter for an element., Slice String - Slices X number of leading or trailing characters from string (boolean true will slice from left while boolean set to false from right), String From List - This node will take an input of a list or nested list and then join each element in a list with a given seperator while adding a suffix., String.Contains - This node takes a list of strings and checks if any string contains a matching string from filter input. , StructuralFraming.BeamByCurve - This node will take an input of curves and attempt to make a structural framing member by type and level. , Survey Point - This node will retrieve a Survey Point from a Revit model. , Tag Host Element - This node will retrieve an element that is hosting a given tag. , Tag Text - This node will retireve a text content of a tag. , TextNote.ByViewPointAndType - This node creates a unwrapped (single line) text note in a given view, at a given location with a given text note type style assigned. , ToDouble - This node converts strings to doubles. When strings look like this: \"0\", \"1\" etc. and don't have decimal places the ToNumber node fails on occasion. This addresses that issue., Transform Origin - This node will query an element for its Transform (Coordinate System) and then return its Origin point. , Transform.ToPoint - This node takes a Transform and an input point that will be translated by the Transform. , View.HideElements - This node will hide elements in specified view., View.UnhideElements - This node will unhide specified elemeints in given views., Viewport Properties - This node will return certain properties from a Viewport input. , Wall.ExteriorDirection - This node returns exterior direction of the wall as a vector.",
            "engine_metadata": "",
            "engine_version": "1.2.1.3083",
            "created": "2017-01-12T18:04:06.626Z",
            "full_dependency_versions": [ "2016.12.8" ],
            "full_dependency_ids": [
              {
                "_id": "53e99ce50e5572016a00018a",
                "name": "archi-lab.net"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2016.12.8"
          },
          {
            "_id": "5894d241ca6a5edb65000110",
            "contains_binaries": true,
            "node_libraries": [ "Archi-lab_Grimshaw, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "archilabUI, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-prod/d88a8fc1-e050-44e2-9cbb-fae83b8dabddgregPkg747.zip",
            "contents": "Add Revisions to Sheet - This node will add specified revisions to a sheet. , Add Shared Parameter to Project - This node will add a parameter to shared parameter file and then add it to the project. , Cell Style Settings - This node will generate a Cell Style Settings that can be used to override cell properties. , Change Family Type - Changes family type of a family by passing in an Element and type id of the type we want to change it to. , Clear List - This node will remove all Null and Empty Lists from any list. , Color Settings - This node creates color settings for the Analysis Visualization Framework. , Colored Surface Display Style - This node will generate a Colored Surface Display Style from inputs of points, values, and instance surface for analysis to be aplied to. Also, use color and legend settings (part of archi-lab package) to create style colors and visibility., Colored Surface Settings - This node creates settings for the colored surface display style of the Analysis Visualization Framework., Combine by Pattern - Combines two list based on a input pattern of true and false., Create Annotation Tag - This node will create an annotation tag at a given location, of given type and in a supplied view. If only single view is supplied then all tags will be created in that view. , Current Document - Retrieves Current Document, Curve.Level - This node will return a level that a given curve is located on. , Delete Linked Model Keynote Tags - Deletes all Keynote Tags that are tagging elements in the linked model. if element in the linked model has a keynote assigned thus a keynote tag reads a proper value it will not be deleted. , Delete Unnamed Reference Planes - Does just what the name says. , Dispatch - Works exactly like the Dispatch component in Grasshopper. Input a list and a matching pattern of True/False to split list into two lists one containing all True arguments while other all False arguments. , Door Set Handing - Determines door set handing (whether its a left or right handed door). Input takes doors, and output will split them into two lists (right and left)., Duplicate Item Indices - Searches an input list for duplicate entries and lists their index numbers. Couple with Get From List to delete duplicates from a list., Element Ids - This node will query an element id that can be used with Revit nodes. Dynamo Element Id node returns integer value. , Element.IsOfType - This nodes yields true or false, checking if input elements are of given Element Type., Elements Fom Linked File in Room - This node will check what elements from a linked model are inside of any of the rooms in the current model. , Elements in Room - This node will check if any of the elements are inside any of the supplied rooms. , Elements in Space - This node will take an input of Spaces and Elements and attempt to group all elements by Room that it is located in. For elements that are placed by Line and not a Point, a mid point of line will be used to determine location. , Elements on Sheet - This node will return elements on sheet., Export Image by View - This node will export a list of Views and save them as images (JPG, BMP etc)., FamilyInstance.FamilyType - This node will return a  Family Type of a given Family Instance. If no Family Type can be assigned to a Family then it will return Null. , FamilyInstance.TotalTransform - This node returns a Total Transform of a family instance., Fill Pattern - Get Fill Pattern by Name, Filled Region Area - This node will query an area from the filled region, Filled Region Boundary Curves - This node will get the boundary curves for a filled region., Floor.Area - This node return floor area. , FloorPlan.ByRoom - This node takes input of a Room and creates a Floor Plan View with Crop Box set around that room. , Get All Detail Groups - This node will retrieve all instances of Detail Groups in the model., Get All Dimension Styles - This node will query all of the available dimension styles (this includes linear as well as arc, circle etc). , Get All Elements From Linked Model - This node is based on code posted by Julien Benoit. Big thanks to Julien for sharing his work. This node will retrieve all elements of a given category from a given linked model. , Get All Keynote Tags - Selects all Keynote Tags instances in the model. , Get All Line Styles - This node will return all available line styles., Get All Revisions - This node will return all Revisions currently defined in the mode., Get All Viewport Types - This node will retrieve all Viewport Types currently in the model. , Get Built In Parameter - This node will take an input of a built in parameter name and element to return that parameters value. , Get Design Options - Queries all of the design options currently in the project., Get Documents - Queries all linked Revit files and retrieves their Name, LinkInstance and Document properties., Get Filled Regions - This node will query up all Filled Regions in the project as well as those in the active view only. , Get Host Element - This node will retrieve a host element from hosted element. Ex. feed in door, get wall., Get Level by Name - This node will retrieve a Revit Level Element by its name. , Get Line Style by Name - This node will return a line style object by its name. Line styles can be either Drafting or Model Line Property. , Get Rooms by Level - Filters Rooms by level., Get Tagged Element Id - Retrives an Element Id from input of element tags. For example if wall tags are inputted it will return tagged wall Ids., Get Text Note Type by Name - This node will select a text note type by name. , Get Type Parameter - This node will retrieve a type parameter by its name., Get Unplaced Groups - This node will retrieve all unplaced groups in the model., Get Views from View Set - This node will take a name of a view set and return views/sheet elements contained in it. , Group Curves - This node will take any input of flat list of curves and group them into sublists containing \"joinable\" curves that is continous curves. They might form closed curves or open curves. Use PolyCurve.ByJoinedCurves to convert output groups of curves into single PolyCurves, Isolate in View - This node will take input of elements and a view to isolate selected elements in a view., Key Schedule - This node will take a key schedule, data and a list of parameters and populate it with infomation from data parameter. Visit www.archi-lab.net for more information on how to prep this node for take off. , Legend Settings - This node sets all settings for the Legend display with Analysis Visualization Framework of Revit. , Level.LevelAbove - This node takes an input of level and returns level above it. , Local Printers Names - This node will query all locally installed printers and return their names., Marker Settings - This node will generate AnalysisDisplayMarkerAndTextSettings to be used with a Marker Analysis Display Style. Inputs are: Marker Shape(Circle, Triangle, Rectangle), Marker Size, Show Text (Boolean), Rounding, TextDisplayMethod (Show All, Show None, Show Predefined). , Marker&Text Display Style - This node will take an input of Points and a matching input of values to create Analysis Display Style in Revit. Use Legend, Marker and Color Settings nodes to fully customize your display style. , Mass Addition - This node will attempt to sum all elements contained within it. , Material.ImportAllFromProject - This node will import (copy) all materials from specified project into current model. By default it will not override existing materials. , Material.MaterialAssetElement - This node retrieves a Material Asset Element from Material. If such is not defined it will return an Invalid Element Id (-1), Material.SetMaterialAssetByAssetId - This node will set the material asset by asset id. Please make sure that the two input lists match in length. , Material.SetMaterialAssetByMaterial - This node will copy a material asset element from source Material to a list of target materials. It esentially makes all materials inherit its Rendering Appearance. Useful for \"clay\" renderings. , New Section Box View By Elements - This node will create new section box around specified elements and apply it to a new 3D View with a specified name. Section box will be offset from the elements by a supplied offset values. , Override Fill Pattern in View - Overrides fill pattern of any element in an active view to specified fill pattern and color, PolyCurve by Profile Family Type - It takes an input of a profile family type and extract curves from it converting them to polycurves and curve segments for use in Dynamo (sweeps)., Print PDF - This node will allow you to initiate a printing routine in revit from a set of views/sheets, printer name, print settings and print range. , Remap UV Domain - This node takes an input of a reference face and a list of UVs that get remapped into that face's UV Domain. The output is a list of UV Coordinates in that surface's domain. , Remove Revision from Sheet - This node will remove specified Revisions from a sheet., Rename Files - This node will use an \"identifier\" to pick out files from a supplied directory to rename files to a new name supplied. Please make sure to match list lengths of identifier and new name inputs., Revision Properties - This node will return some most common Revision properties like Description or Issue Date., Room.AtPoint - This node will attempt to retrieve a room at a given point in model. , Room.Boundaries - This node returns all Room bounding curves and elements that generated them (walls, separation lines etc)., RoomBoundaries.CleanNulls - This node will take a set of room boundary curves and elements and remove nulls from element list while joining curves to mainatain matching list structure. , Rotate Family - This node will rotate a family in Revit around a given axis by supplied angle (in radians). Please remember that every time you run your definition it will rotate family by given angle every time. , Schedule Appearance - This node allows you to control the appearance of the schedule. For now it supports only title, header and body text type. , Schedule Formatting - This node will allow you to control schedule formatiing options like column width, whether a column is hidden, column heading etc. , Schedule Sorting Grouping - This node will allow you to specify sorting/grouping parameters in schedule as well parameters like sorting order, whether its a footer or header. Visit archi-lab.net for more information. , Schedule Title Appearance - This node will override the appearance of the title. , Schedules on Sheets - Queries all schedules and produces two lists: one with all schedules that are placed on sheets and one with schedules that are not placed on sheets., Select Model Lines by Style - This node will select all model lines in the revit project by a line style name. , Set BuiltIn Parameter - This node will take an input of a built in parameter name and set that parameter to given value for given elements. , Set Type Parameter - This node will set a type parameter for an element., Slice String - Slices X number of leading or trailing characters from string (boolean true will slice from left while boolean set to false from right), String From List - This node will take an input of a list or nested list and then join each element in a list with a given seperator while adding a suffix., String.Contains - This node takes a list of strings and checks if any string contains a matching string from filter input. , StructuralFraming.BeamByCurve - This node will take an input of curves and attempt to make a structural framing member by type and level. , Survey Point - This node will retrieve a Survey Point from a Revit model. , Tag Host Element - This node will retrieve an element that is hosting a given tag. , Tag Text - This node will retireve a text content of a tag. , TextNote.ByViewPointAndType - This node creates a unwrapped (single line) text note in a given view, at a given location with a given text note type style assigned. , ToDouble - This node converts strings to doubles. When strings look like this: \"0\", \"1\" etc. and don't have decimal places the ToNumber node fails on occasion. This addresses that issue., Transform Origin - This node will query an element for its Transform (Coordinate System) and then return its Origin point. , Transform.ToPoint - This node takes a Transform and an input point that will be translated by the Transform. , View.HideElements - This node will hide elements in specified view., View.UnhideElements - This node will unhide specified elemeints in given views., Viewport Properties - This node will return certain properties from a Viewport input. , Wall.ExteriorDirection - This node returns exterior direction of the wall as a vector.",
            "engine_metadata": "",
            "engine_version": "1.2.1.3083",
            "created": "2017-02-03T18:56:01.236Z",
            "full_dependency_versions": [ "2016.12.9" ],
            "full_dependency_ids": [
              {
                "_id": "53e99ce50e5572016a00018a",
                "name": "archi-lab.net"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2016.12.9"
          },
          {
            "_id": "589607fb61de680108000006",
            "contains_binaries": true,
            "node_libraries": [ "Archi-lab_Grimshaw, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "archilabUI, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-prod/23f39a51-7b33-4eff-b7f5-9b10f4712a27gregPkg420.zip",
            "contents": "Add Revisions to Sheet - This node will add specified revisions to a sheet. , Add Shared Parameter to Project - This node will add a parameter to shared parameter file and then add it to the project. , Cell Style Settings - This node will generate a Cell Style Settings that can be used to override cell properties. , Change Family Type - Changes family type of a family by passing in an Element and type id of the type we want to change it to. , Clear List - This node will remove all Null and Empty Lists from any list. , Color Settings - This node creates color settings for the Analysis Visualization Framework. , Colored Surface Display Style - This node will generate a Colored Surface Display Style from inputs of points, values, and instance surface for analysis to be aplied to. Also, use color and legend settings (part of archi-lab package) to create style colors and visibility., Colored Surface Settings - This node creates settings for the colored surface display style of the Analysis Visualization Framework., Combine by Pattern - Combines two list based on a input pattern of true and false., Create Annotation Tag - This node will create an annotation tag at a given location, of given type and in a supplied view. If only single view is supplied then all tags will be created in that view. , Current Document - Retrieves Current Document, Curve.Level - This node will return a level that a given curve is located on. , Delete Linked Model Keynote Tags - Deletes all Keynote Tags that are tagging elements in the linked model. if element in the linked model has a keynote assigned thus a keynote tag reads a proper value it will not be deleted. , Delete Unnamed Reference Planes - Does just what the name says. , Dispatch - Works exactly like the Dispatch component in Grasshopper. Input a list and a matching pattern of True/False to split list into two lists one containing all True arguments while other all False arguments. , Door Set Handing - Determines door set handing (whether its a left or right handed door). Input takes doors, and output will split them into two lists (right and left)., Duplicate Item Indices - Searches an input list for duplicate entries and lists their index numbers. Couple with Get From List to delete duplicates from a list., Element Ids - This node will query an element id that can be used with Revit nodes. Dynamo Element Id node returns integer value. , Element.IsOfType - This nodes yields true or false, checking if input elements are of given Element Type., Elements Fom Linked File in Room - This node will check what elements from a linked model are inside of any of the rooms in the current model. , Elements in Room - This node will check if any of the elements are inside any of the supplied rooms. , Elements in Space - This node will take an input of Spaces and Elements and attempt to group all elements by Room that it is located in. For elements that are placed by Line and not a Point, a mid point of line will be used to determine location. , Elements on Sheet - This node will return elements on sheet., Export Image by View - This node will export a list of Views and save them as images (JPG, BMP etc)., FamilyInstance.FamilyType - This node will return a  Family Type of a given Family Instance. If no Family Type can be assigned to a Family then it will return Null. , FamilyInstance.TotalTransform - This node returns a Total Transform of a family instance., Fill Pattern - Get Fill Pattern by Name, Filled Region Area - This node will query an area from the filled region, Filled Region Boundary Curves - This node will get the boundary curves for a filled region., Floor.Area - This node return floor area. , FloorPlan.ByRoom - This node takes input of a Room and creates a Floor Plan View with Crop Box set around that room. , Get All Detail Groups - This node will retrieve all instances of Detail Groups in the model., Get All Dimension Styles - This node will query all of the available dimension styles (this includes linear as well as arc, circle etc). , Get All Elements From Linked Model - This node is based on code posted by Julien Benoit. Big thanks to Julien for sharing his work. This node will retrieve all elements of a given category from a given linked model. , Get All Keynote Tags - Selects all Keynote Tags instances in the model. , Get All Line Styles - This node will return all available line styles., Get All Revisions - This node will return all Revisions currently defined in the mode., Get All Viewport Types - This node will retrieve all Viewport Types currently in the model. , Get Built In Parameter - This node will take an input of a built in parameter name and element to return that parameters value. , Get Design Options - Queries all of the design options currently in the project., Get Documents - Queries all linked Revit files and retrieves their Name, LinkInstance and Document properties., Get Filled Regions - This node will query up all Filled Regions in the project as well as those in the active view only. , Get Host Element - This node will retrieve a host element from hosted element. Ex. feed in door, get wall., Get Level by Name - This node will retrieve a Revit Level Element by its name. , Get Line Style by Name - This node will return a line style object by its name. Line styles can be either Drafting or Model Line Property. , Get Rooms by Level - Filters Rooms by level., Get Tagged Element Id - Retrives an Element Id from input of element tags. For example if wall tags are inputted it will return tagged wall Ids., Get Text Note Type by Name - This node will select a text note type by name. , Get Type Parameter - This node will retrieve a type parameter by its name., Get Unplaced Groups - This node will retrieve all unplaced groups in the model., Get Views from View Set - This node will take a name of a view set and return views/sheet elements contained in it. , Group Curves - This node will take any input of flat list of curves and group them into sublists containing \"joinable\" curves that is continous curves. They might form closed curves or open curves. Use PolyCurve.ByJoinedCurves to convert output groups of curves into single PolyCurves, Isolate in View - This node will take input of elements and a view to isolate selected elements in a view., Key Schedule - This node will take a key schedule, data and a list of parameters and populate it with infomation from data parameter. Visit www.archi-lab.net for more information on how to prep this node for take off. , Legend Settings - This node sets all settings for the Legend display with Analysis Visualization Framework of Revit. , Level.LevelAbove - This node takes an input of level and returns level above it. , Local Printers Names - This node will query all locally installed printers and return their names., Marker Settings - This node will generate AnalysisDisplayMarkerAndTextSettings to be used with a Marker Analysis Display Style. Inputs are: Marker Shape(Circle, Triangle, Rectangle), Marker Size, Show Text (Boolean), Rounding, TextDisplayMethod (Show All, Show None, Show Predefined). , Marker&Text Display Style - This node will take an input of Points and a matching input of values to create Analysis Display Style in Revit. Use Legend, Marker and Color Settings nodes to fully customize your display style. , Mass Addition - This node will attempt to sum all elements contained within it. , Material.ImportAllFromProject - This node will import (copy) all materials from specified project into current model. By default it will not override existing materials. , Material.MaterialAssetElement - This node retrieves a Material Asset Element from Material. If such is not defined it will return an Invalid Element Id (-1), Material.SetMaterialAssetByAssetId - This node will set the material asset by asset id. Please make sure that the two input lists match in length. , Material.SetMaterialAssetByMaterial - This node will copy a material asset element from source Material to a list of target materials. It esentially makes all materials inherit its Rendering Appearance. Useful for \"clay\" renderings. , New Section Box View By Elements - This node will create new section box around specified elements and apply it to a new 3D View with a specified name. Section box will be offset from the elements by a supplied offset values. , Override Fill Pattern in View - Overrides fill pattern of any element in an active view to specified fill pattern and color, PolyCurve by Profile Family Type - It takes an input of a profile family type and extract curves from it converting them to polycurves and curve segments for use in Dynamo (sweeps)., Print PDF - This node will allow you to initiate a printing routine in revit from a set of views/sheets, printer name, print settings and print range. , Remap UV Domain - This node takes an input of a reference face and a list of UVs that get remapped into that face's UV Domain. The output is a list of UV Coordinates in that surface's domain. , Remove Revision from Sheet - This node will remove specified Revisions from a sheet., Rename Files - This node will use an \"identifier\" to pick out files from a supplied directory to rename files to a new name supplied. Please make sure to match list lengths of identifier and new name inputs., Revision Properties - This node will return some most common Revision properties like Description or Issue Date., Room.AtPoint - This node will attempt to retrieve a room at a given point in model. , Room.Boundaries - This node returns all Room bounding curves and elements that generated them (walls, separation lines etc)., RoomBoundaries.CleanNulls - This node will take a set of room boundary curves and elements and remove nulls from element list while joining curves to mainatain matching list structure. , Rotate Family - This node will rotate a family in Revit around a given axis by supplied angle (in radians). Please remember that every time you run your definition it will rotate family by given angle every time. , Schedule Appearance - This node allows you to control the appearance of the schedule. For now it supports only title, header and body text type. , Schedule Formatting - This node will allow you to control schedule formatiing options like column width, whether a column is hidden, column heading etc. , Schedule Sorting Grouping - This node will allow you to specify sorting/grouping parameters in schedule as well parameters like sorting order, whether its a footer or header. Visit archi-lab.net for more information. , Schedule Title Appearance - This node will override the appearance of the title. , Schedules on Sheets - Queries all schedules and produces two lists: one with all schedules that are placed on sheets and one with schedules that are not placed on sheets., Select Model Lines by Style - This node will select all model lines in the revit project by a line style name. , Set BuiltIn Parameter - This node will take an input of a built in parameter name and set that parameter to given value for given elements. , Set Type Parameter - This node will set a type parameter for an element., Slice String - Slices X number of leading or trailing characters from string (boolean true will slice from left while boolean set to false from right), String From List - This node will take an input of a list or nested list and then join each element in a list with a given seperator while adding a suffix., String.Contains - This node takes a list of strings and checks if any string contains a matching string from filter input. , StructuralFraming.BeamByCurve - This node will take an input of curves and attempt to make a structural framing member by type and level. , Survey Point - This node will retrieve a Survey Point from a Revit model. , Tag Host Element - This node will retrieve an element that is hosting a given tag. , Tag Text - This node will retireve a text content of a tag. , TextNote.ByViewPointAndType - This node creates a unwrapped (single line) text note in a given view, at a given location with a given text note type style assigned. , ToDouble - This node converts strings to doubles. When strings look like this: \"0\", \"1\" etc. and don't have decimal places the ToNumber node fails on occasion. This addresses that issue., Transform Origin - This node will query an element for its Transform (Coordinate System) and then return its Origin point. , Transform.ToPoint - This node takes a Transform and an input point that will be translated by the Transform. , View.HideElements - This node will hide elements in specified view., View.UnhideElements - This node will unhide specified elemeints in given views., Viewport Properties - This node will return certain properties from a Viewport input. , Wall.ExteriorDirection - This node returns exterior direction of the wall as a vector.",
            "engine_metadata": "",
            "engine_version": "1.2.1.3083",
            "created": "2017-02-04T16:57:31.398Z",
            "full_dependency_versions": [ "2016.12.10" ],
            "full_dependency_ids": [
              {
                "_id": "53e99ce50e5572016a00018a",
                "name": "archi-lab.net"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2016.12.10"
          }
        ],
        "latest_version_update": "2017-02-04T16:57:31.398Z",
        "num_versions": 78,
        "comments": [ ],
        "num_comments": 0,
        "latest_comment": "1970-01-01T00:00:00.000Z",
        "votes": -3,
        "downloads": 39069,
        "repository_url": "",
        "site_url": "www.archi-lab.net",
        "banned": false,
        "deprecated": false,
        "group": "archi-lab",
        "engine": "dynamo",
        "license": "MIT",
        "used_by": [
          {
            "_id": "545a51aa893c653357000008",
            "name": "SteamNodes"
          },
          {
            "_id": "551cc39f5899bb370500003a",
            "name": "Rotate Family Instances Around Origin Axis by Angle"
          },
          {
            "_id": "555e8bfea8367b98610000b8",
            "name": "Bakery"
          },
          {
            "_id": "55c30c7f662bf0e908000080",
            "name": "MTHV Package"
          },
          {
            "_id": "55e90085662bf0e908000142",
            "name": "Hot Gear"
          },
          {
            "_id": "54affe45dcee4dfd26000035",
            "name": "Hollandaise"
          },
          {
            "_id": "55f84b9e662bf0e908000188",
            "name": "Ayuda"
          },
          {
            "_id": "56446665662bf0e908000324",
            "name": "MEPWORKS"
          },
          {
            "_id": "566f8a9c5c568ad00c000027",
            "name": "Monamo"
          },
          {
            "_id": "56dadd8e5bee3e2138000025",
            "name": "MOST-BCF2014"
          },
          {
            "_id": "56fa23aa5bee3e21380000a8",
            "name": "LionsDen"
          },
          {
            "_id": "570e31b5287283f90500001f",
            "name": "Get View Worksets"
          },
          {
            "_id": "570e32c5287283f905000021",
            "name": "Revision Clouds on Sheets in Excel"
          },
          {
            "_id": "5775c9ab535146064800000d",
            "name": "DynaFabrication2017"
          },
          {
            "_id": "57ea33aeb135d45974000021",
            "name": "ANDYnamo"
          },
          {
            "_id": "57fd20a3d3d589541a00006f",
            "name": "PW_Lon_Revit"
          },
          {
            "_id": "582ed4885af9f3713d0000b6",
            "name": "BIMSYK"
          },
          {
            "_id": "57dbd203882d868b4200000d",
            "name": "SYKES"
          },
          {
            "_id": "582ef5635af9f3713d0000ba",
            "name": "J-Nodes"
          },
          {
            "_id": "5835897f7332da0d25000003",
            "name": "Summerisle"
          },
          {
            "_id": "5507ae3e0c7eac9b57000053",
            "name": "BVN"
          },
          {
            "_id": "559c28d4f2ae5a9a0700011e",
            "name": "BesideTheCursor"
          },
          {
            "_id": "58ef59b719da52d31a00001c",
            "name": "LRCZ_Elements.Bake"
          }
        ],
        "num_dependents": 23,
        "description": "Revit 2016, Dynamo 1.2 - Set of practical nodes by Konrad K Sobon | www.archi-lab.net | @arch_laboratory",
        "maintainers": [
          {
            "_id": "531e8347bfe42595360000d0",
            "username": "Konrad.Sobon@grimshaw-architects.com"
          }
        ],
        "keywords": [ "archi-lab", "bad", "monkey" ],
        "created": "2014-08-12T04:49:41.531Z"
      },
      {
        
        "_id": "528038ad3f7315936f000058",
        "__v": 149,
        "name": "LunchBox for Dynamo",
        "white_list": false,
        "versions": [
          {
            "_id": "528038ad3f7315936f000059",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/a5710c62-80bf-4d8a-92b5-28e242df9f4fgregPkg261.zip",
            "contents": "LunchBox Mass Addition - Returns the total value of a list of numbers., LunchBox Remap Numbers - Remaps a list of numbers to a new domain., LunchBox Random Split List - Randomly splits a list of objects into two separate lists., LunchBox Domain Variables - Gets the Min and Max variables of a Domain., LunchBox Random Numbers - Generates a list of Random numbers using a domain, amount, and seed., LunchBox Diamond Grid by Face - Create a Diamond XYZ grid on a face.  The face surface must have an untrimmed UV parameter space., LunchBox Staggered Grid by Face - Create a Staggered XYZ grid on a face.  The face surface must have an untrimmed UV parameter space., LunchBox Triangular Grid by Face - Create a Triangular XYZ grid on a face.  The face surface must have an untrimmed UV parameter space., LunchBox Get Domain - Gets the domain from a list of numbers., LunchBox Quad Grid by Face - Create a quadrangular XYZ grid on a face.  The face surface must have an untrimmed UV parameter space., LunchBox Curtain Panel Collector - Collects curtain panel instances and references them.",
            "engine_metadata": "",
            "engine_version": "0.6.2.19362",
            "created": "2013-11-11T01:53:49.832Z",
            "full_dependency_versions": [ "2013.11.10" ],
            "full_dependency_ids": [
              {
                "_id": "528038ad3f7315936f000058",
                "name": "LunchBox for Dynamo"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2013.11.10"
          },
          {
            "_id": "528039793f7315936f00005a",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/232654e9-732f-469e-976a-284b17938248gregPkg903.zip",
            "contents": "LunchBox Curtain Panel Collector - Collects curtain panel instances and references them., LunchBox Diamond Grid by Face - Create a Diamond XYZ grid on a face.  The face surface must have an untrimmed UV parameter space., LunchBox Domain Variables - Gets the Min and Max variables of a Domain., LunchBox Get Domain - Gets the domain from a list of numbers., LunchBox Mass Addition - Returns the total value of a list of numbers., LunchBox Mass Multiplication - Returns the total value of a list of numbers., LunchBox Quad Grid by Face - Create a quadrangular XYZ grid on a face.  The face surface must have an untrimmed UV parameter space., LunchBox Random Numbers - Generates a list of Random numbers using a domain, amount, and seed., LunchBox Random Split List - Randomly splits a list of objects into two separate lists., LunchBox Remap Numbers - Remaps a list of numbers to a new domain., LunchBox Staggered Grid by Face - Create a Staggered XYZ grid on a face.  The face surface must have an untrimmed UV parameter space., LunchBox Triangular Grid by Face - Create a Triangular XYZ grid on a face.  The face surface must have an untrimmed UV parameter space.",
            "engine_metadata": "",
            "engine_version": "0.6.2.19362",
            "created": "2013-11-11T01:57:13.115Z",
            "full_dependency_versions": [ "2013.11.11" ],
            "full_dependency_ids": [
              {
                "_id": "528038ad3f7315936f000058",
                "name": "LunchBox for Dynamo"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2013.11.11"
          },
          {
            "_id": "5281a1323f7315936f00005c",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/f229fa4f-9651-40c9-b32c-c9e50a1448acgregPkg931.zip",
            "contents": "LunchBox Adaptive Component Collector - Gets a list of Adaptive Components from a document using the Family Name., LunchBox Curtain Panel Collector - Collects curtain panel instances and references them., LunchBox Diamond Grid by Face - Create a Diamond XYZ grid on a face.  The face surface must have an untrimmed UV parameter space., LunchBox Domain Variables - Gets the Min and Max variables of a Domain., LunchBox Get Domain - Gets the domain from a list of numbers., LunchBox Mass Addition - Returns the total value of a list of numbers., LunchBox Mass Multiplication - Returns the total value of a list of numbers., LunchBox Quad Grid by Face - Create a quadrangular XYZ grid on a face.  The face surface must have an untrimmed UV parameter space., LunchBox Random Numbers - Generates a list of Random numbers using a domain, amount, and seed., LunchBox Random Split List - Randomly splits a list of objects into two separate lists., LunchBox Remap Numbers - Remaps a list of numbers to a new domain., LunchBox Staggered Grid by Face - Create a Staggered XYZ grid on a face.  The face surface must have an untrimmed UV parameter space., LunchBox Triangular Grid by Face - Create a Triangular XYZ grid on a face.  The face surface must have an untrimmed UV parameter space.",
            "engine_metadata": "",
            "engine_version": "0.6.2.26389",
            "created": "2013-11-12T03:32:02.853Z",
            "full_dependency_versions": [ "2013.11.12" ],
            "full_dependency_ids": [
              {
                "_id": "528038ad3f7315936f000058",
                "name": "LunchBox for Dynamo"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2013.11.12"
          },
          {
            "_id": "528599b93f7315936f000066",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/1f4b7086-d7c8-495e-96d4-ce48bd5cddf2gregPkg354.zip",
            "contents": "LunchBox Adaptive Component Collector - Gets a list of Adaptive Components from a document using the Family Name., LunchBox Attractor Wave - Generates a wave attractor effect using lists of attractors and targets., LunchBox Curtain Panel Collector - Collects curtain panel instances and references them., LunchBox Diamond Grid by Face - Create a Diamond XYZ grid on a face.  The face surface must have an untrimmed UV parameter space., LunchBox Domain Variables - Gets the Min and Max variables of a Domain., LunchBox Get Domain - Gets the domain from a list of numbers., LunchBox Mass Addition - Returns the total value of a list of numbers., LunchBox Mass Multiplication - Returns the total value of a list of numbers., LunchBox Quad Grid by Face - Create a quadrangular XYZ grid on a face.  The face surface must have an untrimmed UV parameter space., LunchBox Random Numbers - Generates a list of Random numbers using a domain, amount, and seed., LunchBox Random Split List - Randomly splits a list of objects into two separate lists., LunchBox Remap Numbers - Remaps a list of numbers to a new domain., LunchBox Staggered Grid by Face - Create a Staggered XYZ grid on a face.  The face surface must have an untrimmed UV parameter space., LunchBox Triangular Grid by Face - Create a Triangular XYZ grid on a face.  The face surface must have an untrimmed UV parameter space.",
            "engine_metadata": "",
            "engine_version": "0.6.2.2709",
            "created": "2013-11-15T03:49:13.521Z",
            "full_dependency_versions": [ "2013.11.15" ],
            "full_dependency_ids": [
              {
                "_id": "528038ad3f7315936f000058",
                "name": "LunchBox for Dynamo"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2013.11.15"
          },
          {
            "_id": "528d05713f7315936f000078",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/dc855809-c5ff-4d7d-81c1-8d21e258df53gregPkg929.zip",
            "contents": "LunchBox Adaptive Component Collector - Gets a list of Adaptive Components from a document using the Family Name., LunchBox Attractor Wave - Generates a wave attractor effect using lists of attractors and targets., LunchBox Curtain Panel Collector - Collects curtain panel instances and references them., LunchBox Diamond Grid by Face - Create a Diamond XYZ grid on a face.  The face surface must have an untrimmed UV parameter space., LunchBox Domain Variables - Gets the Min and Max variables of a Domain., LunchBox Get Domain - Gets the domain from a list of numbers., LunchBox Mass Addition - Returns the total value of a list of numbers., LunchBox Mass Multiplication - Returns the total value of a list of numbers., LunchBox Quad Grid by Face - Create a quadrangular XYZ grid on a face.  The face surface must have an untrimmed UV parameter space., LunchBox Random Numbers - Generates a list of Random numbers using a domain, amount, and seed., LunchBox Random Split List - Randomly splits a list of objects into two separate lists., LunchBox Remap Numbers - Remaps a list of numbers to a new domain., LunchBox Staggered Grid by Face - Create a Staggered XYZ grid on a face.  The face surface must have an untrimmed UV parameter space., LunchBox String to XYZ - Converts a point string \"x,y,z\" into a true Revit XYZ point., LunchBox Triangular Grid by Face - Create a Triangular XYZ grid on a face.  The face surface must have an untrimmed UV parameter space.",
            "engine_metadata": "",
            "engine_version": "0.6.2.2709",
            "created": "2013-11-20T18:54:41.283Z",
            "full_dependency_versions": [ "2013.11.20" ],
            "full_dependency_ids": [
              {
                "_id": "528038ad3f7315936f000058",
                "name": "LunchBox for Dynamo"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2013.11.20"
          },
          {
            "_id": "52bc99f29de41c823500007d",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/6ae1ab03-000b-42c6-91f2-8b8e20dfbccbgregPkg971.zip",
            "contents": "LunchBox Adaptive Component Collector - Gets a list of Adaptive Components from a document using the Family Name., LunchBox Attractor Wave - Generates a wave attractor effect using lists of attractors and targets., LunchBox Curtain Panel Collector - Collects curtain panel instances and references them., LunchBox Diamond Grid by Face - Create a Diamond XYZ grid on a face.  The face surface must have an untrimmed UV parameter space., LunchBox Domain Variables - Gets the Min and Max variables of a Domain., LunchBox Get Domain - Gets the domain from a list of numbers., LunchBox Mass Addition - Returns the total value of a list of numbers., LunchBox Mass Multiplication - Returns the total value of a list of numbers., LunchBox Quad Grid by Face - Create a quadrangular XYZ grid on a face.  The face surface must have an untrimmed UV parameter space., LunchBox Random Numbers - Generates a list of Random numbers using a domain, amount, and seed., LunchBox Random Split List - Randomly splits a list of objects into two separate lists., LunchBox Remap Numbers - Remaps a list of numbers to a new domain., LunchBox Staggered Grid by Face - Create a Staggered XYZ grid on a face.  The face surface must have an untrimmed UV parameter space., LunchBox String to XYZ - Converts a point string \"x,y,z\" into a true Revit XYZ point., LunchBox Triangular Grid by Face - Create a Triangular XYZ grid on a face.  The face surface must have an untrimmed UV parameter space., LunchBox XYZ to String - Converts XYZ objects to strings.",
            "engine_metadata": "",
            "engine_version": "0.6.2.29585",
            "created": "2013-12-26T21:04:50.906Z",
            "full_dependency_versions": [ "2013.12.25" ],
            "full_dependency_ids": [
              {
                "_id": "528038ad3f7315936f000058",
                "name": "LunchBox for Dynamo"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2013.12.25"
          },
          {
            "_id": "52c0938c9de41c8235000088",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/9a5fe79c-0d21-40c0-8e40-9b63935dc642gregPkg961.zip",
            "contents": "LunchBox Adaptive Component Collector - Gets a list of Adaptive Components from a document using the Family Name., LunchBox Attractor Wave - Generates a wave attractor effect using lists of attractors and targets., LunchBox Curtain Panel Collector - Collects curtain panel instances and references them., LunchBox Diamond Grid by Face - Create a Diamond XYZ grid on a face.  The face surface must have an untrimmed UV parameter space., LunchBox Domain Variables - Gets the Min and Max variables of a Domain., LunchBox Get Domain - Gets the domain from a list of numbers., LunchBox Mass Addition - Returns the total value of a list of numbers., LunchBox Mass Multiplication - Returns the total value of a list of numbers., LunchBox Quad Grid by Face - Create a quadrangular XYZ grid on a face.  The face surface must have an untrimmed UV parameter space., LunchBox Random Numbers - Generates a list of Random numbers using a domain, amount, and seed., LunchBox Random Split List - Randomly splits a list of objects into two separate lists., LunchBox Remap Numbers - Remaps a list of numbers to a new domain., LunchBox Staggered Grid by Face - Create a Staggered XYZ grid on a face.  The face surface must have an untrimmed UV parameter space., LunchBox String to XYZ - Converts a point string \"x,y,z\" into a true Revit XYZ point., LunchBox Triangular Grid by Face - Create a Triangular XYZ grid on a face.  The face surface must have an untrimmed UV parameter space., LunchBox XYZ to String - Converts XYZ objects to strings.",
            "engine_metadata": "",
            "engine_version": "0.6.2.29585",
            "created": "2013-12-29T21:26:36.057Z",
            "full_dependency_versions": [ "2013.12.29" ],
            "full_dependency_ids": [
              {
                "_id": "528038ad3f7315936f000058",
                "name": "LunchBox for Dynamo"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2013.12.29"
          },
          {
            "_id": "52e6e140bfe425953600002a",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/7ec5277a-b18f-4597-a9f0-acb9f453e173gregPkg88.zip",
            "contents": "LunchBox Adaptive Component Collector - Gets a list of Adaptive Components from a document using the Family Name., LunchBox Attractor Wave - Generates a wave attractor effect using lists of attractors and targets., LunchBox Curtain Panel Collector - Collects curtain panel instances and references them., LunchBox Diamond Grid by Face - Create a Diamond XYZ grid on a face.  The face surface must have an untrimmed UV parameter space., LunchBox Domain Variables - Gets the Min and Max variables of a Domain., LunchBox Get Domain - Gets the domain from a list of numbers., LunchBox Level Element Collector - Collects Levels from the current Level document, LunchBox Mass Addition - Returns the total value of a list of numbers., LunchBox Mass Multiplication - Returns the total value of a list of numbers., LunchBox Quad Grid by Face - Create a quadrangular XYZ grid on a face.  The face surface must have an untrimmed UV parameter space., LunchBox Random Numbers - Generates a list of Random numbers using a domain, amount, and seed., LunchBox Random Split List - Randomly splits a list of objects into two separate lists., LunchBox Remap Numbers - Remaps a list of numbers to a new domain., LunchBox Room Element Collector - Collects rooms from the Revit document, LunchBox Staggered Grid by Face - Create a Staggered XYZ grid on a face.  The face surface must have an untrimmed UV parameter space., LunchBox String to XYZ - Converts a point string \"x,y,z\" into a true Revit XYZ point., LunchBox Triangular Grid by Face - Create a Triangular XYZ grid on a face.  The face surface must have an untrimmed UV parameter space., LunchBox XYZ to String - Converts XYZ objects to strings.",
            "engine_metadata": "",
            "engine_version": "0.6.2.29585",
            "created": "2014-01-27T22:44:16.501Z",
            "full_dependency_versions": [ "2014.1.27" ],
            "full_dependency_ids": [
              {
                "_id": "528038ad3f7315936f000058",
                "name": "LunchBox for Dynamo"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2014.1.27"
          },
          {
            "_id": "5316c3d3bfe42595360000bc",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/adc02d2f-1bf2-4c69-b727-abaf27c14fe0gregPkg426.zip",
            "contents": "LunchBox Adaptive Component Collector - Gets a list of Adaptive Components from a document using the Family Name., LunchBox Attractor Wave - Generates a wave attractor effect using lists of attractors and targets., LunchBox Braced Grid Stucture 1D - Creates a 1D braced grid structure on a surface, LunchBox Curtain Panel Collector - Collects curtain panel instances and references them., LunchBox Diamond Grid by Face - Create a Diamond XYZ grid on a face.  The face surface must have an untrimmed UV parameter space., LunchBox Domain Variables - Gets the Min and Max variables of a Domain., LunchBox Get Domain - Gets the domain from a list of numbers., LunchBox Grid Structure - Creates a grid wireframe on a surface., LunchBox Level Element Collector - Collects Levels from the current Level document, LunchBox Mass Addition - Returns the total value of a list of numbers., LunchBox Mass Multiplication - Returns the total value of a list of numbers., LunchBox Quad Grid by Face - Create a quadrangular XYZ grid on a face.  The face surface must have an untrimmed UV parameter space., LunchBox Random Numbers - Generates a list of Random numbers using a domain, amount, and seed., LunchBox Random Split List - Randomly splits a list of objects into two separate lists., LunchBox Remap Numbers - Remaps a list of numbers to a new domain., LunchBox Room Element Collector - Collects rooms from the Revit document, LunchBox Staggered Grid by Face - Create a Staggered XYZ grid on a face.  The face surface must have an untrimmed UV parameter space., LunchBox String to XYZ - Converts a point string \"x,y,z\" into a true Revit XYZ point., LunchBox Triangular Grid by Face - Create a Triangular XYZ grid on a face.  The face surface must have an untrimmed UV parameter space., LunchBox XYZ to String - Converts XYZ objects to strings.",
            "engine_metadata": "",
            "engine_version": "0.6.3.38253",
            "created": "2014-03-05T06:27:31.130Z",
            "full_dependency_versions": [ "2014.3.5" ],
            "full_dependency_ids": [
              {
                "_id": "528038ad3f7315936f000058",
                "name": "LunchBox for Dynamo"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2014.3.5"
          },
          {
            "_id": "5317a199bfe42595360000be",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/c805bfda-e572-4e43-89e5-8cdd1e10f539gregPkg302.zip",
            "contents": "LunchBox Adaptive Component Collector - Gets a list of Adaptive Components from a document using the Family Name., LunchBox Attractor Wave - Generates a wave attractor effect using lists of attractors and targets., LunchBox Braced Grid Stucture 1D - Creates a 1D braced grid structure on a surface, LunchBox Curtain Panel Collector - Collects curtain panel instances and references them., LunchBox Diamond Grid by Face - Create a Diamond XYZ grid on a face.  The face surface must have an untrimmed UV parameter space., LunchBox Domain Variables - Gets the Min and Max variables of a Domain., LunchBox Get Domain - Gets the domain from a list of numbers., LunchBox Grid Structure - Creates a grid wireframe on a surface., LunchBox Level Element Collector - Collects Levels from the current Level document, LunchBox Mass Addition - Returns the total value of a list of numbers., LunchBox Mass Multiplication - Returns the total value of a list of numbers., LunchBox Quad Grid by Face - Create a quadrangular XYZ grid on a face.  The face surface must have an untrimmed UV parameter space., LunchBox Random Numbers - Generates a list of Random numbers using a domain, amount, and seed., LunchBox Random Split List - Randomly splits a list of objects into two separate lists., LunchBox Remap Numbers - Remaps a list of numbers to a new domain., LunchBox Room Element Collector - Collects rooms from the Revit document, LunchBox Staggered Grid by Face - Create a Staggered XYZ grid on a face.  The face surface must have an untrimmed UV parameter space., LunchBox String to XYZ - Converts a point string \"x,y,z\" into a true Revit XYZ point., LunchBox Triangular Grid by Face - Create a Triangular XYZ grid on a face.  The face surface must have an untrimmed UV parameter space., LunchBox XYZ Amplitude - Set the amplitude of an XYZ (vector), LunchBox XYZ Angle - Computes the angle between two XYZ vectors., LunchBox XYZ to String - Converts XYZ objects to strings.",
            "engine_metadata": "",
            "engine_version": "0.6.3.38253",
            "created": "2014-03-05T22:13:45.395Z",
            "full_dependency_versions": [ "2014.3.6" ],
            "full_dependency_ids": [
              {
                "_id": "528038ad3f7315936f000058",
                "name": "LunchBox for Dynamo"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2014.3.6"
          },
          {
            "_id": "5372777f0e5572016a00005b",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/37e52f44-580c-4240-bc2f-620643628a28gregPkg409.zip",
            "contents": "LunchBox Adaptive Component Collector - Gets a list of Adaptive Components from a document using the Family Name., LunchBox Attractor Wave - Generates a wave attractor effect using lists of attractors and targets., LunchBox Braced Grid Stucture 1D - Creates a 1D braced grid structure on a surface, LunchBox Curtain Panel Collector - Collects curtain panel instances and references them., LunchBox Diamond Grid by Face - Create a Diamond XYZ grid on a face.  The face surface must have an untrimmed UV parameter space., LunchBox Domain Variables - Gets the Min and Max variables of a Domain., LunchBox Get Domain - Gets the domain from a list of numbers., LunchBox Grid Structure - Creates a grid wireframe on a surface., LunchBox Level Element Collector - Collects Levels from the current Level document, LunchBox Mass Addition - Returns the total value of a list of numbers., LunchBox Mass Multiplication - Returns the total value of a list of numbers., LunchBox Quad Grid by Face - Create a quadrangular XYZ grid on a face.  The face surface must have an untrimmed UV parameter space., LunchBox Random Numbers - Generates a list of Random numbers using a domain, amount, and seed., LunchBox Random Split List - Randomly splits a list of objects into two separate lists., LunchBox Remap Numbers - Remaps a list of numbers to a new domain., LunchBox Room Element Collector - Collects rooms from the Revit document, LunchBox Staggered Grid by Face - Create a Staggered XYZ grid on a face.  The face surface must have an untrimmed UV parameter space., LunchBox String to XYZ - Converts a point string \"x,y,z\" into a true Revit XYZ point., LunchBox Triangular Grid by Face - Create a Triangular XYZ grid on a face.  The face surface must have an untrimmed UV parameter space., LunchBox Wall Element Collector - Collects wall elements from the Revit document., LunchBox XYZ Amplitude - Set the amplitude of an XYZ (vector), LunchBox XYZ Angle - Computes the angle between two XYZ vectors., LunchBox XYZ to String - Converts XYZ objects to strings.",
            "engine_metadata": "",
            "engine_version": "0.6.3.38253",
            "created": "2014-05-13T19:50:23.703Z",
            "full_dependency_versions": [ "2014.5.13" ],
            "full_dependency_ids": [
              {
                "_id": "528038ad3f7315936f000058",
                "name": "LunchBox for Dynamo"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2014.5.13"
          },
          {
            "_id": "5372eb310e5572016a00005c",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/5399b79e-9e3b-4ee7-9219-2512a85e19dbgregPkg979.zip",
            "contents": "LunchBox Adaptive Component Collector - Gets a list of Adaptive Components from a document using the Family Name., LunchBox Attractor Wave - Generates a wave attractor effect using lists of attractors and targets., LunchBox Braced Grid Stucture 1D - Creates a 1D braced grid structure on a surface, LunchBox Curtain Panel Collector - Collects curtain panel instances and references them., LunchBox Diamond Grid by Face - Create a Diamond XYZ grid on a face.  The face surface must have an untrimmed UV parameter space., LunchBox Domain Variables - Gets the Min and Max variables of a Domain., LunchBox Family Instance Collector - Collects Family Instances from the Revit Doc, LunchBox Get Domain - Gets the domain from a list of numbers., LunchBox Grid Structure - Creates a grid wireframe on a surface., LunchBox Level Element Collector - Collects Levels from the current Level document, LunchBox Mass Addition - Returns the total value of a list of numbers., LunchBox Mass Multiplication - Returns the total value of a list of numbers., LunchBox Quad Grid by Face - Create a quadrangular XYZ grid on a face.  The face surface must have an untrimmed UV parameter space., LunchBox Random Numbers - Generates a list of Random numbers using a domain, amount, and seed., LunchBox Random Split List - Randomly splits a list of objects into two separate lists., LunchBox Remap Numbers - Remaps a list of numbers to a new domain., LunchBox Room Element Collector - Collects rooms from the Revit document, LunchBox Staggered Grid by Face - Create a Staggered XYZ grid on a face.  The face surface must have an untrimmed UV parameter space., LunchBox String to XYZ - Converts a point string \"x,y,z\" into a true Revit XYZ point., LunchBox Triangular Grid by Face - Create a Triangular XYZ grid on a face.  The face surface must have an untrimmed UV parameter space., LunchBox Wall Element Collector - Collects wall elements from the Revit document., LunchBox XYZ Amplitude - Set the amplitude of an XYZ (vector), LunchBox XYZ Angle - Computes the angle between two XYZ vectors., LunchBox XYZ to String - Converts XYZ objects to strings.",
            "engine_metadata": "",
            "engine_version": "0.6.3.38253",
            "created": "2014-05-14T04:04:01.371Z",
            "full_dependency_versions": [ "2014.5.14" ],
            "full_dependency_ids": [
              {
                "_id": "528038ad3f7315936f000058",
                "name": "LunchBox for Dynamo"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2014.5.14"
          },
          {
            "_id": "5373f3e90e5572016a000061",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/2781d675-44e4-423e-a672-362788c99864gregPkg217.zip",
            "contents": "LunchBox Adaptive Component Collector - Gets a list of Adaptive Components from a document using the Family Name., LunchBox Attractor Wave - Generates a wave attractor effect using lists of attractors and targets., LunchBox Braced Grid Stucture 1D - Creates a 1D braced grid structure on a surface, LunchBox Curtain Panel Collector - Collects curtain panel instances and references them., LunchBox Diamond Grid by Face - Create a Diamond XYZ grid on a face.  The face surface must have an untrimmed UV parameter space., LunchBox Domain Variables - Gets the Min and Max variables of a Domain., LunchBox Family Instance Collector - Collects Family Instances from the Revit Doc, LunchBox Get Domain - Gets the domain from a list of numbers., LunchBox Grid Structure - Creates a grid wireframe on a surface., LunchBox Level Element Collector - Collects Levels from the current Level document, LunchBox Mass Addition - Returns the total value of a list of numbers., LunchBox Mass Multiplication - Returns the total value of a list of numbers., LunchBox Quad Grid by Face - Create a quadrangular XYZ grid on a face.  The face surface must have an untrimmed UV parameter space., LunchBox Random Numbers - Generates a list of Random numbers using a domain, amount, and seed., LunchBox Random Split List - Randomly splits a list of objects into two separate lists., LunchBox Remap Numbers - Remaps a list of numbers to a new domain., LunchBox Room Element Collector - Collects rooms from the Revit document, LunchBox Staggered Grid by Face - Create a Staggered XYZ grid on a face.  The face surface must have an untrimmed UV parameter space., LunchBox String to XYZ - Converts a point string \"x,y,z\" into a true Revit XYZ point., LunchBox Triangular Grid by Face - Create a Triangular XYZ grid on a face.  The face surface must have an untrimmed UV parameter space., LunchBox Wall Element Collector - Collects wall elements from the Revit document., LunchBox XYZ Amplitude - Set the amplitude of an XYZ (vector), LunchBox XYZ Angle - Computes the angle between two XYZ vectors., LunchBox XYZ to String - Converts XYZ objects to strings.",
            "engine_metadata": "",
            "engine_version": "0.6.3.38253",
            "created": "2014-05-14T22:53:29.090Z",
            "full_dependency_versions": [ "2014.5.15" ],
            "full_dependency_ids": [
              {
                "_id": "528038ad3f7315936f000058",
                "name": "LunchBox for Dynamo"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2014.5.15"
          },
          {
            "_id": "53793fe10e5572016a00006e",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/fc1ee56a-23a6-420a-87f9-7443ec1ecc7egregPkg834.zip",
            "contents": "LunchBox Adaptive Component Collector - Gets a list of Adaptive Components from a document using the Family Name., LunchBox Attractor Wave - Generates a wave attractor effect using lists of attractors and targets., LunchBox Braced Grid Stucture 1D - Creates a 1D braced grid structure on a surface, LunchBox Curtain Panel Collector - Collects curtain panel instances and references them., LunchBox Diamond Grid by Face - Create a Diamond XYZ grid on a face.  The face surface must have an untrimmed UV parameter space., LunchBox Domain Variables - Gets the Min and Max variables of a Domain., LunchBox Family Instance Collector - Collects Family Instances from the Revit Doc, LunchBox Get Domain - Gets the domain from a list of numbers., LunchBox Grid Structure - Creates a grid wireframe on a surface., LunchBox Level Element Collector - Collects Levels from the current Level document, LunchBox Mass Addition - Returns the total value of a list of numbers., LunchBox Mass Multiplication - Returns the total value of a list of numbers., LunchBox Quad Grid by Face - Create a quadrangular XYZ grid on a face.  The face surface must have an untrimmed UV parameter space., LunchBox Random Numbers - Generates a list of Random numbers using a domain, amount, and seed., LunchBox Random Split List - Randomly splits a list of objects into two separate lists., LunchBox Remap Numbers - Remaps a list of numbers to a new domain., LunchBox Room Element Collector - Collects rooms from the Revit document, LunchBox Staggered Grid by Face - Create a Staggered XYZ grid on a face.  The face surface must have an untrimmed UV parameter space., LunchBox String to XYZ - Converts a point string \"x,y,z\" into a true Revit XYZ point., LunchBox Triangular Grid by Face - Create a Triangular XYZ grid on a face.  The face surface must have an untrimmed UV parameter space., LunchBox Wall Element Collector - Collects wall elements from the Revit document., LunchBox XYZ Amplitude - Set the amplitude of an XYZ (vector), LunchBox XYZ Angle - Computes the angle between two XYZ vectors., LunchBox XYZ to String - Converts XYZ objects to strings.",
            "engine_metadata": "",
            "engine_version": "0.6.3.38253",
            "created": "2014-05-18T23:18:57.508Z",
            "full_dependency_versions": [ "2014.5.18" ],
            "full_dependency_ids": [
              {
                "_id": "528038ad3f7315936f000058",
                "name": "LunchBox for Dynamo"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2014.5.18"
          },
          {
            "_id": "53826dec0e5572016a000083",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/9635c36c-1de0-4547-a86c-a938f43b98a2gregPkg305.zip",
            "contents": "LunchBox Adaptive Component Collector - Gets a list of Adaptive Components from a document using the Family Name., LunchBox Attractor Wave - Generates a wave attractor effect using lists of attractors and targets., LunchBox Braced Grid Stucture 1D - Creates a 1D braced grid structure on a surface, LunchBox Curtain Panel Collector - Collects curtain panel instances and references them., LunchBox Deconstruct Solid - Deconstructs a solid into faces, edges, and vertices, LunchBox Diamond Grid by Face - Create a Diamond XYZ grid on a face.  The face surface must have an untrimmed UV parameter space., LunchBox Domain Variables - Gets the Min and Max variables of a Domain., LunchBox Family Instance Collector - Collects Family Instances from the Revit Doc, LunchBox Get Domain - Gets the domain from a list of numbers., LunchBox Get Parameter Value - Gets parameter values from a Revit element., LunchBox Grid Structure - Creates a grid wireframe on a surface., LunchBox Level Element Collector - Collects Levels from the current Level document, LunchBox Mass Addition - Returns the total value of a list of numbers., LunchBox Mass Multiplication - Returns the total value of a list of numbers., LunchBox Quad Grid by Face - Create a quadrangular XYZ grid on a face.  The face surface must have an untrimmed UV parameter space., LunchBox Random Numbers - Generates a list of Random numbers using a domain, amount, and seed., LunchBox Random Split List - Randomly splits a list of objects into two separate lists., LunchBox Remap Numbers - Remaps a list of numbers to a new domain., LunchBox Room Element Collector - Collects rooms from the Revit document, LunchBox Staggered Grid by Face - Create a Staggered XYZ grid on a face.  The face surface must have an untrimmed UV parameter space., LunchBox String to XYZ - Converts a point string \"x,y,z\" into a true Revit XYZ point., LunchBox Structural Framing Collector - Collects Structural Graming Families from the Revit document., LunchBox Triangular Grid by Face - Create a Triangular XYZ grid on a face.  The face surface must have an untrimmed UV parameter space., LunchBox Wall Element Collector - Collects wall elements from the Revit document., LunchBox XYZ Amplitude - Set the amplitude of an XYZ (vector), LunchBox XYZ Angle - Computes the angle between two XYZ vectors., LunchBox XYZ to String - Converts XYZ objects to strings.",
            "engine_metadata": "",
            "engine_version": "0.6.3.38253",
            "created": "2014-05-25T22:25:48.404Z",
            "full_dependency_versions": [ "2014.5.25" ],
            "full_dependency_ids": [
              {
                "_id": "528038ad3f7315936f000058",
                "name": "LunchBox for Dynamo"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2014.5.25"
          },
          {
            "_id": "5383e40e0e5572016a00008e",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/4771fa50-3612-4a4f-807d-eab40b6b9db6gregPkg43.zip",
            "contents": "LunchBox Adaptive Component Collector - Gets a list of Adaptive Components from a document using the Family Name., LunchBox Attractor Wave - Generates a wave attractor effect using lists of attractors and targets., LunchBox Braced Grid Stucture 1D - Creates a 1D braced grid structure on a surface, LunchBox Curtain Panel Collector - Collects curtain panel instances and references them., LunchBox Deconstruct Face - Gets the edges and vertices of a face., LunchBox Deconstruct Solid - Deconstructs a solid into faces, edges, and vertices, LunchBox Diamond Grid by Face - Create a Diamond XYZ grid on a face.  The face surface must have an untrimmed UV parameter space., LunchBox Domain Variables - Gets the Min and Max variables of a Domain., LunchBox Family Instance Collector - Collects Family Instances from the Revit Doc, LunchBox Floor Element Collector - Collects Floor elements from the current Revit document., LunchBox Get Domain - Gets the domain from a list of numbers., LunchBox Get Parameter Value - Gets parameter values from a Revit element., LunchBox Grid Structure - Creates a grid wireframe on a surface., LunchBox Level Element Collector - Collects Levels from the current Level document, LunchBox Mass Addition - Returns the total value of a list of numbers., LunchBox Mass Multiplication - Returns the total value of a list of numbers., LunchBox Quad Grid by Face - Create a quadrangular XYZ grid on a face.  The face surface must have an untrimmed UV parameter space., LunchBox Random Numbers - Generates a list of Random numbers using a domain, amount, and seed., LunchBox Random Split List - Randomly splits a list of objects into two separate lists., LunchBox Remap Numbers - Remaps a list of numbers to a new domain., LunchBox Remove Null Values - Remove 'null' values from a list., LunchBox Room Element Collector - Collects rooms from the Revit document, LunchBox Staggered Grid by Face - Create a Staggered XYZ grid on a face.  The face surface must have an untrimmed UV parameter space., LunchBox String to XYZ - Converts a point string \"x,y,z\" into a true Revit XYZ point., LunchBox Structural Framing Collector - Collects Structural Graming Families from the Revit document., LunchBox Triangular Grid by Face - Create a Triangular XYZ grid on a face.  The face surface must have an untrimmed UV parameter space., LunchBox Wall Element Collector - Collects wall elements from the Revit document., LunchBox XYZ Amplitude - Set the amplitude of an XYZ (vector), LunchBox XYZ Angle - Computes the angle between two XYZ vectors., LunchBox XYZ to String - Converts XYZ objects to strings.",
            "engine_metadata": "",
            "engine_version": "0.6.3.38253",
            "created": "2014-05-27T01:02:06.732Z",
            "full_dependency_versions": [ "2014.5.26" ],
            "full_dependency_ids": [
              {
                "_id": "528038ad3f7315936f000058",
                "name": "LunchBox for Dynamo"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2014.5.26"
          },
          {
            "_id": "5390fa360e5572016a000100",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/be7b9216-8ac8-4ed0-845e-ce403e5116ebgregPkg4.zip",
            "contents": "LunchBox Adaptive Component Collector - Gets a list of Adaptive Components from a document using the Family Name., LunchBox Attractor Wave - Generates a wave attractor effect using lists of attractors and targets., LunchBox Braced Grid Stucture 1D - Creates a 1D braced grid structure on a surface, LunchBox Curtain Panel Collector - Collects curtain panel instances and references them., LunchBox Deconstruct Face - Gets the edges and vertices of a face., LunchBox Deconstruct Solid - Deconstructs a solid into faces, edges, and vertices, LunchBox Diamond Grid by Face - Create a Diamond XYZ grid on a face.  The face surface must have an untrimmed UV parameter space., LunchBox Domain Variables - Gets the Min and Max variables of a Domain., LunchBox Family Instance Collector - Collects Family Instances from the Revit Doc, LunchBox Floor Element Collector - Collects Floor elements from the current Revit document., LunchBox Get Domain - Gets the domain from a list of numbers., LunchBox Get Parameter Value - Gets parameter values from a Revit element., LunchBox Grid Structure - Creates a grid wireframe on a surface., LunchBox Level Element Collector - Collects Levels from the current Level document, LunchBox Mass Addition - Returns the total value of a list of numbers., LunchBox Mass Multiplication - Returns the total value of a list of numbers., LunchBox Quad Grid by Face - Create a quadrangular XYZ grid on a face.  The face surface must have an untrimmed UV parameter space., LunchBox Random Numbers - Generates a list of Random numbers using a domain, amount, and seed., LunchBox Random Split List - Randomly splits a list of objects into two separate lists., LunchBox Remap Numbers - Remaps a list of numbers to a new domain., LunchBox Remove Null Values - Remove 'null' values from a list., LunchBox Room Element Collector - Collects rooms from the Revit document, LunchBox Staggered Grid by Face - Create a Staggered XYZ grid on a face.  The face surface must have an untrimmed UV parameter space., LunchBox String to XYZ - Converts a point string \"x,y,z\" into a true Revit XYZ point., LunchBox Structural Framing Collector - Collects Structural Graming Families from the Revit document., LunchBox Triangular Grid by Face - Create a Triangular XYZ grid on a face.  The face surface must have an untrimmed UV parameter space., LunchBox Wall Element Collector - Collects wall elements from the Revit document., LunchBox XYZ Amplitude - Set the amplitude of an XYZ (vector), LunchBox XYZ Angle - Computes the angle between two XYZ vectors., LunchBox XYZ to String - Converts XYZ objects to strings.",
            "engine_metadata": "",
            "engine_version": "0.6.3.38253",
            "created": "2014-06-05T23:16:06.995Z",
            "full_dependency_versions": [ "2014.6.5" ],
            "full_dependency_ids": [
              {
                "_id": "528038ad3f7315936f000058",
                "name": "LunchBox for Dynamo"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2014.6.5"
          },
          {
            "_id": "53c350eb0e5572016a000130",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/315a9979-8a77-4e2f-b8a3-6e8697ae9f46gregPkg904.zip",
            "contents": "LunchBox Adaptive Component Collector - Gets a list of Adaptive Components from a document using the Family Name., LunchBox Attractor Wave - Generates a wave attractor effect using lists of attractors and targets., LunchBox Attractor - Simple distance-based attractor calculation, LunchBox Braced Grid Stucture 1D - Creates a 1D braced grid structure on a surface, LunchBox Curtain Panel Collector - Collects curtain panel instances and references them., LunchBox Deconstruct Face - Gets the edges and vertices of a face., LunchBox Deconstruct Solid - Deconstructs a Revit solid into faces, edges, and vertices, LunchBox Diamond Grid by Face - Create a Diamond XYZ grid on a face.  The face surface must have an untrimmed UV parameter space., LunchBox Domain Variables - Gets the Min and Max variables of a Domain., LunchBox Family Instance Collector - Collects Family Instances from the Revit Doc, LunchBox Floor Element Collector - Collects Floor elements from the current Revit document., LunchBox Get Domain - Gets the domain from a list of numbers., LunchBox Get Parameter Value - Gets parameter values from a Revit element., LunchBox Grid Structure - Creates a grid wireframe on a surface., LunchBox Level Element Collector - Collects Levels from the current Level document, LunchBox Mass Addition - Returns the total value of a list of numbers., LunchBox Mass Multiplication - Returns the total value of a list of numbers., LunchBox Point to String - Converts Point objects to strings., LunchBox Quad Grid by Face - Create a quadrangular XYZ grid on a face.  The face surface must have an untrimmed UV parameter space., LunchBox Random Numbers - Generates a list of Random numbers using a domain, amount, and seed., LunchBox Random Split List - Randomly splits a list of objects into two separate lists., LunchBox Remap Numbers - Remaps a list of numbers to a new domain., LunchBox Remove Null Values - Remove 'null' values from a list., LunchBox Room Element Collector - Collects rooms from the Revit document, LunchBox Staggered Grid by Face  - Create a Staggered XYZ grid on a face.  The face surface must have an untrimmed UV parameter space., LunchBox String to Point - Converts a point string \"x,y,z\" into a true Point., LunchBox Structural Framing Collector - Collects Structural Graming Families from the Revit document., LunchBox Triangle Grid by Face - Create a Triangular XYZ grid on a face.  The face surface must have an untrimmed UV parameter space., LunchBox Vector Amplitude - Set the amplitude of a vector., LunchBox Vector Angle - Computes the angle between two vectors., LunchBox Wall Element Collector - Collects wall elements from the Revit document.",
            "engine_metadata": "",
            "engine_version": "0.7.1.29946",
            "created": "2014-07-14T03:39:23.979Z",
            "full_dependency_versions": [ "2014.7.13" ],
            "full_dependency_ids": [
              {
                "_id": "528038ad3f7315936f000058",
                "name": "LunchBox for Dynamo"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2014.7.13"
          },
          {
            "_id": "53c45c930e5572016a000132",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/34e7d438-af00-404f-9ee6-91b326003bc8gregPkg416.zip",
            "contents": "LunchBox Adaptive Component Collector - Gets a list of Adaptive Components from a document using the Family Name., LunchBox Attractor Wave - Generates a wave attractor effect using lists of attractors and targets., LunchBox Attractor - Simple distance-based attractor calculation, LunchBox Braced Grid Stucture 1D - Creates a 1D braced grid structure on a surface, LunchBox Curtain Panel Collector - Collects curtain panel instances and references them., LunchBox Deconstruct Face - Gets the edges and vertices of a face., LunchBox Deconstruct Solid - Deconstructs a Revit solid into faces, edges, and vertices, LunchBox Diamond Grid by Face - Create a Diamond XYZ grid on a face.  The face surface must have an untrimmed UV parameter space., LunchBox Domain Variables - Gets the Min and Max variables of a Domain., LunchBox Family Instance Collector - Collects Family Instances from the Revit Doc, LunchBox Floor Element Collector - Collects Floor elements from the current Revit document., LunchBox Get Domain - Gets the domain from a list of numbers., LunchBox Get Parameter Value - Gets parameter values from a Revit element., LunchBox Grid Structure - Creates a grid wireframe on a surface., LunchBox Level Element Collector - Collects Levels from the current Level document, LunchBox Mass Addition - Returns the total value of a list of numbers., LunchBox Mass Multiplication - Returns the total value of a list of numbers., LunchBox Point to String - Converts Point objects to strings., LunchBox Quad Grid by Face - Create a quadrangular XYZ grid on a face.  The face surface must have an untrimmed UV parameter space., LunchBox Random Numbers - Generates a list of Random numbers using a domain, amount, and seed., LunchBox Random Split List - Randomly splits a list of objects into two separate lists., LunchBox Remap Numbers - Remaps a list of numbers to a new domain., LunchBox Remove Null Values - Remove 'null' values from a list., LunchBox Room Element Collector - Collects rooms from the Revit document, LunchBox Staggered Grid by Face  - Create a Staggered XYZ grid on a face.  The face surface must have an untrimmed UV parameter space., LunchBox String to Point - Converts a point string \"x,y,z\" into a true Point., LunchBox Structural Framing Collector - Collects Structural Graming Families from the Revit document., LunchBox Triangle Grid by Face - Create a Triangular XYZ grid on a face.  The face surface must have an untrimmed UV parameter space., LunchBox Vector Amplitude - Set the amplitude of a vector., LunchBox Vector Angle - Computes the angle between two vectors., LunchBox Wall Element Collector - Collects wall elements from the Revit document.",
            "engine_metadata": "",
            "engine_version": "0.7.1.29946",
            "created": "2014-07-14T22:41:23.278Z",
            "full_dependency_versions": [ "2014.7.14" ],
            "full_dependency_ids": [
              {
                "_id": "528038ad3f7315936f000058",
                "name": "LunchBox for Dynamo"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2014.7.14"
          },
          {
            "_id": "53c5eb2d0e5572016a000133",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/6eb315d3-2831-4348-9ece-c5cdaa1c5dc6gregPkg950.zip",
            "contents": "LunchBox Adaptive Component Collector - Gets a list of Adaptive Components from a document using the Family Name., LunchBox Attractor Wave - Generates a wave attractor effect using lists of attractors and targets., LunchBox Attractor - Simple distance-based attractor calculation, LunchBox Braced Grid Stucture 1D - Creates a 1D braced grid structure on a surface, LunchBox Curtain Panel Collector - Collects curtain panel instances and references them., LunchBox Deconstruct Face - Gets the edges and vertices of a face., LunchBox Deconstruct Solid - Deconstructs a Revit solid into faces, edges, and vertices, LunchBox Diamond Grid by Face - Create a Diamond XYZ grid on a face.  The face surface must have an untrimmed UV parameter space., LunchBox Domain Variables - Gets the Min and Max variables of a Domain., LunchBox Family Instance Collector - Collects Family Instances from the Revit Doc, LunchBox Floor Element Collector - Collects Floor elements from the current Revit document., LunchBox Get Domain - Gets the domain from a list of numbers., LunchBox Get Parameter Value - Gets parameter values from a Revit element., LunchBox Grid Structure - Creates a grid wireframe on a surface., LunchBox Level Element Collector - Collects Levels from the current Level document, LunchBox Mass Addition - Returns the total value of a list of numbers., LunchBox Mass Multiplication - Returns the total value of a list of numbers., LunchBox Point to String - Converts Point objects to strings., LunchBox Quad Grid by Face - Create a quadrangular XYZ grid on a face.  The face surface must have an untrimmed UV parameter space., LunchBox Random Numbers - Generates a list of Random numbers using a domain, amount, and seed., LunchBox Random Split List - Randomly splits a list of objects into two separate lists., LunchBox Remap Numbers - Remaps a list of numbers to a new domain., LunchBox Remove Null Values - Remove 'null' values from a list., LunchBox Room Element Collector - Collects rooms from the Revit document, LunchBox Staggered Grid by Face  - Create a Staggered XYZ grid on a face.  The face surface must have an untrimmed UV parameter space., LunchBox String to Point - Converts a point string \"x,y,z\" into a true Point., LunchBox Structural Framing Collector - Collects Structural Graming Families from the Revit document., LunchBox Triangle Grid by Face - Create a Triangular XYZ grid on a face.  The face surface must have an untrimmed UV parameter space., LunchBox Vector Amplitude - Set the amplitude of a vector., LunchBox Vector Angle - Computes the angle between two vectors., LunchBox Wall Element Collector - Collects wall elements from the Revit document.",
            "engine_metadata": "",
            "engine_version": "0.7.1.29946",
            "created": "2014-07-16T03:02:05.540Z",
            "full_dependency_versions": [ "2014.7.15" ],
            "full_dependency_ids": [
              {
                "_id": "528038ad3f7315936f000058",
                "name": "LunchBox for Dynamo"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2014.7.15"
          },
          {
            "_id": "540374450e5572016a0001a5",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/9abb0c67-a450-4d6f-84bf-382a74bf36d9gregPkg523.zip",
            "contents": "LunchBox Adaptive Component Collector - Gets a list of Adaptive Components from a document using the Family Name., LunchBox Attractor Wave - Generates a wave attractor effect using lists of attractors and targets., LunchBox Attractor - Simple distance-based attractor calculation, LunchBox Braced Grid Structure 2D - Creates a braced grid 2D on a surface., LunchBox Braced Grid Stucture 1D - Creates a 1D braced grid structure on a surface, LunchBox Curtain Panel Collector - Collects curtain panel instances and references them., LunchBox Deconstruct Face - Gets the edges and vertices of a face., LunchBox Deconstruct Solid - Deconstructs a Revit solid into faces, edges, and vertices, LunchBox Diagrid Structure - Creates a diagrid structure on a surface., LunchBox Diamond Grid by Face - Create a Diamond XYZ grid on a face.  The face surface must have an untrimmed UV parameter space., LunchBox Domain Variables - Gets the Min and Max variables of a Domain., LunchBox Family Instance Collector - Collects Family Instances from the Revit Doc, LunchBox Floor Element Collector - Collects Floor elements from the current Revit document., LunchBox Get Domain - Gets the domain from a list of numbers., LunchBox Get Parameter Value - Gets parameter values from a Revit element., LunchBox Grid Structure - Creates a grid wireframe on a surface., LunchBox Level Element Collector - Collects Levels from the current Level document, LunchBox Mass Addition - Returns the total value of a list of numbers., LunchBox Mass Multiplication - Returns the total value of a list of numbers., LunchBox Point to String - Converts Point objects to strings., LunchBox Quad Grid by Face - Create a quadrangular XYZ grid on a face.  The face surface must have an untrimmed UV parameter space., LunchBox Random Numbers - Generates a list of Random numbers using a domain, amount, and seed., LunchBox Random Split List - Randomly splits a list of objects into two separate lists., LunchBox Remap Numbers - Remaps a list of numbers to a new domain., LunchBox Remove Null Values - Remove 'null' values from a list., LunchBox Room Element Collector - Collects rooms from the Revit document, LunchBox Space Truss Structure - Create a space truss using a surface., LunchBox Staggered Grid by Face  - Create a Staggered XYZ grid on a face.  The face surface must have an untrimmed UV parameter space., LunchBox String to Point - Converts a point string \"x,y,z\" into a true Point., LunchBox Structural Framing Collector - Collects Structural Graming Families from the Revit document., LunchBox Triangle Grid by Face - Create a Triangular XYZ grid on a face.  The face surface must have an untrimmed UV parameter space., LunchBox Vector Amplitude - Set the amplitude of a vector., LunchBox Vector Angle - Computes the angle between two vectors., LunchBox Wall Element Collector - Collects wall elements from the Revit document.",
            "engine_metadata": "",
            "engine_version": "0.7.1.17276",
            "created": "2014-08-31T19:15:17.296Z",
            "full_dependency_versions": [ "2014.8.31" ],
            "full_dependency_ids": [
              {
                "_id": "528038ad3f7315936f000058",
                "name": "LunchBox for Dynamo"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2014.8.31"
          },
          {
            "_id": "540603eb0e5572016a0001ad",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/0a6ed25a-732a-4d6b-a2cd-914e8949f3b5gregPkg991.zip",
            "contents": "LunchBox Adaptive Component Collector - Gets a list of Adaptive Components from a document using the Family Name., LunchBox Attractor Wave - Generates a wave attractor effect using lists of attractors and targets., LunchBox Attractor - Simple distance-based attractor calculation, LunchBox Braced Grid Structure 2D - Creates a braced grid 2D on a surface., LunchBox Braced Grid Stucture 1D - Creates a 1D braced grid structure on a surface, LunchBox Curtain Panel Collector - Collects curtain panel instances and references them., LunchBox Deconstruct Face - Gets the edges and vertices of a face., LunchBox Deconstruct Solid - Deconstructs a Revit solid into faces, edges, and vertices, LunchBox Diagrid Structure - Creates a diagrid structure on a surface., LunchBox Diamond Grid by Face - Create a Diamond XYZ grid on a face.  The face surface must have an untrimmed UV parameter space., LunchBox Domain Variables - Gets the Min and Max variables of a Domain., LunchBox Family Instance Collector - Collects Family Instances from the Revit Doc, LunchBox Floor Element Collector - Collects Floor elements from the current Revit document., LunchBox Get Domain - Gets the domain from a list of numbers., LunchBox Get Parameter Value - Gets parameter values from a Revit element., LunchBox Grid Structure - Creates a grid wireframe on a surface., LunchBox Level Element Collector - Collects Levels from the current Level document, LunchBox Mass Addition - Returns the total value of a list of numbers., LunchBox Mass Multiplication - Returns the total value of a list of numbers., LunchBox Point to String - Converts Point objects to strings., LunchBox Quad Grid by Face - Create a quadrangular XYZ grid on a face.  The face surface must have an untrimmed UV parameter space., LunchBox Random Numbers - Generates a list of Random numbers using a domain, amount, and seed., LunchBox Random Split List - Randomly splits a list of objects into two separate lists., LunchBox Remap Numbers - Remaps a list of numbers to a new domain., LunchBox Remove Null Values - Remove 'null' values from a list., LunchBox Room Element Collector - Collects rooms from the Revit document, LunchBox Space Truss Structure - Create a space truss using a surface., LunchBox Staggered Grid by Face  - Create a Staggered XYZ grid on a face.  The face surface must have an untrimmed UV parameter space., LunchBox String to Point - Converts a point string \"x,y,z\" into a true Point., LunchBox Structural Framing Collector - Collects Structural Graming Families from the Revit document., LunchBox Triangle Grid by Face - Create a Triangular XYZ grid on a face.  The face surface must have an untrimmed UV parameter space., LunchBox Vector Amplitude - Set the amplitude of a vector., LunchBox Vector Angle - Computes the angle between two vectors., LunchBox Wall Element Collector - Collects wall elements from the Revit document.",
            "engine_metadata": "",
            "engine_version": "0.7.1.17276",
            "created": "2014-09-02T17:52:43.699Z",
            "full_dependency_versions": [ "2014.9.2" ],
            "full_dependency_ids": [
              {
                "_id": "528038ad3f7315936f000058",
                "name": "LunchBox for Dynamo"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2014.9.2"
          },
          {
            "_id": "5447d2c8cc26bfdc5a0000e2",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/7af4ad7b-f56e-465b-afb5-dce9a8d31ce9gregPkg47.zip",
            "contents": "LunchBox Adaptive Component Collector - Gets a list of Adaptive Components from a document using the Family Name., LunchBox Attractor Wave - Generates a wave attractor effect using lists of attractors and targets., LunchBox Attractor - Simple distance-based attractor calculation, LunchBox Braced Grid Structure 2D - Creates a braced grid 2D on a surface., LunchBox Braced Grid Stucture 1D - Creates a 1D braced grid structure on a surface, LunchBox Curtain Panel Collector - Collects curtain panel instances and references them., LunchBox Deconstruct Face - Gets the edges and vertices of a face., LunchBox Deconstruct Solid - Deconstructs a Revit solid into faces, edges, and vertices, LunchBox Diagrid Structure - Creates a diagrid structure on a surface., LunchBox Diamond Grid by Face - Create a Diamond XYZ grid on a face.  The face surface must have an untrimmed UV parameter space., LunchBox Domain Variables - Gets the Min and Max variables of a Domain., LunchBox Family Instance Collector - Collects Family Instances from the Revit Doc, LunchBox Floor Element Collector - Collects Floor elements from the current Revit document., LunchBox Get Domain - Gets the domain from a list of numbers., LunchBox Get Parameter Value - Gets parameter values from a Revit element., LunchBox Grid Structure - Creates a grid wireframe on a surface., LunchBox Level Element Collector - Collects Levels from the current Level document, LunchBox Mass Addition - Returns the total value of a list of numbers., LunchBox Mass Multiplication - Returns the total value of a list of numbers., LunchBox Point to String - Converts Point objects to strings., LunchBox Quad Grid by Face - Create a quadrangular XYZ grid on a face.  The face surface must have an untrimmed UV parameter space., LunchBox Random Numbers - Generates a list of Random numbers using a domain, amount, and seed., LunchBox Random Split List - Randomly splits a list of objects into two separate lists., LunchBox Remap Numbers - Remaps a list of numbers to a new domain., LunchBox Remove Null Values - Remove 'null' values from a list., LunchBox Room Element Collector - Collects rooms from the Revit document, LunchBox Space Truss Structure - Create a space truss using a surface., LunchBox Staggered Grid by Face  - Create a Staggered XYZ grid on a face.  The face surface must have an untrimmed UV parameter space., LunchBox String to Point - Converts a point string \"x,y,z\" into a true Point., LunchBox Structural Framing Collector - Collects Structural Graming Families from the Revit document., LunchBox Triangle Grid by Face - Create a Triangular XYZ grid on a face.  The face surface must have an untrimmed UV parameter space., LunchBox Vector Amplitude - Set the amplitude of a vector., LunchBox Vector Angle - Computes the angle between two vectors., LunchBox Wall Element Collector - Collects wall elements from the Revit document.|ContainsPythonScripts(58B25C0B-CBBE-4DDC-AC39-ECBEB8B55B10)",
            "engine_metadata": "",
            "engine_version": "0.7.2.2921",
            "created": "2014-10-22T15:52:40.712Z",
            "full_dependency_versions": [ "2014.10.22" ],
            "full_dependency_ids": [
              {
                "_id": "528038ad3f7315936f000058",
                "name": "LunchBox for Dynamo"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2014.10.22"
          },
          {
            "_id": "54a5dec1dcee4dfd26000012",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/e91ae90f-4708-4640-a154-776f64300101gregPkg223.zip",
            "contents": "LunchBox Adaptive Component Collector - Gets a list of Adaptive Components from a document using the Family Name., LunchBox Attractor Wave - Generates a wave attractor effect using lists of attractors and targets., LunchBox Attractor - Simple distance-based attractor calculation, LunchBox Braced Grid Structure 2D - Creates a braced grid 2D on a surface., LunchBox Braced Grid Stucture 1D - Creates a 1D braced grid structure on a surface, LunchBox Curtain Panel Collector - Collects curtain panel instances and references them., LunchBox Deconstruct Face - Gets the edges and vertices of a face., LunchBox Deconstruct Solid - Deconstructs a Revit solid into faces, edges, and vertices, LunchBox Diagrid Structure - Creates a diagrid structure on a surface., LunchBox Diamond Grid by Face - Create a Diamond XYZ grid on a face.  The face surface must have an untrimmed UV parameter space., LunchBox Domain Variables - Gets the Min and Max variables of a Domain., LunchBox Family Instance Collector - Collects Family Instances from the Revit Doc, LunchBox Floor Element Collector - Collects Floor elements from the current Revit document., LunchBox Get Domain - Gets the domain from a list of numbers., LunchBox Get Parameter Value - Gets parameter values from a Revit element., LunchBox Grid Structure - Creates a grid wireframe on a surface., LunchBox Helicoid - Creates a parametric Helicoid surface, LunchBox Level Element Collector - Collects Levels from the current Level document, LunchBox Mass Addition - Returns the total value of a list of numbers., LunchBox Mass Multiplication - Returns the total value of a list of numbers., LunchBox Mobius - Creates a parametric mobius surface., LunchBox Paraboloid - Creates a parametric Hyperbolic Paraboloid surface, LunchBox Point to String - Converts Point objects to strings., LunchBox Quad Grid by Face - Create a quadrangular XYZ grid on a face.  The face surface must have an untrimmed UV parameter space., LunchBox Random Numbers - Generates a list of Random numbers using a domain, amount, and seed., LunchBox Random Split List - Randomly splits a list of objects into two separate lists., LunchBox Remap Numbers - Remaps a list of numbers to a new domain., LunchBox Remove Null Values - Remove 'null' values from a list., LunchBox Room Element Collector - Collects rooms from the Revit document, LunchBox Space Truss Structure - Create a space truss using a surface., LunchBox Staggered Grid by Face  - Create a Staggered XYZ grid on a face.  The face surface must have an untrimmed UV parameter space., LunchBox String to Point - Converts a point string \"x,y,z\" into a true Point., LunchBox Structural Framing Collector - Collects Structural Graming Families from the Revit document., LunchBox Torus - Creates a parametric Torus surface, LunchBox Triangle Grid by Face - Create a Triangular XYZ grid on a face.  The face surface must have an untrimmed UV parameter space., LunchBox Vector Amplitude - Set the amplitude of a vector., LunchBox Vector Angle - Computes the angle between two vectors., LunchBox Wall Element Collector - Collects wall elements from the Revit document., LunchBox Wave - Creates a parametric Wave surface",
            "engine_metadata": "",
            "engine_version": "0.7.4.3245",
            "created": "2015-01-01T23:56:49.418Z",
            "full_dependency_versions": [ "2015.1.1" ],
            "full_dependency_ids": [
              {
                "_id": "528038ad3f7315936f000058",
                "name": "LunchBox for Dynamo"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2015.1.1"
          },
          {
            "_id": "54f732b50c7eac9b5700000d",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/098c4e2b-274c-48a3-a01e-5c69f845221egregPkg771.zip",
            "contents": "LunchBox Adaptive Component Collector - Gets a list of Adaptive Components from a document using the Family Name., LunchBox Attractor Wave - Generates a wave attractor effect using lists of attractors and targets., LunchBox Attractor - Simple distance-based attractor calculation, LunchBox Braced Grid Structure 2D - Creates a braced grid 2D on a surface., LunchBox Braced Grid Stucture 1D - Creates a 1D braced grid structure on a surface, LunchBox Curtain Panel Collector - Collects curtain panel instances and references them., LunchBox Deconstruct Face - Gets the edges and vertices of a face., LunchBox Deconstruct Solid - Deconstructs a Revit solid into faces, edges, and vertices, LunchBox Diagrid Structure - Creates a diagrid structure on a surface., LunchBox Diamond Grid by Face - Create a Diamond XYZ grid on a face.  The face surface must have an untrimmed UV parameter space., LunchBox Domain Variables - Gets the Min and Max variables of a Domain., LunchBox Family Instance Collector - Collects Family Instances from the Revit Doc, LunchBox Floor Element Collector - Collects Floor elements from the current Revit document., LunchBox Get Domain - Gets the domain from a list of numbers., LunchBox Get Parameter Value - Gets parameter values from a Revit element., LunchBox Grid Structure - Creates a grid wireframe on a surface., LunchBox Helicoid - Creates a parametric Helicoid surface, LunchBox Level Element Collector - Collects Levels from the current Level document, LunchBox Mass Addition - Returns the total value of a list of numbers., LunchBox Mass Multiplication - Returns the total value of a list of numbers., LunchBox MEP Space Collector - Collects MEP Spaces and properties, LunchBox Mobius - Creates a parametric mobius surface., LunchBox Paraboloid - Creates a parametric Hyperbolic Paraboloid surface, LunchBox Point to String - Converts Point objects to strings., LunchBox Quad Grid by Face - Create a quadrangular XYZ grid on a face.  The face surface must have an untrimmed UV parameter space., LunchBox Random Numbers - Generates a list of Random numbers using a domain, amount, and seed., LunchBox Random Split List - Randomly splits a list of objects into two separate lists., LunchBox Remap Numbers - Remaps a list of numbers to a new domain., LunchBox Remove Null Values - Remove 'null' values from a list., LunchBox Room Element Collector - Collects rooms from the Revit document, LunchBox Space Truss Structure - Create a space truss using a surface., LunchBox Staggered Grid by Face  - Create a Staggered XYZ grid on a face.  The face surface must have an untrimmed UV parameter space., LunchBox String to Point - Converts a point string \"x,y,z\" into a true Point., LunchBox Structural Framing Collector - Collects Structural Graming Families from the Revit document., LunchBox Torus - Creates a parametric Torus surface, LunchBox Triangle Grid by Face - Create a Triangular XYZ grid on a face.  The face surface must have an untrimmed UV parameter space., LunchBox Vector Amplitude - Set the amplitude of a vector., LunchBox Vector Angle - Computes the angle between two vectors., LunchBox Wall Element Collector - Collects wall elements from the Revit document., LunchBox Wave - Creates a parametric Wave surface",
            "engine_metadata": "",
            "engine_version": "0.7.5.3566",
            "created": "2015-03-04T16:28:37.331Z",
            "full_dependency_versions": [ "2015.3.4" ],
            "full_dependency_ids": [
              {
                "_id": "528038ad3f7315936f000058",
                "name": "LunchBox for Dynamo"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2015.3.4"
          },
          {
            "_id": "54fb863d0c7eac9b57000023",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/c83de3c8-356a-4020-b241-b10b40176b23gregPkg652.zip",
            "contents": "LunchBox Adaptive Component Collector - Gets a list of Adaptive Components from a document using the Family Name., LunchBox Attractor Wave - Generates a wave attractor effect using lists of attractors and targets., LunchBox Attractor - Simple distance-based attractor calculation, LunchBox Braced Grid Structure 2D - Creates a braced grid 2D on a surface., LunchBox Braced Grid Stucture 1D - Creates a 1D braced grid structure on a surface, LunchBox Curtain Panel Collector - Collects curtain panel instances and references them., LunchBox Deconstruct Face - Gets the edges and vertices of a face., LunchBox Deconstruct Solid - Deconstructs a Revit solid into faces, edges, and vertices, LunchBox Diagrid Structure - Creates a diagrid structure on a surface., LunchBox Diamond Grid by Face - Create a Diamond XYZ grid on a face.  The face surface must have an untrimmed UV parameter space., LunchBox Domain Variables - Gets the Min and Max variables of a Domain., LunchBox Family Instance Collector - Collects Family Instances from the Revit Doc, LunchBox Floor Element Collector - Collects Floor elements from the current Revit document., LunchBox Get Domain - Gets the domain from a list of numbers., LunchBox Get Parameter Value - Gets parameter values from a Revit element., LunchBox Grid Structure - Creates a grid wireframe on a surface., LunchBox Helicoid - Creates a parametric Helicoid surface, LunchBox Level Element Collector - Collects Levels from the current Level document, LunchBox Mass Addition - Returns the total value of a list of numbers., LunchBox Mass Multiplication - Returns the total value of a list of numbers., LunchBox MEP Space Collector - Collects MEP Spaces and properties, LunchBox Mobius - Creates a parametric mobius surface., LunchBox Paraboloid - Creates a parametric Hyperbolic Paraboloid surface, LunchBox Point to String - Converts Point objects to strings., LunchBox Quad Grid by Face - Create a quadrangular XYZ grid on a face.  The face surface must have an untrimmed UV parameter space., LunchBox Random Numbers - Generates a list of Random numbers using a domain, amount, and seed., LunchBox Random Split List - Randomly splits a list of objects into two separate lists., LunchBox Remap Numbers - Remaps a list of numbers to a new domain., LunchBox Remove Null Values - Remove 'null' values from a list., LunchBox Room Element Collector - Collects rooms from the Revit document, LunchBox Space Truss Structure - Create a space truss using a surface., LunchBox Staggered Grid by Face  - Create a Staggered XYZ grid on a face.  The face surface must have an untrimmed UV parameter space., LunchBox String to Point - Converts a point string \"x,y,z\" into a true Point., LunchBox Structural Framing Collector - Collects Structural Graming Families from the Revit document., LunchBox Torus - Creates a parametric Torus surface, LunchBox Triangle Grid by Face - Create a Triangular XYZ grid on a face.  The face surface must have an untrimmed UV parameter space., LunchBox Vector Amplitude - Set the amplitude of a vector., LunchBox Vector Angle - Computes the angle between two vectors., LunchBox Wall Element Collector - Collects wall elements from the Revit document., LunchBox Wave - Creates a parametric Wave surface",
            "engine_metadata": "",
            "engine_version": "0.7.5.3566",
            "created": "2015-03-07T23:14:05.428Z",
            "full_dependency_versions": [ "2015.3.7" ],
            "full_dependency_ids": [
              {
                "_id": "528038ad3f7315936f000058",
                "name": "LunchBox for Dynamo"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2015.3.7"
          },
          {
            "_id": "54fd1bb60c7eac9b57000029",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/af262652-6151-4a2b-8419-31286fc94ec5gregPkg286.zip",
            "contents": "LunchBox Adaptive Component Collector - Gets a list of Adaptive Components from a document using the Family Name., LunchBox Attractor Wave - Generates a wave attractor effect using lists of attractors and targets., LunchBox Attractor - Simple distance-based attractor calculation, LunchBox Braced Grid Structure 2D - Creates a braced grid 2D on a surface., LunchBox Braced Grid Stucture 1D - Creates a 1D braced grid structure on a surface, LunchBox Curtain Panel Collector - Collects curtain panel instances and references them., LunchBox Deconstruct Face - Gets the edges and vertices of a face., LunchBox Deconstruct Solid - Deconstructs a Revit solid into faces, edges, and vertices, LunchBox Diagrid Structure - Creates a diagrid structure on a surface., LunchBox Diamond Grid by Face - Create a Diamond XYZ grid on a face.  The face surface must have an untrimmed UV parameter space., LunchBox Domain Variables - Gets the Min and Max variables of a Domain., LunchBox Family Instance Collector - Collects Family Instances from the Revit Doc, LunchBox Floor Element Collector - Collects Floor elements from the current Revit document., LunchBox Get Domain - Gets the domain from a list of numbers., LunchBox Get Parameter Value - Gets parameter values from a Revit element., LunchBox Grid Structure - Creates a grid wireframe on a surface., LunchBox Helicoid - Creates a parametric Helicoid surface, LunchBox Level Element Collector - Collects Levels from the current Level document, LunchBox List Matcher - Compares a List A against a List B and matches length of List A.  If ListA > ListB, ListB will be extended.  If ListA < ListB, ListB will be truncated., LunchBox Mass Addition - Returns the total value of a list of numbers., LunchBox Mass Multiplication - Returns the total value of a list of numbers., LunchBox MEP Space Collector - Collects MEP Spaces and properties, LunchBox Mobius - Creates a parametric mobius surface., LunchBox Paraboloid - Creates a parametric Hyperbolic Paraboloid surface, LunchBox Point to String - Converts Point objects to strings., LunchBox Quad Grid by Face - Create a quadrangular XYZ grid on a face.  The face surface must have an untrimmed UV parameter space., LunchBox Random Numbers - Generates a list of Random numbers using a domain, amount, and seed., LunchBox Random Split List - Randomly splits a list of objects into two separate lists., LunchBox Remap Numbers - Remaps a list of numbers to a new domain., LunchBox Remove Null Values - Remove 'null' values from a list., LunchBox Room Element Collector - Collects rooms from the Revit document, LunchBox Space Truss Structure - Create a space truss using a surface., LunchBox Staggered Grid by Face  - Create a Staggered XYZ grid on a face.  The face surface must have an untrimmed UV parameter space., LunchBox String to Point - Converts a point string \"x,y,z\" into a true Point., LunchBox Structural Framing Collector - Collects Structural Graming Families from the Revit document., LunchBox Torus - Creates a parametric Torus surface, LunchBox Triangle Grid by Face - Create a Triangular XYZ grid on a face.  The face surface must have an untrimmed UV parameter space., LunchBox Vector Amplitude - Set the amplitude of a vector., LunchBox Vector Angle - Computes the angle between two vectors., LunchBox Wall Element Collector - Collects wall elements from the Revit document., LunchBox Wave - Creates a parametric Wave surface",
            "engine_metadata": "",
            "engine_version": "0.7.5.3566",
            "created": "2015-03-09T04:04:06.334Z",
            "full_dependency_versions": [ "2015.3.8" ],
            "full_dependency_ids": [
              {
                "_id": "528038ad3f7315936f000058",
                "name": "LunchBox for Dynamo"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2015.3.8"
          },
          {
            "_id": "550b6683008cfd605a00000c",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/17c36df2-60aa-421d-8ccb-74c6e2a40e3cgregPkg346.zip",
            "contents": "LunchBox Adaptive Component Collector - Gets a list of Adaptive Components from a document using the Family Name., LunchBox Attractor Wave - Generates a wave attractor effect using lists of attractors and targets., LunchBox Attractor - Simple distance-based attractor calculation, LunchBox Braced Grid Structure 2D - Creates a braced grid 2D on a surface., LunchBox Braced Grid Stucture 1D - Creates a 1D braced grid structure on a surface, LunchBox Curtain Panel Collector - Collects curtain panel instances and references them., LunchBox Curve to Arcs by Division - Converts a curve to tangent arc segments, LunchBox Curve to Arcs by Parameters - Converts a curve to arcs using parameter values, LunchBox Deconstruct Face - Gets the edges and vertices of a face., LunchBox Deconstruct Solid - Deconstructs a Revit solid into faces, edges, and vertices, LunchBox Diagrid Structure - Creates a diagrid structure on a surface., LunchBox Diamond Grid by Face - Create a Diamond XYZ grid on a face.  The face surface must have an untrimmed UV parameter space., LunchBox Domain Variables - Gets the Min and Max variables of a Domain., LunchBox Family Instance Collector - Collects Family Instances from the Revit Doc, LunchBox Floor Element Collector - Collects Floor elements from the current Revit document., LunchBox Get Domain - Gets the domain from a list of numbers., LunchBox Get Parameter Value - Gets parameter values from a Revit element., LunchBox Grid Structure - Creates a grid wireframe on a surface., LunchBox Helicoid - Creates a parametric Helicoid surface, LunchBox Level Element Collector - Collects Levels from the current Level document, LunchBox List Matcher - Compares a List A against a List B and matches length of List A.  If ListA > ListB, ListB will be extended.  If ListA < ListB, ListB will be truncated., LunchBox Mass Addition - Returns the total value of a list of numbers., LunchBox Mass Multiplication - Returns the total value of a list of numbers., LunchBox MEP Space Collector - Collects MEP Spaces and properties, LunchBox Mobius - Creates a parametric mobius surface., LunchBox Paraboloid - Creates a parametric Hyperbolic Paraboloid surface, LunchBox Planarize Points - Projects a list of a 4 or more points to a common plane., LunchBox Point to String - Converts Point objects to strings., LunchBox Quad Grid by Face - Create a quadrangular XYZ grid on a face.  The face surface must have an untrimmed UV parameter space., LunchBox Random Numbers - Generates a list of Random numbers using a domain, amount, and seed., LunchBox Random Split List - Randomly splits a list of objects into two separate lists., LunchBox Remap Numbers - Remaps a list of numbers to a new domain., LunchBox Remove Null Values - Remove 'null' values from a list., LunchBox Room Element Collector - Collects rooms from the Revit document, LunchBox Space Truss Structure - Create a space truss using a surface., LunchBox Staggered Grid by Face  - Create a Staggered XYZ grid on a face.  The face surface must have an untrimmed UV parameter space., LunchBox String to Point - Converts a point string \"x,y,z\" into a true Point., LunchBox Structural Framing Collector - Collects Structural Graming Families from the Revit document., LunchBox Torus - Creates a parametric Torus surface, LunchBox Triangle Grid by Face - Create a Triangular XYZ grid on a face.  The face surface must have an untrimmed UV parameter space., LunchBox Vector Amplitude - Set the amplitude of a vector., LunchBox Vector Angle - Computes the angle between two vectors., LunchBox Wall Element Collector - Collects wall elements from the Revit document., LunchBox Wave - Creates a parametric Wave surface",
            "engine_metadata": "",
            "engine_version": "0.7.5.3566",
            "created": "2015-03-20T00:14:59.917Z",
            "full_dependency_versions": [ "2015.3.19" ],
            "full_dependency_ids": [
              {
                "_id": "528038ad3f7315936f000058",
                "name": "LunchBox for Dynamo"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2015.3.19"
          },
          {
            "_id": "552f39ac5899bb3705000084",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/05033c48-5de7-4b99-ab61-2845c13d93cfgregPkg672.zip",
            "contents": "LunchBox Adaptive Component Collector - Gets a list of Adaptive Components from a document using the Family Name., LunchBox Area Element Collector - Collects rooms from the Revit document, LunchBox Attractor Wave - Generates a wave attractor effect using lists of attractors and targets., LunchBox Attractor - Simple distance-based attractor calculation, LunchBox Braced Grid Structure 2D - Creates a braced grid 2D on a surface., LunchBox Braced Grid Stucture 1D - Creates a 1D braced grid structure on a surface, LunchBox Curtain Panel Collector - Collects curtain panel instances and references them., LunchBox Curve to Arcs by Division - Converts a curve to tangent arc segments, LunchBox Curve to Arcs by Parameters - Converts a curve to arcs using parameter values, LunchBox Deconstruct Face - Gets the edges and vertices of a face., LunchBox Deconstruct Solid - Deconstructs a Revit solid into faces, edges, and vertices, LunchBox Diagrid Structure - Creates a diagrid structure on a surface., LunchBox Diamond Grid by Face - Create a Diamond XYZ grid on a face.  The face surface must have an untrimmed UV parameter space., LunchBox Domain Variables - Gets the Min and Max variables of a Domain., LunchBox Family Instance Collector - Collects Family Instances from the Revit Doc, LunchBox Floor Element Collector - Collects Floor elements from the current Revit document., LunchBox Get Domain - Gets the domain from a list of numbers., LunchBox Get Parameter Value - Gets parameter values from a Revit element., LunchBox Grid Structure - Creates a grid wireframe on a surface., LunchBox Helicoid - Creates a parametric Helicoid surface, LunchBox Level Element Collector - Collects Levels from the current Level document, LunchBox List Matcher - Compares a List A against a List B and matches length of List A.  If ListA > ListB, ListB will be extended.  If ListA < ListB, ListB will be truncated., LunchBox Mass Addition - Returns the total value of a list of numbers., LunchBox Mass Multiplication - Returns the total value of a list of numbers., LunchBox MEP Space Collector - Collects MEP Spaces and properties, LunchBox Mobius - Creates a parametric mobius surface., LunchBox Paraboloid - Creates a parametric Hyperbolic Paraboloid surface, LunchBox Planarize Points - Projects a list of a 4 or more points to a common plane., LunchBox Point to String - Converts Point objects to strings., LunchBox Quad Grid by Face - Create a quadrangular XYZ grid on a face.  The face surface must have an untrimmed UV parameter space., LunchBox Random Numbers - Generates a list of Random numbers using a domain, amount, and seed., LunchBox Random Split List - Randomly splits a list of objects into two separate lists., LunchBox Remap Numbers - Remaps a list of numbers to a new domain., LunchBox Remove Null Values - Remove 'null' values from a list., LunchBox Room Element Collector - Collects rooms from the Revit document, LunchBox Space Truss Structure - Create a space truss using a surface., LunchBox Staggered Grid by Face  - Create a Staggered XYZ grid on a face.  The face surface must have an untrimmed UV parameter space., LunchBox String to Point - Converts a point string \"x,y,z\" into a true Point., LunchBox Structural Framing Collector - Collects Structural Graming Families from the Revit document., LunchBox Torus - Creates a parametric Torus surface, LunchBox Triangle Grid by Face - Create a Triangular XYZ grid on a face.  The face surface must have an untrimmed UV parameter space., LunchBox Vector Amplitude - Set the amplitude of a vector., LunchBox Vector Angle - Computes the angle between two vectors., LunchBox Wall Element Collector - Collects wall elements from the Revit document., LunchBox Wave - Creates a parametric Wave surface",
            "engine_metadata": "",
            "engine_version": "0.8.1.955",
            "created": "2015-04-16T04:25:16.162Z",
            "full_dependency_versions": [ "2015.4.15" ],
            "full_dependency_ids": [
              {
                "_id": "528038ad3f7315936f000058",
                "name": "LunchBox for Dynamo"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2015.4.15"
          },
          {
            "_id": "553a62dfa8367b9861000030",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/f8e9de46-ecb6-41b0-9eb3-185cb0a45252gregPkg951.zip",
            "contents": "LunchBox Adaptive Component Collector - Gets a list of Adaptive Components from a document using the Family Name., LunchBox Area Element Collector - Collects rooms from the Revit document, LunchBox Attractor Wave - Generates a wave attractor effect using lists of attractors and targets., LunchBox Attractor - Simple distance-based attractor calculation, LunchBox Braced Grid Structure 2D - Creates a braced grid 2D on a surface., LunchBox Braced Grid Stucture 1D - Creates a 1D braced grid structure on a surface, LunchBox Curtain Panel Collector - Collects curtain panel instances and references them., LunchBox Curve to Arcs by Division - Converts a curve to tangent arc segments, LunchBox Curve to Arcs by Parameters - Converts a curve to arcs using parameter values, LunchBox Deconstruct Face - Gets the edges and vertices of a face., LunchBox Deconstruct Solid - Deconstructs a Revit solid into faces, edges, and vertices, LunchBox Diagrid Structure - Creates a diagrid structure on a surface., LunchBox Diamond Grid by Face - Create a Diamond XYZ grid on a face.  The face surface must have an untrimmed UV parameter space., LunchBox Domain Variables - Gets the Min and Max variables of a Domain., LunchBox Family Instance Collector - Collects Family Instances from the Revit Doc, LunchBox Floor Element Collector - Collects Floor elements from the current Revit document., LunchBox Get Domain - Gets the domain from a list of numbers., LunchBox Get Parameter Value - Gets parameter values from a Revit element., LunchBox Grid Structure - Creates a grid wireframe on a surface., LunchBox Helicoid - Creates a parametric Helicoid surface, LunchBox Level Element Collector - Collects Levels from the current Level document, LunchBox List Matcher - Compares a List A against a List B and matches length of List A.  If ListA > ListB, ListB will be extended.  If ListA < ListB, ListB will be truncated., LunchBox Mass Addition - Returns the total value of a list of numbers., LunchBox Mass Multiplication - Returns the total value of a list of numbers., LunchBox MEP Space Collector - Collects MEP Spaces and properties, LunchBox Mobius - Creates a parametric mobius surface., LunchBox Paraboloid - Creates a parametric Hyperbolic Paraboloid surface, LunchBox Planarize Points - Projects a list of a 4 or more points to a common plane., LunchBox Point to String - Converts Point objects to strings., LunchBox Quad Grid by Face - Create a quadrangular XYZ grid on a face.  The face surface must have an untrimmed UV parameter space., LunchBox Random Numbers - Generates a list of Random numbers using a domain, amount, and seed., LunchBox Random Split List - Randomly splits a list of objects into two separate lists., LunchBox Remap Numbers - Remaps a list of numbers to a new domain., LunchBox Remove Null Values - Remove 'null' values from a list., LunchBox Room Element Collector - Collects rooms from the Revit document, LunchBox Space Truss Structure - Create a space truss using a surface., LunchBox Staggered Grid by Face  - Create a Staggered XYZ grid on a face.  The face surface must have an untrimmed UV parameter space., LunchBox String to Point - Converts a point string \"x,y,z\" into a true Point., LunchBox Structural Framing Collector - Collects Structural Graming Families from the Revit document., LunchBox Torus - Creates a parametric Torus surface, LunchBox Triangle Grid by Face - Create a Triangular XYZ grid on a face.  The face surface must have an untrimmed UV parameter space., LunchBox Vector Amplitude - Set the amplitude of a vector., LunchBox Vector Angle - Computes the angle between two vectors., LunchBox Wall Element Collector - Collects wall elements from the Revit document., LunchBox Wave - Creates a parametric Wave surface",
            "engine_metadata": "",
            "engine_version": "0.8.1.955",
            "created": "2015-04-24T15:35:59.806Z",
            "full_dependency_versions": [ "2015.4.24" ],
            "full_dependency_ids": [
              {
                "_id": "528038ad3f7315936f000058",
                "name": "LunchBox for Dynamo"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2015.4.24"
          },
          {
            "_id": "553a87a3a8367b9861000035",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/abf6313a-e201-407b-8605-2d8178e4990agregPkg472.zip",
            "contents": "LunchBox Adaptive Component Collector - Gets a list of Adaptive Components from a document using the Family Name., LunchBox Area Element Collector - Collects rooms from the Revit document, LunchBox Attractor Wave - Generates a wave attractor effect using lists of attractors and targets., LunchBox Attractor - Simple distance-based attractor calculation, LunchBox Braced Grid Structure 2D - Creates a braced grid 2D on a surface., LunchBox Braced Grid Stucture 1D - Creates a 1D braced grid structure on a surface, LunchBox Curtain Panel Collector - Collects curtain panel instances and references them., LunchBox Curve to Arcs by Division - Converts a curve to tangent arc segments, LunchBox Curve to Arcs by Parameters - Converts a curve to arcs using parameter values, LunchBox Deconstruct Face - Gets the edges and vertices of a face., LunchBox Deconstruct Solid - Deconstructs a Revit solid into faces, edges, and vertices, LunchBox Diagrid Structure - Creates a diagrid structure on a surface., LunchBox Diamond Grid by Face - Create a Diamond XYZ grid on a face.  The face surface must have an untrimmed UV parameter space., LunchBox Domain Variables - Gets the Min and Max variables of a Domain., LunchBox Family Instance Collector - Collects Family Instances from the Revit Doc, LunchBox Floor Element Collector - Collects Floor elements from the current Revit document., LunchBox Get Domain - Gets the domain from a list of numbers., LunchBox Get Parameter Value - Gets parameter values from a Revit element., LunchBox Grid Structure - Creates a grid wireframe on a surface., LunchBox Helicoid - Creates a parametric Helicoid surface, LunchBox Level Element Collector - Collects Levels from the current Level document, LunchBox List Matcher - Compares a List A against a List B and matches length of List A.  If ListA > ListB, ListB will be extended.  If ListA < ListB, ListB will be truncated., LunchBox Mass Addition - Returns the total value of a list of numbers., LunchBox Mass Multiplication - Returns the total value of a list of numbers., LunchBox MEP Space Collector - Collects MEP Spaces and properties, LunchBox Mobius - Creates a parametric mobius surface., LunchBox Paraboloid - Creates a parametric Hyperbolic Paraboloid surface, LunchBox Planarize Points - Projects a list of a 4 or more points to a common plane., LunchBox Point to String - Converts Point objects to strings., LunchBox Quad Grid by Face - Create a quadrangular XYZ grid on a face.  The face surface must have an untrimmed UV parameter space., LunchBox Random Numbers - Generates a list of Random numbers using a domain, amount, and seed., LunchBox Random Split List - Randomly splits a list of objects into two separate lists., LunchBox Remap Numbers - Remaps a list of numbers to a new domain., LunchBox Remove Null Values - Remove 'null' values from a list., LunchBox Room Element Collector - Collects rooms from the Revit document, LunchBox Space Truss Structure - Create a space truss using a surface., LunchBox Staggered Grid by Face  - Create a Staggered XYZ grid on a face.  The face surface must have an untrimmed UV parameter space., LunchBox String to Point - Converts a point string \"x,y,z\" into a true Point., LunchBox Structural Framing Collector - Collects Structural Graming Families from the Revit document., LunchBox Torus - Creates a parametric Torus surface, LunchBox Triangle Grid by Face - Create a Triangular XYZ grid on a face.  The face surface must have an untrimmed UV parameter space., LunchBox Vector Amplitude - Set the amplitude of a vector., LunchBox Vector Angle - Computes the angle between two vectors., LunchBox Wall Element Collector - Collects wall elements from the Revit document., LunchBox Wave - Creates a parametric Wave surface",
            "engine_metadata": "",
            "engine_version": "0.8.1.955",
            "created": "2015-04-24T18:12:51.561Z",
            "full_dependency_versions": [ "2015.4.25" ],
            "full_dependency_ids": [
              {
                "_id": "528038ad3f7315936f000058",
                "name": "LunchBox for Dynamo"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2015.4.25"
          },
          {
            "_id": "55649444a8367b98610000d1",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/edfe7f9a-3245-42cd-9f76-c220b8bfa861gregPkg961.zip",
            "contents": "LunchBox Adaptive Component Collector - Gets a list of Adaptive Components from a document using the Family Name., LunchBox Area Element Collector - Collects rooms from the Revit document, LunchBox Attractor Wave - Generates a wave attractor effect using lists of attractors and targets., LunchBox Attractor - Simple distance-based attractor calculation, LunchBox Braced Grid Structure 2D - Creates a braced grid 2D on a surface., LunchBox Braced Grid Stucture 1D - Creates a 1D braced grid structure on a surface, LunchBox Curtain Panel Collector - Collects curtain panel instances and references them., LunchBox Curve to Arcs by Division - Converts a curve to tangent arc segments, LunchBox Curve to Arcs by Parameters - Converts a curve to arcs using parameter values, LunchBox Deconstruct Face - Gets the edges and vertices of a face., LunchBox Deconstruct Solid - Deconstructs a Revit solid into faces, edges, and vertices, LunchBox Diagrid Structure - Creates a diagrid structure on a surface., LunchBox Diamond Grid by Face - Create a Diamond XYZ grid on a face.  The face surface must have an untrimmed UV parameter space., LunchBox Domain Variables - Gets the Min and Max variables of a Domain., LunchBox Family Instance Collector - Collects Family Instances from the Revit Doc, LunchBox Floor Element Collector - Collects Floor elements from the current Revit document., LunchBox Get Domain - Gets the domain from a list of numbers., LunchBox Get Parameter Value - Gets parameter values from a Revit element., LunchBox Grid Structure - Creates a grid wireframe on a surface., LunchBox Helicoid - Creates a parametric Helicoid surface, LunchBox Level Element Collector - Collects Levels from the current Level document, LunchBox List Matcher - Compares a List A against a List B and matches length of List A.  If ListA > ListB, ListB will be extended.  If ListA < ListB, ListB will be truncated., LunchBox Mass Addition - Returns the total value of a list of numbers., LunchBox Mass Multiplication - Returns the total value of a list of numbers., LunchBox MEP Space Collector - Collects MEP Spaces and properties, LunchBox Mobius - Creates a parametric mobius surface., LunchBox Paraboloid - Creates a parametric Hyperbolic Paraboloid surface, LunchBox Planarize Points - Projects a list of a 4 or more points to a common plane., LunchBox Point to String - Converts Point objects to strings., LunchBox Quad Grid by Face - Create a quadrangular XYZ grid on a face.  The face surface must have an untrimmed UV parameter space., LunchBox Random Numbers - Generates a list of Random numbers using a domain, amount, and seed., LunchBox Random Split List - Randomly splits a list of objects into two separate lists., LunchBox Remap Numbers - Remaps a list of numbers to a new domain., LunchBox Remove Null Values - Remove 'null' values from a list., LunchBox Room Element Collector - Collects rooms from the Revit document, LunchBox Sheet Collector - Collects sheets from the current document, LunchBox Space Truss Structure - Create a space truss using a surface., LunchBox Staggered Grid by Face  - Create a Staggered XYZ grid on a face.  The face surface must have an untrimmed UV parameter space., LunchBox String to Point - Converts a point string \"x,y,z\" into a true Point., LunchBox Structural Framing Collector - Collects Structural Graming Families from the Revit document., LunchBox Torus - Creates a parametric Torus surface, LunchBox Triangle Grid by Face - Create a Triangular XYZ grid on a face.  The face surface must have an untrimmed UV parameter space., LunchBox Vector Amplitude - Set the amplitude of a vector., LunchBox Vector Angle - Computes the angle between two vectors., LunchBox Wall Element Collector - Collects wall elements from the Revit document., LunchBox Wave - Creates a parametric Wave surface",
            "engine_metadata": "",
            "engine_version": "0.8.0.950",
            "created": "2015-05-26T15:41:56.138Z",
            "full_dependency_versions": [ "2015.5.26" ],
            "full_dependency_ids": [
              {
                "_id": "528038ad3f7315936f000058",
                "name": "LunchBox for Dynamo"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2015.5.26"
          },
          {
            "_id": "556cdeeca8367b98610000f2",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/9f9626b6-c5a0-4666-89e0-8bd4e159bdbdgregPkg834.zip",
            "contents": "LunchBox Adaptive Component Collector - Gets a list of Adaptive Components from a document using the Family Name., LunchBox Area Element Collector - Collects rooms from the Revit document, LunchBox Attractor Wave - Generates a wave attractor effect using lists of attractors and targets., LunchBox Attractor - Simple distance-based attractor calculation, LunchBox Braced Grid Structure 2D - Creates a braced grid 2D on a surface., LunchBox Braced Grid Stucture 1D - Creates a 1D braced grid structure on a surface, LunchBox Curtain Panel Collector - Collects curtain panel instances and references them., LunchBox Curve to Arcs by Division - Converts a curve to tangent arc segments, LunchBox Curve to Arcs by Parameters - Converts a curve to arcs using parameter values, LunchBox Deconstruct Face - Gets the edges and vertices of a face., LunchBox Deconstruct Solid - Deconstructs a Revit solid into faces, edges, and vertices, LunchBox Diagrid Structure - Creates a diagrid structure on a surface., LunchBox Diamond Grid by Face - Create a Diamond XYZ grid on a face.  The face surface must have an untrimmed UV parameter space., LunchBox Domain Variables - Gets the Min and Max variables of a Domain., LunchBox Family Instance Collector - Collects Family Instances from the Revit Doc, LunchBox Floor Element Collector - Collects Floor elements from the current Revit document., LunchBox Get Domain - Gets the domain from a list of numbers., LunchBox Get Parameter Value - Gets parameter values from a Revit element., LunchBox Grid Structure - Creates a grid wireframe on a surface., LunchBox Helicoid - Creates a parametric Helicoid surface, LunchBox Level Element Collector - Collects Levels from the current Level document, LunchBox List Matcher - Compares a List A against a List B and matches length of List A.  If ListA > ListB, ListB will be extended.  If ListA < ListB, ListB will be truncated., LunchBox Mass Addition - Returns the total value of a list of numbers., LunchBox Mass Multiplication - Returns the total value of a list of numbers., LunchBox MEP Space Collector - Collects MEP Spaces and properties, LunchBox Mobius - Creates a parametric mobius surface., LunchBox Paraboloid - Creates a parametric Hyperbolic Paraboloid surface, LunchBox Planarize Points - Projects a list of a 4 or more points to a common plane., LunchBox Point to String - Converts Point objects to strings., LunchBox Quad Grid by Face - Create a quadrangular XYZ grid on a face.  The face surface must have an untrimmed UV parameter space., LunchBox Random Numbers - Generates a list of Random numbers using a domain, amount, and seed., LunchBox Random Split List - Randomly splits a list of objects into two separate lists., LunchBox Remap Numbers - Remaps a list of numbers to a new domain., LunchBox Remove Null Values - Remove 'null' values from a list., LunchBox Room Element Collector - Collects rooms from the Revit document, LunchBox Sheet Collector - Collects sheets from the current document, LunchBox Space Truss Structure - Create a space truss using a surface., LunchBox Staggered Grid by Face  - Create a Staggered XYZ grid on a face.  The face surface must have an untrimmed UV parameter space., LunchBox String to Point - Converts a point string \"x,y,z\" into a true Point., LunchBox Structural Framing Collector - Collects Structural Graming Families from the Revit document., LunchBox Torus - Creates a parametric Torus surface, LunchBox Triangle Grid by Face - Create a Triangular XYZ grid on a face.  The face surface must have an untrimmed UV parameter space., LunchBox Vector Amplitude - Set the amplitude of a vector., LunchBox Vector Angle - Computes the angle between two vectors., LunchBox Wall Element Collector - Collects wall elements from the Revit document., LunchBox Wave - Creates a parametric Wave surface",
            "engine_metadata": "",
            "engine_version": "0.8.0.950",
            "created": "2015-06-01T22:38:36.636Z",
            "full_dependency_versions": [ "2015.6.1" ],
            "full_dependency_ids": [
              {
                "_id": "528038ad3f7315936f000058",
                "name": "LunchBox for Dynamo"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2015.6.1"
          },
          {
            "_id": "557a61bdf2ae5a9a0700006d",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/6ea77ae2-efc0-4a02-9e6c-c3b0ca610b49gregPkg845.zip",
            "contents": "LunchBox Adaptive Component Collector - Gets a list of Adaptive Components from a document using the Family Name., LunchBox Area Element Collector - Collects rooms from the Revit document, LunchBox Attractor Wave - Generates a wave attractor effect using lists of attractors and targets., LunchBox Attractor - Simple distance-based attractor calculation, LunchBox Braced Grid Structure 2D - Creates a braced grid 2D on a surface., LunchBox Braced Grid Stucture 1D - Creates a 1D braced grid structure on a surface, LunchBox Create Room by Name and Number - Creates an unplaced room element using a name and number., LunchBox Curtain Panel Collector - Collects curtain panel instances and references them., LunchBox Curve to Arcs by Division - Converts a curve to tangent arc segments, LunchBox Curve to Arcs by Parameters - Converts a curve to arcs using parameter values, LunchBox Deconstruct Face - Gets the edges and vertices of a face., LunchBox Deconstruct Solid - Deconstructs a Revit solid into faces, edges, and vertices, LunchBox Diagrid Structure - Creates a diagrid structure on a surface., LunchBox Diamond Grid by Face - Create a Diamond XYZ grid on a face.  The face surface must have an untrimmed UV parameter space., LunchBox Domain Variables - Gets the Min and Max variables of a Domain., LunchBox Family Instance Collector - Collects Family Instances from the Revit Doc, LunchBox Floor Element Collector - Collects Floor elements from the current Revit document., LunchBox Get Domain - Gets the domain from a list of numbers., LunchBox Get Parameter Value - Gets parameter values from a Revit element., LunchBox Grid Structure - Creates a grid wireframe on a surface., LunchBox Helicoid - Creates a parametric Helicoid surface, LunchBox Level Element Collector - Collects Levels from the current Level document, LunchBox List Matcher - Compares a List A against a List B and matches length of List A.  If ListA > ListB, ListB will be extended.  If ListA < ListB, ListB will be truncated., LunchBox Mass Addition - Returns the total value of a list of numbers., LunchBox Mass Multiplication - Returns the total value of a list of numbers., LunchBox MEP Space Collector - Collects MEP Spaces and properties, LunchBox Mobius - Creates a parametric mobius surface., LunchBox Paraboloid - Creates a parametric Hyperbolic Paraboloid surface, LunchBox Planarize Points - Projects a list of a 4 or more points to a common plane., LunchBox Point to String - Converts Point objects to strings., LunchBox Quad Grid by Face - Create a quadrangular XYZ grid on a face.  The face surface must have an untrimmed UV parameter space., LunchBox Random Numbers - Generates a list of Random numbers using a domain, amount, and seed., LunchBox Random Split List - Randomly splits a list of objects into two separate lists., LunchBox Remap Numbers - Remaps a list of numbers to a new domain., LunchBox Remove Null Values - Remove 'null' values from a list., LunchBox Room Element Collector - Collects rooms from the Revit document, LunchBox Sheet Collector - Collects sheets from the current document, LunchBox Space Truss Structure - Create a space truss using a surface., LunchBox Staggered Grid by Face  - Create a Staggered XYZ grid on a face.  The face surface must have an untrimmed UV parameter space., LunchBox String to Point - Converts a point string \"x,y,z\" into a true Point., LunchBox Structural Framing Collector - Collects Structural Graming Families from the Revit document., LunchBox Torus - Creates a parametric Torus surface, LunchBox Triangle Grid by Face - Create a Triangular XYZ grid on a face.  The face surface must have an untrimmed UV parameter space., LunchBox Vector Amplitude - Set the amplitude of a vector., LunchBox Vector Angle - Computes the angle between two vectors., LunchBox Wall Element Collector - Collects wall elements from the Revit document., LunchBox Wave - Creates a parametric Wave surface",
            "engine_metadata": "",
            "engine_version": "0.8.0.950",
            "created": "2015-06-12T04:36:13.979Z",
            "full_dependency_versions": [ "2015.6.11" ],
            "full_dependency_ids": [
              {
                "_id": "528038ad3f7315936f000058",
                "name": "LunchBox for Dynamo"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2015.6.11"
          },
          {
            "_id": "55aebbad662bf0e908000033",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/752f4530-7249-438e-bbfc-4acabf0aac51gregPkg142.zip",
            "contents": "LunchBox Adaptive Component Collector - Gets a list of Adaptive Components from a document using the Family Name., LunchBox Area Element Collector - Collects rooms from the Revit document, LunchBox Attractor Wave - Generates a wave attractor effect using lists of attractors and targets., LunchBox Attractor - Simple distance-based attractor calculation, LunchBox Braced Grid Structure 2D - Creates a braced grid 2D on a surface., LunchBox Braced Grid Stucture 1D - Creates a 1D braced grid structure on a surface, LunchBox Create Room by Name and Number - Creates an unplaced room element using a name and number., LunchBox Curtain Panel Collector - Collects curtain panel instances and references them., LunchBox Curve to Arcs by Division - Converts a curve to tangent arc segments, LunchBox Curve to Arcs by Parameters - Converts a curve to arcs using parameter values, LunchBox Deconstruct Face - Gets the edges and vertices of a face., LunchBox Deconstruct Solid - Deconstructs a Revit solid into faces, edges, and vertices, LunchBox Diagrid Structure - Creates a diagrid structure on a surface., LunchBox Diamond Grid by Face - Create a Diamond XYZ grid on a face.  The face surface must have an untrimmed UV parameter space., LunchBox Domain Variables - Gets the Min and Max variables of a Domain., LunchBox Family Instance Collector - Collects Family Instances from the Revit Doc, LunchBox Floor Element Collector - Collects Floor elements from the current Revit document., LunchBox Get Domain - Gets the domain from a list of numbers., LunchBox Get Parameter Value - Gets parameter values from a Revit element., LunchBox Grid Structure - Creates a grid wireframe on a surface., LunchBox Helicoid - Creates a parametric Helicoid surface, LunchBox Level Element Collector - Collects Levels from the current Level document, LunchBox List Matcher - Compares a List A against a List B and matches length of List A.  If ListA > ListB, ListB will be extended.  If ListA < ListB, ListB will be truncated., LunchBox Mass Addition - Returns the total value of a list of numbers., LunchBox Mass Multiplication - Returns the total value of a list of numbers., LunchBox MEP Space Collector - Collects MEP Spaces and properties, LunchBox Mobius - Creates a parametric mobius surface., LunchBox Paraboloid - Creates a parametric Hyperbolic Paraboloid surface, LunchBox Planarize Points - Projects a list of a 4 or more points to a common plane., LunchBox Point to String - Converts Point objects to strings., LunchBox Quad Grid by Face - Create a quadrangular XYZ grid on a face.  The face surface must have an untrimmed UV parameter space., LunchBox Random Numbers - Generates a list of Random numbers using a domain, amount, and seed., LunchBox Random Split List - Randomly splits a list of objects into two separate lists., LunchBox Remap Numbers - Remaps a list of numbers to a new domain., LunchBox Remove Null Values - Remove 'null' values from a list., LunchBox Room Element Collector - Collects rooms from the Revit document, LunchBox Sheet Collector - Collects sheets from the current document, LunchBox Space Truss Structure - Create a space truss using a surface., LunchBox Staggered Grid by Face  - Create a Staggered XYZ grid on a face.  The face surface must have an untrimmed UV parameter space., LunchBox String to Point - Converts a point string \"x,y,z\" into a true Point., LunchBox Structural Framing Collector - Collects Structural Graming Families from the Revit document., LunchBox Torus - Creates a parametric Torus surface, LunchBox Triangle Grid by Face - Create a Triangular XYZ grid on a face.  The face surface must have an untrimmed UV parameter space., LunchBox Vector Amplitude - Set the amplitude of a vector., LunchBox Vector Angle - Computes the angle between two vectors., LunchBox Wall Element Collector - Collects wall elements from the Revit document., LunchBox Wave - Creates a parametric Wave surface",
            "engine_metadata": "",
            "engine_version": "0.8.1.1942",
            "created": "2015-07-21T21:37:49.491Z",
            "full_dependency_versions": [ "2015.7.21" ],
            "full_dependency_ids": [
              {
                "_id": "528038ad3f7315936f000058",
                "name": "LunchBox for Dynamo"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2015.7.21"
          },
          {
            "_id": "55cca891662bf0e9080000ac",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/4f33148b-bf3f-490a-bf33-d12a86d1ba1dgregPkg662.zip",
            "contents": "LunchBox Adaptive Component Collector - Gets a list of Adaptive Components from a document using the Family Name., LunchBox Area Element Collector - Collects rooms from the Revit document, LunchBox Attractor Wave - Generates a wave attractor effect using lists of attractors and targets., LunchBox Attractor - Simple distance-based attractor calculation, LunchBox Braced Grid Structure 2D - Creates a braced grid 2D on a surface., LunchBox Braced Grid Stucture 1D - Creates a 1D braced grid structure on a surface, LunchBox Create Room by Name and Number - Creates an unplaced room element using a name and number., LunchBox Curtain Panel Collector - Collects curtain panel instances and references them., LunchBox Curve to Arcs by Division - Converts a curve to tangent arc segments, LunchBox Curve to Arcs by Parameters - Converts a curve to arcs using parameter values, LunchBox Deconstruct Face - Gets the edges and vertices of a face., LunchBox Deconstruct Solid - Deconstructs a Revit solid into faces, edges, and vertices, LunchBox Diagrid Structure - Creates a diagrid structure on a surface., LunchBox Diamond Grid by Face - Create a Diamond XYZ grid on a face.  The face surface must have an untrimmed UV parameter space., LunchBox Domain Variables - Gets the Min and Max variables of a Domain., LunchBox Family Instance Collector - Collects Family Instances from the Revit Doc, LunchBox Floor Element Collector - Collects Floor elements from the current Revit document., LunchBox Get Domain - Gets the domain from a list of numbers., LunchBox Get Parameter Value - Gets parameter values from a Revit element., LunchBox Grid Structure - Creates a grid wireframe on a surface., LunchBox Helicoid - Creates a parametric Helicoid surface, LunchBox Level Element Collector - Collects Levels from the current Level document, LunchBox List Matcher - Compares a List A against a List B and matches length of List A.  If ListA > ListB, ListB will be extended.  If ListA < ListB, ListB will be truncated., LunchBox Mass Addition - Returns the total value of a list of numbers., LunchBox Mass Multiplication - Returns the total value of a list of numbers., LunchBox MEP Space Collector - Collects MEP Spaces and properties, LunchBox Mobius - Creates a parametric mobius surface., LunchBox Paraboloid - Creates a parametric Hyperbolic Paraboloid surface, LunchBox Planarize Points - Projects a list of a 4 or more points to a common plane., LunchBox Point to String - Converts Point objects to strings., LunchBox Quad Grid by Face - Create a quadrangular XYZ grid on a face.  The face surface must have an untrimmed UV parameter space., LunchBox Random Numbers - Generates a list of Random numbers using a domain, amount, and seed., LunchBox Random Split List - Randomly splits a list of objects into two separate lists., LunchBox Remap Numbers - Remaps a list of numbers to a new domain., LunchBox Remove Null Values - Remove 'null' values from a list., LunchBox Room Element Collector - Collects rooms from the Revit document, LunchBox Sheet Collector - Collects sheets from the current document, LunchBox Space Truss Structure - Create a space truss using a surface., LunchBox Staggered Grid by Face  - Create a Staggered XYZ grid on a face.  The face surface must have an untrimmed UV parameter space., LunchBox String to Point - Converts a point string \"x,y,z\" into a true Point., LunchBox Structural Framing Collector - Collects Structural Graming Families from the Revit document., LunchBox Torus - Creates a parametric Torus surface, LunchBox Triangle Grid by Face - Create a Triangular XYZ grid on a face.  The face surface must have an untrimmed UV parameter space., LunchBox Vector Amplitude - Set the amplitude of a vector., LunchBox Vector Angle - Computes the angle between two vectors., LunchBox Wall Element Collector - Collects wall elements from the Revit document., LunchBox Wave - Creates a parametric Wave surface",
            "engine_metadata": "",
            "engine_version": "0.8.1.1942",
            "created": "2015-08-13T14:24:17.175Z",
            "full_dependency_versions": [ "2015.8.13" ],
            "full_dependency_ids": [
              {
                "_id": "528038ad3f7315936f000058",
                "name": "LunchBox for Dynamo"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2015.8.13"
          },
          {
            "_id": "55ccee1f662bf0e9080000af",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/b9bd39b4-9b4e-4ec0-bebd-aee57ad66b91gregPkg394.zip",
            "contents": "LunchBox Adaptive Component Collector - Gets a list of Adaptive Components from a document using the Family Name., LunchBox Area Element Collector - Collects rooms from the Revit document, LunchBox Attractor Wave - Generates a wave attractor effect using lists of attractors and targets., LunchBox Attractor - Simple distance-based attractor calculation, LunchBox Braced Grid Structure 2D - Creates a braced grid 2D on a surface., LunchBox Braced Grid Stucture 1D - Creates a 1D braced grid structure on a surface, LunchBox Create Room by Name and Number - Creates an unplaced room element using a name and number., LunchBox Curtain Panel Collector - Collects curtain panel instances and references them., LunchBox Curve to Arcs by Division - Converts a curve to tangent arc segments, LunchBox Curve to Arcs by Parameters - Converts a curve to arcs using parameter values, LunchBox Deconstruct Face - Gets the edges and vertices of a face., LunchBox Deconstruct Solid - Deconstructs a Revit solid into faces, edges, and vertices, LunchBox Diagrid Structure - Creates a diagrid structure on a surface., LunchBox Diamond Grid by Face - Create a Diamond XYZ grid on a face.  The face surface must have an untrimmed UV parameter space., LunchBox Domain Variables - Gets the Min and Max variables of a Domain., LunchBox Family Instance Collector - Collects Family Instances from the Revit Doc, LunchBox Floor Element Collector - Collects Floor elements from the current Revit document., LunchBox Get Domain - Gets the domain from a list of numbers., LunchBox Get Parameter Value - Gets parameter values from a Revit element., LunchBox Grid Structure - Creates a grid wireframe on a surface., LunchBox Helicoid - Creates a parametric Helicoid surface, LunchBox Level Element Collector - Collects Levels from the current Level document, LunchBox List Matcher - Compares a List A against a List B and matches length of List A.  If ListA > ListB, ListB will be extended.  If ListA < ListB, ListB will be truncated., LunchBox Mass Addition - Returns the total value of a list of numbers., LunchBox Mass Multiplication - Returns the total value of a list of numbers., LunchBox MEP Space Collector - Collects MEP Spaces and properties, LunchBox Mobius - Creates a parametric mobius surface., LunchBox Paraboloid - Creates a parametric Hyperbolic Paraboloid surface, LunchBox Planarize Points - Projects a list of a 4 or more points to a common plane., LunchBox Point to String - Converts Point objects to strings., LunchBox Quad Grid by Face - Create a quadrangular XYZ grid on a face.  The face surface must have an untrimmed UV parameter space., LunchBox Random Numbers - Generates a list of Random numbers using a domain, amount, and seed., LunchBox Random Split List - Randomly splits a list of objects into two separate lists., LunchBox Remap Numbers - Remaps a list of numbers to a new domain., LunchBox Remove Null Values - Remove 'null' values from a list., LunchBox Room Element Collector - Collects rooms from the Revit document, LunchBox Sheet Collector - Collects sheets from the current document, LunchBox Space Truss Structure - Create a space truss using a surface., LunchBox Staggered Grid by Face  - Create a Staggered XYZ grid on a face.  The face surface must have an untrimmed UV parameter space., LunchBox String to Point - Converts a point string \"x,y,z\" into a true Point., LunchBox Structural Framing Collector - Collects Structural Graming Families from the Revit document., LunchBox Torus - Creates a parametric Torus surface, LunchBox Triangle Grid by Face - Create a Triangular XYZ grid on a face.  The face surface must have an untrimmed UV parameter space., LunchBox Vector Amplitude - Set the amplitude of a vector., LunchBox Vector Angle - Computes the angle between two vectors., LunchBox Wall Element Collector - Collects wall elements from the Revit document., LunchBox Wave - Creates a parametric Wave surface",
            "engine_metadata": "",
            "engine_version": "0.8.1.1942",
            "created": "2015-08-13T19:21:03.826Z",
            "full_dependency_versions": [ "2015.8.14" ],
            "full_dependency_ids": [
              {
                "_id": "528038ad3f7315936f000058",
                "name": "LunchBox for Dynamo"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2015.8.14"
          },
          {
            "_id": "55d22aa6662bf0e9080000d8",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/2f75c5db-a1ce-424e-a830-8b2ebe3b8504gregPkg155.zip",
            "contents": "LunchBox Adaptive Component Collector - Gets a list of Adaptive Components from a document using the Family Name., LunchBox Area Element Collector - Collects rooms from the Revit document, LunchBox Attractor Wave - Generates a wave attractor effect using lists of attractors and targets., LunchBox Attractor - Simple distance-based attractor calculation, LunchBox Braced Grid Structure 2D - Creates a braced grid 2D on a surface., LunchBox Braced Grid Stucture 1D - Creates a 1D braced grid structure on a surface, LunchBox Create Room by Name and Number - Creates an unplaced room element using a name and number., LunchBox Curtain Panel Collector - Collects curtain panel instances and references them., LunchBox Curve to Arcs by Division - Converts a curve to tangent arc segments, LunchBox Curve to Arcs by Parameters - Converts a curve to arcs using parameter values, LunchBox Deconstruct Face - Gets the edges and vertices of a face., LunchBox Deconstruct Solid - Deconstructs a Revit solid into faces, edges, and vertices, LunchBox Diagrid Structure - Creates a diagrid structure on a surface., LunchBox Diamond Grid by Face - Create a Diamond XYZ grid on a face.  The face surface must have an untrimmed UV parameter space., LunchBox Domain Variables - Gets the Min and Max variables of a Domain., LunchBox Family Instance Collector - Collects Family Instances from the Revit Doc, LunchBox Floor Element Collector - Collects Floor elements from the current Revit document., LunchBox Get Domain - Gets the domain from a list of numbers., LunchBox Get Parameter Value - Gets parameter values from a Revit element., LunchBox Grid Structure - Creates a grid wireframe on a surface., LunchBox Helicoid - Creates a parametric Helicoid surface, LunchBox Level Element Collector - Collects Levels from the current Level document, LunchBox List Matcher - Compares a List A against a List B and matches length of List A.  If ListA > ListB, ListB will be extended.  If ListA < ListB, ListB will be truncated., LunchBox Mass Addition - Returns the total value of a list of numbers., LunchBox Mass Multiplication - Returns the total value of a list of numbers., LunchBox MEP Space Collector - Collects MEP Spaces and properties, LunchBox Mobius - Creates a parametric mobius surface., LunchBox Paraboloid - Creates a parametric Hyperbolic Paraboloid surface, LunchBox Planarize Points - Projects a list of a 4 or more points to a common plane., LunchBox Point to String - Converts Point objects to strings., LunchBox Quad Grid by Face - Create a quadrangular XYZ grid on a face.  The face surface must have an untrimmed UV parameter space., LunchBox Random Numbers - Generates a list of Random numbers using a domain, amount, and seed., LunchBox Random Split List - Randomly splits a list of objects into two separate lists., LunchBox Remap Numbers - Remaps a list of numbers to a new domain., LunchBox Remove Null Values - Remove 'null' values from a list., LunchBox Room Element Collector - Collects rooms from the Revit document, LunchBox Sheet Collector - Collects sheets from the current document, LunchBox Space Truss Structure - Create a space truss using a surface., LunchBox Staggered Grid by Face  - Create a Staggered XYZ grid on a face.  The face surface must have an untrimmed UV parameter space., LunchBox String to Point - Converts a point string \"x,y,z\" into a true Point., LunchBox Structural Framing Collector - Collects Structural Graming Families from the Revit document., LunchBox Torus - Creates a parametric Torus surface, LunchBox Triangle Grid by Face - Create a Triangular XYZ grid on a face.  The face surface must have an untrimmed UV parameter space., LunchBox Vector Amplitude - Set the amplitude of a vector., LunchBox Vector Angle - Computes the angle between two vectors., LunchBox Wall Element Collector - Collects wall elements from the Revit document., LunchBox Wave - Creates a parametric Wave surface",
            "engine_metadata": "",
            "engine_version": "0.8.1.1942",
            "created": "2015-08-17T18:40:38.317Z",
            "full_dependency_versions": [ "2015.8.17" ],
            "full_dependency_ids": [
              {
                "_id": "528038ad3f7315936f000058",
                "name": "LunchBox for Dynamo"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2015.8.17"
          },
          {
            "_id": "5602a8d4662bf0e9080001cd",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/0058ce88-b54d-4be0-8c20-b006e213c5bcgregPkg493.zip",
            "contents": "LunchBox Adaptive Component Collector - Gets a list of Adaptive Components from a document using the Family Name., LunchBox Area Element Collector - Collects rooms from the Revit document, LunchBox Attractor Wave - Generates a wave attractor effect using lists of attractors and targets., LunchBox Attractor - Simple distance-based attractor calculation, LunchBox Braced Grid Structure 2D - Creates a braced grid 2D on a surface., LunchBox Braced Grid Stucture 1D - Creates a 1D braced grid structure on a surface, LunchBox Create Room by Name and Number - Creates an unplaced room element using a name and number., LunchBox Curtain Panel Collector - Collects curtain panel instances and references them., LunchBox Curve to Arcs by Division - Converts a curve to tangent arc segments, LunchBox Curve to Arcs by Parameters - Converts a curve to arcs using parameter values, LunchBox Deconstruct Face - Gets the edges and vertices of a face., LunchBox Deconstruct Solid - Deconstructs a Revit solid into faces, edges, and vertices, LunchBox Diagrid Structure - Creates a diagrid structure on a surface., LunchBox Diamond Grid by Face - Create a Diamond XYZ grid on a face.  The face surface must have an untrimmed UV parameter space., LunchBox Domain Variables - Gets the Min and Max variables of a Domain., LunchBox Family Instance Collector - Collects Family Instances from the Revit Doc, LunchBox Floor Element Collector - Collects Floor elements from the current Revit document., LunchBox Get Domain - Gets the domain from a list of numbers., LunchBox Get Parameter Value - Gets parameter values from a Revit element., LunchBox Grid Structure - Creates a grid wireframe on a surface., LunchBox Helicoid - Creates a parametric Helicoid surface, LunchBox Level Element Collector - Collects Levels from the current Level document, LunchBox List Matcher - Compares a List A against a List B and matches length of List A.  If ListA > ListB, ListB will be extended.  If ListA < ListB, ListB will be truncated., LunchBox Mass Addition - Returns the total value of a list of numbers., LunchBox Mass Multiplication - Returns the total value of a list of numbers., LunchBox MEP Space Collector - Collects MEP Spaces and properties, LunchBox Mobius - Creates a parametric mobius surface., LunchBox Paraboloid - Creates a parametric Hyperbolic Paraboloid surface, LunchBox Planarize Points - Projects a list of a 4 or more points to a common plane., LunchBox Point to String - Converts Point objects to strings., LunchBox Quad Grid by Face - Create a quadrangular XYZ grid on a face.  The face surface must have an untrimmed UV parameter space., LunchBox Random Numbers - Generates a list of Random numbers using a domain, amount, and seed., LunchBox Random Split List - Randomly splits a list of objects into two separate lists., LunchBox Remap Numbers - Remaps a list of numbers to a new domain., LunchBox Remove Null Values - Remove 'null' values from a list., LunchBox Room Element Collector - Collects rooms from the Revit document, LunchBox Sheet Collector - Collects sheets from the current document, LunchBox Space Truss Structure - Create a space truss using a surface., LunchBox Staggered Grid by Face  - Create a Staggered XYZ grid on a face.  The face surface must have an untrimmed UV parameter space., LunchBox String to Point - Converts a point string \"x,y,z\" into a true Point., LunchBox Structural Framing Collector - Collects Structural Graming Families from the Revit document., LunchBox Torus - Creates a parametric Torus surface, LunchBox Triangle Grid by Face - Create a Triangular XYZ grid on a face.  The face surface must have an untrimmed UV parameter space., LunchBox Vector Amplitude - Set the amplitude of a vector., LunchBox Vector Angle - Computes the angle between two vectors., LunchBox Wall Element Collector - Collects wall elements from the Revit document., LunchBox Wave - Creates a parametric Wave surface",
            "engine_metadata": "",
            "engine_version": "0.8.2.2392",
            "created": "2015-09-23T13:27:48.620Z",
            "full_dependency_versions": [ "2015.9.23" ],
            "full_dependency_ids": [
              {
                "_id": "528038ad3f7315936f000058",
                "name": "LunchBox for Dynamo"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2015.9.23"
          },
          {
            "_id": "56071410662bf0e9080001e6",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/d4a0c2fd-1224-4271-8f05-e7740cc7f329gregPkg978.zip",
            "contents": "LunchBox Adaptive Component Collector - Gets a list of Adaptive Components from a document using the Family Name., LunchBox Area Element Collector - Collects rooms from the Revit document, LunchBox Attractor Wave - Generates a wave attractor effect using lists of attractors and targets., LunchBox Attractor - Simple distance-based attractor calculation, LunchBox Braced Grid Structure 2D - Creates a braced grid 2D on a surface., LunchBox Braced Grid Stucture 1D - Creates a 1D braced grid structure on a surface, LunchBox Create Room by Name and Number - Creates an unplaced room element using a name and number., LunchBox Curtain Panel Collector - Collects curtain panel instances and references them., LunchBox Curve to Arcs by Division - Converts a curve to tangent arc segments, LunchBox Curve to Arcs by Parameters - Converts a curve to arcs using parameter values, LunchBox Deconstruct Face - Gets the edges and vertices of a face., LunchBox Deconstruct Solid - Deconstructs a Revit solid into faces, edges, and vertices, LunchBox Diagrid Structure - Creates a diagrid structure on a surface., LunchBox Diamond Grid by Face - Create a Diamond XYZ grid on a face.  The face surface must have an untrimmed UV parameter space., LunchBox Domain Variables - Gets the Min and Max variables of a Domain., LunchBox Family Instance Collector - Collects Family Instances from the Revit Doc, LunchBox Floor Element Collector - Collects Floor elements from the current Revit document., LunchBox Get Domain - Gets the domain from a list of numbers., LunchBox Get Parameter Value - Gets parameter values from a Revit element., LunchBox Grid Structure - Creates a grid wireframe on a surface., LunchBox Helicoid - Creates a parametric Helicoid surface, LunchBox Level Element Collector - Collects Levels from the current Level document, LunchBox List Matcher - Compares a List A against a List B and matches length of List A.  If ListA > ListB, ListB will be extended.  If ListA < ListB, ListB will be truncated., LunchBox Mass Addition - Returns the total value of a list of numbers., LunchBox Mass Multiplication - Returns the total value of a list of numbers., LunchBox MEP Space Collector - Collects MEP Spaces and properties, LunchBox Mobius - Creates a parametric mobius surface., LunchBox Paraboloid - Creates a parametric Hyperbolic Paraboloid surface, LunchBox Planarize Points - Projects a list of a 4 or more points to a common plane., LunchBox Point to String - Converts Point objects to strings., LunchBox Quad Grid by Face - Create a quadrangular XYZ grid on a face.  The face surface must have an untrimmed UV parameter space., LunchBox Random Numbers - Generates a list of Random numbers using a domain, amount, and seed., LunchBox Random Split List - Randomly splits a list of objects into two separate lists., LunchBox Remap Numbers - Remaps a list of numbers to a new domain., LunchBox Remove Null Values - Remove 'null' values from a list., LunchBox Room Element Collector - Collects rooms from the Revit document, LunchBox Sheet Collector - Collects sheets from the current document, LunchBox Space Truss Structure - Create a space truss using a surface., LunchBox Staggered Grid by Face  - Create a Staggered XYZ grid on a face.  The face surface must have an untrimmed UV parameter space., LunchBox String to Point - Converts a point string \"x,y,z\" into a true Point., LunchBox Structural Framing Collector - Collects Structural Graming Families from the Revit document., LunchBox Torus - Creates a parametric Torus surface, LunchBox Triangle Grid by Face - Create a Triangular XYZ grid on a face.  The face surface must have an untrimmed UV parameter space., LunchBox Vector Amplitude - Set the amplitude of a vector., LunchBox Vector Angle - Computes the angle between two vectors., LunchBox Wall Element Collector - Collects wall elements from the Revit document., LunchBox Wave - Creates a parametric Wave surface",
            "engine_metadata": "",
            "engine_version": "0.8.2.2392",
            "created": "2015-09-26T21:54:24.078Z",
            "full_dependency_versions": [ "2015.9.26" ],
            "full_dependency_ids": [
              {
                "_id": "528038ad3f7315936f000058",
                "name": "LunchBox for Dynamo"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2015.9.26"
          },
          {
            "_id": "56071740662bf0e9080001e7",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/5c4fc828-de0b-4291-bbf9-faf8df75bec6gregPkg920.zip",
            "contents": "LunchBox Adaptive Component Collector - Gets a list of Adaptive Components from a document using the Family Name., LunchBox Area Element Collector - Collects rooms from the Revit document, LunchBox Attractor Wave - Generates a wave attractor effect using lists of attractors and targets., LunchBox Attractor - Simple distance-based attractor calculation, LunchBox Braced Grid Structure 2D - Creates a braced grid 2D on a surface., LunchBox Braced Grid Stucture 1D - Creates a 1D braced grid structure on a surface, LunchBox Create Room by Name and Number - Creates an unplaced room element using a name and number., LunchBox Curtain Panel Collector - Collects curtain panel instances and references them., LunchBox Curve to Arcs by Division - Converts a curve to tangent arc segments, LunchBox Curve to Arcs by Parameters - Converts a curve to arcs using parameter values, LunchBox Deconstruct Face - Gets the edges and vertices of a face., LunchBox Deconstruct Solid - Deconstructs a Revit solid into faces, edges, and vertices, LunchBox Diagrid Structure - Creates a diagrid structure on a surface., LunchBox Diamond Grid by Face - Create a Diamond XYZ grid on a face.  The face surface must have an untrimmed UV parameter space., LunchBox Domain Variables - Gets the Min and Max variables of a Domain., LunchBox Family Instance Collector - Collects Family Instances from the Revit Doc, LunchBox Floor Element Collector - Collects Floor elements from the current Revit document., LunchBox Get Domain - Gets the domain from a list of numbers., LunchBox Get Parameter Value - Gets parameter values from a Revit element., LunchBox Grid Structure - Creates a grid wireframe on a surface., LunchBox Helicoid - Creates a parametric Helicoid surface, LunchBox Level Element Collector - Collects Levels from the current Level document, LunchBox List Matcher - Compares a List A against a List B and matches length of List A.  If ListA > ListB, ListB will be extended.  If ListA < ListB, ListB will be truncated., LunchBox Mass Addition - Returns the total value of a list of numbers., LunchBox Mass Multiplication - Returns the total value of a list of numbers., LunchBox MEP Space Collector - Collects MEP Spaces and properties, LunchBox Mobius - Creates a parametric mobius surface., LunchBox Paraboloid - Creates a parametric Hyperbolic Paraboloid surface, LunchBox Planarize Points - Projects a list of a 4 or more points to a common plane., LunchBox Point to String - Converts Point objects to strings., LunchBox Quad Grid by Face - Create a quadrangular XYZ grid on a face.  The face surface must have an untrimmed UV parameter space., LunchBox Random Numbers - Generates a list of Random numbers using a domain, amount, and seed., LunchBox Random Split List - Randomly splits a list of objects into two separate lists., LunchBox Remap Numbers - Remaps a list of numbers to a new domain., LunchBox Remove Null Values - Remove 'null' values from a list., LunchBox Room Element Collector - Collects rooms from the Revit document, LunchBox Sheet Collector - Collects sheets from the current document, LunchBox Space Truss Structure - Create a space truss using a surface., LunchBox Staggered Grid by Face  - Create a Staggered XYZ grid on a face.  The face surface must have an untrimmed UV parameter space., LunchBox String to Point - Converts a point string \"x,y,z\" into a true Point., LunchBox Structural Framing Collector - Collects Structural Graming Families from the Revit document., LunchBox Torus - Creates a parametric Torus surface, LunchBox Triangle Grid by Face - Create a Triangular XYZ grid on a face.  The face surface must have an untrimmed UV parameter space., LunchBox Vector Amplitude - Set the amplitude of a vector., LunchBox Vector Angle - Computes the angle between two vectors., LunchBox Wall Element Collector - Collects wall elements from the Revit document., LunchBox Wave - Creates a parametric Wave surface",
            "engine_metadata": "",
            "engine_version": "0.8.2.2392",
            "created": "2015-09-26T22:08:00.534Z",
            "full_dependency_versions": [ "2015.9.27" ],
            "full_dependency_ids": [
              {
                "_id": "528038ad3f7315936f000058",
                "name": "LunchBox for Dynamo"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2015.9.27"
          },
          {
            "_id": "5653f9fd0370b0a907000008",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/3ec1e1ee-2eac-49f2-a4ee-13397d8c8b87gregPkg882.zip",
            "contents": "LunchBox Adaptive Component Collector - Gets a list of Adaptive Components from a document using the Family Name., LunchBox Area Element Collector - Collects rooms from the Revit document, LunchBox Attractor Wave - Generates a wave attractor effect using lists of attractors and targets., LunchBox Attractor - Simple distance-based attractor calculation, LunchBox Braced Grid Structure 2D - Creates a braced grid 2D on a surface., LunchBox Braced Grid Stucture 1D - Creates a 1D braced grid structure on a surface, LunchBox Create Room by Name and Number - Creates an unplaced room element using a name and number., LunchBox Curtain Panel Collector - Collects curtain panel instances and references them., LunchBox Curve to Arcs by Division - Converts a curve to tangent arc segments, LunchBox Curve to Arcs by Parameters - Converts a curve to arcs using parameter values, LunchBox Deconstruct Face - Gets the edges and vertices of a face., LunchBox Deconstruct Solid - Deconstructs a Revit solid into faces, edges, and vertices, LunchBox Diagrid Structure - Creates a diagrid structure on a surface., LunchBox Diamond Grid by Face - Create a Diamond XYZ grid on a face.  The face surface must have an untrimmed UV parameter space., LunchBox Domain Variables - Gets the Min and Max variables of a Domain., LunchBox Family Instance Collector - Collects Family Instances from the Revit Doc, LunchBox Floor Element Collector - Collects Floor elements from the current Revit document., LunchBox Get Domain - Gets the domain from a list of numbers., LunchBox Get Parameter Value - Gets parameter values from a Revit element., LunchBox Grid Structure - Creates a grid wireframe on a surface., LunchBox Helicoid - Creates a parametric Helicoid surface, LunchBox Level Element Collector - Collects Levels from the current Level document, LunchBox List Matcher - Compares a List A against a List B and matches length of List A.  If ListA > ListB, ListB will be extended.  If ListA < ListB, ListB will be truncated., LunchBox Mass Addition - Returns the total value of a list of numbers., LunchBox Mass Multiplication - Returns the total value of a list of numbers., LunchBox MEP Space Collector - Collects MEP Spaces and properties, LunchBox Mobius - Creates a parametric mobius surface., LunchBox Paraboloid - Creates a parametric Hyperbolic Paraboloid surface, LunchBox Planarize Points - Projects a list of a 4 or more points to a common plane., LunchBox Point to String - Converts Point objects to strings., LunchBox Quad Grid by Face - Create a quadrangular XYZ grid on a face.  The face surface must have an untrimmed UV parameter space., LunchBox Random Numbers - Generates a list of Random numbers using a domain, amount, and seed., LunchBox Random Split List - Randomly splits a list of objects into two separate lists., LunchBox Remap Numbers - Remaps a list of numbers to a new domain., LunchBox Remove Null Values - Remove 'null' values from a list., LunchBox Room Element Collector - Collects rooms from the Revit document, LunchBox Sheet Collector - Collects sheets from the current document, LunchBox Space Truss Structure - Create a space truss using a surface., LunchBox Staggered Grid by Face  - Create a Staggered XYZ grid on a face.  The face surface must have an untrimmed UV parameter space., LunchBox String to Point - Converts a point string \"x,y,z\" into a true Point., LunchBox Structural Framing Collector - Collects Structural Graming Families from the Revit document., LunchBox Torus - Creates a parametric Torus surface, LunchBox Triangle Grid by Face - Create a Triangular XYZ grid on a face.  The face surface must have an untrimmed UV parameter space., LunchBox Vector Amplitude - Set the amplitude of a vector., LunchBox Vector Angle - Computes the angle between two vectors., LunchBox Wall Element Collector - Collects wall elements from the Revit document., LunchBox Wave - Creates a parametric Wave surface",
            "engine_metadata": "",
            "engine_version": "0.9.1.3067",
            "created": "2015-11-24T05:47:41.132Z",
            "full_dependency_versions": [ "2015.11.23" ],
            "full_dependency_ids": [
              {
                "_id": "528038ad3f7315936f000058",
                "name": "LunchBox for Dynamo"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2015.11.23"
          },
          {
            "_id": "565551170370b0a907000014",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/d9df57ea-f6c7-428d-8c38-7539c1f6ca26gregPkg312.zip",
            "contents": "LunchBox Adaptive Component Collector - Gets a list of Adaptive Components from a document using the Family Name., LunchBox Area Element Collector - Collects rooms from the Revit document, LunchBox Attractor Wave - Generates a wave attractor effect using lists of attractors and targets., LunchBox Attractor - Simple distance-based attractor calculation, LunchBox Braced Grid Structure 2D - Creates a braced grid 2D on a surface., LunchBox Braced Grid Stucture 1D - Creates a 1D braced grid structure on a surface, LunchBox Create Room by Name and Number - Creates an unplaced room element using a name and number., LunchBox Curtain Panel Collector - Collects curtain panel instances and references them., LunchBox Curve to Arcs by Division - Converts a curve to tangent arc segments, LunchBox Curve to Arcs by Parameters - Converts a curve to arcs using parameter values, LunchBox Deconstruct Face - Gets the edges and vertices of a face., LunchBox Deconstruct Solid - Deconstructs a Revit solid into faces, edges, and vertices, LunchBox Diagrid Structure - Creates a diagrid structure on a surface., LunchBox Diamond Grid by Face - Create a Diamond XYZ grid on a face.  The face surface must have an untrimmed UV parameter space., LunchBox Domain Variables - Gets the Min and Max variables of a Domain., LunchBox Family Instance Collector - Collects Family Instances from the Revit Doc, LunchBox Floor Element Collector - Collects Floor elements from the current Revit document., LunchBox Get Domain - Gets the domain from a list of numbers., LunchBox Get Parameter Value - Gets parameter values from a Revit element., LunchBox Grid Structure - Creates a grid wireframe on a surface., LunchBox Helicoid - Creates a parametric Helicoid surface, LunchBox Level Element Collector - Collects Levels from the current Level document, LunchBox List Matcher - Compares a List A against a List B and matches length of List A.  If ListA > ListB, ListB will be extended.  If ListA < ListB, ListB will be truncated., LunchBox Mass Addition - Returns the total value of a list of numbers., LunchBox Mass Multiplication - Returns the total value of a list of numbers., LunchBox MEP Space Collector - Collects MEP Spaces and properties, LunchBox Mobius - Creates a parametric mobius surface., LunchBox Paraboloid - Creates a parametric Hyperbolic Paraboloid surface, LunchBox Planarize Points - Projects a list of a 4 or more points to a common plane., LunchBox Point to String - Converts Point objects to strings., LunchBox Quad Grid by Face - Create a quadrangular XYZ grid on a face.  The face surface must have an untrimmed UV parameter space., LunchBox Random Numbers - Generates a list of Random numbers using a domain, amount, and seed., LunchBox Random Split List - Randomly splits a list of objects into two separate lists., LunchBox Remap Numbers - Remaps a list of numbers to a new domain., LunchBox Remove Null Values - Remove 'null' values from a list., LunchBox Room Element Collector - Collects rooms from the Revit document, LunchBox Sheet Collector - Collects sheets from the current document, LunchBox Space Truss Structure - Create a space truss using a surface., LunchBox Staggered Grid by Face  - Create a Staggered XYZ grid on a face.  The face surface must have an untrimmed UV parameter space., LunchBox String to Point - Converts a point string \"x,y,z\" into a true Point., LunchBox Structural Framing Collector - Collects Structural Graming Families from the Revit document., LunchBox Torus - Creates a parametric Torus surface, LunchBox Triangle Grid by Face - Create a Triangular XYZ grid on a face.  The face surface must have an untrimmed UV parameter space., LunchBox Vector Amplitude - Set the amplitude of a vector., LunchBox Vector Angle - Computes the angle between two vectors., LunchBox Wall Element Collector - Collects wall elements from the Revit document., LunchBox Wave - Creates a parametric Wave surface",
            "engine_metadata": "",
            "engine_version": "0.9.1.3067",
            "created": "2015-11-25T06:11:35.126Z",
            "full_dependency_versions": [ "2015.11.24" ],
            "full_dependency_ids": [
              {
                "_id": "528038ad3f7315936f000058",
                "name": "LunchBox for Dynamo"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2015.11.24"
          },
          {
            "_id": "5659fb1c0370b0a907000026",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/e5a9c918-72c7-4aa9-afd8-b8ad9563fa1agregPkg694.zip",
            "contents": "LunchBox Adaptive Component Collector - Gets a list of Adaptive Components from a document using the Family Name., LunchBox Area Element Collector - Collects rooms from the Revit document, LunchBox Attractor Wave - Generates a wave attractor effect using lists of attractors and targets., LunchBox Attractor - Simple distance-based attractor calculation, LunchBox Braced Grid Structure 2D - Creates a braced grid 2D on a surface., LunchBox Braced Grid Stucture 1D - Creates a 1D braced grid structure on a surface, LunchBox Create Room by Name and Number - Creates an unplaced room element using a name and number., LunchBox Curtain Panel Collector - Collects curtain panel instances and references them., LunchBox Curve to Arcs by Division - Converts a curve to tangent arc segments, LunchBox Curve to Arcs by Parameters - Converts a curve to arcs using parameter values, LunchBox Deconstruct Face - Gets the edges and vertices of a face., LunchBox Deconstruct Solid - Deconstructs a Revit solid into faces, edges, and vertices, LunchBox Diagrid Structure - Creates a diagrid structure on a surface., LunchBox Diamond Grid by Face - Create a Diamond XYZ grid on a face.  The face surface must have an untrimmed UV parameter space., LunchBox Domain Variables - Gets the Min and Max variables of a Domain., LunchBox Family Instance Collector - Collects Family Instances from the Revit Doc, LunchBox Floor Element Collector - Collects Floor elements from the current Revit document., LunchBox Get Domain - Gets the domain from a list of numbers., LunchBox Get Parameter Value - Gets parameter values from a Revit element., LunchBox Grid Structure - Creates a grid wireframe on a surface., LunchBox Helicoid - Creates a parametric Helicoid surface, LunchBox Level Element Collector - Collects Levels from the current Level document, LunchBox List Matcher - Compares a List A against a List B and matches length of List A.  If ListA > ListB, ListB will be extended.  If ListA < ListB, ListB will be truncated., LunchBox Mass Addition - Returns the total value of a list of numbers., LunchBox Mass Multiplication - Returns the total value of a list of numbers., LunchBox MEP Space Collector - Collects MEP Spaces and properties, LunchBox Mobius - Creates a parametric mobius surface., LunchBox Paraboloid - Creates a parametric Hyperbolic Paraboloid surface, LunchBox Planarize Points - Projects a list of a 4 or more points to a common plane., LunchBox Point to String - Converts Point objects to strings., LunchBox Quad Grid by Face - Create a quadrangular XYZ grid on a face.  The face surface must have an untrimmed UV parameter space., LunchBox Random Numbers - Generates a list of Random numbers using a domain, amount, and seed., LunchBox Random Split List - Randomly splits a list of objects into two separate lists., LunchBox Remap Numbers - Remaps a list of numbers to a new domain., LunchBox Remove Null Values - Remove 'null' values from a list., LunchBox Room Element Collector - Collects rooms from the Revit document, LunchBox Sheet Collector - Collects sheets from the current document, LunchBox Space Truss Structure - Create a space truss using a surface., LunchBox Staggered Grid by Face  - Create a Staggered XYZ grid on a face.  The face surface must have an untrimmed UV parameter space., LunchBox String to Point - Converts a point string \"x,y,z\" into a true Point., LunchBox Structural Framing Collector - Collects Structural Graming Families from the Revit document., LunchBox Torus - Creates a parametric Torus surface, LunchBox Triangle Grid by Face - Create a Triangular XYZ grid on a face.  The face surface must have an untrimmed UV parameter space., LunchBox Vector Amplitude - Set the amplitude of a vector., LunchBox Vector Angle - Computes the angle between two vectors., LunchBox Wall Element Collector - Collects wall elements from the Revit document., LunchBox Wave - Creates a parametric Wave surface",
            "engine_metadata": "",
            "engine_version": "0.9.1.3067",
            "created": "2015-11-28T19:06:04.369Z",
            "full_dependency_versions": [ "2015.11.28" ],
            "full_dependency_ids": [
              {
                "_id": "528038ad3f7315936f000058",
                "name": "LunchBox for Dynamo"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2015.11.28"
          },
          {
            "_id": "57291660384037b37e000003",
            "contains_binaries": true,
            "node_libraries": [ "LunchBox, Version=2015.11.28.0, Culture=neutral, PublicKeyToken=null" ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-prod/7954e766-ebf3-4bec-9881-19701e0c5954gregPkg538.zip",
            "contents": "LunchBox Adaptive Component Collector - Gets a list of Adaptive Components from a document using the Family Name., LunchBox Area Element Collector - Collects rooms from the Revit document, LunchBox Attractor Wave - Generates a wave attractor effect using lists of attractors and targets., LunchBox Attractor - Simple distance-based attractor calculation, LunchBox Braced Grid Structure 2D - Creates a braced grid 2D on a surface., LunchBox Braced Grid Stucture 1D - Creates a 1D braced grid structure on a surface, LunchBox Create Room by Name and Number - Creates an unplaced room element using a name and number., LunchBox Curtain Panel Collector - Collects curtain panel instances and references them., LunchBox Curve to Arcs by Division - Converts a curve to tangent arc segments, LunchBox Curve to Arcs by Parameters - Converts a curve to arcs using parameter values, LunchBox Deconstruct Face - Gets the edges and vertices of a face., LunchBox Deconstruct Solid - Deconstructs a Revit solid into faces, edges, and vertices, LunchBox Diagrid Structure - Creates a diagrid structure on a surface., LunchBox Diamond Grid by Face - Create a Diamond XYZ grid on a face.  The face surface must have an untrimmed UV parameter space., LunchBox Domain Variables - Gets the Min and Max variables of a Domain., LunchBox Family Instance Collector - Collects Family Instances from the Revit Doc, LunchBox Floor Element Collector - Collects Floor elements from the current Revit document., LunchBox Get Domain - Gets the domain from a list of numbers., LunchBox Get Parameter Value - Gets parameter values from a Revit element., LunchBox Grid Structure - Creates a grid wireframe on a surface., LunchBox Helicoid - Creates a parametric Helicoid surface, LunchBox Level Element Collector - Collects Levels from the current Level document, LunchBox List Matcher - Compares a List A against a List B and matches length of List A.  If ListA > ListB, ListB will be extended.  If ListA < ListB, ListB will be truncated., LunchBox Mass Addition - Returns the total value of a list of numbers., LunchBox Mass Multiplication - Returns the total value of a list of numbers., LunchBox MEP Space Collector - Collects MEP Spaces and properties, LunchBox Mobius - Creates a parametric mobius surface., LunchBox Paraboloid - Creates a parametric Hyperbolic Paraboloid surface, LunchBox Planarize Points - Projects a list of a 4 or more points to a common plane., LunchBox Point to String - Converts Point objects to strings., LunchBox Quad Grid by Face - Create a quadrangular XYZ grid on a face.  The face surface must have an untrimmed UV parameter space., LunchBox Random Numbers - Generates a list of Random numbers using a domain, amount, and seed., LunchBox Random Split List - Randomly splits a list of objects into two separate lists., LunchBox Remap Numbers - Remaps a list of numbers to a new domain., LunchBox Remove Null Values - Remove 'null' values from a list., LunchBox Room Element Collector - Collects rooms from the Revit document, LunchBox Sheet Collector - Collects sheets from the current document, WireSpaceTruss - Create a space truss using a surface., LunchBox Staggered Grid by Face  - Create a Staggered XYZ grid on a face.  The face surface must have an untrimmed UV parameter space., LunchBox String to Point - Converts a point string \"x,y,z\" into a true Point., LunchBox Structural Framing Collector - Collects Structural Graming Families from the Revit document., LunchBox Torus - Creates a parametric Torus surface, LunchBox Triangle Grid by Face - Create a Triangular XYZ grid on a face.  The face surface must have an untrimmed UV parameter space., LunchBox Vector Amplitude - Set the amplitude of a vector., LunchBox Vector Angle - Computes the angle between two vectors., LunchBox Wall Element Collector - Collects wall elements from the Revit document., LunchBox Wave - Creates a parametric Wave surface",
            "engine_metadata": "",
            "engine_version": "1.0.0.1180",
            "created": "2016-05-03T21:21:36.057Z",
            "full_dependency_versions": [ "2016.5.3" ],
            "full_dependency_ids": [
              {
                "_id": "528038ad3f7315936f000058",
                "name": "LunchBox for Dynamo"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2016.5.3"
          },
          {
            "_id": "576c127ee70394822f000109",
            "contains_binaries": true,
            "node_libraries": [ "LunchBox, Version=2016.6.23.0, Culture=neutral, PublicKeyToken=null" ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-prod/bcf75149-2040-4a4e-843d-e2f3b7ff4468gregPkg787.zip",
            "contents": "LunchBox Adaptive Component Collector - Gets a list of Adaptive Components from a document using the Family Name., LunchBox Area Element Collector - Collects rooms from the Revit document, LunchBox Attractor Wave - Generates a wave attractor effect using lists of attractors and targets., LunchBox Attractor - Simple distance-based attractor calculation, LunchBox Braced Grid Structure 2D - Creates a braced grid 2D on a surface., LunchBox Braced Grid Stucture 1D - Creates a 1D braced grid structure on a surface, LunchBox Create Room by Name and Number - Creates an unplaced room element using a name and number., LunchBox Curtain Panel Collector - Collects curtain panel instances and references them., LunchBox Curve to Arcs by Division - Converts a curve to tangent arc segments, LunchBox Curve to Arcs by Parameters - Converts a curve to arcs using parameter values, LunchBox Deconstruct Face - Gets the edges and vertices of a face., LunchBox Deconstruct Solid - Deconstructs a Revit solid into faces, edges, and vertices, LunchBox Diagrid Structure - Creates a diagrid structure on a surface., LunchBox Diamond Grid by Face - Create a Diamond XYZ grid on a face.  The face surface must have an untrimmed UV parameter space., LunchBox Domain Variables - Gets the Min and Max variables of a Domain., LunchBox Family Instance Collector - Collects Family Instances from the Revit Doc, LunchBox Floor Element Collector - Collects Floor elements from the current Revit document., LunchBox Get Domain - Gets the domain from a list of numbers., LunchBox Get Parameter Value - Gets parameter values from a Revit element., LunchBox Grid Structure - Creates a grid wireframe on a surface., LunchBox Helicoid - Creates a parametric Helicoid surface, LunchBox Level Element Collector - Collects Levels from the current Level document, LunchBox List Matcher - Compares a List A against a List B and matches length of List A.  If ListA > ListB, ListB will be extended.  If ListA < ListB, ListB will be truncated., LunchBox Mass Addition - Returns the total value of a list of numbers., LunchBox Mass Multiplication - Returns the total value of a list of numbers., LunchBox MEP Space Collector - Collects MEP Spaces and properties, LunchBox Mobius - Creates a parametric mobius surface., LunchBox Paraboloid - Creates a parametric Hyperbolic Paraboloid surface, LunchBox Planarize Points - Projects a list of a 4 or more points to a common plane., LunchBox Point to String - Converts Point objects to strings., LunchBox Quad Grid by Face - Create a quadrangular XYZ grid on a face.  The face surface must have an untrimmed UV parameter space., LunchBox Random Numbers - Generates a list of Random numbers using a domain, amount, and seed., LunchBox Random Split List - Randomly splits a list of objects into two separate lists., LunchBox Remap Numbers - Remaps a list of numbers to a new domain., LunchBox Remove Null Values - Remove 'null' values from a list., LunchBox Room Element Collector - Collects rooms from the Revit document, LunchBox Sheet Collector - Collects sheets from the current document, WireSpaceTruss - Create a space truss using a surface., LunchBox Staggered Grid by Face  - Create a Staggered XYZ grid on a face.  The face surface must have an untrimmed UV parameter space., LunchBox String to Point - Converts a point string \"x,y,z\" into a true Point., LunchBox Structural Framing Collector - Collects Structural Graming Families from the Revit document., LunchBox Torus - Creates a parametric Torus surface, LunchBox Triangle Grid by Face - Create a Triangular XYZ grid on a face.  The face surface must have an untrimmed UV parameter space., LunchBox Vector Amplitude - Set the amplitude of a vector., LunchBox Vector Angle - Computes the angle between two vectors., LunchBox Wall Element Collector - Collects wall elements from the Revit document., LunchBox Wave - Creates a parametric Wave surface",
            "engine_metadata": "",
            "engine_version": "1.0.0.1180",
            "created": "2016-06-23T16:46:54.545Z",
            "full_dependency_versions": [ "2016.6.23" ],
            "full_dependency_ids": [
              {
                "_id": "528038ad3f7315936f000058",
                "name": "LunchBox for Dynamo"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2016.6.23"
          },
          {
            "_id": "576c35d4e70394822f00010a",
            "contains_binaries": true,
            "node_libraries": [ "LunchBox, Version=2016.6.23.0, Culture=neutral, PublicKeyToken=null" ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-prod/02a2da8b-8211-47f8-88b1-04afd7c384dbgregPkg686.zip",
            "contents": "LunchBox Adaptive Component Collector - Gets a list of Adaptive Components from a document using the Family Name., LunchBox Area Element Collector - Collects rooms from the Revit document, LunchBox Attractor Wave - Generates a wave attractor effect using lists of attractors and targets., LunchBox Attractor - Simple distance-based attractor calculation, LunchBox Braced Grid Structure 2D - Creates a braced grid 2D on a surface., LunchBox Braced Grid Stucture 1D - Creates a 1D braced grid structure on a surface, LunchBox Create Room by Name and Number - Creates an unplaced room element using a name and number., LunchBox Curtain Panel Collector - Collects curtain panel instances and references them., LunchBox Curve to Arcs by Division - Converts a curve to tangent arc segments, LunchBox Curve to Arcs by Parameters - Converts a curve to arcs using parameter values, LunchBox Deconstruct Face - Gets the edges and vertices of a face., LunchBox Deconstruct Solid - Deconstructs a Revit solid into faces, edges, and vertices, LunchBox Diagrid Structure - Creates a diagrid structure on a surface., LunchBox Diamond Grid by Face - Create a Diamond XYZ grid on a face.  The face surface must have an untrimmed UV parameter space., LunchBox Domain Variables - Gets the Min and Max variables of a Domain., LunchBox Family Instance Collector - Collects Family Instances from the Revit Doc, LunchBox Floor Element Collector - Collects Floor elements from the current Revit document., LunchBox Get Domain - Gets the domain from a list of numbers., LunchBox Get Parameter Value - Gets parameter values from a Revit element., LunchBox Grid Structure - Creates a grid wireframe on a surface., LunchBox Helicoid - Creates a parametric Helicoid surface, LunchBox Isovist - Isovist Ray Generation, LunchBox Level Element Collector - Collects Levels from the current Level document, LunchBox List Matcher - Compares a List A against a List B and matches length of List A.  If ListA > ListB, ListB will be extended.  If ListA < ListB, ListB will be truncated., LunchBox Mass Addition - Returns the total value of a list of numbers., LunchBox Mass Multiplication - Returns the total value of a list of numbers., LunchBox MEP Space Collector - Collects MEP Spaces and properties, LunchBox Mobius - Creates a parametric mobius surface., LunchBox Paraboloid - Creates a parametric Hyperbolic Paraboloid surface, LunchBox Planarize Points - Projects a list of a 4 or more points to a common plane., LunchBox Point to String - Converts Point objects to strings., LunchBox Quad Grid by Face - Create a quadrangular XYZ grid on a face.  The face surface must have an untrimmed UV parameter space., LunchBox Random Numbers - Generates a list of Random numbers using a domain, amount, and seed., LunchBox Random Split List - Randomly splits a list of objects into two separate lists., LunchBox Remap Numbers - Remaps a list of numbers to a new domain., LunchBox Remove Null Values - Remove 'null' values from a list., LunchBox Room Element Collector - Collects rooms from the Revit document, LunchBox Sheet Collector - Collects sheets from the current document, WireSpaceTruss - Create a space truss using a surface., LunchBox Staggered Grid by Face  - Create a Staggered XYZ grid on a face.  The face surface must have an untrimmed UV parameter space., LunchBox String to Point - Converts a point string \"x,y,z\" into a true Point., LunchBox Structural Framing Collector - Collects Structural Graming Families from the Revit document., LunchBox Torus - Creates a parametric Torus surface, LunchBox Triangle Grid by Face - Create a Triangular XYZ grid on a face.  The face surface must have an untrimmed UV parameter space., LunchBox Vector Amplitude - Set the amplitude of a vector., LunchBox Vector Angle - Computes the angle between two vectors., LunchBox Wall Element Collector - Collects wall elements from the Revit document., LunchBox Wave - Creates a parametric Wave surface",
            "engine_metadata": "",
            "engine_version": "1.0.0.1180",
            "created": "2016-06-23T19:17:40.444Z",
            "full_dependency_versions": [ "2016.6.231" ],
            "full_dependency_ids": [
              {
                "_id": "528038ad3f7315936f000058",
                "name": "LunchBox for Dynamo"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2016.6.231"
          },
          {
            "_id": "576da911e70394822f000113",
            "contains_binaries": true,
            "node_libraries": [ "LunchBox, Version=2016.6.23.0, Culture=neutral, PublicKeyToken=null" ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-prod/e098511e-f434-40c6-979a-bf9c6844e757gregPkg93.zip",
            "contents": "LunchBox Adaptive Component Collector - Gets a list of Adaptive Components from a document using the Family Name., LunchBox Area Element Collector - Collects rooms from the Revit document, LunchBox Attractor Wave - Generates a wave attractor effect using lists of attractors and targets., LunchBox Attractor - Simple distance-based attractor calculation, LunchBox Braced Grid Structure 2D - Creates a braced grid 2D on a surface., LunchBox Braced Grid Stucture 1D - Creates a 1D braced grid structure on a surface, LunchBox Create Room by Name and Number - Creates an unplaced room element using a name and number., LunchBox Curtain Panel Collector - Collects curtain panel instances and references them., LunchBox Curve to Arcs by Division - Converts a curve to tangent arc segments, LunchBox Curve to Arcs by Parameters - Converts a curve to arcs using parameter values, LunchBox Deconstruct Face - Gets the edges and vertices of a face., LunchBox Deconstruct Solid - Deconstructs a Revit solid into faces, edges, and vertices, LunchBox Diagrid Structure - Creates a diagrid structure on a surface., LunchBox Diamond Grid by Face - Create a Diamond XYZ grid on a face.  The face surface must have an untrimmed UV parameter space., LunchBox Domain Variables - Gets the Min and Max variables of a Domain., LunchBox Family Instance Collector - Collects Family Instances from the Revit Doc, LunchBox Floor Element Collector - Collects Floor elements from the current Revit document., LunchBox Get Domain - Gets the domain from a list of numbers., LunchBox Get Parameter Value - Gets parameter values from a Revit element., LunchBox Grid Structure - Creates a grid wireframe on a surface., LunchBox Helicoid - Creates a parametric Helicoid surface, LunchBox Isovist - Isovist Ray Generation, LunchBox Level Element Collector - Collects Levels from the current Level document, LunchBox List Matcher - Compares a List A against a List B and matches length of List A.  If ListA > ListB, ListB will be extended.  If ListA < ListB, ListB will be truncated., LunchBox Mass Addition - Returns the total value of a list of numbers., LunchBox Mass Multiplication - Returns the total value of a list of numbers., LunchBox MEP Space Collector - Collects MEP Spaces and properties, LunchBox Mobius - Creates a parametric mobius surface., LunchBox Paraboloid - Creates a parametric Hyperbolic Paraboloid surface, LunchBox Planarize Points - Projects a list of a 4 or more points to a common plane., LunchBox Point to String - Converts Point objects to strings., LunchBox Quad Grid by Face - Create a quadrangular XYZ grid on a face.  The face surface must have an untrimmed UV parameter space., LunchBox Random Numbers - Generates a list of Random numbers using a domain, amount, and seed., LunchBox Random Split List - Randomly splits a list of objects into two separate lists., LunchBox Remap Numbers - Remaps a list of numbers to a new domain., LunchBox Remove Null Values - Remove 'null' values from a list., LunchBox Room Element Collector - Collects rooms from the Revit document, LunchBox Sheet Collector - Collects sheets from the current document, WireSpaceTruss - Create a space truss using a surface., LunchBox Staggered Grid by Face  - Create a Staggered XYZ grid on a face.  The face surface must have an untrimmed UV parameter space., LunchBox String to Point - Converts a point string \"x,y,z\" into a true Point., LunchBox Structural Framing Collector - Collects Structural Graming Families from the Revit document., LunchBox Torus - Creates a parametric Torus surface, LunchBox Triangle Grid by Face - Create a Triangular XYZ grid on a face.  The face surface must have an untrimmed UV parameter space., LunchBox Vector Amplitude - Set the amplitude of a vector., LunchBox Vector Angle - Computes the angle between two vectors., LunchBox Wall Element Collector - Collects wall elements from the Revit document., LunchBox Wave - Creates a parametric Wave surface",
            "engine_metadata": "",
            "engine_version": "1.0.0.1180",
            "created": "2016-06-24T21:41:37.630Z",
            "full_dependency_versions": [ "2016.7.1" ],
            "full_dependency_ids": [
              {
                "_id": "528038ad3f7315936f000058",
                "name": "LunchBox for Dynamo"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2016.7.1"
          },
          {
            "_id": "57751ba95351460648000003",
            "contains_binaries": true,
            "node_libraries": [ "LunchBox, Version=2016.6.30.0, Culture=neutral, PublicKeyToken=null" ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-prod/bf155ef9-b739-4152-b73d-7b872f2416f9gregPkg754.zip",
            "contents": "LunchBox Adaptive Component Collector - Gets a list of Adaptive Components from a document using the Family Name., LunchBox Area Element Collector - Collects rooms from the Revit document, LunchBox Attractor Wave - Generates a wave attractor effect using lists of attractors and targets., LunchBox Attractor - Simple distance-based attractor calculation, LunchBox Braced Grid Structure 2D - Creates a braced grid 2D on a surface., LunchBox Braced Grid Stucture 1D - Creates a 1D braced grid structure on a surface, LunchBox Create Room by Name and Number - Creates an unplaced room element using a name and number., LunchBox Curtain Panel Collector - Collects curtain panel instances and references them., LunchBox Curve to Arcs by Division - Converts a curve to tangent arc segments, LunchBox Curve to Arcs by Parameters - Converts a curve to arcs using parameter values, LunchBox Deconstruct Face - Gets the edges and vertices of a face., LunchBox Deconstruct Solid - Deconstructs a Revit solid into faces, edges, and vertices, LunchBox Diagrid Structure - Creates a diagrid structure on a surface., LunchBox Diamond Grid by Face - Create a Diamond XYZ grid on a face.  The face surface must have an untrimmed UV parameter space., LunchBox Domain Variables - Gets the Min and Max variables of a Domain., LunchBox Family Instance Collector - Collects Family Instances from the Revit Doc, LunchBox Floor Element Collector - Collects Floor elements from the current Revit document., LunchBox Get Domain - Gets the domain from a list of numbers., LunchBox Get Parameter Value - Gets parameter values from a Revit element., LunchBox Grid Structure - Creates a grid wireframe on a surface., LunchBox Helicoid - Creates a parametric Helicoid surface, LunchBox Isovist - Isovist Ray Generation, LunchBox Level Element Collector - Collects Levels from the current Level document, LunchBox List Matcher - Compares a List A against a List B and matches length of List A.  If ListA > ListB, ListB will be extended.  If ListA < ListB, ListB will be truncated., LunchBox Mass Addition - Returns the total value of a list of numbers., LunchBox Mass Multiplication - Returns the total value of a list of numbers., LunchBox MEP Space Collector - Collects MEP Spaces and properties, LunchBox Mobius - Creates a parametric mobius surface., LunchBox Paraboloid - Creates a parametric Hyperbolic Paraboloid surface, LunchBox Planarize Points - Projects a list of a 4 or more points to a common plane., LunchBox Point to String - Converts Point objects to strings., LunchBox Quad Grid by Face - Create a quadrangular XYZ grid on a face.  The face surface must have an untrimmed UV parameter space., LunchBox Random Numbers - Generates a list of Random numbers using a domain, amount, and seed., LunchBox Random Split List - Randomly splits a list of objects into two separate lists., LunchBox Remap Numbers - Remaps a list of numbers to a new domain., LunchBox Remove Null Values - Remove 'null' values from a list., LunchBox Room Element Collector - Collects rooms from the Revit document, LunchBox Sheet Collector - Collects sheets from the current document, WireSpaceTruss - Create a space truss using a surface., LunchBox Staggered Grid by Face  - Create a Staggered XYZ grid on a face.  The face surface must have an untrimmed UV parameter space., LunchBox String to Point - Converts a point string \"x,y,z\" into a true Point., LunchBox Structural Framing Collector - Collects Structural Graming Families from the Revit document., LunchBox Torus - Creates a parametric Torus surface, LunchBox Triangle Grid by Face - Create a Triangular XYZ grid on a face.  The face surface must have an untrimmed UV parameter space., LunchBox Vector Amplitude - Set the amplitude of a vector., LunchBox Vector Angle - Computes the angle between two vectors., LunchBox Wall Element Collector - Collects wall elements from the Revit document., LunchBox Wave - Creates a parametric Wave surface",
            "engine_metadata": "",
            "engine_version": "1.0.0.1180",
            "created": "2016-06-30T13:16:25.210Z",
            "full_dependency_versions": [ "2016.7.2" ],
            "full_dependency_ids": [
              {
                "_id": "528038ad3f7315936f000058",
                "name": "LunchBox for Dynamo"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2016.7.2"
          },
          {
            "_id": "57ee6d95b135d45974000054",
            "contains_binaries": true,
            "node_libraries": [ "LunchBox, Version=2016.6.30.0, Culture=neutral, PublicKeyToken=null" ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-prod/8eefb3fa-a181-4c93-ada9-9c5d373b09aagregPkg58.zip",
            "contents": "LunchBox Adaptive Component Collector - Gets a list of Adaptive Components from a document using the Family Name., LunchBox Area Element Collector - Collects rooms from the Revit document, LunchBox Attractor Wave - Generates a wave attractor effect using lists of attractors and targets., LunchBox Attractor - Simple distance-based attractor calculation, LunchBox Braced Grid Structure 2D - Creates a braced grid 2D on a surface., LunchBox Braced Grid Stucture 1D - Creates a 1D braced grid structure on a surface, LunchBox Create Room by Name and Number - Creates an unplaced room element using a name and number., LunchBox Curtain Panel Collector - Collects curtain panel instances and references them., LunchBox Curve to Arcs by Division - Converts a curve to tangent arc segments, LunchBox Curve to Arcs by Parameters - Converts a curve to arcs using parameter values, LunchBox Deconstruct Face - Gets the edges and vertices of a face., LunchBox Deconstruct Solid - Deconstructs a Revit solid into faces, edges, and vertices, LunchBox Diagrid Structure - Creates a diagrid structure on a surface., LunchBox Diamond Grid by Face - Create a Diamond XYZ grid on a face.  The face surface must have an untrimmed UV parameter space., LunchBox Domain Variables - Gets the Min and Max variables of a Domain., LunchBox Family Instance Collector - Collects Family Instances from the Revit Doc, LunchBox Floor Element Collector - Collects Floor elements from the current Revit document., LunchBox Get Domain - Gets the domain from a list of numbers., LunchBox Get Parameter Value - Gets parameter values from a Revit element., LunchBox Grid Structure - Creates a grid wireframe on a surface., LunchBox Helicoid - Creates a parametric Helicoid surface, LunchBox Isovist - Isovist Ray Generation, LunchBox Level Element Collector - Collects Levels from the current Level document, LunchBox List Matcher - Compares a List A against a List B and matches length of List A.  If ListA > ListB, ListB will be extended.  If ListA < ListB, ListB will be truncated., LunchBox Mass Addition - Returns the total value of a list of numbers., LunchBox Mass Multiplication - Returns the total value of a list of numbers., LunchBox MEP Space Collector - Collects MEP Spaces and properties, LunchBox Mobius - Creates a parametric mobius surface., LunchBox Paraboloid - Creates a parametric Hyperbolic Paraboloid surface, LunchBox Placed and Unplaced Rooms - Finds placed and unplaced rooms, LunchBox Planarize Points - Projects a list of a 4 or more points to a common plane., LunchBox Point to String - Converts Point objects to strings., LunchBox Quad Grid by Face - Create a quadrangular XYZ grid on a face.  The face surface must have an untrimmed UV parameter space., LunchBox Random Numbers - Generates a list of Random numbers using a domain, amount, and seed., LunchBox Random Split List - Randomly splits a list of objects into two separate lists., LunchBox Remap Numbers - Remaps a list of numbers to a new domain., LunchBox Remove Null Values - Remove 'null' values from a list., LunchBox Room Element Collector - Collects rooms from the Revit document, LunchBox Sheet Collector - Collects sheets from the current document, WireSpaceTruss - Create a space truss using a surface., LunchBox Staggered Grid by Face  - Create a Staggered XYZ grid on a face.  The face surface must have an untrimmed UV parameter space., LunchBox String to Point - Converts a point string \"x,y,z\" into a true Point., LunchBox Structural Framing Collector - Collects Structural Graming Families from the Revit document., LunchBox Torus - Creates a parametric Torus surface, LunchBox Triangle Grid by Face - Create a Triangular XYZ grid on a face.  The face surface must have an untrimmed UV parameter space., LunchBox Vector Amplitude - Set the amplitude of a vector., LunchBox Vector Angle - Computes the angle between two vectors., LunchBox Wall Element Collector - Collects wall elements from the Revit document., LunchBox Wave - Creates a parametric Wave surface",
            "engine_metadata": "",
            "engine_version": "1.1.0.2094",
            "created": "2016-09-30T13:50:13.216Z",
            "full_dependency_versions": [ "2016.9.30" ],
            "full_dependency_ids": [
              {
                "_id": "528038ad3f7315936f000058",
                "name": "LunchBox for Dynamo"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2016.9.30"
          },
          {
            "_id": "580e3464f50b17c72000005e",
            "contains_binaries": true,
            "node_libraries": [ "LunchBox, Version=2016.6.30.0, Culture=neutral, PublicKeyToken=null" ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-prod/cbc11bb7-cce7-4664-8328-80f7f662ed26gregPkg551.zip",
            "contents": "LunchBox Adaptive Component Collector - Gets a list of Adaptive Components from a document using the Family Name., LunchBox Area Element Collector - Collects rooms from the Revit document, LunchBox Attractor Wave - Generates a wave attractor effect using lists of attractors and targets., LunchBox Attractor - Simple distance-based attractor calculation, LunchBox Braced Grid Structure 2D - Creates a braced grid 2D on a surface., LunchBox Braced Grid Stucture 1D - Creates a 1D braced grid structure on a surface, LunchBox Create Room by Name and Number - Creates an unplaced room element using a name and number., LunchBox Curtain Panel Collector - Collects curtain panel instances and references them., LunchBox Curve to Arcs by Division - Converts a curve to tangent arc segments, LunchBox Curve to Arcs by Parameters - Converts a curve to arcs using parameter values, LunchBox Deconstruct Face - Gets the edges and vertices of a face., LunchBox Deconstruct Solid - Deconstructs a Revit solid into faces, edges, and vertices, LunchBox Diagrid Structure - Creates a diagrid structure on a surface., LunchBox Diamond Grid by Face - Create a Diamond XYZ grid on a face.  The face surface must have an untrimmed UV parameter space., LunchBox Domain Variables - Gets the Min and Max variables of a Domain., LunchBox Family Instance Collector - Collects Family Instances from the Revit Doc, LunchBox Floor Element Collector - Collects Floor elements from the current Revit document., LunchBox Get Domain - Gets the domain from a list of numbers., LunchBox Get Parameter Value - Gets parameter values from a Revit element., LunchBox Grid Element Collector - Collects Revit Grids from the current Revit document, LunchBox Grid Structure - Creates a grid wireframe on a surface., LunchBox Helicoid - Creates a parametric Helicoid surface, LunchBox Isovist - Isovist Ray Generation, LunchBox Level Element Collector - Collects Levels from the current Level document, LunchBox List Matcher - Compares a List A against a List B and matches length of List A.  If ListA > ListB, ListB will be extended.  If ListA < ListB, ListB will be truncated., LunchBox Mass Addition - Returns the total value of a list of numbers., LunchBox Mass Multiplication - Returns the total value of a list of numbers., LunchBox MEP Space Collector - Collects MEP Spaces and properties, LunchBox Mobius - Creates a parametric mobius surface., LunchBox Paraboloid - Creates a parametric Hyperbolic Paraboloid surface, LunchBox Placed and Unplaced Rooms - Finds placed and unplaced rooms, LunchBox Planarize Points - Projects a list of a 4 or more points to a common plane., LunchBox Point to String - Converts Point objects to strings., LunchBox Quad Grid by Face - Create a quadrangular XYZ grid on a face.  The face surface must have an untrimmed UV parameter space., LunchBox Random Numbers - Generates a list of Random numbers using a domain, amount, and seed., LunchBox Random Split List - Randomly splits a list of objects into two separate lists., LunchBox Remap Numbers - Remaps a list of numbers to a new domain., LunchBox Remove Null Values - Remove 'null' values from a list., LunchBox Room Element Collector - Collects rooms from the Revit document, LunchBox Sheet Collector - Collects sheets from the current document, WireSpaceTruss - Create a space truss using a surface., LunchBox Staggered Grid by Face  - Create a Staggered XYZ grid on a face.  The face surface must have an untrimmed UV parameter space., LunchBox String to Point - Converts a point string \"x,y,z\" into a true Point., LunchBox Structural Framing Collector - Collects Structural Graming Families from the Revit document., LunchBox Torus - Creates a parametric Torus surface, LunchBox Triangle Grid by Face - Create a Triangular XYZ grid on a face.  The face surface must have an untrimmed UV parameter space., LunchBox Vector Amplitude - Set the amplitude of a vector., LunchBox Vector Angle - Computes the angle between two vectors., LunchBox Wall Element Collector - Collects wall elements from the Revit document., LunchBox Wave - Creates a parametric Wave surface",
            "engine_metadata": "",
            "engine_version": "1.2.0.2690",
            "created": "2016-10-24T16:18:44.334Z",
            "full_dependency_versions": [ "2016.10.24" ],
            "full_dependency_ids": [
              {
                "_id": "528038ad3f7315936f000058",
                "name": "LunchBox for Dynamo"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2016.10.24"
          },
          {
            "_id": "580f8cc7f50b17c720000076",
            "contains_binaries": true,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-prod/5f0aa068-c16b-4f82-88ef-f976338cc611gregPkg51.zip",
            "contents": "LunchBox Adaptive Component Collector - Gets a list of Adaptive Components from a document using the Family Name., LunchBox Area Element Collector - Collects rooms from the Revit document, LunchBox Attractor Wave - Generates a wave attractor effect using lists of attractors and targets., LunchBox Attractor - Simple distance-based attractor calculation, LunchBox Braced Grid Structure 2D - Creates a braced grid 2D on a surface., LunchBox Braced Grid Stucture 1D - Creates a 1D braced grid structure on a surface, LunchBox Create Room by Name and Number - Creates an unplaced room element using a name and number., LunchBox Curtain Panel Collector - Collects curtain panel instances and references them., LunchBox Curve to Arcs by Division - Converts a curve to tangent arc segments, LunchBox Curve to Arcs by Parameters - Converts a curve to arcs using parameter values, LunchBox Deconstruct Face - Gets the edges and vertices of a face., LunchBox Deconstruct Solid - Deconstructs a Revit solid into faces, edges, and vertices, LunchBox Diagrid Structure - Creates a diagrid structure on a surface., LunchBox Diamond Grid by Face - Create a Diamond XYZ grid on a face.  The face surface must have an untrimmed UV parameter space., LunchBox Domain Variables - Gets the Min and Max variables of a Domain., LunchBox Family Instance Collector - Collects Family Instances from the Revit Doc, LunchBox Floor Element Collector - Collects Floor elements from the current Revit document., LunchBox Get Domain - Gets the domain from a list of numbers., LunchBox Get Parameter Value - Gets parameter values from a Revit element., LunchBox Grid Element Collector - Collects Revit Grids from the current Revit document, LunchBox Grid Structure - Creates a grid wireframe on a surface., LunchBox Helicoid - Creates a parametric Helicoid surface, LunchBox Isovist - Isovist Ray Generation, LunchBox Level Element Collector - Collects Levels from the current Level document, LunchBox List Matcher - Compares a List A against a List B and matches length of List A.  If ListA > ListB, ListB will be extended.  If ListA < ListB, ListB will be truncated., LunchBox Mass Addition - Returns the total value of a list of numbers., LunchBox Mass Multiplication - Returns the total value of a list of numbers., LunchBox MEP Space Collector - Collects MEP Spaces and properties, LunchBox Mobius - Creates a parametric mobius surface., LunchBox Paraboloid - Creates a parametric Hyperbolic Paraboloid surface, LunchBox Placed and Unplaced Rooms - Finds placed and unplaced rooms, LunchBox Planarize Points - Projects a list of a 4 or more points to a common plane., LunchBox Point to String - Converts Point objects to strings., LunchBox Quad Grid by Face - Create a quadrangular XYZ grid on a face.  The face surface must have an untrimmed UV parameter space., LunchBox Random Numbers - Generates a list of Random numbers using a domain, amount, and seed., LunchBox Random Split List - Randomly splits a list of objects into two separate lists., LunchBox Remap Numbers - Remaps a list of numbers to a new domain., LunchBox Remove Null Values - Remove 'null' values from a list., LunchBox Room Element Collector - Collects rooms from the Revit document, LunchBox Sheet Collector - Collects sheets from the current document, WireSpaceTruss - Create a space truss using a surface., LunchBox Staggered Grid by Face  - Create a Staggered XYZ grid on a face.  The face surface must have an untrimmed UV parameter space., LunchBox String to Point - Converts a point string \"x,y,z\" into a true Point., LunchBox Structural Framing Collector - Collects Structural Graming Families from the Revit document., LunchBox Torus - Creates a parametric Torus surface, LunchBox Triangle Grid by Face - Create a Triangular XYZ grid on a face.  The face surface must have an untrimmed UV parameter space., LunchBox Vector Amplitude - Set the amplitude of a vector., LunchBox Vector Angle - Computes the angle between two vectors., LunchBox View Element Collector - Collects views from the active Revit document., LunchBox Wall Element Collector - Collects wall elements from the Revit document., LunchBox Wave - Creates a parametric Wave surface",
            "engine_metadata": "",
            "engine_version": "1.2.0.2690",
            "created": "2016-10-25T16:48:07.955Z",
            "full_dependency_versions": [ "2016.10.25" ],
            "full_dependency_ids": [
              {
                "_id": "528038ad3f7315936f000058",
                "name": "LunchBox for Dynamo"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2016.10.25"
          },
          {
            "_id": "5817a755f50b17c7200000ad",
            "contains_binaries": true,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-prod/9b9d23f6-e52d-4816-be1f-994165e4968agregPkg827.zip",
            "contents": "LunchBox Adaptive Component Collector - Gets a list of Adaptive Components from a document using the Family Name., LunchBox Area Element Collector - Collects rooms from the Revit document, LunchBox Attractor Wave - Generates a wave attractor effect using lists of attractors and targets., LunchBox Attractor - Simple distance-based attractor calculation, LunchBox Braced Grid Structure 2D - Creates a braced grid 2D on a surface., LunchBox Braced Grid Stucture 1D - Creates a 1D braced grid structure on a surface, LunchBox Create Room by Name and Number - Creates an unplaced room element using a name and number., LunchBox Curtain Panel Collector - Collects curtain panel instances and references them., LunchBox Curve to Arcs by Division - Converts a curve to tangent arc segments, LunchBox Curve to Arcs by Parameters - Converts a curve to arcs using parameter values, LunchBox Deconstruct Face - Gets the edges and vertices of a face., LunchBox Deconstruct Solid - Deconstructs a Revit solid into faces, edges, and vertices, LunchBox Diagrid Structure - Creates a diagrid structure on a surface., LunchBox Diamond Grid by Face - Create a Diamond XYZ grid on a face.  The face surface must have an untrimmed UV parameter space., LunchBox Domain Variables - Gets the Min and Max variables of a Domain., LunchBox Family Instance Collector - Collects Family Instances from the Revit Doc, LunchBox Floor Element Collector - Collects Floor elements from the current Revit document., LunchBox Get Domain - Gets the domain from a list of numbers., LunchBox Get Parameter Value - Gets parameter values from a Revit element., LunchBox Grid Element Collector - Collects Revit Grids from the current Revit document, LunchBox Grid Structure - Creates a grid wireframe on a surface., LunchBox Helicoid - Creates a parametric Helicoid surface, LunchBox Isovist - Isovist Ray Generation, LunchBox Level Element Collector - Collects Levels from the current Level document, LunchBox List Matcher - Compares a List A against a List B and matches length of List A.  If ListA > ListB, ListB will be extended.  If ListA < ListB, ListB will be truncated., LunchBox Mass Addition - Returns the total value of a list of numbers., LunchBox Mass Multiplication - Returns the total value of a list of numbers., LunchBox MEP Space Collector - Collects MEP Spaces and properties, LunchBox Mobius - Creates a parametric mobius surface., LunchBox Paraboloid - Creates a parametric Hyperbolic Paraboloid surface, LunchBox Placed and Unplaced Rooms - Finds placed and unplaced rooms, LunchBox Planarize Points - Projects a list of a 4 or more points to a common plane., LunchBox Point to String - Converts Point objects to strings., LunchBox Quad Grid by Face - Create a quadrangular XYZ grid on a face.  The face surface must have an untrimmed UV parameter space., LunchBox Random Numbers - Generates a list of Random numbers using a domain, amount, and seed., LunchBox Random Split List - Randomly splits a list of objects into two separate lists., LunchBox Remap Numbers - Remaps a list of numbers to a new domain., LunchBox Remove Null Values - Remove 'null' values from a list., LunchBox Room Element Collector - Collects rooms from the Revit document, LunchBox Sheet Collector - Collects sheets from the current document, WireSpaceTruss - Create a space truss using a surface., LunchBox Staggered Grid by Face  - Create a Staggered XYZ grid on a face.  The face surface must have an untrimmed UV parameter space., LunchBox String to Point - Converts a point string \"x,y,z\" into a true Point., LunchBox Structural Framing Collector - Collects Structural Graming Families from the Revit document., LunchBox Torus - Creates a parametric Torus surface, LunchBox Triangle Grid by Face - Create a Triangular XYZ grid on a face.  The face surface must have an untrimmed UV parameter space., LunchBox Vector Amplitude - Set the amplitude of a vector., LunchBox Vector Angle - Computes the angle between two vectors., LunchBox View Element Collector - Collects views from the active Revit document., LunchBox Wall Element Collector - Collects wall elements from the Revit document., LunchBox Wave - Creates a parametric Wave surface",
            "engine_metadata": "",
            "engine_version": "1.2.0.2690",
            "created": "2016-10-31T20:19:33.146Z",
            "full_dependency_versions": [ "2016.10.31" ],
            "full_dependency_ids": [
              {
                "_id": "528038ad3f7315936f000058",
                "name": "LunchBox for Dynamo"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2016.10.31"
          },
          {
            "_id": "5822241a5af9f3713d00000f",
            "contains_binaries": true,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-prod/55d01716-ebe6-4373-a578-6ca9f02d0e6fgregPkg968.zip",
            "contents": "LunchBox Adaptive Component Collector - Gets a list of Adaptive Components from a document using the Family Name., LunchBox Area Element Collector - Collects rooms from the Revit document, LunchBox AreaPlan Element Collector - Collects AreaPlans from the Revit model, LunchBox Attractor Wave - Generates a wave attractor effect using lists of attractors and targets., LunchBox Attractor - Simple distance-based attractor calculation, LunchBox Braced Grid Structure 2D - Creates a braced grid 2D on a surface., LunchBox Braced Grid Stucture 1D - Creates a 1D braced grid structure on a surface, LunchBox Create Room by Name and Number - Creates an unplaced room element using a name and number., LunchBox Curtain Panel Collector - Collects curtain panel instances and references them., LunchBox Curve to Arcs by Division - Converts a curve to tangent arc segments, LunchBox Curve to Arcs by Parameters - Converts a curve to arcs using parameter values, LunchBox Deconstruct Face - Gets the edges and vertices of a face., LunchBox Deconstruct Solid - Deconstructs a Revit solid into faces, edges, and vertices, LunchBox Diagrid Structure - Creates a diagrid structure on a surface., LunchBox Diamond Grid by Face - Create a Diamond XYZ grid on a face.  The face surface must have an untrimmed UV parameter space., LunchBox Domain Variables - Gets the Min and Max variables of a Domain., LunchBox Family Instance Collector - Collects Family Instances from the Revit Doc, LunchBox Floor Element Collector - Collects Floor elements from the current Revit document., LunchBox Get Domain - Gets the domain from a list of numbers., LunchBox Get Parameter Value - Gets parameter values from a Revit element., LunchBox Grid Element Collector - Collects Revit Grids from the current Revit document, LunchBox Grid Structure - Creates a grid wireframe on a surface., LunchBox Helicoid - Creates a parametric Helicoid surface, LunchBox Isovist - Isovist Ray Generation, LunchBox Level Element Collector - Collects Levels from the current Level document, LunchBox List Matcher - Compares a List A against a List B and matches length of List A.  If ListA > ListB, ListB will be extended.  If ListA < ListB, ListB will be truncated., LunchBox Mass Addition - Returns the total value of a list of numbers., LunchBox Mass Multiplication - Returns the total value of a list of numbers., LunchBox MEP Space Collector - Collects MEP Spaces and properties, LunchBox Mobius - Creates a parametric mobius surface., LunchBox Paraboloid - Creates a parametric Hyperbolic Paraboloid surface, LunchBox Placed and Unplaced Rooms - Finds placed and unplaced rooms, LunchBox Planarize Points - Projects a list of a 4 or more points to a common plane., LunchBox Point to String - Converts Point objects to strings., LunchBox Quad Grid by Face - Create a quadrangular XYZ grid on a face.  The face surface must have an untrimmed UV parameter space., LunchBox Random Numbers - Generates a list of Random numbers using a domain, amount, and seed., LunchBox Random Split List - Randomly splits a list of objects into two separate lists., LunchBox Remap Numbers - Remaps a list of numbers to a new domain., LunchBox Remove Null Values - Remove 'null' values from a list., LunchBox Room Element Collector - Collects rooms from the Revit document, LunchBox Sheet Collector - Collects sheets from the current document, WireSpaceTruss - Create a space truss using a surface., LunchBox Staggered Grid by Face  - Create a Staggered XYZ grid on a face.  The face surface must have an untrimmed UV parameter space., LunchBox String to Point - Converts a point string \"x,y,z\" into a true Point., LunchBox Structural Framing Collector - Collects Structural Graming Families from the Revit document., LunchBox Torus - Creates a parametric Torus surface, LunchBox Triangle Grid by Face - Create a Triangular XYZ grid on a face.  The face surface must have an untrimmed UV parameter space., LunchBox Vector Amplitude - Set the amplitude of a vector., LunchBox Vector Angle - Computes the angle between two vectors., LunchBox View Element Collector - Collects views from the active Revit document., LunchBox Wall Element Collector - Collects wall elements from the Revit document., LunchBox Wave - Creates a parametric Wave surface",
            "engine_metadata": "",
            "engine_version": "1.2.0.2690",
            "created": "2016-11-08T19:14:34.560Z",
            "full_dependency_versions": [ "2016.11.8" ],
            "full_dependency_ids": [
              {
                "_id": "528038ad3f7315936f000058",
                "name": "LunchBox for Dynamo"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2016.11.8"
          },
          {
            "_id": "582251695af9f3713d000013",
            "contains_binaries": true,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-prod/d9f997ed-ae92-41fb-8c87-9545c9ede066gregPkg750.zip",
            "contents": "LunchBox Adaptive Component Collector - Gets a list of Adaptive Components from a document using the Family Name., LunchBox Area Element Collector - Collects rooms from the Revit document, LunchBox AreaPlan Element Collector - Collects AreaPlans from the Revit model, LunchBox Attractor Wave - Generates a wave attractor effect using lists of attractors and targets., LunchBox Attractor - Simple distance-based attractor calculation, LunchBox Braced Grid Structure 2D - Creates a braced grid 2D on a surface., LunchBox Braced Grid Stucture 1D - Creates a 1D braced grid structure on a surface, LunchBox Create Room by Name and Number - Creates an unplaced room element using a name and number., LunchBox Curtain Panel Collector - Collects curtain panel instances and references them., LunchBox Curve to Arcs by Division - Converts a curve to tangent arc segments, LunchBox Curve to Arcs by Parameters - Converts a curve to arcs using parameter values, LunchBox Deconstruct Face - Gets the edges and vertices of a face., LunchBox Deconstruct Solid - Deconstructs a Revit solid into faces, edges, and vertices, LunchBox Diagrid Structure - Creates a diagrid structure on a surface., LunchBox Diamond Grid by Face - Create a Diamond XYZ grid on a face.  The face surface must have an untrimmed UV parameter space., LunchBox Domain Variables - Gets the Min and Max variables of a Domain., LunchBox Family Instance Collector - Collects Family Instances from the Revit Doc, LunchBox Floor Element Collector - Collects Floor elements from the current Revit document., LunchBox Get Domain - Gets the domain from a list of numbers., LunchBox Get Parameter Value - Gets parameter values from a Revit element., LunchBox Grid Element Collector - Collects Revit Grids from the current Revit document, LunchBox Grid Structure - Creates a grid wireframe on a surface., LunchBox Helicoid - Creates a parametric Helicoid surface, LunchBox Isovist - Isovist Ray Generation, LunchBox Level Element Collector - Collects Levels from the current Level document, LunchBox List Matcher - Compares a List A against a List B and matches length of List A.  If ListA > ListB, ListB will be extended.  If ListA < ListB, ListB will be truncated., LunchBox Mass Addition - Returns the total value of a list of numbers., LunchBox Mass Multiplication - Returns the total value of a list of numbers., LunchBox MEP Space Collector - Collects MEP Spaces and properties, LunchBox Mobius - Creates a parametric mobius surface., LunchBox Paraboloid - Creates a parametric Hyperbolic Paraboloid surface, LunchBox Placed and Unplaced Rooms - Finds placed and unplaced rooms, LunchBox Planarize Points - Projects a list of a 4 or more points to a common plane., LunchBox Point to String - Converts Point objects to strings., LunchBox Quad Grid by Face - Create a quadrangular XYZ grid on a face.  The face surface must have an untrimmed UV parameter space., LunchBox Random Numbers - Generates a list of Random numbers using a domain, amount, and seed., LunchBox Random Split List - Randomly splits a list of objects into two separate lists., LunchBox Remap Numbers - Remaps a list of numbers to a new domain., LunchBox Remove Null Values - Remove 'null' values from a list., LunchBox Room Element Collector - Collects rooms from the Revit document, LunchBox Sheet Collector - Collects sheets from the current document, WireSpaceTruss - Create a space truss using a surface., LunchBox Staggered Grid by Face  - Create a Staggered XYZ grid on a face.  The face surface must have an untrimmed UV parameter space., LunchBox String to Point - Converts a point string \"x,y,z\" into a true Point., LunchBox Structural Framing Collector - Collects Structural Graming Families from the Revit document., LunchBox Torus - Creates a parametric Torus surface, LunchBox Triangle Grid by Face - Create a Triangular XYZ grid on a face.  The face surface must have an untrimmed UV parameter space., LunchBox Vector Amplitude - Set the amplitude of a vector., LunchBox Vector Angle - Computes the angle between two vectors., LunchBox View Element Collector - Collects views from the active Revit document., LunchBox Wall Element Collector - Collects wall elements from the Revit document., LunchBox Wave - Creates a parametric Wave surface",
            "engine_metadata": "",
            "engine_version": "1.2.0.2690",
            "created": "2016-11-08T22:27:53.080Z",
            "full_dependency_versions": [ "2016.11.9" ],
            "full_dependency_ids": [
              {
                "_id": "528038ad3f7315936f000058",
                "name": "LunchBox for Dynamo"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2016.11.9"
          },
          {
            "_id": "5822577b5af9f3713d000014",
            "contains_binaries": true,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-prod/3533e63d-3b35-4156-9b2c-baffa9f0d2e5gregPkg816.zip",
            "contents": "LunchBox Adaptive Component Collector - Gets a list of Adaptive Components from a document using the Family Name., LunchBox Area Element Collector - Collects rooms from the Revit document, LunchBox AreaPlan Element Collector - Collects AreaPlans from the Revit model, LunchBox Attractor Wave - Generates a wave attractor effect using lists of attractors and targets., LunchBox Attractor - Simple distance-based attractor calculation, LunchBox Braced Grid Structure 2D - Creates a braced grid 2D on a surface., LunchBox Braced Grid Stucture 1D - Creates a 1D braced grid structure on a surface, LunchBox Create Room by Name and Number - Creates an unplaced room element using a name and number., LunchBox Curtain Panel Collector - Collects curtain panel instances and references them., LunchBox Curve to Arcs by Division - Converts a curve to tangent arc segments, LunchBox Curve to Arcs by Parameters - Converts a curve to arcs using parameter values, LunchBox Deconstruct Face - Gets the edges and vertices of a face., LunchBox Deconstruct Solid - Deconstructs a Revit solid into faces, edges, and vertices, LunchBox Diagrid Structure - Creates a diagrid structure on a surface., LunchBox Diamond Grid by Face - Create a Diamond XYZ grid on a face.  The face surface must have an untrimmed UV parameter space., LunchBox Domain Variables - Gets the Min and Max variables of a Domain., LunchBox Family Instance Collector - Collects Family Instances from the Revit Doc, LunchBox Floor Element Collector - Collects Floor elements from the current Revit document., LunchBox Get Domain - Gets the domain from a list of numbers., LunchBox Get Parameter Value - Gets parameter values from a Revit element., LunchBox Grid Element Collector - Collects Revit Grids from the current Revit document, LunchBox Grid Structure - Creates a grid wireframe on a surface., LunchBox Helicoid - Creates a parametric Helicoid surface, LunchBox Isovist - Isovist Ray Generation, LunchBox Level Element Collector - Collects Levels from the current Level document, LunchBox List Matcher - Compares a List A against a List B and matches length of List A.  If ListA > ListB, ListB will be extended.  If ListA < ListB, ListB will be truncated., LunchBox Mass Addition - Returns the total value of a list of numbers., LunchBox Mass Multiplication - Returns the total value of a list of numbers., LunchBox MEP Space Collector - Collects MEP Spaces and properties, LunchBox Mobius - Creates a parametric mobius surface., LunchBox Paraboloid - Creates a parametric Hyperbolic Paraboloid surface, LunchBox Placed and Unplaced Rooms - Finds placed and unplaced rooms, LunchBox Planarize Points - Projects a list of a 4 or more points to a common plane., LunchBox Point to String - Converts Point objects to strings., LunchBox Quad Grid by Face - Create a quadrangular XYZ grid on a face.  The face surface must have an untrimmed UV parameter space., LunchBox Random Numbers - Generates a list of Random numbers using a domain, amount, and seed., LunchBox Random Split List - Randomly splits a list of objects into two separate lists., LunchBox Remap Numbers - Remaps a list of numbers to a new domain., LunchBox Remove Null Values - Remove 'null' values from a list., LunchBox Room Element Collector - Collects rooms from the Revit document, LunchBox Sheet Collector - Collects sheets from the current document, WireSpaceTruss - Create a space truss using a surface., LunchBox Staggered Grid by Face  - Create a Staggered XYZ grid on a face.  The face surface must have an untrimmed UV parameter space., LunchBox String to Point - Converts a point string \"x,y,z\" into a true Point., LunchBox Structural Framing Collector - Collects Structural Graming Families from the Revit document., LunchBox Torus - Creates a parametric Torus surface, LunchBox Triangle Grid by Face - Create a Triangular XYZ grid on a face.  The face surface must have an untrimmed UV parameter space., LunchBox Vector Amplitude - Set the amplitude of a vector., LunchBox Vector Angle - Computes the angle between two vectors., LunchBox View Element Collector - Collects views from the active Revit document., LunchBox Wall Element Collector - Collects wall elements from the Revit document., LunchBox Wave - Creates a parametric Wave surface",
            "engine_metadata": "",
            "engine_version": "1.2.0.2690",
            "created": "2016-11-08T22:53:47.097Z",
            "full_dependency_versions": [ "2016.11.10" ],
            "full_dependency_ids": [
              {
                "_id": "528038ad3f7315936f000058",
                "name": "LunchBox for Dynamo"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2016.11.10"
          },
          {
            "_id": "58234fc15af9f3713d000021",
            "contains_binaries": true,
            "node_libraries": [ "LunchBox, Version=2016.10.24.0, Culture=neutral, PublicKeyToken=null" ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-prod/0615fc48-07d2-4414-abfc-0c757eb5fa17gregPkg144.zip",
            "contents": "LunchBox Adaptive Component Collector - Gets a list of Adaptive Components from a document using the Family Name., LunchBox Area Element Collector - Collects rooms from the Revit document, LunchBox AreaPlan Element Collector - Collects AreaPlans from the Revit model, LunchBox Attractor Wave - Generates a wave attractor effect using lists of attractors and targets., LunchBox Attractor - Simple distance-based attractor calculation, LunchBox Braced Grid Structure 2D - Creates a braced grid 2D on a surface., LunchBox Braced Grid Stucture 1D - Creates a 1D braced grid structure on a surface, LunchBox Create Room by Name and Number - Creates an unplaced room element using a name and number., LunchBox Curtain Panel Collector - Collects curtain panel instances and references them., LunchBox Curve to Arcs by Division - Converts a curve to tangent arc segments, LunchBox Curve to Arcs by Parameters - Converts a curve to arcs using parameter values, LunchBox Deconstruct Face - Gets the edges and vertices of a face., LunchBox Deconstruct Solid - Deconstructs a Revit solid into faces, edges, and vertices, LunchBox Diagrid Structure - Creates a diagrid structure on a surface., LunchBox Diamond Grid by Face - Create a Diamond XYZ grid on a face.  The face surface must have an untrimmed UV parameter space., LunchBox Domain Variables - Gets the Min and Max variables of a Domain., LunchBox Family Instance Collector - Collects Family Instances from the Revit Doc, LunchBox Floor Element Collector - Collects Floor elements from the current Revit document., LunchBox Get Domain - Gets the domain from a list of numbers., LunchBox Get Parameter Value - Gets parameter values from a Revit element., LunchBox Grid Element Collector - Collects Revit Grids from the current Revit document, LunchBox Grid Structure - Creates a grid wireframe on a surface., LunchBox Helicoid - Creates a parametric Helicoid surface, LunchBox Isovist - Isovist Ray Generation, LunchBox Level Element Collector - Collects Levels from the current Level document, LunchBox List Matcher - Compares a List A against a List B and matches length of List A.  If ListA > ListB, ListB will be extended.  If ListA < ListB, ListB will be truncated., LunchBox Mass Addition - Returns the total value of a list of numbers., LunchBox Mass Multiplication - Returns the total value of a list of numbers., LunchBox MEP Space Collector - Collects MEP Spaces and properties, LunchBox Mobius - Creates a parametric mobius surface., LunchBox Paraboloid - Creates a parametric Hyperbolic Paraboloid surface, LunchBox Placed and Unplaced Rooms - Finds placed and unplaced rooms, LunchBox Planarize Points - Projects a list of a 4 or more points to a common plane., LunchBox Point to String - Converts Point objects to strings., LunchBox Quad Grid by Face - Create a quadrangular XYZ grid on a face.  The face surface must have an untrimmed UV parameter space., LunchBox Random Numbers - Generates a list of Random numbers using a domain, amount, and seed., LunchBox Random Split List - Randomly splits a list of objects into two separate lists., LunchBox Remap Numbers - Remaps a list of numbers to a new domain., LunchBox Remove Null Values - Remove 'null' values from a list., LunchBox Room Element Collector - Collects rooms from the Revit document, LunchBox Sheet Collector - Collects sheets from the current document, WireSpaceTruss - Create a space truss using a surface., LunchBox Staggered Grid by Face  - Create a Staggered XYZ grid on a face.  The face surface must have an untrimmed UV parameter space., LunchBox String to Point - Converts a point string \"x,y,z\" into a true Point., LunchBox Structural Framing Collector - Collects Structural Graming Families from the Revit document., LunchBox Torus - Creates a parametric Torus surface, LunchBox Triangle Grid by Face - Create a Triangular XYZ grid on a face.  The face surface must have an untrimmed UV parameter space., LunchBox Vector Amplitude - Set the amplitude of a vector., LunchBox Vector Angle - Computes the angle between two vectors., LunchBox View Element Collector - Collects views from the active Revit document., LunchBox Wall Element Collector - Collects wall elements from the Revit document., LunchBox Wave - Creates a parametric Wave surface",
            "engine_metadata": "",
            "engine_version": "1.2.0.2690",
            "created": "2016-11-09T16:33:05.588Z",
            "full_dependency_versions": [ "2016.11.11" ],
            "full_dependency_ids": [
              {
                "_id": "528038ad3f7315936f000058",
                "name": "LunchBox for Dynamo"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2016.11.11"
          },
          {
            "_id": "588c8f4fca6a5edb650000c0",
            "contains_binaries": true,
            "node_libraries": [ "LunchBox, Version=2016.10.24.0, Culture=neutral, PublicKeyToken=null" ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-prod/ba0fa9af-88da-4c32-b797-5e1961debbf6gregPkg779.zip",
            "contents": "LunchBox Adaptive Component Collector - Gets a list of Adaptive Components from a document using the Family Name., LunchBox Area Element Collector - Collects rooms from the Revit document, LunchBox AreaPlan Element Collector - Collects AreaPlans from the Revit model, LunchBox Attractor Wave - Generates a wave attractor effect using lists of attractors and targets., LunchBox Attractor - Simple distance-based attractor calculation, LunchBox Braced Grid Structure 2D - Creates a braced grid 2D on a surface., LunchBox Braced Grid Stucture 1D - Creates a 1D braced grid structure on a surface, LunchBox Create Room by Name and Number - Creates an unplaced room element using a name and number., LunchBox Curtain Panel Collector - Collects curtain panel instances and references them., LunchBox Curve to Arcs by Division - Converts a curve to tangent arc segments, LunchBox Curve to Arcs by Parameters - Converts a curve to arcs using parameter values, LunchBox Deconstruct Face - Gets the edges and vertices of a face., LunchBox Deconstruct Solid - Deconstructs a Revit solid into faces, edges, and vertices, LunchBox Diagrid Structure - Creates a diagrid structure on a surface., LunchBox Diamond Grid by Face - Create a Diamond XYZ grid on a face.  The face surface must have an untrimmed UV parameter space., LunchBox Domain Variables - Gets the Min and Max variables of a Domain., LunchBox Family Instance Collector - Collects Family Instances from the Revit Doc, LunchBox Floor Element Collector - Collects Floor elements from the current Revit document., LunchBox Get Domain - Gets the domain from a list of numbers., LunchBox Get Parameter Value - Gets parameter values from a Revit element., LunchBox Grid Element Collector - Collects Revit Grids from the current Revit document, LunchBox Grid Structure - Creates a grid wireframe on a surface., LunchBox Helicoid - Creates a parametric Helicoid surface, LunchBox Isovist - Isovist Ray Generation, LunchBox Level Element Collector - Collects Levels from the current Level document, LunchBox List Matcher - Compares a List A against a List B and matches length of List A.  If ListA > ListB, ListB will be extended.  If ListA < ListB, ListB will be truncated., LunchBox Mass Addition - Returns the total value of a list of numbers., LunchBox Mass Multiplication - Returns the total value of a list of numbers., LunchBox MEP Space Collector - Collects MEP Spaces and properties, LunchBox Mobius - Creates a parametric mobius surface., LunchBox Paraboloid - Creates a parametric Hyperbolic Paraboloid surface, LunchBox Placed and Unplaced Rooms - Finds placed and unplaced rooms, LunchBox Planarize Points - Projects a list of a 4 or more points to a common plane., LunchBox Point to String - Converts Point objects to strings., LunchBox Quad Grid by Face - Create a quadrangular XYZ grid on a face.  The face surface must have an untrimmed UV parameter space., LunchBox Random Numbers - Generates a list of Random numbers using a domain, amount, and seed., LunchBox Random Split List - Randomly splits a list of objects into two separate lists., LunchBox Remap Numbers - Remaps a list of numbers to a new domain., LunchBox Remove Null Values - Remove 'null' values from a list., LunchBox Room Element Collector - Collects rooms from the Revit document, LunchBox Sheet Collector - Collects sheets from the current document, WireSpaceTruss - Create a space truss using a surface., LunchBox Staggered Grid by Face  - Create a Staggered XYZ grid on a face.  The face surface must have an untrimmed UV parameter space., LunchBox String to Point - Converts a point string \"x,y,z\" into a true Point., LunchBox Structural Framing Collector - Collects Structural Graming Families from the Revit document., LunchBox Torus - Creates a parametric Torus surface, LunchBox Triangle Grid by Face - Create a Triangular XYZ grid on a face.  The face surface must have an untrimmed UV parameter space., LunchBox Vector Amplitude - Set the amplitude of a vector., LunchBox Vector Angle - Computes the angle between two vectors., LunchBox View Element Collector - Collects views from the active Revit document., LunchBox Wall Element Collector - Collects wall elements from the Revit document., LunchBox Wave - Creates a parametric Wave surface",
            "engine_metadata": "",
            "engine_version": "1.2.1.3083",
            "created": "2017-01-28T12:32:15.838Z",
            "full_dependency_versions": [ "2017.1.28" ],
            "full_dependency_ids": [
              {
                "_id": "528038ad3f7315936f000058",
                "name": "LunchBox for Dynamo"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2017.1.28"
          },
          {
            "_id": "589d47a961de680108000045",
            "contains_binaries": true,
            "node_libraries": [ "LunchBox, Version=2016.10.24.0, Culture=neutral, PublicKeyToken=null" ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-prod/5fcdd4e3-4613-487b-9607-ff454ef0cdfdgregPkg653.zip",
            "contents": "LunchBox Adaptive Component Collector - Gets a list of Adaptive Components from a document using the Family Name., LunchBox Area Element Collector - Collects rooms from the Revit document, LunchBox AreaPlan Element Collector - Collects AreaPlans from the Revit model, LunchBox Attractor Wave - Generates a wave attractor effect using lists of attractors and targets., LunchBox Attractor - Simple distance-based attractor calculation, LunchBox Braced Grid Structure 2D - Creates a braced grid 2D on a surface., LunchBox Braced Grid Stucture 1D - Creates a 1D braced grid structure on a surface, LunchBox Create Room by Name and Number - Creates an unplaced room element using a name and number., LunchBox Curtain Panel Collector - Collects curtain panel instances and references them., LunchBox Curve to Arcs by Division - Converts a curve to tangent arc segments, LunchBox Curve to Arcs by Parameters - Converts a curve to arcs using parameter values, LunchBox Deconstruct Face - Gets the edges and vertices of a face., LunchBox Deconstruct Solid - Deconstructs a Revit solid into faces, edges, and vertices, LunchBox Diagrid Structure - Creates a diagrid structure on a surface., LunchBox Diamond Grid by Face - Create a Diamond XYZ grid on a face.  The face surface must have an untrimmed UV parameter space., LunchBox Domain Variables - Gets the Min and Max variables of a Domain., LunchBox Family Instance Collector - Collects Family Instances from the Revit Doc, LunchBox Floor Element Collector - Collects Floor elements from the current Revit document., LunchBox Get Domain - Gets the domain from a list of numbers., LunchBox Get Parameter Value - Gets parameter values from a Revit element., LunchBox Grid Element Collector - Collects Revit Grids from the current Revit document, LunchBox Grid Structure - Creates a grid wireframe on a surface., LunchBox Helicoid - Creates a parametric Helicoid surface, LunchBox Isovist - Isovist Ray Generation, LunchBox Level Element Collector - Collects Levels from the current Level document, LunchBox List Matcher - Compares a List A against a List B and matches length of List A.  If ListA > ListB, ListB will be extended.  If ListA < ListB, ListB will be truncated., LunchBox Mass Addition - Returns the total value of a list of numbers., LunchBox Mass Multiplication - Returns the total value of a list of numbers., LunchBox MEP Space Collector - Collects MEP Spaces and properties, LunchBox Mobius - Creates a parametric mobius surface., LunchBox Paraboloid - Creates a parametric Hyperbolic Paraboloid surface, LunchBox Placed and Unplaced Rooms - Finds placed and unplaced rooms, LunchBox Planarize Points - Projects a list of a 4 or more points to a common plane., LunchBox Point to String - Converts Point objects to strings., LunchBox Quad Grid by Face - Create a quadrangular XYZ grid on a face.  The face surface must have an untrimmed UV parameter space., LunchBox Random Numbers - Generates a list of Random numbers using a domain, amount, and seed., LunchBox Random Split List - Randomly splits a list of objects into two separate lists., LunchBox Remap Numbers - Remaps a list of numbers to a new domain., LunchBox Remove Null Values - Remove 'null' values from a list., LunchBox Room Element Collector - Collects rooms from the Revit document, LunchBox Sheet Collector - Collects sheets from the current document, WireSpaceTruss - Create a space truss using a surface., LunchBox Staggered Grid by Face  - Create a Staggered XYZ grid on a face.  The face surface must have an untrimmed UV parameter space., LunchBox String to Point - Converts a point string \"x,y,z\" into a true Point., LunchBox Structural Framing Collector - Collects Structural Graming Families from the Revit document., LunchBox Torus - Creates a parametric Torus surface, LunchBox Triangle Grid by Face - Create a Triangular XYZ grid on a face.  The face surface must have an untrimmed UV parameter space., LunchBox Vector Amplitude - Set the amplitude of a vector., LunchBox Vector Angle - Computes the angle between two vectors., LunchBox View Element Collector - Collects views from the active Revit document., LunchBox Wall Element Collector - Collects wall elements from the Revit document., LunchBox Wave - Creates a parametric Wave surface",
            "engine_metadata": "",
            "engine_version": "1.2.1.3083",
            "created": "2017-02-10T04:55:05.476Z",
            "full_dependency_versions": [ "2017.2.9" ],
            "full_dependency_ids": [
              {
                "_id": "528038ad3f7315936f000058",
                "name": "LunchBox for Dynamo"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2017.2.9"
          },
          {
            "_id": "589f756161de68010800004d",
            "contains_binaries": true,
            "node_libraries": [ "LunchBox, Version=2017.2.10.0, Culture=neutral, PublicKeyToken=null" ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-prod/be6f513c-5169-4ca1-9bf0-41e632435e33gregPkg763.zip",
            "contents": "LunchBox Adaptive Component Collector - Gets a list of Adaptive Components from a document using the Family Name., LunchBox Area Element Collector - Collects rooms from the Revit document, LunchBox AreaPlan Element Collector - Collects AreaPlans from the Revit model, LunchBox Attractor Wave - Generates a wave attractor effect using lists of attractors and targets., LunchBox Attractor - Simple distance-based attractor calculation, LunchBox Braced Grid Structure 2D - Creates a braced grid 2D on a surface., LunchBox Braced Grid Stucture 1D - Creates a 1D braced grid structure on a surface, LunchBox Create Room by Name and Number - Creates an unplaced room element using a name and number., LunchBox Curtain Panel Collector - Collects curtain panel instances and references them., LunchBox Curve to Arcs by Division - Converts a curve to tangent arc segments, LunchBox Curve to Arcs by Parameters - Converts a curve to arcs using parameter values, LunchBox Deconstruct Face - Gets the edges and vertices of a face., LunchBox Deconstruct Solid - Deconstructs a Revit solid into faces, edges, and vertices, LunchBox Diagrid Structure - Creates a diagrid structure on a surface., LunchBox Diamond Grid by Face - Create a Diamond XYZ grid on a face.  The face surface must have an untrimmed UV parameter space., LunchBox Domain Variables - Gets the Min and Max variables of a Domain., LunchBox Family Instance Collector - Collects Family Instances from the Revit Doc, LunchBox Floor Element Collector - Collects Floor elements from the current Revit document., LunchBox Get Domain - Gets the domain from a list of numbers., LunchBox Get Parameter Value - Gets parameter values from a Revit element., LunchBox Grid Element Collector - Collects Revit Grids from the current Revit document, LunchBox Grid Structure - Creates a grid wireframe on a surface., LunchBox Helicoid - Creates a parametric Helicoid surface, LunchBox Isovist - Isovist Ray Generation, LunchBox Level Element Collector - Collects Levels from the current Level document, LunchBox List Matcher - Compares a List A against a List B and matches length of List A.  If ListA > ListB, ListB will be extended.  If ListA < ListB, ListB will be truncated., LunchBox Mass Addition - Returns the total value of a list of numbers., LunchBox Mass Multiplication - Returns the total value of a list of numbers., LunchBox MEP Space Collector - Collects MEP Spaces and properties, LunchBox Mobius - Creates a parametric mobius surface., LunchBox Paraboloid - Creates a parametric Hyperbolic Paraboloid surface, LunchBox Placed and Unplaced Rooms - Finds placed and unplaced rooms, LunchBox Planarize Points - Projects a list of a 4 or more points to a common plane., LunchBox Point to String - Converts Point objects to strings., LunchBox Quad Grid by Face - Create a quadrangular XYZ grid on a face.  The face surface must have an untrimmed UV parameter space., LunchBox Random Numbers - Generates a list of Random numbers using a domain, amount, and seed., LunchBox Random Split List - Randomly splits a list of objects into two separate lists., LunchBox Remap Numbers - Remaps a list of numbers to a new domain., LunchBox Remove Null Values - Remove 'null' values from a list., LunchBox Room Element Collector - Collects rooms from the Revit document, LunchBox Sheet Collector - Collects sheets from the current document, WireSpaceTruss - Create a space truss using a surface., LunchBox Staggered Grid by Face  - Create a Staggered XYZ grid on a face.  The face surface must have an untrimmed UV parameter space., LunchBox String to Point - Converts a point string \"x,y,z\" into a true Point., LunchBox Structural Framing Collector - Collects Structural Graming Families from the Revit document., LunchBox Torus - Creates a parametric Torus surface, LunchBox Triangle Grid by Face - Create a Triangular XYZ grid on a face.  The face surface must have an untrimmed UV parameter space., LunchBox Vector Amplitude - Set the amplitude of a vector., LunchBox Vector Angle - Computes the angle between two vectors., LunchBox View Element Collector - Collects views from the active Revit document., LunchBox Wall Element Collector - Collects wall elements from the Revit document., LunchBox Wave - Creates a parametric Wave surface",
            "engine_metadata": "",
            "engine_version": "1.2.1.3083",
            "created": "2017-02-11T20:34:41.990Z",
            "full_dependency_versions": [ "2017.2.11" ],
            "full_dependency_ids": [
              {
                "_id": "528038ad3f7315936f000058",
                "name": "LunchBox for Dynamo"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2017.2.11"
          },
          {
            "_id": "58a1176c61de680108000053",
            "contains_binaries": true,
            "node_libraries": [ "LunchBox, Version=2017.2.12.0, Culture=neutral, PublicKeyToken=null" ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-prod/72b4fbae-ec2e-45dd-a0c1-01e8893690d9gregPkg853.zip",
            "contents": "LunchBox Adaptive Component Collector - Gets a list of Adaptive Components from a document using the Family Name., LunchBox Area Element Collector - Collects rooms from the Revit document, LunchBox AreaPlan Element Collector - Collects AreaPlans from the Revit model, LunchBox Attractor Wave - Generates a wave attractor effect using lists of attractors and targets., LunchBox Attractor - Simple distance-based attractor calculation, LunchBox Braced Grid Structure 2D - Creates a braced grid 2D on a surface., LunchBox Braced Grid Stucture 1D - Creates a 1D braced grid structure on a surface, LunchBox Create Room by Name and Number - Creates an unplaced room element using a name and number., LunchBox Curtain Panel Collector - Collects curtain panel instances and references them., LunchBox Curve to Arcs by Division - Converts a curve to tangent arc segments, LunchBox Curve to Arcs by Parameters - Converts a curve to arcs using parameter values, LunchBox Deconstruct Face - Gets the edges and vertices of a face., LunchBox Deconstruct Solid - Deconstructs a Revit solid into faces, edges, and vertices, LunchBox Diagrid Structure - Creates a diagrid structure on a surface., LunchBox Diamond Grid by Face - Create a Diamond XYZ grid on a face.  The face surface must have an untrimmed UV parameter space., LunchBox Domain Variables - Gets the Min and Max variables of a Domain., LunchBox Family Instance Collector - Collects Family Instances from the Revit Doc, LunchBox Floor Element Collector - Collects Floor elements from the current Revit document., LunchBox Get Domain - Gets the domain from a list of numbers., LunchBox Get Parameter Value - Gets parameter values from a Revit element., LunchBox Grid Element Collector - Collects Revit Grids from the current Revit document, LunchBox Grid Structure - Creates a grid wireframe on a surface., LunchBox Helicoid - Creates a parametric Helicoid surface, LunchBox Isovist - Isovist Ray Generation, LunchBox Level Element Collector - Collects Levels from the current Level document, LunchBox List Matcher - Compares a List A against a List B and matches length of List A.  If ListA > ListB, ListB will be extended.  If ListA < ListB, ListB will be truncated., LunchBox Mass Addition - Returns the total value of a list of numbers., LunchBox Mass Multiplication - Returns the total value of a list of numbers., LunchBox MEP Space Collector - Collects MEP Spaces and properties, LunchBox Mobius - Creates a parametric mobius surface., LunchBox Paraboloid - Creates a parametric Hyperbolic Paraboloid surface, LunchBox Placed and Unplaced Rooms - Finds placed and unplaced rooms, LunchBox Planarize Points - Projects a list of a 4 or more points to a common plane., LunchBox Point to String - Converts Point objects to strings., LunchBox Quad Grid by Face - Create a quadrangular XYZ grid on a face.  The face surface must have an untrimmed UV parameter space., LunchBox Random Numbers - Generates a list of Random numbers using a domain, amount, and seed., LunchBox Random Split List - Randomly splits a list of objects into two separate lists., LunchBox Remap Numbers - Remaps a list of numbers to a new domain., LunchBox Remove Null Values - Remove 'null' values from a list., LunchBox Room Element Collector - Collects rooms from the Revit document, LunchBox Sheet Collector - Collects sheets from the current document, WireSpaceTruss - Create a space truss using a surface., LunchBox Staggered Grid by Face  - Create a Staggered XYZ grid on a face.  The face surface must have an untrimmed UV parameter space., LunchBox String to Point - Converts a point string \"x,y,z\" into a true Point., LunchBox Structural Framing Collector - Collects Structural Graming Families from the Revit document., LunchBox Torus - Creates a parametric Torus surface, LunchBox Triangle Grid by Face - Create a Triangular XYZ grid on a face.  The face surface must have an untrimmed UV parameter space., LunchBox Vector Amplitude - Set the amplitude of a vector., LunchBox Vector Angle - Computes the angle between two vectors., LunchBox View Element Collector - Collects views from the active Revit document., LunchBox Wall Element Collector - Collects wall elements from the Revit document., LunchBox Wave - Creates a parametric Wave surface",
            "engine_metadata": "",
            "engine_version": "1.2.1.3083",
            "created": "2017-02-13T02:18:20.185Z",
            "full_dependency_versions": [ "2017.2.12" ],
            "full_dependency_ids": [
              {
                "_id": "528038ad3f7315936f000058",
                "name": "LunchBox for Dynamo"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2017.2.12"
          }
        ],
        "latest_version_update": "2017-02-13T02:18:20.185Z",
        "num_versions": 61,
        "comments": [ ],
        "num_comments": 0,
        "latest_comment": "1970-01-01T00:00:00.000Z",
        "votes": -32,
        "downloads": 53869,
        "repository_url": "",
        "site_url": "http://provingground.io/tools/lunchbox/",
        "banned": false,
        "deprecated": false,
        "group": "Proving Ground",
        "engine": "dynamo",
        "license": "http://provingground.io/tools/lunchbox/",
        "used_by": [
          {
            "_id": "53aa75550e5572016a000116",
            "name": "Swap UV"
          },
          {
            "_id": "52adf18e9de41c823500005e",
            "name": "Simple Patterning"
          },
          {
            "_id": "544730fdcc26bfdc5a0000db",
            "name": "Clockwork for Dynamo 0.6.3"
          },
          {
            "_id": "5507ae3e0c7eac9b57000053",
            "name": "BVN"
          },
          {
            "_id": "555e8bfea8367b98610000b8",
            "name": "Bakery"
          },
          {
            "_id": "560243d9662bf0e9080001c8",
            "name": "AdaptiveHangers.OnCableTrays"
          },
          {
            "_id": "56031545662bf0e9080001d3",
            "name": "ScaleID.MEP"
          },
          {
            "_id": "55e90085662bf0e908000142",
            "name": "Hot Gear"
          },
          {
            "_id": "56358835662bf0e9080002d0",
            "name": "Des+Fab"
          },
          {
            "_id": "56446665662bf0e908000324",
            "name": "MEPWORKS"
          },
          {
            "_id": "5676b36f5c568ad00c000048",
            "name": "Brunell"
          },
          {
            "_id": "568277405c568ad00c00006a",
            "name": "OblomovNode"
          },
          {
            "_id": "561ed4d4662bf0e90800025b",
            "name": "Dynablaster"
          },
          {
            "_id": "56bb8efdc3e9ee4a080000e2",
            "name": "Silman Custom Nodes - alpha"
          },
          {
            "_id": "56bb8f8ec3e9ee4a080000e4",
            "name": "Silman Custom Nodes"
          },
          {
            "_id": "570a4088287283f905000006",
            "name": "Rain Area"
          },
          {
            "_id": "57296c3c384037b37e000009",
            "name": "Lunchbox Quad Grid By Face Dalian"
          },
          {
            "_id": "5745289ac1a604fb36000034",
            "name": "Roof Type Duplicate"
          },
          {
            "_id": "57e22ae22107b8022300001e",
            "name": "MisterMEP"
          },
          {
            "_id": "58068fdef50b17c720000024",
            "name": "LCA_Aeforos"
          },
          {
            "_id": "5807dd02f50b17c720000038",
            "name": "LCA-Aeforos"
          },
          {
            "_id": "57d9f90df615e7725800004f",
            "name": "OpenStrc"
          },
          {
            "_id": "5828c0155af9f3713d000057",
            "name": "FrTe"
          },
          {
            "_id": "582ed4885af9f3713d0000b6",
            "name": "BIMSYK"
          },
          {
            "_id": "57dbd203882d868b4200000d",
            "name": "SYKES"
          },
          {
            "_id": "57a141b1e8d2032d77000021",
            "name": "CMs Dope Custom Nodes"
          },
          {
            "_id": "586c888d75c961bb1e00001e",
            "name": "mimimi"
          },
          {
            "_id": "58cf622af4db78ec01000134",
            "name": "Structural Framing Optimization"
          }
        ],
        "num_dependents": 28,
        "description": "**Built for Dynamo 1.2 (Revit 2017)** LunchBox is a collection of reusable geometry and data management nodes.  The tools have been tested with Dynamo 1.2 and Revit 2017.  The tool includes nodes for surface paneling, geometry, Revit data collection, and more!.  After installation, search a 'LunchBox' category will appear in Dynamo.  For versions supporting Revit 2015 and 2016, please check an older release. For versions compatible with Dynamo 0.6, please install version 2014.6.5 or earlier.  For more information, visit http://provingground.io/tools/lunchbox/",
        "maintainers": [
          {
            "_id": "5234d9ab6b18e47916000007",
            "username": "archinate"
          }
        ],
        "keywords": [ "parametric", "math", "curtain", "panels", "xyz", "domain", "numbers", "random", "json", "xml", "excel", "revit", "collector" ],
        "created": "2013-11-11T01:53:49.832Z"
      },
      {
            "_id": "58b58359f4db78ec01000068",
            "name": "ArePointsCollinear",
            "__v": 1,
            "white_list": false,
            "versions": [
                {
                    "_id": "58b58359f4db78ec01000069",
                    "contains_binaries": false,
                    "node_libraries": [],
                    "url_with_deps": "",
                    "url": "https://s3.amazonaws.com/greg-pkgs-prod/5792cc5c-6740-427b-a9d5-f0aeead1e6a9gregPkg49.zip",
                    "contents": "ArePointsCollinear - Tests whether points are collinear in the sequence that they are provided",
                    "engine_metadata": "",
                    "engine_version": "1.2.1.3083",
                    "created": "2017-02-28T14:04:09.801Z",
                    "full_dependency_versions": [
                        "2017.1.1"
                    ],
                    "full_dependency_ids": [
                        {
                            "_id": "58b58359f4db78ec01000068",
                            "name": "ArePointsCollinear"
                        }
                    ],
                    "direct_dependency_versions": [],
                    "direct_dependency_ids": [],
                    "change_log": "",
                    "version": "2017.1.1"
                }
            ],
            "latest_version_update": "2017-02-28T14:04:09.801Z",
            "num_versions": 1,
            "comments": [],
            "num_comments": 0,
            "latest_comment": "1970-01-01T00:00:00.000Z",
            "votes": 0,
            "downloads": 28,
            "repository_url": "",
            "site_url": "",
            "banned": false,
            "deprecated": false,
            "group": "Lightos",
            "engine": "dynamo",
            "license": "MIT",
            "used_by": [],
            "num_dependents": 0,
            "description": "Produces a list a true or false statements testing whether sequential points are collinear",
            "maintainers": [
                {
                    "_id": "5889cf44ca6a5edb650000a0",
                    "username": "tom.james@bailygarner.co.uk"
                }
            ],
            "keywords": [
                "points",
                "collinear"
            ],
            "created": "2017-02-28T14:04:09.801Z"
        },
      {
            "_id": "57619b51e70394822f0000a9",
            "name": "Honeybee",
            "__v": 19,
            "white_list": false,
            "versions": [
                {
                    "_id": "57619b51e70394822f0000aa",
                    "contains_binaries": false,
                    "node_libraries": [],
                    "url_with_deps": "",
                    "url": "https://s3.amazonaws.com/greg-pkgs-prod/0acc7862-3aea-44f7-a0d1-b017d4546d9bgregPkg746.zip",
                    "contents": "Collect Rooms and Spaces - Collect rooms and MEP spaces in the Revit document.\r\nUse \"Rooms to Zone\" node to convert them to Honeybee zones.",
                    "engine_metadata": "",
                    "engine_version": "1.0.0.1180",
                    "created": "2016-06-15T18:15:45.554Z",
                    "full_dependency_versions": [
                        "0.0.1"
                    ],
                    "full_dependency_ids": [
                        {
                            "_id": "57619b51e70394822f0000a9",
                            "name": "Honeybee"
                        }
                    ],
                    "direct_dependency_versions": [],
                    "direct_dependency_ids": [],
                    "change_log": "",
                    "version": "0.0.1"
                },
                {
                    "_id": "5773d8a3a8864af46c000003",
                    "contains_binaries": false,
                    "node_libraries": [],
                    "url_with_deps": "",
                    "url": "https://s3.amazonaws.com/greg-pkgs-prod/abf459a3-1493-4dd7-9e10-d0cd094de97dgregPkg644.zip",
                    "contents": "Collect Rooms and Spaces - Collect rooms and MEP spaces in the Revit document.\r\n\r\nUse \"Rooms to HBZones\" node to convert them to Honeybee zones., Rooms to HBZones - Create Honeybee zones from Revit Rooms or MEPSpaces.\r\nThis node currently ONLY collects geometrical data from Revit. In the future it will import constructions, materials and MEP data (e.g lighting power density).",
                    "engine_metadata": "",
                    "engine_version": "1.0.0.1180",
                    "created": "2016-06-29T14:18:11.317Z",
                    "full_dependency_versions": [
                        "0.0.2"
                    ],
                    "full_dependency_ids": [
                        {
                            "_id": "57619b51e70394822f0000a9",
                            "name": "Honeybee"
                        }
                    ],
                    "direct_dependency_versions": [],
                    "direct_dependency_ids": [],
                    "change_log": "",
                    "version": "0.0.2"
                },
                {
                    "_id": "577d7be0535146064800002e",
                    "contains_binaries": false,
                    "node_libraries": [],
                    "url_with_deps": "",
                    "url": "https://s3.amazonaws.com/greg-pkgs-prod/47dc9bf9-dcaa-4f14-8bf5-f8d39c61d7a8gregPkg719.zip",
                    "contents": "Collect Rooms and Spaces - Collect rooms and MEP spaces in the Revit document.\r\n\r\nUse \"Rooms to HBZones\" node to convert them to Honeybee zones., Generate Test Points by Grid Size - Calculate number of direct sunlight hours., Generate Test Points from HBZones - Calculate number of direct sunlight hours., Grid-based Analysis Recipe - Create an analysis recipe for a grid-based daylight or radiation analysis., Honeybee Surface - Create a Honeybee surface, which can be plugged into the \"Run Daylight Sumilation\" component.\r\nNot available in the currant version for Dynamo but this surface can be combined with other surfaces to make HBZones with the \"Create Honeybee Zone\" node., Radiance Glass Material by Single Value - Create a Radiance material by a single value for visible transmittace of the glass., Radiance Parameters - Radiance Parameters\r\nCheck here for more details about default values at (http://radsite.lbl.gov/radiance/refer/Notes/rpict_options.html) or read more at: (http://daysim.ning.com/) and check this presentation by John Mardaljevic: (http://radiance-online.org/community/workshops/2011-berkeley-ca/presentations/day1/JM_AmbientCalculation.pdf), Rooms to HBZones - Create Honeybee zones from Revit Rooms or MEPSpaces.\r\nThis node currently ONLY collects geometrical data from Revit. In the future it will import constructions, materials and MEP data (e.g lighting power density)., Run Radiance Simulation - Write and run radiance simulations from Radiance recipes., Sky with Certain Illuminance - Genrate a uniform CIE sky from an illuminace value, Sunlighthours Analysis Recipe - Calculate number of direct sunlight hours.",
                    "engine_metadata": "",
                    "engine_version": "1.0.0.1180",
                    "created": "2016-07-06T21:45:04.292Z",
                    "full_dependency_versions": [
                        "0.0.3"
                    ],
                    "full_dependency_ids": [
                        {
                            "_id": "57619b51e70394822f0000a9",
                            "name": "Honeybee"
                        }
                    ],
                    "direct_dependency_versions": [],
                    "direct_dependency_ids": [],
                    "change_log": "",
                    "version": "0.0.3"
                },
                {
                    "_id": "577dbb1e5351460648000030",
                    "contains_binaries": false,
                    "node_libraries": [],
                    "url_with_deps": "",
                    "url": "https://s3.amazonaws.com/greg-pkgs-prod/81916e3f-774d-43bb-b685-85a0082dd66egregPkg289.zip",
                    "contents": "CIE Standard Sky - Generate Radiance's CIE Standard sky (aka. gensky)., Collect Rooms and Spaces - Collect rooms and MEP spaces in the Revit document.\r\n\r\nUse \"Rooms to HBZones\" node to convert them to Honeybee zones., Generate Test Points by Grid Size - Generate test points from Dynamo surfaces based on grid size., Generate Test Points from HBZones - Generate test points from Honeybee zones based on grid size., Grid-based Analysis Recipe - Create an analysis recipe for a grid-based daylight or radiation analysis., Honeybee Surface - Create a Honeybee surface, which can be plugged into the \"Run Daylight Sumilation\" component.\r\nNot available in the currant version for Dynamo but this surface can be combined with other surfaces to make HBZones with the \"Create Honeybee Zone\" node., Radiance Glass Material by Single Value - Create a Radiance material by a single value for visible transmittace of the glass., Radiance Parameters - Radiance Parameters\r\nCheck here for more details about default values at (http://radsite.lbl.gov/radiance/refer/Notes/rpict_options.html) or read more at: (http://daysim.ning.com/) and check this presentation by John Mardaljevic: (http://radiance-online.org/community/workshops/2011-berkeley-ca/presentations/day1/JM_AmbientCalculation.pdf), Rooms to HBZones - Create Honeybee zones from Revit Rooms or MEPSpaces.\r\nThis node currently ONLY collects geometrical data from Revit. In the future it will import constructions, materials and MEP data (e.g lighting power density)., Run Radiance Simulation - Write and run radiance simulations from Radiance recipes., Sky with Certain Illuminance - Genrate a uniform CIE sky from an illuminace value, Sunlighthours Analysis Recipe - Calculate number of direct sunlight hours.",
                    "engine_metadata": "",
                    "engine_version": "1.0.0.1180",
                    "created": "2016-07-07T02:14:54.740Z",
                    "full_dependency_versions": [
                        "0.0.4"
                    ],
                    "full_dependency_ids": [
                        {
                            "_id": "57619b51e70394822f0000a9",
                            "name": "Honeybee"
                        }
                    ],
                    "direct_dependency_versions": [],
                    "direct_dependency_ids": [],
                    "change_log": "",
                    "version": "0.0.4"
                },
                {
                    "_id": "5782dfa65351460648000040",
                    "contains_binaries": false,
                    "node_libraries": [],
                    "url_with_deps": "",
                    "url": "https://s3.amazonaws.com/greg-pkgs-prod/ec7a5f01-d705-471b-af69-a9bc3f04ad03gregPkg952.zip",
                    "contents": "CIE Standard Sky - Generate Radiance's CIE Standard sky (aka. gensky)., Collect Rooms and Spaces - Collect rooms and MEP spaces in the Revit document.\r\n\r\nUse \"Rooms to HBZones\" node to convert them to Honeybee zones., Generate Test Points by Grid Size - Generate test points from Dynamo surfaces based on grid size., Generate Test Points from HBZones - Generate test points from Honeybee zones based on grid size., Grid-based Analysis Recipe - Create an analysis recipe for a grid-based daylight or radiation analysis., Honeybee Surface - Create a Honeybee surface, which can be plugged into the \"Run Daylight Sumilation\" component.\r\nNot available in the currant version for Dynamo but this surface can be combined with other surfaces to make HBZones with the \"Create Honeybee Zone\" node., Radiance Glass Material by Single Value - Create a Radiance material by a single value for visible transmittace of the glass., Radiance Parameters - Radiance Parameters\r\nCheck here for more details about default values at (http://radsite.lbl.gov/radiance/refer/Notes/rpict_options.html) or read more at: (http://daysim.ning.com/) and check this presentation by John Mardaljevic: (http://radiance-online.org/community/workshops/2011-berkeley-ca/presentations/day1/JM_AmbientCalculation.pdf), Rooms to HBZones - Create Honeybee zones from Revit Rooms or MEPSpaces.\r\nThis node currently ONLY collects geometrical data from Revit. In the future it will import constructions, materials and MEP data (e.g lighting power density)., Run Radiance Simulation - Write and run radiance simulations from Radiance recipes., Sky with Certain Illuminance - Genrate a uniform CIE sky from an illuminace value, Sunlighthours Analysis Recipe - Calculate number of direct sunlight hours.",
                    "engine_metadata": "",
                    "engine_version": "1.0.0.1180",
                    "created": "2016-07-10T23:52:06.042Z",
                    "full_dependency_versions": [
                        "0.0.5"
                    ],
                    "full_dependency_ids": [
                        {
                            "_id": "57619b51e70394822f0000a9",
                            "name": "Honeybee"
                        }
                    ],
                    "direct_dependency_versions": [],
                    "direct_dependency_ids": [],
                    "change_log": "",
                    "version": "0.0.5"
                },
                {
                    "_id": "5783190f5351460648000043",
                    "contains_binaries": false,
                    "node_libraries": [],
                    "url_with_deps": "",
                    "url": "https://s3.amazonaws.com/greg-pkgs-prod/a364e259-55ca-480a-9d39-464b89b747b3gregPkg592.zip",
                    "contents": "CIE Standard Sky - Generate Radiance's CIE Standard sky (aka. gensky)., Collect Rooms and Spaces - Collect rooms and MEP spaces in the Revit document.\r\n\r\nUse \"Rooms to HBZones\" node to convert them to Honeybee zones., Generate Test Points by Grid Size - Generate test points from Dynamo surfaces based on grid size., Generate Test Points from HBZones - Generate test points from Honeybee zones based on grid size., Grid-based Analysis Recipe - Create an analysis recipe for a grid-based daylight or radiation analysis., Honeybee Surface - Create a Honeybee surface, which can be plugged into the \"Run Daylight Sumilation\" component.\r\nNot available in the currant version for Dynamo but this surface can be combined with other surfaces to make HBZones with the \"Create Honeybee Zone\" node., Radiance Glass Material by Single Value - Create a Radiance material by a single value for visible transmittace of the glass., Radiance Parameters - Radiance Parameters\r\nCheck here for more details about default values at (http://radsite.lbl.gov/radiance/refer/Notes/rpict_options.html) or read more at: (http://daysim.ning.com/) and check this presentation by John Mardaljevic: (http://radiance-online.org/community/workshops/2011-berkeley-ca/presentations/day1/JM_AmbientCalculation.pdf), Rooms to HBZones - Create Honeybee zones from Revit Rooms or MEPSpaces.\r\nThis node currently ONLY collects geometrical data from Revit. In the future it will import constructions, materials and MEP data (e.g lighting power density)., Run Radiance Simulation - Write and run radiance simulations from Radiance recipes., Sky with Certain Illuminance - Genrate a uniform CIE sky from an illuminace value, Sunlighthours Analysis Recipe - Calculate number of direct sunlight hours.",
                    "engine_metadata": "",
                    "engine_version": "1.0.0.1180",
                    "created": "2016-07-11T03:57:03.690Z",
                    "full_dependency_versions": [
                        "0.0.6"
                    ],
                    "full_dependency_ids": [
                        {
                            "_id": "57619b51e70394822f0000a9",
                            "name": "Honeybee"
                        }
                    ],
                    "direct_dependency_versions": [],
                    "direct_dependency_ids": [],
                    "change_log": "",
                    "version": "0.0.6"
                },
                {
                    "_id": "5829143a5af9f3713d00005a",
                    "contains_binaries": false,
                    "node_libraries": [],
                    "url_with_deps": "",
                    "url": "https://s3.amazonaws.com/greg-pkgs-prod/282e649a-0f2b-4c4e-b6dc-0d20247274edgregPkg254.zip",
                    "contents": "CIE Standard Sky - Generate Radiance's CIE Standard sky (aka. gensky)., Collect Rooms and Spaces - Collect rooms and MEP spaces in the Revit document.\r\n\r\nUse \"Rooms to HBZones\" node to convert them to Honeybee zones., Generate Test Points by Grid Size - Generate test points from Dynamo surfaces based on grid size., Generate Test Points from HBZones - Generate test points from Honeybee zones based on grid size., Grid-based Analysis Recipe - Create an analysis recipe for a grid-based daylight or radiation analysis., Honeybee Surface - Create a Honeybee surface, which can be plugged into the \"Run Daylight Sumilation\" component.\r\nNot available in the currant version for Dynamo but this surface can be combined with other surfaces to make HBZones with the \"Create Honeybee Zone\" node., Radiance Glass Material by Single Value - Create a Radiance material by a single value for visible transmittace of the glass., Radiance Parameters - Radiance Parameters\r\nCheck here for more details about default values at (http://radsite.lbl.gov/radiance/refer/Notes/rpict_options.html) or read more at: (http://daysim.ning.com/) and check this presentation by John Mardaljevic: (http://radiance-online.org/community/workshops/2011-berkeley-ca/presentations/day1/JM_AmbientCalculation.pdf), Rooms to HBZones - Create Honeybee zones from Revit Rooms or MEPSpaces.\r\nThis node currently ONLY collects geometrical data from Revit. In the future it will import constructions, materials and MEP data (e.g lighting power density)., Run Radiance Simulation - Write and run radiance simulations from Radiance recipes., Sky with Certain Illuminance - Genrate a uniform CIE sky from an illuminace value, Sunlighthours Analysis Recipe - Calculate number of direct sunlight hours.",
                    "engine_metadata": "",
                    "engine_version": "1.2.0.2690",
                    "created": "2016-11-14T01:32:42.771Z",
                    "full_dependency_versions": [
                        "0.0.7"
                    ],
                    "full_dependency_ids": [
                        {
                            "_id": "57619b51e70394822f0000a9",
                            "name": "Honeybee"
                        }
                    ],
                    "direct_dependency_versions": [],
                    "direct_dependency_ids": [],
                    "change_log": "",
                    "version": "0.0.7"
                },
                {
                    "_id": "5834a3bd5af9f3713d0000e3",
                    "contains_binaries": false,
                    "node_libraries": [],
                    "url_with_deps": "",
                    "url": "https://s3.amazonaws.com/greg-pkgs-prod/46516f28-3148-455b-936b-5daa512f0c10gregPkg315.zip",
                    "contents": "CIE Standard Sky - Generate Radiance's CIE Standard sky (aka. gensky)., Collect Rooms and Spaces - Collect rooms and MEP spaces in the Revit document.\r\n\r\nUse \"Rooms to HBZones\" node to convert them to Honeybee zones., Generate Test Points by Grid Size - Generate test points from Dynamo surfaces based on grid size., Generate Test Points from HBZones - Generate test points from Honeybee zones based on grid size., Grid-based Analysis Recipe - Create an analysis recipe for a grid-based daylight or radiation analysis., Honeybee Surface - Create a Honeybee surface, which can be plugged into the \"Run Daylight Sumilation\" component.\r\nNot available in the currant version for Dynamo but this surface can be combined with other surfaces to make HBZones with the \"Create Honeybee Zone\" node., Radiance Glass Material by Single Value - Create a Radiance material by a single value for visible transmittace of the glass., Radiance Parameters - Radiance Parameters\r\nCheck here for more details about default values at (http://radsite.lbl.gov/radiance/refer/Notes/rpict_options.html) or read more at: (http://daysim.ning.com/) and check this presentation by John Mardaljevic: (http://radiance-online.org/community/workshops/2011-berkeley-ca/presentations/day1/JM_AmbientCalculation.pdf), Rooms to HBZones - Create Honeybee zones from Revit Rooms or MEPSpaces.\r\nThis node currently ONLY collects geometrical data from Revit. In the future it will import constructions, materials and MEP data (e.g lighting power density)., Run Radiance Simulation - Write and run radiance simulations from Radiance recipes., Sky with Certain Illuminance - Genrate a uniform CIE sky from an illuminace value, Sunlighthours Analysis Recipe - Calculate number of direct sunlight hours.",
                    "engine_metadata": "",
                    "engine_version": "1.2.0.2690",
                    "created": "2016-11-22T19:59:57.742Z",
                    "full_dependency_versions": [
                        "0.0.8"
                    ],
                    "full_dependency_ids": [
                        {
                            "_id": "57619b51e70394822f0000a9",
                            "name": "Honeybee"
                        }
                    ],
                    "direct_dependency_versions": [],
                    "direct_dependency_ids": [],
                    "change_log": "",
                    "version": "0.0.8"
                },
                {
                    "_id": "5889f74dca6a5edb650000a9",
                    "contains_binaries": false,
                    "node_libraries": [],
                    "url_with_deps": "",
                    "url": "https://s3.amazonaws.com/greg-pkgs-prod/0e967764-dc2d-417b-878c-e6c8637da73cgregPkg926.zip",
                    "contents": "CIE Standard Sky - Generate Radiance's CIE Standard sky (aka. gensky)., Collect Rooms and Spaces - Collect rooms and MEP spaces in the Revit document.\r\n\r\nUse \"Rooms to HBZones\" node to convert them to Honeybee zones., Generate Test Points by Grid Size - Generate test points from Dynamo surfaces based on grid size., Generate Test Points from HBZones - Generate test points from Honeybee zones based on grid size., Grid-based Analysis Recipe - Create an analysis recipe for a grid-based daylight or radiation analysis., Honeybee Surface - Create a Honeybee surface, which can be plugged into the \"Run Daylight Sumilation\" component.\r\nNot available in the currant version for Dynamo but this surface can be combined with other surfaces to make HBZones with the \"Create Honeybee Zone\" node., Radiance Glass Material by Single Value - Create a Radiance material by a single value for visible transmittace of the glass., Radiance Parameters - Radiance Parameters\r\nCheck here for more details about default values at (http://radsite.lbl.gov/radiance/refer/Notes/rpict_options.html) or read more at: (http://daysim.ning.com/) and check this presentation by John Mardaljevic: (http://radiance-online.org/community/workshops/2011-berkeley-ca/presentations/day1/JM_AmbientCalculation.pdf), Rooms to HBZones - Create Honeybee zones from Revit Rooms or MEPSpaces.\r\nThis node currently ONLY collects geometrical data from Revit. In the future it will import constructions, materials and MEP data (e.g lighting power density)., Run Radiance Simulation - Write and run radiance simulations from Radiance recipes., Sky with Certain Illuminance - Genrate a uniform CIE sky from an illuminace value, Sunlighthours Analysis Recipe - Calculate number of direct sunlight hours.",
                    "engine_metadata": "",
                    "engine_version": "1.2.1.3083",
                    "created": "2017-01-26T13:19:09.967Z",
                    "full_dependency_versions": [
                        "0.0.9"
                    ],
                    "full_dependency_ids": [
                        {
                            "_id": "57619b51e70394822f0000a9",
                            "name": "Honeybee"
                        }
                    ],
                    "direct_dependency_versions": [],
                    "direct_dependency_ids": [],
                    "change_log": "",
                    "version": "0.0.9"
                },
                {
                    "_id": "58c61ceff4db78ec010000ea",
                    "contains_binaries": false,
                    "node_libraries": [],
                    "url_with_deps": "",
                    "url": "https://s3.amazonaws.com/greg-pkgs-prod/5f3decd7-2c8b-4ae0-9bbc-ee8d7cf12213gregPkg154.zip",
                    "contents": "CIE Standard Sky - Generate Radiance's CIE Standard sky (aka. gensky)., Collect Rooms and Spaces - Collect rooms and MEP spaces in the Revit document.\r\n\r\nUse \"Rooms to HBZones\" node to convert them to Honeybee zones., Generate Test Points by Grid Size - Generate test points from Dynamo surfaces based on grid size., Generate Test Points from HBZones - Generate test points from Honeybee zones based on grid size., Grid-based Analysis Recipe - Create an analysis recipe for a grid-based daylight or radiation analysis., Honeybee Surface - Create a Honeybee surface, which can be plugged into the \"Run Daylight Sumilation\" component.\r\nNot available in the currant version for Dynamo but this surface can be combined with other surfaces to make HBZones with the \"Create Honeybee Zone\" node., Radiance Glass Material by Single Value - Create a Radiance material by a single value for visible transmittace of the glass., Radiance Parameters - Radiance Parameters\r\nCheck here for more details about default values at (http://radsite.lbl.gov/radiance/refer/Notes/rpict_options.html) or read more at: (http://daysim.ning.com/) and check this presentation by John Mardaljevic: (http://radiance-online.org/community/workshops/2011-berkeley-ca/presentations/day1/JM_AmbientCalculation.pdf), Rooms to HBZones - Create Honeybee zones from Revit Rooms or MEPSpaces.\r\nThis node currently ONLY collects geometrical data from Revit. In the future it will import constructions, materials and MEP data (e.g lighting power density)., Run Radiance Simulation - Write and run radiance simulations from Radiance recipes., Sky with Certain Illuminance - Genrate a uniform CIE sky from an illuminace value, Sunlighthours Analysis Recipe - Calculate number of direct sunlight hours.",
                    "engine_metadata": "",
                    "engine_version": "1.2.1.3083",
                    "created": "2017-03-13T04:15:43.769Z",
                    "full_dependency_versions": [
                        "0.1.0"
                    ],
                    "full_dependency_ids": [
                        {
                            "_id": "57619b51e70394822f0000a9",
                            "name": "Honeybee"
                        }
                    ],
                    "direct_dependency_versions": [],
                    "direct_dependency_ids": [],
                    "change_log": "",
                    "version": "0.1.0"
                }
            ],
            "latest_version_update": "2017-03-13T04:15:43.769Z",
            "num_versions": 10,
            "comments": [],
            "num_comments": 0,
            "latest_comment": "1970-01-01T00:00:00.000Z",
            "votes": 1,
            "downloads": 1071,
            "repository_url": "https://github.com/ladybug-analysis-tools/honeybee-plus",
            "site_url": "ladybug.tools",
            "banned": false,
            "deprecated": false,
            "group": "Ladybug Analysis Tools",
            "engine": "dynamo",
            "license": "GPL V 3.0",
            "used_by": [],
            "num_dependents": 0,
            "description": "Honeybee connects Revit and DynamoBIM to Radiance and OpenStudio (EnergyPlus) for daylight and energy simulation.\r\n\r\nThis version supports point in time daylight and sunlight hours analysis. Annual daylight analysis will be added soon.",
            "maintainers": [
                {
                    "_id": "56a911d7c3e9ee4a0800004a",
                    "username": "thisisladybug"
                }
            ],
            "keywords": [
                "radiance",
                "energyplus",
                "openstudio",
                "environmental",
                "analysis"
            ],
            "created": "2016-06-15T18:15:45.554Z"
        },
      {
        "_id": "58c6bb92f4db78ec010000f2",
        "name": "lineal",
        "__v": 1,
        "white_list": false,
        "versions": [
          {
            "_id": "58c6bb92f4db78ec010000f3",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-prod/4c26f94c-447e-4f4e-b5e5-5fc633f529f7gregPkg275.zip",
            "contents": "# de columnas y filas y respectivo rango - Numero de columnas y de filas y su respectivo rango para su uso en recorridos de codigo el rango esta establecido como:\r\nRango Filas = # de filas + 1\r\nRango Columnas = # de columnas + 1, Creación de Planos Horizontales y Verticales - Crea planos verticales y horizonrales a partir de un muro que contenga Ventanas, Geometry.SplitRecursively - Splits a surface or a solid recursively, using the resulting reduced geometry for every consecutive split. Select a point or another geometry to control the direction of the split., Longitud de grupos de trozos horizontales - Saca la longitud de los grupos de los trozos que estan unidos de forma horizontal, Muro fantasma identico a muro real - Crea un muro fantasma con las mismas propiedades del muro real;\r\nCurve\r\nHeight\r\nLevel\r\nWall Type, Puntos recursivos origen y referencia para corte vertical muro - El nodo crea puntos recursivamente para hallar el origen del muro, este se usa para organizar los planos verticales y crea puntos recursivos para el corte recursivo de los Solidos, Referencia para cortes verticales - Dado un grupo de planos verticales y sus debidos origenes, los organiza para el corte recursivo",
            "engine_metadata": "",
            "engine_version": "1.2.1.3083",
            "created": "2017-03-13T15:32:34.542Z",
            "full_dependency_versions": [
              "1.1.1",
              "1.2.2",
              "0.90.7"
            ],
            "full_dependency_ids": [
              {
                "_id": "58c6bb92f4db78ec010000f2",
                "name": "lineal"
              },
              {
                "_id": "545a51aa893c653357000008",
                "name": "SteamNodes"
              },
              {
                "_id": "562f800e662bf0e9080002ab",
                "name": "Clockwork for Dynamo 0.9.x"
              }
            ],
            "direct_dependency_versions": [
              "0.90.7",
              "1.2.2"
            ],
            "direct_dependency_ids": [
              {
                "_id": "562f800e662bf0e9080002ab",
                "name": "Clockwork for Dynamo 0.9.x"
              },
              {
                "_id": "545a51aa893c653357000008",
                "name": "SteamNodes"
              }
            ],
            "change_log": "",
            "version": "1.1.1"
          }
        ],
        "latest_version_update": "2017-03-13T15:32:34.542Z",
        "num_versions": 1,
        "comments": [ ],
        "num_comments": 0,
        "latest_comment": "1970-01-01T00:00:00.000Z",
        "votes": 0,
        "downloads": 22,
        "repository_url": "",
        "site_url": "",
        "banned": false,
        "deprecated": false,
        "group": "bolivar",
        "engine": "dynamo",
        "license": "MIT",
        "used_by": [ ],
        "num_dependents": 0,
        "description": "lineal cuadrado metros muro",
        "maintainers": [
          {
            "_id": "58c6aaf4f4db78ec010000ef",
            "username": "js.galindo1155@uniandes.edu.co"
          }
        ],
        "keywords": [
          "lineal",
          "cuadrado",
          "metros",
          "muro"
        ],
        "created": "2017-03-13T15:32:34.542Z"
      },
      {
        "_id": "57fa8b79d3d589541a000048",
        "name": "bimorphNodes",
        "__v": 43,
        "white_list": false,
        "versions": [
          {
            "_id": "57fa8b79d3d589541a000049",
            "contains_binaries": true,
            "node_libraries": [ "Package.customization, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null" ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-prod/5c3d7448-8acb-45d5-899f-935d5d8818f3gregPkg589.zip",
            "contents": "GetLineStylesAttributes - Gets all the Revit Line Styles in the document and reports their Line Style Name, Weight and Colour as strings and integers",
            "engine_metadata": "",
            "engine_version": "1.2.0.2690",
            "created": "2016-10-09T18:24:57.551Z",
            "full_dependency_versions": [ "0.0.1" ],
            "full_dependency_ids": [
              {
                "_id": "57fa8b79d3d589541a000048",
                "name": "bimorphNodes"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "0.0.1"
          },
          {
            "_id": "57fc35f8d3d589541a00005e",
            "contains_binaries": true,
            "node_libraries": [ "Package.customization, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null" ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-prod/6ab3d9c0-12cf-4adc-a162-800ff463d753gregPkg914.zip",
            "contents": "CADLayerNames - Get the full list of layer names from a CAD Link or Import, CADLayersInUse - Get the list of layer names from a CAD link or import that are in use and contain curves, CreateNewLineStyles - Create single or multiple new Line Styles in a Revit document from name, line weight and RGB values, CurvesFromCADLayers - Extract curves from a CAD link or import by layer name. Curves are organised into layer sublists. To create Revit Model Lines set the revitModelLines input to true\r\n\r\nThis node is also optimised to convert curve types that typically fail when using Revit.Elements.Element.Curves or Full Explode, DuplicateSheets - Duplicate selected sheets and any placed views with options to control if views are duplicated and the method of duplication\r\n\r\nViewSchedules and Legends are currently not supported, GetLineStylesAttributes - Gets all the Revit Line Styles in the document and reports their Line Style Name, Weight and Colour as strings and integers, GetScheduleData - Gets all the table data from a given schedule as strings, GetScheduleDataColumns - Get the specified column data from a given schedule as strings\r\n\r\nColumn indexes start at 0, GetScheduleDataRows - Get the specified row data from a given schedule as strings\r\n\r\nSchedules have a blank row after the headings. Row indexes start at 0, GetSheetsFromSchedule - Collects and returns all Revit sheet elements from a Sheet List Schedule\r\n\r\nEnsure the Sheet Number field is included in the Schedule, RenumberOrRenameSheets - Renumber or rename Revit sheets with a list of strings. To renumber only, leave newNames input empty \r\n\r\nSheets and newNumbers items must have an equal count to run",
            "engine_metadata": "",
            "engine_version": "1.2.0.2690",
            "created": "2016-10-11T00:44:40.399Z",
            "full_dependency_versions": [ "1.0.0" ],
            "full_dependency_ids": [
              {
                "_id": "57fa8b79d3d589541a000048",
                "name": "bimorphNodes"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "1.0.0"
          },
          {
            "_id": "57fc4273d3d589541a00005f",
            "contains_binaries": true,
            "node_libraries": [ "Package.customization, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null" ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-prod/66902fef-915f-454d-b2be-81a586b3f7d1gregPkg405.zip",
            "contents": "CADLayerNames - Get the full list of layer names from a CAD Link or Import, CADLayersInUse - Get the list of layer names from a CAD link or import that are in use and contain curves, CreateNewLineStyles - Create single or multiple new Line Styles in a Revit document from name, line weight and RGB values, CurvesFromCADLayers - Extract curves from a CAD link or import by layer name. Curves are organised into layer sublists. To create Revit Model Lines set the revitModelLines input to true\r\n\r\nThis node is also optimised to convert curve types that typically fail when using Revit.Elements.Element.Curves or Full Explode, DuplicateSheets - Duplicate selected sheets and any placed views with options to control if views are duplicated and the method of duplication\r\n\r\nViewSchedules and Legends are currently not supported, GetLineStylesAttributes - Gets all the Revit Line Styles in the document and reports their Line Style Name, Weight and Colour as strings and integers, GetScheduleData - Gets all the table data from a given schedule as strings, GetScheduleDataColumns - Get the specified column data from a given schedule as strings\r\n\r\nColumn indexes start at 0, GetScheduleDataRows - Get the specified row data from a given schedule as strings\r\n\r\nSchedules have a blank row after the headings. Row indexes start at 0, GetSheetsFromSchedule - Collects and returns all Revit sheet elements from a Sheet List Schedule\r\n\r\nEnsure the Sheet Number field is included in the Schedule, RenumberOrRenameSheets - Renumber or rename Revit sheets with a list of strings. To renumber only, leave newNames input empty \r\n\r\nSheets and newNumbers items must have an equal count to run",
            "engine_metadata": "",
            "engine_version": "1.2.0.2690",
            "created": "2016-10-11T01:37:55.599Z",
            "full_dependency_versions": [ "1.0.1" ],
            "full_dependency_ids": [
              {
                "_id": "57fa8b79d3d589541a000048",
                "name": "bimorphNodes"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "1.0.1"
          },
          {
            "_id": "57fd1791d3d589541a00006b",
            "contains_binaries": true,
            "node_libraries": [ "Package.customization, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null" ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-prod/524d8045-5a7d-4494-a915-40a425eda205gregPkg930.zip",
            "contents": "CADLayerNames - Get the full list of layer names from a CAD Link or Import, CADLayersInUse - Get the list of layer names from a CAD link or import that are in use and contain curves, CreateNewLineStyles - Create single or multiple new Line Styles in a Revit document from name, line weight and RGB values, CurvesFromCADLayers - Extract curves from a CAD link or import by layer name. Curves are organised into layer sublists. To create Revit Model Lines set the revitModelLines input to true\r\n\r\nThis node is also optimised to convert curve types that typically fail when using Revit.Elements.Element.Curves or Full Explode, DuplicateSheets - Duplicate selected sheets and any placed views with options to control if views are duplicated and the method of duplication\r\n\r\nViewSchedules and Legends are currently not supported, GetLineStylesAttributes - Gets all the Revit Line Styles in the document and reports their Line Style Name, Weight and Colour as strings and integers, GetScheduleData - Gets all the table data from a given schedule as strings, GetScheduleDataColumns - Get the specified column data from a given schedule as strings\r\n\r\nColumn indexes start at 0, GetScheduleDataRows - Get the specified row data from a given schedule as strings\r\n\r\nSchedules have a blank row after the headings. Row indexes start at 0, GetSheetsFromSchedule - Collects and returns all Revit sheet elements from a Sheet List Schedule\r\n\r\nEnsure the Sheet Number field is included in the Schedule, RenumberOrRenameSheets - Renumber or rename Revit sheets with a list of strings. To renumber only, leave newNames input empty \r\n\r\nSheets and newNumbers items must have an equal count to run",
            "engine_metadata": "",
            "engine_version": "1.2.0.2690",
            "created": "2016-10-11T16:47:13.490Z",
            "full_dependency_versions": [ "1.1.1" ],
            "full_dependency_ids": [
              {
                "_id": "57fa8b79d3d589541a000048",
                "name": "bimorphNodes"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "1.1.1"
          },
          {
            "_id": "57fd17ecd3d589541a00006c",
            "contains_binaries": true,
            "node_libraries": [ "Package.customization, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null" ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-prod/c0b4e74a-5999-49af-8ff1-8dac44b5c4edgregPkg534.zip",
            "contents": "CADLayerNames - Get the full list of layer names from a CAD Link or Import, CADLayersInUse - Get the list of layer names from a CAD link or import that are in use and contain curves, CreateNewLineStyles - Create single or multiple new Line Styles in a Revit document from name, line weight and RGB values, CurvesFromCADLayers - Extract curves from a CAD link or import by layer name. Curves are organised into layer sublists. To create Revit Model Lines set the revitModelLines input to true\r\n\r\nThis node is also optimised to convert curve types that typically fail when using Revit.Elements.Element.Curves or Full Explode, DuplicateSheets - Duplicate selected sheets and any placed views with options to control if views are duplicated and the method of duplication\r\n\r\nViewSchedules and Legends are currently not supported, GetLineStylesAttributes - Gets all the Revit Line Styles in the document and reports their Line Style Name, Weight and Colour as strings and integers, GetScheduleData - Gets all the table data from a given schedule as strings, GetScheduleDataColumns - Get the specified column data from a given schedule as strings\r\n\r\nColumn indexes start at 0, GetScheduleDataRows - Get the specified row data from a given schedule as strings\r\n\r\nSchedules have a blank row after the headings. Row indexes start at 0, GetSheetsFromSchedule - Collects and returns all Revit sheet elements from a Sheet List Schedule\r\n\r\nEnsure the Sheet Number field is included in the Schedule, RenumberOrRenameSheets - Renumber or rename Revit sheets with a list of strings. To renumber only, leave newNames input empty \r\n\r\nSheets and newNumbers items must have an equal count to run",
            "engine_metadata": "",
            "engine_version": "1.2.0.2690",
            "created": "2016-10-11T16:48:44.329Z",
            "full_dependency_versions": [ "1.2.1" ],
            "full_dependency_ids": [
              {
                "_id": "57fa8b79d3d589541a000048",
                "name": "bimorphNodes"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "1.2.1"
          },
          {
            "_id": "57fecc7bd3d589541a00007a",
            "contains_binaries": true,
            "node_libraries": [ "Package.customization, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null" ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-prod/2fb9765d-c355-46d9-be95-6ef8f8726623gregPkg235.zip",
            "contents": "CADLayerNames - Get the full list of layer names from a CAD Link or Import, CADLayersInUse - Get the list of layer names from a CAD link or import that are in use and contain curves, CreateNewLineStyles - Create single or multiple new Line Styles in a Revit document from name, line weight and RGB values, CurvesFromCADLayers - Extract curves from a CAD link or import by layer name. Curves are organised into layer sublists. To create Revit Model Lines set the revitModelLines input to true\r\n\r\nThis node is also optimised to convert curve types that typically fail when using Revit.Elements.Element.Curves or Full Explode, DuplicateSheets - Duplicate selected sheets and any placed views with options to control if views are duplicated and the method of duplication\r\n\r\nViewSchedules and Legends are currently not supported, GetLineStylesAttributes - Gets all the Revit Line Styles in the document and reports their Line Style Name, Weight and Colour as strings and integers, GetScheduleData - Gets all the table data from a given schedule as strings, GetScheduleDataColumns - Get the specified column data from a given schedule as strings\r\n\r\nColumn indexes start at 0, GetScheduleDataRows - Get the specified row data from a given schedule as strings\r\n\r\nSchedules have a blank row after the headings. Row indexes start at 0, GetSheetsFromSchedule - Collects and returns all Revit sheets from a Sheet List Schedule\r\n\r\nEnsure the Sheet Number field is included in the Schedule, RenumberOrRenameSheets - Renumber or rename Revit sheets with a list of strings. To renumber only, leave newNames input empty \r\n\r\nSheets and newNumbers items must have an equal count to run",
            "engine_metadata": "",
            "engine_version": "1.2.0.2690",
            "created": "2016-10-12T23:51:23.138Z",
            "full_dependency_versions": [ "1.3.1" ],
            "full_dependency_ids": [
              {
                "_id": "57fa8b79d3d589541a000048",
                "name": "bimorphNodes"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "1.3.1"
          },
          {
            "_id": "57fece73d3d589541a00007b",
            "contains_binaries": true,
            "node_libraries": [ "Package.customization, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null" ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-prod/0b38ad08-3365-4a36-a03a-2b3e2d210bf4gregPkg124.zip",
            "contents": "CADLayerNames - Get the full list of layer names from a CAD Link or Import, CADLayersInUse - Get the list of layer names from a CAD link or import that are in use and contain curves, CreateNewLineStyles - Create single or multiple new Line Styles in a Revit document from name, line weight and RGB values, CurvesFromCADLayers - Extract curves from a CAD link or import by layer name. Curves are organised into layer sublists. To create Revit Model Lines set the createModelLines input to true\r\n\r\nThis node is also optimised to convert curve types that typically fail when using Revit.Elements.Element.Curves or Full Explode, DuplicateSheets - Duplicate selected sheets and any placed views with options to control if views are duplicated and the method of duplication\r\n\r\nViewSchedules and Legends are currently not supported, GetLineStylesAttributes - Gets all the Revit Line Styles in the document and reports their Line Style Name, Weight and Colour as strings and integers, GetScheduleData - Gets all the table data from a given schedule as strings, GetScheduleDataColumns - Get the specified column data from a given schedule as strings\r\n\r\nColumn indexes start at 0, GetScheduleDataRows - Get the specified row data from a given schedule as strings\r\n\r\nSchedules have a blank row after the headings. Row indexes start at 0, GetSheetsFromSchedule - Collects and returns all Revit sheets from a Sheet List Schedule\r\n\r\nEnsure the Sheet Number field is included in the Schedule, RenumberOrRenameSheets - Renumber or rename Revit sheets with a list of strings. To renumber only, leave newNames input empty \r\n\r\nSheets and newNumbers items must have an equal count to run",
            "engine_metadata": "",
            "engine_version": "1.2.0.2690",
            "created": "2016-10-12T23:59:47.072Z",
            "full_dependency_versions": [ "1.3.2" ],
            "full_dependency_ids": [
              {
                "_id": "57fa8b79d3d589541a000048",
                "name": "bimorphNodes"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "1.3.2"
          },
          {
            "_id": "58001229d3d589541a00008b",
            "contains_binaries": true,
            "node_libraries": [ "Package.customization, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null" ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-prod/7f9a4a40-0db7-4f5d-bf33-8423f2fd3a54gregPkg188.zip",
            "contents": "CADLayerNames - Get the full list of layer names from a CAD Link or Import, CADLayersInUse - Get the list of layer names from a CAD link or import that are in use and contain curves, CreateNewLineStyles - Create single or multiple new Line Styles in a Revit document from name, line weight and RGB values, CurvesFromCADLayers - Extract curves from a CAD link or import by layer name. Curves are organised into layer sublists. To create Revit Model Lines set the createModelLines input to true\r\n\r\nThis node is also optimised to convert curve types that typically fail when using Revit.Elements.Element.Curves or Full Explode, DuplicateSheets - Duplicate selected sheets and any placed views with options to control if views are duplicated and the method of duplication\r\n\r\nViewSchedules and Legends are currently not supported, GetLineStylesAttributes - Gets all the Revit Line Styles in the document and reports their Line Style Name, Weight and Colour as strings and integers, GetScheduleData - Gets all the table data from a given schedule as strings, GetScheduleDataColumns - Get the specified column data from a given schedule as strings\r\n\r\nColumn indexes start at 0, GetScheduleDataRows - Get the specified row data from a given schedule as strings\r\n\r\nSchedules have a blank row after the headings. Row indexes start at 0, GetSheetsFromSchedule - Collects and returns all Revit sheets from a Sheet List Schedule\r\n\r\nEnsure the Sheet Number field is included in the Schedule, RenumberOrRenameSheets - Renumber or rename Revit sheets with a list of strings. To renumber only, leave newNames input empty \r\n\r\nSheets and newNumbers items must have an equal count to run",
            "engine_metadata": "",
            "engine_version": "1.2.0.2690",
            "created": "2016-10-13T23:00:57.492Z",
            "full_dependency_versions": [ "1.4.0" ],
            "full_dependency_ids": [
              {
                "_id": "57fa8b79d3d589541a000048",
                "name": "bimorphNodes"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "1.4.0"
          },
          {
            "_id": "5800b23dd3d589541a00008e",
            "contains_binaries": true,
            "node_libraries": [ "Package.customization, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null" ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-prod/64b284a8-3497-498a-bdc3-fda1780ad935gregPkg253.zip",
            "contents": "CADLayerNames - Get the full list of layer names from a CAD Link or Import, CADLayersInUse - Get the list of layer names from a CAD link or import that are in use and contain curves, CreateNewLineStyles - Create single or multiple new Line Styles in a Revit document from name, line weight and RGB values, CurvesFromCADLayers - Extract curves from a CAD link or import by layer name. Curves are organised into layer sublists. To create Revit Model Lines set the createModelLines input to true\r\n\r\nThis node is also optimised to convert curve types that typically fail when using Revit.Elements.Element.Curves or Full Explode, DuplicateSheets - Duplicate selected sheets and any placed views with options to control if views are duplicated and the method of duplication\r\n\r\nViewSchedules and Legends are currently not supported, GetLineStylesAttributes - Gets all the Revit Line Styles in the document and reports their Line Style Name, Weight and Colour as strings and integers, GetScheduleData - Gets all the table data from a given schedule as strings, GetScheduleDataColumns - Get the specified column data from a given schedule as strings\r\n\r\nColumn indexes start at 0, GetScheduleDataRows - Get the specified row data from a given schedule as strings\r\n\r\nSchedules have a blank row after the headings. Row indexes start at 0, GetSheetsFromSchedule - Collects and returns all Revit sheets from a Sheet List Schedule\r\n\r\nEnsure the Sheet Number field is included in the Schedule, RenumberOrRenameSheets - Renumber or rename Revit sheets with a list of strings. To renumber only, leave newNames input empty \r\n\r\nSheets and newNumbers items must have an equal count to run",
            "engine_metadata": "",
            "engine_version": "1.0.0.1180",
            "created": "2016-10-14T10:23:57.974Z",
            "full_dependency_versions": [ "1.4.1" ],
            "full_dependency_ids": [
              {
                "_id": "57fa8b79d3d589541a000048",
                "name": "bimorphNodes"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "1.4.1"
          },
          {
            "_id": "580e1482f50b17c72000005b",
            "contains_binaries": true,
            "node_libraries": [ "Package.customization, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null" ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-prod/27729466-576f-42f4-bdc9-85cccc19f4f9gregPkg730.zip",
            "contents": "CADLayerNames - Get the full list of layer names from a CAD Link or Import, CADLayersInUse - Get the list of layer names from a CAD link or import that are in use and contain curves, CreateNewLineStyles - Create single or multiple new Line Styles in a Revit document from name, line weight and RGB values, CurvesFromCADLayers - Extract curves from a CAD link or import by layer name. Curves are organised into layer sublists. To create Revit Model Lines set the createModelLines input to true\r\n\r\nThis node is also optimised to convert curve types that typically fail when using Revit.Elements.Element.Curves or Full Explode, DuplicateSheets - Duplicate selected sheets and any placed views with options to control if views are duplicated and the method of duplication\r\n\r\nViewSchedules and Legends are currently not supported, GetLineStylesAttributes - Gets all the Revit Line Styles in the document and reports their Line Style Name, Weight and Colour as strings and integers, GetScheduleData - Gets all the table data from a given schedule as strings, GetScheduleDataColumns - Get the specified column data from a given schedule as strings\r\n\r\nColumn indexes start at 0, GetScheduleDataRows - Get the specified row data from a given schedule as strings\r\n\r\nSchedules have a blank row after the headings. Row indexes start at 0, GetSheetsFromSchedule - Collects and returns all Revit sheets from a Sheet List Schedule\r\n\r\nEnsure the Sheet Number field is included in the Schedule, RenumberOrRenameSheets - Renumber or rename Revit sheets with a list of strings. To renumber only, leave newNames input empty \r\n\r\nSheets and newNumbers items must have an equal count to run",
            "engine_metadata": "",
            "engine_version": "1.0.0.1180",
            "created": "2016-10-24T14:02:42.532Z",
            "full_dependency_versions": [ "1.4.2" ],
            "full_dependency_ids": [
              {
                "_id": "57fa8b79d3d589541a000048",
                "name": "bimorphNodes"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "1.4.2"
          },
          {
            "_id": "58456efbfdef23aa6e000075",
            "contains_binaries": true,
            "node_libraries": [ "Package.customization, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null" ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-prod/255e6922-f8a0-44c3-ac33-415ced04ec7dgregPkg336.zip",
            "contents": "bimorph.CADLayerNames - Get the full list of layer names from a CAD Link or Import, bimorph.CADLayersInUse - Get the list of layer names from a CAD link or import that are in use and contain curves, bimorph.CreateNewLineStyles - Create single or multiple new Line Styles in a Revit document from name, line weight and RGB values, bimorph.CurvesFromCADLayers - Extract curves from a CAD link or import by layer name. Curves are organised into layer sublists. To create Revit Model Lines set the createModelLines input to true\r\n\r\nThis node is also optimised to convert curve types that typically fail when using Revit.Elements.Element.Curves or Full Explode, bimorph.DuplicateSheets - Duplicate selected sheets and any placed views with options to control if views are duplicated and the method of duplication\r\n\r\nViewSchedules and Legends are currently not supported, bimorph.GetLineStylesAttributes - Gets all the Revit Line Styles in the document and reports their Line Style Name, Weight and Colour as strings and integers, bimorph.GetScheduleData - Gets all the table data from a given schedule as strings, bimorph.GetScheduleDataColumns - Get the specified column data from a given schedule as strings\r\n\r\nColumn indexes start at 0, bimorph.GetScheduleDataRows - Get the specified row data from a given schedule as strings\r\n\r\nSchedules have a blank row after the headings. Row indexes start at 0, bimorph.GetSheetsFromSchedule - Collects and returns all Revit sheets from a Sheet List Schedule\r\n\r\nEnsure the Sheet Number field is included in the Schedule, bimorph.RenumberOrRenameSheets - Renumber or rename Revit sheets with a list of strings. To renumber only, leave newNames input empty \r\n\r\nSheets and newNumbers items must have an equal count to run",
            "engine_metadata": "",
            "engine_version": "1.0.0.1180",
            "created": "2016-12-05T13:43:23.519Z",
            "full_dependency_versions": [ "1.4.3" ],
            "full_dependency_ids": [
              {
                "_id": "57fa8b79d3d589541a000048",
                "name": "bimorphNodes"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "1.4.3"
          },
          {
            "_id": "585badd9fdef23aa6e00017e",
            "contains_binaries": true,
            "node_libraries": [ "Package.customization, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null" ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-prod/d20868f3-4815-4cd6-b9ba-a958edf8833egregPkg333.zip",
            "contents": "bimorph.CADLayerNames - Get the full list of layer names from a CAD Link or Import, bimorph.CADLayersInUse - Get the list of layer names from a CAD link or import that are in use and contain curves, bimorph.CreateNewLineStyles - Create single or multiple new Line Styles in a Revit document from name, line weight and RGB values, bimorph.CurvesFromCADLayers - Extract curves from a CAD link or import by layer name. Curves are organised into layer sublists. To create Revit Model Lines set the createModelLines input to true\r\n\r\nThis node is also optimised to convert curve types that typically fail when using Revit.Elements.Element.Curves or Full Explode, bimorph.DuplicateSheets - Duplicate selected sheets and any placed views with options to control if views are duplicated and the method of duplication\r\n\r\nViewSchedules and Legends are currently not supported, bimorph.GetLineStylesAttributes - Gets all the Revit Line Styles in the document and reports their Line Style Name, Weight and Colour as strings and integers, bimorph.GetScheduleData - Gets all the table data from a given schedule as strings, bimorph.GetScheduleDataColumns - Get the specified column data from a given schedule as strings\r\n\r\nColumn indexes start at 0, bimorph.GetScheduleDataRows - Get the specified row data from a given schedule as strings\r\n\r\nSchedules have a blank row after the headings. Row indexes start at 0, bimorph.GetSheetsFromSchedule - Collects and returns all Revit sheets from a Sheet List Schedule\r\n\r\nEnsure the Sheet Number field is included in the Schedule, bimorph.RenumberOrRenameSheets - Renumber or rename Revit sheets with a list of strings. To renumber only, leave newNames input empty \r\n\r\nSheets and newNumbers items must have an equal count to run",
            "engine_metadata": "",
            "engine_version": "1.2.1.3083",
            "created": "2016-12-22T10:41:29.665Z",
            "full_dependency_versions": [ "1.4.4" ],
            "full_dependency_ids": [
              {
                "_id": "57fa8b79d3d589541a000048",
                "name": "bimorphNodes"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "1.4.4"
          },
          {
            "_id": "586c23ef75c961bb1e00001a",
            "contains_binaries": true,
            "node_libraries": [ "Package.customization, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null" ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-prod/12615747-6a18-4dc7-ab31-667d9a3042f8gregPkg56.zip",
            "contents": "bimorph.CADLayerNames - Get the full list of layer names from a CAD Link or Import, bimorph.CADLayersInUse - Get the list of layer names from a CAD link or import that are in use and contain curves, bimorph.CreateNewLineStyles - Create single or multiple new Line Styles in a Revit document from name, line weight and RGB values, bimorph.CurvesFromCADLayers - Extract curves from a CAD link or import by layer name. Curves are organised into layer sublists. To create Revit Model Lines set the createModelLines input to true\r\n\r\nThis node is also optimised to convert curve types that typically fail when using Revit.Elements.Element.Curves or Full Explode, bimorph.DuplicateSheets - Duplicate selected sheets and any placed views with options to control if views are duplicated and the method of duplication\r\n\r\nViewSchedules and Legends are currently not supported, bimorph.GetLineStylesAttributes - Gets all the Revit Line Styles in the document and reports their Line Style Name, Weight and Colour as strings and integers, bimorph.GetScheduleData - Gets all the table data from a given schedule as strings, bimorph.GetScheduleDataColumns - Get the specified column data from a given schedule as strings\r\n\r\nColumn indexes start at 0, bimorph.GetScheduleDataRows - Get the specified row data from a given schedule as strings\r\n\r\nSchedules have a blank row after the headings. Row indexes start at 0, bimorph.GetSheetsFromSchedule - Collects and returns all Revit sheets from a Sheet List Schedule\r\n\r\nEnsure the Sheet Number field is included in the Schedule, bimorph.RenumberOrRenameSheets - Renumber or rename Revit sheets with a list of strings. To renumber only, leave newNames input empty \r\n\r\nSheets and newNumbers items must have an equal count to run",
            "engine_metadata": "",
            "engine_version": "1.2.1.3083",
            "created": "2017-01-03T22:21:35.467Z",
            "full_dependency_versions": [ "1.5.0" ],
            "full_dependency_ids": [
              {
                "_id": "57fa8b79d3d589541a000048",
                "name": "bimorphNodes"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "1.5.0"
          },
          {
            "_id": "586cbb8675c961bb1e000024",
            "contains_binaries": true,
            "node_libraries": [ "Package.customization, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null" ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-prod/6d380871-4aa0-4cce-a032-91bb8a2fb3f2gregPkg329.zip",
            "contents": "bimorph.CADLayerNames - Get the full list of layer names from a CAD Link or Import, bimorph.CADLayersInUse - Get the list of layer names from a CAD link or import that are in use and contain curves, bimorph.CreateNewLineStyles - Create single or multiple new Line Styles in a Revit document from name, line weight and RGB values, bimorph.CurvesFromCADLayers - Extract curves from a CAD link or import by layer name. Curves are organised into layer sublists. To create Revit Model Lines set the createModelLines input to true\r\n\r\nThis node is also optimised to convert curve types that typically fail when using Revit.Elements.Element.Curves or Full Explode, bimorph.DuplicateSheets - Duplicate selected sheets and any placed views with options to control if views are duplicated and the method of duplication\r\n\r\nViewSchedules and Legends are currently not supported, bimorph.GetLineStylesAttributes - Gets all the Revit Line Styles in the document and reports their Line Style Name, Weight and Colour as strings and integers, bimorph.GetScheduleData - Gets all the table data from a given schedule as strings, bimorph.GetScheduleDataColumns - Get the specified column data from a given schedule as strings\r\n\r\nColumn indexes start at 0, bimorph.GetScheduleDataRows - Get the specified row data from a given schedule as strings\r\n\r\nSchedules have a blank row after the headings. Row indexes start at 0, bimorph.GetSheetsFromSchedule - Collects and returns all Revit sheets from a Sheet List Schedule\r\n\r\nEnsure the Sheet Number field is included in the Schedule, bimorph.RenumberOrRenameSheets - Renumber or rename Revit sheets with a list of strings. To renumber only, leave newNames input empty \r\n\r\nSheets and newNumbers items must have an equal count to run",
            "engine_metadata": "",
            "engine_version": "1.2.1.3083",
            "created": "2017-01-04T09:08:22.056Z",
            "full_dependency_versions": [ "1.5.1" ],
            "full_dependency_ids": [
              {
                "_id": "57fa8b79d3d589541a000048",
                "name": "bimorphNodes"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "1.5.1"
          },
          {
            "_id": "58b35b00f4db78ec01000050",
            "contains_binaries": true,
            "node_libraries": [ "BimorphNodes.customization, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "BimorphNodes, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-prod/d61bc664-c984-4698-8fdd-506a6a422e5dgregPkg831.zip",
            "contents": "bimorph.CADLayerNames - Get the full list of layer names from a CAD Link or Import, bimorph.CADLayersInUse - Get the list of layer names from a CAD link or import that are in use and contain curves, bimorph.CreateNewLineStyles - Create single or multiple new Line Styles in a Revit document from name, line weight and RGB values, bimorph.GetLineStylesAttributes - Gets all the Revit Line Styles in the document and reports their Line Style Name, Weight and Colour as strings and integers. The Revit GraphicsStyle (Category) element for each Line Style is also output., bimorph.GetScheduleData - Gets all the table data from a given schedule as strings, bimorph.GetScheduleDataColumns - Get the specified column data from a given schedule as strings\r\n\r\nColumn indexes start at 0, bimorph.GetScheduleDataRows - Get the specified row data from a given schedule as strings\r\n\r\nSchedules have a blank row after the headings. Row indexes start at 0, bimorph.RenumberRenameSheets - Renumber and/or rename Revit sheets. To renumber or rename only, leave the other input empty. Sheets and newNumbers list's must be equal in length to run.\r\n\r\nThe node uses an algorithm that handles common Revit sheet renumber warnings for more consistent results., bimorph.ReportCADLinks - Generates a report of all CAD links and imports in the document with key metrics. Linked and Imported CAD links are output into lists to aid with CAD link management., bimorph.SheetsFromSchedule - Collects and returns all Revit sheets from a Sheet List Schedule\r\n\r\nEnsure the Sheet Number field is included in the Schedule, SetCADObjectStyles - Set weight and colour of CAD link or import layers Object Styles. Enter the layers to set as strings. The layer names are case-sensitive. The line weight and colour lists are mapped to the layerNames list using longest lacing",
            "engine_metadata": "",
            "engine_version": "1.0.0.1180",
            "created": "2017-02-26T22:47:28.420Z",
            "full_dependency_versions": [ "2.0.0" ],
            "full_dependency_ids": [
              {
                "_id": "57fa8b79d3d589541a000048",
                "name": "bimorphNodes"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2.0.0"
          },
          {
            "_id": "58b82d53f4db78ec0100007a",
            "contains_binaries": true,
            "node_libraries": [ "BimorphNodes.customization, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "BimorphNodes, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-prod/ea5cc960-6ddc-4d0e-af65-80de819b3962gregPkg59.zip",
            "contents": "bimorph.CADLayerNames - Get the full list of layer names from a CAD Link or Import\r\n\r\nVisit bimorph.co.uk/bimorph-nodes for support, bimorph.CADLayersInUse - Get the list of layer names from a CAD link or import that are in use and contain curves\r\n\r\nVisit bimorph.co.uk/bimorph-nodes for support, bimorph.CreateNewLineStyles - Create single or multiple new Line Styles in a Revit document from name, line weight and RGB values\r\n\r\nVisit bimorph.co.uk/bimorph-nodes for support, bimorph.GetLineStylesAttributes - Gets all the Revit Line Styles in the document and reports their Line Style Name, Weight and Colour as strings and integers. The Revit GraphicsStyle (Category) element for each Line Style is also output.\r\n\r\nVisit bimorph.co.uk/bimorph-nodes for support, bimorph.GetScheduleData - Gets all the table data from a given schedule as strings\r\n\r\nVisit bimorph.co.uk/bimorph-nodes for support, bimorph.GetScheduleDataColumns - Get the specified column data from a given schedule as strings\r\n\r\nColumn indexes start at 0\r\n\r\nVisit bimorph.co.uk/bimorph-nodes for support, bimorph.GetScheduleDataRows - Get the specified row data from a given schedule as strings\r\n\r\nSchedules have a blank row after the headings. Row indexes start at 0\r\n\r\nVisit bimorph.co.uk/bimorph-nodes for support, bimorph.RenumberRenameSheets - Renumber and/or rename Revit sheets. To renumber or rename only, leave the other input empty. Sheets and newNumbers list's must be equal in length to run.\r\n\r\nThe node uses an algorithm that handles common Revit sheet renumber warnings for more consistent results.\r\n\r\nVisit bimorph.co.uk/bimorph-nodes for support, bimorph.ReportCADLinks - Generates a report of all CAD links and imports in the document with key metrics. Linked and Imported CAD links are output into lists to aid with CAD link management.\r\n\r\nVisit bimorph.co.uk/bimorph-nodes for support, bimorph.SheetsFromSchedule - Collects and returns all Revit sheets from a Sheet List Schedule\r\n\r\nEnsure the Sheet Number field is included in the Schedule. \r\n\r\nVisit bimorph.co.uk/bimorph-nodes for support, SetCADObjectStyles - Set weight and colour of CAD link or import layers Object Styles. Enter the layers to set as strings. The layer names are case-sensitive. The line weight and colour lists are mapped to the layerNames list using longest lacing\r\n\r\nVisit bimorph.co.uk/bimorph-nodes for support",
            "engine_metadata": "",
            "engine_version": "1.0.0.1180",
            "created": "2017-03-02T14:33:55.843Z",
            "full_dependency_versions": [ "2.0.1" ],
            "full_dependency_ids": [
              {
                "_id": "57fa8b79d3d589541a000048",
                "name": "bimorphNodes"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2.0.1"
          },
          {
            "_id": "58bdbf1ff4db78ec0100009a",
            "contains_binaries": true,
            "node_libraries": [ "BimorphNodes.customization, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "BimorphNodes, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-prod/7c460144-c765-4e14-8e10-f7d2ccb9a9f8gregPkg39.zip",
            "contents": "bimorph.CADLayerNames - Get the full list of layer names from a CAD Link or Import\r\n\r\nVisit bimorph.co.uk/bimorph-nodes for support, bimorph.CADLayersInUse - Get the list of layer names from a CAD link or import that are in use and contain curves\r\n\r\nVisit bimorph.co.uk/bimorph-nodes for support, bimorph.GetScheduleData - Gets all the table data from a given schedule as strings\r\n\r\nVisit bimorph.co.uk/bimorph-nodes for support, bimorph.GetScheduleDataColumns - Get the specified column data from a given schedule as strings\r\n\r\nColumn indexes start at 0\r\n\r\nVisit bimorph.co.uk/bimorph-nodes for support, bimorph.GetScheduleDataRows - Get the specified row data from a given schedule as strings\r\n\r\nSchedules have a blank row after the headings. Row indexes start at 0\r\n\r\nVisit bimorph.co.uk/bimorph-nodes for support, bimorph.LineStylesAttributes - Gets all the Revit Line Styles in the document and reports their Line Style Name, Weight and Colour as strings and integers. The Revit GraphicsStyle (Category) element for each Line Style is also output.\r\n\r\nVisit bimorph.co.uk/bimorph-nodes for support, bimorph.NewLineStyles - Create single or multiple new Line Styles in a Revit document from name, line weight and RGB values\r\n\r\nVisit bimorph.co.uk/bimorph-nodes for support, bimorph.RenumberRenameSheets - Renumber and/or rename Revit sheets. To renumber or rename only, leave the other input empty. Sheets and newNumbers list's must be equal in length to run.\r\n\r\nThe node uses an algorithm that handles common Revit sheet renumber warnings for more consistent results.\r\n\r\nVisit bimorph.co.uk/bimorph-nodes for support, bimorph.ReportCADLinks - Generates a report of all CAD links and imports in the document with key metrics. Linked and Imported CAD links are output into lists to aid with CAD link management.\r\n\r\nVisit bimorph.co.uk/bimorph-nodes for support, bimorph.SheetsFromSchedule - Collects and returns all Revit sheets from a Sheet List Schedule\r\n\r\nEnsure the Sheet Number field is included in the Schedule. \r\n\r\nVisit bimorph.co.uk/bimorph-nodes for support, SetCADObjectStyles - Set weight and colour of CAD link or import layers Object Styles. Enter the layers to set as strings. The layer names are case-sensitive. The line weight and colour lists are mapped to the layerNames list using longest lacing\r\n\r\nVisit bimorph.co.uk/bimorph-nodes for support",
            "engine_metadata": "",
            "engine_version": "1.0.0.1180",
            "created": "2017-03-06T19:57:19.672Z",
            "full_dependency_versions": [ "2.0.2" ],
            "full_dependency_ids": [
              {
                "_id": "57fa8b79d3d589541a000048",
                "name": "bimorphNodes"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2.0.2"
          },
          {
            "_id": "58bdd9e6f4db78ec0100009b",
            "contains_binaries": true,
            "node_libraries": [ "BimorphNodes.customization, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "BimorphNodes, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-prod/367424cb-23a2-478e-8344-5e8a212e89d5gregPkg704.zip",
            "contents": "bimorph.CADLayerNames - Get the full list of layer names from a CAD Link or Import\r\n\r\nVisit bimorph.co.uk/bimorph-nodes for support, bimorph.CADLayersInUse - Get the list of layer names from a CAD link or import that are in use and contain curves\r\n\r\nVisit bimorph.co.uk/bimorph-nodes for support, bimorph.GetScheduleData - Gets all the table data from a given schedule as strings\r\n\r\nVisit bimorph.co.uk/bimorph-nodes for support, bimorph.GetScheduleDataColumns - Get the specified column data from a given schedule as strings\r\n\r\nColumn indexes start at 0\r\n\r\nVisit bimorph.co.uk/bimorph-nodes for support, bimorph.GetScheduleDataRows - Get the specified row data from a given schedule as strings\r\n\r\nSchedules have a blank row after the headings. Row indexes start at 0\r\n\r\nVisit bimorph.co.uk/bimorph-nodes for support, bimorph.LineStylesAttributes - Gets all the Revit Line Styles in the document and reports their Line Style Name, Weight and Colour as strings and integers. The Revit GraphicsStyle (Category) element for each Line Style is also output.\r\n\r\nVisit bimorph.co.uk/bimorph-nodes for support, bimorph.NewLineStyles - Create single or multiple new Line Styles in a Revit document from name, line weight and RGB values\r\n\r\nVisit bimorph.co.uk/bimorph-nodes for support, bimorph.RenumberRenameSheets - Renumber and/or rename Revit sheets. To renumber or rename only, leave the other input empty. Sheets and newNumbers list's must be equal in length to run.\r\n\r\nThe node uses an algorithm that handles common Revit sheet renumber warnings for more consistent results.\r\n\r\nVisit bimorph.co.uk/bimorph-nodes for support, bimorph.ReportCADLinks - Generates a report of all CAD links and imports in the document with key metrics. Linked and Imported CAD links are output into lists to aid with CAD link management.\r\n\r\nVisit bimorph.co.uk/bimorph-nodes for support, bimorph.SheetsFromSchedule - Collects and returns all Revit sheets from a Sheet List Schedule\r\n\r\nEnsure the Sheet Number field is included in the Schedule. \r\n\r\nVisit bimorph.co.uk/bimorph-nodes for support, SetCADObjectStyles - Set weight and colour of CAD link or import layers Object Styles. Enter the layers to set as strings. The layer names are case-sensitive. The line weight and colour lists are mapped to the layerNames list using longest lacing\r\n\r\nVisit bimorph.co.uk/bimorph-nodes for support",
            "engine_metadata": "",
            "engine_version": "1.0.0.1180",
            "created": "2017-03-06T21:51:34.039Z",
            "full_dependency_versions": [ "2.0.3" ],
            "full_dependency_ids": [
              {
                "_id": "57fa8b79d3d589541a000048",
                "name": "bimorphNodes"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2.0.3"
          },
          {
            "_id": "58e13b40b529d0bb24000057",
            "contains_binaries": true,
            "node_libraries": [ "BimorphNodes.customization, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "BimorphNodes, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-prod/43e22943-fb4c-45f7-9f18-1e86055a92c0gregPkg235.zip",
            "contents": "bimorph.CADLayerNames - Get the full list of layer names from a CAD Link or Import\r\n\r\nVisit bimorph.co.uk/bimorph-nodes for support, bimorph.CADLayersInUse - Get the list of layer names from a CAD link or import that are in use and contain curves\r\n\r\nVisit bimorph.co.uk/bimorph-nodes for support, bimorph.GetScheduleData - Gets all the table data from a given schedule as strings\r\n\r\nVisit bimorph.co.uk/bimorph-nodes for support, bimorph.GetScheduleDataColumns - Get the specified column data from a given schedule as strings\r\n\r\nColumn indexes start at 0\r\n\r\nVisit bimorph.co.uk/bimorph-nodes for support, bimorph.GetScheduleDataRows - Get the specified row data from a given schedule as strings\r\n\r\nSchedules have a blank row after the headings. Row indexes start at 0\r\n\r\nVisit bimorph.co.uk/bimorph-nodes for support, bimorph.LineStylesAttributes - Gets all the Revit Line Styles in the document and reports their Line Style Name, Weight and Colour as strings and integers. The Revit GraphicsStyle (Category) element for each Line Style is also output.\r\n\r\nVisit bimorph.co.uk/bimorph-nodes for support, bimorph.NewLineStyles - Create single or multiple new Line Styles in a Revit document from name, line weight and RGB values\r\n\r\nVisit bimorph.co.uk/bimorph-nodes for support, bimorph.RenumberRenameSheets - Renumber and/or rename Revit sheets. To renumber or rename only, leave the other input empty. Sheets and newNumbers list's must be equal in length to run.\r\n\r\nThe node uses an algorithm that handles common Revit sheet renumber warnings for more consistent results.\r\n\r\nVisit bimorph.co.uk/bimorph-nodes for support, bimorph.ReportCADLinks - Generates a report of all CAD links and imports in the document with key metrics. Linked and Imported CAD links are output into lists to aid with CAD link management.\r\n\r\nVisit bimorph.co.uk/bimorph-nodes for support, bimorph.SheetsFromSchedule - Collects and returns all Revit sheets from a Sheet List Schedule\r\n\r\nEnsure the Sheet Number field is included in the Schedule. \r\n\r\nVisit bimorph.co.uk/bimorph-nodes for support, SetCADObjectStyles - Set weight and colour of CAD link or import layers Object Styles. Enter the layers to set as strings. The layer names are case-sensitive. The line weight and colour lists are mapped to the layerNames list using longest lacing\r\n\r\nVisit bimorph.co.uk/bimorph-nodes for support",
            "engine_metadata": "",
            "engine_version": "1.0.0.1180",
            "created": "2017-04-02T17:56:16.945Z",
            "full_dependency_versions": [ "2.0.4" ],
            "full_dependency_ids": [
              {
                "_id": "57fa8b79d3d589541a000048",
                "name": "bimorphNodes"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2.0.4"
          },
          {
            "_id": "58e378fbb529d0bb24000072",
            "contains_binaries": true,
            "node_libraries": [ "BimorphNodes.customization, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "BimorphNodes, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-prod/e28003fe-4319-4907-8fe3-d8d77ed1879egregPkg728.zip",
            "contents": "bimorph.CADLayerNames - Get the full list of layer names from a CAD Link or Import\r\n\r\nVisit bimorph.co.uk/bimorph-nodes for support, bimorph.CADLayersInUse - Get the list of layer names from a CAD link or import that are in use and contain curves\r\n\r\nVisit bimorph.co.uk/bimorph-nodes for support, bimorph.GetScheduleData - Gets all the table data from a given schedule as strings\r\n\r\nVisit bimorph.co.uk/bimorph-nodes for support, bimorph.GetScheduleDataColumns - Get the specified column data from a given schedule as strings\r\n\r\nColumn indexes start at 0\r\n\r\nVisit bimorph.co.uk/bimorph-nodes for support, bimorph.GetScheduleDataRows - Get the specified row data from a given schedule as strings\r\n\r\nSchedules have a blank row after the headings. Row indexes start at 0\r\n\r\nVisit bimorph.co.uk/bimorph-nodes for support, bimorph.LineStylesAttributes - Gets all the Revit Line Styles in the document and reports their Line Style Name, Weight and Colour as strings and integers. The Revit GraphicsStyle (Category) element for each Line Style is also output.\r\n\r\nVisit bimorph.co.uk/bimorph-nodes for support, bimorph.NewLineStyles - Create single or multiple new Line Styles in a Revit document from name, line weight and RGB values\r\n\r\nVisit bimorph.co.uk/bimorph-nodes for support, bimorph.RenumberRenameSheets - Renumber and/or rename Revit sheets. To renumber or rename only, leave the other input empty. Sheets and newNumbers list's must be equal in length to run.\r\n\r\nThe node uses an algorithm that handles common Revit sheet renumber warnings for more consistent results.\r\n\r\nVisit bimorph.co.uk/bimorph-nodes for support, bimorph.ReportCADLinks - Generates a report of all CAD links and imports in the document with key metrics. Linked and Imported CAD links are output into lists to aid with CAD link management.\r\n\r\nVisit bimorph.co.uk/bimorph-nodes for support, bimorph.SheetsFromSchedule - Collects and returns all Revit sheets from a Sheet List Schedule\r\n\r\nEnsure the Sheet Number field is included in the Schedule. \r\n\r\nVisit bimorph.co.uk/bimorph-nodes for support, SetCADObjectStyles - Set weight and colour of CAD link or import layers Object Styles. Enter the layers to set as strings. The layer names are case-sensitive. The line weight and colour lists are mapped to the layerNames list using longest lacing\r\n\r\nVisit bimorph.co.uk/bimorph-nodes for support",
            "engine_metadata": "",
            "engine_version": "1.2.1.3083",
            "created": "2017-04-04T10:44:11.437Z",
            "full_dependency_versions": [ "2.0.5" ],
            "full_dependency_ids": [
              {
                "_id": "57fa8b79d3d589541a000048",
                "name": "bimorphNodes"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2.0.5"
          },
          {
            "_id": "58ee8c9819da52d31a00000d",
            "contains_binaries": true,
            "node_libraries": [ "BimorphNodes.customization, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "BimorphNodes, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-prod/c60f2133-3656-4f14-a35c-651f74af1bb3gregPkg294.zip",
            "contents": "bimorph.CADLayerNames - Get the full list of layer names from a CAD Link or Import\r\n\r\nVisit bimorph.co.uk/bimorph-nodes for support, bimorph.CADLayersInUse - Get the list of layer names from a CAD link or import that are in use and contain curves\r\n\r\nVisit bimorph.co.uk/bimorph-nodes for support, bimorph.GetScheduleData - Gets all the table data from a given schedule as strings\r\n\r\nVisit bimorph.co.uk/bimorph-nodes for support, bimorph.GetScheduleDataColumns - Get the specified column data from a given schedule as strings\r\n\r\nColumn indexes start at 0\r\n\r\nVisit bimorph.co.uk/bimorph-nodes for support, bimorph.GetScheduleDataRows - Get the specified row data from a given schedule as strings\r\n\r\nSchedules have a blank row after the headings. Row indexes start at 0\r\n\r\nVisit bimorph.co.uk/bimorph-nodes for support, bimorph.LineStylesAttributes - Gets all the Revit Line Styles in the document and reports their Line Style Name, Weight and Colour as strings and integers. The Revit GraphicsStyle (Category) element for each Line Style is also output.\r\n\r\nVisit bimorph.co.uk/bimorph-nodes for support, bimorph.NewLineStyles - Create single or multiple new Line Styles in a Revit document from name, line weight and RGB values\r\n\r\nVisit bimorph.co.uk/bimorph-nodes for support, bimorph.RenumberRenameSheets - Renumber and/or rename Revit sheets. To renumber or rename only, leave the other input empty. Sheets and newNumbers list's must be equal in length to run.\r\n\r\nThe node uses an algorithm that handles common Revit sheet renumber warnings for more consistent results.\r\n\r\nVisit bimorph.co.uk/bimorph-nodes for support, bimorph.ReportCADLinks - Generates a report of all CAD links and imports in the document with key metrics. Linked and Imported CAD links are output into lists to aid with CAD link management.\r\n\r\nVisit bimorph.co.uk/bimorph-nodes for support, bimorph.SheetsFromSchedule - Collects and returns all Revit sheets from a Sheet List Schedule\r\n\r\nEnsure the Sheet Number field is included in the Schedule. \r\n\r\nVisit bimorph.co.uk/bimorph-nodes for support, SetCADObjectStyles - Set weight and colour of CAD link or import layers Object Styles. Enter the layers to set as strings. The layer names are case-sensitive. The line weight and colour lists are mapped to the layerNames list using longest lacing\r\n\r\nVisit bimorph.co.uk/bimorph-nodes for support",
            "engine_metadata": "",
            "engine_version": "1.3.0.875",
            "created": "2017-04-12T20:22:48.389Z",
            "full_dependency_versions": [ "2.0.6" ],
            "full_dependency_ids": [
              {
                "_id": "57fa8b79d3d589541a000048",
                "name": "bimorphNodes"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2.0.6"
          },
          {
            "_id": "58ee9ab119da52d31a00000e",
            "contains_binaries": true,
            "node_libraries": [ "BimorphNodes.customization, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "BimorphNodes, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-prod/eeafab60-36f1-49b8-88bd-9ee4482bc26egregPkg514.zip",
            "contents": "bimorph.CADLayerNames - Get the full list of layer names from a CAD Link or Import\r\n\r\nVisit bimorph.co.uk/bimorph-nodes for support, bimorph.CADLayersInUse - Get the list of layer names from a CAD link or import that are in use and contain curves\r\n\r\nVisit bimorph.co.uk/bimorph-nodes for support, bimorph.GetScheduleData - Gets all the table data from a given schedule as strings\r\n\r\nVisit bimorph.co.uk/bimorph-nodes for support, bimorph.GetScheduleDataColumns - Get the specified column data from a given schedule as strings\r\n\r\nColumn indexes start at 0\r\n\r\nVisit bimorph.co.uk/bimorph-nodes for support, bimorph.GetScheduleDataRows - Get the specified row data from a given schedule as strings\r\n\r\nSchedules have a blank row after the headings. Row indexes start at 0\r\n\r\nVisit bimorph.co.uk/bimorph-nodes for support, bimorph.LineStylesAttributes - Gets all the Revit Line Styles in the document and reports their Line Style Name, Weight and Colour as strings and integers. The Revit GraphicsStyle (Category) element for each Line Style is also output.\r\n\r\nVisit bimorph.co.uk/bimorph-nodes for support, bimorph.NewLineStyles - Create single or multiple new Line Styles in a Revit document from name, line weight and RGB values\r\n\r\nVisit bimorph.co.uk/bimorph-nodes for support, bimorph.RenumberRenameSheets - Renumber and/or rename Revit sheets. To renumber or rename only, leave the other input empty. Sheets and newNumbers list's must be equal in length to run.\r\n\r\nThe node uses an algorithm that handles common Revit sheet renumber warnings for more consistent results.\r\n\r\nVisit bimorph.co.uk/bimorph-nodes for support, bimorph.ReportCADLinks - Generates a report of all CAD links and imports in the document with key metrics. Linked and Imported CAD links are output into lists to aid with CAD link management.\r\n\r\nVisit bimorph.co.uk/bimorph-nodes for support, bimorph.SheetsFromSchedule - Collects and returns all Revit sheets from a Sheet List Schedule\r\n\r\nEnsure the Sheet Number field is included in the Schedule. \r\n\r\nVisit bimorph.co.uk/bimorph-nodes for support, SetCADObjectStyles - Set weight and colour of CAD link or import layers Object Styles. Enter the layers to set as strings. The layer names are case-sensitive. The line weight and colour lists are mapped to the layerNames list using longest lacing\r\n\r\nVisit bimorph.co.uk/bimorph-nodes for support",
            "engine_metadata": "",
            "engine_version": "1.3.0.875",
            "created": "2017-04-12T21:22:57.705Z",
            "full_dependency_versions": [ "2.0.7" ],
            "full_dependency_ids": [
              {
                "_id": "57fa8b79d3d589541a000048",
                "name": "bimorphNodes"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2.0.7"
          }
        ],
        "latest_version_update": "2017-04-12T21:22:57.705Z",
        "num_versions": 22,
        "comments": [ ],
        "num_comments": 0,
        "latest_comment": "1970-01-01T00:00:00.000Z",
        "votes": -2,
        "downloads": 1787,
        "repository_url": "https://github.com/ThomasMahon/bimorphNodes",
        "site_url": "www.bimorph.co.uk",
        "banned": false,
        "deprecated": false,
        "group": "",
        "engine": "dynamo",
        "license": "",
        "used_by": [ ],
        "num_dependents": 0,
        "description": "BimorphNodes are a collection of powerful utility nodes that extend Dynamo for Revit.\r\n\r\nThis is the first set of nodes in Dynamo for Revit capable of converting curves from CAD links or imports using Layer Names as filters. Converted cures are organised into sublists based on their layer. The node can be used to convert the sets of curves into Revit Model Lines without introducing unwanted CAD LineStyles into your project. For enhanced workflows, each set of curves can be mapped to a LineStyle of your choice using the lineStyleMap input. The node also circumvents the 10,000 Revit element limit for even greater flexibility.\r\n\r\nIf Revit Detail Lines are needed from a CAD link, there is the DetailLinesFromCADLayers node which provides the same level of functionality to suit detailing workflows.\r\n\r\nBoth of these nodes are optimised to convert more curve types than is currently possible with Explode in Revit or Revit.Elements.Element.Curves in Dynamo. Compatible with DWG or DGN Links and Imports.\r\n\r\nAnother first, introduced in v2.0 of BimorphNodes, is the ability to remove duplicate curves using the RemoveDuplicateCurves node. It works on Dynamo curves or Revit Model or Detail curves. Revit curves have optional inputs to deleted duplicates from the document with the ability to select which curves are preserved based on their LineStyle. \r\n\r\nThe package includes nodes to: \r\n- Extract curves from CAD Links or Imports using layer names as filters\r\n- Extract Detail Lines from CAD Links or Imports using layer names as filters\r\n- Remove duplicate curves\r\n- Query layers in CAD Links or Imports\r\n- Report all CAD Links and Imports in a Revit or Family document\r\n- Set the colour and line weight of CAD (layer) Object Styles\r\n- Duplicate Sheets and placed Views \r\n- Renumber and/or rename Sheets \r\n- Extract table data from Schedules \r\n- Create and query LineStyles\r\n\r\nVisit bimorph.co.uk/bimorph-nodes for instructions on how to use bimorphNodes and downlaodable example graphs.\r\n\r\nIf you want to be the first to hear about the latest news and upcoming releases of bimorphNodes, you can follow us here:\r\n\r\nFacebook:  facebook.com/bimorphBIM\r\nLinkedin:  linkedin.com/company/bimorph-bim\r\nTwitter:  @bimorphBIM\r\n\r\nCompatible with Revit 2015+ and Dynamo v1.0+. Get in touch with us to report bugs or suggest improvements or new features at: @thomas__mahon, github.com/ThomasMahon/bimorphNodes or bimorph.co.uk/bimorph-nodes",
        "maintainers": [
          {
            "_id": "57e448e12107b80223000040",
            "username": "thomas@bimorphBIM"
          }
        ],
        "keywords": [ "bimorphnodes", "bimorph", "bi", "bim", "nodes", "cad", "layer", "names", "curves", "filter", "dgn", "dwg", "layers", "duplicate", "sheets", "views", "line", "styles", "new", "linestyles", "spring", "attributes", "category", "categories", "lunchbox", "get", "schedule", "table", "work", "data", "column", "row", "lab", "sheet", "list", "lunch", "renumber", "rename", "re-number", "re-name", "importinstance", "import", "instance", "link", "clock", "model", "lines", "use", "modellines", "delete", "report", "object", "box", "style", "set", "thomas", "mahon", "remove", "detail", "dynamo", "re", "name", "number", "audit", "links", "imports" ],
        "created": "2016-10-09T18:24:57.551Z"
      },
      {

        "_id": "56077cf3662bf0e9080001ea",
        "__v": 77,
        "name": "spring nodes",
        "white_list": false,
        "versions": [
          {
            "_id": "56077cf3662bf0e9080001eb",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/cb934edf-0cd2-494c-899b-112c1eb9d179gregPkg893.zip",
            "contents": "Dictionary.ByKeysValues - Dictionaries are an incredibly powerful tool for making associative sets between two equal length lists. The fitst list must be of unique strings (or numbers) and will be the key and the second list will be the matching values (it can be made up of geometry, elements, even other lists)\r\nThe search keys list will provide the coresponding value to the input key., List.DropLast - Removes the last value of the list., List.GetEven - Gets even indices from the list., Filter.ByClassName - Filters a list of objects by the object's class name. Note that Dynamo elements belong to different classes than their Revit counterparts. Use the Object.Class node to check an object's class., List.GetOdd - Gets the odd indices from the list., Math.AlmostEqual - Checks if a number is almost equal to a value with a specified tollerance., Number.ToString - Converts the input number(s) to string. Can process lists., List.DropFirstLast - Removes the first and last items from the list, File.Size - Checks the file size. Provide a file path as a string., Fn.ElementsOfCategory - Same as the built in \"All Elements of Category\" but can act as a function object., NullIndexOf - Similar to the bult-in node but provides a null value instead of -1 of failure. Part of the SmartCopyMonitor workflow., NullReorder - Simiar to the built-in function with the difference that it can handle null indices. Part of the SmartCopyMonitor workflow., NullSetDifference - Similar to the built in node, with a built-in safety for null values. Part of the SmartCopyMonitor workflow., Object.Class - Gets the input object's class name. Can process lists., List.ShiftIndices+ - The built in node fails if the shift number is greater than the lenght of the list. This node acts as a work-around., Ln2Str - Serilize a geometry line to a string for use in Revit parameters, Pt2Str - Serilize a geometry point to a string for use in Revit parameters, Str2Ln - De-serilize a Revit parameter string into a geometric line., Str2Pt - De-serilize a Revit parameter string into a geometric point., Star.ByCenterRadiusRays - Fun little node to create star shapes., Input.Wait - Waits for all inputs to be completed before continuing the execution process.Part of the SmartCopyMon workflow., Collector.ElementsInView - Selects all elements visible in the input view., Collector.FamilyInstances - Collects placed family instance elements from the document that match the name. Partially mathing elements are collected as well. If no matches are found, a list of all isntance names will be output., Collector.FamilyTypes - Collects non-system family types that fully match or partially match the provided names. If no matches are found, a list of all type names will be output., Collector.Revisions - Collects all revisions from a specific date., Collector.Sheets - Search for sheets by either their name or their number. Use a false boolean switch to search by number., Geometry.SplitRecursively - Splits a surface or a solid recursively, using the resulting reduced geometry for every next split., List.Randomise&Divide - Shiffles the input list and divides it into sub-lists based on ratios(1/4 + 1/2 + 1/4 will give you three lists split accordingly) The smalest ratio will always be 1 / the list length and the largest ratio will be 1. A seed input can shuffle the list further., NullAllIndicesOf - list all of the indices of a list that match the specified value. Capable of handling null values, part of the SmartCopyMonitor workflow., Collector.Views - Search for views based on naming. You can choose to either include or exclude schedules. Use the sheet collector for sheets., Doc.DeleteElements - Attempts to delete the input revit elements and returns the number of successfully deleted elements. Carefully observe the deleted elements count. It may be greater than the input list because hosted elements or tags will be deleted as well., DirectShape.ByGeometry - Attempts to create a DirectShape element inside the Revit document. It is based on an alternative process that uses a SAT inport and can produce smooth surfaces., HostedInstanceByPoints - Creates hosted family instances(doors/windows) at the specified points. You can feed either a single family type or a unique type for each instance., Form.ByGeometry - Attempts to convert the input geometry to a Revit Form object. Warning - use method this only in the family environment. Can convert complicated solids or surfaces directly into forms., Collector.FloorTypes - Collects Floor types by name., FamilyType.Duplicate - Create duplicate family types with the specified name. If the type exists, it is called., FloorType.Duplicate - Attemts to create duplicate floor types. If the floor type exists, it is appended to the end. Sets only the structural width of the floor. The width must be in feet., Floor-WallType.SetMaterial - Sets a new material to the structural core of the provided floor and wall types., Wall.WallType - Queries the wall type of the input wall. Works for types from linked documents as well., WallType.Duplicate - Attemts to create duplicate wall types. If the wall type exists, it is appended to the end. Sets only the structural width of the wall. The width must be in feet., NullSetParameter - Similar to the built-in function but with the ability to handle null values. Part of the SmartCopyMon workflow., Collector.WallTypes - Collects wall types by name., FloorOpening.ByCurves - Create hosted floor opeinngs through the input floors. The second input is a list of sub-lists of the boundary curves., Shaft.ByCurves - Creates a shaft opening. The top level MUST be higher than the base level for a successful execution. You can either provide one base and top level for all shafts or have unique levels for each shaft instance., NullGetParameter - Similar to the built in node.Capable of handling null values, part of the SmartCopyMonitor workflow., Beams.FixExtents - Detects all beams from the input list with broken extents(actual length - cut length <  margin) and attemts to correct them., Lines.Group&FixCorners - Groups unconnected lines into sub-lists by margin(the maximum distance between endpoints) and attempts to create clean corner connections between them. Built on top of the Group curves node found in archi-lab.net., Topography.ToPolySurface - Optimized algorithm for converting topographies into polysurfaces. Tested with topographies containing up to 40 000 points. \r\nWarning conversions of such mangitudes consume a lot of resources and are sub-optimal. Ensure that you have plenty at least 8GB of ram and patience before attempting such a conversion, otherwise your Dynamo and Revit instances may crash., Element.SetLocation - Attempts to modify the location of the input element. This can effectively add as a move comand in Revit. Works for both line based and point based elements., Filter.ByCategoryName - Filters the input elements by their category name. You can input multiple category names., SelectInRevit - Selects the input elements in Revit. Works with Revit 2016., Collector.CurrentSelection - Gets the currently selected elements. Connect a boolean switch to refresh the selection., Active View - Selects the current document's active view. Supports more view types, Sheet.Views+ - Extracts all views placed on the input sheet(s).  Will be depreciated once the bult in node works with all plan types., ViewSet.ByViewsName - Creates a set of views(or sheets) for printing. If the set exists, set Overwrite to true to replace it., Collector.LinkedInstanceElements - Extract elements by category from the selected linked instances. The transform vector can be used to get the exact location of the elements in the local file",
            "engine_metadata": "",
            "engine_version": "0.8.2.2392",
            "created": "2015-09-27T05:21:55.183Z",
            "full_dependency_versions": [ "0.1.0" ],
            "full_dependency_ids": [
              {
                "_id": "56077cf3662bf0e9080001ea",
                "name": "spring nodes"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "0.1.0"
          },
          {
            "_id": "5607bd4c662bf0e9080001ec",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/a9770359-7abe-4165-81d9-69a874e8871fgregPkg293.zip",
            "contents": "Active View - Selects the current document's active view. Supports more view types, Beams.FixExtents - Detects all beams from the input list with broken extents(actual length - cut length <  margin) and attemts to correct them., Collector.CurrentSelection - Gets the currently selected elements. Connect a boolean switch to refresh the selection. Compatible with Revit 2016, Collector.ElementsInView - Selects all elements visible in the input view., Collector.FamilyInstances - Collects placed family instance elements from the document that match the name. Partially mathing elements are collected as well. If no matches are found, a list of all isntance names will be output., Collector.FamilyTypes - Collects non-system family types that fully match or partially match the provided names. If no matches are found, a list of all type names will be output., Collector.FloorTypes - Collects Floor types by name., Collector.LinkedInstanceElements - Extract elements by category from the selected linked instances. The transform vector can be used to get the exact location of the elements in the local file, Collector.Revisions - Collects all revisions from a specific date., Collector.Sheets - Search for sheets by either their name or their number. Use a false boolean switch to search by number., Collector.Views - Search for views based on naming. You can choose to either include or exclude schedules. Use the sheet collector for sheets., Collector.WallTypes - Collects wall types by name., Dictionary.ByKeysValues - Dictionaries are an incredibly powerful tool for making associative sets between two equal length lists. The fitst list must be of unique strings (or numbers) and will be the key and the second list will be the matching values (it can be made up of geometry, elements, even other lists)\r\nThe search keys list will provide the coresponding value to the input key., DirectShape.ByGeometry - Attempts to create a DirectShape element inside the Revit document. It is based on an alternative process that uses a SAT inport and can produce smooth surfaces., Doc.DeleteElements - Attempts to delete the input revit elements and returns the number of successfully deleted elements. Carefully observe the deleted elements count. It may be greater than the input list because hosted elements or tags will be deleted as well., Element.SetLocation - Attempts to modify the location of the input element. This can effectively add as a move comand in Revit. Works for both line based and point based elements., FamilyType.Duplicate - Create duplicate family types with the specified name. If the type exists, it is called., File.Size - Checks the file size. Provide a file path as a string., Filter.ByCategoryName - Filters the input elements by their category name. You can input multiple category names., Filter.ByClassName - Filters a list of objects by the object's class name. Note that Dynamo elements belong to different classes than their Revit counterparts. Use the Object.Class node to check an object's class., Floor-WallType.SetMaterial - Sets a new material to the structural core of the provided floor and wall types., FloorOpening.ByCurves - Create hosted floor opeinngs through the input floors. The second input is a list of sub-lists of the boundary curves., FloorType.Duplicate - Attemts to create duplicate floor types. If the floor type exists, it is appended to the end. Sets only the structural width of the floor. The width must be in feet., Fn.ElementsOfCategory - Same as the built in \"All Elements of Category\" but can act as a function object., Form.ByGeometry - Attempts to convert the input geometry to a Revit Form object. Warning - use method this only in the family environment. Can convert complicated solids or surfaces directly into forms., Geometry.SplitRecursively - Splits a surface or a solid recursively, using the resulting reduced geometry for every next split., HostedInstanceByPoints - Creates hosted family instances(doors/windows) at the specified points. You can feed either a single family type or a unique type for each instance., Input.Wait - Waits for all inputs to be completed before continuing the execution process.Part of the SmartCopyMon workflow., Lines.Group&FixCorners - Groups unconnected lines into sub-lists by margin(the maximum distance between endpoints) and attempts to create clean corner connections between them. Built on top of the Group curves node found in archi-lab.net., List.DropFirstLast - Removes the first and last items from the list, List.DropLast - Removes the last value of the list., List.GetEven - Gets even indices from the list., List.GetOdd - Gets the odd indices from the list., List.Randomise&Divide - Shiffles the input list and divides it into sub-lists based on ratios(1/4 + 1/2 + 1/4 will give you three lists split accordingly) The smalest ratio will always be 1 / the list length and the largest ratio will be 1. A seed input can shuffle the list further., List.ShiftIndices+ - The built in node fails if the shift number is greater than the lenght of the list. This node acts as a work-around., Ln2Str - Serilize a geometry line to a string for use in Revit parameters, Math.AlmostEqual - Checks if a number is almost equal to a value with a specified tollerance., NullAllIndicesOf - list all of the indices of a list that match the specified value. Capable of handling null values, part of the SmartCopyMonitor workflow., NullGetParameter - Similar to the built in node.Capable of handling null values, part of the SmartCopyMonitor workflow., NullIndexOf - Similar to the bult-in node but provides a null value instead of -1 of failure. Part of the SmartCopyMonitor workflow., NullReorder - Simiar to the built-in function with the difference that it can handle null indices. Part of the SmartCopyMonitor workflow., NullSetDifference - Similar to the built in node, with a built-in safety for null values. Part of the SmartCopyMonitor workflow., NullSetParameter - Similar to the built-in function but with the ability to handle null values. Part of the SmartCopyMon workflow., Number.ToString - Converts the input number(s) to string. Can process lists., Object.Class - Gets the input object's class name. Can process lists., Pt2Str - Serilize a geometry point to a string for use in Revit parameters, SelectInRevit - Selects the input elements in Revit. Works with Revit 2016., Shaft.ByCurves - Creates a shaft opening. The top level MUST be higher than the base level for a successful execution. You can either provide one base and top level for all shafts or have unique levels for each shaft instance., Sheet.Views+ - Extracts all views placed on the input sheet(s).  Will be depreciated once the bult in node works with all plan types., Star.ByCenterRadiusRays - Fun little node to create star shapes., Str2Ln - De-serilize a Revit parameter string into a geometric line., Str2Pt - De-serilize a Revit parameter string into a geometric point., Topography.ToPolySurface - Optimized algorithm for converting topographies into polysurfaces. Tested with topographies containing up to 40 000 points. \r\nWarning conversions of such mangitudes consume a lot of resources and are sub-optimal. Ensure that you have plenty at least 8GB of ram and patience before attempting such a conversion, otherwise your Dynamo and Revit instances may crash., ViewSet.ByViewsName - Creates a set of views(or sheets) for printing. If the set exists, set Overwrite to true to replace it., Wall.WallType - Queries the wall type of the input wall. Works for types from linked documents as well., WallType.Duplicate - Attemts to create duplicate wall types. If the wall type exists, it is appended to the end. Sets only the structural width of the wall. The width must be in feet.",
            "engine_metadata": "",
            "engine_version": "0.8.2.2392",
            "created": "2015-09-27T09:56:28.638Z",
            "full_dependency_versions": [ "82.1.1" ],
            "full_dependency_ids": [
              {
                "_id": "56077cf3662bf0e9080001ea",
                "name": "spring nodes"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "82.1.1"
          },
          {
            "_id": "5607f991662bf0e9080001ee",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/ac9c14a7-8c25-488e-82cb-1ae4e6c67e31gregPkg18.zip",
            "contents": "Active View - Selects the current document's active view. Supports more view types, Beams.FixExtents - Detects all beams from the input list with broken extents(actual length - cut length <  margin) and attemts to correct them., Collector.CurrentSelection - Gets the currently selected elements. Connect a boolean switch to refresh the selection. Compatible with Revit 2016, Collector.ElementsInView - Selects all elements visible in the input view., Collector.FamilyInstances - Collects placed family instance elements from the document that match the name. Partially mathing elements are collected as well. If no matches are found, a list of all isntance names will be output., Collector.FamilyTypes - Collects non-system family types that fully match or partially match the provided names. If no matches are found, a list of all type names will be output., Collector.FloorTypes - Collects Floor types by name., Collector.LinkedInstanceElements - Extract elements by category from the selected linked instances. The transform vector can be used to get the exact location of the elements in the local file, Collector.Revisions - Collects all revisions from a specific date., Collector.Sheets - Search for sheets by either their name or their number. Use a false boolean switch to search by number., Collector.Views - Search for views based on naming. You can choose to either include or exclude schedules. Use the sheet collector for sheets., Collector.WallTypes - Collects wall types by name., Dictionary.ByKeysValues - Dictionaries are an incredibly powerful tool for making associative sets between two equal length lists. The fitst list must be of unique strings (or numbers) and will be the key and the second list will be the matching values (it can be made up of geometry, elements, even other lists)\r\nThe search keys list will provide the coresponding value to the input key., DirectShape.ByGeometry - Attempts to create a DirectShape element inside the Revit document. It is based on an alternative process that uses a SAT inport and can produce smooth surfaces., Doc.DeleteElements - Attempts to delete the input revit elements and returns the number of successfully deleted elements. Carefully observe the deleted elements count. It may be greater than the input list because hosted elements or tags will be deleted as well., Element.SetLocation - Attempts to modify the location of the input element. This can effectively add as a move comand in Revit. Works for both line based and point based elements., FamilyType.Duplicate - Create duplicate family types with the specified name. If the type exists, it is called., File.Size - Checks the file size. Provide a file path as a string., Filter.ByCategoryName - Filters the input elements by their category name. You can input multiple category names., Filter.ByClassName - Filters a list of objects by the object's class name. Note that Dynamo elements belong to different classes than their Revit counterparts. Use the Object.Class node to check an object's class., Floor-WallType.SetMaterial - Sets a new material to the structural core of the provided floor and wall types., FloorOpening.ByCurves - Create hosted floor opeinngs through the input floors. The second input is a list of sub-lists of the boundary curves., FloorType.Duplicate - Attemts to create duplicate floor types. If the floor type exists, it is appended to the end. Sets only the structural width of the floor. The width must be in feet., Fn.ElementsOfCategory - Same as the built in \"All Elements of Category\" but can act as a function object., Form.ByGeometry - Attempts to convert the input geometry to a Revit Form object. Warning - use method this only in the family environment. Can convert complicated solids or surfaces directly into forms., Geometry.SplitRecursively - Splits a surface or a solid recursively, using the resulting reduced geometry for every next split., HostedInstanceByPoints - Creates hosted family instances(doors/windows) at the specified points. You can feed either a single family type or a unique type for each instance., Input.Wait - Waits for all inputs to be completed before continuing the execution process.Part of the SmartCopyMon workflow., Lines.Group&FixCorners - Groups unconnected lines into sub-lists by margin(the maximum distance between endpoints) and attempts to create clean corner connections between them. Built on top of the Group curves node found in archi-lab.net., List.DropFirstLast - Removes the first and last items from the list, List.DropLast - Removes the last value of the list., List.GetEven - Gets even indices from the list., List.GetOdd - Gets the odd indices from the list., List.Randomise&Divide - Shiffles the input list and divides it into sub-lists based on ratios(1/4 + 1/2 + 1/4 will give you three lists split accordingly) The smalest ratio will always be 1 / the list length and the largest ratio will be 1. A seed input can shuffle the list further., List.ShiftIndices+ - The built in node fails if the shift number is greater than the lenght of the list. This node acts as a work-around., Ln2Str - Serilize a geometry line to a string for use in Revit parameters, Math.AlmostEqual - Checks if a number is almost equal to a value with a specified tollerance., NullAllIndicesOf - list all of the indices of a list that match the specified value. Capable of handling null values, part of the SmartCopyMonitor workflow., NullGetParameter - Similar to the built in node.Capable of handling null values, part of the SmartCopyMonitor workflow., NullIndexOf - Similar to the bult-in node but provides a null value instead of -1 of failure. Part of the SmartCopyMonitor workflow., NullReorder - Simiar to the built-in function with the difference that it can handle null indices. Part of the SmartCopyMonitor workflow., NullSetDifference - Similar to the built in node, with a built-in safety for null values. Part of the SmartCopyMonitor workflow., NullSetParameter - Similar to the built-in function but with the ability to handle null values. Part of the SmartCopyMon workflow., Number.ToString - Converts the input number(s) to string. Can process lists., Object.Class - Gets the input object's class name. Can process lists., Pt2Str - Serilize a geometry point to a string for use in Revit parameters, SelectInRevit - Selects the input elements in Revit. Works with Revit 2016., Shaft.ByCurves - Creates a shaft opening. The top level MUST be higher than the base level for a successful execution. You can either provide one base and top level for all shafts or have unique levels for each shaft instance., Sheet.Views+ - Extracts all views placed on the input sheet(s).  Will be depreciated once the bult in node works with all plan types., Star.ByCenterRadiusRays - Fun little node to create star shapes., Str2Ln - De-serilize a Revit parameter string into a geometric line., Str2Pt - De-serilize a Revit parameter string into a geometric point., Topography.ToPolySurface - Optimized algorithm for converting topographies into polysurfaces. Tested with topographies containing up to 40 000 points. \r\nWarning conversions of such mangitudes consume a lot of resources and are sub-optimal. Ensure that you have plenty at least 8GB of ram and patience before attempting such a conversion, otherwise your Dynamo and Revit instances may crash., ViewSet.ByViewsName - Creates a set of views(or sheets) for printing. If the set exists, set Overwrite to true to replace it., Wall.WallType - Queries the wall type of the input wall. Works for types from linked documents as well., WallType.Duplicate - Attemts to create duplicate wall types. If the wall type exists, it is appended to the end. Sets only the structural width of the wall. The width must be in feet.",
            "engine_metadata": "",
            "engine_version": "0.8.3.2670",
            "created": "2015-09-27T14:13:37.891Z",
            "full_dependency_versions": [ "82.1.2" ],
            "full_dependency_ids": [
              {
                "_id": "56077cf3662bf0e9080001ea",
                "name": "spring nodes"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "82.1.2"
          },
          {
            "_id": "56096e90662bf0e9080001f5",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/d92d41e2-e0c2-4451-b123-753862628fc1gregPkg689.zip",
            "contents": "Active View - Selects the current document's active view. Supports more view types, Beams.FixExtents - Detects all beams from the input list with broken extents(actual length - cut length <  margin) and attemts to correct them., Collector.CurrentSelection - Gets the currently selected elements. Connect a boolean switch to refresh the selection. Compatible with Revit 2016, Collector.ElementsInView - Selects all elements visible in the input view., Collector.FamilyInstances - Collects placed family instance elements from the document that match the name. Partially mathing elements are collected as well. If no matches are found, a list of all isntance names will be output., Collector.FamilyTypes - Collects non-system family types that fully match or partially match the provided names. If no matches are found, a list of all type names will be output., Collector.FloorTypes - Collects Floor types by name., Collector.LinkedInstanceElements - Extract elements by category from the selected linked instances. The transform vector can be used to get the exact location of the elements in the local file, Collector.Revisions - Collects all revisions from a specific date., Collector.Sheets - Search for sheets by either their name or their number. Use a false boolean switch to search by number., Collector.Views - Search for views based on naming. You can choose to either include or exclude schedules. Use the sheet collector for sheets., Collector.WallTypes - Collects wall types by name., Dictionary.ByKeysValues - Dictionaries are an incredibly powerful tool for making associative sets between two equal length lists. The fitst list must be of unique strings (or numbers) and will be the key and the second list will be the matching values (it can be made up of geometry, elements, even other lists)\r\nThe search keys list will provide the coresponding value to the input key., DirectShape.ByGeometry - Attempts to create a DirectShape element inside the Revit document.  It is based on an alternative process that uses a SAT inport and can produce smooth surfaces. Each created DS will have a unique type. Make sure that each input geometry has a unique name. You can either feed a single category for all geometries or a unique category for each geometry., DirectShape.Transform - Copy the input DirectShape element with the help of a translation vector, similarly to the Geometry.Translate node. This method should prove much faster than Element.Copy, Doc.DeleteElements - Attempts to delete the input revit elements and returns the number of successfully deleted elements. Carefully observe the deleted elements count. It may be greater than the input list because hosted elements or tags will be deleted as well., Element.Copy - Copy the input Revit elements with the help of a translation vector, similarly to the Geometry.Translate node., Element.SetLocation - Attempts to modify the location of the input element. This can effectively add as a move comand in Revit. Works for both line based and point based elements., FamilyType.Duplicate - Create duplicate family types with the specified name. If the type exists, it is called., File.Size - Checks the file size. Provide a file path as a string., Filter.ByCategoryName - Filters the input elements by their category name. You can input multiple category names., Filter.ByClassName - Filters a list of objects by the object's class name. Note that Dynamo elements belong to different classes than their Revit counterparts. Use the Object.Class node to check an object's class., Floor-WallType.SetMaterial - Sets a new material to the structural core of the provided floor and wall types., FloorOpening.ByCurves - Create hosted floor opeinngs through the input floors. The second input is a list of sub-lists of the boundary curves., FloorType.Duplicate - Attemts to create duplicate floor types. If the floor type exists, it is appended to the end. Sets only the structural width of the floor. The width must be in feet., Fn.ElementsOfCategory - Same as the built in \"All Elements of Category\" but can act as a function object., Form.ByGeometry - Attempts to convert the input geometry to a Revit Form object. Warning - use method this only in the family environment. Can convert complicated solids or surfaces directly into forms., Geometry.SplitRecursively - Splits a surface or a solid recursively, using the resulting reduced geometry for every next split., HostedInstanceByPoints - Creates hosted family instances(doors/windows) at the specified points. You can feed either a single family type or a unique type for each instance., Input.Wait - Waits for all inputs to be completed before continuing the execution process.Part of the SmartCopyMon workflow., Lines.Group&FixCorners - Groups unconnected lines into sub-lists by margin(the maximum distance between endpoints) and attempts to create clean corner connections between them. Built on top of the Group curves node found in archi-lab.net., List.DropFirstLast - Removes the first and last items from the list, List.DropLast - Removes the last value of the list., List.GetEven - Gets even indices from the list., List.GetOdd - Gets the odd indices from the list., List.Randomise&Divide - Shiffles the input list and divides it into sub-lists based on ratios(1/4 + 1/2 + 1/4 will give you three lists split accordingly) The smalest ratio will always be 1 / the list length and the largest ratio will be 1. A seed input can shuffle the list further., List.ShiftIndices+ - The built in node fails if the shift number is greater than the lenght of the list. This node acts as a work-around., Ln2Str - Serilize a geometry line to a string for use in Revit parameters, Math.AlmostEqual - Checks if a number is almost equal to a value with a specified tollerance., NullAllIndicesOf - list all of the indices of a list that match the specified value. Capable of handling null values, part of the SmartCopyMonitor workflow., NullGetParameter - Similar to the built in node.Capable of handling null values, part of the SmartCopyMonitor workflow., NullIndexOf - Similar to the bult-in node but provides a null value instead of -1 of failure. Part of the SmartCopyMonitor workflow., NullReorder - Simiar to the built-in function with the difference that it can handle null indices. Part of the SmartCopyMonitor workflow., NullSetDifference - Similar to the built in node, with a built-in safety for null values. Part of the SmartCopyMonitor workflow., NullSetParameter - Similar to the built-in function but with the ability to handle null values. Part of the SmartCopyMon workflow., Number.ToString - Converts the input number(s) to string. Can process lists., Object.Class - Gets the input object's class name. Can process lists., Pt2Str - Serilize a geometry point to a string for use in Revit parameters, SelectInRevit - Selects the input elements in Revit. Works with Revit 2016., Shaft.ByCurves - Creates a shaft opening. The top level MUST be higher than the base level for a successful execution. You can either provide one base and top level for all shafts or have unique levels for each shaft instance., Sheet.Views+ - Extracts all views placed on the input sheet(s).  Will be depreciated once the bult in node works with all plan types., Star.ByCenterRadiusRays - Fun little node to create star shapes., Str2Ln - De-serilize a Revit parameter string into a geometric line., Str2Pt - De-serilize a Revit parameter string into a geometric point., Topography.ToPolySurface - Optimized algorithm for converting topographies into polysurfaces. Tested with topographies containing up to 40 000 points. \r\nWarning conversions of such mangitudes consume a lot of resources and are sub-optimal. Ensure that you have plenty at least 8GB of ram and patience before attempting such a conversion, otherwise your Dynamo and Revit instances may crash., ViewSet.ByViewsName - Creates a set of views(or sheets) for printing. If the set exists, set Overwrite to true to replace it., Wall.WallType - Queries the wall type of the input wall. Works for types from linked documents as well., WallType.Duplicate - Attemts to create duplicate wall types. If the wall type exists, it is appended to the end. Sets only the structural width of the wall. The width must be in feet.",
            "engine_metadata": "",
            "engine_version": "0.8.2.2392",
            "created": "2015-09-28T16:45:04.259Z",
            "full_dependency_versions": [ "82.2.0" ],
            "full_dependency_ids": [
              {
                "_id": "56077cf3662bf0e9080001ea",
                "name": "spring nodes"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "82.2.0"
          },
          {
            "_id": "560a018e662bf0e908000200",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/7417a898-023b-4696-b695-952edbda235dgregPkg520.zip",
            "contents": "Active View - Selects the current document's active view. Supports more view types, Beams.FixExtents - Detects all beams from the input list with broken extents(actual length - cut length <  margin) and attemts to correct them., Collector.CurrentSelection - Gets the currently selected elements. Connect a boolean switch to refresh the selection. Compatible with Revit 2016, Collector.ElementsInView - Selects all elements visible in the input view., Collector.FamilyInstances - Collects placed family instance elements from the document that match the name. Partially mathing elements are collected as well. If no matches are found, a list of all isntance names will be output., Collector.FamilyTypes - Collects non-system family types that fully match or partially match the provided names. If no matches are found, a list of all type names will be output., Collector.FloorTypes - Collects Floor types by name., Collector.LinkedInstanceElements - Extract elements by category from the selected linked instances. The transform vector can be used to get the exact location of the elements in the local file, Collector.Revisions - Collects all revisions from a specific date., Collector.Sheets - Search for sheets by either their name or their number. Use a false boolean switch to search by number., Collector.Views - Search for views based on naming. You can choose to either include or exclude schedules. Use the sheet collector for sheets., Collector.WallTypes - Collects wall types by name., Dictionary.ByKeysValues - Dictionaries are an incredibly powerful tool for making associative sets between two equal length lists. The fitst list must be of unique strings (or numbers) and will be the key and the second list will be the matching values (it can be made up of geometry, elements, even other lists)\r\nThe search keys list will provide the coresponding value to the input key., DirectShape.ByGeometry - Attempts to create a DirectShape element inside the Revit document.  It is based on an alternative process that uses a SAT inport and can produce smooth surfaces. Each created DS will have a unique type. Make sure that each input geometry has a unique name. You can either feed a single category for all geometries or a unique category for each geometry., DirectShape.Transform - Copy the input DirectShape element with the help of a translation vector, similarly to the Geometry.Translate node. This method should prove much faster than Element.Copy, Doc.DeleteElements - Attempts to delete the input revit elements and returns the number of successfully deleted elements. Carefully observe the deleted elements count. It may be greater than the input list because hosted elements or tags will be deleted as well., Element.Copy - Copy the input Revit elements with the help of a translation vector, similarly to the Geometry.Translate node., Element.SetLocation - Attempts to modify the location of the input element. This can effectively add as a move comand in Revit. Works for both line based and point based elements., FamilyType.Duplicate - Create duplicate family types with the specified name. If the type exists, it is called., File.Size - Checks the file size. Provide a file path as a string., Filter.ByCategoryName - Filters the input elements by their category name. You can input multiple category names., Filter.ByClassName - Filters a list of objects by the object's class name. Note that Dynamo elements belong to different classes than their Revit counterparts. Use the Object.Class node to check an object's class., Floor-WallType.SetMaterial - Sets a new material to the structural core of the provided floor and wall types., FloorOpening.ByCurves - Create hosted floor opeinngs through the input floors. The second input is a list of sub-lists of the boundary curves., FloorType.Duplicate - Attemts to create duplicate floor types. If the floor type exists, it is appended to the end. Sets only the structural width of the floor. The width must be in feet., Fn.ElementsOfCategory - Same as the built in \"All Elements of Category\" but can act as a function object., Form.ByGeometry - Attempts to convert the input geometry to a Revit Form object. Forms can exist only in the family environment. You can convert complicated solids or surfaces directly into forms. Solids can be converted into voids. Provide either one true boolean to convert everything into voids or a unique boolean for each geometry object., Geometry.SplitRecursively - Splits a surface or a solid recursively, using the resulting reduced geometry for every next split., HostedInstanceByPoints - Creates hosted family instances(doors/windows) at the specified points. You can feed either a single family type or a unique type for each instance., Input.Wait - Waits for all inputs to be completed before continuing the execution process.Part of the SmartCopyMon workflow., Lines.Group&FixCorners - Groups unconnected lines into sub-lists by margin(the maximum distance between endpoints) and attempts to create clean corner connections between them. Built on top of the Group curves node found in archi-lab.net., List.DropFirstLast - Removes the first and last items from the list, List.DropLast - Removes the last value of the list., List.GetEven - Gets even indices from the list., List.GetOdd - Gets the odd indices from the list., List.Randomise&Divide - Shiffles the input list and divides it into sub-lists based on ratios(1/4 + 1/2 + 1/4 will give you three lists split accordingly) The smalest ratio will always be 1 / the list length and the largest ratio will be 1. A seed input can shuffle the list further., List.ShiftIndices+ - The built in node fails if the shift number is greater than the lenght of the list. This node acts as a work-around., Ln2Str - Serilize a geometry line to a string for use in Revit parameters, Math.AlmostEqual - Checks if a number is almost equal to a value with a specified tollerance., NullAllIndicesOf - list all of the indices of a list that match the specified value. Capable of handling null values, part of the SmartCopyMonitor workflow., NullGetParameter - Similar to the built in node.Capable of handling null values, part of the SmartCopyMonitor workflow., NullIndexOf - Similar to the bult-in node but provides a null value instead of -1 of failure. Part of the SmartCopyMonitor workflow., NullReorder - Simiar to the built-in function with the difference that it can handle null indices. Part of the SmartCopyMonitor workflow., NullSetDifference - Similar to the built in node, with a built-in safety for null values. Part of the SmartCopyMonitor workflow., NullSetParameter - Similar to the built-in function but with the ability to handle null values. Part of the SmartCopyMon workflow., Number.ToString - Converts the input number(s) to string. Can process lists., Object.Class - Gets the input object's class name. Can process lists., Pt2Str - Serilize a geometry point to a string for use in Revit parameters, SelectInRevit - Selects the input elements in Revit. Works with Revit 2016., Shaft.ByCurves - Creates a shaft opening. The top level MUST be higher than the base level for a successful execution. You can either provide one base and top level for all shafts or have unique levels for each shaft instance., Sheet.Views+ - Extracts all views placed on the input sheet(s).  Will be depreciated once the bult in node works with all plan types., Star.ByCenterRadiusRays - Fun little node to create star shapes., Str2Ln - De-serilize a Revit parameter string into a geometric line., Str2Pt - De-serilize a Revit parameter string into a geometric point., Topography.ToPolySurface - Optimized algorithm for converting topographies into polysurfaces. Tested with topographies containing up to 40 000 points. \r\nWarning conversions of such mangitudes consume a lot of resources and are sub-optimal. Ensure that you have plenty at least 8GB of ram and patience before attempting such a conversion, otherwise your Dynamo and Revit instances may crash., ViewSet.ByViewsName - Creates a set of views(or sheets) for printing. If the set exists, set Overwrite to true to replace it., Wall.WallType - Queries the wall type of the input wall. Works for types from linked documents as well., WallType.Duplicate - Attemts to create duplicate wall types. If the wall type exists, it is appended to the end. Sets only the structural width of the wall. The width must be in feet.",
            "engine_metadata": "",
            "engine_version": "0.8.2.2392",
            "created": "2015-09-29T03:12:14.117Z",
            "full_dependency_versions": [ "82.2.1" ],
            "full_dependency_ids": [
              {
                "_id": "56077cf3662bf0e9080001ea",
                "name": "spring nodes"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "82.2.1"
          },
          {
            "_id": "560be8de662bf0e908000211",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/2e0cdb4d-909c-4e86-a479-79f99f8a99ccgregPkg93.zip",
            "contents": "Active View - Selects the current document's active view. Supports more view types, Beams.FixExtents - Detects all beams from the input list with broken extents(actual length - cut length <  margin) and attemts to correct them., BoundingBox.Scale - Scales the bounding box in three dimensions according to it's center., Collector.CurrentSelection - Gets the currently selected elements. Connect a boolean switch to refresh the selection. Compatible with Revit 2016, Collector.ElementsInView - Selects all elements visible in the input view., Collector.FamilyInstances - Collects placed family instance elements from the document that match the name. Partially mathing elements are collected as well. If no matches are found, a list of all isntance names will be output., Collector.FamilyTypes - Collects non-system family types that fully match or partially match the provided names. If no matches are found, a list of all type names will be output., Collector.FloorTypes - Collects Floor types by name., Collector.LinkedInstanceElements - Extract elements by category from the selected linked instances. The transform vector can be used to get the exact location of the elements in the local file, Collector.Revisions - Collects all revisions from a specific date., Collector.Sheets - Search for sheets by either their name or their number. Use a false boolean switch to search by number., Collector.Views - Search for views based on naming. You can choose to either include or exclude schedules. Use the sheet collector for sheets., Collector.WallTypes - Collects wall types by name., Dictionary.ByKeysValues - Dictionaries are an incredibly powerful tool for making associative sets between two equal length lists. The fitst list must be of unique strings (or numbers) and will be the key and the second list will be the matching values (it can be made up of geometry, elements, even other lists)\r\nThe search keys list will provide the coresponding value to the input key., DirectShape.ByGeometry(SAT) - Attempts to create a DirectShape element inside the Revit document.  It is based on an alternative process that uses a SAT inport and can produce smooth surfaces. Each created DS will have a unique type. Make sure that each input geometry has a unique name. You can either feed a single category for all geometries or a unique category for each geometry., DirectShape.ByGeometry - Attempts to create a DirectShape element inside the Revit document.  It is based on an alternative process that uses a SAT inport and can produce smooth surfaces. Each created DS will have a unique type. Make sure that each input geometry has a unique name. You can either feed a single category for all geometries or a unique category for each geometry., DirectShape.Transform - Copy the input DirectShape element with the help of a translation vector, similarly to the Geometry.Translate node. This method should prove much faster than Element.Copy, Doc.DeleteElements - Attempts to delete the input revit elements and returns the number of successfully deleted elements. Carefully observe the deleted elements count. It may be greater than the input list because hosted elements or tags will be deleted as well., Element.Copy - Copy the input Revit elements with the help of a translation vector, similarly to the Geometry.Translate node., Element.SetLocation - Attempts to modify the location of the input element. This can effectively add as a move comand in Revit. Works for both line based and point based elements., FamilyType.Duplicate - Create duplicate family types with the specified name. If the type exists, it is called., File.Size - Checks the file size. Provide a file path as a string., Filter.ByCategoryName - Filters the input elements by their category name. You can input multiple category names., Filter.ByClassName - Filters a list of objects by the object's class name. Note that Dynamo elements belong to different classes than their Revit counterparts. Use the Object.Class node to check an object's class., Floor-WallType.SetMaterial - Sets a new material to the structural core of the provided floor and wall types., FloorOpening.ByCurves - Create hosted floor opeinngs through the input floors. The second input is a list of sub-lists of the boundary curves., FloorType.Duplicate - Attemts to create duplicate floor types. If the floor type exists, it is appended to the end. Sets only the structural width of the floor. The width must be in feet., Fn.ElementsOfCategory - Same as the built in \"All Elements of Category\" but can act as a function object., Form.ByGeometry - Attempts to convert the input geometry to a Revit Form object. Forms can exist only in the family environment. You can convert complicated solids or surfaces directly into forms. Solids can be converted into voids. Provide either one true boolean to convert everything into voids or a unique boolean for each geometry object., Geometry.SplitRecursively - Splits a surface or a solid recursively, using the resulting reduced geometry for every next split., HostedInstanceByPoints - Creates hosted family instances(doors/windows) at the specified points. You can feed either a single family type or a unique type for each instance., Input.Wait - Waits for all inputs to be completed before continuing the execution process.Part of the SmartCopyMon workflow., Lines.Group&FixCorners - Groups unconnected lines into sub-lists by margin(the maximum distance between endpoints) and attempts to create clean corner connections between them. Built on top of the Group curves node found in archi-lab.net., List.DropFirstLast - Removes the first and last items from the list, List.DropLast - Removes the last value of the list., List.GetEven - Gets even indices from the list., List.GetOdd - Gets the odd indices from the list., List.Randomise&Divide - Shiffles the input list and divides it into sub-lists based on ratios(1/4 + 1/2 + 1/4 will give you three lists split accordingly) The smalest ratio will always be 1 / the list length and the largest ratio will be 1. A seed input can shuffle the list further., List.ShiftIndices+ - The built in node fails if the shift number is greater than the lenght of the list. This node acts as a work-around., Ln2Str - Serilize a geometry line to a string for use in Revit parameters, Math.AlmostEqual - Checks if a number is almost equal to a value with a specified tollerance., NullAllIndicesOf - list all of the indices of a list that match the specified value. Capable of handling null values, part of the SmartCopyMonitor workflow., NullGetParameter - Similar to the built in node.Capable of handling null values, part of the SmartCopyMonitor workflow., NullIndexOf - Similar to the bult-in node but provides a null value instead of -1 of failure. Part of the SmartCopyMonitor workflow., NullReorder - Simiar to the built-in function with the difference that it can handle null indices. Part of the SmartCopyMonitor workflow., NullSetDifference - Similar to the built in node, with a built-in safety for null values. Part of the SmartCopyMonitor workflow., NullSetParameter - Similar to the built-in function but with the ability to handle null values. Part of the SmartCopyMon workflow., Number.ToString - Converts the input number(s) to string. Can process lists., Object.Class - Gets the input object's class name. Can process lists., Pt2Str - Serilize a geometry point to a string for use in Revit parameters, SelectInRevit - Selects the input elements in Revit. Works with Revit 2016., Shaft.ByCurves - Creates a shaft opening. The top level MUST be higher than the base level for a successful execution. You can either provide one base and top level for all shafts or have unique levels for each shaft instance., Sheet.Views+ - Extracts all views placed on the input sheet(s).  Will be depreciated once the bult in node works with all plan types., Star.ByCenterRadiusRays - Fun little node to create star shapes., Str2Ln - De-serilize a Revit parameter string into a geometric line., Str2Pt - De-serilize a Revit parameter string into a geometric point., Topography.ToPolySurface - Optimized algorithm for converting topographies into polysurfaces. Tested with topographies containing up to 40 000 points. \r\nWarning conversions of such mangitudes consume a lot of resources and are sub-optimal. Ensure that you have plenty at least 8GB of ram and patience before attempting such a conversion, otherwise your Dynamo and Revit instances may crash., ViewSet.ByViewsName - Creates a set of views(or sheets) for printing. If the set exists, set Overwrite to true to replace it., Wall.WallType - Queries the wall type of the input wall. Works for types from linked documents as well., WallType.Duplicate - Attemts to create duplicate wall types. If the wall type exists, it is appended to the end. Sets only the structural width of the wall. The width must be in feet.",
            "engine_metadata": "",
            "engine_version": "0.8.2.2392",
            "created": "2015-09-30T13:51:26.293Z",
            "full_dependency_versions": [ "82.2.2" ],
            "full_dependency_ids": [
              {
                "_id": "56077cf3662bf0e9080001ea",
                "name": "spring nodes"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "82.2.2"
          },
          {
            "_id": "560d06de662bf0e908000218",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/47e9056b-3779-42df-91d6-27c38dd9c3ccgregPkg72.zip",
            "contents": "Active View - Selects the current document's active view. Supports more view types, Beams.FixExtents - Detects all beams from the input list with broken extents(actual length - cut length <  margin) and attemts to correct them., BoundingBox.Scale - Scales the bounding box in three dimensions according to it's center., Collector.CurrentSelection - Gets the currently selected elements. Connect a boolean switch to refresh the selection. Compatible with Revit 2016, Collector.ElementsInView - Selects all elements visible in the input view., Collector.FamilyInstances - Collects placed family instance elements from the document that match the name. Partially mathing elements are collected as well. If no matches are found, a list of all isntance names will be output., Collector.FamilyTypes - Collects non-system family types that fully match or partially match the provided names. If no matches are found, a list of all type names will be output., Collector.FloorTypes - Collects Floor types by name., Collector.LinkedInstanceElements - Extract elements by category from the selected linked instances. The transform vector can be used to get the exact location of the elements in the local file, Collector.Revisions - Collects all revisions from a specific date., Collector.Sheets - Search for sheets by either their name or their number. Use a false boolean switch to search by number., Collector.Views - Search for views based on naming. You can choose to either include or exclude schedules. Use the sheet collector for sheets., Collector.WallTypes - Collects wall types by name., Dictionary.ByKeysValues - Dictionaries are an incredibly powerful tool for making associative sets between two equal length lists. The fitst list must be of unique strings (or numbers) and will be the key and the second list will be the matching values (it can be made up of geometry, elements, even other lists)\r\nThe search keys list will provide the coresponding value to the input key., DirectShape.ByGeometry(SAT) - Attempts to create a DirectShape element inside the Revit document.  It is based on an alternative process that uses a SAT inport and can produce smooth surfaces. Each created DS will have a unique type. Make sure that each input geometry has a unique name. You can either feed a single category for all geometries or a unique category for each geometry. This node works in millimeters., DirectShape.ByGeometry - Attempts to create a DirectShape element inside the Revit document.  It is based on an alternative process that uses a SAT inport and can produce smooth surfaces. Each created DS will have a unique type. Make sure that each input geometry has a unique name. You can either feed a single category for all geometries or a unique category for each geometry., DirectShape.Transform - Copy the input DirectShape element with the help of a translation vector, similarly to the Geometry.Translate node. This method should prove much faster than Element.Copy, Doc.DeleteElements - Attempts to delete the input revit elements and returns the number of successfully deleted elements. Carefully observe the deleted elements count. It may be greater than the input list because hosted elements or tags will be deleted as well., Element.Copy - Copy the input Revit elements with the help of a translation vector, similarly to the Geometry.Translate node., Element.SetLocation - Attempts to modify the location of the input element. This can effectively add as a move comand in Revit. Works for both line based and point based elements., FamilyType.Duplicate - Create duplicate family types with the specified name. If the type exists, it is called., File.Size - Checks the file size. Provide a file path as a string., Filter.ByCategoryName - Filters the input elements by their category name. You can input multiple category names., Filter.ByClassName - Filters a list of objects by the object's class name. Note that Dynamo elements belong to different classes than their Revit counterparts. Use the Object.Class node to check an object's class., Floor-WallType.SetMaterial - Sets a new material to the structural core of the provided floor and wall types., FloorOpening.ByCurves - Create hosted floor opeinngs through the input floors. The second input is a list of sub-lists of the boundary curves., FloorType.Duplicate - Attemts to create duplicate floor types. If the floor type exists, it is appended to the end. Sets only the structural width of the floor. The width must be in feet., Fn.ElementsOfCategory - Same as the built in \"All Elements of Category\" but can act as a function object., Form.ByGeometry(SAT) - Attempts to convert the input geometry to a Revit Form object. Forms can exist only in the family environment. You can convert complicated solids or surfaces directly into forms. Solids can be converted into voids. Provide either one true boolean to convert everything into voids or a unique boolean for each geometry object. This node works in millimeters., Form.ByGeometry - Attempts to convert the input geometry to a Revit Form object. Forms can exist only in the family environment. You can convert complicated solids or surfaces directly into forms. Solids can be converted into voids. Provide either one true boolean to convert everything into voids or a unique boolean for each geometry object., Geometry.SplitRecursively - Splits a surface or a solid recursively, using the resulting reduced geometry for every next split., HostedInstanceByPoints - Creates hosted family instances(doors/windows) at the specified points. You can feed either a single family type or a unique type for each instance., Input.Wait - Waits for all inputs to be completed before continuing the execution process.Part of the SmartCopyMon workflow., Lines.Group&FixCorners - Groups unconnected lines into sub-lists by margin(the maximum distance between endpoints) and attempts to create clean corner connections between them. Built on top of the Group curves node found in archi-lab.net., List.DropFirstLast - Removes the first and last items from the list, List.DropLast - Removes the last value of the list., List.GetEven - Gets even indices from the list., List.GetOdd - Gets the odd indices from the list., List.Randomise&Divide - Shiffles the input list and divides it into sub-lists based on ratios(1/4 + 1/2 + 1/4 will give you three lists split accordingly) The smalest ratio will always be 1 / the list length and the largest ratio will be 1. A seed input can shuffle the list further., List.ShiftIndices+ - The built in node fails if the shift number is greater than the lenght of the list. This node acts as a work-around., Ln2Str - Serilize a geometry line to a string for use in Revit parameters, Math.AlmostEqual - Checks if a number is almost equal to a value with a specified tollerance., NullAllIndicesOf - list all of the indices of a list that match the specified value. Capable of handling null values, part of the SmartCopyMonitor workflow., NullGetParameter - Similar to the built in node.Capable of handling null values, part of the SmartCopyMonitor workflow., NullIndexOf - Similar to the bult-in node but provides a null value instead of -1 of failure. Part of the SmartCopyMonitor workflow., NullReorder - Simiar to the built-in function with the difference that it can handle null indices. Part of the SmartCopyMonitor workflow., NullSetDifference - Similar to the built in node, with a built-in safety for null values. Part of the SmartCopyMonitor workflow., NullSetParameter - Similar to the built-in function but with the ability to handle null values. Part of the SmartCopyMon workflow., Number.ToString - Converts the input number(s) to string. Can process lists., Object.Class - Gets the input object's class name. Can process lists., Pt2Str - Serilize a geometry point to a string for use in Revit parameters, SelectInRevit - Selects the input elements in Revit. Works with Revit 2016., Shaft.ByCurves - Creates a shaft opening. The top level MUST be higher than the base level for a successful execution. You can either provide one base and top level for all shafts or have unique levels for each shaft instance., Sheet.Views+ - Extracts all views placed on the input sheet(s).  Will be depreciated once the bult in node works with all plan types., Star.ByCenterRadiusRays - Fun little node to create star shapes., Str2Ln - De-serilize a Revit parameter string into a geometric line., Str2Pt - De-serilize a Revit parameter string into a geometric point., Topography.ToPolySurface - Optimized algorithm for converting topographies into polysurfaces. Tested with topographies containing up to 40 000 points. \r\nWarning conversions of such mangitudes consume a lot of resources and are sub-optimal. Ensure that you have plenty at least 8GB of ram and patience before attempting such a conversion, otherwise your Dynamo and Revit instances may crash., ViewSet.ByViewsName - Creates a set of views(or sheets) for printing. If the set exists, set Overwrite to true to replace it., Wall.WallType - Queries the wall type of the input wall. Works for types from linked documents as well., WallType.Duplicate - Attemts to create duplicate wall types. If the wall type exists, it is appended to the end. Sets only the structural width of the wall. The width must be in feet.",
            "engine_metadata": "",
            "engine_version": "0.8.2.2392",
            "created": "2015-10-01T10:11:42.954Z",
            "full_dependency_versions": [ "82.2.3" ],
            "full_dependency_ids": [
              {
                "_id": "56077cf3662bf0e9080001ea",
                "name": "spring nodes"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "82.2.3"
          },
          {
            "_id": "560fb0c5662bf0e908000223",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/c5f89b4e-d3c8-440d-b1c8-f85e6387613bgregPkg695.zip",
            "contents": "Active View - Selects the current document's active view. Supports more view types, Beams.FixExtents - Detects all beams from the input list with broken extents(actual length - cut length <  margin) and attemts to correct them., BoundingBox.Scale - Scales the bounding box in three dimensions according to it's center., Collector.CurrentSelection - Gets the currently selected elements. Connect a boolean switch to refresh the selection. Compatible with Revit 2016, Collector.ElementsInView - Selects all elements visible in the input view., Collector.FamilyInstances - Collects placed family instance elements from the document that match the name. Partially mathing elements are collected as well. If no matches are found, a list of all isntance names will be output., Collector.FamilyTypes - Collects non-system family types that fully match or partially match the provided names. If no matches are found, a list of all type names will be output., Collector.FloorTypes - Collects Floor types by name., Collector.LinkedInstanceElements - Extract elements by category from the selected linked instances. The transform vector can be used to get the exact location of the elements in the local file, Collector.Revisions - Collects all revisions from a specific date., Collector.Sheets - Search for sheets by either their name or their number. Use a false boolean switch to search by number., Collector.Views - Search for views based on naming. You can choose to either include or exclude schedules. Use the sheet collector for sheets., Collector.WallTypes - Collects wall types by name., Dictionary.ByKeysValues - Dictionaries are an incredibly powerful tool for making associative sets between two equal length lists. The fitst list must be of unique strings (or numbers) and will be the key and the second list will be the matching values (it can be made up of geometry, elements, even other lists)\r\nThe search keys list will provide the coresponding value to the input key., DirectShape.ByGeometry(SAT) - Attempts to create a DirectShape element inside the Revit document.  It is based on an alternative process that uses a SAT inport and can produce smooth surfaces. Each created DS will have a unique type. Make sure that each input geometry has a unique name. You can either feed a single category for all geometries or a unique category for each geometry. This node works in millimeters., DirectShape.ByGeometry - Attempts to create a DirectShape element inside the Revit document.  It is based on an alternative process that uses a SAT inport and can produce smooth surfaces. Each created DS will have a unique type. Make sure that each input geometry has a unique name. You can either feed a single category for all geometries or a unique category for each geometry., DirectShape.Transform - Copy the input DirectShape element with the help of a translation vector, similarly to the Geometry.Translate node. This method should prove much faster than Element.Copy, Doc.DeleteElements - Attempts to delete the input revit elements and returns the number of successfully deleted elements. Carefully observe the deleted elements count. It may be greater than the input list because hosted elements or tags will be deleted as well., Element.Copy - Copy the input Revit elements with the help of a translation vector, similarly to the Geometry.Translate node., Element.SetLocation - Attempts to modify the location of the input element. This can effectively add as a move comand in Revit. Works for both line based and point based elements., FamilyType.Duplicate - Create duplicate family types with the specified name. If the type exists, it is called., File.Size - Checks the file size. Provide a file path as a string., Filter.ByCategoryName - Filters the input elements by their category name. You can input multiple category names., Filter.ByClassName - Filters a list of objects by the object's class name. Note that Dynamo elements belong to different classes than their Revit counterparts. Use the Object.Class node to check an object's class., Floor-WallType.SetMaterial - Sets a new material to the structural core of the provided floor and wall types., FloorOpening.ByCurves - Create hosted floor opeinngs through the input floors. The second input is a list of sub-lists of the boundary curves., FloorType.Duplicate - Attemts to create duplicate floor types. If the floor type exists, it is appended to the end. Sets only the structural width of the floor. The width must be in feet., Fn.ElementsOfCategory - Same as the built in \"All Elements of Category\" but can act as a function object., Form.ByGeometry(SAT) - Attempts to convert the input geometry to a Revit Form object. Forms can exist only in the family environment. You can convert complicated solids or surfaces directly into forms. Solids can be converted into voids. Provide either one true boolean to convert everything into voids or a unique boolean for each geometry object. This node works in millimeters., Form.ByGeometry - Attempts to convert the input geometry to a Revit Form object. Forms can exist only in the family environment. You can convert complicated solids or surfaces directly into forms. Solids can be converted into voids. Provide either one true boolean to convert everything into voids or a unique boolean for each geometry object., Geometry.SplitRecursively - Splits a surface or a solid recursively, using the resulting reduced geometry for every next split., HostedInstanceByPoints - Creates hosted family instances(doors/windows) at the specified points. You can feed either a single family type or a unique type for each instance., Input.Wait - Waits for all inputs to be completed before continuing the execution process.Part of the SmartCopyMon workflow., Lines.Group&FixCorners - Groups unconnected lines into sub-lists by margin(the maximum distance between endpoints) and attempts to create clean corner connections between them. Built on top of the Group curves node found in archi-lab.net., List.DropFirstLast - Removes the first and last items from the list, List.DropLast - Removes the last value of the list., List.GetEven - Gets even indices from the list., List.GetOdd - Gets the odd indices from the list., List.Randomise&Divide - Shiffles the input list and divides it into sub-lists based on ratios(1/4 + 1/2 + 1/4 will give you three lists split accordingly) The smalest ratio will always be 1 / the list length and the largest ratio will be 1. A seed input can shuffle the list further., List.ShiftIndices+ - The built in node fails if the shift number is greater than the lenght of the list. This node acts as a work-around., Ln2Str - Serilize a geometry line to a string for use in Revit parameters, Math.AlmostEqual - Checks if a number is almost equal to a value with a specified tollerance., NullAllIndicesOf - list all of the indices of a list that match the specified value. Capable of handling null values, part of the SmartCopyMonitor workflow., NullGetParameter - Similar to the built in node.Capable of handling null values, part of the SmartCopyMonitor workflow., NullIndexOf - Similar to the bult-in node but provides a null value instead of -1 of failure. Part of the SmartCopyMonitor workflow., NullReorder - Simiar to the built-in function with the difference that it can handle null indices. Part of the SmartCopyMonitor workflow., NullSetDifference - Similar to the built in node, with a built-in safety for null values. Part of the SmartCopyMonitor workflow., NullSetParameter - Similar to the built-in function but with the ability to handle null values. Part of the SmartCopyMon workflow., Number.ToString - Converts the input number(s) to string. Can process lists., Object.Class - Gets the input object's class name. Can process lists., Pt2Str - Serilize a geometry point to a string for use in Revit parameters, Select Linked Element - Select the linked instance first, followed by the element. If your selection fails, just press escape.\r\nTo refresh the node, connect a boolean switch node., Select Linked Elements - Select the linked instance first, followed by the elements. To finish the selection, press Finish. If your selection fails, just press escape or Cancel.\r\nTo refresh the node, connect a boolean switch node., SelectInRevit - Selects the input elements in Revit. Works with Revit 2016., Shaft.ByCurves - Creates a shaft opening. The top level MUST be higher than the base level for a successful execution. You can either provide one base and top level for all shafts or have unique levels for each shaft instance., Sheet.Views+ - Extracts all views placed on the input sheet(s).  Will be depreciated once the bult in node works with all plan types., Star.ByCenterRadiusRays - Fun little node to create star shapes., Str2Ln - De-serilize a Revit parameter string into a geometric line., Str2Pt - De-serilize a Revit parameter string into a geometric point., Topography.ToPolySurface - Optimized algorithm for converting topographies into polysurfaces. Tested with topographies containing up to 40 000 points. \r\nWarning conversions of such mangitudes consume a lot of resources and are sub-optimal. Ensure that you have plenty at least 8GB of ram and patience before attempting such a conversion, otherwise your Dynamo and Revit instances may crash., ViewSet.ByViewsName - Creates a set of views(or sheets) for printing. If the set exists, set Overwrite to true to replace it., Wall.WallType - Queries the wall type of the input wall. Works for types from linked documents as well., WallType.Duplicate - Attemts to create duplicate wall types. If the wall type exists, it is appended to the end. Sets only the structural width of the wall. The width must be in feet.",
            "engine_metadata": "",
            "engine_version": "0.8.2.2392",
            "created": "2015-10-03T10:41:09.995Z",
            "full_dependency_versions": [ "82.3.0" ],
            "full_dependency_ids": [
              {
                "_id": "56077cf3662bf0e9080001ea",
                "name": "spring nodes"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "82.3.0"
          },
          {
            "_id": "5610c438662bf0e908000226",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/428beb5e-3ce6-409d-bff0-9504bc11ba26gregPkg819.zip",
            "contents": "Active View - Selects the current document's active view. Supports more view types, Beams.FixExtents - Detects all beams from the input list with broken extents(actual length - cut length <  margin) and attemts to correct them., BoundingBox.Scale - Scales the bounding box in three dimensions according to it's center., Collector.CurrentSelection - Gets the currently selected elements. Connect a boolean switch to refresh the selection. Compatible with Revit 2016, Collector.ElementsInView - Selects all elements visible in the input view., Collector.FamilyInstances - Collects placed family instance elements from the document that match the name. Partially mathing elements are collected as well. If no matches are found, a list of all isntance names will be output., Collector.FamilyTypes - Collects non-system family types that fully match or partially match the provided names. If no matches are found, a list of all type names will be output., Collector.FloorTypes - Collects Floor types by name., Collector.LinkedInstanceElements - Extract elements by category from the selected linked instances. The transform vector can be used to get the exact location of the elements in the local file, Collector.Revisions - Collects all revisions from a specific date., Collector.Sheets - Search for sheets by either their name or their number. Use a false boolean switch to search by number., Collector.Views - Search for views based on naming. You can choose to either include or exclude schedules. Use the sheet collector for sheets., Collector.WallTypes - Collects wall types by name., Dictionary.ByKeysValues - Dictionaries are an incredibly powerful tool for making associative sets between two equal length lists. The fitst list must be of unique strings (or numbers) and will be the key and the second list will be the matching values (it can be made up of geometry, elements, even other lists)\r\nThe search keys list will provide the coresponding value to the input key., DirectShape.ByGeometry(SAT) - Attempts to create a DirectShape element inside the Revit document.  It is based on an alternative process that uses a SAT inport and can produce smooth surfaces. Each created DS will have a unique type. Make sure that each input geometry has a unique name. You can either feed a single category for all geometries or a unique category for each geometry. This node works in millimeters., DirectShape.ByGeometry - Attempts to create a DirectShape element inside the Revit document.  It is based on an alternative process that uses a SAT inport and can produce smooth surfaces. Each created DS will have a unique type. Make sure that each input geometry has a unique name. You can either feed a single category for all geometries or a unique category for each geometry., DirectShape.Transform - Copy the input DirectShape element with the help of a translation vector, similarly to the Geometry.Translate node. This method should prove much faster than Element.Copy, Doc.DeleteElements - Attempts to delete the input revit elements and returns the number of successfully deleted elements. Carefully observe the deleted elements count. It may be greater than the input list because hosted elements or tags will be deleted as well., Element.Copy - Copy the input Revit elements with the help of a translation vector, similarly to the Geometry.Translate node., Element.SetLocation - Attempts to modify the location of the input element. This can effectively add as a move comand in Revit. Works for both line based and point based elements., FamilyType.Duplicate - Create duplicate family types with the specified name. If the type exists, it is called., Feet2Fraction - Converts a decimal foot value to a fractional foot/inch string., File.Size - Checks the file size. Provide a file path as a string., Filter.ByCategoryName - Filters the input elements by their category name. You can input multiple category names., Filter.ByClassName - Filters a list of objects by the object's class name. Note that Dynamo elements belong to different classes than their Revit counterparts. Use the Object.Class node to check an object's class., Floor-WallType.SetMaterial - Sets a new material to the structural core of the provided floor and wall types., FloorOpening.ByCurves - Create hosted floor opeinngs through the input floors. The second input is a list of sub-lists of the boundary curves., FloorType.Duplicate - Attemts to create duplicate floor types. If the floor type exists, it is appended to the end. Sets only the structural width of the floor. The width must be in feet., Fn.ElementsOfCategory - Same as the built in \"All Elements of Category\" but can act as a function object., Form.ByGeometry(SAT) - Attempts to convert the input geometry to a Revit Form object. Forms can exist only in the family environment. You can convert complicated solids or surfaces directly into forms. Solids can be converted into voids. Provide either one true boolean to convert everything into voids or a unique boolean for each geometry object. This node works in millimeters., Form.ByGeometry - Attempts to convert the input geometry to a Revit Form object. Forms can exist only in the family environment. You can convert complicated solids or surfaces directly into forms. Solids can be converted into voids. Provide either one true boolean to convert everything into voids or a unique boolean for each geometry object., Fraction2Feet - Converts a fractioned feet /inch string value into a decimal foot value., Geometry.SplitRecursively - Splits a surface or a solid recursively, using the resulting reduced geometry for every next split., HostedInstanceByPoints - Creates hosted family instances(doors/windows) at the specified points. You can feed either a single family type or a unique type for each instance., Input.Wait - Waits for all inputs to be completed before continuing the execution process.Part of the SmartCopyMon workflow., Lines.Group&FixCorners - Groups unconnected lines into sub-lists by margin(the maximum distance between endpoints) and attempts to create clean corner connections between them. Built on top of the Group curves node found in archi-lab.net., List.DropFirstLast - Removes the first and last items from the list, List.DropLast - Removes the last value of the list., List.GetEven - Gets even indices from the list., List.GetOdd - Gets the odd indices from the list., List.Randomise&Divide - Shiffles the input list and divides it into sub-lists based on ratios(1/4 + 1/2 + 1/4 will give you three lists split accordingly) The smalest ratio will always be 1 / the list length and the largest ratio will be 1. A seed input can shuffle the list further., List.ShiftIndices+ - The built in node fails if the shift number is greater than the lenght of the list. This node acts as a work-around., Ln2Str - Serilize a geometry line to a string for use in Revit parameters, Math.AlmostEqual - Checks if a number is almost equal to a value with a specified tollerance., NullAllIndicesOf - list all of the indices of a list that match the specified value. Capable of handling null values, part of the SmartCopyMonitor workflow., NullGetParameter - Similar to the built in node.Capable of handling null values, part of the SmartCopyMonitor workflow., NullIndexOf - Similar to the bult-in node but provides a null value instead of -1 of failure. Part of the SmartCopyMonitor workflow., NullReorder - Simiar to the built-in function with the difference that it can handle null indices. Part of the SmartCopyMonitor workflow., NullSetDifference - Similar to the built in node, with a built-in safety for null values. Part of the SmartCopyMonitor workflow., NullSetParameter - Similar to the built-in function but with the ability to handle null values. Part of the SmartCopyMon workflow., Number.ToString - Converts the input number(s) to string. Can process lists., Object.Class - Gets the input object's class name. Can process lists., Pt2Str - Serilize a geometry point to a string for use in Revit parameters, Select Linked Element - Select the linked instance first, followed by the element. If your selection fails, just press escape.\r\nTo refresh the node, connect a boolean switch node., Select Linked Elements - Select the linked instance first, followed by the elements. To finish the selection, press Finish. If your selection fails, just press escape or Cancel.\r\nTo refresh the node, connect a boolean switch node., SelectInRevit - Selects the input elements in Revit. Works with Revit 2016., Shaft.ByCurves - Creates a shaft opening. The top level MUST be higher than the base level for a successful execution. You can either provide one base and top level for all shafts or have unique levels for each shaft instance., Sheet.Views+ - Extracts all views placed on the input sheet(s).  Will be depreciated once the bult in node works with all plan types., Star.ByCenterRadiusRays - Fun little node to create star shapes., Str2Ln - De-serilize a Revit parameter string into a geometric line., Str2Pt - De-serilize a Revit parameter string into a geometric point., Topography.ToPolySurface - Optimized algorithm for converting topographies into polysurfaces. Tested with topographies containing up to 40 000 points. \r\nWarning conversions of such mangitudes consume a lot of resources and are sub-optimal. Ensure that you have plenty at least 8GB of ram and patience before attempting such a conversion, otherwise your Dynamo and Revit instances may crash., ViewSet.ByViewsName - Creates a set of views(or sheets) for printing. If the set exists, set Overwrite to true to replace it., Wall.WallType - Queries the wall type of the input wall. Works for types from linked documents as well., WallType.Duplicate - Attemts to create duplicate wall types. If the wall type exists, it is appended to the end. Sets only the structural width of the wall. The width must be in feet.",
            "engine_metadata": "",
            "engine_version": "0.8.2.2392",
            "created": "2015-10-04T06:16:24.313Z",
            "full_dependency_versions": [ "82.3.1" ],
            "full_dependency_ids": [
              {
                "_id": "56077cf3662bf0e9080001ea",
                "name": "spring nodes"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "82.3.1"
          },
          {
            "_id": "561206ff662bf0e90800022b",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/10faf11f-5bd3-44a4-953d-bb36930e211dgregPkg141.zip",
            "contents": "Active View - Selects the current document's active view. Supports more view types, Beams.FixExtents - Detects all beams from the input list with broken extents(actual length - cut length <  margin) and attemts to correct them., BoundingBox.Scale - Scales the bounding box in three dimensions according to it's center., Collector.CurrentSelection - Gets the currently selected elements. Connect a boolean switch to refresh the selection. Compatible with Revit 2016, Collector.ElementsInView - Selects all elements visible in the input view., Collector.FamilyInstances - Collects placed family instance elements from the document that match the name. Partially mathing elements are collected as well. If no matches are found, a list of all isntance names will be output., Collector.FamilyTypes - Collects non-system family types that fully match or partially match the provided names. If no matches are found, a list of all type names will be output., Collector.FloorTypes - Collects Floor types by name., Collector.LinkedInstanceElements - Extract elements by category from the selected linked instances. The transform vector can be used to get the exact location of the elements in the local file, Collector.Revisions - Collects all revisions from a specific date., Collector.Sheets - Search for sheets by either their name or their number. Use a false boolean switch to search by number., Collector.Views - Search for views based on naming. You can choose to either include or exclude schedules. Use the sheet collector for sheets., Collector.WallTypes - Collects wall types by name., Color2Decimal - Converts a Dynamo colour its Revit equivalent  decimal value., Decimal2Color - Converts a revit colour decimal value to its Dynamo equivalent., Dictionary.ByKeysValues - Dictionaries are an incredibly powerful tool for making associative sets between two equal length lists. The fitst list must be of unique strings (or numbers) and will be the key and the second list will be the matching values (it can be made up of geometry, elements, even other lists)\r\nThe search keys list will provide the coresponding value to the input key., DirectShape.ByGeometry(SAT) - Attempts to create a DirectShape element inside the Revit document.  It is based on an alternative process that uses a SAT inport and can produce smooth surfaces. Each created DS will have a unique type. Make sure that each input geometry has a unique name. You can either feed a single category for all geometries or a unique category for each geometry. This node works in millimeters., DirectShape.ByGeometry - Attempts to create a DirectShape element inside the Revit document.  It is based on an alternative process that uses a SAT inport and can produce smooth surfaces. Each created DS will have a unique type. Make sure that each input geometry has a unique name. You can either feed a single category for all geometries or a unique category for each geometry., DirectShape.Transform - Copy the input DirectShape element with the help of a translation vector, similarly to the Geometry.Translate node. This method should prove much faster than Element.Copy, Doc.DeleteElements - Attempts to delete the input revit elements and returns the number of successfully deleted elements. Carefully observe the deleted elements count. It may be greater than the input list because hosted elements or tags will be deleted as well., Element.Copy - Copy the input Revit elements with the help of a translation vector, similarly to the Geometry.Translate node., Element.SetLocation - Attempts to modify the location of the input element. This can effectively add as a move comand in Revit. Works for both line based and point based elements., FamilyType.Duplicate - Create duplicate family types with the specified name. If the type exists, it is called., Feet2Fraction - Converts a decimal foot value to a fractional foot/inch string., File.Size - Checks the file size. Provide a file path as a string., Filter.ByCategoryName - Filters the input elements by their category name. You can input multiple category names., Filter.ByClassName - Filters a list of objects by the object's class name. Note that Dynamo elements belong to different classes than their Revit counterparts. Use the Object.Class node to check an object's class., Floor-WallType.SetMaterial - Sets a new material to the structural core of the provided floor and wall types., FloorOpening.ByCurves - Create hosted floor opeinngs through the input floors. The second input is a list of sub-lists of the boundary curves., FloorType.Duplicate - Attemts to create duplicate floor types. If the floor type exists, it is appended to the end. Sets only the structural width of the floor. The width must be in feet., Fn.ElementsOfCategory - Same as the built in \"All Elements of Category\" but can act as a function object., Form.ByGeometry(SAT) - Attempts to convert the input geometry to a Revit Form object. Forms can exist only in the family environment. You can convert complicated solids or surfaces directly into forms. Solids can be converted into voids. Provide either one true boolean to convert everything into voids or a unique boolean for each geometry object. This node works in millimeters., Form.ByGeometry - Attempts to convert the input geometry to a Revit Form object. Forms can exist only in the family environment. You can convert complicated solids or surfaces directly into forms. Solids can be converted into voids. Provide either one true boolean to convert everything into voids or a unique boolean for each geometry object., Fraction2Feet - Converts a fractioned feet /inch string value into a decimal foot value., Geometry.SplitRecursively - Splits a surface or a solid recursively, using the resulting reduced geometry for every next split., HostedInstanceByPoints - Creates hosted family instances(doors/windows) at the specified points. You can feed either a single family type or a unique type for each instance., Input.Wait - Waits for all inputs to be completed before continuing the execution process.Part of the SmartCopyMon workflow., Lines.Group&FixCorners - Groups unconnected lines into sub-lists by margin(the maximum distance between endpoints) and attempts to create clean corner connections between them. Built on top of the Group curves node found in archi-lab.net., List.DropFirstLast - Removes the first and last items from the list, List.DropLast - Removes the last value of the list., List.GetEven - Gets even indices from the list., List.GetOdd - Gets the odd indices from the list., List.Randomise&Divide - Shiffles the input list and divides it into sub-lists based on ratios(1/4 + 1/2 + 1/4 will give you three lists split accordingly) The smalest ratio will always be 1 / the list length and the largest ratio will be 1. A seed input can shuffle the list further., List.ShiftIndices+ - The built in node fails if the shift number is greater than the lenght of the list. This node acts as a work-around., Ln2Str - Serilize a geometry line to a string for use in Revit parameters, Math.AlmostEqual - Checks if a number is almost equal to a value with a specified tollerance., NullAllIndicesOf - list all of the indices of a list that match the specified value. Capable of handling null values, part of the SmartCopyMonitor workflow., NullGetParameter - Similar to the built in node.Capable of handling null values, part of the SmartCopyMonitor workflow., NullIndexOf - Similar to the bult-in node but provides a null value instead of -1 of failure. Part of the SmartCopyMonitor workflow., NullReorder - Simiar to the built-in function with the difference that it can handle null indices. Part of the SmartCopyMonitor workflow., NullSetDifference - Similar to the built in node, with a built-in safety for null values. Part of the SmartCopyMonitor workflow., NullSetParameter - Similar to the built-in function but with the ability to handle null values. Part of the SmartCopyMon workflow., Number.ToString - Converts the input number(s) to string. Can process lists., Object.Class - Gets the input object's class name. Can process lists., Pt2Str - Serilize a geometry point to a string for use in Revit parameters, Select Linked Element - Select the linked instance first, followed by the element. If your selection fails, just press escape.\r\nTo refresh the node, connect a boolean switch node., Select Linked Elements - Select the linked instance first, followed by the elements. To finish the selection, press Finish. If your selection fails, just press escape or Cancel.\r\nTo refresh the node, connect a boolean switch node., SelectInRevit - Selects the input elements in Revit. Works with Revit 2016., Shaft.ByCurves - Creates a shaft opening. The top level MUST be higher than the base level for a successful execution. You can either provide one base and top level for all shafts or have unique levels for each shaft instance., Sheet.Views+ - Extracts all views placed on the input sheet(s).  Will be depreciated once the bult in node works with all plan types., Star.ByCenterRadiusRays - Fun little node to create star shapes., Str2Ln - De-serilize a Revit parameter string into a geometric line., Str2Pt - De-serilize a Revit parameter string into a geometric point., Topography.ToPolySurface - Optimized algorithm for converting topographies into polysurfaces. Tested with topographies containing up to 40 000 points. \r\nWarning conversions of such mangitudes consume a lot of resources and are sub-optimal. Ensure that you have plenty at least 8GB of ram and patience before attempting such a conversion, otherwise your Dynamo and Revit instances may crash., ViewSet.ByViewsName - Creates a set of views(or sheets) for printing. If the set exists, set Overwrite to true to replace it., Wall.WallType - Queries the wall type of the input wall. Works for types from linked documents as well., WallType.Duplicate - Attemts to create duplicate wall types. If the wall type exists, it is appended to the end. Sets only the structural width of the wall. The width must be in feet.",
            "engine_metadata": "",
            "engine_version": "0.8.2.2392",
            "created": "2015-10-05T05:13:35.009Z",
            "full_dependency_versions": [ "82.3.2" ],
            "full_dependency_ids": [
              {
                "_id": "56077cf3662bf0e9080001ea",
                "name": "spring nodes"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "82.3.2"
          },
          {
            "_id": "56371f78662bf0e9080002d5",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/a932b18a-4d72-4890-bf42-b33ef78cec29gregPkg532.zip",
            "contents": "Active View - Selects the current document's active view. Supports more view types, Beams.FixExtents - Detects all beams from the input list with broken extents(actual length - cut length <  margin) and attemts to correct them., BoundingBox.Scale - Scales the bounding box in three dimensions according to it's center., Collector.CurrentSelection - Gets the currently selected elements. Connect a boolean switch to refresh the selection. Compatible with Revit 2016, Collector.ElementsInView - Selects all elements visible in the input view., Collector.FamilyInstances - Collects placed family instance elements from the document that match the name. Partially mathing elements are collected as well. If no matches are found, a list of all isntance names will be output., Collector.FamilyTypes - Collects non-system family types that fully match or partially match the provided names. If no matches are found, a list of all type names will be output., Collector.FloorTypes - Collects Floor types by name., Collector.LinkedInstanceElements - Extract elements by category from the selected linked instances. The transform vector can be used to get the exact location of the elements in the local file, Collector.Revisions - Collects all revisions from a specific date., Collector.Sheets - Search for sheets by either their name or their number. Use a false boolean switch to search by number., Collector.Views - Search for views based on naming. You can choose to either include or exclude schedules. Use the sheet collector for sheets., Collector.WallTypes - Collects wall types by name., Color2Decimal - Converts a Dynamo colour its Revit equivalent  decimal value., CurveLoop.Simplify - Attempts to simplify an open or a closed curve loop by connecting straight separate line segments into a single line., Decimal2Color - Converts a revit colour decimal value to its Dynamo equivalent., Dictionary.ByKeysValues - Dictionaries are an incredibly powerful tool for making associative sets between two equal length lists. The fitst list must be of unique strings (or numbers) and will be the key and the second list will be the matching values (it can be made up of geometry, elements, even other lists)\r\nThe search keys list will provide the coresponding value to the input key., DirectShape.ByGeometry(SAT) - Attempts to create a DirectShape element inside the Revit document.  It is based on an alternative process that uses a SAT inport and can produce smooth surfaces. Each created DS will have a unique type. Make sure that each input geometry has a unique name. You can either feed a single category for all geometries or a unique category for each geometry. This node works in millimeters., DirectShape.ByGeometry - Attempts to create a DirectShape element inside the Revit document.  It is based on an alternative process that uses a SAT inport and can produce smooth surfaces. Each created DS will have a unique type. Make sure that each input geometry has a unique name. You can either feed a single category for all geometries or a unique category for each geometry., DirectShape.Transform - Copy the input DirectShape element with the help of a translation vector, similarly to the Geometry.Translate node. This method should prove much faster than Element.Copy, Doc.DeleteElements - Attempts to delete the input revit elements and returns the number of successfully deleted elements. Carefully observe the deleted elements count. It may be greater than the input list because hosted elements or tags will be deleted as well., Element.Copy - Copy the input Revit elements with the help of a translation vector, similarly to the Geometry.Translate node., Element.SetLocation - Attempts to modify the location of the input element. This can effectively add as a move comand in Revit. Works for both line based and point based elements., FamilyInstance.Rotation - Fetches the angle of rotation around the insertion point of a point based element. The angle is always measured counter-clockwise., FamilyType.Duplicate - Create duplicate family types with the specified name. If the type exists, it is called., Feet2Fraction - Converts a decimal foot value to a fractional foot/inch string., File.Size - Checks the file size. Provide a file path as a string., Filter.ByCategoryName - Filters the input elements by their category name. You can input multiple category names., Filter.ByClassName - Filters a list of objects by the object's class name. Note that Dynamo elements belong to different classes than their Revit counterparts. Use the Object.Class node to check an object's class., Floor-WallType.SetMaterial - Sets a new material to the structural core of the provided floor and wall types., FloorOpening.ByCurves - Create hosted floor opeinngs through the input floors. The second input is a list of sub-lists of the boundary curves., FloorType.Duplicate - Attemts to create duplicate floor types. If the floor type exists, it is appended to the end. Sets only the structural width of the floor. The width must be in feet., Fn.ElementsOfCategory - Same as the built in \"All Elements of Category\" but can act as a function object., Form.ByGeometry(SAT) - Attempts to convert the input geometry to a Revit Form object. Forms can exist only in the family environment. You can convert complicated solids or surfaces directly into forms. Solids can be converted into voids. Provide either one true boolean to convert everything into voids or a unique boolean for each geometry object. This node works in millimeters., Form.ByGeometry - Attempts to convert the input geometry to a Revit Form object. Forms can exist only in the family environment. You can convert complicated solids or surfaces directly into forms. Solids can be converted into voids. Provide either one true boolean to convert everything into voids or a unique boolean for each geometry object., Fraction2Feet - Converts a fractioned feet /inch string value into a decimal foot value., Geometry.SplitRecursively - Splits a surface or a solid recursively, using the resulting reduced geometry for every next split., HostedInstance.ByPoints - Creates hosted family instances(doors/windows) at the specified points. You can feed either a single family type or a unique type for each instance., Input.Wait - Waits for all inputs to be completed before continuing the execution process.Part of the SmartCopyMon workflow., Lines.Group&FixCorners - Groups unconnected lines into sub-lists by margin(the maximum distance between endpoints) and attempts to create clean corner connections between them. Built on top of the Group curves node found in archi-lab.net., List.DropFirstLast - Removes the first and last items from the list, List.DropLast - Removes the last value of the list., List.EveryOther - Useful for when you want to combine an item on the list with every other item on the list. For example in list {1,2,3} , \"2\" will be paired up only with \"1\" and \"3\" and will not be paired up with itself., List.GetEven - Gets even indices from the list., List.GetOdd - Gets the odd indices from the list., List.Randomise&Divide - Shiffles the input list and divides it into sub-lists based on ratios(1/4 + 1/2 + 1/4 will give you three lists split accordingly) The smalest ratio will always be 1 / the list length and the largest ratio will be 1. A seed input can shuffle the list further., List.ShiftIndices+ - The built in node fails if the shift number is greater than the lenght of the list. This node acts as a work-around., Ln2Str - Serilize a geometry line to a string for use in Revit parameters, Math.AlmostEqual - Checks if a number is almost equal to a value with a specified tollerance., NullAllIndicesOf - list all of the indices of a list that match the specified value. Capable of handling null values, part of the SmartCopyMonitor workflow., NullGetParameter - Similar to the built in node.Capable of handling null values, part of the SmartCopyMonitor workflow., NullIndexOf - Similar to the bult-in node but provides a null value instead of -1 of failure. Part of the SmartCopyMonitor workflow., NullReorder - Simiar to the built-in function with the difference that it can handle null indices. Part of the SmartCopyMonitor workflow., NullSetDifference - Similar to the built in node, with a built-in safety for null values. Part of the SmartCopyMonitor workflow., NullSetParameter - Similar to the built-in function but with the ability to handle null values. Part of the SmartCopyMon workflow., Number.ToString - Converts the input number(s) to string. Can process lists., Object.Class - Gets the input object's class name. Can process lists., Pt2Str - Serilize a geometry point to a string for use in Revit parameters, Select Linked Element - Select the linked instance first, followed by the element. If your selection fails, just press escape.\r\nTo refresh the node, connect a boolean switch node., Select Linked Elements - Select the linked instance first, followed by the elements. To finish the selection, press Finish. If your selection fails, just press escape or Cancel.\r\nTo refresh the node, connect a boolean switch node., SelectInRevit - Selects the input elements in Revit. Works with Revit 2016., Shaft.ByCurves - Creates a shaft opening. The top level MUST be higher than the base level for a successful execution. You can either provide one base and top level for all shafts or have unique levels for each shaft instance., Sheet.Views+ - Extracts all views placed on the input sheet(s).  Will be depreciated once the bult in node works with all plan types., Star.ByCenterRadiusRays - Fun little node to create star shapes., Str2Ln - De-serilize a Revit parameter string into a geometric line., Str2Pt - De-serilize a Revit parameter string into a geometric point., Topography.ToPolySurface - Optimized algorithm for converting topographies into polysurfaces. Tested with topographies containing up to 40 000 points. \r\nWarning conversions of such mangitudes consume a lot of resources and are sub-optimal. Ensure that you have plenty at least 8GB of ram and patience before attempting such a conversion, otherwise your Dynamo and Revit instances may crash., ViewSet.ByViewsName - Creates a set of views(or sheets) for printing. If the set exists, set Overwrite to true to replace it., Wall.WallType - Queries the wall type of the input wall. Works for types from linked documents as well., WallType.Duplicate - Attemts to create duplicate wall types. If the wall type exists, it is appended to the end. Sets only the structural width of the wall. The width must be in feet.",
            "engine_metadata": "",
            "engine_version": "0.8.2.2392",
            "created": "2015-11-02T08:31:52.986Z",
            "full_dependency_versions": [ "82.3.3" ],
            "full_dependency_ids": [
              {
                "_id": "56077cf3662bf0e9080001ea",
                "name": "spring nodes"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "82.3.3"
          },
          {
            "_id": "56443b2e662bf0e908000323",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/484b14bd-7e83-43a7-b92b-888d3d1c0417gregPkg545.zip",
            "contents": "Active View - Selects the current document's active view. Supports more view types, Beams.FixExtents - Detects all beams from the input list with broken extents(actual length - cut length <  margin) and attemts to correct them., BoundingBox.Scale - Scales the bounding box in three dimensions according to it's center., Collector.CurrentSelection - Gets the currently selected elements. Connect a boolean switch to refresh the selection. Compatible with Revit 2016, Collector.ElementsInView - Selects all elements visible in the input view., Collector.FamilyInstances - Collects placed family instance elements from the document that match the name. Partially mathing elements are collected as well. If no matches are found, a list of all isntance names will be output., Collector.FamilyTypes - Collects non-system family types that fully match or partially match the provided names. If no matches are found, a list of all type names will be output., Collector.FloorTypes - Collects Floor types by name., Collector.LinkedInstanceElements - Extract elements by category from the selected linked instances. The transform vector can be used to get the exact location of the elements in the local file, Collector.Revisions - Collects all revisions from a specific date., Collector.Sheets - Search for sheets by either their name or their number. Use a false boolean switch to search by number., Collector.Views - Search for views based on naming. You can choose to either include or exclude schedules. Use the sheet collector for sheets., Collector.WallTypes - Collects wall types by name., Color2Decimal - Converts a Dynamo colour its Revit equivalent  decimal value., CurveLoop.Simplify - Attempts to simplify an open or a closed curve loop by connecting straight separate line segments into a single line., Decimal2Color - Converts a revit colour decimal value to its Dynamo equivalent., Dictionary.ByKeysValues - Dictionaries are an incredibly powerful tool for making associative sets between two equal length lists. The fitst list must be of unique strings (or numbers) and will be the key and the second list will be the matching values (it can be made up of geometry, elements, even other lists)\r\nThe search keys list will provide the coresponding value to the input key., DirectShape.ByGeometry - Convert the input geometry to DirectShape element inside the Revit document.  It supports solids or surfaces.It is based on an alternative process that uses a SAT import and can produce smooth surfaces. Each created DS will have a unique type. Make sure that each input geometry has a unique name. You can either feed a single category for all geometries or a unique category for each geometry - the node's lacing is set to longest by default., DirectShape.Transform - Copy the input DirectShape element with the help of a translation vector, similarly to the Geometry.Translate node. This method should prove much faster than Element.Copy, Doc.DeleteElements - Attempts to delete the input revit elements and returns the number of successfully deleted elements. Carefully observe the deleted elements count. It may be greater than the input list because hosted elements or tags will be deleted as well., Element.Copy - Copy the input Revit elements with the help of a translation vector, similarly to the Geometry.Translate node., Element.SetLocation - Attempts to modify the location of the input element. This can effectively add as a move comand in Revit. Works for both line based and point based elements., FamilyInstance.Rotation - Fetches the angle of rotation around the insertion point of a point based element. The angle is always measured counter-clockwise., FamilyType.Duplicate - Create duplicate family types with the specified name. If the type exists, it is called., Feet2Fraction - Converts a decimal foot value to a fractional foot/inch string., File.Size - Checks the file size. Provide a file path as a string., Filter.ByCategoryName - Filters the input elements by their category name. You can input multiple category names., Filter.ByClassName - Filters a list of objects by the object's class name. Note that Dynamo elements belong to different classes than their Revit counterparts. Use the Object.Class node to check an object's class., Floor-WallType.SetMaterial - Sets a new material to the structural core of the provided floor and wall types., FloorOpening.ByCurves - Create hosted floor opeinngs through the input floors. The second input is a list of sub-lists of the boundary curves., FloorType.Duplicate - Attemts to create duplicate floor types. If the floor type exists, it is appended to the end. Sets only the structural width of the floor. The width must be in feet., Fn.ElementsOfCategory - Same as the built in \"All Elements of Category\" but can act as a function object., Form.ByGeometry - Convert the input geometry to a Revit Form object. Forms can exist only in the family environment. You can convert complicated solids or surfaces directly into forms. A form can act as a void. Provide either one true boolean value to convert a form into a void. The node's lacing is set to longest by default., Fraction2Feet - Converts a fractioned feet /inch string value into a decimal foot value., Geometry.SplitRecursively - Splits a surface or a solid recursively, using the resulting reduced geometry for every next split., HostedInstance.ByPoints - Creates hosted family instances(doors/windows) at the specified points. You can feed either a single family type or a unique type for each instance., Input.Wait - Waits for all inputs to be completed before continuing the execution process.Part of the SmartCopyMon workflow., Lines.Group&FixCorners - Groups unconnected lines into sub-lists by margin(the maximum distance between endpoints) and attempts to create clean corner connections between them. Built on top of the Group curves node found in archi-lab.net., List.DropFirstLast - Removes the first and last items from the list, List.DropLast - Removes the last value of the list., List.EveryOther - Useful for when you want to combine an item on the list with every other item on the list. For example in list {1,2,3} , \"2\" will be paired up only with \"1\" and \"3\" and will not be paired up with itself., List.GetEven - Gets even indices from the list., List.GetOdd - Gets the odd indices from the list., List.Randomise&Divide - Shiffles the input list and divides it into sub-lists based on ratios(1/4 + 1/2 + 1/4 will give you three lists split accordingly) The smalest ratio will always be 1 / the list length and the largest ratio will be 1. A seed input can shuffle the list further., List.ShiftIndices+ - The built in node fails if the shift number is greater than the lenght of the list. This node acts as a work-around., Ln2Str - Serilize a geometry line to a string for use in Revit parameters, Math.AlmostEqual - Checks if a number is almost equal to a value with a specified tollerance., NullAllIndicesOf - list all of the indices of a list that match the specified value. Capable of handling null values, part of the SmartCopyMonitor workflow., NullGetParameter - Similar to the built in node.Capable of handling null values, part of the SmartCopyMonitor workflow., NullIndexOf - Similar to the bult-in node but provides a null value instead of -1 of failure. Part of the SmartCopyMonitor workflow., NullReorder - Simiar to the built-in function with the difference that it can handle null indices. Part of the SmartCopyMonitor workflow., NullSetDifference - Similar to the built in node, with a built-in safety for null values. Part of the SmartCopyMonitor workflow., NullSetParameter - Similar to the built-in function but with the ability to handle null values. Part of the SmartCopyMon workflow., Number.ToString - Converts the input number(s) to string. Can process lists., Object.Class - Gets the input object's class name. Can process lists., Pt2Str - Serilize a geometry point to a string for use in Revit parameters, Select Linked Element - Select the linked instance first, followed by the element. If your selection fails, just press escape.\r\nTo refresh the node, connect a boolean switch node., Select Linked Elements - Select the linked instance first, followed by the elements. To finish the selection, press Finish. If your selection fails, just press escape or Cancel.\r\nTo refresh the node, connect a boolean switch node., SelectInRevit - Selects the input elements in Revit. Works with Revit 2016., Shaft.ByCurves - Creates a shaft opening. The top level MUST be higher than the base level for a successful execution. You can either provide one base and top level for all shafts or have unique levels for each shaft instance., Sheet.Views+ - Extracts all views placed on the input sheet(s).  Will be depreciated once the bult in node works with all plan types., Star.ByCenterRadiusRays - Fun little node to create star shapes., Str2Ln - De-serilize a Revit parameter string into a geometric line., Str2Pt - De-serilize a Revit parameter string into a geometric point., Topography.ToPolySurface - Optimized algorithm for converting topographies into polysurfaces. Tested with topographies containing up to 40 000 points. \r\nWarning conversions of such mangitudes consume a lot of resources and are sub-optimal. Ensure that you have plenty at least 8GB of ram and patience before attempting such a conversion, otherwise your Dynamo and Revit instances may crash., ViewSet.ByViewsName - Creates a set of views(or sheets) for printing. If the set exists, set Overwrite to true to replace it., Wall.WallType - Queries the wall type of the input wall. Works for types from linked documents as well., WallType.Duplicate - Attemts to create duplicate wall types. If the wall type exists, it is appended to the end. Sets only the structural width of the wall. The width must be in feet.",
            "engine_metadata": "",
            "engine_version": "0.8.2.2392",
            "created": "2015-11-12T07:09:34.207Z",
            "full_dependency_versions": [ "82.4.0" ],
            "full_dependency_ids": [
              {
                "_id": "56077cf3662bf0e9080001ea",
                "name": "spring nodes"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "82.4.0"
          },
          {
            "_id": "564b3991662bf0e908000345",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/58720055-ff13-45d9-bab9-6c86e4f9c669gregPkg886.zip",
            "contents": "Active View - Selects the current document's active view. Supports more view types, Beams.FixExtents - Detects all beams from the input list with broken extents(actual length - cut length <  margin) and attemts to correct them., BoundingBox.Scale - Scales the bounding box in three dimensions according to it's center., Collector.CurrentSelection - Gets the currently selected elements. Connect a boolean switch to refresh the selection. Compatible with Revit 2016, Collector.ElementsInView - Selects all elements visible in the input view., Collector.FamilyInstances - Collects placed family instance elements from the document that match the name. Partially mathing elements are collected as well. If no matches are found, a list of all isntance names will be output., Collector.FamilyTypes - Collects non-system family types that fully match or partially match the provided names. If no matches are found, a list of all type names will be output., Collector.FloorTypes - Collects Floor types by name., Collector.LinkedInstanceElements - Extract elements by category from the selected linked instances. The transform vector can be used to get the exact location of the elements in the local file, Collector.Revisions - Collects all revisions from a specific date., Collector.Sheets - Search for sheets by either their name or their number. Use a false boolean switch to search by number., Collector.Views - Search for views based on naming. You can choose to either include or exclude schedules. Use the sheet collector for sheets., Collector.WallTypes - Collects wall types by name., Color2Decimal - Converts a Dynamo colour its Revit equivalent  decimal value., CurveLoop.Simplify - Attempts to simplify an open or a closed curve loop by connecting straight separate line segments into a single line., Decimal2Color - Converts a revit colour decimal value to its Dynamo equivalent., Dictionary.ByKeysValues - Dictionaries are an incredibly powerful tool for making associative sets between two equal length lists. The fitst list must be of unique strings (or numbers) and will be the key and the second list will be the matching values (it can be made up of geometry, elements, even other lists)\r\nThe search keys list will provide the coresponding value to the input key., DirectShape.ByGeometry - Convert the input geometry to DirectShape element inside the Revit document.  It supports solids or surfaces.It is based on an alternative process that uses a SAT import and can produce smooth surfaces. Each created DS will have a unique type. Make sure that each input geometry has a unique name. You can either feed a single category for all geometries or a unique category for each geometry - the node's lacing is set to longest by default., DirectShape.Transform - Copy the input DirectShape element with the help of a translation vector, similarly to the Geometry.Translate node. This method should prove much faster than Element.Copy, Doc.DeleteElements - Attempts to delete the input revit elements and returns the number of successfully deleted elements. Carefully observe the deleted elements count. It may be greater than the input list because hosted elements or tags will be deleted as well., Element.Copy - Copy the input Revit elements with the help of a translation vector, similarly to the Geometry.Translate node., Element.SetLocation - Attempts to modify the location of the input element. This can effectively add as a move comand in Revit. Works for both line based and point based elements., FamilyInstance.ByGeometry - You must provide a valid family template path that will be used for all input geometry objects. The project units(and not the templates) will be used to determine the size of the output geometry.\r\nThe provided category will be used only if the family template supports it. If not, the default template category will be used instead.\r\nLikewise, the family material(provided as a string) will be set only if a material with that name exists in the template. If not, the default material will be used instead (\"By Category\").\r\nFor void cuts, the material settings will be ignored.\r\nThe output is the resulting family and an instance aligned according to the project document's origin.\r\nThe node expects a unique family name for each geometry object. The rest of the input lists will be processed as if the node lacing is set to longest., FamilyInstance.Rotation - Fetches the angle of rotation around the insertion point of a point based element. The angle is always measured counter-clockwise., FamilyType.Duplicate - Create duplicate family types with the specified name. If the type exists, it is called., Feet2Fraction - Converts a decimal foot value to a fractional foot/inch string., File.Size - Checks the file size. Provide a file path as a string., Filter.ByCategoryName - Filters the input elements by their category name. You can input multiple category names., Filter.ByClassName - Filters a list of objects by the object's class name. Note that Dynamo elements belong to different classes than their Revit counterparts. Use the Object.Class node to check an object's class., Filter.BySelection - Check the items that you'd like to filter in., Floor-WallType.SetMaterial - Sets a new material to the structural core of the provided floor and wall types., FloorOpening.ByCurves - Create hosted floor opeinngs through the input floors. The second input is a list of sub-lists of the boundary curves., FloorType.Duplicate - Attemts to create duplicate floor types. If the floor type exists, it is appended to the end. Sets only the structural width of the floor. The width must be in feet., Fn.ElementsOfCategory - Same as the built in \"All Elements of Category\" but can act as a function object., Form.ByGeometry - Convert the input geometry to a Revit Form object. Forms can exist only in the family environment. You can convert complicated solids or surfaces directly into forms. A form can act as a void. Provide either one true boolean value to convert a form into a void. The node's lacing is set to longest by default., Fraction2Feet - Converts a fractioned feet /inch string value into a decimal foot value., Geometry.SplitRecursively - Splits a surface or a solid recursively, using the resulting reduced geometry for every next split., HostedInstance.ByPoints - Creates hosted family instances(doors/windows) at the specified points. You can feed either a single family type or a unique type for each instance., Input.Wait - Waits for all inputs to be completed before continuing the execution process.Part of the SmartCopyMon workflow., Lines.Group&FixCorners - Groups unconnected lines into sub-lists by margin(the maximum distance between endpoints) and attempts to create clean corner connections between them. Built on top of the Group curves node found in archi-lab.net., List.DropDown - Select one item from the list from a drop-down combo box., List.DropFirstLast - Removes the first and last items from the list, List.DropLast - Removes the last value of the list., List.EveryOther - Useful for when you want to combine an item on the list with every other item on the list. For example in list {1,2,3} , \"2\" will be paired up only with \"1\" and \"3\" and will not be paired up with itself., List.GetEven - Gets even indices from the list., List.GetOdd - Gets the odd indices from the list., List.Randomise&Divide - Shiffles the input list and divides it into sub-lists based on ratios(1/4 + 1/2 + 1/4 will give you three lists split accordingly) The smalest ratio will always be 1 / the list length and the largest ratio will be 1. A seed input can shuffle the list further., List.ShiftIndices+ - The built in node fails if the shift number is greater than the lenght of the list. This node acts as a work-around., Ln2Str - Serilize a geometry line to a string for use in Revit parameters, Math.AlmostEqual - Checks if a number is almost equal to a value with a specified tollerance., N-hedron.ByOriginVector - Creates a multi-sided poyhedron with defined side length and total height., NullAllIndicesOf - list all of the indices of a list that match the specified value. Capable of handling null values, part of the SmartCopyMonitor workflow., NullGetParameter - Similar to the built in node.Capable of handling null values, part of the SmartCopyMonitor workflow., NullIndexOf - Similar to the bult-in node but provides a null value instead of -1 of failure. Part of the SmartCopyMonitor workflow., NullReorder - Simiar to the built-in function with the difference that it can handle null indices. Part of the SmartCopyMonitor workflow., NullSetDifference - Similar to the built in node, with a built-in safety for null values. Part of the SmartCopyMonitor workflow., NullSetParameter - Similar to the built-in function but with the ability to handle null values. Part of the SmartCopyMon workflow., Number.ToString - Converts the input number(s) to string. Can process lists., Object.Class - Gets the input object's class name. Can process lists., Pt2Str - Serilize a geometry point to a string for use in Revit parameters, Select Linked Element - Select the linked instance first, followed by the element. If your selection fails, just press escape.\r\nTo refresh the node, connect a boolean switch node., Select Linked Elements - Select the linked instance first, followed by the elements. To finish the selection, press Finish. If your selection fails, just press escape or Cancel.\r\nTo refresh the node, connect a boolean switch node., SelectInRevit - Selects the input elements in Revit. Works with Revit 2016., Shaft.ByCurves - Creates a shaft opening. The top level MUST be higher than the base level for a successful execution. You can either provide one base and top level for all shafts or have unique levels for each shaft instance., Sheet.Views+ - Extracts all views placed on the input sheet(s).  Will be depreciated once the bult in node works with all plan types., Star.ByCenterRadiusRays - Fun little node to create star shapes., Str2Ln - De-serilize a Revit parameter string into a geometric line., Str2Pt - De-serilize a Revit parameter string into a geometric point., Topography.ToPolySurface - Optimized algorithm for converting topographies into polysurfaces. Tested with topographies containing up to 40 000 points. \r\nWarning conversions of such mangitudes consume a lot of resources and are sub-optimal. Ensure that you have plenty at least 8GB of ram and patience before attempting such a conversion, otherwise your Dynamo and Revit instances may crash., ViewSet.ByViewsName - Creates a set of views(or sheets) for printing. If the set exists, set Overwrite to true to replace it., Wall.WallType - Queries the wall type of the input wall. Works for types from linked documents as well., WallType.Duplicate - Attemts to create duplicate wall types. If the wall type exists, it is appended to the end. Sets only the structural width of the wall. The width must be in feet.",
            "engine_metadata": "",
            "engine_version": "0.8.2.2392",
            "created": "2015-11-17T14:28:33.255Z",
            "full_dependency_versions": [ "82.5.0" ],
            "full_dependency_ids": [
              {
                "_id": "56077cf3662bf0e9080001ea",
                "name": "spring nodes"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "82.5.0"
          },
          {
            "_id": "566413f30370b0a90700005b",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/e2312a3b-91b9-47ca-b608-b04955794c62gregPkg110.zip",
            "contents": "Active View - Selects the current document's active view. Supports more view types, Beams.FixExtents - Detects all beams from the input list with broken extents(actual length - cut length <  margin) and attemts to correct them., BoundingBox.Scale - Scales the bounding box in three dimensions according to it's center., ClosedCurve.Offset+(0.9) - Offsets a curve both ways and correctly differenciates the external and internal offset. If an offset goes beyond the curve's bounds, the result will fail and a null value will be appended instead. Also works for convex curves like arcs., ClosedCurve.Offset+ - Offsets a curve both ways and correctly differenciates the external and internal offset. If an offset goes beyond the curve's bounds, the result will fail and a null value will be appended instead. Also works for convex curves like arcs., Collector.CurrentSelection - Gets the currently selected elements. Connect a boolean switch to refresh the selection. Compatible with Revit 2016, Collector.ElementsInView - Selects all elements visible in the input view., Collector.FamilyInstances - Collects placed family instance elements from the document that match the name. Partially mathing elements are collected as well. If no matches are found, a list of all isntance names will be output., Collector.FamilyTypes - Collects non-system family types that fully match or partially match the provided names. If no matches are found, a list of all type names will be output., Collector.FloorTypes - Collects Floor types by name., Collector.LinkedInstanceElements - Extract elements by category from the selected linked instances. The transform vector can be used to get the exact location of the elements in the local file, Collector.Revisions - Collects all revisions from a specific date., Collector.Sheets - Search for sheets by either their name or their number. Use a false boolean switch to search by number., Collector.Views - Search for views based on naming. You can choose to either include or exclude schedules. Use the sheet collector for sheets., Collector.WallTypes - Collects wall types by name., Color2Decimal - Converts a Dynamo colour its Revit equivalent  decimal value., Curve.Offset+ - Offsets a curve towards the specified point, CurveLoop.Simplify - Attempts to simplify an open or a closed curve loop by connecting straight separate line segments into a single line., Decimal2Color - Converts a revit colour decimal value to its Dynamo equivalent., Dictionary.ByKeysValues - Dictionaries are an incredibly powerful tool for making associative sets between two equal length lists. The fitst list must be of unique strings (or numbers) and will be the key and the second list will be the matching values (it can be made up of geometry, elements, even other lists)\r\nThe search keys list will provide the coresponding value to the input key., DirectShape.ByGeometry - Convert the input geometry to DirectShape element inside the Revit document.  It supports solids or surfaces.It is based on an alternative process that uses a SAT import and can produce smooth surfaces. Each created DS will have a unique type. Make sure that each input geometry has a unique name. You can either feed a single category for all geometries or a unique category for each geometry - the node's lacing is set to longest by default., DirectShape.Transform - Copy the input DirectShape element with the help of a translation vector, similarly to the Geometry.Translate node. This method should prove much faster than Element.Copy, Doc.DeleteElements - Attempts to delete the input revit elements and returns the number of successfully deleted elements. Carefully observe the deleted elements count. It may be greater than the input list because hosted elements or tags will be deleted as well., Element.AddVoidCut - Accepts single or list inputs. If an element that can be cut and a family that can act as a void cutting entity are provided, the element will be cut. Please make sure that the geometries of the elements actually cut. Otherwise an empty cut will be created that may impede the performance of your file. Add void cuts sparcely because they affect the size of your project., Element.Copy - Copy the input Revit elements with the help of a translation vector, similarly to the Geometry.Translate node., Element.IsCut - Tests if the element is being cut by any void instances. If any cuts exist all cutting elements will be provided., Element.IsCutting - Tests if the input element (or elements) is a void cut and if it is cutting any elements. In such cases, the cut elements will be provided., Element.RemoveVoidCut - Removes the void cut between the input elements, if such exists., Element.SetLocation - Attempts to modify the location of the input element. This can effectively add as a move comand in Revit. Works for both line based and point based elements., FamilyInstance.ByGeometry - You must provide a valid family template path that will be used for all input geometry objects. The project units(and not the templates) will be used to determine the size of the output geometry.\r\nThe provided category will be used only if the family template supports it. If not, the default template category will be used instead.\r\nLikewise, the family material(provided as a string) will be set only if a material with that name exists in the template. If not, the default material will be used instead (\"By Category\").\r\nFor void cuts, the material settings will be ignored.\r\nThe output is the resulting family and an instance aligned according to the project document's origin.\r\nThe node expects a unique family name for each geometry object. The rest of the input lists will be processed as if the node lacing is set to longest., FamilyInstance.Rotation - Fetches the angle of rotation around the insertion point of a point based element. The angle is always measured counter-clockwise., FamilyType.Duplicate - Create duplicate family types with the specified name. If the type exists, it is called., Feet2Fraction - Converts a decimal foot value to a fractional foot/inch string., File.Size - Checks the file size. Provide a file path as a string., Filter.ByCategoryName - Filters the input elements by their category name. You can input multiple category names., Filter.ByClassName - Filters a list of objects by the object's class name. Note that Dynamo elements belong to different classes than their Revit counterparts. Use the Object.Class node to check an object's class., Filter.BySelection - Check the items that you'd like to filter in., Floor-WallType.SetMaterial - Sets a new material to the structural core of the provided floor and wall types., FloorOpening.ByCurves - Create hosted floor opeinngs through the input floors. The second input is a list of sub-lists of the boundary curves., FloorType.Duplicate - Attemts to create duplicate floor types. If the floor type exists, it is appended to the end. Sets only the structural width of the floor. The width must be in feet., Fn.ElementsOfCategory - Same as the built in \"All Elements of Category\" but can act as a function object., Form.ByGeometry - Convert the input geometry to a Revit Form object. Forms can exist only in the family environment. You can convert complicated solids or surfaces directly into forms. A form can act as a void. Provide either one true boolean value to convert a form into a void. The node's lacing is set to longest by default., Fraction2Feet - Converts a fractioned feet /inch string value into a decimal foot value., Geometry.SplitRecursively - Splits a surface or a solid recursively, using the resulting reduced geometry for every next split., HostedInstance.ByPoints - Creates hosted family instances(doors/windows) at the specified points. You can feed either a single family type or a unique type for each instance., Input.Wait - Waits for all inputs to be completed before continuing the execution process.Part of the SmartCopyMon workflow., Line.StraightenXY - Checks a line's end points for irregularities and corrects them if they are at or below the specified margin. The default margin is 1/5000 of the curve length, which is conservative., Line.StraightenZ - Checks a line's end points for irregularities in  the Z axis and corrects them if they are at or below the specified margin. The default margin is 1/2000 of the curve length, which is conservative., Lines.Group&FixCorners - Groups unconnected lines into sub-lists by margin(the maximum distance between endpoints) and attempts to create clean corner connections between them. Built on top of the Group curves node found in archi-lab.net., List.DropDown - Select one item from the list from a drop-down combo box., List.DropFirstLast - Removes the first and last items from the list, List.DropLast - Removes the last value of the list., List.EveryOther - Useful for when you want to combine an item on the list with every other item on the list. For example in list {1,2,3} , \"2\" will be paired up only with \"1\" and \"3\" and will not be paired up with itself., List.GetEven - Gets even indices from the list., List.GetOdd - Gets the odd indices from the list., List.Randomise&Divide - Shiffles the input list and divides it into sub-lists based on ratios(1/4 + 1/2 + 1/4 will give you three lists split accordingly) The smalest ratio will always be 1 / the list length and the largest ratio will be 1. A seed input can shuffle the list further., List.ShiftIndices+ - The built in node fails if the shift number is greater than the lenght of the list. This node acts as a work-around., List.Split - Splits a list at the desired length, Ln2Str - Serilize a geometry line to a string for use in Revit parameters, Math.AlmostEqual - Checks if a number is almost equal to a value with a specified tollerance., N-hedron.ByOriginVector - Creates a multi-sided poyhedron with defined side length and total height., NullAllIndicesOf - list all of the indices of a list that match the specified value. Capable of handling null values, part of the SmartCopyMonitor workflow., NullGetParameter - Similar to the built in node.Capable of handling null values, part of the SmartCopyMonitor workflow., NullIndexOf - Similar to the bult-in node but provides a null value instead of -1 of failure. Part of the SmartCopyMonitor workflow., NullReorder - Simiar to the built-in function with the difference that it can handle null indices. Part of the SmartCopyMonitor workflow., NullSetDifference - Similar to the built in node, with a built-in safety for null values. Part of the SmartCopyMonitor workflow., NullSetParameter - Similar to the built-in function but with the ability to handle null values. Part of the SmartCopyMon workflow., Number.ToString - Converts the input number(s) to string. Can process lists., Object.Class - Gets the input object's class name. Can process lists., Pt2Str - Serilize a geometry point to a string for use in Revit parameters, Select Linked Element - Select the linked instance first, followed by the element. If your selection fails, just press escape.\r\nTo refresh the node, connect a boolean switch node., Select Linked Elements - Select the linked instance first, followed by the elements. To finish the selection, press Finish. If your selection fails, just press escape or Cancel.\r\nTo refresh the node, connect a boolean switch node., Select Linked Face - Select the linked instance first, followed by the face. If your selection fails, just press escape.\r\nTo refresh the node, connect a boolean switch node., SelectInRevit - Selects the input elements in Revit. Works with Revit 2016., Shaft.ByCurves - Creates a shaft opening. The top level MUST be higher than the base level for a successful execution. You can either provide one base and top level for all shafts or have unique levels for each shaft instance., Sheet.Views+ - Extracts all views placed on the input sheet(s).  Will be depreciated once the bult in node works with all plan types., Star.ByCenterRadiusRays - Fun little node to create star shapes., Str2Ln - De-serilize a Revit parameter string into a geometric line., Str2Pt - De-serilize a Revit parameter string into a geometric point., Topography.ToPolySurface - Optimized algorithm for converting topographies into polysurfaces. Tested with topographies containing up to 40 000 points. \r\nWarning conversions of such mangitudes consume a lot of resources and are sub-optimal. Ensure that you have plenty at least 8GB of ram and patience before attempting such a conversion, otherwise your Dynamo and Revit instances may crash., ViewSet.ByViewsName - Creates a set of views(or sheets) for printing. If the set exists, set Overwrite to true to replace it., Wall.WallType - Queries the wall type of the input wall. Works for types from linked documents as well., WallType.Duplicate - Attemts to create duplicate wall types. If the wall type exists, it is appended to the end. Sets only the structural width of the wall. The width must be in feet.",
            "engine_metadata": "",
            "engine_version": "0.8.2.2392",
            "created": "2015-12-06T10:54:43.320Z",
            "full_dependency_versions": [ "82.6.1" ],
            "full_dependency_ids": [
              {
                "_id": "56077cf3662bf0e9080001ea",
                "name": "spring nodes"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "82.6.1"
          },
          {
            "_id": "569276cf5c568ad00c0000a8",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/4867f1a7-7563-4de7-9f7f-7af51e2b140dgregPkg897.zip",
            "contents": "Active View - Selects the current document's active view. Supports more view types, Beams.FixExtents - Detects all beams from the input list with broken extents(actual length - cut length <  margin) and attemts to correct them., BoundingBox.Scale - Scales the bounding box in three dimensions according to it's center., ClosedCurve.Offset+(0.9) - Offsets a curve both ways and correctly differenciates the external and internal offset. If an offset goes beyond the curve's bounds, the result will fail and a null value will be appended instead. Also works for convex curves like arcs., ClosedCurve.Offset+ - Offsets a curve both ways and correctly differenciates the external and internal offset. If an offset goes beyond the curve's bounds, the result will fail and a null value will be appended instead. Also works for convex curves like arcs., Collector.CurrentSelection - Gets the currently selected elements. Connect a boolean switch to refresh the selection. Compatible with Revit 2016, Collector.ElementsInView - Selects all elements visible in the input view., Collector.ElementSketch - Get the actual sketch lines of a sketch based element (floor, ceiling, modified wall, etc.) . You can optionally fetch the matching model curves, however this might prove comptationally heavy on larger data sets., Collector.FamilyInstances - Collects placed family instance elements from the document that match the name. Partially mathing elements are collected as well. If no matches are found, a list of all isntance names will be output., Collector.FamilyTypes - Collects non-system family types that fully match or partially match the provided names. If no matches are found, a list of all type names will be output., Collector.FloorTypes - Collects Floor types by name., Collector.LinkedInstanceElements - Extract elements by category from the selected linked instances. The transform vector can be used to get the exact location of the elements in the local file, Collector.Revisions - Collects all revisions from a specific date., Collector.Sheets - Search for sheets by either their name or their number. Use a false boolean switch to search by number., Collector.Views - Search for views based on naming. You can choose to either include or exclude schedules. Use the sheet collector for sheets., Collector.WallTypes - Collects wall types by name., Color2Decimal - Converts a Dynamo colour its Revit equivalent  decimal value., Curve.Offset+ - Offsets a curve towards the specified point, CurveLoop.Simplify - Attempts to simplify an open or a closed curve loop by connecting straight separate line segments into a single line., Decimal2Color - Converts a revit colour decimal value to its Dynamo equivalent., Dictionary.ByKeysValues - Dictionaries are an incredibly powerful tool for making associative sets between two equal length lists. The fitst list must be of unique strings (or numbers) and will be the key and the second list will be the matching values (it can be made up of geometry, elements, even other lists)\r\nThe search keys list will provide the coresponding value to the input key., DirectShape.ByGeometry - Convert the input geometry to DirectShape element inside the Revit document.  It supports solids or surfaces.It is based on an alternative process that uses a SAT import and can produce smooth surfaces. Each created DS will have a unique type. Make sure that each input geometry has a unique name. You can either feed a single category for all geometries or a unique category for each geometry - the node's lacing is set to longest by default., DirectShape.Transform - Copy the input DirectShape element with the help of a translation vector, similarly to the Geometry.Translate node. This method should prove much faster than Element.Copy, Doc.DeleteElements - Attempts to delete the input revit elements and returns the number of successfully deleted elements. Carefully observe the deleted elements count. It may be greater than the input list because hosted elements or tags will be deleted as well., Element.AddVoidCut - Accepts single or list inputs. If an element that can be cut and a family that can act as a void cutting entity are provided, the element will be cut. Please make sure that the geometries of the elements actually cut. Otherwise an empty cut will be created that may impede the performance of your file. Add void cuts sparcely because they affect the size of your project., Element.Copy - Copy the input Revit elements with the help of a translation vector, similarly to the Geometry.Translate node., Element.IsCut - Tests if the element is being cut by any void instances. If any cuts exist all cutting elements will be provided., Element.IsCutting - Tests if the input element (or elements) is a void cut and if it is cutting any elements. In such cases, the cut elements will be provided., Element.RemoveVoidCut - Removes the void cut between the input elements, if such exists., Element.SetLocation - Attempts to modify the location of the input element. This can effectively add as a move comand in Revit. Works for both line based and point based elements., FamilyInstance.ByGeometry - You must provide a valid family template path that will be used for all input geometry objects. The project units(and not the templates) will be used to determine the size of the output geometry.\r\nThe provided category will be used only if the family template supports it. If not, the default template category will be used instead.\r\nLikewise, the family material(provided as a string) will be set only if a material with that name exists in the template. If not, the default material will be used instead (\"By Category\").\r\nFor void cuts, the material settings will be ignored.\r\nThe Subcategory name is an optional input. If you'd like to skip assigning a Subcategory to any new instance, simply use null.\r\nThe node expects a unique family name for each geometry object. The rest of the input lists will be processed as if the node lacing is set to longest., FamilyInstance.Rotation - Fetches the angle of rotation around the insertion point of a point based element. The angle is always measured counter-clockwise., FamilyType.Duplicate - Create duplicate family types with the specified name. If the type exists, it is called., Feet2Fraction - Converts a decimal foot value to a fractional foot/inch string., File.Size - Checks the file size. Provide a file path as a string., Filter.ByCategoryName - Filters the input elements by their category name. You can input multiple category names., Filter.ByClassName - Filters a list of objects by the object's class name. Note that Dynamo elements belong to different classes than their Revit counterparts. Use the Object.Class node to check an object's class., Filter.BySelection - Check the items that you'd like to filter in.  Unchecked items will be sent to the out list., Floor-WallType.SetMaterial - Sets a new material to the structural core of the provided floor and wall types., FloorOpening.ByCurves - Create hosted floor opeinngs through the input floors. The second input is a list of sub-lists of the boundary curves., FloorType.Duplicate - Attemts to create duplicate floor types. If the floor type exists, it is appended to the end. Sets only the structural width of the floor. The width must be in feet., Fn.ElementsOfCategory - Same as the built in \"All Elements of Category\" but can act as a function object., Form.ByGeometry - Convert the input geometry to a Revit Form object. Forms can exist only in the family environment. You can convert complicated solids or surfaces directly into forms. A form can act as a void. Provide either one true boolean value to convert a form into a void. The node's lacing is set to longest by default., Fraction2Feet - Converts a fractioned feet /inch string value into a decimal foot value., Geometry.SplitRecursively - Splits a surface or a solid recursively, using the resulting reduced geometry for every next split., HostedInstance.ByPoints - Creates hosted family instances(doors/windows) at the specified points. You can feed either a single family type or a unique type for each instance., Input.Wait - Waits for all inputs to be completed before continuing the execution process.Part of the SmartCopyMon workflow., Line.StraightenXY - Checks a line's end points for irregularities and corrects them if they are at or below the specified margin. The default margin is 1/5000 of the curve length, which is conservative., Line.StraightenZ - Checks a line's end points for irregularities in  the Z axis and corrects them if they are at or below the specified margin. The default margin is 1/2000 of the curve length, which is conservative., Lines.Group&FixCorners - Groups unconnected lines into sub-lists by margin(the maximum distance between endpoints) and attempts to create clean corner connections between them. Built on top of the Group curves node found in archi-lab.net., List.DragDropReorder - Press and hold on an item to move it up or down the list. To confirm and close the window, select \"Save Order\", List.DropDown - Selects one list item by a drop-down combo box., List.DropFirstLast - Removes the first and last items from the list, List.DropLast - Removes the last value of the list., List.EveryOther - Useful for when you want to combine an item on the list with every other item on the list. For example in list {1,2,3} , \"2\" will be paired up only with \"1\" and \"3\" and will not be paired up with itself., List.GetEven - Gets even indices from the list., List.GetOdd - Gets the odd indices from the list., List.Randomise&Divide - Shiffles the input list and divides it into sub-lists based on ratios(1/4 + 1/2 + 1/4 will give you three lists split accordingly) The smalest ratio will always be 1 / the list length and the largest ratio will be 1. A seed input can shuffle the list further., List.ShiftIndices+ - The built in node fails if the shift number is greater than the lenght of the list. This node acts as a work-around., List.Split - Splits a list at the desired length, Ln2Str - Serilize a geometry line to a string for use in Revit parameters, Math.AlmostEqual - Checks if a number is almost equal to a value with a specified tollerance., N-hedron.ByOriginVector - Creates a multi-sided poyhedron with defined side length and total height., NullAllIndicesOf - list all of the indices of a list that match the specified value. Capable of handling null values, part of the SmartCopyMonitor workflow., NullGetParameter - Similar to the built in node.Capable of handling null values, part of the SmartCopyMonitor workflow., NullIndexOf - Similar to the bult-in node but provides a null value instead of -1 of failure. Part of the SmartCopyMonitor workflow., NullReorder - Simiar to the built-in function with the difference that it can handle null indices. Part of the SmartCopyMonitor workflow., NullSetDifference - Similar to the built in node, with a built-in safety for null values. Part of the SmartCopyMonitor workflow., NullSetParameter - Similar to the built-in function but with the ability to handle null values. Part of the SmartCopyMon workflow., Number.ToString - Converts the input number(s) to string. Can process lists., Object.Class - Gets the input object's class name. Can process lists., Point.PullOntoPlane - Pulls (projects) the point onto the input plane, following the plane normal., Pt2Str - Serilize a geometry point to a string for use in Revit parameters, Select Edges - Select multiple edges from inside the Revit UI. Be sure to press \"Finish\" once done. You can use a Boolean toggle to refresh your selection., Select Linked Element - Select the linked instance first, followed by the element. If your selection fails, just press escape.\r\nTo refresh the node, connect a boolean switch node., Select Linked Elements - Select the linked instance first, followed by the elements. To finish the selection, press Finish. If your selection fails, just press escape or Cancel.\r\nTo refresh the node, connect a boolean switch node., Select Linked Face - Select the linked instance first, followed by the face. If your selection fails, just press escape.\r\nTo refresh the node, connect a boolean switch node., SelectInRevit - Selects the input elements in Revit. Works with Revit 2016., Shaft.ByCurves - Creates a shaft opening. The top level MUST be higher than the base level for a successful execution. You can either provide one base and top level for all shafts or have unique levels for each shaft instance., Sheet.Views+ - Extracts all views placed on the input sheet(s).  Will be depreciated once the bult in node works with all plan types., Star.ByCenterRadiusRays - Fun little node to create star shapes., Str2Ln - De-serilize a Revit parameter string into a geometric line., Str2Pt - De-serilize a Revit parameter string into a geometric point., Topography.ToPolySurface - Optimized algorithm for converting topographies into polysurfaces. Tested with topographies containing up to 40 000 points. \r\nWarning conversions of such mangitudes consume a lot of resources and are sub-optimal. Ensure that you have plenty at least 8GB of ram and patience before attempting such a conversion, otherwise your Dynamo and Revit instances may crash., ViewSet.ByViewsName - Creates a set of views(or sheets) for printing. If the set exists, set Overwrite to true to replace it., Wall.WallType - Queries the wall type of the input wall. Works for types from linked documents as well., WallType.Duplicate - Attemts to create duplicate wall types. If the wall type exists, it is appended to the end. Sets only the structural width of the wall. The width must be in feet.",
            "engine_metadata": "",
            "engine_version": "0.8.2.2392",
            "created": "2016-01-10T15:20:47.230Z",
            "full_dependency_versions": [ "82.7.1" ],
            "full_dependency_ids": [
              {
                "_id": "56077cf3662bf0e9080001ea",
                "name": "spring nodes"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "82.7.1"
          },
          {
            "_id": "5697c4e4c6d90c553d000011",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/0357b3e4-79b8-4c72-b159-e9120011df53gregPkg843.zip",
            "contents": "Active View - Selects the current document's active view. Supports more view types, Beams.FixExtents - Detects all beams from the input list with broken extents(actual length - cut length <  margin) and attemts to correct them., BoundingBox.Scale - Scales the bounding box in three dimensions according to it's center., ClosedCurve.Offset+(0.9) - Offsets a curve both ways and correctly differenciates the external and internal offset. If an offset goes beyond the curve's bounds, the result will fail and a null value will be appended instead. Also works for convex curves like arcs., ClosedCurve.Offset+ - Offsets a curve both ways and correctly differenciates the external and internal offset. If an offset goes beyond the curve's bounds, the result will fail and a null value will be appended instead. Also works for convex curves like arcs., Collector.CurrentSelection - Gets the currently selected elements. Connect a boolean switch to refresh the selection. Compatible with Revit 2016, Collector.ElementsInView - Selects all elements visible in the input view., Collector.ElementSketch - Get the actual sketch lines of a sketch based element (floor, ceiling, modified wall, etc.) . You can optionally fetch the matching model curves, however this might prove comptationally heavy on larger data sets., Collector.FamilyInstances - Collects placed family instance elements from the document that match the name. Partially mathing elements are collected as well. If no matches are found, a list of all isntance names will be output., Collector.FamilyTypes - Collects non-system family types that fully match or partially match the provided names. If no matches are found, a list of all type names will be output., Collector.FloorTypes - Collects Floor types by name., Collector.LinkedInstanceElements - Extract elements by category from the selected linked instances. The transform vector can be used to get the exact location of the elements in the local file, Collector.Revisions - Collects all revisions from a specific date., Collector.Sheets - Search for sheets by either their name or their number. Use a false boolean switch to search by number., Collector.Views - Search for views based on naming. You can choose to either include or exclude schedules. Use the sheet collector for sheets., Collector.WallTypes - Collects wall types by name., Color2Decimal - Converts a Dynamo colour its Revit equivalent  decimal value., Curve.Offset+ - Offsets a curve towards the specified point, CurveLoop.Simplify - Attempts to simplify an open or a closed curve loop by connecting straight separate line segments into a single line., Decimal2Color - Converts a revit colour decimal value to its Dynamo equivalent., Dictionary.ByKeysValues - Dictionaries are an incredibly powerful tool for making associative sets between two equal length lists. The fitst list must be of unique strings (or numbers) and will be the key and the second list will be the matching values (it can be made up of geometry, elements, even other lists)\r\nThe search keys list will provide the coresponding value to the input key., DirectShape.ByGeometry - Convert the input geometry to DirectShape element inside the Revit document.  It supports solids or surfaces.It is based on an alternative process that uses a SAT import and can produce smooth surfaces. Each created DS will have a unique type. Make sure that each input geometry has a unique name. You can either feed a single category for all geometries or a unique category for each geometry - the node's lacing is set to longest by default., DirectShape.Transform - Copy the input DirectShape element with the help of a translation vector, similarly to the Geometry.Translate node. This method should prove much faster than Element.Copy, Doc.DeleteElements - Attempts to delete the input revit elements and returns the number of successfully deleted elements. Carefully observe the deleted elements count. It may be greater than the input list because hosted elements or tags will be deleted as well., Element.AddVoidCut - Accepts single or list inputs. If an element that can be cut and a family that can act as a void cutting entity are provided, the element will be cut. Please make sure that the geometries of the elements actually cut. Otherwise an empty cut will be created that may impede the performance of your file. Add void cuts sparcely because they affect the size of your project., Element.Copy - Copy the input Revit elements with the help of a translation vector, similarly to the Geometry.Translate node., Element.IsCut - Tests if the element is being cut by any void instances. If any cuts exist all cutting elements will be provided., Element.IsCutting - Tests if the input element (or elements) is a void cut and if it is cutting any elements. In such cases, the cut elements will be provided., Element.RemoveVoidCut - Removes the void cut between the input elements, if such exists., Element.SetLocation - Attempts to modify the location of the input element. This can effectively add as a move comand in Revit. Works for both line based and point based elements., ErrorReport.Parse - Process a Revit error report (HTML file) and extract the error types, all affected elements and the total number of errors. If you are executing from a document different than the one the error report belongs to, be sure to set \"fetch_elements\" to false., FamilyInstance.ByGeometry - You must provide a valid family template path that will be used for all input geometry objects. The project units(and not the templates) will be used to determine the size of the output geometry.\r\nThe provided category will be used only if the family template supports it. If not, the default template category will be used instead.\r\nLikewise, the family material(provided as a string) will be set only if a material with that name exists in the template. If not, the default material will be used instead (\"By Category\").\r\nFor void cuts, the material settings will be ignored.\r\nThe Subcategory name is an optional input. If you'd like to skip assigning a Subcategory to any new instance, simply use null.\r\nThe node expects a unique family name for each geometry object. The rest of the input lists will be processed as if the node lacing is set to longest., FamilyInstance.Rotation - Fetches the angle of rotation around the insertion point of a point based element. The angle is always measured counter-clockwise., FamilyType.Duplicate - Create duplicate family types with the specified name. If the type exists, it is called., Feet2Fraction - Converts a decimal foot value to a fractional foot/inch string., File.Size - Checks the file size. Provide a file path as a string., Filter.ByCategoryName - Filters the input elements by their category name. You can input multiple category names., Filter.ByClassName - Filters a list of objects by the object's class name. Note that Dynamo elements belong to different classes than their Revit counterparts. Use the Object.Class node to check an object's class., Filter.BySelection - Check the items that you'd like to filter in.  Unchecked items will be sent to the out list., Floor-WallType.SetMaterial - Sets a new material to the structural core of the provided floor and wall types., FloorOpening.ByCurves - Create hosted floor opeinngs through the input floors. The second input is a list of sub-lists of the boundary curves., FloorType.Duplicate - Attemts to create duplicate floor types. If the floor type exists, it is appended to the end. Sets only the structural width of the floor. The width must be in feet., Fn.ElementsOfCategory - Same as the built in \"All Elements of Category\" but can act as a function object., Form.ByGeometry - Convert the input geometry to a Revit Form object. Forms can exist only in the family environment. You can convert complicated solids or surfaces directly into forms. A form can act as a void. Provide either one true boolean value to convert a form into a void. The node's lacing is set to longest by default., Fraction2Feet - Converts a fractioned feet /inch string value into a decimal foot value., Geometry.SplitRecursively - Splits a surface or a solid recursively, using the resulting reduced geometry for every next split., HostedInstance.ByPoints - Creates hosted family instances(doors/windows) at the specified points. You can feed either a single family type or a unique type for each instance., Input.Wait - Waits for all inputs to be completed before continuing the execution process.Part of the SmartCopyMon workflow., InterferenceCheck.Parse - Process a Revit interference check (HTML file) and extract the interference categories, all affected elements and the total number of clashes. If you are executing from a document different than the one the error report belongs to, be sure to set \"fetch_elements\" to false., Line.StraightenXY - Checks a line's end points for irregularities and corrects them if they are at or below the specified margin. The default margin is 1/5000 of the curve length, which is conservative., Line.StraightenZ - Checks a line's end points for irregularities in  the Z axis and corrects them if they are at or below the specified margin. The default margin is 1/2000 of the curve length, which is conservative., Lines.Group&FixCorners - Groups unconnected lines into sub-lists by margin(the maximum distance between endpoints) and attempts to create clean corner connections between them. Built on top of the Group curves node found in archi-lab.net., List.DragDropReorder - Press and hold on an item to move it up or down the list. To confirm and close the window, select \"Save Order\", List.DropDown - Selects one list item by a drop-down combo box., List.DropFirstLast - Removes the first and last items from the list, List.DropLast - Removes the last value of the list., List.EveryOther - Useful for when you want to combine an item on the list with every other item on the list. For example in list {1,2,3} , \"2\" will be paired up only with \"1\" and \"3\" and will not be paired up with itself., List.GetEven - Gets even indices from the list., List.GetOdd - Gets the odd indices from the list., List.Randomise&Divide - Shiffles the input list and divides it into sub-lists based on ratios(1/4 + 1/2 + 1/4 will give you three lists split accordingly) The smalest ratio will always be 1 / the list length and the largest ratio will be 1. A seed input can shuffle the list further., List.ShiftIndices+ - The built in node fails if the shift number is greater than the lenght of the list. This node acts as a work-around., List.Split - Splits a list at the desired length, Ln2Str - Serilize a geometry line to a string for use in Revit parameters, Math.AlmostEqual - Checks if a number is almost equal to a value with a specified tollerance., N-hedron.ByOriginVector - Creates a multi-sided poyhedron with defined side length and total height., NullAllIndicesOf - list all of the indices of a list that match the specified value. Capable of handling null values, part of the SmartCopyMonitor workflow., NullGetParameter - Similar to the built in node.Capable of handling null values, part of the SmartCopyMonitor workflow., NullIndexOf - Similar to the bult-in node but provides a null value instead of -1 of failure. Part of the SmartCopyMonitor workflow., NullReorder - Simiar to the built-in function with the difference that it can handle null indices. Part of the SmartCopyMonitor workflow., NullSetDifference - Similar to the built in node, with a built-in safety for null values. Part of the SmartCopyMonitor workflow., NullSetParameter - Similar to the built-in function but with the ability to handle null values. Part of the SmartCopyMon workflow., Number.ToString - Converts the input number(s) to string. Can process lists., Object.Class - Gets the input object's class name. Can process lists., Point.PullOntoPlane - Pulls (projects) the point onto the input plane, following the plane normal., Pt2Str - Serilize a geometry point to a string for use in Revit parameters, Select Edges - Select multiple edges from inside the Revit UI. Be sure to press \"Finish\" once done. You can use a Boolean toggle to refresh your selection., Select Linked Element - Select the linked instance first, followed by the element. If your selection fails, just press escape.\r\nTo refresh the node, connect a boolean switch node., Select Linked Elements - Select the linked instance first, followed by the elements. To finish the selection, press Finish. If your selection fails, just press escape or Cancel.\r\nTo refresh the node, connect a boolean switch node., Select Linked Face - Select the linked instance first, followed by the face. If your selection fails, just press escape.\r\nTo refresh the node, connect a boolean switch node., SelectInRevit - Selects the input elements in Revit. Works with Revit 2016., Shaft.ByCurves - Creates a shaft opening. The top level MUST be higher than the base level for a successful execution. You can either provide one base and top level for all shafts or have unique levels for each shaft instance., Sheet.Views+ - Extracts all views placed on the input sheet(s).  Will be depreciated once the bult in node works with all plan types., Star.ByCenterRadiusRays - Fun little node to create star shapes., Str2Ln - De-serilize a Revit parameter string into a geometric line., Str2Pt - De-serilize a Revit parameter string into a geometric point., Topography.ToPolySurface - Optimized algorithm for converting topographies into polysurfaces. Tested with topographies containing up to 40 000 points. \r\nWarning conversions of such mangitudes consume a lot of resources and are sub-optimal. Ensure that you have plenty at least 8GB of ram and patience before attempting such a conversion, otherwise your Dynamo and Revit instances may crash., ViewSet.ByViewsName - Creates a set of views(or sheets) for printing. If the set exists, set Overwrite to true to replace it., Wall.WallType - Queries the wall type of the input wall. Works for types from linked documents as well., WallType.Duplicate - Attemts to create duplicate wall types. If the wall type exists, it is appended to the end. Sets only the structural width of the wall. The width must be in feet.",
            "engine_metadata": "",
            "engine_version": "0.8.2.2392",
            "created": "2016-01-14T15:55:16.037Z",
            "full_dependency_versions": [ "82.7.2" ],
            "full_dependency_ids": [
              {
                "_id": "56077cf3662bf0e9080001ea",
                "name": "spring nodes"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "82.7.2"
          },
          {
            "_id": "56a8e534c3e9ee4a08000045",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/ec0125b2-1d5a-4b1a-8745-07dc97beeb0fgregPkg772.zip",
            "contents": "Active View - Selects the current document's active view. Supports more view types, Beams.FixExtents - Detects all beams from the input list with broken extents(actual length - cut length <  margin) and attemts to correct them., BoundingBox.Scale - Scales the bounding box in three dimensions according to it's center., ClosedCurve.Offset+(0.9) - Offsets a curve both ways and correctly differenciates the external and internal offset. If an offset goes beyond the curve's bounds, the result will fail and a null value will be appended instead. Also works for convex curves like arcs., ClosedCurve.Offset+ - Offsets a curve both ways and correctly differenciates the external and internal offset. If an offset goes beyond the curve's bounds, the result will fail and a null value will be appended instead. Also works for convex curves like arcs., Collector.CurrentSelection - Gets the currently selected elements. Connect a boolean switch to refresh the selection. Compatible with Revit 2016, Collector.ElementsInView - Selects all elements visible in the input view., Collector.ElementSketch - Get the actual sketch lines of a sketch based element (floor, ceiling, modified wall, etc.) . You can optionally fetch the matching model curves, however this might prove comptationally heavy on larger data sets., Collector.FamilyInstances - Collects placed family instance elements from the document that match the name. Partially mathing elements are collected as well. If no matches are found, a list of all isntance names will be output., Collector.FamilyTypes - Collects non-system family types that fully match or partially match the provided names. If no matches are found, a list of all type names will be output., Collector.FloorTypes - Collects Floor types by name., Collector.LinkedInstanceElements - Extract elements by category from the selected linked instances. The transform vector can be used to get the exact location of the elements in the local file, Collector.Revisions - Collects all revisions from a specific date., Collector.Sheets - Search for sheets by either their name or their number. Use a false boolean switch to search by number., Collector.Views - Search for views based on naming. You can choose to either include or exclude schedules. Use the sheet collector for sheets., Collector.WallTypes - Collects wall types by name., Color2Decimal - Converts a Dynamo colour its Revit equivalent  decimal value., Curve.Offset+ - Offsets a curve towards the specified point, CurveLoop.Simplify - Attempts to simplify an open or a closed curve loop by connecting straight separate line segments into a single line., Decimal2Color - Converts a revit colour decimal value to its Dynamo equivalent., Dictionary.ByKeysValues - Dictionaries are an incredibly powerful tool for making associative sets between two equal length lists. The fitst list must be of unique strings (or numbers) and will be the key and the second list will be the matching values (it can be made up of geometry, elements, even other lists)\r\nThe search keys list will provide the coresponding value to the input key., DirectShape.ByGeometry - Convert the input geometry to DirectShape element inside the Revit document.  It supports solids or surfaces.It is based on an alternative process that uses a SAT import and can produce smooth surfaces. Each created DS will have a unique type. Make sure that each input geometry has a unique name. You can either feed a single category for all geometries or a unique category for each geometry - the node's lacing is set to longest by default., DirectShape.Transform - Copy the input DirectShape element with the help of a translation vector, similarly to the Geometry.Translate node. This method should prove much faster than Element.Copy, Doc.DeleteElements - Attempts to delete the input revit elements and returns the number of successfully deleted elements. Carefully observe the deleted elements count. It may be greater than the input list because hosted elements or tags will be deleted as well., Element.AddVoidCut - Accepts single or list inputs. If an element that can be cut and a family that can act as a void cutting entity are provided, the element will be cut. Please make sure that the geometries of the elements actually cut. Otherwise an empty cut will be created that may impede the performance of your file. Add void cuts sparcely because they affect the size of your project., Element.Copy - WARNING: Do not use this node in Automatic mode! Copy the input Revit elements with the help of a translation vector, similarly to the Geometry.Translate node., Element.IsCut - Tests if the element is being cut by any void instances. If any cuts exist all cutting elements will be provided., Element.IsCutting - Tests if the input element (or elements) is a void cut and if it is cutting any elements. In such cases, the cut elements will be provided., Element.RemoveVoidCut - Removes the void cut between the input elements, if such exists., Element.SetLocation - Attempts to modify the location of the input element. This can effectively add as a move comand in Revit. Works for both line based and point based elements., ErrorReport.Parse - Process a Revit error report (HTML file) and extract the error types, all affected elements and the total number of errors. If you are executing from a document different than the one the error report belongs to, be sure to set \"fetch_elements\" to false., FamilyInstance.ByGeometry - You must provide a valid family template path that will be used for all input geometry objects. The project units(and not the templates) will be used to determine the size of the output geometry.\r\nThe provided category will be used only if the family template supports it. If not, the default template category will be used instead.\r\nLikewise, the family material(provided as a string) will be set only if a material with that name exists in the template. If not, the default material will be used instead (\"By Category\").\r\nFor void cuts, the material settings will be ignored.\r\nThe Subcategory name is an optional input. If you'd like to skip assigning a Subcategory to any new instance, simply use null.\r\nThe node expects a unique family name for each geometry object. The rest of the input lists will be processed as if the node lacing is set to longest., FamilyInstance.Rotation - Fetches the angle of rotation around the insertion point of a point based element. The angle is always measured counter-clockwise., FamilyType.Duplicate - Create duplicate family types with the specified name. If the type exists, it is called., Feet2Fraction - Converts a decimal foot value to a fractional foot/inch string., File.Size - Checks the file size. Provide a file path as a string., Filter.ByCategoryName - Filters the input elements by their category name. You can input multiple category names., Filter.ByClassName - Filters a list of objects by the object's class name. Note that Dynamo elements belong to different classes than their Revit counterparts. Use the Object.Class node to check an object's class., Filter.BySelection - Check the items that you'd like to filter in.  Unchecked items will be sent to the out list. The optional names input will override the object representation., Floor-WallType.SetMaterial - Sets a new material to the structural core of the provided floor and wall types., FloorOpening.ByCurves - Create hosted floor opeinngs through the input floors. The second input is a list of sub-lists of the boundary curves., FloorType.Duplicate - Attemts to create duplicate floor types. If the floor type exists, it is appended to the end. Sets only the structural width of the floor. The width must be in feet., Fn.ElementsOfCategory - Same as the built in \"All Elements of Category\" but can act as a function object., Form.ByGeometry - Convert the input geometry to a Revit Form object. Forms can exist only in the family environment. You can convert complicated solids or surfaces directly into forms. A form can act as a void. Provide either one true boolean value to convert a form into a void. The node's lacing is set to longest by default., Fraction2Feet - Converts a fractioned feet /inch string value into a decimal foot value., Geometry.SplitRecursively - Splits a surface or a solid recursively, using the resulting reduced geometry for every next split., HostedInstance.ByPoints - Creates hosted family instances(doors/windows) at the specified points. You can feed either a single family type or a unique type for each instance., Input.Wait - Waits for all inputs to be completed before continuing the execution process.Part of the SmartCopyMon workflow., InterferenceCheck.Parse - Process a Revit interference check (HTML file) and extract the interference categories, all affected elements and the total number of clashes. If you are executing from a document different than the one the error report belongs to, be sure to set \"fetch_elements\" to false., Line.StraightenXY - Checks a line's end points for irregularities and corrects them if they are at or below the specified margin. The default margin is 1/5000 of the curve length, which is conservative., Line.StraightenZ - Checks a line's end points for irregularities in  the Z axis and corrects them if they are at or below the specified margin. The default margin is 1/2000 of the curve length, which is conservative., Lines.Group&FixCorners - Groups unconnected lines into sub-lists by margin(the maximum distance between endpoints) and attempts to create clean corner connections between them. Built on top of the Group curves node found in archi-lab.net., List.DragDropReorder - Press and hold on an item to move it up or down the list. To confirm and close the window, select \"Save Order\". The optional names input will override the object representation., List.DropDown - Selects one list item by a drop-down combo box. The optional names input will override the object representation., List.DropFirstLast - Removes the first and last items from the list, List.DropLast - Removes the last value of the list., List.EveryOther - Useful for when you want to combine an item on the list with every other item on the list. For example in list {1,2,3} , \"2\" will be paired up only with \"1\" and \"3\" and will not be paired up with itself., List.GetEven - Gets even indices from the list., List.GetOdd - Gets the odd indices from the list., List.Randomise&Divide - Shiffles the input list and divides it into sub-lists based on ratios(1/4 + 1/2 + 1/4 will give you three lists split accordingly) The smalest ratio will always be 1 / the list length and the largest ratio will be 1. A seed input can shuffle the list further., List.ShiftIndices+ - The built in node fails if the shift number is greater than the lenght of the list. This node acts as a work-around., List.Split - Splits a list at the desired length, Ln2Str - Serilize a geometry line to a string for use in Revit parameters, Math.AlmostEqual - Checks if a number is almost equal to a value with a specified tollerance., N-hedron.ByOriginVector - Creates a multi-sided poyhedron with defined side length and total height., NullAllIndicesOf - list all of the indices of a list that match the specified value. Capable of handling null values, part of the SmartCopyMonitor workflow., NullGetParameter - Similar to the built in node.Capable of handling null values, part of the SmartCopyMonitor workflow., NullIndexOf - Similar to the bult-in node but provides a null value instead of -1 of failure. Part of the SmartCopyMonitor workflow., NullReorder - Simiar to the built-in function with the difference that it can handle null indices. Part of the SmartCopyMonitor workflow., NullSetDifference - Similar to the built in node, with a built-in safety for null values. Part of the SmartCopyMonitor workflow., NullSetParameter - Similar to the built-in function but with the ability to handle null values. Part of the SmartCopyMon workflow., Number.ToString - Converts the input number(s) to string. Can process lists., Object.Class - Gets the input object's class name. Can process lists., Point.PullOntoPlane - Pulls (projects) the point onto the input plane, following the plane normal., Pt2Str - Serilize a geometry point to a string for use in Revit parameters, Select Edges - Select multiple edges from inside the Revit UI. Be sure to press \"Finish\" once done. You can use a Boolean toggle to refresh your selection., Select Linked Element - Select the linked instance first, followed by the element. If your selection fails, just press escape.\r\nTo refresh the node, connect a boolean switch node., Select Linked Elements - Select the linked instance first, followed by the elements. To finish the selection, press Finish. If your selection fails, just press escape or Cancel.\r\nTo refresh the node, connect a boolean switch node., Select Linked Face - Select the linked instance first, followed by the face. If your selection fails, just press escape.\r\nTo refresh the node, connect a boolean switch node., SelectInRevit - Selects the input elements in Revit. Works with Revit 2016., Shaft.ByCurves - Creates a shaft opening. The top level MUST be higher than the base level for a successful execution. You can either provide one base and top level for all shafts or have unique levels for each shaft instance., Sheet.Views+ - Extracts all views placed on the input sheet(s).  Will be depreciated once the bult in node works with all plan types., Star.ByCenterRadiusRays - Fun little node to create star shapes., Str2Ln - De-serilize a Revit parameter string into a geometric line., Str2Pt - De-serilize a Revit parameter string into a geometric point., Topography.ToPolySurface - Optimized algorithm for converting topographies into polysurfaces. Tested with topographies containing up to 40 000 points. \r\nWarning conversions of such mangitudes consume a lot of resources and are sub-optimal. Ensure that you have plenty at least 8GB of ram and patience before attempting such a conversion, otherwise your Dynamo and Revit instances may crash., ViewSet.ByViewsName - Creates a set of views(or sheets) for printing. If the set exists, set Overwrite to true to replace it., Wall.WallType - Queries the wall type of the input wall. Works for types from linked documents as well., WallType.Duplicate - Attemts to create duplicate wall types. If the wall type exists, it is appended to the end. Sets only the structural width of the wall. The width must be in feet., Watch+ - This node that serializes the input information and presents it in a resizable text window.",
            "engine_metadata": "",
            "engine_version": "0.8.2.2392",
            "created": "2016-01-27T15:41:40.943Z",
            "full_dependency_versions": [ "82.7.3" ],
            "full_dependency_ids": [
              {
                "_id": "56077cf3662bf0e9080001ea",
                "name": "spring nodes"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "82.7.3"
          },
          {
            "_id": "56a9a93fc3e9ee4a0800004e",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/5c6b9994-c11e-4e98-8b54-921f653eeceagregPkg193.zip",
            "contents": "Active View - Selects the current document's active view. Supports more view types than the built-in option.\r\nWill be depreciated once the bult in node works with all plan types., Beams.FixExtents - Detects all beams from the input list with broken extents(actual length - cut length <  margin) and attemts to correct them., BoundingBox.Scale - Scales the bounding box in three dimensions according to it's center., ClosedCurve.Offset+(0.9) - Offsets a curve both ways and correctly differenciates the external and internal offset. If an offset goes beyond the curve's bounds, the result will fail and a null value will be appended instead. Also works for convex curves like arcs., ClosedCurve.Offset+ - Offsets a curve both ways and correctly differenciates the external and internal offset. If an offset goes beyond the curve's bounds, the result will fail and a null value will be appended instead. Also works for convex curves like arcs., Collector.CurrentSelection - Gets the currently selected elements. Connect a boolean switch to refresh the selection. Compatible with Revit 2016, Collector.ElementsInView - Selects all elements visible in the input view., Collector.ElementSketch - Get the actual sketch lines of a sketch based element (floor, ceiling, modified wall, etc.) . You can optionally fetch the matching model curves, however this might prove comptationally heavy on larger data sets., Collector.FamilyInstances - Collects placed family instance elements from the document that match the name. Partially mathing elements are collected as well. If no matches are found, a list of all isntance names will be output., Collector.FamilyTypes - Collects non-system family types that fully match or partially match the provided names. If no matches are found, a list of all type names will be output., Collector.FloorTypes - Collects Floor types by name., Collector.LinkedInstanceElements - Extract elements by category from the selected linked instances. The transform vector can be used to get the exact location of the elements in the local file, Collector.Revisions - Collects all revisions from a specific date., Collector.Sheets - Search for sheets by either their name or their number. Use a false boolean switch to search by number., Collector.Views - Search for views based on naming. You can choose to either include or exclude schedules. Use the sheet collector for sheets., Collector.WallTypes - Collects wall types by name., Color2Decimal - Converts a Dynamo colour its Revit equivalent  decimal value., Curve.Offset+ - Offsets a curve towards the specified point, CurveLoop.Simplify - Attempts to simplify an open or a closed curve loop by connecting straight separate line segments into a single line., Decimal2Color - Converts a revit colour decimal value to its Dynamo equivalent., Dictionary.ByKeysValues - Dictionaries are an incredibly powerful tool for making associative sets between two equal length lists. The fitst list must be of unique strings (or numbers) and will be the key and the second list will be the matching values (it can be made up of geometry, elements, even other lists)\r\nThe search keys list will provide the coresponding value to the input key., DirectShape.ByGeometry - Convert the input geometry to DirectShape element inside the Revit document.  It supports solids or surfaces.It is based on an alternative process that uses a SAT import and can produce smooth surfaces. Each created DS will have a unique type. Make sure that each input geometry has a unique name. You can either feed a single category for all geometries or a unique category for each geometry - the node's lacing is set to longest by default., DirectShape.Transform - Copy the input DirectShape element with the help of a translation vector, similarly to the Geometry.Translate node. This method should prove much faster than Element.Copy, Doc.DeleteElements - Attempts to delete the input revit elements and returns the number of successfully deleted elements. Carefully observe the deleted elements count. It may be greater than the input list because hosted elements or tags will be deleted as well., Element.AddVoidCut - Accepts single or list inputs. If an element that can be cut and a family that can act as a void cutting entity are provided, the element will be cut. Please make sure that the geometries of the elements actually cut. Otherwise an empty cut will be created that may impede the performance of your file. Add void cuts sparcely because they affect the size of your project., Element.Copy - WARNING: Do not use this node in Automatic mode! Copy the input Revit elements with the help of a translation vector, similarly to the Geometry.Translate node., Element.IsCut - Tests if the element is being cut by any void instances. If any cuts exist all cutting elements will be provided., Element.IsCutting - Tests if the input element (or elements) is a void cut and if it is cutting any elements. In such cases, the cut elements will be provided., Element.RemoveVoidCut - Removes the void cut between the input elements, if such exists., Element.SetLocation - Attempts to modify the location of the input element. This can effectively add as a move comand in Revit. Works for both line based and point based elements., ErrorReport.Parse - Process a Revit error report (HTML file) and extract the error types, all affected elements and the total number of errors. If you are executing from a document different than the one the error report belongs to, be sure to set \"fetch_elements\" to false., FamilyInstance.ByGeometry - You must provide a valid family template path that will be used for all input geometry objects. The project units(and not the templates) will be used to determine the size of the output geometry.\r\nThe provided category will be used only if the family template supports it. If not, the default template category will be used instead.\r\nLikewise, the family material(provided as a string) will be set only if a material with that name exists in the template. If not, the default material will be used instead (\"By Category\").\r\nFor void cuts, the material settings will be ignored.\r\nThe Subcategory name is an optional input. If you'd like to skip assigning a Subcategory to any new instance, simply use null.\r\nThe node expects a unique family name for each geometry object. The rest of the input lists will be processed as if the node lacing is set to longest., FamilyInstance.Rotation - Fetches the angle of rotation around the insertion point of a point based element. The angle is always measured counter-clockwise., FamilyType.Duplicate - Create duplicate family types with the specified name. If the type exists, it is called., Feet2Fraction - Converts a decimal foot value to a fractional foot/inch string., File.Size - Checks the file size. Provide a file path as a string., Filter.ByCategoryName - Filters the input elements by their category name. You can input multiple category names., Filter.ByClassName - Filters a list of objects by the object's class name. Note that Dynamo elements belong to different classes than their Revit counterparts. Use the Object.Class node to check an object's class., Filter.BySelection - Check the items that you'd like to filter in.  Unchecked items will be sent to the out list. The optional names input will override the object representation., Floor-WallType.SetMaterial - Sets a new material to the structural core of the provided floor and wall types., FloorOpening.ByCurves - Create hosted floor opeinngs through the input floors. The second input is a list of sub-lists of the boundary curves., FloorType.Duplicate - Attemts to create duplicate floor types. If the floor type exists, it is appended to the end. Sets only the structural width of the floor. The width must be in feet., Fn.ElementsOfCategory - Same as the built in \"All Elements of Category\" but can act as a function object., Form.ByGeometry - Convert the input geometry to a Revit Form object. Forms can exist only in the family environment. You can convert complicated solids or surfaces directly into forms. A form can act as a void. Provide either one true boolean value to convert a form into a void. The node's lacing is set to longest by default., Fraction2Feet - Converts a fractioned feet /inch string value into a decimal foot value., Geometry.SplitRecursively - Splits a surface or a solid recursively, using the resulting reduced geometry for every next split., HostedInstance.ByPoints - Creates hosted family instances(doors/windows) at the specified points. You can feed either a single family type or a unique type for each instance., Input.Wait - Waits for all inputs to be completed before continuing the execution process.Part of the SmartCopyMon workflow., InterferenceCheck.Parse - Process a Revit interference check (HTML file) and extract the interference categories, all affected elements and the total number of clashes. If you are executing from a document different than the one the error report belongs to, be sure to set \"fetch_elements\" to false., Line.StraightenXY - Checks a line's end points for irregularities and corrects them if they are at or below the specified margin. The default margin is 1/5000 of the curve length, which is conservative., Line.StraightenZ - Checks a line's end points for irregularities in  the Z axis and corrects them if they are at or below the specified margin. The default margin is 1/2000 of the curve length, which is conservative., Lines.Group&FixCorners - Groups unconnected lines into sub-lists by margin(the maximum distance between endpoints) and attempts to create clean corner connections between them. Built on top of the Group curves node found in archi-lab.net., List.DragDropReorder - Press and hold on an item to move it up or down the list. To confirm and close the window, select \"Save Order\". The optional names input will override the object representation., List.DropDown - Selects one list item by a drop-down combo box. The optional names input will override the object representation., List.DropFirstLast - Removes the first and last items from the list, List.DropLast - Removes the last value of the list., List.EveryOther - Useful for when you want to combine an item on the list with every other item on the list. For example in list {1,2,3} , \"2\" will be paired up only with \"1\" and \"3\" and will not be paired up with itself., List.GetEven - Gets even indices from the list., List.GetOdd - Gets the odd indices from the list., List.Randomise&Divide - Shiffles the input list and divides it into sub-lists based on ratios(1/4 + 1/2 + 1/4 will give you three lists split accordingly) The smalest ratio will always be 1 / the list length and the largest ratio will be 1. A seed input can shuffle the list further., List.ShiftIndices+ - The built in node fails if the shift number is greater than the lenght of the list. This node acts as a work-around., List.Split - Splits a list at the desired length, Ln2Str - Serilize a geometry line to a string for use in Revit parameters, Math.AlmostEqual - Checks if a number is almost equal to a value with a specified tollerance., N-hedron.ByOriginVector - Creates a multi-sided poyhedron with defined side length and total height., NullAllIndicesOf - list all of the indices of a list that match the specified value. Capable of handling null values, part of the SmartCopyMonitor workflow., NullGetParameter - Similar to the built in node.Capable of handling null values, part of the SmartCopyMonitor workflow., NullIndexOf - Similar to the bult-in node but provides a null value instead of -1 of failure. Part of the SmartCopyMonitor workflow., NullReorder - Simiar to the built-in function with the difference that it can handle null indices. Part of the SmartCopyMonitor workflow., NullSetDifference - Similar to the built in node, with a built-in safety for null values. Part of the SmartCopyMonitor workflow., NullSetParameter - Similar to the built-in function but with the ability to handle null values. Part of the SmartCopyMon workflow., Number.ToString - Converts the input number(s) to string. Can process lists., Object.Class - Gets the input object's class name. Can process lists., Point.PullOntoPlane - Pulls (projects) the point onto the input plane, following the plane normal., Pt2Str - Serilize a geometry point to a string for use in Revit parameters, Select Edges - Select multiple edges from inside the Revit UI. Be sure to press \"Finish\" once done. You can use a Boolean toggle to refresh your selection., Select Linked Element - Select the linked instance first, followed by the element. If your selection fails, just press escape.\r\nTo refresh the node, connect a boolean switch node., Select Linked Elements - Select the linked instance first, followed by the elements. To finish the selection, press Finish. If your selection fails, just press escape or Cancel.\r\nTo refresh the node, connect a boolean switch node., Select Linked Face - Select the linked instance first, followed by the face. If your selection fails, just press escape.\r\nTo refresh the node, connect a boolean switch node., SelectInRevit - Selects the input elements in Revit. Works with Revit 2016., Shaft.ByCurves - Creates a shaft opening. The top level MUST be higher than the base level for a successful execution. You can either provide one base and top level for all shafts or have unique levels for each shaft instance., Sheet.Views+ - Extracts all views and schedules (minus the revision schedule) placed on the input sheet (or sheets).\r\nWill be depreciated once the bult in node works with all plan types., Star.ByCenterRadiusRays - Fun little node to create star shapes., Str2Ln - De-serilize a Revit parameter string into a geometric line., Str2Pt - De-serilize a Revit parameter string into a geometric point., Topography.ToPolySurface - Optimized algorithm for converting topographies into polysurfaces. Tested with topographies containing up to 40 000 points. \r\nWarning conversions of such mangitudes consume a lot of resources and are sub-optimal. Ensure that you have plenty at least 8GB of ram and patience before attempting such a conversion, otherwise your Dynamo and Revit instances may crash., ViewSet.ByViewsName - Creates a set of views(or sheets) for printing. If the set exists, set Overwrite to true to replace it., Wall.WallType - Queries the wall type of the input wall. Works for types from linked documents as well., WallType.Duplicate - Attemts to create duplicate wall types. If the wall type exists, it is appended to the end. Sets only the structural width of the wall. The width must be in feet., Watch+ - This node that serializes the input information and presents it in a resizable text window.",
            "engine_metadata": "",
            "engine_version": "0.8.2.2392",
            "created": "2016-01-28T05:38:07.983Z",
            "full_dependency_versions": [ "82.7.4" ],
            "full_dependency_ids": [
              {
                "_id": "56077cf3662bf0e9080001ea",
                "name": "spring nodes"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "82.7.4"
          },
          {
            "_id": "56af7b8fc3e9ee4a08000075",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/39ade37e-ec13-414a-b4e8-d087bd4d25efgregPkg91.zip",
            "contents": "Active View - Selects the current document's active view. Supports more view types than the built-in option.\r\nWill be depreciated once the bult in node works with all plan types., Beams.FixExtents - Detects all beams from the input list with broken extents(actual length - cut length <  margin) and attemts to correct them., BoundingBox.Scale - Scales the bounding box in three dimensions according to it's center., ClosedCurve.Offset+(0.9) - Offsets a curve both ways and correctly differenciates the external and internal offset. If an offset goes beyond the curve's bounds, the result will fail and a null value will be appended instead. Also works for convex curves like arcs., ClosedCurve.Offset+ - Offsets a curve both ways and correctly differenciates the external and internal offset. If an offset goes beyond the curve's bounds, the result will fail and a null value will be appended instead. Also works for convex curves like arcs., Collector.CurrentSelection - Gets the currently selected elements. Connect a boolean switch to refresh the selection. Compatible with Revit 2016, Collector.ElementsInView - Selects all elements visible in the input view., Collector.ElementSketch - Get the actual sketch lines of a sketch based element (floor, ceiling, modified wall, etc.) . You can optionally fetch the matching model curves, however this might prove comptationally heavy on larger data sets., Collector.FamilyInstances - Collects placed family instance elements from the document that match the name. Partially mathing elements are collected as well. If no matches are found, a list of all isntance names will be output., Collector.FamilyTypes - Collects non-system family types that fully match or partially match the provided names. If no matches are found, a list of all type names will be output., Collector.FloorTypes - Collects Floor types by name., Collector.LinkedInstanceElements - Extract elements by category from the selected linked instances. The transform vector can be used to get the exact location of the elements in the local file, Collector.Revisions - Collects all revisions from a specific date., Collector.Sheets - Search for sheets by either their name or their number. Use a false boolean switch to search by number., Collector.Views - Search for views based on naming. You can choose to either include or exclude schedules. Use the sheet collector for sheets., Collector.WallTypes - Collects wall types by name., Color2Decimal - Converts a Dynamo colour its Revit equivalent  decimal value., Curve.Offset+ - Offsets a curve towards the specified point, CurveLoop.Simplify - Attempts to simplify an open or a closed curve loop by connecting straight separate line segments into a single line., Decimal2Color - Converts a revit colour decimal value to its Dynamo equivalent., Dictionary.ByKeysValues - Dictionaries are an incredibly powerful tool for making associative sets between two equal length lists. The first list must be of unique strings (or numbers) and will be the key and the second list will be the matching values (it can be made up of geometry, elements, even other lists)\r\nThe search keys list will provide the corresponding value to the input key., DirectShape.ByGeometry - Convert the input geometry to DirectShape element inside the Revit document.  It supports solids or surfaces.It is based on an alternative process that uses a SAT import and can produce smooth surfaces. Each created DS will have a unique type. Make sure that each input geometry has a unique name. You can either feed a single category for all geometries or a unique category for each geometry - the node's lacing is set to longest by default., DirectShape.Transform - Copy the input DirectShape element with the help of a translation vector, similarly to the Geometry.Translate node. This method should prove much faster than Element.Copy, Doc.DeleteElements - Attempts to delete the input revit elements and returns the number of successfully deleted elements. Carefully observe the deleted elements count. It may be greater than the input list because hosted elements or tags will be deleted as well., Element.AddVoidCut - Accepts single or list inputs. If an element that can be cut and a family that can act as a void cutting entity are provided, the element will be cut. Please make sure that the geometries of the elements actually cut. Otherwise an empty cut will be created that may impede the performance of your file. Add void cuts sparcely because they affect the size of your project., Element.Copy - WARNING: Do not use this node in Automatic mode! Copy the input Revit elements with the help of a translation vector, similarly to the Geometry.Translate node., Element.IsCut - Tests if the element is being cut by any void instances. If any cuts exist all cutting elements will be provided., Element.IsCutting - Tests if the input element (or elements) is a void cut and if it is cutting any elements. In such cases, the cut elements will be provided., Element.RemoveVoidCut - Removes the void cut between the input elements, if such exists., Element.SetLocation - Attempts to modify the location of the input element. This can effectively add as a move comand in Revit. Works for both line based and point based elements., ErrorReport.Parse - Process a Revit error report (HTML file) and extract the error types, all affected elements and the total number of errors. If you are executing from a document different than the one the error report belongs to, be sure to set \"fetch_elements\" to false., FamilyInstance.ByGeometry - You must provide a valid family template path that will be used for all input geometry objects. The project units(and not the templates) will be used to determine the size of the output geometry.\r\nThe provided category will be used only if the family template supports it. If not, the default template category will be used instead.\r\nLikewise, the family material(provided as a string) will be set only if a material with that name exists in the template. If not, the default material will be used instead (\"By Category\").\r\nFor void cuts, the material settings will be ignored.\r\nThe Subcategory name is an optional input. If you'd like to skip assigning a Subcategory to any new instance, simply use null.\r\nThe node expects a unique family name for each geometry object. The rest of the input lists will be processed as if the node lacing is set to longest., FamilyInstance.Rotation - Fetches the angle of rotation around the insertion point of a point based element. The angle is always measured counter-clockwise., FamilyType.Duplicate - Create duplicate family types with the specified name. If the type exists, it is called., Feet2Fraction - Converts a decimal foot value to a fractional foot/inch string., File.Size - Checks the file size. Provide a file path as a string., Filter.ByCategoryName - Filters the input elements by their category name. You can input multiple category names., Filter.ByClassName - Filters a list of objects by the object's class name. Note that Dynamo elements belong to different classes than their Revit counterparts. Use the Object.Class node to check an object's class., Filter.BySelection - Check the items that you'd like to filter in.  Unchecked items will be sent to the out list. The optional names input will override the object representation., Floor-WallType.SetMaterial - Sets a new material to the structural core of the provided floor and wall types., FloorOpening.ByCurves - Create hosted floor opeinngs through the input floors. The second input is a list of sub-lists of the boundary curves., FloorType.Duplicate - Attemts to create duplicate floor types. If the floor type exists, it is appended to the end. Sets only the structural width of the floor. The width must be in feet., Fn.ElementsOfCategory - Same as the built in \"All Elements of Category\" but can act as a function object., Form.ByGeometry - Convert the input geometry to a Revit Form object. Forms can exist only in the family environment. You can convert complicated solids or surfaces directly into forms. A form can act as a void. Provide either one true boolean value to convert a form into a void. The node's lacing is set to longest by default., Fraction2Feet - Converts a fractioned feet /inch string value into a decimal foot value., Geometry.SplitRecursively - Splits a surface or a solid recursively, using the resulting reduced geometry for every next split., HostedInstance.ByPoints - Creates hosted family instances(doors/windows) at the specified points. You can feed either a single family type or a unique type for each instance., Input.Wait - Waits for all inputs to be completed before continuing the execution process.Part of the SmartCopyMon workflow., InterferenceCheck.Parse - Process a Revit interference check (HTML file) and extract the interference categories, all affected elements and the total number of clashes. If you are executing from a document different than the one the error report belongs to, be sure to set \"fetch_elements\" to false., Line.StraightenXY - Checks a line's end points for irregularities and corrects them if they are at or below the specified margin. The default margin is 1/5000 of the curve length, which is conservative., Line.StraightenZ - Checks a line's end points for irregularities in  the Z axis and corrects them if they are at or below the specified margin. The default margin is 1/2000 of the curve length, which is conservative., Lines.Group&FixCorners - Groups unconnected lines into sub-lists by margin(the maximum distance between endpoints) and attempts to create clean corner connections between them. Built on top of the Group curves node found in archi-lab.net., List.DragDropReorder - Press and hold on an item to move it up or down the list. To confirm and close the window, select \"Save Order\". The optional names input will override the object representation., List.DropDown - Selects one list item by a drop-down combo box. The optional names input will override the object representation., List.DropFirstLast - Removes the first and last items from the list, List.DropLast - Removes the last value of the list., List.EveryOther - Useful for when you want to combine an item on the list with every other item on the list. For example in list {1,2,3} , \"2\" will be paired up only with \"1\" and \"3\" and will not be paired up with itself., List.GetEven - Gets even indices from the list., List.GetOdd - Gets the odd indices from the list., List.Randomise&Divide - Shiffles the input list and divides it into sub-lists based on ratios(1/4 + 1/2 + 1/4 will give you three lists split accordingly) The smalest ratio will always be 1 / the list length and the largest ratio will be 1. A seed input can shuffle the list further., List.ShiftIndices+ - The built in node fails if the shift number is greater than the lenght of the list. This node acts as a work-around., List.Split - Splits a list at the desired length, Ln2Str - Serilize a geometry line to a string for use in Revit parameters, Math.AlmostEqual - Checks if a number is almost equal to a value with a specified tollerance., N-hedron.ByOriginVector - Creates a multi-sided poyhedron with defined side length and total height., NullAllIndicesOf - list all of the indices of a list that match the specified value. Capable of handling null values, part of the SmartCopyMonitor workflow., NullGetParameter - Similar to the built in node.Capable of handling null values, part of the SmartCopyMonitor workflow., NullIndexOf - Similar to the bult-in node but provides a null value instead of -1 of failure. Part of the SmartCopyMonitor workflow., NullReorder - Simiar to the built-in function with the difference that it can handle null indices. Part of the SmartCopyMonitor workflow., NullSetDifference - Similar to the built in node, with a built-in safety for null values. Part of the SmartCopyMonitor workflow., NullSetParameter - Similar to the built-in function but with the ability to handle null values. Part of the SmartCopyMon workflow., Number.ToString - Converts the input number(s) to string. Can process lists., Object.Class - Gets the input object's class name. Can process lists., Point.PullOntoPlane - Pulls (projects) the point onto the input plane, following the plane normal., Pt2Str - Serilize a geometry point to a string for use in Revit parameters, Select Edges - Select multiple edges from inside the Revit UI. Be sure to press \"Finish\" once done. You can use a Boolean toggle to refresh your selection., Select Linked Element - Select the linked instance first, followed by the element. If your selection fails, just press escape.\r\nTo refresh the node, connect a boolean switch node., Select Linked Elements - Select the linked instance first, followed by the elements. To finish the selection, press Finish. If your selection fails, just press escape or Cancel.\r\nTo refresh the node, connect a boolean switch node., Select Linked Face - Select the linked instance first, followed by the face. If your selection fails, just press escape.\r\nTo refresh the node, connect a boolean switch node., SelectInRevit - Selects the input elements in Revit. Works with Revit 2016., Shaft.ByCurves - Creates a shaft opening. The top level MUST be higher than the base level for a successful execution. You can either provide one base and top level for all shafts or have unique levels for each shaft instance., Sheet.Views+ - Extracts all views and schedules (minus the revision schedule) placed on the input sheet (or sheets).\r\nWill be depreciated once the bult in node works with all plan types., Star.ByCenterRadiusRays - Fun little node to create star shapes., Str2Ln - De-serilize a Revit parameter string into a geometric line., Str2Pt - De-serilize a Revit parameter string into a geometric point., Topography.ToPolySurface - Optimized algorithm for converting topographies into polysurfaces. Tested with topographies containing up to 40 000 points. \r\nWarning conversions of such mangitudes consume a lot of resources and are sub-optimal. Ensure that you have plenty at least 8GB of ram and patience before attempting such a conversion, otherwise your Dynamo and Revit instances may crash., ViewSet.ByViewsName - Creates a set of views(or sheets) for printing. If the set exists, set Overwrite to true to replace it., Wall.WallType - Queries the wall type of the input wall. Works for types from linked documents as well., WallType.Duplicate - Attemts to create duplicate wall types. If the wall type exists, it is appended to the end. Sets only the structural width of the wall. The width must be in feet., Watch+ - This node that serializes the input information and presents it in a resizable text window.",
            "engine_metadata": "",
            "engine_version": "0.8.2.2392",
            "created": "2016-02-01T15:36:47.894Z",
            "full_dependency_versions": [ "82.7.5" ],
            "full_dependency_ids": [
              {
                "_id": "56077cf3662bf0e9080001ea",
                "name": "spring nodes"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "82.7.5"
          },
          {
            "_id": "56b9efa1c3e9ee4a080000cf",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/b8c79da7-9f48-4ee5-b6e3-533b1cf33231gregPkg948.zip",
            "contents": "Active View - Selects the current document's active view. Supports more view types than the built-in option.\r\nWill be depreciated once the bult in node works with all plan types., Beams.FixExtents - Detects all beams from the input list with broken extents(actual length - cut length <  margin) and attemts to correct them., BoundingBox.Scale - Scales the bounding box in three dimensions according to it's center., ClosedCurve.Offset+(0.9) - Offsets a curve both ways and correctly differenciates the external and internal offset. If an offset goes beyond the curve's bounds, the result will fail and a null value will be appended instead. Also works for convex curves like arcs., ClosedCurve.Offset+ - Offsets a curve both ways and correctly differenciates the external and internal offset. If an offset goes beyond the curve's bounds, the result will fail and a null value will be appended instead. Also works for convex curves like arcs., Collector.CurrentSelection - Gets the currently selected elements. Connect a boolean switch to refresh the selection. Compatible with Revit 2016, Collector.ElementsInView - Selects all elements visible in the input view., Collector.ElementSketch - Get the actual sketch lines of a sketch based element (floor, ceiling, modified wall, etc.) . You can optionally fetch the matching model curves, however this might prove comptationally heavy on larger data sets., Collector.FamilyInstances - Collects placed family instance elements from the document that match the name. Partially mathing elements are collected as well. If no matches are found, a list of all isntance names will be output., Collector.FamilyTypes - Collects non-system family types that fully match or partially match the provided names. If no matches are found, a list of all type names will be output., Collector.FloorTypes - Collects Floor types by name., Collector.LinkedInstanceElements - Extract elements by category from the selected linked instances. The transform vector can be used to get the exact location of the elements in the local file, Collector.Revisions - Collects all revision clouds from a specific date., Collector.Sheets - Search for sheets by either their name or their number. Use a false boolean switch to search by number., Collector.Views - Search for views based on naming. You can choose to either include or exclude schedules. Use the sheet collector for sheets., Collector.WallTypes - Collects wall types by name., Color2Decimal - Converts a Dynamo colour its Revit equivalent  decimal value., Curve.Offset+ - Offsets a curve towards the specified point, CurveLoop.Simplify - Attempts to simplify an open or a closed curve loop by connecting straight separate line segments into a single line., Decimal2Color - Converts a revit colour decimal value to its Dynamo equivalent., Dictionary.ByKeysValues - Dictionaries are an incredibly powerful tool for making associative sets between two equal length lists. The first list must be of unique strings (or numbers) and will be the key and the second list will be the matching values (it can be made up of geometry, elements, even other lists)\r\nThe search keys list will provide the corresponding value to the input key., DirectShape.ByGeometry - Convert the input geometry to DirectShape element inside the Revit document.  It supports solids or surfaces.It is based on an alternative process that uses a SAT import and can produce smooth surfaces. Each created DS will have a unique type. Make sure that each input geometry has a unique name. You can either feed a single category for all geometries or a unique category for each geometry - the node's lacing is set to longest by default., DirectShape.Transform - Copy the input DirectShape element with the help of a translation vector, similarly to the Geometry.Translate node. This method should prove much faster than Element.Copy, Doc.DeleteElements - Attempts to delete the input list of elements from the active Revit document.The node returns the number of successfully deleted elements and their Ids as a string. Carefully observe the deleted elements count. It may be greater than the input list because hosted elements or tags will be deleted as well. If an element in the list can not be deleted (for example last revision or last view), the whole list will fail to be deleted., Element.AddVoidCut - Accepts single or list inputs. If an element that can be cut and a family that can act as a void cutting entity are provided, the element will be cut. Please make sure that the geometries of the elements actually cut. Otherwise an empty cut will be created that may impede the performance of your file. Add void cuts sparcely because they affect the size of your project., Element.Copy - WARNING: Do not use this node in Automatic mode! Copy the input Revit elements with the help of a translation vector, similarly to the Geometry.Translate node., Element.IsCut - Tests if the element is being cut by any void instances. If any cuts exist all cutting elements will be provided., Element.IsCutting - Tests if the input element (or elements) is a void cut and if it is cutting any elements. In such cases, the cut elements will be provided., Element.RemoveVoidCut - Removes the void cut between the input elements, if such exists., Element.SetLocation - Attempts to modify the location of the input element. This can effectively add as a move comand in Revit. Works for both line based and point based elements., ErrorReport.Parse - Process a Revit error report (HTML file) and extract the error types, all affected elements and the total number of errors. If you are executing from a document different than the one the error report belongs to, be sure to set \"fetch_elements\" to false., FamilyInstance.ByGeometry - You must provide a valid family template path that will be used for all input geometry objects. The project units(and not the templates) will be used to determine the size of the output geometry.\r\nThe provided category will be used only if the family template supports it. If not, the default template category will be used instead.\r\nLikewise, the family material(provided as a string) will be set only if a material with that name exists in the template. If not, the default material will be used instead (\"By Category\").\r\nFor void cuts, the material settings will be ignored.\r\nThe Subcategory name is an optional input. If you'd like to skip assigning a Subcategory to any new instance, simply use null.\r\nThe node expects a unique family name for each geometry object. The rest of the input lists will be processed as if the node lacing is set to longest., FamilyInstance.Rotation - Fetches the angle of rotation around the insertion point of a point based element. The angle is always measured counter-clockwise., FamilyType.Duplicate - Create duplicate family types with the specified name. If the type exists, it is called., Feet2Fraction - Converts a decimal foot value to a fractional foot/inch string., File.Size - Checks the file size. Provide a file path as a string., Filter.ByCategoryName - Filters the input elements by their category name. You can input multiple category names., Filter.ByClassName - Filters a list of objects by the object's class name. Note that Dynamo elements belong to different classes than their Revit counterparts. Use the Object.Class node to check an object's class., Filter.BySelection - Check the items that you'd like to filter in.  Unchecked items will be sent to the out list. The optional names input will override the object representation., Floor-WallType.SetMaterial - Sets a new material to the structural core of the provided floor and wall types., FloorOpening.ByCurves - Create hosted floor opeinngs through the input floors. The second input is a list of sub-lists of the boundary curves., FloorType.Duplicate - Attemts to create duplicate floor types. If the floor type exists, it is appended to the end. Sets only the structural width of the floor. The width must be in feet., Fn.ElementsOfCategory - Same as the built in \"All Elements of Category\" but can act as a function object., Form.ByGeometry - Convert the input geometry to a Revit Form object. Forms can exist only in the family environment. You can convert complicated solids or surfaces directly into forms. A form can act as a void. Provide either one true boolean value to convert a form into a void. The node's lacing is set to longest by default., Fraction2Feet - Converts a fractioned feet /inch string value into a decimal foot value., Geometry.SplitRecursively - Splits a surface or a solid recursively, using the resulting reduced geometry for every next split., HostedInstance.ByPoints - Creates hosted family instances(doors/windows) at the specified points. You can feed either a single family type or a unique type for each instance., Input.Wait - Waits for all inputs to be completed before continuing the execution process.Part of the SmartCopyMon workflow., InterferenceCheck.Parse - Process a Revit interference check (HTML file) and extract the interference categories, all affected elements and the total number of clashes. If you are executing from a document different than the one the error report belongs to, be sure to set \"fetch_elements\" to false., Line.StraightenXY - Checks a line's end points for irregularities and corrects them if they are at or below the specified margin. The default margin is 1/5000 of the curve length, which is conservative., Line.StraightenZ - Checks a line's end points for irregularities in  the Z axis and corrects them if they are at or below the specified margin. The default margin is 1/2000 of the curve length, which is conservative., Lines.Group&FixCorners - Groups unconnected lines into sub-lists by margin(the maximum distance between endpoints) and attempts to create clean corner connections between them. Built on top of the Group curves node found in archi-lab.net., List.DragDropReorder - Press and hold on an item to move it up or down the list. To confirm and close the window, select \"Save Order\". The optional names input will override the object representation., List.DropDown - Selects one list item by a drop-down combo box. The optional names input will override the object representation., List.DropFirstLast - Removes the first and last items from the list, List.DropLast - Removes the last value of the list., List.EveryOther - Useful for when you want to combine an item on the list with every other item on the list. For example in list {1,2,3} , \"2\" will be paired up only with \"1\" and \"3\" and will not be paired up with itself., List.GetEven - Gets even indices from the list., List.GetOdd - Gets the odd indices from the list., List.Randomise&Divide - Shiffles the input list and divides it into sub-lists based on ratios(1/4 + 1/2 + 1/4 will give you three lists split accordingly) The smalest ratio will always be 1 / the list length and the largest ratio will be 1. A seed input can shuffle the list further., List.ShiftIndices+ - The built in node fails if the shift number is greater than the lenght of the list. This node acts as a work-around., List.Split - Splits a list at the desired length, Ln2Str - Serilize a geometry line to a string for use in Revit parameters, Math.AlmostEqual - Checks if a number is almost equal to a value with a specified tollerance., N-hedron.ByOriginVector - Creates a multi-sided poyhedron with defined side length and total height., NullAllIndicesOf - list all of the indices of a list that match the specified value. Capable of handling null values, part of the SmartCopyMonitor workflow., NullGetParameter - Similar to the built in node.Capable of handling null values, part of the SmartCopyMonitor workflow., NullIndexOf - Similar to the bult-in node but provides a null value instead of -1 of failure. Part of the SmartCopyMonitor workflow., NullReorder - Simiar to the built-in function with the difference that it can handle null indices. Part of the SmartCopyMonitor workflow., NullSetDifference - Similar to the built in node, with a built-in safety for null values. Part of the SmartCopyMonitor workflow., NullSetParameter - Similar to the built-in function but with the ability to handle null values. Part of the SmartCopyMon workflow., Number.ToString - Converts the input number(s) to string. Can process lists., Object.Class - Gets the input object's class name. Can process lists., Point.PullOntoPlane - Pulls (projects) the point onto the input plane, following the plane normal., Pt2Str - Serilize a geometry point to a string for use in Revit parameters, Select Edges - Select multiple edges from inside the Revit UI. Be sure to press \"Finish\" once done. You can use a Boolean toggle to refresh your selection., Select Linked Element - Select the linked instance first, followed by the element. If your selection fails, just press escape.\r\nTo refresh the node, connect a boolean switch node., Select Linked Elements - Select the linked instance first, followed by the elements. To finish the selection, press Finish. If your selection fails, just press escape or Cancel.\r\nTo refresh the node, connect a boolean switch node., Select Linked Face - Select the linked instance first, followed by the face. If your selection fails, just press escape.\r\nTo refresh the node, connect a boolean switch node., SelectInRevit - Selects the input elements in Revit. Works with Revit 2016., Shaft.ByCurves - Creates a shaft opening. The top level MUST be higher than the base level for a successful execution. You can either provide one base and top level for all shafts or have unique levels for each shaft instance., Sheet.Views+ - Extracts all views and schedules (minus the revision schedule) placed on the input sheet (or sheets).\r\nWill be depreciated once the bult in node works with all plan types., Star.ByCenterRadiusRays - Fun little node to create star shapes., Str2Ln - De-serilize a Revit parameter string into a geometric line., Str2Pt - De-serilize a Revit parameter string into a geometric point., Topography.ToPolySurface - Optimized algorithm for converting topographies into polysurfaces. Tested with topographies containing up to 40 000 points. \r\nWarning conversions of such mangitudes consume a lot of resources and are sub-optimal. Ensure that you have plenty at least 8GB of ram and patience before attempting such a conversion, otherwise your Dynamo and Revit instances may crash., ViewSet.ByViewsName - Creates a set of views(or sheets) for printing. If the set exists, set Overwrite to true to replace it., Wall.WallType - Queries the wall type of the input wall. Works for types from linked documents as well., WallType.Duplicate - Attemts to create duplicate wall types. If the wall type exists, it is appended to the end. Sets only the structural width of the wall. The width must be in feet., Watch+ - This node that serializes the input information and presents it in a resizable text window.",
            "engine_metadata": "",
            "engine_version": "0.8.2.2392",
            "created": "2016-02-09T13:54:41.856Z",
            "full_dependency_versions": [ "82.7.6" ],
            "full_dependency_ids": [
              {
                "_id": "56077cf3662bf0e9080001ea",
                "name": "spring nodes"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "82.7.6"
          },
          {
            "_id": "56c5d9e9c3e9ee4a08000117",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/ae1ede96-fa55-4ddc-90ea-9e2e1347f53bgregPkg237.zip",
            "contents": "Active View - Selects the current document's active view. Supports more view types than the built-in option.\r\nWill be depreciated once the bult in node works with all plan types., Beams.FixExtents - Detects all beams from the input list with broken extents(actual length - cut length <  margin) and attemts to correct them., BoundingBox.Scale - Scales the bounding box in three dimensions according to it's center., ClosedCurve.Offset+(0.9) - Offsets a curve both ways and correctly differenciates the external and internal offset. If an offset goes beyond the curve's bounds, the result will fail and a null value will be appended instead. Also works for convex curves like arcs., ClosedCurve.Offset+ - Offsets a curve both ways and correctly differenciates the external and internal offset. If an offset goes beyond the curve's bounds, the result will fail and a null value will be appended instead. Also works for convex curves like arcs., Collector.CurrentSelection - Gets the currently selected elements. Connect a boolean switch to refresh the selection. Compatible with Revit 2016, Collector.ElementsInView - Selects all elements visible in the input view., Collector.ElementSketch - Get the actual sketch lines of a sketch based element (floor, ceiling, modified wall, etc.) . You can optionally fetch the matching model curves, however this might prove comptationally heavy on larger data sets., Collector.FamilyInstances - Collects placed family instance elements from the document that match the name. Partially mathing elements are collected as well. If no matches are found, a list of all isntance names will be output., Collector.FamilyTypes - Collects non-system family types that fully match or partially match the provided names. If no matches are found, a list of all type names will be output., Collector.FloorTypes - Collects Floor types by name., Collector.LinkedInstanceElements - Extract elements by category from the selected linked instances. The transform vector can be used to get the exact location of the elements in the local file, Collector.Revisions - Collects all revision clouds from a specific date., Collector.Sheets - Search for sheets by either their name or their number. Use a false boolean switch to search by number., Collector.Views - Search for views based on naming. You can choose to either include or exclude schedules. Use the sheet collector for sheets., Collector.WallTypes - Collects wall types by name., Color2Decimal - Converts a Dynamo colour its Revit equivalent  decimal value., Curve.Offset+ - Offsets a curve towards the specified point, CurveLoop.Simplify - Attempts to simplify an open or a closed curve loop by connecting straight separate line segments into a single line., Decimal2Color - Converts a revit colour decimal value to its Dynamo equivalent., Dictionary.ByKeysValues - Dictionaries are an incredibly powerful tool for making associative sets between two equal length lists. The first list must be of unique strings (or numbers) and will be the key and the second list will be the matching values (it can be made up of geometry, elements, even other lists)\r\nThe search keys list will provide the corresponding value to the input key., DirectShape.ByGeometry - Convert the input geometry to DirectShape element inside the Revit document.  It supports solids or surfaces.It is based on an alternative process that uses a SAT import and can produce smooth surfaces. Each created DS will have a unique type. Make sure that each input geometry has a unique name. You can either feed a single category for all geometries or a unique category for each geometry - the node's lacing is set to longest by default., DirectShape.Transform - Transforms the typed DirectShape element from the identity coordinate system to the input coordinate system(s), in a manner similar to Dynamo's Geometry.Transform node., DirectShape.Translate - Copy the input DirectShape element with the help of a translation vector, similarly to the Geometry.Translate node. This method should prove more efficient than Element.Copy, Doc.DeleteElements - Attempts to delete the input list of elements from the active Revit document.The node returns the number of successfully deleted elements and their Ids as a string. Carefully observe the deleted elements count. It may be greater than the input list because hosted elements or tags will be deleted as well. If an element in the list can not be deleted (for example last revision or last view), the whole list will fail to be deleted., Element.AddVoidCut - Accepts single or list inputs. If an element that can be cut and a family that can act as a void cutting entity are provided, the element will be cut. Please make sure that the geometries of the elements actually cut. Otherwise an empty cut will be created that may impede the performance of your file. Add void cuts sparcely because they affect the size of your project., Element.Copy - WARNING: Do not use this node in Automatic mode! Copy the input Revit elements with the help of a translation vector, similarly to the Geometry.Translate node., Element.IsCut - Tests if the element is being cut by any void instances. If any cuts exist all cutting elements will be provided., Element.IsCutting - Tests if the input element (or elements) is a void cut and if it is cutting any elements. In such cases, the cut elements will be provided., Element.RemoveVoidCut - Removes the void cut between the input elements, if such exists., Element.SetLocation - Attempts to modify the location of the input element. This can effectively add as a move comand in Revit. Works for both line based and point based elements., ErrorReport.Parse - Process a Revit error report (HTML file) and extract the error types, all affected elements and the total number of errors. If you are executing from a document different than the one the error report belongs to, be sure to set \"fetch_elements\" to false., FamilyInstance.ByGeometry - You must provide a valid family template path that will be used for all input geometry objects. The project units(and not the templates) will be used to determine the size of the output geometry.\r\nThe provided category will be used only if the family template supports it. If not, the default template category will be used instead.\r\nLikewise, the family material(provided as a string) will be set only if a material with that name exists in the template. If not, the default material will be used instead (\"By Category\").\r\nFor void cuts, the material settings will be ignored.\r\nThe Subcategory name is an optional input. If you'd like to skip assigning a Subcategory to any new instance, simply use null.\r\nThe node expects a unique family name for each geometry object. The rest of the input lists will be processed as if the node lacing is set to longest., FamilyInstance.Rotation - Fetches the angle of rotation around the insertion point of a point based element. The angle is always measured counter-clockwise., FamilyType.Duplicate - Create duplicate family types with the specified name. If the type exists, it is called., Feet2Fraction - Converts a decimal foot value to a fractional foot/inch string., File.Size - Checks the file size. Provide a file path as a string., Filter.ByCategoryName - Filters the input elements by their category name. You can input multiple category names., Filter.ByClassName - Filters a list of objects by the object's class name. Note that Dynamo elements belong to different classes than their Revit counterparts. Use the Object.Class node to check an object's class., Filter.BySelection - Check the items that you'd like to filter in.  Unchecked items will be sent to the out list. The optional names input will override the object representation., Floor-WallType.SetMaterial - Sets a new material to the structural core of the provided floor and wall types., FloorOpening.ByCurves - Create hosted floor opeinngs through the input floors. The second input is a list of sub-lists of the boundary curves., FloorType.Duplicate - Attemts to create duplicate floor types. If the floor type exists, it is appended to the end. Sets only the structural width of the floor. The width must be in feet., Fn.ElementsOfCategory - Same as the built in \"All Elements of Category\" but can act as a function object., Form.ByGeometry - Convert the input geometry to a Revit Form object. Forms can exist only in the family environment. You can convert complicated solids or surfaces directly into forms. A form can act as a void. Provide either one true boolean value to convert a form into a void. The node's lacing is set to longest by default., Fraction2Feet - Converts a fractioned feet /inch string value into a decimal foot value., Geometry.SplitRecursively - Splits a surface or a solid recursively, using the resulting reduced geometry for every next split., HostedInstance.ByPoints - Creates hosted family instances(doors/windows) at the specified points. You can feed either a single family type or a unique type for each instance., Input.Wait - Waits for all inputs to be completed before continuing the execution process.Part of the SmartCopyMon workflow., InterferenceCheck.Parse - Process a Revit interference check (HTML file) and extract the interference categories, all affected elements and the total number of clashes. If you are executing from a document different than the one the error report belongs to, be sure to set \"fetch_elements\" to false., Line.StraightenXY - Checks a line's end points for irregularities and corrects them if they are at or below the specified margin. The default margin is 1/5000 of the curve length, which is conservative., Line.StraightenZ - Checks a line's end points for irregularities in  the Z axis and corrects them if they are at or below the specified margin. The default margin is 1/2000 of the curve length, which is conservative., Lines.Group&FixCorners - Groups unconnected lines into sub-lists by margin(the maximum distance between endpoints) and attempts to create clean corner connections between them. Built on top of the Group curves node found in archi-lab.net., List.DragDropReorder - Press and hold on an item to move it up or down the list. To confirm and close the window, select \"Save Order\". The optional names input will override the object representation., List.DropDown - Selects one list item by a drop-down combo box. The optional names input will override the object representation., List.DropFirstLast - Removes the first and last items from the list, List.DropLast - Removes the last value of the list., List.EveryOther - Useful for when you want to combine an item on the list with every other item on the list. For example in list {1,2,3} , \"2\" will be paired up only with \"1\" and \"3\" and will not be paired up with itself., List.GetEven - Gets even indices from the list., List.GetOdd - Gets the odd indices from the list., List.Randomise&Divide - Shiffles the input list and divides it into sub-lists based on ratios(1/4 + 1/2 + 1/4 will give you three lists split accordingly) The smalest ratio will always be 1 / the list length and the largest ratio will be 1. A seed input can shuffle the list further., List.ShiftIndices+ - The built in node fails if the shift number is greater than the lenght of the list. This node acts as a work-around., List.Split - Splits a list at the desired length, Ln2Str - Serilize a geometry line to a string for use in Revit parameters, Math.AlmostEqual - Checks if a number is almost equal to a value with a specified tollerance., N-hedron.ByOriginVector - Creates a multi-sided poyhedron with defined side length and total height., NullAllIndicesOf - list all of the indices of a list that match the specified value. Capable of handling null values, part of the SmartCopyMonitor workflow., NullGetParameter - Similar to the built in node.Capable of handling null values, part of the SmartCopyMonitor workflow., NullIndexOf - Similar to the bult-in node but provides a null value instead of -1 of failure. Part of the SmartCopyMonitor workflow., NullReorder - Simiar to the built-in function with the difference that it can handle null indices. Part of the SmartCopyMonitor workflow., NullSetDifference - Similar to the built in node, with a built-in safety for null values. Part of the SmartCopyMonitor workflow., NullSetParameter - Similar to the built-in function but with the ability to handle null values. Part of the SmartCopyMon workflow., Number.ToString - Converts the input number(s) to string. Can process lists., Object.Class - Gets the input object's class name. Can process lists., Point.PullOntoPlane - Pulls (projects) the point onto the input plane, following the plane normal., Pt2Str - Serilize a geometry point to a string for use in Revit parameters, Select Edges - Select multiple edges from inside the Revit UI. Be sure to press \"Finish\" once done. You can use a Boolean toggle to refresh your selection., Select Linked Element - Select the linked instance first, followed by the element. If your selection fails, just press escape.\r\nTo refresh the node, connect a boolean switch node., Select Linked Elements - Select the linked instance first, followed by the elements. To finish the selection, press Finish. If your selection fails, just press escape or Cancel.\r\nTo refresh the node, connect a boolean switch node., Select Linked Face - Select the linked instance first, followed by the face. If your selection fails, just press escape.\r\nTo refresh the node, connect a boolean switch node., SelectInRevit - Selects the input elements in Revit. Works with Revit 2016., Shaft.ByCurves - Creates a shaft opening. The top level MUST be higher than the base level for a successful execution. You can either provide one base and top level for all shafts or have unique levels for each shaft instance., Sheet.Views+ - Extracts all views and schedules (minus the revision schedule) placed on the input sheet (or sheets).\r\nWill be depreciated once the bult in node works with all plan types., Star.ByCenterRadiusRays - Fun little node to create star shapes., Str2Ln - De-serilize a Revit parameter string into a geometric line., Str2Pt - De-serilize a Revit parameter string into a geometric point., Topography.ToPolySurface(py) - Python implementation that should boost performance by 5-10%. Optimized algorithm for converting topographies into polysurfaces. Tested with topographies containing up to 40 000 points. \r\nWarning conversions of such mangitudes consume a lot of resources and are sub-optimal. Ensure that you have at least 8GB of ram and plenty of patience before attempting such a conversion, otherwise your Dynamo and Revit instances may crash., Topography.ToPolySurface - Optimized algorithm for converting topographies into polysurfaces. Tested with topographies containing up to 40 000 points. \r\nWarning conversions of such mangitudes consume a lot of resources and are sub-optimal. Ensure that you have at least 8GB of ram and plenty of patience before attempting such a conversion, otherwise your Dynamo and Revit instances may crash., ViewSet.ByViewsName - Creates a set of views(or sheets) for printing. If the set exists, set Overwrite to true to replace it., Wall.WallType - Queries the wall type of the input wall. Works for types from linked documents as well., WallType.Duplicate - Attemts to create duplicate wall types. If the wall type exists, it is appended to the end. Sets only the structural width of the wall. The width must be in feet., Watch+ - This node that serializes the input information and presents it in a resizable text window.",
            "engine_metadata": "",
            "engine_version": "0.8.2.2392",
            "created": "2016-02-18T14:49:13.248Z",
            "full_dependency_versions": [ "82.7.7" ],
            "full_dependency_ids": [
              {
                "_id": "56077cf3662bf0e9080001ea",
                "name": "spring nodes"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "82.7.7"
          },
          {
            "_id": "56ce9b3bc3e9ee4a08000149",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/af309e18-7345-4143-8954-b7992ca28ac2gregPkg391.zip",
            "contents": "Active View - Selects the current document's active view. Supports more view types than the built-in option.\r\nWill be depreciated once the bult in node works with all plan types., Beams.FixExtents - Detects all beams from the input list with broken extents(actual length - cut length <  margin) and attemts to correct them., BoundingBox.Scale - Scales the bounding box in three dimensions according to it's center., ClosedCurve.Offset+(0.9) - Offsets a curve both ways and correctly differenciates the external and internal offset. If an offset goes beyond the curve's bounds, the result will fail and a null value will be appended instead. Also works for convex curves like arcs., ClosedCurve.Offset+ - Offsets a curve both ways and correctly differenciates the external and internal offset. If an offset goes beyond the curve's bounds, the result will fail and a null value will be appended instead. Also works for convex curves like arcs., Collector.CurrentSelection - Gets the currently selected elements. Connect a boolean switch to refresh the selection. Compatible with Revit 2016, Collector.ElementsInView - Selects all elements visible in the input view., Collector.ElementSketch - Get the actual sketch lines of a sketch based element (floor, ceiling, modified wall, etc.) . You can optionally fetch the matching model curves, however this might prove comptationally heavy on larger data sets., Collector.FamilyInstances - Collects placed family instance elements from the document that match the name. Partially mathing elements are collected as well. If no matches are found, a list of all isntance names will be output., Collector.FamilyTypes - Collects non-system family types that fully match or partially match the provided names. If no matches are found, a list of all type names will be output., Collector.FloorTypes - Collects Floor types by name., Collector.LinkedInstanceElements - Extract elements by category from the selected linked instances. The transform vector can be used to get the exact location of the elements in the local file, Collector.Revisions - Collects all revision clouds from a specific date., Collector.Sheets - Search for sheets by either their name or their number. Use a false boolean switch to search by number., Collector.Views - Search for views based on naming. You can choose to either include or exclude schedules. Use the sheet collector for sheets., Collector.WallTypes - Collects wall types by name., Color2Decimal - Converts a Dynamo colour its Revit equivalent  decimal value., Curve.Offset+ - Offsets a curve towards the specified point, CurveLoop.Simplify - Attempts to simplify an open or a closed curve loop by connecting straight separate line segments into a single line., Decimal2Color - Converts a revit colour decimal value to its Dynamo equivalent., Dictionary.ByKeysValues - Dictionaries are an incredibly powerful tool for making associative sets between two equal length lists. The first list must be of unique strings (or numbers) and will be the key and the second list will be the matching values (it can be made up of geometry, elements, even other lists)\r\nThe search keys list will provide the corresponding value to the input key., DirectShape.ByGeometry - Convert the input geometry to DirectShape element inside the Revit document.  It supports solids or surfaces.It is based on an alternative process that uses a SAT import and can produce smooth surfaces. Each created DS will have a unique type. Make sure that each input geometry has a unique name. You can either feed a single category for all geometries or a unique category for each geometry - the node's lacing is set to longest by default., DirectShape.Transform - Transforms the typed DirectShape element from the identity coordinate system to the input coordinate system(s), in a manner similar to Dynamo's Geometry.Transform node., DirectShape.Translate - Copy the input DirectShape element with the help of a translation vector, similarly to the Geometry.Translate node. This method should prove more efficient than Element.Copy, Doc.DeleteElements - Attempts to delete the input list of elements from the active Revit document.The node returns the number of successfully deleted elements and their Ids as a string. Carefully observe the deleted elements count. It may be greater than the input list because hosted elements or tags will be deleted as well. If an element in the list can not be deleted (for example last revision or last view), the whole list will fail to be deleted., Element.AddVoidCut - Accepts single or list inputs. If an element that can be cut and a family that can act as a void cutting entity are provided, the element will be cut. Please make sure that the geometries of the elements actually cut. Otherwise an empty cut will be created that may impede the performance of your file. Add void cuts sparcely because they affect the size of your project., Element.Copy - WARNING: Do not use this node in Automatic mode! Copy the input Revit elements with the help of a translation vector, similarly to the Geometry.Translate node., Element.IsCut - Tests if the element is being cut by any void instances. If any cuts exist all cutting elements will be provided., Element.IsCutting - Tests if the input element (or elements) is a void cut and if it is cutting any elements. In such cases, the cut elements will be provided., Element.RemoveVoidCut - Removes the void cut between the input elements, if such exists., Element.SetLocation - Attempts to modify the location of the input element. This can effectively add as a move comand in Revit. Works for both line based and point based elements., ErrorReport.Parse - Process a Revit error report (HTML file) and extract the error types, all affected elements and the total number of errors. If you are executing from a document different than the one the error report belongs to, be sure to set \"fetch_elements\" to false., FamilyInstance.ByGeometry - You must provide a valid family template path that will be used for all input geometry objects. The project units(and not the templates) will be used to determine the size of the output geometry.\r\nThe provided category will be used only if the family template supports it. If not, the default template category will be used instead.\r\nLikewise, the family material(provided as a string) will be set only if a material with that name exists in the template. If not, the default material will be used instead (\"By Category\").\r\nFor void cuts, the material settings will be ignored.\r\nThe Subcategory name is an optional input. If you'd like to skip assigning a Subcategory to any new instance, simply use null.\r\nThe node expects a unique family name for each geometry object. The rest of the input lists will be processed as if the node lacing is set to longest., FamilyInstance.Rotation - Fetches the angle of rotation around the insertion point of a point based element. The angle is always measured counter-clockwise., FamilyType.Duplicate - Create duplicate family types with the specified name. If the type exists, it is called., Feet2Fraction - Converts a decimal foot value to a fractional foot/inch string., File.Size - Checks the file size. Provide a file path as a string., Filter.ByCategoryName - Filters the input elements by their category name. You can input multiple category names., Filter.ByClassName - Filters a list of objects by the object's class name. Note that Dynamo elements belong to different classes than their Revit counterparts. Use the Object.Class node to check an object's class., Filter.BySelection - Check the items that you'd like to filter in.  Unchecked items will be sent to the out list. The optional names input will override the object representation., Floor-WallType.SetMaterial - Sets a new material to the structural core of the provided floor and wall types., FloorOpening.ByCurves - Create hosted floor opeinngs through the input floors. The second input is a list of sub-lists of the boundary curves., FloorType.Duplicate - Attemts to create duplicate floor types. If the floor type exists, it is appended to the end. Sets only the structural width of the floor. The width must be in feet., Fn.ElementsOfCategory - Same as the built in \"All Elements of Category\" but can act as a function object., Form.ByGeometry - Convert the input geometry to a Revit Form object. Forms can exist only in the family environment. You can convert complicated solids or surfaces directly into forms. A form can act as a void. Provide either one true boolean value to convert a form into a void. The node's lacing is set to longest by default., Fraction2Feet - Converts a fractioned feet /inch string value into a decimal foot value., Geometry.SplitRecursively - Splits a surface or a solid recursively, using the resulting reduced geometry for every next split., HostedInstance.ByPoints - Creates hosted family instances(doors/windows) at the specified points. You can feed either a single family type or a unique type for each instance., Input.Wait - Waits for all inputs to be completed before continuing the execution process.Part of the SmartCopyMon workflow., InterferenceCheck.Parse - Process a Revit interference check (HTML file) and extract the interference categories, all affected elements and the total number of clashes. If you are executing from a document different than the one the error report belongs to, be sure to set \"fetch_elements\" to false., Line.StraightenXY - Checks a line's end points for irregularities and corrects them if they are at or below the specified margin. The default margin is 1/5000 of the curve length, which is conservative., Line.StraightenZ - Checks a line's end points for irregularities in  the Z axis and corrects them if they are at or below the specified margin. The default margin is 1/2000 of the curve length, which is conservative., Lines.Group&FixCorners - Groups unconnected lines into sub-lists by margin(the maximum distance between endpoints) and attempts to create clean corner connections between them. Built on top of the Group curves node found in archi-lab.net., List.DragDropReorder - Press and hold on an item to move it up or down the list. To confirm and close the window, select \"Save Order\". The optional names input will override the object representation., List.DropDown - Selects one list item by a drop-down combo box. The optional names input will override the object representation., List.DropFirstLast - Removes the first and last items from the list, List.DropLast - Removes the last value of the list., List.EveryOther - Useful for when you want to combine an item on the list with every other item on the list. For example in list {1,2,3} , \"2\" will be paired up only with \"1\" and \"3\" and will not be paired up with itself., List.GetEven - Gets even indices from the list., List.GetOdd - Gets the odd indices from the list., List.Randomise&Divide - Shiffles the input list and divides it into sub-lists based on ratios(1/4 + 1/2 + 1/4 will give you three lists split accordingly) The smalest ratio will always be 1 / the list length and the largest ratio will be 1. A seed input can shuffle the list further., List.ShiftIndices+ - The built in node fails if the shift number is greater than the lenght of the list. This node acts as a work-around., List.Split - Splits a list at the desired length, Ln2Str - Serilize a geometry line to a string for use in Revit parameters, Math.AlmostEqual - Checks if a number is almost equal to a value with a specified tollerance., N-hedron.ByOriginVector - Creates a multi-sided poyhedron with defined side length and total height., NullAllIndicesOf - list all of the indices of a list that match the specified value. Capable of handling null values, part of the SmartCopyMonitor workflow., NullGetParameter - Similar to the built in node.Capable of handling null values, part of the SmartCopyMonitor workflow., NullIndexOf - Similar to the bult-in node but provides a null value instead of -1 of failure. Part of the SmartCopyMonitor workflow., NullReorder - Simiar to the built-in function with the difference that it can handle null indices. Part of the SmartCopyMonitor workflow., NullSetDifference - Similar to the built in node, with a built-in safety for null values. Part of the SmartCopyMonitor workflow., NullSetParameter - Similar to the built-in function but with the ability to handle null values. Part of the SmartCopyMon workflow., Number.ToString - Converts the input number(s) to string. Can process lists., Object.Class - Gets the input object's class name. Can process lists., Point.PullOntoPlane - Pulls (projects) the point onto the input plane, following the plane normal., Pt2Str - Serilize a geometry point to a string for use in Revit parameters, Select Edges - Select multiple edges from inside the Revit UI. Be sure to press \"Finish\" once done. You can use a Boolean toggle to refresh your selection., Select Linked Element - Select the linked instance first, followed by the element. If your selection fails, just press escape.\r\nTo refresh the node, connect a boolean switch node., Select Linked Elements - Select the linked instance first, followed by the elements. To finish the selection, press Finish. If your selection fails, just press escape or Cancel.\r\nTo refresh the node, connect a boolean switch node., Select Linked Face - Select the linked instance first, followed by the face. If your selection fails, just press escape.\r\nTo refresh the node, connect a boolean switch node., SelectInRevit - Selects the input elements in Revit. Works with Revit 2016., Shaft.ByCurves - Creates a shaft opening. The top level MUST be higher than the base level for a successful execution. You can either provide one base and top level for all shafts or have unique levels for each shaft instance., Sheet.Views+ - Extracts all views and schedules (minus the revision schedule) placed on the input sheet (or sheets).\r\nWill be depreciated once the bult in node works with all plan types., Star.ByCenterRadiusRays - Fun little node to create star shapes., Str2Ln - De-serilize a Revit parameter string into a geometric line., Str2Pt - De-serilize a Revit parameter string into a geometric point., Topography.ToPolySurface(py) - Python implementation that should boost performance by 5-10%. Optimized algorithm for converting topographies into polysurfaces. Tested with topographies containing up to 40 000 points. \r\nWarning conversions of such mangitudes consume a lot of resources and are sub-optimal. Ensure that you have at least 8GB of ram and plenty of patience before attempting such a conversion, otherwise your Dynamo and Revit instances may crash., Topography.ToPolySurface - Optimized algorithm for converting topographies into polysurfaces. Tested with topographies containing up to 40 000 points. \r\nWarning conversions of such mangitudes consume a lot of resources and are sub-optimal. Ensure that you have at least 8GB of ram and plenty of patience before attempting such a conversion, otherwise your Dynamo and Revit instances may crash., ViewSet.ByViewsName - Creates a set of views(or sheets) for printing. If the set exists, set Overwrite to true to replace it., Wall.WallType - Queries the wall type of the input wall. Works for types from linked documents as well., WallType.Duplicate - Attemts to create duplicate wall types. If the wall type exists, it is appended to the end. Sets only the structural width of the wall. The width must be in feet., Watch+ - This node that serializes the input information and presents it in a resizable text window.",
            "engine_metadata": "",
            "engine_version": "0.8.2.2392",
            "created": "2016-02-25T06:12:11.144Z",
            "full_dependency_versions": [ "82.7.8" ],
            "full_dependency_ids": [
              {
                "_id": "56077cf3662bf0e9080001ea",
                "name": "spring nodes"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "82.7.8"
          },
          {
            "_id": "570130725bee3e21380000d4",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/876b59d3-1ca7-4ebe-8338-b92c8d29823egregPkg811.zip",
            "contents": "Active View - Selects the current document's active view. Supports more view types than the built-in option.\r\nWill be depreciated once the bult in node works with all plan types., AreaPlan.ByLevelName - Creates an area plan at the designated levels. Each new view needs a name. An area scheme must first be activated before it can be used. To activate a scheme, place one view of that type in the project(you can then delete it).  If a view with the same scheme and name exists, you'll get a null instead., Beams.FixExtents - Detects all beams from the input list with broken extents(actual length - cut length <  margin) and attemts to correct them., BoundingBox.Scale - Scales the bounding box in three dimensions according to it's center., ClosedCurve.Offset+(0.9) - Offsets a curve both ways and correctly differenciates the external and internal offset. If an offset goes beyond the curve's bounds, the result will fail and a null value will be appended instead. Also works for convex curves like arcs., ClosedCurve.Offset+ - Offsets a curve both ways and correctly differenciates the external and internal offset. If an offset goes beyond the curve's bounds, the result will fail and a null value will be appended instead. Also works for convex curves like arcs., Collector.CurrentSelection - Gets the currently selected elements. Connect a boolean switch to refresh the selection. Compatible with Revit 2016, Collector.ElementsInView - Selects all elements visible in the input view., Collector.ElementSketch - Get the actual sketch lines of a sketch based element (floor, ceiling, modified wall, etc.) . You can optionally fetch the matching model curves, however this might prove comptationally heavy on larger data sets., Collector.FamilyInstances - Collects placed family instance elements from the document that match the name. Partially mathing elements are collected as well. If no matches are found, a list of all isntance names will be output., Collector.FamilyTypes - Collects non-system family types that fully match or partially match the provided names. If no matches are found, a list of all type names will be output., Collector.FloorTypes - Collects Floor types by name., Collector.LinkedInstanceElements - Extract elements by category from the selected linked instances. The transform vector can be used to get the exact location of the elements in the local file, Collector.Revisions - Collects all revision clouds from a specific date., Collector.Sheets - Search for sheets by either their name or their number. Use a false boolean switch to search by number., Collector.Views - Search for views based on naming. You can choose to either include or exclude schedules. Use the sheet collector for sheets., Collector.WallTypes - Collects wall types by name., Color2Decimal - Converts a Dynamo colour its Revit equivalent  decimal value., Curve.Offset+ - Offsets a curve towards the specified point, CurveLoop.Simplify - Attempts to simplify an open or a closed curve loop by connecting straight separate line segments into a single line., Decimal2Color - Converts a revit colour decimal value to its Dynamo equivalent., Dictionary.ByKeysValues - Dictionaries are an incredibly powerful tool for making associative sets between two equal length lists. The first list must be of unique strings (or numbers) and will be the key and the second list will be the matching values (it can be made up of geometry, elements, even other lists)\r\nThe search keys list will provide the corresponding value to the input key., DirectShape.ByGeometry - Convert the input geometry to DirectShape element inside the Revit document.  It supports solids or surfaces.It is based on an alternative process that uses a SAT import and can produce smooth surfaces. Each created DS will have a unique type. Make sure that each input geometry has a unique name. You can either feed a single category for all geometries or a unique category for each geometry - the node's lacing is set to longest by default., DirectShape.Transform - Transforms the typed DirectShape element from the identity coordinate system to the input coordinate system(s), in a manner similar to Dynamo's Geometry.Transform node., DirectShape.Translate - Copy the input DirectShape element with the help of a translation vector, similarly to the Geometry.Translate node. This method should prove more efficient than Element.Copy, Doc.DeleteElements - Attempts to delete the input list of elements from the active Revit document.The node returns the number of successfully deleted elements and their Ids as a string. Carefully observe the deleted elements count. It may be greater than the input list because hosted elements or tags will be deleted as well. If an element in the list can not be deleted (for example last revision or last view), the whole list will fail to be deleted., Element.AddVoidCut - Accepts single or list inputs. If an element that can be cut and a family that can act as a void cutting entity are provided, the element will be cut. Please make sure that the geometries of the elements actually cut. Otherwise an empty cut will be created that may impede the performance of your file. Add void cuts sparcely because they affect the size of your project., Element.Copy - WARNING: Do not use this node in Automatic mode! Copy the input Revit elements with the help of a translation vector, similarly to the Geometry.Translate node., Element.IsCut - Tests if the element is being cut by any void instances. If any cuts exist all cutting elements will be provided., Element.IsCutting - Tests if the input element (or elements) is a void cut and if it is cutting any elements. In such cases, the cut elements will be provided., Element.RemoveVoidCut - Removes the void cut between the input elements, if such exists., Element.SetLocation - Attempts to modify the location of the input element. This can effectively add as a move comand in Revit. Works for both line based and point based elements., ErrorReport.Parse - Process a Revit error report (HTML file) and extract the error types, all affected elements and the total number of errors. If you are executing from a document different than the one the error report belongs to, be sure to set \"fetch_elements\" to false., FamilyInsance.ByFacePoints - Places instances on the input face oriented to the face's U tangent and the global Z axis., FamilyInstance.ByGeometry - You must provide a valid family template path that will be used for all input geometry objects. The project units(and not the templates) will be used to determine the size of the output geometry.\r\nThe provided category will be used only if the family template supports it. If not, the default template category will be used instead.\r\nLikewise, the family material(provided as a string) will be set only if a material with that name exists in the template. If not, the default material will be used instead (\"By Category\").\r\nFor void cuts, the material settings will be ignored.\r\nThe Subcategory name is an optional input. If you'd like to skip assigning a Subcategory to any new instance, simply use null.\r\nThe node expects a unique family name for each geometry object. The rest of the input lists will be processed as if the node lacing is set to longest., FamilyInstance.Rotation - Fetches the angle of rotation around the insertion point of a point based element. The angle is always measured counter-clockwise., FamilyType.Duplicate - Create duplicate family types with the specified name. If the type exists, it is called., Feet2Fraction - Converts a decimal foot value to a fractional foot/inch string., File.Size - Checks the file size. Provide a file path as a string., Filter.ByCategoryName - Filters the input elements by their category name. You can input multiple category names., Filter.ByClassName - Filters a list of objects by the object's class name. Note that Dynamo elements belong to different classes than their Revit counterparts. Use the Object.Class node to check an object's class., Filter.BySelection - Check the items that you'd like to filter in.  Unchecked items will be sent to the out list. The optional names input will override the object representation., Floor-WallType.SetMaterial - Sets a new material to the structural core of the provided floor and wall types., FloorOpening.ByCurves - Create hosted floor opeinngs through the input floors. The second input is a list of sub-lists of the boundary curves., FloorType.Duplicate - Attemts to create duplicate floor types. If the floor type exists, it is appended to the end. Sets only the structural width of the floor. The width must be in feet., Fn.ElementsOfCategory - Same as the built in \"All Elements of Category\" but can act as a function object., Form.ByGeometry - Convert the input geometry to a Revit Form object. Forms can exist only in the family environment. You can convert complicated solids or surfaces directly into forms. A form can act as a void. Provide either one true boolean value to convert a form into a void. The node's lacing is set to longest by default., Fraction2Feet - Converts a fractioned feet /inch string value into a decimal foot value., Geometry.SplitRecursively - Splits a surface or a solid recursively, using the resulting reduced geometry for every next split., HostedInstance.ByPoints - Creates hosted family instances(doors/windows) at the specified points. You can feed either a single family type or a unique type for each instance., Input.Wait - Waits for all inputs to be completed before continuing the execution process.Part of the SmartCopyMon workflow., InterferenceCheck.Parse - Process a Revit interference check (HTML file) and extract the interference categories, all affected elements and the total number of clashes. If you are executing from a document different than the one the error report belongs to, be sure to set \"fetch_elements\" to false., Line.StraightenXY - Checks a line's end points for irregularities and corrects them if they are at or below the specified margin. The default margin is 1/5000 of the curve length, which is conservative., Line.StraightenZ - Checks a line's end points for irregularities in  the Z axis and corrects them if they are at or below the specified margin. The default margin is 1/2000 of the curve length, which is conservative., Lines.Group&FixCorners - Groups unconnected lines into sub-lists by margin(the maximum distance between endpoints) and attempts to create clean corner connections between them. Built on top of the Group curves node found in archi-lab.net., List.DragDropReorder - Press and hold on an item to move it up or down the list. To confirm and close the window, select \"Save Order\". The optional names input will override the object representation., List.DropDown - Selects one list item by a drop-down combo box. The optional names input will override the object representation., List.DropFirstLast - Removes the first and last items from the list, List.DropLast - Removes the last value of the list., List.EveryOther - Useful for when you want to combine an item on the list with every other item on the list. For example in list {1,2,3} , \"2\" will be paired up only with \"1\" and \"3\" and will not be paired up with itself., List.GetEven - Gets even indices from the list., List.GetOdd - Gets the odd indices from the list., List.Randomise&Divide - Shiffles the input list and divides it into sub-lists based on ratios(1/4 + 1/2 + 1/4 will give you three lists split accordingly) The smalest ratio will always be 1 / the list length and the largest ratio will be 1. A seed input can shuffle the list further., List.ShiftIndices+ - The built in node fails if the shift number is greater than the lenght of the list. This node acts as a work-around., List.Split - Splits a list at the desired length, Ln2Str - Serilize a geometry line to a string for use in Revit parameters, Math.AlmostEqual - Checks if a number is almost equal to a value with a specified tollerance., N-hedron.ByOriginVector - Creates a multi-sided poyhedron with defined side length and total height., NullAllIndicesOf - list all of the indices of a list that match the specified value. Capable of handling null values, part of the SmartCopyMonitor workflow., NullGetParameter - Similar to the built in node.Capable of handling null values, part of the SmartCopyMonitor workflow., NullIndexOf - Similar to the bult-in node but provides a null value instead of -1 of failure. Part of the SmartCopyMonitor workflow., NullReorder - Simiar to the built-in function with the difference that it can handle null indices. Part of the SmartCopyMonitor workflow., NullSetDifference - Similar to the built in node, with a built-in safety for null values. Part of the SmartCopyMonitor workflow., NullSetParameter - Similar to the built-in function but with the ability to handle null values. Part of the SmartCopyMon workflow., Number.ToString - Converts the input number(s) to string. Can process lists., Object.Class - Gets the input object's class name. Can process lists., Point.PullOntoPlane - Pulls (projects) the point onto the input plane, following the plane normal., Polygon.ContainmentTest+ - A less accurate method that should perform faster than the built-in node for large data sets., Pt2Str - Serilize a geometry point to a string for use in Revit parameters, Select Edges - Select multiple edges from inside the Revit UI. Be sure to press \"Finish\" once done. You can use a Boolean toggle to refresh your selection., Select Elements (ordered) - Select multiple elements from the Revit document in the desired order. Hit ESC to stop picking. To refresh the node, connect a boolean switch node., Select Linked Element - Select the linked instance first, followed by the element. If your selection fails, just press escape.\r\nTo refresh the node, connect a boolean switch node., Select Linked Elements (ordered) - Select the linked instance first. Then select multiple elements from the Revit document in the desired order. Hit ESC to stop picking. To refresh the node, connect a boolean switch node., Select Linked Elements - Select the linked instance first, followed by the elements. To finish the selection, press Finish. If your selection fails, just press escape or Cancel.\r\nTo refresh the node, connect a boolean switch node., Select Linked Face - Select the linked instance first, followed by the face. If your selection fails, just press escape.\r\nTo refresh the node, connect a boolean switch node., SelectInRevit - Selects the input elements in Revit. Works with Revit 2016., Shaft.ByCurves - Creates a shaft opening. The top level MUST be higher than the base level for a successful execution. You can either provide one base and top level for all shafts or have unique levels for each shaft instance., Sheet.Views+ - Extracts all views and schedules (minus the revision schedule) placed on the input sheet (or sheets).\r\nWill be depreciated once the bult in node works with all plan types., Star.ByCenterRadiusRays - Fun little node to create star shapes., Str2Ln - De-serilize a Revit parameter string into a geometric line., Str2Pt - De-serilize a Revit parameter string into a geometric point., Topography.ToPolySurface(py) - Python implementation that should boost performance by 5-10%. Optimized algorithm for converting topographies into polysurfaces. Tested with topographies containing up to 40 000 points. \r\nWarning conversions of such mangitudes consume a lot of resources and are sub-optimal. Ensure that you have at least 8GB of ram and plenty of patience before attempting such a conversion, otherwise your Dynamo and Revit instances may crash., Topography.ToPolySurface - Optimized algorithm for converting topographies into polysurfaces. Tested with topographies containing up to 40 000 points. \r\nWarning conversions of such mangitudes consume a lot of resources and are sub-optimal. Ensure that you have at least 8GB of ram and plenty of patience before attempting such a conversion, otherwise your Dynamo and Revit instances may crash., ViewSet.ByViewsName - Creates a set of views(or sheets) for printing. If the set exists, set Overwrite to true to replace it., Wall.WallType - Queries the wall type of the input wall. Works for types from linked documents as well., WallType.Duplicate - Attemts to create duplicate wall types. If the wall type exists, it is appended to the end. Sets only the structural width of the wall. The width must be in feet., Watch+ - This node that serializes the input information and presents it in a resizable text window.",
            "engine_metadata": "",
            "engine_version": "0.8.2.2392",
            "created": "2016-04-03T15:02:10.495Z",
            "full_dependency_versions": [ "82.8.1" ],
            "full_dependency_ids": [
              {
                "_id": "56077cf3662bf0e9080001ea",
                "name": "spring nodes"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "82.8.1"
          },
          {
            "_id": "57022a045bee3e21380000d5",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/115f0698-a796-4ad5-975a-a285c242f434gregPkg227.zip",
            "contents": "Active View - Selects the current document's active view. Supports more view types than the built-in option.\r\nWill be depreciated once the bult in node works with all plan types., AreaPlan.ByLevelName - Creates an area plan at the designated levels. Each new view needs a name. An area scheme must first be activated before it can be used. To activate a scheme, place one view of that type in the project(you can then delete it).  If a view with the same scheme and name exists, you'll get a null instead., Beams.FixExtents - Detects all beams from the input list with broken extents(actual length - cut length <  margin) and attemts to correct them., BoundingBox.Scale - Scales the bounding box in three dimensions according to it's center., ClosedCurve.Offset+(0.9) - Offsets a curve both ways and correctly differenciates the external and internal offset. If an offset goes beyond the curve's bounds, the result will fail and a null value will be appended instead. Also works for convex curves like arcs., ClosedCurve.Offset+ - Offsets a curve both ways and correctly differenciates the external and internal offset. If an offset goes beyond the curve's bounds, the result will fail and a null value will be appended instead. Also works for convex curves like arcs., Collector.CurrentSelection - Gets the currently selected elements. Connect a boolean switch to refresh the selection. Compatible with Revit 2016, Collector.ElementsInView - Selects all elements visible in the input view., Collector.ElementSketch - Get the actual sketch lines of a sketch based element (floor, ceiling, modified wall, etc.) . You can optionally fetch the matching model curves, however this might prove comptationally heavy on larger data sets., Collector.FamilyInstances - Collects placed family instance elements from the document that match the name. Partially mathing elements are collected as well. If no matches are found, a list of all isntance names will be output., Collector.FamilyTypes - Collects non-system family types that fully match or partially match the provided names. If no matches are found, a list of all type names will be output., Collector.FloorTypes - Collects Floor types by name., Collector.LinkedInstanceElements - Extract elements by category from the selected linked instances. The transform vector can be used to get the exact location of the elements in the local file, Collector.Revisions - Collects all revision clouds from a specific date., Collector.Sheets - Search for sheets by either their name or their number. Use a false boolean switch to search by number., Collector.Views - Search for views based on naming. You can choose to either include or exclude schedules. Use the sheet collector for sheets., Collector.WallTypes - Collects wall types by name., Color2Decimal - Converts a Dynamo colour its Revit equivalent  decimal value., Curve.Offset+ - Offsets a curve towards the specified point, CurveLoop.Simplify - Attempts to simplify an open or a closed curve loop by connecting straight separate line segments into a single line., Decimal2Color - Converts a revit colour decimal value to its Dynamo equivalent., Dictionary.ByKeysValues - Dictionaries are an incredibly powerful tool for making associative sets between two equal length lists. The first list must be of unique strings (or numbers) and will be the key and the second list will be the matching values (it can be made up of geometry, elements, even other lists)\r\nThe search keys list will provide the corresponding value to the input key., DirectShape.ByGeometry - Convert the input geometry to DirectShape element inside the Revit document.  It supports solids or surfaces.It is based on an alternative process that uses a SAT import and can produce smooth surfaces. Each created DS will have a unique type. Make sure that each input geometry has a unique name. You can either feed a single category for all geometries or a unique category for each geometry - the node's lacing is set to longest by default., DirectShape.Transform - Transforms the typed DirectShape element from the identity coordinate system to the input coordinate system(s), in a manner similar to Dynamo's Geometry.Transform node., DirectShape.Translate - Copy the input DirectShape element with the help of a translation vector, similarly to the Geometry.Translate node. This method should prove more efficient than Element.Copy, Doc.DeleteElements - Attempts to delete the input list of elements from the active Revit document.The node returns the number of successfully deleted elements and their Ids as a string. Carefully observe the deleted elements count. It may be greater than the input list because hosted elements or tags will be deleted as well. If an element in the list can not be deleted (for example last revision or last view), the whole list will fail to be deleted., Element.AddVoidCut - Accepts single or list inputs. If an element that can be cut and a family that can act as a void cutting entity are provided, the element will be cut. Please make sure that the geometries of the elements actually cut. Otherwise an empty cut will be created that may impede the performance of your file. Add void cuts sparcely because they affect the size of your project., Element.Copy - WARNING: Do not use this node in Automatic mode! Copy the input Revit elements with the help of a translation vector, similarly to the Geometry.Translate node., Element.IsCut - Tests if the element is being cut by any void instances. If any cuts exist all cutting elements will be provided., Element.IsCutting - Tests if the input element (or elements) is a void cut and if it is cutting any elements. In such cases, the cut elements will be provided., Element.RemoveVoidCut - Removes the void cut between the input elements, if such exists., Element.SetLocation - Attempts to modify the location of the input element. This can effectively add as a move comand in Revit. Works for both line based and point based elements., ErrorReport.Parse - Process a Revit error report (HTML file) and extract the error types, all affected elements and the total number of errors. If you are executing from a document different than the one the error report belongs to, be sure to set \"fetch_elements\" to false., FamilyInsance.ByFacePoints - Places instances on the input face oriented to the face's U tangent and the global Z axis., FamilyInstance.ByGeometry - You must provide a valid family template path that will be used for all input geometry objects. The project units(and not the templates) will be used to determine the size of the output geometry.\r\nThe provided category will be used only if the family template supports it. If not, the default template category will be used instead.\r\nLikewise, the family material(provided as a string) will be set only if a material with that name exists in the template. If not, the default material will be used instead (\"By Category\").\r\nFor void cuts, the material settings will be ignored.\r\nThe Subcategory name is an optional input. If you'd like to skip assigning a Subcategory to any new instance, simply use null.\r\nThe node expects a unique family name for each geometry object. The rest of the input lists will be processed as if the node lacing is set to longest., FamilyInstance.Rotation - Fetches the angle of rotation around the insertion point of a point based element. The angle is always measured counter-clockwise., FamilyType.Duplicate - Create duplicate family types with the specified name. If the type exists, it is called., Feet2Fraction - Converts a decimal foot value to a fractional foot/inch string., File.Size - Checks the file size. Provide a file path as a string., Filter.ByCategoryName - Filters the input elements by their category name. You can input multiple category names., Filter.ByClassName - Filters a list of objects by the object's class name. Note that Dynamo elements belong to different classes than their Revit counterparts. Use the Object.Class node to check an object's class., Filter.BySelection - Check the items that you'd like to filter in.  Unchecked items will be sent to the out list. The optional names input will override the object representation., Floor-WallType.SetMaterial - Sets a new material to the structural core of the provided floor and wall types., FloorOpening.ByCurves - Create hosted floor opeinngs through the input floors. The second input is a list of sub-lists of the boundary curves., FloorType.Duplicate - Attemts to create duplicate floor types. If the floor type exists, it is appended to the end. Sets only the structural width of the floor. The width must be in feet., Fn.ElementsOfCategory - Same as the built in \"All Elements of Category\" but can act as a function object., Form.ByGeometry - Convert the input geometry to a Revit Form object. Forms can exist only in the family environment. You can convert complicated solids or surfaces directly into forms. A form can act as a void. Provide either one true boolean value to convert a form into a void. The node's lacing is set to longest by default., Fraction2Feet - Converts a fractioned feet /inch string value into a decimal foot value., Geometry.SplitRecursively - Splits a surface or a solid recursively, using the resulting reduced geometry for every next split., HostedInstance.ByPoints - Creates hosted family instances(doors/windows) at the specified points. You can feed either a single family type or a unique type for each instance., Input.Wait - Waits for all inputs to be completed before continuing the execution process.Part of the SmartCopyMon workflow., InterferenceCheck.Parse - Process a Revit interference check (HTML file) and extract the interference categories, all affected elements and the total number of clashes. If you are executing from a document different than the one the error report belongs to, be sure to set \"fetch_elements\" to false., Line.StraightenXY - Checks a line's end points for irregularities and corrects them if they are at or below the specified margin. The default margin is 1/5000 of the curve length, which is conservative., Line.StraightenZ - Checks a line's end points for irregularities in  the Z axis and corrects them if they are at or below the specified margin. The default margin is 1/2000 of the curve length, which is conservative., Lines.Group&FixCorners - Groups unconnected lines into sub-lists by margin(the maximum distance between endpoints) and attempts to create clean corner connections between them. Built on top of the Group curves node found in archi-lab.net., List.DragDropReorder - Press and hold on an item to move it up or down the list. To confirm and close the window, select \"Save Order\". The optional names input will override the object representation., List.DropDown - Selects one list item by a drop-down combo box. The optional names input will override the object representation., List.DropFirstLast - Removes the first and last items from the list, List.DropLast - Removes the last value of the list., List.EveryOther - Useful for when you want to combine an item on the list with every other item on the list. For example in list {1,2,3} , \"2\" will be paired up only with \"1\" and \"3\" and will not be paired up with itself., List.GetEven - Gets even indices from the list., List.GetOdd - Gets the odd indices from the list., List.Randomise&Divide - Shiffles the input list and divides it into sub-lists based on ratios(1/4 + 1/2 + 1/4 will give you three lists split accordingly) The smalest ratio will always be 1 / the list length and the largest ratio will be 1. A seed input can shuffle the list further., List.ShiftIndices+ - The built in node fails if the shift number is greater than the lenght of the list. This node acts as a work-around., List.Split - Splits a list at the desired length, Ln2Str - Serilize a geometry line to a string for use in Revit parameters, Math.AlmostEqual - Checks if a number is almost equal to a value with a specified tollerance., N-hedron.ByOriginVector - Creates a multi-sided poyhedron with defined side length and total height., NullAllIndicesOf - list all of the indices of a list that match the specified value. Capable of handling null values, part of the SmartCopyMonitor workflow., NullGetParameter - Similar to the built in node.Capable of handling null values, part of the SmartCopyMonitor workflow., NullIndexOf - Similar to the bult-in node but provides a null value instead of -1 of failure. Part of the SmartCopyMonitor workflow., NullReorder - Simiar to the built-in function with the difference that it can handle null indices. Part of the SmartCopyMonitor workflow., NullSetDifference - Similar to the built in node, with a built-in safety for null values. Part of the SmartCopyMonitor workflow., NullSetParameter - Similar to the built-in function but with the ability to handle null values. Part of the SmartCopyMon workflow., Number.ToString - Converts the input number(s) to string. Can process lists., Object.Class - Gets the input object's class name. Can process lists., Point.PullOntoPlane - Pulls (projects) the point onto the input plane, following the plane normal., Polygon.ContainmentTest+ - A less accurate method that should perform faster than the built-in node for large data sets., Pt2Str - Serilize a geometry point to a string for use in Revit parameters, Select Edges - Select multiple edges from inside the Revit UI. Be sure to press \"Finish\" once done. You can use a Boolean toggle to refresh your selection., Select Elements (ordered) - Select multiple elements from the Revit document in the desired order. Hit ESC to stop picking. To refresh the node, connect a boolean switch node., Select Linked Element - Select the linked instance first, followed by the element. If your selection fails, just press escape.\r\nTo refresh the node, connect a boolean switch node., Select Linked Elements (ordered) - Select the linked instance first. Then select multiple elements from the Revit document in the desired order. Hit ESC to stop picking. To refresh the node, connect a boolean switch node., Select Linked Elements - Select the linked instance first, followed by the elements. To finish the selection, press Finish. If your selection fails, just press escape or Cancel.\r\nTo refresh the node, connect a boolean switch node., Select Linked Face - Select the linked instance first, followed by the face. If your selection fails, just press escape.\r\nTo refresh the node, connect a boolean switch node., SelectInRevit - Selects the input elements in Revit. Works with Revit 2016., Shaft.ByCurves - Creates a shaft opening. The top level MUST be higher than the base level for a successful execution. You can either provide one base and top level for all shafts or have unique levels for each shaft instance., Sheet.Views+ - Extracts all views and schedules (minus the revision schedule) placed on the input sheet (or sheets).\r\nWill be depreciated once the bult in node works with all plan types., Star.ByCenterRadiusRays - Fun little node to create star shapes., Str2Ln - De-serilize a Revit parameter string into a geometric line., Str2Pt - De-serilize a Revit parameter string into a geometric point., Topography.ToPolySurface(py) - Python implementation that should boost performance by 5-10%. Optimized algorithm for converting topographies into polysurfaces. Tested with topographies containing up to 40 000 points. \r\nWarning conversions of such mangitudes consume a lot of resources and are sub-optimal. Ensure that you have at least 8GB of ram and plenty of patience before attempting such a conversion, otherwise your Dynamo and Revit instances may crash., Topography.ToPolySurface - Optimized algorithm for converting topographies into polysurfaces. Tested with topographies containing up to 40 000 points. \r\nWarning conversions of such mangitudes consume a lot of resources and are sub-optimal. Ensure that you have at least 8GB of ram and plenty of patience before attempting such a conversion, otherwise your Dynamo and Revit instances may crash., ViewSet.ByViewsName - Creates a set of views(or sheets) for printing. If the set exists, set Overwrite to true to replace it., Wall.WallType - Queries the wall type of the input wall. Works for types from linked documents as well., WallType.Duplicate - Attemts to create duplicate wall types. If the wall type exists, it is appended to the end. Sets only the structural width of the wall. The width must be in feet., Watch+ - This node that serializes the input information and presents it in a resizable text window.",
            "engine_metadata": "",
            "engine_version": "0.8.2.2392",
            "created": "2016-04-04T08:47:00.445Z",
            "full_dependency_versions": [ "82.8.2" ],
            "full_dependency_ids": [
              {
                "_id": "56077cf3662bf0e9080001ea",
                "name": "spring nodes"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "82.8.2"
          },
          {
            "_id": "572f5bdc384037b37e000033",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-prod/e5a38d8d-2204-4d0c-b312-169c8db3acf6gregPkg663.zip",
            "contents": "Active View - Selects the current document's active view. Supports more view types than the built-in option.\r\nWill be depreciated once the bult in node works with all plan types., AreaPlan.ByLevelName - Creates an area plan at the designated levels. Each new view needs a name. An area scheme must first be activated before it can be used. To activate a scheme, place one view of that type in the project(you can then delete it).  If a view with the same scheme and name exists, you'll get a null instead., Beams.FixExtents - Detects all beams from the input list with broken extents(actual length - cut length <  margin) and attemts to correct them., BoundingBox.Scale - Scales the bounding box in three dimensions according to it's center., ClosedCurve.Offset+ - Offsets a curve both ways and correctly differenciates the external and internal offset. If an offset goes beyond the curve's bounds, the result will fail and a null value will be appended instead. Also works for convex curves like arcs., Collector.CurrentSelection - Gets the currently selected elements. Connect a boolean switch to refresh the selection. Compatible with Revit 2016, Collector.ElementsInView - Selects all elements visible in the input view., Collector.ElementSketch - Get the actual sketch lines of a sketch based element (floor, ceiling, modified wall, etc.) . You can optionally fetch the matching model curves, however this might prove comptationally heavy on larger data sets., Collector.FamilyInstances - Collects placed family instance elements from the document that match the name. Partially mathing elements are collected as well. If no matches are found, a list of all isntance names will be output., Collector.FamilyTypes - Collects non-system family types that fully match or partially match the provided names. If no matches are found, a list of all type names will be output., Collector.FloorTypes - Collects Floor types by name., Collector.LinkedInstanceElements - Extract elements by category from the selected linked instances. The transform vector can be used to get the exact location of the elements in the local file, Collector.Revisions - Collects all revision clouds from a specific date., Collector.Sheets - Search for sheets by either their name or their number. Use a false boolean switch to search by number., Collector.Views - Search for views based on naming. You can choose to either include or exclude schedules. Use the sheet collector for sheets., Collector.WallTypes - Collects wall types by name., Color2Decimal - Converts a Dynamo colour its Revit equivalent  decimal value., Curve.Offset+ - Offsets a curve towards the specified point, CurveLoop.Simplify - Attempts to simplify an open or a closed curve loop by connecting straight separate line segments into a single line., Decimal2Color - Converts a revit colour decimal value to its Dynamo equivalent., Dictionary.ByKeysValues - Dictionaries are an incredibly powerful tool for making associative sets between two equal length lists. The first list must be of unique strings (or numbers) and will be the key and the second list will be the matching values (it can be made up of geometry, elements, even other lists)\r\nThe search keys list will provide the corresponding value to the input key., DirectShape.ByGeometry - Convert the input geometry to DirectShape element inside the Revit document.  It supports solids or surfaces.It is based on an alternative process that uses a SAT import and can produce smooth surfaces. Each created DS will have a unique type. Make sure that each input geometry has a unique name. You can either feed a single category for all geometries or a unique category for each geometry - the node's lacing is set to longest by default., DirectShape.Transform - Transforms the typed DirectShape element from the identity coordinate system to the input coordinate system(s), in a manner similar to Dynamo's Geometry.Transform node., DirectShape.Translate - Copy the input DirectShape element with the help of a translation vector, similarly to the Geometry.Translate node. This method should prove more efficient than Element.Copy, Doc.DeleteElements - Attempts to delete the input list of elements from the active Revit document.The node returns the number of successfully deleted elements and their Ids as a string. Carefully observe the deleted elements count. It may be greater than the input list because hosted elements or tags will be deleted as well. If an element in the list can not be deleted (for example last revision or last view), the whole list will fail to be deleted., Element.AddVoidCut - Accepts single or list inputs. If an element that can be cut and a family that can act as a void cutting entity are provided, the element will be cut. Please make sure that the geometries of the elements actually cut. Otherwise an empty cut will be created that may impede the performance of your file. Add void cuts sparcely because they affect the size of your project. Lacing takes an integer input.\r\n0 = Shortest (default)\r\n1 = Longest\r\n2 = Cross-product, Element.Copy - WARNING: Do not use this node in Automatic mode! Copy the input Revit elements with the help of a translation vector, similarly to the Geometry.Translate node., Element.IsCut - Tests if the element is being cut by any void instances. If any cuts exist all cutting elements will be provided., Element.IsCutting - Tests if the input element (or elements) is a void cut and if it is cutting any elements. In such cases, the cut elements will be provided., Element.RemoveVoidCut - Removes the void cut between the input elements, if such exists., Element.SetLocation - Attempts to modify the location of the input element. This can effectively add as a move comand in Revit. Works for both line based and point based elements., ErrorReport.Parse - Process a Revit error report (HTML file) and extract the error types, all affected elements and the total number of errors. If you are executing from a document different than the one the error report belongs to, be sure to set \"fetch_elements\" to false., FamilyInsance.ByFacePoints - Places instances on the input face oriented to the face's U tangent and the global Z axis., FamilyInstance.ByGeometry - You must provide a valid family template path that will be used for all input geometry objects. The project units(and not the templates) will be used to determine the size of the output geometry.\r\nThe provided category will be used only if the family template supports it. If not, the default template category will be used instead.\r\nLikewise, the family material(provided as a string) will be set only if a material with that name exists in the template. If not, the default material will be used instead (\"By Category\").\r\nFor void cuts, the material settings will be ignored.\r\nThe Subcategory name is an optional input. If you'd like to skip assigning a Subcategory to any new instance, simply use null.\r\nThe node expects a unique family name for each geometry object. The rest of the input lists will be processed as if the node lacing is set to longest., FamilyInstance.Rotation - Fetches the angle of rotation around the insertion point of a point based element. The angle is always measured counter-clockwise., FamilyType.Duplicate - Create duplicate family types with the specified name. If the type exists, it is called., Feet2Fraction - Converts a decimal foot value to a fractional foot/inch string., File.Size - Checks the file size. Provide a file path as a string., Filter.ByCategoryName - Filters the input elements by their category name. You can input multiple category names., Filter.ByClassName - Filters a list of objects by the object's class name. Note that Dynamo elements belong to different classes than their Revit counterparts. Use the Object.Class node to check an object's class., Filter.BySelection - Check the items that you'd like to filter in.  Unchecked items will be sent to the out list. The optional names input will override the object representation., Floor-WallType.SetMaterial - Sets a new material to the structural core of the provided floor and wall types., FloorOpening.ByCurves - Create hosted floor opeinngs through the input floors. The second input is a list of sub-lists of the boundary curves., FloorType.Duplicate - Attemts to create duplicate floor types. If the floor type exists, it is appended to the end. Sets only the structural width of the floor. The width must be in feet., Fn.ElementsOfCategory - Same as the built in \"All Elements of Category\" but can act as a function object., Form.ByGeometry - Convert the input geometry to a Revit Form object. Forms can exist only in the family environment. You can convert complicated solids or surfaces directly into forms. A form can act as a void. Provide either one true boolean value to convert a form into a void. The node's lacing is set to longest by default., Fraction2Feet - Converts a fractioned feet /inch string value into a decimal foot value., Geometry.SplitRecursively - Splits a surface or a solid recursively, using the resulting reduced geometry for every next split., HostedInstance.ByPoints - Creates hosted family instances(doors/windows) at the specified points. You can feed either a single family type or a unique type for each instance., Input.Wait - Waits for all inputs to be completed before continuing the execution process.Part of the SmartCopyMon workflow., InterferenceCheck.Parse - Process a Revit interference check (HTML file) and extract the interference categories, all affected elements and the total number of clashes. If you are executing from a document different than the one the error report belongs to, be sure to set \"fetch_elements\" to false., Line.StraightenXY - Checks a line's end points for irregularities and corrects them if they are at or below the specified margin. The default margin is 1/5000 of the curve length, which is conservative., Line.StraightenZ - Checks a line's end points for irregularities in  the Z axis and corrects them if they are at or below the specified margin. The default margin is 1/2000 of the curve length, which is conservative., Lines.Group&FixCorners - Groups unconnected lines into sub-lists by margin(the maximum distance between endpoints) and attempts to create clean corner connections between them. Built on top of the Group curves node found in archi-lab.net., List.DragDropReorder - Press and hold on an item to move it up or down the list. To confirm and close the window, select \"Save Order\". The optional names input will override the object representation., List.DropDown - Selects one list item by a drop-down combo box. The optional names input will override the object representation., List.DropFirstLast - Removes the first and last items from the list, List.DropLast - Removes the last value of the list., List.EveryOther - Useful for when you want to combine an item on the list with every other item on the list. For example in list {1,2,3} , \"2\" will be paired up only with \"1\" and \"3\" and will not be paired up with itself., List.GetEven - Gets even indices from the list., List.GetOdd - Gets the odd indices from the list., List.Randomise&Divide - Shiffles the input list and divides it into sub-lists based on ratios(1/4 + 1/2 + 1/4 will give you three lists split accordingly) The smalest ratio will always be 1 / the list length and the largest ratio will be 1. A seed input can shuffle the list further., List.ShiftIndices+ - The built in node fails if the shift number is greater than the lenght of the list. This node acts as a work-around., List.Split - Splits a list at the desired length, Ln2Str - Serilize a geometry line to a string for use in Revit parameters, Math.AlmostEqual - Checks if a number is almost equal to a value with a specified tollerance., N-hedron.ByOriginVector - Creates a multi-sided poyhedron with defined side length and total height., NullAllIndicesOf - list all of the indices of a list that match the specified value. Capable of handling null values, part of the SmartCopyMonitor workflow., NullGetParameter - Similar to the built in node.Capable of handling null values, part of the SmartCopyMonitor workflow., NullIndexOf - Similar to the bult-in node but provides a null value instead of -1 of failure. Part of the SmartCopyMonitor workflow., NullReorder - Simiar to the built-in function with the difference that it can handle null indices. Part of the SmartCopyMonitor workflow., NullSetDifference - Similar to the built in node, with a built-in safety for null values. Part of the SmartCopyMonitor workflow., NullSetParameter - Similar to the built-in function but with the ability to handle null values. Part of the SmartCopyMon workflow., Number.ToString - Converts the input number(s) to string. Can process lists., Object.Class - Gets the input object's class name. Can process lists., PlanarFace.FixDomain - Corrects the surface domain of a 3 or 4 point planar face extracted from Revit., Point.PullOntoPlane - Pulls (projects) the point onto the input plane, following the plane normal., Polygon.ContainmentTest+ - A less accurate method that should perform faster than the built-in node for large data sets., Pt2Str - Serilize a geometry point to a string for use in Revit parameters, Select Edges - Select multiple edges from inside the Revit UI. Be sure to press \"Finish\" once done. You can use a Boolean toggle to refresh your selection., Select Elements (ordered) - Select multiple elements from the Revit document in the desired order. Hit ESC to stop picking. To refresh the node, connect a boolean switch node., Select Linked Element - Select the linked instance first, followed by the element. If your selection fails, just press escape.\r\nTo refresh the node, connect a boolean switch node., Select Linked Elements (ordered) - Select the linked instance first. Then select multiple elements from the Revit document in the desired order. Hit ESC to stop picking. To refresh the node, connect a boolean switch node., Select Linked Elements - Select the linked instance first, followed by the elements. To finish the selection, press Finish. If your selection fails, just press escape or Cancel.\r\nTo refresh the node, connect a boolean switch node., Select Linked Face - Select the linked instance first, followed by the face. If your selection fails, just press escape.\r\nTo refresh the node, connect a boolean switch node., SelectInRevit - Selects the input elements in Revit. Works with Revit 2016., Shaft.ByCurves - Creates a shaft opening. The top level MUST be higher than the base level for a successful execution. You can either provide one base and top level for all shafts or have unique levels for each shaft instance., Sheet.Views+ - Extracts all views and schedules (minus the revision schedule) placed on the input sheet (or sheets).\r\nWill be depreciated once the bult in node works with all plan types., Star.ByCenterRadiusRays - Fun little node to create star shapes., Str2Ln - De-serilize a Revit parameter string into a geometric line., Str2Pt - De-serilize a Revit parameter string into a geometric point., Topography.ToPolySurface(py) - Python implementation that should boost performance by 5-10%. Optimized algorithm for converting topographies into polysurfaces. Tested with topographies containing up to 40 000 points. \r\nWarning conversions of such mangitudes consume a lot of resources and are sub-optimal. Ensure that you have at least 8GB of ram and plenty of patience before attempting such a conversion, otherwise your Dynamo and Revit instances may crash., Topography.ToPolySurface - Optimized algorithm for converting topographies into polysurfaces. Tested with topographies containing up to 40 000 points. \r\nWarning conversions of such mangitudes consume a lot of resources and are sub-optimal. Ensure that you have at least 8GB of ram and plenty of patience before attempting such a conversion, otherwise your Dynamo and Revit instances may crash., ViewSet.ByViewsName - Creates a set of views(or sheets) for printing. If the set exists, set Overwrite to true to replace it., Wall.WallType - Queries the wall type of the input wall. Works for types from linked documents as well., WallType.Duplicate - Attemts to create duplicate wall types. If the wall type exists, it is appended to the end. Sets only the structural width of the wall. The width must be in feet., Watch+ - This node that serializes the input information and presents it in a resizable text window.",
            "engine_metadata": "",
            "engine_version": "0.8.2.2392",
            "created": "2016-05-08T15:31:40.699Z",
            "full_dependency_versions": [ "82.8.3" ],
            "full_dependency_ids": [
              {
                "_id": "56077cf3662bf0e9080001ea",
                "name": "spring nodes"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "82.8.3"
          },
          {
            "_id": "5741d3dcc1a604fb3600000a",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-prod/486ef2ee-23ec-4e57-a401-25c141bf5d4cgregPkg5.zip",
            "contents": "Active View - Selects the current document's active view. Supports more view types than the built-in option.\r\nWill be depreciated once the bult in node works with all plan types., AdaptiveFamily.ByFacetedGeometry - No description provided, AreaPlan.ByLevelName - Creates an area plan at the designated levels. Each new view needs a name. An area scheme must first be activated before it can be used. To activate a scheme, place one view of that type in the project(you can then delete it).  If a view with the same scheme and name exists, you'll get a null instead., Beams.FixExtents - Detects all beams from the input list with broken extents(actual length - cut length <  margin) and attemts to correct them., BoundingBox.Scale - Scales the bounding box in three dimensions according to it's center., ClosedCurve.Offset+ - Offsets a curve both ways and correctly differenciates the external and internal offset. If an offset goes beyond the curve's bounds, the result will fail and a null value will be appended instead. Also works for convex curves like arcs., Collector.CurrentSelection - Gets the currently selected elements. Connect a boolean switch to refresh the selection. Compatible with Revit 2016, Collector.ElementsInView - Selects all elements visible in the input view., Collector.ElementSketch - Get the actual sketch lines of a sketch based element (floor, ceiling, modified wall, etc.) . You can optionally fetch the matching model curves, however this might prove comptationally heavy on larger data sets., Collector.FamilyInstances - Collects placed family instance elements from the document that match the name. Partially mathing elements are collected as well. If no matches are found, a list of all isntance names will be output., Collector.FamilyTypes - Collects non-system family types that fully match or partially match the provided names. If no matches are found, a list of all type names will be output., Collector.FloorTypes - Collects Floor types by name., Collector.LinkedInstanceElements - Extract elements by category from the selected linked instances. The transform vector can be used to get the exact location of the elements in the local file, Collector.Revisions - Collects all revision clouds from a specific date., Collector.Sheets - Search for sheets by either their name or their number. Use a false boolean switch to search by number., Collector.Views - Search for views based on naming. You can choose to either include or exclude schedules. Use the sheet collector for sheets., Collector.WallTypes - Collects wall types by name., Color2Decimal - Converts a Dynamo colour its Revit equivalent  decimal value., Curve.Offset+ - Offsets a curve towards the specified point, CurveLoop.Simplify - Attempts to simplify an open or a closed curve loop by connecting straight separate line segments into a single line., Decimal2Color - Converts a revit colour decimal value to its Dynamo equivalent., Dictionary.ByKeysValues - Dictionaries are an incredibly powerful tool for making associative sets between two equal length lists. The first list must be of unique strings (or numbers) and will be the key and the second list will be the matching values (it can be made up of geometry, elements, even other lists)\r\nThe search keys list will provide the corresponding value to the input key., DirectShape.ByGeometry - Convert the input geometry to DirectShape element inside the Revit document.  It supports solids or surfaces.It is based on an alternative process that uses a SAT import and can produce smooth surfaces. Each created DS will have a unique type. Make sure that each input geometry has a unique name. You can either feed a single category for all geometries or a unique category for each geometry - the node's lacing is set to longest by default., DirectShape.Transform - Transforms the typed DirectShape element from the identity coordinate system to the input coordinate system(s), in a manner similar to Dynamo's Geometry.Transform node., DirectShape.Translate - Copy the input DirectShape element with the help of a translation vector, similarly to the Geometry.Translate node. This method should prove more efficient than Element.Copy, Doc.DeleteElements - Attempts to delete the input list of elements from the active Revit document.The node returns the number of successfully deleted elements and their Ids as a string. Carefully observe the deleted elements count. It may be greater than the input list because hosted elements or tags will be deleted as well. If an element in the list can not be deleted (for example last revision or last view), the whole list will fail to be deleted., Element.AddVoidCut - Accepts single or list inputs. If an element that can be cut and a family that can act as a void cutting entity are provided, the element will be cut. Please make sure that the geometries of the elements actually cut. Otherwise an empty cut will be created that may impede the performance of your file. Add void cuts sparcely because they affect the size of your project. Lacing takes an integer input.\r\n0 = Shortest (default)\r\n1 = Longest\r\n2 = Cross-product, Element.Copy - WARNING: Do not use this node in Automatic mode! Copy the input Revit elements with the help of a translation vector, similarly to the Geometry.Translate node., Element.IsCut - Tests if the element is being cut by any void instances. If any cuts exist all cutting elements will be provided., Element.IsCutting - Tests if the input element (or elements) is a void cut and if it is cutting any elements. In such cases, the cut elements will be provided., Element.RemoveVoidCut - Removes the void cut between the input elements, if such exists., Element.SetLocation - Attempts to modify the location of the input element. This can effectively add as a move comand in Revit. Works for both line based and point based elements., ErrorReport.Parse - Process a Revit error report (HTML file) and extract the error types, all affected elements and the total number of errors. If you are executing from a document different than the one the error report belongs to, be sure to set \"fetch_elements\" to false., FamilyInsance.ByFacePoints - Places instances on the input face oriented to the face's U tangent and the global Z axis., FamilyInstance.ByGeometry - You must provide a valid family template path that will be used for all input geometry objects. The project units(and not the templates) will be used to determine the size of the output geometry.\r\nThe provided category will be used only if the family template supports it. If not, the default template category will be used instead.\r\nLikewise, the family material(provided as a string) will be set only if a material with that name exists in the template. If not, the default material will be used instead (\"By Category\").\r\nFor void cuts, the material settings will be ignored.\r\nThe Subcategory name is an optional input. If you'd like to skip assigning a Subcategory to any new instance, simply use null.\r\nThe node expects a unique family name for each geometry object. The rest of the input lists will be processed as if the node lacing is set to longest., FamilyInstance.Rotation - Fetches the angle of rotation around the insertion point of a point based element. The angle is always measured counter-clockwise., FamilyType.Duplicate - Create duplicate family types with the specified name. If the type exists, it is called., Feet2Fraction - Converts a decimal foot value to a fractional foot/inch string., File.Size - Checks the file size. Provide a file path as a string., Filter.ByCategoryName - Filters the input elements by their category name. You can input multiple category names., Filter.ByClassName - Filters a list of objects by the object's class name. Note that Dynamo elements belong to different classes than their Revit counterparts. Use the Object.Class node to check an object's class., Filter.BySelection - Check the items that you'd like to filter in.  Unchecked items will be sent to the out list. The optional names input will override the object representation., Floor-WallType.SetMaterial - Sets a new material to the structural core of the provided floor and wall types., FloorOpening.ByCurves - Create hosted floor opeinngs through the input floors. The second input is a list of sub-lists of the boundary curves., FloorType.Duplicate - Attemts to create duplicate floor types. If the floor type exists, it is appended to the end. Sets only the structural width of the floor. The width must be in feet., Fn.ElementsOfCategory - Same as the built in \"All Elements of Category\" but can act as a function object., Form.ByGeometry - Convert the input geometry to a Revit Form object. Forms can exist only in the family environment. You can convert complicated solids or surfaces directly into forms. A form can act as a void. Provide either one true boolean value to convert a form into a void. The node's lacing is set to longest by default., Fraction2Feet - Converts a fractioned feet /inch string value into a decimal foot value., Geometry.SplitRecursively(Dir) - Splits a surface or a solid recursively, using the resulting reduced geometry for every consecutive split. Select a point or another geometry to control the direction of the split., Geometry.SplitRecursively - Splits a surface or a solid recursively, using the resulting reduced geometry for every consecutive split., HostedInstance.ByPoints - Creates hosted family instances(doors/windows) at the specified points. You can feed either a single family type or a unique type for each instance., Input.Wait - Waits for all inputs to be completed before continuing the execution process.Part of the SmartCopyMon workflow., InterferenceCheck.Parse - Process a Revit interference check (HTML file) and extract the interference categories, all affected elements and the total number of clashes. If you are executing from a document different than the one the error report belongs to, be sure to set \"fetch_elements\" to false., Line.StraightenXY - Checks a line's end points for irregularities and corrects them if they are at or below the specified margin. The default margin is 1/5000 of the curve length, which is conservative., Line.StraightenZ - Checks a line's end points for irregularities in  the Z axis and corrects them if they are at or below the specified margin. The default margin is 1/2000 of the curve length, which is conservative., Lines.Group&FixCorners - Groups unconnected lines into sub-lists by margin(the maximum distance between endpoints) and attempts to create clean corner connections between them. Built on top of the Group curves node found in archi-lab.net., List.DragDropReorder - Press and hold on an item to move it up or down the list. To confirm and close the window, select \"Save Order\". The optional names input will override the object representation., List.DropDown - Selects one list item by a drop-down combo box. The optional names input will override the object representation., List.DropFirstLast - Removes the first and last items from the list, List.DropLast - Removes the last value of the list., List.EveryOther - Useful for when you want to combine an item on the list with every other item on the list. For example in list {1,2,3} , \"2\" will be paired up only with \"1\" and \"3\" and will not be paired up with itself., List.GetEven - Gets even indices from the list., List.GetOdd - Gets the odd indices from the list., List.MergeByBoolMask - Merge two lists by a boolean mask list. The true count in the mask should be the same as the length of the true list and vice versa for the false list., List.Randomise&Divide - Shiffles the input list and divides it into sub-lists based on ratios(1/4 + 1/2 + 1/4 will give you three lists split accordingly) The smalest ratio will always be 1 / the list length and the largest ratio will be 1. A seed input can shuffle the list further., List.ShiftIndices+ - The built in node fails if the shift number is greater than the lenght of the list. This node acts as a work-around., List.Split - Splits a list at the desired length, List.Subpairs - Pair up each list item with the next one and drop the list item., Ln2Str - Serilize a geometry line to a string for use in Revit parameters, Math.AlmostEqual - Checks if a number is almost equal to a value with a specified tollerance., N-hedron.ByOriginVector - Creates a multi-sided poyhedron with defined side length and total height., NullAllIndicesOf - list all of the indices of a list that match the specified value. Capable of handling null values, part of the SmartCopyMonitor workflow., NullGetParameter - Similar to the built in node.Capable of handling null values, part of the SmartCopyMonitor workflow., NullIndexOf - Similar to the bult-in node but provides a null value instead of -1 of failure. Part of the SmartCopyMonitor workflow., NullReorder - Simiar to the built-in function with the difference that it can handle null indices. Part of the SmartCopyMonitor workflow., NullSetDifference - Similar to the built in node, with a built-in safety for null values. Part of the SmartCopyMonitor workflow., NullSetParameter - Similar to the built-in function but with the ability to handle null values. Part of the SmartCopyMon workflow., Number.ToString - Converts the input number(s) to string. Can process lists., Object.Class - Gets the input object's class name. Can process lists., PlanarFace.FixDomain - Corrects the surface domain of a 3 or 4 point planar face extracted from Revit., Point.PullOntoPlane - Pulls (projects) the point onto the input plane, following the plane normal., PolyCurve.Chamfer - Symmetrically chamfers the corners of the polycurve by the designated distance, Polygon.ContainmentTest+ - A less accurate method that should perform faster than the built-in node for large data sets., Pt2Str - Serilize a geometry point to a string for use in Revit parameters, Select Edges - Select multiple edges from inside the Revit UI. Be sure to press \"Finish\" once done. You can use a Boolean toggle to refresh your selection., Select Elements (ordered) - Select multiple elements from the Revit document in the desired order. Hit ESC to stop picking. To refresh the node, connect a boolean switch node., Select Linked Element - Select the linked instance first, followed by the element. If your selection fails, just press escape.\r\nTo refresh the node, connect a boolean switch node., Select Linked Elements (ordered) - Select the linked instance first. Then select multiple elements from the Revit document in the desired order. Hit ESC to stop picking. To refresh the node, connect a boolean switch node., Select Linked Elements - Select the linked instance first, followed by the elements. To finish the selection, press Finish. If your selection fails, just press escape or Cancel.\r\nTo refresh the node, connect a boolean switch node., Select Linked Face - Select the linked instance first, followed by the face. If your selection fails, just press escape.\r\nTo refresh the node, connect a boolean switch node., SelectInRevit - Selects the input elements in Revit. Works with Revit 2016., Shaft.ByCurves - Creates a shaft opening. The top level MUST be higher than the base level for a successful execution. You can either provide one base and top level for all shafts or have unique levels for each shaft instance., Sheet.Views+ - Extracts all views and schedules (minus the revision schedule) placed on the input sheet (or sheets).\r\nWill be depreciated once the bult in node works with all plan types., Star.ByCenterRadiusRays - Fun little node to create star shapes., Str2Ln - De-serilize a Revit parameter string into a geometric line., Str2Pt - De-serilize a Revit parameter string into a geometric point., Topography.ToPolySurface(py) - Python implementation that should boost performance by 5-10%. Optimized algorithm for converting topographies into polysurfaces. Tested with topographies containing up to 40 000 points. \r\nWarning conversions of such mangitudes consume a lot of resources and are sub-optimal. Ensure that you have at least 8GB of ram and plenty of patience before attempting such a conversion, otherwise your Dynamo and Revit instances may crash., Topography.ToPolySurface - Optimized algorithm for converting topographies into polysurfaces. Tested with topographies containing up to 40 000 points. \r\nWarning conversions of such mangitudes consume a lot of resources and are sub-optimal. Ensure that you have at least 8GB of ram and plenty of patience before attempting such a conversion, otherwise your Dynamo and Revit instances may crash., ViewSet.ByViewsName - Creates a set of views(or sheets) for printing. If the set exists, set Overwrite to true to replace it., Wall.WallType - Queries the wall type of the input wall. Works for types from linked documents as well., WallType.Duplicate - Attemts to create duplicate wall types. If the wall type exists, it is appended to the end. Sets only the structural width of the wall. The width must be in feet., Watch+ - This node that serializes the input information and presents it in a resizable text window.",
            "engine_metadata": "",
            "engine_version": "0.8.2.2392",
            "created": "2016-05-22T15:44:28.630Z",
            "full_dependency_versions": [ "82.9.1" ],
            "full_dependency_ids": [
              {
                "_id": "56077cf3662bf0e9080001ea",
                "name": "spring nodes"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "82.9.1"
          },
          {
            "_id": "57865602535146064800005b",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-prod/666fad86-9275-41da-8066-db72de1b502fgregPkg690.zip",
            "contents": "Springs.AdaptiveFamily.ByFacetedGeometry - Genearate a new eight point adaptive component family type from any solid or polysurface consisting of planar faces. Faces with openigs are not supported., Springs.AreaPlan.ByLevelName - Creates an area plan at the designated levels. Each new view needs a name. An area scheme must first be activated before it can be used. To activate a scheme, place one view of that type in the project(you can then delete it).  If a view with the same scheme and name exists, you'll get a null instead., Springs.Beams.FixExtents - Detects all beams from the input list with broken extents(actual length - cut length <  margin) and attemts to correct them., Springs.BoundingBox.Scale - Scales the bounding box in three dimensions according to it's center., Springs.ClosedCurve.Offset+ - Offsets a curve both ways and correctly differenciates the external and internal offset. If an offset goes beyond the curve's bounds, the result will fail and a null value will be appended instead. Also works for convex curves like arcs., Springs.Collector.CurrentSelection - Gets the currently selected elements. Connect a boolean switch to refresh the selection., Springs.Collector.ElementsInView - Selects all elements visible in the input view., Springs.Collector.ElementSketch - Get the actual sketch lines of a sketch based element (floor, ceiling, modified wall, etc.) . You can optionally fetch the matching model curves, however this might prove comptationally heavy on larger data sets., Springs.Collector.FamilyInstances - Collects placed family instance elements from the document that match the name. Partially mathing elements are collected as well. If no matches are found, a list of all isntance names will be output., Springs.Collector.FamilyTypes - Collects non-system family types that fully match or partially match the provided names. If no matches are found, a list of all type names will be output., Springs.Collector.FloorTypes - Collects Floor types by name., Springs.Collector.LinkedInstanceElements - Extract elements by category from the selected linked instances. The transform vector can be used to get the exact location of the elements in the local file, Springs.Collector.Revisions - Collects all revision clouds from a specific date., Springs.Collector.Sheets - Search for sheets by either their name or their number. Use a false boolean switch to search by number., Springs.Collector.Views - Search for views based on naming. You can choose to either include or exclude schedules. Use the sheet collector for sheets., Springs.Collector.WallTypes - Collects wall types by name., Springs.Color2Decimal - Converts a Dynamo colour its Revit equivalent  decimal value., Springs.Curve.Offset+ - Offsets a curve towards the specified point, Springs.CurveLoop.Simplify - Attempts to simplify an open or a closed curve loop by connecting straight separate line segments into a single line., Springs.Decimal2Color - Converts a revit colour decimal value to its Dynamo equivalent., Springs.Dictionary.ByKeysValues - Dictionaries are an incredibly powerful tool for making associative sets between two equal length lists. The first list must be of unique strings (or numbers) and will be the key and the second list will be the matching values (it can be made up of geometry, elements, even other lists)\r\nThe search keys list will provide the corresponding value to the input key., Springs.DirectShape.ByGeometry - Convert the input geometry to DirectShape element inside the Revit document.  It supports solids or surfaces.It is based on an alternative process that uses a SAT import and can produce smooth surfaces. Each created DS will have a unique type. Make sure that each input geometry has a unique name. You can either feed a single category for all geometries or a unique category for each geometry - the node's lacing is set to longest by default., Springs.DirectShape.Transform - Transforms the typed DirectShape element from the identity coordinate system to the input coordinate system(s), in a manner similar to Dynamo's Geometry.Transform node., Springs.DirectShape.Translate - Copy the input DirectShape element with the help of a translation vector, similarly to the Geometry.Translate node. This method should prove more efficient than Element.Copy, Springs.Doc.ActiveView - Selects the current document's active view. Supports more view types than the built-in option.\r\nWill be depreciated once the bult in node works with all plan types., Springs.Doc.DeleteElements - Attempts to delete the input list of elements from the active Revit document.The node returns the number of successfully deleted elements and their Ids as a string. Carefully observe the deleted elements count. It may be greater than the input list because hosted elements or tags will be deleted as well. If an element in the list can not be deleted (for example last revision or last view), the whole list will fail to be deleted., Springs.Element.Copy - WARNING: Do not use this node in Automatic mode! Copy (planar array) the input Revit elements with the help of a translation vector, similarly to the Geometry.Translate node., Springs.Element.IsCut - Tests if the element is being cut by any void instances. If any cuts exist all cutting elements will be provided., Springs.Element.IsCutting - Tests if the input element (or elements) is a void cut and if it is cutting any elements. In such cases, the cut elements will be provided., Springs.Element.RemoveVoidCut - Removes the void cut between the input elements, if such exists., Springs.Element.SetLocation - Attempts to modify the location of the input element. This can effectively add as a move comand in Revit. Works for both line based and point based elements., Springs.ElementsOfCategory - Same as the built in \"All Elements of Category\" but can act as a function object and does not get refreshed automatically., Springs.ElementType.Duplicate - Create duplicate element types. If the type exists, it will be appended instead., Springs.ErrorReport.Parse - Process a Revit error report (HTML file) and extract the error types, all affected elements and the total number of errors. If you are executing from a document different than the one the error report belongs to, be sure to set \"fetch_elements\" to false., Springs.FamilyInsance.ByFacePoints - Places instances on the input face oriented to the face's U tangent and the global Z axis., Springs.FamilyInstance.ByGeometry - You must provide a valid family template path that will be used for all input geometry objects. The project units(and not the templates) will be used to determine the size of the output geometry.\r\nThe provided category will be used only if the family template supports it. If not, the default template category will be used instead.\r\nLikewise, the family material(provided as a string) will be set only if a material with that name exists in the template. If not, the default material will be used instead (\"By Category\").\r\nFor void cuts, the material settings will be ignored.\r\nThe Subcategory name is an optional input. If you'd like to skip assigning a Subcategory to any new instance, simply use null.\r\nThe node expects a unique family name for each geometry object. The rest of the input lists will be processed as if the node lacing is set to longest., Springs.FamilyInstance.Rotation - Fetches the angle of rotation around the insertion point of a point based element. The angle is always measured counter-clockwise., Springs.Feet2Fraction - Converts a decimal foot value to a fractional foot/inch string., Springs.File.Size - Checks the file size. Provide a file path as a string., Springs.Filter.ByCategoryName - Filters the input elements by their category name. You can input multiple category names., Springs.Filter.ByClassName - Filters a list of objects by the object's class name. Note that Dynamo elements belong to different classes than their Revit counterparts. Use the Object.Class node to check an object's class., Springs.Filter.BySelection - Check the items that you'd like to filter in.  Unchecked items will be sent to the out list. The optional names input will override the object representation., Springs.FloorOpening.ByCurves - Create hosted floor opeinngs through the input floors. The second input is a list of sub-lists of the boundary curves., Springs.Form.ByGeometry - Convert the input geometry to a Revit Form object. Forms can exist only in the family environment. You can convert complicated solids or surfaces directly into forms. A form can act as a void. Provide either one true boolean value to convert a form into a void. The node's lacing is set to longest by default., Springs.Fraction2Feet - Converts a fractioned feet /inch string value into a decimal foot value., Springs.Geometry.Extents - Gets the dimensions of the geometry's bounding box., Springs.Geometry.GroupByDistance - Splits the list of curves into groups if the distance between them is lesser than the provided margin., Springs.Geometry.SplitRecursively - Splits a surface or a solid recursively, using the resulting reduced geometry for every consecutive split. Select a point or another geometry to control the direction of the split., Springs.HostedInstance.ByPoints - Creates hosted family instances(doors/windows) at the specified points. You can feed either a single family type or a unique type for each instance., Springs.Input.Wait - Waits for all inputs to be completed before continuing the execution process.Part of the SmartCopyMon workflow., Springs.InterferenceCheck.Parse - Process a Revit interference check (HTML file) and extract the interference categories, all affected elements and the total number of clashes. If you are executing from a document different than the one the error report belongs to, be sure to set \"fetch_elements\" to false., Springs.Line.StraightenXY - Checks a line's end points for irregularities and corrects them if they are at or below the specified margin. The default margin is 1/5000 of the curve length, which is conservative., Springs.Line.StraightenZ - Checks a line's end points for irregularities in  the Z axis and corrects them if they are at or below the specified margin. The default margin is 1/2000 of the curve length, which is conservative., Springs.LineLoop.Merge - Attempts to join lines into a single chain of joined curves. The node returns the new lines as a chain and with the original order. The success outputs returns the success of the execution as a true/false boolean., Springs.List.DragDropReorder - Press and hold on an item to move it up or down the list. To confirm and close the window, select \"Save Order\". The optional names input will override the object representation., Springs.List.DropDown - Selects one list item by a drop-down combo box. The optional names input will override the object representation., Springs.List.DropFirstLast - Removes the first and last items from the list, Springs.List.EveryOther - Useful for when you want to combine an item on the list with every other item on the list. For example in list {1,2,3} , \"2\" will be paired up only with \"1\" and \"3\" and will not be paired up with itself., Springs.List.GetEven - Gets even indices from the list., Springs.List.GetOdd - Gets the odd indices from the list., Springs.List.MergeByBoolMask - Merge two lists by a boolean mask list. The true count in the mask should be the same as the length of the true list and vice versa for the false list., Springs.List.Randomise&Divide - Shiffles the input list and divides it into sub-lists based on ratios(1/4 + 1/2 + 1/4 will give you three lists split accordingly) The smalest ratio will always be 1 / the list length and the largest ratio will be 1. A seed input can shuffle the list further., Springs.List.Split - Splits a list at the desired length, Springs.List.Subpairs - Pair up each list item with the next one and drop the list item., Springs.Ln2Str - Serilize a geometry line to a string for use in Revit parameters, Springs.Math.AlmostEqual - Checks if a number is almost equal to a value with a specified tollerance., Springs.Mesh.ToPolySurface - Converts a Dynamo mesh to a polysurface. Uses multithreading - optimized for 4 cores., Springs.Mesh.ToToolkitMesh - Converts a Dynamo mesh to a toolkit mesh. You obviously need to have the appropriate version of the mesh toolkit package downloaded first., Springs.N-hedron.ByOriginVector - Creates a multi-sided poyhedron with defined side length and total height., Springs.NullAllIndicesOf - list all of the indices of a list that match the specified value. Capable of handling null values, part of the SmartCopyMonitor workflow., Springs.NullGetParameter - Similar to the built in node.Capable of handling null values, part of the SmartCopyMonitor workflow., Springs.NullIndexOf - Similar to the bult-in node but provides a null value instead of -1 of failure. Part of the SmartCopyMonitor workflow., Springs.NullReorder - Simiar to the built-in function with the difference that it can handle null indices. Part of the SmartCopyMonitor workflow., Springs.NullSetDifference - Similar to the built in node, with a built-in safety for null values. Part of the SmartCopyMonitor workflow., Springs.NullSetParameter - Similar to the built-in function but with the ability to handle null values. Part of the SmartCopyMon workflow., Springs.Number.ToString - Converts the input number(s) to string. Can process lists., Springs.PlanarFace.FixDomain - Corrects the surface domain of a 3 or 4 point planar face extracted from Revit., Springs.Point.PullOntoPlane - Pulls (projects) the point onto the input plane, following the plane normal., Springs.PolyCurve.Chamfer - Symmetrically chamfers the corners of the polycurve by the designated distance, Springs.Polygon.ContainmentTest+ - A less accurate method that should perform faster than the built-in node for large data sets., Springs.Pt2Str - Serilize a geometry point to a string for use in Revit parameters, Springs.SelectEdges - Select multiple edges from inside the Revit UI. Be sure to press \"Finish\" once done. You can use a Boolean toggle to refresh your selection., Springs.SelectElements(ordered) - Select multiple elements from the Revit document in the desired order. Hit ESC to stop picking. To refresh the node, connect a boolean switch node., Springs.SelectInRevit - Selects the input elements inside the Revit UI., Springs.SelectLinkedElement - Select the linked instance first, followed by the element. If your selection fails, just press escape.\r\nTo refresh the node, connect a boolean switch node., Springs.SelectLinkedElements(ordered) - Select the linked instance first. Then select multiple elements from the Revit document in the desired order. Hit ESC to stop picking. To refresh the node, connect a boolean switch node., Springs.SelectLinkedElements - Select the linked instance first, followed by the elements. To finish the selection, press Finish. If your selection fails, just press escape or Cancel.\r\nTo refresh the node, connect a boolean switch node., Springs.SelectLinkedFace - Select the linked instance first, followed by the face. If your selection fails, just press escape.\r\nTo refresh the node, connect a boolean switch node., Springs.Shaft.ByCurves - Creates a shaft opening. The top level MUST be higher than the base level for a successful execution. You can either provide one base and top level for all shafts or have unique levels for each shaft instance., Springs.Sheet.Views+ - Extracts all views and schedules (minus the revision schedule) placed on the input sheet (or sheets).\r\nWill be depreciated once the bult in node works with all plan types., Springs.Star.ByCenterRadiusRays - Fun little node to create star shapes., Springs.Str2Ln - De-serilize a Revit parameter string into a geometric line., Springs.Str2Pt - De-serilize a Revit parameter string into a geometric point., Springs.ViewSet.ByViewsName - Creates a set of views(or sheets) for printing. If the set exists, set Overwrite to true to replace it., Springs.Watch+ - This node that serializes the input information and presents it in a resizable text window.",
            "engine_metadata": "",
            "engine_version": "1.0.0.1180",
            "created": "2016-07-13T14:53:54.589Z",
            "full_dependency_versions": [ "100.0.0" ],
            "full_dependency_ids": [
              {
                "_id": "56077cf3662bf0e9080001ea",
                "name": "spring nodes"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "100.0.0"
          },
          {
            "_id": "5787a17a5351460648000061",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-prod/28674d40-e310-4fe9-bb6f-95d33e78461bgregPkg84.zip",
            "contents": "Springs.AdaptiveFamily.ByFacetedGeometry - Genearate a new eight point adaptive component family type from any solid or polysurface consisting of planar faces. Faces with openigs are not supported., Springs.AreaPlan.ByLevelName - Creates an area plan at the designated levels. Each new view needs a name. An area scheme must first be activated before it can be used. To activate a scheme, place one view of that type in the project(you can then delete it).  If a view with the same scheme and name exists, you'll get a null instead., Springs.Beams.FixExtents - Detects all beams from the input list with broken extents(actual length - cut length <  margin) and attemts to correct them., Springs.BoundingBox.Scale - Scales the bounding box in three dimensions according to it's center., Springs.ClosedCurve.Offset+ - Offsets a curve both ways and correctly differenciates the external and internal offset. If an offset goes beyond the curve's bounds, the result will fail and a null value will be appended instead. Also works for convex curves like arcs., Springs.Collector.CurrentSelection - Gets the currently selected elements. Connect a boolean switch to refresh the selection., Springs.Collector.ElementsInView - Selects all elements visible in the input view., Springs.Collector.ElementSketch - Get the actual sketch lines of a sketch based element (floor, ceiling, modified wall, etc.) . You can optionally fetch the matching model curves, however this might prove comptationally heavy on larger data sets., Springs.Collector.FamilyInstances - Collects placed family instance elements from the document that match the name. Partially mathing elements are collected as well. If no matches are found, a list of all isntance names will be output., Springs.Collector.FamilyTypes - Collects non-system family types that fully match or partially match the provided names. If no matches are found, a list of all type names will be output., Springs.Collector.FloorTypes - Collects Floor types by name., Springs.Collector.LinkedInstanceElements - Extract elements by category from the selected linked instances. The transform vector can be used to get the exact location of the elements in the local file, Springs.Collector.Revisions - Collects all revision clouds from a specific date., Springs.Collector.Sheets - Search for sheets by either their name or their number. Use a false boolean switch to search by number., Springs.Collector.Views - Search for views based on naming. You can choose to either include or exclude schedules. Use the sheet collector for sheets., Springs.Collector.WallTypes - Collects wall types by name., Springs.Color2Decimal - Converts a Dynamo colour its Revit equivalent  decimal value., Springs.Curve.Offset+ - Offsets a curve towards the specified point, Springs.CurveLoop.Simplify - Attempts to simplify an open or a closed curve loop by connecting straight separate line segments into a single line., Springs.Decimal2Color - Converts a revit colour decimal value to its Dynamo equivalent., Springs.Dictionary.ByKeysValues - Dictionaries are an incredibly powerful tool for making associative sets between two equal length lists. The first list must be of unique strings (or numbers) and will be the key and the second list will be the matching values (it can be made up of geometry, elements, even other lists)\r\nThe search keys list will provide the corresponding value to the input key., Springs.DirectShape.ByGeometry - Convert the input geometry to DirectShape element inside the Revit document.  It supports solids or surfaces.It is based on an alternative process that uses a SAT import and can produce smooth surfaces. Each created DS will have a unique type. Make sure that each input geometry has a unique name. You can either feed a single category for all geometries or a unique category for each geometry - the node's lacing is set to longest by default., Springs.DirectShape.Transform - Transforms the typed DirectShape element from the identity coordinate system to the input coordinate system(s), in a manner similar to Dynamo's Geometry.Transform node., Springs.DirectShape.Translate - Copy the input DirectShape element with the help of a translation vector, similarly to the Geometry.Translate node. This method should prove more efficient than Element.Copy, Springs.Doc.ActiveView - Selects the current document's active view. Supports more view types than the built-in option.\r\nWill be depreciated once the bult in node works with all plan types., Springs.Doc.DeleteElements - Attempts to delete the input list of elements from the active Revit document.The node returns the number of successfully deleted elements and their Ids as a string. Carefully observe the deleted elements count. It may be greater than the input list because hosted elements or tags will be deleted as well. If an element in the list can not be deleted (for example last revision or last view), the whole list will fail to be deleted., Springs.Element.Copy - WARNING: Do not use this node in Automatic mode! Copy (planar array) the input Revit elements with the help of a translation vector, similarly to the Geometry.Translate node., Springs.Element.IsCut - Tests if the element is being cut by any void instances. If any cuts exist all cutting elements will be provided., Springs.Element.IsCutting - Tests if the input element (or elements) is a void cut and if it is cutting any elements. In such cases, the cut elements will be provided., Springs.Element.RemoveVoidCut - Removes the void cut between the input elements, if such exists., Springs.Element.SetLocation - Attempts to modify the location of the input element. This can effectively add as a move comand in Revit. Works for both line based and point based elements., Springs.ElementsOfCategory - Same as the built in \"All Elements of Category\" but can act as a function object and does not get refreshed automatically., Springs.ElementType.Duplicate - Create duplicate element types. If the type exists, it will be appended instead., Springs.ErrorReport.Parse - Process a Revit error report (HTML file) and extract the error types, all affected elements and the total number of errors. If you are executing from a document different than the one the error report belongs to, be sure to set \"fetch_elements\" to false., Springs.FamilyInsance.ByFacePoints - Places instances on the input face oriented to the face's U tangent and the global Z axis., Springs.FamilyInstance.ByGeometry - You must provide a valid family template path that will be used for all input geometry objects. The project units(and not the templates) will be used to determine the size of the output geometry.\r\nThe provided category will be used only if the family template supports it. If not, the default template category will be used instead.\r\nLikewise, the family material(provided as a string) will be set only if a material with that name exists in the template. If not, the default material will be used instead (\"By Category\").\r\nFor void cuts, the material settings will be ignored.\r\nThe Subcategory name is an optional input. If you'd like to skip assigning a Subcategory to any new instance, simply use null.\r\nThe node expects a unique family name for each geometry object. The rest of the input lists will be processed as if the node lacing is set to longest., Springs.FamilyInstance.Rotation - Fetches the angle of rotation around the insertion point of a point based element. The angle is always measured counter-clockwise., Springs.Feet2Fraction - Converts a decimal foot value to a fractional foot/inch string., Springs.File.Size - Checks the file size. Provide a file path as a string., Springs.Filter.ByCategoryName - Filters the input elements by their category name. You can input multiple category names., Springs.Filter.ByClassName - Filters a list of objects by the object's class name. Note that Dynamo elements belong to different classes than their Revit counterparts. Use the Object.Class node to check an object's class., Springs.Filter.BySelection - Check the items that you'd like to filter in.  Unchecked items will be sent to the out list. The optional names input will override the object representation., Springs.FloorOpening.ByCurves - Create hosted floor opeinngs through the input floors. The second input is a list of sub-lists of the boundary curves., Springs.Form.ByGeometry - Convert the input geometry to a Revit Form object. Forms can exist only in the family environment. You can convert complicated solids or surfaces directly into forms. A form can act as a void. Provide either one true boolean value to convert a form into a void. The node's lacing is set to longest by default., Springs.Fraction2Feet - Converts a fractioned feet /inch string value into a decimal foot value., Springs.Geometry.Extents - Gets the dimensions of the geometry's bounding box., Springs.Geometry.GroupByDistance - Splits the list of curves into groups if the distance between them is lesser than the provided margin., Springs.Geometry.SplitRecursively - Splits a surface or a solid recursively, using the resulting reduced geometry for every consecutive split. Select a point or another geometry to control the direction of the split., Springs.HostedInstance.ByPoints - Creates hosted family instances(doors/windows) at the specified points. You can feed either a single family type or a unique type for each instance., Springs.Input.Wait - Waits for all inputs to be completed before continuing the execution process.Part of the SmartCopyMon workflow., Springs.InterferenceCheck.Parse - Process a Revit interference check (HTML file) and extract the interference categories, all affected elements and the total number of clashes. If you are executing from a document different than the one the error report belongs to, be sure to set \"fetch_elements\" to false., Springs.Line.StraightenXY - Checks a line's end points for irregularities and corrects them if they are at or below the specified margin. The default margin is 1/5000 of the curve length, which is conservative., Springs.Line.StraightenZ - Checks a line's end points for irregularities in  the Z axis and corrects them if they are at or below the specified margin. The default margin is 1/2000 of the curve length, which is conservative., Springs.LineLoop.Merge - Attempts to join lines into a single chain of joined curves. The node returns the new lines as a chain and with the original order. The success outputs returns the success of the execution as a true/false boolean., Springs.List.DragDropReorder - Press and hold on an item to move it up or down the list. To confirm and close the window, select \"Save Order\". The optional names input will override the object representation., Springs.List.DropDown - Selects one list item by a drop-down combo box. The optional names input will override the object representation., Springs.List.DropFirstLast - Removes the first and last items from the list, Springs.List.EveryOther - Useful for when you want to combine an item on the list with every other item on the list. For example in list {1,2,3} , \"2\" will be paired up only with \"1\" and \"3\" and will not be paired up with itself., Springs.List.GetEven - Gets even indices from the list., Springs.List.GetOdd - Gets the odd indices from the list., Springs.List.MergeByBoolMask - Merge two lists by a boolean mask list. The true count in the mask should be the same as the length of the true list and vice versa for the false list., Springs.List.Randomise&Divide - Shiffles the input list and divides it into sub-lists based on ratios(1/4 + 1/2 + 1/4 will give you three lists split accordingly) The smalest ratio will always be 1 / the list length and the largest ratio will be 1. A seed input can shuffle the list further., Springs.List.Split - Splits a list at the desired length, Springs.List.Subpairs - Pair up each list item with the next one and drop the list item., Springs.Ln2Str - Serilize a geometry line to a string for use in Revit parameters, Springs.Math.AlmostEqual - Checks if a number is almost equal to a value with a specified tollerance., Springs.Mesh.ToPolySurface - Converts a Dynamo mesh to a polysurface. Uses multithreading - optimized for 4 cores., Springs.Mesh.ToToolkitMesh - Converts a Dynamo mesh to a toolkit mesh. You obviously need to have the appropriate version of the mesh toolkit package downloaded first., Springs.N-hedron.ByOriginVector - Creates a multi-sided poyhedron with defined side length and total height., Springs.NullAllIndicesOf - list all of the indices of a list that match the specified value. Capable of handling null values, part of the SmartCopyMonitor workflow., Springs.NullGetParameter - Similar to the built in node.Capable of handling null values, part of the SmartCopyMonitor workflow., Springs.NullIndexOf - Similar to the bult-in node but provides a null value instead of -1 of failure. Part of the SmartCopyMonitor workflow., Springs.NullReorder - Simiar to the built-in function with the difference that it can handle null indices. Part of the SmartCopyMonitor workflow., Springs.NullSetDifference - Similar to the built in node, with a built-in safety for null values. Part of the SmartCopyMonitor workflow., Springs.NullSetParameter - Similar to the built-in function but with the ability to handle null values. Part of the SmartCopyMon workflow., Springs.Number.ToString - Converts the input number(s) to string. Can process lists., Springs.PlanarFace.FixDomain - Corrects the surface domain of a 3 or 4 point planar face extracted from Revit., Springs.Point.PullOntoPlane - Pulls (projects) the point onto the input plane, following the plane normal., Springs.PolyCurve.Chamfer - Symmetrically chamfers the corners of the polycurve by the designated distance, Springs.Polygon.ContainmentTest+ - A less accurate method that should perform faster than the built-in node for large data sets., Springs.Pt2Str - Serilize a geometry point to a string for use in Revit parameters, Springs.SelectEdges - Select multiple edges from inside the Revit UI. Be sure to press \"Finish\" once done. You can use a Boolean toggle to refresh your selection., Springs.SelectElements(ordered) - Select multiple elements from the Revit document in the desired order. Hit ESC to stop picking. To refresh the node, connect a boolean switch node., Springs.SelectInRevit - Selects the input elements inside the Revit UI., Springs.SelectLinkedElement - Select the linked instance first, followed by the element. If your selection fails, just press escape.\r\nTo refresh the node, connect a boolean switch node., Springs.SelectLinkedElements(ordered) - Select the linked instance first. Then select multiple elements from the Revit document in the desired order. Hit ESC to stop picking. To refresh the node, connect a boolean switch node., Springs.SelectLinkedElements - Select the linked instance first, followed by the elements. To finish the selection, press Finish. If your selection fails, just press escape or Cancel.\r\nTo refresh the node, connect a boolean switch node., Springs.SelectLinkedFace - Select the linked instance first, followed by the face. If your selection fails, just press escape.\r\nTo refresh the node, connect a boolean switch node., Springs.Shaft.ByCurves - Creates a shaft opening. The top level MUST be higher than the base level for a successful execution. You can either provide one base and top level for all shafts or have unique levels for each shaft instance., Springs.Sheet.Views+ - Extracts all views and schedules (minus the revision schedule) placed on the input sheet (or sheets).\r\nWill be depreciated once the bult in node works with all plan types., Springs.Star.ByCenterRadiusRays - Fun little node to create star shapes., Springs.Str2Ln - De-serilize a Revit parameter string into a geometric line., Springs.Str2Pt - De-serilize a Revit parameter string into a geometric point., Springs.ViewSet.ByViewsName - Creates a set of views(or sheets) for printing. If the set exists, set Overwrite to true to replace it., Springs.Watch+ - This node that serializes the input information and presents it in a resizable text window.",
            "engine_metadata": "",
            "engine_version": "1.0.0.1180",
            "created": "2016-07-14T14:28:10.257Z",
            "full_dependency_versions": [ "100.0.1" ],
            "full_dependency_ids": [
              {
                "_id": "56077cf3662bf0e9080001ea",
                "name": "spring nodes"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "100.0.1"
          },
          {
            "_id": "581e93f428c433b35800002c",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-prod/c8de9cfb-3ab6-42c2-a3c8-b5cb5e52116dgregPkg761.zip",
            "contents": "Springs.AdaptiveFamily.ByFacetedGeometry - Genearate a new eight point adaptive component family type from any solid or polysurface consisting of planar faces. Faces with openigs are not supported., Springs.AreaPlan.ByLevelName - Creates an area plan at the designated levels. Each new view needs a name. An area scheme must first be activated before it can be used. To activate a scheme, place one view of that type in the project(you can then delete it).  If a view with the same scheme and name exists, you'll get a null instead., Springs.Beams.FixExtents - Detects all beams from the input list with broken extents(actual length - cut length <  margin) and attemts to correct them., Springs.BoundingBox.MidPoint - Fetches the mid point of the bounding box., Springs.BoundingBox.Scale - Scales the bounding box in three dimensions according to it's center., Springs.BrepShape.ByGeometry - Convert the input geometry to DirectShape element inside the Revit document.  Works only in Revit 2017 and later. Usies the more advanced BrepBuilder. It supports solids or surfaces, however periodic faces like spheres, cylinders and cones are not supported. Each created DS will have a unique type. Make sure that each input geometry has a unique name. You can either feed a single category and material for all geometries or a unique one for each geometry - the node's lacing is set to longest by default. The default category is Generic Model., Springs.ClosedCurve.Offset+ - Offsets a curve both ways and correctly differenciates the external and internal offset. If an offset goes beyond the curve's bounds, the result will fail and a null value will be appended instead. Also works for convex curves like arcs., Springs.Collector.CurrentSelection - Gets the currently selected elements. Connect a boolean switch to refresh the selection., Springs.Collector.ElementsInView - Selects all elements visible in the input view., Springs.Collector.ElementSketch - Get the actual sketch lines of a sketch based element (floor, ceiling, modified wall, etc.) . You can optionally fetch the matching model curves, however this might prove comptationally heavy on larger data sets., Springs.Collector.FamilyInstances - Collects placed family instance elements from the document that match the name. Partially mathing elements are collected as well. If no matches are found, a list of all isntance names will be output., Springs.Collector.FamilyTypes - Collects non-system family types that fully match or partially match the provided names. If no matches are found, a list of all type names will be output., Springs.Collector.FloorTypes - Collects Floor types by name., Springs.Collector.LinkedInstanceElements - Extract elements by category from the selected linked instances. The transform vector can be used to get the exact location of the elements in the local file, Springs.Collector.Revisions - Collects all revision clouds from a specific date., Springs.Collector.Sheets - Search for sheets by either their name or their number. Use a false boolean switch to search by number., Springs.Collector.Views - Search for views based on naming. You can choose to either include or exclude schedules. Use the sheet collector for sheets., Springs.Collector.WallTypes - Collects wall types by name., Springs.Color2Decimal - Converts a Dynamo colour its Revit equivalent  decimal value., Springs.Curve.Offset+ - Offsets a curve towards the specified point, Springs.CurveLoop.Simplify - Attempts to simplify an open or a closed curve loop by connecting straight separate line segments into a single line., Springs.Decimal2Color - Converts a revit colour decimal value to its Dynamo equivalent., Springs.Dictionary.ByKeysValues - Dictionaries are an incredibly powerful tool for making associative sets between two equal length lists. The first list must be of unique strings (or numbers) and will be the key and the second list will be the matching values (it can be made up of geometry, elements, even other lists)\r\nThe search keys list will provide the corresponding value to the input key., Springs.DirectShape.ByGeometry - Convert the input geometry to DirectShape element inside the Revit document.  It supports solids or surfaces.It is based on an alternative process that uses a SAT import and can produce smooth surfaces. Each created DS will have a unique type. Make sure that each input geometry has a unique name. You can either feed a single category for all geometries or a unique category for each geometry - the node's lacing is set to longest by default., Springs.DirectShape.Transform - Transforms the typed DirectShape element from the identity coordinate system to the input coordinate system(s), in a manner similar to Dynamo's Geometry.Transform node., Springs.DirectShape.Translate - Copy the input DirectShape element with the help of a translation vector, similarly to the Geometry.Translate node. This method should prove more efficient than Element.Copy, Springs.Doc.ActiveView - Selects the current document's active view. Supports more view types than the built-in option.\r\nWill be depreciated once the bult in node works with all plan types., Springs.Doc.DeleteElements - Attempts to delete the input list of elements from the active Revit document.The node returns the number of successfully deleted elements and their Ids as a string. Carefully observe the deleted elements count. It may be greater than the input list because hosted elements or tags will be deleted as well. If an element in the list can not be deleted (for example last revision or last view), the whole list will fail to be deleted., Springs.Element.IsCut - Tests if the element is being cut by any void instances. If any cuts exist all cutting elements will be provided., Springs.Element.IsCutting - Tests if the input element (or elements) is a void cut and if it is cutting any elements. In such cases, the cut elements will be provided., Springs.Element.RemoveVoidCut - Removes the void cut between the input elements, if such exists., Springs.Element.SetLocation - Attempts to modify the location of the input element. This can effectively add as a move comand in Revit. Works for both line based and point based elements., Springs.ElementsOfCategory - Same as the built in \"All Elements of Category\" but can act as a function object and does not get refreshed automatically., Springs.ElementType.Duplicate - Create duplicate element types. If the type exists, it will be appended instead., Springs.ErrorReport.Parse - Process a Revit error report (HTML file) and extract the error types, all affected elements and the total number of errors. If you are executing from a document different than the one the error report belongs to, be sure to set \"fetch_elements\" to false., Springs.FamilyInstance.ByFacePoints - Places instances on the input face oriented to the face's U tangent and the global Z axis., Springs.FamilyInstance.ByGeometry - You must provide a valid family template path that will be used for all input geometry objects. The project units(and not the templates) will be used to determine the size of the output geometry.\r\nThe provided category will be used only if the family template supports it. If not, the default template category will be used instead.\r\nLikewise, the family material(provided as a string) will be set only if a material with that name exists in the template. If not, the default material will be used instead (\"By Category\").\r\nFor void cuts, the material settings will be ignored.\r\nThe Subcategory name is an optional input. If you'd like to skip assigning a Subcategory to any new instance, simply use null.\r\nThe node expects a unique family name for each geometry object. The rest of the input lists will be processed as if the node lacing is set to longest., Springs.Feet2Fraction - Converts a decimal foot value to a fractional foot/inch string., Springs.File.Size - Checks the file size. Provide a file path as a string., Springs.Filter.ByCategoryName - Filters the input elements by their category name. You can input multiple category names., Springs.Filter.ByClassName - Filters a list of objects by the object's class name. Note that Dynamo elements belong to different classes than their Revit counterparts. Use the Object.Class node to check an object's class., Springs.Filter.BySelection - Check the items that you'd like to filter in.  Unchecked items will be sent to the out list. The optional names input will override the object representation., Springs.FloorOpening.ByCurves - Create hosted floor opeinngs through the input floors. The second input is a list of sub-lists of the boundary curves., Springs.Form.ByGeometry - Convert the input geometry to a Revit Form object. Forms can exist only in the family environment. You can convert complicated solids or surfaces directly into forms. A form can act as a void. Provide either one true boolean value to convert a form into a void. The node's lacing is set to longest by default., Springs.Fraction2Feet - Converts a fractioned feet /inch string value into a decimal foot value., Springs.Geometry.Extents - Gets the dimensions of the geometry's bounding box., Springs.Geometry.GroupByDistance - Splits the list of curves into groups if the distance between them is lesser than the provided margin., Springs.Geometry.SplitRecursively - Splits a surface or a solid recursively, using the resulting reduced geometry for every consecutive split. Select a point or another geometry to control the direction of the split., Springs.HostedInstance.ByPoints - Creates hosted family instances(doors/windows) at the specified points. You can feed either a single family type or a unique type for each instance., Springs.InterferenceCheck.Parse - Process a Revit interference check (HTML file) and extract the interference categories, all affected elements and the total number of clashes. If you are executing from a document different than the one the error report belongs to, be sure to set \"fetch_elements\" to false., Springs.Line.StraightenXY - Checks a line's end points for irregularities and corrects them if they are at or below the specified margin. The default margin is 1/5000 of the curve length, which is conservative., Springs.Line.StraightenZ - Checks a line's end points for irregularities in  the Z axis and corrects them if they are at or below the specified margin. The default margin is 1/2000 of the curve length, which is conservative., Springs.LineLoop.Merge - Attempts to join lines into a single chain of joined curves. The node returns the new lines as a chain and with the original order. The success outputs returns the success of the execution as a true/false boolean., Springs.List.DragDropReorder - Press and hold on an item to move it up or down the list. To confirm and close the window, select \"Save Order\". The optional names input will override the object representation., Springs.List.DropDown - Selects one list item by a drop-down combo box. The optional names input will override the object representation., Springs.List.DropFirstLast - Removes the first and last items from the list, Springs.List.EveryOther - Useful for when you want to combine an item on the list with every other item on the list. For example in list {1,2,3} , \"2\" will be paired up only with \"1\" and \"3\" and will not be paired up with itself., Springs.List.GetEvenOdd - Gets even indices from the list., Springs.List.MergeByBoolMask - Merge two lists by a boolean mask list. The true count in the mask should be the same as the length of the true list and vice versa for the false list., Springs.List.Randomise&Divide - Shiffles the input list and divides it into sub-lists based on ratios(1/4 + 1/2 + 1/4 will give you three lists split accordingly) The smalest ratio will always be 1 / the list length and the largest ratio will be 1. A seed input can shuffle the list further., Springs.List.Split - Splits a list at the desired length, Springs.List.Subpairs - Pair up each list item with the next one and drop the list item., Springs.Ln2Str - Serilize a geometry line to a string for use in Revit parameters, Springs.Math.AlmostEqual - Checks if a number is almost equal to a value with a specified tollerance., Springs.Mesh.ToPolySurface - Converts a Dynamo mesh to a polysurface. Uses multithreading - optimized for 4 cores., Springs.Mesh.ToToolkitMesh - Converts a Dynamo mesh to a toolkit mesh. You obviously need to have the appropriate version of the mesh toolkit package downloaded first., Springs.N-hedron.ByOriginVector - Creates a multi-sided poyhedron with defined side length and total height., Springs.NullAllIndicesOf - list all of the indices of a list that match the specified value. Capable of handling null values, part of the SmartCopyMonitor workflow., Springs.NullGetParameter - Similar to the built in node.Capable of handling null values, part of the SmartCopyMonitor workflow., Springs.NullIndexOf - Similar to the bult-in node but provides a null value instead of -1 of failure. Part of the SmartCopyMonitor workflow., Springs.NullReorder - Simiar to the built-in function with the difference that it can handle null indices. Part of the SmartCopyMonitor workflow., Springs.NullSetDifference - Similar to the built in node, with a built-in safety for null values. Part of the SmartCopyMonitor workflow., Springs.NullSetParameter - Similar to the built-in function but with the ability to handle null values. Part of the SmartCopyMon workflow., Springs.Number.ToString - Converts the input number(s) to string. Can process lists., Springs.PlanarFace.FixDomain - Corrects the surface domain of a 3 or 4 point planar face extracted from Revit., Springs.Point.PullOntoPlane - Pulls (projects) the point onto the input plane, following the plane normal., Springs.Points.ConvexHull2D - Computes the XY convex hull of a given set of points based on the monotone chain algorithm., Springs.PolyCurve.Chamfer - Symmetrically chamfers the corners of the polycurve by the designated distance, Springs.Polygon.ContainmentTest+ - A less accurate method that should perform faster than the built-in node for large data sets., Springs.Pt2Str - Serilize a geometry point to a string for use in Revit parameters, Springs.SelectEdges - Select multiple edges from inside the Revit UI. Be sure to press \"Finish\" once done. You can use a Boolean toggle to refresh your selection., Springs.SelectElements(ordered) - Select multiple elements from the Revit document in the desired order. Hit ESC to stop picking. To refresh the node, connect a boolean switch node., Springs.SelectFaces+ - Select multiple faces from inside the Revit UI. Be sure to press \"Finish\" once done. Unlike the built-in node, face references of instances will be added sucessfully and you'l get the pick points. You can use a Boolean toggle to refresh your selection., Springs.SelectInRevit - Selects the input elements inside the Revit UI., Springs.SelectLinkedElement - Select the linked instance first, followed by the element. If your selection fails, just press escape.\r\nTo refresh the node, connect a boolean switch node., Springs.SelectLinkedElements(ordered) - Select the linked instance first. Then select multiple elements from the Revit document in the desired order. Hit ESC to stop picking. To refresh the node, connect a boolean switch node., Springs.SelectLinkedElements - Select the linked instance first, followed by the elements. To finish the selection, press Finish. If your selection fails, just press escape or Cancel.\r\nTo refresh the node, connect a boolean switch node., Springs.SelectLinkedFace - Select the linked instance first, followed by the face. If your selection fails, just press escape.\r\nTo refresh the node, connect a boolean switch node., Springs.Shaft.ByCurves - Creates a shaft opening. The top level MUST be higher than the base level for a successful execution. You can either provide one base and top level for all shafts or have unique levels for each shaft instance., Springs.Sheet.Views+ - Extracts all views and schedules (minus the revision schedule) placed on the input sheet (or sheets).\r\nWill be depreciated once the bult in node works with all plan types., Springs.Star.ByCenterRadiusRays - Fun little node to create star shapes., Springs.Str2Ln - De-serilize a Revit parameter string into a geometric line., Springs.Str2Pt - De-serilize a Revit parameter string into a geometric point., Springs.ViewSet.ByViewsName - Creates a set of views(or sheets) for printing. If the set exists, set Overwrite to true to replace it., Springs.Watch+ - This node that serializes the input information and presents it in a resizable text window.",
            "engine_metadata": "",
            "engine_version": "1.1.0.2094",
            "created": "2016-11-06T02:22:44.042Z",
            "full_dependency_versions": [ "110.0.0" ],
            "full_dependency_ids": [
              {
                "_id": "56077cf3662bf0e9080001ea",
                "name": "spring nodes"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "110.0.0"
          },
          {
            "_id": "582407f25af9f3713d000029",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-prod/ef01df6d-b81e-4d6e-85f7-f35f3139bbc0gregPkg676.zip",
            "contents": "Springs.AdaptiveFamily.ByFacetedGeometry - Genearate a new eight point adaptive component family type from any solid or polysurface consisting of planar faces. Faces with openigs are not supported., Springs.AreaPlan.ByLevelName - Creates an area plan at the designated levels. Each new view needs a name. An area scheme must first be activated before it can be used. To activate a scheme, place one view of that type in the project(you can then delete it).  If a view with the same scheme and name exists, you'll get a null instead., Springs.Beams.FixExtents - Detects all beams from the input list with broken extents(actual length - cut length <  margin) and attemts to correct them., Springs.BoundingBox.MidPoint - Fetches the mid point of the bounding box., Springs.BoundingBox.Scale - Scales the bounding box in three dimensions according to it's center., Springs.BrepShape.ByGeometry - Convert the input geometry to DirectShape element inside the Revit document.  Works only in Revit 2017 and later. Usies the more advanced BrepBuilder. It supports solids or surfaces, however periodic faces like spheres, cylinders and cones are not supported. Each created DS will have a unique type. Make sure that each input geometry has a unique name. You can either feed a single category and material for all geometries or a unique one for each geometry - the node's lacing is set to longest by default. The default category is Generic Model., Springs.ClosedCurve.Offset+ - Offsets a curve both ways and correctly differenciates the external and internal offset. If an offset goes beyond the curve's bounds, the result will fail and a null value will be appended instead. Also works for convex curves like arcs., Springs.Collector.CurrentSelection - Gets the currently selected elements. Connect a boolean switch to refresh the selection., Springs.Collector.ElementsInView - Selects all elements visible in the input view., Springs.Collector.ElementSketch - Get the actual sketch lines of a sketch based element (floor, ceiling, modified wall, etc.) . You can optionally fetch the matching model curves, however this might prove comptationally heavy on larger data sets., Springs.Collector.FamilyInstances - Collects placed family instance elements from the document that match the name. Partially mathing elements are collected as well. If no matches are found, a list of all isntance names will be output., Springs.Collector.FamilyTypes - Collects non-system family types that fully match or partially match the provided names. If no matches are found, a list of all type names will be output., Springs.Collector.FloorTypes - Collects Floor types by name., Springs.Collector.LinkedInstanceElements - Extract elements by category from the selected linked instances. The transform vector can be used to get the exact location of the elements in the local file, Springs.Collector.Revisions - Collects all revision clouds from a specific date., Springs.Collector.Sheets - Search for sheets by either their name or their number. Use a false boolean switch to search by number., Springs.Collector.Views - Search for views based on naming. You can choose to either include or exclude schedules. Use the sheet collector for sheets., Springs.Collector.WallTypes - Collects wall types by name., Springs.Color2Decimal - Converts a Dynamo colour its Revit equivalent  decimal value., Springs.Curve.Offset+ - Offsets a curve towards the specified point, Springs.CurveLoop.Simplify - Attempts to simplify an open or a closed curve loop by connecting straight separate line segments into a single line., Springs.Decimal2Color - Converts a revit colour decimal value to its Dynamo equivalent., Springs.Dictionary.ByKeysValues - Dictionaries are an incredibly powerful tool for making associative sets between two equal length lists. The first list must be of unique strings (or numbers) and will be the key and the second list will be the matching values (it can be made up of geometry, elements, even other lists)\r\nThe search keys list will provide the corresponding value to the input key., Springs.DirectShape.ByGeometry - Convert the input geometry to DirectShape element inside the Revit document.  It supports solids or surfaces.It is based on an alternative process that uses a SAT import and can produce smooth surfaces. Each created DS will have a unique type. Make sure that each input geometry has a unique name. You can either feed a single category for all geometries or a unique category for each geometry - the node's lacing is set to longest by default., Springs.DirectShape.Transform - Transforms the typed DirectShape element from the identity coordinate system to the input coordinate system(s), in a manner similar to Dynamo's Geometry.Transform node., Springs.DirectShape.Translate - Copy the input DirectShape element with the help of a translation vector, similarly to the Geometry.Translate node. This method should prove more efficient than Element.Copy, Springs.Doc.ActiveView - Selects the current document's active view. Supports more view types than the built-in option.\r\nWill be depreciated once the bult in node works with all plan types., Springs.Doc.DeleteElements - Attempts to delete the input list of elements from the active Revit document.The node returns the number of successfully deleted elements and their Ids as a string. Carefully observe the deleted elements count. It may be greater than the input list because hosted elements or tags will be deleted as well. If an element in the list can not be deleted (for example last revision or last view), the whole list will fail to be deleted., Springs.Element.IsCut - Tests if the element is being cut by any void instances. If any cuts exist all cutting elements will be provided., Springs.Element.IsCutting - Tests if the input element (or elements) is a void cut and if it is cutting any elements. In such cases, the cut elements will be provided., Springs.Element.RemoveVoidCut - Removes the void cut between the input elements, if such exists., Springs.Element.SetLocation - Attempts to modify the location of the input element. This can effectively add as a move comand in Revit. Works for both line based and point based elements., Springs.ElementsOfCategory - Same as the built in \"All Elements of Category\" but can act as a function object and does not get refreshed automatically., Springs.ElementType.Duplicate - Create duplicate element types. If the type exists, it will be appended instead., Springs.ErrorReport.Parse - Process a Revit error report (HTML file) and extract the error types, all affected elements and the total number of errors. If you are executing from a document different than the one the error report belongs to, be sure to set \"fetch_elements\" to false., Springs.FamilyInstance.ByFacePoints - Places instances on the input face oriented to the face's U tangent and the global Z axis., Springs.FamilyInstance.ByGeometry - You must provide a valid family template path that will be used for all input geometry objects. The project units(and not the templates) will be used to determine the size of the output geometry.\r\nThe provided category will be used only if the family template supports it. If not, the default template category will be used instead.\r\nLikewise, the family material(provided as a string) will be set only if a material with that name exists in the template. If not, the default material will be used instead (\"By Category\").\r\nFor void cuts, the material settings will be ignored.\r\nThe Subcategory name is an optional input. If you'd like to skip assigning a Subcategory to any new instance, simply use null.\r\nThe node expects a unique family name for each geometry object. The rest of the input lists will be processed as if the node lacing is set to longest., Springs.Feet2Fraction - Converts a decimal foot value to a fractional foot/inch string., Springs.File.Size - Checks the file size. Provide a file path as a string., Springs.Filter.ByCategoryName - Filters the input elements by their category name. You can input multiple category names., Springs.Filter.ByClassName - Filters a list of objects by the object's class name. Note that Dynamo elements belong to different classes than their Revit counterparts. Use the Object.Class node to check an object's class., Springs.Filter.BySelection - Check the items that you'd like to filter in.  Unchecked items will be sent to the out list. The optional names input will override the object representation., Springs.FloorOpening.ByCurves - Create hosted floor opeinngs through the input floors. The second input is a list of sub-lists of the boundary curves., Springs.Form.ByGeometry - Convert the input geometry to a Revit Form object. Forms can exist only in the family environment. You can convert complicated solids or surfaces directly into forms. A form can act as a void. Provide either one true boolean value to convert a form into a void. The node's lacing is set to longest by default., Springs.Fraction2Feet - Converts a fractioned feet /inch string value into a decimal foot value., Springs.Geometry.Extents - Gets the dimensions of the geometry's bounding box., Springs.Geometry.GroupByDistance - Splits the list of curves into groups if the distance between them is lesser than the provided margin., Springs.Geometry.SplitRecursively - Splits a surface or a solid recursively, using the resulting reduced geometry for every consecutive split. Select a point or another geometry to control the direction of the split., Springs.HostedInstance.ByPoints - Creates hosted family instances(doors/windows) at the specified points. You can feed either a single family type or a unique type for each instance., Springs.InterferenceCheck.Parse - Process a Revit interference check (HTML file) and extract the interference categories, all affected elements and the total number of clashes. If you are executing from a document different than the one the error report belongs to, be sure to set \"fetch_elements\" to false., Springs.Line.StraightenXY - Checks a line's end points for irregularities and corrects them if they are at or below the specified margin. The default margin is 1/5000 of the curve length, which is conservative., Springs.Line.StraightenZ - Checks a line's end points for irregularities in  the Z axis and corrects them if they are at or below the specified margin. The default margin is 1/2000 of the curve length, which is conservative., Springs.LineLoop.Merge - Attempts to join lines into a single chain of joined curves. The node returns the new lines as a chain and with the original order. The success outputs returns the success of the execution as a true/false boolean., Springs.List.DragDropReorder - Press and hold on an item to move it up or down the list. To confirm and close the window, select \"Save Order\". The optional names input will override the object representation., Springs.List.DropDown - Selects one list item by a drop-down combo box. The optional names input will override the object representation., Springs.List.DropFirstLast - Removes the first and last items from the list, Springs.List.EveryOther - Useful for when you want to combine an item on the list with every other item on the list. For example in list {1,2,3} , \"2\" will be paired up only with \"1\" and \"3\" and will not be paired up with itself., Springs.List.GetEvenOdd - Gets even indices from the list., Springs.List.MergeByBoolMask - Merge two lists by a boolean mask list. The true count in the mask should be the same as the length of the true list and vice versa for the false list., Springs.List.Randomise&Divide - Shiffles the input list and divides it into sub-lists based on ratios(1/4 + 1/2 + 1/4 will give you three lists split accordingly) The smalest ratio will always be 1 / the list length and the largest ratio will be 1. A seed input can shuffle the list further., Springs.List.Split - Splits a list at the desired length, Springs.List.Subpairs - Pair up each list item with the next one and drop the list item., Springs.Ln2Str - Serilize a geometry line to a string for use in Revit parameters, Springs.Math.AlmostEqual - Checks if a number is almost equal to a value with a specified tollerance., Springs.Mesh.ToPolySurface - Converts a Dynamo mesh to a polysurface. Uses multithreading - optimized for 4 cores., Springs.Mesh.ToToolkitMesh - Converts a Dynamo mesh to a toolkit mesh. You obviously need to have the appropriate version of the mesh toolkit package downloaded first., Springs.N-hedron.ByOriginVector - Creates a multi-sided poyhedron with defined side length and total height., Springs.NullAllIndicesOf - list all of the indices of a list that match the specified value. Capable of handling null values, part of the SmartCopyMonitor workflow., Springs.NullGetParameter - Similar to the built in node.Capable of handling null values, part of the SmartCopyMonitor workflow., Springs.NullIndexOf - Similar to the bult-in node but provides a null value instead of -1 of failure. Part of the SmartCopyMonitor workflow., Springs.NullReorder - Simiar to the built-in function with the difference that it can handle null indices. Part of the SmartCopyMonitor workflow., Springs.NullSetDifference - Similar to the built in node, with a built-in safety for null values. Part of the SmartCopyMonitor workflow., Springs.NullSetParameter - Similar to the built-in function but with the ability to handle null values. Part of the SmartCopyMon workflow., Springs.Number.ToString - Converts the input number(s) to string. Can process lists., Springs.PlanarFace.FixDomain - Corrects the surface domain of a 3 or 4 point planar face extracted from Revit., Springs.Point.PullOntoPlane - Pulls (projects) the point onto the input plane, following the plane normal., Springs.Points.ConvexHull2D - Computes the XY convex hull of a given set of points based on the monotone chain algorithm., Springs.PolyCurve.Chamfer - Symmetrically chamfers the corners of the polycurve by the designated distance, Springs.Polygon.ContainmentTest+ - A less accurate method that should perform faster than the built-in node for large data sets., Springs.Pt2Str - Serilize a geometry point to a string for use in Revit parameters, Springs.SelectEdges - Select multiple edges from inside the Revit UI. Be sure to press \"Finish\" once done. You can use a Boolean toggle to refresh your selection., Springs.SelectElements(ordered) - Select multiple elements from the Revit document in the desired order. Hit ESC to stop picking. To refresh the node, connect a boolean switch node., Springs.SelectFaces+ - Select multiple faces from inside the Revit UI. Be sure to press \"Finish\" once done. Unlike the built-in node, face references of instances will be added sucessfully and you'l get the pick points. You can use a Boolean toggle to refresh your selection., Springs.SelectInRevit - Selects the input elements inside the Revit UI., Springs.SelectLinkedElement - Select the linked instance first, followed by the element. If your selection fails, just press escape.\r\nTo refresh the node, connect a boolean switch node., Springs.SelectLinkedElements(ordered) - Select the linked instance first. Then select multiple elements from the Revit document in the desired order. Hit ESC to stop picking. To refresh the node, connect a boolean switch node., Springs.SelectLinkedElements - Select the linked instance first, followed by the elements. To finish the selection, press Finish. If your selection fails, just press escape or Cancel.\r\nTo refresh the node, connect a boolean switch node., Springs.SelectLinkedFace - Select the linked instance first, followed by the face. If your selection fails, just press escape.\r\nTo refresh the node, connect a boolean switch node., Springs.Shaft.ByCurves - Creates a shaft opening. The top level MUST be higher than the base level for a successful execution. You can either provide one base and top level for all shafts or have unique levels for each shaft instance., Springs.Sheet.Views+ - Extracts all views and schedules (minus the revision schedule) placed on the input sheet (or sheets).\r\nWill be depreciated once the bult in node works with all plan types., Springs.Star.ByCenterRadiusRays - Fun little node to create star shapes., Springs.Str2Ln - De-serilize a Revit parameter string into a geometric line., Springs.Str2Pt - De-serilize a Revit parameter string into a geometric point., Springs.ViewSet.ByViewsName - Creates a set of views(or sheets) for printing. If the set exists, set Overwrite to true to replace it., Springs.Watch+ - This node that serializes the input information and presents it in a resizable text window.",
            "engine_metadata": "",
            "engine_version": "1.1.0.2094",
            "created": "2016-11-10T05:38:58.561Z",
            "full_dependency_versions": [ "110.0.1" ],
            "full_dependency_ids": [
              {
                "_id": "56077cf3662bf0e9080001ea",
                "name": "spring nodes"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "110.0.1"
          },
          {
            "_id": "583d2f4ffdef23aa6e000034",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-prod/873bd39a-d246-4873-9934-f75a9066c9e5gregPkg652.zip",
            "contents": "Springs.AdaptiveFamily.ByFacetedGeometry - Genearate a new eight point adaptive component family type from any solid or polysurface consisting of planar faces. Faces with openigs are not supported., Springs.AreaPlan.ByLevelName - Creates an area plan at the designated levels. Each new view needs a name. An area scheme must first be activated before it can be used. To activate a scheme, place one view of that type in the project(you can then delete it).  If a view with the same scheme and name exists, you'll get a null instead., Springs.Beams.FixExtents - Detects all beams from the input list with broken extents(actual length - cut length <  margin) and attemts to correct them., Springs.BoundingBox.MidPoint - Fetches the mid point of the bounding box., Springs.BoundingBox.Scale - Scales the bounding box in three dimensions according to it's center., Springs.BrepShape.ByGeometry - Convert the input geometry to DirectShape element inside the Revit document.  Works only in Revit 2017 and later. Usies the more advanced BrepBuilder. It supports solids or surfaces, however periodic faces like spheres, cylinders and cones are not supported. Each created DS will have a unique type. Make sure that each input geometry has a unique name. You can either feed a single category and material for all geometries or a unique one for each geometry - the node's lacing is set to longest by default. The default category is Generic Model., Springs.ClosedCurve.Offset+ - Offsets a curve both ways and correctly differenciates the external and internal offset. If an offset goes beyond the curve's bounds, the result will fail and a null value will be appended instead. Also works for convex curves like arcs., Springs.Collector.CurrentSelection - Gets the currently selected elements. Connect a boolean switch to refresh the selection., Springs.Collector.ElementsInView - Selects all elements visible in the input view., Springs.Collector.ElementSketch - Get the actual sketch lines of a sketch based element (floor, ceiling, modified wall, etc.) . You can optionally fetch the matching model curves, however this might prove comptationally heavy on larger data sets., Springs.Collector.FamilyInstances - Collects placed family instance elements from the document that match the name. Partially mathing elements are collected as well. If no matches are found, a list of all isntance names will be output., Springs.Collector.FamilyTypes - Collects non-system family types that fully match or partially match the provided names. If no matches are found, a list of all type names will be output., Springs.Collector.FloorTypes - Collects Floor types by name., Springs.Collector.LinkedInstanceElements - Extract elements by category from the selected linked instances. The transform vector can be used to get the exact location of the elements in the local file, Springs.Collector.Revisions - Collects all revision clouds from a specific date., Springs.Collector.Sheets - Search for sheets by either their name or their number. Use a false boolean switch to search by number., Springs.Collector.Views - Search for views based on naming. You can choose to either include or exclude schedules. Use the sheet collector for sheets., Springs.Collector.WallTypes - Collects wall types by name., Springs.Color2Decimal - Converts a Dynamo colour its Revit equivalent  decimal value., Springs.Curve.Offset+ - Offsets a curve towards the specified point, Springs.CurveLoop.Simplify - Attempts to simplify an open or a closed curve loop by connecting straight separate line segments into a single line., Springs.Decimal2Color - Converts a revit colour decimal value to its Dynamo equivalent., Springs.Dictionary.ByKeysValues - Dictionaries are an incredibly powerful tool for making associative sets between two equal length lists. The first list must be of unique strings (or numbers) and will be the key and the second list will be the matching values (it can be made up of geometry, elements, even other lists)\r\nThe search keys list will provide the corresponding value to the input key., Springs.DirectShape.ByGeometry - Convert the input geometry to DirectShape element inside the Revit document.  It supports solids or surfaces.It is based on an alternative process that uses a SAT import and can produce smooth surfaces. Each created DS will have a unique type. Make sure that each input geometry has a unique name. You can either feed a single category for all geometries or a unique category for each geometry - the node's lacing is set to longest by default., Springs.DirectShape.Transform - Transforms the typed DirectShape element from the identity coordinate system to the input coordinate system(s), in a manner similar to Dynamo's Geometry.Transform node., Springs.DirectShape.Translate - Copy the input DirectShape element with the help of a translation vector, similarly to the Geometry.Translate node. This method should prove more efficient than Element.Copy, Springs.Doc.ActiveView - Selects the current document's active view. Supports more view types than the built-in option.\r\nWill be depreciated once the bult in node works with all plan types., Springs.Doc.DeleteElements - Attempts to delete the input list of elements from the active Revit document.The node returns the number of successfully deleted elements and their Ids as a string. Carefully observe the deleted elements count. It may be greater than the input list because hosted elements or tags will be deleted as well. If an element in the list can not be deleted (for example last revision or last view), the whole list will fail to be deleted., Springs.Element.IsCut - Tests if the element is being cut by any void instances. If any cuts exist all cutting elements will be provided., Springs.Element.IsCutting - Tests if the input element (or elements) is a void cut and if it is cutting any elements. In such cases, the cut elements will be provided., Springs.Element.RemoveVoidCut - Removes the void cut between the input elements, if such exists., Springs.Element.SetLocation - Attempts to modify the location of the input element. This can effectively add as a move comand in Revit. Works for both line based and point based elements., Springs.ElementsOfCategory - Same as the built in \"All Elements of Category\" but can act as a function object and does not get refreshed automatically., Springs.ElementType.Duplicate - Create duplicate element types. If the type exists, it will be appended instead., Springs.ErrorReport.Parse - Process a Revit error report (HTML file) and extract the error types, all affected elements and the total number of errors. If you are executing from a document different than the one the error report belongs to, be sure to set \"fetch_elements\" to false., Springs.FamilyInstance.ByFacePoints - Places instances on the input face oriented to the face's U tangent and the global Z axis., Springs.FamilyInstance.ByGeometry - You must provide a valid family template path that will be used for all input geometry objects. The project units(and not the templates) will be used to determine the size of the output geometry.\r\nThe provided category will be used only if the family template supports it. If not, the default template category will be used instead.\r\nLikewise, the family material(provided as a string) will be set only if a material with that name exists in the template. If not, the default material will be used instead (\"By Category\").\r\nFor void cuts, the material settings will be ignored.\r\nThe Subcategory name is an optional input. If you'd like to skip assigning a Subcategory to any new instance, simply use null.\r\nThe node expects a unique family name for each geometry object. The rest of the input lists will be processed as if the node lacing is set to longest., Springs.Feet2Fraction - Converts a decimal foot value to a fractional foot/inch string., Springs.File.Size - Checks the file size. Provide a file path as a string., Springs.Filter.ByCategoryName - Filters the input elements by their category name. You can input multiple category names., Springs.Filter.ByClassName - Filters a list of objects by the object's class name. Note that Dynamo elements belong to different classes than their Revit counterparts. Use the Object.Class node to check an object's class., Springs.Filter.BySelection - Check the items that you'd like to filter in.  Unchecked items will be sent to the out list. The optional names input will override the object representation., Springs.FloorOpening.ByCurves - Create hosted floor opeinngs through the input floors. The second input is a list of sub-lists of the boundary curves., Springs.Form.ByGeometry - Convert the input geometry to a Revit Form object. Forms can exist only in the family environment. You can convert complicated solids or surfaces directly into forms. A form can act as a void. Provide either one true boolean value to convert a form into a void. The node's lacing is set to longest by default., Springs.Fraction2Feet - Converts a fractioned feet /inch string value into a decimal foot value., Springs.Geometry.Extents - Gets the dimensions of the geometry's bounding box., Springs.Geometry.GroupByDistance - Splits the list of curves into groups if the distance between them is lesser than the provided margin., Springs.Geometry.SplitRecursively - Splits a surface or a solid recursively, using the resulting reduced geometry for every consecutive split. Select a point or another geometry to control the direction of the split., Springs.HostedInstance.ByPoints - Creates hosted family instances(doors/windows) at the specified points. You can feed either a single family type or a unique type for each instance., Springs.InterferenceCheck.Parse - Process a Revit interference check (HTML file) and extract the interference categories, all affected elements and the total number of clashes. If you are executing from a document different than the one the error report belongs to, be sure to set \"fetch_elements\" to false., Springs.Line.StraightenXY - Checks a line's end points for irregularities and corrects them if they are at or below the specified margin. The default margin is 1/5000 of the curve length, which is conservative., Springs.Line.StraightenZ - Checks a line's end points for irregularities in  the Z axis and corrects them if they are at or below the specified margin. The default margin is 1/2000 of the curve length, which is conservative., Springs.LineLoop.Merge - Attempts to join lines into a single chain of joined curves. The node returns the new lines as a chain and with the original order. The success outputs returns the success of the execution as a true/false boolean., Springs.List.DragDropReorder - Press and hold on an item to move it up or down the list. To confirm and close the window, select \"Save Order\". The optional names input will override the object representation., Springs.List.DropDown - Selects one list item by a drop-down combo box. The optional names input will override the object representation., Springs.List.DropFirstLast - Removes the first and last items from the list, Springs.List.EveryOther - Useful for when you want to combine an item on the list with every other item on the list. For example in list {1,2,3} , \"2\" will be paired up only with \"1\" and \"3\" and will not be paired up with itself., Springs.List.GetEvenOdd - Gets even indices from the list., Springs.List.MergeByBoolMask - Merge two lists by a boolean mask list. The true count in the mask should be the same as the length of the true list and vice versa for the false list., Springs.List.Randomise&Divide - Shiffles the input list and divides it into sub-lists based on ratios(1/4 + 1/2 + 1/4 will give you three lists split accordingly) The smalest ratio will always be 1 / the list length and the largest ratio will be 1. A seed input can shuffle the list further., Springs.List.Split - Splits a list at the desired length, Springs.List.Subpairs - Pair up each list item with the next one and drop the list item., Springs.Ln2Str - Serilize a geometry line to a string for use in Revit parameters, Springs.Math.AlmostEqual - Checks if a number is almost equal to a value with a specified tollerance., Springs.Mesh.ToPolySurface - Converts a Dynamo mesh to a polysurface. Uses multithreading - optimized for 4 cores., Springs.Mesh.ToToolkitMesh - Converts a Dynamo mesh to a toolkit mesh. You obviously need to have the appropriate version of the mesh toolkit package downloaded first., Springs.N-hedron.ByOriginVector - Creates a multi-sided poyhedron with defined side length and total height., Springs.NullAllIndicesOf - list all of the indices of a list that match the specified value. Capable of handling null values, part of the SmartCopyMonitor workflow., Springs.NullGetParameter - Similar to the built in node.Capable of handling null values, part of the SmartCopyMonitor workflow., Springs.NullIndexOf - Similar to the bult-in node but provides a null value instead of -1 of failure. Part of the SmartCopyMonitor workflow., Springs.NullReorder - Simiar to the built-in function with the difference that it can handle null indices. Part of the SmartCopyMonitor workflow., Springs.NullSetDifference - Similar to the built in node, with a built-in safety for null values. Part of the SmartCopyMonitor workflow., Springs.NullSetParameter - Similar to the built-in function but with the ability to handle null values. Part of the SmartCopyMon workflow., Springs.Number.ToString - Converts the input number(s) to string. Can process lists., Springs.PlanarFace.FixDomain - Corrects the surface domain of a 3 or 4 point planar face extracted from Revit., Springs.Point.PullOntoPlane - Pulls (projects) the point onto the input plane, following the plane normal., Springs.Points.ConvexHull2D - Computes the XY convex hull of a given set of points based on the monotone chain algorithm., Springs.PolyCurve.Chamfer - Symmetrically chamfers the corners of the polycurve by the designated distance, Springs.Polygon.ContainmentTest+ - A less accurate method that should perform faster than the built-in node for large data sets., Springs.Pt2Str - Serilize a geometry point to a string for use in Revit parameters, Springs.SelectEdges - Select multiple edges from inside the Revit UI. Be sure to press \"Finish\" once done. You can use a Boolean toggle to refresh your selection., Springs.SelectElements(ordered) - Select multiple elements from the Revit document in the desired order. Hit ESC to stop picking. To refresh the node, connect a boolean switch node., Springs.SelectFaces+ - Select multiple faces from inside the Revit UI. Be sure to press \"Finish\" once done. Unlike the built-in node, face references of instances will be added sucessfully and you'l get the pick points. You can use a Boolean toggle to refresh your selection., Springs.SelectInRevit - Selects the input elements inside the Revit UI., Springs.SelectLinkedElement - Select the linked instance first, followed by the element. If your selection fails, just press escape.\r\nTo refresh the node, connect a boolean switch node., Springs.SelectLinkedElements(ordered) - Select the linked instance first. Then select multiple elements from the Revit document in the desired order. Hit ESC to stop picking. To refresh the node, connect a boolean switch node., Springs.SelectLinkedElements - Select the linked instance first, followed by the elements. To finish the selection, press Finish. If your selection fails, just press escape or Cancel.\r\nTo refresh the node, connect a boolean switch node., Springs.SelectLinkedFace - Select the linked instance first, followed by the face. If your selection fails, just press escape.\r\nTo refresh the node, connect a boolean switch node., Springs.Shaft.ByCurves - Creates a shaft opening. The top level MUST be higher than the base level for a successful execution. You can either provide one base and top level for all shafts or have unique levels for each shaft instance., Springs.Sheet.Views+ - Extracts all views and schedules (minus the revision schedule) placed on the input sheet (or sheets).\r\nWill be depreciated once the bult in node works with all plan types., Springs.Star.ByCenterRadiusRays - Fun little node to create star shapes., Springs.Str2Ln - De-serilize a Revit parameter string into a geometric line., Springs.Str2Pt - De-serilize a Revit parameter string into a geometric point., Springs.ViewSet.ByViewsName - Creates a set of views(or sheets) for printing. If the set exists, set Overwrite to true to replace it., Springs.Watch+ - This node that serializes the input information and presents it in a resizable text window.",
            "engine_metadata": "",
            "engine_version": "1.1.0.2094",
            "created": "2016-11-29T07:33:35.822Z",
            "full_dependency_versions": [ "110.0.2" ],
            "full_dependency_ids": [
              {
                "_id": "56077cf3662bf0e9080001ea",
                "name": "spring nodes"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "110.0.2"
          },
          {
            "_id": "588ee826ca6a5edb650000d9",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-prod/7334ce06-09cd-471c-a290-51774db17bf8gregPkg501.zip",
            "contents": "Springs.AdaptiveFamily.ByFacetedGeometry - Genearate a new eight point adaptive component family type from any solid or polysurface consisting of planar faces. Faces with openigs are not supported., Springs.AreaPlan.ByLevelName - Creates an area plan at the designated levels. Each new view needs a name. An area scheme must first be activated before it can be used. To activate a scheme, place one view of that type in the project(you can then delete it).  If a view with the same scheme and name exists, you'll get a null instead., Springs.Beams.FixExtents - Detects all beams from the input list with broken extents(actual length - cut length <  margin) and attemts to correct them., Springs.BoundingBox.MidPoint - Fetches the mid point of the bounding box., Springs.BoundingBox.Scale - Scales the bounding box in three dimensions according to it's center., Springs.BrepShape.ByGeometry - Convert the input geometry to DirectShape element inside the Revit document.  Works only in Revit 2017 and later. Usies the more advanced BrepBuilder. It supports solids or surfaces, however periodic faces like spheres, cylinders and cones are not supported. Each created DS will have a unique type. Make sure that each input geometry has a unique name. You can either feed a single category and material for all geometries or a unique one for each geometry - the node's lacing is set to longest by default. The default category is Generic Model., Springs.ClosedCurve.Offset+ - Offsets a curve both ways and correctly differenciates the external and internal offset. If an offset goes beyond the curve's bounds, the result will fail and a null value will be appended instead. Also works for convex curves like arcs., Springs.Collector.CurrentSelection - Gets the currently selected elements. Connect a boolean switch to refresh the selection., Springs.Collector.ElementsInView - Selects all elements visible in the input view., Springs.Collector.ElementSketch - Get the actual sketch lines of a sketch based element (floor, ceiling, modified wall, etc.) . You can optionally fetch the matching model curves, however this might prove comptationally heavy on larger data sets., Springs.Collector.FamilyInstances - Collects placed family instance elements from the document that match the name. Partially mathing elements are collected as well. If no matches are found, a list of all isntance names will be output., Springs.Collector.FamilyTypes - Collects non-system family types that fully match or partially match the provided names. If no matches are found, a list of all type names will be output., Springs.Collector.FloorTypes - Collects Floor types by name., Springs.Collector.LinkedInstanceElements - Extract elements by category from the selected linked instances. The transform vector can be used to get the exact location of the elements in the local file, Springs.Collector.Revisions - Collects all revision clouds from a specific date., Springs.Collector.Sheets - Search for sheets by either their name or their number. Use a false boolean switch to search by number., Springs.Collector.Views - Search for views based on naming. You can choose to either include or exclude schedules. Use the sheet collector for sheets., Springs.Collector.WallTypes - Collects wall types by name., Springs.Color2Decimal - Converts a Dynamo colour its Revit equivalent  decimal value., Springs.Curve.Offset+ - Offsets a curve towards the specified point, Springs.CurveLoop.Simplify - Attempts to simplify an open or a closed curve loop by connecting straight separate line segments into a single line., Springs.Decimal2Color - Converts a revit colour decimal value to its Dynamo equivalent., Springs.Dictionary.ByKeysValues - Dictionaries are an incredibly powerful tool for making associative sets between two equal length lists. The first list must be of unique strings (or numbers) and will be the key and the second list will be the matching values (it can be made up of geometry, elements, even other lists)\r\nThe search keys list will provide the corresponding value to the input key., Springs.DirectShape.ByGeometry - Convert the input geometry to DirectShape element inside the Revit document.  It supports solids or surfaces.It is based on an alternative process that uses a SAT import and can produce smooth surfaces. Each created DS will have a unique type. Make sure that each input geometry has a unique name. You can either feed a single category for all geometries or a unique category for each geometry - the node's lacing is set to longest by default., Springs.DirectShape.Transform - Transforms the typed DirectShape element from the identity coordinate system to the input coordinate system(s), in a manner similar to Dynamo's Geometry.Transform node., Springs.DirectShape.Translate - Copy the input DirectShape element with the help of a translation vector, similarly to the Geometry.Translate node. This method should prove more efficient than Element.Copy, Springs.Doc.ActiveView - Selects the current document's active view. Supports more view types than the built-in option.\r\nWill be depreciated once the bult in node works with all plan types., Springs.Doc.DeleteElements - Attempts to delete the input list of elements from the active Revit document.The node returns the number of successfully deleted elements and their Ids as a string. Carefully observe the deleted elements count. It may be greater than the input list because hosted elements or tags will be deleted as well. If an element in the list can not be deleted (for example last revision or last view), the whole list will fail to be deleted., Springs.Element.IsCut - Tests if the element is being cut by any void instances. If any cuts exist all cutting elements will be provided., Springs.Element.IsCutting - Tests if the input element (or elements) is a void cut and if it is cutting any elements. In such cases, the cut elements will be provided., Springs.Element.RemoveVoidCut - Removes the void cut between the input elements, if such exists., Springs.Element.SetLocation - Attempts to modify the location of the input element. This can effectively add as a move comand in Revit. Works for both line based and point based elements., Springs.Elements.GroupByDistance - You'll need two equal length lists of geometry objects and elements. Splits the list of elements into groups if the distance between the coresponding geometry is less than the provided margin., Springs.ElementsOfCategory - Same as the built in \"All Elements of Category\" but can act as a function object and does not get refreshed automatically., Springs.ElementType.Duplicate - Create duplicate element types. If the type exists, it will be appended instead., Springs.ErrorReport.Parse - Process a Revit error report (HTML file) and extract the error types, all affected elements and the total number of errors. If you are executing from a document different than the one the error report belongs to, be sure to set \"fetch_elements\" to false., Springs.FamilyInstance.ByFacePoints - Places instances on the input face oriented to the face's U tangent and the global Z axis., Springs.FamilyInstance.ByGeometry - You must provide a valid family template path that will be used for all input geometry objects. The project units(and not the templates) will be used to determine the size of the output geometry.\r\nThe provided category will be used only if the family template supports it. If not, the default template category will be used instead.\r\nLikewise, the family material(provided as a string) will be set only if a material with that name exists in the template. If not, the default material will be used instead (\"By Category\").\r\nFor void cuts, the material settings will be ignored.\r\nThe Subcategory name is an optional input. If you'd like to skip assigning a Subcategory to any new instance, simply use null.\r\nThe node expects a unique family name for each geometry object. The rest of the input lists will be processed as if the node lacing is set to longest., Springs.Feet2Fraction - Converts a decimal foot value to a fractional foot/inch string., Springs.File.Size - Checks the file size. Provide a file path as a string., Springs.Filter.ByCategoryName - Filters the input elements by their category name. You can input multiple category names., Springs.Filter.ByClassName - Filters a list of objects by the object's class name. Note that Dynamo elements belong to different classes than their Revit counterparts. Use the Object.Class node to check an object's class., Springs.Filter.BySelection - Check the items that you'd like to filter in.  Unchecked items will be sent to the out list. The optional names input will override the object representation., Springs.FloorOpening.ByCurves - Create hosted floor opeinngs through the input floors. The second input is a list of sub-lists of the boundary curves., Springs.Form.ByGeometry - Convert the input geometry to a Revit Form object. Forms can exist only in the family environment. You can convert complicated solids or surfaces directly into forms. A form can act as a void. Provide either one true boolean value to convert a form into a void. The node's lacing is set to longest by default., Springs.Fraction2Feet - Converts a fractioned feet /inch string value into a decimal foot value., Springs.Geometry.Extents - Gets the dimensions of the geometry's bounding box., Springs.Geometry.GroupByDistance - Splits the list of geometry elements into groups if the distance between them is less than the provided margin., Springs.Geometry.SplitRecursively - Splits a surface or a solid recursively, using the resulting reduced geometry for every consecutive split. Select a point or another geometry to control the direction of the split., Springs.HostedInstance.ByPoints - Creates hosted family instances(doors/windows) at the specified points. You can feed either a single family type or a unique type for each instance., Springs.InterferenceCheck.Parse - Process a Revit interference check (HTML file) and extract the interference categories, all affected elements and the total number of clashes. If you are executing from a document different than the one the error report belongs to, be sure to set \"fetch_elements\" to false., Springs.Line.StraightenXY - Checks a line's end points for irregularities and corrects them if they are at or below the specified margin. The default margin is 1/5000 of the curve length, which is conservative., Springs.Line.StraightenZ - Checks a line's end points for irregularities in  the Z axis and corrects them if they are at or below the specified margin. The default margin is 1/2000 of the curve length, which is conservative., Springs.LineLoop.Merge - Attempts to join lines into a single chain of joined curves. The node returns the new lines as a chain and with the original order. The success outputs returns the success of the execution as a true/false boolean., Springs.List.DragDropReorder - Press and hold on an item to move it up or down the list. To confirm and close the window, select \"Save Order\". The optional names input will override the object representation., Springs.List.DropDown - Selects one list item by a drop-down combo box. The optional names input will override the object representation., Springs.List.DropFirstLast - Removes the first and last items from the list, Springs.List.EveryOther - Useful for when you want to combine an item on the list with every other item on the list. For example in list {1,2,3} , \"2\" will be paired up only with \"1\" and \"3\" and will not be paired up with itself., Springs.List.GetEvenOdd - Gets the even and odd indices from the list., Springs.List.MergeByBoolMask - Merge two lists by a boolean mask list. The true count in the mask should be the same as the length of the true list and vice versa for the false list., Springs.List.Randomise&Divide - Shiffles the input list and divides it into sub-lists based on ratios(1/4 + 1/2 + 1/4 will give you three lists split accordingly) The smalest ratio will always be 1 / the list length and the largest ratio will be 1. A seed input can shuffle the list further., Springs.List.Split - Splits a list at the desired length, Springs.List.Subpairs - Pair up each list item with the next one and drop the list item., Springs.Ln2Str - Serilize a geometry line to a string for use in Revit parameters, Springs.Math.AlmostEqual - Checks if a number is almost equal to a value with a specified tollerance., Springs.Mesh.ToPolySurface - Converts a Dynamo mesh to a polysurface. Uses multithreading - optimized for 4 cores., Springs.Mesh.ToToolkitMesh - Converts a Dynamo mesh to a toolkit mesh. You obviously need to have the appropriate version of the mesh toolkit package downloaded first., Springs.N-hedron.ByOriginVector - Creates a multi-sided poyhedron with defined side length and total height., Springs.NullAllIndicesOf - list all of the indices of a list that match the specified value. Capable of handling null values, part of the SmartCopyMonitor workflow., Springs.NullGetParameter - Similar to the built in node.Capable of handling null values, part of the SmartCopyMonitor workflow., Springs.NullIndexOf - Similar to the bult-in node but provides a null value instead of -1 of failure. Part of the SmartCopyMonitor workflow., Springs.NullReorder - Simiar to the built-in function with the difference that it can handle null indices. Part of the SmartCopyMonitor workflow., Springs.NullSetDifference - Similar to the built in node, with a built-in safety for null values. Part of the SmartCopyMonitor workflow., Springs.NullSetParameter - Similar to the built-in function but with the ability to handle null values. Part of the SmartCopyMon workflow., Springs.Number.ToString - Converts the input number(s) to string. Can process lists., Springs.PlanarFace.FixDomain - Corrects the surface domain of a 3 or 4 point planar face extracted from Revit., Springs.Point.PullOntoPlane - Pulls (projects) the point onto the input plane, following the plane normal., Springs.Points.ConvexHull2D - Computes the XY convex hull of a given set of points based on the monotone chain algorithm., Points.PruneDuplicates+ - An alternative to the built in node, that performs faster at the price of loosing the order of the points. All floating point valies are rounded to the nearest 4 decimal points. You can optionally remove duplicate Z values by setting \"keepDuplicateZ\" to false., Springs.PolyCurve.Chamfer - Symmetrically chamfers the corners of the polycurve by the designated distance, Springs.Polygon.ContainmentTest+ - A less accurate method that should perform faster than the built-in node for large data sets., Springs.Pt2Str - Serilize a geometry point to a string for use in Revit parameters, Springs.SelectEdges - Select multiple edges from inside the Revit UI. Be sure to press \"Finish\" once done. You can use a Boolean toggle to refresh your selection., Springs.SelectElements(ordered) - Select multiple elements from the Revit document in the desired order. Hit ESC to stop picking. To refresh the node, connect a boolean switch node., Springs.SelectFaces+ - Select multiple faces from inside the Revit UI. Be sure to press \"Finish\" once done. Unlike the built-in node, face references of instances will be added sucessfully and you'l get the pick points. You can use a Boolean toggle to refresh your selection., Springs.SelectInRevit - Selects the input elements inside the Revit UI., Springs.SelectLinkedElement - Select the linked instance first, followed by the element. If your selection fails, just press escape.\r\nTo refresh the node, connect a boolean switch node., Springs.SelectLinkedElements(ordered) - Select the linked instance first. Then select multiple elements from the Revit document in the desired order. Hit ESC to stop picking. To refresh the node, connect a boolean switch node., Springs.SelectLinkedElements - Select the linked instance first, followed by the elements. To finish the selection, press Finish. If your selection fails, just press escape or Cancel.\r\nTo refresh the node, connect a boolean switch node., Springs.SelectLinkedFace - Select the linked instance first, followed by the face. If your selection fails, just press escape.\r\nTo refresh the node, connect a boolean switch node., Springs.Shaft.ByCurves - Creates a shaft opening. The top level MUST be higher than the base level for a successful execution. You can either provide one base and top level for all shafts or have unique levels for each shaft instance., Springs.Sheet.Views+ - Extracts all views and schedules (minus the revision schedule) placed on the input sheet (or sheets).\r\nWill be depreciated once the bult in node works with all plan types., Springs.Star.ByCenterRadiusRays - Fun little node to create star shapes., Springs.Str2Ln - De-serilize a Revit parameter string into a geometric line., Springs.Str2Pt - De-serilize a Revit parameter string into a geometric point., Springs.ToolkitMeshToMesh - Attempts to convert a toolkit mesh to a Dynamo mesh. You obviously need to have the appropriate version of the mesh toolkit package downloaded first., Springs.ViewSet.ByViewsName - Creates a set of views(or sheets) for printing. If the set exists, set Overwrite to true to replace it., Springs.Watch+ - This node that serializes the input information and presents it in a resizable text window.",
            "engine_metadata": "",
            "engine_version": "1.2.1.3083",
            "created": "2017-01-30T07:15:50.135Z",
            "full_dependency_versions": [ "110.1.0" ],
            "full_dependency_ids": [
              {
                "_id": "56077cf3662bf0e9080001ea",
                "name": "spring nodes"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "110.1.0"
          },
          {
            "_id": "58a963bc61de68010800009e",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-prod/f8e0a3cf-96cd-4a7f-a375-890cd041b566gregPkg299.zip",
            "contents": "Springs.AdaptiveFamily.ByFacetedGeometry - Genearate a new eight point adaptive component family type from any solid or polysurface consisting of planar faces. Faces with openigs are not supported., Springs.AreaPlan.ByLevelName - Creates an area plan at the designated levels. Each new view needs a name. An area scheme must first be activated before it can be used. To activate a scheme, place one view of that type in the project(you can then delete it).  If a view with the same scheme and name exists, you'll get a null instead., Springs.Beams.FixExtents - Detects all beams from the input list with broken extents(actual length - cut length <  margin) and attemts to correct them., Springs.BoundingBox.MidPoint - Fetches the mid point of the bounding box., Springs.BoundingBox.Scale - Scales the bounding box in three dimensions according to it's center., Springs.BrepShape.ByGeometry - Convert the input geometry to DirectShape element inside the Revit document.  Works only in Revit 2017 and later. Usies the more advanced BrepBuilder. It supports solids or surfaces, however periodic faces like spheres, cylinders and cones are not supported. Each created DS will have a unique type. Make sure that each input geometry has a unique name. You can either feed a single category and material for all geometries or a unique one for each geometry - the node's lacing is set to longest by default. The default category is Generic Model., Springs.ClosedCurve.Offset+ - Offsets a curve both ways and correctly differenciates the external and internal offset. If an offset goes beyond the curve's bounds, the result will fail and a null value will be appended instead. Also works for convex curves like arcs., Springs.Collector.CurrentSelection - Gets the currently selected elements. Connect a boolean switch to refresh the selection., Springs.Collector.ElementsInView - Selects all elements visible in the input view., Springs.Collector.ElementSketch - Get the actual sketch lines of a sketch based element (floor, ceiling, modified wall, etc.) . You can optionally fetch the matching model curves, however this might prove comptationally heavy on larger data sets., Springs.Collector.FamilyInstances - Collects placed family instance elements from the document that match the name. Partially mathing elements are collected as well. If no matches are found, a list of all isntance names will be output., Springs.Collector.FamilyTypes - Collects non-system family types that fully match or partially match the provided names. If no matches are found, a list of all type names will be output., Springs.Collector.FloorTypes - Collects Floor types by name., Springs.Collector.LinkedInstanceElements - Extract elements by category from the selected linked instances. The transform vector can be used to get the exact location of the elements in the local file, Springs.Collector.Revisions - Collects all revision clouds from a specific date., Springs.Collector.Sheets - Search for sheets by either their name or their number. Use a false boolean switch to search by number., Springs.Collector.Views - Search for views based on naming. You can choose to either include or exclude schedules. Use the sheet collector for sheets., Springs.Collector.WallTypes - Collects wall types by name., Springs.Color2Decimal - Converts a Dynamo colour its Revit equivalent  decimal value., Springs.Curve.Offset+ - Offsets a curve towards the specified point, Springs.CurveLoop.Simplify - Attempts to simplify an open or a closed curve loop by connecting straight separate line segments into a single line., Springs.Decimal2Color - Converts a revit colour decimal value to its Dynamo equivalent., Springs.Delaunay2D.ByPoints - Create a delaunay triangulation of a set of planar points. You can get the result as points or as lines., Springs.Dictionary.ByKeysValues - Dictionaries are an incredibly powerful tool for making associative sets between two equal length lists. The first list must be of unique strings (or numbers) and will be the key and the second list will be the matching values (it can be made up of geometry, elements, even other lists)\r\nThe search keys list will provide the corresponding value to the input key., Springs.DirectShape.ByGeometry - Convert the input geometry to DirectShape element inside the Revit document.  It supports solids or surfaces.It is based on an alternative process that uses a SAT import and can produce smooth surfaces. Each created DS will have a unique type. Make sure that each input geometry has a unique name. You can either feed a single category for all geometries or a unique category for each geometry - the node's lacing is set to longest by default., Springs.DirectShape.Transform - Transforms the typed DirectShape element from the identity coordinate system to the input coordinate system(s), in a manner similar to Dynamo's Geometry.Transform node., Springs.DirectShape.Translate - Copy the input DirectShape element with the help of a translation vector, similarly to the Geometry.Translate node. This method should prove more efficient than Element.Copy, Springs.Doc.ActiveView - Selects the current document's active view. Supports more view types than the built-in option.\r\nWill be depreciated once the bult in node works with all plan types., Springs.Doc.DeleteElements - Attempts to delete the input list of elements from the active Revit document.The node returns the number of successfully deleted elements and their Ids as a string. Carefully observe the deleted elements count. It may be greater than the input list because hosted elements or tags will be deleted as well. If an element in the list can not be deleted (for example last revision or last view), the whole list will fail to be deleted., Springs.Element.IsCut - Tests if the element is being cut by any void instances. If any cuts exist all cutting elements will be provided., Springs.Element.IsCutting - Tests if the input element (or elements) is a void cut and if it is cutting any elements. In such cases, the cut elements will be provided., Springs.Element.RemoveVoidCut - Removes the void cut between the input elements, if such exists., Springs.Element.SetLocation - Attempts to modify the location of the input element. This can effectively add as a move comand in Revit. Works for both line based and point based elements., Springs.Elements.GroupByDistance - You'll need two equal length lists of geometry objects and elements. Splits the list of elements into groups if the distance between the coresponding geometry is less than the provided margin., Springs.ElementsOfCategory - Same as the built in \"All Elements of Category\" but can act as a function object and does not get refreshed automatically., Springs.ElementType.Duplicate - Create duplicate element types. If the type exists, it will be appended instead., Springs.ErrorReport.Parse - Process a Revit error report (HTML file) and extract the error types, all affected elements and the total number of errors. If you are executing from a document different than the one the error report belongs to, be sure to set \"fetch_elements\" to false., Springs.FamilyInstance.ByFacePoints - Places instances on the input face oriented to the face's U tangent and the global Z axis., Springs.FamilyInstance.ByGeometry - You must provide a valid family template path that will be used for all input geometry objects. The project units(and not the templates) will be used to determine the size of the output geometry.\r\nThe provided category will be used only if the family template supports it. If not, the default template category will be used instead.\r\nLikewise, the family material(provided as a string) will be set only if a material with that name exists in the template. If not, the default material will be used instead (\"By Category\").\r\nFor void cuts, the material settings will be ignored.\r\nThe Subcategory name is an optional input. If you'd like to skip assigning a Subcategory to any new instance, simply use null.\r\nThe node expects a unique family name for each geometry object. The rest of the input lists will be processed as if the node lacing is set to longest., Springs.Feet2Fraction - Converts a decimal foot value to a fractional foot/inch string., Springs.File.Size - Checks the file size. Provide a file path as a string., Springs.Filter.ByCategoryName - Filters the input elements by their category name. You can input multiple category names., Springs.Filter.ByClassName - Filters a list of objects by the object's class name. Note that Dynamo elements belong to different classes than their Revit counterparts. Use the Object.Class node to check an object's class., Springs.Filter.BySelection - Check the items that you'd like to filter in.  Unchecked items will be sent to the out list. The optional names input will override the object representation., Springs.FloorOpening.ByCurves - Create hosted floor opeinngs through the input floors. The second input is a list of sub-lists of the boundary curves., Springs.Form.ByGeometry - Convert the input geometry to a Revit Form object. Forms can exist only in the family environment. You can convert complicated solids or surfaces directly into forms. A form can act as a void. Provide either one true boolean value to convert a form into a void. The node's lacing is set to longest by default., Springs.Fraction2Feet - Converts a fractioned feet /inch string value into a decimal foot value., Springs.Geometry.Extents - Gets the dimensions of the geometry's bounding box., Springs.Geometry.GroupByDistance - Splits the list of geometry elements into groups if the distance between them is less than the provided margin., Springs.Geometry.SplitRecursively - Splits a surface or a solid recursively, using the resulting reduced geometry for every consecutive split. Select a point or another geometry to control the direction of the split., Springs.HostedInstance.ByPoints - Creates hosted family instances(doors/windows) at the specified points. You can feed either a single family type or a unique type for each instance., Springs.InterferenceCheck.Parse - Process a Revit interference check (HTML file) and extract the interference categories, all affected elements and the total number of clashes. If you are executing from a document different than the one the error report belongs to, be sure to set \"fetch_elements\" to false., Springs.Line.StraightenXY - Checks a line's end points for irregularities and corrects them if they are at or below the specified margin. The default margin is 1/5000 of the curve length, which is conservative., Springs.Line.StraightenZ - Checks a line's end points for irregularities in  the Z axis and corrects them if they are at or below the specified margin. The default margin is 1/2000 of the curve length, which is conservative., Springs.LineLoop.Merge - Attempts to join lines into a single chain of joined curves. The node returns the new lines as a chain and with the original order. The success outputs returns the success of the execution as a true/false boolean., Springs.List.DragDropReorder - Press and hold on an item to move it up or down the list. To confirm and close the window, select \"Save Order\". The optional names input will override the object representation., Springs.List.DropDown - Selects one list item by a drop-down combo box. The optional names input will override the object representation., Springs.List.DropFirstLast - Removes the first and last items from the list, Springs.List.EveryOther - Useful for when you want to combine an item on the list with every other item on the list. For example in list {1,2,3} , \"2\" will be paired up only with \"1\" and \"3\" and will not be paired up with itself., Springs.List.GetEvenOdd - Gets the even and odd indices from the list., Springs.List.MergeByBoolMask - Merge two lists by a boolean mask list. The true count in the mask should be the same as the length of the true list and vice versa for the false list., Springs.List.Randomise&Divide - Shiffles the input list and divides it into sub-lists based on ratios(1/4 + 1/2 + 1/4 will give you three lists split accordingly) The smalest ratio will always be 1 / the list length and the largest ratio will be 1. A seed input can shuffle the list further., Springs.List.Split - Splits a list at the desired length, Springs.List.Subpairs - Pair up each list item with the next one and drop the list item., Springs.Ln2Str - Serilize a geometry line to a string for use in Revit parameters, Springs.Math.AlmostEqual - Checks if a number is almost equal to a value with a specified tollerance., Springs.Mesh.ToPolySurface - Converts a Dynamo mesh to a polysurface. Uses multithreading - optimized for 4 cores., Springs.Mesh.ToToolkitMesh - Converts a Dynamo mesh to a toolkit mesh. You obviously need to have the appropriate version of the mesh toolkit package downloaded first., Springs.N-hedron.ByOriginVector - Creates a multi-sided poyhedron with defined side length and total height., Springs.NullAllIndicesOf - list all of the indices of a list that match the specified value. Capable of handling null values, part of the SmartCopyMonitor workflow., Springs.NullGetParameter - Similar to the built in node.Capable of handling null values, part of the SmartCopyMonitor workflow., Springs.NullIndexOf - Similar to the bult-in node but provides a null value instead of -1 of failure. Part of the SmartCopyMonitor workflow., Springs.NullReorder - Simiar to the built-in function with the difference that it can handle null indices. Part of the SmartCopyMonitor workflow., Springs.NullSetDifference - Similar to the built in node, with a built-in safety for null values. Part of the SmartCopyMonitor workflow., Springs.NullSetParameter - Similar to the built-in function but with the ability to handle null values. Part of the SmartCopyMon workflow., Springs.Number.ToString - Converts the input number(s) to string. Can process lists., Springs.PlanarFace.FixDomain - Corrects the surface domain of a 3 or 4 point planar face extracted from Revit., Springs.Point.PullOntoPlane - Pulls (projects) the point onto the input plane, following the plane normal., Springs.Points.ConvexHull2D - Computes the XY convex hull of a given set of points based on the monotone chain algorithm., Springs.Points.PruneDuplicates+ - An alternative to the built in node, that performs faster at the price of loosing the order of the points. All floating point valies are rounded to the nearest 4 decimal points. You can optionally remove duplicate Z values by setting \"keepDuplicateZ\" to false., Springs.PolyCurve.Chamfer - Symmetrically chamfers the corners of the polycurve by the designated distance, Springs.Polygon.2DArea - Returns the planar area of the input polygon(s)., Springs.Polygon.ContainmentTest+ - A less accurate method that should perform faster than the built-in node for large data sets., Springs.Pt2Str - Serilize a geometry point to a string for use in Revit parameters, Springs.SelectEdges - Select multiple edges from inside the Revit UI. Be sure to press \"Finish\" once done. You can use a Boolean toggle to refresh your selection., Springs.SelectElements(ordered) - Select multiple elements from the Revit document in the desired order. Hit ESC to stop picking. To refresh the node, connect a boolean switch node., Springs.SelectFaces+ - Select multiple faces from inside the Revit UI. Be sure to press \"Finish\" once done. Unlike the built-in node, face references of instances will be added sucessfully and you'l get the pick points. You can use a Boolean toggle to refresh your selection., Springs.SelectInRevit - Selects the input elements inside the Revit UI., Springs.SelectLinkedElement - Select the linked instance first, followed by the element. If your selection fails, just press escape.\r\nTo refresh the node, connect a boolean switch node., Springs.SelectLinkedElements(ordered) - Select the linked instance first. Then select multiple elements from the Revit document in the desired order. Hit ESC to stop picking. To refresh the node, connect a boolean switch node., Springs.SelectLinkedElements - Select the linked instance first, followed by the elements. To finish the selection, press Finish. If your selection fails, just press escape or Cancel.\r\nTo refresh the node, connect a boolean switch node., Springs.SelectLinkedFace - Select the linked instance first, followed by the face. If your selection fails, just press escape.\r\nTo refresh the node, connect a boolean switch node., Springs.Shaft.ByCurves - Creates a shaft opening. The top level MUST be higher than the base level for a successful execution. You can either provide one base and top level for all shafts or have unique levels for each shaft instance., Springs.Sheet.Views+ - Extracts all views and schedules (minus the revision schedule) placed on the input sheet (or sheets).\r\nWill be depreciated once the bult in node works with all plan types., Springs.Star.ByCenterRadiusRays - Fun little node to create star shapes., Springs.Str2Ln - De-serilize a Revit parameter string into a geometric line., Springs.Str2Pt - De-serilize a Revit parameter string into a geometric point., Springs.ToolkitMeshToMesh - Attempts to convert a toolkit mesh to a Dynamo mesh. You obviously need to have the appropriate version of the mesh toolkit package downloaded first., Springs.ViewSet.ByViewsName - Creates a set of views(or sheets) for printing. If the set exists, set Overwrite to true to replace it., Springs.Watch+ - This node that serializes the input information and presents it in a resizable text window.",
            "engine_metadata": "",
            "engine_version": "1.2.1.3083",
            "created": "2017-02-19T09:22:04.218Z",
            "full_dependency_versions": [ "110.2.0" ],
            "full_dependency_ids": [
              {
                "_id": "56077cf3662bf0e9080001ea",
                "name": "spring nodes"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "110.2.0"
          }
        ],
        "latest_version_update": "2017-02-19T09:22:04.218Z",
        "num_versions": 33,
        "comments": [ ],
        "num_comments": 0,
        "latest_comment": "1970-01-01T00:00:00.000Z",
        "votes": 10,
        "downloads": 19352,
        "repository_url": "https://github.com/dimven/SpringNodes",
        "site_url": "http://dynamonodes.com/2016/01/28/spring-nodes-node-index/",
        "banned": false,
        "deprecated": false,
        "group": "Springs",
        "engine": "dynamo",
        "license": "MIT",
        "used_by": [
          {
            "_id": "56446665662bf0e908000324",
            "name": "MEPWORKS"
          },
          {
            "_id": "555e8bfea8367b98610000b8",
            "name": "Bakery"
          },
          {
            "_id": "56c39085c3e9ee4a08000107",
            "name": "Atmos.ElementIsolateByHostLevel"
          },
          {
            "_id": "55916d4bf2ae5a9a070000f2",
            "name": "Atmos"
          },
          {
            "_id": "570e32c5287283f905000021",
            "name": "Revision Clouds on Sheets in Excel"
          },
          {
            "_id": "5745289ac1a604fb36000034",
            "name": "Roof Type Duplicate"
          },
          {
            "_id": "57d9f90df615e7725800004f",
            "name": "OpenStrc"
          },
          {
            "_id": "57dbd203882d868b4200000d",
            "name": "SYKES"
          },
          {
            "_id": "564dc5a3662bf0e90800035b",
            "name": "Landform"
          },
          {
            "_id": "5828c0155af9f3713d000057",
            "name": "FrTe"
          },
          {
            "_id": "582ed4885af9f3713d0000b6",
            "name": "BIMSYK"
          },
          {
            "_id": "5507ae3e0c7eac9b57000053",
            "name": "BVN"
          }
        ],
        "num_dependents": 12,
        "description": "Spring Nodes focuses on enhancing Dynamo's interaction with Revit and exploring any means that can help accelerate BIM work-flows. Your recommendations and ideas on how to improve things are always welcome. For more information and sample files, be sure to check out the repository:\r\nhttps://github.com/dimven/SpringNodes\r\ntwitter: @5devene\r\n\r\nPlease report any issues directly to the GitHub repository.\r\n",
        "maintainers": [
          {
            "_id": "5606ce80662bf0e9080001e5",
            "username": "dimitar.ven"
          }
        ],
        "keywords": [ "springs", "spring", "api", "revit", "design", "script", "bad", "monkey", "opening" ],
        "created": "2015-09-27T05:21:55.183Z"
      },
      {

        "_id": "546d1cf8b77c84600c000023",
        "__v": 32,
        "name": "Rhynamo",
        "white_list": false,
        "versions": [
          {
            "_id": "546d1cf8b77c84600c000024",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/75774c79-7ccb-40e9-9560-a5c4de74b761gregPkg292.zip",
            "contents": "",
            "engine_metadata": "",
            "engine_version": "0.7.4.3192",
            "created": "2014-11-19T22:43:04.776Z",
            "full_dependency_versions": [ "2014.11.19" ],
            "full_dependency_ids": [
              {
                "_id": "546d1cf8b77c84600c000023",
                "name": "Rhynamo"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2014.11.19"
          },
          {
            "_id": "5475149fb77c84600c00004d",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/1d90d3d6-337e-4fe3-8129-85f69167c806gregPkg366.zip",
            "contents": "",
            "engine_metadata": "",
            "engine_version": "0.7.4.3245",
            "created": "2014-11-25T23:45:35.619Z",
            "full_dependency_versions": [ "2014.11.25" ],
            "full_dependency_ids": [
              {
                "_id": "546d1cf8b77c84600c000023",
                "name": "Rhynamo"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2014.11.25"
          },
          {
            "_id": "547c8c5cb77c84600c000066",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/6fd750b0-f583-490a-88e2-701969e81ae1gregPkg761.zip",
            "contents": "",
            "engine_metadata": "",
            "engine_version": "0.7.4.3245",
            "created": "2014-12-01T15:42:20.264Z",
            "full_dependency_versions": [ "2014.12.1" ],
            "full_dependency_ids": [
              {
                "_id": "546d1cf8b77c84600c000023",
                "name": "Rhynamo"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2014.12.1"
          },
          {
            "_id": "5487937efa779c1c11000026",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/991283cc-e580-423d-a7cd-9160fd6bc046gregPkg229.zip",
            "contents": "",
            "engine_metadata": "",
            "engine_version": "0.7.4.3245",
            "created": "2014-12-10T00:27:42.714Z",
            "full_dependency_versions": [ "2014.12.9" ],
            "full_dependency_ids": [
              {
                "_id": "546d1cf8b77c84600c000023",
                "name": "Rhynamo"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2014.12.9"
          },
          {
            "_id": "54b6a523dcee4dfd2600005a",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/11d12008-6a7b-43e7-a00b-4a2de193a1b5gregPkg15.zip",
            "contents": "",
            "engine_metadata": "",
            "engine_version": "0.7.5.3566",
            "created": "2015-01-14T17:19:31.222Z",
            "full_dependency_versions": [ "2015.1.14" ],
            "full_dependency_ids": [
              {
                "_id": "546d1cf8b77c84600c000023",
                "name": "Rhynamo"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2015.1.14"
          },
          {
            "_id": "54cd5f37dcee4dfd260000aa",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/da588bd9-92b6-4a26-95ff-22f10180a3a3gregPkg624.zip",
            "contents": "",
            "engine_metadata": "",
            "engine_version": "0.7.5.3566",
            "created": "2015-01-31T23:03:19.293Z",
            "full_dependency_versions": [ "2015.1.31" ],
            "full_dependency_ids": [
              {
                "_id": "546d1cf8b77c84600c000023",
                "name": "Rhynamo"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2015.1.31"
          },
          {
            "_id": "54e2be94dcee4dfd260000f2",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/4d013e06-6cf0-4baa-92a3-91ac1a3a3ccagregPkg554.zip",
            "contents": "",
            "engine_metadata": "",
            "engine_version": "0.7.5.3566",
            "created": "2015-02-17T04:07:48.642Z",
            "full_dependency_versions": [ "2015.2.16" ],
            "full_dependency_ids": [
              {
                "_id": "546d1cf8b77c84600c000023",
                "name": "Rhynamo"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2015.2.16"
          },
          {
            "_id": "54f9babf0c7eac9b5700001e",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/4850484d-cbb9-428a-a8c9-c1b474fb641cgregPkg815.zip",
            "contents": "",
            "engine_metadata": "",
            "engine_version": "0.7.5.3566",
            "created": "2015-03-06T14:33:35.880Z",
            "full_dependency_versions": [ "2015.3.6" ],
            "full_dependency_ids": [
              {
                "_id": "546d1cf8b77c84600c000023",
                "name": "Rhynamo"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2015.3.6"
          },
          {
            "_id": "55d15acd662bf0e9080000ce",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/a652a87f-925b-496f-98d8-1c95c41a93f3gregPkg474.zip",
            "contents": "",
            "engine_metadata": "",
            "engine_version": "0.8.1.1942",
            "created": "2015-08-17T03:53:49.550Z",
            "full_dependency_versions": [ "2015.8.16" ],
            "full_dependency_ids": [
              {
                "_id": "546d1cf8b77c84600c000023",
                "name": "Rhynamo"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2015.8.16"
          },
          {
            "_id": "55d3e089662bf0e9080000e0",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/ac8884ca-2f60-48b0-8d85-57a5f1de4717gregPkg0.zip",
            "contents": "",
            "engine_metadata": "",
            "engine_version": "0.8.1.1942",
            "created": "2015-08-19T01:48:57.804Z",
            "full_dependency_versions": [ "2015.8.18" ],
            "full_dependency_ids": [
              {
                "_id": "546d1cf8b77c84600c000023",
                "name": "Rhynamo"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2015.8.18"
          },
          {
            "_id": "5602a79e662bf0e9080001cb",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/918f3abf-6c8a-460d-995a-e419522df1dagregPkg822.zip",
            "contents": "",
            "engine_metadata": "",
            "engine_version": "0.8.2.2392",
            "created": "2015-09-23T13:22:38.227Z",
            "full_dependency_versions": [ "2015.9.23" ],
            "full_dependency_ids": [
              {
                "_id": "546d1cf8b77c84600c000023",
                "name": "Rhynamo"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2015.9.23"
          },
          {
            "_id": "5602a881662bf0e9080001cc",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/ccf7d6c2-3fd4-41c1-ae46-a01280d87b73gregPkg409.zip",
            "contents": "",
            "engine_metadata": "",
            "engine_version": "0.8.2.2392",
            "created": "2015-09-23T13:26:25.612Z",
            "full_dependency_versions": [ "2015.9.231" ],
            "full_dependency_ids": [
              {
                "_id": "546d1cf8b77c84600c000023",
                "name": "Rhynamo"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2015.9.231"
          },
          {
            "_id": "564ea14a662bf0e908000364",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/d3f060f8-8f56-4288-b74e-f4d2e38d8335gregPkg224.zip",
            "contents": "",
            "engine_metadata": "",
            "engine_version": "0.9.1.3067",
            "created": "2015-11-20T04:27:54.865Z",
            "full_dependency_versions": [ "2015.11.19" ],
            "full_dependency_ids": [
              {
                "_id": "546d1cf8b77c84600c000023",
                "name": "Rhynamo"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2015.11.19"
          },
          {
            "_id": "564eab9a662bf0e908000365",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/1ac2151f-76de-44ca-b84b-174df221e817gregPkg306.zip",
            "contents": "",
            "engine_metadata": "",
            "engine_version": "0.9.1.3067",
            "created": "2015-11-20T05:11:54.872Z",
            "full_dependency_versions": [ "2015.11.191" ],
            "full_dependency_ids": [
              {
                "_id": "546d1cf8b77c84600c000023",
                "name": "Rhynamo"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2015.11.191"
          },
          {
            "_id": "57291726384037b37e000004",
            "contains_binaries": true,
            "node_libraries": [ "Rhynamo, Version=2016.5.1.0, Culture=neutral, PublicKeyToken=null" ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-prod/d0d27f36-c84e-446e-a25f-01695c0337f7gregPkg629.zip",
            "contents": "",
            "engine_metadata": "",
            "engine_version": "1.0.0.1180",
            "created": "2016-05-03T21:24:54.907Z",
            "full_dependency_versions": [ "2016.5.3" ],
            "full_dependency_ids": [
              {
                "_id": "546d1cf8b77c84600c000023",
                "name": "Rhynamo"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2016.5.3"
          },
          {
            "_id": "581aa5ce28c433b358000006",
            "contains_binaries": true,
            "node_libraries": [ "Rhynamo, Version=2016.11.2.0, Culture=neutral, PublicKeyToken=null" ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-prod/c9d0ee31-831c-443e-ac92-59accb4eeb2agregPkg383.zip",
            "contents": "",
            "engine_metadata": "",
            "engine_version": "1.2.0.2690",
            "created": "2016-11-03T02:49:50.842Z",
            "full_dependency_versions": [ "2016.11.2" ],
            "full_dependency_ids": [
              {
                "_id": "546d1cf8b77c84600c000023",
                "name": "Rhynamo"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2016.11.2"
          }
        ],
        "latest_version_update": "2016-11-03T02:49:50.842Z",
        "num_versions": 16,
        "comments": [ ],
        "num_comments": 0,
        "latest_comment": "1970-01-01T00:00:00.000Z",
        "votes": -28,
        "downloads": 16216,
        "repository_url": "https://bitbucket.org/archinate/rhynamo",
        "site_url": "http://provingground.io/tools/rhynamo/",
        "banned": false,
        "deprecated": false,
        "group": "Proving Ground",
        "engine": "dynamo",
        "license": "MIT",
        "used_by": [
          {
            "_id": "5507ae3e0c7eac9b57000053",
            "name": "BVN"
          }
        ],
        "num_dependents": 1,
        "description": "Rhynamo is an open source Dynamo (1.2) node library  for reading and writing Rhino 3DM files.  Rhynamo uses McNeel's OpenNURBS library to expose new nodes for translating Rhino geometry for use within Dynamo. In addition, several experimental nodes are provided that allow for 'Live' access to the Rhino command line.  Rhynamo is an experimental tool provided under the MIT open source license.",
        "maintainers": [
          {
            "_id": "5234d9ab6b18e47916000007",
            "username": "archinate"
          }
        ],
        "keywords": [ "interoperability", "rhino", "rhynamo", "nurbs", "grasshopper", "case" ],
        "created": "2014-11-19T22:43:04.776Z"
      },
      {

        "_id": "54e7add1dcee4dfd26000101",
        "__v": 252,
        "name": "Rhythm",
        "white_list": false,
        "versions": [
          {
            "_id": "54e7add1dcee4dfd26000102",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/ddfa7e5c-bc6b-40c0-b9de-04d97a47fb92gregPkg215.zip",
            "contents": "Get Character at String's Index - Returns the character at a given index, Get Element's Room - This node takes the input of all elements of category and reports back the associated room per element. Currently tested with casework, furniture and plumbing fixtures., GetParameterValueByNameAsString - Returns paramter value as string. Same effect as lunchbox node, without python., Override Cut Lineweight - Overrides the cut lines of the elements, Override Projection Lineweight - Overrides the line thickness of projection lines, RemoveListFromList - This node essentially \"subtracts\" the contents of List B from List A to produce a new list with the unique items., SquareFeetDropper - This node drops square feet from the pulled area",
            "engine_metadata": "",
            "engine_version": "0.7.5.3566",
            "created": "2015-02-20T21:57:37.119Z",
            "full_dependency_versions": [ "2015.2.20" ],
            "full_dependency_ids": [
              {
                "_id": "54e7add1dcee4dfd26000101",
                "name": "Rhythm"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2015.2.20"
          },
          {
            "_id": "54eb6a3edcee4dfd2600010d",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/d48df6d0-7766-4981-b309-f4444e15688agregPkg470.zip",
            "contents": "Get Character at String's Index - Returns the character at a given index, Get Element's Room - This node takes the input of all elements of category and reports back the associated room per element. Currently tested with casework, furniture and plumbing fixtures., GetParameterValueByNameAsString - Returns paramter value as string. Same effect as lunchbox node, without python., Override Cut Lineweight - Overrides the cut lines of the elements, Override Projection Lineweight - Overrides the line thickness of projection lines, RemoveListFromList - This node essentially \"subtracts\" the contents of List B from List A to produce a new list with the unique items., SquareFeetDropper - This node drops square feet from the pulled area, Category.ByName - This node adds the OST_ prefix to your input categories. Very simple, but sometimes it's the little things that matter. Currently works for categories that require the OST prefix. (Rooms,Casework, etc..)",
            "engine_metadata": "",
            "engine_version": "0.7.5.3566",
            "created": "2015-02-23T17:58:22.374Z",
            "full_dependency_versions": [ "2015.2.23" ],
            "full_dependency_ids": [
              {
                "_id": "54e7add1dcee4dfd26000101",
                "name": "Rhythm"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2015.2.23"
          },
          {
            "_id": "54f4ee990c7eac9b57000006",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/472606c1-b4a5-405c-b5bf-37432b3491d7gregPkg447.zip",
            "contents": "Get Character at String's Index - Returns the character at a given index, Get Element's Room - This node takes the input of all elements of category and reports back the associated room per element. Currently tested with casework, furniture and plumbing fixtures., GetParameterValueByNameAsString - Returns paramter value as string. Same effect as lunchbox node, without python., Override Cut Lineweight - Overrides the cut lines of the elements, Override Projection Lineweight - Overrides the line thickness of projection lines, RemoveListFromList - This node essentially \"subtracts\" the contents of List B from List A to produce a new list with the unique items., SquareFeetDropper - This node drops square feet from the pulled area, TextElement.ToLower - This node converts a Revit text elemnt to upper directly., TextElement.ToTitle - This node converts a Revit text elemnt to upper directly., TextElement.ToUpper - This node converts a Revit text elemnt to upper directly.",
            "engine_metadata": "",
            "engine_version": "0.7.5.3566",
            "created": "2015-03-02T23:13:29.974Z",
            "full_dependency_versions": [ "2015.3.2" ],
            "full_dependency_ids": [
              {
                "_id": "54e7add1dcee4dfd26000101",
                "name": "Rhythm"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2015.3.2"
          },
          {
            "_id": "54ff53c20c7eac9b57000035",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/f99ae6e8-b4a2-4f96-b2c1-ddf546c94db8gregPkg780.zip",
            "contents": "Get Character at String's Index - Returns the character at a given index, Get Element's Room - This node takes the input of all elements of category and reports back the associated room per element. Currently tested with casework, furniture and plumbing fixtures., GetParameterValueByNameAsString - Returns paramter value as string. Same effect as lunchbox node, without python., Override Cut Lineweight - Overrides the cut lines of the elements, Override Projection Lineweight - Overrides the line thickness of projection lines, RemoveListFromList - This node essentially \"subtracts\" the contents of List B from List A to produce a new list with the unique items., SquareFeetDropper - This node drops square feet from the pulled area, TextElement.ToLower - This node converts a Revit text elemnt to upper directly., TextElement.ToTitle - This node converts a Revit text elemnt to upper directly., TextElement.ToUpper - This node converts a Revit text elemnt to upper directly., List.GetItemIndices - This node searches the input list for the given string or number., Override Projection Line Color - This node overrides the projection line color with the input color value. Useful for annotation.",
            "engine_metadata": "",
            "engine_version": "0.7.5.3566",
            "created": "2015-03-10T20:27:46.577Z",
            "full_dependency_versions": [ "2015.3.10" ],
            "full_dependency_ids": [
              {
                "_id": "54e7add1dcee4dfd26000101",
                "name": "Rhythm"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2015.3.10"
          },
          {
            "_id": "55156a6f5899bb3705000010",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/22af50f7-0209-4877-a896-f219a0b26206gregPkg413.zip",
            "contents": "Get Character at String's Index - Returns the character at a given index, Get Element's Room - This node takes the input of all elements of category and reports back the associated room per element. Currently tested with casework, furniture and plumbing fixtures., GetParameterValueByNameAsString - Returns paramter value as string. Same effect as lunchbox node, without python., List.GetItemIndices - This node searches the input list for the given string or number., Override Cut Lineweight - Overrides the cut lines of the elements, Override Projection Line Color - This node overrides the projection line color with the input color value. Useful for annotation., Override Projection Lineweight - Overrides the line thickness of projection lines, RemoveListFromList - This node essentially \"subtracts\" the contents of List B from List A to produce a new list with the unique items., SquareFeetDropper - This node drops square feet from the pulled area, TextElement.ToLower - This node converts a Revit text elemnt to upper directly., TextElement.ToTitle - This node converts a Revit text elemnt to upper directly., TextElement.ToUpper - This node converts a Revit text elemnt to upper directly., Get All Keynote Tags - This collects all of the keynote tags in the model. Similar to other nodes, but this doesn't use python., Get All TextNoteTypes - This simply selects all text note types in document., LRE - Start of left-to-right embedding Unicode Character, LRM - Left-to-right mark unicode character, RLE - Start of right-to-left embedding Unicode Character, RLM - Right-to-left mark Unicode character, ZWJ - Zero width joiner Unicode Character, ZWNJ - Zero width non-joiner Unicode Character",
            "engine_metadata": "",
            "engine_version": "0.7.5.3566",
            "created": "2015-03-27T14:34:23.930Z",
            "full_dependency_versions": [ "2015.3.27" ],
            "full_dependency_ids": [
              {
                "_id": "54e7add1dcee4dfd26000101",
                "name": "Rhythm"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2015.3.27"
          },
          {
            "_id": "551c4ae55899bb3705000036",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/688af18d-7484-433e-8034-b5f047cb0fd0gregPkg664.zip",
            "contents": "Get All Keynote Tags - This collects all of the keynote tags in the model. Similar to other nodes, but this doesn't use python., Get All TextNoteTypes - This simply selects all text note types in document., Get Character at String's Index - Returns the character at a given index, Get Element's Room - This node takes the input of all elements of category and reports back the associated room per element. Currently tested with casework, furniture and plumbing fixtures., GetParameterValueByNameAsString - Returns paramter value as string. Same effect as lunchbox node, without python., List.GetItemIndices - This node searches the input list for the given string or number., LRE - Start of left-to-right embedding Unicode Character, LRM - Left-to-right mark unicode character, Override Cut Lineweight - Overrides the cut lines of the elements, Override Projection Line Color - This node overrides the projection line color with the input color value. Useful for annotation., Override Projection Lineweight - Overrides the line thickness of projection lines, RemoveListFromList - This node essentially \"subtracts\" the contents of List B from List A to produce a new list with the unique items., RLE - Start of right-to-left embedding Unicode Character, RLM - Right-to-left mark Unicode character, SquareFeetDropper - This node drops square feet from the pulled area, TextElement.ToLower - This node converts a Revit text elemnt to upper directly., TextElement.ToTitle - This node converts a Revit text elemnt to upper directly., TextElement.ToUpper - This node converts a Revit text elemnt to upper directly., ZWJ - Zero width joiner Unicode Character, ZWNJ - Zero width non-joiner Unicode Character, String.FlipReverse - This node flips the string and reverses it. (April Fools '15) Works for 0.8.0 only, added unicode support",
            "engine_metadata": "",
            "engine_version": "0.7.5.3566",
            "created": "2015-04-01T19:45:41.350Z",
            "full_dependency_versions": [ "2015.4.1" ],
            "full_dependency_ids": [
              {
                "_id": "54e7add1dcee4dfd26000101",
                "name": "Rhythm"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2015.4.1"
          },
          {
            "_id": "5522f8865899bb3705000046",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/4da268fe-97ce-4a34-bce8-2e6a36d0e766gregPkg892.zip",
            "contents": "Get All Keynote Tags - This collects all of the keynote tags in the model. Similar to other nodes, but this doesn't use python., Get All TextNoteTypes - This simply selects all text note types in document., Get Character at String's Index - Returns the character at a given index, Get Element's Room - This node takes the input of all elements of category and reports back the associated room per element. Currently tested with casework, furniture and plumbing fixtures., GetParameterValueByNameAsString - Returns paramter value as string. Same effect as lunchbox node, without python., List.GetItemIndices - This node searches the input list for the given string or number., LRE - Start of left-to-right embedding Unicode Character, LRM - Left-to-right mark unicode character, Override Cut Lineweight - Overrides the cut lines of the elements, Override Projection Line Color - This node overrides the projection line color with the input color value. Useful for annotation., Override Projection Lineweight - Overrides the line thickness of projection lines, RemoveListFromList - This node essentially \"subtracts\" the contents of List B from List A to produce a new list with the unique items., RLE - Start of right-to-left embedding Unicode Character, RLM - Right-to-left mark Unicode character, SquareFeetDropper - This node drops square feet from the pulled area, String.FlipReverse - This node flips the string and reverses it. (April Fools '15) Works for 0.8.0 only, added unicode support, TextElement.ToLower - This node converts a Revit text elemnt to upper directly., TextElement.ToTitle - This node converts a Revit text elemnt to upper directly., TextElement.ToUpper - This node converts a Revit text elemnt to upper directly., ZWJ - Zero width joiner Unicode Character, ZWNJ - Zero width non-joiner Unicode Character, All Upper - This converts the ase of selected items to UPPER. Inputs require booleans to enable for category., Arrowhead Assigner - This node assings the arrowhead type for all text and keynote tags. There is an input for ones you want to exclude., Dash Remover - This node removes the dash at index 2 if it exists. The reason being, NCS states that no dash shall be used.",
            "engine_metadata": "",
            "engine_version": "0.7.5.3566",
            "created": "2015-04-06T21:20:06.037Z",
            "full_dependency_versions": [ "2015.4.6" ],
            "full_dependency_ids": [
              {
                "_id": "54e7add1dcee4dfd26000101",
                "name": "Rhythm"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2015.4.6"
          },
          {
            "_id": "55259a655899bb3705000051",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/e0d7dcdb-dcd5-4963-8433-eda11c4932bdgregPkg667.zip",
            "contents": "All Upper - This converts the ase of selected items to UPPER. Inputs require booleans to enable for category., Arrowhead Assigner - This node assings the arrowhead type for all text and keynote tags. There is an input for ones you want to exclude., Dash Remover - This node removes the dash at index 2 if it exists. The reason being, NCS states that no dash shall be used., Get All Keynote Tags - This collects all of the keynote tags in the model. Similar to other nodes, but this doesn't use python., Get All TextNoteTypes - This simply selects all text note types in document., Get Character at String's Index - Returns the character at a given index, Get Element's Room - This node takes the input of all elements of category and reports back the associated room per element. Currently tested with casework, furniture and plumbing fixtures., GetParameterValueByNameAsString - Returns paramter value as string. Same effect as lunchbox node, without python., List.GetItemIndices - This node searches the input list for the given string or number., LRE - Start of left-to-right embedding Unicode Character, LRM - Left-to-right mark unicode character, Override Cut Lineweight - Overrides the cut lines of the elements, Override Projection Line Color - This node overrides the projection line color with the input color value. Useful for annotation., Override Projection Lineweight - Overrides the line thickness of projection lines, RemoveListFromList - This node essentially \"subtracts\" the contents of List B from List A to produce a new list with the unique items., RLE - Start of right-to-left embedding Unicode Character, RLM - Right-to-left mark Unicode character, SquareFeetDropper - This node drops square feet from the pulled area, String.FlipReverse - This node flips the string and reverses it. (April Fools '15) Works for 0.8.0 only, added unicode support, TextElement.ToLower - This node converts a Revit text elemnt to upper directly., TextElement.ToTitle - This node converts a Revit text elemnt to upper directly., TextElement.ToUpper - This node converts a Revit text elemnt to upper directly., ZWJ - Zero width joiner Unicode Character, ZWNJ - Zero width non-joiner Unicode Character, Parametric Graphic Scale - This node automates the graphic scale assigned per viewport. The input required is all instances of viewport category. It also requires shared parameters. Visit sixtysecondrevit.blogspot.com for details.",
            "engine_metadata": "",
            "engine_version": "0.7.5.3566",
            "created": "2015-04-08T21:15:17.876Z",
            "full_dependency_versions": [ "2015.4.8" ],
            "full_dependency_ids": [
              {
                "_id": "54e7add1dcee4dfd26000101",
                "name": "Rhythm"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2015.4.8"
          },
          {
            "_id": "5537b5f9a8367b9861000022",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/c6744f52-e229-43eb-b0fd-0c28d0666d14gregPkg113.zip",
            "contents": "All Upper - This converts the ase of selected items to UPPER. Inputs require booleans to enable for category., Arrowhead Assigner - This node assings the arrowhead type for all text and keynote tags. There is an input for ones you want to exclude., Dash Remover - This node removes the dash at index 2 if it exists. The reason being, NCS states that no dash shall be used., Get All Keynote Tags - This collects all of the keynote tags in the model. Similar to other nodes, but this doesn't use python., Get All TextNoteTypes - This simply selects all text note types in document., Get Character at String's Index - Returns the character at a given index, Get Element's Room - This node takes the input of all elements of category and reports back the associated room per element. Currently tested with casework, furniture and plumbing fixtures., GetParameterValueByNameAsString - Returns paramter value as string. Same effect as lunchbox node, without python., List.GetItemIndices - This node searches the input list for the given string or number., LRE - Start of left-to-right embedding Unicode Character, LRM - Left-to-right mark unicode character, Override Cut Lineweight - Overrides the cut lines of the elements, Override Projection Line Color - This node overrides the projection line color with the input color value. Useful for annotation., Override Projection Lineweight - Overrides the line thickness of projection lines, Parametric Graphic Scale - This node automates the graphic scale assigned per viewport. The input required is all instances of viewport category. It also requires shared parameters. Visit sixtysecondrevit.blogspot.com for details., RemoveListFromList - This node essentially \"subtracts\" the contents of List B from List A to produce a new list with the unique items., RLE - Start of right-to-left embedding Unicode Character, RLM - Right-to-left mark Unicode character, SquareFeetDropper - This node drops square feet from the pulled area, String.FlipReverse - This node flips the string and reverses it. (April Fools '15) Works for 0.8.0 only, added unicode support, TextElement.ToLower - This node converts a Revit text elemnt to upper directly., TextElement.ToTitle - This node converts a Revit text elemnt to upper directly., TextElement.ToUpper - This node converts a Revit text elemnt to upper directly., ZWJ - Zero width joiner Unicode Character, ZWNJ - Zero width non-joiner Unicode Character, All Framing at Reference Level - Collects all of the structural framing at a specific reference level, String.CharacterAtIndex - Get's the character at a given index",
            "engine_metadata": "",
            "engine_version": "0.8.0.950",
            "created": "2015-04-22T14:53:45.704Z",
            "full_dependency_versions": [ "2015.4.22" ],
            "full_dependency_ids": [
              {
                "_id": "54e7add1dcee4dfd26000101",
                "name": "Rhythm"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2015.4.22"
          },
          {
            "_id": "554a45c4a8367b9861000072",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/b677d41f-95e3-41b6-8aaa-e577604b8988gregPkg662.zip",
            "contents": "All Framing at Reference Level - Collects all of the structural framing at a specific reference level, All Upper - This converts the ase of selected items to UPPER. Inputs require booleans to enable for category., Arrowhead Assigner - This node assings the arrowhead type for all text and keynote tags. There is an input for ones you want to exclude., Dash Remover - This node removes the dash at index 2 if it exists. The reason being, NCS states that no dash shall be used., Get All Keynote Tags - This collects all of the keynote tags in the model. Similar to other nodes, but this doesn't use python., Get All TextNoteTypes - This simply selects all text note types in document., Get Element's Room - This node takes the input of all elements of category and reports back the associated room per element. Currently tested with casework, furniture and plumbing fixtures., GetParameterValueByNameAsString - Returns paramter value as string. Same effect as lunchbox node, without python., List.GetItemIndices - This node searches the input list for the given string or number., LRE - Start of left-to-right embedding Unicode Character, LRM - Left-to-right mark unicode character, Override Cut Lineweight - Overrides the cut lines of the elements, Override Projection Line Color - This node overrides the projection line color with the input color value. Useful for annotation., Override Projection Lineweight - Overrides the line thickness of projection lines, Parametric Graphic Scale - This node automates the graphic scale assigned per viewport. The input required is all instances of viewport category. It also requires shared parameters. Visit sixtysecondrevit.blogspot.com for details., RemoveListFromList - This node essentially \"subtracts\" the contents of List B from List A to produce a new list with the unique items., RLE - Start of right-to-left embedding Unicode Character, RLM - Right-to-left mark Unicode character, SquareFeetDropper - This node drops square feet from the pulled area, String.CharacterAtIndex - Get's the character at a given index, String.FlipReverse - This node flips the string and reverses it. (April Fools '15) Works for 0.8.0 only, added unicode support, TextElement.ToLower - This node converts a Revit text elemnt to upper directly., TextElement.ToTitle - This node converts a Revit text elemnt to upper directly., TextElement.ToUpper - This node converts a Revit text elemnt to upper directly., ZWJ - Zero width joiner Unicode Character, ZWNJ - Zero width non-joiner Unicode Character, String.RemovePriorToCharacter - This will remove all characters prior to the input character. Accepts strings.",
            "engine_metadata": "",
            "engine_version": "0.8.0.950",
            "created": "2015-05-06T16:48:04.002Z",
            "full_dependency_versions": [ "2015.5.6" ],
            "full_dependency_ids": [
              {
                "_id": "54e7add1dcee4dfd26000101",
                "name": "Rhythm"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2015.5.6"
          },
          {
            "_id": "554b8a5ba8367b986100007a",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/8b636ed1-5917-4cfa-bf7b-f138791a6d6bgregPkg517.zip",
            "contents": "String.RemoveAfterGivenCharacter - This will move all characters at and after the given character., All Framing at Reference Level - Collects all of the structural framing at a specific reference level, All Upper - This converts the ase of selected items to UPPER. Inputs require booleans to enable for category., Arrowhead Assigner - This node assings the arrowhead type for all text and keynote tags. There is an input for ones you want to exclude., Dash Remover - This node removes the dash at index 2 if it exists. The reason being, NCS states that no dash shall be used., Get All Keynote Tags - This collects all of the keynote tags in the model. Similar to other nodes, but this doesn't use python., Get All TextNoteTypes - This simply selects all text note types in document., Get Element's Room - This node takes the input of all elements of category and reports back the associated room per element. Currently tested with casework, furniture and plumbing fixtures., GetParameterValueByNameAsString - Returns paramter value as string. Same effect as lunchbox node, without python., List.GetItemIndices - This node searches the input list for the given string or number., LRE - Start of left-to-right embedding Unicode Character, LRM - Left-to-right mark unicode character, Override Cut Lineweight - Overrides the cut lines of the elements, Override Projection Line Color - This node overrides the projection line color with the input color value. Useful for annotation., Override Projection Lineweight - Overrides the line thickness of projection lines, Parametric Graphic Scale - This node automates the graphic scale assigned per viewport. The input required is all instances of viewport category. It also requires shared parameters. Visit sixtysecondrevit.blogspot.com for details., RemoveListFromList - This node essentially \"subtracts\" the contents of List B from List A to produce a new list with the unique items., RLE - Start of right-to-left embedding Unicode Character, RLM - Right-to-left mark Unicode character, SquareFeetDropper - This node drops square feet from the pulled area, String.CharacterAtIndex - Get's the character at a given index, String.FlipReverse - This node flips the string and reverses it. (April Fools '15) Works for 0.8.0 only, added unicode support, String.RemovePriorToCharacter - This will remove all characters prior to the input character. Accepts strings., TextElement.ToLower - This node converts a Revit text elemnt to upper directly., TextElement.ToTitle - This node converts a Revit text elemnt to upper directly., TextElement.ToUpper - This node converts a Revit text elemnt to upper directly., ZWJ - Zero width joiner Unicode Character, ZWNJ - Zero width non-joiner Unicode Character, Element.GetLevelNameAsString - This retrieves the level name of the input elements as a string. This is in response to a known issue with the get value node., Element.GetMultipleParameterValuesByName - Get the value of multiple parameters from elements. (Seperate parameters with comma), List.MergeSublists - This will merge all sublists with or without a character between the strings.",
            "engine_metadata": "",
            "engine_version": "0.8.0.950",
            "created": "2015-05-07T15:52:59.635Z",
            "full_dependency_versions": [ "2015.5.7" ],
            "full_dependency_ids": [
              {
                "_id": "54e7add1dcee4dfd26000101",
                "name": "Rhythm"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2015.5.7"
          },
          {
            "_id": "5553585ca8367b986100009c",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/71cc57c3-f67f-40a6-a6ba-9ea027bba090gregPkg271.zip",
            "contents": "All Framing at Reference Level - Collects all of the structural framing at a specific reference level, All Upper - This converts the ase of selected items to UPPER. Inputs require booleans to enable for category., Arrowhead Assigner - This node assings the arrowhead type for all text and keynote tags. There is an input for ones you want to exclude., Dash Remover - This node removes the dash at index 2 if it exists. The reason being, NCS states that no dash shall be used., Element.GetLevelNameAsString - This retrieves the level name of the input elements as a string. This is in response to a known issue with the get value node., Element.GetMultipleParameterValuesByName - Get the value of multiple parameters from elements. (Seperate parameters with comma), Get All Keynote Tags - This collects all of the keynote tags in the model. Similar to other nodes, but this doesn't use python., Get All TextNoteTypes - This simply selects all text note types in document., Get Element's Room - This node takes the input of all elements of category and reports back the associated room per element. Currently tested with casework, furniture and plumbing fixtures., GetParameterValueByNameAsString - Returns paramter value as string. Same effect as lunchbox node, without python., List.GetItemIndices - This node searches the input list for the given string or number., List.MergeSublists - This will merge all sublists with or without a character between the strings., LRE - Start of left-to-right embedding Unicode Character, LRM - Left-to-right mark unicode character, Override Cut Lineweight - Overrides the cut lines of the elements, Override Projection Line Color - This node overrides the projection line color with the input color value. Useful for annotation., Override Projection Lineweight - Overrides the line thickness of projection lines, Parametric Graphic Scale - This node automates the graphic scale assigned per viewport. The input required is all instances of viewport category. It also requires shared parameters. Visit sixtysecondrevit.blogspot.com for details., RemoveListFromList - This node essentially \"subtracts\" the contents of List B from List A to produce a new list with the unique items., RLE - Start of right-to-left embedding Unicode Character, RLM - Right-to-left mark Unicode character, SquareFeetDropper - This node drops square feet from the pulled area, String.CharacterAtIndex - Get's the character at a given index, String.FlipReverse - This node flips the string and reverses it. (April Fools '15) Works for 0.8.0 only, added unicode support, String.RemoveAfterGivenCharacter - This will move all characters at and after the given character., String.RemovePriorToCharacter - This will remove all characters prior to the input character. Accepts strings., TextElement.ToLower - This node converts a Revit text elemnt to upper directly., TextElement.ToTitle - This node converts a Revit text elemnt to upper directly., TextElement.ToUpper - This node converts a Revit text elemnt to upper directly., ZWJ - Zero width joiner Unicode Character, ZWNJ - Zero width non-joiner Unicode Character, Level Element Collector - This collects data for all of the Level elements in the model. Similar to the node on Lunchbox, but this one uses all O.O.B. nodes.",
            "engine_metadata": "",
            "engine_version": "0.8.0.950",
            "created": "2015-05-13T13:57:48.569Z",
            "full_dependency_versions": [ "2015.5.13" ],
            "full_dependency_ids": [
              {
                "_id": "54e7add1dcee4dfd26000101",
                "name": "Rhythm"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2015.5.13"
          },
          {
            "_id": "55536619a8367b986100009d",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/56fbf9ef-c50a-45b4-b5f4-cd663d7d36b8gregPkg262.zip",
            "contents": "All Framing at Reference Level - Collects all of the structural framing at a specific reference level, All Upper - This converts the ase of selected items to UPPER. Inputs require booleans to enable for category., Arrowhead Assigner - This node assings the arrowhead type for all text and keynote tags. There is an input for ones you want to exclude., Dash Remover - This node removes the dash at index 2 if it exists. The reason being, NCS states that no dash shall be used., Element.GetLevelNameAsString - This retrieves the level name of the input elements as a string. This is in response to a known issue with the get value node., Element.GetMultipleParameterValuesByName - Get the value of multiple parameters from elements. (Seperate parameters with comma), Get All Keynote Tags - This collects all of the keynote tags in the model. Similar to other nodes, but this doesn't use python., Get All TextNoteTypes - This simply selects all text note types in document., Get Element's Room - This node takes the input of all elements of category and reports back the associated room per element. Currently tested with casework, furniture and plumbing fixtures., GetParameterValueByNameAsString - Returns paramter value as string. Same effect as lunchbox node, without python., Level Element Collector - This collects data for all of the Level elements in the model. Similar to the node on Lunchbox, but this one uses all O.O.B. nodes., List.GetItemIndices - This node searches the input list for the given string or number., List.MergeSublists - This will merge all sublists with or without a character between the strings., LRE - Start of left-to-right embedding Unicode Character, LRM - Left-to-right mark unicode character, Override Cut Lineweight - Overrides the cut lines of the elements, Override Projection Line Color - This node overrides the projection line color with the input color value. Useful for annotation., Override Projection Lineweight - Overrides the line thickness of projection lines, Parametric Graphic Scale - This node automates the graphic scale assigned per viewport. The input required is all instances of viewport category. It also requires shared parameters. Visit sixtysecondrevit.blogspot.com for details., RemoveListFromList - This node essentially \"subtracts\" the contents of List B from List A to produce a new list with the unique items., RLE - Start of right-to-left embedding Unicode Character, RLM - Right-to-left mark Unicode character, SquareFeetDropper - This node drops square feet from the pulled area, String.CharacterAtIndex - Get's the character at a given index, String.FlipReverse - This node flips the string and reverses it. (April Fools '15) Works for 0.8.0 only, added unicode support, String.RemoveAfterGivenCharacter - This will move all characters at and after the given character., String.RemovePriorToCharacter - This will remove all characters prior to the input character. Accepts strings., TextElement.ToLower - This node converts a Revit text elemnt to upper directly., TextElement.ToTitle - This node converts a Revit text elemnt to upper directly., TextElement.ToUpper - This node converts a Revit text elemnt to upper directly., ZWJ - Zero width joiner Unicode Character, ZWNJ - Zero width non-joiner Unicode Character, Room Element Collector - THis will collect data regarding rooms in the active model. Similar to Lunchbox node, but this one does not use python.",
            "engine_metadata": "",
            "engine_version": "0.8.0.950",
            "created": "2015-05-13T14:56:25.704Z",
            "full_dependency_versions": [ "2015.5.14" ],
            "full_dependency_ids": [
              {
                "_id": "54e7add1dcee4dfd26000101",
                "name": "Rhythm"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2015.5.14"
          },
          {
            "_id": "556642a9a8367b98610000dd",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/6bb4618a-bc40-472b-b1eb-f77c2c5031b3gregPkg505.zip",
            "contents": "All Framing at Reference Level - Collects all of the structural framing at a specific reference level, All Upper - This converts the ase of selected items to UPPER. Inputs require booleans to enable for category., Arrowhead Assigner - This node assings the arrowhead type for all text and keynote tags. There is an input for ones you want to exclude., Dash Remover - This node removes the dash at index 2 if it exists. The reason being, NCS states that no dash shall be used., Element.GetLevelNameAsString - This retrieves the level name of the input elements as a string. This is in response to a known issue with the get value node., Element.GetMultipleParameterValuesByName - Get the value of multiple parameters from elements. (Seperate parameters with comma), Get All Keynote Tags - This collects all of the keynote tags in the model. Similar to other nodes, but this doesn't use python., Get All TextNoteTypes - This simply selects all text note types in document., Get Element's Room - This node takes the input of all elements of category and reports back the associated room per element. Currently tested with casework, furniture and plumbing fixtures., GetParameterValueByNameAsString - Returns paramter value as string. Same effect as lunchbox node, without python., Level Element Collector - This collects data for all of the Level elements in the model. Similar to the node on Lunchbox, but this one uses all O.O.B. nodes., List.GetItemIndices - This node searches the input list for the given string or number., List.MergeSublists - This will merge all sublists with or without a character between the strings., LRE - Start of left-to-right embedding Unicode Character, LRM - Left-to-right mark unicode character, Override Cut Lineweight - Overrides the cut lines of the elements, Override Projection Line Color - This node overrides the projection line color with the input color value. Useful for annotation., Override Projection Lineweight - Overrides the line thickness of projection lines, Parametric Graphic Scale - This node automates the graphic scale assigned per viewport. The input required is all instances of viewport category. It also requires shared parameters. Visit sixtysecondrevit.blogspot.com for details., RemoveListFromList - This node essentially \"subtracts\" the contents of List B from List A to produce a new list with the unique items., RLE - Start of right-to-left embedding Unicode Character, RLM - Right-to-left mark Unicode character, Room Element Collector - THis will collect data regarding rooms in the active model. Similar to Lunchbox node, but this one does not use python., SquareFeetDropper - This node drops square feet from the pulled area, String.CharacterAtIndex - Get's the character at a given index, String.FlipReverse - This node flips the string and reverses it. (April Fools '15) Works for 0.8.0 only, added unicode support, String.RemoveAfterGivenCharacter - This will move all characters at and after the given character., String.RemovePriorToCharacter - This will remove all characters prior to the input character. Accepts strings., TextElement.ToLower - This node converts a Revit text elemnt to upper directly., TextElement.ToTitle - This node converts a Revit text elemnt to upper directly., TextElement.ToUpper - This node converts a Revit text elemnt to upper directly., ZWJ - Zero width joiner Unicode Character, ZWNJ - Zero width non-joiner Unicode Character, Element.FilterByNameContains - This node filters a list of elements based on the search term., List.RemoveNulls - Removes null values and reports indices., Get All Tag Types - This node collects the tag types in the model., Wall.NorthSouthEastWest - This node determines which direction a wall is facing and groups them by the direction or direction they are closest to., Element.AreaWithTotal - This will get the area of an element if the parameter exists. Will total as well if needed.",
            "engine_metadata": "",
            "engine_version": "0.8.0.950",
            "created": "2015-05-27T22:18:17.113Z",
            "full_dependency_versions": [ "2015.5.27" ],
            "full_dependency_ids": [
              {
                "_id": "54e7add1dcee4dfd26000101",
                "name": "Rhythm"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2015.5.27"
          },
          {
            "_id": "556643caa8367b98610000de",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/d7b01d9f-f7fa-4936-ac4e-559bb073a4c0gregPkg895.zip",
            "contents": "All Framing at Reference Level - Collects all of the structural framing at a specific reference level, All Upper - This converts the ase of selected items to UPPER. Inputs require booleans to enable for category., Arrowhead Assigner - This node assings the arrowhead type for all text and keynote tags. There is an input for ones you want to exclude., Dash Remover - This node removes the dash at index 2 if it exists. The reason being, NCS states that no dash shall be used., Element.AreaWithTotal - This will get the area of an element if the parameter exists. Will total as well if needed., Element.FilterByName - FIlters list of elements by given name. (String), Element.FilterByNameContains - This node filters a list of elements based on the search term., Element.GetLevelNameAsString - This retrieves the level name of the input elements as a string. This is in response to a known issue with the get value node., Element.GetMultipleParameterValuesByName - Get the value of multiple parameters from elements. (Seperate parameters with comma), Get All Keynote Tags - This collects all of the keynote tags in the model. Similar to other nodes, but this doesn't use python., Get All Tag Types - This node collects the tag types in the model., Get All TextNoteTypes - This simply selects all text note types in document., Get Element's Room - This node takes the input of all elements of category and reports back the associated room per element. Currently tested with casework, furniture and plumbing fixtures., GetParameterValueByNameAsString - Returns paramter value as string. Same effect as lunchbox node, without python., Level Element Collector - This collects data for all of the Level elements in the model. Similar to the node on Lunchbox, but this one uses all O.O.B. nodes., List.GetItemIndices - This node searches the input list for the given string or number., List.MergeSublists - This will merge all sublists with or without a character between the strings., List.RemoveNulls - Removes null values and reports indices., LRE - Start of left-to-right embedding Unicode Character, LRM - Left-to-right mark unicode character, Override Cut Lineweight - Overrides the cut lines of the elements, Override Projection Line Color - This node overrides the projection line color with the input color value. Useful for annotation., Override Projection Lineweight - Overrides the line thickness of projection lines, Parametric Graphic Scale - This node automates the graphic scale assigned per viewport. The input required is all instances of viewport category. It also requires shared parameters. Visit sixtysecondrevit.blogspot.com for details., RemoveListFromList - This node essentially \"subtracts\" the contents of List B from List A to produce a new list with the unique items., RLE - Start of right-to-left embedding Unicode Character, RLM - Right-to-left mark Unicode character, Room Element Collector - THis will collect data regarding rooms in the active model. Similar to Lunchbox node, but this one does not use python., SquareFeetDropper - This node drops square feet from the pulled area, String.CharacterAtIndex - Get's the character at a given index, String.FlipReverse - This node flips the string and reverses it. (April Fools '15) Works for 0.8.0 only, added unicode support, String.RemoveAfterGivenCharacter - This will move all characters at and after the given character., String.RemovePriorToCharacter - This will remove all characters prior to the input character. Accepts strings., TextElement.ToLower - This node converts Revit text element to lower directly., TextElement.ToTitle - This node converst Revit text elements to title case directly., TextElement.ToUpper - This node converts a Revit text elemnt to upper directly., Wall.NorthSouthEastWest - This node determines which direction a wall is facing and groups them by the direction or direction they are closest to., ZWJ - Zero width joiner Unicode Character, ZWNJ - Zero width non-joiner Unicode Character",
            "engine_metadata": "",
            "engine_version": "0.8.0.950",
            "created": "2015-05-27T22:23:06.235Z",
            "full_dependency_versions": [ "2015.5.28" ],
            "full_dependency_ids": [
              {
                "_id": "54e7add1dcee4dfd26000101",
                "name": "Rhythm"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2015.5.28"
          },
          {
            "_id": "556749b2a8367b98610000e4",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/1fc8a5ec-6f6e-41f1-8f80-bc0ebf981730gregPkg870.zip",
            "contents": "All Framing at Reference Level - Collects all of the structural framing at a specific reference level, All Upper - This converts the ase of selected items to UPPER. Inputs require booleans to enable for category., Arrowhead Assigner - This node assings the arrowhead type for all text and keynote tags. There is an input for ones you want to exclude., Dash Remover - This node removes the dash at index 2 if it exists. The reason being, NCS states that no dash shall be used., Element.AreaWithTotal - This will get the area of an element if the parameter exists. Will total as well if needed., Element.FilterByName - FIlters list of elements by given name. (String), Element.FilterByNameContains - This node filters a list of elements based on the search term., Element.GetLevelNameAsString - This retrieves the level name of the input elements as a string. This is in response to a known issue with the get value node., Element.GetMultipleParameterValuesByName - Get the value of multiple parameters from elements. (Seperate parameters with comma), Get All Keynote Tags - This collects all of the keynote tags in the model. Similar to other nodes, but this doesn't use python., Get All Tag Types - This node collects the tag types in the model., Get All TextNoteTypes - This simply selects all text note types in document., Get Element's Room - This node takes the input of all elements of category and reports back the associated room per element. Currently tested with casework, furniture and plumbing fixtures., GetParameterValueByNameAsString - Returns paramter value as string. Same effect as lunchbox node, without python., Level Element Collector - This collects data for all of the Level elements in the model. Similar to the node on Lunchbox, but this one uses all O.O.B. nodes., List.GetItemIndices - This node searches the input list for the given string or number., List.MergeSublists - This will merge all sublists with or without a character between the strings., List.RemoveNulls - Removes null values and reports indices., LRE - Start of left-to-right embedding Unicode Character, LRM - Left-to-right mark unicode character, Override Cut Lineweight - Overrides the cut lines of the elements, Override Projection Line Color - This node overrides the projection line color with the input color value. Useful for annotation., Override Projection Lineweight - Overrides the line thickness of projection lines, Parametric Graphic Scale - This node automates the graphic scale assigned per viewport. The input required is all instances of viewport category. It also requires shared parameters. Visit sixtysecondrevit.blogspot.com for details., RemoveListFromList - This node essentially \"subtracts\" the contents of List B from List A to produce a new list with the unique items., RLE - Start of right-to-left embedding Unicode Character, RLM - Right-to-left mark Unicode character, Room Element Collector - THis will collect data regarding rooms in the active model. Similar to Lunchbox node, but this one does not use python., SquareFeetDropper - This node drops square feet from the pulled area, String.CharacterAtIndex - Get's the character at a given index, String.FlipReverse - This node flips the string and reverses it. (April Fools '15) Works for 0.8.0 only, added unicode support, String.RemoveAfterGivenCharacter - This will move all characters at and after the given character., String.RemovePriorToCharacter - This will remove all characters prior to the input character. Accepts strings., TextElement.ToLower - This node converts Revit text element to lower directly., TextElement.ToTitle - This node converst Revit text elements to title case directly., TextElement.ToUpper - This node converts a Revit text elemnt to upper directly., Wall.NorthSouthEastWest - This node determines which direction a wall is facing and groups them by the direction or direction they are closest to., ZWJ - Zero width joiner Unicode Character, ZWNJ - Zero width non-joiner Unicode Character",
            "engine_metadata": "",
            "engine_version": "0.8.0.950",
            "created": "2015-05-28T17:00:34.732Z",
            "full_dependency_versions": [ "2015.5.29" ],
            "full_dependency_ids": [
              {
                "_id": "54e7add1dcee4dfd26000101",
                "name": "Rhythm"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2015.5.29"
          },
          {
            "_id": "5577536df2ae5a9a07000049",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/cd61c0be-7ce4-48a4-89cd-5a07786c6edcgregPkg385.zip",
            "contents": "All Framing at Reference Level - Collects all of the structural framing at a specific reference level, All Upper - This converts the ase of selected items to UPPER. Inputs require booleans to enable for category., Arrowhead Assigner - This node assings the arrowhead type for all text and keynote tags. There is an input for ones you want to exclude., Dash Remover - This node removes the dash at index 2 if it exists. The reason being, NCS states that no dash shall be used., Element.GetLevelNameAsString - This retrieves the level name of the input elements as a string. This is in response to a known issue with the get value node., Element.GetMultipleParameterValuesByName - Get the value of multiple parameters from elements. (Seperate parameters with comma), Get All Keynote Tags - This collects all of the keynote tags in the model. Similar to other nodes, but this doesn't use python., Get All TextNoteTypes - This simply selects all text note types in document., Get Character at String's Index - Returns the character at a given index, Get Element's Room - This node takes the input of all elements of category and reports back the associated room per element. Currently tested with casework, furniture and plumbing fixtures., GetParameterValueByNameAsString - Returns paramter value as string. Same effect as lunchbox node, without python., Level Element Collector - This collects data for all of the Level elements in the model. Similar to the node on Lunchbox, but this one uses all O.O.B. nodes., List.GetItemIndices - This node searches the input list for the given string or number., List.MergeSublists - This will merge all sublists with or without a character between the strings., LRE - Start of left-to-right embedding Unicode Character, LRM - Left-to-right mark unicode character, Override Cut Lineweight - Overrides the cut lines of the elements, Override Projection Line Color - This node overrides the projection line color with the input color value. Useful for annotation., Override Projection Lineweight - Overrides the line thickness of projection lines, Parametric Graphic Scale - This node automates the graphic scale assigned per viewport. The input required is all instances of viewport category. It also requires shared parameters. Visit sixtysecondrevit.blogspot.com for details., RemoveListFromList - This node essentially \"subtracts\" the contents of List B from List A to produce a new list with the unique items., RLE - Start of right-to-left embedding Unicode Character, RLM - Right-to-left mark Unicode character, Room Element Collector - THis will collect data regarding rooms in the active model. Similar to Lunchbox node, but this one does not use python., SquareFeetDropper - This node drops square feet from the pulled area, String.CharacterAtIndex - Get's the character at a given index, String.FlipReverse - This node flips the string and reverses it. (April Fools '15) Works for 0.8.0 only, added unicode support, String.RemoveAfterGivenCharacter - This will move all characters at and after the given character., String.RemovePriorToCharacter - This will remove all characters prior to the input character. Accepts strings., TextElement.ToLower - This node converts a Revit text elemnt to upper directly., TextElement.ToTitle - This node converts a Revit text elemnt to upper directly., TextElement.ToUpper - This node converts a Revit text elemnt to upper directly., ZWJ - Zero width joiner Unicode Character, ZWNJ - Zero width non-joiner Unicode Character, List.Contains - Determines if the given list contains the item or items., Element.Type - This retrieves the element type of the given elements. (if available) Similar to others available but no python here.",
            "engine_metadata": "",
            "engine_version": "0.8.0.950",
            "created": "2015-06-09T20:58:21.062Z",
            "full_dependency_versions": [ "2015.6.9" ],
            "full_dependency_ids": [
              {
                "_id": "54e7add1dcee4dfd26000101",
                "name": "Rhythm"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2015.6.9"
          },
          {
            "_id": "55776047f2ae5a9a0700004a",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/cc6f0b29-cde7-469f-919b-bc6ed0da0711gregPkg156.zip",
            "contents": "All Framing at Reference Level - Collects all of the structural framing at a specific reference level, All Upper - This converts the ase of selected items to UPPER. Inputs require booleans to enable for category., Arrowhead Assigner - This node assings the arrowhead type for all text and keynote tags. There is an input for ones you want to exclude., Dash Remover - This node removes the dash at index 2 if it exists. The reason being, NCS states that no dash shall be used., Element.GetLevelNameAsString - This retrieves the level name of the input elements as a string. This is in response to a known issue with the get value node., Element.GetMultipleParameterValuesByName - Get the value of multiple parameters from elements. (Seperate parameters with comma), Element.Type - This retrieves the element type of the given elements. (if available) Similar to others available but no python here., Get All Keynote Tags - This collects all of the keynote tags in the model. Similar to other nodes, but this doesn't use python., Get All TextNoteTypes - This simply selects all text note types in document., Get Character at String's Index - Returns the character at a given index, Get Element's Room - This node takes the input of all elements of category and reports back the associated room per element. Currently tested with casework, furniture and plumbing fixtures., GetParameterValueByNameAsString - Returns paramter value as string. Same effect as lunchbox node, without python., Level Element Collector - This collects data for all of the Level elements in the model. Similar to the node on Lunchbox, but this one uses all O.O.B. nodes., List.Contains - Determines if the given list contains the item or items., List.GetItemIndices - This node searches the input list for the given string or number., List.MergeSublists - This will merge all sublists with or without a character between the strings., LRE - Start of left-to-right embedding Unicode Character, LRM - Left-to-right mark unicode character, Override Cut Lineweight - Overrides the cut lines of the elements, Override Projection Line Color - This node overrides the projection line color with the input color value. Useful for annotation., Override Projection Lineweight - Overrides the line thickness of projection lines, Parametric Graphic Scale - This node automates the graphic scale assigned per viewport. The input required is all instances of viewport category. It also requires shared parameters. Visit sixtysecondrevit.blogspot.com for details., RemoveListFromList - This node essentially \"subtracts\" the contents of List B from List A to produce a new list with the unique items., RLE - Start of right-to-left embedding Unicode Character, RLM - Right-to-left mark Unicode character, Room Element Collector - THis will collect data regarding rooms in the active model. Similar to Lunchbox node, but this one does not use python., SquareFeetDropper - This node drops square feet from the pulled area, String.CharacterAtIndex - Get's the character at a given index, String.FlipReverse - This node flips the string and reverses it. (April Fools '15) Works for 0.8.0 only, added unicode support, String.RemoveAfterGivenCharacter - This will move all characters at and after the given character., String.RemovePriorToCharacter - This will remove all characters prior to the input character. Accepts strings., TextElement.ToLower - This node converts a Revit text elemnt to upper directly., TextElement.ToTitle - This node converts a Revit text elemnt to upper directly., TextElement.ToUpper - This node converts a Revit text elemnt to upper directly., ZWJ - Zero width joiner Unicode Character, ZWNJ - Zero width non-joiner Unicode Character, SetParameterByName(TypeOrInstance) - Set one of the element's parameters regardless of parameter type or instance.",
            "engine_metadata": "",
            "engine_version": "0.8.0.950",
            "created": "2015-06-09T21:53:11.661Z",
            "full_dependency_versions": [ "2015.6.10" ],
            "full_dependency_ids": [
              {
                "_id": "54e7add1dcee4dfd26000101",
                "name": "Rhythm"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2015.6.10"
          },
          {
            "_id": "55804961f2ae5a9a070000a7",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/a6fdb70d-a4ef-4866-927d-09f463685e54gregPkg290.zip",
            "contents": "All Framing at Reference Level - Collects all of the structural framing at a specific reference level, All Upper - This converts the ase of selected items to UPPER. Inputs require booleans to enable for category., Arrowhead Assigner - This node assings the arrowhead type for all text and keynote tags. There is an input for ones you want to exclude., Dash Remover - This node removes the dash at index 2 if it exists. The reason being, NCS states that no dash shall be used., Element.AreaWithTotal - This will get the area of an element if the parameter exists. Will total as well if needed., Element.GetLevelNameAsString - This retrieves the level name of the input elements as a string. This is in response to a known issue with the get value node., Element.GetMultipleParameterValuesByName - Get the value of multiple parameters from elements. (Seperate parameters with comma), Element.Type - This retrieves the element type of the given elements. (if available) Similar to others available but no python here., Get All Keynote Tags - This collects all of the keynote tags in the model. Similar to other nodes, but this doesn't use python., Get All TextNoteTypes - This simply selects all text note types in document., Get Element's Room - This node takes the input of all elements of category and reports back the associated room per element. Currently tested with casework, furniture and plumbing fixtures., GetParameterValueByNameAsString - Returns paramter value as string. Same effect as lunchbox node, without python., Level Element Collector - This collects data for all of the Level elements in the model. Similar to the node on Lunchbox, but this one uses all O.O.B. nodes., List.Contains - Determines if the given list contains the item or items., List.GetItemIndices - This node searches the input list for the given string or number., List.MergeSublists - This will merge all sublists with or without a character between the strings., LRE - Start of left-to-right embedding Unicode Character, LRM - Left-to-right mark unicode character, Override Cut Lineweight - Overrides the cut lines of the elements, Override Projection Line Color - This node overrides the projection line color with the input color value. Useful for annotation., Override Projection Lineweight - Overrides the line thickness of projection lines, Parametric Graphic Scale - This node automates the graphic scale assigned per viewport. The input required is all instances of viewport category. It also requires shared parameters. Visit sixtysecondrevit.blogspot.com for details., RemoveListFromList - This node essentially \"subtracts\" the contents of List B from List A to produce a new list with the unique items., RLE - Start of right-to-left embedding Unicode Character, RLM - Right-to-left mark Unicode character, Room Element Collector - THis will collect data regarding rooms in the active model. Similar to Lunchbox node, but this one does not use python., SetParameterByName(TypeOrInstance) - Set one of the element's parameters regardless of parameter type or instance., SquareFeetDropper - This node drops square feet from the pulled area, String.CharacterAtIndex - Get's the character at a given index, String.FlipReverse - This node flips the string and reverses it. (April Fools '15) Works for 0.8.0 only, added unicode support, String.RemoveAfterGivenCharacter - This will move all characters at and after the given character., String.RemovePriorToCharacter - This will remove all characters prior to the input character. Accepts strings., TextElement.ToLower - This node converts a Revit text elemnt to upper directly., TextElement.ToTitle - This node converts a Revit text elemnt to upper directly., TextElement.ToUpper - This node converts a Revit text elemnt to upper directly., Wall.NorthSouthEastWest - This node determines which direction a wall is facing and groups them by the direction or direction they are closest to., ZWJ - Zero width joiner Unicode Character, ZWNJ - Zero width non-joiner Unicode Character",
            "engine_metadata": "",
            "engine_version": "0.8.0.950",
            "created": "2015-06-16T16:05:53.037Z",
            "full_dependency_versions": [ "2015.6.15" ],
            "full_dependency_ids": [
              {
                "_id": "54e7add1dcee4dfd26000101",
                "name": "Rhythm"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2015.6.15"
          },
          {
            "_id": "55807855f2ae5a9a070000ac",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/c13423f3-8011-453b-ba7d-e919fd7c4ea1gregPkg34.zip",
            "contents": "All Framing at Reference Level - Collects all of the structural framing at a specific reference level, All Upper - This converts the ase of selected items to UPPER. Inputs require booleans to enable for category., Arrowhead Assigner - This node assings the arrowhead type for all text and keynote tags. There is an input for ones you want to exclude., Dash Remover - This node removes the dash at index 2 if it exists. The reason being, NCS states that no dash shall be used., Element.AreaWithTotal - This will get the area of an element if the parameter exists. Will total as well if needed., Element.GetLevelNameAsString - This retrieves the level name of the input elements as a string. This is in response to a known issue with the get value node., Element.GetMultipleParameterValuesByName - Get the value of multiple parameters from elements. (Seperate parameters with comma), Element.Type - This retrieves the element type of the given elements. (if available) Similar to others available but no python here., Get All Keynote Tags - This collects all of the keynote tags in the model. Similar to other nodes, but this doesn't use python., Get All TextNoteTypes - This simply selects all text note types in document., Get Element's Room - This node takes the input of all elements of category and reports back the associated room per element. Currently tested with casework, furniture and plumbing fixtures., GetParameterValueByNameAsString - Returns paramter value as string. Same effect as lunchbox node, without python., Level Element Collector - This collects data for all of the Level elements in the model. Similar to the node on Lunchbox, but this one uses all O.O.B. nodes., List.Contains - Determines if the given list contains the item or items., List.GetItemIndices - This node searches the input list for the given string or number., List.MergeSublists - This will merge all sublists with or without a character between the strings., LRE - Start of left-to-right embedding Unicode Character, LRM - Left-to-right mark unicode character, Override Cut Lineweight - Overrides the cut lines of the elements, Override Projection Line Color - This node overrides the projection line color with the input color value. Useful for annotation., Override Projection Lineweight - Overrides the line thickness of projection lines, Parametric Graphic Scale - This node automates the graphic scale assigned per viewport. The input required is all instances of viewport category. It also requires shared parameters. Visit sixtysecondrevit.blogspot.com for details., RemoveListFromList - This node essentially \"subtracts\" the contents of List B from List A to produce a new list with the unique items., RLE - Start of right-to-left embedding Unicode Character, RLM - Right-to-left mark Unicode character, Room Element Collector - THis will collect data regarding rooms in the active model. Similar to Lunchbox node, but this one does not use python., SetParameterByName(TypeOrInstance) - Set one of the element's parameters regardless of parameter type or instance., SquareFeetDropper - This node drops square feet from the pulled area, String.CharacterAtIndex - Get's the character at a given index, String.FlipReverse - This node flips the string and reverses it. (April Fools '15) Works for 0.8.0 only, added unicode support, String.RemoveAfterGivenCharacter - This will move all characters at and after the given character., String.RemovePriorToCharacter - This will remove all characters prior to the input character. Accepts strings., TextElement.ToLower - This node converts a Revit text elemnt to upper directly., TextElement.ToTitle - This node converts a Revit text elemnt to upper directly., TextElement.ToUpper - This node converts a Revit text elemnt to upper directly., Wall.NorthSouthEastWest - This node determines which direction a wall is facing and groups them by the direction or direction they are closest to., ZWJ - Zero width joiner Unicode Character, ZWNJ - Zero width non-joiner Unicode Character, GetParameterValueByName(TypeOrInstance) - Gets a parameter value by name regardless of type or instance., Output.Clean - This will return a single value or list from one input., Workset.Create - Creates a workset or worksets from input names.",
            "engine_metadata": "",
            "engine_version": "0.8.0.950",
            "created": "2015-06-16T19:26:13.881Z",
            "full_dependency_versions": [ "2015.6.16" ],
            "full_dependency_ids": [
              {
                "_id": "54e7add1dcee4dfd26000101",
                "name": "Rhythm"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2015.6.16"
          },
          {
            "_id": "5582ea08f2ae5a9a070000b8",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/802486ea-9485-4729-a823-0328bcc16facgregPkg858.zip",
            "contents": "All Framing at Reference Level - Collects all of the structural framing at a specific reference level, All Upper - This converts the ase of selected items to UPPER. Inputs require booleans to enable for category., Arrowhead Assigner - This node assings the arrowhead type for all text and keynote tags. There is an input for ones you want to exclude., Dash Remover - This node removes the dash at index 2 if it exists. The reason being, NCS states that no dash shall be used., Element.AreaWithTotal - This will get the area of an element if the parameter exists. Will total as well if needed., Element.GetLevelNameAsString - This retrieves the level name of the input elements as a string. This is in response to a known issue with the get value node., Element.GetMultipleParameterValuesByName - Get the value of multiple parameters from elements. (Seperate parameters with comma), Element.Type - This retrieves the element type of the given elements. (if available) Similar to others available but no python here., Get All Keynote Tags - This collects all of the keynote tags in the model. Similar to other nodes, but this doesn't use python., Get All TextNoteTypes - This simply selects all text note types in document., Get Element's Room - This node takes the input of all elements of category and reports back the associated room per element. Currently tested with casework, furniture and plumbing fixtures., GetParameterValueByName(TypeOrInstance) - Gets a parameter value by name regardless of type or instance., GetParameterValueByNameAsString - Returns paramter value as string. Same effect as lunchbox node, without python., Level Element Collector - This collects data for all of the Level elements in the model. Similar to the node on Lunchbox, but this one uses all O.O.B. nodes., List.Contains - Determines if the given list contains the item or items., List.GetItemIndices - This node searches the input list for the given string or number., List.MergeSublists - This will merge all sublists with or without a character between the strings., LRE - Start of left-to-right embedding Unicode Character, LRM - Left-to-right mark unicode character, Output.Clean - This will return a single value or list from one input., Override Cut Lineweight - Overrides the cut lines of the elements, Override Projection Line Color - This node overrides the projection line color with the input color value. Useful for annotation., Override Projection Lineweight - Overrides the line thickness of projection lines, Parametric Graphic Scale - This node automates the graphic scale assigned per viewport. The input required is all instances of viewport category. It also requires shared parameters. Visit sixtysecondrevit.blogspot.com for details., RemoveListFromList - This node essentially \"subtracts\" the contents of List B from List A to produce a new list with the unique items., RLE - Start of right-to-left embedding Unicode Character, RLM - Right-to-left mark Unicode character, Room Element Collector - THis will collect data regarding rooms in the active model. Similar to Lunchbox node, but this one does not use python., SetParameterByName(TypeOrInstance) - Set one of the element's parameters regardless of parameter type or instance., SquareFeetDropper - This node drops square feet from the pulled area, String.CharacterAtIndex - Get's the character at a given index, String.FlipReverse - This node flips the string and reverses it. (April Fools '15) Works for 0.8.0 only, added unicode support, String.RemoveAfterGivenCharacter - This will move all characters at and after the given character., String.RemovePriorToCharacter - This will remove all characters prior to the input character. Accepts strings., TextElement.ToLower - This node converts a Revit text elemnt to upper directly., TextElement.ToTitle - This node converts a Revit text elemnt to upper directly., TextElement.ToUpper - This node converts a Revit text elemnt to upper directly., Wall.NorthSouthEastWest - This node determines which direction a wall is facing and groups them by the direction or direction they are closest to., Workset.Create - Creates a workset or worksets from input names., ZWJ - Zero width joiner Unicode Character, ZWNJ - Zero width non-joiner Unicode Character, Rhythm.Toggle - Toggle that offers two outputs. Created for Dynamo 0.8.1 because of changes to the \"IF\" node",
            "engine_metadata": "",
            "engine_version": "0.8.0.950",
            "created": "2015-06-18T15:55:52.325Z",
            "full_dependency_versions": [ "2015.6.17" ],
            "full_dependency_ids": [
              {
                "_id": "54e7add1dcee4dfd26000101",
                "name": "Rhythm"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2015.6.17"
          },
          {
            "_id": "558c2a9af2ae5a9a070000de",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/79ee743d-7cab-4bfc-b31a-eb691483d23agregPkg789.zip",
            "contents": "All Framing at Reference Level - Collects all of the structural framing at a specific reference level, All Upper - This converts the ase of selected items to UPPER. Inputs require booleans to enable for category., Arrowhead Assigner - This node assings the arrowhead type for all text and keynote tags. There is an input for ones you want to exclude., Get All Keynote Tags - This collects all of the keynote tags in the model. Similar to other nodes, but this doesn't use python., Dash Remover - This node removes the dash at index 2 if it exists. The reason being, NCS states that no dash shall be used., Element.AreaWithTotal - This will get the area of an element if the parameter exists. Will total as well if needed., Element.GetLevelNameAsString - This retrieves the level name of the input elements as a string. This is in response to a known issue with the get value node., Element.GetMultipleParameterValuesByName - Get the value of multiple parameters from elements. (Seperate parameters with comma), Get Element's Room - This node takes the input of all elements of category and reports back the associated room per element. Currently tested with casework, furniture and plumbing fixtures., Element.Type - This retrieves the element type of the given elements. (if available) Similar to others available but no python here., GetParameterValueByName(TypeOrInstance) - Gets a parameter value by name regardless of type or instance., GetParameterValueByNameAsString - Returns paramter value as string. Same effect as lunchbox node, without python., Level Element Collector - This collects data for all of the Level elements in the model. Similar to the node on Lunchbox, but this one uses all O.O.B. nodes., List.Contains - Determines if the given list contains the item or items., List.GetItemIndices - This node searches the input list for the given string or number., List.MergeSublists - This will merge all sublists with or without a character between the strings., LRE - Start of left-to-right embedding Unicode Character, LRM - Left-to-right mark unicode character, Output.Clean - This will return a single value or list from one input., Override Cut Lineweight - Overrides the cut lines of the elements, Override Projection Line Color - This node overrides the projection line color with the input color value. Useful for annotation., Override Projection Lineweight - Overrides the line thickness of projection lines, Parametric Graphic Scale - This node automates the graphic scale assigned per viewport. The input required is all instances of viewport category. It also requires shared parameters. Visit sixtysecondrevit.blogspot.com for details., RemoveListFromList - This node essentially \"subtracts\" the contents of List B from List A to produce a new list with the unique items., Rhythm.Toggle - Toggle that offers two outputs. Created for Dynamo 0.8.1 because of changes to the \"IF\" node, RLE - Start of right-to-left embedding Unicode Character, RLM - Right-to-left mark Unicode character, Room Element Collector - THis will collect data regarding rooms in the active model. Similar to Lunchbox node, but this one does not use python., SetParameterByName(TypeOrInstance) - Set one of the element's parameters regardless of parameter type or instance., SquareFeetDropper - This node drops square feet from the pulled area, String.CharacterAtIndex - Get's the character at a given index, String.FlipReverse - This node flips the string and reverses it. (April Fools '15) Works for 0.8.0 only, added unicode support, String.RemoveAfterGivenCharacter - This will move all characters at and after the given character., String.RemovePriorToCharacter - This will remove all characters prior to the input character. Accepts strings., TextElement.ToLower - This node converts a Revit text elemnt to upper directly., TextElement.ToTitle - This node converts a Revit text elemnt to upper directly., TextElement.ToUpper - This node converts a Revit text elemnt to upper directly., Wall.NorthSouthEastWest - This node determines which direction a wall is facing and groups them by the direction or direction they are closest to., Workset.Create - Creates a workset or worksets from input names., ZWJ - Zero width joiner Unicode Character, ZWNJ - Zero width non-joiner Unicode Character, Collector.LabelTypes - This node collects all of the label types for the active family document.",
            "engine_metadata": "",
            "engine_version": "0.8.0.950",
            "created": "2015-06-25T16:21:46.067Z",
            "full_dependency_versions": [ "2015.6.23" ],
            "full_dependency_ids": [
              {
                "_id": "54e7add1dcee4dfd26000101",
                "name": "Rhythm"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2015.6.23"
          },
          {
            "_id": "558c2d58f2ae5a9a070000df",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/5b3f4752-5873-44bb-921d-558e82d953dfgregPkg703.zip",
            "contents": "All Framing at Reference Level - Collects all of the structural framing at a specific reference level, All Upper - This converts the ase of selected items to UPPER. Inputs require booleans to enable for category., Arrowhead Assigner - This node assings the arrowhead type for all text and keynote tags. There is an input for ones you want to exclude., Collector.KeynoteTags - This collects all of the keynote tags in the model. Similar to other nodes, but this doesn't use python., Collector.LabelTypes - This node collects all of the label types for the active family document., Dash Remover - This node removes the dash at index 2 if it exists. The reason being, NCS states that no dash shall be used., Element.AreaWithTotal - This will get the area of an element if the parameter exists. Will total as well if needed., Element.GetLevelNameAsString - This retrieves the level name of the input elements as a string. This is in response to a known issue with the get value node., Element.GetMultipleParameterValuesByName - Get the value of multiple parameters from elements. (Seperate parameters with comma), Element.Room - This node takes the input of all elements of category and reports back the associated room per element. Currently tested with casework, furniture and plumbing fixtures., Element.Type - This retrieves the element type of the given elements. (if available) Similar to others available but no python here., GetParameterValueByName(TypeOrInstance) - Gets a parameter value by name regardless of type or instance., GetParameterValueByNameAsString - Returns paramter value as string. Same effect as lunchbox node, without python., Level Element Collector - This collects data for all of the Level elements in the model. Similar to the node on Lunchbox, but this one uses all O.O.B. nodes., List.Contains - Determines if the given list contains the item or items., List.GetItemIndices - This node searches the input list for the given string or number., List.MergeSublists - This will merge all sublists with or without a character between the strings., LRE - Start of left-to-right embedding Unicode Character, LRM - Left-to-right mark unicode character, Output.Clean - This will return a single value or list from one input., Override Cut Lineweight - Overrides the cut lines of the elements, Override Projection Line Color - This node overrides the projection line color with the input color value. Useful for annotation., Override Projection Lineweight - Overrides the line thickness of projection lines, Parametric Graphic Scale - This node automates the graphic scale assigned per viewport. The input required is all instances of viewport category. It also requires shared parameters. Visit sixtysecondrevit.blogspot.com for details., RemoveListFromList - This node essentially \"subtracts\" the contents of List B from List A to produce a new list with the unique items., Rhythm.Toggle - Toggle that offers two outputs. Created for Dynamo 0.8.1 because of changes to the \"IF\" node, RLE - Start of right-to-left embedding Unicode Character, RLM - Right-to-left mark Unicode character, Room Element Collector - THis will collect data regarding rooms in the active model. Similar to Lunchbox node, but this one does not use python., SetParameterByName(TypeOrInstance) - Set one of the element's parameters regardless of parameter type or instance., SquareFeetDropper - This node drops square feet from the pulled area, String.CharacterAtIndex - Get's the character at a given index, String.FlipReverse - This node flips the string and reverses it. (April Fools '15) Works for 0.8.0 only, added unicode support, String.RemoveAfterGivenCharacter - This will move all characters at and after the given character., String.RemovePriorToCharacter - This will remove all characters prior to the input character. Accepts strings., TextElement.ToLower - This node converts a Revit text elemnt to upper directly., TextElement.ToTitle - This node converts a Revit text elemnt to upper directly., TextElement.ToUpper - This node converts a Revit text elemnt to upper directly., Wall.NorthSouthEastWest - This node determines which direction a wall is facing and groups them by the direction or direction they are closest to., Workset.Create - Creates a workset or worksets from input names., ZWJ - Zero width joiner Unicode Character, ZWNJ - Zero width non-joiner Unicode Character",
            "engine_metadata": "",
            "engine_version": "0.8.0.950",
            "created": "2015-06-25T16:33:28.731Z",
            "full_dependency_versions": [ "2015.6.24" ],
            "full_dependency_ids": [
              {
                "_id": "54e7add1dcee4dfd26000101",
                "name": "Rhythm"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2015.6.24"
          },
          {
            "_id": "559fe151f2ae5a9a07000142",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/510b9e4c-b17a-43bb-9d11-58db28d6d142gregPkg367.zip",
            "contents": "All Framing at Reference Level - Collects all of the structural framing at a specific reference level, All Upper - This converts the ase of selected items to UPPER. Inputs require booleans to enable for category., Arrowhead Assigner - This node assings the arrowhead type for all text and keynote tags. There is an input for ones you want to exclude., Collector.KeynoteTags - This collects all of the keynote tags in the model. Similar to other nodes, but this doesn't use python., Collector.LabelTypes - This node collects all of the label types for the active family document., Dash Remover - This node removes the dash at index 2 if it exists. The reason being, NCS states that no dash shall be used., Element.AreaWithTotal - This will get the area of an element if the parameter exists. Will total as well if needed., Element.GetLevelNameAsString - This retrieves the level name of the input elements as a string. This is in response to a known issue with the get value node., Element.GetMultipleParameterValuesByName - Get the value of multiple parameters from elements. (Seperate parameters with comma), Element.Room - This node takes the input of all elements of category and reports back the associated room per element. Currently tested with casework, furniture and plumbing fixtures., Element.Type - This retrieves the element type of the given elements. (if available) Similar to others available but no python here., GetParameterValueByName(TypeOrInstance) - Gets a parameter value by name regardless of type or instance., GetParameterValueByNameAsString - Returns paramter value as string. Same effect as lunchbox node, without python., Level Element Collector - This collects data for all of the Level elements in the model. Similar to the node on Lunchbox, but this one uses all O.O.B. nodes., List.Contains - Determines if the given list contains the item or items., List.GetItemIndices - This node searches the input list for the given string or number., List.MergeSublists - This will merge all sublists with or without a character between the strings., LRE - Start of left-to-right embedding Unicode Character, LRM - Left-to-right mark unicode character, Output.Clean - This will return a single value or list from one input., Override Cut Lineweight - Overrides the cut lines of the elements, Override Projection Line Color - This node overrides the projection line color with the input color value. Useful for annotation., Override Projection Lineweight - Overrides the line thickness of projection lines, Parametric Graphic Scale - This node automates the graphic scale assigned per viewport. The input required is all instances of viewport category. It also requires shared parameters. Visit sixtysecondrevit.blogspot.com for details., RemoveListFromList - This node essentially \"subtracts\" the contents of List B from List A to produce a new list with the unique items., Rhythm.Toggle - Toggle that offers two outputs. Created for Dynamo 0.8.1 because of changes to the \"IF\" node, RLE - Start of right-to-left embedding Unicode Character, RLM - Right-to-left mark Unicode character, Room Element Collector - THis will collect data regarding rooms in the active model. Similar to Lunchbox node, but this one does not use python., SetParameterByName(TypeOrInstance) - Set one of the element's parameters regardless of parameter type or instance., SquareFeetDropper - This node drops square feet from the pulled area, String.CharacterAtIndex - Get's the character at a given index, String.FlipReverse - This node flips the string and reverses it. (April Fools '15) Works for 0.8.0 only, added unicode support, String.RemoveAfterGivenCharacter - This will move all characters at and after the given character., String.RemovePriorToCharacter - This will remove all characters prior to the input character. Accepts strings., TextElement.ToLower - This node converts a Revit text elemnt to upper directly., TextElement.ToTitle - This node converts a Revit text elemnt to upper directly., TextElement.ToUpper - This node converts a Revit text elemnt to upper directly., Wall.NorthSouthEastWest - This node determines which direction a wall is facing and groups them by the direction or direction they are closest to., Workset.Create - Creates a workset or worksets from input names., ZWJ - Zero width joiner Unicode Character, ZWNJ - Zero width non-joiner Unicode Character, List.AllIndicesOf - Given an item, returns the zero-based indices of all its occurrences in the list. If the item cannot be found, an empty list is returned. , String.IndicesOfCharacter - This node gets all the indices of a given character",
            "engine_metadata": "",
            "engine_version": "0.8.1.1823",
            "created": "2015-07-10T15:14:25.344Z",
            "full_dependency_versions": [ "2015.7.9" ],
            "full_dependency_ids": [
              {
                "_id": "54e7add1dcee4dfd26000101",
                "name": "Rhythm"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2015.7.9"
          },
          {
            "_id": "55a012cef2ae5a9a07000144",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/961bea7f-b087-4981-8acb-2cc980ba01dagregPkg261.zip",
            "contents": "All Framing at Reference Level - Collects all of the structural framing at a specific reference level, All Upper - This converts the ase of selected items to UPPER. Inputs require booleans to enable for category., Arrowhead Assigner - This node assings the arrowhead type for all text and keynote tags. There is an input for ones you want to exclude., Collector.KeynoteTags - This collects all of the keynote tags in the model. Similar to other nodes, but this doesn't use python., Collector.LabelTypes - This node collects all of the label types for the active family document., Dash Remover - This node removes the dash at index 2 if it exists. The reason being, NCS states that no dash shall be used., Element.AreaWithTotal - This will get the area of an element if the parameter exists. Will total as well if needed., Element.GetLevelNameAsString - This retrieves the level name of the input elements as a string. This is in response to a known issue with the get value node., Element.GetMultipleParameterValuesByName - Get the value of multiple parameters from elements. (Seperate parameters with comma), Element.Room - This node takes the input of all elements of category and reports back the associated room per element. Currently tested with casework, furniture and plumbing fixtures., Element.Type - This retrieves the element type of the given elements. (if available) Similar to others available but no python here., GetParameterValueByName(TypeOrInstance) - Gets a parameter value by name regardless of type or instance., GetParameterValueByNameAsString - Returns paramter value as string. Same effect as lunchbox node, without python., Level Element Collector - This collects data for all of the Level elements in the model. Similar to the node on Lunchbox, but this one uses all O.O.B. nodes., List.AllIndicesOf - Given an item, returns the zero-based indices of all its occurrences in the list. If the item cannot be found, an empty list is returned. , List.Contains - Determines if the given list contains the item or items., List.GetItemIndices - This node searches the input list for the given string or number., List.MergeSublists - This will merge all sublists with or without a character between the strings., LRE - Start of left-to-right embedding Unicode Character, LRM - Left-to-right mark unicode character, Output.Clean - This will return a single value or list from one input., Override Cut Lineweight - Overrides the cut lines of the elements, Override Projection Line Color - This node overrides the projection line color with the input color value. Useful for annotation., Override Projection Lineweight - Overrides the line thickness of projection lines, Parametric Graphic Scale - This node automates the graphic scale assigned per viewport. The input required is all instances of viewport category. It also requires shared parameters. Visit sixtysecondrevit.blogspot.com for details., RemoveListFromList - This node essentially \"subtracts\" the contents of List B from List A to produce a new list with the unique items., Rhythm.Toggle - Toggle that offers two outputs. Created for Dynamo 0.8.1 because of changes to the \"IF\" node, RLE - Start of right-to-left embedding Unicode Character, RLM - Right-to-left mark Unicode character, Room Element Collector - THis will collect data regarding rooms in the active model. Similar to Lunchbox node, but this one does not use python., SetParameterByName(TypeOrInstance) - Set one of the element's parameters regardless of parameter type or instance., SquareFeetDropper - This node drops square feet from the pulled area, String.CharacterAtIndex - Get's the character at a given index, String.FlipReverse - This node flips the string and reverses it. (April Fools '15) Works for 0.8.0 only, added unicode support, String.IndicesOfCharacter - This node gets all the indices of a given character, String.RemoveAfterGivenCharacter - This will move all characters at and after the given character., String.RemovePriorToCharacter - This will remove all characters prior to the input character. Accepts strings., TextElement.ToLower - This node converts a Revit text elemnt to upper directly., TextElement.ToTitle - This node converts a Revit text elemnt to upper directly., TextElement.ToUpper - This node converts a Revit text elemnt to upper directly., Wall.NorthSouthEastWest - This node determines which direction a wall is facing and groups them by the direction or direction they are closest to., Workset.Create - Creates a workset or worksets from input names., ZWJ - Zero width joiner Unicode Character, ZWNJ - Zero width non-joiner Unicode Character, Ayuda.IsArchi-LabInstalled - This node determines if Archi-Lab is installed. Useful with a toggle., Ayuda.IsClockworkInstalled - This node determines if clockwork is installed. Useful with a toggle., Ayuda.IsSteamNodesInstalled - This node determines if steamnodes is installed. Useful with a toggle.;, OS.CurrentUser - This node retrieves the current user logged in., OS.CurrentUserAppData - This retrieves the current user's appdata location",
            "engine_metadata": "",
            "engine_version": "0.8.1.1823",
            "created": "2015-07-10T18:45:34.790Z",
            "full_dependency_versions": [ "2015.7.10" ],
            "full_dependency_ids": [
              {
                "_id": "54e7add1dcee4dfd26000101",
                "name": "Rhythm"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2015.7.10"
          },
          {
            "_id": "55a3d251662bf0e908000007",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/f62460e0-1ad5-4f84-9225-a770e03973bagregPkg161.zip",
            "contents": "All Framing at Reference Level - Collects all of the structural framing at a specific reference level, All Upper - This converts the ase of selected items to UPPER. Inputs require booleans to enable for category., Arrowhead Assigner - This node assings the arrowhead type for all text and keynote tags. There is an input for ones you want to exclude., Ayuda.IsArchi-LabInstalled - This node determines if Archi-Lab is installed. Useful with a toggle., Ayuda.IsClockworkInstalled - This node determines if clockwork is installed. Useful with a toggle., Ayuda.IsSteamNodesInstalled - This node determines if steamnodes is installed. Useful with a toggle.;, Collector.KeynoteTags - This collects all of the keynote tags in the model. Similar to other nodes, but this doesn't use python., Collector.LabelTypes - This node collects all of the label types for the active family document., Dash Remover - This node removes the dash at index 2 if it exists. The reason being, NCS states that no dash shall be used., Element.AreaWithTotal - This will get the area of an element if the parameter exists. Will total as well if needed., Element.GetLevelNameAsString - This retrieves the level name of the input elements as a string. This is in response to a known issue with the get value node., Element.GetMultipleParameterValuesByName - Get the value of multiple parameters from elements. (Seperate parameters with comma), Element.Room - This node takes the input of all elements of category and reports back the associated room per element. Currently tested with casework, furniture and plumbing fixtures., Element.Type - This retrieves the element type of the given elements. (if available) Similar to others available but no python here., GetParameterValueByName(TypeOrInstance) - Gets a parameter value by name regardless of type or instance., GetParameterValueByNameAsString - Returns paramter value as string. Same effect as lunchbox node, without python., Level Element Collector - This collects data for all of the Level elements in the model. Similar to the node on Lunchbox, but this one uses all O.O.B. nodes., List.AllIndicesOf - Given an item, returns the zero-based indices of all its occurrences in the list. If the item cannot be found, an empty list is returned. , List.Contains - Determines if the given list contains the item or items., List.GetItemIndices - This node searches the input list for the given string or number., List.MergeSublists - This will merge all sublists with or without a character between the strings., LRE - Start of left-to-right embedding Unicode Character, LRM - Left-to-right mark unicode character, OS.CurrentUser - This node retrieves the current user logged in., OS.CurrentUserAppData - This retrieves the current user's appdata location, Output.Clean - This will return a single value or list from one input., Override Cut Lineweight - Overrides the cut lines of the elements, Override Projection Line Color - This node overrides the projection line color with the input color value. Useful for annotation., Override Projection Lineweight - Overrides the line thickness of projection lines, Parametric Graphic Scale - This node automates the graphic scale assigned per viewport. The input required is all instances of viewport category. It also requires shared parameters. Visit sixtysecondrevit.blogspot.com for details., RemoveListFromList - This node essentially \"subtracts\" the contents of List B from List A to produce a new list with the unique items., Rhythm.Toggle - Toggle that offers two outputs. Created for Dynamo 0.8.1 because of changes to the \"IF\" node, RLE - Start of right-to-left embedding Unicode Character, RLM - Right-to-left mark Unicode character, Room Element Collector - THis will collect data regarding rooms in the active model. Similar to Lunchbox node, but this one does not use python., SetParameterByName(TypeOrInstance) - Set one of the element's parameters regardless of parameter type or instance., SquareFeetDropper - This node drops square feet from the pulled area, String.CharacterAtIndex - Get's the character at a given index, String.FlipReverse - This node flips the string and reverses it. (April Fools '15) Works for 0.8.0 only, added unicode support, String.IndicesOfCharacter - This node gets all the indices of a given character, String.RemoveAfterGivenCharacter - This will move all characters at and after the given character., String.RemovePriorToCharacter - This will remove all characters prior to the input character. Accepts strings., TextElement.ToLower - This node converts a Revit text elemnt to upper directly., TextElement.ToTitle - This node converts a Revit text elemnt to upper directly., TextElement.ToUpper - This node converts a Revit text elemnt to upper directly., Wall.NorthSouthEastWest - This node determines which direction a wall is facing and groups them by the direction or direction they are closest to., Workset.Create - Creates a workset or worksets from input names., ZWJ - Zero width joiner Unicode Character, ZWNJ - Zero width non-joiner Unicode Character, Element.SetMultipleParametersByName - Set multiple (comma seperated) parameters by name.",
            "engine_metadata": "",
            "engine_version": "0.8.1.1823",
            "created": "2015-07-13T14:59:29.851Z",
            "full_dependency_versions": [ "2015.7.11" ],
            "full_dependency_ids": [
              {
                "_id": "54e7add1dcee4dfd26000101",
                "name": "Rhythm"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2015.7.11"
          },
          {
            "_id": "55ae6c8a662bf0e908000032",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/f37efa98-0a3d-4f45-a56a-26c6ccd71693gregPkg283.zip",
            "contents": "All Framing at Reference Level - Collects all of the structural framing at a specific reference level, All Upper - This converts the ase of selected items to UPPER. Inputs require booleans to enable for category., Arrowhead Assigner - This node assings the arrowhead type for all text and keynote tags. There is an input for ones you want to exclude., Ayuda.IsArchi-LabInstalled - This node determines if Archi-Lab is installed. Useful with a toggle., Ayuda.IsClockworkInstalled - This node determines if clockwork is installed. Useful with a toggle., Ayuda.IsSteamNodesInstalled - This node determines if steamnodes is installed. Useful with a toggle.;, Collector.KeynoteTags - This collects all of the keynote tags in the model. Similar to other nodes, but this doesn't use python., Collector.LabelTypes - This node collects all of the label types for the active family document., Dash Remover - This node removes the dash at index 2 if it exists. The reason being, NCS states that no dash shall be used., Element.AreaWithTotal - This will get the area of an element if the parameter exists. Will total as well if needed., Element.GetLevelNameAsString - This retrieves the level name of the input elements as a string. This is in response to a known issue with the get value node., Element.GetMultipleParameterValuesByName - Get the value of multiple parameters from elements. (Seperate parameters with comma), Element.Room - This node takes the input of all elements of category and reports back the associated room per element. Currently tested with casework, furniture and plumbing fixtures., Element.SetMultipleParametersByName - Set multiple (comma seperated) parameters by name., Element.Type - This retrieves the element type of the given elements. (if available) Similar to others available but no python here., GetParameterValueByName(TypeOrInstance) - Gets a parameter value by name regardless of type or instance., GetParameterValueByNameAsString - Returns paramter value as string. Same effect as lunchbox node, without python., Level Element Collector - This collects data for all of the Level elements in the model. Similar to the node on Lunchbox, but this one uses all O.O.B. nodes., List.AllIndicesOf - Given an item, returns the zero-based indices of all its occurrences in the list. If the item cannot be found, an empty list is returned. , List.Contains - Determines if the given list contains the item or items., List.GetItemIndices - This node searches the input list for the given string or number., List.MergeSublists - This will merge all sublists with or without a character between the strings., LRE - Start of left-to-right embedding Unicode Character, LRM - Left-to-right mark unicode character, OS.CurrentUser - This node retrieves the current user logged in., OS.CurrentUserAppData - This retrieves the current user's appdata location, Output.Clean - This will return a single value or list from one input., Override Cut Lineweight - Overrides the cut lines of the elements, Override Projection Line Color - This node overrides the projection line color with the input color value. Useful for annotation., Override Projection Lineweight - Overrides the line thickness of projection lines, Parametric Graphic Scale - This node automates the graphic scale assigned per viewport. The input required is all instances of viewport category. It also requires shared parameters. Visit sixtysecondrevit.blogspot.com for details., RemoveListFromList - This node essentially \"subtracts\" the contents of List B from List A to produce a new list with the unique items., Rhythm.Toggle - Toggle that offers two outputs. Created for Dynamo 0.8.1 because of changes to the \"IF\" node, RLE - Start of right-to-left embedding Unicode Character, RLM - Right-to-left mark Unicode character, Room Element Collector - THis will collect data regarding rooms in the active model. Similar to Lunchbox node, but this one does not use python., SetParameterByName(TypeOrInstance) - Set one of the element's parameters regardless of parameter type or instance., SquareFeetDropper - This node drops square feet from the pulled area, String.CharacterAtIndex - Get's the character at a given index, String.FlipReverse - This node flips the string and reverses it. (April Fools '15) Works for 0.8.0 only, added unicode support, String.IndicesOfCharacter - This node gets all the indices of a given character, String.RemoveAfterGivenCharacter - This will move all characters at and after the given character., String.RemovePriorToCharacter - This will remove all characters prior to the input character. Accepts strings., TextElement.ToLower - This node converts a Revit text elemnt to upper directly., TextElement.ToTitle - This node converts a Revit text elemnt to upper directly., TextElement.ToUpper - This node converts a Revit text elemnt to upper directly., Wall.NorthSouthEastWest - This node determines which direction a wall is facing and groups them by the direction or direction they are closest to., Workset.Create - Creates a workset or worksets from input names., ZWJ - Zero width joiner Unicode Character, ZWNJ - Zero width non-joiner Unicode Character",
            "engine_metadata": "",
            "engine_version": "0.8.1.1823",
            "created": "2015-07-21T16:00:10.575Z",
            "full_dependency_versions": [ "2015.7.19" ],
            "full_dependency_ids": [
              {
                "_id": "54e7add1dcee4dfd26000101",
                "name": "Rhythm"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2015.7.19"
          },
          {
            "_id": "55b6518d662bf0e90800004a",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/4e941925-c04a-41c3-96e7-c397edd8c0a7gregPkg626.zip",
            "contents": "All Framing at Reference Level - Collects all of the structural framing at a specific reference level, All Upper - This converts the ase of selected items to UPPER. Inputs require booleans to enable for category., Arrowhead Assigner - This node assings the arrowhead type for all text and keynote tags. There is an input for ones you want to exclude., Ayuda.IsArchi-LabInstalled - This node determines if Archi-Lab is installed. Useful with a toggle., Ayuda.IsClockworkInstalled - This node determines if clockwork is installed. Useful with a toggle., Ayuda.IsSteamNodesInstalled - This node determines if steamnodes is installed. Useful with a toggle.;, Collector.KeynoteTags - This collects all of the keynote tags in the model. Similar to other nodes, but this doesn't use python., Collector.LabelTypes - This node collects all of the label types for the active family document., Dash Remover - This node removes the dash at index 2 if it exists. The reason being, NCS states that no dash shall be used., Element.AreaWithTotal - This will get the area of an element if the parameter exists. Will total as well if needed., Element.GetLevelNameAsString - This retrieves the level name of the input elements as a string. This is in response to a known issue with the get value node., Element.GetMultipleParameterValuesByName - Get the value of multiple parameters from elements. (Seperate parameters with comma), Element.Room - This node takes the input of all elements of category and reports back the associated room per element. Currently tested with casework, furniture and plumbing fixtures., Element.SetMultipleParametersByName - Set multiple (comma seperated) parameters by name., Element.Type - This retrieves the element type of the given elements. (if available) Similar to others available but no python here., GetParameterValueByName(TypeOrInstance) - Gets a parameter value by name regardless of type or instance., GetParameterValueByNameAsString - Returns paramter value as string. Same effect as lunchbox node, without python., Level Element Collector - This collects data for all of the Level elements in the model. Similar to the node on Lunchbox, but this one uses all O.O.B. nodes., List.AllIndicesOf - Given an item, returns the zero-based indices of all its occurrences in the list. If the item cannot be found, an empty list is returned. , List.Contains - Determines if the given list contains the item or items., List.GetItemIndices - This node searches the input list for the given string or number., List.MergeSublists - This will merge all sublists with or without a character between the strings., LRE - Start of left-to-right embedding Unicode Character, LRM - Left-to-right mark unicode character, OS.CurrentUser - This node retrieves the current user logged in., OS.CurrentUserAppData - This retrieves the current user's appdata location, Output.Clean - This will return a single value or list from one input., Override Cut Lineweight - Overrides the cut lines of the elements, Override Projection Line Color - This node overrides the projection line color with the input color value. Useful for annotation., Override Projection Lineweight - Overrides the line thickness of projection lines, Parametric Graphic Scale - This node automates the graphic scale assigned per viewport. The input required is all instances of viewport category. It also requires shared parameters. Visit sixtysecondrevit.blogspot.com for details., RemoveListFromList - This node essentially \"subtracts\" the contents of List B from List A to produce a new list with the unique items., Rhythm.Toggle - Toggle that offers two outputs. Created for Dynamo 0.8.1 because of changes to the \"IF\" node, RLE - Start of right-to-left embedding Unicode Character, RLM - Right-to-left mark Unicode character, Room Element Collector - THis will collect data regarding rooms in the active model. Similar to Lunchbox node, but this one does not use python., SetParameterByName(TypeOrInstance) - Set one of the element's parameters regardless of parameter type or instance., SquareFeetDropper - This node drops square feet from the pulled area, String.CharacterAtIndex - Get's the character at a given index, String.FlipReverse - This node flips the string and reverses it. (April Fools '15) Works for 0.8.0 only, added unicode support, String.IndicesOfCharacter - This node gets all the indices of a given character, String.RemoveAfterGivenCharacter - This will move all characters at and after the given character., String.RemovePriorToCharacter - This will remove all characters prior to the input character. Accepts strings., TextElement.ToLower - This node converts a Revit text elemnt to upper directly., TextElement.ToTitle - This node converts a Revit text elemnt to upper directly., TextElement.ToUpper - This node converts a Revit text elemnt to upper directly., Wall.NorthSouthEastWest - This node determines which direction a wall is facing and groups them by the direction or direction they are closest to., Workset.Create - Creates a workset or worksets from input names., ZWJ - Zero width joiner Unicode Character, ZWNJ - Zero width non-joiner Unicode Character, Element.GetParameterValueByName(CaSe iNSeNSiTive) - Get the value of one of the element's parameters. (CaSe iNSeNSiTiVe), Element.SetParameterByName(CaSe iNSeNSiTiVe) - Set one of the element's parameters. (CaSe iNSeNSiTiVe), Rhythm.PercentGlazingByOrientation - This node was show at RTCNA2015 to optimize your workflows. It reports the window to wall % by direction the wall faces.",
            "engine_metadata": "",
            "engine_version": "0.8.1.1823",
            "created": "2015-07-27T15:43:09.466Z",
            "full_dependency_versions": [ "2015.7.25" ],
            "full_dependency_ids": [
              {
                "_id": "54e7add1dcee4dfd26000101",
                "name": "Rhythm"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2015.7.25"
          },
          {
            "_id": "55b6a7e2662bf0e90800004d",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/ddc3b017-f061-43a4-9f25-111dfceb342dgregPkg873.zip",
            "contents": "All Framing at Reference Level - Collects all of the structural framing at a specific reference level, All Upper - This converts the ase of selected items to UPPER. Inputs require booleans to enable for category., Arrowhead Assigner - This node assings the arrowhead type for all text and keynote tags. There is an input for ones you want to exclude., Ayuda.IsArchi-LabInstalled - This node determines if Archi-Lab is installed. Useful with a toggle., Ayuda.IsClockworkInstalled - This node determines if clockwork is installed. Useful with a toggle., Ayuda.IsSteamNodesInstalled - This node determines if steamnodes is installed. Useful with a toggle.;, Collector.KeynoteTags - This collects all of the keynote tags in the model. Similar to other nodes, but this doesn't use python., Collector.LabelTypes - This node collects all of the label types for the active family document., Dash Remover - This node removes the dash at index 2 if it exists. The reason being, NCS states that no dash shall be used., Element.AreaWithTotal - This will get the area of an element if the parameter exists. Will total as well if needed., Element.GetLevelNameAsString - This retrieves the level name of the input elements as a string. This is in response to a known issue with the get value node., Element.GetMultipleParameterValuesByName - Get the value of multiple parameters from elements. (Seperate parameters with comma), Element.GetParameterValueByName(CaSe iNSeNSiTive) - Get the value of one of the element's parameters. (CaSe iNSeNSiTiVe), Element.Room - This node takes the input of all elements of category and reports back the associated room per element. Currently tested with casework, furniture and plumbing fixtures., Element.SetMultipleParametersByName - Set multiple (comma seperated) parameters by name., Element.SetParameterByName(CaSe iNSeNSiTiVe) - Set one of the element's parameters. (CaSe iNSeNSiTiVe), Element.Type - This retrieves the element type of the given elements. (if available) Similar to others available but no python here., GetParameterValueByName(TypeOrInstance) - Gets a parameter value by name regardless of type or instance., GetParameterValueByNameAsString - Returns paramter value as string. Same effect as lunchbox node, without python., Level Element Collector - This collects data for all of the Level elements in the model. Similar to the node on Lunchbox, but this one uses all O.O.B. nodes., List.AllIndicesOf - Given an item, returns the zero-based indices of all its occurrences in the list. If the item cannot be found, an empty list is returned. , List.Contains - Determines if the given list contains the item or items., List.GetItemIndices - This node searches the input list for the given string or number., List.MergeSublists - This will merge all sublists with or without a character between the strings., LRE - Start of left-to-right embedding Unicode Character, LRM - Left-to-right mark unicode character, OS.CurrentUser - This node retrieves the current user logged in., OS.CurrentUserAppData - This retrieves the current user's appdata location, Output.Clean - This will return a single value or list from one input., Override Cut Lineweight - Overrides the cut lines of the elements, Override Projection Line Color - This node overrides the projection line color with the input color value. Useful for annotation., Override Projection Lineweight - Overrides the line thickness of projection lines, Parametric Graphic Scale - This node automates the graphic scale assigned per viewport. The input required is all instances of viewport category. It also requires shared parameters. Visit sixtysecondrevit.blogspot.com for details., RemoveListFromList - This node essentially \"subtracts\" the contents of List B from List A to produce a new list with the unique items., Rhythm.PercentGlazingByOrientation - This node was show at RTCNA2015 to optimize your workflows. It reports the window to wall % by direction the wall faces., Rhythm.Toggle - Toggle that offers two outputs. Created for Dynamo 0.8.1 because of changes to the \"IF\" node, RLE - Start of right-to-left embedding Unicode Character, RLM - Right-to-left mark Unicode character, Room Element Collector - THis will collect data regarding rooms in the active model. Similar to Lunchbox node, but this one does not use python., SetParameterByName(TypeOrInstance) - Set one of the element's parameters regardless of parameter type or instance., SquareFeetDropper - This node drops square feet from the pulled area, String.CharacterAtIndex - Get's the character at a given index, String.FlipReverse - This node flips the string and reverses it. (April Fools '15) Works for 0.8.0 only, added unicode support, String.IndicesOfCharacter - This node gets all the indices of a given character, String.RemoveAfterGivenCharacter - This will move all characters at and after the given character., String.RemovePriorToCharacter - This will remove all characters prior to the input character. Accepts strings., TextElement.ToLower - This node converts a Revit text elemnt to upper directly., TextElement.ToTitle - This node converts a Revit text elemnt to upper directly., TextElement.ToUpper - This node converts a Revit text elemnt to upper directly., Wall.NorthSouthEastWest - This node determines which direction a wall is facing and groups them by the direction or direction they are closest to., Workset.Create - Creates a workset or worksets from input names., ZWJ - Zero width joiner Unicode Character, ZWNJ - Zero width non-joiner Unicode Character, String.SpecifyDecimalPlaces - This node will take your inout string and number of decimal places to create a new simplified output.",
            "engine_metadata": "",
            "engine_version": "0.8.1.1823",
            "created": "2015-07-27T21:51:30.120Z",
            "full_dependency_versions": [ "2015.7.26" ],
            "full_dependency_ids": [
              {
                "_id": "54e7add1dcee4dfd26000101",
                "name": "Rhythm"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2015.7.26"
          },
          {
            "_id": "55b933d9662bf0e90800005b",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/bdf2507d-e0ac-427f-bde9-2c9ffc75afa2gregPkg256.zip",
            "contents": "All Framing at Reference Level - Collects all of the structural framing at a specific reference level, All Upper - This converts the ase of selected items to UPPER. Inputs require booleans to enable for category., Arrowhead Assigner - This node assings the arrowhead type for all text and keynote tags. There is an input for ones you want to exclude., Ayuda.IsArchi-LabInstalled - This node determines if Archi-Lab is installed. Useful with a toggle., Ayuda.IsClockworkInstalled - This node determines if clockwork is installed. Useful with a toggle., Ayuda.IsSteamNodesInstalled - This node determines if steamnodes is installed. Useful with a toggle.;, Collector.KeynoteTags - This collects all of the keynote tags in the model. Similar to other nodes, but this doesn't use python., Collector.LabelTypes - This node collects all of the label types for the active family document., Dash Remover - This node removes the dash at index 2 if it exists. The reason being, NCS states that no dash shall be used., Element.AreaWithTotal - This will get the area of an element if the parameter exists. Will total as well if needed., Element.GetLevelNameAsString - This retrieves the level name of the input elements as a string. This is in response to a known issue with the get value node., Element.GetMultipleParameterValuesByName - Get the value of multiple parameters from elements. (Seperate parameters with comma), Element.GetParameterValueByName(CaSe iNSeNSiTive) - Get the value of one of the element's parameters. (CaSe iNSeNSiTiVe), Element.Room - This node takes the input of all elements of category and reports back the associated room per element. Currently tested with casework, furniture and plumbing fixtures., Element.SetMultipleParametersByName - Set multiple (comma seperated) parameters by name., Element.SetParameterByName(CaSe iNSeNSiTiVe) - Set one of the element's parameters. (CaSe iNSeNSiTiVe), Element.Type - This retrieves the element type of the given elements. (if available) Similar to others available but no python here., GetParameterValueByName(TypeOrInstance) - Gets a parameter value by name regardless of type or instance., GetParameterValueByNameAsString - Returns paramter value as string. Same effect as lunchbox node, without python., Level Element Collector - This collects data for all of the Level elements in the model. Similar to the node on Lunchbox, but this one uses all O.O.B. nodes., List.AllIndicesOf - Given an item, returns the zero-based indices of all its occurrences in the list. If the item cannot be found, an empty list is returned. , List.Contains - Determines if the given list contains the item or items., List.GetItemIndices - This node searches the input list for the given string or number., List.MergeSublists - This will merge all sublists with or without a character between the strings., LRE - Start of left-to-right embedding Unicode Character, LRM - Left-to-right mark unicode character, OS.CurrentUser - This node retrieves the current user logged in., OS.CurrentUserAppData - This retrieves the current user's appdata location, Output.Clean - This will return a single value or list from one input., Override Cut Lineweight - Overrides the cut lines of the elements, Override Projection Line Color - This node overrides the projection line color with the input color value. Useful for annotation., Override Projection Lineweight - Overrides the line thickness of projection lines, Parametric Graphic Scale - This node automates the graphic scale assigned per viewport. The input required is all instances of viewport category. It also requires shared parameters. Visit sixtysecondrevit.blogspot.com for details., RemoveListFromList - This node essentially \"subtracts\" the contents of List B from List A to produce a new list with the unique items., Rhythm.PercentGlazingByOrientation - This node was show at RTCNA2015 to optimize your workflows. It reports the window to wall % by direction the wall faces., Rhythm.Toggle - Toggle that offers two outputs. Created for Dynamo 0.8.1 because of changes to the \"IF\" node, RLE - Start of right-to-left embedding Unicode Character, RLM - Right-to-left mark Unicode character, Room Element Collector - THis will collect data regarding rooms in the active model. Similar to Lunchbox node, but this one does not use python., SetParameterByName(TypeOrInstance) - Set one of the element's parameters regardless of parameter type or instance., SquareFeetDropper - This node drops square feet from the pulled area, String.CharacterAtIndex - Get's the character at a given index, String.FlipReverse - This node flips the string and reverses it. (April Fools '15) Works for 0.8.0 only, added unicode support, String.IndicesOfCharacter - This node gets all the indices of a given character, String.RemoveAfterGivenCharacter - This will move all characters at and after the given character., String.RemovePriorToCharacter - This will remove all characters prior to the input character. Accepts strings., String.SpecifyDecimalPlaces - This node will take your inout string and number of decimal places to create a new simplified output., TextElement.ToLower - This node converts a Revit text elemnt to upper directly., TextElement.ToTitle - This node converts a Revit text elemnt to upper directly., TextElement.ToUpper - This node converts a Revit text elemnt to upper directly., Wall.NorthSouthEastWest - This node determines which direction a wall is facing and groups them by the direction or direction they are closest to., Workset.Create - Creates a workset or worksets from input names., ZWJ - Zero width joiner Unicode Character, ZWNJ - Zero width non-joiner Unicode Character, Inspiration.BuffettNode - This is a result of \"what if?\" thinking. The output is a random Warren Buffett quote from brainyquotes.com, Inspiration.CarreyNode - This is a result of \"what if?\" thinking. The output is a random Jim Carrey quote from brainyquotes.com, Inspiration.CashNode - This is a result of \"what if?\" thinking. The output is a random Johnny Cash quote from brainyquotes.com, Inspiration.MarleyNode - This is a result of \"what if?\" thinking. The output is a random Bob Marley quote from brainyquotes.com, Inspiration.SearchQuoteNode - This is a result of \"what if?\" thinking. The output is a random quote based on the search criteria from brainyquotes.com. (As long as it is on the site), Inspiration.TeresaNode - This is a result of \"what if?\" thinking. The output is a random Mother Teresa quote from brainyquotes.com",
            "engine_metadata": "",
            "engine_version": "0.8.1.1823",
            "created": "2015-07-29T20:13:13.470Z",
            "full_dependency_versions": [ "2015.7.27" ],
            "full_dependency_ids": [
              {
                "_id": "54e7add1dcee4dfd26000101",
                "name": "Rhythm"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2015.7.27"
          },
          {
            "_id": "55bb7e0d662bf0e908000061",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/0043b9d5-d070-4904-be40-f3c3612acf96gregPkg997.zip",
            "contents": "All Framing at Reference Level - Collects all of the structural framing at a specific reference level, All Upper - This converts the ase of selected items to UPPER. Inputs require booleans to enable for category., Arrowhead Assigner - This node assings the arrowhead type for all text and keynote tags. There is an input for ones you want to exclude., Ayuda.IsArchi-LabInstalled - This node determines if Archi-Lab is installed. Useful with a toggle., Ayuda.IsClockworkInstalled - This node determines if clockwork is installed. Useful with a toggle., Ayuda.IsSteamNodesInstalled - This node determines if steamnodes is installed. Useful with a toggle.;, Collector.KeynoteTags - This collects all of the keynote tags in the model. Similar to other nodes, but this doesn't use python., Collector.LabelTypes - This node collects all of the label types for the active family document., Dash Remover - This node removes the dash at index 2 if it exists. The reason being, NCS states that no dash shall be used., Element.AreaWithTotal - This will get the area of an element if the parameter exists. Will total as well if needed., Element.GetLevelNameAsString - This retrieves the level name of the input elements as a string. This is in response to a known issue with the get value node., Element.GetMultipleParameterValuesByName - Get the value of multiple parameters from elements. (Seperate parameters with comma), Element.GetParameterValueByName(CaSe iNSeNSiTive) - Get the value of one of the element's parameters. (CaSe iNSeNSiTiVe), Element.Room - This node takes the input of all elements of category and reports back the associated room per element. Currently tested with casework, furniture and plumbing fixtures., Element.SetMultipleParametersByName - Set multiple (comma seperated) parameters by name., Element.SetParameterByName(CaSe iNSeNSiTiVe) - Set one of the element's parameters. (CaSe iNSeNSiTiVe), Element.Type - This retrieves the element type of the given elements. (if available) Similar to others available but no python here., GetParameterValueByName(TypeOrInstance) - Gets a parameter value by name regardless of type or instance., GetParameterValueByNameAsString - Returns paramter value as string. Same effect as lunchbox node, without python., Inspiration.BuffettNode - This is a result of \"what if?\" thinking. The output is a random Warren Buffett quote from brainyquotes.com, Inspiration.CarreyNode - This is a result of \"what if?\" thinking. The output is a random Jim Carrey quote from brainyquotes.com, Inspiration.CashNode - This is a result of \"what if?\" thinking. The output is a random Johnny Cash quote from brainyquotes.com, Inspiration.MarleyNode - This is a result of \"what if?\" thinking. The output is a random Bob Marley quote from brainyquotes.com, Inspiration.SearchQuoteNode - This is a result of \"what if?\" thinking. The output is a random quote based on the search criteria from brainyquotes.com. (As long as it is on the site), Inspiration.TeresaNode - This is a result of \"what if?\" thinking. The output is a random Mother Teresa quote from brainyquotes.com, Level Element Collector - This collects data for all of the Level elements in the model. Similar to the node on Lunchbox, but this one uses all O.O.B. nodes., List.AllIndicesOf - Given an item, returns the zero-based indices of all its occurrences in the list. If the item cannot be found, an empty list is returned. , List.Contains - Determines if the given list contains the item or items., List.GetItemIndices - This node searches the input list for the given string or number., List.MergeSublists - This will merge all sublists with or without a character between the strings., LRE - Start of left-to-right embedding Unicode Character, LRM - Left-to-right mark unicode character, OS.CurrentUser - This node retrieves the current user logged in., OS.CurrentUserAppData - This retrieves the current user's appdata location, Output.Clean - This will return a single value or list from one input., Override Cut Lineweight - Overrides the cut lines of the elements, Override Projection Line Color - This node overrides the projection line color with the input color value. Useful for annotation., Override Projection Lineweight - Overrides the line thickness of projection lines, Parametric Graphic Scale - This node automates the graphic scale assigned per viewport. The input required is all instances of viewport category. It also requires shared parameters. Visit sixtysecondrevit.blogspot.com for details., RemoveListFromList - This node essentially \"subtracts\" the contents of List B from List A to produce a new list with the unique items., Rhythm.PercentGlazingByOrientation - This node was show at RTCNA2015 to optimize your workflows. It reports the window to wall % by direction the wall faces., Rhythm.Toggle - Toggle that offers two outputs. Created for Dynamo 0.8.1 because of changes to the \"IF\" node, RLE - Start of right-to-left embedding Unicode Character, RLM - Right-to-left mark Unicode character, Room Element Collector - THis will collect data regarding rooms in the active model. Similar to Lunchbox node, but this one does not use python., SetParameterByName(TypeOrInstance) - Set one of the element's parameters regardless of parameter type or instance., SquareFeetDropper - This node drops square feet from the pulled area, String.CharacterAtIndex - Get's the character at a given index, String.FlipReverse - This node flips the string and reverses it. (April Fools '15) Works for 0.8.0 only, added unicode support, String.IndicesOfCharacter - This node gets all the indices of a given character, String.RemoveAfterGivenCharacter - This will move all characters at and after the given character., String.RemovePriorToCharacter - This will remove all characters prior to the input character. Accepts strings., String.SpecifyDecimalPlaces - This node will take your inout string and number of decimal places to create a new simplified output., TextElement.ToLower - This node converts a Revit text elemnt to upper directly., TextElement.ToTitle - This node converts a Revit text elemnt to upper directly., TextElement.ToUpper - This node converts a Revit text elemnt to upper directly., Wall.NorthSouthEastWest - This node determines which direction a wall is facing and groups them by the direction or direction they are closest to., Workset.Create - Creates a workset or worksets from input names., ZWJ - Zero width joiner Unicode Character, ZWNJ - Zero width non-joiner Unicode Character",
            "engine_metadata": "",
            "engine_version": "0.8.1.1823",
            "created": "2015-07-31T13:54:21.873Z",
            "full_dependency_versions": [ "2015.7.28" ],
            "full_dependency_ids": [
              {
                "_id": "54e7add1dcee4dfd26000101",
                "name": "Rhythm"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2015.7.28"
          },
          {
            "_id": "55bbb218662bf0e908000065",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/66cdefc9-233a-484e-907a-4ac7bdf606c3gregPkg280.zip",
            "contents": "All Framing at Reference Level - Collects all of the structural framing at a specific reference level, All Upper - This converts the ase of selected items to UPPER. Inputs require booleans to enable for category., Arrowhead Assigner - This node assings the arrowhead type for all text and keynote tags. There is an input for ones you want to exclude., Ayuda.IsArchi-LabInstalled - This node determines if Archi-Lab is installed. Useful with a toggle., Ayuda.IsClockworkInstalled - This node determines if clockwork is installed. Useful with a toggle., Ayuda.IsSteamNodesInstalled - This node determines if steamnodes is installed. Useful with a toggle.;, Collector.KeynoteTags - This collects all of the keynote tags in the model. Similar to other nodes, but this doesn't use python., Collector.LabelTypes - This node collects all of the label types for the active family document., Dash Remover - This node removes the dash at index 2 if it exists. The reason being, NCS states that no dash shall be used., Element.AreaWithTotal - This will get the area of an element if the parameter exists. Will total as well if needed., Element.GetLevelNameAsString - This retrieves the level name of the input elements as a string. This is in response to a known issue with the get value node., Element.GetMultipleParameterValuesByName - Get the value of multiple parameters from elements. (Seperate parameters with comma), Element.GetParameterValueByName(CaSe iNSeNSiTive) - Get the value of one of the element's parameters. (CaSe iNSeNSiTiVe), Element.Room - This node takes the input of all elements of category and reports back the associated room per element. Currently tested with casework, furniture and plumbing fixtures., Element.SetMultipleParametersByName - Set multiple (comma seperated) parameters by name., Element.SetParameterByName(CaSe iNSeNSiTiVe) - Set one of the element's parameters. (CaSe iNSeNSiTiVe), Element.Type - This retrieves the element type of the given elements. (if available) Similar to others available but no python here., Get All Tag Types - This node collects the tag types in the model., GetParameterValueByName(TypeOrInstance) - Gets a parameter value by name regardless of type or instance., GetParameterValueByNameAsString - Returns paramter value as string. Same effect as lunchbox node, without python., Inspiration.BuffettNode - This is a result of \"what if?\" thinking. The output is a random Warren Buffett quote from brainyquotes.com, Inspiration.CarreyNode - This is a result of \"what if?\" thinking. The output is a random Jim Carrey quote from brainyquotes.com, Inspiration.CashNode - This is a result of \"what if?\" thinking. The output is a random Johnny Cash quote from brainyquotes.com, Inspiration.MarleyNode - This is a result of \"what if?\" thinking. The output is a random Bob Marley quote from brainyquotes.com, Inspiration.SearchQuoteNode - This is a result of \"what if?\" thinking. The output is a random quote based on the search criteria from brainyquotes.com. (As long as it is on the site), Inspiration.TeresaNode - This is a result of \"what if?\" thinking. The output is a random Mother Teresa quote from brainyquotes.com, Level Element Collector - This collects data for all of the Level elements in the model. Similar to the node on Lunchbox, but this one uses all O.O.B. nodes., List.AllIndicesOf - Given an item, returns the zero-based indices of all its occurrences in the list. If the item cannot be found, an empty list is returned. , List.Contains - Determines if the given list contains the item or items., List.GetItemIndices - This node searches the input list for the given string or number., List.MergeSublists - This will merge all sublists with or without a character between the strings., LRE - Start of left-to-right embedding Unicode Character, LRM - Left-to-right mark unicode character, OS.CurrentUser - This node retrieves the current user logged in., OS.CurrentUserAppData - This retrieves the current user's appdata location, Output.Clean - This will return a single value or list from one input., Override Cut Lineweight - Overrides the cut lines of the elements, Override Projection Line Color - This node overrides the projection line color with the input color value. Useful for annotation., Override Projection Lineweight - Overrides the line thickness of projection lines, Parametric Graphic Scale - This node automates the graphic scale assigned per viewport. The input required is all instances of viewport category. It also requires shared parameters. Visit sixtysecondrevit.blogspot.com for details., RemoveListFromList - This node essentially \"subtracts\" the contents of List B from List A to produce a new list with the unique items., Rhythm.PercentGlazingByOrientation - This node was show at RTCNA2015 to optimize your workflows. It reports the window to wall % by direction the wall faces., Rhythm.Toggle - Toggle that offers two outputs. Created for Dynamo 0.8.1 because of changes to the \"IF\" node, RLE - Start of right-to-left embedding Unicode Character, RLM - Right-to-left mark Unicode character, Room Element Collector - THis will collect data regarding rooms in the active model. Similar to Lunchbox node, but this one does not use python., SetParameterByName(TypeOrInstance) - Set one of the element's parameters regardless of parameter type or instance., SquareFeetDropper - This node drops square feet from the pulled area, String.CharacterAtIndex - Get's the character at a given index, String.FlipReverse - This node flips the string and reverses it. (April Fools '15) Works for 0.8.0 only, added unicode support, String.IndicesOfCharacter - This node gets all the indices of a given character, String.RemoveAfterGivenCharacter - This will move all characters at and after the given character., String.RemovePriorToCharacter - This will remove all characters prior to the input character. Accepts strings., String.SpecifyDecimalPlaces - This node will take your inout string and number of decimal places to create a new simplified output., TextElement.ToLower - This node converts a Revit text elemnt to upper directly., TextElement.ToTitle - This node converts a Revit text elemnt to upper directly., TextElement.ToUpper - This node converts a Revit text elemnt to upper directly., Wall.NorthSouthEastWest - This node determines which direction a wall is facing and groups them by the direction or direction they are closest to., Workset.Create - Creates a workset or worksets from input names., ZWJ - Zero width joiner Unicode Character, ZWNJ - Zero width non-joiner Unicode Character",
            "engine_metadata": "",
            "engine_version": "0.8.1.1823",
            "created": "2015-07-31T17:36:24.020Z",
            "full_dependency_versions": [ "2015.7.29" ],
            "full_dependency_ids": [
              {
                "_id": "54e7add1dcee4dfd26000101",
                "name": "Rhythm"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2015.7.29"
          },
          {
            "_id": "55c506e5662bf0e908000089",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/6b409f0c-a3df-4e1c-96f9-1bcb48467c3bgregPkg91.zip",
            "contents": "All Framing at Reference Level - Collects all of the structural framing at a specific reference level, All Upper - This converts the ase of selected items to UPPER. Inputs require booleans to enable for category., Arrowhead Assigner - This node assings the arrowhead type for all text and keynote tags. There is an input for ones you want to exclude., Ayuda.IsArchi-LabInstalled - This node determines if Archi-Lab is installed. Useful with a toggle., Ayuda.IsClockworkInstalled - This node determines if clockwork is installed. Useful with a toggle., Ayuda.IsSteamNodesInstalled - This node determines if steamnodes is installed. Useful with a toggle.;, Collector.KeynoteTags - This collects all of the keynote tags in the model. Similar to other nodes, but this doesn't use python., Collector.LabelTypes - This node collects all of the label types for the active family document., Dash Remover - This node removes the dash at index 2 if it exists. The reason being, NCS states that no dash shall be used., Element.AreaWithTotal - This will get the area of an element if the parameter exists. Will total as well if needed., Element.GetLevelNameAsString - This retrieves the level name of the input elements as a string. This is in response to a known issue with the get value node., Element.GetMultipleParameterValuesByName - Get the value of multiple parameters from elements. (Seperate parameters with comma), Element.GetParameterValueByName(CaSe iNSeNSiTive) - Get the value of one of the element's parameters. (CaSe iNSeNSiTiVe), Element.Room - This node takes the input of all elements of category and reports back the associated room per element. Currently tested with casework, furniture and plumbing fixtures., Element.SetMultipleParametersByName - Set multiple (comma seperated) parameters by name., Element.SetParameterByName(CaSe iNSeNSiTiVe) - Set one of the element's parameters. (CaSe iNSeNSiTiVe), Element.Type - This retrieves the element type of the given elements. (if available) Similar to others available but no python here., Get All Tag Types - This node collects the tag types in the model., GetParameterValueByName(TypeOrInstance) - Gets a parameter value by name regardless of type or instance., GetParameterValueByNameAsString - Returns paramter value as string. Same effect as lunchbox node, without python., Inspiration.BuffettNode - This is a result of \"what if?\" thinking. The output is a random Warren Buffett quote from brainyquotes.com, Inspiration.CarreyNode - This is a result of \"what if?\" thinking. The output is a random Jim Carrey quote from brainyquotes.com, Inspiration.CashNode - This is a result of \"what if?\" thinking. The output is a random Johnny Cash quote from brainyquotes.com, Inspiration.MarleyNode - This is a result of \"what if?\" thinking. The output is a random Bob Marley quote from brainyquotes.com, Inspiration.SearchQuoteNode - This is a result of \"what if?\" thinking. The output is a random quote based on the search criteria from brainyquotes.com. (As long as it is on the site), Inspiration.TeresaNode - This is a result of \"what if?\" thinking. The output is a random Mother Teresa quote from brainyquotes.com, Level Element Collector - This collects data for all of the Level elements in the model. Similar to the node on Lunchbox, but this one uses all O.O.B. nodes., List.AllIndicesOf - Given an item, returns the zero-based indices of all its occurrences in the list. If the item cannot be found, an empty list is returned. , List.Contains - Determines if the given list contains the item or items., List.GetItemIndices - This node searches the input list for the given string or number., List.MergeSublists - This will merge all sublists with or without a character between the strings., LRE - Start of left-to-right embedding Unicode Character, LRM - Left-to-right mark unicode character, OS.CurrentUser - This node retrieves the current user logged in., OS.CurrentUserAppData - This retrieves the current user's appdata location, Output.Clean - This will return a single value or list from one input., Override Cut Lineweight - Overrides the cut lines of the elements, Override Projection Line Color - This node overrides the projection line color with the input color value. Useful for annotation., Override Projection Lineweight - Overrides the line thickness of projection lines, Parametric Graphic Scale - This node automates the graphic scale assigned per viewport. The input required is all instances of viewport category. It also requires shared parameters. Visit sixtysecondrevit.blogspot.com for details., RemoveListFromList - This node essentially \"subtracts\" the contents of List B from List A to produce a new list with the unique items., Rhythm.PercentGlazingByOrientation - This node was show at RTCNA2015 to optimize your workflows. It reports the window to wall % by direction the wall faces., Rhythm.Toggle - Toggle that offers two outputs. Created for Dynamo 0.8.1 because of changes to the \"IF\" node, RLE - Start of right-to-left embedding Unicode Character, RLM - Right-to-left mark Unicode character, Room Element Collector - THis will collect data regarding rooms in the active model. Similar to Lunchbox node, but this one does not use python., SetParameterByName(TypeOrInstance) - Set one of the element's parameters regardless of parameter type or instance., SquareFeetDropper - This node drops square feet from the pulled area, String.CharacterAtIndex - Get's the character at a given index, String.FlipReverse - This node flips the string and reverses it. (April Fools '15) Works for 0.8.0 only, added unicode support, String.IndicesOfCharacter - This node gets all the indices of a given character, String.RemoveAfterGivenCharacter - This will move all characters at and after the given character., String.RemovePriorToCharacter - This will remove all characters prior to the input character. Accepts strings., String.SpecifyDecimalPlaces - This node will take your inout string and number of decimal places to create a new simplified output., TextElement.ToLower - This node converts a Revit text elemnt to upper directly., TextElement.ToTitle - This node converts a Revit text elemnt to upper directly., TextElement.ToUpper - This node converts a Revit text elemnt to upper directly., Wall.NorthSouthEastWest - This node determines which direction a wall is facing and groups them by the direction or direction they are closest to., Workset.Create - Creates a workset or worksets from input names., ZWJ - Zero width joiner Unicode Character, ZWNJ - Zero width non-joiner Unicode Character, Collector.DuctsBySystem - This collects all ducts in the project and organizes them by System Classification, Collector.PipesBySystem - This collects all pipes in the project and organizes them by System Classification, Ayuda.ThisOrThat - This node is a toggle between two inputs.",
            "engine_metadata": "",
            "engine_version": "0.8.1.1823",
            "created": "2015-08-07T19:28:37.580Z",
            "full_dependency_versions": [ "2015.8.6" ],
            "full_dependency_ids": [
              {
                "_id": "54e7add1dcee4dfd26000101",
                "name": "Rhythm"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2015.8.6"
          },
          {
            "_id": "55c9106a662bf0e908000095",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/589794ee-9ac8-4737-9258-6603fc54e206gregPkg90.zip",
            "contents": "All Framing at Reference Level - Collects all of the structural framing at a specific reference level, All Upper - This converts the ase of selected items to UPPER. Inputs require booleans to enable for category., Arrowhead Assigner - This node assings the arrowhead type for all text and keynote tags. There is an input for ones you want to exclude., Ayuda.IsArchi-LabInstalled - This node determines if Archi-Lab is installed. Useful with a toggle., Ayuda.IsClockworkInstalled - This node determines if clockwork is installed. Useful with a toggle., Ayuda.IsSteamNodesInstalled - This node determines if steamnodes is installed. Useful with a toggle.;, Ayuda.ThisOrThat - This node is a toggle between two inputs., Collector.DuctsBySystem - This collects all ducts in the project and organizes them by System Classification, Collector.KeynoteTags - This collects all of the keynote tags in the model. Similar to other nodes, but this doesn't use python., Collector.LabelTypes - This node collects all of the label types for the active family document., Collector.PipesBySystem - This collects all pipes in the project and organizes them by System Classification, Dash Remover - This node removes the dash at index 2 if it exists. The reason being, NCS states that no dash shall be used., Element.AreaWithTotal - This will get the area of an element if the parameter exists. Will total as well if needed., Element.GetLevelNameAsString - This retrieves the level name of the input elements as a string. This is in response to a known issue with the get value node., Element.GetMultipleParameterValuesByName - Get the value of multiple parameters from elements. (Seperate parameters with comma), Element.GetParameterValueByName(CaSe iNSeNSiTive) - Get the value of one of the element's parameters. (CaSe iNSeNSiTiVe), Element.Room - This node takes the input of all elements of category and reports back the associated room per element. Currently tested with casework, furniture and plumbing fixtures., Element.SetMultipleParametersByName - Set multiple (comma seperated) parameters by name., Element.SetParameterByName(CaSe iNSeNSiTiVe) - Set one of the element's parameters. (CaSe iNSeNSiTiVe), Element.Type - This retrieves the element type of the given elements. (if available) Similar to others available but no python here., Get All Tag Types - This node collects the tag types in the model., GetParameterValueByName(TypeOrInstance) - Gets a parameter value by name regardless of type or instance., GetParameterValueByNameAsString - Returns paramter value as string. Same effect as lunchbox node, without python., Inspiration.BuffettNode - This is a result of \"what if?\" thinking. The output is a random Warren Buffett quote from brainyquotes.com, Inspiration.CarreyNode - This is a result of \"what if?\" thinking. The output is a random Jim Carrey quote from brainyquotes.com, Inspiration.CashNode - This is a result of \"what if?\" thinking. The output is a random Johnny Cash quote from brainyquotes.com, Inspiration.MarleyNode - This is a result of \"what if?\" thinking. The output is a random Bob Marley quote from brainyquotes.com, Inspiration.SearchQuoteNode - This is a result of \"what if?\" thinking. The output is a random quote based on the search criteria from brainyquotes.com. (As long as it is on the site), Inspiration.TeresaNode - This is a result of \"what if?\" thinking. The output is a random Mother Teresa quote from brainyquotes.com, Level Element Collector - This collects data for all of the Level elements in the model. Similar to the node on Lunchbox, but this one uses all O.O.B. nodes., List.AllIndicesOf - Given an item, returns the zero-based indices of all its occurrences in the list. If the item cannot be found, an empty list is returned. , List.Contains - Determines if the given list contains the item or items., List.GetItemIndices - This node searches the input list for the given string or number., List.MergeSublists - This will merge all sublists with or without a character between the strings., LRE - Start of left-to-right embedding Unicode Character, LRM - Left-to-right mark unicode character, OS.CurrentUser - This node retrieves the current user logged in., OS.CurrentUserAppData - This retrieves the current user's appdata location, Output.Clean - This will return a single value or list from one input., Override Cut Lineweight - Overrides the cut lines of the elements, Override Projection Line Color - This node overrides the projection line color with the input color value. Useful for annotation., Override Projection Lineweight - Overrides the line thickness of projection lines, Parametric Graphic Scale - This node automates the graphic scale assigned per viewport. The input required is all instances of viewport category. It also requires shared parameters. Visit sixtysecondrevit.blogspot.com for details., RemoveListFromList - This node essentially \"subtracts\" the contents of List B from List A to produce a new list with the unique items., Rhythm.PercentGlazingByOrientation - This node was show at RTCNA2015 to optimize your workflows. It reports the window to wall % by direction the wall faces., Rhythm.Toggle - Toggle that offers two outputs. Created for Dynamo 0.8.1 because of changes to the \"IF\" node, RLE - Start of right-to-left embedding Unicode Character, RLM - Right-to-left mark Unicode character, Room Element Collector - THis will collect data regarding rooms in the active model. Similar to Lunchbox node, but this one does not use python., SetParameterByName(TypeOrInstance) - Set one of the element's parameters regardless of parameter type or instance., SquareFeetDropper - This node drops square feet from the pulled area, String.CharacterAtIndex - Get's the character at a given index, String.FlipReverse - This node flips the string and reverses it. (April Fools '15) Works for 0.8.0 only, added unicode support, String.IndicesOfCharacter - This node gets all the indices of a given character, String.RemoveAfterGivenCharacter - This will move all characters at and after the given character., String.RemovePriorToCharacter - This will remove all characters prior to the input character. Accepts strings., String.SpecifyDecimalPlaces - This node will take your inout string and number of decimal places to create a new simplified output., TextElement.ToLower - This node converts a Revit text elemnt to upper directly., TextElement.ToTitle - This node converts a Revit text elemnt to upper directly., TextElement.ToUpper - This node converts a Revit text elemnt to upper directly., Wall.NorthSouthEastWest - This node determines which direction a wall is facing and groups them by the direction or direction they are closest to., Workset.Create - Creates a workset or worksets from input names., ZWJ - Zero width joiner Unicode Character, ZWNJ - Zero width non-joiner Unicode Character",
            "engine_metadata": "",
            "engine_version": "0.8.1.1823",
            "created": "2015-08-10T20:58:18.326Z",
            "full_dependency_versions": [ "2015.8.8" ],
            "full_dependency_ids": [
              {
                "_id": "54e7add1dcee4dfd26000101",
                "name": "Rhythm"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2015.8.8"
          },
          {
            "_id": "55ca0a09662bf0e90800009a",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/bede93ef-6327-452b-8375-3b20b5aeb4efgregPkg511.zip",
            "contents": "All Framing at Reference Level - Collects all of the structural framing at a specific reference level, All Upper - This converts the ase of selected items to UPPER. Inputs require booleans to enable for category., Arrowhead Assigner - This node assings the arrowhead type for all text and keynote tags. There is an input for ones you want to exclude., Ayuda.IsArchi-LabInstalled - This node determines if Archi-Lab is installed. Useful with a toggle., Ayuda.IsClockworkInstalled - This node determines if clockwork is installed. Useful with a toggle., Ayuda.IsSteamNodesInstalled - This node determines if steamnodes is installed. Useful with a toggle.;, Ayuda.ThisOrThat - This node is a toggle between two inputs., Collector.DuctsBySystem - This collects all ducts in the project and organizes them by System Classification, Collector.KeynoteTags - This collects all of the keynote tags in the model. Similar to other nodes, but this doesn't use python., Collector.LabelTypes - This node collects all of the label types for the active family document., Collector.PipesBySystem - This collects all pipes in the project and organizes them by System Classification, Dash Remover - This node removes the dash at index 2 if it exists. The reason being, NCS states that no dash shall be used., Element.AreaWithTotal - This will get the area of an element if the parameter exists. Will total as well if needed., Element.GetLevelNameAsString - This retrieves the level name of the input elements as a string. This is in response to a known issue with the get value node., Element.GetMultipleParameterValuesByName - Get the value of multiple parameters from elements. (Seperate parameters with comma), Element.GetParameterValueByName(CaSe iNSeNSiTive) - Get the value of one of the element's parameters. (CaSe iNSeNSiTiVe), Element.Room - This node takes the input of all elements of category and reports back the associated room per element. Currently tested with casework, furniture and plumbing fixtures., Element.SetMultipleParametersByName - Set multiple (comma seperated) parameters by name., Element.SetParameterByName(CaSe iNSeNSiTiVe) - Set one of the element's parameters. (CaSe iNSeNSiTiVe), Element.Type - This retrieves the element type of the given elements. (if available) Similar to others available but no python here., Get All Tag Types - This node collects the tag types in the model., GetParameterValueByName(TypeOrInstance) - Gets a parameter value by name regardless of type or instance., GetParameterValueByNameAsString - Returns paramter value as string. Same effect as lunchbox node, without python., Inspiration.BuffettNode - This is a result of \"what if?\" thinking. The output is a random Warren Buffett quote from brainyquotes.com, Inspiration.CarreyNode - This is a result of \"what if?\" thinking. The output is a random Jim Carrey quote from brainyquotes.com, Inspiration.CashNode - This is a result of \"what if?\" thinking. The output is a random Johnny Cash quote from brainyquotes.com, Inspiration.MarleyNode - This is a result of \"what if?\" thinking. The output is a random Bob Marley quote from brainyquotes.com, Inspiration.SearchQuoteNode - This is a result of \"what if?\" thinking. The output is a random quote based on the search criteria from brainyquotes.com. (As long as it is on the site), Inspiration.TeresaNode - This is a result of \"what if?\" thinking. The output is a random Mother Teresa quote from brainyquotes.com, Level Element Collector - This collects data for all of the Level elements in the model. Similar to the node on Lunchbox, but this one uses all O.O.B. nodes., List.AllIndicesOf - Given an item, returns the zero-based indices of all its occurrences in the list. If the item cannot be found, an empty list is returned. , List.Contains - Determines if the given list contains the item or items., List.GetItemIndices - This node searches the input list for the given string or number., List.MergeSublists - This will merge all sublists with or without a character between the strings., LRE - Start of left-to-right embedding Unicode Character, LRM - Left-to-right mark unicode character, OS.CurrentUser - This node retrieves the current user logged in., OS.CurrentUserAppData - This retrieves the current user's appdata location, Output.Clean - This will return a single value or list from one input., Override Cut Lineweight - Overrides the cut lines of the elements, Override Projection Line Color - This node overrides the projection line color with the input color value. Useful for annotation., Override Projection Lineweight - Overrides the line thickness of projection lines, Parametric Graphic Scale - This node automates the graphic scale assigned per viewport. The input required is all instances of viewport category. It also requires shared parameters. Visit sixtysecondrevit.blogspot.com for details., RemoveListFromList - This node essentially \"subtracts\" the contents of List B from List A to produce a new list with the unique items., Rhythm.PercentGlazingByOrientation - This node was show at RTCNA2015 to optimize your workflows. It reports the window to wall % by direction the wall faces., Rhythm.Toggle - Toggle that offers two outputs. Created for Dynamo 0.8.1 because of changes to the \"IF\" node, RLE - Start of right-to-left embedding Unicode Character, RLM - Right-to-left mark Unicode character, Room Element Collector - THis will collect data regarding rooms in the active model. Similar to Lunchbox node, but this one does not use python., SetParameterByName(TypeOrInstance) - Set one of the element's parameters regardless of parameter type or instance., SquareFeetDropper - This node drops square feet from the pulled area, String.CharacterAtIndex - Get's the character at a given index, String.FlipReverse - This node flips the string and reverses it. (April Fools '15) Works for 0.8.0 only, added unicode support, String.IndicesOfCharacter - This node gets all the indices of a given character, String.RemoveAfterGivenCharacter - This will move all characters at and after the given character., String.RemovePriorToCharacter - This will remove all characters prior to the input character. Accepts strings., String.SpecifyDecimalPlaces - This node will take your inout string and number of decimal places to create a new simplified output., TextElement.ToLower - This node converts a Revit text elemnt to upper directly., TextElement.ToTitle - This node converts a Revit text elemnt to upper directly., TextElement.ToUpper - This node converts a Revit text elemnt to upper directly., Wall.NorthSouthEastWest - This node determines which direction a wall is facing and groups them by the direction or direction they are closest to., Workset.Create - Creates a workset or worksets from input names., ZWJ - Zero width joiner Unicode Character, ZWNJ - Zero width non-joiner Unicode Character, Collector.Viewports - This collects all of the viewports in the model and outputs the name, title on sheet, scale and viewport type.",
            "engine_metadata": "",
            "engine_version": "0.8.1.1823",
            "created": "2015-08-11T14:43:21.516Z",
            "full_dependency_versions": [ "2015.8.9" ],
            "full_dependency_ids": [
              {
                "_id": "54e7add1dcee4dfd26000101",
                "name": "Rhythm"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2015.8.9"
          },
          {
            "_id": "55d34b9e662bf0e9080000dc",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/4036820f-5f8c-470b-919c-f629493b6e34gregPkg795.zip",
            "contents": "All Framing at Reference Level - Collects all of the structural framing at a specific reference level, All Upper - This converts the ase of selected items to UPPER. Inputs require booleans to enable for category., Arrowhead Assigner - This node assings the arrowhead type for all text and keynote tags. There is an input for ones you want to exclude., Ayuda.IsArchi-LabInstalled - This node determines if Archi-Lab is installed. Useful with a toggle., Ayuda.IsClockworkInstalled - This node determines if clockwork is installed. Useful with a toggle., Ayuda.IsSteamNodesInstalled - This node determines if steamnodes is installed. Useful with a toggle.;, Ayuda.ThisOrThat - This node is a toggle between two inputs., Collector.DuctsBySystem - This collects all ducts in the project and organizes them by System Classification, Collector.KeynoteTags - This collects all of the keynote tags in the model. Similar to other nodes, but this doesn't use python., Collector.LabelTypes - This node collects all of the label types for the active family document., Collector.PipesBySystem - This collects all pipes in the project and organizes them by System Classification, Collector.Viewports - This collects all of the viewports in the model and outputs the name, title on sheet, scale and viewport type., Dash Remover - This node removes the dash at index 2 if it exists. The reason being, NCS states that no dash shall be used., Element.AreaWithTotal - This will get the area of an element if the parameter exists. Will total as well if needed., Element.GetLevelNameAsString - This retrieves the level name of the input elements as a string. This is in response to a known issue with the get value node., Element.GetMultipleParameterValuesByName - Get the value of multiple parameters from elements. (Seperate parameters with comma), Element.GetParameterValueByName(CaSe iNSeNSiTive) - Get the value of one of the element's parameters. (CaSe iNSeNSiTiVe), Element.Room - This node takes the input of all elements of category and reports back the associated room per element. Currently tested with casework, furniture and plumbing fixtures., Element.SetMultipleParametersByName - Set multiple (comma seperated) parameters by name., Element.SetParameterByName(CaSe iNSeNSiTiVe) - Set one of the element's parameters. (CaSe iNSeNSiTiVe), Element.Type - This retrieves the element type of the given elements. (if available) Similar to others available but no python here., Get All Tag Types - This node collects the tag types in the model., GetParameterValueByName(TypeOrInstance) - Gets a parameter value by name regardless of type or instance., GetParameterValueByNameAsString - Returns paramter value as string. Same effect as lunchbox node, without python., Inspiration.BuffettNode - This is a result of \"what if?\" thinking. The output is a random Warren Buffett quote from brainyquotes.com, Inspiration.CarreyNode - This is a result of \"what if?\" thinking. The output is a random Jim Carrey quote from brainyquotes.com, Inspiration.CashNode - This is a result of \"what if?\" thinking. The output is a random Johnny Cash quote from brainyquotes.com, Inspiration.MarleyNode - This is a result of \"what if?\" thinking. The output is a random Bob Marley quote from brainyquotes.com, Inspiration.SearchQuoteNode - This is a result of \"what if?\" thinking. The output is a random quote based on the search criteria from brainyquotes.com. (As long as it is on the site), Inspiration.TeresaNode - This is a result of \"what if?\" thinking. The output is a random Mother Teresa quote from brainyquotes.com, Level Element Collector - This collects data for all of the Level elements in the model. Similar to the node on Lunchbox, but this one uses all O.O.B. nodes., List.AllIndicesOf - Given an item, returns the zero-based indices of all its occurrences in the list. If the item cannot be found, an empty list is returned. , List.Contains - Determines if the given list contains the item or items., List.GetItemIndices - This node searches the input list for the given string or number., List.MergeSublists - This will merge all sublists with or without a character between the strings., LRE - Start of left-to-right embedding Unicode Character, LRM - Left-to-right mark unicode character, OS.CurrentUser - This node retrieves the current user logged in., OS.CurrentUserAppData - This retrieves the current user's appdata location, Output.Clean - This will return a single value or list from one input., Override Cut Lineweight - Overrides the cut lines of the elements, Override Projection Line Color - This node overrides the projection line color with the input color value. Useful for annotation., Override Projection Lineweight - Overrides the line thickness of projection lines, Parametric Graphic Scale - This node automates the graphic scale assigned per viewport. The input required is all instances of viewport category. It also requires shared parameters. Visit sixtysecondrevit.blogspot.com for details., RemoveListFromList - This node essentially \"subtracts\" the contents of List B from List A to produce a new list with the unique items., Rhythm.PercentGlazingByOrientation - This node was show at RTCNA2015 to optimize your workflows. It reports the window to wall % by direction the wall faces., Rhythm.Toggle - Toggle that offers two outputs. Created for Dynamo 0.8.1 because of changes to the \"IF\" node, RLE - Start of right-to-left embedding Unicode Character, RLM - Right-to-left mark Unicode character, Room Element Collector - THis will collect data regarding rooms in the active model. Similar to Lunchbox node, but this one does not use python., SetParameterByName(TypeOrInstance) - Set one of the element's parameters regardless of parameter type or instance., SquareFeetDropper - This node drops square feet from the pulled area, String.CharacterAtIndex - Get's the character at a given index, String.FlipReverse - This node flips the string and reverses it. (April Fools '15) Works for 0.8.0 only, added unicode support, String.IndicesOfCharacter - This node gets all the indices of a given character, String.RemoveAfterGivenCharacter - This will move all characters at and after the given character., String.RemovePriorToCharacter - This will remove all characters prior to the input character. Accepts strings., String.SpecifyDecimalPlaces - This node will take your inout string and number of decimal places to create a new simplified output., TextElement.ToLower - This node converts a Revit text elemnt to upper directly., TextElement.ToTitle - This node converts a Revit text elemnt to upper directly., TextElement.ToUpper - This node converts a Revit text elemnt to upper directly., Wall.NorthSouthEastWest - This node determines which direction a wall is facing and groups them by the direction or direction they are closest to., Workset.Create - Creates a workset or worksets from input names., ZWJ - Zero width joiner Unicode Character, ZWNJ - Zero width non-joiner Unicode Character, Viewport.ViewName - This node gets the view name of viewports. There is an issue when \"title on sheet\" is used, so this fixes that., Rhythm.Detail Number by View Name  - Automatically numbers your detail number based on the first two characters of your view name. i.e. A4/... (Requires slash to be present)",
            "engine_metadata": "",
            "engine_version": "0.8.1.1823",
            "created": "2015-08-18T15:13:34.243Z",
            "full_dependency_versions": [ "2015.8.15" ],
            "full_dependency_ids": [
              {
                "_id": "54e7add1dcee4dfd26000101",
                "name": "Rhythm"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2015.8.15"
          },
          {
            "_id": "55f184b1662bf0e908000167",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/97abaf1b-5525-44c1-87d6-5e19a9fa72b0gregPkg983.zip",
            "contents": "All Framing at Reference Level - Collects all of the structural framing at a specific reference level, All Upper - This converts the ase of selected items to UPPER. Inputs require booleans to enable for category., Arrowhead Assigner - This node assings the arrowhead type for all text and keynote tags. There is an input for ones you want to exclude., Ayuda.IsArchi-LabInstalled - This node determines if Archi-Lab is installed. Useful with a toggle., Ayuda.IsClockworkInstalled - This node determines if clockwork is installed. Useful with a toggle., Ayuda.IsSteamNodesInstalled - This node determines if steamnodes is installed. Useful with a toggle.;, Ayuda.ThisOrThat - This node is a toggle between two inputs., Collector.DuctsBySystem - This collects all ducts in the project and organizes them by System Classification, Collector.KeynoteTags - This collects all of the keynote tags in the model. Similar to other nodes, but this doesn't use python., Collector.LabelTypes - This node collects all of the label types for the active family document., Collector.PipesBySystem - This collects all pipes in the project and organizes them by System Classification, Collector.Viewports - This collects all of the viewports in the model and outputs the name, title on sheet, scale and viewport type., Dash Remover - This node removes the dash at index 2 if it exists. The reason being, NCS states that no dash shall be used., Element.AreaWithTotal - This will get the area of an element if the parameter exists. Will total as well if needed., Element.GetLevelNameAsString - This retrieves the level name of the input elements as a string. This is in response to a known issue with the get value node., Element.GetMultipleParameterValuesByName - Get the value of multiple parameters from elements. (Seperate parameters with comma), Element.GetParameterValueByName(CaSe iNSeNSiTive) - Get the value of one of the element's parameters. (CaSe iNSeNSiTiVe), Element.Room - This node takes the input of all elements of category and reports back the associated room per element. Currently tested with casework, furniture and plumbing fixtures., Element.SetMultipleParametersByName - Set multiple (comma seperated) parameters by name., Element.SetParameterByName(CaSe iNSeNSiTiVe) - Set one of the element's parameters. (CaSe iNSeNSiTiVe), Element.Type - This retrieves the element type of the given elements. (if available) Similar to others available but no python here., Get All Tag Types - This node collects the tag types in the model., GetParameterValueByName(TypeOrInstance) - Gets a parameter value by name regardless of type or instance., GetParameterValueByNameAsString - Returns paramter value as string. Same effect as lunchbox node, without python., Inspiration.BuffettNode - This is a result of \"what if?\" thinking. The output is a random Warren Buffett quote from brainyquotes.com, Inspiration.CarreyNode - This is a result of \"what if?\" thinking. The output is a random Jim Carrey quote from brainyquotes.com, Inspiration.CashNode - This is a result of \"what if?\" thinking. The output is a random Johnny Cash quote from brainyquotes.com, Inspiration.MarleyNode - This is a result of \"what if?\" thinking. The output is a random Bob Marley quote from brainyquotes.com, Inspiration.SearchQuoteNode - This is a result of \"what if?\" thinking. The output is a random quote based on the search criteria from brainyquotes.com. (As long as it is on the site), Inspiration.TeresaNode - This is a result of \"what if?\" thinking. The output is a random Mother Teresa quote from brainyquotes.com, Level Element Collector - This collects data for all of the Level elements in the model. Similar to the node on Lunchbox, but this one uses all O.O.B. nodes., List.AllIndicesOf - Given an item, returns the zero-based indices of all its occurrences in the list. If the item cannot be found, an empty list is returned. , List.Contains - Determines if the given list contains the item or items., List.GetItemIndices - This node searches the input list for the given string or number., List.MergeSublists - This will merge all sublists with or without a character between the strings., LRE - Start of left-to-right embedding Unicode Character, LRM - Left-to-right mark unicode character, OS.CurrentUser - This node retrieves the current user logged in., OS.CurrentUserAppData - This retrieves the current user's appdata location, Output.Clean - This will return a single value or list from one input., Override Cut Lineweight - Overrides the cut lines of the elements, Override Projection Line Color - This node overrides the projection line color with the input color value. Useful for annotation., Override Projection Lineweight - Overrides the line thickness of projection lines, Parametric Graphic Scale - This node automates the graphic scale assigned per viewport. The input required is all instances of viewport category. It also requires shared parameters. Visit sixtysecondrevit.blogspot.com for details., RemoveListFromList - This node essentially \"subtracts\" the contents of List B from List A to produce a new list with the unique items., Rhythm.Detail Number by View Name  - Automatically numbers your detail number based on the first two characters of your view name. i.e. A4/... (Requires slash to be present), Rhythm.PercentGlazingByOrientation - This node was show at RTCNA2015 to optimize your workflows. It reports the window to wall % by direction the wall faces., Rhythm.Toggle - Toggle that offers two outputs. Created for Dynamo 0.8.1 because of changes to the \"IF\" node, RLE - Start of right-to-left embedding Unicode Character, RLM - Right-to-left mark Unicode character, Room Element Collector - THis will collect data regarding rooms in the active model. Similar to Lunchbox node, but this one does not use python., SetParameterByName(TypeOrInstance) - Set one of the element's parameters regardless of parameter type or instance., SquareFeetDropper - This node drops square feet from the pulled area, String.CharacterAtIndex - Get's the character at a given index, String.FlipReverse - This node flips the string and reverses it. (April Fools '15) Works for 0.8.0 only, added unicode support, String.IndicesOfCharacter - This node gets all the indices of a given character, String.RemoveAfterGivenCharacter - This will move all characters at and after the given character., String.RemovePriorToCharacter - This will remove all characters prior to the input character. Accepts strings., String.SpecifyDecimalPlaces - This node will take your inout string and number of decimal places to create a new simplified output., TextElement.ToLower - This node converts a Revit text elemnt to upper directly., TextElement.ToTitle - This node converts a Revit text elemnt to upper directly., TextElement.ToUpper - This node converts a Revit text elemnt to upper directly., Viewport.ViewName - This node gets the view name of viewports. There is an issue when \"title on sheet\" is used, so this fixes that., Wall.NorthSouthEastWest - This node determines which direction a wall is facing and groups them by the direction or direction they are closest to., Workset.Create - Creates a workset or worksets from input names., ZWJ - Zero width joiner Unicode Character, ZWNJ - Zero width non-joiner Unicode Character",
            "engine_metadata": "",
            "engine_version": "0.8.2.2392",
            "created": "2015-09-10T13:25:05.831Z",
            "full_dependency_versions": [ "2015.9.6" ],
            "full_dependency_ids": [
              {
                "_id": "54e7add1dcee4dfd26000101",
                "name": "Rhythm"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2015.9.6"
          },
          {
            "_id": "55f6e42b662bf0e908000179",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/cb654dd4-d2a1-4345-a97e-d47daf714201gregPkg424.zip",
            "contents": "All Framing at Reference Level - Collects all of the structural framing at a specific reference level, All Upper - This converts the ase of selected items to UPPER. Inputs require booleans to enable for category., Arrowhead Assigner - This node assings the arrowhead type for all text and keynote tags. There is an input for ones you want to exclude., Ayuda.IsArchi-LabInstalled - This node determines if Archi-Lab is installed. Useful with a toggle., Ayuda.IsClockworkInstalled - This node determines if clockwork is installed. Useful with a toggle., Ayuda.IsSteamNodesInstalled - This node determines if steamnodes is installed. Useful with a toggle.;, Ayuda.ThisOrThat - This node is a toggle between two inputs., Collector.DuctsBySystem - This collects all ducts in the project and organizes them by System Classification, Collector.KeynoteTags - This collects all of the keynote tags in the model. Similar to other nodes, but this doesn't use python., Collector.LabelTypes - This node collects all of the label types for the active family document., Collector.PipesBySystem - This collects all pipes in the project and organizes them by System Classification, Collector.Viewports - This collects all of the viewports in the model and outputs the name, title on sheet, scale and viewport type., Dash Remover - This node removes the dash at index 2 if it exists. The reason being, NCS states that no dash shall be used., Element.AreaWithTotal - This will get the area of an element if the parameter exists. Will total as well if needed., Element.GetLevelNameAsString - This retrieves the level name of the input elements as a string. This is in response to a known issue with the get value node., Element.GetMultipleParameterValuesByName - Get the value of multiple parameters from elements. (Seperate parameters with comma), Element.GetParameterValueByName(CaSe iNSeNSiTive) - Get the value of one of the element's parameters. (CaSe iNSeNSiTiVe), Element.Room - This node takes the input of all elements of category and reports back the associated room per element. Currently tested with casework, furniture and plumbing fixtures., Element.SetMultipleParametersByName - Set multiple (comma seperated) parameters by name., Element.SetParameterByName(CaSe iNSeNSiTiVe) - Set one of the element's parameters. (CaSe iNSeNSiTiVe), Element.Type - This retrieves the element type of the given elements. (if available) Similar to others available but no python here., Get All Tag Types - This node collects the tag types in the model., GetParameterValueByName(TypeOrInstance) - Gets a parameter value by name regardless of type or instance., GetParameterValueByNameAsString - Returns paramter value as string. Same effect as lunchbox node, without python., Inspiration.BuffettNode - This is a result of \"what if?\" thinking. The output is a random Warren Buffett quote from brainyquotes.com, Inspiration.CarreyNode - This is a result of \"what if?\" thinking. The output is a random Jim Carrey quote from brainyquotes.com, Inspiration.CashNode - This is a result of \"what if?\" thinking. The output is a random Johnny Cash quote from brainyquotes.com, Inspiration.MarleyNode - This is a result of \"what if?\" thinking. The output is a random Bob Marley quote from brainyquotes.com, Inspiration.SearchQuoteNode - This is a result of \"what if?\" thinking. The output is a random quote based on the search criteria from brainyquotes.com. (As long as it is on the site), Inspiration.TeresaNode - This is a result of \"what if?\" thinking. The output is a random Mother Teresa quote from brainyquotes.com, Level Element Collector - This collects data for all of the Level elements in the model. Similar to the node on Lunchbox, but this one uses all O.O.B. nodes., List.AllIndicesOf - Given an item, returns the zero-based indices of all its occurrences in the list. If the item cannot be found, an empty list is returned. , List.Contains - Determines if the given list contains the item or items., List.GetItemIndices - This node searches the input list for the given string or number., List.MergeSublists - This will merge all sublists with or without a character between the strings., LRE - Start of left-to-right embedding Unicode Character, LRM - Left-to-right mark unicode character, OS.CurrentUser - This node retrieves the current user logged in., OS.CurrentUserAppData - This retrieves the current user's appdata location, Output.Clean - This will return a single value or list from one input., Override Cut Lineweight - Overrides the cut lines of the elements, Override Projection Line Color - This node overrides the projection line color with the input color value. Useful for annotation., Override Projection Lineweight - Overrides the line thickness of projection lines, Parametric Graphic Scale - This node automates the graphic scale assigned per viewport. The input required is all instances of viewport category. It also requires shared parameters. Visit sixtysecondrevit.blogspot.com for details., RemoveListFromList - This node essentially \"subtracts\" the contents of List B from List A to produce a new list with the unique items., Rhythm.Detail Number by View Name  - Automatically numbers your detail number based on the first two characters of your view name. i.e. A4/... (Requires slash to be present), Rhythm.PercentGlazingByOrientation - This node was show at RTCNA2015 to optimize your workflows. It reports the window to wall % by direction the wall faces., Rhythm.Toggle - Toggle that offers two outputs. Created for Dynamo 0.8.1 because of changes to the \"IF\" node, RLE - Start of right-to-left embedding Unicode Character, RLM - Right-to-left mark Unicode character, Room Element Collector - THis will collect data regarding rooms in the active model. Similar to Lunchbox node, but this one does not use python., SetParameterByName(TypeOrInstance) - Set one of the element's parameters regardless of parameter type or instance., SquareFeetDropper - This node drops square feet from the pulled area, String.CharacterAtIndex - Get's the character at a given index, String.FlipReverse - This node flips the string and reverses it. (April Fools '15) Works for 0.8.0 only, added unicode support, String.IndicesOfCharacter - This node gets all the indices of a given character, String.RemoveAfterGivenCharacter - This will move all characters at and after the given character., String.RemovePriorToCharacter - This will remove all characters prior to the input character. Accepts strings., String.SpecifyDecimalPlaces - This node will take your inout string and number of decimal places to create a new simplified output., TextElement.ToLower - This node converts a Revit text elemnt to upper directly., TextElement.ToTitle - This node converts a Revit text elemnt to upper directly., TextElement.ToUpper - This node converts a Revit text elemnt to upper directly., Viewport.ViewName - This node gets the view name of viewports. There is an issue when \"title on sheet\" is used, so this fixes that., Wall.NorthSouthEastWest - This node determines which direction a wall is facing and groups them by the direction or direction they are closest to., Workset.Create - Creates a workset or worksets from input names., ZWJ - Zero width joiner Unicode Character, ZWNJ - Zero width non-joiner Unicode Character, Element.Category - This node will get the input element(s)' categories",
            "engine_metadata": "",
            "engine_version": "0.8.2.2392",
            "created": "2015-09-14T15:13:47.497Z",
            "full_dependency_versions": [ "2015.9.12" ],
            "full_dependency_ids": [
              {
                "_id": "54e7add1dcee4dfd26000101",
                "name": "Rhythm"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2015.9.12"
          },
          {
            "_id": "55fad34f662bf0e90800019b",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/0e148f73-9521-4f81-8d0c-ee5e41dd702egregPkg901.zip",
            "contents": "All Framing at Reference Level - Collects all of the structural framing at a specific reference level, All Upper - This converts the ase of selected items to UPPER. Inputs require booleans to enable for category., Arrowhead Assigner - This node assings the arrowhead type for all text and keynote tags. There is an input for ones you want to exclude., Ayuda.IsArchi-LabInstalled - This node determines if Archi-Lab is installed. Useful with a toggle., Ayuda.IsClockworkInstalled - This node determines if clockwork is installed. Useful with a toggle., Ayuda.IsSteamNodesInstalled - This node determines if steamnodes is installed. Useful with a toggle.;, Ayuda.ThisOrThat - This node is a toggle between two inputs., Collector.DuctsBySystem - This collects all ducts in the project and organizes them by System Classification, Collector.KeynoteTags - This collects all of the keynote tags in the model. Similar to other nodes, but this doesn't use python., Collector.LabelTypes - This node collects all of the label types for the active family document., Collector.PipesBySystem - This collects all pipes in the project and organizes them by System Classification, Collector.Viewports - This collects all of the viewports in the model and outputs the name, title on sheet, scale and viewport type., Dash Remover - This node removes the dash at index 2 if it exists. The reason being, NCS states that no dash shall be used., Element.AreaWithTotal - This will get the area of an element if the parameter exists. Will total as well if needed., Element.Category - This node will get the input element(s)' categories, Element.GetLevelNameAsString - This retrieves the level name of the input elements as a string. This is in response to a known issue with the get value node., Element.GetMultipleParameterValuesByName - Get the value of multiple parameters from elements. (Seperate parameters with comma), Element.GetParameterValueByName(CaSe iNSeNSiTive) - Get the value of one of the element's parameters. (CaSe iNSeNSiTiVe), Element.Room - This node takes the input of all elements of category and reports back the associated room per element. Currently tested with casework, furniture and plumbing fixtures., Element.SetMultipleParametersByName - Set multiple (comma seperated) parameters by name., Element.SetParameterByName(CaSe iNSeNSiTiVe) - Set one of the element's parameters. (CaSe iNSeNSiTiVe), Element.Type - This retrieves the element type of the given elements. (if available) Similar to others available but no python here., Get All Tag Types - This node collects the tag types in the model., GetParameterValueByName(TypeOrInstance) - Gets a parameter value by name regardless of type or instance., GetParameterValueByNameAsString - Returns paramter value as string. Same effect as lunchbox node, without python., Inspiration.BuffettNode - This is a result of \"what if?\" thinking. The output is a random Warren Buffett quote from brainyquotes.com, Inspiration.CarreyNode - This is a result of \"what if?\" thinking. The output is a random Jim Carrey quote from brainyquotes.com, Inspiration.CashNode - This is a result of \"what if?\" thinking. The output is a random Johnny Cash quote from brainyquotes.com, Inspiration.MarleyNode - This is a result of \"what if?\" thinking. The output is a random Bob Marley quote from brainyquotes.com, Inspiration.SearchQuoteNode - This is a result of \"what if?\" thinking. The output is a random quote based on the search criteria from brainyquotes.com. (As long as it is on the site), Inspiration.TeresaNode - This is a result of \"what if?\" thinking. The output is a random Mother Teresa quote from brainyquotes.com, Level Element Collector - This collects data for all of the Level elements in the model. Similar to the node on Lunchbox, but this one uses all O.O.B. nodes., List.AllIndicesOf - Given an item, returns the zero-based indices of all its occurrences in the list. If the item cannot be found, an empty list is returned. , List.Contains - Determines if the given list contains the item or items., List.GetItemIndices - This node searches the input list for the given string or number., List.MergeSublists - This will merge all sublists with or without a character between the strings., LRE - Start of left-to-right embedding Unicode Character, LRM - Left-to-right mark unicode character, OS.CurrentUser - This node retrieves the current user logged in., OS.CurrentUserAppData - This retrieves the current user's appdata location, Output.Clean - This will return a single value or list from one input., Override Cut Lineweight - Overrides the cut lines of the elements, Override Projection Line Color - This node overrides the projection line color with the input color value. Useful for annotation., Override Projection Lineweight - Overrides the line thickness of projection lines, Parametric Graphic Scale - This node automates the graphic scale assigned per viewport. The input required is all instances of viewport category. It also requires shared parameters. Visit sixtysecondrevit.blogspot.com for details., RemoveListFromList - This node essentially \"subtracts\" the contents of List B from List A to produce a new list with the unique items., Rhythm.Detail Number by View Name  - Automatically numbers your detail number based on the first two characters of your view name. i.e. A4/... (Requires slash to be present), Rhythm.PercentGlazingByOrientation - This node was show at RTCNA2015 to optimize your workflows. It reports the window to wall % by direction the wall faces., Rhythm.Toggle - Toggle that offers two outputs. Created for Dynamo 0.8.1 because of changes to the \"IF\" node, RLE - Start of right-to-left embedding Unicode Character, RLM - Right-to-left mark Unicode character, Room Element Collector - THis will collect data regarding rooms in the active model. Similar to Lunchbox node, but this one does not use python., SetParameterByName(TypeOrInstance) - Set one of the element's parameters regardless of parameter type or instance., SquareFeetDropper - This node drops square feet from the pulled area, String.CharacterAtIndex - Get's the character at a given index, String.FlipReverse - This node flips the string and reverses it. (April Fools '15) Works for 0.8.0 only, added unicode support, String.IndicesOfCharacter - This node gets all the indices of a given character, String.RemoveAfterGivenCharacter - This will move all characters at and after the given character., String.RemovePriorToCharacter - This will remove all characters prior to the input character. Accepts strings., String.SpecifyDecimalPlaces - This node will take your inout string and number of decimal places to create a new simplified output., TextElement.ToLower - This node converts a Revit text elemnt to upper directly., TextElement.ToTitle - This node converts a Revit text elemnt to upper directly., TextElement.ToUpper - This node converts a Revit text elemnt to upper directly., Viewport.ViewName - This node gets the view name of viewports. There is an issue when \"title on sheet\" is used, so this fixes that., Wall.NorthSouthEastWest - This node determines which direction a wall is facing and groups them by the direction or direction they are closest to., Workset.Create - Creates a workset or worksets from input names., ZWJ - Zero width joiner Unicode Character, ZWNJ - Zero width non-joiner Unicode Character, Rhythm.BackupRFADeleter - This node will scan the contents of a driectory and delete backup RFA files that appear with a four digit backup number before the file extension. (eg. Family1.0001.rfa) This is deleting files so please use with caution!",
            "engine_metadata": "",
            "engine_version": "0.8.2.2392",
            "created": "2015-09-17T14:50:55.278Z",
            "full_dependency_versions": [ "2015.9.15" ],
            "full_dependency_ids": [
              {
                "_id": "54e7add1dcee4dfd26000101",
                "name": "Rhythm"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2015.9.15"
          },
          {
            "_id": "56015b65662bf0e9080001ba",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/c8a9cbcf-a3dd-442e-8f41-ff320a369927gregPkg48.zip",
            "contents": "All Framing at Reference Level - Collects all of the structural framing at a specific reference level, All Upper - This converts the ase of selected items to UPPER. Inputs require booleans to enable for category., Arrowhead Assigner - This node assings the arrowhead type for all text and keynote tags. There is an input for ones you want to exclude., Ayuda.IsArchi-LabInstalled - This node determines if Archi-Lab is installed. Useful with a toggle., Ayuda.IsClockworkInstalled - This node determines if clockwork is installed. Useful with a toggle., Ayuda.IsSteamNodesInstalled - This node determines if steamnodes is installed. Useful with a toggle.;, Ayuda.ThisOrThat - This node is a toggle between two inputs., Collector.DuctsBySystem - This collects all ducts in the project and organizes them by System Classification, Collector.KeynoteTags - This collects all of the keynote tags in the model. Similar to other nodes, but this doesn't use python., Collector.LabelTypes - This node collects all of the label types for the active family document., Collector.PipesBySystem - This collects all pipes in the project and organizes them by System Classification, Collector.Viewports - This collects all of the viewports in the model and outputs the name, title on sheet, scale and viewport type., Dash Remover - This node removes the dash at index 2 if it exists. The reason being, NCS states that no dash shall be used., Element.AreaWithTotal - This will get the area of an element if the parameter exists. Will total as well if needed., Element.Category - This node will get the input element(s)' categories, Element.GetLevelNameAsString - This retrieves the level name of the input elements as a string. This is in response to a known issue with the get value node., Element.GetMultipleParameterValuesByName - Get the value of multiple parameters from elements. (Seperate parameters with comma), Element.GetParameterValueByName(CaSe iNSeNSiTive) - Get the value of one of the element's parameters. (CaSe iNSeNSiTiVe), Element.Room - This node takes the input of all elements of category and reports back the associated room per element. Currently tested with casework, furniture and plumbing fixtures., Element.SetMultipleParametersByName - Set multiple (comma seperated) parameters by name., Element.SetParameterByName(CaSe iNSeNSiTiVe) - Set one of the element's parameters. (CaSe iNSeNSiTiVe), Element.Type - This retrieves the element type of the given elements. (if available) Similar to others available but no python here., Get All Tag Types - This node collects the tag types in the model., GetParameterValueByName(TypeOrInstance) - Gets a parameter value by name regardless of type or instance., GetParameterValueByNameAsString - Returns paramter value as string. Same effect as lunchbox node, without python., Inspiration.BuffettNode - This is a result of \"what if?\" thinking. The output is a random Warren Buffett quote from brainyquotes.com, Inspiration.CarreyNode - This is a result of \"what if?\" thinking. The output is a random Jim Carrey quote from brainyquotes.com, Inspiration.CashNode - This is a result of \"what if?\" thinking. The output is a random Johnny Cash quote from brainyquotes.com, Inspiration.MarleyNode - This is a result of \"what if?\" thinking. The output is a random Bob Marley quote from brainyquotes.com, Inspiration.SearchQuoteNode - This is a result of \"what if?\" thinking. The output is a random quote based on the search criteria from brainyquotes.com. (As long as it is on the site), Inspiration.TeresaNode - This is a result of \"what if?\" thinking. The output is a random Mother Teresa quote from brainyquotes.com, Level Element Collector - This collects data for all of the Level elements in the model. Similar to the node on Lunchbox, but this one uses all O.O.B. nodes., List.AllIndicesOf - Given an item, returns the zero-based indices of all its occurrences in the list. If the item cannot be found, an empty list is returned. , List.Contains - Determines if the given list contains the item or items., List.GetItemIndices - This node searches the input list for the given string or number., List.MergeSublists - This will merge all sublists with or without a character between the strings., LRE - Start of left-to-right embedding Unicode Character, LRM - Left-to-right mark unicode character, OS.CurrentUser - This node retrieves the current user logged in., OS.CurrentUserAppData - This retrieves the current user's appdata location, Output.Clean - This will return a single value or list from one input., Override Cut Lineweight - Overrides the cut lines of the elements, Override Projection Line Color - This node overrides the projection line color with the input color value. Useful for annotation., Override Projection Lineweight - Overrides the line thickness of projection lines, Parametric Graphic Scale - This node automates the graphic scale assigned per viewport. The input required is all instances of viewport category. It also requires shared parameters. Visit sixtysecondrevit.blogspot.com for details., RemoveListFromList - This node essentially \"subtracts\" the contents of List B from List A to produce a new list with the unique items., Rhythm.BackupRFADeleter - This node will scan the contents of a driectory and delete backup RFA files that appear with a four digit backup number before the file extension. (eg. Family1.0001.rfa) This is deleting files so please use with caution!, Rhythm.Detail Number by View Name  - Automatically numbers your detail number based on the first two characters of your view name. i.e. A4/... (Requires slash to be present), Rhythm.PercentGlazingByOrientation - This node was show at RTCNA2015 to optimize your workflows. It reports the window to wall % by direction the wall faces., Rhythm.Toggle - Toggle that offers two outputs. Created for Dynamo 0.8.1 because of changes to the \"IF\" node, RLE - Start of right-to-left embedding Unicode Character, RLM - Right-to-left mark Unicode character, Room Element Collector - THis will collect data regarding rooms in the active model. Similar to Lunchbox node, but this one does not use python., SetParameterByName(TypeOrInstance) - Set one of the element's parameters regardless of parameter type or instance., SquareFeetDropper - This node drops square feet from the pulled area, String.CharacterAtIndex - Get's the character at a given index, String.FlipReverse - This node flips the string and reverses it. (April Fools '15) Works for 0.8.0 only, added unicode support, String.IndicesOfCharacter - This node gets all the indices of a given character, String.RemoveAfterGivenCharacter - This will move all characters at and after the given character., String.RemovePriorToCharacter - This will remove all characters prior to the input character. Accepts strings., String.SpecifyDecimalPlaces - This node will take your inout string and number of decimal places to create a new simplified output., TextElement.ToLower - This node converts a Revit text elemnt to upper directly., TextElement.ToTitle - This node converts a Revit text elemnt to upper directly., TextElement.ToUpper - This node converts a Revit text elemnt to upper directly., Viewport.ViewName - This node gets the view name of viewports. There is an issue when \"title on sheet\" is used, so this fixes that., Wall.NorthSouthEastWest - This node determines which direction a wall is facing and groups them by the direction or direction they are closest to., Workset.Create - Creates a workset or worksets from input names., ZWJ - Zero width joiner Unicode Character, ZWNJ - Zero width non-joiner Unicode Character, Element.ParentFamily - This node retrieces the parent family name for each input element.",
            "engine_metadata": "",
            "engine_version": "0.8.2.2392",
            "created": "2015-09-22T13:45:09.501Z",
            "full_dependency_versions": [ "2015.9.20" ],
            "full_dependency_ids": [
              {
                "_id": "54e7add1dcee4dfd26000101",
                "name": "Rhythm"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2015.9.20"
          },
          {
            "_id": "5602ac3c662bf0e9080001ce",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/a1850a7f-e4f7-4ed8-96fe-14a0c40ad36egregPkg248.zip",
            "contents": "All Framing at Reference Level - Collects all of the structural framing at a specific reference level, All Upper - This converts the ase of selected items to UPPER. Inputs require booleans to enable for category., Arrowhead Assigner - This node assings the arrowhead type for all text and keynote tags. There is an input for ones you want to exclude., Ayuda.IsArchi-LabInstalled - This node determines if Archi-Lab is installed. Useful with a toggle., Ayuda.IsClockworkInstalled - This node determines if clockwork is installed. Useful with a toggle., Ayuda.IsSteamNodesInstalled - This node determines if steamnodes is installed. Useful with a toggle.;, Ayuda.ThisOrThat - This node is a toggle between two inputs., Collector.DuctsBySystem - This collects all ducts in the project and organizes them by System Classification, Collector.KeynoteTags - This collects all of the keynote tags in the model. Similar to other nodes, but this doesn't use python., Collector.LabelTypes - This node collects all of the label types for the active family document., Collector.PipesBySystem - This collects all pipes in the project and organizes them by System Classification, Collector.Viewports - This collects all of the viewports in the model and outputs the name, title on sheet, scale and viewport type., Dash Remover - This node removes the dash at index 2 if it exists. The reason being, NCS states that no dash shall be used., Element.AreaWithTotal - This will get the area of an element if the parameter exists. Will total as well if needed., Element.Category - This node will get the input element(s)' categories, Element.GetLevelNameAsString - This retrieves the level name of the input elements as a string. This is in response to a known issue with the get value node., Element.GetMultipleParameterValuesByName - Get the value of multiple parameters from elements. (Seperate parameters with comma), Element.GetParameterValueByName(CaSe iNSeNSiTive) - Get the value of one of the element's parameters. (CaSe iNSeNSiTiVe), Element.ParentFamily - This node retrieces the parent family name for each input element., Element.Room - This node takes the input of all elements of category and reports back the associated room per element. Currently tested with casework, furniture and plumbing fixtures., Element.SetMultipleParametersByName - Set multiple (comma seperated) parameters by name., Element.SetParameterByName(CaSe iNSeNSiTiVe) - Set one of the element's parameters. (CaSe iNSeNSiTiVe), Element.Type - This retrieves the element type of the given elements. (if available) Similar to others available but no python here., Get All Tag Types - This node collects the tag types in the model., GetParameterValueByName(TypeOrInstance) - Gets a parameter value by name regardless of type or instance., GetParameterValueByNameAsString - Returns paramter value as string. Same effect as lunchbox node, without python., Inspiration.BuffettNode - This is a result of \"what if?\" thinking. The output is a random Warren Buffett quote from brainyquotes.com, Inspiration.CarreyNode - This is a result of \"what if?\" thinking. The output is a random Jim Carrey quote from brainyquotes.com, Inspiration.CashNode - This is a result of \"what if?\" thinking. The output is a random Johnny Cash quote from brainyquotes.com, Inspiration.MarleyNode - This is a result of \"what if?\" thinking. The output is a random Bob Marley quote from brainyquotes.com, Inspiration.SearchQuoteNode - This is a result of \"what if?\" thinking. The output is a random quote based on the search criteria from brainyquotes.com. (As long as it is on the site), Inspiration.TeresaNode - This is a result of \"what if?\" thinking. The output is a random Mother Teresa quote from brainyquotes.com, Level Element Collector - This collects data for all of the Level elements in the model. Similar to the node on Lunchbox, but this one uses all O.O.B. nodes., List.AllIndicesOf - Given an item, returns the zero-based indices of all its occurrences in the list. If the item cannot be found, an empty list is returned. , List.Contains - Determines if the given list contains the item or items., List.GetItemIndices - This node searches the input list for the given string or number., List.MergeSublists - This will merge all sublists with or without a character between the strings., LRE - Start of left-to-right embedding Unicode Character, LRM - Left-to-right mark unicode character, OS.CurrentUser - This node retrieves the current user logged in., OS.CurrentUserAppData - This retrieves the current user's appdata location, Output.Clean - This will return a single value or list from one input., Override Cut Lineweight - Overrides the cut lines of the elements, Override Projection Line Color - This node overrides the projection line color with the input color value. Useful for annotation., Override Projection Lineweight - Overrides the line thickness of projection lines, Parametric Graphic Scale - This node automates the graphic scale assigned per viewport. The input required is all instances of viewport category. It also requires shared parameters. Visit sixtysecondrevit.blogspot.com for details., RemoveListFromList - This node essentially \"subtracts\" the contents of List B from List A to produce a new list with the unique items., Rhythm.BackupRFADeleter - This node will scan the contents of a driectory and delete backup RFA files that appear with a four digit backup number before the file extension. (eg. Family1.0001.rfa) This is deleting files so please use with caution!, Rhythm.Detail Number by View Name  - Automatically numbers your detail number based on the first two characters of your view name. i.e. A4/... (Requires slash to be present), Rhythm.PercentGlazingByOrientation - This node was show at RTCNA2015 to optimize your workflows. It reports the window to wall % by direction the wall faces., Rhythm.Toggle - Toggle that offers two outputs. Created for Dynamo 0.8.1 because of changes to the \"IF\" node, RLE - Start of right-to-left embedding Unicode Character, RLM - Right-to-left mark Unicode character, Room Element Collector - THis will collect data regarding rooms in the active model. Similar to Lunchbox node, but this one does not use python., SetParameterByName(TypeOrInstance) - Set one of the element's parameters regardless of parameter type or instance., SquareFeetDropper - This node drops square feet from the pulled area, String.CharacterAtIndex - Get's the character at a given index, String.FlipReverse - This node flips the string and reverses it. (April Fools '15) Works for 0.8.0 only, added unicode support, String.IndicesOfCharacter - This node gets all the indices of a given character, String.RemoveAfterGivenCharacter - This will move all characters at and after the given character., String.RemovePriorToCharacter - This will remove all characters prior to the input character. Accepts strings., String.SpecifyDecimalPlaces - This node will take your inout string and number of decimal places to create a new simplified output., TextElement.ToLower - This node converts a Revit text elemnt to upper directly., TextElement.ToTitle - This node converts a Revit text elemnt to upper directly., TextElement.ToUpper - This node converts a Revit text elemnt to upper directly., Viewport.ViewName - This node gets the view name of viewports. There is an issue when \"title on sheet\" is used, so this fixes that., Wall.NorthSouthEastWest - This node determines which direction a wall is facing and groups them by the direction or direction they are closest to., Workset.Create - Creates a workset or worksets from input names., ZWJ - Zero width joiner Unicode Character, ZWNJ - Zero width non-joiner Unicode Character, Rhythm.RenumberRoomsByCurve - This node will renumber rooms along a curve path. This was developed through the guidance of WIlliam Wong at case. Considering WeWork bought Case I wanted this node to live somewhere.",
            "engine_metadata": "",
            "engine_version": "0.8.2.2392",
            "created": "2015-09-23T13:42:20.935Z",
            "full_dependency_versions": [ "2015.9.21" ],
            "full_dependency_ids": [
              {
                "_id": "54e7add1dcee4dfd26000101",
                "name": "Rhythm"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2015.9.21"
          },
          {
            "_id": "560eaf51662bf0e908000220",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/43a3a33a-2174-4405-91e0-d6dffc0ae2eagregPkg129.zip",
            "contents": "All Framing at Reference Level - Collects all of the structural framing at a specific reference level, All Upper - This converts the ase of selected items to UPPER. Inputs require booleans to enable for category., Arrowhead Assigner - This node assings the arrowhead type for all text and keynote tags. There is an input for ones you want to exclude., Ayuda.IsArchi-LabInstalled - This node determines if Archi-Lab is installed. Useful with a toggle., Ayuda.IsClockworkInstalled - This node determines if clockwork is installed. Useful with a toggle., Ayuda.IsSteamNodesInstalled - This node determines if steamnodes is installed. Useful with a toggle.;, Ayuda.ThisOrThat - This node is a toggle between two inputs., Collector.DuctsBySystem - This collects all ducts in the project and organizes them by System Classification, Collector.KeynoteTags - This collects all of the keynote tags in the model. Similar to other nodes, but this doesn't use python., Collector.LabelTypes - This node collects all of the label types for the active family document., Collector.PipesBySystem - This collects all pipes in the project and organizes them by System Classification, Collector.Viewports - This collects all of the viewports in the model and outputs the name, title on sheet, scale and viewport type., Dash Remover - This node removes the dash at index 2 if it exists. The reason being, NCS states that no dash shall be used., Element.AreaWithTotal - This will get the area of an element if the parameter exists. Will total as well if needed., Element.Category - This node will get the input element(s)' categories, Element.GetLevelNameAsString - This retrieves the level name of the input elements as a string. This is in response to a known issue with the get value node., Element.GetMultipleParameterValuesByName - Get the value of multiple parameters from elements. (Seperate parameters with comma), Element.GetParameterValueByName(CaSe iNSeNSiTive) - Get the value of one of the element's parameters. (CaSe iNSeNSiTiVe), Element.ParentFamily - This node retrieces the parent family name for each input element., Element.Room - This node takes the input of all elements of category and reports back the associated room per element. Currently tested with casework, furniture and plumbing fixtures., Element.SetMultipleParametersByName - Set multiple (comma seperated) parameters by name., Element.SetParameterByName(CaSe iNSeNSiTiVe) - Set one of the element's parameters. (CaSe iNSeNSiTiVe), Element.Type - This retrieves the element type of the given elements. (if available) Similar to others available but no python here., Get All Tag Types - This node collects the tag types in the model., GetParameterValueByName(TypeOrInstance) - Gets a parameter value by name regardless of type or instance., GetParameterValueByNameAsString - Returns paramter value as string. Same effect as lunchbox node, without python., Inspiration.BuffettNode - This is a result of \"what if?\" thinking. The output is a random Warren Buffett quote from brainyquotes.com, Inspiration.CarreyNode - This is a result of \"what if?\" thinking. The output is a random Jim Carrey quote from brainyquotes.com, Inspiration.CashNode - This is a result of \"what if?\" thinking. The output is a random Johnny Cash quote from brainyquotes.com, Inspiration.MarleyNode - This is a result of \"what if?\" thinking. The output is a random Bob Marley quote from brainyquotes.com, Inspiration.SearchQuoteNode - This is a result of \"what if?\" thinking. The output is a random quote based on the search criteria from brainyquotes.com. (As long as it is on the site), Inspiration.TeresaNode - This is a result of \"what if?\" thinking. The output is a random Mother Teresa quote from brainyquotes.com, Level Element Collector - This collects data for all of the Level elements in the model. Similar to the node on Lunchbox, but this one uses all O.O.B. nodes., List.AllIndicesOf - Given an item, returns the zero-based indices of all its occurrences in the list. If the item cannot be found, an empty list is returned. , List.Contains - Determines if the given list contains the item or items., List.GetItemIndices - This node searches the input list for the given string or number., List.MergeSublists - This will merge all sublists with or without a character between the strings., LRE - Start of left-to-right embedding Unicode Character, LRM - Left-to-right mark unicode character, OS.CurrentUser - This node retrieves the current user logged in., OS.CurrentUserAppData - This retrieves the current user's appdata location, Output.Clean - This will return a single value or list from one input., Override Cut Lineweight - Overrides the cut lines of the elements, Override Projection Line Color - This node overrides the projection line color with the input color value. Useful for annotation., Override Projection Lineweight - Overrides the line thickness of projection lines, Parametric Graphic Scale - This node automates the graphic scale assigned per viewport. The input required is all instances of viewport category. It also requires shared parameters. Visit sixtysecondrevit.blogspot.com for details., RemoveListFromList - This node essentially \"subtracts\" the contents of List B from List A to produce a new list with the unique items., Rhythm.BackupRFADeleter - This node will scan the contents of a driectory and delete backup RFA files that appear with a four digit backup number before the file extension. (eg. Family1.0001.rfa) This is deleting files so please use with caution!, Rhythm.Detail Number by View Name  - Automatically numbers your detail number based on the first two characters of your view name. i.e. A4/... (Requires slash to be present), Rhythm.PercentGlazingByOrientation - This node was show at RTCNA2015 to optimize your workflows. It reports the window to wall % by direction the wall faces., Rhythm.RenumberRoomsByCurve - This node will renumber rooms along a curve path. This was developed through the guidance of WIlliam Wong at case. Considering WeWork bought Case I wanted this node to live somewhere., Rhythm.Toggle - Toggle that offers two outputs. Created for Dynamo 0.8.1 because of changes to the \"IF\" node, RLE - Start of right-to-left embedding Unicode Character, RLM - Right-to-left mark Unicode character, Room Element Collector - THis will collect data regarding rooms in the active model. Similar to Lunchbox node, but this one does not use python., SetParameterByName(TypeOrInstance) - Set one of the element's parameters regardless of parameter type or instance., SquareFeetDropper - This node drops square feet from the pulled area, String.CharacterAtIndex - Get's the character at a given index, String.FlipReverse - This node flips the string and reverses it. (April Fools '15) Works for 0.8.0 only, added unicode support, String.IndicesOfCharacter - This node gets all the indices of a given character, String.RemoveAfterGivenCharacter - This will move all characters at and after the given character., String.RemovePriorToCharacter - This will remove all characters prior to the input character. Accepts strings., String.SpecifyDecimalPlaces - This node will take your inout string and number of decimal places to create a new simplified output., TextElement.ToLower - This node converts a Revit text elemnt to upper directly., TextElement.ToTitle - This node converts a Revit text elemnt to upper directly., TextElement.ToUpper - This node converts a Revit text elemnt to upper directly., Viewport.ViewName - This node gets the view name of viewports. There is an issue when \"title on sheet\" is used, so this fixes that., Wall.NorthSouthEastWest - This node determines which direction a wall is facing and groups them by the direction or direction they are closest to., Workset.Create - Creates a workset or worksets from input names., ZWJ - Zero width joiner Unicode Character, ZWNJ - Zero width non-joiner Unicode Character, Select Elements By Curve - This will select model elements in order that a curve is drawn through them.",
            "engine_metadata": "",
            "engine_version": "0.8.2.2392",
            "created": "2015-10-02T16:22:41.581Z",
            "full_dependency_versions": [ "2015.10.1" ],
            "full_dependency_ids": [
              {
                "_id": "54e7add1dcee4dfd26000101",
                "name": "Rhythm"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2015.10.1"
          },
          {
            "_id": "5640f3eb662bf0e90800030a",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/860d0ba6-4213-42bf-876b-8c65089492eagregPkg635.zip",
            "contents": "All Framing at Reference Level - Collects all of the structural framing at a specific reference level, All Upper - This converts the ase of selected items to UPPER. Inputs require booleans to enable for category., Arrowhead Assigner - This node assings the arrowhead type for all text and keynote tags. There is an input for ones you want to exclude., Ayuda.IsArchi-LabInstalled - This node determines if Archi-Lab is installed. Useful with a toggle., Ayuda.IsClockworkInstalled - This node determines if clockwork is installed. Useful with a toggle., Ayuda.IsSteamNodesInstalled - This node determines if steamnodes is installed. Useful with a toggle.;, Ayuda.ThisOrThat - This node is a toggle between two inputs., Collector.DuctsBySystem - This collects all ducts in the project and organizes them by System Classification, Collector.KeynoteTags - This collects all of the keynote tags in the model. Similar to other nodes, but this doesn't use python., Collector.LabelTypes - This node collects all of the label types for the active family document., Collector.PipesBySystem - This collects all pipes in the project and organizes them by System Classification, Collector.Viewports - This collects all of the viewports in the model and outputs the name, title on sheet, scale and viewport type., Dash Remover - This node removes the dash at index 2 if it exists. The reason being, NCS states that no dash shall be used., Element.AreaWithTotal - This will get the area of an element if the parameter exists. Will total as well if needed., Element.Category - This node will get the input element(s)' categories, Element.GetLevelNameAsString - This retrieves the level name of the input elements as a string. This is in response to a known issue with the get value node., Element.GetMultipleParameterValuesByName - Get the value of multiple parameters from elements. (Seperate parameters with comma), Element.GetParameterValueByName(CaSe iNSeNSiTive) - Get the value of one of the element's parameters. (CaSe iNSeNSiTiVe), Element.ParentFamily - This node retrieces the parent family name for each input element., Element.Room - This node takes the input of all elements of category and reports back the associated room per element. Currently tested with casework, furniture and plumbing fixtures., Element.SetMultipleParametersByName - Set multiple (comma seperated) parameters by name., Element.SetParameterByName(CaSe iNSeNSiTiVe) - Set one of the element's parameters. (CaSe iNSeNSiTiVe), Element.Type - This retrieves the element type of the given elements. (if available) Similar to others available but no python here., Get All Tag Types - This node collects the tag types in the model., GetParameterValueByName(TypeOrInstance) - Gets a parameter value by name regardless of type or instance., GetParameterValueByNameAsString - Returns paramter value as string. Same effect as lunchbox node, without python., Inspiration.BuffettNode - This is a result of \"what if?\" thinking. The output is a random Warren Buffett quote from brainyquotes.com, Inspiration.CarreyNode - This is a result of \"what if?\" thinking. The output is a random Jim Carrey quote from brainyquotes.com, Inspiration.CashNode - This is a result of \"what if?\" thinking. The output is a random Johnny Cash quote from brainyquotes.com, Inspiration.MarleyNode - This is a result of \"what if?\" thinking. The output is a random Bob Marley quote from brainyquotes.com, Inspiration.SearchQuoteNode - This is a result of \"what if?\" thinking. The output is a random quote based on the search criteria from brainyquotes.com. (As long as it is on the site), Inspiration.TeresaNode - This is a result of \"what if?\" thinking. The output is a random Mother Teresa quote from brainyquotes.com, Level Element Collector - This collects data for all of the Level elements in the model. Similar to the node on Lunchbox, but this one uses all O.O.B. nodes., List.AllIndicesOf - Given an item, returns the zero-based indices of all its occurrences in the list. If the item cannot be found, an empty list is returned. , List.Contains - Determines if the given list contains the item or items., List.GetItemIndices - This node searches the input list for the given string or number., List.MergeSublists - This will merge all sublists with or without a character between the strings., LRE - Start of left-to-right embedding Unicode Character, LRM - Left-to-right mark unicode character, OS.CurrentUser - This node retrieves the current user logged in., OS.CurrentUserAppData - This retrieves the current user's appdata location, Output.Clean - This will return a single value or list from one input., Override Cut Lineweight - Overrides the cut lines of the elements, Override Projection Line Color - This node overrides the projection line color with the input color value. Useful for annotation., Override Projection Lineweight - Overrides the line thickness of projection lines, Parametric Graphic Scale - This node automates the graphic scale assigned per viewport. The input required is all instances of viewport category. It also requires shared parameters. Visit sixtysecondrevit.blogspot.com for details., RemoveListFromList - This node essentially \"subtracts\" the contents of List B from List A to produce a new list with the unique items., Rhythm.BackupRFADeleter - This node will scan the contents of a driectory and delete backup RFA files that appear with a four digit backup number before the file extension. (eg. Family1.0001.rfa) This is deleting files so please use with caution!, Rhythm.Detail Number by View Name  - Automatically numbers your detail number based on the first two characters of your view name. i.e. A4/... (Requires slash to be present), Rhythm.PercentGlazingByOrientation - This node was show at RTCNA2015 to optimize your workflows. It reports the window to wall % by direction the wall faces., Rhythm.RenumberRoomsByCurve - This node will renumber rooms along a curve path. This was developed through the guidance of WIlliam Wong at case. Considering WeWork bought Case I wanted this node to live somewhere., Rhythm.Toggle - Toggle that offers two outputs. Created for Dynamo 0.8.1 because of changes to the \"IF\" node, RLE - Start of right-to-left embedding Unicode Character, RLM - Right-to-left mark Unicode character, Room Element Collector - THis will collect data regarding rooms in the active model. Similar to Lunchbox node, but this one does not use python., Select Elements By Curve - This will select model elements in order that a curve is drawn through them., SetParameterByName(TypeOrInstance) - Set one of the element's parameters regardless of parameter type or instance., SquareFeetDropper - This node drops square feet from the pulled area, String.CharacterAtIndex - Get's the character at a given index, String.FlipReverse - This node flips the string and reverses it. (April Fools '15) Works for 0.8.0 only, added unicode support, String.IndicesOfCharacter - This node gets all the indices of a given character, String.RemoveAfterGivenCharacter - This will move all characters at and after the given character., String.RemovePriorToCharacter - This will remove all characters prior to the input character. Accepts strings., String.SpecifyDecimalPlaces - This node will take your inout string and number of decimal places to create a new simplified output., TextElement.ToLower - This node converts a Revit text elemnt to upper directly., TextElement.ToTitle - This node converts a Revit text elemnt to upper directly., TextElement.ToUpper - This node converts a Revit text elemnt to upper directly., Viewport.ViewName - This node gets the view name of viewports. There is an issue when \"title on sheet\" is used, so this fixes that., Wall.NorthSouthEastWest - This node determines which direction a wall is facing and groups them by the direction or direction they are closest to., Workset.Create - Creates a workset or worksets from input names., ZWJ - Zero width joiner Unicode Character, ZWNJ - Zero width non-joiner Unicode Character",
            "engine_metadata": "",
            "engine_version": "0.8.2.2392",
            "created": "2015-11-09T19:28:43.112Z",
            "full_dependency_versions": [ "2015.10.2" ],
            "full_dependency_ids": [
              {
                "_id": "54e7add1dcee4dfd26000101",
                "name": "Rhythm"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2015.10.2"
          },
          {
            "_id": "5640fbc6662bf0e90800030b",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/a1d10d14-fb6d-4dac-8166-b8dd70e1b0f3gregPkg708.zip",
            "contents": "All Framing at Reference Level - Collects all of the structural framing at a specific reference level, All Upper - This converts the ase of selected items to UPPER. Inputs require booleans to enable for category., Arrowhead Assigner - This node assings the arrowhead type for all text and keynote tags. There is an input for ones you want to exclude., Ayuda.IsArchi-LabInstalled - This node determines if Archi-Lab is installed. Useful with a toggle., Ayuda.IsClockworkInstalled - This node determines if clockwork is installed. Useful with a toggle., Ayuda.IsSteamNodesInstalled - This node determines if steamnodes is installed. Useful with a toggle.;, Ayuda.ThisOrThat - This node is a toggle between two inputs., Collector.DuctsBySystem - This collects all ducts in the project and organizes them by System Classification, Collector.KeynoteTags - This collects all of the keynote tags in the model. Similar to other nodes, but this doesn't use python., Collector.LabelTypes - This node collects all of the label types for the active family document., Collector.PipesBySystem - This collects all pipes in the project and organizes them by System Classification, Collector.Viewports - This collects all of the viewports in the model and outputs the name, title on sheet, scale and viewport type., Dash Remover - This node removes the dash at index 2 if it exists. The reason being, NCS states that no dash shall be used., Element.AreaWithTotal - This will get the area of an element if the parameter exists. Will total as well if needed., Element.Category - This node will get the input element(s)' categories, Element.GetLevelNameAsString - This retrieves the level name of the input elements as a string. This is in response to a known issue with the get value node., Element.GetMultipleParameterValuesByName - Get the value of multiple parameters from elements. (Seperate parameters with comma), Element.GetParameterValueByName(CaSe iNSeNSiTive) - Get the value of one of the element's parameters. (CaSe iNSeNSiTiVe), Element.ParentFamily - This node retrieces the parent family name for each input element., Element.Room - This node takes the input of all elements of category and reports back the associated room per element. Currently tested with casework, furniture and plumbing fixtures., Element.SetMultipleParametersByName - Set multiple (comma seperated) parameters by name., Element.SetParameterByName(CaSe iNSeNSiTiVe) - Set one of the element's parameters. (CaSe iNSeNSiTiVe), Element.Type - This retrieves the element type of the given elements. (if available) Similar to others available but no python here., Get All Tag Types - This node collects the tag types in the model., GetParameterValueByName(TypeOrInstance) - Gets a parameter value by name regardless of type or instance., GetParameterValueByNameAsString - Returns paramter value as string. Same effect as lunchbox node, without python., Inspiration.BuffettNode - This is a result of \"what if?\" thinking. The output is a random Warren Buffett quote from brainyquotes.com, Inspiration.CarreyNode - This is a result of \"what if?\" thinking. The output is a random Jim Carrey quote from brainyquotes.com, Inspiration.CashNode - This is a result of \"what if?\" thinking. The output is a random Johnny Cash quote from brainyquotes.com, Inspiration.MarleyNode - This is a result of \"what if?\" thinking. The output is a random Bob Marley quote from brainyquotes.com, Inspiration.SearchQuoteNode - This is a result of \"what if?\" thinking. The output is a random quote based on the search criteria from brainyquotes.com. (As long as it is on the site), Inspiration.TeresaNode - This is a result of \"what if?\" thinking. The output is a random Mother Teresa quote from brainyquotes.com, Level Element Collector - This collects data for all of the Level elements in the model. Similar to the node on Lunchbox, but this one uses all O.O.B. nodes., List.AllIndicesOf - Given an item, returns the zero-based indices of all its occurrences in the list. If the item cannot be found, an empty list is returned. , List.Contains - Determines if the given list contains the item or items., List.GetItemIndices - This node searches the input list for the given string or number., List.MergeSublists - This will merge all sublists with or without a character between the strings., LRE - Start of left-to-right embedding Unicode Character, LRM - Left-to-right mark unicode character, OS.CurrentUser - This node retrieves the current user logged in., OS.CurrentUserAppData - This retrieves the current user's appdata location, Output.Clean - This will return a single value or list from one input., Override Cut Lineweight - Overrides the cut lines of the elements, Override Projection Line Color - This node overrides the projection line color with the input color value. Useful for annotation., Override Projection Lineweight - Overrides the line thickness of projection lines, Parametric Graphic Scale - This node automates the graphic scale assigned per viewport. The input required is all instances of viewport category. It also requires shared parameters. Visit sixtysecondrevit.blogspot.com for details., RemoveListFromList - This node essentially \"subtracts\" the contents of List B from List A to produce a new list with the unique items., Rhythm.BackupRFADeleter - This node will scan the contents of a driectory and delete backup RFA files that appear with a four digit backup number before the file extension. (eg. Family1.0001.rfa) This is deleting files so please use with caution!, Rhythm.Detail Number by View Name  - Automatically numbers your detail number based on the first two characters of your view name. i.e. A4/... (Requires slash to be present), Rhythm.PercentGlazingByOrientation - This node was show at RTCNA2015 to optimize your workflows. It reports the window to wall % by direction the wall faces., Rhythm.RenumberRoomsByCurve - This node will renumber rooms along a curve path. This was developed through the guidance of WIlliam Wong at case. Considering WeWork bought Case I wanted this node to live somewhere., Rhythm.Toggle - Toggle that offers two outputs. Created for Dynamo 0.8.1 because of changes to the \"IF\" node, RLE - Start of right-to-left embedding Unicode Character, RLM - Right-to-left mark Unicode character, Room Element Collector - THis will collect data regarding rooms in the active model. Similar to Lunchbox node, but this one does not use python., Select Elements By Curve - This will select model elements in order that a curve is drawn through them., SetParameterByName(TypeOrInstance) - Set one of the element's parameters regardless of parameter type or instance., SquareFeetDropper - This node drops square feet from the pulled area, String.CharacterAtIndex - Get's the character at a given index, String.FlipReverse - This node flips the string and reverses it. (April Fools '15) Works for 0.8.0 only, added unicode support, String.IndicesOfCharacter - This node gets all the indices of a given character, String.RemoveAfterGivenCharacter - This will move all characters at and after the given character., String.RemovePriorToCharacter - This will remove all characters prior to the input character. Accepts strings., String.SpecifyDecimalPlaces - This node will take your inout string and number of decimal places to create a new simplified output., TextElement.ToLower - This node converts a Revit text elemnt to upper directly., TextElement.ToTitle - This node converts a Revit text elemnt to upper directly., TextElement.ToUpper - This node converts a Revit text elemnt to upper directly., Viewport.ViewName - This node gets the view name of viewports. There is an issue when \"title on sheet\" is used, so this fixes that., Wall.NorthSouthEastWest - This node determines which direction a wall is facing and groups them by the direction or direction they are closest to., Workset.Create - Creates a workset or worksets from input names., ZWJ - Zero width joiner Unicode Character, ZWNJ - Zero width non-joiner Unicode Character",
            "engine_metadata": "",
            "engine_version": "0.8.2.2392",
            "created": "2015-11-09T20:02:14.136Z",
            "full_dependency_versions": [ "2015.10.3" ],
            "full_dependency_ids": [
              {
                "_id": "54e7add1dcee4dfd26000101",
                "name": "Rhythm"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2015.10.3"
          },
          {
            "_id": "564107d7662bf0e90800030e",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/b6510b22-6e17-4a8c-ad59-3081229c5570gregPkg16.zip",
            "contents": "List.ArchitecturalAlphabeticalSequence - This creates a list of characters. What's different is we typically exclude I's and O's from our characters., All Framing at Reference Level - Collects all of the structural framing at a specific reference level, All Upper - This converts the ase of selected items to UPPER. Inputs require booleans to enable for category., Arrowhead Assigner - This node assings the arrowhead type for all text and keynote tags. There is an input for ones you want to exclude., Ayuda.IsArchi-LabInstalled - This node determines if Archi-Lab is installed. Useful with a toggle., Ayuda.IsClockworkInstalled - This node determines if clockwork is installed. Useful with a toggle., Ayuda.IsSteamNodesInstalled - This node determines if steamnodes is installed. Useful with a toggle.;, Ayuda.ThisOrThat - This node is a toggle between two inputs., Collector.DuctsBySystem - This collects all ducts in the project and organizes them by System Classification, Collector.KeynoteTags - This collects all of the keynote tags in the model. Similar to other nodes, but this doesn't use python., Collector.LabelTypes - This node collects all of the label types for the active family document., Collector.PipesBySystem - This collects all pipes in the project and organizes them by System Classification, Collector.Viewports - This collects all of the viewports in the model and outputs the name, title on sheet, scale and viewport type., Dash Remover - This node removes the dash at index 2 if it exists. The reason being, NCS states that no dash shall be used., Element.AreaWithTotal - This will get the area of an element if the parameter exists. Will total as well if needed., Element.Category - This node will get the input element(s)' categories, Element.GetLevelNameAsString - This retrieves the level name of the input elements as a string. This is in response to a known issue with the get value node., Element.GetMultipleParameterValuesByName - Get the value of multiple parameters from elements. (Seperate parameters with comma), Element.GetParameterValueByName(CaSe iNSeNSiTive) - Get the value of one of the element's parameters. (CaSe iNSeNSiTiVe), Element.ParentFamily - This node retrieces the parent family name for each input element., Element.Room - This node takes the input of all elements of category and reports back the associated room per element. Currently tested with casework, furniture and plumbing fixtures., Element.SetMultipleParametersByName - Set multiple (comma seperated) parameters by name., Element.SetParameterByName(CaSe iNSeNSiTiVe) - Set one of the element's parameters. (CaSe iNSeNSiTiVe), Element.Type - This retrieves the element type of the given elements. (if available) Similar to others available but no python here., Get All Tag Types - This node collects the tag types in the model., GetParameterValueByName(TypeOrInstance) - Gets a parameter value by name regardless of type or instance., GetParameterValueByNameAsString - Returns paramter value as string. Same effect as lunchbox node, without python., Inspiration.BuffettNode - This is a result of \"what if?\" thinking. The output is a random Warren Buffett quote from brainyquotes.com, Inspiration.CarreyNode - This is a result of \"what if?\" thinking. The output is a random Jim Carrey quote from brainyquotes.com, Inspiration.CashNode - This is a result of \"what if?\" thinking. The output is a random Johnny Cash quote from brainyquotes.com, Inspiration.MarleyNode - This is a result of \"what if?\" thinking. The output is a random Bob Marley quote from brainyquotes.com, Inspiration.SearchQuoteNode - This is a result of \"what if?\" thinking. The output is a random quote based on the search criteria from brainyquotes.com. (As long as it is on the site), Inspiration.TeresaNode - This is a result of \"what if?\" thinking. The output is a random Mother Teresa quote from brainyquotes.com, Level Element Collector - This collects data for all of the Level elements in the model. Similar to the node on Lunchbox, but this one uses all O.O.B. nodes., List.AllIndicesOf - Given an item, returns the zero-based indices of all its occurrences in the list. If the item cannot be found, an empty list is returned. , List.Contains - Determines if the given list contains the item or items., List.GetItemIndices - This node searches the input list for the given string or number., List.MergeSublists - This will merge all sublists with or without a character between the strings., LRE - Start of left-to-right embedding Unicode Character, LRM - Left-to-right mark unicode character, OS.CurrentUser - This node retrieves the current user logged in., OS.CurrentUserAppData - This retrieves the current user's appdata location, Output.Clean - This will return a single value or list from one input., Override Cut Lineweight - Overrides the cut lines of the elements, Override Projection Line Color - This node overrides the projection line color with the input color value. Useful for annotation., Override Projection Lineweight - Overrides the line thickness of projection lines, Parametric Graphic Scale - This node automates the graphic scale assigned per viewport. The input required is all instances of viewport category. It also requires shared parameters. Visit sixtysecondrevit.blogspot.com for details., RemoveListFromList - This node essentially \"subtracts\" the contents of List B from List A to produce a new list with the unique items., Rhythm.BackupRFADeleter - This node will scan the contents of a driectory and delete backup RFA files that appear with a four digit backup number before the file extension. (eg. Family1.0001.rfa) This is deleting files so please use with caution!, Rhythm.Detail Number by View Name  - Automatically numbers your detail number based on the first two characters of your view name. i.e. A4/... (Requires slash to be present), Rhythm.PercentGlazingByOrientation - This node was show at RTCNA2015 to optimize your workflows. It reports the window to wall % by direction the wall faces., Rhythm.RenumberRoomsByCurve - This node will renumber rooms along a curve path. This was developed through the guidance of WIlliam Wong at case. Considering WeWork bought Case I wanted this node to live somewhere., Rhythm.Toggle - Toggle that offers two outputs. Created for Dynamo 0.8.1 because of changes to the \"IF\" node, RLE - Start of right-to-left embedding Unicode Character, RLM - Right-to-left mark Unicode character, Room Element Collector - THis will collect data regarding rooms in the active model. Similar to Lunchbox node, but this one does not use python., Select Elements By Curve - This will select model elements in order that a curve is drawn through them., SetParameterByName(TypeOrInstance) - Set one of the element's parameters regardless of parameter type or instance., SquareFeetDropper - This node drops square feet from the pulled area, String.CharacterAtIndex - Get's the character at a given index, String.FlipReverse - This node flips the string and reverses it. (April Fools '15) Works for 0.8.0 only, added unicode support, String.IndicesOfCharacter - This node gets all the indices of a given character, String.RemoveAfterGivenCharacter - This will move all characters at and after the given character., String.RemovePriorToCharacter - This will remove all characters prior to the input character. Accepts strings., String.SpecifyDecimalPlaces - This node will take your inout string and number of decimal places to create a new simplified output., TextElement.ToLower - This node converts a Revit text elemnt to upper directly., TextElement.ToTitle - This node converts a Revit text elemnt to upper directly., TextElement.ToUpper - This node converts a Revit text elemnt to upper directly., Viewport.ViewName - This node gets the view name of viewports. There is an issue when \"title on sheet\" is used, so this fixes that., Wall.NorthSouthEastWest - This node determines which direction a wall is facing and groups them by the direction or direction they are closest to., Workset.Create - Creates a workset or worksets from input names., ZWJ - Zero width joiner Unicode Character, ZWNJ - Zero width non-joiner Unicode Character, Rhythm.RenumberGridsByCurve - This node will renumber grids in order of curve drawn through them. Select either letters or numbers. (Alphanumeric coming soon)",
            "engine_metadata": "",
            "engine_version": "0.8.2.2392",
            "created": "2015-11-09T20:53:43.599Z",
            "full_dependency_versions": [ "2015.10.4" ],
            "full_dependency_ids": [
              {
                "_id": "54e7add1dcee4dfd26000101",
                "name": "Rhythm"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2015.10.4"
          },
          {
            "_id": "56410a7d662bf0e90800030f",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/4f617707-6679-4a85-95d9-f396a58fd4f5gregPkg466.zip",
            "contents": "All Framing at Reference Level - Collects all of the structural framing at a specific reference level, All Upper - This converts the ase of selected items to UPPER. Inputs require booleans to enable for category., Arrowhead Assigner - This node assings the arrowhead type for all text and keynote tags. There is an input for ones you want to exclude., Ayuda.IsArchi-LabInstalled - This node determines if Archi-Lab is installed. Useful with a toggle., Ayuda.IsClockworkInstalled - This node determines if clockwork is installed. Useful with a toggle., Ayuda.IsSteamNodesInstalled - This node determines if steamnodes is installed. Useful with a toggle.;, Ayuda.ThisOrThat - This node is a toggle between two inputs., Collector.DuctsBySystem - This collects all ducts in the project and organizes them by System Classification, Collector.KeynoteTags - This collects all of the keynote tags in the model. Similar to other nodes, but this doesn't use python., Collector.LabelTypes - This node collects all of the label types for the active family document., Collector.PipesBySystem - This collects all pipes in the project and organizes them by System Classification, Collector.Viewports - This collects all of the viewports in the model and outputs the name, title on sheet, scale and viewport type., Dash Remover - This node removes the dash at index 2 if it exists. The reason being, NCS states that no dash shall be used., Element.AreaWithTotal - This will get the area of an element if the parameter exists. Will total as well if needed., Element.Category - This node will get the input element(s)' categories, Element.GetLevelNameAsString - This retrieves the level name of the input elements as a string. This is in response to a known issue with the get value node., Element.GetMultipleParameterValuesByName - Get the value of multiple parameters from elements. (Seperate parameters with comma), Element.GetParameterValueByName(CaSe iNSeNSiTive) - Get the value of one of the element's parameters. (CaSe iNSeNSiTiVe), Element.ParentFamily - This node retrieces the parent family name for each input element., Element.Room - This node takes the input of all elements of category and reports back the associated room per element. Currently tested with casework, furniture and plumbing fixtures., Element.SetMultipleParametersByName - Set multiple (comma seperated) parameters by name., Element.SetParameterByName(CaSe iNSeNSiTiVe) - Set one of the element's parameters. (CaSe iNSeNSiTiVe), Element.Type - This retrieves the element type of the given elements. (if available) Similar to others available but no python here., Get All Tag Types - This node collects the tag types in the model., GetParameterValueByName(TypeOrInstance) - Gets a parameter value by name regardless of type or instance., GetParameterValueByNameAsString - Returns paramter value as string. Same effect as lunchbox node, without python., Inspiration.BuffettNode - This is a result of \"what if?\" thinking. The output is a random Warren Buffett quote from brainyquotes.com, Inspiration.CarreyNode - This is a result of \"what if?\" thinking. The output is a random Jim Carrey quote from brainyquotes.com, Inspiration.CashNode - This is a result of \"what if?\" thinking. The output is a random Johnny Cash quote from brainyquotes.com, Inspiration.MarleyNode - This is a result of \"what if?\" thinking. The output is a random Bob Marley quote from brainyquotes.com, Inspiration.SearchQuoteNode - This is a result of \"what if?\" thinking. The output is a random quote based on the search criteria from brainyquotes.com. (As long as it is on the site), Inspiration.TeresaNode - This is a result of \"what if?\" thinking. The output is a random Mother Teresa quote from brainyquotes.com, Level Element Collector - This collects data for all of the Level elements in the model. Similar to the node on Lunchbox, but this one uses all O.O.B. nodes., List.AllIndicesOf - Given an item, returns the zero-based indices of all its occurrences in the list. If the item cannot be found, an empty list is returned. , List.ArchitecturalAlphabeticalSequence - This creates a list of characters. What's different is we typically exclude I's and O's from our characters., List.Contains - Determines if the given list contains the item or items., List.GetItemIndices - This node searches the input list for the given string or number., List.MergeSublists - This will merge all sublists with or without a character between the strings., LRE - Start of left-to-right embedding Unicode Character, LRM - Left-to-right mark unicode character, OS.CurrentUser - This node retrieves the current user logged in., OS.CurrentUserAppData - This retrieves the current user's appdata location, Output.Clean - This will return a single value or list from one input., Override Cut Lineweight - Overrides the cut lines of the elements, Override Projection Line Color - This node overrides the projection line color with the input color value. Useful for annotation., Override Projection Lineweight - Overrides the line thickness of projection lines, Parametric Graphic Scale - This node automates the graphic scale assigned per viewport. The input required is all instances of viewport category. It also requires shared parameters. Visit sixtysecondrevit.blogspot.com for details., RemoveListFromList - This node essentially \"subtracts\" the contents of List B from List A to produce a new list with the unique items., Rhythm.BackupRFADeleter - This node will scan the contents of a driectory and delete backup RFA files that appear with a four digit backup number before the file extension. (eg. Family1.0001.rfa) This is deleting files so please use with caution!, Rhythm.Detail Number by View Name  - Automatically numbers your detail number based on the first two characters of your view name. i.e. A4/... (Requires slash to be present), Rhythm.PercentGlazingByOrientation - This node was show at RTCNA2015 to optimize your workflows. It reports the window to wall % by direction the wall faces., Rhythm.RenumberGridsByCurve - This node will renumber grids in order of curve drawn through them. Select either letters or numbers. (Alphanumeric coming soon), Rhythm.RenumberRoomsByCurve - This node will renumber rooms along a curve path. This was developed through the guidance of WIlliam Wong at case. Considering WeWork bought Case I wanted this node to live somewhere., Rhythm.Toggle - Toggle that offers two outputs. Created for Dynamo 0.8.1 because of changes to the \"IF\" node, RLE - Start of right-to-left embedding Unicode Character, RLM - Right-to-left mark Unicode character, Room Element Collector - THis will collect data regarding rooms in the active model. Similar to Lunchbox node, but this one does not use python., Select Elements By Curve - This will select model elements in order that a curve is drawn through them., SetParameterByName(TypeOrInstance) - Set one of the element's parameters regardless of parameter type or instance., SquareFeetDropper - This node drops square feet from the pulled area, String.CharacterAtIndex - Get's the character at a given index, String.FlipReverse - This node flips the string and reverses it. (April Fools '15) Works for 0.8.0 only, added unicode support, String.IndicesOfCharacter - This node gets all the indices of a given character, String.RemoveAfterGivenCharacter - This will move all characters at and after the given character., String.RemovePriorToCharacter - This will remove all characters prior to the input character. Accepts strings., String.SpecifyDecimalPlaces - This node will take your inout string and number of decimal places to create a new simplified output., TextElement.ToLower - This node converts a Revit text elemnt to upper directly., TextElement.ToTitle - This node converts a Revit text elemnt to upper directly., TextElement.ToUpper - This node converts a Revit text elemnt to upper directly., Viewport.ViewName - This node gets the view name of viewports. There is an issue when \"title on sheet\" is used, so this fixes that., Wall.NorthSouthEastWest - This node determines which direction a wall is facing and groups them by the direction or direction they are closest to., Workset.Create - Creates a workset or worksets from input names., ZWJ - Zero width joiner Unicode Character, ZWNJ - Zero width non-joiner Unicode Character",
            "engine_metadata": "",
            "engine_version": "0.8.2.2392",
            "created": "2015-11-09T21:05:01.778Z",
            "full_dependency_versions": [ "2015.10.5" ],
            "full_dependency_ids": [
              {
                "_id": "54e7add1dcee4dfd26000101",
                "name": "Rhythm"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2015.10.5"
          },
          {
            "_id": "56410d08662bf0e908000310",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/e3055763-85c5-43fa-9202-5e480c304a53gregPkg349.zip",
            "contents": "All Framing at Reference Level - Collects all of the structural framing at a specific reference level, All Upper - This converts the ase of selected items to UPPER. Inputs require booleans to enable for category., Arrowhead Assigner - This node assings the arrowhead type for all text and keynote tags. There is an input for ones you want to exclude., Ayuda.IsArchi-LabInstalled - This node determines if Archi-Lab is installed. Useful with a toggle., Ayuda.IsClockworkInstalled - This node determines if clockwork is installed. Useful with a toggle., Ayuda.IsSteamNodesInstalled - This node determines if steamnodes is installed. Useful with a toggle.;, Ayuda.ThisOrThat - This node is a toggle between two inputs., Collector.DuctsBySystem - This collects all ducts in the project and organizes them by System Classification, Collector.KeynoteTags - This collects all of the keynote tags in the model. Similar to other nodes, but this doesn't use python., Collector.LabelTypes - This node collects all of the label types for the active family document., Collector.PipesBySystem - This collects all pipes in the project and organizes them by System Classification, Collector.Viewports - This collects all of the viewports in the model and outputs the name, title on sheet, scale and viewport type., Dash Remover - This node removes the dash at index 2 if it exists. The reason being, NCS states that no dash shall be used., Element.AreaWithTotal - This will get the area of an element if the parameter exists. Will total as well if needed., Element.Category - This node will get the input element(s)' categories, Element.GetLevelNameAsString - This retrieves the level name of the input elements as a string. This is in response to a known issue with the get value node., Element.GetMultipleParameterValuesByName - Get the value of multiple parameters from elements. (Seperate parameters with comma), Element.GetParameterValueByName(CaSe iNSeNSiTive) - Get the value of one of the element's parameters. (CaSe iNSeNSiTiVe), Element.ParentFamily - This node retrieces the parent family name for each input element., Element.Room - This node takes the input of all elements of category and reports back the associated room per element. Currently tested with casework, furniture and plumbing fixtures., Element.SetMultipleParametersByName - Set multiple (comma seperated) parameters by name., Element.SetParameterByName(CaSe iNSeNSiTiVe) - Set one of the element's parameters. (CaSe iNSeNSiTiVe), Element.Type - This retrieves the element type of the given elements. (if available) Similar to others available but no python here., Get All Tag Types - This node collects the tag types in the model., GetParameterValueByName(TypeOrInstance) - Gets a parameter value by name regardless of type or instance., GetParameterValueByNameAsString - Returns paramter value as string. Same effect as lunchbox node, without python., Inspiration.BuffettNode - This is a result of \"what if?\" thinking. The output is a random Warren Buffett quote from brainyquotes.com, Inspiration.CarreyNode - This is a result of \"what if?\" thinking. The output is a random Jim Carrey quote from brainyquotes.com, Inspiration.CashNode - This is a result of \"what if?\" thinking. The output is a random Johnny Cash quote from brainyquotes.com, Inspiration.MarleyNode - This is a result of \"what if?\" thinking. The output is a random Bob Marley quote from brainyquotes.com, Inspiration.SearchQuoteNode - This is a result of \"what if?\" thinking. The output is a random quote based on the search criteria from brainyquotes.com. (As long as it is on the site), Inspiration.TeresaNode - This is a result of \"what if?\" thinking. The output is a random Mother Teresa quote from brainyquotes.com, Level Element Collector - This collects data for all of the Level elements in the model. Similar to the node on Lunchbox, but this one uses all O.O.B. nodes., List.AllIndicesOf - Given an item, returns the zero-based indices of all its occurrences in the list. If the item cannot be found, an empty list is returned. , List.ArchitecturalAlphabeticalSequence - This creates a list of characters. What's different is we typically exclude I's and O's from our characters., List.Contains - Determines if the given list contains the item or items., List.GetItemIndices - This node searches the input list for the given string or number., List.MergeSublists - This will merge all sublists with or without a character between the strings., LRE - Start of left-to-right embedding Unicode Character, LRM - Left-to-right mark unicode character, OS.CurrentUser - This node retrieves the current user logged in., OS.CurrentUserAppData - This retrieves the current user's appdata location, Output.Clean - This will return a single value or list from one input., Override Cut Lineweight - Overrides the cut lines of the elements, Override Projection Line Color - This node overrides the projection line color with the input color value. Useful for annotation., Override Projection Lineweight - Overrides the line thickness of projection lines, Parametric Graphic Scale - This node automates the graphic scale assigned per viewport. The input required is all instances of viewport category. It also requires shared parameters. Visit sixtysecondrevit.blogspot.com for details., RemoveListFromList - This node essentially \"subtracts\" the contents of List B from List A to produce a new list with the unique items., Rhythm.BackupRFADeleter - This node will scan the contents of a driectory and delete backup RFA files that appear with a four digit backup number before the file extension. (eg. Family1.0001.rfa) This is deleting files so please use with caution!, Rhythm.Detail Number by View Name  - Automatically numbers your detail number based on the first two characters of your view name. i.e. A4/... (Requires slash to be present), Rhythm.PercentGlazingByOrientation - This node was show at RTCNA2015 to optimize your workflows. It reports the window to wall % by direction the wall faces., Rhythm.RenumberGridsByCurve - This node will renumber grids in order of curve drawn through them. Select either letters or numbers. (Alphanumeric coming soon), Rhythm.RenumberRoomsByCurve - This node will renumber rooms along a curve path. This was developed through the guidance of WIlliam Wong at case. Considering WeWork bought Case I wanted this node to live somewhere., Rhythm.Toggle - Toggle that offers two outputs. Created for Dynamo 0.8.1 because of changes to the \"IF\" node, RLE - Start of right-to-left embedding Unicode Character, RLM - Right-to-left mark Unicode character, Room Element Collector - THis will collect data regarding rooms in the active model. Similar to Lunchbox node, but this one does not use python., Select Elements By Curve - This will select model elements in order that a curve is drawn through them., SetParameterByName(TypeOrInstance) - Set one of the element's parameters regardless of parameter type or instance., SquareFeetDropper - This node drops square feet from the pulled area, String.CharacterAtIndex - Get's the character at a given index, String.FlipReverse - This node flips the string and reverses it. (April Fools '15) Works for 0.8.0 only, added unicode support, String.IndicesOfCharacter - This node gets all the indices of a given character, String.RemoveAfterGivenCharacter - This will move all characters at and after the given character., String.RemovePriorToCharacter - This will remove all characters prior to the input character. Accepts strings., String.SpecifyDecimalPlaces - This node will take your inout string and number of decimal places to create a new simplified output., TextElement.ToLower - This node converts a Revit text elemnt to upper directly., TextElement.ToTitle - This node converts a Revit text elemnt to upper directly., TextElement.ToUpper - This node converts a Revit text elemnt to upper directly., Viewport.ViewName - This node gets the view name of viewports. There is an issue when \"title on sheet\" is used, so this fixes that., Wall.NorthSouthEastWest - This node determines which direction a wall is facing and groups them by the direction or direction they are closest to., Workset.Create - Creates a workset or worksets from input names., ZWJ - Zero width joiner Unicode Character, ZWNJ - Zero width non-joiner Unicode Character",
            "engine_metadata": "",
            "engine_version": "0.8.2.2392",
            "created": "2015-11-09T21:15:52.429Z",
            "full_dependency_versions": [ "2015.10.6" ],
            "full_dependency_ids": [
              {
                "_id": "54e7add1dcee4dfd26000101",
                "name": "Rhythm"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2015.10.6"
          },
          {
            "_id": "564120ad662bf0e908000311",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/42e9c2e9-5627-485f-920b-72892bc1f970gregPkg189.zip",
            "contents": "All Framing at Reference Level - Collects all of the structural framing at a specific reference level, All Upper - This converts the ase of selected items to UPPER. Inputs require booleans to enable for category., Arrowhead Assigner - This node assings the arrowhead type for all text and keynote tags. There is an input for ones you want to exclude., Ayuda.IsArchi-LabInstalled - This node determines if Archi-Lab is installed. Useful with a toggle., Ayuda.IsClockworkInstalled - This node determines if clockwork is installed. Useful with a toggle., Ayuda.IsSteamNodesInstalled - This node determines if steamnodes is installed. Useful with a toggle.;, Ayuda.ThisOrThat - This node is a toggle between two inputs., Collector.DuctsBySystem - This collects all ducts in the project and organizes them by System Classification, Collector.KeynoteTags - This collects all of the keynote tags in the model. Similar to other nodes, but this doesn't use python., Collector.LabelTypes - This node collects all of the label types for the active family document., Collector.PipesBySystem - This collects all pipes in the project and organizes them by System Classification, Collector.Viewports - This collects all of the viewports in the model and outputs the name, title on sheet, scale and viewport type., Dash Remover - This node removes the dash at index 2 if it exists. The reason being, NCS states that no dash shall be used., Element.AreaWithTotal - This will get the area of an element if the parameter exists. Will total as well if needed., Element.Category - This node will get the input element(s)' categories, Element.GetLevelNameAsString - This retrieves the level name of the input elements as a string. This is in response to a known issue with the get value node., Element.GetMultipleParameterValuesByName - Get the value of multiple parameters from elements. (Seperate parameters with comma), Element.GetParameterValueByName(CaSe iNSeNSiTive) - Get the value of one of the element's parameters. (CaSe iNSeNSiTiVe), Element.ParentFamily - This node retrieces the parent family name for each input element., Element.Room - This node takes the input of all elements of category and reports back the associated room per element. Currently tested with casework, furniture and plumbing fixtures., Element.SetMultipleParametersByName - Set multiple (comma seperated) parameters by name., Element.SetParameterByName(CaSe iNSeNSiTiVe) - Set one of the element's parameters. (CaSe iNSeNSiTiVe), Element.Type - This retrieves the element type of the given elements. (if available) Similar to others available but no python here., Get All Tag Types - This node collects the tag types in the model., GetParameterValueByName(TypeOrInstance) - Gets a parameter value by name regardless of type or instance., GetParameterValueByNameAsString - Returns paramter value as string. Same effect as lunchbox node, without python., Inspiration.BuffettNode - This is a result of \"what if?\" thinking. The output is a random Warren Buffett quote from brainyquotes.com, Inspiration.CarreyNode - This is a result of \"what if?\" thinking. The output is a random Jim Carrey quote from brainyquotes.com, Inspiration.CashNode - This is a result of \"what if?\" thinking. The output is a random Johnny Cash quote from brainyquotes.com, Inspiration.MarleyNode - This is a result of \"what if?\" thinking. The output is a random Bob Marley quote from brainyquotes.com, Inspiration.SearchQuoteNode - This is a result of \"what if?\" thinking. The output is a random quote based on the search criteria from brainyquotes.com. (As long as it is on the site), Inspiration.TeresaNode - This is a result of \"what if?\" thinking. The output is a random Mother Teresa quote from brainyquotes.com, Level Element Collector - This collects data for all of the Level elements in the model. Similar to the node on Lunchbox, but this one uses all O.O.B. nodes., List.AllIndicesOf - Given an item, returns the zero-based indices of all its occurrences in the list. If the item cannot be found, an empty list is returned. , List.ArchitecturalAlphabeticalSequence - This creates a list of characters. What's different is we typically exclude I's and O's from our characters., List.Contains - Determines if the given list contains the item or items., List.GetItemIndices - This node searches the input list for the given string or number., List.MergeSublists - This will merge all sublists with or without a character between the strings., LRE - Start of left-to-right embedding Unicode Character, LRM - Left-to-right mark unicode character, OS.CurrentUser - This node retrieves the current user logged in., OS.CurrentUserAppData - This retrieves the current user's appdata location, Output.Clean - This will return a single value or list from one input., Override Cut Lineweight - Overrides the cut lines of the elements, Override Projection Line Color - This node overrides the projection line color with the input color value. Useful for annotation., Override Projection Lineweight - Overrides the line thickness of projection lines, Parametric Graphic Scale - This node automates the graphic scale assigned per viewport. The input required is all instances of viewport category. It also requires shared parameters. Visit sixtysecondrevit.blogspot.com for details., RemoveListFromList - This node essentially \"subtracts\" the contents of List B from List A to produce a new list with the unique items., Rhythm.BackupRFADeleter - This node will scan the contents of a driectory and delete backup RFA files that appear with a four digit backup number before the file extension. (eg. Family1.0001.rfa) This is deleting files so please use with caution!, Rhythm.Detail Number by View Name  - Automatically numbers your detail number based on the first two characters of your view name. i.e. A4/... (Requires slash to be present), Rhythm.PercentGlazingByOrientation - This node was show at RTCNA2015 to optimize your workflows. It reports the window to wall % by direction the wall faces., Rhythm.RenumberGridsByCurve - This node will renumber grids in order of curve drawn through them. Select either letters or numbers. (Alphanumeric coming soon), Rhythm.RenumberRoomsByCurve - This node will renumber rooms along a curve path. This was developed through the guidance of WIlliam Wong at case. Considering WeWork bought Case I wanted this node to live somewhere., Rhythm.Toggle - Toggle that offers two outputs. Created for Dynamo 0.8.1 because of changes to the \"IF\" node, RLE - Start of right-to-left embedding Unicode Character, RLM - Right-to-left mark Unicode character, Room Element Collector - THis will collect data regarding rooms in the active model. Similar to Lunchbox node, but this one does not use python., Select Elements By Curve - This will select model elements in order that a curve is drawn through them., SetParameterByName(TypeOrInstance) - Set one of the element's parameters regardless of parameter type or instance., SquareFeetDropper - This node drops square feet from the pulled area, String.CharacterAtIndex - Get's the character at a given index, String.FlipReverse - This node flips the string and reverses it. (April Fools '15) Works for 0.8.0 only, added unicode support, String.IndicesOfCharacter - This node gets all the indices of a given character, String.RemoveAfterGivenCharacter - This will move all characters at and after the given character., String.RemovePriorToCharacter - This will remove all characters prior to the input character. Accepts strings., String.SpecifyDecimalPlaces - This node will take your inout string and number of decimal places to create a new simplified output., TextElement.ToLower - This node converts a Revit text elemnt to upper directly., TextElement.ToTitle - This node converts a Revit text elemnt to upper directly., TextElement.ToUpper - This node converts a Revit text elemnt to upper directly., Viewport.ViewName - This node gets the view name of viewports. There is an issue when \"title on sheet\" is used, so this fixes that., Wall.NorthSouthEastWest - This node determines which direction a wall is facing and groups them by the direction or direction they are closest to., Workset.Create - Creates a workset or worksets from input names., ZWJ - Zero width joiner Unicode Character, ZWNJ - Zero width non-joiner Unicode Character",
            "engine_metadata": "",
            "engine_version": "0.8.2.2392",
            "created": "2015-11-09T22:39:41.395Z",
            "full_dependency_versions": [ "2015.10.7" ],
            "full_dependency_ids": [
              {
                "_id": "54e7add1dcee4dfd26000101",
                "name": "Rhythm"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2015.10.7"
          },
          {
            "_id": "564122ee662bf0e908000312",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/c70a9347-215f-418e-8e44-f6633b004bbagregPkg53.zip",
            "contents": "All Framing at Reference Level - Collects all of the structural framing at a specific reference level, All Upper - This converts the ase of selected items to UPPER. Inputs require booleans to enable for category., Arrowhead Assigner - This node assings the arrowhead type for all text and keynote tags. There is an input for ones you want to exclude., Ayuda.IsArchi-LabInstalled - This node determines if Archi-Lab is installed. Useful with a toggle., Ayuda.IsClockworkInstalled - This node determines if clockwork is installed. Useful with a toggle., Ayuda.IsSteamNodesInstalled - This node determines if steamnodes is installed. Useful with a toggle.;, Ayuda.ThisOrThat - This node is a toggle between two inputs., Collector.DuctsBySystem - This collects all ducts in the project and organizes them by System Classification, Collector.KeynoteTags - This collects all of the keynote tags in the model. Similar to other nodes, but this doesn't use python., Collector.LabelTypes - This node collects all of the label types for the active family document., Collector.PipesBySystem - This collects all pipes in the project and organizes them by System Classification, Collector.Viewports - This collects all of the viewports in the model and outputs the name, title on sheet, scale and viewport type., Dash Remover - This node removes the dash at index 2 if it exists. The reason being, NCS states that no dash shall be used., Element.AreaWithTotal - This will get the area of an element if the parameter exists. Will total as well if needed., Element.Category - This node will get the input element(s)' categories, Element.GetLevelNameAsString - This retrieves the level name of the input elements as a string. This is in response to a known issue with the get value node., Element.GetMultipleParameterValuesByName - Get the value of multiple parameters from elements. (Seperate parameters with comma), Element.GetParameterValueByName(CaSe iNSeNSiTive) - Get the value of one of the element's parameters. (CaSe iNSeNSiTiVe), Element.ParentFamily - This node retrieces the parent family name for each input element., Element.Room - This node takes the input of all elements of category and reports back the associated room per element. Currently tested with casework, furniture and plumbing fixtures., Element.SetMultipleParametersByName - Set multiple (comma seperated) parameters by name., Element.SetParameterByName(CaSe iNSeNSiTiVe) - Set one of the element's parameters. (CaSe iNSeNSiTiVe), Element.Type - This retrieves the element type of the given elements. (if available) Similar to others available but no python here., Get All Tag Types - This node collects the tag types in the model., GetParameterValueByName(TypeOrInstance) - Gets a parameter value by name regardless of type or instance., GetParameterValueByNameAsString - Returns paramter value as string. Same effect as lunchbox node, without python., Inspiration.BuffettNode - This is a result of \"what if?\" thinking. The output is a random Warren Buffett quote from brainyquotes.com, Inspiration.CarreyNode - This is a result of \"what if?\" thinking. The output is a random Jim Carrey quote from brainyquotes.com, Inspiration.CashNode - This is a result of \"what if?\" thinking. The output is a random Johnny Cash quote from brainyquotes.com, Inspiration.MarleyNode - This is a result of \"what if?\" thinking. The output is a random Bob Marley quote from brainyquotes.com, Inspiration.SearchQuoteNode - This is a result of \"what if?\" thinking. The output is a random quote based on the search criteria from brainyquotes.com. (As long as it is on the site), Inspiration.TeresaNode - This is a result of \"what if?\" thinking. The output is a random Mother Teresa quote from brainyquotes.com, Level Element Collector - This collects data for all of the Level elements in the model. Similar to the node on Lunchbox, but this one uses all O.O.B. nodes., List.AllIndicesOf - Given an item, returns the zero-based indices of all its occurrences in the list. If the item cannot be found, an empty list is returned. , List.ArchitecturalAlphabeticalSequence - This creates a list of characters. What's different is we typically exclude I's and O's from our characters., List.Contains - Determines if the given list contains the item or items., List.GetItemIndices - This node searches the input list for the given string or number., List.MergeSublists - This will merge all sublists with or without a character between the strings., LRE - Start of left-to-right embedding Unicode Character, LRM - Left-to-right mark unicode character, OS.CurrentUser - This node retrieves the current user logged in., OS.CurrentUserAppData - This retrieves the current user's appdata location, Output.Clean - This will return a single value or list from one input., Override Cut Lineweight - Overrides the cut lines of the elements, Override Projection Line Color - This node overrides the projection line color with the input color value. Useful for annotation., Override Projection Lineweight - Overrides the line thickness of projection lines, Parametric Graphic Scale - This node automates the graphic scale assigned per viewport. The input required is all instances of viewport category. It also requires shared parameters. Visit sixtysecondrevit.blogspot.com for details., RemoveListFromList - This node essentially \"subtracts\" the contents of List B from List A to produce a new list with the unique items., Rhythm.BackupRFADeleter - This node will scan the contents of a driectory and delete backup RFA files that appear with a four digit backup number before the file extension. (eg. Family1.0001.rfa) This is deleting files so please use with caution!, Rhythm.Detail Number by View Name  - Automatically numbers your detail number based on the first two characters of your view name. i.e. A4/... (Requires slash to be present), Rhythm.PercentGlazingByOrientation - This node was show at RTCNA2015 to optimize your workflows. It reports the window to wall % by direction the wall faces., Rhythm.RenumberGridsByCurve - This node will renumber grids in order of curve drawn through them. Select either letters or numbers. (Alphanumeric coming soon), Rhythm.RenumberRoomsByCurve - This node will renumber rooms along a curve path. This was developed through the guidance of WIlliam Wong at case. Considering WeWork bought Case I wanted this node to live somewhere., Rhythm.Toggle - Toggle that offers two outputs. Created for Dynamo 0.8.1 because of changes to the \"IF\" node, RLE - Start of right-to-left embedding Unicode Character, RLM - Right-to-left mark Unicode character, Room Element Collector - THis will collect data regarding rooms in the active model. Similar to Lunchbox node, but this one does not use python., Select Elements By Curve - This will select model elements in order that a curve is drawn through them., SetParameterByName(TypeOrInstance) - Set one of the element's parameters regardless of parameter type or instance., SquareFeetDropper - This node drops square feet from the pulled area, String.CharacterAtIndex - Get's the character at a given index, String.FlipReverse - This node flips the string and reverses it. (April Fools '15) Works for 0.8.0 only, added unicode support, String.IndicesOfCharacter - This node gets all the indices of a given character, String.RemoveAfterGivenCharacter - This will move all characters at and after the given character., String.RemovePriorToCharacter - This will remove all characters prior to the input character. Accepts strings., String.SpecifyDecimalPlaces - This node will take your inout string and number of decimal places to create a new simplified output., TextElement.ToLower - This node converts a Revit text elemnt to upper directly., TextElement.ToTitle - This node converts a Revit text elemnt to upper directly., TextElement.ToUpper - This node converts a Revit text elemnt to upper directly., Viewport.ViewName - This node gets the view name of viewports. There is an issue when \"title on sheet\" is used, so this fixes that., Wall.NorthSouthEastWest - This node determines which direction a wall is facing and groups them by the direction or direction they are closest to., Workset.Create - Creates a workset or worksets from input names., ZWJ - Zero width joiner Unicode Character, ZWNJ - Zero width non-joiner Unicode Character",
            "engine_metadata": "",
            "engine_version": "0.8.2.2392",
            "created": "2015-11-09T22:49:18.062Z",
            "full_dependency_versions": [ "2015.10.8" ],
            "full_dependency_ids": [
              {
                "_id": "54e7add1dcee4dfd26000101",
                "name": "Rhythm"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2015.10.8"
          },
          {
            "_id": "5642345b662bf0e90800031a",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/19bdc509-8507-4032-9576-1000430f54a5gregPkg106.zip",
            "contents": "All Framing at Reference Level - Collects all of the structural framing at a specific reference level, All Upper - This converts the ase of selected items to UPPER. Inputs require booleans to enable for category., Arrowhead Assigner - This node assings the arrowhead type for all text and keynote tags. There is an input for ones you want to exclude., Ayuda.IsArchi-LabInstalled - This node determines if Archi-Lab is installed. Useful with a toggle., Ayuda.IsClockworkInstalled - This node determines if clockwork is installed. Useful with a toggle., Ayuda.IsSteamNodesInstalled - This node determines if steamnodes is installed. Useful with a toggle.;, Ayuda.ThisOrThat - This node is a toggle between two inputs., Collector.DuctsBySystem - This collects all ducts in the project and organizes them by System Classification, Collector.KeynoteTags - This collects all of the keynote tags in the model. Similar to other nodes, but this doesn't use python., Collector.LabelTypes - This node collects all of the label types for the active family document., Collector.PipesBySystem - This collects all pipes in the project and organizes them by System Classification, Collector.Viewports - This collects all of the viewports in the model and outputs the name, title on sheet, scale and viewport type., Dash Remover - This node removes the dash at index 2 if it exists. The reason being, NCS states that no dash shall be used., Element.AreaWithTotal - This will get the area of an element if the parameter exists. Will total as well if needed., Element.Category - This node will get the input element(s)' categories, Element.GetLevelNameAsString - This retrieves the level name of the input elements as a string. This is in response to a known issue with the get value node., Element.GetMultipleParameterValuesByName - Get the value of multiple parameters from elements. (Seperate parameters with comma), Element.GetParameterValueByName(CaSe iNSeNSiTive) - Get the value of one of the element's parameters. (CaSe iNSeNSiTiVe), Element.ParentFamily - This node retrieces the parent family name for each input element., Element.Room - This node takes the input of all elements of category and reports back the associated room per element. Currently tested with casework, furniture and plumbing fixtures., Element.SetMultipleParametersByName - Set multiple (comma seperated) parameters by name., Element.SetParameterByName(CaSe iNSeNSiTiVe) - Set one of the element's parameters. (CaSe iNSeNSiTiVe), Element.Type - This retrieves the element type of the given elements. (if available) Similar to others available but no python here., Get All Tag Types - This node collects the tag types in the model., GetParameterValueByName(TypeOrInstance) - Gets a parameter value by name regardless of type or instance., GetParameterValueByNameAsString - Returns paramter value as string. Same effect as lunchbox node, without python., Inspiration.BuffettNode - This is a result of \"what if?\" thinking. The output is a random Warren Buffett quote from brainyquotes.com, Inspiration.CarreyNode - This is a result of \"what if?\" thinking. The output is a random Jim Carrey quote from brainyquotes.com, Inspiration.CashNode - This is a result of \"what if?\" thinking. The output is a random Johnny Cash quote from brainyquotes.com, Inspiration.MarleyNode - This is a result of \"what if?\" thinking. The output is a random Bob Marley quote from brainyquotes.com, Inspiration.SearchQuoteNode - This is a result of \"what if?\" thinking. The output is a random quote based on the search criteria from brainyquotes.com. (As long as it is on the site), Inspiration.TeresaNode - This is a result of \"what if?\" thinking. The output is a random Mother Teresa quote from brainyquotes.com, Level Element Collector - This collects data for all of the Level elements in the model. Similar to the node on Lunchbox, but this one uses all O.O.B. nodes., List.AllIndicesOf - Given an item, returns the zero-based indices of all its occurrences in the list. If the item cannot be found, an empty list is returned. , List.ArchitecturalAlphabeticalSequence - This creates a list of characters. What's different is we typically exclude I's and O's from our characters., List.Contains - Determines if the given list contains the item or items., List.GetItemIndices - This node searches the input list for the given string or number., List.MergeSublists - This will merge all sublists with or without a character between the strings., LRE - Start of left-to-right embedding Unicode Character, LRM - Left-to-right mark unicode character, OS.CurrentUser - This node retrieves the current user logged in., OS.CurrentUserAppData - This retrieves the current user's appdata location, Output.Clean - This will return a single value or list from one input., Override Cut Lineweight - Overrides the cut lines of the elements, Override Projection Line Color - This node overrides the projection line color with the input color value. Useful for annotation., Override Projection Lineweight - Overrides the line thickness of projection lines, Parametric Graphic Scale - This node automates the graphic scale assigned per viewport. The input required is all instances of viewport category. It also requires shared parameters. Visit sixtysecondrevit.blogspot.com for details., RemoveListFromList - This node essentially \"subtracts\" the contents of List B from List A to produce a new list with the unique items., Rhythm.BackupRFADeleter - This node will scan the contents of a driectory and delete backup RFA files that appear with a four digit backup number before the file extension. (eg. Family1.0001.rfa) This is deleting files so please use with caution!, Rhythm.Detail Number by View Name  - Automatically numbers your detail number based on the first two characters of your view name. i.e. A4/... (Requires slash to be present), Rhythm.PercentGlazingByOrientation - This node was show at RTCNA2015 to optimize your workflows. It reports the window to wall % by direction the wall faces., Rhythm.RenumberGridsByCurve - This node will renumber grids in order of curve drawn through them. Select either letters or numbers. (Alphanumeric coming soon), Rhythm.RenumberRoomsByCurve - This node will renumber rooms along a curve path. This was developed through the guidance of WIlliam Wong at case. Considering WeWork bought Case I wanted this node to live somewhere., Rhythm.Toggle - Toggle that offers two outputs. Created for Dynamo 0.8.1 because of changes to the \"IF\" node, RLE - Start of right-to-left embedding Unicode Character, RLM - Right-to-left mark Unicode character, Room Element Collector - THis will collect data regarding rooms in the active model. Similar to Lunchbox node, but this one does not use python., Select Elements By Curve - This will select model elements in order that a curve is drawn through them., SetParameterByName(TypeOrInstance) - Set one of the element's parameters regardless of parameter type or instance., SquareFeetDropper - This node drops square feet from the pulled area, String.CharacterAtIndex - Get's the character at a given index, String.FlipReverse - This node flips the string and reverses it. (April Fools '15) Works for 0.8.0 only, added unicode support, String.IndicesOfCharacter - This node gets all the indices of a given character, String.RemoveAfterGivenCharacter - This will move all characters at and after the given character., String.RemovePriorToCharacter - This will remove all characters prior to the input character. Accepts strings., String.SpecifyDecimalPlaces - This node will take your inout string and number of decimal places to create a new simplified output., TextElement.ToLower - This node converts a Revit text elemnt to upper directly., TextElement.ToTitle - This node converts a Revit text elemnt to upper directly., TextElement.ToUpper - This node converts a Revit text elemnt to upper directly., Viewport.ViewName - This node gets the view name of viewports. There is an issue when \"title on sheet\" is used, so this fixes that., Wall.NorthSouthEastWest - This node determines which direction a wall is facing and groups them by the direction or direction they are closest to., Workset.Create - Creates a workset or worksets from input names., ZWJ - Zero width joiner Unicode Character, ZWNJ - Zero width non-joiner Unicode Character",
            "engine_metadata": "",
            "engine_version": "0.9.1.3067",
            "created": "2015-11-10T18:15:55.617Z",
            "full_dependency_versions": [ "2015.11.8" ],
            "full_dependency_ids": [
              {
                "_id": "54e7add1dcee4dfd26000101",
                "name": "Rhythm"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2015.11.8"
          },
          {
            "_id": "5653b9890370b0a907000006",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/71d6ec68-d75b-4627-8258-fa2b54b11865gregPkg872.zip",
            "contents": "All Framing at Reference Level - Collects all of the structural framing at a specific reference level, All Upper - This converts the ase of selected items to UPPER. Inputs require booleans to enable for category., Arrowhead Assigner - This node assings the arrowhead type for all text and keynote tags. There is an input for ones you want to exclude., Ayuda.IsArchi-LabInstalled - This node determines if Archi-Lab is installed. Useful with a toggle., Ayuda.IsClockworkInstalled - This node determines if clockwork is installed. Useful with a toggle., Ayuda.IsSteamNodesInstalled - This node determines if steamnodes is installed. Useful with a toggle.;, Ayuda.ThisOrThat - This node is a toggle between two inputs., Collector.DuctsBySystem - This collects all ducts in the project and organizes them by System Classification, Collector.KeynoteTags - This collects all of the keynote tags in the model. Similar to other nodes, but this doesn't use python., Collector.LabelTypes - This node collects all of the label types for the active family document., Collector.PipesBySystem - This collects all pipes in the project and organizes them by System Classification, Collector.Viewports - This collects all of the viewports in the model and outputs the name, title on sheet, scale and viewport type., Dash Remover - This node removes the dash at index 2 if it exists. The reason being, NCS states that no dash shall be used., Element.AreaWithTotal - This will get the area of an element if the parameter exists. Will total as well if needed., Element.Category - This node will get the input element(s)' categories, Element.GetLevelNameAsString - This retrieves the level name of the input elements as a string. This is in response to a known issue with the get value node., Element.GetMultipleParameterValuesByName - Get the value of multiple parameters from elements. (Seperate parameters with comma), Element.GetParameterValueByName(CaSe iNSeNSiTive) - Get the value of one of the element's parameters. (CaSe iNSeNSiTiVe), Element.ParentFamily - This node retrieces the parent family name for each input element., Element.Room - This node takes the input of all elements of category and reports back the associated room per element. Currently tested with casework, furniture and plumbing fixtures., Element.SetMultipleParametersByName - Set multiple (comma seperated) parameters by name., Element.SetParameterByName(CaSe iNSeNSiTiVe) - Set one of the element's parameters. (CaSe iNSeNSiTiVe), Element.Type - This retrieves the element type of the given elements. (if available) Similar to others available but no python here., Get All Tag Types - This node collects the tag types in the model., GetParameterValueByName(TypeOrInstance) - Gets a parameter value by name regardless of type or instance., GetParameterValueByNameAsString - Returns paramter value as string. Same effect as lunchbox node, without python., Inspiration.BuffettNode - This is a result of \"what if?\" thinking. The output is a random Warren Buffett quote from brainyquotes.com, Inspiration.CarreyNode - This is a result of \"what if?\" thinking. The output is a random Jim Carrey quote from brainyquotes.com, Inspiration.CashNode - This is a result of \"what if?\" thinking. The output is a random Johnny Cash quote from brainyquotes.com, Inspiration.MarleyNode - This is a result of \"what if?\" thinking. The output is a random Bob Marley quote from brainyquotes.com, Inspiration.SearchQuoteNode - This is a result of \"what if?\" thinking. The output is a random quote based on the search criteria from brainyquotes.com. (As long as it is on the site), Inspiration.TeresaNode - This is a result of \"what if?\" thinking. The output is a random Mother Teresa quote from brainyquotes.com, Level Element Collector - This collects data for all of the Level elements in the model. Similar to the node on Lunchbox, but this one uses all O.O.B. nodes., List.AllIndicesOf - Given an item, returns the zero-based indices of all its occurrences in the list. If the item cannot be found, an empty list is returned. , List.ArchitecturalAlphabeticalSequence - This creates a list of characters. What's different is we typically exclude I's and O's from our characters., List.Contains - Determines if the given list contains the item or items., List.GetItemIndices - This node searches the input list for the given string or number., List.MergeSublists - This will merge all sublists with or without a character between the strings., LRE - Start of left-to-right embedding Unicode Character, LRM - Left-to-right mark unicode character, OS.CurrentUser - This node retrieves the current user logged in., OS.CurrentUserAppData - This retrieves the current user's appdata location, Output.Clean - This will return a single value or list from one input., Override Cut Lineweight - Overrides the cut lines of the elements, Override Projection Line Color - This node overrides the projection line color with the input color value. Useful for annotation., Override Projection Lineweight - Overrides the line thickness of projection lines, Parametric Graphic Scale - This node automates the graphic scale assigned per viewport. The input required is all instances of viewport category. It also requires shared parameters. Visit sixtysecondrevit.blogspot.com for details., RemoveListFromList - This node essentially \"subtracts\" the contents of List B from List A to produce a new list with the unique items., Rhythm.BackupRFADeleter - This node will scan the contents of a driectory and delete backup RFA files that appear with a four digit backup number before the file extension. (eg. Family1.0001.rfa) This is deleting files so please use with caution!, Rhythm.Detail Number by View Name  - Automatically numbers your detail number based on the first two characters of your view name. i.e. A4/... (Requires slash to be present), Rhythm.OverrideInteriorCrop - This node will override the lineweight of the crop region on interior elevations. This node would not be possible without the power of the Dynamo community. Specifically Danny Jones with Clark Patterson Lee, Rhythm.PercentGlazingByOrientation - This node was show at RTCNA2015 to optimize your workflows. It reports the window to wall % by direction the wall faces., Rhythm.RenumberGridsByCurve - This node will renumber grids in order of curve drawn through them. Select either letters or numbers. (Alphanumeric coming soon), Rhythm.RenumberRoomsByCurve - This node will renumber rooms along a curve path. This was developed through the guidance of WIlliam Wong at case. Considering WeWork bought Case I wanted this node to live somewhere., Rhythm.Toggle - Toggle that offers two outputs. Created for Dynamo 0.8.1 because of changes to the \"IF\" node, RLE - Start of right-to-left embedding Unicode Character, RLM - Right-to-left mark Unicode character, Room Element Collector - THis will collect data regarding rooms in the active model. Similar to Lunchbox node, but this one does not use python., Select Elements By Curve - This will select model elements in order that a curve is drawn through them., SetParameterByName(TypeOrInstance) - Set one of the element's parameters regardless of parameter type or instance., SquareFeetDropper - This node drops square feet from the pulled area, String.CharacterAtIndex - Get's the character at a given index, String.FlipReverse - This node flips the string and reverses it. (April Fools '15) Works for 0.8.0 only, added unicode support, String.IndicesOfCharacter - This node gets all the indices of a given character, String.RemoveAfterGivenCharacter - This will move all characters at and after the given character., String.RemovePriorToCharacter - This will remove all characters prior to the input character. Accepts strings., String.SpecifyDecimalPlaces - This node will take your inout string and number of decimal places to create a new simplified output., TextElement.ToLower - This node converts a Revit text elemnt to upper directly., TextElement.ToTitle - This node converts a Revit text elemnt to upper directly., TextElement.ToUpper - This node converts a Revit text elemnt to upper directly., Viewport.ViewName - This node gets the view name of viewports. There is an issue when \"title on sheet\" is used, so this fixes that., Wall.NorthSouthEastWest - This node determines which direction a wall is facing and groups them by the direction or direction they are closest to., Workset.Create - Creates a workset or worksets from input names., ZWJ - Zero width joiner Unicode Character, ZWNJ - Zero width non-joiner Unicode Character",
            "engine_metadata": "",
            "engine_version": "0.9.1.3067",
            "created": "2015-11-24T01:12:41.587Z",
            "full_dependency_versions": [ "2015.11.23" ],
            "full_dependency_ids": [
              {
                "_id": "54e7add1dcee4dfd26000101",
                "name": "Rhythm"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2015.11.23"
          },
          {
            "_id": "5655dbf80370b0a907000019",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/195f1481-8fd3-4a36-bfbc-e0e6b04b9669gregPkg558.zip",
            "contents": "All Framing at Reference Level - Collects all of the structural framing at a specific reference level, All Upper - This converts the ase of selected items to UPPER. Inputs require booleans to enable for category., Arrowhead Assigner - This node assings the arrowhead type for all text and keynote tags. There is an input for ones you want to exclude., Ayuda.IsArchi-LabInstalled - This node determines if Archi-Lab is installed. Useful with a toggle., Ayuda.IsClockworkInstalled - This node determines if clockwork is installed. Useful with a toggle., Ayuda.IsSteamNodesInstalled - This node determines if steamnodes is installed. Useful with a toggle.;, Ayuda.ThisOrThat - This node is a toggle between two inputs., Collector.DuctsBySystem - This collects all ducts in the project and organizes them by System Classification, Collector.KeynoteTags - This collects all of the keynote tags in the model. Similar to other nodes, but this doesn't use python., Collector.LabelTypes - This node collects all of the label types for the active family document., Collector.PipesBySystem - This collects all pipes in the project and organizes them by System Classification, Collector.Viewports - This collects all of the viewports in the model and outputs the name, title on sheet, scale and viewport type., Dash Remover - This node removes the dash at index 2 if it exists. The reason being, NCS states that no dash shall be used., Element.AreaWithTotal - This will get the area of an element if the parameter exists. Will total as well if needed., Element.Category - This node will get the input element(s)' categories, Element.GetLevelNameAsString - This retrieves the level name of the input elements as a string. This is in response to a known issue with the get value node., Element.GetMultipleParameterValuesByName - Get the value of multiple parameters from elements. (Seperate parameters with comma), Element.GetParameterValueByName(CaSe iNSeNSiTive) - Get the value of one of the element's parameters. (CaSe iNSeNSiTiVe), Element.ParentFamily - This node retrieces the parent family name for each input element., Element.Room - This node takes the input of all elements of category and reports back the associated room per element. Currently tested with casework, furniture and plumbing fixtures., Element.SetMultipleParametersByName - Set multiple (comma seperated) parameters by name., Element.SetParameterByName(CaSe iNSeNSiTiVe) - Set one of the element's parameters. (CaSe iNSeNSiTiVe), Element.Type - This retrieves the element type of the given elements. (if available) Similar to others available but no python here., Get All Tag Types - This node collects the tag types in the model., GetParameterValueByName(TypeOrInstance) - Gets a parameter value by name regardless of type or instance., GetParameterValueByNameAsString - Returns paramter value as string. Same effect as lunchbox node, without python., Inspiration.BuffettNode - This is a result of \"what if?\" thinking. The output is a random Warren Buffett quote from brainyquotes.com, Inspiration.CarreyNode - This is a result of \"what if?\" thinking. The output is a random Jim Carrey quote from brainyquotes.com, Inspiration.CashNode - This is a result of \"what if?\" thinking. The output is a random Johnny Cash quote from brainyquotes.com, Inspiration.MarleyNode - This is a result of \"what if?\" thinking. The output is a random Bob Marley quote from brainyquotes.com, Inspiration.SearchQuoteNode - This is a result of \"what if?\" thinking. The output is a random quote based on the search criteria from brainyquotes.com. (As long as it is on the site), Inspiration.TeresaNode - This is a result of \"what if?\" thinking. The output is a random Mother Teresa quote from brainyquotes.com, Level Element Collector - This collects data for all of the Level elements in the model. Similar to the node on Lunchbox, but this one uses all O.O.B. nodes., List.AllIndicesOf - Given an item, returns the zero-based indices of all its occurrences in the list. If the item cannot be found, an empty list is returned. , List.ArchitecturalAlphabeticalSequence - This creates a list of characters. What's different is we typically exclude I's and O's from our characters., List.Contains - Determines if the given list contains the item or items., List.GetItemIndices - This node searches the input list for the given string or number., List.MergeSublists - This will merge all sublists with or without a character between the strings., LRE - Start of left-to-right embedding Unicode Character, LRM - Left-to-right mark unicode character, OS.CurrentUser - This node retrieves the current user logged in., OS.CurrentUserAppData - This retrieves the current user's appdata location, Output.Clean - This will return a single value or list from one input., Override Cut Lineweight - Overrides the cut lines of the elements, Override Projection Line Color - This node overrides the projection line color with the input color value. Useful for annotation., Override Projection Lineweight - Overrides the line thickness of projection lines, Parametric Graphic Scale - This node automates the graphic scale assigned per viewport. The input required is all instances of viewport category. It also requires shared parameters. Visit sixtysecondrevit.blogspot.com for details., RemoveListFromList - This node essentially \"subtracts\" the contents of List B from List A to produce a new list with the unique items., Rhythm.BackupRFADeleter - This node will scan the contents of a driectory and delete backup RFA files that appear with a four digit backup number before the file extension. (eg. Family1.0001.rfa) This is deleting files so please use with caution!, Rhythm.Detail Number by View Name  - Automatically numbers your detail number based on the first two characters of your view name. i.e. A4/... (Requires slash to be present), Rhythm.OverrideInteriorCrop - This node will override the lineweight of the crop region on interior elevations. This node would not be possible without the power of the Dynamo community. Specifically Danny Jones with Clark Patterson Lee, Rhythm.PercentGlazingByOrientation - This node was show at RTCNA2015 to optimize your workflows. It reports the window to wall % by direction the wall faces., Rhythm.RenumberGridsByCurve - This node will renumber grids in order of curve drawn through them. Select either letters or numbers. (Alphanumeric coming soon), Rhythm.RenumberRoomsByCurve - This node will renumber rooms along a curve path. This was developed through the guidance of WIlliam Wong at case. Considering WeWork bought Case I wanted this node to live somewhere., Rhythm.Toggle - Toggle that offers two outputs. Created for Dynamo 0.8.1 because of changes to the \"IF\" node, RLE - Start of right-to-left embedding Unicode Character, RLM - Right-to-left mark Unicode character, Room Element Collector - THis will collect data regarding rooms in the active model. Similar to Lunchbox node, but this one does not use python., Select Elements By Curve - This will select model elements in order that a curve is drawn through them., SetParameterByName(TypeOrInstance) - Set one of the element's parameters regardless of parameter type or instance., SquareFeetDropper - This node drops square feet from the pulled area, String.CharacterAtIndex - Get's the character at a given index, String.FlipReverse - This node flips the string and reverses it. (April Fools '15) Works for 0.8.0 only, added unicode support, String.IndicesOfCharacter - This node gets all the indices of a given character, String.RemoveAfterGivenCharacter - This will move all characters at and after the given character., String.RemovePriorToCharacter - This will remove all characters prior to the input character. Accepts strings., String.SpecifyDecimalPlaces - This node will take your inout string and number of decimal places to create a new simplified output., TextElement.ToLower - This node converts a Revit text elemnt to upper directly., TextElement.ToTitle - This node converts a Revit text elemnt to upper directly., TextElement.ToUpper - This node converts a Revit text elemnt to upper directly., Viewport.ViewName - This node gets the view name of viewports. There is an issue when \"title on sheet\" is used, so this fixes that., Wall.NorthSouthEastWest - This node determines which direction a wall is facing and groups them by the direction or direction they are closest to., Workset.Create - Creates a workset or worksets from input names., ZWJ - Zero width joiner Unicode Character, ZWNJ - Zero width non-joiner Unicode Character, Rhythm.3DRoomTags - This node will generate 3D room tags for all rooms in the model. (RFA in extra folder in Dynamo download)",
            "engine_metadata": "",
            "engine_version": "0.9.1.3067",
            "created": "2015-11-25T16:04:08.753Z",
            "full_dependency_versions": [ "2015.11.25" ],
            "full_dependency_ids": [
              {
                "_id": "54e7add1dcee4dfd26000101",
                "name": "Rhythm"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2015.11.25"
          },
          {
            "_id": "5668959c5c568ad00c00000d",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/8a806ac1-d196-48c3-8cd4-da12db834d23gregPkg616.zip",
            "contents": "All Framing at Reference Level - Collects all of the structural framing at a specific reference level, All Upper - This converts the ase of selected items to UPPER. Inputs require booleans to enable for category., Arrowhead Assigner - This node assings the arrowhead type for all text and keynote tags. There is an input for ones you want to exclude., Ayuda.IsArchi-LabInstalled - This node determines if Archi-Lab is installed. Useful with a toggle., Ayuda.IsClockworkInstalled - This node determines if clockwork is installed. Useful with a toggle., Ayuda.IsSteamNodesInstalled - This node determines if steamnodes is installed. Useful with a toggle.;, Ayuda.ThisOrThat - This node is a toggle between two inputs., Collector.DuctsBySystem - This collects all ducts in the project and organizes them by System Classification, Collector.KeynoteTags - This collects all of the keynote tags in the model. Similar to other nodes, but this doesn't use python., Collector.LabelTypes - This node collects all of the label types for the active family document., Collector.PipesBySystem - This collects all pipes in the project and organizes them by System Classification, Collector.Viewports - This collects all of the viewports in the model and outputs the name, title on sheet, scale and viewport type., Dash Remover - This node removes the dash at index 2 if it exists. The reason being, NCS states that no dash shall be used., Element.AreaWithTotal - This will get the area of an element if the parameter exists. Will total as well if needed., Element.Category - This node will get the input element(s)' categories, Element.GetLevelNameAsString - This retrieves the level name of the input elements as a string. This is in response to a known issue with the get value node., Element.GetMultipleParameterValuesByName - Get the value of multiple parameters from elements. (Seperate parameters with comma), Element.GetParameterValueByName(CaSe iNSeNSiTive) - Get the value of one of the element's parameters. (CaSe iNSeNSiTiVe), Element.ParentFamily - This node retrieces the parent family name for each input element., Element.Room - This node takes the input of all elements of category and reports back the associated room per element. Currently tested with casework, furniture and plumbing fixtures., Element.SetMultipleParametersByName - Set multiple (comma seperated) parameters by name., Element.SetParameterByName(CaSe iNSeNSiTiVe) - Set one of the element's parameters. (CaSe iNSeNSiTiVe), Element.Type - This retrieves the element type of the given elements. (if available) Similar to others available but no python here., Get All Tag Types - This node collects the tag types in the model., GetParameterValueByName(TypeOrInstance) - Gets a parameter value by name regardless of type or instance., GetParameterValueByNameAsString - Returns paramter value as string. Same effect as lunchbox node, without python., Inspiration.BuffettNode - This is a result of \"what if?\" thinking. The output is a random Warren Buffett quote from brainyquotes.com, Inspiration.CarreyNode - This is a result of \"what if?\" thinking. The output is a random Jim Carrey quote from brainyquotes.com, Inspiration.CashNode - This is a result of \"what if?\" thinking. The output is a random Johnny Cash quote from brainyquotes.com, Inspiration.MarleyNode - This is a result of \"what if?\" thinking. The output is a random Bob Marley quote from brainyquotes.com, Inspiration.SearchQuoteNode - This is a result of \"what if?\" thinking. The output is a random quote based on the search criteria from brainyquotes.com. (As long as it is on the site), Inspiration.TeresaNode - This is a result of \"what if?\" thinking. The output is a random Mother Teresa quote from brainyquotes.com, Level Element Collector - This collects data for all of the Level elements in the model. Similar to the node on Lunchbox, but this one uses all O.O.B. nodes., List.AllIndicesOf - Given an item, returns the zero-based indices of all its occurrences in the list. If the item cannot be found, an empty list is returned. , List.ArchitecturalAlphabeticalSequence - This creates a list of characters. What's different is we typically exclude I's and O's from our characters., List.Contains - Determines if the given list contains the item or items., List.GetItemIndices - This node searches the input list for the given string or number., List.MergeSublists - This will merge all sublists with or without a character between the strings., LRE - Start of left-to-right embedding Unicode Character, LRM - Left-to-right mark unicode character, OS.CurrentUser - This node retrieves the current user logged in., OS.CurrentUserAppData - This retrieves the current user's appdata location, Output.Clean - This will return a single value or list from one input., Override Cut Lineweight - Overrides the cut lines of the elements, Override Projection Line Color - This node overrides the projection line color with the input color value. Useful for annotation., Override Projection Lineweight - Overrides the line thickness of projection lines, Parametric Graphic Scale - This node automates the graphic scale assigned per viewport. The input required is all instances of viewport category. It also requires shared parameters. Visit sixtysecondrevit.blogspot.com for details., RemoveListFromList - This node essentially \"subtracts\" the contents of List B from List A to produce a new list with the unique items., Rhythm.3DRoomTags - This node will generate 3D room tags for all rooms in the model. (RFA in extra folder in Dynamo download), Rhythm.BackupRFADeleter - This node will scan the contents of a driectory and delete backup RFA files that appear with a four digit backup number before the file extension. (eg. Family1.0001.rfa) This is deleting files so please use with caution!, Rhythm.Detail Number by View Name  - Automatically numbers your detail number based on the first two characters of your view name. i.e. A4/... (Requires slash to be present), Rhythm.OverrideInteriorCrop - This node will override the lineweight of the crop region on interior elevations. This node would not be possible without the power of the Dynamo community. Specifically Danny Jones with Clark Patterson Lee, Rhythm.PercentGlazingByOrientation - This node was show at RTCNA2015 to optimize your workflows. It reports the window to wall % by direction the wall faces., Rhythm.RenumberGridsByCurve - This node will renumber grids in order of curve drawn through them. Select either letters or numbers. (Alphanumeric coming soon), Rhythm.RenumberRoomsByCurve - This node will renumber rooms along a curve path. This was developed through the guidance of WIlliam Wong at case. Considering WeWork bought Case I wanted this node to live somewhere., Rhythm.Toggle - Toggle that offers two outputs. Created for Dynamo 0.8.1 because of changes to the \"IF\" node, RLE - Start of right-to-left embedding Unicode Character, RLM - Right-to-left mark Unicode character, Room Element Collector - THis will collect data regarding rooms in the active model. Similar to Lunchbox node, but this one does not use python., Select Elements By Curve - This will select model elements in order that a curve is drawn through them., SetParameterByName(TypeOrInstance) - Set one of the element's parameters regardless of parameter type or instance., SquareFeetDropper - This node drops square feet from the pulled area, String.CharacterAtIndex - Get's the character at a given index, String.FlipReverse - This node flips the string and reverses it. (April Fools '15) Works for 0.8.0 only, added unicode support, String.IndicesOfCharacter - This node gets all the indices of a given character, String.RemoveAfterGivenCharacter - This will move all characters at and after the given character., String.RemovePriorToCharacter - This will remove all characters prior to the input character. Accepts strings., String.SpecifyDecimalPlaces - This node will take your inout string and number of decimal places to create a new simplified output., TextElement.ToLower - This node converts a Revit text elemnt to upper directly., TextElement.ToTitle - This node converts a Revit text elemnt to upper directly., TextElement.ToUpper - This node converts a Revit text elemnt to upper directly., Viewport.ViewName - This node gets the view name of viewports. There is an issue when \"title on sheet\" is used, so this fixes that., Wall.NorthSouthEastWest - This node determines which direction a wall is facing and groups them by the direction or direction they are closest to., Workset.Create - Creates a workset or worksets from input names., ZWJ - Zero width joiner Unicode Character, ZWNJ - Zero width non-joiner Unicode Character, Mullion.SortByDirection - This will sort mullions of a host curtain wall by direction they are facing.",
            "engine_metadata": "",
            "engine_version": "0.9.1.3067",
            "created": "2015-12-09T20:57:00.305Z",
            "full_dependency_versions": [ "2015.12.8" ],
            "full_dependency_ids": [
              {
                "_id": "54e7add1dcee4dfd26000101",
                "name": "Rhythm"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2015.12.8"
          },
          {
            "_id": "56707d375c568ad00c00002d",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/63b8b76a-c70e-4688-a0b8-8c2514e6cbd2gregPkg960.zip",
            "contents": "List.ReturnItemsPreviousToIndex - This will take an index (or indices) and return the items previous to it. Useful for sums of all items previous., All Framing at Reference Level - Collects all of the structural framing at a specific reference level, All Upper - This converts the ase of selected items to UPPER. Inputs require booleans to enable for category., Arrowhead Assigner - This node assings the arrowhead type for all text and keynote tags. There is an input for ones you want to exclude., Ayuda.IsArchi-LabInstalled - This node determines if Archi-Lab is installed. Useful with a toggle., Ayuda.IsClockworkInstalled - This node determines if clockwork is installed. Useful with a toggle., Ayuda.IsSteamNodesInstalled - This node determines if steamnodes is installed. Useful with a toggle.;, Ayuda.ThisOrThat - This node is a toggle between two inputs., Collector.DuctsBySystem - This collects all ducts in the project and organizes them by System Classification, Collector.KeynoteTags - This collects all of the keynote tags in the model. Similar to other nodes, but this doesn't use python., Collector.LabelTypes - This node collects all of the label types for the active family document., Collector.PipesBySystem - This collects all pipes in the project and organizes them by System Classification, Collector.Viewports - This collects all of the viewports in the model and outputs the name, title on sheet, scale and viewport type., Dash Remover - This node removes the dash at index 2 if it exists. The reason being, NCS states that no dash shall be used., Element.AreaWithTotal - This will get the area of an element if the parameter exists. Will total as well if needed., Element.Category - This node will get the input element(s)' categories, Element.GetLevelNameAsString - This retrieves the level name of the input elements as a string. This is in response to a known issue with the get value node., Element.GetMultipleParameterValuesByName - Get the value of multiple parameters from elements. (Seperate parameters with comma), Element.GetParameterValueByName(CaSe iNSeNSiTive) - Get the value of one of the element's parameters. (CaSe iNSeNSiTiVe), Element.ParentFamily - This node retrieces the parent family name for each input element., Element.Room - This node takes the input of all elements of category and reports back the associated room per element. Currently tested with casework, furniture and plumbing fixtures., Element.SetMultipleParametersByName - Set multiple (comma seperated) parameters by name., Element.SetParameterByName(CaSe iNSeNSiTiVe) - Set one of the element's parameters. (CaSe iNSeNSiTiVe), Element.Type - This retrieves the element type of the given elements. (if available) Similar to others available but no python here., Get All Tag Types - This node collects the tag types in the model., GetParameterValueByName(TypeOrInstance) - Gets a parameter value by name regardless of type or instance., GetParameterValueByNameAsString - Returns paramter value as string. Same effect as lunchbox node, without python., Inspiration.BuffettNode - This is a result of \"what if?\" thinking. The output is a random Warren Buffett quote from brainyquotes.com, Inspiration.CarreyNode - This is a result of \"what if?\" thinking. The output is a random Jim Carrey quote from brainyquotes.com, Inspiration.CashNode - This is a result of \"what if?\" thinking. The output is a random Johnny Cash quote from brainyquotes.com, Inspiration.MarleyNode - This is a result of \"what if?\" thinking. The output is a random Bob Marley quote from brainyquotes.com, Inspiration.SearchQuoteNode - This is a result of \"what if?\" thinking. The output is a random quote based on the search criteria from brainyquotes.com. (As long as it is on the site), Inspiration.TeresaNode - This is a result of \"what if?\" thinking. The output is a random Mother Teresa quote from brainyquotes.com, Level Element Collector - This collects data for all of the Level elements in the model. Similar to the node on Lunchbox, but this one uses all O.O.B. nodes., List.AllIndicesOf - Given an item, returns the zero-based indices of all its occurrences in the list. If the item cannot be found, an empty list is returned. , List.ArchitecturalAlphabeticalSequence - This creates a list of characters. What's different is we typically exclude I's and O's from our characters., List.Contains - Determines if the given list contains the item or items., List.GetItemIndices - This node searches the input list for the given string or number., List.MergeSublists - This will merge all sublists with or without a character between the strings., LRE - Start of left-to-right embedding Unicode Character, LRM - Left-to-right mark unicode character, Mullion.SortByDirection - This will sort mullions of a host curtain wall by direction they are facing., OS.CurrentUser - This node retrieves the current user logged in., OS.CurrentUserAppData - This retrieves the current user's appdata location, Output.Clean - This will return a single value or list from one input., Override Cut Lineweight - Overrides the cut lines of the elements, Override Projection Line Color - This node overrides the projection line color with the input color value. Useful for annotation., Override Projection Lineweight - Overrides the line thickness of projection lines, Parametric Graphic Scale - This node automates the graphic scale assigned per viewport. The input required is all instances of viewport category. It also requires shared parameters. Visit sixtysecondrevit.blogspot.com for details., RemoveListFromList - This node essentially \"subtracts\" the contents of List B from List A to produce a new list with the unique items., Rhythm.3DRoomTags - This node will generate 3D room tags for all rooms in the model. (RFA in extra folder in Dynamo download), Rhythm.BackupRFADeleter - This node will scan the contents of a driectory and delete backup RFA files that appear with a four digit backup number before the file extension. (eg. Family1.0001.rfa) This is deleting files so please use with caution!, Rhythm.Detail Number by View Name  - Automatically numbers your detail number based on the first two characters of your view name. i.e. A4/... (Requires slash to be present), Rhythm.OverrideInteriorCrop - This node will override the lineweight of the crop region on interior elevations. This node would not be possible without the power of the Dynamo community. Specifically Danny Jones with Clark Patterson Lee, Rhythm.PercentGlazingByOrientation - This node was show at RTCNA2015 to optimize your workflows. It reports the window to wall % by direction the wall faces., Rhythm.RenumberGridsByCurve - This node will renumber grids in order of curve drawn through them. Select either letters or numbers. (Alphanumeric coming soon), Rhythm.RenumberRoomsByCurve - This node will renumber rooms along a curve path. This was developed through the guidance of WIlliam Wong at case. Considering WeWork bought Case I wanted this node to live somewhere., Rhythm.Toggle - Toggle that offers two outputs. Created for Dynamo 0.8.1 because of changes to the \"IF\" node, RLE - Start of right-to-left embedding Unicode Character, RLM - Right-to-left mark Unicode character, Room Element Collector - THis will collect data regarding rooms in the active model. Similar to Lunchbox node, but this one does not use python., Select Elements By Curve - This will select model elements in order that a curve is drawn through them., SetParameterByName(TypeOrInstance) - Set one of the element's parameters regardless of parameter type or instance., SquareFeetDropper - This node drops square feet from the pulled area, String.CharacterAtIndex - Get's the character at a given index, String.FlipReverse - This node flips the string and reverses it. (April Fools '15) Works for 0.8.0 only, added unicode support, String.IndicesOfCharacter - This node gets all the indices of a given character, String.RemoveAfterGivenCharacter - This will move all characters at and after the given character., String.RemovePriorToCharacter - This will remove all characters prior to the input character. Accepts strings., String.SpecifyDecimalPlaces - This node will take your inout string and number of decimal places to create a new simplified output., TextElement.ToLower - This node converts a Revit text elemnt to upper directly., TextElement.ToTitle - This node converts a Revit text elemnt to upper directly., TextElement.ToUpper - This node converts a Revit text elemnt to upper directly., Viewport.ViewName - This node gets the view name of viewports. There is an issue when \"title on sheet\" is used, so this fixes that., Wall.NorthSouthEastWest - This node determines which direction a wall is facing and groups them by the direction or direction they are closest to., Workset.Create - Creates a workset or worksets from input names., ZWJ - Zero width joiner Unicode Character, ZWNJ - Zero width non-joiner Unicode Character, Element.SetPinnedStatus - Will set the element to either pinned or not pinned. True is pinned, false is unpinned. For multiple elements use List.Map, Geometry.SpaceEvenlyWithBuffer - This will take input geometry and space it out in the Y direction with a buffer between",
            "engine_metadata": "",
            "engine_version": "0.9.1.3067",
            "created": "2015-12-15T20:51:03.381Z",
            "full_dependency_versions": [ "2015.12.14" ],
            "full_dependency_ids": [
              {
                "_id": "54e7add1dcee4dfd26000101",
                "name": "Rhythm"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2015.12.14"
          },
          {
            "_id": "5671dea25c568ad00c00003c",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/6c83038b-442a-472a-a2d6-88b176dd40eegregPkg552.zip",
            "contents": "All Framing at Reference Level - Collects all of the structural framing at a specific reference level, All Upper - This converts the ase of selected items to UPPER. Inputs require booleans to enable for category., Arrowhead Assigner - This node assings the arrowhead type for all text and keynote tags. There is an input for ones you want to exclude., Ayuda.IsArchi-LabInstalled - This node determines if Archi-Lab is installed. Useful with a toggle., Ayuda.IsClockworkInstalled - This node determines if clockwork is installed. Useful with a toggle., Ayuda.IsSteamNodesInstalled - This node determines if steamnodes is installed. Useful with a toggle.;, Ayuda.ThisOrThat - This node is a toggle between two inputs., Collector.DuctsBySystem - This collects all ducts in the project and organizes them by System Classification, Collector.KeynoteTags - This collects all of the keynote tags in the model. Similar to other nodes, but this doesn't use python., Collector.LabelTypes - This node collects all of the label types for the active family document., Collector.PipesBySystem - This collects all pipes in the project and organizes them by System Classification, Collector.Viewports - This collects all of the viewports in the model and outputs the name, title on sheet, scale and viewport type., Dash Remover - This node removes the dash at index 2 if it exists. The reason being, NCS states that no dash shall be used., Element.AreaWithTotal - This will get the area of an element if the parameter exists. Will total as well if needed., Element.Category - This node will get the input element(s)' categories, Element.GetLevelNameAsString - This retrieves the level name of the input elements as a string. This is in response to a known issue with the get value node., Element.GetMultipleParameterValuesByName - Get the value of multiple parameters from elements. (Seperate parameters with comma), Element.GetParameterValueByName(CaSe iNSeNSiTive) - Get the value of one of the element's parameters. (CaSe iNSeNSiTiVe), Element.OverrideCutLineweight - Overrides the cut lines of the elements, Element.OverrideProjectionLineColor - This node overrides the projection line color with the input color value. Useful for annotation., Element.OverrideProjectionLineweight - Overrides the line thickness of projection lines, Element.ParentFamily - This node retrieces the parent family name for each input element., Element.Room - This node takes the input of all elements of category and reports back the associated room per element. Currently tested with casework, furniture and plumbing fixtures., Element.SetMultipleParametersByName - Set multiple (comma seperated) parameters by name., Element.SetParameterByName(CaSe iNSeNSiTiVe) - Set one of the element's parameters. (CaSe iNSeNSiTiVe), Element.SetPinnedStatus - Will set the element to either pinned or not pinned. True is pinned, false is unpinned. For multiple elements use List.Map, Element.Type - This retrieves the element type of the given elements. (if available) Similar to others available but no python here., Geometry.SpaceEvenlyWithBuffer - This will take input geometry and space it out in the Y direction with a buffer between, Get All Tag Types - This node collects the tag types in the model., GetParameterValueByName(TypeOrInstance) - Gets a parameter value by name regardless of type or instance., GetParameterValueByNameAsString - Returns paramter value as string. Same effect as lunchbox node, without python., Inspiration.BuffettNode - This is a result of \"what if?\" thinking. The output is a random Warren Buffett quote from brainyquotes.com, Inspiration.CarreyNode - This is a result of \"what if?\" thinking. The output is a random Jim Carrey quote from brainyquotes.com, Inspiration.CashNode - This is a result of \"what if?\" thinking. The output is a random Johnny Cash quote from brainyquotes.com, Inspiration.MarleyNode - This is a result of \"what if?\" thinking. The output is a random Bob Marley quote from brainyquotes.com, Inspiration.SearchQuoteNode - This is a result of \"what if?\" thinking. The output is a random quote based on the search criteria from brainyquotes.com. (As long as it is on the site), Inspiration.TeresaNode - This is a result of \"what if?\" thinking. The output is a random Mother Teresa quote from brainyquotes.com, Level Element Collector - This collects data for all of the Level elements in the model. Similar to the node on Lunchbox, but this one uses all O.O.B. nodes., List.AllIndicesOf - Given an item, returns the zero-based indices of all its occurrences in the list. If the item cannot be found, an empty list is returned. , List.ArchitecturalAlphabeticalSequence - This creates a list of characters. What's different is we typically exclude I's and O's from our characters., List.Contains - Determines if the given list contains the item or items., List.GetItemIndices - This node searches the input list for the given string or number., List.MergeSublists - This will merge all sublists with or without a character between the strings., List.ReturnItemsPreviousToIndex - This will take an index (or indices) and return the items previous to it. Useful for sums of all items previous., LRE - Start of left-to-right embedding Unicode Character, LRM - Left-to-right mark unicode character, Mullion.SortByDirection - This will sort mullions of a host curtain wall by direction they are facing., OS.CurrentUser - This node retrieves the current user logged in., OS.CurrentUserAppData - This retrieves the current user's appdata location, Output.Clean - This will return a single value or list from one input., Parametric Graphic Scale - This node automates the graphic scale assigned per viewport. The input required is all instances of viewport category. It also requires shared parameters. Visit sixtysecondrevit.blogspot.com for details., RemoveListFromList - This node essentially \"subtracts\" the contents of List B from List A to produce a new list with the unique items., Rhythm.3DRoomTags - This node will generate 3D room tags for all rooms in the model. (RFA in extra folder in Dynamo download), Rhythm.BackupRFADeleter - This node will scan the contents of a driectory and delete backup RFA files that appear with a four digit backup number before the file extension. (eg. Family1.0001.rfa) This is deleting files so please use with caution!, Rhythm.Detail Number by View Name  - Automatically numbers your detail number based on the first two characters of your view name. i.e. A4/... (Requires slash to be present), Rhythm.OverrideInteriorCrop - This node will override the lineweight of the crop region on interior elevations. This node would not be possible without the power of the Dynamo community. Specifically Danny Jones with Clark Patterson Lee, Rhythm.PercentGlazingByOrientation - This node was show at RTCNA2015 to optimize your workflows. It reports the window to wall % by direction the wall faces., Rhythm.RenumberGridsByCurve - This node will renumber grids in order of curve drawn through them. Select either letters or numbers. (Alphanumeric coming soon), Rhythm.RenumberRoomsByCurve - This node will renumber rooms along a curve path. This was developed through the guidance of WIlliam Wong at case. Considering WeWork bought Case I wanted this node to live somewhere., Rhythm.Toggle - Toggle that offers two outputs. Created for Dynamo 0.8.1 because of changes to the \"IF\" node, RLE - Start of right-to-left embedding Unicode Character, RLM - Right-to-left mark Unicode character, Room Element Collector - THis will collect data regarding rooms in the active model. Similar to Lunchbox node, but this one does not use python., Select Elements By Curve - This will select model elements in order that a curve is drawn through them., SetParameterByName(TypeOrInstance) - Set one of the element's parameters regardless of parameter type or instance., SquareFeetDropper - This node drops square feet from the pulled area, String.CharacterAtIndex - Get's the character at a given index, String.FlipReverse - This node flips the string and reverses it. (April Fools '15) Works for 0.8.0 only, added unicode support, String.IndicesOfCharacter - This node gets all the indices of a given character, String.RemoveAfterGivenCharacter - This will move all characters at and after the given character., String.RemovePriorToCharacter - This will remove all characters prior to the input character. Accepts strings., String.SpecifyDecimalPlaces - This node will take your inout string and number of decimal places to create a new simplified output., TextElement.ToLower - This node converts a Revit text elemnt to upper directly., TextElement.ToTitle - This node converts a Revit text elemnt to upper directly., TextElement.ToUpper - This node converts a Revit text elemnt to upper directly., Viewport.ViewName - This node gets the view name of viewports. There is an issue when \"title on sheet\" is used, so this fixes that., Wall.NorthSouthEastWest - This node determines which direction a wall is facing and groups them by the direction or direction they are closest to., Workset.Create - Creates a workset or worksets from input names., ZWJ - Zero width joiner Unicode Character, ZWNJ - Zero width non-joiner Unicode Character, Element.OverrideCutColorInView - Overrides the elements cut color in the view.",
            "engine_metadata": "",
            "engine_version": "0.9.1.3067",
            "created": "2015-12-16T21:58:58.867Z",
            "full_dependency_versions": [ "2015.12.15" ],
            "full_dependency_ids": [
              {
                "_id": "54e7add1dcee4dfd26000101",
                "name": "Rhythm"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2015.12.15"
          },
          {
            "_id": "56733e105c568ad00c000040",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/0dbd6f29-534f-4abe-a655-d531993e3667gregPkg338.zip",
            "contents": "All Framing at Reference Level - Collects all of the structural framing at a specific reference level, All Upper - This converts the ase of selected items to UPPER. Inputs require booleans to enable for category., Arrowhead Assigner - This node assings the arrowhead type for all text and keynote tags. There is an input for ones you want to exclude., Ayuda.IsArchi-LabInstalled - This node determines if Archi-Lab is installed. Useful with a toggle., Ayuda.IsClockworkInstalled - This node determines if clockwork is installed. Useful with a toggle., Ayuda.IsSteamNodesInstalled - This node determines if steamnodes is installed. Useful with a toggle.;, Ayuda.ThisOrThat - This node is a toggle between two inputs., Collector.DuctsBySystem - This collects all ducts in the project and organizes them by System Classification, Collector.KeynoteTags - This collects all of the keynote tags in the model. Similar to other nodes, but this doesn't use python., Collector.LabelTypes - This node collects all of the label types for the active family document., Collector.PipesBySystem - This collects all pipes in the project and organizes them by System Classification, Collector.Viewports - This collects all of the viewports in the model and outputs the name, title on sheet, scale and viewport type., Dash Remover - This node removes the dash at index 2 if it exists. The reason being, NCS states that no dash shall be used., Element.AreaWithTotal - This will get the area of an element if the parameter exists. Will total as well if needed., Element.Category - This node will get the input element(s)' categories, Element.GetLevelNameAsString - This retrieves the level name of the input elements as a string. This is in response to a known issue with the get value node., Element.GetMultipleParameterValuesByName - Get the value of multiple parameters from elements. (Seperate parameters with comma), Element.GetParameterValueByName(CaSe iNSeNSiTive) - Get the value of one of the element's parameters. (CaSe iNSeNSiTiVe), Element.OverrideCutColorInView - Overrides the elements cut color in the view., Element.OverrideCutLineweight - Overrides the cut lines of the elements, Element.OverrideProjectionLineColor - This node overrides the projection line color with the input color value. Useful for annotation., Element.OverrideProjectionLineweight - Overrides the line thickness of projection lines, Element.ParentFamily - This node retrieces the parent family name for each input element., Element.Room - This node takes the input of all elements of category and reports back the associated room per element. Currently tested with casework, furniture and plumbing fixtures., Element.SetMultipleParametersByName - Set multiple (comma seperated) parameters by name., Element.SetParameterByName(CaSe iNSeNSiTiVe) - Set one of the element's parameters. (CaSe iNSeNSiTiVe), Element.SetPinnedStatus - Will set the element to either pinned or not pinned. True is pinned, false is unpinned. For multiple elements use List.Map, Element.Type - This retrieves the element type of the given elements. (if available) Similar to others available but no python here., Geometry.SpaceEvenlyWithBuffer - This will take input geometry and space it out in the Y direction with a buffer between, Get All Tag Types - This node collects the tag types in the model., GetParameterValueByName(TypeOrInstance) - Gets a parameter value by name regardless of type or instance., GetParameterValueByNameAsString - Returns paramter value as string. Same effect as lunchbox node, without python., Inspiration.BuffettNode - This is a result of \"what if?\" thinking. The output is a random Warren Buffett quote from brainyquotes.com, Inspiration.CarreyNode - This is a result of \"what if?\" thinking. The output is a random Jim Carrey quote from brainyquotes.com, Inspiration.CashNode - This is a result of \"what if?\" thinking. The output is a random Johnny Cash quote from brainyquotes.com, Inspiration.MarleyNode - This is a result of \"what if?\" thinking. The output is a random Bob Marley quote from brainyquotes.com, Inspiration.SearchQuoteNode - This is a result of \"what if?\" thinking. The output is a random quote based on the search criteria from brainyquotes.com. (As long as it is on the site), Inspiration.TeresaNode - This is a result of \"what if?\" thinking. The output is a random Mother Teresa quote from brainyquotes.com, Level Element Collector - This collects data for all of the Level elements in the model. Similar to the node on Lunchbox, but this one uses all O.O.B. nodes., List.AllIndicesOf - Given an item, returns the zero-based indices of all its occurrences in the list. If the item cannot be found, an empty list is returned. , List.ArchitecturalAlphabeticalSequence - This creates a list of characters. What's different is we typically exclude I's and O's from our characters so there is a toggle for this., List.Contains - Determines if the given list contains the item or items., List.GetItemIndices - This node searches the input list for the given string or number., List.MergeSublists - This will merge all sublists with or without a character between the strings., List.ReturnItemsPreviousToIndex - This will take an index (or indices) and return the items previous to it. Useful for sums of all items previous., LRE - Start of left-to-right embedding Unicode Character, LRM - Left-to-right mark unicode character, Mullion.SortByDirection - This will sort mullions of a host curtain wall by direction they are facing., OS.CurrentUser - This node retrieves the current user logged in., OS.CurrentUserAppData - This retrieves the current user's appdata location, Output.Clean - This will return a single value or list from one input., Parametric Graphic Scale - This node automates the graphic scale assigned per viewport. The input required is all instances of viewport category. It also requires shared parameters. Visit sixtysecondrevit.blogspot.com for details., RemoveListFromList - This node essentially \"subtracts\" the contents of List B from List A to produce a new list with the unique items., Rhythm.3DRoomTags - This node will generate 3D room tags for all rooms in the model. (RFA in extra folder in Dynamo download), Rhythm.BackupRFADeleter - This node will scan the contents of a driectory and delete backup RFA files that appear with a four digit backup number before the file extension. (eg. Family1.0001.rfa) This is deleting files so please use with caution!, Rhythm.Detail Number by View Name  - Automatically numbers your detail number based on the first two characters of your view name. i.e. A4/... (Requires slash to be present), Rhythm.OverrideInteriorCrop - This node will override the lineweight of the crop region on interior elevations. This node would not be possible without the power of the Dynamo community. Specifically Danny Jones with Clark Patterson Lee, Rhythm.PercentGlazingByOrientation - This node was show at RTCNA2015 to optimize your workflows. It reports the window to wall % by direction the wall faces., Rhythm.RenumberGridsByCurve - This node will renumber grids in order of curve drawn through them. Select either letters or numbers. (Alphanumeric coming soon), Rhythm.RenumberRoomsByCurve - This node will renumber rooms along a curve path. This was developed through the guidance of WIlliam Wong at case. Considering WeWork bought Case I wanted this node to live somewhere., Rhythm.Toggle - Toggle that offers two outputs. Created for Dynamo 0.8.1 because of changes to the \"IF\" node, RLE - Start of right-to-left embedding Unicode Character, RLM - Right-to-left mark Unicode character, Room Element Collector - THis will collect data regarding rooms in the active model. Similar to Lunchbox node, but this one does not use python., Select Elements By Curve - This will select model elements in order that a curve is drawn through them., SetParameterByName(TypeOrInstance) - Set one of the element's parameters regardless of parameter type or instance., SquareFeetDropper - This node drops square feet from the pulled area, String.CharacterAtIndex - Get's the character at a given index, String.FlipReverse - This node flips the string and reverses it. (April Fools '15) Works for 0.8.0 only, added unicode support, String.IndicesOfCharacter - This node gets all the indices of a given character, String.RemoveAfterGivenCharacter - This will move all characters at and after the given character., String.RemovePriorToCharacter - This will remove all characters prior to the input character. Accepts strings., String.SpecifyDecimalPlaces - This node will take your inout string and number of decimal places to create a new simplified output., TextElement.ToLower - This node converts a Revit text elemnt to upper directly., TextElement.ToTitle - This node converts a Revit text elemnt to upper directly., TextElement.ToUpper - This node converts a Revit text elemnt to upper directly., Viewport.ViewName - This node gets the view name of viewports. There is an issue when \"title on sheet\" is used, so this fixes that., Wall.NorthSouthEastWest - This node determines which direction a wall is facing and groups them by the direction or direction they are closest to., Workset.Create - Creates a workset or worksets from input names., ZWJ - Zero width joiner Unicode Character, ZWNJ - Zero width non-joiner Unicode Character",
            "engine_metadata": "",
            "engine_version": "0.9.1.3067",
            "created": "2015-12-17T22:58:24.354Z",
            "full_dependency_versions": [ "2015.12.16" ],
            "full_dependency_ids": [
              {
                "_id": "54e7add1dcee4dfd26000101",
                "name": "Rhythm"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2015.12.16"
          },
          {
            "_id": "567836b55c568ad00c00004d",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/90bb330b-977f-497b-908a-9e464ef73b17gregPkg632.zip",
            "contents": "Collector.KeynoteTags - This collects all of the keynote tags in the model. Similar to other nodes, but this doesn't use python., Get All Tag Types - This node collects the tag types in the model., All Framing at Reference Level - Collects all of the structural framing at a specific reference level, All Upper - This converts the ase of selected items to UPPER. Inputs require booleans to enable for category., Arrowhead Assigner - This node assings the arrowhead type for all text and keynote tags. There is an input for ones you want to exclude., Ayuda.IsArchi-LabInstalled - This node determines if Archi-Lab is installed. Useful with a toggle., Ayuda.IsClockworkInstalled - This node determines if clockwork is installed. Useful with a toggle., Ayuda.IsSteamNodesInstalled - This node determines if steamnodes is installed. Useful with a toggle.;, Ayuda.ThisOrThat - This node is a toggle between two inputs., Collector.DuctsBySystem - This collects all ducts in the project and organizes them by System Classification, Collector.KeynoteTags - This collects all of the keynote tags in the model. Similar to other nodes, but this doesn't use python., Collector.LabelTypes - This node collects all of the label types for the active family document., Collector.PipesBySystem - This collects all pipes in the project and organizes them by System Classification, Collector.Viewports - This collects all of the viewports in the model and outputs the name, title on sheet, scale and viewport type., Dash Remover - This node removes the dash at index 2 if it exists. The reason being, NCS states that no dash shall be used., Element.AreaWithTotal - This will get the area of an element if the parameter exists. Will total as well if needed., Element.Category - This node will get the input element(s)' categories, Element.GetLevelNameAsString - This retrieves the level name of the input elements as a string. This is in response to a known issue with the get value node., Element.GetMultipleParameterValuesByName - Get the value of multiple parameters from elements. (Seperate parameters with comma), Element.GetParameterValueByName(CaSe iNSeNSiTive) - Get the value of one of the element's parameters. (CaSe iNSeNSiTiVe), Element.OverrideCutColorInView - Overrides the elements cut color in the view., Element.OverrideCutLineweight - Overrides the cut lines of the elements, Element.OverrideProjectionLineColor - This node overrides the projection line color with the input color value. Useful for annotation., Element.OverrideProjectionLineweight - Overrides the line thickness of projection lines, Element.ParentFamily - This node retrieces the parent family name for each input element., Element.Room - This node takes the input of all elements of category and reports back the associated room per element. Currently tested with casework, furniture and plumbing fixtures., Element.SetMultipleParametersByName - Set multiple (comma seperated) parameters by name., Element.SetParameterByName(CaSe iNSeNSiTiVe) - Set one of the element's parameters. (CaSe iNSeNSiTiVe), Element.SetPinnedStatus - Will set the element to either pinned or not pinned. True is pinned, false is unpinned. For multiple elements use List.Map, Element.Type - This retrieves the element type of the given elements. (if available) Similar to others available but no python here., Geometry.SpaceEvenlyWithBuffer - This will take input geometry and space it out in the Y direction with a buffer between, Get All Tag Types - This node collects the tag types in the model., GetParameterValueByName(TypeOrInstance) - Gets a parameter value by name regardless of type or instance., GetParameterValueByNameAsString - Returns paramter value as string. Same effect as lunchbox node, without python., Inspiration.BuffettNode - This is a result of \"what if?\" thinking. The output is a random Warren Buffett quote from brainyquotes.com, Inspiration.CarreyNode - This is a result of \"what if?\" thinking. The output is a random Jim Carrey quote from brainyquotes.com, Inspiration.CashNode - This is a result of \"what if?\" thinking. The output is a random Johnny Cash quote from brainyquotes.com, Inspiration.MarleyNode - This is a result of \"what if?\" thinking. The output is a random Bob Marley quote from brainyquotes.com, Inspiration.SearchQuoteNode - This is a result of \"what if?\" thinking. The output is a random quote based on the search criteria from brainyquotes.com. (As long as it is on the site), Inspiration.TeresaNode - This is a result of \"what if?\" thinking. The output is a random Mother Teresa quote from brainyquotes.com, Level Element Collector - This collects data for all of the Level elements in the model. Similar to the node on Lunchbox, but this one uses all O.O.B. nodes., List.AllIndicesOf - Given an item, returns the zero-based indices of all its occurrences in the list. If the item cannot be found, an empty list is returned. , List.ArchitecturalAlphabeticalSequence - This creates a list of characters. What's different is we typically exclude I's and O's from our characters so there is a toggle for this., List.Contains - Determines if the given list contains the item or items., List.GetItemIndices - This node searches the input list for the given string or number., List.MergeSublists - This will merge all sublists with or without a character between the strings., List.ReturnItemsPreviousToIndex - This will take an index (or indices) and return the items previous to it. Useful for sums of all items previous., LRE - Start of left-to-right embedding Unicode Character, LRM - Left-to-right mark unicode character, Mullion.SortByDirection - This will sort mullions of a host curtain wall by direction they are facing., OS.CurrentUser - This node retrieves the current user logged in., OS.CurrentUserAppData - This retrieves the current user's appdata location, Output.Clean - This will return a single value or list from one input., Parametric Graphic Scale - This node automates the graphic scale assigned per viewport. The input required is all instances of viewport category. It also requires shared parameters. Visit sixtysecondrevit.blogspot.com for details., RemoveListFromList - This node essentially \"subtracts\" the contents of List B from List A to produce a new list with the unique items., Rhythm.3DRoomTags - This node will generate 3D room tags for all rooms in the model. (RFA in extra folder in Dynamo download), Rhythm.BackupRFADeleter - This node will scan the contents of a driectory and delete backup RFA files that appear with a four digit backup number before the file extension. (eg. Family1.0001.rfa) This is deleting files so please use with caution!, Rhythm.Detail Number by View Name  - Automatically numbers your detail number based on the first two characters of your view name. i.e. A4/... (Requires slash to be present), Rhythm.OverrideInteriorCrop - This node will override the lineweight of the crop region on interior elevations. This node would not be possible without the power of the Dynamo community. Specifically Danny Jones with Clark Patterson Lee, Rhythm.PercentGlazingByOrientation - This node was show at RTCNA2015 to optimize your workflows. It reports the window to wall % by direction the wall faces., Rhythm.RenumberGridsByCurve - This node will renumber grids in order of curve drawn through them. Select either letters or numbers. (Alphanumeric coming soon), Rhythm.RenumberRoomsByCurve - This node will renumber rooms along a curve path. This was developed through the guidance of WIlliam Wong at case. Considering WeWork bought Case I wanted this node to live somewhere., Rhythm.Toggle - Toggle that offers two outputs. Created for Dynamo 0.8.1 because of changes to the \"IF\" node, RLE - Start of right-to-left embedding Unicode Character, RLM - Right-to-left mark Unicode character, Room Element Collector - THis will collect data regarding rooms in the active model. Similar to Lunchbox node, but this one does not use python., Select Elements By Curve - This will select model elements in order that a curve is drawn through them., SetParameterByName(TypeOrInstance) - Set one of the element's parameters regardless of parameter type or instance., SquareFeetDropper - This node drops square feet from the pulled area, String.CharacterAtIndex - Get's the character at a given index, String.FlipReverse - This node flips the string and reverses it. (April Fools '15) Works for 0.8.0 only, added unicode support, String.IndicesOfCharacter - This node gets all the indices of a given character, String.RemoveAfterGivenCharacter - This will move all characters at and after the given character., String.RemovePriorToCharacter - This will remove all characters prior to the input character. Accepts strings., String.SpecifyDecimalPlaces - This node will take your inout string and number of decimal places to create a new simplified output., TextElement.ToLower - This node converts a Revit text elemnt to upper directly., TextElement.ToTitle - This node converts a Revit text elemnt to upper directly., TextElement.ToUpper - This node converts a Revit text elemnt to upper directly., Viewport.ViewName - This node gets the view name of viewports. There is an issue when \"title on sheet\" is used, so this fixes that., Wall.NorthSouthEastWest - This node determines which direction a wall is facing and groups them by the direction or direction they are closest to., Workset.Create - Creates a workset or worksets from input names., ZWJ - Zero width joiner Unicode Character, ZWNJ - Zero width non-joiner Unicode Character",
            "engine_metadata": "",
            "engine_version": "0.9.1.3067",
            "created": "2015-12-21T17:28:21.920Z",
            "full_dependency_versions": [ "2015.12.20" ],
            "full_dependency_ids": [
              {
                "_id": "54e7add1dcee4dfd26000101",
                "name": "Rhythm"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2015.12.20"
          },
          {
            "_id": "567c065e5c568ad00c00005e",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/4984fcdc-ac0b-49a1-9801-856b73b177dagregPkg221.zip",
            "contents": "All Framing at Reference Level - Collects all of the structural framing at a specific reference level, All Upper - This converts the ase of selected items to UPPER. Inputs require booleans to enable for category., Arrowhead Assigner - This node assings the arrowhead type for all text and keynote tags. There is an input for ones you want to exclude., Ayuda.IsArchi-LabInstalled - This node determines if Archi-Lab is installed. Useful with a toggle., Ayuda.IsClockworkInstalled - This node determines if clockwork is installed. Useful with a toggle., Ayuda.IsSteamNodesInstalled - This node determines if steamnodes is installed. Useful with a toggle.;, Ayuda.ThisOrThat - This node is a toggle between two inputs., Collector.DuctsBySystem - This collects all ducts in the project and organizes them by System Classification, Collector.KeynoteTags - This collects all of the keynote tags in the model. Similar to other nodes, but this doesn't use python., Collector.LabelTypes - This node collects all of the label types for the active family document., Collector.PipesBySystem - This collects all pipes in the project and organizes them by System Classification, Collector.Viewports - This collects all of the viewports in the model and outputs the name, title on sheet, scale and viewport type., Dash Remover - This node removes the dash at index 2 if it exists. The reason being, NCS states that no dash shall be used., Element.AreaWithTotal - This will get the area of an element if the parameter exists. Will total as well if needed., Element.Category - This node will get the input element(s)' categories, Element.GetLevelNameAsString - This retrieves the level name of the input elements as a string. This is in response to a known issue with the get value node., Element.GetMultipleParameterValuesByName - Get the value of multiple parameters from elements. (Seperate parameters with comma), Element.GetParameterValueByName(CaSe iNSeNSiTive) - Get the value of one of the element's parameters. (CaSe iNSeNSiTiVe), Element.OverrideCutColorInView - Overrides the elements cut color in the view., Element.OverrideCutLineweight - Overrides the cut lines of the elements, Element.OverrideProjectionLineColor - This node overrides the projection line color with the input color value. Useful for annotation., Element.OverrideProjectionLineweight - Overrides the line thickness of projection lines, Element.ParentFamily - This node retrieces the parent family name for each input element., Element.Room - This node takes the input of all elements of category and reports back the associated room per element. Currently tested with casework, furniture and plumbing fixtures., Element.SetMultipleParametersByName - Set multiple (comma seperated) parameters by name., Element.SetParameterByName(CaSe iNSeNSiTiVe) - Set one of the element's parameters. (CaSe iNSeNSiTiVe), Element.SetPinnedStatus - Will set the element to either pinned or not pinned. True is pinned, false is unpinned. For multiple elements use List.Map, Element.Type - This retrieves the element type of the given elements. (if available) Similar to others available but no python here., Geometry.SpaceEvenlyWithBuffer - This will take input geometry and space it out in the Y direction with a buffer between, Get All Tag Types - This node collects the tag types in the model., GetParameterValueByName(TypeOrInstance) - Gets a parameter value by name regardless of type or instance., GetParameterValueByNameAsString - Returns paramter value as string. Same effect as lunchbox node, without python., Inspiration.BuffettNode - This is a result of \"what if?\" thinking. The output is a random Warren Buffett quote from brainyquotes.com, Inspiration.CarreyNode - This is a result of \"what if?\" thinking. The output is a random Jim Carrey quote from brainyquotes.com, Inspiration.CashNode - This is a result of \"what if?\" thinking. The output is a random Johnny Cash quote from brainyquotes.com, Inspiration.MarleyNode - This is a result of \"what if?\" thinking. The output is a random Bob Marley quote from brainyquotes.com, Inspiration.SearchQuoteNode - This is a result of \"what if?\" thinking. The output is a random quote based on the search criteria from brainyquotes.com. (As long as it is on the site), Inspiration.TeresaNode - This is a result of \"what if?\" thinking. The output is a random Mother Teresa quote from brainyquotes.com, Level Element Collector - This collects data for all of the Level elements in the model. Similar to the node on Lunchbox, but this one uses all O.O.B. nodes., List.AllIndicesOf - Given an item, returns the zero-based indices of all its occurrences in the list. If the item cannot be found, an empty list is returned. , List.ArchitecturalAlphabeticalSequence - This creates a list of characters. What's different is we typically exclude I's and O's from our characters so there is a toggle for this., List.Contains - Determines if the given list contains the item or items., List.GetItemIndices - This node searches the input list for the given string or number., List.MergeSublists - This will merge all sublists with or without a character between the strings., List.ReturnItemsPreviousToIndex - This will take an index (or indices) and return the items previous to it. Useful for sums of all items previous., LRE - Start of left-to-right embedding Unicode Character, LRM - Left-to-right mark unicode character, Mullion.SortByDirection - This will sort mullions of a host curtain wall by direction they are facing., OS.CurrentUser - This node retrieves the current user logged in., OS.CurrentUserAppData - This retrieves the current user's appdata location, Output.Clean - This will return a single value or list from one input., Parametric Graphic Scale - This node automates the graphic scale assigned per viewport. The input required is all instances of viewport category. It also requires shared parameters. Visit sixtysecondrevit.blogspot.com for details., RemoveListFromList - This node essentially \"subtracts\" the contents of List B from List A to produce a new list with the unique items., Rhythm.3DRoomTags - This node will generate 3D room tags for all rooms in the model. (RFA in extra folder in Dynamo download), Rhythm.BackupRFADeleter - This node will scan the contents of a driectory and delete backup RFA files that appear with a four digit backup number before the file extension. (eg. Family1.0001.rfa) This is deleting files so please use with caution!, Rhythm.Detail Number by View Name  - Automatically numbers your detail number based on the first two characters of your view name. i.e. A4/... (Requires slash to be present), Rhythm.OverrideInteriorCrop - This node will override the lineweight of the crop region on interior elevations. This node would not be possible without the power of the Dynamo community. Specifically Danny Jones with Clark Patterson Lee, Rhythm.PercentGlazingByOrientation - This node was show at RTCNA2015 to optimize your workflows. It reports the window to wall % by direction the wall faces., Rhythm.RenumberGridsByCurve - This node will renumber grids in order of curve drawn through them. Select either letters or numbers. (Alphanumeric coming soon), Rhythm.RenumberRoomsByCurve - This node will renumber rooms along a curve path. This was developed through the guidance of WIlliam Wong at case. Considering WeWork bought Case I wanted this node to live somewhere., Rhythm.Toggle - Toggle that offers two outputs. Created for Dynamo 0.8.1 because of changes to the \"IF\" node, RLE - Start of right-to-left embedding Unicode Character, RLM - Right-to-left mark Unicode character, Room Element Collector - THis will collect data regarding rooms in the active model. Similar to Lunchbox node, but this one does not use python., Select Elements By Curve - This will select model elements in order that a curve is drawn through them., SetParameterByName(TypeOrInstance) - Set one of the element's parameters regardless of parameter type or instance., SquareFeetDropper - This node drops square feet from the pulled area, String.CharacterAtIndex - Get's the character at a given index, String.FlipReverse - This node flips the string and reverses it. (April Fools '15) Works for 0.8.0 only, added unicode support, String.IndicesOfCharacter - This node gets all the indices of a given character, String.RemoveAfterGivenCharacter - This will move all characters at and after the given character., String.RemovePriorToCharacter - This will remove all characters prior to the input character. Accepts strings., String.SpecifyDecimalPlaces - This node will take your inout string and number of decimal places to create a new simplified output., TextElement.ToLower - This node converts a Revit text elemnt to upper directly., TextElement.ToTitle - This node converts a Revit text elemnt to upper directly., TextElement.ToUpper - This node converts a Revit text elemnt to upper directly., Viewport.ViewName - This node gets the view name of viewports. There is an issue when \"title on sheet\" is used, so this fixes that., Wall.NorthSouthEastWest - This node determines which direction a wall is facing and groups them by the direction or direction they are closest to., Workset.Create - Creates a workset or worksets from input names., ZWJ - Zero width joiner Unicode Character, ZWNJ - Zero width non-joiner Unicode Character",
            "engine_metadata": "",
            "engine_version": "0.9.1.3067",
            "created": "2015-12-24T14:51:10.846Z",
            "full_dependency_versions": [ "2015.12.23" ],
            "full_dependency_ids": [
              {
                "_id": "54e7add1dcee4dfd26000101",
                "name": "Rhythm"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2015.12.23"
          },
          {
            "_id": "568c087d5c568ad00c00008d",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/9d1ad264-0c30-433d-adfa-b2819416bb2agregPkg194.zip",
            "contents": "All Framing at Reference Level - Collects all of the structural framing at a specific reference level, All Upper - This converts the ase of selected items to UPPER. Inputs require booleans to enable for category., Arrowhead Assigner - This node assings the arrowhead type for all text and keynote tags. There is an input for ones you want to exclude., Ayuda.IsArchi-LabInstalled - This node determines if Archi-Lab is installed. Useful with a toggle., Ayuda.IsClockworkInstalled - This node determines if clockwork is installed. Useful with a toggle., Ayuda.IsSteamNodesInstalled - This node determines if steamnodes is installed. Useful with a toggle.;, Ayuda.ThisOrThat - This node is a toggle between two inputs., Collector.DuctsBySystem - This collects all ducts in the project and organizes them by System Classification, Collector.KeynoteTags - This collects all of the keynote tags in the model. Similar to other nodes, but this doesn't use python., Collector.LabelTypes - This node collects all of the label types for the active family document., Collector.PipesBySystem - This collects all pipes in the project and organizes them by System Classification, Collector.Viewports - This collects all of the viewports in the model and outputs the name, title on sheet, scale and viewport type., Dash Remover - This node removes the dash at index 2 if it exists. The reason being, NCS states that no dash shall be used., Element.AreaWithTotal - This will get the area of an element if the parameter exists. Will total as well if needed., Element.Category - This node will get the input element(s)' categories, Element.GetLevelNameAsString - This retrieves the level name of the input elements as a string. This is in response to a known issue with the get value node., Element.GetMultipleParameterValuesByName - Get the value of multiple parameters from elements. (Seperate parameters with comma), Element.GetParameterValueByName(CaSe iNSeNSiTive) - Get the value of one of the element's parameters. (CaSe iNSeNSiTiVe), Element.OverrideCutColorInView - Overrides the elements cut color in the view., Element.OverrideCutLineweight - Overrides the cut lines of the elements, Element.OverrideProjectionLineColor - This node overrides the projection line color with the input color value. Useful for annotation., Element.OverrideProjectionLineweight - Overrides the line thickness of projection lines, Element.ParentFamily - This node retrieces the parent family name for each input element., Element.Room - This node takes the input of all elements of category and reports back the associated room per element. Currently tested with casework, furniture and plumbing fixtures., Element.SetMultipleParametersByName - Set multiple (comma seperated) parameters by name., Element.SetParameterByName(CaSe iNSeNSiTiVe) - Set one of the element's parameters. (CaSe iNSeNSiTiVe), Element.SetPinnedStatus - Will set the element to either pinned or not pinned. True is pinned, false is unpinned. For multiple elements use List.Map, Element.Type - This retrieves the element type of the given elements. (if available) Similar to others available but no python here., Geometry.SpaceEvenlyWithBuffer - This will take input geometry and space it out in the Y direction with a buffer between, Get All Tag Types - This node collects the tag types in the model., GetParameterValueByName(TypeOrInstance) - Gets a parameter value by name regardless of type or instance., GetParameterValueByNameAsString - Returns paramter value as string. Same effect as lunchbox node, without python., Inspiration.BuffettNode - This is a result of \"what if?\" thinking. The output is a random Warren Buffett quote from brainyquotes.com, Inspiration.CarreyNode - This is a result of \"what if?\" thinking. The output is a random Jim Carrey quote from brainyquotes.com, Inspiration.CashNode - This is a result of \"what if?\" thinking. The output is a random Johnny Cash quote from brainyquotes.com, Inspiration.MarleyNode - This is a result of \"what if?\" thinking. The output is a random Bob Marley quote from brainyquotes.com, Inspiration.SearchQuoteNode - This is a result of \"what if?\" thinking. The output is a random quote based on the search criteria from brainyquotes.com. (As long as it is on the site), Inspiration.TeresaNode - This is a result of \"what if?\" thinking. The output is a random Mother Teresa quote from brainyquotes.com, Level Element Collector - This collects data for all of the Level elements in the model. Similar to the node on Lunchbox, but this one uses all O.O.B. nodes., List.AllIndicesOf - Given an item, returns the zero-based indices of all its occurrences in the list. If the item cannot be found, an empty list is returned. , List.ArchitecturalAlphabeticalSequence - This creates a list of characters. What's different is we typically exclude I's and O's from our characters so there is a toggle for this., List.Contains - Determines if the given list contains the item or items., List.GetItemIndices - This node searches the input list for the given string or number., List.MergeSublists - This will merge all sublists with or without a character between the strings., List.ReturnItemsPreviousToIndex - This will take an index (or indices) and return the items previous to it. Useful for sums of all items previous., LRE - Start of left-to-right embedding Unicode Character, LRM - Left-to-right mark unicode character, Mullion.SortByDirection - This will sort mullions of a host curtain wall by direction they are facing., OS.CurrentUser - This node retrieves the current user logged in., OS.CurrentUserAppData - This retrieves the current user's appdata location, Output.Clean - This will return a single value or list from one input., Parametric Graphic Scale - This node automates the graphic scale assigned per viewport. The input required is all instances of viewport category. It also requires shared parameters. Visit sixtysecondrevit.blogspot.com for details., RemoveListFromList - This node essentially \"subtracts\" the contents of List B from List A to produce a new list with the unique items., Rhythm.3DRoomTags - This node will generate 3D room tags for all rooms in the model. (RFA in extra folder in Dynamo download), Rhythm.BackupRFADeleter - This node will scan the contents of a driectory and delete backup RFA files that appear with a four digit backup number before the file extension. (eg. Family1.0001.rfa) This is deleting files so please use with caution!, Rhythm.Detail Number by View Name  - Automatically numbers your detail number based on the first two characters of your view name. i.e. A4/... (Requires slash to be present), Rhythm.OverrideInteriorCrop - This node will override the lineweight of the crop region on interior elevations. This node would not be possible without the power of the Dynamo community. Specifically Danny Jones with Clark Patterson Lee, Rhythm.PercentGlazingByOrientation - This node was show at RTCNA2015 to optimize your workflows. It reports the window to wall % by direction the wall faces., Rhythm.RenumberGridsByCurve - This node will renumber grids in order of curve drawn through them. Select either letters or numbers. (Alphanumeric coming soon), Rhythm.RenumberRoomsByCurve - This node will renumber rooms along a curve path. This was developed through the guidance of WIlliam Wong at case. Considering WeWork bought Case I wanted this node to live somewhere., Rhythm.Toggle - Toggle that offers two outputs. Created for Dynamo 0.8.1 because of changes to the \"IF\" node, RLE - Start of right-to-left embedding Unicode Character, RLM - Right-to-left mark Unicode character, Room Element Collector - THis will collect data regarding rooms in the active model. Similar to Lunchbox node, but this one does not use python., Select Elements By Curve - This will select model elements in order that a curve is drawn through them., SetParameterByName(TypeOrInstance) - Set one of the element's parameters regardless of parameter type or instance., SquareFeetDropper - This node drops square feet from the pulled area, String.CharacterAtIndex - Get's the character at a given index, String.FlipReverse - This node flips the string and reverses it. (April Fools '15) Works for 0.8.0 only, added unicode support, String.IndicesOfCharacter - This node gets all the indices of a given character, String.RemoveAfterGivenCharacter - This will move all characters at and after the given character., String.RemovePriorToCharacter - This will remove all characters prior to the input character. Accepts strings., String.SpecifyDecimalPlaces - This node will take your inout string and number of decimal places to create a new simplified output., TextElement.ToLower - This node converts a Revit text elemnt to upper directly., TextElement.ToTitle - This node converts a Revit text elemnt to upper directly., TextElement.ToUpper - This node converts a Revit text elemnt to upper directly., Viewport.ViewName - This node gets the view name of viewports. There is an issue when \"title on sheet\" is used, so this fixes that., Wall.NorthSouthEastWest - This node determines which direction a wall is facing and groups them by the direction or direction they are closest to., Workset.Create - Creates a workset or worksets from input names., ZWJ - Zero width joiner Unicode Character, ZWNJ - Zero width non-joiner Unicode Character",
            "engine_metadata": "",
            "engine_version": "0.9.1.3067",
            "created": "2016-01-05T18:16:29.244Z",
            "full_dependency_versions": [ "2016.1.5" ],
            "full_dependency_ids": [
              {
                "_id": "54e7add1dcee4dfd26000101",
                "name": "Rhythm"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2016.1.5"
          },
          {
            "_id": "568ec0165c568ad00c00009d",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/8490705e-88f2-42e1-9c04-4bfb2dc95e26gregPkg684.zip",
            "contents": "All Framing at Reference Level - Collects all of the structural framing at a specific reference level, All Upper - This converts the ase of selected items to UPPER. Inputs require booleans to enable for category., Arrowhead Assigner - This node assings the arrowhead type for all text and keynote tags. There is an input for ones you want to exclude., Ayuda.IsArchi-LabInstalled - This node determines if Archi-Lab is installed. Useful with a toggle., Ayuda.IsClockworkInstalled - This node determines if clockwork is installed. Useful with a toggle., Ayuda.IsSteamNodesInstalled - This node determines if steamnodes is installed. Useful with a toggle.;, Ayuda.ThisOrThat - This node is a toggle between two inputs., Collector.DuctsBySystem - This collects all ducts in the project and organizes them by System Classification, Collector.KeynoteTags - This collects all of the keynote tags in the model. Similar to other nodes, but this doesn't use python., Collector.LabelTypes - This node collects all of the label types for the active family document., Collector.PipesBySystem - This collects all pipes in the project and organizes them by System Classification, Collector.Viewports - This collects all of the viewports in the model and outputs the name, title on sheet, scale and viewport type., Dash Remover - This node removes the dash at index 2 if it exists. The reason being, NCS states that no dash shall be used., Element.AreaWithTotal - This will get the area of an element if the parameter exists. Will total as well if needed., Element.Category - This node will get the input element(s)' categories, Element.GetLevelNameAsString - This retrieves the level name of the input elements as a string. This is in response to a known issue with the get value node., Element.GetMultipleParameterValuesByName - Get the value of multiple parameters from elements. (Seperate parameters with comma), Element.GetParameterValueByName(CaSe iNSeNSiTive) - Get the value of one of the element's parameters. (CaSe iNSeNSiTiVe), Element.OverrideCutColorInView - Overrides the elements cut color in the view., Element.OverrideCutLineweight - Overrides the cut lines of the elements, Element.OverrideProjectionLineColor - This node overrides the projection line color with the input color value. Useful for annotation., Element.OverrideProjectionLineweight - Overrides the line thickness of projection lines, Element.ParentFamily - This node retrieces the parent family name for each input element., Element.Room - This node takes the input of all elements of category and reports back the associated room per element. Currently tested with casework, furniture and plumbing fixtures., Element.SetMultipleParametersByName - Set multiple (comma seperated) parameters by name., Element.SetParameterByName(CaSe iNSeNSiTiVe) - Set one of the element's parameters. (CaSe iNSeNSiTiVe), Element.SetPinnedStatus - Will set the element to either pinned or not pinned. True is pinned, false is unpinned. For multiple elements use List.Map, Element.Type - This retrieves the element type of the given elements. (if available) Similar to others available but no python here., Geometry.SpaceEvenlyWithBuffer - This will take input geometry and space it out in the Y direction with a buffer between, Get All Tag Types - This node collects the tag types in the model., GetParameterValueByName(TypeOrInstance) - Gets a parameter value by name regardless of type or instance., GetParameterValueByNameAsString - Returns paramter value as string. Same effect as lunchbox node, without python., Inspiration.BuffettNode - This is a result of \"what if?\" thinking. The output is a random Warren Buffett quote from brainyquotes.com, Inspiration.CarreyNode - This is a result of \"what if?\" thinking. The output is a random Jim Carrey quote from brainyquotes.com, Inspiration.CashNode - This is a result of \"what if?\" thinking. The output is a random Johnny Cash quote from brainyquotes.com, Inspiration.MarleyNode - This is a result of \"what if?\" thinking. The output is a random Bob Marley quote from brainyquotes.com, Inspiration.SearchQuoteNode - This is a result of \"what if?\" thinking. The output is a random quote based on the search criteria from brainyquotes.com. (As long as it is on the site), Inspiration.TeresaNode - This is a result of \"what if?\" thinking. The output is a random Mother Teresa quote from brainyquotes.com, Level Element Collector - This collects data for all of the Level elements in the model. Similar to the node on Lunchbox, but this one uses all O.O.B. nodes., List.AllIndicesOf - Given an item, returns the zero-based indices of all its occurrences in the list. If the item cannot be found, an empty list is returned. , List.ArchitecturalAlphabeticalSequence - This creates a list of characters. What's different is we typically exclude I's and O's from our characters so there is a toggle for this., List.Contains - Determines if the given list contains the item or items., List.GetItemIndices - This node searches the input list for the given string or number., List.MergeSublists - This will merge all sublists with or without a character between the strings., List.ReturnItemsPreviousToIndex - This will take an index (or indices) and return the items previous to it. Useful for sums of all items previous., LRE - Start of left-to-right embedding Unicode Character, LRM - Left-to-right mark unicode character, Mullion.SortByDirection - This will sort mullions of a host curtain wall by direction they are facing., OS.CurrentUser - This node retrieves the current user logged in., OS.CurrentUserAppData - This retrieves the current user's appdata location, Output.Clean - This will return a single value or list from one input., Parametric Graphic Scale - This node automates the graphic scale assigned per viewport. The input required is all instances of viewport category. It also requires shared parameters. Visit sixtysecondrevit.blogspot.com for details., RemoveListFromList - This node essentially \"subtracts\" the contents of List B from List A to produce a new list with the unique items., Rhythm.3DRoomTags - This node will generate 3D room tags for all rooms in the model. (RFA in extra folder in Dynamo download), Rhythm.BackupRFADeleter - This node will scan the contents of a driectory and delete backup RFA files that appear with a four digit backup number before the file extension. (eg. Family1.0001.rfa) This is deleting files so please use with caution!, Rhythm.Detail Number by View Name  - Automatically numbers your detail number based on the first two characters of your view name. i.e. A4/... (Requires slash to be present), Rhythm.OverrideInteriorCrop - This node will override the lineweight of the crop region on interior elevations. This node would not be possible without the power of the Dynamo community. Specifically Danny Jones with Clark Patterson Lee, Rhythm.PercentGlazingByOrientation - This node was show at RTCNA2015 to optimize your workflows. It reports the window to wall % by direction the wall faces., Rhythm.RenumberGridsByCurve - This node will renumber grids in order of curve drawn through them. Select either letters or numbers. (Alphanumeric coming soon), Rhythm.RenumberRoomsByCurve - This node will renumber rooms along a curve path. This was developed through the guidance of WIlliam Wong at case. Considering WeWork bought Case I wanted this node to live somewhere., Rhythm.Toggle - Toggle that offers two outputs. Created for Dynamo 0.8.1 because of changes to the \"IF\" node, RLE - Start of right-to-left embedding Unicode Character, RLM - Right-to-left mark Unicode character, Room Element Collector - THis will collect data regarding rooms in the active model. Similar to Lunchbox node, but this one does not use python., Select Elements By Curve - This will select model elements in order that a curve is drawn through them., SetParameterByName(TypeOrInstance) - Set one of the element's parameters regardless of parameter type or instance., SquareFeetDropper - This node drops square feet from the pulled area, String.CharacterAtIndex - Get's the character at a given index, String.FlipReverse - This node flips the string and reverses it. (April Fools '15) Works for 0.8.0 only, added unicode support, String.IndicesOfCharacter - This node gets all the indices of a given character, String.RemoveAfterGivenCharacter - This will move all characters at and after the given character., String.RemovePriorToCharacter - This will remove all characters prior to the input character. Accepts strings., String.SpecifyDecimalPlaces - This node will take your inout string and number of decimal places to create a new simplified output., TextElement.ToLower - This node converts a Revit text elemnt to upper directly., TextElement.ToTitle - This node converts a Revit text elemnt to upper directly., TextElement.ToUpper - This node converts a Revit text elemnt to upper directly., Viewport.ViewName - This node gets the view name of viewports. There is an issue when \"title on sheet\" is used, so this fixes that., Wall.NorthSouthEastWest - This node determines which direction a wall is facing and groups them by the direction or direction they are closest to., Workset.Create - Creates a workset or worksets from input names., ZWJ - Zero width joiner Unicode Character, ZWNJ - Zero width non-joiner Unicode Character, Group.UngroupElements - This will ungroup the input groups and output their elements. Use with care!",
            "engine_metadata": "",
            "engine_version": "0.9.1.3067",
            "created": "2016-01-07T19:44:22.026Z",
            "full_dependency_versions": [ "2016.1.7" ],
            "full_dependency_ids": [
              {
                "_id": "54e7add1dcee4dfd26000101",
                "name": "Rhythm"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2016.1.7"
          },
          {
            "_id": "56a0e7dcc3e9ee4a08000011",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/3a2c14b0-ef3f-4a9e-be75-3a077fc0284egregPkg803.zip",
            "contents": "All Framing at Reference Level - Collects all of the structural framing at a specific reference level, All Upper - This converts the ase of selected items to UPPER. Inputs require booleans to enable for category., Arrowhead Assigner - This node assings the arrowhead type for all text and keynote tags. There is an input for ones you want to exclude., Ayuda.IsArchi-LabInstalled - This node determines if Archi-Lab is installed. Useful with a toggle., Ayuda.IsClockworkInstalled - This node determines if clockwork is installed. Useful with a toggle., Ayuda.IsSteamNodesInstalled - This node determines if steamnodes is installed. Useful with a toggle.;, Ayuda.ThisOrThat - This node is a toggle between two inputs., Collector.DuctsBySystem - This collects all ducts in the project and organizes them by System Classification, Collector.KeynoteTags - This collects all of the keynote tags in the model. Similar to other nodes, but this doesn't use python., Collector.LabelTypes - This node collects all of the label types for the active family document., Collector.PipesBySystem - This collects all pipes in the project and organizes them by System Classification, Collector.Viewports - This collects all of the viewports in the model and outputs the name, title on sheet, scale and viewport type., Dash Remover - This node removes the dash at index 2 if it exists. The reason being, NCS states that no dash shall be used., Element.AreaWithTotal - This will get the area of an element if the parameter exists. Will total as well if needed., Element.Category - This node will get the input element(s)' categories, Element.GetLevelNameAsString - This retrieves the level name of the input elements as a string. This is in response to a known issue with the get value node., Element.GetMultipleParameterValuesByName - Get the value of multiple parameters from elements. (Seperate parameters with comma), Element.GetParameterValueByName(CaSe iNSeNSiTive) - Get the value of one of the element's parameters. (CaSe iNSeNSiTiVe), Element.OverrideCutColorInView - Overrides the elements cut color in the view., Element.OverrideCutLineweight - Overrides the cut lines of the elements, Element.OverrideProjectionLineColor - This node overrides the projection line color with the input color value. Useful for annotation., Element.OverrideProjectionLineweight - Overrides the line thickness of projection lines, Element.ParentFamily - This node retrieces the parent family name for each input element., Element.Room - This node takes the input of all elements of category and reports back the associated room per element. Currently tested with casework, furniture and plumbing fixtures., Element.SetMultipleParametersByName - Set multiple (comma seperated) parameters by name., Element.SetParameterByName(CaSe iNSeNSiTiVe) - Set one of the element's parameters. (CaSe iNSeNSiTiVe), Element.SetPinnedStatus - Will set the element to either pinned or not pinned. True is pinned, false is unpinned. For multiple elements use List.Map, Element.Type - This retrieves the element type of the given elements. (if available) Similar to others available but no python here., Geometry.SpaceEvenlyWithBuffer - This will take input geometry and space it out in the Y direction with a buffer between, Get All Tag Types - This node collects the tag types in the model., GetParameterValueByName(TypeOrInstance) - Gets a parameter value by name regardless of type or instance., GetParameterValueByNameAsString - Returns paramter value as string. Same effect as lunchbox node, without python., Group.UngroupElements - This will ungroup the input groups and output their elements. Use with care!, Inspiration.BuffettNode - This is a result of \"what if?\" thinking. The output is a random Warren Buffett quote from brainyquotes.com, Inspiration.CarreyNode - This is a result of \"what if?\" thinking. The output is a random Jim Carrey quote from brainyquotes.com, Inspiration.CashNode - This is a result of \"what if?\" thinking. The output is a random Johnny Cash quote from brainyquotes.com, Inspiration.MarleyNode - This is a result of \"what if?\" thinking. The output is a random Bob Marley quote from brainyquotes.com, Inspiration.SearchQuoteNode - This is a result of \"what if?\" thinking. The output is a random quote based on the search criteria from brainyquotes.com. (As long as it is on the site), Inspiration.TeresaNode - This is a result of \"what if?\" thinking. The output is a random Mother Teresa quote from brainyquotes.com, Level Element Collector - This collects data for all of the Level elements in the model. Similar to the node on Lunchbox, but this one uses all O.O.B. nodes., List.AllIndicesOf - Given an item, returns the zero-based indices of all its occurrences in the list. If the item cannot be found, an empty list is returned. , List.ArchitecturalAlphabeticalSequence - This creates a list of characters. What's different is we typically exclude I's and O's from our characters so there is a toggle for this., List.Contains - Determines if the given list contains the item or items., List.GetItemIndices - This node searches the input list for the given string or number., List.MergeSublists - This will merge all sublists with or without a character between the strings., List.ReturnItemsPreviousToIndex - This will take an index (or indices) and return the items previous to it. Useful for sums of all items previous., Mullion.SortByDirection - This will sort mullions of a host curtain wall by direction they are facing., OS.CurrentUser - This node retrieves the current user logged in., OS.CurrentUserAppData - This retrieves the current user's appdata location, Output.Clean - This will return a single value or list from one input., Parametric Graphic Scale - This node automates the graphic scale assigned per viewport. The input required is all instances of viewport category. It also requires shared parameters. Visit sixtysecondrevit.blogspot.com for details., RemoveListFromList - This node essentially \"subtracts\" the contents of List B from List A to produce a new list with the unique items., Rhythm.3DRoomTags - This node will generate 3D room tags for all rooms in the model. (RFA in extra folder in Dynamo download), Rhythm.BackupRFADeleter - This node will scan the contents of a driectory and delete backup RFA files that appear with a four digit backup number before the file extension. (eg. Family1.0001.rfa) This is deleting files so please use with caution!, Rhythm.Detail Number by View Name  - Automatically numbers your detail number based on the first two characters of your view name. i.e. A4/... (Requires slash to be present), Rhythm.OverrideInteriorCrop - This node will override the lineweight of the crop region on interior elevations. This node would not be possible without the power of the Dynamo community. Specifically Danny Jones with Clark Patterson Lee, Rhythm.PercentGlazingByOrientation - This node was show at RTCNA2015 to optimize your workflows. It reports the window to wall % by direction the wall faces., Rhythm.RenumberGridsByCurve - This node will renumber grids in order of curve drawn through them. Select either letters or numbers. (Alphanumeric coming soon), Rhythm.RenumberRoomsByCurve - This node will renumber rooms along a curve path. This was developed through the guidance of WIlliam Wong at case. Considering WeWork bought Case I wanted this node to live somewhere., Rhythm.Toggle - Toggle that offers two outputs. Created for Dynamo 0.8.1 because of changes to the \"IF\" node, Room Element Collector - THis will collect data regarding rooms in the active model. Similar to Lunchbox node, but this one does not use python., Select Elements By Curve - This will select model elements in order that a curve is drawn through them., SetParameterByName(TypeOrInstance) - Set one of the element's parameters regardless of parameter type or instance., SquareFeetDropper - This node drops square feet from the pulled area, String.CharacterAtIndex - Get's the character at a given index, String.FlipReverse - This node flips the string and reverses it. (April Fools '15) Works for 0.8.0 only, added unicode support, String.IndicesOfCharacter - This node gets all the indices of a given character, String.RemoveAfterGivenCharacter - This will move all characters at and after the given character., String.RemovePriorToCharacter - This will remove all characters prior to the input character. Accepts strings., String.SpecifyDecimalPlaces - This node will take your inout string and number of decimal places to create a new simplified output., TextElement.ToLower - This node converts a Revit text elemnt to upper directly., TextElement.ToTitle - This node converts a Revit text elemnt to upper directly., TextElement.ToUpper - This node converts a Revit text elemnt to upper directly., Unicode.LRE - Start of left-to-right embedding Unicode Character, Unicode.LRM - Left-to-right mark unicode character, Unicode.RLE - Start of right-to-left embedding Unicode Character, Unicode.RLM - Right-to-left mark Unicode character, Unicode.ZWJ - Zero width joiner Unicode Character, Unicode.ZWNJ - Zero width non-joiner Unicode Character, Viewport.ViewName - This node gets the view name of viewports. There is an issue when \"title on sheet\" is used, so this fixes that., Wall.NorthSouthEastWest - This node determines which direction a wall is facing and groups them by the direction or direction they are closest to., Workset.Create - Creates a workset or worksets from input names.",
            "engine_metadata": "",
            "engine_version": "0.9.1.3067",
            "created": "2016-01-21T14:14:52.378Z",
            "full_dependency_versions": [ "2016.1.20" ],
            "full_dependency_ids": [
              {
                "_id": "54e7add1dcee4dfd26000101",
                "name": "Rhythm"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2016.1.20"
          },
          {
            "_id": "56a66460c3e9ee4a0800002a",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/1e5d7c7e-5b39-4c94-9eac-ce9475f5088dgregPkg375.zip",
            "contents": "All Framing at Reference Level - Collects all of the structural framing at a specific reference level, All Upper - This converts the ase of selected items to UPPER. Inputs require booleans to enable for category., Arrowhead Assigner - This node assings the arrowhead type for all text and keynote tags. There is an input for ones you want to exclude., Ayuda.IsArchi-LabInstalled - This node determines if Archi-Lab is installed. Useful with a toggle., Ayuda.IsClockworkInstalled - This node determines if clockwork is installed. Useful with a toggle., Ayuda.IsSteamNodesInstalled - This node determines if steamnodes is installed. Useful with a toggle.;, Ayuda.ThisOrThat - This node is a toggle between two inputs., Collector.DuctsBySystem - This collects all ducts in the project and organizes them by System Classification, Collector.KeynoteTags - This collects all of the keynote tags in the model. Similar to other nodes, but this doesn't use python., Collector.LabelTypes - This node collects all of the label types for the active family document., Collector.PipesBySystem - This collects all pipes in the project and organizes them by System Classification, Collector.Viewports - This collects all of the viewports in the model and outputs the name, title on sheet, scale and viewport type., Dash Remover - This node removes the dash at index 2 if it exists. The reason being, NCS states that no dash shall be used., Element.AreaWithTotal - This will get the area of an element if the parameter exists. Will total as well if needed., Element.Category - This node will get the input element(s)' categories, Element.GetLevelNameAsString - This retrieves the level name of the input elements as a string. This is in response to a known issue with the get value node., Element.GetMultipleParameterValuesByName - Get the value of multiple parameters from elements. (Seperate parameters with comma), Element.GetParameterValueByName(CaSe iNSeNSiTive) - Get the value of one of the element's parameters. (CaSe iNSeNSiTiVe), Element.OverrideCutColorInView - Overrides the elements cut color in the view., Element.OverrideCutLineweight - Overrides the cut lines of the elements, Element.OverrideProjectionLineColor - This node overrides the projection line color with the input color value. Useful for annotation., Element.OverrideProjectionLineweight - Overrides the line thickness of projection lines, Element.ParentFamily - This node retrieces the parent family name for each input element., Element.Room - This node takes the input of all elements of category and reports back the associated room per element. Currently tested with casework, furniture and plumbing fixtures., Element.SetMultipleParametersByName - Set multiple (comma seperated) parameters by name., Element.SetParameterByName(CaSe iNSeNSiTiVe) - Set one of the element's parameters. (CaSe iNSeNSiTiVe), Element.SetPinnedStatus - Will set the element to either pinned or not pinned. True is pinned, false is unpinned. For multiple elements use List.Map, Element.Type - This retrieves the element type of the given elements. (if available) Similar to others available but no python here., Geometry.SpaceEvenlyWithBuffer - This will take input geometry and space it out in the Y direction with a buffer between, Get All Tag Types - This node collects the tag types in the model., GetParameterValueByName(TypeOrInstance) - Gets a parameter value by name regardless of type or instance., GetParameterValueByNameAsString - Returns paramter value as string. Same effect as lunchbox node, without python., Group.UngroupElements - This will ungroup the input groups and output their elements. Use with care!, Inspiration.BuffettNode - This is a result of \"what if?\" thinking. The output is a random Warren Buffett quote from brainyquotes.com, Inspiration.CarreyNode - This is a result of \"what if?\" thinking. The output is a random Jim Carrey quote from brainyquotes.com, Inspiration.CashNode - This is a result of \"what if?\" thinking. The output is a random Johnny Cash quote from brainyquotes.com, Inspiration.MarleyNode - This is a result of \"what if?\" thinking. The output is a random Bob Marley quote from brainyquotes.com, Inspiration.SearchQuoteNode - This is a result of \"what if?\" thinking. The output is a random quote based on the search criteria from brainyquotes.com. (As long as it is on the site), Inspiration.TeresaNode - This is a result of \"what if?\" thinking. The output is a random Mother Teresa quote from brainyquotes.com, Level Element Collector - This collects data for all of the Level elements in the model. Similar to the node on Lunchbox, but this one uses all O.O.B. nodes., List.AllIndicesOf - Given an item, returns the zero-based indices of all its occurrences in the list. If the item cannot be found, an empty list is returned. , List.ArchitecturalAlphabeticalSequence - This creates a list of characters. What's different is we typically exclude I's and O's from our characters so there is a toggle for this., List.Contains - Determines if the given list contains the item or items., List.GetItemIndices - This node searches the input list for the given string or number., List.MergeSublists - This will merge all sublists with or without a character between the strings., List.ReturnItemsPreviousToIndex - This will take an index (or indices) and return the items previous to it. Useful for sums of all items previous., Mullion.SortByDirection - This will sort mullions of a host curtain wall by direction they are facing., OS.CurrentUser - This node retrieves the current user logged in., OS.CurrentUserAppData - This retrieves the current user's appdata location, Output.Clean - This will return a single value or list from one input., Parametric Graphic Scale - This node automates the graphic scale assigned per viewport. The input required is all instances of viewport category. It also requires shared parameters. Visit sixtysecondrevit.blogspot.com for details., RemoveListFromList - This node essentially \"subtracts\" the contents of List B from List A to produce a new list with the unique items., Rhythm.3DRoomTags - This node will generate 3D room tags for all rooms in the model. (RFA in extra folder in Dynamo download), Rhythm.BackupRFADeleter - This node will scan the contents of a driectory and delete backup RFA files that appear with a four digit backup number before the file extension. (eg. Family1.0001.rfa) This is deleting files so please use with caution!, Rhythm.Detail Number by View Name  - Automatically numbers your detail number based on the first two characters of your view name. i.e. A4/... (Requires slash to be present), Rhythm.OverrideInteriorCrop - This node will override the lineweight of the crop region on interior elevations. This node would not be possible without the power of the Dynamo community. Specifically Danny Jones with Clark Patterson Lee, Rhythm.PercentGlazingByOrientation - This node was show at RTCNA2015 to optimize your workflows. It reports the window to wall % by direction the wall faces., Rhythm.RenumberGridsByCurve - This node will renumber grids in order of curve drawn through them. Select either letters or numbers. (Alphanumeric coming soon), Rhythm.RenumberRoomsByCurve - This node will renumber rooms along a curve path. This was developed through the guidance of WIlliam Wong at case. Considering WeWork bought Case I wanted this node to live somewhere., Rhythm.Toggle - Toggle that offers two outputs. Created for Dynamo 0.8.1 because of changes to the \"IF\" node, Room Element Collector - THis will collect data regarding rooms in the active model. Similar to Lunchbox node, but this one does not use python., Select Elements By Curve - This will select model elements in order that a curve is drawn through them., SetParameterByName(TypeOrInstance) - Set one of the element's parameters regardless of parameter type or instance., SquareFeetDropper - This node drops square feet from the pulled area, String.CharacterAtIndex - Get's the character at a given index, String.FlipReverse - This node flips the string and reverses it. (April Fools '15) Works for 0.8.0 only, added unicode support, String.IndicesOfCharacter - This node gets all the indices of a given character, String.RemoveAfterGivenCharacter - This will move all characters at and after the given character., String.RemovePriorToCharacter - This will remove all characters prior to the input character. Accepts strings., String.SpecifyDecimalPlaces - This node will take your inout string and number of decimal places to create a new simplified output., TextElement.ToLower - This node converts a Revit text elemnt to upper directly., TextElement.ToTitle - This node converts a Revit text elemnt to upper directly., TextElement.ToUpper - This node converts a Revit text elemnt to upper directly., Unicode.LRE - Start of left-to-right embedding Unicode Character, Unicode.LRM - Left-to-right mark unicode character, Unicode.RLE - Start of right-to-left embedding Unicode Character, Unicode.RLM - Right-to-left mark Unicode character, Unicode.ZWJ - Zero width joiner Unicode Character, Unicode.ZWNJ - Zero width non-joiner Unicode Character, Viewport.ViewName - This node gets the view name of viewports. There is an issue when \"title on sheet\" is used, so this fixes that., Wall.NorthSouthEastWest - This node determines which direction a wall is facing and groups them by the direction or direction they are closest to., Workset.Create - Creates a workset or worksets from input names.",
            "engine_metadata": "",
            "engine_version": "0.9.1.3067",
            "created": "2016-01-25T18:07:28.490Z",
            "full_dependency_versions": [ "2016.1.24" ],
            "full_dependency_ids": [
              {
                "_id": "54e7add1dcee4dfd26000101",
                "name": "Rhythm"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2016.1.24"
          },
          {
            "_id": "56a945d1c3e9ee4a0800004c",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/7ad6e2eb-4681-4b58-a937-da8af75aa78bgregPkg985.zip",
            "contents": "All Framing at Reference Level - Collects all of the structural framing at a specific reference level, All Upper - This converts the ase of selected items to UPPER. Inputs require booleans to enable for category., Arrowhead Assigner - This node assings the arrowhead type for all text and keynote tags. There is an input for ones you want to exclude., Ayuda.IsArchi-LabInstalled - This node determines if Archi-Lab is installed. Useful with a toggle., Ayuda.IsClockworkInstalled - This node determines if clockwork is installed. Useful with a toggle., Ayuda.IsSteamNodesInstalled - This node determines if steamnodes is installed. Useful with a toggle.;, Ayuda.ThisOrThat - This node is a toggle between two inputs., Collector.DuctsBySystem - This collects all ducts in the project and organizes them by System Classification, Collector.KeynoteTags - This collects all of the keynote tags in the model. Similar to other nodes, but this doesn't use python., Collector.LabelTypes - This node collects all of the label types for the active family document., Collector.PipesBySystem - This collects all pipes in the project and organizes them by System Classification, Collector.Viewports - This collects all of the viewports in the model and outputs the name, title on sheet, scale and viewport type., Dash Remover - This node removes the dash at index 2 if it exists. The reason being, NCS states that no dash shall be used., Element.AreaWithTotal - This will get the area of an element if the parameter exists. Will total as well if needed., Element.Category - This node will get the input element(s)' categories, Element.GetLevelNameAsString - This retrieves the level name of the input elements as a string. This is in response to a known issue with the get value node., Element.GetMultipleParameterValuesByName - Get the value of multiple parameters from elements. (Seperate parameters with comma), Element.GetParameterValueByName(CaSe iNSeNSiTive) - Get the value of one of the element's parameters. (CaSe iNSeNSiTiVe), Element.OverrideCutColorInView - Overrides the elements cut color in the view., Element.OverrideCutLineweight - Overrides the cut lines of the elements, Element.OverrideProjectionLineColor - This node overrides the projection line color with the input color value. Useful for annotation., Element.OverrideProjectionLineweight - Overrides the line thickness of projection lines, Element.ParentFamily - This node retrieces the parent family name for each input element., Element.Room - This node takes the input of all elements of category and reports back the associated room per element. Currently tested with casework, furniture and plumbing fixtures., Element.SetMultipleParametersByName - Set multiple (comma seperated) parameters by name., Element.SetParameterByName(CaSe iNSeNSiTiVe) - Set one of the element's parameters. (CaSe iNSeNSiTiVe), Element.SetPinnedStatus - Will set the element to either pinned or not pinned. True is pinned, false is unpinned. For multiple elements use List.Map, Element.Type - This retrieves the element type of the given elements. (if available) Similar to others available but no python here., Geometry.SpaceEvenlyWithBuffer - This will take input geometry and space it out in the Y direction with a buffer between, Get All Tag Types - This node collects the tag types in the model., GetParameterValueByName(TypeOrInstance) - Gets a parameter value by name regardless of type or instance., GetParameterValueByNameAsString - Returns paramter value as string. Same effect as lunchbox node, without python., Group.UngroupElements - This will ungroup the input groups and output their elements. Use with care!, Inspiration.BuffettNode - This is a result of \"what if?\" thinking. The output is a random Warren Buffett quote from brainyquotes.com, Inspiration.CarreyNode - This is a result of \"what if?\" thinking. The output is a random Jim Carrey quote from brainyquotes.com, Inspiration.CashNode - This is a result of \"what if?\" thinking. The output is a random Johnny Cash quote from brainyquotes.com, Inspiration.MarleyNode - This is a result of \"what if?\" thinking. The output is a random Bob Marley quote from brainyquotes.com, Inspiration.SearchQuoteNode - This is a result of \"what if?\" thinking. The output is a random quote based on the search criteria from brainyquotes.com. (As long as it is on the site), Inspiration.TeresaNode - This is a result of \"what if?\" thinking. The output is a random Mother Teresa quote from brainyquotes.com, Level Element Collector - This collects data for all of the Level elements in the model. Similar to the node on Lunchbox, but this one uses all O.O.B. nodes., List.AllIndicesOf - Given an item, returns the zero-based indices of all its occurrences in the list. If the item cannot be found, an empty list is returned. , List.ArchitecturalAlphabeticalSequence - This creates a list of characters. What's different is we typically exclude I's and O's from our characters so there is a toggle for this., List.Contains - Determines if the given list contains the item or items., List.GetItemIndices - This node searches the input list for the given string or number., List.MergeSublists - This will merge all sublists with or without a character between the strings., List.ReturnItemsPreviousToIndex - This will take an index (or indices) and return the items previous to it. Useful for sums of all items previous., Mullion.SortByDirection - This will sort mullions of a host curtain wall by direction they are facing., OS.CurrentUser - This node retrieves the current user logged in., OS.CurrentUserAppData - This retrieves the current user's appdata location, Output.Clean - This will return a single value or list from one input., Parametric Graphic Scale - This node automates the graphic scale assigned per viewport. The input required is all instances of viewport category. It also requires shared parameters. Visit sixtysecondrevit.blogspot.com for details., RemoveListFromList - This node essentially \"subtracts\" the contents of List B from List A to produce a new list with the unique items., Rhythm.3DRoomTags - This node will generate 3D room tags for all rooms in the model. (RFA in extra folder in Dynamo download), Rhythm.BackupRFADeleter - This node will scan the contents of a driectory and delete backup RFA files that appear with a four digit backup number before the file extension. (eg. Family1.0001.rfa) This is deleting files so please use with caution!, Rhythm.Detail Number by View Name  - Automatically numbers your detail number based on the first two characters of your view name. i.e. A4/... (Requires slash to be present), Rhythm.OverrideInteriorCrop - This node will override the lineweight of the crop region on interior elevations. This node would not be possible without the power of the Dynamo community. Specifically Danny Jones with Clark Patterson Lee, Rhythm.PercentGlazingByOrientation - This node was show at RTCNA2015 to optimize your workflows. It reports the window to wall % by direction the wall faces., Rhythm.RenumberGridsByCurve - This node will renumber grids in order of curve drawn through them. Select either letters or numbers. (Alphanumeric coming soon), Rhythm.RenumberRoomsByCurve - This node will renumber rooms along a curve path. This was developed through the guidance of WIlliam Wong at case. Considering WeWork bought Case I wanted this node to live somewhere., Rhythm.Toggle - Toggle that offers two outputs. Created for Dynamo 0.8.1 because of changes to the \"IF\" node, Room Element Collector - THis will collect data regarding rooms in the active model. Similar to Lunchbox node, but this one does not use python., Select Elements By Curve - This will select model elements in order that a curve is drawn through them., SetParameterByName(TypeOrInstance) - Set one of the element's parameters regardless of parameter type or instance., SquareFeetDropper - This node drops square feet from the pulled area, String.CharacterAtIndex - Get's the character at a given index, String.FlipReverse - This node flips the string and reverses it. (April Fools '15) Works for 0.8.0 only, added unicode support, String.IndicesOfCharacter - This node gets all the indices of a given character, String.RemoveAfterGivenCharacter - This will move all characters at and after the given character., String.RemovePriorToCharacter - This will remove all characters prior to the input character. Accepts strings., String.SpecifyDecimalPlaces - This node will take your inout string and number of decimal places to create a new simplified output., TextElement.ToLower - This node converts a Revit text elemnt to upper directly., TextElement.ToTitle - This node converts a Revit text elemnt to upper directly., TextElement.ToUpper - This node converts a Revit text elemnt to upper directly., Unicode.LRE - Start of left-to-right embedding Unicode Character, Unicode.LRM - Left-to-right mark unicode character, Unicode.RLE - Start of right-to-left embedding Unicode Character, Unicode.RLM - Right-to-left mark Unicode character, Unicode.ZWJ - Zero width joiner Unicode Character, Unicode.ZWNJ - Zero width non-joiner Unicode Character, Viewport.ViewName - This node gets the view name of viewports. There is an issue when \"title on sheet\" is used, so this fixes that., Wall.NorthSouthEastWest - This node determines which direction a wall is facing and groups them by the direction or direction they are closest to., Workset.Create - Creates a workset or worksets from input names., Element.Space - This will retrieve the space in which an element is contained. (if available)",
            "engine_metadata": "",
            "engine_version": "0.9.1.3067",
            "created": "2016-01-27T22:33:53.494Z",
            "full_dependency_versions": [ "2016.1.27" ],
            "full_dependency_ids": [
              {
                "_id": "54e7add1dcee4dfd26000101",
                "name": "Rhythm"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2016.1.27"
          },
          {
            "_id": "56afe8bac3e9ee4a08000079",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/3e1e5017-d94a-493e-8c10-489f2c6de8d0gregPkg947.zip",
            "contents": "All Framing at Reference Level - Collects all of the structural framing at a specific reference level, All Upper - This converts the ase of selected items to UPPER. Inputs require booleans to enable for category., Arrowhead Assigner - This node assings the arrowhead type for all text and keynote tags. There is an input for ones you want to exclude., Ayuda.IsArchi-LabInstalled - This node determines if Archi-Lab is installed. Useful with a toggle., Ayuda.IsClockworkInstalled - This node determines if clockwork is installed. Useful with a toggle., Ayuda.IsSteamNodesInstalled - This node determines if steamnodes is installed. Useful with a toggle.;, Ayuda.ThisOrThat - This node is a toggle between two inputs., Collector.DuctsBySystem - This collects all ducts in the project and organizes them by System Classification, Collector.KeynoteTags - This collects all of the keynote tags in the model. Similar to other nodes, but this doesn't use python., Collector.LabelTypes - This node collects all of the label types for the active family document., Collector.PipesBySystem - This collects all pipes in the project and organizes them by System Classification, Collector.Viewports - This collects all of the viewports in the model and outputs the name, title on sheet, scale and viewport type., Dash Remover - This node removes the dash at index 2 if it exists. The reason being, NCS states that no dash shall be used., Element.AreaWithTotal - This will get the area of an element if the parameter exists. Will total as well if needed., Element.Category - This node will get the input element(s)' categories, Element.GetLevelNameAsString - This retrieves the level name of the input elements as a string. This is in response to a known issue with the get value node., Element.GetMultipleParameterValuesByName - Get the value of multiple parameters from elements. (Seperate parameters with comma), Element.GetParameterValueByName(CaSe iNSeNSiTive) - Get the value of one of the element's parameters. (CaSe iNSeNSiTiVe), Element.OverrideCutColorInView - Overrides the elements cut color in the view., Element.OverrideCutLineweight - Overrides the cut lines of the elements, Element.OverrideProjectionLineColor - This node overrides the projection line color with the input color value. Useful for annotation., Element.OverrideProjectionLineweight - Overrides the line thickness of projection lines, Element.ParentFamily - This node retrieces the parent family name for each input element., Element.Room - This node takes the input of all elements of category and reports back the associated room per element. Currently tested with casework, furniture and plumbing fixtures., Element.SetMultipleParametersByName - Set multiple (comma seperated) parameters by name., Element.SetParameterByName(CaSe iNSeNSiTiVe) - Set one of the element's parameters. (CaSe iNSeNSiTiVe), Element.SetPinnedStatus - Will set the element to either pinned or not pinned. True is pinned, false is unpinned. For multiple elements use List.Map, Element.Space - This will retrieve the space in which an element is contained. (if available), Element.Type - This retrieves the element type of the given elements. (if available) Similar to others available but no python here., Geometry.SpaceEvenlyWithBuffer - This will take input geometry and space it out in the Y direction with a buffer between, Get All Tag Types - This node collects the tag types in the model., GetParameterValueByName(TypeOrInstance) - Gets a parameter value by name regardless of type or instance., GetParameterValueByNameAsString - Returns paramter value as string. Same effect as lunchbox node, without python., Group.UngroupElements - This will ungroup the input groups and output their elements. Use with care!, Inspiration.BuffettNode - This is a result of \"what if?\" thinking. The output is a random Warren Buffett quote from brainyquotes.com, Inspiration.CarreyNode - This is a result of \"what if?\" thinking. The output is a random Jim Carrey quote from brainyquotes.com, Inspiration.CashNode - This is a result of \"what if?\" thinking. The output is a random Johnny Cash quote from brainyquotes.com, Inspiration.MarleyNode - This is a result of \"what if?\" thinking. The output is a random Bob Marley quote from brainyquotes.com, Inspiration.SearchQuoteNode - This is a result of \"what if?\" thinking. The output is a random quote based on the search criteria from brainyquotes.com. (As long as it is on the site), Inspiration.TeresaNode - This is a result of \"what if?\" thinking. The output is a random Mother Teresa quote from brainyquotes.com, Level Element Collector - This collects data for all of the Level elements in the model. Similar to the node on Lunchbox, but this one uses all O.O.B. nodes., List.AllIndicesOf - Given an item, returns the zero-based indices of all its occurrences in the list. If the item cannot be found, an empty list is returned. , List.ArchitecturalAlphabeticalSequence - This creates a list of characters. What's different is we typically exclude I's and O's from our characters so there is a toggle for this., List.Contains - Determines if the given list contains the item or items., List.GetItemIndices - This node searches the input list for the given string or number., List.MergeSublists - This will merge all sublists with or without a character between the strings., List.ReturnItemsPreviousToIndex - This will take an index (or indices) and return the items previous to it. Useful for sums of all items previous., Mullion.SortByDirection - This will sort mullions of a host curtain wall by direction they are facing., OS.CurrentUser - This node retrieves the current user logged in., OS.CurrentUserAppData - This retrieves the current user's appdata location, Output.Clean - This will return a single value or list from one input., Parametric Graphic Scale - This node automates the graphic scale assigned per viewport. The input required is all instances of viewport category. It also requires shared parameters. Visit sixtysecondrevit.blogspot.com for details., RemoveListFromList - This node essentially \"subtracts\" the contents of List B from List A to produce a new list with the unique items., Rhythm.3DRoomTags - This node will generate 3D room tags for all rooms in the model. (RFA in extra folder in Dynamo download), Rhythm.BackupRFADeleter - This node will scan the contents of a driectory and delete backup RFA files that appear with a four digit backup number before the file extension. (eg. Family1.0001.rfa) This is deleting files so please use with caution!, Rhythm.Detail Number by View Name  - Automatically numbers your detail number based on the first two characters of your view name. i.e. A4/... (Requires slash to be present), Rhythm.OverrideInteriorCrop - This node will override the lineweight of the crop region on interior elevations. This node would not be possible without the power of the Dynamo community. Specifically Danny Jones with Clark Patterson Lee, Rhythm.PercentGlazingByOrientation - This node was show at RTCNA2015 to optimize your workflows. It reports the window to wall % by direction the wall faces., Rhythm.RenumberGridsByCurve - This node will renumber grids in order of curve drawn through them. Select either letters or numbers. (Alphanumeric coming soon), Rhythm.RenumberRoomsByCurve - This node will renumber rooms along a curve path. This was developed through the guidance of WIlliam Wong at case. Considering WeWork bought Case I wanted this node to live somewhere., Rhythm.Toggle - Toggle that offers two outputs. Created for Dynamo 0.8.1 because of changes to the \"IF\" node, Room Element Collector - THis will collect data regarding rooms in the active model. Similar to Lunchbox node, but this one does not use python., Select Elements By Curve - This will select model elements in order that a curve is drawn through them., SetParameterByName(TypeOrInstance) - Set one of the element's parameters regardless of parameter type or instance., SquareFeetDropper - This node drops square feet from the pulled area, String.CharacterAtIndex - Get's the character at a given index, String.FlipReverse - This node flips the string and reverses it. (April Fools '15) Works for 0.8.0 only, added unicode support, String.IndicesOfCharacter - This node gets all the indices of a given character, String.RemoveAfterGivenCharacter - This will move all characters at and after the given character., String.RemovePriorToCharacter - This will remove all characters prior to the input character. Accepts strings., String.SpecifyDecimalPlaces - This node will take your inout string and number of decimal places to create a new simplified output., TextElement.ToLower - This node converts a Revit text elemnt to upper directly., TextElement.ToTitle - This node converts a Revit text elemnt to upper directly., TextElement.ToUpper - This node converts a Revit text elemnt to upper directly., Unicode.LRE - Start of left-to-right embedding Unicode Character, Unicode.LRM - Left-to-right mark unicode character, Unicode.RLE - Start of right-to-left embedding Unicode Character, Unicode.RLM - Right-to-left mark Unicode character, Unicode.ZWJ - Zero width joiner Unicode Character, Unicode.ZWNJ - Zero width non-joiner Unicode Character, Viewport.ViewName - This node gets the view name of viewports. There is an issue when \"title on sheet\" is used, so this fixes that., Wall.NorthSouthEastWest - This node determines which direction a wall is facing and groups them by the direction or direction they are closest to., Workset.Create - Creates a workset or worksets from input names.",
            "engine_metadata": "",
            "engine_version": "0.9.1.3067",
            "created": "2016-02-01T23:22:34.455Z",
            "full_dependency_versions": [ "2016.2.1" ],
            "full_dependency_ids": [
              {
                "_id": "54e7add1dcee4dfd26000101",
                "name": "Rhythm"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2016.2.1"
          },
          {
            "_id": "56b8b015c3e9ee4a080000c7",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/f733488a-c5ae-4969-ae23-91ea317e2481gregPkg706.zip",
            "contents": "All Framing at Reference Level - Collects all of the structural framing at a specific reference level, All Upper - This converts the ase of selected items to UPPER. Inputs require booleans to enable for category., Arrowhead Assigner - This node assings the arrowhead type for all text and keynote tags. There is an input for ones you want to exclude., Ayuda.IsArchi-LabInstalled - This node determines if Archi-Lab is installed. Useful with a toggle., Ayuda.IsClockworkInstalled - This node determines if clockwork is installed. Useful with a toggle., Ayuda.IsSteamNodesInstalled - This node determines if steamnodes is installed. Useful with a toggle.;, Ayuda.ThisOrThat - This node is a toggle between two inputs., Collector.DuctsBySystem - This collects all ducts in the project and organizes them by System Classification, Collector.KeynoteTags - This collects all of the keynote tags in the model. Similar to other nodes, but this doesn't use python., Collector.LabelTypes - This node collects all of the label types for the active family document., Collector.PipesBySystem - This collects all pipes in the project and organizes them by System Classification, Collector.Viewports - This collects all of the viewports in the model and outputs the name, title on sheet, scale and viewport type., Dash Remover - This node removes the dash at index 2 if it exists. The reason being, NCS states that no dash shall be used., Element.AreaWithTotal - This will get the area of an element if the parameter exists. Will total as well if needed., Element.Category - This node will get the input element(s)' categories, Element.GetLevelNameAsString - This retrieves the level name of the input elements as a string. This is in response to a known issue with the get value node., Element.GetMultipleParameterValuesByName - Get the value of multiple parameters from elements. (Seperate parameters with comma), Element.GetParameterValueByName(CaSe iNSeNSiTive) - Get the value of one of the element's parameters. (CaSe iNSeNSiTiVe), Element.OverrideCutColorInView - Overrides the elements cut color in the view., Element.OverrideCutLineweight - Overrides the cut lines of the elements, Element.OverrideProjectionLineColor - This node overrides the projection line color with the input color value. Useful for annotation., Element.OverrideProjectionLineweight - Overrides the line thickness of projection lines, Element.ParentFamily - This node retrieces the parent family name for each input element., Element.Room - This node takes the input of all elements of category and reports back the associated room per element. Currently tested with casework, furniture and plumbing fixtures., Element.SetMultipleParametersByName - Set multiple (comma seperated) parameters by name., Element.SetParameterByName(CaSe iNSeNSiTiVe) - Set one of the element's parameters. (CaSe iNSeNSiTiVe), Element.SetPinnedStatus - Will set the element to either pinned or not pinned. True is pinned, false is unpinned. For multiple elements use List.Map, Element.Space - This will retrieve the space in which an element is contained. (if available), Element.Type - This retrieves the element type of the given elements. (if available) Similar to others available but no python here., Geometry.SpaceEvenlyWithBuffer - This will take input geometry and space it out in the Y direction with a buffer between, Get All Tag Types - This node collects the tag types in the model., GetParameterValueByName(TypeOrInstance) - Gets a parameter value by name regardless of type or instance., GetParameterValueByNameAsString - Returns paramter value as string. Same effect as lunchbox node, without python., Group.UngroupElements - This will ungroup the input groups and output their elements. Use with care!, Inspiration.BuffettNode - This is a result of \"what if?\" thinking. The output is a random Warren Buffett quote from brainyquotes.com, Inspiration.CarreyNode - This is a result of \"what if?\" thinking. The output is a random Jim Carrey quote from brainyquotes.com, Inspiration.CashNode - This is a result of \"what if?\" thinking. The output is a random Johnny Cash quote from brainyquotes.com, Inspiration.MarleyNode - This is a result of \"what if?\" thinking. The output is a random Bob Marley quote from brainyquotes.com, Inspiration.SearchQuoteNode - This is a result of \"what if?\" thinking. The output is a random quote based on the search criteria from brainyquotes.com. (As long as it is on the site), Inspiration.TeresaNode - This is a result of \"what if?\" thinking. The output is a random Mother Teresa quote from brainyquotes.com, Level Element Collector - This collects data for all of the Level elements in the model. Similar to the node on Lunchbox, but this one uses all O.O.B. nodes., List.AllIndicesOf - Given an item, returns the zero-based indices of all its occurrences in the list. If the item cannot be found, an empty list is returned. , List.ArchitecturalAlphabeticalSequence - This creates a list of characters. What's different is we typically exclude I's and O's from our characters so there is a toggle for this., List.Contains - Determines if the given list contains the item or items., List.GetItemIndices - This node searches the input list for the given string or number., List.MergeSublists - This will merge all sublists with or without a character between the strings., List.ReturnItemsPreviousToIndex - This will take an index (or indices) and return the items previous to it. Useful for sums of all items previous., Mullion.SortByDirection - This will sort mullions of a host curtain wall by direction they are facing., OS.CurrentUser - This node retrieves the current user logged in., OS.CurrentUserAppData - This retrieves the current user's appdata location, Output.Clean - This will return a single value or list from one input., Parametric Graphic Scale - This node automates the graphic scale assigned per viewport. The input required is all instances of viewport category. It also requires shared parameters. Visit sixtysecondrevit.blogspot.com for details., RemoveListFromList - This node essentially \"subtracts\" the contents of List B from List A to produce a new list with the unique items., Rhythm.3DRoomTags - This node will generate 3D room tags for all rooms in the model. (RFA in extra folder in Dynamo download), Rhythm.BackupRFADeleter - This node will scan the contents of a driectory and delete backup RFA files that appear with a four digit backup number before the file extension. (eg. Family1.0001.rfa) This is deleting files so please use with caution!, Rhythm.Detail Number by View Name  - Automatically numbers your detail number based on the first two characters of your view name. i.e. A4/... (Requires slash to be present), Rhythm.OverrideInteriorCrop - This node will override the lineweight of the crop region on interior elevations. This node would not be possible without the power of the Dynamo community. Specifically Danny Jones with Clark Patterson Lee, Rhythm.PercentGlazingByOrientation - This node was show at RTCNA2015 to optimize your workflows. It reports the window to wall % by direction the wall faces., Rhythm.RenumberGridsByCurve - This node will renumber grids in order of curve drawn through them. Select either letters or numbers. (Alphanumeric coming soon), Rhythm.RenumberRoomsByCurve - This node will renumber rooms along a curve path. This was developed through the guidance of WIlliam Wong at case. Considering WeWork bought Case I wanted this node to live somewhere., Rhythm.Toggle - Toggle that offers two outputs. Created for Dynamo 0.8.1 because of changes to the \"IF\" node, Room Element Collector - THis will collect data regarding rooms in the active model. Similar to Lunchbox node, but this one does not use python., Select Elements By Curve - This will select model elements in order that a curve is drawn through them., SetParameterByName(TypeOrInstance) - Set one of the element's parameters regardless of parameter type or instance., SquareFeetDropper - This node drops square feet from the pulled area, String.CharacterAtIndex - Get's the character at a given index, String.FlipReverse - This node flips the string and reverses it. (April Fools '15) Works for 0.8.0 only, added unicode support, String.IndicesOfCharacter - This node gets all the indices of a given character, String.RemoveAfterGivenCharacter - This will move all characters at and after the given character., String.RemovePriorToCharacter - This will remove all characters prior to the input character. Accepts strings., String.SpecifyDecimalPlaces - This node will take your inout string and number of decimal places to create a new simplified output., TextElement.ToLower - This node converts a Revit text elemnt to upper directly., TextElement.ToTitle - This node converts a Revit text elemnt to upper directly., TextElement.ToUpper - This node converts a Revit text elemnt to upper directly., Unicode.LRE - Start of left-to-right embedding Unicode Character, Unicode.LRM - Left-to-right mark unicode character, Unicode.RLE - Start of right-to-left embedding Unicode Character, Unicode.RLM - Right-to-left mark Unicode character, Unicode.ZWJ - Zero width joiner Unicode Character, Unicode.ZWNJ - Zero width non-joiner Unicode Character, Viewport.ViewName - This node gets the view name of viewports. There is an issue when \"title on sheet\" is used, so this fixes that., Wall.NorthSouthEastWest - This node determines which direction a wall is facing and groups them by the direction or direction they are closest to., Workset.Create - Creates a workset or worksets from input names.",
            "engine_metadata": "",
            "engine_version": "0.9.1.3067",
            "created": "2016-02-08T15:11:17.299Z",
            "full_dependency_versions": [ "2016.2.8" ],
            "full_dependency_ids": [
              {
                "_id": "54e7add1dcee4dfd26000101",
                "name": "Rhythm"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2016.2.8"
          },
          {
            "_id": "56cccb14c3e9ee4a08000139",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/09b5f135-0b00-4958-b8e6-b4c02c10104fgregPkg942.zip",
            "contents": "All Framing at Reference Level - Collects all of the structural framing at a specific reference level, All Upper - This converts the ase of selected items to UPPER. Inputs require booleans to enable for category., Arrowhead Assigner - This node assings the arrowhead type for all text and keynote tags. There is an input for ones you want to exclude., Ayuda.IsArchi-LabInstalled - This node determines if Archi-Lab is installed. Useful with a toggle., Ayuda.IsClockworkInstalled - This node determines if clockwork is installed. Useful with a toggle., Ayuda.IsSteamNodesInstalled - This node determines if steamnodes is installed. Useful with a toggle.;, Ayuda.ThisOrThat - This node is a toggle between two inputs., Collector.DuctsBySystem - This collects all ducts in the project and organizes them by System Classification, Collector.KeynoteTags - This collects all of the keynote tags in the model. Similar to other nodes, but this doesn't use python., Collector.LabelTypes - This node collects all of the label types for the active family document., Collector.PipesBySystem - This collects all pipes in the project and organizes them by System Classification, Collector.Viewports - This collects all of the viewports in the model and outputs the name, title on sheet, scale and viewport type., Dash Remover - This node removes the dash at index 2 if it exists. The reason being, NCS states that no dash shall be used., Element.AreaWithTotal - This will get the area of an element if the parameter exists. Will total as well if needed., Element.Category - This node will get the input element(s)' categories, Element.GetLevelNameAsString - This retrieves the level name of the input elements as a string. This is in response to a known issue with the get value node., Element.GetMultipleParameterValuesByName - Get the value of multiple parameters from elements. (Seperate parameters with comma), Element.GetParameterValueByName(CaSe iNSeNSiTive) - Get the value of one of the element's parameters. (CaSe iNSeNSiTiVe), Element.OverrideCutColorInView - Overrides the elements cut color in the view., Element.OverrideCutLineweight - Overrides the cut lines of the elements, Element.OverrideProjectionLineColor - This node overrides the projection line color with the input color value. Useful for annotation., Element.OverrideProjectionLineweight - Overrides the line thickness of projection lines, Element.ParentFamily - This node retrieces the parent family name for each input element., Element.Room - This node takes the input of all elements of category and reports back the associated room per element. Currently tested with casework, furniture and plumbing fixtures., Element.SetMultipleParametersByName - Set multiple (comma seperated) parameters by name., Element.SetParameterByName(CaSe iNSeNSiTiVe) - Set one of the element's parameters. (CaSe iNSeNSiTiVe), Element.SetPinnedStatus - Will set the element to either pinned or not pinned. True is pinned, false is unpinned. For multiple elements use List.Map, Element.Space - This will retrieve the space in which an element is contained. (if available), Element.Type - This retrieves the element type of the given elements. (if available) Similar to others available but no python here., Geometry.SpaceEvenlyWithBuffer - This will take input geometry and space it out in the Y direction with a buffer between, Get All Tag Types - This node collects the tag types in the model., GetParameterValueByName(TypeOrInstance) - Gets a parameter value by name regardless of type or instance., GetParameterValueByNameAsString - Returns paramter value as string. Same effect as lunchbox node, without python., Group.UngroupElements - This will ungroup the input groups and output their elements. Use with care!, Inspiration.BuffettNode - This is a result of \"what if?\" thinking. The output is a random Warren Buffett quote from brainyquotes.com, Inspiration.CarreyNode - This is a result of \"what if?\" thinking. The output is a random Jim Carrey quote from brainyquotes.com, Inspiration.CashNode - This is a result of \"what if?\" thinking. The output is a random Johnny Cash quote from brainyquotes.com, Inspiration.MarleyNode - This is a result of \"what if?\" thinking. The output is a random Bob Marley quote from brainyquotes.com, Inspiration.SearchQuoteNode - This is a result of \"what if?\" thinking. The output is a random quote based on the search criteria from brainyquotes.com. (As long as it is on the site), Inspiration.TeresaNode - This is a result of \"what if?\" thinking. The output is a random Mother Teresa quote from brainyquotes.com, Level Element Collector - This collects data for all of the Level elements in the model. Similar to the node on Lunchbox, but this one uses all O.O.B. nodes., List.AllIndicesOf - Given an item, returns the zero-based indices of all its occurrences in the list. If the item cannot be found, an empty list is returned. , List.ArchitecturalAlphabeticalSequence - This creates a list of characters. What's different is we typically exclude I's and O's from our characters so there is a toggle for this., List.Contains - Determines if the given list contains the item or items., List.GetItemIndices - This node searches the input list for the given string or number., List.MergeSublists - This will merge all sublists with or without a character between the strings., List.ReturnItemsPreviousToIndex - This will take an index (or indices) and return the items previous to it. Useful for sums of all items previous., Mullion.SortByDirection - This will sort mullions of a host curtain wall by direction they are facing., OS.CurrentUser - This node retrieves the current user logged in., OS.CurrentUserAppData - This retrieves the current user's appdata location, Output.Clean - This will return a single value or list from one input., Parametric Graphic Scale - This node automates the graphic scale assigned per viewport. The input required is all instances of viewport category. It also requires shared parameters. Visit sixtysecondrevit.blogspot.com for details., RemoveListFromList - This node essentially \"subtracts\" the contents of List B from List A to produce a new list with the unique items., Rhythm.3DRoomTags - This node will generate 3D room tags for all rooms in the model. (RFA in extra folder in Dynamo download), Rhythm.BackupRFADeleter - This node will scan the contents of a driectory and delete backup RFA files that appear with a four digit backup number before the file extension. (eg. Family1.0001.rfa) This is deleting files so please use with caution!, Rhythm.Detail Number by View Name  - Automatically numbers your detail number based on the first two characters of your view name. i.e. A4/... (Requires slash to be present), Rhythm.OverrideInteriorCrop - This node will override the lineweight of the crop region on interior elevations. This node would not be possible without the power of the Dynamo community. Specifically Danny Jones with Clark Patterson Lee, Rhythm.PercentGlazingByOrientation - This node was show at RTCNA2015 to optimize your workflows. It reports the window to wall % by direction the wall faces., Rhythm.RenumberGridsByCurve - This node will renumber grids in order of curve drawn through them. Select either letters or numbers. (Alphanumeric coming soon), Rhythm.RenumberRoomsByCurve - This node will renumber rooms along a curve path. This was developed through the guidance of WIlliam Wong at case. Considering WeWork bought Case I wanted this node to live somewhere., Rhythm.Toggle - Toggle that offers two outputs. Created for Dynamo 0.8.1 because of changes to the \"IF\" node, Room Element Collector - THis will collect data regarding rooms in the active model. Similar to Lunchbox node, but this one does not use python., Select Elements By Curve - This will select model elements in order that a curve is drawn through them., SetParameterByName(TypeOrInstance) - Set one of the element's parameters regardless of parameter type or instance., SquareFeetDropper - This node drops square feet from the pulled area, String.CharacterAtIndex - Get's the character at a given index, String.FlipReverse - This node flips the string and reverses it. (April Fools '15) Works for 0.8.0 only, added unicode support, String.IndicesOfCharacter - This node gets all the indices of a given character, String.RemoveAfterGivenCharacter - This will move all characters at and after the given character., String.RemovePriorToCharacter - This will remove all characters prior to the input character. Accepts strings., String.SpecifyDecimalPlaces - This node will take your inout string and number of decimal places to create a new simplified output., TextElement.ToLower - This node converts a Revit text elemnt to upper directly., TextElement.ToTitle - This node converts a Revit text elemnt to upper directly., TextElement.ToUpper - This node converts a Revit text elemnt to upper directly., Unicode.LRE - Start of left-to-right embedding Unicode Character, Unicode.LRM - Left-to-right mark unicode character, Unicode.RLE - Start of right-to-left embedding Unicode Character, Unicode.RLM - Right-to-left mark Unicode character, Unicode.ZWJ - Zero width joiner Unicode Character, Unicode.ZWNJ - Zero width non-joiner Unicode Character, Viewport.ViewName - This node gets the view name of viewports. There is an issue when \"title on sheet\" is used, so this fixes that., Wall.NorthSouthEastWest - This node determines which direction a wall is facing and groups them by the direction or direction they are closest to., Workset.Create - Creates a workset or worksets from input names., Curve.FromLine - This will translate a line element to a curve., Railing.BalusterCount - This node will count the amout of balusters in a rail element. Only works for single element for now., Geometry.ToRevitType - This will convert designscript geometyr into Revit.DB types. Currently tested with curves, nurbs curves and solids.",
            "engine_metadata": "",
            "engine_version": "0.9.1.4062",
            "created": "2016-02-23T21:11:48.408Z",
            "full_dependency_versions": [ "2016.2.23" ],
            "full_dependency_ids": [
              {
                "_id": "54e7add1dcee4dfd26000101",
                "name": "Rhythm"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2016.2.23"
          },
          {
            "_id": "56df48655bee3e213800003a",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/3474e44a-4b32-4d0a-ac18-4812b28feeb9gregPkg520.zip",
            "contents": "All Framing at Reference Level - Collects all of the structural framing at a specific reference level, All Upper - This converts the ase of selected items to UPPER. Inputs require booleans to enable for category., Arrowhead Assigner - This node assings the arrowhead type for all text and keynote tags. There is an input for ones you want to exclude., Ayuda.IsArchi-LabInstalled - This node determines if Archi-Lab is installed. Useful with a toggle., Ayuda.IsClockworkInstalled - This node determines if clockwork is installed. Useful with a toggle., Ayuda.IsSteamNodesInstalled - This node determines if steamnodes is installed. Useful with a toggle.;, Ayuda.ThisOrThat - This node is a toggle between two inputs., Collector.DuctsBySystem - This collects all ducts in the project and organizes them by System Classification, Collector.KeynoteTags - This collects all of the keynote tags in the model. Similar to other nodes, but this doesn't use python., Collector.LabelTypes - This node collects all of the label types for the active family document., Collector.PipesBySystem - This collects all pipes in the project and organizes them by System Classification, Collector.Viewports - This collects all of the viewports in the model and outputs the name, title on sheet, scale and viewport type., Curve.FromLine - This will translate a line element to a curve., Dash Remover - This node removes the dash at index 2 if it exists. The reason being, NCS states that no dash shall be used., Element.AreaWithTotal - This will get the area of an element if the parameter exists. Will total as well if needed., Element.Category - This node will get the input element(s)' categories, Element.GetLevelNameAsString - This retrieves the level name of the input elements as a string. This is in response to a known issue with the get value node., Element.GetMultipleParameterValuesByName - Get the value of multiple parameters from elements. (Seperate parameters with comma), Element.GetParameterValueByName(CaSe iNSeNSiTive) - Get the value of one of the element's parameters. (CaSe iNSeNSiTiVe), Element.OverrideCutColorInView - Overrides the elements cut color in the view., Element.OverrideCutLineweight - Overrides the cut lines of the elements, Element.OverrideProjectionLineColor - This node overrides the projection line color with the input color value. Useful for annotation., Element.OverrideProjectionLineweight - Overrides the line thickness of projection lines, Element.ParentFamily - This node retrieces the parent family name for each input element., Element.Room - This node takes the input of all elements of category and reports back the associated room per element. Currently tested with casework, furniture and plumbing fixtures., Element.SetMultipleParametersByName - Set multiple (comma seperated) parameters by name., Element.SetParameterByName(CaSe iNSeNSiTiVe) - Set one of the element's parameters. (CaSe iNSeNSiTiVe), Element.SetPinnedStatus - Will set the element to either pinned or not pinned. True is pinned, false is unpinned. For multiple elements use List.Map, Element.Space - This will retrieve the space in which an element is contained. (if available), Element.Type - This retrieves the element type of the given elements. (if available) Similar to others available but no python here., Geometry.SpaceEvenlyWithBuffer - This will take input geometry and space it out in the Y direction with a buffer between, Geometry.ToRevitType - This will convert designscript geometyr into Revit.DB types. Currently tested with curves, nurbs curves and solids., Get All Tag Types - This node collects the tag types in the model., GetParameterValueByName(TypeOrInstance) - Gets a parameter value by name regardless of type or instance., GetParameterValueByNameAsString - Returns paramter value as string. Same effect as lunchbox node, without python., Group.UngroupElements - This will ungroup the input groups and output their elements. Use with care!, Inspiration.BuffettNode - This is a result of \"what if?\" thinking. The output is a random Warren Buffett quote from brainyquotes.com, Inspiration.CarreyNode - This is a result of \"what if?\" thinking. The output is a random Jim Carrey quote from brainyquotes.com, Inspiration.CashNode - This is a result of \"what if?\" thinking. The output is a random Johnny Cash quote from brainyquotes.com, Inspiration.MarleyNode - This is a result of \"what if?\" thinking. The output is a random Bob Marley quote from brainyquotes.com, Inspiration.SearchQuoteNode - This is a result of \"what if?\" thinking. The output is a random quote based on the search criteria from brainyquotes.com. (As long as it is on the site), Inspiration.TeresaNode - This is a result of \"what if?\" thinking. The output is a random Mother Teresa quote from brainyquotes.com, Level Element Collector - This collects data for all of the Level elements in the model. Similar to the node on Lunchbox, but this one uses all O.O.B. nodes., List.AllIndicesOf - Given an item, returns the zero-based indices of all its occurrences in the list. If the item cannot be found, an empty list is returned. , List.ArchitecturalAlphabeticalSequence - This creates a list of characters. What's different is we typically exclude I's and O's from our characters so there is a toggle for this., List.Contains - Determines if the given list contains the item or items., List.GetItemIndices - This node searches the input list for the given string or number., List.MergeSublists - This will merge all sublists with or without a character between the strings., List.ReturnItemsPreviousToIndex - This will take an index (or indices) and return the items previous to it. Useful for sums of all items previous., Mullion.SortByDirection - This will sort mullions of a host curtain wall by direction they are facing., OS.CurrentUser - This node retrieves the current user logged in., OS.CurrentUserAppData - This retrieves the current user's appdata location, Output.Clean - This will return a single value or list from one input., Parametric Graphic Scale - This node automates the graphic scale assigned per viewport. The input required is all instances of viewport category. It also requires shared parameters. Visit sixtysecondrevit.blogspot.com for details., Railing.BalusterCount - This node will count the amout of balusters in a rail element. Only works for single element for now., RemoveListFromList - This node essentially \"subtracts\" the contents of List B from List A to produce a new list with the unique items., Rhythm.3DRoomTags - This node will generate 3D room tags for all rooms in the model. (RFA in extra folder in Dynamo download), Rhythm.BackupRFADeleter - This node will scan the contents of a driectory and delete backup RFA files that appear with a four digit backup number before the file extension. (eg. Family1.0001.rfa) This is deleting files so please use with caution!, Rhythm.Detail Number by View Name  - Automatically numbers your detail number based on the first two characters of your view name. i.e. A4/... (Requires slash to be present), Rhythm.OverrideInteriorCrop - This node will override the lineweight of the crop region on interior elevations. This node would not be possible without the power of the Dynamo community. Specifically Danny Jones with Clark Patterson Lee, Rhythm.PercentGlazingByOrientation - This node was show at RTCNA2015 to optimize your workflows. It reports the window to wall % by direction the wall faces., Rhythm.RenumberGridsByCurve - This node will renumber grids in order of curve drawn through them. Select either letters or numbers. (Alphanumeric coming soon), Rhythm.RenumberRoomsByCurve - This node will renumber rooms along a curve path. This was developed through the guidance of WIlliam Wong at case. Considering WeWork bought Case I wanted this node to live somewhere., Rhythm.Toggle - Toggle that offers two outputs. Created for Dynamo 0.8.1 because of changes to the \"IF\" node, Room Element Collector - THis will collect data regarding rooms in the active model. Similar to Lunchbox node, but this one does not use python., Select Elements By Curve - This will select model elements in order that a curve is drawn through them., SetParameterByName(TypeOrInstance) - Set one of the element's parameters regardless of parameter type or instance., SquareFeetDropper - This node drops square feet from the pulled area, String.CharacterAtIndex - Get's the character at a given index, String.FlipReverse - This node flips the string and reverses it. (April Fools '15) Works for 0.8.0 only, added unicode support, String.IndicesOfCharacter - This node gets all the indices of a given character, String.RemoveAfterGivenCharacter - This will move all characters at and after the given character., String.RemovePriorToCharacter - This will remove all characters prior to the input character. Accepts strings., String.SpecifyDecimalPlaces - This node will take your inout string and number of decimal places to create a new simplified output., TextElement.ToLower - This node converts a Revit text elemnt to upper directly., TextElement.ToTitle - This node converts a Revit text elemnt to upper directly., TextElement.ToUpper - This node converts a Revit text elemnt to upper directly., Unicode.LRE - Start of left-to-right embedding Unicode Character, Unicode.LRM - Left-to-right mark unicode character, Unicode.RLE - Start of right-to-left embedding Unicode Character, Unicode.RLM - Right-to-left mark Unicode character, Unicode.ZWJ - Zero width joiner Unicode Character, Unicode.ZWNJ - Zero width non-joiner Unicode Character, Viewport.ViewName - This node gets the view name of viewports. There is an issue when \"title on sheet\" is used, so this fixes that., Wall.NorthSouthEastWest - This node determines which direction a wall is facing and groups them by the direction or direction they are closest to., Workset.Create - Creates a workset or worksets from input names., String.ToTitle - Converts the given string to Title Case.",
            "engine_metadata": "",
            "engine_version": "0.9.1.4062",
            "created": "2016-03-08T21:47:17.374Z",
            "full_dependency_versions": [ "2016.3.8" ],
            "full_dependency_ids": [
              {
                "_id": "54e7add1dcee4dfd26000101",
                "name": "Rhythm"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2016.3.8"
          },
          {
            "_id": "56e19f1d5bee3e2138000046",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/370a5936-18c2-4ef2-8116-20cb330016d3gregPkg206.zip",
            "contents": "All Framing at Reference Level - Collects all of the structural framing at a specific reference level, All Upper - This converts the ase of selected items to UPPER. Inputs require booleans to enable for category., Arrowhead Assigner - This node assings the arrowhead type for all text and keynote tags. There is an input for ones you want to exclude., Ayuda.IsArchi-LabInstalled - This node determines if Archi-Lab is installed. Useful with a toggle., Ayuda.IsClockworkInstalled - This node determines if clockwork is installed. Useful with a toggle., Ayuda.IsSteamNodesInstalled - This node determines if steamnodes is installed. Useful with a toggle.;, Ayuda.ThisOrThat - This node is a toggle between two inputs., Collector.DuctsBySystem - This collects all ducts in the project and organizes them by System Classification, Collector.KeynoteTags - This collects all of the keynote tags in the model. Similar to other nodes, but this doesn't use python., Collector.LabelTypes - This node collects all of the label types for the active family document., Collector.PipesBySystem - This collects all pipes in the project and organizes them by System Classification, Collector.Viewports - This collects all of the viewports in the model and outputs the name, title on sheet, scale and viewport type., Curve.FromLine - This will translate a line element to a curve., Dash Remover - This node removes the dash at index 2 if it exists. The reason being, NCS states that no dash shall be used., Element.AreaWithTotal - This will get the area of an element if the parameter exists. Will total as well if needed., Element.Category - This node will get the input element(s)' categories, Element.GetLevelNameAsString - This retrieves the level name of the input elements as a string. This is in response to a known issue with the get value node., Element.GetMultipleParameterValuesByName - Get the value of multiple parameters from elements. (Seperate parameters with comma), Element.GetParameterValueByName(CaSe iNSeNSiTive) - Get the value of one of the element's parameters. (CaSe iNSeNSiTiVe), Element.OverrideCutColorInView - Overrides the elements cut color in the view., Element.OverrideCutLineweight - Overrides the cut lines of the elements, Element.OverrideProjectionLineColor - This node overrides the projection line color with the input color value. Useful for annotation., Element.OverrideProjectionLineweight - Overrides the line thickness of projection lines, Element.ParentFamily - This node retrieces the parent family name for each input element., Element.Room - This node takes the input of all elements of category and reports back the associated room per element. Currently tested with casework, furniture and plumbing fixtures., Element.SetMultipleParametersByName - Set multiple (comma seperated) parameters by name., Element.SetParameterByName(CaSe iNSeNSiTiVe) - Set one of the element's parameters. (CaSe iNSeNSiTiVe), Element.SetPinnedStatus - Will set the element to either pinned or not pinned. True is pinned, false is unpinned. For multiple elements use List.Map, Element.Space - This will retrieve the space in which an element is contained. (if available), Element.Type - This retrieves the element type of the given elements. (if available) Similar to others available but no python here., Geometry.SpaceEvenlyWithBuffer - This will take input geometry and space it out in the Y direction with a buffer between, Geometry.ToRevitType - This will convert designscript geometyr into Revit.DB types. Currently tested with curves, nurbs curves and solids., Get All Tag Types - This node collects the tag types in the model., GetParameterValueByName(TypeOrInstance) - Gets a parameter value by name regardless of type or instance., GetParameterValueByNameAsString - Returns paramter value as string. Same effect as lunchbox node, without python., Group.UngroupElements - This will ungroup the input groups and output their elements. Use with care!, Inspiration.BuffettNode - This is a result of \"what if?\" thinking. The output is a random Warren Buffett quote from brainyquotes.com, Inspiration.CarreyNode - This is a result of \"what if?\" thinking. The output is a random Jim Carrey quote from brainyquotes.com, Inspiration.CashNode - This is a result of \"what if?\" thinking. The output is a random Johnny Cash quote from brainyquotes.com, Inspiration.MarleyNode - This is a result of \"what if?\" thinking. The output is a random Bob Marley quote from brainyquotes.com, Inspiration.SearchQuoteNode - This is a result of \"what if?\" thinking. The output is a random quote based on the search criteria from brainyquotes.com. (As long as it is on the site), Inspiration.TeresaNode - This is a result of \"what if?\" thinking. The output is a random Mother Teresa quote from brainyquotes.com, Level Element Collector - This collects data for all of the Level elements in the model. Similar to the node on Lunchbox, but this one uses all O.O.B. nodes., List.AllIndicesOf - Given an item, returns the zero-based indices of all its occurrences in the list. If the item cannot be found, an empty list is returned. , List.ArchitecturalAlphabeticalSequence - This creates a list of characters. What's different is we typically exclude I's and O's from our characters so there is a toggle for this., List.Contains - Determines if the given list contains the item or items., List.GetItemIndices - This node searches the input list for the given string or number., List.MergeSublists - This will merge all sublists with or without a character between the strings., List.ReturnItemsPreviousToIndex - This will take an index (or indices) and return the items previous to it. Useful for sums of all items previous., Mullion.SortByDirection - This will sort mullions of a host curtain wall by direction they are facing., OS.CurrentUser - This node retrieves the current user logged in., OS.CurrentUserAppData - This retrieves the current user's appdata location, Output.Clean - This will return a single value or list from one input., Parametric Graphic Scale - This node automates the graphic scale assigned per viewport. The input required is all instances of viewport category. It also requires shared parameters. Visit sixtysecondrevit.blogspot.com for details., Railing.BalusterCount - This node will count the amout of balusters in a rail element. Only works for single element for now., RemoveListFromList - This node essentially \"subtracts\" the contents of List B from List A to produce a new list with the unique items., Rhythm.3DRoomTags - This node will generate 3D room tags for all rooms in the model. (RFA in extra folder in Dynamo download), Rhythm.BackupRFADeleter - This node will scan the contents of a driectory and delete backup RFA files that appear with a four digit backup number before the file extension. (eg. Family1.0001.rfa) This is deleting files so please use with caution!, Rhythm.Detail Number by View Name  - Automatically numbers your detail number based on the first two characters of your view name. i.e. A4/... (Requires slash to be present), Rhythm.OverrideInteriorCrop - This node will override the lineweight of the crop region on interior elevations. This node would not be possible without the power of the Dynamo community. Specifically Danny Jones with Clark Patterson Lee, Rhythm.PercentGlazingByOrientation - This node was show at RTCNA2015 to optimize your workflows. It reports the window to wall % by direction the wall faces., Rhythm.RenumberGridsByCurve - This node will renumber grids in order of curve drawn through them. Select either letters or numbers. (Alphanumeric coming soon), Rhythm.RenumberRoomsByCurve - This node will renumber rooms along a curve path. This was developed through the guidance of WIlliam Wong at case. Considering WeWork bought Case I wanted this node to live somewhere., Rhythm.Toggle - Toggle that offers two outputs. Created for Dynamo 0.8.1 because of changes to the \"IF\" node, Room Element Collector - THis will collect data regarding rooms in the active model. Similar to Lunchbox node, but this one does not use python., Select Elements By Curve - This will select model elements in order that a curve is drawn through them., SetParameterByName(TypeOrInstance) - Set one of the element's parameters regardless of parameter type or instance., SquareFeetDropper - This node drops square feet from the pulled area, String.CharacterAtIndex - Get's the character at a given index, String.FlipReverse - This node flips the string and reverses it. (April Fools '15) Works for 0.8.0 only, added unicode support, String.IndicesOfCharacter - This node gets all the indices of a given character, String.RemoveAfterGivenCharacter - This will move all characters at and after the given character., String.RemovePriorToCharacter - This will remove all characters prior to the input character. Accepts strings., String.SpecifyDecimalPlaces - This node will take your inout string and number of decimal places to create a new simplified output., String.ToTitle - Converts the given string to Title Case., TextElement.ToLower - This node converts a Revit text elemnt to upper directly., TextElement.ToTitle - This node converts a Revit text elemnt to upper directly., TextElement.ToUpper - This node converts a Revit text elemnt to upper directly., Unicode.LRE - Start of left-to-right embedding Unicode Character, Unicode.LRM - Left-to-right mark unicode character, Unicode.RLE - Start of right-to-left embedding Unicode Character, Unicode.RLM - Right-to-left mark Unicode character, Unicode.ZWJ - Zero width joiner Unicode Character, Unicode.ZWNJ - Zero width non-joiner Unicode Character, Viewport.ViewName - This node gets the view name of viewports. There is an issue when \"title on sheet\" is used, so this fixes that., Wall.NorthSouthEastWest - This node determines which direction a wall is facing and groups them by the direction or direction they are closest to., Workset.Create - Creates a workset or worksets from input names., Rhythm.3DSpaceTags - This will generate 3D space tags for all spaces in the project., String.ElementsModified - THis custom node reports the amount of elements in a list as a phrase., String.ToSentenceCase - This node will convert a single string of text to have capitalized sentences. If you need to use this over a list, use List.Map., Element.AreaLocation - This node will determine what area (area plans) an element is located within. Made possible thanks to clockwork. :), Element.OverrideProjectionFIllColor - This node overrides the fill color of the element in view.",
            "engine_metadata": "",
            "engine_version": "0.9.1.4062",
            "created": "2016-03-10T16:21:49.934Z",
            "full_dependency_versions": [ "2016.3.10" ],
            "full_dependency_ids": [
              {
                "_id": "54e7add1dcee4dfd26000101",
                "name": "Rhythm"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2016.3.10"
          },
          {
            "_id": "56fad9c55bee3e21380000b3",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/7dbb1d6a-0321-4a29-adc8-aeb49a3113fegregPkg283.zip",
            "contents": "All Framing at Reference Level - Collects all of the structural framing at a specific reference level, All Upper - This converts the ase of selected items to UPPER. Inputs require booleans to enable for category., Arrowhead Assigner - This node assings the arrowhead type for all text and keynote tags. There is an input for ones you want to exclude., Ayuda.IsArchi-LabInstalled - This node determines if Archi-Lab is installed. Useful with a toggle., Ayuda.IsClockworkInstalled - This node determines if clockwork is installed. Useful with a toggle., Ayuda.IsSteamNodesInstalled - This node determines if steamnodes is installed. Useful with a toggle.;, Ayuda.ThisOrThat - This node is a toggle between two inputs., Collector.DuctsBySystem - This collects all ducts in the project and organizes them by System Classification, Collector.KeynoteTags - This collects all of the keynote tags in the model. Similar to other nodes, but this doesn't use python., Collector.LabelTypes - This node collects all of the label types for the active family document., Collector.PipesBySystem - This collects all pipes in the project and organizes them by System Classification, Collector.Viewports - This collects all of the viewports in the model and outputs the name, title on sheet, scale and viewport type., Curve.FromLine - This will translate a line element to a curve., Dash Remover - This node removes the dash at index 2 if it exists. The reason being, NCS states that no dash shall be used., Element.AreaLocation - This node will determine what area (area plans) an element is located within. Made possible thanks to clockwork. :), Element.AreaWithTotal - This will get the area of an element if the parameter exists. Will total as well if needed., Element.Category - This node will get the input element(s)' categories, Element.GetLevelNameAsString - This retrieves the level name of the input elements as a string. This is in response to a known issue with the get value node., Element.GetMultipleParameterValuesByName - Get the value of multiple parameters from elements. (Seperate parameters with comma), Element.GetParameterValueByName(CaSe iNSeNSiTive) - Get the value of one of the element's parameters. (CaSe iNSeNSiTiVe), Element.OverrideCutColorInView - Overrides the elements cut color in the view., Element.OverrideCutLineweight - Overrides the cut lines of the elements, Element.OverrideProjectionFIllColor - This node overrides the fill color of the element in view., Element.OverrideProjectionLineColor - This node overrides the projection line color with the input color value. Useful for annotation., Element.OverrideProjectionLineweight - Overrides the line thickness of projection lines, Element.ParentFamily - This node retrieces the parent family name for each input element., Element.Room - This node takes the input of all elements of category and reports back the associated room per element. Currently tested with casework, furniture and plumbing fixtures., Element.SetMultipleParametersByName - Set multiple (comma seperated) parameters by name., Element.SetParameterByName(CaSe iNSeNSiTiVe) - Set one of the element's parameters. (CaSe iNSeNSiTiVe), Element.SetPinnedStatus - Will set the element to either pinned or not pinned. True is pinned, false is unpinned. For multiple elements use List.Map, Element.Space - This will retrieve the space in which an element is contained. (if available), Element.Type - This retrieves the element type of the given elements. (if available) Similar to others available but no python here., Geometry.SpaceEvenlyWithBuffer - This will take input geometry and space it out in the Y direction with a buffer between, Geometry.ToRevitType - This will convert designscript geometyr into Revit.DB types. Currently tested with curves, nurbs curves and solids., Get All Tag Types - This node collects the tag types in the model., GetParameterValueByName(TypeOrInstance) - Gets a parameter value by name regardless of type or instance., GetParameterValueByNameAsString - Returns paramter value as string. Same effect as lunchbox node, without python., Group.UngroupElements - This will ungroup the input groups and output their elements. Use with care!, Inspiration.BuffettNode - This is a result of \"what if?\" thinking. The output is a random Warren Buffett quote from brainyquotes.com, Inspiration.CarreyNode - This is a result of \"what if?\" thinking. The output is a random Jim Carrey quote from brainyquotes.com, Inspiration.CashNode - This is a result of \"what if?\" thinking. The output is a random Johnny Cash quote from brainyquotes.com, Inspiration.MarleyNode - This is a result of \"what if?\" thinking. The output is a random Bob Marley quote from brainyquotes.com, Inspiration.SearchQuoteNode - This is a result of \"what if?\" thinking. The output is a random quote based on the search criteria from brainyquotes.com. (As long as it is on the site), Inspiration.TeresaNode - This is a result of \"what if?\" thinking. The output is a random Mother Teresa quote from brainyquotes.com, Level Element Collector - This collects data for all of the Level elements in the model. Similar to the node on Lunchbox, but this one uses all O.O.B. nodes., List.AllIndicesOf - Given an item, returns the zero-based indices of all its occurrences in the list. If the item cannot be found, an empty list is returned. , List.ArchitecturalAlphabeticalSequence - This creates a list of characters. What's different is we typically exclude I's and O's from our characters so there is a toggle for this., List.Contains - Determines if the given list contains the item or items., List.GetItemIndices - This node searches the input list for the given string or number., List.MergeSublists - This will merge all sublists with or without a character between the strings., List.ReturnItemsPreviousToIndex - This will take an index (or indices) and return the items previous to it. Useful for sums of all items previous., Mullion.SortByDirection - This will sort mullions of a host curtain wall by direction they are facing., OS.CurrentUser - This node retrieves the current user logged in., OS.CurrentUserAppData - This retrieves the current user's appdata location, Output.Clean - This will return a single value or list from one input., Parametric Graphic Scale - This node automates the graphic scale assigned per viewport. The input required is all instances of viewport category. It also requires shared parameters. Visit sixtysecondrevit.blogspot.com for details., Railing.BalusterCount - This node will count the amout of balusters in a rail element. Only works for single element for now., RemoveListFromList - This node essentially \"subtracts\" the contents of List B from List A to produce a new list with the unique items., Rhythm.3DRoomTags - This node will generate 3D room tags for all rooms in the model. (RFA in extra folder in Dynamo download), Rhythm.3DSpaceTags - This will generate 3D space tags for all spaces in the project., Rhythm.BackupRFADeleter - This node will scan the contents of a driectory and delete backup RFA files that appear with a four digit backup number before the file extension. (eg. Family1.0001.rfa) This is deleting files so please use with caution!, Rhythm.Detail Number by View Name  - Automatically numbers your detail number based on the first two characters of your view name. i.e. A4/... (Requires slash to be present), Rhythm.OverrideInteriorCrop - This node will override the lineweight of the crop region on interior elevations. This node would not be possible without the power of the Dynamo community. Specifically Danny Jones with Clark Patterson Lee, Rhythm.PercentGlazingByOrientation - This node was show at RTCNA2015 to optimize your workflows. It reports the window to wall % by direction the wall faces., Rhythm.RenumberGridsByCurve - This node will renumber grids in order of curve drawn through them. Select either letters or numbers. (Alphanumeric coming soon), Rhythm.RenumberRoomsByCurve - This node will renumber rooms along a curve path. This was developed through the guidance of WIlliam Wong at case. Considering WeWork bought Case I wanted this node to live somewhere., Rhythm.Toggle - Toggle that offers two outputs. Created for Dynamo 0.8.1 because of changes to the \"IF\" node, Room Element Collector - THis will collect data regarding rooms in the active model. Similar to Lunchbox node, but this one does not use python., Select Elements By Curve - This will select model elements in order that a curve is drawn through them., SetParameterByName(TypeOrInstance) - Set one of the element's parameters regardless of parameter type or instance., SquareFeetDropper - This node drops square feet from the pulled area, String.CharacterAtIndex - Get's the character at a given index, String.ElementsModified - THis custom node reports the amount of elements in a list as a phrase., String.FlipReverse - This node flips the string and reverses it. (April Fools '15) Works for 0.8.0 only, added unicode support, String.IndicesOfCharacter - This node gets all the indices of a given character, String.RemoveAfterGivenCharacter - This will move all characters at and after the given character., String.RemovePriorToCharacter - This will remove all characters prior to the input character. Accepts strings., String.SpecifyDecimalPlaces - This node will take your inout string and number of decimal places to create a new simplified output., String.ToSentenceCase - This node will convert a single string of text to have capitalized sentences. If you need to use this over a list, use List.Map., String.ToTitle - Converts the given string to Title Case., TextElement.ToLower - This node converts a Revit text elemnt to upper directly., TextElement.ToTitle - This node converts a Revit text elemnt to upper directly., TextElement.ToUpper - This node converts a Revit text elemnt to upper directly., Unicode.LRE - Start of left-to-right embedding Unicode Character, Unicode.LRM - Left-to-right mark unicode character, Unicode.RLE - Start of right-to-left embedding Unicode Character, Unicode.RLM - Right-to-left mark Unicode character, Unicode.ZWJ - Zero width joiner Unicode Character, Unicode.ZWNJ - Zero width non-joiner Unicode Character, Viewport.ViewName - This node gets the view name of viewports. There is an issue when \"title on sheet\" is used, so this fixes that., Wall.NorthSouthEastWest - This node determines which direction a wall is facing and groups them by the direction or direction they are closest to., Workset.Create - Creates a workset or worksets from input names., View.ConvertToIndependent - This will convert input dependent views to independent. Thanks to TheRevitKid for the idea!",
            "engine_metadata": "",
            "engine_version": "0.9.2.4472",
            "created": "2016-03-29T19:38:45.906Z",
            "full_dependency_versions": [ "2016.3.29" ],
            "full_dependency_ids": [
              {
                "_id": "54e7add1dcee4dfd26000101",
                "name": "Rhythm"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2016.3.29"
          },
          {
            "_id": "5703c4cd5bee3e21380000e3",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/6efd740c-1029-4897-bc2f-c36b2709cdcfgregPkg367.zip",
            "contents": "All Framing at Reference Level - Collects all of the structural framing at a specific reference level, All Pipes at Reference Level - This will collect all pipes by their reference level., All Upper - This converts the ase of selected items to UPPER. Inputs require booleans to enable for category., Arrowhead Assigner - This node assings the arrowhead type for all text and keynote tags. There is an input for ones you want to exclude., Ayuda.IsArchi-LabInstalled - This node determines if Archi-Lab is installed. Useful with a toggle., Ayuda.IsClockworkInstalled - This node determines if clockwork is installed. Useful with a toggle., Ayuda.IsSteamNodesInstalled - This node determines if steamnodes is installed. Useful with a toggle.;, Ayuda.ThisOrThat - This node is a toggle between two inputs., Collector.DuctsBySystem - This collects all ducts in the project and organizes them by System Classification, Collector.KeynoteTags - This collects all of the keynote tags in the model. Similar to other nodes, but this doesn't use python., Collector.LabelTypes - This node collects all of the label types for the active family document., Collector.PipesBySystem - This collects all pipes in the project and organizes them by System Classification, Collector.Viewports - This collects all of the viewports in the model and outputs the name, title on sheet, scale and viewport type., Curve.FromLine - This will translate a line element to a curve., Dash Remover - This node removes the dash at index 2 if it exists. The reason being, NCS states that no dash shall be used., Dimension.IsOverridden - This will report if a dimension has been overridden. , Element.AreaLocation - This node will determine what area (area plans) an element is located within. Made possible thanks to clockwork. :), Element.AreaWithTotal - This will get the area of an element if the parameter exists. Will total as well if needed., Element.Category - This node will get the input element(s)' categories, Element.GetLevelNameAsString - This retrieves the level name of the input elements as a string. This is in response to a known issue with the get value node., Element.GetMultipleParameterValuesByName - Get the value of multiple parameters from elements. (Seperate parameters with comma), Element.GetParameterValueByName(CaSe iNSeNSiTive) - Get the value of one of the element's parameters. (CaSe iNSeNSiTiVe), Element.OverrideCutColorInView - Overrides the elements cut color in the view., Element.OverrideCutLineweight - Overrides the cut lines of the elements, Element.OverrideProjectionFIllColor - This node overrides the fill color of the element in view., Element.OverrideProjectionLineColor - This node overrides the projection line color with the input color value. Useful for annotation., Element.OverrideProjectionLineweight - Overrides the line thickness of projection lines, Element.ParentFamily - This node retrieces the parent family name for each input element., Element.Room - This node takes the input of all elements of category and reports back the associated room per element. Currently tested with casework, furniture and plumbing fixtures., Element.SetMultipleParametersByName - Set multiple (comma seperated) parameters by name., Element.SetParameterByName(CaSe iNSeNSiTiVe) - Set one of the element's parameters. (CaSe iNSeNSiTiVe), Element.SetPinnedStatus - Will set the element to either pinned or not pinned. True is pinned, false is unpinned. For multiple elements use List.Map, Element.Space - This will retrieve the space in which an element is contained. (if available), Element.Type - This retrieves the element type of the given elements. (if available) Similar to others available but no python here., Geometry.SpaceEvenlyWithBuffer - This will take input geometry and space it out in the Y direction with a buffer between, Geometry.ToRevitType - This will convert designscript geometyr into Revit.DB types. Currently tested with curves, nurbs curves and solids., Get All Tag Types - This node collects the tag types in the model., GetParameterValueByName(TypeOrInstance) - Gets a parameter value by name regardless of type or instance., GetParameterValueByNameAsString - Returns paramter value as string. Same effect as lunchbox node, without python., Group.UngroupElements - This will ungroup the input groups and output their elements. Use with care!, Inspiration.BuffettNode - This is a result of \"what if?\" thinking. The output is a random Warren Buffett quote from brainyquotes.com, Inspiration.CarreyNode - This is a result of \"what if?\" thinking. The output is a random Jim Carrey quote from brainyquotes.com, Inspiration.CashNode - This is a result of \"what if?\" thinking. The output is a random Johnny Cash quote from brainyquotes.com, Inspiration.MarleyNode - This is a result of \"what if?\" thinking. The output is a random Bob Marley quote from brainyquotes.com, Inspiration.SearchQuoteNode - This is a result of \"what if?\" thinking. The output is a random quote based on the search criteria from brainyquotes.com. (As long as it is on the site), Inspiration.TeresaNode - This is a result of \"what if?\" thinking. The output is a random Mother Teresa quote from brainyquotes.com, Isolated Pick Model Elements - Pick model elements in desired order of a desired category., Level Element Collector - This collects data for all of the Level elements in the model. Similar to the node on Lunchbox, but this one uses all O.O.B. nodes., List.AllIndicesOf - Given an item, returns the zero-based indices of all its occurrences in the list. If the item cannot be found, an empty list is returned. , List.ArchitecturalAlphabeticalSequence - This creates a list of characters. What's different is we typically exclude I's and O's from our characters so there is a toggle for this., List.Contains - Determines if the given list contains the item or items., List.GetItemIndices - This node searches the input list for the given string or number., List.MergeSublists - This will merge all sublists with or without a character between the strings., List.ReturnItemsPreviousToIndex - This will take an index (or indices) and return the items previous to it. Useful for sums of all items previous., Mullion.SortByDirection - This will sort mullions of a host curtain wall by direction they are facing., OS.CurrentUser - This node retrieves the current user logged in., OS.CurrentUserAppData - This retrieves the current user's appdata location, Output.Clean - This will return a single value or list from one input., Parametric Graphic Scale - This node automates the graphic scale assigned per viewport. The input required is all instances of viewport category. It also requires shared parameters. Visit sixtysecondrevit.blogspot.com for details., Pick Model Elements - This node offers a pick method for selecting elements in Revit., Railing.BalusterCount - This node will count the amout of balusters in a rail element. Only works for single element for now., RemoveListFromList - This node essentially \"subtracts\" the contents of List B from List A to produce a new list with the unique items., Rhythm.3DRoomTags - This node will generate 3D room tags for all rooms in the model. (RFA in extra folder in Dynamo download), Rhythm.3DSpaceTags - This will generate 3D space tags for all spaces in the project., Rhythm.BackupRFADeleter - This node will scan the contents of a driectory and delete backup RFA files that appear with a four digit backup number before the file extension. (eg. Family1.0001.rfa) This is deleting files so please use with caution!, Rhythm.Detail Number by View Name  - Automatically numbers your detail number based on the first two characters of your view name. i.e. A4/... (Requires slash to be present), Rhythm.OverrideInteriorCrop - This node will override the lineweight of the crop region on interior elevations. This node would not be possible without the power of the Dynamo community. Specifically Danny Jones with Clark Patterson Lee, Rhythm.PercentGlazingByOrientation - This node was show at RTCNA2015 to optimize your workflows. It reports the window to wall % by direction the wall faces., Rhythm.RenumberGridsByCurve - This node will renumber grids in order of curve drawn through them. Select either letters or numbers. (Alphanumeric coming soon), Rhythm.RenumberRoomsByCurve - This node will renumber rooms along a curve path. This was developed through the guidance of WIlliam Wong at case. Considering WeWork bought Case I wanted this node to live somewhere., Rhythm.Toggle - Toggle that offers two outputs. Created for Dynamo 0.8.1 because of changes to the \"IF\" node, Room Element Collector - THis will collect data regarding rooms in the active model. Similar to Lunchbox node, but this one does not use python., Select Elements By Curve - This will select model elements in order that a curve is drawn through them., SetParameterByName(TypeOrInstance) - Set one of the element's parameters regardless of parameter type or instance., SquareFeetDropper - This node drops square feet from the pulled area, String.CharacterAtIndex - Get's the character at a given index, String.ElementsModified - THis custom node reports the amount of elements in a list as a phrase., String.FlipReverse - This node flips the string and reverses it. (April Fools '15) Works for 0.8.0 only, added unicode support, String.IndicesOfCharacter - This node gets all the indices of a given character, String.RemoveAfterGivenCharacter - This will move all characters at and after the given character., String.RemovePriorToCharacter - This will remove all characters prior to the input character. Accepts strings., String.SpecifyDecimalPlaces - This node will take your inout string and number of decimal places to create a new simplified output., String.ToSentenceCase - This node will convert a single string of text to have capitalized sentences. If you need to use this over a list, use List.Map., String.ToTitle - Converts the given string to Title Case., TextElement.ToLower - This node converts a Revit text elemnt to upper directly., TextElement.ToTitle - This node converts a Revit text elemnt to upper directly., TextElement.ToUpper - This node converts a Revit text elemnt to upper directly., UI.UserMessage - This will display a user message once. Until it is either toggled or changed., Unicode.LRE - Start of left-to-right embedding Unicode Character, Unicode.LRM - Left-to-right mark unicode character, Unicode.RLE - Start of right-to-left embedding Unicode Character, Unicode.RLM - Right-to-left mark Unicode character, Unicode.ZWJ - Zero width joiner Unicode Character, Unicode.ZWNJ - Zero width non-joiner Unicode Character, View.ConvertToIndependent - This will convert input dependent views to independent. Thanks to TheRevitKid for the idea!, Viewport.ViewName - This node gets the view name of viewports. There is an issue when \"title on sheet\" is used, so this fixes that., Wall.NorthSouthEastWest - This node determines which direction a wall is facing and groups them by the direction or direction they are closest to., Workset.Create - Creates a workset or worksets from input names.",
            "engine_metadata": "",
            "engine_version": "0.9.2.4472",
            "created": "2016-04-05T13:59:41.756Z",
            "full_dependency_versions": [ "2016.4.4" ],
            "full_dependency_ids": [
              {
                "_id": "54e7add1dcee4dfd26000101",
                "name": "Rhythm"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2016.4.4"
          },
          {
            "_id": "573486d8ea5c185008000011",
            "contains_binaries": true,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-prod/cf53c6a6-2211-4561-ba3a-57ff4f31e1c9gregPkg130.zip",
            "contents": "All Framing at Reference Level - Collects all of the structural framing at a specific reference level, All Pipes at Reference Level - This will collect all pipes by their reference level., All Upper - This converts the ase of selected items to UPPER. Inputs require booleans to enable for category., Arrowhead Assigner - This node assings the arrowhead type for all text and keynote tags. There is an input for ones you want to exclude., Ayuda.IsArchi-LabInstalled - This node determines if Archi-Lab is installed. Useful with a toggle., Ayuda.IsClockworkInstalled - This node determines if clockwork is installed. Useful with a toggle., Ayuda.IsSteamNodesInstalled - This node determines if steamnodes is installed. Useful with a toggle.;, Ayuda.ThisOrThat - This node is a toggle between two inputs., Collector.DuctsBySystem - This collects all ducts in the project and organizes them by System Classification, Collector.KeynoteTags - This collects all of the keynote tags in the model. Similar to other nodes, but this doesn't use python., Collector.LabelTypes - This node collects all of the label types for the active family document., Collector.PipesBySystem - This collects all pipes in the project and organizes them by System Classification, Collector.TagTypes - This node collects the tag types in the model., Collector.Viewports - This collects all of the viewports in the model and outputs the name, title on sheet, scale and viewport type., Curve.FromLine - This will translate a line element to a curve., Dash Remover - This node removes the dash at index 2 if it exists. The reason being, NCS states that no dash shall be used., Dimension.IsOverridden - This will report if a dimension has been overridden. , Element.AreaLocation - This node will determine what area (area plans) an element is located within. Made possible thanks to clockwork. :), Element.AreaWithTotal - This will get the area of an element if the parameter exists. Will total as well if needed., Element.Category - This node will get the input element(s)' categories, Element.GetLevelNameAsString - This retrieves the level name of the input elements as a string. This is in response to a known issue with the get value node., Element.GetMultipleParameterValuesByName - Get the value of multiple parameters from elements. (Seperate parameters with comma), Element.GetParameterValueByName(CaSe iNSeNSiTive) - Get the value of one of the element's parameters. (CaSe iNSeNSiTiVe), Element.OverrideCutColorInView - Overrides the elements cut color in the view., Element.OverrideCutLineweight - Overrides the cut lines of the elements, Element.OverrideProjectionFillColor - This node overrides the fill color of the element in view., Element.OverrideProjectionLineColor - This node overrides the projection line color with the input color value. Useful for annotation., Element.OverrideProjectionLineweight - Overrides the line thickness of projection lines, Element.ParentFamily - This node retrieces the parent family name for each input element., Element.Room - This node takes the input of all elements of category and reports back the associated room per element. Currently tested with casework, furniture and plumbing fixtures., Element.SetMultipleParametersByName - Set multiple (comma seperated) parameters by name., Element.SetParameterByName(CaSe iNSeNSiTiVe) - Set one of the element's parameters. (CaSe iNSeNSiTiVe), Element.SetPinnedStatus - Will set the element to either pinned or not pinned. True is pinned, false is unpinned. For multiple elements use List.Map, Element.Space - This will retrieve the space in which an element is contained. (if available), Element.Type - This retrieves the element type of the given elements. (if available) Similar to others available but no python here., Geometry.SpaceEvenlyWithBuffer - This will take input geometry and space it out in the Y direction with a buffer between, Geometry.ToRevitType - This will convert designscript geometyr into Revit.DB types. Currently tested with curves, nurbs curves and solids., GetParameterValueByName(TypeOrInstance) - Gets a parameter value by name regardless of type or instance., GetParameterValueByNameAsString - Returns paramter value as string. Same effect as lunchbox node, without python., Group.UngroupElements - This will ungroup the input groups and output their elements. Use with care!, Inspiration.BuffettNode - This is a result of \"what if?\" thinking. The output is a random Warren Buffett quote from brainyquotes.com, Inspiration.CarreyNode - This is a result of \"what if?\" thinking. The output is a random Jim Carrey quote from brainyquotes.com, Inspiration.CashNode - This is a result of \"what if?\" thinking. The output is a random Johnny Cash quote from brainyquotes.com, Inspiration.MarleyNode - This is a result of \"what if?\" thinking. The output is a random Bob Marley quote from brainyquotes.com, Inspiration.SearchQuoteNode - This is a result of \"what if?\" thinking. The output is a random quote based on the search criteria from brainyquotes.com. (As long as it is on the site), Inspiration.TeresaNode - This is a result of \"what if?\" thinking. The output is a random Mother Teresa quote from brainyquotes.com, Isolated Pick Model Elements - Pick model elements in desired order of a desired category., Level Element Collector - This collects data for all of the Level elements in the model. Similar to the node on Lunchbox, but this one uses all O.O.B. nodes., List.AllIndicesOf - Given an item, returns the zero-based indices of all its occurrences in the list. If the item cannot be found, an empty list is returned. , List.ArchitecturalAlphabeticalSequence - This creates a list of characters. What's different is we typically exclude I's and O's from our characters so there is a toggle for this., List.Contains - Determines if the given list contains the item or items., List.GetItemIndices - This node searches the input list for the given string or number., List.MergeSublists - This will merge all sublists with or without a character between the strings., List.ReturnItemsPreviousToIndex - This will take an index (or indices) and return the items previous to it. Useful for sums of all items previous., Mullion.SortByDirection - This will sort mullions of a host curtain wall by direction they are facing., OS.CurrentUser - This node retrieves the current user logged in., OS.CurrentUserAppData - This retrieves the current user's appdata location, Output.Clean - This will return a single value or list from one input., Parametric Graphic Scale - This node automates the graphic scale assigned per viewport. The input required is all instances of viewport category. It also requires shared parameters. Visit sixtysecondrevit.blogspot.com for details., Pick Model Elements - This node offers a pick method for selecting elements in Revit., Railing.BalusterCount - This node will count the amout of balusters in a rail element. Only works for single element for now., RemoveListFromList - This node essentially \"subtracts\" the contents of List B from List A to produce a new list with the unique items., Rhythm.3DRoomTags - This node will generate 3D room tags for all rooms in the model. (RFA in extra folder in Dynamo download), Rhythm.3DSpaceTags - This will generate 3D space tags for all spaces in the project., Rhythm.BackupRFADeleter - This node will scan the contents of a driectory and delete backup RFA files that appear with a four digit backup number before the file extension. (eg. Family1.0001.rfa) This is deleting files so please use with caution!, Rhythm.Detail Number by View Name  - Automatically numbers your detail number based on the first two characters of your view name. i.e. A4/... (Requires slash to be present), Rhythm.OverrideInteriorCrop - This node will override the lineweight of the crop region on interior elevations. This node would not be possible without the power of the Dynamo community. Specifically Danny Jones with Clark Patterson Lee, Rhythm.PercentGlazingByOrientation - This node was show at RTCNA2015 to optimize your workflows. It reports the window to wall % by direction the wall faces., Rhythm.RenumberGridsByCurve - This node will renumber grids in order of curve drawn through them. Select either letters or numbers. (Alphanumeric coming soon), Rhythm.RenumberRoomsByCurve - This node will renumber rooms along a curve path. This was developed through the guidance of WIlliam Wong at case. Considering WeWork bought Case I wanted this node to live somewhere., Rhythm.Toggle - Toggle that offers two outputs. Created for Dynamo 0.8.1 because of changes to the \"IF\" node, Room Element Collector - THis will collect data regarding rooms in the active model. Similar to Lunchbox node, but this one does not use python., Select Elements By Curve - This will select model elements in order that a curve is drawn through them., SetParameterByName(TypeOrInstance) - Set one of the element's parameters regardless of parameter type or instance., SquareFeetDropper - This node drops square feet from the pulled area, String.CharacterAtIndex - Get's the character at a given index, String.ElementsModified - THis custom node reports the amount of elements in a list as a phrase., String.FlipReverse - This node flips the string and reverses it. (April Fools '15) Works for 0.8.0 only, added unicode support, String.IndicesOfCharacter - This node gets all the indices of a given character, String.RemoveAfterGivenCharacter - This will move all characters at and after the given character., String.RemovePriorToCharacter - This will remove all characters prior to the input character. Accepts strings., String.SpecifyDecimalPlaces - This node will take your inout string and number of decimal places to create a new simplified output., String.ToSentenceCase - This node will convert a single string of text to have capitalized sentences. If you need to use this over a list, use List.Map., String.ToTitle - Converts the given string to Title Case., TextElement.ToLower - This node converts a Revit text elemnt to upper directly., TextElement.ToTitle - This node converts a Revit text elemnt to upper directly., TextElement.ToUpper - This node converts a Revit text elemnt to upper directly., UI.UserMessage - This will display a user message once. Until it is either toggled or changed., Unicode.LRE - Start of left-to-right embedding Unicode Character, Unicode.LRM - Left-to-right mark unicode character, Unicode.RLE - Start of right-to-left embedding Unicode Character, Unicode.RLM - Right-to-left mark Unicode character, Unicode.ZWJ - Zero width joiner Unicode Character, Unicode.ZWNJ - Zero width non-joiner Unicode Character, View.ConvertToIndependent - This will convert input dependent views to independent. Thanks to TheRevitKid for the idea!, Viewport.ViewName - This node gets the view name of viewports. There is an issue when \"title on sheet\" is used, so this fixes that., Wall.NorthSouthEastWest - This node determines which direction a wall is facing and groups them by the direction or direction they are closest to., Workset.Create - Creates a workset or worksets from input names., CableTray.Space - This node will determine the space a cable tray's center falls within., String.IsUnicode - Determines if input string is a unicode character.",
            "engine_metadata": "",
            "engine_version": "1.0.0.1180",
            "created": "2016-05-12T13:36:24.830Z",
            "full_dependency_versions": [ "2016.5.11" ],
            "full_dependency_ids": [
              {
                "_id": "54e7add1dcee4dfd26000101",
                "name": "Rhythm"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2016.5.11"
          },
          {
            "_id": "5735e315ea5c185008000017",
            "contains_binaries": true,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-prod/0149c18d-1b7b-45d6-a63a-90a06cd30126gregPkg995.zip",
            "contents": "All Framing at Reference Level - Collects all of the structural framing at a specific reference level, All Pipes at Reference Level - This will collect all pipes by their reference level., All Upper - This converts the ase of selected items to UPPER. Inputs require booleans to enable for category., Arrowhead Assigner - This node assings the arrowhead type for all text and keynote tags. There is an input for ones you want to exclude., Ayuda.IsArchi-LabInstalled - This node determines if Archi-Lab is installed. Useful with a toggle., Ayuda.IsClockworkInstalled - This node determines if clockwork is installed. Useful with a toggle., Ayuda.IsSteamNodesInstalled - This node determines if steamnodes is installed. Useful with a toggle.;, Ayuda.ThisOrThat - This node is a toggle between two inputs., CableTray.Space - This node will determine the space a cable tray's center falls within., Collector.DuctsBySystem - This collects all ducts in the project and organizes them by System Classification, Collector.KeynoteTags - This collects all of the keynote tags in the model. Similar to other nodes, but this doesn't use python., Collector.LabelTypes - This node collects all of the label types for the active family document., Collector.PipesBySystem - This collects all pipes in the project and organizes them by System Classification, Collector.TagTypes - This node collects the tag types in the model., Collector.Viewports - This collects all of the viewports in the model and outputs the name, title on sheet, scale and viewport type., Curve.FromLine - This will translate a line element to a curve., Dash Remover - This node removes the dash at index 2 if it exists. The reason being, NCS states that no dash shall be used., Dimension.IsOverridden - This will report if a dimension has been overridden. , Element.AreaLocation - This node will determine what area (area plans) an element is located within. Made possible thanks to clockwork. :), Element.AreaWithTotal - This will get the area of an element if the parameter exists. Will total as well if needed., Element.Category - This node will get the input element(s)' categories, Element.GetLevelNameAsString - This retrieves the level name of the input elements as a string. This is in response to a known issue with the get value node., Element.GetMultipleParameterValuesByName - Get the value of multiple parameters from elements. (Seperate parameters with comma), Element.GetParameterValueByName(CaSe iNSeNSiTive) - Get the value of one of the element's parameters. (CaSe iNSeNSiTiVe), Element.OverrideCutColorInView - Overrides the elements cut color in the view., Element.OverrideCutLineweight - Overrides the cut lines of the elements, Element.OverrideProjectionFillColor - This node overrides the fill color of the element in view., Element.OverrideProjectionLineColor - This node overrides the projection line color with the input color value. Useful for annotation., Element.OverrideProjectionLineweight - Overrides the line thickness of projection lines, Element.ParentFamily - This node retrieces the parent family name for each input element., Element.Room - This node takes the input of all elements of category and reports back the associated room per element. Currently tested with casework, furniture and plumbing fixtures., Element.SetMultipleParametersByName - Set multiple (comma seperated) parameters by name., Element.SetParameterByName(CaSe iNSeNSiTiVe) - Set one of the element's parameters. (CaSe iNSeNSiTiVe), Element.SetPinnedStatus - Will set the element to either pinned or not pinned. True is pinned, false is unpinned. For multiple elements use List.Map, Element.Space - This will retrieve the space in which an element is contained. (if available), Element.Type - This retrieves the element type of the given elements. (if available) Similar to others available but no python here., Geometry.SpaceEvenlyWithBuffer - This will take input geometry and space it out in the Y direction with a buffer between, Geometry.ToRevitType - This will convert designscript geometyr into Revit.DB types. Currently tested with curves, nurbs curves and solids., GetParameterValueByName(TypeOrInstance) - Gets a parameter value by name regardless of type or instance., GetParameterValueByNameAsString - Returns paramter value as string. Same effect as lunchbox node, without python., Group.UngroupElements - This will ungroup the input groups and output their elements. Use with care!, Inspiration.BuffettNode - This is a result of \"what if?\" thinking. The output is a random Warren Buffett quote from brainyquotes.com, Inspiration.CarreyNode - This is a result of \"what if?\" thinking. The output is a random Jim Carrey quote from brainyquotes.com, Inspiration.CashNode - This is a result of \"what if?\" thinking. The output is a random Johnny Cash quote from brainyquotes.com, Inspiration.MarleyNode - This is a result of \"what if?\" thinking. The output is a random Bob Marley quote from brainyquotes.com, Inspiration.SearchQuoteNode - This is a result of \"what if?\" thinking. The output is a random quote based on the search criteria from brainyquotes.com. (As long as it is on the site), Inspiration.TeresaNode - This is a result of \"what if?\" thinking. The output is a random Mother Teresa quote from brainyquotes.com, Isolated Pick Model Elements - Pick model elements in desired order of a desired category., Level Element Collector - This collects data for all of the Level elements in the model. Similar to the node on Lunchbox, but this one uses all O.O.B. nodes., List.AllIndicesOf - Given an item, returns the zero-based indices of all its occurrences in the list. If the item cannot be found, an empty list is returned. , List.ArchitecturalAlphabeticalSequence - This creates a list of characters. What's different is we typically exclude I's and O's from our characters so there is a toggle for this., List.Contains - Determines if the given list contains the item or items., List.GetItemIndices - This node searches the input list for the given string or number., List.MergeSublists - This will merge all sublists with or without a character between the strings., List.ReturnItemsPreviousToIndex - This will take an index (or indices) and return the items previous to it. Useful for sums of all items previous., Mullion.SortByDirection - This will sort mullions of a host curtain wall by direction they are facing., OS.CurrentUser - This node retrieves the current user logged in., OS.CurrentUserAppData - This retrieves the current user's appdata location, Output.Clean - This will return a single value or list from one input., Parametric Graphic Scale - This node automates the graphic scale assigned per viewport. The input required is all instances of viewport category. It also requires shared parameters. Visit sixtysecondrevit.blogspot.com for details., Pick Model Elements - This node offers a pick method for selecting elements in Revit., Railing.BalusterCount - This node will count the amout of balusters in a rail element. Only works for single element for now., RemoveListFromList - This node essentially \"subtracts\" the contents of List B from List A to produce a new list with the unique items., Rhythm.3DRoomTags - This node will generate 3D room tags for all rooms in the model. (RFA in extra folder in Dynamo download), Rhythm.3DSpaceTags - This will generate 3D space tags for all spaces in the project., Rhythm.BackupRFADeleter - This node will scan the contents of a driectory and delete backup RFA files that appear with a four digit backup number before the file extension. (eg. Family1.0001.rfa) This is deleting files so please use with caution!, Rhythm.Detail Number by View Name  - Automatically numbers your detail number based on the first two characters of your view name. i.e. A4/... (Requires slash to be present), Rhythm.OverrideInteriorCrop - This node will override the lineweight of the crop region on interior elevations. This node would not be possible without the power of the Dynamo community. Specifically Danny Jones with Clark Patterson Lee, Rhythm.PercentGlazingByOrientation - This node was show at RTCNA2015 to optimize your workflows. It reports the window to wall % by direction the wall faces., Rhythm.RenumberGridsByCurve - This node will renumber grids in order of curve drawn through them. Select either letters or numbers. (Alphanumeric coming soon), Rhythm.RenumberRoomsByCurve - This node will renumber rooms along a curve path. This was developed through the guidance of WIlliam Wong at case. Considering WeWork bought Case I wanted this node to live somewhere., Rhythm.Toggle - Toggle that offers two outputs. Created for Dynamo 0.8.1 because of changes to the \"IF\" node, Room Element Collector - THis will collect data regarding rooms in the active model. Similar to Lunchbox node, but this one does not use python., Select Elements By Curve - This will select model elements in order that a curve is drawn through them., SetParameterByName(TypeOrInstance) - Set one of the element's parameters regardless of parameter type or instance., SquareFeetDropper - This node drops square feet from the pulled area, String.CharacterAtIndex - Get's the character at a given index, String.ElementsModified - THis custom node reports the amount of elements in a list as a phrase., String.FlipReverse - This node flips the string and reverses it. (April Fools '15) Works for 0.8.0 only, added unicode support, String.IndicesOfCharacter - This node gets all the indices of a given character, String.IsUnicode - Determines if input string is a unicode character., String.RemoveAfterGivenCharacter - This will move all characters at and after the given character., String.RemovePriorToCharacter - This will remove all characters prior to the input character. Accepts strings., String.SpecifyDecimalPlaces - This node will take your inout string and number of decimal places to create a new simplified output., String.ToSentenceCase - This node will convert a single string of text to have capitalized sentences. If you need to use this over a list, use List.Map., String.ToTitle - Converts the given string to Title Case., TextElement.ToLower - This node converts a Revit text elemnt to upper directly., TextElement.ToTitle - This node converts a Revit text elemnt to upper directly., TextElement.ToUpper - This node converts a Revit text elemnt to upper directly., UI.UserMessage - This will display a user message once. Until it is either toggled or changed., Unicode.LRE - Start of left-to-right embedding Unicode Character, Unicode.LRM - Left-to-right mark unicode character, Unicode.RLE - Start of right-to-left embedding Unicode Character, Unicode.RLM - Right-to-left mark Unicode character, Unicode.ZWJ - Zero width joiner Unicode Character, Unicode.ZWNJ - Zero width non-joiner Unicode Character, View.ConvertToIndependent - This will convert input dependent views to independent. Thanks to TheRevitKid for the idea!, Viewport.ViewName - This node gets the view name of viewports. There is an issue when \"title on sheet\" is used, so this fixes that., Wall.NorthSouthEastWest - This node determines which direction a wall is facing and groups them by the direction or direction they are closest to., Workset.Create - Creates a workset or worksets from input names., Space.IsPointInside - This will test if a point falls within a space.",
            "engine_metadata": "",
            "engine_version": "1.0.0.1180",
            "created": "2016-05-13T14:22:13.408Z",
            "full_dependency_versions": [ "2016.5.12" ],
            "full_dependency_ids": [
              {
                "_id": "54e7add1dcee4dfd26000101",
                "name": "Rhythm"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2016.5.12"
          },
          {
            "_id": "573c7e44d629c6fb27000006",
            "contains_binaries": true,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-prod/0c777728-6142-433e-b66f-8b8eba6b32a0gregPkg134.zip",
            "contents": "All Framing at Reference Level - Collects all of the structural framing at a specific reference level, All Pipes at Reference Level - This will collect all pipes by their reference level., All Upper - This converts the ase of selected items to UPPER. Inputs require booleans to enable for category., Arrowhead Assigner - This node assings the arrowhead type for all text and keynote tags. There is an input for ones you want to exclude., Ayuda.IsArchi-LabInstalled - This node determines if Archi-Lab is installed. Useful with a toggle., Ayuda.IsClockworkInstalled - This node determines if clockwork is installed. Useful with a toggle., Ayuda.IsSteamNodesInstalled - This node determines if steamnodes is installed. Useful with a toggle.;, Ayuda.ThisOrThat - This node is a toggle between two inputs., CableTray.Space - This node will determine the space a cable tray's center falls within., Collector.DuctsBySystem - This collects all ducts in the project and organizes them by System Classification, Collector.KeynoteTags - This collects all of the keynote tags in the model. Similar to other nodes, but this doesn't use python., Collector.LabelTypes - This node collects all of the label types for the active family document., Collector.PipesBySystem - This collects all pipes in the project and organizes them by System Classification, Collector.TagTypes - This node collects the tag types in the model., Collector.Viewports - This collects all of the viewports in the model and outputs the name, title on sheet, scale and viewport type., Curve.FromLine - This will translate a line element to a curve., Dash Remover - This node removes the dash at index 2 if it exists. The reason being, NCS states that no dash shall be used., Dimension.IsOverridden - This will report if a dimension has been overridden. , Element.AreaLocation - This node will determine what area (area plans) an element is located within. Made possible thanks to clockwork. :), Element.AreaWithTotal - This will get the area of an element if the parameter exists. Will total as well if needed., Element.Category - This node will get the input element(s)' categories, Element.GetLevelNameAsString - This retrieves the level name of the input elements as a string. This is in response to a known issue with the get value node., Element.GetMultipleParameterValuesByName - Get the value of multiple parameters from elements. (Seperate parameters with comma), Element.GetParameterValueByName(CaSe iNSeNSiTive) - Get the value of one of the element's parameters. (CaSe iNSeNSiTiVe), Element.OverrideCutColorInView - Overrides the elements cut color in the view., Element.OverrideCutLineweight - Overrides the cut lines of the elements, Element.OverrideProjectionFillColor - This node overrides the fill color of the element in view., Element.OverrideProjectionLineColor - This node overrides the projection line color with the input color value. Useful for annotation., Element.OverrideProjectionLineweight - Overrides the line thickness of projection lines, Element.ParentFamily - This node retrieces the parent family name for each input element., Element.Room - This node takes the input of all elements of category and reports back the associated room per element. Currently tested with casework, furniture and plumbing fixtures., Element.SetMultipleParametersByName - Set multiple (comma seperated) parameters by name., Element.SetParameterByName(CaSe iNSeNSiTiVe) - Set one of the element's parameters. (CaSe iNSeNSiTiVe), Element.SetPinnedStatus - Will set the element to either pinned or not pinned. True is pinned, false is unpinned. For multiple elements use List.Map, Element.Space - This will retrieve the space in which an element is contained. (if available), Element.Type - This retrieves the element type of the given elements. (if available) Similar to others available but no python here., Geometry.SpaceEvenlyWithBuffer - This will take input geometry and space it out in the Y direction with a buffer between, Geometry.ToRevitType - This will convert designscript geometyr into Revit.DB types. Currently tested with curves, nurbs curves and solids., GetParameterValueByName(TypeOrInstance) - Gets a parameter value by name regardless of type or instance., GetParameterValueByNameAsString - Returns paramter value as string. Same effect as lunchbox node, without python., Group.UngroupElements - This will ungroup the input groups and output their elements. Use with care!, Inspiration.BuffettNode - This is a result of \"what if?\" thinking. The output is a random Warren Buffett quote from brainyquotes.com, Inspiration.CarreyNode - This is a result of \"what if?\" thinking. The output is a random Jim Carrey quote from brainyquotes.com, Inspiration.CashNode - This is a result of \"what if?\" thinking. The output is a random Johnny Cash quote from brainyquotes.com, Inspiration.MarleyNode - This is a result of \"what if?\" thinking. The output is a random Bob Marley quote from brainyquotes.com, Inspiration.SearchQuoteNode - This is a result of \"what if?\" thinking. The output is a random quote based on the search criteria from brainyquotes.com. (As long as it is on the site), Inspiration.TeresaNode - This is a result of \"what if?\" thinking. The output is a random Mother Teresa quote from brainyquotes.com, Isolated Pick Model Elements - Pick model elements in desired order of a desired category., Level Element Collector - This collects data for all of the Level elements in the model. Similar to the node on Lunchbox, but this one uses all O.O.B. nodes., List.AllIndicesOf - Given an item, returns the zero-based indices of all its occurrences in the list. If the item cannot be found, an empty list is returned. , List.ArchitecturalAlphabeticalSequence - This creates a list of characters. What's different is we typically exclude I's and O's from our characters so there is a toggle for this., List.Contains - Determines if the given list contains the item or items., List.GetItemIndices - This node searches the input list for the given string or number., List.MergeSublists - This will merge all sublists with or without a character between the strings., List.ReturnItemsPreviousToIndex - This will take an index (or indices) and return the items previous to it. Useful for sums of all items previous., Mullion.SortByDirection - This will sort mullions of a host curtain wall by direction they are facing., OS.CurrentUser - This node retrieves the current user logged in., OS.CurrentUserAppData - This retrieves the current user's appdata location, Output.Clean - This will return a single value or list from one input., Parametric Graphic Scale - This node automates the graphic scale assigned per viewport. The input required is all instances of viewport category. It also requires shared parameters. Visit sixtysecondrevit.blogspot.com for details., Pick Model Elements - This node offers a pick method for selecting elements in Revit., Railing.BalusterCount - This node will count the amout of balusters in a rail element. Only works for single element for now., RemoveListFromList - This node essentially \"subtracts\" the contents of List B from List A to produce a new list with the unique items., Rhythm.3DRoomTags - This node will generate 3D room tags for all rooms in the model. (RFA in extra folder in Dynamo download), Rhythm.3DSpaceTags - This will generate 3D space tags for all spaces in the project., Rhythm.BackupRFADeleter - This node will scan the contents of a driectory and delete backup RFA files that appear with a four digit backup number before the file extension. (eg. Family1.0001.rfa) This is deleting files so please use with caution!, Rhythm.Detail Number by View Name  - Automatically numbers your detail number based on the first two characters of your view name. i.e. A4/... (Requires slash to be present), Rhythm.OverrideInteriorCrop - This node will override the lineweight of the crop region on interior elevations. This node would not be possible without the power of the Dynamo community. Specifically Danny Jones with Clark Patterson Lee, Rhythm.PercentGlazingByOrientation - This node was show at RTCNA2015 to optimize your workflows. It reports the window to wall % by direction the wall faces., Rhythm.RenumberGridsByCurve - This node will renumber grids in order of curve drawn through them. Select either letters or numbers. (Alphanumeric coming soon), Rhythm.RenumberRoomsByCurve - This node will renumber rooms along a curve path. This was developed through the guidance of WIlliam Wong at case. Considering WeWork bought Case I wanted this node to live somewhere., Rhythm.Toggle - Toggle that offers two outputs. Created for Dynamo 0.8.1 because of changes to the \"IF\" node, Room Element Collector - THis will collect data regarding rooms in the active model. Similar to Lunchbox node, but this one does not use python., Select Elements By Curve - This will select model elements in order that a curve is drawn through them., SetParameterByName(TypeOrInstance) - Set one of the element's parameters regardless of parameter type or instance., Space.IsPointInside - This will test if a point falls within a space., SquareFeetDropper - This node drops square feet from the pulled area, String.CharacterAtIndex - Get's the character at a given index, String.ElementsModified - THis custom node reports the amount of elements in a list as a phrase., String.FlipReverse - This node flips the string and reverses it. (April Fools '15) Works for 0.8.0 only, added unicode support, String.IndicesOfCharacter - This node gets all the indices of a given character, String.IsUnicode - Determines if input string is a unicode character., String.RemoveAfterGivenCharacter - This will move all characters at and after the given character., String.RemovePriorToCharacter - This will remove all characters prior to the input character. Accepts strings., String.SpecifyDecimalPlaces - This node will take your inout string and number of decimal places to create a new simplified output., String.ToSentenceCase - This node will convert a single string of text to have capitalized sentences. If you need to use this over a list, use List.Map., String.ToTitle - Converts the given string to Title Case., TextElement.ToLower - This node converts a Revit text elemnt to upper directly., TextElement.ToTitle - This node converts a Revit text elemnt to upper directly., TextElement.ToUpper - This node converts a Revit text elemnt to upper directly., UI.UserMessage - This will display a user message once. Until it is either toggled or changed., Unicode.LRE - Start of left-to-right embedding Unicode Character, Unicode.LRM - Left-to-right mark unicode character, Unicode.RLE - Start of right-to-left embedding Unicode Character, Unicode.RLM - Right-to-left mark Unicode character, Unicode.ZWJ - Zero width joiner Unicode Character, Unicode.ZWNJ - Zero width non-joiner Unicode Character, View.ConvertToIndependent - This will convert input dependent views to independent. Thanks to TheRevitKid for the idea!, Viewport.ViewName - This node gets the view name of viewports. There is an issue when \"title on sheet\" is used, so this fixes that., Wall.NorthSouthEastWest - This node determines which direction a wall is facing and groups them by the direction or direction they are closest to., Workset.Create - Creates a workset or worksets from input names., Gmail.ComposeEmail - This node will compose a new email. Useful for notifications regarding a graph concluding. Uses pythons built-in SMTP Library., Gmail.ComposeEmailDetailed - This will compose a detailed email with subject and message.",
            "engine_metadata": "",
            "engine_version": "1.0.0.1180",
            "created": "2016-05-18T14:37:56.166Z",
            "full_dependency_versions": [ "2016.5.18" ],
            "full_dependency_ids": [
              {
                "_id": "54e7add1dcee4dfd26000101",
                "name": "Rhythm"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2016.5.18"
          },
          {
            "_id": "5745d43fe70394822f000005",
            "contains_binaries": true,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-prod/c0bf710b-9b21-4b6a-9fbf-171f30e14a16gregPkg989.zip",
            "contents": "All Framing at Reference Level - Collects all of the structural framing at a specific reference level, All Pipes at Reference Level - This will collect all pipes by their reference level., All Upper - This converts the ase of selected items to UPPER. Inputs require booleans to enable for category., Arrowhead Assigner - This node assings the arrowhead type for all text and keynote tags. There is an input for ones you want to exclude., Ayuda.IsArchi-LabInstalled - This node determines if Archi-Lab is installed. Useful with a toggle., Ayuda.IsClockworkInstalled - This node determines if clockwork is installed. Useful with a toggle., Ayuda.IsSteamNodesInstalled - This node determines if steamnodes is installed. Useful with a toggle.;, Ayuda.ThisOrThat - This node is a toggle between two inputs., CableTray.Space - This node will determine the space a cable tray's center falls within., Collector.DuctsBySystem - This collects all ducts in the project and organizes them by System Classification, Collector.KeynoteTags - This collects all of the keynote tags in the model. Similar to other nodes, but this doesn't use python., Collector.LabelTypes - This node collects all of the label types for the active family document., Collector.PipesBySystem - This collects all pipes in the project and organizes them by System Classification, Collector.TagTypes - This node collects the tag types in the model., Collector.Viewports - This collects all of the viewports in the model and outputs the name, title on sheet, scale and viewport type., Curve.FromLine - This will translate a line element to a curve., Dash Remover - This node removes the dash at index 2 if it exists. The reason being, NCS states that no dash shall be used., Dimension.IsOverridden - This will report if a dimension has been overridden. , Element.AreaLocation - This node will determine what area (area plans) an element is located within. Made possible thanks to clockwork. :), Element.AreaWithTotal - This will get the area of an element if the parameter exists. Will total as well if needed., Element.Category - This node will get the input element(s)' categories, Element.GetLevelNameAsString - This retrieves the level name of the input elements as a string. This is in response to a known issue with the get value node., Element.GetMultipleParameterValuesByName - Get the value of multiple parameters from elements. (Seperate parameters with comma), Element.GetParameterValueByName(CaSe iNSeNSiTive) - Get the value of one of the element's parameters. (CaSe iNSeNSiTiVe), Element.OverrideCutColorInView - Overrides the elements cut color in the view., Element.OverrideCutLineweight - Overrides the cut lines of the elements, Element.OverrideProjectionFillColor - This node overrides the fill color of the element in view., Element.OverrideProjectionLineColor - This node overrides the projection line color with the input color value. Useful for annotation., Element.OverrideProjectionLineweight - Overrides the line thickness of projection lines, Element.ParentFamily - This node retrieces the parent family name for each input element., Element.Room - This node takes the input of all elements of category and reports back the associated room per element. Currently tested with casework, furniture and plumbing fixtures., Element.SetMultipleParametersByName - Set multiple (comma seperated) parameters by name., Element.SetParameterByName(CaSe iNSeNSiTiVe) - Set one of the element's parameters. (CaSe iNSeNSiTiVe), Element.SetPinnedStatus - Will set the element to either pinned or not pinned. True is pinned, false is unpinned. For multiple elements use List.Map, Element.Space - This will retrieve the space in which an element is contained. (if available), Element.Type - This retrieves the element type of the given elements. (if available) Similar to others available but no python here., Geometry.SpaceEvenlyWithBuffer - This will take input geometry and space it out in the Y direction with a buffer between, Geometry.ToRevitType - This will convert designscript geometyr into Revit.DB types. Currently tested with curves, nurbs curves and solids., GetParameterValueByName(TypeOrInstance) - Gets a parameter value by name regardless of type or instance., GetParameterValueByNameAsString - Returns paramter value as string. Same effect as lunchbox node, without python., Gmail.ComposeEmail - This node will compose a new email. Useful for notifications regarding a graph concluding. Uses pythons built-in SMTP Library., Gmail.ComposeEmailDetailed - This will compose a detailed email with subject and message., Group.UngroupElements - This will ungroup the input groups and output their elements. Use with care!, Inspiration.BuffettNode - This is a result of \"what if?\" thinking. The output is a random Warren Buffett quote from brainyquotes.com, Inspiration.CarreyNode - This is a result of \"what if?\" thinking. The output is a random Jim Carrey quote from brainyquotes.com, Inspiration.CashNode - This is a result of \"what if?\" thinking. The output is a random Johnny Cash quote from brainyquotes.com, Inspiration.MarleyNode - This is a result of \"what if?\" thinking. The output is a random Bob Marley quote from brainyquotes.com, Inspiration.SearchQuoteNode - This is a result of \"what if?\" thinking. The output is a random quote based on the search criteria from brainyquotes.com. (As long as it is on the site), Inspiration.TeresaNode - This is a result of \"what if?\" thinking. The output is a random Mother Teresa quote from brainyquotes.com, Isolated Pick Model Elements - Pick model elements in desired order of a desired category., Level Element Collector - This collects data for all of the Level elements in the model. Similar to the node on Lunchbox, but this one uses all O.O.B. nodes., List.AllIndicesOf - Given an item, returns the zero-based indices of all its occurrences in the list. If the item cannot be found, an empty list is returned. , List.ArchitecturalAlphabeticalSequence - This creates a list of characters. What's different is we typically exclude I's and O's from our characters so there is a toggle for this., List.Contains - Determines if the given list contains the item or items., List.GetItemIndices - This node searches the input list for the given string or number., List.MergeSublists - This will merge all sublists with or without a character between the strings., List.ReturnItemsPreviousToIndex - This will take an index (or indices) and return the items previous to it. Useful for sums of all items previous., Mullion.SortByDirection - This will sort mullions of a host curtain wall by direction they are facing., OS.CurrentUser - This node retrieves the current user logged in., OS.CurrentUserAppData - This retrieves the current user's appdata location, Output.Clean - This will return a single value or list from one input., Parametric Graphic Scale - This node automates the graphic scale assigned per viewport. The input required is all instances of viewport category. It also requires shared parameters. Visit sixtysecondrevit.blogspot.com for details., Pick Model Elements - This node offers a pick method for selecting elements in Revit., Railing.BalusterCount - This node will count the amout of balusters in a rail element. Only works for single element for now., RemoveListFromList - This node essentially \"subtracts\" the contents of List B from List A to produce a new list with the unique items., Rhythm.3DRoomTags - This node will generate 3D room tags for all rooms in the model. (RFA in extra folder in Dynamo download), Rhythm.3DSpaceTags - This will generate 3D space tags for all spaces in the project., Rhythm.BackupRFADeleter - This node will scan the contents of a driectory and delete backup RFA files that appear with a four digit backup number before the file extension. (eg. Family1.0001.rfa) This is deleting files so please use with caution!, Rhythm.Detail Number by View Name  - Automatically numbers your detail number based on the first two characters of your view name. i.e. A4/... (Requires slash to be present), Rhythm.OverrideInteriorCrop - This node will override the lineweight of the crop region on interior elevations. This node would not be possible without the power of the Dynamo community. Specifically Danny Jones with Clark Patterson Lee, Rhythm.PercentGlazingByOrientation - This node was show at RTCNA2015 to optimize your workflows. It reports the window to wall % by direction the wall faces., Rhythm.RenumberGridsByCurve - This node will renumber grids in order of curve drawn through them. Select either letters or numbers. (Alphanumeric coming soon), Rhythm.RenumberRoomsByCurve - This node will renumber rooms along a curve path. This was developed through the guidance of WIlliam Wong at case. Considering WeWork bought Case I wanted this node to live somewhere., Rhythm.Toggle - Toggle that offers two outputs. Created for Dynamo 0.8.1 because of changes to the \"IF\" node, Room Element Collector - THis will collect data regarding rooms in the active model. Similar to Lunchbox node, but this one does not use python., Select Elements By Curve - This will select model elements in order that a curve is drawn through them., SetParameterByName(TypeOrInstance) - Set one of the element's parameters regardless of parameter type or instance., Space.IsPointInside - This will test if a point falls within a space., SquareFeetDropper - This node drops square feet from the pulled area, String.CharacterAtIndex - Get's the character at a given index, String.ElementsModified - THis custom node reports the amount of elements in a list as a phrase., String.FlipReverse - This node flips the string and reverses it. (April Fools '15) Works for 0.8.0 only, added unicode support, String.IndicesOfCharacter - This node gets all the indices of a given character, String.IsUnicode - Determines if input string is a unicode character., String.RemoveAfterGivenCharacter - This will move all characters at and after the given character., String.RemovePriorToCharacter - This will remove all characters prior to the input character. Accepts strings., String.SpecifyDecimalPlaces - This node will take your inout string and number of decimal places to create a new simplified output., String.ToSentenceCase - This node will convert a single string of text to have capitalized sentences. If you need to use this over a list, use List.Map., String.ToTitle - Converts the given string to Title Case., TextElement.ToLower - This node converts a Revit text elemnt to upper directly., TextElement.ToTitle - This node converts a Revit text elemnt to upper directly., TextElement.ToUpper - This node converts a Revit text elemnt to upper directly., UI.UserMessage - This will display a user message once. Until it is either toggled or changed., Unicode.LRE - Start of left-to-right embedding Unicode Character, Unicode.LRM - Left-to-right mark unicode character, Unicode.RLE - Start of right-to-left embedding Unicode Character, Unicode.RLM - Right-to-left mark Unicode character, Unicode.ZWJ - Zero width joiner Unicode Character, Unicode.ZWNJ - Zero width non-joiner Unicode Character, View.ConvertToIndependent - This will convert input dependent views to independent. Thanks to TheRevitKid for the idea!, Viewport.ViewName - This node gets the view name of viewports. There is an issue when \"title on sheet\" is used, so this fixes that., Wall.NorthSouthEastWest - This node determines which direction a wall is facing and groups them by the direction or direction they are closest to., Workset.Create - Creates a workset or worksets from input names., Rhythm.WhatTheNode - This node will let you search dynamonodes.com for the most likely package a node is from. Helps fix \"red\" nodes when users do not have package installed.",
            "engine_metadata": "",
            "engine_version": "1.0.0.1180",
            "created": "2016-05-25T16:35:11.250Z",
            "full_dependency_versions": [ "2016.5.24" ],
            "full_dependency_ids": [
              {
                "_id": "54e7add1dcee4dfd26000101",
                "name": "Rhythm"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2016.5.24"
          },
          {
            "_id": "5755e079e70394822f000060",
            "contains_binaries": true,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-prod/3c5a4aa2-9f7c-4e0c-bec2-22b359693c94gregPkg987.zip",
            "contents": "All Framing at Reference Level - Collects all of the structural framing at a specific reference level, All Pipes at Reference Level - This will collect all pipes by their reference level., All Upper - This converts the ase of selected items to UPPER. Inputs require booleans to enable for category., Arrowhead Assigner - This node assings the arrowhead type for all text and keynote tags. There is an input for ones you want to exclude., Ayuda.IsArchi-LabInstalled - This node determines if Archi-Lab is installed. Useful with a toggle., Ayuda.IsClockworkInstalled - This node determines if clockwork is installed. Useful with a toggle., Ayuda.IsSteamNodesInstalled - This node determines if steamnodes is installed. Useful with a toggle.;, Ayuda.ThisOrThat - This node is a toggle between two inputs., CableTray.Space - This node will determine the space a cable tray's center falls within., Collector.DuctsBySystem - This collects all ducts in the project and organizes them by System Classification, Collector.KeynoteTags - This collects all of the keynote tags in the model. Similar to other nodes, but this doesn't use python., Collector.LabelTypes - This node collects all of the label types for the active family document., Collector.PipesBySystem - This collects all pipes in the project and organizes them by System Classification, Collector.TagTypes - This node collects the tag types in the model., Collector.Viewports - This collects all of the viewports in the model and outputs the name, title on sheet, scale and viewport type., Curve.FromLine - This will translate a line element to a curve., Dash Remover - This node removes the dash at index 2 if it exists. The reason being, NCS states that no dash shall be used., Dimension.IsOverridden - This will report if a dimension has been overridden. , Element.AreaLocation - This node will determine what area (area plans) an element is located within. Made possible thanks to clockwork. :), Element.AreaWithTotal - This will get the area of an element if the parameter exists. Will total as well if needed., Element.Category - This node will get the input element(s)' categories, Element.GetLevelNameAsString - This retrieves the level name of the input elements as a string. This is in response to a known issue with the get value node., Element.GetMultipleParameterValuesByName - Get the value of multiple parameters from elements. (Seperate parameters with comma), Element.GetParameterValueByName(CaSe iNSeNSiTive) - Get the value of one of the element's parameters. (CaSe iNSeNSiTiVe), Element.OverrideCutColorInView - Overrides the elements cut color in the view., Element.OverrideCutLineweight - Overrides the cut lines of the elements, Element.OverrideProjectionFillColor - This node overrides the fill color of the element in view., Element.OverrideProjectionLineColor - This node overrides the projection line color with the input color value. Useful for annotation., Element.OverrideProjectionLineweight - Overrides the line thickness of projection lines, Element.ParentFamily - This node retrieces the parent family name for each input element., Element.Room - This node takes the input of all elements of category and reports back the associated room per element. Currently tested with casework, furniture and plumbing fixtures., Element.SetMultipleParametersByName - Set multiple (comma seperated) parameters by name., Element.SetParameterByName(CaSe iNSeNSiTiVe) - Set one of the element's parameters. (CaSe iNSeNSiTiVe), Element.SetPinnedStatus - Will set the element to either pinned or not pinned. True is pinned, false is unpinned. For multiple elements use List.Map, Element.Space - This will retrieve the space in which an element is contained. (if available), Element.Type - This retrieves the element type of the given elements. (if available) Similar to others available but no python here., Geometry.SpaceEvenlyWithBuffer - This will take input geometry and space it out in the Y direction with a buffer between, Geometry.ToRevitType - This will convert designscript geometyr into Revit.DB types. Currently tested with curves, nurbs curves and solids., GetParameterValueByName(TypeOrInstance) - Gets a parameter value by name regardless of type or instance., GetParameterValueByNameAsString - Returns paramter value as string. Same effect as lunchbox node, without python., Gmail.ComposeEmail - This node will compose a new email. Useful for notifications regarding a graph concluding. Uses pythons built-in SMTP Library., Gmail.ComposeEmailDetailed - This will compose a detailed email with subject and message., Group.UngroupElements - This will ungroup the input groups and output their elements. Use with care!, Inspiration.BuffettNode - This is a result of \"what if?\" thinking. The output is a random Warren Buffett quote from brainyquotes.com, Inspiration.CarreyNode - This is a result of \"what if?\" thinking. The output is a random Jim Carrey quote from brainyquotes.com, Inspiration.CashNode - This is a result of \"what if?\" thinking. The output is a random Johnny Cash quote from brainyquotes.com, Inspiration.MarleyNode - This is a result of \"what if?\" thinking. The output is a random Bob Marley quote from brainyquotes.com, Inspiration.SearchQuoteNode - This is a result of \"what if?\" thinking. The output is a random quote based on the search criteria from brainyquotes.com. (As long as it is on the site), Inspiration.TeresaNode - This is a result of \"what if?\" thinking. The output is a random Mother Teresa quote from brainyquotes.com, Isolated Pick Model Elements - Pick model elements in desired order of a desired category., Level Element Collector - This collects data for all of the Level elements in the model. Similar to the node on Lunchbox, but this one uses all O.O.B. nodes., List.AllIndicesOf - Given an item, returns the zero-based indices of all its occurrences in the list. If the item cannot be found, an empty list is returned. , List.ArchitecturalAlphabeticalSequence - This creates a list of characters. What's different is we typically exclude I's and O's from our characters so there is a toggle for this., List.Contains - Determines if the given list contains the item or items., List.GetItemIndices - This node searches the input list for the given string or number., List.MergeSublists - This will merge all sublists with or without a character between the strings., List.ReturnItemsPreviousToIndex - This will take an index (or indices) and return the items previous to it. Useful for sums of all items previous., Mullion.SortByDirection - This will sort mullions of a host curtain wall by direction they are facing., OS.CurrentUser - This node retrieves the current user logged in., OS.CurrentUserAppData - This retrieves the current user's appdata location, Output.Clean - This will return a single value or list from one input., Parametric Graphic Scale - This node automates the graphic scale assigned per viewport. The input required is all instances of viewport category. It also requires shared parameters. Visit sixtysecondrevit.blogspot.com for details., Pick Model Elements - This node offers a pick method for selecting elements in Revit., Railing.BalusterCount - This node will count the amout of balusters in a rail element. Only works for single element for now., RemoveListFromList - This node essentially \"subtracts\" the contents of List B from List A to produce a new list with the unique items., Rhythm.3DRoomTags - This node will generate 3D room tags for all rooms in the model. (RFA in extra folder in Dynamo download), Rhythm.3DSpaceTags - This will generate 3D space tags for all spaces in the project., Rhythm.BackupRFADeleter - This node will scan the contents of a driectory and delete backup RFA files that appear with a four digit backup number before the file extension. (eg. Family1.0001.rfa) This is deleting files so please use with caution!, Rhythm.Detail Number by View Name  - Automatically numbers your detail number based on the first two characters of your view name. i.e. A4/... (Requires slash to be present), Rhythm.OverrideInteriorCrop - This node will override the lineweight of the crop region on interior elevations. This node would not be possible without the power of the Dynamo community. Specifically Danny Jones with Clark Patterson Lee, Rhythm.PercentGlazingByOrientation - This node was show at RTCNA2015 to optimize your workflows. It reports the window to wall % by direction the wall faces., Rhythm.RenumberGridsByCurve - This node will renumber grids in order of curve drawn through them. Select either letters or numbers. (Alphanumeric coming soon), Rhythm.RenumberRoomsByCurve - This node will renumber rooms along a curve path. This was developed through the guidance of WIlliam Wong at case. Considering WeWork bought Case I wanted this node to live somewhere., Rhythm.Toggle - Toggle that offers two outputs. Created for Dynamo 0.8.1 because of changes to the \"IF\" node, Rhythm.WhatTheNode - This node will let you search dynamonodes.com for the most likely package a node is from. Helps fix \"red\" nodes when users do not have package installed., Room Element Collector - THis will collect data regarding rooms in the active model. Similar to Lunchbox node, but this one does not use python., Select Elements By Curve - This will select model elements in order that a curve is drawn through them., SetParameterByName(TypeOrInstance) - Set one of the element's parameters regardless of parameter type or instance., Space.IsPointInside - This will test if a point falls within a space., SquareFeetDropper - This node drops square feet from the pulled area, String.CharacterAtIndex - Get's the character at a given index, String.ElementsModified - THis custom node reports the amount of elements in a list as a phrase., String.FlipReverse - This node flips the string and reverses it. (April Fools '15) Works for 0.8.0 only, added unicode support, String.IndicesOfCharacter - This node gets all the indices of a given character, String.IsUnicode - Determines if input string is a unicode character., String.RemoveAfterGivenCharacter - This will move all characters at and after the given character., String.RemovePriorToCharacter - This will remove all characters prior to the input character. Accepts strings., String.SpecifyDecimalPlaces - This node will take your inout string and number of decimal places to create a new simplified output., String.ToSentenceCase - This node will convert a single string of text to have capitalized sentences. If you need to use this over a list, use List.Map., String.ToTitle - Converts the given string to Title Case., TextElement.ToLower - This node converts a Revit text elemnt to upper directly., TextElement.ToTitle - This node converts a Revit text elemnt to upper directly., TextElement.ToUpper - This node converts a Revit text elemnt to upper directly., UI.UserMessage - This will display a user message once. Until it is either toggled or changed., Unicode.LRE - Start of left-to-right embedding Unicode Character, Unicode.LRM - Left-to-right mark unicode character, Unicode.RLE - Start of right-to-left embedding Unicode Character, Unicode.RLM - Right-to-left mark Unicode character, Unicode.ZWJ - Zero width joiner Unicode Character, Unicode.ZWNJ - Zero width non-joiner Unicode Character, View.ConvertToIndependent - This will convert input dependent views to independent. Thanks to TheRevitKid for the idea!, Viewport.ViewName - This node gets the view name of viewports. There is an issue when \"title on sheet\" is used, so this fixes that., Wall.NorthSouthEastWest - This node determines which direction a wall is facing and groups them by the direction or direction they are closest to., Workset.Create - Creates a workset or worksets from input names., ViewFamilyType.ByName - Select a view family type given it's name.",
            "engine_metadata": "",
            "engine_version": "1.0.0.1180",
            "created": "2016-06-06T20:43:37.773Z",
            "full_dependency_versions": [ "2016.6.5" ],
            "full_dependency_ids": [
              {
                "_id": "54e7add1dcee4dfd26000101",
                "name": "Rhythm"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2016.6.5"
          },
          {
            "_id": "5756db63e70394822f000068",
            "contains_binaries": true,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-prod/6fc9e10a-f10b-42aa-98f5-0de40cc6fd4egregPkg918.zip",
            "contents": "All Framing at Reference Level - Collects all of the structural framing at a specific reference level, All Pipes at Reference Level - This will collect all pipes by their reference level., All Upper - This converts the ase of selected items to UPPER. Inputs require booleans to enable for category., Arrowhead Assigner - This node assings the arrowhead type for all text and keynote tags. There is an input for ones you want to exclude., Ayuda.IsArchi-LabInstalled - This node determines if Archi-Lab is installed. Useful with a toggle., Ayuda.IsClockworkInstalled - This node determines if clockwork is installed. Useful with a toggle., Ayuda.IsSteamNodesInstalled - This node determines if steamnodes is installed. Useful with a toggle.;, Ayuda.ThisOrThat - This node is a toggle between two inputs., CableTray.Space - This node will determine the space a cable tray's center falls within., Collector.DuctsBySystem - This collects all ducts in the project and organizes them by System Classification, Collector.KeynoteTags - This collects all of the keynote tags in the model. Similar to other nodes, but this doesn't use python., Collector.LabelTypes - This node collects all of the label types for the active family document., Collector.PipesBySystem - This collects all pipes in the project and organizes them by System Classification, Collector.TagTypes - This node collects the tag types in the model., Collector.Viewports - This collects all of the viewports in the model and outputs the name, title on sheet, scale and viewport type., Curve.FromLine - This will translate a line element to a curve., Dash Remover - This node removes the dash at index 2 if it exists. The reason being, NCS states that no dash shall be used., Dimension.IsOverridden - This will report if a dimension has been overridden. , Element.AreaLocation - This node will determine what area (area plans) an element is located within. Made possible thanks to clockwork. :), Element.AreaWithTotal - This will get the area of an element if the parameter exists. Will total as well if needed., Element.Category - This node will get the input element(s)' categories, Element.GetLevelNameAsString - This retrieves the level name of the input elements as a string. This is in response to a known issue with the get value node., Element.GetMultipleParameterValuesByName - Get the value of multiple parameters from elements. (Seperate parameters with comma), Element.GetParameterValueByName(CaSe iNSeNSiTive) - Get the value of one of the element's parameters. (CaSe iNSeNSiTiVe), Element.OverrideCutColorInView - Overrides the elements cut color in the view., Element.OverrideCutLineweight - Overrides the cut lines of the elements, Element.OverrideProjectionFillColor - This node overrides the fill color of the element in view., Element.OverrideProjectionLineColor - This node overrides the projection line color with the input color value. Useful for annotation., Element.OverrideProjectionLineweight - Overrides the line thickness of projection lines, Element.ParentFamily - This node retrieces the parent family name for each input element., Element.Room - This node takes the input of all elements of category and reports back the associated room per element. Currently tested with casework, furniture and plumbing fixtures., Element.SetMultipleParametersByName - Set multiple (comma seperated) parameters by name., Element.SetParameterByName(CaSe iNSeNSiTiVe) - Set one of the element's parameters. (CaSe iNSeNSiTiVe), Element.SetPinnedStatus - Will set the element to either pinned or not pinned. True is pinned, false is unpinned. For multiple elements use List.Map, Element.Space - This will retrieve the space in which an element is contained. (if available), Element.Type - This retrieves the element type of the given elements. (if available) Similar to others available but no python here., Geometry.SpaceEvenlyWithBuffer - This will take input geometry and space it out in the Y direction with a buffer between, Geometry.ToRevitType - This will convert designscript geometyr into Revit.DB types. Currently tested with curves, nurbs curves and solids., GetParameterValueByName(TypeOrInstance) - Gets a parameter value by name regardless of type or instance., GetParameterValueByNameAsString - Returns paramter value as string. Same effect as lunchbox node, without python., Gmail.ComposeEmail - This node will compose a new email. Useful for notifications regarding a graph concluding. Uses pythons built-in SMTP Library., Gmail.ComposeEmailDetailed - This will compose a detailed email with subject and message., Group.UngroupElements - This will ungroup the input groups and output their elements. Use with care!, Inspiration.BuffettNode - This is a result of \"what if?\" thinking. The output is a random Warren Buffett quote from brainyquotes.com, Inspiration.CarreyNode - This is a result of \"what if?\" thinking. The output is a random Jim Carrey quote from brainyquotes.com, Inspiration.CashNode - This is a result of \"what if?\" thinking. The output is a random Johnny Cash quote from brainyquotes.com, Inspiration.MarleyNode - This is a result of \"what if?\" thinking. The output is a random Bob Marley quote from brainyquotes.com, Inspiration.SearchQuoteNode - This is a result of \"what if?\" thinking. The output is a random quote based on the search criteria from brainyquotes.com. (As long as it is on the site), Inspiration.TeresaNode - This is a result of \"what if?\" thinking. The output is a random Mother Teresa quote from brainyquotes.com, Isolated Pick Model Elements - Pick model elements in desired order of a desired category., Level Element Collector - This collects data for all of the Level elements in the model. Similar to the node on Lunchbox, but this one uses all O.O.B. nodes., List.AllIndicesOf - Given an item, returns the zero-based indices of all its occurrences in the list. If the item cannot be found, an empty list is returned. , List.ArchitecturalAlphabeticalSequence - This creates a list of characters. What's different is we typically exclude I's and O's from our characters so there is a toggle for this., List.Contains - Determines if the given list contains the item or items., List.GetItemIndices - This node searches the input list for the given string or number., List.MergeSublists - This will merge all sublists with or without a character between the strings., List.ReturnItemsPreviousToIndex - This will take an index (or indices) and return the items previous to it. Useful for sums of all items previous., Mullion.SortByDirection - This will sort mullions of a host curtain wall by direction they are facing., OS.CurrentUser - This node retrieves the current user logged in., OS.CurrentUserAppData - This retrieves the current user's appdata location, Output.Clean - This will return a single value or list from one input., Parametric Graphic Scale - This node automates the graphic scale assigned per viewport. The input required is all instances of viewport category. It also requires shared parameters. Visit sixtysecondrevit.blogspot.com for details., Pick Model Elements - This node offers a pick method for selecting elements in Revit., Railing.BalusterCount - This node will count the amout of balusters in a rail element. Only works for single element for now., RemoveListFromList - This node essentially \"subtracts\" the contents of List B from List A to produce a new list with the unique items., Rhythm.3DRoomTags - This node will generate 3D room tags for all rooms in the model. (RFA in extra folder in Dynamo download), Rhythm.3DSpaceTags - This will generate 3D space tags for all spaces in the project., Rhythm.BackupRFADeleter - This node will scan the contents of a driectory and delete backup RFA files that appear with a four digit backup number before the file extension. (eg. Family1.0001.rfa) This is deleting files so please use with caution!, Rhythm.Detail Number by View Name  - Automatically numbers your detail number based on the first two characters of your view name. i.e. A4/... (Requires slash to be present), Rhythm.OverrideInteriorCrop - This node will override the lineweight of the crop region on interior elevations. This node would not be possible without the power of the Dynamo community. Specifically Danny Jones with Clark Patterson Lee, Rhythm.PercentGlazingByOrientation - This node was show at RTCNA2015 to optimize your workflows. It reports the window to wall % by direction the wall faces., Rhythm.RenumberGridsByCurve - This node will renumber grids in order of curve drawn through them. Select either letters or numbers. (Alphanumeric coming soon), Rhythm.RenumberRoomsByCurve - This node will renumber rooms along a curve path. This was developed through the guidance of WIlliam Wong at case. Considering WeWork bought Case I wanted this node to live somewhere., Rhythm.Toggle - Toggle that offers two outputs. Created for Dynamo 0.8.1 because of changes to the \"IF\" node, Rhythm.WhatTheNode - This node will let you search dynamonodes.com for the most likely package a node is from. Helps fix \"red\" nodes when users do not have package installed., Room Element Collector - THis will collect data regarding rooms in the active model. Similar to Lunchbox node, but this one does not use python., Select Elements By Curve - This will select model elements in order that a curve is drawn through them., SetParameterByName(TypeOrInstance) - Set one of the element's parameters regardless of parameter type or instance., Space.IsPointInside - This will test if a point falls within a space., SquareFeetDropper - This node drops square feet from the pulled area, String.CharacterAtIndex - Get's the character at a given index, String.ElementsModified - THis custom node reports the amount of elements in a list as a phrase., String.FlipReverse - This node flips the string and reverses it. (April Fools '15) Works for 0.8.0 only, added unicode support, String.IndicesOfCharacter - This node gets all the indices of a given character, String.IsUnicode - Determines if input string is a unicode character., String.RemoveAfterGivenCharacter - This will move all characters at and after the given character., String.RemovePriorToCharacter - This will remove all characters prior to the input character. Accepts strings., String.SpecifyDecimalPlaces - This node will take your inout string and number of decimal places to create a new simplified output., String.ToSentenceCase - This node will convert a single string of text to have capitalized sentences. If you need to use this over a list, use List.Map., String.ToTitle - Converts the given string to Title Case., TextElement.ToLower - This node converts a Revit text elemnt to upper directly., TextElement.ToTitle - This node converts a Revit text elemnt to upper directly., TextElement.ToUpper - This node converts a Revit text elemnt to upper directly., UI.UserMessage - This will display a user message once. Until it is either toggled or changed., Unicode.LRE - Start of left-to-right embedding Unicode Character, Unicode.LRM - Left-to-right mark unicode character, Unicode.RLE - Start of right-to-left embedding Unicode Character, Unicode.RLM - Right-to-left mark Unicode character, Unicode.ZWJ - Zero width joiner Unicode Character, Unicode.ZWNJ - Zero width non-joiner Unicode Character, View.ConvertToIndependent - This will convert input dependent views to independent. Thanks to TheRevitKid for the idea!, ViewFamilyType.ByName - Select a view family type given it's name., Viewport.ViewName - This node gets the view name of viewports. There is an issue when \"title on sheet\" is used, so this fixes that., Wall.NorthSouthEastWest - This node determines which direction a wall is facing and groups them by the direction or direction they are closest to., Workset.Create - Creates a workset or worksets from input names., RoomTag.Host - Retrieves the assoicated room with a room tag., SpaceTag.Host - This obtains the MEP space associated with a given MEP space tag.",
            "engine_metadata": "",
            "engine_version": "1.0.0.1180",
            "created": "2016-06-07T14:34:11.933Z",
            "full_dependency_versions": [ "2016.6.7" ],
            "full_dependency_ids": [
              {
                "_id": "54e7add1dcee4dfd26000101",
                "name": "Rhythm"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2016.6.7"
          },
          {
            "_id": "57618799e70394822f0000a6",
            "contains_binaries": true,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-prod/80366d08-36b1-409f-aa3a-e3a30375f772gregPkg960.zip",
            "contents": "All Framing at Reference Level - Collects all of the structural framing at a specific reference level, All Pipes at Reference Level - This will collect all pipes by their reference level., All Upper - This converts the ase of selected items to UPPER. Inputs require booleans to enable for category., Arrowhead Assigner - This node assings the arrowhead type for all text and keynote tags. There is an input for ones you want to exclude., Ayuda.IsArchi-LabInstalled - This node determines if Archi-Lab is installed. Useful with a toggle., Ayuda.IsClockworkInstalled - This node determines if clockwork is installed. Useful with a toggle., Ayuda.IsSteamNodesInstalled - This node determines if steamnodes is installed. Useful with a toggle.;, Ayuda.ThisOrThat - This node is a toggle between two inputs., CableTray.Space - This node will determine the space a cable tray's center falls within., Collector.DuctsBySystem - This collects all ducts in the project and organizes them by System Classification, Collector.KeynoteTags - This collects all of the keynote tags in the model. Similar to other nodes, but this doesn't use python., Collector.LabelTypes - This node collects all of the label types for the active family document., Collector.PipesBySystem - This collects all pipes in the project and organizes them by System Classification, Collector.TagTypes - This node collects the tag types in the model., Collector.Viewports - This collects all of the viewports in the model and outputs the name, title on sheet, scale and viewport type., Curve.FromLine - This will translate a line element to a curve., Dash Remover - This node removes the dash at index 2 if it exists. The reason being, NCS states that no dash shall be used., Dimension.IsOverridden - This will report if a dimension has been overridden. , Element.AreaLocation - This node will determine what area (area plans) an element is located within. Made possible thanks to clockwork. :), Element.AreaWithTotal - This will get the area of an element if the parameter exists. Will total as well if needed., Element.Category - This node will get the input element(s)' categories, Element.GetLevelNameAsString - This retrieves the level name of the input elements as a string. This is in response to a known issue with the get value node., Element.GetMultipleParameterValuesByName - Get the value of multiple parameters from elements. (Seperate parameters with comma), Element.GetParameterValueByName(CaSe iNSeNSiTive) - Get the value of one of the element's parameters. (CaSe iNSeNSiTiVe), Element.OverrideCutColorInView - Overrides the elements cut color in the view., Element.OverrideCutLineweight - Overrides the cut lines of the elements, Element.OverrideProjectionFillColor - This node overrides the fill color of the element in view., Element.OverrideProjectionLineColor - This node overrides the projection line color with the input color value. Useful for annotation., Element.OverrideProjectionLineweight - Overrides the line thickness of projection lines, Element.ParentFamily - This node retrieces the parent family name for each input element., Element.Room - This node takes the input of all elements of category and reports back the associated room per element. Currently tested with casework, furniture and plumbing fixtures., Element.SetMultipleParametersByName - Set multiple (comma seperated) parameters by name., Element.SetParameterByName(CaSe iNSeNSiTiVe) - Set one of the element's parameters. (CaSe iNSeNSiTiVe), Element.SetPinnedStatus - Will set the element to either pinned or not pinned. True is pinned, false is unpinned. For multiple elements use List.Map, Element.Space - This will retrieve the space in which an element is contained. (if available), Element.Type - This retrieves the element type of the given elements. (if available) Similar to others available but no python here., Geometry.SpaceEvenlyWithBuffer - This will take input geometry and space it out in the Y direction with a buffer between, Geometry.ToRevitType - This will convert designscript geometyr into Revit.DB types. Currently tested with curves, nurbs curves and solids., GetParameterValueByName(TypeOrInstance) - Gets a parameter value by name regardless of type or instance., GetParameterValueByNameAsString - Returns paramter value as string. Same effect as lunchbox node, without python., Gmail.ComposeEmail - This node will compose a new email. Useful for notifications regarding a graph concluding. Uses pythons built-in SMTP Library., Gmail.ComposeEmailDetailed - This will compose a detailed email with subject and message., Group.UngroupElements - This will ungroup the input groups and output their elements. Use with care!, Inspiration.BuffettNode - This is a result of \"what if?\" thinking. The output is a random Warren Buffett quote from brainyquotes.com, Inspiration.CarreyNode - This is a result of \"what if?\" thinking. The output is a random Jim Carrey quote from brainyquotes.com, Inspiration.CashNode - This is a result of \"what if?\" thinking. The output is a random Johnny Cash quote from brainyquotes.com, Inspiration.MarleyNode - This is a result of \"what if?\" thinking. The output is a random Bob Marley quote from brainyquotes.com, Inspiration.SearchQuoteNode - This is a result of \"what if?\" thinking. The output is a random quote based on the search criteria from brainyquotes.com. (As long as it is on the site), Inspiration.TeresaNode - This is a result of \"what if?\" thinking. The output is a random Mother Teresa quote from brainyquotes.com, Isolated Pick Model Elements - Pick model elements in desired order of a desired category., Level Element Collector - This collects data for all of the Level elements in the model. Similar to the node on Lunchbox, but this one uses all O.O.B. nodes., List.AllIndicesOf - Given an item, returns the zero-based indices of all its occurrences in the list. If the item cannot be found, an empty list is returned. , List.ArchitecturalAlphabeticalSequence - This creates a list of characters. What's different is we typically exclude I's and O's from our characters so there is a toggle for this., List.Contains - Determines if the given list contains the item or items., List.GetItemIndices - This node searches the input list for the given string or number., List.MergeSublists - This will merge all sublists with or without a character between the strings., List.ReturnItemsPreviousToIndex - This will take an index (or indices) and return the items previous to it. Useful for sums of all items previous., Mullion.SortByDirection - This will sort mullions of a host curtain wall by direction they are facing., OS.CurrentUser - This node retrieves the current user logged in., OS.CurrentUserAppData - This retrieves the current user's appdata location, Output.Clean - This will return a single value or list from one input., Parametric Graphic Scale - This node automates the graphic scale assigned per viewport. The input required is all instances of viewport category. It also requires shared parameters. Visit sixtysecondrevit.blogspot.com for details., Pick Model Elements - This node offers a pick method for selecting elements in Revit., Railing.BalusterCount - This node will count the amout of balusters in a rail element. Only works for single element for now., RemoveListFromList - This node essentially \"subtracts\" the contents of List B from List A to produce a new list with the unique items., Rhythm.3DRoomTags - This node will generate 3D room tags for all rooms in the model. (RFA in extra folder in Dynamo download), Rhythm.3DSpaceTags - This will generate 3D space tags for all spaces in the project., Rhythm.BackupRFADeleter - This node will scan the contents of a driectory and delete backup RFA files that appear with a four digit backup number before the file extension. (eg. Family1.0001.rfa) This is deleting files so please use with caution!, Rhythm.Detail Number by View Name  - Automatically numbers your detail number based on the first two characters of your view name. i.e. A4/... (Requires slash to be present), Rhythm.OverrideInteriorCrop - This node will override the lineweight of the crop region on interior elevations. This node would not be possible without the power of the Dynamo community. Specifically Danny Jones with Clark Patterson Lee, Rhythm.PercentGlazingByOrientation - This node was show at RTCNA2015 to optimize your workflows. It reports the window to wall % by direction the wall faces., Rhythm.RenumberGridsByCurve - This node will renumber grids in order of curve drawn through them. Select either letters or numbers. (Alphanumeric coming soon), Rhythm.RenumberRoomsByCurve - This node will renumber rooms along a curve path. This was developed through the guidance of WIlliam Wong at case. Considering WeWork bought Case I wanted this node to live somewhere., Rhythm.Toggle - Toggle that offers two outputs. Created for Dynamo 0.8.1 because of changes to the \"IF\" node, Rhythm.WhatTheNode - This node will let you search dynamonodes.com for the most likely package a node is from. Helps fix \"red\" nodes when users do not have package installed., Room Element Collector - THis will collect data regarding rooms in the active model. Similar to Lunchbox node, but this one does not use python., RoomTag.Host - Retrieves the assoicated room with a room tag., Select Elements By Curve - This will select model elements in order that a curve is drawn through them., SetParameterByName(TypeOrInstance) - Set one of the element's parameters regardless of parameter type or instance., Space.IsPointInside - This will test if a point falls within a space., SpaceTag.Host - This obtains the MEP space associated with a given MEP space tag., SquareFeetDropper - This node drops square feet from the pulled area, String.CharacterAtIndex - Get's the character at a given index, String.ElementsModified - THis custom node reports the amount of elements in a list as a phrase., String.FlipReverse - This node flips the string and reverses it. (April Fools '15) Works for 0.8.0 only, added unicode support, String.IndicesOfCharacter - This node gets all the indices of a given character, String.IsUnicode - Determines if input string is a unicode character., String.RemoveAfterGivenCharacter - This will move all characters at and after the given character., String.RemovePriorToCharacter - This will remove all characters prior to the input character. Accepts strings., String.SpecifyDecimalPlaces - This node will take your inout string and number of decimal places to create a new simplified output., String.ToSentenceCase - This node will convert a single string of text to have capitalized sentences. If you need to use this over a list, use List.Map., String.ToTitle - Converts the given string to Title Case., TextElement.ToLower - This node converts a Revit text elemnt to upper directly., TextElement.ToTitle - This node converts a Revit text elemnt to upper directly., TextElement.ToUpper - This node converts a Revit text elemnt to upper directly., UI.UserMessage - This will display a user message once. Until it is either toggled or changed., Unicode.LRE - Start of left-to-right embedding Unicode Character, Unicode.LRM - Left-to-right mark unicode character, Unicode.RLE - Start of right-to-left embedding Unicode Character, Unicode.RLM - Right-to-left mark Unicode character, Unicode.ZWJ - Zero width joiner Unicode Character, Unicode.ZWNJ - Zero width non-joiner Unicode Character, View.ConvertToIndependent - This will convert input dependent views to independent. Thanks to TheRevitKid for the idea!, ViewFamilyType.ByName - Select a view family type given it's name., Viewport.ViewName - This node gets the view name of viewports. There is an issue when \"title on sheet\" is used, so this fixes that., Wall.NorthSouthEastWest - This node determines which direction a wall is facing and groups them by the direction or direction they are closest to., Workset.Create - Creates a workset or worksets from input names., StructuralBeamSystem.Members - Thist will collect the members of the ebeam system., Dimension.GetValueOverride - This will provide the value override of the dimension string. If it is not overriden, it will be empty., Dimension.LeaderEndPosition - This will return the leader end postion as a point., Dimension.MultiSegmentMembers - This will output all of the members of a multi-segment dimension., Dimension.NumberOfSegments - This will return the number of segments a dimension has. If it is a single dimension, this will return zero., Dimension.Origin - This will return the dimension origin as a point., Dimension.SetValueOverride - This will set the value override of a dimension., Dimension.TextPosition - This will return the postition of the text as a point., Dimension.Value - This will return the dimension value., Dimension.ValueString - The displayed value shown for the dimension segment. ",
            "engine_metadata": "",
            "engine_version": "1.0.0.1180",
            "created": "2016-06-15T16:51:37.139Z",
            "full_dependency_versions": [ "2016.6.15" ],
            "full_dependency_ids": [
              {
                "_id": "54e7add1dcee4dfd26000101",
                "name": "Rhythm"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2016.6.15"
          },
          {
            "_id": "57740525a8864af46c000008",
            "contains_binaries": true,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-prod/5f511f67-f5f0-438d-951f-94e5d4b02c2fgregPkg577.zip",
            "contents": "All Framing at Reference Level - Collects all of the structural framing at a specific reference level, All Pipes at Reference Level - This will collect all pipes by their reference level., All Upper - This converts the ase of selected items to UPPER. Inputs require booleans to enable for category., Arrowhead Assigner - This node assings the arrowhead type for all text and keynote tags. There is an input for ones you want to exclude., Ayuda.IsArchi-LabInstalled - This node determines if Archi-Lab is installed. Useful with a toggle., Ayuda.IsClockworkInstalled - This node determines if clockwork is installed. Useful with a toggle., Ayuda.IsSteamNodesInstalled - This node determines if steamnodes is installed. Useful with a toggle.;, Ayuda.ThisOrThat - This node is a toggle between two inputs., CableTray.Space - This node will determine the space a cable tray's center falls within., Collector.DuctsBySystem - This collects all ducts in the project and organizes them by System Classification, Collector.KeynoteTags - This collects all of the keynote tags in the model. Similar to other nodes, but this doesn't use python., Collector.LabelTypes - This node collects all of the label types for the active family document., Collector.PipesBySystem - This collects all pipes in the project and organizes them by System Classification, Collector.TagTypes - This node collects the tag types in the model., Collector.Viewports - This collects all of the viewports in the model and outputs the name, title on sheet, scale and viewport type., Curve.FromLine - This will translate a line element to a curve., Dash Remover - This node removes the dash at index 2 if it exists. The reason being, NCS states that no dash shall be used., Dimension.GetValueOverride - This will provide the value override of the dimension string. If it is not overriden, it will be empty., Dimension.IsOverridden - This will report if a dimension has been overridden. , Dimension.LeaderEndPosition - This will return the leader end postion as a point., Dimension.MultiSegmentMembers - This will output all of the members of a multi-segment dimension., Dimension.NumberOfSegments - This will return the number of segments a dimension has. If it is a single dimension, this will return zero., Dimension.Origin - This will return the dimension origin as a point., Dimension.SetValueOverride - This will set the value override of a dimension., Dimension.TextPosition - This will return the postition of the text as a point., Dimension.Value - This will return the dimension value., Dimension.ValueString - The displayed value shown for the dimension segment. , Element.AreaLocation - This node will determine what area (area plans) an element is located within. Made possible thanks to clockwork. :), Element.AreaWithTotal - This will get the area of an element if the parameter exists. Will total as well if needed., Element.Category - This node will get the input element(s)' categories, Element.GetLevelNameAsString - This retrieves the level name of the input elements as a string. This is in response to a known issue with the get value node., Element.GetMultipleParameterValuesByName - Get the value of multiple parameters from elements. (Seperate parameters with comma), Element.GetParameterValueByName(CaSe iNSeNSiTive) - Get the value of one of the element's parameters. (CaSe iNSeNSiTiVe), Element.OverrideCutColorInView - Overrides the elements cut color in the view., Element.OverrideCutLineweight - Overrides the cut lines of the elements, Element.OverrideProjectionFillColor - This node overrides the fill color of the element in view., Element.OverrideProjectionLineColor - This node overrides the projection line color with the input color value. Useful for annotation., Element.OverrideProjectionLineweight - Overrides the line thickness of projection lines, Element.ParentFamily - This node retrieces the parent family name for each input element., Element.Room - This node takes the input of all elements of category and reports back the associated room per element. Currently tested with casework, furniture and plumbing fixtures., Element.SetMultipleParametersByName - Set multiple (comma seperated) parameters by name., Element.SetParameterByName(CaSe iNSeNSiTiVe) - Set one of the element's parameters. (CaSe iNSeNSiTiVe), Element.SetPinnedStatus - Will set the element to either pinned or not pinned. True is pinned, false is unpinned. For multiple elements use List.Map, Element.Space - This will retrieve the space in which an element is contained. (if available), Element.Type - This retrieves the element type of the given elements. (if available) Similar to others available but no python here., Geometry.SpaceEvenlyWithBuffer - This will take input geometry and space it out in the Y direction with a buffer between, Geometry.ToRevitType - This will convert designscript geometyr into Revit.DB types. Currently tested with curves, nurbs curves and solids., GetParameterValueByName(TypeOrInstance) - Gets a parameter value by name regardless of type or instance., GetParameterValueByNameAsString - Returns paramter value as string. Same effect as lunchbox node, without python., Gmail.ComposeEmail - This node will compose a new email. Useful for notifications regarding a graph concluding. Uses pythons built-in SMTP Library., Gmail.ComposeEmailDetailed - This will compose a detailed email with subject and message., Group.UngroupElements - This will ungroup the input groups and output their elements. Use with care!, Inspiration.BuffettNode - This is a result of \"what if?\" thinking. The output is a random Warren Buffett quote from brainyquotes.com, Inspiration.CarreyNode - This is a result of \"what if?\" thinking. The output is a random Jim Carrey quote from brainyquotes.com, Inspiration.CashNode - This is a result of \"what if?\" thinking. The output is a random Johnny Cash quote from brainyquotes.com, Inspiration.MarleyNode - This is a result of \"what if?\" thinking. The output is a random Bob Marley quote from brainyquotes.com, Inspiration.SearchQuoteNode - This is a result of \"what if?\" thinking. The output is a random quote based on the search criteria from brainyquotes.com. (As long as it is on the site), Inspiration.TeresaNode - This is a result of \"what if?\" thinking. The output is a random Mother Teresa quote from brainyquotes.com, Isolated Pick Model Elements - Pick model elements in desired order of a desired category., Level Element Collector - This collects data for all of the Level elements in the model. Similar to the node on Lunchbox, but this one uses all O.O.B. nodes., List.AllIndicesOf - Given an item, returns the zero-based indices of all its occurrences in the list. If the item cannot be found, an empty list is returned. , List.ArchitecturalAlphabeticalSequence - This creates a list of characters. What's different is we typically exclude I's and O's from our characters so there is a toggle for this., List.Contains - Determines if the given list contains the item or items., List.GetItemIndices - This node searches the input list for the given string or number., List.MergeSublists - This will merge all sublists with or without a character between the strings., List.ReturnItemsPreviousToIndex - This will take an index (or indices) and return the items previous to it. Useful for sums of all items previous., Mullion.SortByDirection - This will sort mullions of a host curtain wall by direction they are facing., OS.CurrentUser - This node retrieves the current user logged in., OS.CurrentUserAppData - This retrieves the current user's appdata location, Output.Clean - This will return a single value or list from one input., Parametric Graphic Scale - This node automates the graphic scale assigned per viewport. The input required is all instances of viewport category. It also requires shared parameters. Visit sixtysecondrevit.blogspot.com for details., Pick Model Elements - This node offers a pick method for selecting elements in Revit., Railing.BalusterCount - This node will count the amout of balusters in a rail element. Only works for single element for now., RemoveListFromList - This node essentially \"subtracts\" the contents of List B from List A to produce a new list with the unique items., Rhythm.3DRoomTags - This node will generate 3D room tags for all rooms in the model. (RFA in extra folder in Dynamo download), Rhythm.3DSpaceTags - This will generate 3D space tags for all spaces in the project., Rhythm.BackupRFADeleter - This node will scan the contents of a driectory and delete backup RFA files that appear with a four digit backup number before the file extension. (eg. Family1.0001.rfa) This is deleting files so please use with caution!, Rhythm.Detail Number by View Name  - Automatically numbers your detail number based on the first two characters of your view name. i.e. A4/... (Requires slash to be present), Rhythm.OverrideInteriorCrop - This node will override the lineweight of the crop region on interior elevations. This node would not be possible without the power of the Dynamo community. Specifically Danny Jones with Clark Patterson Lee, Rhythm.PercentGlazingByOrientation - This node was show at RTCNA2015 to optimize your workflows. It reports the window to wall % by direction the wall faces., Rhythm.RenumberGridsByCurve - This node will renumber grids in order of curve drawn through them. Select either letters or numbers. (Alphanumeric coming soon), Rhythm.RenumberRoomsByCurve - This node will renumber rooms along a curve path. This was developed through the guidance of WIlliam Wong at case. Considering WeWork bought Case I wanted this node to live somewhere., Rhythm.Toggle - Toggle that offers two outputs. Created for Dynamo 0.8.1 because of changes to the \"IF\" node, Rhythm.WhatTheNode - This node will let you search dynamonodes.com for the most likely package a node is from. Helps fix \"red\" nodes when users do not have package installed., Room Element Collector - THis will collect data regarding rooms in the active model. Similar to Lunchbox node, but this one does not use python., RoomTag.Host - Retrieves the assoicated room with a room tag., Select Elements By Curve - This will select model elements in order that a curve is drawn through them., SetParameterByName(TypeOrInstance) - Set one of the element's parameters regardless of parameter type or instance., Space.IsPointInside - This will test if a point falls within a space., SpaceTag.Host - This obtains the MEP space associated with a given MEP space tag., SquareFeetDropper - This node drops square feet from the pulled area, String.CharacterAtIndex - Get's the character at a given index, String.ElementsModified - THis custom node reports the amount of elements in a list as a phrase., String.FlipReverse - This node flips the string and reverses it. (April Fools '15) Works for 0.8.0 only, added unicode support, String.IndicesOfCharacter - This node gets all the indices of a given character, String.IsUnicode - Determines if input string is a unicode character., String.RemoveAfterGivenCharacter - This will move all characters at and after the given character., String.RemovePriorToCharacter - This will remove all characters prior to the input character. Accepts strings., String.SpecifyDecimalPlaces - This node will take your inout string and number of decimal places to create a new simplified output., String.ToSentenceCase - This node will convert a single string of text to have capitalized sentences. If you need to use this over a list, use List.Map., String.ToTitle - Converts the given string to Title Case., StructuralBeamSystem.Members - Thist will collect the members of the ebeam system., TextElement.ToLower - This node converts a Revit text elemnt to upper directly., TextElement.ToTitle - This node converts a Revit text elemnt to upper directly., TextElement.ToUpper - This node converts a Revit text elemnt to upper directly., UI.UserMessage - This will display a user message once. Until it is either toggled or changed., Unicode.LRE - Start of left-to-right embedding Unicode Character, Unicode.LRM - Left-to-right mark unicode character, Unicode.RLE - Start of right-to-left embedding Unicode Character, Unicode.RLM - Right-to-left mark Unicode character, Unicode.ZWJ - Zero width joiner Unicode Character, Unicode.ZWNJ - Zero width non-joiner Unicode Character, View.ConvertToIndependent - This will convert input dependent views to independent. Thanks to TheRevitKid for the idea!, ViewFamilyType.ByName - Select a view family type given it's name., Viewport.ViewName - This node gets the view name of viewports. There is an issue when \"title on sheet\" is used, so this fixes that., Wall.NorthSouthEastWest - This node determines which direction a wall is facing and groups them by the direction or direction they are closest to., Workset.Create - Creates a workset or worksets from input names., Dimension.SetAboveValue - This will set the above value of a dimension., Dimension.SetBelowValue - This will set the below value of a dimension.",
            "engine_metadata": "",
            "engine_version": "1.0.0.1180",
            "created": "2016-06-29T17:28:05.502Z",
            "full_dependency_versions": [ "2016.6.29" ],
            "full_dependency_ids": [
              {
                "_id": "54e7add1dcee4dfd26000101",
                "name": "Rhythm"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2016.6.29"
          },
          {
            "_id": "5788f5715351460648000068",
            "contains_binaries": true,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-prod/70d12268-4601-4380-aa52-1b89689d71efgregPkg384.zip",
            "contents": "All Framing at Reference Level - Collects all of the structural framing at a specific reference level, All Pipes at Reference Level - This will collect all pipes by their reference level., All Upper - This converts the ase of selected items to UPPER. Inputs require booleans to enable for category., Arrowhead Assigner - This node assings the arrowhead type for all text and keynote tags. There is an input for ones you want to exclude., Ayuda.IsArchi-LabInstalled - This node determines if Archi-Lab is installed. Useful with a toggle., Ayuda.IsClockworkInstalled - This node determines if clockwork is installed. Useful with a toggle., Ayuda.IsSteamNodesInstalled - This node determines if steamnodes is installed. Useful with a toggle.;, Ayuda.ThisOrThat - This node is a toggle between two inputs., CableTray.Space - This node will determine the space a cable tray's center falls within., Collector.DuctsBySystem - This collects all ducts in the project and organizes them by System Classification, Collector.KeynoteTags - This collects all of the keynote tags in the model. Similar to other nodes, but this doesn't use python., Collector.LabelTypes - This node collects all of the label types for the active family document., Collector.PipesBySystem - This collects all pipes in the project and organizes them by System Classification, Collector.TagTypes - This node collects the tag types in the model., Collector.Viewports - This collects all of the viewports in the model and outputs the name, title on sheet, scale and viewport type., Curve.FromLine - This will translate a line element to a curve., Dash Remover - This node removes the dash at index 2 if it exists. The reason being, NCS states that no dash shall be used., Dimension.GetValueOverride - This will provide the value override of the dimension string. If it is not overriden, it will be empty., Dimension.IsOverridden - This will report if a dimension has been overridden. , Dimension.LeaderEndPosition - This will return the leader end postion as a point., Dimension.MultiSegmentMembers - This will output all of the members of a multi-segment dimension., Dimension.NumberOfSegments - This will return the number of segments a dimension has. If it is a single dimension, this will return zero., Dimension.Origin - This will return the dimension origin as a point., Dimension.SetAboveValue - This will set the above value of a dimension., Dimension.SetBelowValue - This will set the below value of a dimension., Dimension.SetValueOverride - This will set the value override of a dimension., Dimension.TextPosition - This will return the postition of the text as a point., Dimension.Value - This will return the dimension value., Dimension.ValueString - The displayed value shown for the dimension segment. , Element.AreaLocation - This node will determine what area (area plans) an element is located within. Made possible thanks to clockwork. :), Element.AreaWithTotal - This will get the area of an element if the parameter exists. Will total as well if needed., Element.Category - This node will get the input element(s)' categories, Element.GetLevelNameAsString - This retrieves the level name of the input elements as a string. This is in response to a known issue with the get value node., Element.GetMultipleParameterValuesByName - Get the value of multiple parameters from elements. (Seperate parameters with comma), Element.GetParameterValueByName(CaSe iNSeNSiTive) - Get the value of one of the element's parameters. (CaSe iNSeNSiTiVe), Element.OverrideCutColorInView - Overrides the elements cut color in the view., Element.OverrideCutLineweight - Overrides the cut lines of the elements, Element.OverrideProjectionFillColor - This node overrides the fill color of the element in view., Element.OverrideProjectionLineColor - This node overrides the projection line color with the input color value. Useful for annotation., Element.OverrideProjectionLineweight - Overrides the line thickness of projection lines, Element.ParentFamily - This node retrieces the parent family name for each input element., Element.Room - This node takes the input of all elements of category and reports back the associated room per element. Currently tested with casework, furniture and plumbing fixtures., Element.SetMultipleParametersByName - Set multiple (comma seperated) parameters by name., Element.SetParameterByName(CaSe iNSeNSiTiVe) - Set one of the element's parameters. (CaSe iNSeNSiTiVe), Element.SetPinnedStatus - Will set the element to either pinned or not pinned. True is pinned, false is unpinned. For multiple elements use List.Map, Element.Space - This will retrieve the space in which an element is contained. (if available), Element.Type - This retrieves the element type of the given elements. (if available) Similar to others available but no python here., Geometry.SpaceEvenlyWithBuffer - This will take input geometry and space it out in the Y direction with a buffer between, Geometry.ToRevitType - This will convert designscript geometyr into Revit.DB types. Currently tested with curves, nurbs curves and solids., GetParameterValueByName(TypeOrInstance) - Gets a parameter value by name regardless of type or instance., GetParameterValueByNameAsString - Returns paramter value as string. Same effect as lunchbox node, without python., Gmail.ComposeEmail - This node will compose a new email. Useful for notifications regarding a graph concluding. Uses pythons built-in SMTP Library., Gmail.ComposeEmailDetailed - This will compose a detailed email with subject and message., Group.UngroupElements - This will ungroup the input groups and output their elements. Use with care!, Inspiration.BuffettNode - This is a result of \"what if?\" thinking. The output is a random Warren Buffett quote from brainyquotes.com, Inspiration.CarreyNode - This is a result of \"what if?\" thinking. The output is a random Jim Carrey quote from brainyquotes.com, Inspiration.CashNode - This is a result of \"what if?\" thinking. The output is a random Johnny Cash quote from brainyquotes.com, Inspiration.MarleyNode - This is a result of \"what if?\" thinking. The output is a random Bob Marley quote from brainyquotes.com, Inspiration.SearchQuoteNode - This is a result of \"what if?\" thinking. The output is a random quote based on the search criteria from brainyquotes.com. (As long as it is on the site), Inspiration.TeresaNode - This is a result of \"what if?\" thinking. The output is a random Mother Teresa quote from brainyquotes.com, Isolated Pick Model Elements - Pick model elements in desired order of a desired category., Level Element Collector - This collects data for all of the Level elements in the model. Similar to the node on Lunchbox, but this one uses all O.O.B. nodes., List.AllIndicesOf - Given an item, returns the zero-based indices of all its occurrences in the list. If the item cannot be found, an empty list is returned. , List.ArchitecturalAlphabeticalSequence - This creates a list of characters. What's different is we typically exclude I's and O's from our characters so there is a toggle for this., List.Contains - Determines if the given list contains the item or items., List.GetItemIndices - This node searches the input list for the given string or number., List.MergeSublists - This will merge all sublists with or without a character between the strings., List.ReturnItemsPreviousToIndex - This will take an index (or indices) and return the items previous to it. Useful for sums of all items previous., Mullion.SortByDirection - This will sort mullions of a host curtain wall by direction they are facing., OS.CurrentUser - This node retrieves the current user logged in., OS.CurrentUserAppData - This retrieves the current user's appdata location, Output.Clean - This will return a single value or list from one input., Parametric Graphic Scale - This node automates the graphic scale assigned per viewport. The input required is all instances of viewport category. It also requires shared parameters. Visit sixtysecondrevit.blogspot.com for details., Pick Model Elements - This node offers a pick method for selecting elements in Revit., Railing.BalusterCount - This node will count the amout of balusters in a rail element. Only works for single element for now., RemoveListFromList - This node essentially \"subtracts\" the contents of List B from List A to produce a new list with the unique items., Rhythm.3DRoomTags - This node will generate 3D room tags for all rooms in the model. (RFA in extra folder in Dynamo download), Rhythm.3DSpaceTags - This will generate 3D space tags for all spaces in the project., Rhythm.BackupRFADeleter - This node will scan the contents of a driectory and delete backup RFA files that appear with a four digit backup number before the file extension. (eg. Family1.0001.rfa) This is deleting files so please use with caution!, Rhythm.Detail Number by View Name  - Automatically numbers your detail number based on the first two characters of your view name. i.e. A4/... (Requires slash to be present), Rhythm.OverrideInteriorCrop - This node will override the lineweight of the crop region on interior elevations. This node would not be possible without the power of the Dynamo community. Specifically Danny Jones with Clark Patterson Lee, Rhythm.PercentGlazingByOrientation - This node was show at RTCNA2015 to optimize your workflows. It reports the window to wall % by direction the wall faces., Rhythm.RenumberGridsByCurve - This node will renumber grids in order of curve drawn through them. Select either letters or numbers. (Alphanumeric coming soon), Rhythm.RenumberRoomsByCurve - This node will renumber rooms along a curve path. This was developed through the guidance of WIlliam Wong at case. Considering WeWork bought Case I wanted this node to live somewhere., Rhythm.Toggle - Toggle that offers two outputs. Created for Dynamo 0.8.1 because of changes to the \"IF\" node, Rhythm.WhatTheNode - This node will let you search dynamonodes.com for the most likely package a node is from. Helps fix \"red\" nodes when users do not have package installed., Room Element Collector - THis will collect data regarding rooms in the active model. Similar to Lunchbox node, but this one does not use python., RoomTag.Host - Retrieves the assoicated room with a room tag., Select Elements By Curve - This will select model elements in order that a curve is drawn through them., SetParameterByName(TypeOrInstance) - Set one of the element's parameters regardless of parameter type or instance., Space.IsPointInside - This will test if a point falls within a space., SpaceTag.Host - This obtains the MEP space associated with a given MEP space tag., SquareFeetDropper - This node drops square feet from the pulled area, String.CharacterAtIndex - Get's the character at a given index, String.ElementsModified - THis custom node reports the amount of elements in a list as a phrase., String.FlipReverse - This node flips the string and reverses it. (April Fools '15) Works for 0.8.0 only, added unicode support, String.IndicesOfCharacter - This node gets all the indices of a given character, String.IsUnicode - Determines if input string is a unicode character., String.RemoveAfterGivenCharacter - This will move all characters at and after the given character., String.RemovePriorToCharacter - This will remove all characters prior to the input character. Accepts strings., String.SpecifyDecimalPlaces - This node will take your inout string and number of decimal places to create a new simplified output., String.ToSentenceCase - This node will convert a single string of text to have capitalized sentences. If you need to use this over a list, use List.Map., String.ToTitle - Converts the given string to Title Case., StructuralBeamSystem.Members - Thist will collect the members of the ebeam system., TextElement.ToLower - This node converts a Revit text elemnt to upper directly., TextElement.ToTitle - This node converts a Revit text elemnt to upper directly., TextElement.ToUpper - This node converts a Revit text elemnt to upper directly., UI.UserMessage - This will display a user message once. Until it is either toggled or changed., Unicode.LRE - Start of left-to-right embedding Unicode Character, Unicode.LRM - Left-to-right mark unicode character, Unicode.RLE - Start of right-to-left embedding Unicode Character, Unicode.RLM - Right-to-left mark Unicode character, Unicode.ZWJ - Zero width joiner Unicode Character, Unicode.ZWNJ - Zero width non-joiner Unicode Character, View.ConvertToIndependent - This will convert input dependent views to independent. Thanks to TheRevitKid for the idea!, ViewFamilyType.ByName - Select a view family type given it's name., Viewport.ViewName - This node gets the view name of viewports. There is an issue when \"title on sheet\" is used, so this fixes that., Wall.NorthSouthEastWest - This node determines which direction a wall is facing and groups them by the direction or direction they are closest to., Workset.Create - Creates a workset or worksets from input names., Space.SetSpaceType - This node will set the space type for the input space., Space.GetSpaceType - This will retrieve the space type of the space as a string., SpaceType.All - This node will output ALL space types., SpaceType.ByName - This will output a MEP space type based on name search.",
            "engine_metadata": "",
            "engine_version": "1.0.0.1180",
            "created": "2016-07-15T14:38:41.790Z",
            "full_dependency_versions": [ "2016.7.15" ],
            "full_dependency_ids": [
              {
                "_id": "54e7add1dcee4dfd26000101",
                "name": "Rhythm"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2016.7.15"
          },
          {
            "_id": "5797899953514606480000bb",
            "contains_binaries": true,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-prod/4f831a20-df65-439e-8403-8367c7c3670fgregPkg937.zip",
            "contents": "All Framing at Reference Level - Collects all of the structural framing at a specific reference level, All Pipes at Reference Level - This will collect all pipes by their reference level., All Upper - This converts the ase of selected items to UPPER. Inputs require booleans to enable for category., Arrowhead Assigner - This node assings the arrowhead type for all text and keynote tags. There is an input for ones you want to exclude., Ayuda.IsArchi-LabInstalled - This node determines if Archi-Lab is installed. Useful with a toggle., Ayuda.IsClockworkInstalled - This node determines if clockwork is installed. Useful with a toggle., Ayuda.IsSteamNodesInstalled - This node determines if steamnodes is installed. Useful with a toggle.;, Ayuda.ThisOrThat - This node is a toggle between two inputs., CableTray.Space - This node will determine the space a cable tray's center falls within., Collector.DuctsBySystem - This collects all ducts in the project and organizes them by System Classification, Collector.KeynoteTags - This collects all of the keynote tags in the model. Similar to other nodes, but this doesn't use python., Collector.LabelTypes - This node collects all of the label types for the active family document., Collector.PipesBySystem - This collects all pipes in the project and organizes them by System Classification, Collector.TagTypes - This node collects the tag types in the model., Collector.Viewports - This collects all of the viewports in the model and outputs the name, title on sheet, scale and viewport type., Curve.FromLine - This will translate a line element to a curve., Dash Remover - This node removes the dash at index 2 if it exists. The reason being, NCS states that no dash shall be used., Dimension.GetValueOverride - This will provide the value override of the dimension string. If it is not overriden, it will be empty., Dimension.IsOverridden - This will report if a dimension has been overridden. , Dimension.LeaderEndPosition - This will return the leader end postion as a point., Dimension.MultiSegmentMembers - This will output all of the members of a multi-segment dimension., Dimension.NumberOfSegments - This will return the number of segments a dimension has. If it is a single dimension, this will return zero., Dimension.Origin - This will return the dimension origin as a point., Dimension.SetAboveValue - This will set the above value of a dimension., Dimension.SetBelowValue - This will set the below value of a dimension., Dimension.SetValueOverride - This will set the value override of a dimension., Dimension.TextPosition - This will return the postition of the text as a point., Dimension.Value - This will return the dimension value., Dimension.ValueString - The displayed value shown for the dimension segment. , Element.AreaLocation - This node will determine what area (area plans) an element is located within. Made possible thanks to clockwork. :), Element.AreaWithTotal - This will get the area of an element if the parameter exists. Will total as well if needed., Element.Category - This node will get the input element(s)' categories, Element.GetLevelNameAsString - This retrieves the level name of the input elements as a string. This is in response to a known issue with the get value node., Element.GetMultipleParameterValuesByName - Get the value of multiple parameters from elements. (Seperate parameters with comma), Element.GetParameterValueByName(CaSe iNSeNSiTive) - Get the value of one of the element's parameters. (CaSe iNSeNSiTiVe), Element.OverrideCutColorInView - Overrides the elements cut color in the view., Element.OverrideCutLineweight - Overrides the cut lines of the elements, Element.OverrideProjectionFillColor - This node overrides the fill color of the element in view., Element.OverrideProjectionLineColor - This node overrides the projection line color with the input color value. Useful for annotation., Element.OverrideProjectionLineweight - Overrides the line thickness of projection lines, Element.ParentFamily - This node retrieces the parent family name for each input element., Element.Room - This node takes the input of all elements of category and reports back the associated room per element. Currently tested with casework, furniture and plumbing fixtures., Element.SetMultipleParametersByName - Set multiple (comma seperated) parameters by name., Element.SetParameterByName(CaSe iNSeNSiTiVe) - Set one of the element's parameters. (CaSe iNSeNSiTiVe), Element.SetPinnedStatus - Will set the element to either pinned or not pinned. True is pinned, false is unpinned. For multiple elements use List.Map, Element.Space - This will retrieve the space in which an element is contained. (if available), Element.Type - This retrieves the element type of the given elements. (if available) Similar to others available but no python here., Geometry.SpaceEvenlyWithBuffer - This will take input geometry and space it out in the Y direction with a buffer between, Geometry.ToRevitType - This will convert designscript geometyr into Revit.DB types. Currently tested with curves, nurbs curves and solids., GetParameterValueByName(TypeOrInstance) - Gets a parameter value by name regardless of type or instance., GetParameterValueByNameAsString - Returns paramter value as string. Same effect as lunchbox node, without python., Gmail.ComposeEmail - This node will compose a new email. Useful for notifications regarding a graph concluding. Uses pythons built-in SMTP Library., Gmail.ComposeEmailDetailed - This will compose a detailed email with subject and message., Group.UngroupElements - This will ungroup the input groups and output their elements. Use with care!, Inspiration.BuffettNode - This is a result of \"what if?\" thinking. The output is a random Warren Buffett quote from brainyquotes.com, Inspiration.CarreyNode - This is a result of \"what if?\" thinking. The output is a random Jim Carrey quote from brainyquotes.com, Inspiration.CashNode - This is a result of \"what if?\" thinking. The output is a random Johnny Cash quote from brainyquotes.com, Inspiration.MarleyNode - This is a result of \"what if?\" thinking. The output is a random Bob Marley quote from brainyquotes.com, Inspiration.SearchQuoteNode - This is a result of \"what if?\" thinking. The output is a random quote based on the search criteria from brainyquotes.com. (As long as it is on the site), Inspiration.TeresaNode - This is a result of \"what if?\" thinking. The output is a random Mother Teresa quote from brainyquotes.com, Isolated Pick Model Elements - Pick model elements in desired order of a desired category., Level Element Collector - This collects data for all of the Level elements in the model. Similar to the node on Lunchbox, but this one uses all O.O.B. nodes., List.AllIndicesOf - Given an item, returns the zero-based indices of all its occurrences in the list. If the item cannot be found, an empty list is returned. , List.ArchitecturalAlphabeticalSequence - This creates a list of characters. What's different is we typically exclude I's and O's from our characters so there is a toggle for this., List.Contains - Determines if the given list contains the item or items., List.GetItemIndices - This node searches the input list for the given string or number., List.MergeSublists - This will merge all sublists with or without a character between the strings., List.ReturnItemsPreviousToIndex - This will take an index (or indices) and return the items previous to it. Useful for sums of all items previous., Mullion.SortByDirection - This will sort mullions of a host curtain wall by direction they are facing., OS.CurrentUser - This node retrieves the current user logged in., OS.CurrentUserAppData - This retrieves the current user's appdata location, Output.Clean - This will return a single value or list from one input., Parametric Graphic Scale - This node automates the graphic scale assigned per viewport. The input required is all instances of viewport category. It also requires shared parameters. Visit sixtysecondrevit.blogspot.com for details., Pick Model Elements - This node offers a pick method for selecting elements in Revit., Railing.BalusterCount - This node will count the amout of balusters in a rail element. Only works for single element for now., RemoveListFromList - This node essentially \"subtracts\" the contents of List B from List A to produce a new list with the unique items., Rhythm.3DRoomTags - This node will generate 3D room tags for all rooms in the model. (RFA in extra folder in Dynamo download), Rhythm.3DSpaceTags - This will generate 3D space tags for all spaces in the project., Rhythm.BackupRFADeleter - This node will scan the contents of a driectory and delete backup RFA files that appear with a four digit backup number before the file extension. (eg. Family1.0001.rfa) This is deleting files so please use with caution!, Rhythm.Detail Number by View Name  - Automatically numbers your detail number based on the first two characters of your view name. i.e. A4/... (Requires slash to be present), Rhythm.OverrideInteriorCrop - This node will override the lineweight of the crop region on interior elevations. This node would not be possible without the power of the Dynamo community. Specifically Danny Jones with Clark Patterson Lee, Rhythm.PercentGlazingByOrientation - This node was show at RTCNA2015 to optimize your workflows. It reports the window to wall % by direction the wall faces., Rhythm.RenumberGridsByCurve - This node will renumber grids in order of curve drawn through them. Select either letters or numbers. (Alphanumeric coming soon), Rhythm.RenumberRoomsByCurve - This node will renumber rooms along a curve path. This was developed through the guidance of WIlliam Wong at case. Considering WeWork bought Case I wanted this node to live somewhere., Rhythm.Toggle - Toggle that offers two outputs. Created for Dynamo 0.8.1 because of changes to the \"IF\" node, Rhythm.WhatTheNode - This node will let you search dynamonodes.com for the most likely package a node is from. Helps fix \"red\" nodes when users do not have package installed., Room Element Collector - THis will collect data regarding rooms in the active model. Similar to Lunchbox node, but this one does not use python., RoomTag.Host - Retrieves the assoicated room with a room tag., Select Elements By Curve - This will select model elements in order that a curve is drawn through them., SetParameterByName(TypeOrInstance) - Set one of the element's parameters regardless of parameter type or instance., Space.IsPointInside - This will test if a point falls within a space., Space.SetSpaceType - This node will set the space type for the input space., Space.GetSpaceType - This will retrieve the space type of the space as a string., SpaceTag.Host - This obtains the MEP space associated with a given MEP space tag., SpaceType.All - This node will output ALL space types., SpaceType.ByName - This will output a MEP space type based on name search., SquareFeetDropper - This node drops square feet from the pulled area, String.CharacterAtIndex - Get's the character at a given index, String.ElementsModified - THis custom node reports the amount of elements in a list as a phrase., String.FlipReverse - This node flips the string and reverses it. (April Fools '15) Works for 0.8.0 only, added unicode support, String.IndicesOfCharacter - This node gets all the indices of a given character, String.IsUnicode - Determines if input string is a unicode character., String.RemoveAfterGivenCharacter - This will move all characters at and after the given character., String.RemovePriorToCharacter - This will remove all characters prior to the input character. Accepts strings., String.SpecifyDecimalPlaces - This node will take your inout string and number of decimal places to create a new simplified output., String.ToSentenceCase - This node will convert a single string of text to have capitalized sentences. If you need to use this over a list, use List.Map., String.ToTitle - Converts the given string to Title Case., StructuralBeamSystem.Members - Thist will collect the members of the ebeam system., TextElement.ToLower - This node converts a Revit text elemnt to upper directly., TextElement.ToTitle - This node converts a Revit text elemnt to upper directly., TextElement.ToUpper - This node converts a Revit text elemnt to upper directly., UI.UserMessage - This will display a user message once. Until it is either toggled or changed., Unicode.LRE - Start of left-to-right embedding Unicode Character, Unicode.LRM - Left-to-right mark unicode character, Unicode.RLE - Start of right-to-left embedding Unicode Character, Unicode.RLM - Right-to-left mark Unicode character, Unicode.ZWJ - Zero width joiner Unicode Character, Unicode.ZWNJ - Zero width non-joiner Unicode Character, View.ConvertToIndependent - This will convert input dependent views to independent. Thanks to TheRevitKid for the idea!, ViewFamilyType.ByName - Select a view family type given it's name., Viewport.ViewName - This node gets the view name of viewports. There is an issue when \"title on sheet\" is used, so this fixes that., Wall.NorthSouthEastWest - This node determines which direction a wall is facing and groups them by the direction or direction they are closest to., Workset.Create - Creates a workset or worksets from input names., Dimension.SetPrefix - Sets the prefix value of the dimensions., Dimension.SetSuffix - Sets the suffix for the dimension.",
            "engine_metadata": "",
            "engine_version": "1.1.0.2065",
            "created": "2016-07-26T16:02:33.712Z",
            "full_dependency_versions": [ "2016.7.26" ],
            "full_dependency_ids": [
              {
                "_id": "54e7add1dcee4dfd26000101",
                "name": "Rhythm"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2016.7.26"
          },
          {
            "_id": "57a23e04e8d2032d77000029",
            "contains_binaries": true,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-prod/df0b146f-1d0a-4b0f-9c63-e3feac2cc007gregPkg751.zip",
            "contents": "All Framing at Reference Level - Collects all of the structural framing at a specific reference level, All Pipes at Reference Level - This will collect all pipes by their reference level., All Upper - This converts the ase of selected items to UPPER. Inputs require booleans to enable for category., Arrowhead Assigner - This node assings the arrowhead type for all text and keynote tags. There is an input for ones you want to exclude., Ayuda.IsArchi-LabInstalled - This node determines if Archi-Lab is installed. Useful with a toggle., Ayuda.IsClockworkInstalled - This node determines if clockwork is installed. Useful with a toggle., Ayuda.IsSteamNodesInstalled - This node determines if steamnodes is installed. Useful with a toggle.;, Ayuda.ThisOrThat - This node is a toggle between two inputs., CableTray.Space - This node will determine the space a cable tray's center falls within., Collector.DuctsBySystem - This collects all ducts in the project and organizes them by System Classification, Collector.KeynoteTags - This collects all of the keynote tags in the model. Similar to other nodes, but this doesn't use python., Collector.LabelTypes - This node collects all of the label types for the active family document., Collector.PipesBySystem - This collects all pipes in the project and organizes them by System Classification, Collector.TagTypes - This node collects the tag types in the model., Collector.Viewports - This collects all of the viewports in the model and outputs the name, title on sheet, scale and viewport type., Curve.FromLine - This will translate a line element to a curve., Dash Remover - This node removes the dash at index 2 if it exists. The reason being, NCS states that no dash shall be used., Dimension.GetValueOverride - This will provide the value override of the dimension string. If it is not overriden, it will be empty., Dimension.IsOverridden - This will report if a dimension has been overridden. , Dimension.LeaderEndPosition - This will return the leader end postion as a point., Dimension.MultiSegmentMembers - This will output all of the members of a multi-segment dimension., Dimension.NumberOfSegments - This will return the number of segments a dimension has. If it is a single dimension, this will return zero., Dimension.Origin - This will return the dimension origin as a point., Dimension.SetAboveValue - This will set the above value of a dimension., Dimension.SetBelowValue - This will set the below value of a dimension., Dimension.SetPrefix - Sets the prefix value of the dimensions., Dimension.SetSuffix - Sets the suffix for the dimension., Dimension.SetValueOverride - This will set the value override of a dimension., Dimension.TextPosition - This will return the postition of the text as a point., Dimension.Value - This will return the dimension value., Dimension.ValueString - The displayed value shown for the dimension segment. , Element.AreaLocation - This node will determine what area (area plans) an element is located within. Made possible thanks to clockwork. :), Element.AreaWithTotal - This will get the area of an element if the parameter exists. Will total as well if needed., Element.Category - This node will get the input element(s)' categories, Element.GetLevelNameAsString - This retrieves the level name of the input elements as a string. This is in response to a known issue with the get value node., Element.GetMultipleParameterValuesByName - Get the value of multiple parameters from elements. (Seperate parameters with comma), Element.GetParameterValueByName(CaSe iNSeNSiTive) - Get the value of one of the element's parameters. (CaSe iNSeNSiTiVe), Element.OverrideCutColorInView - Overrides the elements cut color in the view., Element.OverrideCutLineweight - Overrides the cut lines of the elements, Element.OverrideProjectionFillColor - This node overrides the fill color of the element in view., Element.OverrideProjectionLineColor - This node overrides the projection line color with the input color value. Useful for annotation., Element.OverrideProjectionLineweight - Overrides the line thickness of projection lines, Element.ParentFamily - This node retrieces the parent family name for each input element., Element.Room - This node takes the input of all elements of category and reports back the associated room per element. Currently tested with casework, furniture and plumbing fixtures., Element.SetMultipleParametersByName - Set multiple (comma seperated) parameters by name., Element.SetParameterByName(CaSe iNSeNSiTiVe) - Set one of the element's parameters. (CaSe iNSeNSiTiVe), Element.SetPinnedStatus - Will set the element to either pinned or not pinned. True is pinned, false is unpinned. For multiple elements use List.Map, Element.Space - This will retrieve the space in which an element is contained. (if available), Element.Type - This retrieves the element type of the given elements. (if available) Similar to others available but no python here., Geometry.SpaceEvenlyWithBuffer - This will take input geometry and space it out in the Y direction with a buffer between, Geometry.ToRevitType - This will convert designscript geometyr into Revit.DB types. Currently tested with curves, nurbs curves and solids., GetParameterValueByName(TypeOrInstance) - Gets a parameter value by name regardless of type or instance., GetParameterValueByNameAsString - Returns paramter value as string. Same effect as lunchbox node, without python., Gmail.ComposeEmail - This node will compose a new email. Useful for notifications regarding a graph concluding. Uses pythons built-in SMTP Library., Gmail.ComposeEmailDetailed - This will compose a detailed email with subject and message., Group.UngroupElements - This will ungroup the input groups and output their elements. Use with care!, Inspiration.BuffettNode - This is a result of \"what if?\" thinking. The output is a random Warren Buffett quote from brainyquotes.com, Inspiration.CarreyNode - This is a result of \"what if?\" thinking. The output is a random Jim Carrey quote from brainyquotes.com, Inspiration.CashNode - This is a result of \"what if?\" thinking. The output is a random Johnny Cash quote from brainyquotes.com, Inspiration.MarleyNode - This is a result of \"what if?\" thinking. The output is a random Bob Marley quote from brainyquotes.com, Inspiration.SearchQuoteNode - This is a result of \"what if?\" thinking. The output is a random quote based on the search criteria from brainyquotes.com. (As long as it is on the site), Inspiration.TeresaNode - This is a result of \"what if?\" thinking. The output is a random Mother Teresa quote from brainyquotes.com, Isolated Pick Model Elements - Pick model elements in desired order of a desired category., Level Element Collector - This collects data for all of the Level elements in the model. Similar to the node on Lunchbox, but this one uses all O.O.B. nodes., List.AllIndicesOf - Given an item, returns the zero-based indices of all its occurrences in the list. If the item cannot be found, an empty list is returned. , List.ArchitecturalAlphabeticalSequence - This creates a list of characters. What's different is we typically exclude I's and O's from our characters so there is a toggle for this., List.Contains - Determines if the given list contains the item or items., List.GetItemIndices - This node searches the input list for the given string or number., List.MergeSublists - This will merge all sublists with or without a character between the strings., List.ReturnItemsPreviousToIndex - This will take an index (or indices) and return the items previous to it. Useful for sums of all items previous., Mullion.SortByDirection - This will sort mullions of a host curtain wall by direction they are facing., OS.CurrentUser - This node retrieves the current user logged in., OS.CurrentUserAppData - This retrieves the current user's appdata location, Output.Clean - This will return a single value or list from one input., Parametric Graphic Scale - This node automates the graphic scale assigned per viewport. The input required is all instances of viewport category. It also requires shared parameters. Visit sixtysecondrevit.blogspot.com for details., Pick Model Elements - This node offers a pick method for selecting elements in Revit., Railing.BalusterCount - This node will count the amout of balusters in a rail element. Only works for single element for now., RemoveListFromList - This node essentially \"subtracts\" the contents of List B from List A to produce a new list with the unique items., Rhythm.3DRoomTags - This node will generate 3D room tags for all rooms in the model. (RFA in extra folder in Dynamo download), Rhythm.3DSpaceTags - This will generate 3D space tags for all spaces in the project., Rhythm.BackupRFADeleter - This node will scan the contents of a driectory and delete backup RFA files that appear with a four digit backup number before the file extension. (eg. Family1.0001.rfa) This is deleting files so please use with caution!, Rhythm.Detail Number by View Name  - Automatically numbers your detail number based on the first two characters of your view name. i.e. A4/... (Requires slash to be present), Rhythm.OverrideInteriorCrop - This node will override the lineweight of the crop region on interior elevations. This node would not be possible without the power of the Dynamo community. Specifically Danny Jones with Clark Patterson Lee, Rhythm.PercentGlazingByOrientation - This node was show at RTCNA2015 to optimize your workflows. It reports the window to wall % by direction the wall faces., Rhythm.RenumberGridsByCurve - This node will renumber grids in order of curve drawn through them. Select either letters or numbers. (Alphanumeric coming soon), Rhythm.RenumberRoomsByCurve - This node will renumber rooms along a curve path. This was developed through the guidance of WIlliam Wong at case. Considering WeWork bought Case I wanted this node to live somewhere., Rhythm.Toggle - Toggle that offers two outputs. Created for Dynamo 0.8.1 because of changes to the \"IF\" node, Rhythm.WhatTheNode - This node will let you search dynamonodes.com for the most likely package a node is from. Helps fix \"red\" nodes when users do not have package installed., Room Element Collector - THis will collect data regarding rooms in the active model. Similar to Lunchbox node, but this one does not use python., RoomTag.Host - Retrieves the assoicated room with a room tag., Select Elements By Curve - This will select model elements in order that a curve is drawn through them., SetParameterByName(TypeOrInstance) - Set one of the element's parameters regardless of parameter type or instance., Space.IsPointInside - This will test if a point falls within a space., Space.SetSpaceType - This node will set the space type for the input space., Space.GetSpaceType - This will retrieve the space type of the space as a string., SpaceTag.Host - This obtains the MEP space associated with a given MEP space tag., SpaceType.All - This node will output ALL space types., SpaceType.ByName - This will output a MEP space type based on name search., SquareFeetDropper - This node drops square feet from the pulled area, String.CharacterAtIndex - Get's the character at a given index, String.ElementsModified - THis custom node reports the amount of elements in a list as a phrase., String.FlipReverse - This node flips the string and reverses it. (April Fools '15) Works for 0.8.0 only, added unicode support, String.IndicesOfCharacter - This node gets all the indices of a given character, String.IsUnicode - Determines if input string is a unicode character., String.RemoveAfterGivenCharacter - This will move all characters at and after the given character., String.RemovePriorToCharacter - This will remove all characters prior to the input character. Accepts strings., String.SpecifyDecimalPlaces - This node will take your inout string and number of decimal places to create a new simplified output., String.ToSentenceCase - This node will convert a single string of text to have capitalized sentences. If you need to use this over a list, use List.Map., String.ToTitle - Converts the given string to Title Case., StructuralBeamSystem.Members - Thist will collect the members of the ebeam system., TextElement.ToLower - This node converts a Revit text elemnt to upper directly., TextElement.ToTitle - This node converts a Revit text elemnt to upper directly., TextElement.ToUpper - This node converts a Revit text elemnt to upper directly., UI.UserMessage - This will display a user message once. Until it is either toggled or changed., Unicode.LRE - Start of left-to-right embedding Unicode Character, Unicode.LRM - Left-to-right mark unicode character, Unicode.RLE - Start of right-to-left embedding Unicode Character, Unicode.RLM - Right-to-left mark Unicode character, Unicode.ZWJ - Zero width joiner Unicode Character, Unicode.ZWNJ - Zero width non-joiner Unicode Character, View.ConvertToIndependent - This will convert input dependent views to independent. Thanks to TheRevitKid for the idea!, ViewFamilyType.ByName - Select a view family type given it's name., Viewport.ViewName - This node gets the view name of viewports. There is an issue when \"title on sheet\" is used, so this fixes that., Wall.NorthSouthEastWest - This node determines which direction a wall is facing and groups them by the direction or direction they are closest to., Workset.Create - Creates a workset or worksets from input names., Element.GetJoinedElements - This will obtain the elements joined to the input element.",
            "engine_metadata": "",
            "engine_version": "1.1.0.2094",
            "created": "2016-08-03T18:55:00.519Z",
            "full_dependency_versions": [ "2016.8.3" ],
            "full_dependency_ids": [
              {
                "_id": "54e7add1dcee4dfd26000101",
                "name": "Rhythm"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2016.8.3"
          },
          {
            "_id": "57d037844172a48a35000144",
            "contains_binaries": true,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-prod/8234bd77-a575-4e15-b4d6-1d57892a1748gregPkg71.zip",
            "contents": "All Framing at Reference Level - Collects all of the structural framing at a specific reference level, All Pipes at Reference Level - This will collect all pipes by their reference level., All Upper - This converts the ase of selected items to UPPER. Inputs require booleans to enable for category., Arrowhead Assigner - This node assings the arrowhead type for all text and keynote tags. There is an input for ones you want to exclude., Ayuda.IsArchi-LabInstalled - This node determines if Archi-Lab is installed. Useful with a toggle., Ayuda.IsClockworkInstalled - This node determines if clockwork is installed. Useful with a toggle., Ayuda.IsSteamNodesInstalled - This node determines if steamnodes is installed. Useful with a toggle.;, Ayuda.ThisOrThat - This node is a toggle between two inputs., CableTray.Space - This node will determine the space a cable tray's center falls within., Collector.DuctsBySystem - This collects all ducts in the project and organizes them by System Classification, Collector.KeynoteTags - This collects all of the keynote tags in the model. Similar to other nodes, but this doesn't use python., Collector.LabelTypes - This node collects all of the label types for the active family document., Collector.PipesBySystem - This collects all pipes in the project and organizes them by System Classification, Collector.TagTypes - This node collects the tag types in the model., Collector.Viewports - This collects all of the viewports in the model and outputs the name, title on sheet, scale and viewport type., Curve.FromLine - This will translate a line element to a curve., Dash Remover - This node removes the dash at index 2 if it exists. The reason being, NCS states that no dash shall be used., Dimension.GetValueOverride - This will provide the value override of the dimension string. If it is not overriden, it will be empty., Dimension.IsOverridden - This will report if a dimension has been overridden. , Dimension.LeaderEndPosition - This will return the leader end postion as a point., Dimension.MultiSegmentMembers - This will output all of the members of a multi-segment dimension., Dimension.NumberOfSegments - This will return the number of segments a dimension has. If it is a single dimension, this will return zero., Dimension.Origin - This will return the dimension origin as a point., Dimension.SetAboveValue - This will set the above value of a dimension., Dimension.SetBelowValue - This will set the below value of a dimension., Dimension.SetPrefix - Sets the prefix value of the dimensions., Dimension.SetSuffix - Sets the suffix for the dimension., Dimension.SetValueOverride - This will set the value override of a dimension., Dimension.TextPosition - This will return the postition of the text as a point., Dimension.Value - This will return the dimension value., Dimension.ValueString - The displayed value shown for the dimension segment. , Element.AreaLocation - This node will determine what area (area plans) an element is located within. Made possible thanks to clockwork. :), Element.AreaWithTotal - This will get the area of an element if the parameter exists. Will total as well if needed., Element.Category - This node will get the input element(s)' categories, Element.GetJoinedElements - This will obtain the elements joined to the input element., Element.GetLevelNameAsString - This retrieves the level name of the input elements as a string. This is in response to a known issue with the get value node., Element.GetMultipleParameterValuesByName - Get the value of multiple parameters from elements. (Seperate parameters with comma), Element.GetParameterValueByName(CaSe iNSeNSiTive) - Get the value of one of the element's parameters. (CaSe iNSeNSiTiVe), Element.OverrideCutColorInView - Overrides the elements cut color in the view., Element.OverrideCutLineweight - Overrides the cut lines of the elements, Element.OverrideProjectionFillColor - This node overrides the fill color of the element in view., Element.OverrideProjectionLineColor - This node overrides the projection line color with the input color value. Useful for annotation., Element.OverrideProjectionLineweight - Overrides the line thickness of projection lines, Element.ParentFamily - This node retrieces the parent family name for each input element., Element.Room - This node takes the input of all elements of category and reports back the associated room per element. Currently tested with casework, furniture and plumbing fixtures., Element.SetMultipleParametersByName - Set multiple (comma seperated) parameters by name., Element.SetParameterByName(CaSe iNSeNSiTiVe) - Set one of the element's parameters. (CaSe iNSeNSiTiVe), Element.SetPinnedStatus - Will set the element to either pinned or not pinned. True is pinned, false is unpinned. For multiple elements use List.Map, Element.Space - This will retrieve the space in which an element is contained. (if available), Element.Type - This retrieves the element type of the given elements. (if available) Similar to others available but no python here., Geometry.SpaceEvenlyWithBuffer - This will take input geometry and space it out in the Y direction with a buffer between, Geometry.ToRevitType - This will convert designscript geometyr into Revit.DB types. Currently tested with curves, nurbs curves and solids., GetParameterValueByName(TypeOrInstance) - Gets a parameter value by name regardless of type or instance., GetParameterValueByNameAsString - Returns paramter value as string. Same effect as lunchbox node, without python., Gmail.ComposeEmail - This node will compose a new email. Useful for notifications regarding a graph concluding. Uses pythons built-in SMTP Library., Gmail.ComposeEmailDetailed - This will compose a detailed email with subject and message., Group.UngroupElements - This will ungroup the input groups and output their elements. Use with care!, Inspiration.BuffettNode - This is a result of \"what if?\" thinking. The output is a random Warren Buffett quote from brainyquotes.com, Inspiration.CarreyNode - This is a result of \"what if?\" thinking. The output is a random Jim Carrey quote from brainyquotes.com, Inspiration.CashNode - This is a result of \"what if?\" thinking. The output is a random Johnny Cash quote from brainyquotes.com, Inspiration.MarleyNode - This is a result of \"what if?\" thinking. The output is a random Bob Marley quote from brainyquotes.com, Inspiration.SearchQuoteNode - This is a result of \"what if?\" thinking. The output is a random quote based on the search criteria from brainyquotes.com. (As long as it is on the site), Inspiration.TeresaNode - This is a result of \"what if?\" thinking. The output is a random Mother Teresa quote from brainyquotes.com, Isolated Pick Model Elements - Pick model elements in desired order of a desired category., Level Element Collector - This collects data for all of the Level elements in the model. Similar to the node on Lunchbox, but this one uses all O.O.B. nodes., List.AllIndicesOf - Given an item, returns the zero-based indices of all its occurrences in the list. If the item cannot be found, an empty list is returned. , List.ArchitecturalAlphabeticalSequence - This creates a list of characters. What's different is we typically exclude I's and O's from our characters so there is a toggle for this., List.Contains - Determines if the given list contains the item or items., List.GetItemIndices - This node searches the input list for the given string or number., List.MergeSublists - This will merge all sublists with or without a character between the strings., List.ReturnItemsPreviousToIndex - This will take an index (or indices) and return the items previous to it. Useful for sums of all items previous., Mullion.SortByDirection - This will sort mullions of a host curtain wall by direction they are facing., OS.CurrentUser - This node retrieves the current user logged in., OS.CurrentUserAppData - This retrieves the current user's appdata location, Output.Clean - This will return a single value or list from one input., Parametric Graphic Scale - This node automates the graphic scale assigned per viewport. The input required is all instances of viewport category. It also requires shared parameters. Visit sixtysecondrevit.blogspot.com for details., Pick Model Elements - This node offers a pick method for selecting elements in Revit., Railing.BalusterCount - This node will count the amout of balusters in a rail element. Only works for single element for now., RemoveListFromList - This node essentially \"subtracts\" the contents of List B from List A to produce a new list with the unique items., Rhythm.3DRoomTags - This node will generate 3D room tags for all rooms in the model. (RFA in extra folder in Dynamo download), Rhythm.3DSpaceTags - This will generate 3D space tags for all spaces in the project., Rhythm.BackupRFADeleter - This node will scan the contents of a driectory and delete backup RFA files that appear with a four digit backup number before the file extension. (eg. Family1.0001.rfa) This is deleting files so please use with caution!, Rhythm.Detail Number by View Name  - Automatically numbers your detail number based on the first two characters of your view name. i.e. A4/... (Requires slash to be present), Rhythm.OverrideInteriorCrop - This node will override the lineweight of the crop region on interior elevations. This node would not be possible without the power of the Dynamo community. Specifically Danny Jones with Clark Patterson Lee, Rhythm.PercentGlazingByOrientation - This node was show at RTCNA2015 to optimize your workflows. It reports the window to wall % by direction the wall faces., Rhythm.RenumberGridsByCurve - This node will renumber grids in order of curve drawn through them. Select either letters or numbers. (Alphanumeric coming soon), Rhythm.RenumberRoomsByCurve - This node will renumber rooms along a curve path. This was developed through the guidance of WIlliam Wong at case. Considering WeWork bought Case I wanted this node to live somewhere., Rhythm.Toggle - Toggle that offers two outputs. Created for Dynamo 0.8.1 because of changes to the \"IF\" node, Rhythm.WhatTheNode - This node will let you search dynamonodes.com for the most likely package a node is from. Helps fix \"red\" nodes when users do not have package installed., Room Element Collector - THis will collect data regarding rooms in the active model. Similar to Lunchbox node, but this one does not use python., RoomTag.Host - Retrieves the assoicated room with a room tag., Select Elements By Curve - This will select model elements in order that a curve is drawn through them., SetParameterByName(TypeOrInstance) - Set one of the element's parameters regardless of parameter type or instance., Space.IsPointInside - This will test if a point falls within a space., Space.SetSpaceType - This node will set the space type for the input space., Space.GetSpaceType - This will retrieve the space type of the space as a string., SpaceTag.Host - This obtains the MEP space associated with a given MEP space tag., SpaceType.All - This node will output ALL space types., SpaceType.ByName - This will output a MEP space type based on name search., SquareFeetDropper - This node drops square feet from the pulled area, String.CharacterAtIndex - Get's the character at a given index, String.ElementsModified - THis custom node reports the amount of elements in a list as a phrase., String.FlipReverse - This node flips the string and reverses it. (April Fools '15) Works for 0.8.0 only, added unicode support, String.IndicesOfCharacter - This node gets all the indices of a given character, String.IsUnicode - Determines if input string is a unicode character., String.RemoveAfterGivenCharacter - This will move all characters at and after the given character., String.RemovePriorToCharacter - This will remove all characters prior to the input character. Accepts strings., String.SpecifyDecimalPlaces - This node will take your inout string and number of decimal places to create a new simplified output., String.ToSentenceCase - This node will convert a single string of text to have capitalized sentences. If you need to use this over a list, use List.Map., String.ToTitle - Converts the given string to Title Case., StructuralBeamSystem.Members - Thist will collect the members of the ebeam system., TextElement.ToLower - This node converts a Revit text elemnt to upper directly., TextElement.ToTitle - This node converts a Revit text elemnt to upper directly., TextElement.ToUpper - This node converts a Revit text elemnt to upper directly., UI.UserMessage - This will display a user message once. Until it is either toggled or changed., Unicode.LRE - Start of left-to-right embedding Unicode Character, Unicode.LRM - Left-to-right mark unicode character, Unicode.RLE - Start of right-to-left embedding Unicode Character, Unicode.RLM - Right-to-left mark Unicode character, Unicode.ZWJ - Zero width joiner Unicode Character, Unicode.ZWNJ - Zero width non-joiner Unicode Character, View.ConvertToIndependent - This will convert input dependent views to independent. Thanks to TheRevitKid for the idea!, ViewFamilyType.ByName - Select a view family type given it's name., Viewport.ViewName - This node gets the view name of viewports. There is an issue when \"title on sheet\" is used, so this fixes that., Wall.NorthSouthEastWest - This node determines which direction a wall is facing and groups them by the direction or direction they are closest to., Workset.Create - Creates a workset or worksets from input names., CurtainGrid.ByElement - Gets the curtain grids by the host element. Seperates into U and V, CurtainGrid.Curves - Returns the curves of the input curtain grids., CurtainGrid.CurveSegments - This will return the vertical and horizontal curtain grid segments., CurtainGrid.RemoveSegment - Removes segments from curtain grids. Can't take lists yet. Use with List.Combine., CurtainGrid.RemoveSegmentsFunction - Function to apply to remove segments node",
            "engine_metadata": "",
            "engine_version": "1.1.0.2065",
            "created": "2016-09-07T15:51:32.285Z",
            "full_dependency_versions": [ "2016.9.7" ],
            "full_dependency_ids": [
              {
                "_id": "54e7add1dcee4dfd26000101",
                "name": "Rhythm"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2016.9.7"
          },
          {
            "_id": "57f28250d3d589541a000008",
            "contains_binaries": true,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-prod/5eac2f73-dfca-4878-8968-72f82b45793agregPkg481.zip",
            "contents": "All Framing at Reference Level - Collects all of the structural framing at a specific reference level, All Pipes at Reference Level - This will collect all pipes by their reference level., All Upper - This converts the ase of selected items to UPPER. Inputs require booleans to enable for category., Arrowhead Assigner - This node assings the arrowhead type for all text and keynote tags. There is an input for ones you want to exclude., Ayuda.IsArchi-LabInstalled - This node determines if Archi-Lab is installed. Useful with a toggle., Ayuda.IsClockworkInstalled - This node determines if clockwork is installed. Useful with a toggle., Ayuda.IsSteamNodesInstalled - This node determines if steamnodes is installed. Useful with a toggle.;, Ayuda.ThisOrThat - This node is a toggle between two inputs., CableTray.Space - This node will determine the space a cable tray's center falls within., Collector.DuctsBySystem - This collects all ducts in the project and organizes them by System Classification, Collector.KeynoteTags - This collects all of the keynote tags in the model. Similar to other nodes, but this doesn't use python., Collector.LabelTypes - This node collects all of the label types for the active family document., Collector.PipesBySystem - This collects all pipes in the project and organizes them by System Classification, Collector.TagTypes - This node collects the tag types in the model., Collector.Viewports - This collects all of the viewports in the model and outputs the name, title on sheet, scale and viewport type., CurtainGrid.AllSegmentCurves - This will return the vertical and horizontal curtain grid segments regardless if hidden or not. Groups by U and V., CurtainGrid.ByElement - Gets the curtain grids by the host element. Seperates into U and V, CurtainGrid.FullCurve - Returns the curves of the input curtain grids. Groups by U and V., CurtainGrid.RemoveSegment - Removes segments from curtain grids. Can't take lists yet. Use with List.Combine., CurtainGrid.RemoveSegmentsFunction - Function to apply to remove segments node, Curve.FromLine - This will translate a line element to a curve., Dash Remover - This node removes the dash at index 2 if it exists. The reason being, NCS states that no dash shall be used., Dimension.IsOverridden - This will report if a dimension has been overridden. , Dimension.LeaderEndPosition - This will return the leader end postion as a point., Dimension.MultiSegmentMembers - This will output all of the members of a multi-segment dimension., Dimension.NumberOfSegments - This will return the number of segments a dimension has. If it is a single dimension, this will return zero., Dimension.Origin - This will return the dimension origin as a point., Dimension.SetAboveValue - This will set the above value of a dimension., Dimension.SetBelowValue - This will set the below value of a dimension., Dimension.TextPosition - This will return the postition of the text as a point., Dimension.ValueString - The displayed value shown for the dimension segment. , Element.AreaLocation - This node will determine what area (area plans) an element is located within. Made possible thanks to clockwork. :), Element.AreaWithTotal - This will get the area of an element if the parameter exists. Will total as well if needed., Element.Category - This node will get the input element(s)' categories, Element.GetJoinedElements - This will obtain the elements joined to the input element., Element.GetLevelNameAsString - This retrieves the level name of the input elements as a string. This is in response to a known issue with the get value node., Element.GetMultipleParameterValuesByName - Get the value of multiple parameters from elements. (Seperate parameters with comma), Element.GetParameterValueByName(CaSe iNSeNSiTive) - Get the value of one of the element's parameters. (CaSe iNSeNSiTiVe), Element.OverrideCutColorInView - Overrides the elements cut color in the view., Element.OverrideCutLineweight - Overrides the cut lines of the elements, Element.OverrideProjectionFillColor - This node overrides the fill color of the element in view., Element.OverrideProjectionLineColor - This node overrides the projection line color with the input color value. Useful for annotation., Element.OverrideProjectionLineweight - Overrides the line thickness of projection lines, Element.ParentFamily - This node retrieces the parent family name for each input element., Element.Room - This node takes the input of all elements of category and reports back the associated room per element. Currently tested with casework, furniture and plumbing fixtures., Element.SetMultipleParametersByName - Set multiple (comma seperated) parameters by name., Element.SetParameterByName(CaSe iNSeNSiTiVe) - Set one of the element's parameters. (CaSe iNSeNSiTiVe), Element.SetPinnedStatus - Will set the element to either pinned or not pinned. True is pinned, false is unpinned. For multiple elements use List.Map, Element.Space - This will retrieve the space in which an element is contained. (if available), Element.Type - This retrieves the element type of the given elements. (if available) Similar to others available but no python here., Geometry.SpaceEvenlyWithBuffer - This will take input geometry and space it out in the Y direction with a buffer between, Geometry.ToRevitType - This will convert designscript geometyr into Revit.DB types. Currently tested with curves, nurbs curves and solids., GetParameterValueByName(TypeOrInstance) - Gets a parameter value by name regardless of type or instance., GetParameterValueByNameAsString - Returns paramter value as string. Same effect as lunchbox node, without python., Gmail.ComposeEmail - This node will compose a new email. Useful for notifications regarding a graph concluding. Uses pythons built-in SMTP Library., Gmail.ComposeEmailDetailed - This will compose a detailed email with subject and message., Group.UngroupElements - This will ungroup the input groups and output their elements. Use with care!, Inspiration.BuffettNode - This is a result of \"what if?\" thinking. The output is a random Warren Buffett quote from brainyquotes.com, Inspiration.CarreyNode - This is a result of \"what if?\" thinking. The output is a random Jim Carrey quote from brainyquotes.com, Inspiration.CashNode - This is a result of \"what if?\" thinking. The output is a random Johnny Cash quote from brainyquotes.com, Inspiration.MarleyNode - This is a result of \"what if?\" thinking. The output is a random Bob Marley quote from brainyquotes.com, Inspiration.SearchQuoteNode - This is a result of \"what if?\" thinking. The output is a random quote based on the search criteria from brainyquotes.com. (As long as it is on the site), Inspiration.TeresaNode - This is a result of \"what if?\" thinking. The output is a random Mother Teresa quote from brainyquotes.com, Isolated Pick Model Elements - Pick model elements in desired order of a desired category., Level Element Collector - This collects data for all of the Level elements in the model. Similar to the node on Lunchbox, but this one uses all O.O.B. nodes., List.AllIndicesOf - Given an item, returns the zero-based indices of all its occurrences in the list. If the item cannot be found, an empty list is returned. , List.ArchitecturalAlphabeticalSequence - This creates a list of characters. What's different is we typically exclude I's and O's from our characters so there is a toggle for this., List.Contains - Determines if the given list contains the item or items., List.GetItemIndices - This node searches the input list for the given string or number., List.MergeSublists - This will merge all sublists with or without a character between the strings., List.ReturnItemsPreviousToIndex - This will take an index (or indices) and return the items previous to it. Useful for sums of all items previous., Mullion.SortByDirection - This will sort mullions of a host curtain wall by direction they are facing., OS.CurrentUser - This node retrieves the current user logged in., OS.CurrentUserAppData - This retrieves the current user's appdata location, Output.Clean - This will return a single value or list from one input., Parametric Graphic Scale - This node automates the graphic scale assigned per viewport. The input required is all instances of viewport category. It also requires shared parameters. Visit sixtysecondrevit.blogspot.com for details., Pick Model Elements - This node offers a pick method for selecting elements in Revit., Railing.BalusterCount - This node will count the amout of balusters in a rail element. Only works for single element for now., RemoveListFromList - This node essentially \"subtracts\" the contents of List B from List A to produce a new list with the unique items., Rhythm.3DRoomTags - This node will generate 3D room tags for all rooms in the model. (RFA in extra folder in Dynamo download), Rhythm.3DSpaceTags - This will generate 3D space tags for all spaces in the project., Rhythm.BackupRFADeleter - This node will scan the contents of a driectory and delete backup RFA files that appear with a four digit backup number before the file extension. (eg. Family1.0001.rfa) This is deleting files so please use with caution!, Rhythm.Detail Number by View Name  - Automatically numbers your detail number based on the first two characters of your view name. i.e. A4/... (Requires slash to be present), Rhythm.OverrideInteriorCrop - This node will override the lineweight of the crop region on interior elevations. This node would not be possible without the power of the Dynamo community. Specifically Danny Jones with Clark Patterson Lee, Rhythm.PercentGlazingByOrientation - This node was show at RTCNA2015 to optimize your workflows. It reports the window to wall % by direction the wall faces., Rhythm.RenumberGridsByCurve - This node will renumber grids in order of curve drawn through them. Select either letters or numbers. (Alphanumeric coming soon), Rhythm.RenumberRoomsByCurve - This node will renumber rooms along a curve path. This was developed through the guidance of WIlliam Wong at case. Considering WeWork bought Case I wanted this node to live somewhere., Rhythm.Toggle - Toggle that offers two outputs. Created for Dynamo 0.8.1 because of changes to the \"IF\" node, Rhythm.WhatTheNode - This node will let you search dynamonodes.com for the most likely package a node is from. Helps fix \"red\" nodes when users do not have package installed., Room Element Collector - THis will collect data regarding rooms in the active model. Similar to Lunchbox node, but this one does not use python., RoomTag.Host - Retrieves the assoicated room with a room tag., Select Elements By Curve - This will select model elements in order that a curve is drawn through them., SetParameterByName(TypeOrInstance) - Set one of the element's parameters regardless of parameter type or instance., Space.IsPointInside - This will test if a point falls within a space., Space.SetSpaceType - This node will set the space type for the input space., Space.GetSpaceType - This will retrieve the space type of the space as a string., SpaceTag.Host - This obtains the MEP space associated with a given MEP space tag., SpaceType.All - This node will output ALL space types., SpaceType.ByName - This will output a MEP space type based on name search., SquareFeetDropper - This node drops square feet from the pulled area, String.CharacterAtIndex - Get's the character at a given index, String.ElementsModified - THis custom node reports the amount of elements in a list as a phrase., String.FlipReverse - This node flips the string and reverses it. (April Fools '15) Works for 0.8.0 only, added unicode support, String.IndicesOfCharacter - This node gets all the indices of a given character, String.IsUnicode - Determines if input string is a unicode character., String.RemoveAfterGivenCharacter - This will move all characters at and after the given character., String.RemovePriorToCharacter - This will remove all characters prior to the input character. Accepts strings., String.SpecifyDecimalPlaces - This node will take your inout string and number of decimal places to create a new simplified output., String.ToSentenceCase - This node will convert a single string of text to have capitalized sentences. If you need to use this over a list, use List.Map., String.ToTitle - Converts the given string to Title Case., StructuralBeamSystem.Members - Thist will collect the members of the ebeam system., TextElement.ToLower - This node converts a Revit text elemnt to upper directly., TextElement.ToTitle - This node converts a Revit text elemnt to upper directly., TextElement.ToUpper - This node converts a Revit text elemnt to upper directly., UI.UserMessage - This will display a user message once. Until it is either toggled or changed., Unicode.LRE - Start of left-to-right embedding Unicode Character, Unicode.LRM - Left-to-right mark unicode character, Unicode.RLE - Start of right-to-left embedding Unicode Character, Unicode.RLM - Right-to-left mark Unicode character, Unicode.ZWJ - Zero width joiner Unicode Character, Unicode.ZWNJ - Zero width non-joiner Unicode Character, View.ConvertToIndependent - This will convert input dependent views to independent. Thanks to TheRevitKid for the idea!, ViewFamilyType.ByName - Select a view family type given it's name., Viewport.ViewName - This node gets the view name of viewports. There is an issue when \"title on sheet\" is used, so this fixes that., Wall.NorthSouthEastWest - This node determines which direction a wall is facing and groups them by the direction or direction they are closest to., Workset.Create - Creates a workset or worksets from input names.",
            "engine_metadata": "",
            "engine_version": "1.2.0.2690",
            "created": "2016-10-03T16:07:44.678Z",
            "full_dependency_versions": [ "2016.10.3" ],
            "full_dependency_ids": [
              {
                "_id": "54e7add1dcee4dfd26000101",
                "name": "Rhythm"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2016.10.3"
          },
          {
            "_id": "57f699e3d3d589541a000037",
            "contains_binaries": true,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-prod/3ad6aa9f-73c0-49d7-b367-3c35bef1cd06gregPkg151.zip",
            "contents": "All Framing at Reference Level - Collects all of the structural framing at a specific reference level, All Pipes at Reference Level - This will collect all pipes by their reference level., All Upper - This converts the ase of selected items to UPPER. Inputs require booleans to enable for category., Arrowhead Assigner - This node assings the arrowhead type for all text and keynote tags. There is an input for ones you want to exclude., Ayuda.IsArchi-LabInstalled - This node determines if Archi-Lab is installed. Useful with a toggle., Ayuda.IsClockworkInstalled - This node determines if clockwork is installed. Useful with a toggle., Ayuda.IsSteamNodesInstalled - This node determines if steamnodes is installed. Useful with a toggle.;, Ayuda.ThisOrThat - This node is a toggle between two inputs., CableTray.Space - This node will determine the space a cable tray's center falls within., Collector.DuctsBySystem - This collects all ducts in the project and organizes them by System Classification, Collector.KeynoteTags - This collects all of the keynote tags in the model. Similar to other nodes, but this doesn't use python., Collector.LabelTypes - This node collects all of the label types for the active family document., Collector.PipesBySystem - This collects all pipes in the project and organizes them by System Classification, Collector.TagTypes - This node collects the tag types in the model., Collector.Viewports - This collects all of the viewports in the model and outputs the name, title on sheet, scale and viewport type., CurtainGrid.AllSegmentCurves - This will return the vertical and horizontal curtain grid segments regardless if hidden or not. Groups by U and V., CurtainGrid.ByElement - Gets the curtain grids by the host element. Seperates into U and V, CurtainGrid.FullCurve - Returns the curves of the input curtain grids. Groups by U and V., CurtainGrid.RemoveSegment - Removes segments from curtain grids. Can't take lists yet. Use with List.Combine., CurtainGrid.RemoveSegmentsFunction - Function to apply to remove segments node, Curve.FromLine - This will translate a line element to a curve., Dash Remover - This node removes the dash at index 2 if it exists. The reason being, NCS states that no dash shall be used., Dimension.IsOverridden - This will report if a dimension has been overridden. , Dimension.LeaderEndPosition - This will return the leader end postion as a point., Dimension.MultiSegmentMembers - This will output all of the members of a multi-segment dimension., Dimension.NumberOfSegments - This will return the number of segments a dimension has. If it is a single dimension, this will return zero., Dimension.Origin - This will return the dimension origin as a point., Dimension.SetAboveValue - This will set the above value of a dimension., Dimension.SetBelowValue - This will set the below value of a dimension., Dimension.TextPosition - This will return the postition of the text as a point., Dimension.ValueString - The displayed value shown for the dimension segment. , Element.AreaLocation - This node will determine what area (area plans) an element is located within. Made possible thanks to clockwork. :), Element.AreaWithTotal - This will get the area of an element if the parameter exists. Will total as well if needed., Element.Category - This node will get the input element(s)' categories, Element.GetJoinedElements - This will obtain the elements joined to the input element., Element.GetLevelNameAsString - This retrieves the level name of the input elements as a string. This is in response to a known issue with the get value node., Element.GetMultipleParameterValuesByName - Get the value of multiple parameters from elements. (Seperate parameters with comma), Element.GetParameterValueByName(CaSe iNSeNSiTive) - Get the value of one of the element's parameters. (CaSe iNSeNSiTiVe), Element.OverrideCutColorInView - Overrides the elements cut color in the view., Element.OverrideCutLineweight - Overrides the cut lines of the elements, Element.OverrideProjectionFillColor - This node overrides the fill color of the element in view., Element.OverrideProjectionLineColor - This node overrides the projection line color with the input color value. Useful for annotation., Element.OverrideProjectionLineweight - Overrides the line thickness of projection lines, Element.ParentFamily - This node retrieces the parent family name for each input element., Element.Room - This node takes the input of all elements of category and reports back the associated room per element. Currently tested with casework, furniture and plumbing fixtures., Element.SetMultipleParametersByName - Set multiple (comma seperated) parameters by name., Element.SetParameterByName(CaSe iNSeNSiTiVe) - Set one of the element's parameters. (CaSe iNSeNSiTiVe), Element.SetPinnedStatus - Will set the element to either pinned or not pinned. True is pinned, false is unpinned. For multiple elements use List.Map, Element.Space - This will retrieve the space in which an element is contained. (if available), Element.Type - This retrieves the element type of the given elements. (if available) Similar to others available but no python here., Geometry.SpaceEvenlyWithBuffer - This will take input geometry and space it out in the Y direction with a buffer between, Geometry.ToRevitType - This will convert designscript geometyr into Revit.DB types. Currently tested with curves, nurbs curves and solids., GetParameterValueByName(TypeOrInstance) - Gets a parameter value by name regardless of type or instance., GetParameterValueByNameAsString - Returns paramter value as string. Same effect as lunchbox node, without python., Gmail.ComposeEmail - This node will compose a new email. Useful for notifications regarding a graph concluding. Uses pythons built-in SMTP Library., Gmail.ComposeEmailDetailed - This will compose a detailed email with subject and message., Group.UngroupElements - This will ungroup the input groups and output their elements. Use with care!, Inspiration.BuffettNode - This is a result of \"what if?\" thinking. The output is a random Warren Buffett quote from brainyquotes.com, Inspiration.CarreyNode - This is a result of \"what if?\" thinking. The output is a random Jim Carrey quote from brainyquotes.com, Inspiration.CashNode - This is a result of \"what if?\" thinking. The output is a random Johnny Cash quote from brainyquotes.com, Inspiration.MarleyNode - This is a result of \"what if?\" thinking. The output is a random Bob Marley quote from brainyquotes.com, Inspiration.SearchQuoteNode - This is a result of \"what if?\" thinking. The output is a random quote based on the search criteria from brainyquotes.com. (As long as it is on the site), Inspiration.TeresaNode - This is a result of \"what if?\" thinking. The output is a random Mother Teresa quote from brainyquotes.com, Isolated Pick Model Elements - Pick model elements in desired order of a desired category., Level Element Collector - This collects data for all of the Level elements in the model. Similar to the node on Lunchbox, but this one uses all O.O.B. nodes., List.AllIndicesOf - Given an item, returns the zero-based indices of all its occurrences in the list. If the item cannot be found, an empty list is returned. , List.ArchitecturalAlphabeticalSequence - This creates a list of characters. What's different is we typically exclude I's and O's from our characters so there is a toggle for this., List.Contains - Determines if the given list contains the item or items., List.GetItemIndices - This node searches the input list for the given string or number., List.MergeSublists - This will merge all sublists with or without a character between the strings., List.ReturnItemsPreviousToIndex - This will take an index (or indices) and return the items previous to it. Useful for sums of all items previous., Mullion.SortByDirection - This will sort mullions of a host curtain wall by direction they are facing., OS.CurrentUser - This node retrieves the current user logged in., OS.CurrentUserAppData - This retrieves the current user's appdata location, Output.Clean - This will return a single value or list from one input., Parametric Graphic Scale - This node automates the graphic scale assigned per viewport. The input required is all instances of viewport category. It also requires shared parameters. Visit sixtysecondrevit.blogspot.com for details., Pick Model Elements - This node offers a pick method for selecting elements in Revit., Railing.BalusterCount - This node will count the amout of balusters in a rail element. Only works for single element for now., RemoveListFromList - This node essentially \"subtracts\" the contents of List B from List A to produce a new list with the unique items., Rhythm.3DRoomTags - This node will generate 3D room tags for all rooms in the model. (RFA in extra folder in Dynamo download), Rhythm.3DSpaceTags - This will generate 3D space tags for all spaces in the project., Rhythm.BackupRFADeleter - This node will scan the contents of a driectory and delete backup RFA files that appear with a four digit backup number before the file extension. (eg. Family1.0001.rfa) This is deleting files so please use with caution!, Rhythm.Detail Number by View Name  - Automatically numbers your detail number based on the first two characters of your view name. i.e. A4/... (Requires slash to be present), Rhythm.OverrideInteriorCrop - This node will override the lineweight of the crop region on interior elevations. This node would not be possible without the power of the Dynamo community. Specifically Danny Jones with Clark Patterson Lee, Rhythm.PercentGlazingByOrientation - This node was show at RTCNA2015 to optimize your workflows. It reports the window to wall % by direction the wall faces., Rhythm.RenumberGridsByCurve - This node will renumber grids in order of curve drawn through them. Select either letters or numbers. (Alphanumeric coming soon), Rhythm.RenumberRoomsByCurve - This node will renumber rooms along a curve path. This was developed through the guidance of WIlliam Wong at case. Considering WeWork bought Case I wanted this node to live somewhere., Rhythm.Toggle - Toggle that offers two outputs. Created for Dynamo 0.8.1 because of changes to the \"IF\" node, Rhythm.WhatTheNode - This node will let you search dynamonodes.com for the most likely package a node is from. Helps fix \"red\" nodes when users do not have package installed., Room Element Collector - THis will collect data regarding rooms in the active model. Similar to Lunchbox node, but this one does not use python., RoomTag.Host - Retrieves the assoicated room with a room tag., Select Elements By Curve - This will select model elements in order that a curve is drawn through them., SetParameterByName(TypeOrInstance) - Set one of the element's parameters regardless of parameter type or instance., Space.IsPointInside - This will test if a point falls within a space., Space.SetSpaceType - This node will set the space type for the input space., Space.GetSpaceType - This will retrieve the space type of the space as a string., SpaceTag.Host - This obtains the MEP space associated with a given MEP space tag., SpaceType.All - This node will output ALL space types., SpaceType.ByName - This will output a MEP space type based on name search., SquareFeetDropper - This node drops square feet from the pulled area, String.CharacterAtIndex - Get's the character at a given index, String.ElementsModified - THis custom node reports the amount of elements in a list as a phrase., String.FlipReverse - This node flips the string and reverses it. (April Fools '15) Works for 0.8.0 only, added unicode support, String.IndicesOfCharacter - This node gets all the indices of a given character, String.IsUnicode - Determines if input string is a unicode character., String.RemoveAfterGivenCharacter - This will move all characters at and after the given character., String.RemovePriorToCharacter - This will remove all characters prior to the input character. Accepts strings., String.SpecifyDecimalPlaces - This node will take your inout string and number of decimal places to create a new simplified output., String.ToSentenceCase - This node will convert a single string of text to have capitalized sentences. If you need to use this over a list, use List.Map., String.ToTitle - Converts the given string to Title Case., StructuralBeamSystem.Members - Thist will collect the members of the ebeam system., TextElement.ToLower - This node converts a Revit text elemnt to upper directly., TextElement.ToTitle - This node converts a Revit text elemnt to upper directly., TextElement.ToUpper - This node converts a Revit text elemnt to upper directly., UI.UserMessage - This will display a user message once. Until it is either toggled or changed., Unicode.LRE - Start of left-to-right embedding Unicode Character, Unicode.LRM - Left-to-right mark unicode character, Unicode.RLE - Start of right-to-left embedding Unicode Character, Unicode.RLM - Right-to-left mark Unicode character, Unicode.ZWJ - Zero width joiner Unicode Character, Unicode.ZWNJ - Zero width non-joiner Unicode Character, View.ConvertToIndependent - This will convert input dependent views to independent. Thanks to TheRevitKid for the idea!, ViewFamilyType.ByName - Select a view family type given it's name., Viewport.ViewName - This node gets the view name of viewports. There is an issue when \"title on sheet\" is used, so this fixes that., Wall.NorthSouthEastWest - This node determines which direction a wall is facing and groups them by the direction or direction they are closest to., Workset.Create - Creates a workset or worksets from input names.",
            "engine_metadata": "",
            "engine_version": "1.2.0.2690",
            "created": "2016-10-06T18:37:23.985Z",
            "full_dependency_versions": [ "2016.10.6" ],
            "full_dependency_ids": [
              {
                "_id": "54e7add1dcee4dfd26000101",
                "name": "Rhythm"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2016.10.6"
          },
          {
            "_id": "580a812ff50b17c72000004d",
            "contains_binaries": true,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-prod/d9f32203-38c0-4e9d-9178-1e78c5281ca5gregPkg577.zip",
            "contents": "All Framing at Reference Level - Collects all of the structural framing at a specific reference level, All Pipes at Reference Level - This will collect all pipes by their reference level., All Upper - This converts the ase of selected items to UPPER. Inputs require booleans to enable for category., Arrowhead Assigner - This node assings the arrowhead type for all text and keynote tags. There is an input for ones you want to exclude., Ayuda.IsArchi-LabInstalled - This node determines if Archi-Lab is installed. Useful with a toggle., Ayuda.IsClockworkInstalled - This node determines if clockwork is installed. Useful with a toggle., Ayuda.IsSteamNodesInstalled - This node determines if steamnodes is installed. Useful with a toggle.;, Ayuda.ThisOrThat - This node is a toggle between two inputs., CableTray.Space - This node will determine the space a cable tray's center falls within., Collector.DuctsBySystem - This collects all ducts in the project and organizes them by System Classification, Collector.KeynoteTags - This collects all of the keynote tags in the model. Similar to other nodes, but this doesn't use python., Collector.LabelTypes - This node collects all of the label types for the active family document., Collector.PipesBySystem - This collects all pipes in the project and organizes them by System Classification, Collector.TagTypes - This node collects the tag types in the model., Collector.Viewports - This collects all of the viewports in the model and outputs the name, title on sheet, scale and viewport type., CurtainGrid.AllSegmentCurves - This will return the vertical and horizontal curtain grid segments regardless if hidden or not. Groups by U and V., CurtainGrid.ByElement - Gets the curtain grids by the host element. Seperates into U and V, CurtainGrid.FullCurve - Returns the curves of the input curtain grids. Groups by U and V., CurtainGrid.RemoveSegment - Removes segments from curtain grids. Can't take lists yet. Use with List.Combine., CurtainGrid.RemoveSegmentsFunction - Function to apply to remove segments node, Curve.FromLine - This will translate a line element to a curve., Dash Remover - This node removes the dash at index 2 if it exists. The reason being, NCS states that no dash shall be used., Dimension.IsOverridden - This will report if a dimension has been overridden. , Dimension.LeaderEndPosition - This will return the leader end postion as a point., Dimension.MultiSegmentMembers - This will output all of the members of a multi-segment dimension., Dimension.NumberOfSegments - This will return the number of segments a dimension has. If it is a single dimension, this will return zero., Dimension.Origin - This will return the dimension origin as a point., Dimension.SetAboveValue - This will set the above value of a dimension., Dimension.SetBelowValue - This will set the below value of a dimension., Dimension.TextPosition - This will return the postition of the text as a point., Dimension.ValueString - The displayed value shown for the dimension segment. , Element.AreaLocation - This node will determine what area (area plans) an element is located within. Made possible thanks to clockwork. :), Element.AreaWithTotal - This will get the area of an element if the parameter exists. Will total as well if needed., Element.Category - This node will get the input element(s)' categories, Element.GetJoinedElements - This will obtain the elements joined to the input element., Element.GetLevelNameAsString - This retrieves the level name of the input elements as a string. This is in response to a known issue with the get value node., Element.GetMultipleParameterValuesByName - Get the value of multiple parameters from elements. (Seperate parameters with comma), Element.GetParameterValueByName(CaSe iNSeNSiTive) - Get the value of one of the element's parameters. (CaSe iNSeNSiTiVe), Element.OverrideCutColorInView - Overrides the elements cut color in the view., Element.OverrideCutLineweight - Overrides the cut lines of the elements, Element.OverrideProjectionFillColor - This node overrides the fill color of the element in view., Element.OverrideProjectionLineColor - This node overrides the projection line color with the input color value. Useful for annotation., Element.OverrideProjectionLineweight - Overrides the line thickness of projection lines, Element.ParentFamily - This node retrieces the parent family name for each input element., Element.Room - This node takes the input of all elements of category and reports back the associated room per element. Currently tested with casework, furniture and plumbing fixtures., Element.SetMultipleParametersByName - Set multiple (comma seperated) parameters by name., Element.SetParameterByName(CaSe iNSeNSiTiVe) - Set one of the element's parameters. (CaSe iNSeNSiTiVe), Element.SetPinnedStatus - Will set the element to either pinned or not pinned. True is pinned, false is unpinned. For multiple elements use List.Map, Element.Space - This will retrieve the space in which an element is contained. (if available), Element.Type - This retrieves the element type of the given elements. (if available) Similar to others available but no python here., Geometry.SpaceEvenlyWithBuffer - This will take input geometry and space it out in the Y direction with a buffer between, Geometry.ToRevitType - This will convert designscript geometyr into Revit.DB types. Currently tested with curves, nurbs curves and solids., GetParameterValueByName(TypeOrInstance) - Gets a parameter value by name regardless of type or instance., GetParameterValueByNameAsString - Returns paramter value as string. Same effect as lunchbox node, without python., Gmail.ComposeEmail - This node will compose a new email. Useful for notifications regarding a graph concluding. Uses pythons built-in SMTP Library., Gmail.ComposeEmailDetailed - This will compose a detailed email with subject and message., Group.UngroupElements - This will ungroup the input groups and output their elements. Use with care!, Inspiration.BuffettNode - This is a result of \"what if?\" thinking. The output is a random Warren Buffett quote from brainyquotes.com, Inspiration.CarreyNode - This is a result of \"what if?\" thinking. The output is a random Jim Carrey quote from brainyquotes.com, Inspiration.CashNode - This is a result of \"what if?\" thinking. The output is a random Johnny Cash quote from brainyquotes.com, Inspiration.MarleyNode - This is a result of \"what if?\" thinking. The output is a random Bob Marley quote from brainyquotes.com, Inspiration.SearchQuoteNode - This is a result of \"what if?\" thinking. The output is a random quote based on the search criteria from brainyquotes.com. (As long as it is on the site), Inspiration.TeresaNode - This is a result of \"what if?\" thinking. The output is a random Mother Teresa quote from brainyquotes.com, Isolated Pick Model Elements - Pick model elements in desired order of a desired category., Level Element Collector - This collects data for all of the Level elements in the model. Similar to the node on Lunchbox, but this one uses all O.O.B. nodes., List.AllIndicesOf - Given an item, returns the zero-based indices of all its occurrences in the list. If the item cannot be found, an empty list is returned. , List.ArchitecturalAlphabeticalSequence - This creates a list of characters. What's different is we typically exclude I's and O's from our characters so there is a toggle for this., List.Contains - Determines if the given list contains the item or items., List.GetItemIndices - This node searches the input list for the given string or number., List.MergeSublists - This will merge all sublists with or without a character between the strings., List.ReturnItemsPreviousToIndex - This will take an index (or indices) and return the items previous to it. Useful for sums of all items previous., Mullion.SortByDirection - This will sort mullions of a host curtain wall by direction they are facing., OS.CurrentUser - This node retrieves the current user logged in., OS.CurrentUserAppData - This retrieves the current user's appdata location, Output.Clean - This will return a single value or list from one input., Parametric Graphic Scale - This node automates the graphic scale assigned per viewport. The input required is all instances of viewport category. It also requires shared parameters. Visit sixtysecondrevit.blogspot.com for details., Pick Model Elements - This node offers a pick method for selecting elements in Revit., Railing.BalusterCount - This node will count the amout of balusters in a rail element. Only works for single element for now., RemoveListFromList - This node essentially \"subtracts\" the contents of List B from List A to produce a new list with the unique items., Rhythm.3DRoomTags - This node will generate 3D room tags for all rooms in the model. (RFA in extra folder in Dynamo download), Rhythm.3DSpaceTags - This will generate 3D space tags for all spaces in the project., Rhythm.BackupRFADeleter - This node will scan the contents of a driectory and delete backup RFA files that appear with a four digit backup number before the file extension. (eg. Family1.0001.rfa) This is deleting files so please use with caution!, Rhythm.Detail Number by View Name  - Automatically numbers your detail number based on the first two characters of your view name. i.e. A4/... (Requires slash to be present), Rhythm.OverrideInteriorCrop - This node will override the lineweight of the crop region on interior elevations. This node would not be possible without the power of the Dynamo community. Specifically Danny Jones with Clark Patterson Lee, Rhythm.PercentGlazingByOrientation - This node was show at RTCNA2015 to optimize your workflows. It reports the window to wall % by direction the wall faces., Rhythm.RenumberGridsByCurve - This node will renumber grids in order of curve drawn through them. Select either letters or numbers. (Alphanumeric coming soon), Rhythm.RenumberRoomsByCurve - This node will renumber rooms along a curve path. This was developed through the guidance of WIlliam Wong at case. Considering WeWork bought Case I wanted this node to live somewhere., Rhythm.Toggle - Toggle that offers two outputs. Created for Dynamo 0.8.1 because of changes to the \"IF\" node, Rhythm.WhatTheNode - This node will let you search dynamonodes.com for the most likely package a node is from. Helps fix \"red\" nodes when users do not have package installed., Room Element Collector - THis will collect data regarding rooms in the active model. Similar to Lunchbox node, but this one does not use python., RoomTag.Host - Retrieves the assoicated room with a room tag., Select Elements By Curve - This will select model elements in order that a curve is drawn through them., SetParameterByName(TypeOrInstance) - Set one of the element's parameters regardless of parameter type or instance., Space.IsPointInside - This will test if a point falls within a space., Space.SetSpaceType - This node will set the space type for the input space., Space.GetSpaceType - This will retrieve the space type of the space as a string., SpaceTag.Host - This obtains the MEP space associated with a given MEP space tag., SpaceType.All - This node will output ALL space types., SpaceType.ByName - This will output a MEP space type based on name search., SquareFeetDropper - This node drops square feet from the pulled area, String.CharacterAtIndex - Get's the character at a given index, String.ElementsModified - THis custom node reports the amount of elements in a list as a phrase., String.FlipReverse - This node flips the string and reverses it. (April Fools '15) Works for 0.8.0 only, added unicode support, String.IndicesOfCharacter - This node gets all the indices of a given character, String.IsUnicode - Determines if input string is a unicode character., String.RemoveAfterGivenCharacter - This will move all characters at and after the given character., String.RemovePriorToCharacter - This will remove all characters prior to the input character. Accepts strings., String.SpecifyDecimalPlaces - This node will take your inout string and number of decimal places to create a new simplified output., String.ToSentenceCase - This node will convert a single string of text to have capitalized sentences. If you need to use this over a list, use List.Map., String.ToTitle - Converts the given string to Title Case., StructuralBeamSystem.Members - Thist will collect the members of the ebeam system., TextElement.ToLower - This node converts a Revit text elemnt to upper directly., TextElement.ToTitle - This node converts a Revit text elemnt to upper directly., TextElement.ToUpper - This node converts a Revit text elemnt to upper directly., UI.UserMessage - This will display a user message once. Until it is either toggled or changed., Unicode.LRE - Start of left-to-right embedding Unicode Character, Unicode.LRM - Left-to-right mark unicode character, Unicode.RLE - Start of right-to-left embedding Unicode Character, Unicode.RLM - Right-to-left mark Unicode character, Unicode.ZWJ - Zero width joiner Unicode Character, Unicode.ZWNJ - Zero width non-joiner Unicode Character, View.ConvertToIndependent - This will convert input dependent views to independent. Thanks to TheRevitKid for the idea!, ViewFamilyType.ByName - Select a view family type given it's name., Viewport.ViewName - This node gets the view name of viewports. There is an issue when \"title on sheet\" is used, so this fixes that., Wall.NorthSouthEastWest - This node determines which direction a wall is facing and groups them by the direction or direction they are closest to., Workset.Create - Creates a workset or worksets from input names., Collector.Areas - This is an area collector element that utilizes mostly OOTB nodes.",
            "engine_metadata": "",
            "engine_version": "1.2.0.2690",
            "created": "2016-10-21T20:57:19.070Z",
            "full_dependency_versions": [ "2016.10.21" ],
            "full_dependency_ids": [
              {
                "_id": "54e7add1dcee4dfd26000101",
                "name": "Rhythm"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2016.10.21"
          },
          {
            "_id": "580e1509f50b17c72000005c",
            "contains_binaries": true,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-prod/9d45dc71-ee96-4c04-842e-0e2993cb5eb9gregPkg556.zip",
            "contents": "All Framing at Reference Level - Collects all of the structural framing at a specific reference level, All Pipes at Reference Level - This will collect all pipes by their reference level., All Upper - This converts the ase of selected items to UPPER. Inputs require booleans to enable for category., Arrowhead Assigner - This node assings the arrowhead type for all text and keynote tags. There is an input for ones you want to exclude., Ayuda.IsArchi-LabInstalled - This node determines if Archi-Lab is installed. Useful with a toggle., Ayuda.IsClockworkInstalled - This node determines if clockwork is installed. Useful with a toggle., Ayuda.IsSteamNodesInstalled - This node determines if steamnodes is installed. Useful with a toggle.;, Ayuda.ThisOrThat - This node is a toggle between two inputs., CableTray.Space - This node will determine the space a cable tray's center falls within., Collector.Areas - This is an area collector element that utilizes mostly OOTB nodes., Collector.DuctsBySystem - This collects all ducts in the project and organizes them by System Classification, Collector.KeynoteTags - This collects all of the keynote tags in the model. Similar to other nodes, but this doesn't use python., Collector.LabelTypes - This node collects all of the label types for the active family document., Collector.PipesBySystem - This collects all pipes in the project and organizes them by System Classification, Collector.TagTypes - This node collects the tag types in the model., Collector.Viewports - This collects all of the viewports in the model and outputs the name, title on sheet, scale and viewport type., CurtainGrid.AllSegmentCurves - This will return the vertical and horizontal curtain grid segments regardless if hidden or not. Groups by U and V., CurtainGrid.ByElement - Gets the curtain grids by the host element. Seperates into U and V, CurtainGrid.FullCurve - Returns the curves of the input curtain grids. Groups by U and V., CurtainGrid.RemoveSegment - Removes segments from curtain grids. Can't take lists yet. Use with List.Combine., CurtainGrid.RemoveSegmentsFunction - Function to apply to remove segments node, Curve.FromLine - This will translate a line element to a curve., Dash Remover - This node removes the dash at index 2 if it exists. The reason being, NCS states that no dash shall be used., Dimension.IsOverridden - This will report if a dimension has been overridden. , Dimension.LeaderEndPosition - This will return the leader end postion as a point., Dimension.MultiSegmentMembers - This will output all of the members of a multi-segment dimension., Dimension.NumberOfSegments - This will return the number of segments a dimension has. If it is a single dimension, this will return zero., Dimension.Origin - This will return the dimension origin as a point., Dimension.SetAboveValue - This will set the above value of a dimension., Dimension.SetBelowValue - This will set the below value of a dimension., Dimension.TextPosition - This will return the postition of the text as a point., Dimension.ValueString - The displayed value shown for the dimension segment. , Element.AreaLocation - This node will determine what area (area plans) an element is located within. Made possible thanks to clockwork. :), Element.AreaWithTotal - This will get the area of an element if the parameter exists. Will total as well if needed., Element.Category - This node will get the input element(s)' categories, Element.GetJoinedElements - This will obtain the elements joined to the input element., Element.GetLevelNameAsString - This retrieves the level name of the input elements as a string. This is in response to a known issue with the get value node., Element.GetMultipleParameterValuesByName - Get the value of multiple parameters from elements. (Seperate parameters with comma), Element.GetParameterValueByName(CaSe iNSeNSiTive) - Get the value of one of the element's parameters. (CaSe iNSeNSiTiVe), Element.OverrideCutColorInView - Overrides the elements cut color in the view., Element.OverrideCutLineweight - Overrides the cut lines of the elements, Element.OverrideProjectionFillColor - This node overrides the fill color of the element in view., Element.OverrideProjectionLineColor - This node overrides the projection line color with the input color value. Useful for annotation., Element.OverrideProjectionLineweight - Overrides the line thickness of projection lines, Element.ParentFamily - This node retrieces the parent family name for each input element., Element.Room - This node takes the input of all elements of category and reports back the associated room per element. Currently tested with casework, furniture and plumbing fixtures., Element.SetMultipleParametersByName - Set multiple (comma seperated) parameters by name., Element.SetParameterByName(CaSe iNSeNSiTiVe) - Set one of the element's parameters. (CaSe iNSeNSiTiVe), Element.SetPinnedStatus - Will set the element to either pinned or not pinned. True is pinned, false is unpinned. For multiple elements use List.Map, Element.Space - This will retrieve the space in which an element is contained. (if available), Element.Type - This retrieves the element type of the given elements. (if available) Similar to others available but no python here., Geometry.SpaceEvenlyWithBuffer - This will take input geometry and space it out in the Y direction with a buffer between, Geometry.ToRevitType - This will convert designscript geometyr into Revit.DB types. Currently tested with curves, nurbs curves and solids., GetParameterValueByName(TypeOrInstance) - Gets a parameter value by name regardless of type or instance., GetParameterValueByNameAsString - Returns paramter value as string. Same effect as lunchbox node, without python., Gmail.ComposeEmail - This node will compose a new email. Useful for notifications regarding a graph concluding. Uses pythons built-in SMTP Library., Gmail.ComposeEmailDetailed - This will compose a detailed email with subject and message., Group.UngroupElements - This will ungroup the input groups and output their elements. Use with care!, Inspiration.BuffettNode - This is a result of \"what if?\" thinking. The output is a random Warren Buffett quote from brainyquotes.com, Inspiration.CarreyNode - This is a result of \"what if?\" thinking. The output is a random Jim Carrey quote from brainyquotes.com, Inspiration.CashNode - This is a result of \"what if?\" thinking. The output is a random Johnny Cash quote from brainyquotes.com, Inspiration.MarleyNode - This is a result of \"what if?\" thinking. The output is a random Bob Marley quote from brainyquotes.com, Inspiration.SearchQuoteNode - This is a result of \"what if?\" thinking. The output is a random quote based on the search criteria from brainyquotes.com. (As long as it is on the site), Inspiration.TeresaNode - This is a result of \"what if?\" thinking. The output is a random Mother Teresa quote from brainyquotes.com, Isolated Pick Model Elements - Pick model elements in desired order of a desired category., Level Element Collector - This collects data for all of the Level elements in the model. Similar to the node on Lunchbox, but this one uses all O.O.B. nodes., List.AllIndicesOf - Given an item, returns the zero-based indices of all its occurrences in the list. If the item cannot be found, an empty list is returned. , List.ArchitecturalAlphabeticalSequence - This creates a list of characters. What's different is we typically exclude I's and O's from our characters so there is a toggle for this., List.Contains - Determines if the given list contains the item or items., List.GetItemIndices - This node searches the input list for the given string or number., List.MergeSublists - This will merge all sublists with or without a character between the strings., List.ReturnItemsPreviousToIndex - This will take an index (or indices) and return the items previous to it. Useful for sums of all items previous., Mullion.SortByDirection - This will sort mullions of a host curtain wall by direction they are facing., OS.CurrentUser - This node retrieves the current user logged in., OS.CurrentUserAppData - This retrieves the current user's appdata location, Output.Clean - This will return a single value or list from one input., Parametric Graphic Scale - This node automates the graphic scale assigned per viewport. The input required is all instances of viewport category. It also requires shared parameters. Visit sixtysecondrevit.blogspot.com for details., Pick Model Elements - This node offers a pick method for selecting elements in Revit., Railing.BalusterCount - This node will count the amout of balusters in a rail element. Only works for single element for now., RemoveListFromList - This node essentially \"subtracts\" the contents of List B from List A to produce a new list with the unique items., Rhythm.3DRoomTags - This node will generate 3D room tags for all rooms in the model. (RFA in extra folder in Dynamo download), Rhythm.3DSpaceTags - This will generate 3D space tags for all spaces in the project., Rhythm.BackupRFADeleter - This node will scan the contents of a driectory and delete backup RFA files that appear with a four digit backup number before the file extension. (eg. Family1.0001.rfa) This is deleting files so please use with caution!, Rhythm.Detail Number by View Name  - Automatically numbers your detail number based on the first two characters of your view name. i.e. A4/... (Requires slash to be present), Rhythm.OverrideInteriorCrop - This node will override the lineweight of the crop region on interior elevations. This node would not be possible without the power of the Dynamo community. Specifically Danny Jones with Clark Patterson Lee, Rhythm.PercentGlazingByOrientation - This node was show at RTCNA2015 to optimize your workflows. It reports the window to wall % by direction the wall faces., Rhythm.RenumberGridsByCurve - This node will renumber grids in order of curve drawn through them. Select either letters or numbers. (Alphanumeric coming soon), Rhythm.RenumberRoomsByCurve - This node will renumber rooms along a curve path. This was developed through the guidance of WIlliam Wong at case. Considering WeWork bought Case I wanted this node to live somewhere., Rhythm.Toggle - Toggle that offers two outputs. Created for Dynamo 0.8.1 because of changes to the \"IF\" node, Rhythm.WhatTheNode - This node will let you search dynamonodes.com for the most likely package a node is from. Helps fix \"red\" nodes when users do not have package installed., Room Element Collector - THis will collect data regarding rooms in the active model. Similar to Lunchbox node, but this one does not use python., RoomTag.Host - Retrieves the assoicated room with a room tag., Select Elements By Curve - This will select model elements in order that a curve is drawn through them., SetParameterByName(TypeOrInstance) - Set one of the element's parameters regardless of parameter type or instance., Space.IsPointInside - This will test if a point falls within a space., Space.SetSpaceType - This node will set the space type for the input space., Space.GetSpaceType - This will retrieve the space type of the space as a string., SpaceTag.Host - This obtains the MEP space associated with a given MEP space tag., SpaceType.All - This node will output ALL space types., SpaceType.ByName - This will output a MEP space type based on name search., SquareFeetDropper - This node drops square feet from the pulled area, String.CharacterAtIndex - Get's the character at a given index, String.ElementsModified - THis custom node reports the amount of elements in a list as a phrase., String.FlipReverse - This node flips the string and reverses it. (April Fools '15) Works for 0.8.0 only, added unicode support, String.IndicesOfCharacter - This node gets all the indices of a given character, String.IsUnicode - Determines if input string is a unicode character., String.RemoveAfterGivenCharacter - This will move all characters at and after the given character., String.RemovePriorToCharacter - This will remove all characters prior to the input character. Accepts strings., String.SpecifyDecimalPlaces - This node will take your inout string and number of decimal places to create a new simplified output., String.ToSentenceCase - This node will convert a single string of text to have capitalized sentences. If you need to use this over a list, use List.Map., String.ToTitle - Converts the given string to Title Case., StructuralBeamSystem.Members - Thist will collect the members of the ebeam system., TextElement.ToLower - This node converts a Revit text elemnt to upper directly., TextElement.ToTitle - This node converts a Revit text elemnt to upper directly., TextElement.ToUpper - This node converts a Revit text elemnt to upper directly., UI.UserMessage - This will display a user message once. Until it is either toggled or changed., Unicode.LRE - Start of left-to-right embedding Unicode Character, Unicode.LRM - Left-to-right mark unicode character, Unicode.RLE - Start of right-to-left embedding Unicode Character, Unicode.RLM - Right-to-left mark Unicode character, Unicode.ZWJ - Zero width joiner Unicode Character, Unicode.ZWNJ - Zero width non-joiner Unicode Character, View.ConvertToIndependent - This will convert input dependent views to independent. Thanks to TheRevitKid for the idea!, ViewFamilyType.ByName - Select a view family type given it's name., Viewport.ViewName - This node gets the view name of viewports. There is an issue when \"title on sheet\" is used, so this fixes that., Wall.NorthSouthEastWest - This node determines which direction a wall is facing and groups them by the direction or direction they are closest to., Workset.Create - Creates a workset or worksets from input names.",
            "engine_metadata": "",
            "engine_version": "1.2.0.2690",
            "created": "2016-10-24T14:04:57.897Z",
            "full_dependency_versions": [ "2016.10.23" ],
            "full_dependency_ids": [
              {
                "_id": "54e7add1dcee4dfd26000101",
                "name": "Rhythm"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2016.10.23"
          },
          {
            "_id": "580f7d1bf50b17c720000074",
            "contains_binaries": true,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-prod/4e6c90f5-4925-4e89-a085-9de1d9bb7977gregPkg54.zip",
            "contents": "All Framing at Reference Level - Collects all of the structural framing at a specific reference level, All Pipes at Reference Level - This will collect all pipes by their reference level., All Upper - This converts the ase of selected items to UPPER. Inputs require booleans to enable for category., Arrowhead Assigner - This node assings the arrowhead type for all text and keynote tags. There is an input for ones you want to exclude., Ayuda.IsArchi-LabInstalled - This node determines if Archi-Lab is installed. Useful with a toggle., Ayuda.IsClockworkInstalled - This node determines if clockwork is installed. Useful with a toggle., Ayuda.IsSteamNodesInstalled - This node determines if steamnodes is installed. Useful with a toggle.;, Ayuda.ThisOrThat - This node is a toggle between two inputs., CableTray.Space - This node will determine the space a cable tray's center falls within., Collector.Areas - This is an area collector element that utilizes mostly OOTB nodes., Collector.DuctsBySystem - This collects all ducts in the project and organizes them by System Classification, Collector.KeynoteTags - This collects all of the keynote tags in the model. Similar to other nodes, but this doesn't use python., Collector.LabelTypes - This node collects all of the label types for the active family document., Collector.PipesBySystem - This collects all pipes in the project and organizes them by System Classification, Collector.TagTypes - This node collects the tag types in the model., Collector.Viewports - This collects all of the viewports in the model and outputs the name, title on sheet, scale and viewport type., CurtainGrid.AllSegmentCurves - This will return the vertical and horizontal curtain grid segments regardless if hidden or not. Groups by U and V., CurtainGrid.ByElement - Gets the curtain grids by the host element. Seperates into U and V, CurtainGrid.FullCurve - Returns the curves of the input curtain grids. Groups by U and V., CurtainGrid.RemoveSegment - Removes segments from curtain grids. Can't take lists yet. Use with List.Combine., CurtainGrid.RemoveSegmentsFunction - Function to apply to remove segments node, Curve.FromLine - This will translate a line element to a curve., Dash Remover - This node removes the dash at index 2 if it exists. The reason being, NCS states that no dash shall be used., Dimension.IsOverridden - This will report if a dimension has been overridden. , Dimension.LeaderEndPosition - This will return the leader end postion as a point., Dimension.MultiSegmentMembers - This will output all of the members of a multi-segment dimension., Dimension.NumberOfSegments - This will return the number of segments a dimension has. If it is a single dimension, this will return zero., Dimension.Origin - This will return the dimension origin as a point., Dimension.SetAboveValue - This will set the above value of a dimension., Dimension.SetBelowValue - This will set the below value of a dimension., Dimension.TextPosition - This will return the postition of the text as a point., Dimension.ValueString - The displayed value shown for the dimension segment. , Element.AreaLocation - This node will determine what area (area plans) an element is located within. Made possible thanks to clockwork. :), Element.AreaWithTotal - This will get the area of an element if the parameter exists. Will total as well if needed., Element.Category - This node will get the input element(s)' categories, Element.GetJoinedElements - This will obtain the elements joined to the input element., Element.GetLevelNameAsString - This retrieves the level name of the input elements as a string. This is in response to a known issue with the get value node., Element.GetMultipleParameterValuesByName - Get the value of multiple parameters from elements. (Seperate parameters with comma), Element.GetParameterValueByName(CaSe iNSeNSiTive) - Get the value of one of the element's parameters. (CaSe iNSeNSiTiVe), Element.OverrideCutColorInView - Overrides the elements cut color in the view., Element.OverrideCutLineweight - Overrides the cut lines of the elements, Element.OverrideProjectionFillColor - This node overrides the fill color of the element in view., Element.OverrideProjectionLineColor - This node overrides the projection line color with the input color value. Useful for annotation., Element.OverrideProjectionLineweight - Overrides the line thickness of projection lines, Element.ParentFamily - This node retrieces the parent family name for each input element., Element.Room - This node takes the input of all elements of category and reports back the associated room per element. Currently tested with casework, furniture and plumbing fixtures., Element.SetMultipleParametersByName - Set multiple (comma seperated) parameters by name., Element.SetParameterByName(CaSe iNSeNSiTiVe) - Set one of the element's parameters. (CaSe iNSeNSiTiVe), Element.SetPinnedStatus - Will set the element to either pinned or not pinned. True is pinned, false is unpinned. For multiple elements use List.Map, Element.Space - This will retrieve the space in which an element is contained. (if available), Element.Type - This retrieves the element type of the given elements. (if available) Similar to others available but no python here., Geometry.SpaceEvenlyWithBuffer - This will take input geometry and space it out in the Y direction with a buffer between, Geometry.ToRevitType - This will convert designscript geometyr into Revit.DB types. Currently tested with curves, nurbs curves and solids., GetParameterValueByName(TypeOrInstance) - Gets a parameter value by name regardless of type or instance., GetParameterValueByNameAsString - Returns paramter value as string. Same effect as lunchbox node, without python., Gmail.ComposeEmail - This node will compose a new email. Useful for notifications regarding a graph concluding. Uses pythons built-in SMTP Library., Gmail.ComposeEmailDetailed - This will compose a detailed email with subject and message., Group.UngroupElements - This will ungroup the input groups and output their elements. Use with care!, Inspiration.BuffettNode - This is a result of \"what if?\" thinking. The output is a random Warren Buffett quote from brainyquotes.com, Inspiration.CarreyNode - This is a result of \"what if?\" thinking. The output is a random Jim Carrey quote from brainyquotes.com, Inspiration.CashNode - This is a result of \"what if?\" thinking. The output is a random Johnny Cash quote from brainyquotes.com, Inspiration.MarleyNode - This is a result of \"what if?\" thinking. The output is a random Bob Marley quote from brainyquotes.com, Inspiration.SearchQuoteNode - This is a result of \"what if?\" thinking. The output is a random quote based on the search criteria from brainyquotes.com. (As long as it is on the site), Inspiration.TeresaNode - This is a result of \"what if?\" thinking. The output is a random Mother Teresa quote from brainyquotes.com, Isolated Pick Model Elements - Pick model elements in desired order of a desired category., Level Element Collector - This collects data for all of the Level elements in the model. Similar to the node on Lunchbox, but this one uses all O.O.B. nodes., List.AllIndicesOf - Given an item, returns the zero-based indices of all its occurrences in the list. If the item cannot be found, an empty list is returned. , List.ArchitecturalAlphabeticalSequence - This creates a list of characters. What's different is we typically exclude I's and O's from our characters so there is a toggle for this., List.Contains - Determines if the given list contains the item or items., List.GetItemIndices - This node searches the input list for the given string or number., List.MergeSublists - This will merge all sublists with or without a character between the strings., List.ReturnItemsPreviousToIndex - This will take an index (or indices) and return the items previous to it. Useful for sums of all items previous., Mullion.SortByDirection - This will sort mullions of a host curtain wall by direction they are facing., OS.CurrentUser - This node retrieves the current user logged in., OS.CurrentUserAppData - This retrieves the current user's appdata location, Output.Clean - This will return a single value or list from one input., Parametric Graphic Scale - This node automates the graphic scale assigned per viewport. The input required is all instances of viewport category. It also requires shared parameters. Visit sixtysecondrevit.blogspot.com for details., Pick Model Elements - This node offers a pick method for selecting elements in Revit., Railing.BalusterCount - This node will count the amout of balusters in a rail element. Only works for single element for now., RemoveListFromList - This node essentially \"subtracts\" the contents of List B from List A to produce a new list with the unique items., Rhythm.3DRoomTags - This node will generate 3D room tags for all rooms in the model. (RFA in extra folder in Dynamo download), Rhythm.3DSpaceTags - This will generate 3D space tags for all spaces in the project., Rhythm.BackupRFADeleter - This node will scan the contents of a driectory and delete backup RFA files that appear with a four digit backup number before the file extension. (eg. Family1.0001.rfa) This is deleting files so please use with caution!, Rhythm.Detail Number by View Name  - Automatically numbers your detail number based on the first two characters of your view name. i.e. A4/... (Requires slash to be present), Rhythm.OverrideInteriorCrop - This node will override the lineweight of the crop region on interior elevations. This node would not be possible without the power of the Dynamo community. Specifically Danny Jones with Clark Patterson Lee, Rhythm.PercentGlazingByOrientation - This node was show at RTCNA2015 to optimize your workflows. It reports the window to wall % by direction the wall faces., Rhythm.RenumberGridsByCurve - This node will renumber grids in order of curve drawn through them. Select either letters or numbers. (Alphanumeric coming soon), Rhythm.RenumberRoomsByCurve - This node will renumber rooms along a curve path. This was developed through the guidance of WIlliam Wong at case. Considering WeWork bought Case I wanted this node to live somewhere., Rhythm.Toggle - Toggle that offers two outputs. Created for Dynamo 0.8.1 because of changes to the \"IF\" node, Rhythm.WhatTheNode - This node will let you search dynamonodes.com for the most likely package a node is from. Helps fix \"red\" nodes when users do not have package installed., Room Element Collector - THis will collect data regarding rooms in the active model. Similar to Lunchbox node, but this one does not use python., RoomTag.Host - Retrieves the assoicated room with a room tag., Select Elements By Curve - This will select model elements in order that a curve is drawn through them., SetParameterByName(TypeOrInstance) - Set one of the element's parameters regardless of parameter type or instance., Space.IsPointInside - This will test if a point falls within a space., Space.SetSpaceType - This node will set the space type for the input space., Space.GetSpaceType - This will retrieve the space type of the space as a string., SpaceTag.Host - This obtains the MEP space associated with a given MEP space tag., SpaceType.All - This node will output ALL space types., SpaceType.ByName - This will output a MEP space type based on name search., SquareFeetDropper - This node drops square feet from the pulled area, String.CharacterAtIndex - Get's the character at a given index, String.ElementsModified - THis custom node reports the amount of elements in a list as a phrase., String.FlipReverse - This node flips the string and reverses it. (April Fools '15) Works for 0.8.0 only, added unicode support, String.IndicesOfCharacter - This node gets all the indices of a given character, String.IsUnicode - Determines if input string is a unicode character., String.RemoveAfterGivenCharacter - This will move all characters at and after the given character., String.RemovePriorToCharacter - This will remove all characters prior to the input character. Accepts strings., String.SpecifyDecimalPlaces - This node will take your inout string and number of decimal places to create a new simplified output., String.ToSentenceCase - This node will convert a single string of text to have capitalized sentences. If you need to use this over a list, use List.Map., String.ToTitle - Converts the given string to Title Case., StructuralBeamSystem.Members - Thist will collect the members of the ebeam system., TextElement.ToLower - This node converts a Revit text elemnt to upper directly., TextElement.ToTitle - This node converts a Revit text elemnt to upper directly., TextElement.ToUpper - This node converts a Revit text elemnt to upper directly., UI.UserMessage - This will display a user message once. Until it is either toggled or changed., Unicode.LRE - Start of left-to-right embedding Unicode Character, Unicode.LRM - Left-to-right mark unicode character, Unicode.RLE - Start of right-to-left embedding Unicode Character, Unicode.RLM - Right-to-left mark Unicode character, Unicode.ZWJ - Zero width joiner Unicode Character, Unicode.ZWNJ - Zero width non-joiner Unicode Character, View.ConvertToIndependent - This will convert input dependent views to independent. Thanks to TheRevitKid for the idea!, ViewFamilyType.ByName - Select a view family type given it's name., Viewport.ViewName - This node gets the view name of viewports. There is an issue when \"title on sheet\" is used, so this fixes that., Wall.NorthSouthEastWest - This node determines which direction a wall is facing and groups them by the direction or direction they are closest to., Workset.Create - Creates a workset or worksets from input names.",
            "engine_metadata": "",
            "engine_version": "1.2.0.2690",
            "created": "2016-10-25T15:41:15.240Z",
            "full_dependency_versions": [ "2016.10.24" ],
            "full_dependency_ids": [
              {
                "_id": "54e7add1dcee4dfd26000101",
                "name": "Rhythm"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2016.10.24"
          },
          {
            "_id": "58174523f50b17c7200000a9",
            "contains_binaries": true,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-prod/160d08c5-c405-4303-b0f8-bf6c925bc79agregPkg89.zip",
            "contents": "All Framing at Reference Level - Collects all of the structural framing at a specific reference level, All Pipes at Reference Level - This will collect all pipes by their reference level., All Upper - This converts the ase of selected items to UPPER. Inputs require booleans to enable for category., Arrowhead Assigner - This node assings the arrowhead type for all text and keynote tags. There is an input for ones you want to exclude., Ayuda.IsArchi-LabInstalled - This node determines if Archi-Lab is installed. Useful with a toggle., Ayuda.IsClockworkInstalled - This node determines if clockwork is installed. Useful with a toggle., Ayuda.IsSteamNodesInstalled - This node determines if steamnodes is installed. Useful with a toggle.;, Ayuda.ThisOrThat - This node is a toggle between two inputs., CableTray.Space - This node will determine the space a cable tray's center falls within., Collector.Areas - This is an area collector element that utilizes mostly OOTB nodes., Collector.DuctsBySystem - This collects all ducts in the project and organizes them by System Classification, Collector.KeynoteTags - This collects all of the keynote tags in the model. Similar to other nodes, but this doesn't use python., Collector.LabelTypes - This node collects all of the label types for the active family document., Collector.PipesBySystem - This collects all pipes in the project and organizes them by System Classification, Collector.TagTypes - This node collects the tag types in the model., Collector.Viewports - This collects all of the viewports in the model and outputs the name, title on sheet, scale and viewport type., CurtainGrid.AllSegmentCurves - This will return the vertical and horizontal curtain grid segments regardless if hidden or not. Groups by U and V., CurtainGrid.ByElement - Gets the curtain grids by the host element. Seperates into U and V, CurtainGrid.FullCurve - Returns the curves of the input curtain grids. Groups by U and V., CurtainGrid.RemoveSegment - Removes segments from curtain grids. Can't take lists yet. Use with List.Combine., CurtainGrid.RemoveSegmentsFunction - Function to apply to remove segments node, Curve.FromLine - This will translate a line element to a curve., Dash Remover - This node removes the dash at index 2 if it exists. The reason being, NCS states that no dash shall be used., Dimension.IsOverridden - This will report if a dimension has been overridden. , Dimension.LeaderEndPosition - This will return the leader end postion as a point., Dimension.MultiSegmentMembers - This will output all of the members of a multi-segment dimension., Dimension.NumberOfSegments - This will return the number of segments a dimension has. If it is a single dimension, this will return zero., Dimension.Origin - This will return the dimension origin as a point., Dimension.SetAboveValue - This will set the above value of a dimension., Dimension.SetBelowValue - This will set the below value of a dimension., Dimension.TextPosition - This will return the postition of the text as a point., Dimension.ValueString - The displayed value shown for the dimension segment. , Element.AreaLocation - This node will determine what area (area plans) an element is located within. Made possible thanks to clockwork. :), Element.AreaWithTotal - This will get the area of an element if the parameter exists. Will total as well if needed., Element.Category - This node will get the input element(s)' categories, Element.GetJoinedElements - This will obtain the elements joined to the input element., Element.GetLevelNameAsString - This retrieves the level name of the input elements as a string. This is in response to a known issue with the get value node., Element.GetMultipleParameterValuesByName - Get the value of multiple parameters from elements. (Seperate parameters with comma), Element.GetParameterValueByName(CaSe iNSeNSiTive) - Get the value of one of the element's parameters. (CaSe iNSeNSiTiVe), Element.OverrideCutColorInView - Overrides the elements cut color in the view., Element.OverrideCutLineweight - Overrides the cut lines of the elements, Element.OverrideProjectionFillColor - This node overrides the fill color of the element in view., Element.OverrideProjectionLineColor - This node overrides the projection line color with the input color value. Useful for annotation., Element.OverrideProjectionLineweight - Overrides the line thickness of projection lines, Element.ParentFamily - This node retrieces the parent family name for each input element., Element.Room - This node takes the input of all elements of category and reports back the associated room per element. Currently tested with casework, furniture and plumbing fixtures., Element.SetMultipleParametersByName - Set multiple (comma seperated) parameters by name., Element.SetParameterByName(CaSe iNSeNSiTiVe) - Set one of the element's parameters. (CaSe iNSeNSiTiVe), Element.SetPinnedStatus - Will set the element to either pinned or not pinned. True is pinned, false is unpinned. For multiple elements use List.Map, Element.Space - This will retrieve the space in which an element is contained. (if available), Element.Type - This retrieves the element type of the given elements. (if available) Similar to others available but no python here., Geometry.SpaceEvenlyWithBuffer - This will take input geometry and space it out in the Y direction with a buffer between, Geometry.ToRevitType - This will convert designscript geometyr into Revit.DB types. Currently tested with curves, nurbs curves and solids., GetParameterValueByName(TypeOrInstance) - Gets a parameter value by name regardless of type or instance., GetParameterValueByNameAsString - Returns paramter value as string. Same effect as lunchbox node, without python., Gmail.ComposeEmail - This node will compose a new email. Useful for notifications regarding a graph concluding. Uses pythons built-in SMTP Library., Gmail.ComposeEmailDetailed - This will compose a detailed email with subject and message., Group.UngroupElements - This will ungroup the input groups and output their elements. Use with care!, Inspiration.BuffettNode - This is a result of \"what if?\" thinking. The output is a random Warren Buffett quote from brainyquotes.com, Inspiration.CarreyNode - This is a result of \"what if?\" thinking. The output is a random Jim Carrey quote from brainyquotes.com, Inspiration.CashNode - This is a result of \"what if?\" thinking. The output is a random Johnny Cash quote from brainyquotes.com, Inspiration.MarleyNode - This is a result of \"what if?\" thinking. The output is a random Bob Marley quote from brainyquotes.com, Inspiration.SearchQuoteNode - This is a result of \"what if?\" thinking. The output is a random quote based on the search criteria from brainyquotes.com. (As long as it is on the site), Inspiration.TeresaNode - This is a result of \"what if?\" thinking. The output is a random Mother Teresa quote from brainyquotes.com, Isolated Pick Model Elements - Pick model elements in desired order of a desired category., Level Element Collector - This collects data for all of the Level elements in the model. Similar to the node on Lunchbox, but this one uses all O.O.B. nodes., List.AllIndicesOf - Given an item, returns the zero-based indices of all its occurrences in the list. If the item cannot be found, an empty list is returned. , List.ArchitecturalAlphabeticalSequence - This creates a list of characters. What's different is we typically exclude I's and O's from our characters so there is a toggle for this., List.Contains - Determines if the given list contains the item or items., List.GetItemIndices - This node searches the input list for the given string or number., List.MergeSublists - This will merge all sublists with or without a character between the strings., List.ReturnItemsPreviousToIndex - This will take an index (or indices) and return the items previous to it. Useful for sums of all items previous., Mullion.SortByDirection - This will sort mullions of a host curtain wall by direction they are facing., OS.CurrentUser - This node retrieves the current user logged in., OS.CurrentUserAppData - This retrieves the current user's appdata location, Output.Clean - This will return a single value or list from one input., Parametric Graphic Scale - This node automates the graphic scale assigned per viewport. The input required is all instances of viewport category. It also requires shared parameters. Visit sixtysecondrevit.blogspot.com for details., Pick Model Elements - This node offers a pick method for selecting elements in Revit., Railing.BalusterCount - This node will count the amout of balusters in a rail element. Only works for single element for now., RemoveListFromList - This node essentially \"subtracts\" the contents of List B from List A to produce a new list with the unique items., Rhythm.3DRoomTags - This node will generate 3D room tags for all rooms in the model. (RFA in extra folder in Dynamo download), Rhythm.3DSpaceTags - This will generate 3D space tags for all spaces in the project., Rhythm.BackupRFADeleter - This node will scan the contents of a driectory and delete backup RFA files that appear with a four digit backup number before the file extension. (eg. Family1.0001.rfa) This is deleting files so please use with caution!, Rhythm.Detail Number by View Name  - Automatically numbers your detail number based on the first two characters of your view name. i.e. A4/... (Requires slash to be present), Rhythm.OverrideInteriorCrop - This node will override the lineweight of the crop region on interior elevations. This node would not be possible without the power of the Dynamo community. Specifically Danny Jones with Clark Patterson Lee, Rhythm.PercentGlazingByOrientation - This node was show at RTCNA2015 to optimize your workflows. It reports the window to wall % by direction the wall faces., Rhythm.RenumberGridsByCurve - This node will renumber grids in order of curve drawn through them. Select either letters or numbers. (Alphanumeric coming soon), Rhythm.RenumberRoomsByCurve - This node will renumber rooms along a curve path. This was developed through the guidance of WIlliam Wong at case. Considering WeWork bought Case I wanted this node to live somewhere., Rhythm.Toggle - Toggle that offers two outputs. Created for Dynamo 0.8.1 because of changes to the \"IF\" node, Rhythm.WhatTheNode - This node will let you search dynamonodes.com for the most likely package a node is from. Helps fix \"red\" nodes when users do not have package installed., Room Element Collector - THis will collect data regarding rooms in the active model. Similar to Lunchbox node, but this one does not use python., RoomTag.Host - Retrieves the assoicated room with a room tag., Select Elements By Curve - This will select model elements in order that a curve is drawn through them., SetParameterByName(TypeOrInstance) - Set one of the element's parameters regardless of parameter type or instance., Space.IsPointInside - This will test if a point falls within a space., Space.SetSpaceType - This node will set the space type for the input space., Space.GetSpaceType - This will retrieve the space type of the space as a string., SpaceTag.Host - This obtains the MEP space associated with a given MEP space tag., SpaceType.All - This node will output ALL space types., SpaceType.ByName - This will output a MEP space type based on name search., SquareFeetDropper - This node drops square feet from the pulled area, String.CharacterAtIndex - Get's the character at a given index, String.ElementsModified - THis custom node reports the amount of elements in a list as a phrase., String.FlipReverse - This node flips the string and reverses it. (April Fools '15) Works for 0.8.0 only, added unicode support, String.IndicesOfCharacter - This node gets all the indices of a given character, String.IsUnicode - Determines if input string is a unicode character., String.RemoveAfterGivenCharacter - This will move all characters at and after the given character., String.RemovePriorToCharacter - This will remove all characters prior to the input character. Accepts strings., String.SpecifyDecimalPlaces - This node will take your inout string and number of decimal places to create a new simplified output., String.ToSentenceCase - This node will convert a single string of text to have capitalized sentences. If you need to use this over a list, use List.Map., String.ToTitle - Converts the given string to Title Case., StructuralBeamSystem.Members - Thist will collect the members of the ebeam system., TextElement.ToLower - This node converts a Revit text elemnt to upper directly., TextElement.ToTitle - This node converts a Revit text elemnt to upper directly., TextElement.ToUpper - This node converts a Revit text elemnt to upper directly., UI.UserMessage - This will display a user message once. Until it is either toggled or changed., Unicode.LRE - Start of left-to-right embedding Unicode Character, Unicode.LRM - Left-to-right mark unicode character, Unicode.RLE - Start of right-to-left embedding Unicode Character, Unicode.RLM - Right-to-left mark Unicode character, Unicode.ZWJ - Zero width joiner Unicode Character, Unicode.ZWNJ - Zero width non-joiner Unicode Character, View.ConvertToIndependent - This will convert input dependent views to independent. Thanks to TheRevitKid for the idea!, ViewFamilyType.ByName - Select a view family type given it's name., Viewport.ViewName - This node gets the view name of viewports. There is an issue when \"title on sheet\" is used, so this fixes that., Wall.NorthSouthEastWest - This node determines which direction a wall is facing and groups them by the direction or direction they are closest to., Workset.Create - Creates a workset or worksets from input names., Rhythm.TextBoxInput - Provides a text box input for users. Allows for multiple strings if needed.",
            "engine_metadata": "",
            "engine_version": "1.2.0.2690",
            "created": "2016-10-31T13:20:35.784Z",
            "full_dependency_versions": [ "2016.10.30" ],
            "full_dependency_ids": [
              {
                "_id": "54e7add1dcee4dfd26000101",
                "name": "Rhythm"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2016.10.30"
          },
          {
            "_id": "5818b0efdbe5183048000003",
            "contains_binaries": true,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-prod/bf8aa58b-0040-44b4-a8f6-8ccf4b561b6dgregPkg152.zip",
            "contents": "All Framing at Reference Level - Collects all of the structural framing at a specific reference level, All Pipes at Reference Level - This will collect all pipes by their reference level., All Upper - This converts the ase of selected items to UPPER. Inputs require booleans to enable for category., Arrowhead Assigner - This node assings the arrowhead type for all text and keynote tags. There is an input for ones you want to exclude., Ayuda.IsArchi-LabInstalled - This node determines if Archi-Lab is installed. Useful with a toggle., Ayuda.IsClockworkInstalled - This node determines if clockwork is installed. Useful with a toggle., Ayuda.IsSteamNodesInstalled - This node determines if steamnodes is installed. Useful with a toggle.;, Ayuda.ThisOrThat - This node is a toggle between two inputs., CableTray.Space - This node will determine the space a cable tray's center falls within., Collector.Areas - This is an area collector element that utilizes mostly OOTB nodes., Collector.DuctsBySystem - This collects all ducts in the project and organizes them by System Classification, Collector.KeynoteTags - This collects all of the keynote tags in the model. Similar to other nodes, but this doesn't use python., Collector.LabelTypes - This node collects all of the label types for the active family document., Collector.PipesBySystem - This collects all pipes in the project and organizes them by System Classification, Collector.TagTypes - This node collects the tag types in the model., Collector.Viewports - This collects all of the viewports in the model and outputs the name, title on sheet, scale and viewport type., CurtainGrid.AllSegmentCurves - This will return the vertical and horizontal curtain grid segments regardless if hidden or not. Groups by U and V., CurtainGrid.ByElement - Gets the curtain grids by the host element. Seperates into U and V, CurtainGrid.FullCurve - Returns the curves of the input curtain grids. Groups by U and V., CurtainGrid.RemoveSegment - Removes segments from curtain grids. Can't take lists yet. Use with List.Combine., CurtainGrid.RemoveSegmentsFunction - Function to apply to remove segments node, Curve.FromLine - This will translate a line element to a curve., Dash Remover - This node removes the dash at index 2 if it exists. The reason being, NCS states that no dash shall be used., Dimension.IsOverridden - This will report if a dimension has been overridden. , Dimension.LeaderEndPosition - This will return the leader end postion as a point., Dimension.MultiSegmentMembers - This will output all of the members of a multi-segment dimension., Dimension.NumberOfSegments - This will return the number of segments a dimension has. If it is a single dimension, this will return zero., Dimension.Origin - This will return the dimension origin as a point., Dimension.SetAboveValue - This will set the above value of a dimension., Dimension.SetBelowValue - This will set the below value of a dimension., Dimension.TextPosition - This will return the postition of the text as a point., Dimension.ValueString - The displayed value shown for the dimension segment. , Element.AreaLocation - This node will determine what area (area plans) an element is located within. Made possible thanks to clockwork. :), Element.AreaWithTotal - This will get the area of an element if the parameter exists. Will total as well if needed., Element.Category - This node will get the input element(s)' categories, Element.GetJoinedElements - This will obtain the elements joined to the input element., Element.GetLevelNameAsString - This retrieves the level name of the input elements as a string. This is in response to a known issue with the get value node., Element.GetMultipleParameterValuesByName - Get the value of multiple parameters from elements. (Seperate parameters with comma), Element.GetParameterValueByName(CaSe iNSeNSiTive) - Get the value of one of the element's parameters. (CaSe iNSeNSiTiVe), Element.OverrideCutColorInView - Overrides the elements cut color in the view., Element.OverrideCutLineweight - Overrides the cut lines of the elements, Element.OverrideProjectionFillColor - This node overrides the fill color of the element in view., Element.OverrideProjectionLineColor - This node overrides the projection line color with the input color value. Useful for annotation., Element.OverrideProjectionLineweight - Overrides the line thickness of projection lines, Element.ParentFamily - This node retrieces the parent family name for each input element., Element.Room - This node takes the input of all elements of category and reports back the associated room per element. Currently tested with casework, furniture and plumbing fixtures., Element.SetMultipleParametersByName - Set multiple (comma seperated) parameters by name., Element.SetParameterByName(CaSe iNSeNSiTiVe) - Set one of the element's parameters. (CaSe iNSeNSiTiVe), Element.SetPinnedStatus - Will set the element to either pinned or not pinned. True is pinned, false is unpinned. For multiple elements use List.Map, Element.Space - This will retrieve the space in which an element is contained. (if available), Element.Type - This retrieves the element type of the given elements. (if available) Similar to others available but no python here., Geometry.SpaceEvenlyWithBuffer - This will take input geometry and space it out in the Y direction with a buffer between, Geometry.ToRevitType - This will convert designscript geometyr into Revit.DB types. Currently tested with curves, nurbs curves and solids., GetParameterValueByName(TypeOrInstance) - Gets a parameter value by name regardless of type or instance., GetParameterValueByNameAsString - Returns paramter value as string. Same effect as lunchbox node, without python., Gmail.ComposeEmail - This node will compose a new email. Useful for notifications regarding a graph concluding. Uses pythons built-in SMTP Library., Gmail.ComposeEmailDetailed - This will compose a detailed email with subject and message., Group.UngroupElements - This will ungroup the input groups and output their elements. Use with care!, Inspiration.BuffettNode - This is a result of \"what if?\" thinking. The output is a random Warren Buffett quote from brainyquotes.com, Inspiration.CarreyNode - This is a result of \"what if?\" thinking. The output is a random Jim Carrey quote from brainyquotes.com, Inspiration.CashNode - This is a result of \"what if?\" thinking. The output is a random Johnny Cash quote from brainyquotes.com, Inspiration.MarleyNode - This is a result of \"what if?\" thinking. The output is a random Bob Marley quote from brainyquotes.com, Inspiration.SearchQuoteNode - This is a result of \"what if?\" thinking. The output is a random quote based on the search criteria from brainyquotes.com. (As long as it is on the site), Inspiration.TeresaNode - This is a result of \"what if?\" thinking. The output is a random Mother Teresa quote from brainyquotes.com, Isolated Pick Model Elements - Pick model elements in desired order of a desired category., Level Element Collector - This collects data for all of the Level elements in the model. Similar to the node on Lunchbox, but this one uses all O.O.B. nodes., List.AllIndicesOf - Given an item, returns the zero-based indices of all its occurrences in the list. If the item cannot be found, an empty list is returned. , List.ArchitecturalAlphabeticalSequence - This creates a list of characters. What's different is we typically exclude I's and O's from our characters so there is a toggle for this., List.Contains - Determines if the given list contains the item or items., List.GetItemIndices - This node searches the input list for the given string or number., List.MergeSublists - This will merge all sublists with or without a character between the strings., List.ReturnItemsPreviousToIndex - This will take an index (or indices) and return the items previous to it. Useful for sums of all items previous., Mullion.SortByDirection - This will sort mullions of a host curtain wall by direction they are facing., OS.CurrentUser - This node retrieves the current user logged in., OS.CurrentUserAppData - This retrieves the current user's appdata location, Output.Clean - This will return a single value or list from one input., Parametric Graphic Scale - This node automates the graphic scale assigned per viewport. The input required is all instances of viewport category. It also requires shared parameters. Visit sixtysecondrevit.blogspot.com for details., Pick Model Elements - This node offers a pick method for selecting elements in Revit., Railing.BalusterCount - This node will count the amout of balusters in a rail element. Only works for single element for now., RemoveListFromList - This node essentially \"subtracts\" the contents of List B from List A to produce a new list with the unique items., Rhythm.3DRoomTags - This node will generate 3D room tags for all rooms in the model. (RFA in extra folder in Dynamo download), Rhythm.3DSpaceTags - This will generate 3D space tags for all spaces in the project., Rhythm.BackupRFADeleter - This node will scan the contents of a driectory and delete backup RFA files that appear with a four digit backup number before the file extension. (eg. Family1.0001.rfa) This is deleting files so please use with caution!, Rhythm.Detail Number by View Name  - Automatically numbers your detail number based on the first two characters of your view name. i.e. A4/... (Requires slash to be present), Rhythm.OverrideInteriorCrop - This node will override the lineweight of the crop region on interior elevations. This node would not be possible without the power of the Dynamo community. Specifically Danny Jones with Clark Patterson Lee, Rhythm.PercentGlazingByOrientation - This node was show at RTCNA2015 to optimize your workflows. It reports the window to wall % by direction the wall faces., Rhythm.RenumberGridsByCurve - This node will renumber grids in order of curve drawn through them. Select either letters or numbers. (Alphanumeric coming soon), Rhythm.RenumberRoomsByCurve - This node will renumber rooms along a curve path. This was developed through the guidance of WIlliam Wong at case. Considering WeWork bought Case I wanted this node to live somewhere., Rhythm.TextBoxInput - Provides a text box input for users. Allows for multiple strings if needed., Rhythm.Toggle - Toggle that offers two outputs. Created for Dynamo 0.8.1 because of changes to the \"IF\" node, Rhythm.WhatTheNode - This node will let you search dynamonodes.com for the most likely package a node is from. Helps fix \"red\" nodes when users do not have package installed., Room Element Collector - THis will collect data regarding rooms in the active model. Similar to Lunchbox node, but this one does not use python., RoomTag.Host - Retrieves the assoicated room with a room tag., Select Elements By Curve - This will select model elements in order that a curve is drawn through them., SetParameterByName(TypeOrInstance) - Set one of the element's parameters regardless of parameter type or instance., Space.IsPointInside - This will test if a point falls within a space., Space.SetSpaceType - This node will set the space type for the input space., Space.GetSpaceType - This will retrieve the space type of the space as a string., SpaceTag.Host - This obtains the MEP space associated with a given MEP space tag., SpaceType.All - This node will output ALL space types., SpaceType.ByName - This will output a MEP space type based on name search., SquareFeetDropper - This node drops square feet from the pulled area, String.CharacterAtIndex - Get's the character at a given index, String.ElementsModified - THis custom node reports the amount of elements in a list as a phrase., String.FlipReverse - This node flips the string and reverses it. (April Fools '15) Works for 0.8.0 only, added unicode support, String.IndicesOfCharacter - This node gets all the indices of a given character, String.IsUnicode - Determines if input string is a unicode character., String.RemoveAfterGivenCharacter - This will move all characters at and after the given character., String.RemovePriorToCharacter - This will remove all characters prior to the input character. Accepts strings., String.SpecifyDecimalPlaces - This node will take your inout string and number of decimal places to create a new simplified output., String.ToSentenceCase - This node will convert a single string of text to have capitalized sentences. If you need to use this over a list, use List.Map., String.ToTitle - Converts the given string to Title Case., StructuralBeamSystem.Members - Thist will collect the members of the ebeam system., TextElement.ToLower - This node converts a Revit text elemnt to upper directly., TextElement.ToTitle - This node converts a Revit text elemnt to upper directly., TextElement.ToUpper - This node converts a Revit text elemnt to upper directly., UI.UserMessage - This will display a user message once. Until it is either toggled or changed., Unicode.LRE - Start of left-to-right embedding Unicode Character, Unicode.LRM - Left-to-right mark unicode character, Unicode.RLE - Start of right-to-left embedding Unicode Character, Unicode.RLM - Right-to-left mark Unicode character, Unicode.ZWJ - Zero width joiner Unicode Character, Unicode.ZWNJ - Zero width non-joiner Unicode Character, View.ConvertToIndependent - This will convert input dependent views to independent. Thanks to TheRevitKid for the idea!, ViewFamilyType.ByName - Select a view family type given it's name., Viewport.ViewName - This node gets the view name of viewports. There is an issue when \"title on sheet\" is used, so this fixes that., Wall.NorthSouthEastWest - This node determines which direction a wall is facing and groups them by the direction or direction they are closest to., Workset.Create - Creates a workset or worksets from input names.",
            "engine_metadata": "",
            "engine_version": "1.2.0.2690",
            "created": "2016-11-01T15:12:47.054Z",
            "full_dependency_versions": [ "2016.11.1" ],
            "full_dependency_ids": [
              {
                "_id": "54e7add1dcee4dfd26000101",
                "name": "Rhythm"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2016.11.1"
          },
          {
            "_id": "58212a5c5af9f3713d000007",
            "contains_binaries": true,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-prod/7c8e3b8b-86fa-4475-b53d-1cbee3d4de25gregPkg137.zip",
            "contents": "All Framing at Reference Level - Collects all of the structural framing at a specific reference level, All Pipes at Reference Level - This will collect all pipes by their reference level., All Upper - This converts the ase of selected items to UPPER. Inputs require booleans to enable for category., Arrowhead Assigner - This node assings the arrowhead type for all text and keynote tags. There is an input for ones you want to exclude., Ayuda.IsArchi-LabInstalled - This node determines if Archi-Lab is installed. Useful with a toggle., Ayuda.IsClockworkInstalled - This node determines if clockwork is installed. Useful with a toggle., Ayuda.IsSteamNodesInstalled - This node determines if steamnodes is installed. Useful with a toggle.;, Ayuda.ThisOrThat - This node is a toggle between two inputs., CableTray.Space - This node will determine the space a cable tray's center falls within., Collector.Areas - This is an area collector element that utilizes mostly OOTB nodes., Collector.DuctsBySystem - This collects all ducts in the project and organizes them by System Classification, Collector.KeynoteTags - This collects all of the keynote tags in the model. Similar to other nodes, but this doesn't use python., Collector.LabelTypes - This node collects all of the label types for the active family document., Collector.PipesBySystem - This collects all pipes in the project and organizes them by System Classification, Collector.TagTypes - This node collects the tag types in the model., Collector.Viewports - This collects all of the viewports in the model and outputs the name, title on sheet, scale and viewport type., CurtainGrid.AllSegmentCurves - This will return the vertical and horizontal curtain grid segments regardless if hidden or not. Groups by U and V., CurtainGrid.ByElement - Gets the curtain grids by the host element. Seperates into U and V, CurtainGrid.FullCurve - Returns the curves of the input curtain grids. Groups by U and V., CurtainGrid.RemoveSegment - Removes segments from curtain grids. Can't take lists yet. Use with List.Combine., CurtainGrid.RemoveSegmentsFunction - Function to apply to remove segments node, Curve.FromLine - This will translate a line element to a curve., Dash Remover - This node removes the dash at index 2 if it exists. The reason being, NCS states that no dash shall be used., Dimension.IsOverridden - This will report if a dimension has been overridden. , Dimension.LeaderEndPosition - This will return the leader end postion as a point., Dimension.MultiSegmentMembers - This will output all of the members of a multi-segment dimension., Dimension.NumberOfSegments - This will return the number of segments a dimension has. If it is a single dimension, this will return zero., Dimension.Origin - This will return the dimension origin as a point., Dimension.SetAboveValue - This will set the above value of a dimension., Dimension.SetBelowValue - This will set the below value of a dimension., Dimension.TextPosition - This will return the postition of the text as a point., Dimension.ValueString - The displayed value shown for the dimension segment. , Element.AreaLocation - This node will determine what area (area plans) an element is located within. Made possible thanks to clockwork. :), Element.AreaWithTotal - This will get the area of an element if the parameter exists. Will total as well if needed., Element.Category - This node will get the input element(s)' categories, Element.GetJoinedElements - This will obtain the elements joined to the input element., Element.GetLevelNameAsString - This retrieves the level name of the input elements as a string. This is in response to a known issue with the get value node., Element.GetMultipleParameterValuesByName - Get the value of multiple parameters from elements. (Seperate parameters with comma), Element.GetParameterValueByName(CaSe iNSeNSiTive) - Get the value of one of the element's parameters. (CaSe iNSeNSiTiVe), Element.OverrideCutColorInView - Overrides the elements cut color in the view., Element.OverrideCutLineweight - Overrides the cut lines of the elements, Element.OverrideProjectionFillColor - This node overrides the fill color of the element in view., Element.OverrideProjectionLineColor - This node overrides the projection line color with the input color value. Useful for annotation., Element.OverrideProjectionLineweight - Overrides the line thickness of projection lines, Element.ParentFamily - This node retrieces the parent family name for each input element., Element.Room - This node takes the input of all elements of category and reports back the associated room per element. Currently tested with casework, furniture and plumbing fixtures., Element.SetMultipleParametersByName - Set multiple (comma seperated) parameters by name., Element.SetParameterByName(CaSe iNSeNSiTiVe) - Set one of the element's parameters. (CaSe iNSeNSiTiVe), Element.SetPinnedStatus - Will set the element to either pinned or not pinned. True is pinned, false is unpinned. For multiple elements use List.Map, Element.Space - This will retrieve the space in which an element is contained. (if available), Element.Type - This retrieves the element type of the given elements. (if available) Similar to others available but no python here., Geometry.SpaceEvenlyWithBuffer - This will take input geometry and space it out in the Y direction with a buffer between, Geometry.ToRevitType - This will convert designscript geometyr into Revit.DB types. Currently tested with curves, nurbs curves and solids., GetParameterValueByName(TypeOrInstance) - Gets a parameter value by name regardless of type or instance., GetParameterValueByNameAsString - Returns paramter value as string. Same effect as lunchbox node, without python., Gmail.ComposeEmail - This node will compose a new email. Useful for notifications regarding a graph concluding. Uses pythons built-in SMTP Library., Gmail.ComposeEmailDetailed - This will compose a detailed email with subject and message., Group.UngroupElements - This will ungroup the input groups and output their elements. Use with care!, Inspiration.BuffettNode - This is a result of \"what if?\" thinking. The output is a random Warren Buffett quote from brainyquotes.com, Inspiration.CarreyNode - This is a result of \"what if?\" thinking. The output is a random Jim Carrey quote from brainyquotes.com, Inspiration.CashNode - This is a result of \"what if?\" thinking. The output is a random Johnny Cash quote from brainyquotes.com, Inspiration.MarleyNode - This is a result of \"what if?\" thinking. The output is a random Bob Marley quote from brainyquotes.com, Inspiration.SearchQuoteNode - This is a result of \"what if?\" thinking. The output is a random quote based on the search criteria from brainyquotes.com. (As long as it is on the site), Inspiration.TeresaNode - This is a result of \"what if?\" thinking. The output is a random Mother Teresa quote from brainyquotes.com, Isolated Pick Model Elements - Pick model elements in desired order of a desired category., Level Element Collector - This collects data for all of the Level elements in the model. Similar to the node on Lunchbox, but this one uses all O.O.B. nodes., List.AllIndicesOf - Given an item, returns the zero-based indices of all its occurrences in the list. If the item cannot be found, an empty list is returned. , List.ArchitecturalAlphabeticalSequence - This creates a list of characters. What's different is we typically exclude I's and O's from our characters so there is a toggle for this., List.Contains - Determines if the given list contains the item or items., List.GetItemIndices - This node searches the input list for the given string or number., List.MergeSublists - This will merge all sublists with or without a character between the strings., List.ReturnItemsPreviousToIndex - This will take an index (or indices) and return the items previous to it. Useful for sums of all items previous., Mullion.SortByDirection - This will sort mullions of a host curtain wall by direction they are facing., OS.CurrentUser - This node retrieves the current user logged in., OS.CurrentUserAppData - This retrieves the current user's appdata location, Output.Clean - This will return a single value or list from one input., Parametric Graphic Scale - This node automates the graphic scale assigned per viewport. The input required is all instances of viewport category. It also requires shared parameters. Visit sixtysecondrevit.blogspot.com for details., Pick Model Elements - This node offers a pick method for selecting elements in Revit., Railing.BalusterCount - This node will count the amout of balusters in a rail element. Only works for single element for now., RemoveListFromList - This node essentially \"subtracts\" the contents of List B from List A to produce a new list with the unique items., Rhythm.3DRoomTags - This node will generate 3D room tags for all rooms in the model. (RFA in extra folder in Dynamo download), Rhythm.3DSpaceTags - This will generate 3D space tags for all spaces in the project., Rhythm.BackupRFADeleter - This node will scan the contents of a driectory and delete backup RFA files that appear with a four digit backup number before the file extension. (eg. Family1.0001.rfa) This is deleting files so please use with caution!, Rhythm.Detail Number by View Name  - Automatically numbers your detail number based on the first two characters of your view name. i.e. A4/... (Requires slash to be present), Rhythm.OverrideInteriorCrop - This node will override the lineweight of the crop region on interior elevations. This node would not be possible without the power of the Dynamo community. Specifically Danny Jones with Clark Patterson Lee, Rhythm.PercentGlazingByOrientation - This node was show at RTCNA2015 to optimize your workflows. It reports the window to wall % by direction the wall faces., Rhythm.RenumberGridsByCurve - This node will renumber grids in order of curve drawn through them. Select either letters or numbers. (Alphanumeric coming soon), Rhythm.RenumberRoomsByCurve - This node will renumber rooms along a curve path. This was developed through the guidance of WIlliam Wong at case. Considering WeWork bought Case I wanted this node to live somewhere., Rhythm.TextBoxInput - Provides a text box input for users. Allows for multiple strings if needed., Rhythm.Toggle - Toggle that offers two outputs. Created for Dynamo 0.8.1 because of changes to the \"IF\" node, Rhythm.WhatTheNode - This node will let you search dynamonodes.com for the most likely package a node is from. Helps fix \"red\" nodes when users do not have package installed., Room Element Collector - THis will collect data regarding rooms in the active model. Similar to Lunchbox node, but this one does not use python., RoomTag.Host - Retrieves the assoicated room with a room tag., Select Elements By Curve - This will select model elements in order that a curve is drawn through them., SetParameterByName(TypeOrInstance) - Set one of the element's parameters regardless of parameter type or instance., Space.IsPointInside - This will test if a point falls within a space., Space.SetSpaceType - This node will set the space type for the input space., Space.GetSpaceType - This will retrieve the space type of the space as a string., SpaceTag.Host - This obtains the MEP space associated with a given MEP space tag., SpaceType.All - This node will output ALL space types., SpaceType.ByName - This will output a MEP space type based on name search., SquareFeetDropper - This node drops square feet from the pulled area, String.CharacterAtIndex - Get's the character at a given index, String.ElementsModified - THis custom node reports the amount of elements in a list as a phrase., String.FlipReverse - This node flips the string and reverses it. (April Fools '15) Works for 0.8.0 only, added unicode support, String.IndicesOfCharacter - This node gets all the indices of a given character, String.IsUnicode - Determines if input string is a unicode character., String.RemoveAfterGivenCharacter - This will move all characters at and after the given character., String.RemovePriorToCharacter - This will remove all characters prior to the input character. Accepts strings., String.SpecifyDecimalPlaces - This node will take your inout string and number of decimal places to create a new simplified output., String.ToSentenceCase - This node will convert a single string of text to have capitalized sentences. If you need to use this over a list, use List.Map., String.ToTitle - Converts the given string to Title Case., StructuralBeamSystem.Members - Thist will collect the members of the ebeam system., TextElement.ToLower - This node converts a Revit text elemnt to upper directly., TextElement.ToTitle - This node converts a Revit text elemnt to upper directly., TextElement.ToUpper - This node converts a Revit text elemnt to upper directly., UI.UserMessage - This will display a user message once. Until it is either toggled or changed., Unicode.LRE - Start of left-to-right embedding Unicode Character, Unicode.LRM - Left-to-right mark unicode character, Unicode.RLE - Start of right-to-left embedding Unicode Character, Unicode.RLM - Right-to-left mark Unicode character, Unicode.ZWJ - Zero width joiner Unicode Character, Unicode.ZWNJ - Zero width non-joiner Unicode Character, View.ConvertToIndependent - This will convert input dependent views to independent. Thanks to TheRevitKid for the idea!, ViewFamilyType.ByName - Select a view family type given it's name., Viewport.ViewName - This node gets the view name of viewports. There is an issue when \"title on sheet\" is used, so this fixes that., Wall.NorthSouthEastWest - This node determines which direction a wall is facing and groups them by the direction or direction they are closest to., Workset.Create - Creates a workset or worksets from input names., All Elements of Type in Document - All elements of given type in specified document. This works for unopened files and for linked documents., Document.BackgroundOpen - This will open the input Revit files in the background., Document.Close - This will close the input Revit document. Offers a boolean toggle to save., Element.CopyFromDocument - This node allows you to copy elements from a specific document to your current document.",
            "engine_metadata": "",
            "engine_version": "1.2.0.2690",
            "created": "2016-11-08T01:29:00.765Z",
            "full_dependency_versions": [ "2016.11.7" ],
            "full_dependency_ids": [
              {
                "_id": "54e7add1dcee4dfd26000101",
                "name": "Rhythm"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2016.11.7"
          },
          {
            "_id": "58263b4e5af9f3713d000049",
            "contains_binaries": true,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-prod/bf696dd2-d46b-4815-a178-3dab96396c10gregPkg790.zip",
            "contents": "All Elements of Type in Document - All elements of given type in specified document. This works for unopened files and for linked documents., All Framing at Reference Level - Collects all of the structural framing at a specific reference level, All Pipes at Reference Level - This will collect all pipes by their reference level., All Upper - This converts the ase of selected items to UPPER. Inputs require booleans to enable for category., Arrowhead Assigner - This node assings the arrowhead type for all text and keynote tags. There is an input for ones you want to exclude., Ayuda.IsArchi-LabInstalled - This node determines if Archi-Lab is installed. Useful with a toggle., Ayuda.IsClockworkInstalled - This node determines if clockwork is installed. Useful with a toggle., Ayuda.IsSteamNodesInstalled - This node determines if steamnodes is installed. Useful with a toggle.;, Ayuda.ThisOrThat - This node is a toggle between two inputs., CableTray.Space - This node will determine the space a cable tray's center falls within., Collector.Areas - This is an area collector element that utilizes mostly OOTB nodes., Collector.DuctsBySystem - This collects all ducts in the project and organizes them by System Classification, Collector.KeynoteTags - This collects all of the keynote tags in the model. Similar to other nodes, but this doesn't use python., Collector.LabelTypes - This node collects all of the label types for the active family document., Collector.PipesBySystem - This collects all pipes in the project and organizes them by System Classification, Collector.TagTypes - This node collects the tag types in the model., Collector.Viewports - This collects all of the viewports in the model and outputs the name, title on sheet, scale and viewport type., CurtainGrid.AllSegmentCurves - This will return the vertical and horizontal curtain grid segments regardless if hidden or not. Groups by U and V., CurtainGrid.ByElement - Gets the curtain grids by the host element. Seperates into U and V, CurtainGrid.FullCurve - Returns the curves of the input curtain grids. Groups by U and V., CurtainGrid.RemoveSegment - Removes segments from curtain grids. Can't take lists yet. Use with List.Combine., CurtainGrid.RemoveSegmentsFunction - Function to apply to remove segments node, Curve.FromLine - This will translate a line element to a curve., Dash Remover - This node removes the dash at index 2 if it exists. The reason being, NCS states that no dash shall be used., Dimension.IsOverridden - This will report if a dimension has been overridden. , Dimension.LeaderEndPosition - This will return the leader end postion as a point., Dimension.MultiSegmentMembers - This will output all of the members of a multi-segment dimension., Dimension.NumberOfSegments - This will return the number of segments a dimension has. If it is a single dimension, this will return zero., Dimension.Origin - This will return the dimension origin as a point., Dimension.SetAboveValue - This will set the above value of a dimension., Dimension.SetBelowValue - This will set the below value of a dimension., Dimension.TextPosition - This will return the postition of the text as a point., Dimension.ValueString - The displayed value shown for the dimension segment. , Document.BackgroundOpen - This will open the input Revit files in the background., Document.Close - This will close the input Revit document. Offers a boolean toggle to save., Element.AreaLocation - This node will determine what area (area plans) an element is located within. Made possible thanks to clockwork. :), Element.AreaWithTotal - This will get the area of an element if the parameter exists. Will total as well if needed., Element.Category - This node will get the input element(s)' categories, Element.CopyFromDocument - This node allows you to copy elements from a specific document to your current document., Element.GetJoinedElements - This will obtain the elements joined to the input element., Element.GetLevelNameAsString - This retrieves the level name of the input elements as a string. This is in response to a known issue with the get value node., Element.GetMultipleParameterValuesByName - Get the value of multiple parameters from elements. (Seperate parameters with comma), Element.GetParameterValueByName(CaSe iNSeNSiTive) - Get the value of one of the element's parameters. (CaSe iNSeNSiTiVe), Element.OverrideCutColorInView - Overrides the elements cut color in the view., Element.OverrideCutLineweight - Overrides the cut lines of the elements, Element.OverrideProjectionFillColor - This node overrides the fill color of the element in view., Element.OverrideProjectionLineColor - This node overrides the projection line color with the input color value. Useful for annotation., Element.OverrideProjectionLineweight - Overrides the line thickness of projection lines, Element.ParentFamily - This node retrieces the parent family name for each input element., Element.Room - This node takes the input of all elements of category and reports back the associated room per element. Currently tested with casework, furniture and plumbing fixtures., Element.SetMultipleParametersByName - Set multiple (comma seperated) parameters by name., Element.SetParameterByName(CaSe iNSeNSiTiVe) - Set one of the element's parameters. (CaSe iNSeNSiTiVe), Element.SetPinnedStatus - Will set the element to either pinned or not pinned. True is pinned, false is unpinned. For multiple elements use List.Map, Element.Space - This will retrieve the space in which an element is contained. (if available), Element.Type - This retrieves the element type of the given elements. (if available) Similar to others available but no python here., Geometry.SpaceEvenlyWithBuffer - This will take input geometry and space it out in the Y direction with a buffer between, Geometry.ToRevitType - This will convert designscript geometyr into Revit.DB types. Currently tested with curves, nurbs curves and solids., GetParameterValueByName(TypeOrInstance) - Gets a parameter value by name regardless of type or instance., GetParameterValueByNameAsString - Returns paramter value as string. Same effect as lunchbox node, without python., Gmail.ComposeEmail - This node will compose a new email. Useful for notifications regarding a graph concluding. Uses pythons built-in SMTP Library., Gmail.ComposeEmailDetailed - This will compose a detailed email with subject and message., Group.UngroupElements - This will ungroup the input groups and output their elements. Use with care!, Inspiration.BuffettNode - This is a result of \"what if?\" thinking. The output is a random Warren Buffett quote from brainyquotes.com, Inspiration.CarreyNode - This is a result of \"what if?\" thinking. The output is a random Jim Carrey quote from brainyquotes.com, Inspiration.CashNode - This is a result of \"what if?\" thinking. The output is a random Johnny Cash quote from brainyquotes.com, Inspiration.MarleyNode - This is a result of \"what if?\" thinking. The output is a random Bob Marley quote from brainyquotes.com, Inspiration.SearchQuoteNode - This is a result of \"what if?\" thinking. The output is a random quote based on the search criteria from brainyquotes.com. (As long as it is on the site), Inspiration.TeresaNode - This is a result of \"what if?\" thinking. The output is a random Mother Teresa quote from brainyquotes.com, Isolated Pick Model Elements - Pick model elements in desired order of a desired category., Level Element Collector - This collects data for all of the Level elements in the model. Similar to the node on Lunchbox, but this one uses all O.O.B. nodes., List.AllIndicesOf - Given an item, returns the zero-based indices of all its occurrences in the list. If the item cannot be found, an empty list is returned. , List.ArchitecturalAlphabeticalSequence - This creates a list of characters. What's different is we typically exclude I's and O's from our characters so there is a toggle for this., List.Contains - Determines if the given list contains the item or items., List.GetItemIndices - This node searches the input list for the given string or number., List.MergeSublists - This will merge all sublists with or without a character between the strings., List.ReturnItemsPreviousToIndex - This will take an index (or indices) and return the items previous to it. Useful for sums of all items previous., Mullion.SortByDirection - This will sort mullions of a host curtain wall by direction they are facing., OS.CurrentUser - This node retrieves the current user logged in., OS.CurrentUserAppData - This retrieves the current user's appdata location, Output.Clean - This will return a single value or list from one input., Parametric Graphic Scale - This node automates the graphic scale assigned per viewport. The input required is all instances of viewport category. It also requires shared parameters. Visit sixtysecondrevit.blogspot.com for details., Pick Model Elements - This node offers a pick method for selecting elements in Revit., Railing.BalusterCount - This node will count the amout of balusters in a rail element. Only works for single element for now., RemoveListFromList - This node essentially \"subtracts\" the contents of List B from List A to produce a new list with the unique items., Rhythm.3DRoomTags - This node will generate 3D room tags for all rooms in the model. (RFA in extra folder in Dynamo download), Rhythm.3DSpaceTags - This will generate 3D space tags for all spaces in the project., Rhythm.BackupRFADeleter - This node will scan the contents of a driectory and delete backup RFA files that appear with a four digit backup number before the file extension. (eg. Family1.0001.rfa) This is deleting files so please use with caution!, Rhythm.Detail Number by View Name  - Automatically numbers your detail number based on the first two characters of your view name. i.e. A4/... (Requires slash to be present), Rhythm.OverrideInteriorCrop - This node will override the lineweight of the crop region on interior elevations. This node would not be possible without the power of the Dynamo community. Specifically Danny Jones with Clark Patterson Lee, Rhythm.PercentGlazingByOrientation - This node was show at RTCNA2015 to optimize your workflows. It reports the window to wall % by direction the wall faces., Rhythm.RenumberGridsByCurve - This node will renumber grids in order of curve drawn through them. Select either letters or numbers. (Alphanumeric coming soon), Rhythm.RenumberRoomsByCurve - This node will renumber rooms along a curve path. This was developed through the guidance of WIlliam Wong at case. Considering WeWork bought Case I wanted this node to live somewhere., Rhythm.TextBoxInput - Provides a text box input for users. Allows for multiple strings if needed., Rhythm.Toggle - Toggle that offers two outputs. Created for Dynamo 0.8.1 because of changes to the \"IF\" node, Rhythm.WhatTheNode - This node will let you search dynamonodes.com for the most likely package a node is from. Helps fix \"red\" nodes when users do not have package installed., Room Element Collector - THis will collect data regarding rooms in the active model. Similar to Lunchbox node, but this one does not use python., RoomTag.Host - Retrieves the assoicated room with a room tag., Select Elements By Curve - This will select model elements in order that a curve is drawn through them., SetParameterByName(TypeOrInstance) - Set one of the element's parameters regardless of parameter type or instance., Space.IsPointInside - This will test if a point falls within a space., Space.SetSpaceType - This node will set the space type for the input space., Space.GetSpaceType - This will retrieve the space type of the space as a string., SpaceTag.Host - This obtains the MEP space associated with a given MEP space tag., SpaceType.All - This node will output ALL space types., SpaceType.ByName - This will output a MEP space type based on name search., SquareFeetDropper - This node drops square feet from the pulled area, String.CharacterAtIndex - Get's the character at a given index, String.ElementsModified - THis custom node reports the amount of elements in a list as a phrase., String.FlipReverse - This node flips the string and reverses it. (April Fools '15) Works for 0.8.0 only, added unicode support, String.IndicesOfCharacter - This node gets all the indices of a given character, String.IsUnicode - Determines if input string is a unicode character., String.RemoveAfterGivenCharacter - This will move all characters at and after the given character., String.RemovePriorToCharacter - This will remove all characters prior to the input character. Accepts strings., String.SpecifyDecimalPlaces - This node will take your inout string and number of decimal places to create a new simplified output., String.ToSentenceCase - This node will convert a single string of text to have capitalized sentences. If you need to use this over a list, use List.Map., String.ToTitle - Converts the given string to Title Case., StructuralBeamSystem.Members - Thist will collect the members of the ebeam system., TextElement.ToLower - This node converts a Revit text elemnt to upper directly., TextElement.ToTitle - This node converts a Revit text elemnt to upper directly., TextElement.ToUpper - This node converts a Revit text elemnt to upper directly., UI.UserMessage - This will display a user message once. Until it is either toggled or changed., Unicode.LRE - Start of left-to-right embedding Unicode Character, Unicode.LRM - Left-to-right mark unicode character, Unicode.RLE - Start of right-to-left embedding Unicode Character, Unicode.RLM - Right-to-left mark Unicode character, Unicode.ZWJ - Zero width joiner Unicode Character, Unicode.ZWNJ - Zero width non-joiner Unicode Character, View.ConvertToIndependent - This will convert input dependent views to independent. Thanks to TheRevitKid for the idea!, ViewFamilyType.ByName - Select a view family type given it's name., Viewport.ViewName - This node gets the view name of viewports. There is an issue when \"title on sheet\" is used, so this fixes that., Wall.NorthSouthEastWest - This node determines which direction a wall is facing and groups them by the direction or direction they are closest to., Workset.Create - Creates a workset or worksets from input names., Rhythm.MassOSMData - This node will mass the OSM data based upon the know heights. If the building doesn't have a height, it will just output the polygon.",
            "engine_metadata": "",
            "engine_version": "1.2.0.2690",
            "created": "2016-11-11T21:42:38.610Z",
            "full_dependency_versions": [ "2016.11.11" ],
            "full_dependency_ids": [
              {
                "_id": "54e7add1dcee4dfd26000101",
                "name": "Rhythm"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2016.11.11"
          },
          {
            "_id": "58338adf5af9f3713d0000d8",
            "contains_binaries": true,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-prod/b46cc57b-f5a0-4cda-9e7c-b3b52ca09d61gregPkg595.zip",
            "contents": "All Elements of Type in Document - All elements of given type in specified document. This works for unopened files and for linked documents., All Framing at Reference Level - Collects all of the structural framing at a specific reference level, All Pipes at Reference Level - This will collect all pipes by their reference level., All Upper - This converts the ase of selected items to UPPER. Inputs require booleans to enable for category., Arrowhead Assigner - This node assings the arrowhead type for all text and keynote tags. There is an input for ones you want to exclude., Ayuda.IsArchi-LabInstalled - This node determines if Archi-Lab is installed. Useful with a toggle., Ayuda.IsClockworkInstalled - This node determines if clockwork is installed. Useful with a toggle., Ayuda.IsSteamNodesInstalled - This node determines if steamnodes is installed. Useful with a toggle.;, Ayuda.ThisOrThat - This node is a toggle between two inputs., CableTray.Space - This node will determine the space a cable tray's center falls within., Collector.Areas - This is an area collector element that utilizes mostly OOTB nodes., Collector.DuctsBySystem - This collects all ducts in the project and organizes them by System Classification, Collector.KeynoteTags - This collects all of the keynote tags in the model. Similar to other nodes, but this doesn't use python., Collector.LabelTypes - This node collects all of the label types for the active family document., Collector.PipesBySystem - This collects all pipes in the project and organizes them by System Classification, Collector.TagTypes - This node collects the tag types in the model., Collector.Viewports - This collects all of the viewports in the model and outputs the name, title on sheet, scale and viewport type., CurtainGrid.AllSegmentCurves - This will return the vertical and horizontal curtain grid segments regardless if hidden or not. Groups by U and V., CurtainGrid.ByElement - Gets the curtain grids by the host element. Seperates into U and V, CurtainGrid.FullCurve - Returns the curves of the input curtain grids. Groups by U and V., CurtainGrid.RemoveSegment - Removes segments from curtain grids. Can't take lists yet. Use with List.Combine., CurtainGrid.RemoveSegmentsFunction - Function to apply to remove segments node, Curve.FromLine - This will translate a line element to a curve., Dash Remover - This node removes the dash at index 2 if it exists. The reason being, NCS states that no dash shall be used., Dimension.IsOverridden - This will report if a dimension has been overridden. , Dimension.LeaderEndPosition - This will return the leader end postion as a point., Dimension.MultiSegmentMembers - This will output all of the members of a multi-segment dimension., Dimension.NumberOfSegments - This will return the number of segments a dimension has. If it is a single dimension, this will return zero., Dimension.Origin - This will return the dimension origin as a point., Dimension.SetAboveValue - This will set the above value of a dimension., Dimension.SetBelowValue - This will set the below value of a dimension., Dimension.TextPosition - This will return the postition of the text as a point., Dimension.ValueString - The displayed value shown for the dimension segment. , Document.BackgroundOpen - This will open the input Revit files in the background., Document.Close - This will close the input Revit document. Offers a boolean toggle to save., Element.AreaLocation - This node will determine what area (area plans) an element is located within. Made possible thanks to clockwork. :), Element.AreaWithTotal - This will get the area of an element if the parameter exists. Will total as well if needed., Element.Category - This node will get the input element(s)' categories, Element.CopyFromDocument - This node allows you to copy elements from a specific document to your current document., Element.GetJoinedElements - This will obtain the elements joined to the input element., Element.GetLevelNameAsString - This retrieves the level name of the input elements as a string. This is in response to a known issue with the get value node., Element.GetMultipleParameterValuesByName - Get the value of multiple parameters from elements. (Seperate parameters with comma), Element.GetParameterValueByName(CaSe iNSeNSiTive) - Get the value of one of the element's parameters. (CaSe iNSeNSiTiVe), Element.OverrideCutColorInView - Overrides the elements cut color in the view., Element.OverrideCutLineweight - Overrides the cut lines of the elements, Element.OverrideProjectionFillColor - This node overrides the fill color of the element in view., Element.OverrideProjectionLineColor - This node overrides the projection line color with the input color value. Useful for annotation., Element.OverrideProjectionLineweight - Overrides the line thickness of projection lines, Element.ParentFamily - This node retrieces the parent family name for each input element., Element.Room - This node takes the input of all elements of category and reports back the associated room per element. Currently tested with casework, furniture and plumbing fixtures., Element.SetMultipleParametersByName - Set multiple (comma seperated) parameters by name., Element.SetParameterByName(CaSe iNSeNSiTiVe) - Set one of the element's parameters. (CaSe iNSeNSiTiVe), Element.SetPinnedStatus - Will set the element to either pinned or not pinned. True is pinned, false is unpinned. For multiple elements use List.Map, Element.Space - This will retrieve the space in which an element is contained. (if available), Element.Type - This retrieves the element type of the given elements. (if available) Similar to others available but no python here., Geometry.SpaceEvenlyWithBuffer - This will take input geometry and space it out in the Y direction with a buffer between, Geometry.ToRevitType - This will convert designscript geometyr into Revit.DB types. Currently tested with curves, nurbs curves and solids., GetParameterValueByName(TypeOrInstance) - Gets a parameter value by name regardless of type or instance., GetParameterValueByNameAsString - Returns paramter value as string. Same effect as lunchbox node, without python., Gmail.ComposeEmail - This node will compose a new email. Useful for notifications regarding a graph concluding. Uses pythons built-in SMTP Library., Gmail.ComposeEmailDetailed - This will compose a detailed email with subject and message., Group.UngroupElements - This will ungroup the input groups and output their elements. Use with care!, Inspiration.BuffettNode - This is a result of \"what if?\" thinking. The output is a random Warren Buffett quote from brainyquotes.com, Inspiration.CarreyNode - This is a result of \"what if?\" thinking. The output is a random Jim Carrey quote from brainyquotes.com, Inspiration.CashNode - This is a result of \"what if?\" thinking. The output is a random Johnny Cash quote from brainyquotes.com, Inspiration.MarleyNode - This is a result of \"what if?\" thinking. The output is a random Bob Marley quote from brainyquotes.com, Inspiration.SearchQuoteNode - This is a result of \"what if?\" thinking. The output is a random quote based on the search criteria from brainyquotes.com. (As long as it is on the site), Inspiration.TeresaNode - This is a result of \"what if?\" thinking. The output is a random Mother Teresa quote from brainyquotes.com, Isolated Pick Model Elements - Pick model elements in desired order of a desired category., Level Element Collector - This collects data for all of the Level elements in the model. Similar to the node on Lunchbox, but this one uses all O.O.B. nodes., List.AllIndicesOf - Given an item, returns the zero-based indices of all its occurrences in the list. If the item cannot be found, an empty list is returned. , List.ArchitecturalAlphabeticalSequence - This creates a list of characters. What's different is we typically exclude I's and O's from our characters so there is a toggle for this., List.Contains - Determines if the given list contains the item or items., List.GetItemIndices - This node searches the input list for the given string or number., List.MergeSublists - This will merge all sublists with or without a character between the strings., List.ReturnItemsPreviousToIndex - This will take an index (or indices) and return the items previous to it. Useful for sums of all items previous., Mullion.SortByDirection - This will sort mullions of a host curtain wall by direction they are facing., OS.CurrentUser - This node retrieves the current user logged in., OS.CurrentUserAppData - This retrieves the current user's appdata location, Output.Clean - This will return a single value or list from one input., Parametric Graphic Scale - This node automates the graphic scale assigned per viewport. The input required is all instances of viewport category. It also requires shared parameters. Visit sixtysecondrevit.blogspot.com for details., Pick Model Elements - This node offers a pick method for selecting elements in Revit., Railing.BalusterCount - This node will count the amout of balusters in a rail element. Only works for single element for now., RemoveListFromList - This node essentially \"subtracts\" the contents of List B from List A to produce a new list with the unique items., Rhythm.3DRoomTags - This node will generate 3D room tags for all rooms in the model. (RFA in extra folder in Dynamo download), Rhythm.3DSpaceTags - This will generate 3D space tags for all spaces in the project., Rhythm.BackupRFADeleter - This node will scan the contents of a driectory and delete backup RFA files that appear with a four digit backup number before the file extension. (eg. Family1.0001.rfa) This is deleting files so please use with caution!, Rhythm.Detail Number by View Name  - Automatically numbers your detail number based on the first two characters of your view name. i.e. A4/... (Requires slash to be present), Rhythm.MassOSMData - This node will mass the OSM data based upon the know heights. If the building doesn't have a height, it will just output the polygon., Rhythm.OverrideInteriorCrop - This node will override the lineweight of the crop region on interior elevations. This node would not be possible without the power of the Dynamo community. Specifically Danny Jones with Clark Patterson Lee, Rhythm.PercentGlazingByOrientation - This node was show at RTCNA2015 to optimize your workflows. It reports the window to wall % by direction the wall faces., Rhythm.RenumberGridsByCurve - This node will renumber grids in order of curve drawn through them. Select either letters or numbers. (Alphanumeric coming soon), Rhythm.RenumberRoomsByCurve - This node will renumber rooms along a curve path. This was developed through the guidance of WIlliam Wong at case. Considering WeWork bought Case I wanted this node to live somewhere., Rhythm.TextBoxInput - Provides a text box input for users. Allows for multiple strings if needed., Rhythm.Toggle - Toggle that offers two outputs. Created for Dynamo 0.8.1 because of changes to the \"IF\" node, Rhythm.WhatTheNode - This node will let you search dynamonodes.com for the most likely package a node is from. Helps fix \"red\" nodes when users do not have package installed., Room Element Collector - THis will collect data regarding rooms in the active model. Similar to Lunchbox node, but this one does not use python., RoomTag.Host - Retrieves the assoicated room with a room tag., Select Elements By Curve - This will select model elements in order that a curve is drawn through them., SetParameterByName(TypeOrInstance) - Set one of the element's parameters regardless of parameter type or instance., Space.IsPointInside - This will test if a point falls within a space., Space.SetSpaceType - This node will set the space type for the input space., Space.GetSpaceType - This will retrieve the space type of the space as a string., SpaceTag.Host - This obtains the MEP space associated with a given MEP space tag., SpaceType.All - This node will output ALL space types., SpaceType.ByName - This will output a MEP space type based on name search., SquareFeetDropper - This node drops square feet from the pulled area, String.CharacterAtIndex - Get's the character at a given index, String.ElementsModified - THis custom node reports the amount of elements in a list as a phrase., String.FlipReverse - This node flips the string and reverses it. (April Fools '15) Works for 0.8.0 only, added unicode support, String.IndicesOfCharacter - This node gets all the indices of a given character, String.IsUnicode - Determines if input string is a unicode character., String.RemoveAfterGivenCharacter - This will move all characters at and after the given character., String.RemovePriorToCharacter - This will remove all characters prior to the input character. Accepts strings., String.SpecifyDecimalPlaces - This node will take your inout string and number of decimal places to create a new simplified output., String.ToSentenceCase - This node will convert a single string of text to have capitalized sentences. If you need to use this over a list, use List.Map., String.ToTitle - Converts the given string to Title Case., StructuralBeamSystem.Members - Thist will collect the members of the ebeam system., TextElement.ToLower - This node converts a Revit text elemnt to upper directly., TextElement.ToTitle - This node converts a Revit text elemnt to upper directly., TextElement.ToUpper - This node converts a Revit text elemnt to upper directly., UI.UserMessage - This will display a user message once. Until it is either toggled or changed., Unicode.LRE - Start of left-to-right embedding Unicode Character, Unicode.LRM - Left-to-right mark unicode character, Unicode.RLE - Start of right-to-left embedding Unicode Character, Unicode.RLM - Right-to-left mark Unicode character, Unicode.ZWJ - Zero width joiner Unicode Character, Unicode.ZWNJ - Zero width non-joiner Unicode Character, View.ConvertToIndependent - This will convert input dependent views to independent. Thanks to TheRevitKid for the idea!, ViewFamilyType.ByName - Select a view family type given it's name., Viewport.ViewName - This node gets the view name of viewports. There is an issue when \"title on sheet\" is used, so this fixes that., Wall.NorthSouthEastWest - This node determines which direction a wall is facing and groups them by the direction or direction they are closest to., Workset.Create - Creates a workset or worksets from input names.",
            "engine_metadata": "",
            "engine_version": "1.2.0.2690",
            "created": "2016-11-22T00:01:35.914Z",
            "full_dependency_versions": [ "2016.11.21" ],
            "full_dependency_ids": [
              {
                "_id": "54e7add1dcee4dfd26000101",
                "name": "Rhythm"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2016.11.21"
          },
          {
            "_id": "5834b6955af9f3713d0000e5",
            "contains_binaries": true,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-prod/e2d2e0c0-6fde-4ea3-94b0-df65f247398fgregPkg916.zip",
            "contents": "All Elements of Type in Document - All elements of given type in specified document. This works for unopened files and for linked documents., All Framing at Reference Level - Collects all of the structural framing at a specific reference level, All Pipes at Reference Level - This will collect all pipes by their reference level., All Upper - This converts the ase of selected items to UPPER. Inputs require booleans to enable for category., Arrowhead Assigner - This node assings the arrowhead type for all text and keynote tags. There is an input for ones you want to exclude., Ayuda.IsArchi-LabInstalled - This node determines if Archi-Lab is installed. Useful with a toggle., Ayuda.IsClockworkInstalled - This node determines if clockwork is installed. Useful with a toggle., Ayuda.IsSteamNodesInstalled - This node determines if steamnodes is installed. Useful with a toggle.;, Ayuda.ThisOrThat - This node is a toggle between two inputs., CableTray.Space - This node will determine the space a cable tray's center falls within., Collector.Areas - This is an area collector element that utilizes mostly OOTB nodes., Collector.DuctsBySystem - This collects all ducts in the project and organizes them by System Classification, Collector.KeynoteTags - This collects all of the keynote tags in the model. Similar to other nodes, but this doesn't use python., Collector.LabelTypes - This node collects all of the label types for the active family document., Collector.PipesBySystem - This collects all pipes in the project and organizes them by System Classification, Collector.TagTypes - This node collects the tag types in the model., Collector.Viewports - This collects all of the viewports in the model and outputs the name, title on sheet, scale and viewport type., CurtainGrid.AllSegmentCurves - This will return the vertical and horizontal curtain grid segments regardless if hidden or not. Groups by U and V., CurtainGrid.ByElement - Gets the curtain grids by the host element. Seperates into U and V, CurtainGrid.FullCurve - Returns the curves of the input curtain grids. Groups by U and V., CurtainGrid.RemoveSegment - Removes segments from curtain grids. Can't take lists yet. Use with List.Combine., CurtainGrid.RemoveSegmentsFunction - Function to apply to remove segments node, Curve.FromLine - This will translate a line element to a curve., Dash Remover - This node removes the dash at index 2 if it exists. The reason being, NCS states that no dash shall be used., Dimension.IsOverridden - This will report if a dimension has been overridden. , Dimension.LeaderEndPosition - This will return the leader end postion as a point., Dimension.MultiSegmentMembers - This will output all of the members of a multi-segment dimension., Dimension.NumberOfSegments - This will return the number of segments a dimension has. If it is a single dimension, this will return zero., Dimension.Origin - This will return the dimension origin as a point., Dimension.SetAboveValue - This will set the above value of a dimension., Dimension.SetBelowValue - This will set the below value of a dimension., Dimension.TextPosition - This will return the postition of the text as a point., Dimension.ValueString - The displayed value shown for the dimension segment. , Document.BackgroundOpen - This will open the input Revit files in the background., Document.Close - This will close the input Revit document. Offers a boolean toggle to save., Element.AreaLocation - This node will determine what area (area plans) an element is located within. Made possible thanks to clockwork. :), Element.AreaWithTotal - This will get the area of an element if the parameter exists. Will total as well if needed., Element.Category - This node will get the input element(s)' categories, Element.CopyFromDocument - This node allows you to copy elements from a specific document to your current document., Element.GetJoinedElements - This will obtain the elements joined to the input element., Element.GetLevelNameAsString - This retrieves the level name of the input elements as a string. This is in response to a known issue with the get value node., Element.GetMultipleParameterValuesByName - Get the value of multiple parameters from elements. (Seperate parameters with comma), Element.GetParameterValueByName(CaSe iNSeNSiTive) - Get the value of one of the element's parameters. (CaSe iNSeNSiTiVe), Element.OverrideCutColorInView - Overrides the elements cut color in the view., Element.OverrideCutLineweight - Overrides the cut lines of the elements, Element.OverrideProjectionFillColor - This node overrides the fill color of the element in view., Element.OverrideProjectionLineColor - This node overrides the projection line color with the input color value. Useful for annotation., Element.OverrideProjectionLineweight - Overrides the line thickness of projection lines, Element.ParentFamily - This node retrieces the parent family name for each input element., Element.Room - This node takes the input of all elements of category and reports back the associated room per element. Currently tested with casework, furniture and plumbing fixtures., Element.SetMultipleParametersByName - Set multiple (comma seperated) parameters by name., Element.SetParameterByName(CaSe iNSeNSiTiVe) - Set one of the element's parameters. (CaSe iNSeNSiTiVe), Element.SetPinnedStatus - Will set the element to either pinned or not pinned. True is pinned, false is unpinned. For multiple elements use List.Map, Element.Space - This will retrieve the space in which an element is contained. (if available), Element.Type - This retrieves the element type of the given elements. (if available) Similar to others available but no python here., Geometry.SpaceEvenlyWithBuffer - This will take input geometry and space it out in the Y direction with a buffer between, Geometry.ToRevitType - This will convert designscript geometyr into Revit.DB types. Currently tested with curves, nurbs curves and solids., GetParameterValueByName(TypeOrInstance) - Gets a parameter value by name regardless of type or instance., GetParameterValueByNameAsString - Returns paramter value as string. Same effect as lunchbox node, without python., Gmail.ComposeEmail - This node will compose a new email. Useful for notifications regarding a graph concluding. Uses pythons built-in SMTP Library., Gmail.ComposeEmailDetailed - This will compose a detailed email with subject and message., Group.UngroupElements - This will ungroup the input groups and output their elements. Use with care!, Inspiration.BuffettNode - This is a result of \"what if?\" thinking. The output is a random Warren Buffett quote from brainyquotes.com, Inspiration.CarreyNode - This is a result of \"what if?\" thinking. The output is a random Jim Carrey quote from brainyquotes.com, Inspiration.CashNode - This is a result of \"what if?\" thinking. The output is a random Johnny Cash quote from brainyquotes.com, Inspiration.MarleyNode - This is a result of \"what if?\" thinking. The output is a random Bob Marley quote from brainyquotes.com, Inspiration.SearchQuoteNode - This is a result of \"what if?\" thinking. The output is a random quote based on the search criteria from brainyquotes.com. (As long as it is on the site), Inspiration.TeresaNode - This is a result of \"what if?\" thinking. The output is a random Mother Teresa quote from brainyquotes.com, Isolated Pick Model Elements - Pick model elements in desired order of a desired category., Level Element Collector - This collects data for all of the Level elements in the model. Similar to the node on Lunchbox, but this one uses all O.O.B. nodes., List.AllIndicesOf - Given an item, returns the zero-based indices of all its occurrences in the list. If the item cannot be found, an empty list is returned. , List.ArchitecturalAlphabeticalSequence - This creates a list of characters. What's different is we typically exclude I's and O's from our characters so there is a toggle for this., List.Contains - Determines if the given list contains the item or items., List.GetItemIndices - This node searches the input list for the given string or number., List.MergeSublists - This will merge all sublists with or without a character between the strings., List.ReturnItemsPreviousToIndex - This will take an index (or indices) and return the items previous to it. Useful for sums of all items previous., Mullion.SortByDirection - This will sort mullions of a host curtain wall by direction they are facing., OS.CurrentUser - This node retrieves the current user logged in., OS.CurrentUserAppData - This retrieves the current user's appdata location, Output.Clean - This will return a single value or list from one input., Parametric Graphic Scale - This node automates the graphic scale assigned per viewport. The input required is all instances of viewport category. It also requires shared parameters. Visit sixtysecondrevit.blogspot.com for details., Pick Model Elements - This node offers a pick method for selecting elements in Revit., Railing.BalusterCount - This node will count the amout of balusters in a rail element. Only works for single element for now., RemoveListFromList - This node essentially \"subtracts\" the contents of List B from List A to produce a new list with the unique items., Rhythm.3DRoomTags - This node will generate 3D room tags for all rooms in the model. (RFA in extra folder in Dynamo download), Rhythm.3DSpaceTags - This will generate 3D space tags for all spaces in the project., Rhythm.BackupRFADeleter - This node will scan the contents of a driectory and delete backup RFA files that appear with a four digit backup number before the file extension. (eg. Family1.0001.rfa) This is deleting files so please use with caution!, Rhythm.Detail Number by View Name  - Automatically numbers your detail number based on the first two characters of your view name. i.e. A4/... (Requires slash to be present), Rhythm.MassOSMData - This node will mass the OSM data based upon the know heights. If the building doesn't have a height, it will just output the polygon., Rhythm.OverrideInteriorCrop - This node will override the lineweight of the crop region on interior elevations. This node would not be possible without the power of the Dynamo community. Specifically Danny Jones with Clark Patterson Lee, Rhythm.PercentGlazingByOrientation - This node was show at RTCNA2015 to optimize your workflows. It reports the window to wall % by direction the wall faces., Rhythm.RenumberGridsByCurve - This node will renumber grids in order of curve drawn through them. Select either letters or numbers. (Alphanumeric coming soon), Rhythm.RenumberRoomsByCurve - This node will renumber rooms along a curve path. This was developed through the guidance of WIlliam Wong at case. Considering WeWork bought Case I wanted this node to live somewhere., Rhythm.TextBoxInput - Provides a text box input for users. Allows for multiple strings if needed., Rhythm.Toggle - Toggle that offers two outputs. Created for Dynamo 0.8.1 because of changes to the \"IF\" node, Rhythm.WhatTheNode - This node will let you search dynamonodes.com for the most likely package a node is from. Helps fix \"red\" nodes when users do not have package installed., Room Element Collector - THis will collect data regarding rooms in the active model. Similar to Lunchbox node, but this one does not use python., RoomTag.Host - Retrieves the assoicated room with a room tag., Select Elements By Curve - This will select model elements in order that a curve is drawn through them., SetParameterByName(TypeOrInstance) - Set one of the element's parameters regardless of parameter type or instance., Space.IsPointInside - This will test if a point falls within a space., Space.SetSpaceType - This node will set the space type for the input space., Space.GetSpaceType - This will retrieve the space type of the space as a string., SpaceTag.Host - This obtains the MEP space associated with a given MEP space tag., SpaceType.All - This node will output ALL space types., SpaceType.ByName - This will output a MEP space type based on name search., SquareFeetDropper - This node drops square feet from the pulled area, String.CharacterAtIndex - Get's the character at a given index, String.ElementsModified - THis custom node reports the amount of elements in a list as a phrase., String.FlipReverse - This node flips the string and reverses it. (April Fools '15) Works for 0.8.0 only, added unicode support, String.IndicesOfCharacter - This node gets all the indices of a given character, String.IsUnicode - Determines if input string is a unicode character., String.RemoveAfterGivenCharacter - This will move all characters at and after the given character., String.RemovePriorToCharacter - This will remove all characters prior to the input character. Accepts strings., String.SpecifyDecimalPlaces - This node will take your inout string and number of decimal places to create a new simplified output., String.ToSentenceCase - This node will convert a single string of text to have capitalized sentences. If you need to use this over a list, use List.Map., String.ToTitle - Converts the given string to Title Case., StructuralBeamSystem.Members - Thist will collect the members of the ebeam system., TextElement.ToLower - This node converts a Revit text elemnt to upper directly., TextElement.ToTitle - This node converts a Revit text elemnt to upper directly., TextElement.ToUpper - This node converts a Revit text elemnt to upper directly., UI.UserMessage - This will display a user message once. Until it is either toggled or changed., Unicode.LRE - Start of left-to-right embedding Unicode Character, Unicode.LRM - Left-to-right mark unicode character, Unicode.RLE - Start of right-to-left embedding Unicode Character, Unicode.RLM - Right-to-left mark Unicode character, Unicode.ZWJ - Zero width joiner Unicode Character, Unicode.ZWNJ - Zero width non-joiner Unicode Character, View.ConvertToIndependent - This will convert input dependent views to independent. Thanks to TheRevitKid for the idea!, ViewFamilyType.ByName - Select a view family type given it's name., Viewport.ViewName - This node gets the view name of viewports. There is an issue when \"title on sheet\" is used, so this fixes that., Wall.NorthSouthEastWest - This node determines which direction a wall is facing and groups them by the direction or direction they are closest to., Workset.Create - Creates a workset or worksets from input names., Select Grids By Curve - This will select Revit grids by the input Revit curve,",
            "engine_metadata": "",
            "engine_version": "1.2.0.2690",
            "created": "2016-11-22T21:20:21.860Z",
            "full_dependency_versions": [ "2016.11.22" ],
            "full_dependency_ids": [
              {
                "_id": "54e7add1dcee4dfd26000101",
                "name": "Rhythm"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2016.11.22"
          },
          {
            "_id": "5835ff537332da0d2500000c",
            "contains_binaries": true,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-prod/cf8c792d-77c1-4ed8-b7d6-bd252459569egregPkg940.zip",
            "contents": "All Elements of Type in Document - All elements of given type in specified document. This works for unopened files and for linked documents., All Framing at Reference Level - Collects all of the structural framing at a specific reference level, All Pipes at Reference Level - This will collect all pipes by their reference level., All Upper - This converts the ase of selected items to UPPER. Inputs require booleans to enable for category., Arrowhead Assigner - This node assings the arrowhead type for all text and keynote tags. There is an input for ones you want to exclude., Ayuda.IsArchi-LabInstalled - This node determines if Archi-Lab is installed. Useful with a toggle., Ayuda.IsClockworkInstalled - This node determines if clockwork is installed. Useful with a toggle., Ayuda.IsSteamNodesInstalled - This node determines if steamnodes is installed. Useful with a toggle.;, Ayuda.ThisOrThat - This node is a toggle between two inputs., CableTray.Space - This node will determine the space a cable tray's center falls within., Collector.Areas - This is an area collector element that utilizes mostly OOTB nodes., Collector.DuctsBySystem - This collects all ducts in the project and organizes them by System Classification, Collector.KeynoteTags - This collects all of the keynote tags in the model. Similar to other nodes, but this doesn't use python., Collector.LabelTypes - This node collects all of the label types for the active family document., Collector.PipesBySystem - This collects all pipes in the project and organizes them by System Classification, Collector.TagTypes - This node collects the tag types in the model., Collector.Viewports - This collects all of the viewports in the model and outputs the name, title on sheet, scale and viewport type., CurtainGrid.AllSegmentCurves - This will return the vertical and horizontal curtain grid segments regardless if hidden or not. Groups by U and V., CurtainGrid.ByElement - Gets the curtain grids by the host element. Seperates into U and V, CurtainGrid.FullCurve - Returns the curves of the input curtain grids. Groups by U and V., CurtainGrid.RemoveSegment - Removes segments from curtain grids. Can't take lists yet. Use with List.Combine., CurtainGrid.RemoveSegmentsFunction - Function to apply to remove segments node, Curve.FromLine - This will translate a line element to a curve., Dash Remover - This node removes the dash at index 2 if it exists. The reason being, NCS states that no dash shall be used., Dimension.IsOverridden - This will report if a dimension has been overridden. , Dimension.LeaderEndPosition - This will return the leader end postion as a point., Dimension.MultiSegmentMembers - This will output all of the members of a multi-segment dimension., Dimension.NumberOfSegments - This will return the number of segments a dimension has. If it is a single dimension, this will return zero., Dimension.Origin - This will return the dimension origin as a point., Dimension.SetAboveValue - This will set the above value of a dimension., Dimension.SetBelowValue - This will set the below value of a dimension., Dimension.TextPosition - This will return the postition of the text as a point., Dimension.ValueString - The displayed value shown for the dimension segment. , Document.BackgroundOpen - This will open the input Revit files in the background., Document.Close - This will close the input Revit document. Offers a boolean toggle to save., Element.AreaLocation - This node will determine what area (area plans) an element is located within. Made possible thanks to clockwork. :), Element.AreaWithTotal - This will get the area of an element if the parameter exists. Will total as well if needed., Element.Category - This node will get the input element(s)' categories, Element.CopyFromDocument - This node allows you to copy elements from a specific document to your current document., Element.GetJoinedElements - This will obtain the elements joined to the input element., Element.GetLevelNameAsString - This retrieves the level name of the input elements as a string. This is in response to a known issue with the get value node., Element.GetMultipleParameterValuesByName - Get the value of multiple parameters from elements. (Seperate parameters with comma), Element.GetParameterValueByName(CaSe iNSeNSiTive) - Get the value of one of the element's parameters. (CaSe iNSeNSiTiVe), Element.OverrideCutColorInView - Overrides the elements cut color in the view., Element.OverrideCutLineweight - Overrides the cut lines of the elements, Element.OverrideProjectionFillColor - This node overrides the fill color of the element in view., Element.OverrideProjectionLineColor - This node overrides the projection line color with the input color value. Useful for annotation., Element.OverrideProjectionLineweight - Overrides the line thickness of projection lines, Element.ParentFamily - This node retrieces the parent family name for each input element., Element.Room - This node takes the input of all elements of category and reports back the associated room per element. Currently tested with casework, furniture and plumbing fixtures., Element.SetMultipleParametersByName - Set multiple (comma seperated) parameters by name., Element.SetParameterByName(CaSe iNSeNSiTiVe) - Set one of the element's parameters. (CaSe iNSeNSiTiVe), Element.SetPinnedStatus - Will set the element to either pinned or not pinned. True is pinned, false is unpinned. For multiple elements use List.Map, Element.Space - This will retrieve the space in which an element is contained. (if available), Element.Type - This retrieves the element type of the given elements. (if available) Similar to others available but no python here., Geometry.SpaceEvenlyWithBuffer - This will take input geometry and space it out in the Y direction with a buffer between, Geometry.ToRevitType - This will convert designscript geometyr into Revit.DB types. Currently tested with curves, nurbs curves and solids., GetParameterValueByName(TypeOrInstance) - Gets a parameter value by name regardless of type or instance., GetParameterValueByNameAsString - Returns paramter value as string. Same effect as lunchbox node, without python., Gmail.ComposeEmail - This node will compose a new email. Useful for notifications regarding a graph concluding. Uses pythons built-in SMTP Library., Gmail.ComposeEmailDetailed - This will compose a detailed email with subject and message., Group.UngroupElements - This will ungroup the input groups and output their elements. Use with care!, Inspiration.BuffettNode - This is a result of \"what if?\" thinking. The output is a random Warren Buffett quote from brainyquotes.com, Inspiration.CarreyNode - This is a result of \"what if?\" thinking. The output is a random Jim Carrey quote from brainyquotes.com, Inspiration.CashNode - This is a result of \"what if?\" thinking. The output is a random Johnny Cash quote from brainyquotes.com, Inspiration.MarleyNode - This is a result of \"what if?\" thinking. The output is a random Bob Marley quote from brainyquotes.com, Inspiration.SearchQuoteNode - This is a result of \"what if?\" thinking. The output is a random quote based on the search criteria from brainyquotes.com. (As long as it is on the site), Inspiration.TeresaNode - This is a result of \"what if?\" thinking. The output is a random Mother Teresa quote from brainyquotes.com, Isolated Pick Model Elements - Pick model elements in desired order of a desired category., Level Element Collector - This collects data for all of the Level elements in the model. Similar to the node on Lunchbox, but this one uses all O.O.B. nodes., List.AllIndicesOf - Given an item, returns the zero-based indices of all its occurrences in the list. If the item cannot be found, an empty list is returned. , List.ArchitecturalAlphabeticalSequence - This creates a list of characters. What's different is we typically exclude I's and O's from our characters so there is a toggle for this., List.Contains - Determines if the given list contains the item or items., List.GetItemIndices - This node searches the input list for the given string or number., List.MergeSublists - This will merge all sublists with or without a character between the strings., List.ReturnItemsPreviousToIndex - This will take an index (or indices) and return the items previous to it. Useful for sums of all items previous., Mullion.SortByDirection - This will sort mullions of a host curtain wall by direction they are facing., OS.CurrentUser - This node retrieves the current user logged in., OS.CurrentUserAppData - This retrieves the current user's appdata location, Output.Clean - This will return a single value or list from one input., Parametric Graphic Scale - This node automates the graphic scale assigned per viewport. The input required is all instances of viewport category. It also requires shared parameters. Visit sixtysecondrevit.blogspot.com for details., Pick Model Elements - This node offers a pick method for selecting elements in Revit., Railing.BalusterCount - This node will count the amout of balusters in a rail element. Only works for single element for now., RemoveListFromList - This node essentially \"subtracts\" the contents of List B from List A to produce a new list with the unique items., Rhythm.3DRoomTags - This node will generate 3D room tags for all rooms in the model. (RFA in extra folder in Dynamo download), Rhythm.3DSpaceTags - This will generate 3D space tags for all spaces in the project., Rhythm.BackupRFADeleter - This node will scan the contents of a driectory and delete backup RFA files that appear with a four digit backup number before the file extension. (eg. Family1.0001.rfa) This is deleting files so please use with caution!, Rhythm.Detail Number by View Name  - Automatically numbers your detail number based on the first two characters of your view name. i.e. A4/... (Requires slash to be present), Rhythm.MassOSMData - This node will mass the OSM data based upon the know heights. If the building doesn't have a height, it will just output the polygon., Rhythm.OverrideInteriorCrop - This node will override the lineweight of the crop region on interior elevations. This node would not be possible without the power of the Dynamo community. Specifically Danny Jones with Clark Patterson Lee, Rhythm.PercentGlazingByOrientation - This node was show at RTCNA2015 to optimize your workflows. It reports the window to wall % by direction the wall faces., Rhythm.RenumberGridsByCurve - This node will renumber grids in order of curve drawn through them. Select either letters or numbers. (Alphanumeric coming soon), Rhythm.RenumberRoomsByCurve - This node will renumber rooms along a curve path. This was developed through the guidance of WIlliam Wong at case. Considering WeWork bought Case I wanted this node to live somewhere., Rhythm.TextBoxInput - Provides a text box input for users. Allows for multiple strings if needed., Rhythm.Toggle - Toggle that offers two outputs. Created for Dynamo 0.8.1 because of changes to the \"IF\" node, Rhythm.WhatTheNode - This node will let you search dynamonodes.com for the most likely package a node is from. Helps fix \"red\" nodes when users do not have package installed., Room Element Collector - THis will collect data regarding rooms in the active model. Similar to Lunchbox node, but this one does not use python., RoomTag.Host - Retrieves the assoicated room with a room tag., Select Elements By Curve - This will select model elements in order that a curve is drawn through them., Select Grids By Curve - This will select Revit grids by the input Revit curve,, SetParameterByName(TypeOrInstance) - Set one of the element's parameters regardless of parameter type or instance., Space.IsPointInside - This will test if a point falls within a space., Space.SetSpaceType - This node will set the space type for the input space., Space.GetSpaceType - This will retrieve the space type of the space as a string., SpaceTag.Host - This obtains the MEP space associated with a given MEP space tag., SpaceType.All - This node will output ALL space types., SpaceType.ByName - This will output a MEP space type based on name search., SquareFeetDropper - This node drops square feet from the pulled area, String.CharacterAtIndex - Get's the character at a given index, String.ElementsModified - THis custom node reports the amount of elements in a list as a phrase., String.FlipReverse - This node flips the string and reverses it. (April Fools '15) Works for 0.8.0 only, added unicode support, String.IndicesOfCharacter - This node gets all the indices of a given character, String.IsUnicode - Determines if input string is a unicode character., String.RemoveAfterGivenCharacter - This will move all characters at and after the given character., String.RemovePriorToCharacter - This will remove all characters prior to the input character. Accepts strings., String.SpecifyDecimalPlaces - This node will take your inout string and number of decimal places to create a new simplified output., String.ToSentenceCase - This node will convert a single string of text to have capitalized sentences. If you need to use this over a list, use List.Map., String.ToTitle - Converts the given string to Title Case., StructuralBeamSystem.Members - Thist will collect the members of the ebeam system., TextElement.ToLower - This node converts a Revit text elemnt to upper directly., TextElement.ToTitle - This node converts a Revit text elemnt to upper directly., TextElement.ToUpper - This node converts a Revit text elemnt to upper directly., UI.UserMessage - This will display a user message once. Until it is either toggled or changed., Unicode.LRE - Start of left-to-right embedding Unicode Character, Unicode.LRM - Left-to-right mark unicode character, Unicode.RLE - Start of right-to-left embedding Unicode Character, Unicode.RLM - Right-to-left mark Unicode character, Unicode.ZWJ - Zero width joiner Unicode Character, Unicode.ZWNJ - Zero width non-joiner Unicode Character, View.ConvertToIndependent - This will convert input dependent views to independent. Thanks to TheRevitKid for the idea!, ViewFamilyType.ByName - Select a view family type given it's name., Viewport.ViewName - This node gets the view name of viewports. There is an issue when \"title on sheet\" is used, so this fixes that., Wall.NorthSouthEastWest - This node determines which direction a wall is facing and groups them by the direction or direction they are closest to., Workset.Create - Creates a workset or worksets from input names., Document.SetStartingView - This will set the starting view for a given document. ONLY WORKS IN ONE DOCUMENT AT A TIME, DraftingView.CreateInDocument - This will create a new drafting view in the given document. ONLY WORKS FOR ONE DOCUMENT AT A TIME",
            "engine_metadata": "",
            "engine_version": "1.2.0.2690",
            "created": "2016-11-23T20:42:59.726Z",
            "full_dependency_versions": [ "2016.11.23" ],
            "full_dependency_ids": [
              {
                "_id": "54e7add1dcee4dfd26000101",
                "name": "Rhythm"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2016.11.23"
          },
          {
            "_id": "583dc75afdef23aa6e00003a",
            "contains_binaries": true,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-prod/643ff0b5-43cb-4ff6-a7ec-9f05dc40cbddgregPkg539.zip",
            "contents": "All Elements of Type in Document - All elements of given type in specified document. This works for unopened files and for linked documents., All Framing at Reference Level - Collects all of the structural framing at a specific reference level, All Pipes at Reference Level - This will collect all pipes by their reference level., All Upper - This converts the ase of selected items to UPPER. Inputs require booleans to enable for category., Arrowhead Assigner - This node assings the arrowhead type for all text and keynote tags. There is an input for ones you want to exclude., Ayuda.IsArchi-LabInstalled - This node determines if Archi-Lab is installed. Useful with a toggle., Ayuda.IsClockworkInstalled - This node determines if clockwork is installed. Useful with a toggle., Ayuda.IsSteamNodesInstalled - This node determines if steamnodes is installed. Useful with a toggle.;, Ayuda.ThisOrThat - This node is a toggle between two inputs., CableTray.Space - This node will determine the space a cable tray's center falls within., Collector.Areas - This is an area collector element that utilizes mostly OOTB nodes., Collector.DuctsBySystem - This collects all ducts in the project and organizes them by System Classification, Collector.KeynoteTags - This collects all of the keynote tags in the model. Similar to other nodes, but this doesn't use python., Collector.LabelTypes - This node collects all of the label types for the active family document., Collector.PipesBySystem - This collects all pipes in the project and organizes them by System Classification, Collector.TagTypes - This node collects the tag types in the model., Collector.Viewports - This collects all of the viewports in the model and outputs the name, title on sheet, scale and viewport type., CurtainGrid.AllSegmentCurves - This will return the vertical and horizontal curtain grid segments regardless if hidden or not. Groups by U and V., CurtainGrid.ByElement - Gets the curtain grids by the host element. Seperates into U and V, CurtainGrid.FullCurve - Returns the curves of the input curtain grids. Groups by U and V., CurtainGrid.RemoveSegment - Removes segments from curtain grids. Can't take lists yet. Use with List.Combine., CurtainGrid.RemoveSegmentsFunction - Function to apply to remove segments node, Curve.FromLine - This will translate a line element to a curve., Dash Remover - This node removes the dash at index 2 if it exists. The reason being, NCS states that no dash shall be used., Dimension.IsOverridden - This will report if a dimension has been overridden. , Dimension.LeaderEndPosition - This will return the leader end postion as a point., Dimension.MultiSegmentMembers - This will output all of the members of a multi-segment dimension., Dimension.NumberOfSegments - This will return the number of segments a dimension has. If it is a single dimension, this will return zero., Dimension.Origin - This will return the dimension origin as a point., Dimension.SetAboveValue - This will set the above value of a dimension., Dimension.SetBelowValue - This will set the below value of a dimension., Dimension.TextPosition - This will return the postition of the text as a point., Dimension.ValueString - The displayed value shown for the dimension segment. , Document.BackgroundOpen - This will open the input Revit files in the background., Document.Close - This will close the input Revit document. Offers a boolean toggle to save., Document.SetStartingView - This will set the starting view for a given document. ONLY WORKS IN ONE DOCUMENT AT A TIME, DraftingView.CreateInDocument - This will create a new drafting view in the given document. ONLY WORKS FOR ONE DOCUMENT AT A TIME, Element.AreaLocation - This node will determine what area (area plans) an element is located within. Made possible thanks to clockwork. :), Element.AreaWithTotal - This will get the area of an element if the parameter exists. Will total as well if needed., Element.Category - This node will get the input element(s)' categories, Element.CopyFromDocument - This node allows you to copy elements from a specific document to your current document., Element.GetJoinedElements - This will obtain the elements joined to the input element., Element.GetLevelNameAsString - This retrieves the level name of the input elements as a string. This is in response to a known issue with the get value node., Element.GetMultipleParameterValuesByName - Get the value of multiple parameters from elements. (Seperate parameters with comma), Element.GetParameterValueByName(CaSe iNSeNSiTive) - Get the value of one of the element's parameters. (CaSe iNSeNSiTiVe), Element.OverrideCutColorInView - Overrides the elements cut color in the view., Element.OverrideCutLineweight - Overrides the cut lines of the elements, Element.OverrideProjectionFillColor - This node overrides the fill color of the element in view., Element.OverrideProjectionLineColor - This node overrides the projection line color with the input color value. Useful for annotation., Element.OverrideProjectionLineweight - Overrides the line thickness of projection lines, Element.ParentFamily - This node retrieces the parent family name for each input element., Element.Room - This node takes the input of all elements of category and reports back the associated room per element. Currently tested with casework, furniture and plumbing fixtures., Element.SetMultipleParametersByName - Set multiple (comma seperated) parameters by name., Element.SetParameterByName(CaSe iNSeNSiTiVe) - Set one of the element's parameters. (CaSe iNSeNSiTiVe), Element.SetPinnedStatus - Will set the element to either pinned or not pinned. True is pinned, false is unpinned. For multiple elements use List.Map, Element.Space - This will retrieve the space in which an element is contained. (if available), Element.Type - This retrieves the element type of the given elements. (if available) Similar to others available but no python here., Geometry.SpaceEvenlyWithBuffer - This will take input geometry and space it out in the Y direction with a buffer between, Geometry.ToRevitType - This will convert designscript geometyr into Revit.DB types. Currently tested with curves, nurbs curves and solids., GetParameterValueByName(TypeOrInstance) - Gets a parameter value by name regardless of type or instance., GetParameterValueByNameAsString - Returns paramter value as string. Same effect as lunchbox node, without python., Gmail.ComposeEmail - This node will compose a new email. Useful for notifications regarding a graph concluding. Uses pythons built-in SMTP Library., Gmail.ComposeEmailDetailed - This will compose a detailed email with subject and message., Group.UngroupElements - This will ungroup the input groups and output their elements. Use with care!, Inspiration.BuffettNode - This is a result of \"what if?\" thinking. The output is a random Warren Buffett quote from brainyquotes.com, Inspiration.CarreyNode - This is a result of \"what if?\" thinking. The output is a random Jim Carrey quote from brainyquotes.com, Inspiration.CashNode - This is a result of \"what if?\" thinking. The output is a random Johnny Cash quote from brainyquotes.com, Inspiration.MarleyNode - This is a result of \"what if?\" thinking. The output is a random Bob Marley quote from brainyquotes.com, Inspiration.SearchQuoteNode - This is a result of \"what if?\" thinking. The output is a random quote based on the search criteria from brainyquotes.com. (As long as it is on the site), Inspiration.TeresaNode - This is a result of \"what if?\" thinking. The output is a random Mother Teresa quote from brainyquotes.com, Isolated Pick Model Elements(ordered) - Pick model elements in desired order of a desired category., Level Element Collector - This collects data for all of the Level elements in the model. Similar to the node on Lunchbox, but this one uses all O.O.B. nodes., List.AllIndicesOf - Given an item, returns the zero-based indices of all its occurrences in the list. If the item cannot be found, an empty list is returned. , List.ArchitecturalAlphabeticalSequence - This creates a list of characters. What's different is we typically exclude I's and O's from our characters so there is a toggle for this., List.Contains - Determines if the given list contains the item or items., List.GetItemIndices - This node searches the input list for the given string or number., List.MergeSublists - This will merge all sublists with or without a character between the strings., List.ReturnItemsPreviousToIndex - This will take an index (or indices) and return the items previous to it. Useful for sums of all items previous., Mullion.SortByDirection - This will sort mullions of a host curtain wall by direction they are facing., OS.CurrentUser - This node retrieves the current user logged in., OS.CurrentUserAppData - This retrieves the current user's appdata location, Output.Clean - This will return a single value or list from one input., Parametric Graphic Scale - This node automates the graphic scale assigned per viewport. The input required is all instances of viewport category. It also requires shared parameters. Visit sixtysecondrevit.blogspot.com for details., Pick Model Elements - This node offers a pick method for selecting elements in Revit., Railing.BalusterCount - This node will count the amout of balusters in a rail element. Only works for single element for now., RemoveListFromList - This node essentially \"subtracts\" the contents of List B from List A to produce a new list with the unique items., Rhythm.3DRoomTags - This node will generate 3D room tags for all rooms in the model. (RFA in extra folder in Dynamo download), Rhythm.3DSpaceTags - This will generate 3D space tags for all spaces in the project., Rhythm.BackupRFADeleter - This node will scan the contents of a driectory and delete backup RFA files that appear with a four digit backup number before the file extension. (eg. Family1.0001.rfa) This is deleting files so please use with caution!, Rhythm.Detail Number by View Name  - Automatically numbers your detail number based on the first two characters of your view name. i.e. A4/... (Requires slash to be present), Rhythm.MassOSMData - This node will mass the OSM data based upon the know heights. If the building doesn't have a height, it will just output the polygon., Rhythm.OverrideInteriorCrop - This node will override the lineweight of the crop region on interior elevations. This node would not be possible without the power of the Dynamo community. Specifically Danny Jones with Clark Patterson Lee, Rhythm.PercentGlazingByOrientation - This node was show at RTCNA2015 to optimize your workflows. It reports the window to wall % by direction the wall faces., Rhythm.RenumberGridsByCurve - This node will renumber grids in order of curve drawn through them. Select either letters or numbers. (Alphanumeric coming soon), Rhythm.RenumberRoomsByCurve - This node will renumber rooms along a curve path. This was developed through the guidance of WIlliam Wong at case. Considering WeWork bought Case I wanted this node to live somewhere., Rhythm.TextBoxInput - Provides a text box input for users. Allows for multiple strings if needed., Rhythm.Toggle - Toggle that offers two outputs. Created for Dynamo 0.8.1 because of changes to the \"IF\" node, Rhythm.WhatTheNode - This node will let you search dynamonodes.com for the most likely package a node is from. Helps fix \"red\" nodes when users do not have package installed., Room Element Collector - THis will collect data regarding rooms in the active model. Similar to Lunchbox node, but this one does not use python., RoomTag.Host - Retrieves the assoicated room with a room tag., Select Elements By Curve - This will select model elements in order that a curve is drawn through them., Select Grids By Curve - This will select Revit grids by the input Revit curve,, SetParameterByName(TypeOrInstance) - Set one of the element's parameters regardless of parameter type or instance., Space.IsPointInside - This will test if a point falls within a space., Space.SetSpaceType - This node will set the space type for the input space., Space.GetSpaceType - This will retrieve the space type of the space as a string., SpaceTag.Host - This obtains the MEP space associated with a given MEP space tag., SpaceType.All - This node will output ALL space types., SpaceType.ByName - This will output a MEP space type based on name search., SquareFeetDropper - This node drops square feet from the pulled area, String.CharacterAtIndex - Get's the character at a given index, String.ElementsModified - THis custom node reports the amount of elements in a list as a phrase., String.FlipReverse - This node flips the string and reverses it. (April Fools '15) Works for 0.8.0 only, added unicode support, String.IndicesOfCharacter - This node gets all the indices of a given character, String.IsUnicode - Determines if input string is a unicode character., String.RemoveAfterGivenCharacter - This will move all characters at and after the given character., String.RemovePriorToCharacter - This will remove all characters prior to the input character. Accepts strings., String.SpecifyDecimalPlaces - This node will take your inout string and number of decimal places to create a new simplified output., String.ToSentenceCase - This node will convert a single string of text to have capitalized sentences. If you need to use this over a list, use List.Map., String.ToTitle - Converts the given string to Title Case., StructuralBeamSystem.Members - Thist will collect the members of the ebeam system., TextElement.ToLower - This node converts a Revit text elemnt to upper directly., TextElement.ToTitle - This node converts a Revit text elemnt to upper directly., TextElement.ToUpper - This node converts a Revit text elemnt to upper directly., UI.UserMessage - This will display a user message once. Until it is either toggled or changed., Unicode.LRE - Start of left-to-right embedding Unicode Character, Unicode.LRM - Left-to-right mark unicode character, Unicode.RLE - Start of right-to-left embedding Unicode Character, Unicode.RLM - Right-to-left mark Unicode character, Unicode.ZWJ - Zero width joiner Unicode Character, Unicode.ZWNJ - Zero width non-joiner Unicode Character, View.ConvertToIndependent - This will convert input dependent views to independent. Thanks to TheRevitKid for the idea!, ViewFamilyType.ByName - Select a view family type given it's name., Viewport.ViewName - This node gets the view name of viewports. There is an issue when \"title on sheet\" is used, so this fixes that., Wall.NorthSouthEastWest - This node determines which direction a wall is facing and groups them by the direction or direction they are closest to., Workset.Create - Creates a workset or worksets from input names., Isolated Pick Model Elements - This allows a multiple selection of elements of specified category.",
            "engine_metadata": "",
            "engine_version": "1.2.1.3083",
            "created": "2016-11-29T18:22:18.360Z",
            "full_dependency_versions": [ "2016.11.28" ],
            "full_dependency_ids": [
              {
                "_id": "54e7add1dcee4dfd26000101",
                "name": "Rhythm"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2016.11.28"
          },
          {
            "_id": "583f3858fdef23aa6e00004b",
            "contains_binaries": true,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-prod/007aa031-4025-4061-9a1b-7893e9c3b522gregPkg658.zip",
            "contents": "All Elements of Type in Document - All elements of given type in specified document. This works for unopened files and for linked documents., All Framing at Reference Level - Collects all of the structural framing at a specific reference level, All Pipes at Reference Level - This will collect all pipes by their reference level., All Upper - This converts the ase of selected items to UPPER. Inputs require booleans to enable for category., Arrowhead Assigner - This node assings the arrowhead type for all text and keynote tags. There is an input for ones you want to exclude., Ayuda.IsArchi-LabInstalled - This node determines if Archi-Lab is installed. Useful with a toggle., Ayuda.IsClockworkInstalled - This node determines if clockwork is installed. Useful with a toggle., Ayuda.IsSteamNodesInstalled - This node determines if steamnodes is installed. Useful with a toggle.;, Ayuda.ThisOrThat - This node is a toggle between two inputs., CableTray.Space - This node will determine the space a cable tray's center falls within., Collector.Areas - This is an area collector element that utilizes mostly OOTB nodes., Collector.DuctsBySystem - This collects all ducts in the project and organizes them by System Classification, Collector.KeynoteTags - This collects all of the keynote tags in the model. Similar to other nodes, but this doesn't use python., Collector.LabelTypes - This node collects all of the label types for the active family document., Collector.PipesBySystem - This collects all pipes in the project and organizes them by System Classification, Collector.TagTypes - This node collects the tag types in the model., Collector.Viewports - This collects all of the viewports in the model and outputs the name, title on sheet, scale and viewport type., CurtainGrid.AllSegmentCurves - This will return the vertical and horizontal curtain grid segments regardless if hidden or not. Groups by U and V., CurtainGrid.ByElement - Gets the curtain grids by the host element. Seperates into U and V, CurtainGrid.FullCurve - Returns the curves of the input curtain grids. Groups by U and V., CurtainGrid.RemoveSegment - Removes segments from curtain grids. Can't take lists yet. Use with List.Combine., CurtainGrid.RemoveSegmentsFunction - Function to apply to remove segments node, Curve.FromLine - This will translate a line element to a curve., Dash Remover - This node removes the dash at index 2 if it exists. The reason being, NCS states that no dash shall be used., Dimension.IsOverridden - This will report if a dimension has been overridden. , Dimension.LeaderEndPosition - This will return the leader end postion as a point., Dimension.MultiSegmentMembers - This will output all of the members of a multi-segment dimension., Dimension.NumberOfSegments - This will return the number of segments a dimension has. If it is a single dimension, this will return zero., Dimension.Origin - This will return the dimension origin as a point., Dimension.SetAboveValue - This will set the above value of a dimension., Dimension.SetBelowValue - This will set the below value of a dimension., Dimension.TextPosition - This will return the postition of the text as a point., Dimension.ValueString - The displayed value shown for the dimension segment. , Document.BackgroundOpen - This will open the input Revit files in the background., Document.Close - This will close the input Revit document. Offers a boolean toggle to save., Document.SetStartingView - This will set the starting view for a given document. ONLY WORKS IN ONE DOCUMENT AT A TIME, DraftingView.CreateInDocument - This will create a new drafting view in the given document. ONLY WORKS FOR ONE DOCUMENT AT A TIME, Element.AreaLocation - This node will determine what area (area plans) an element is located within. Made possible thanks to clockwork. :), Element.AreaWithTotal - This will get the area of an element if the parameter exists. Will total as well if needed., Element.Category - This node will get the input element(s)' categories, Element.CopyFromDocument - This node allows you to copy elements from a specific document to your current document., Element.GetJoinedElements - This will obtain the elements joined to the input element., Element.GetLevelNameAsString - This retrieves the level name of the input elements as a string. This is in response to a known issue with the get value node., Element.GetMultipleParameterValuesByName - Get the value of multiple parameters from elements. (Seperate parameters with comma), Element.GetParameterValueByName(CaSe iNSeNSiTive) - Get the value of one of the element's parameters. (CaSe iNSeNSiTiVe), Element.OverrideCutColorInView - Overrides the elements cut color in the view., Element.OverrideCutLineweight - Overrides the cut lines of the elements, Element.OverrideProjectionFillColor - This node overrides the fill color of the element in view., Element.OverrideProjectionLineColor - This node overrides the projection line color with the input color value. Useful for annotation., Element.OverrideProjectionLineweight - Overrides the line thickness of projection lines, Element.ParentFamily - This node retrieces the parent family name for each input element., Element.Room - This node takes the input of all elements of category and reports back the associated room per element. Currently tested with casework, furniture and plumbing fixtures., Element.SetMultipleParametersByName - Set multiple (comma seperated) parameters by name., Element.SetParameterByName(CaSe iNSeNSiTiVe) - Set one of the element's parameters. (CaSe iNSeNSiTiVe), Element.SetPinnedStatus - Will set the element to either pinned or not pinned. True is pinned, false is unpinned. For multiple elements use List.Map, Element.Space - This will retrieve the space in which an element is contained. (if available), Element.Type - This retrieves the element type of the given elements. (if available) Similar to others available but no python here., Geometry.SpaceEvenlyWithBuffer - This will take input geometry and space it out in the Y direction with a buffer between, Geometry.ToRevitType - This will convert designscript geometyr into Revit.DB types. Currently tested with curves, nurbs curves and solids., GetParameterValueByName(TypeOrInstance) - Gets a parameter value by name regardless of type or instance., GetParameterValueByNameAsString - Returns paramter value as string. Same effect as lunchbox node, without python., Gmail.ComposeEmail - This node will compose a new email. Useful for notifications regarding a graph concluding. Uses pythons built-in SMTP Library., Gmail.ComposeEmailDetailed - This will compose a detailed email with subject and message., Group.UngroupElements - This will ungroup the input groups and output their elements. Use with care!, Inspiration.BuffettNode - This is a result of \"what if?\" thinking. The output is a random Warren Buffett quote from brainyquotes.com, Inspiration.CarreyNode - This is a result of \"what if?\" thinking. The output is a random Jim Carrey quote from brainyquotes.com, Inspiration.CashNode - This is a result of \"what if?\" thinking. The output is a random Johnny Cash quote from brainyquotes.com, Inspiration.MarleyNode - This is a result of \"what if?\" thinking. The output is a random Bob Marley quote from brainyquotes.com, Inspiration.SearchQuoteNode - This is a result of \"what if?\" thinking. The output is a random quote based on the search criteria from brainyquotes.com. (As long as it is on the site), Inspiration.TeresaNode - This is a result of \"what if?\" thinking. The output is a random Mother Teresa quote from brainyquotes.com, Isolated Pick Model Elements(ordered) - Pick model elements in desired order of a desired category., Isolated Pick Model Elements - This allows a multiple selection of elements of specified category., Level Element Collector - This collects data for all of the Level elements in the model. Similar to the node on Lunchbox, but this one uses all O.O.B. nodes., List.AllIndicesOf - Given an item, returns the zero-based indices of all its occurrences in the list. If the item cannot be found, an empty list is returned. , List.ArchitecturalAlphabeticalSequence - This creates a list of characters. What's different is we typically exclude I's and O's from our characters so there is a toggle for this., List.Contains - Determines if the given list contains the item or items., List.GetItemIndices - This node searches the input list for the given string or number., List.MergeSublists - This will merge all sublists with or without a character between the strings., List.ReturnItemsPreviousToIndex - This will take an index (or indices) and return the items previous to it. Useful for sums of all items previous., Mullion.SortByDirection - This will sort mullions of a host curtain wall by direction they are facing., OS.CurrentUser - This node retrieves the current user logged in., OS.CurrentUserAppData - This retrieves the current user's appdata location, Output.Clean - This will return a single value or list from one input., Parametric Graphic Scale - This node automates the graphic scale assigned per viewport. The input required is all instances of viewport category. It also requires shared parameters. Visit sixtysecondrevit.blogspot.com for details., Pick Model Elements - This node offers a pick method for selecting elements in Revit., Railing.BalusterCount - This node will count the amout of balusters in a rail element. Only works for single element for now., RemoveListFromList - This node essentially \"subtracts\" the contents of List B from List A to produce a new list with the unique items., Rhythm.3DRoomTags - This node will generate 3D room tags for all rooms in the model. (RFA in extra folder in Dynamo download), Rhythm.3DSpaceTags - This will generate 3D space tags for all spaces in the project., Rhythm.BackupRFADeleter - This node will scan the contents of a driectory and delete backup RFA files that appear with a four digit backup number before the file extension. (eg. Family1.0001.rfa) This is deleting files so please use with caution!, Rhythm.Detail Number by View Name  - Automatically numbers your detail number based on the first two characters of your view name. i.e. A4/... (Requires slash to be present), Rhythm.MassOSMData - This node will mass the OSM data based upon the know heights. If the building doesn't have a height, it will just output the polygon., Rhythm.OverrideInteriorCrop - This node will override the lineweight of the crop region on interior elevations. This node would not be possible without the power of the Dynamo community. Specifically Danny Jones with Clark Patterson Lee, Rhythm.PercentGlazingByOrientation - This node was show at RTCNA2015 to optimize your workflows. It reports the window to wall % by direction the wall faces., Rhythm.RenumberGridsByCurve - This node will renumber grids in order of curve drawn through them. Select either letters or numbers. (Alphanumeric coming soon), Rhythm.RenumberRoomsByCurve - This node will renumber rooms along a curve path. This was developed through the guidance of WIlliam Wong at case. Considering WeWork bought Case I wanted this node to live somewhere., Rhythm.TextBoxInput - Provides a text box input for users. Allows for multiple strings if needed., Rhythm.Toggle - Toggle that offers two outputs. Created for Dynamo 0.8.1 because of changes to the \"IF\" node, Rhythm.WhatTheNode - This node will let you search dynamonodes.com for the most likely package a node is from. Helps fix \"red\" nodes when users do not have package installed., Room Element Collector - THis will collect data regarding rooms in the active model. Similar to Lunchbox node, but this one does not use python., RoomTag.Host - Retrieves the assoicated room with a room tag., Select Elements By Curve - This will select model elements in order that a curve is drawn through them., Select Grids By Curve - This will select Revit grids by the input Revit curve,, SetParameterByName(TypeOrInstance) - Set one of the element's parameters regardless of parameter type or instance., Space.IsPointInside - This will test if a point falls within a space., Space.SetSpaceType - This node will set the space type for the input space., Space.GetSpaceType - This will retrieve the space type of the space as a string., SpaceTag.Host - This obtains the MEP space associated with a given MEP space tag., SpaceType.All - This node will output ALL space types., SpaceType.ByName - This will output a MEP space type based on name search., SquareFeetDropper - This node drops square feet from the pulled area, String.CharacterAtIndex - Get's the character at a given index, String.ElementsModified - THis custom node reports the amount of elements in a list as a phrase., String.FlipReverse - This node flips the string and reverses it. (April Fools '15) Works for 0.8.0 only, added unicode support, String.IndicesOfCharacter - This node gets all the indices of a given character, String.IsUnicode - Determines if input string is a unicode character., String.RemoveAfterGivenCharacter - This will move all characters at and after the given character., String.RemovePriorToCharacter - This will remove all characters prior to the input character. Accepts strings., String.SpecifyDecimalPlaces - This node will take your inout string and number of decimal places to create a new simplified output., String.ToSentenceCase - This node will convert a single string of text to have capitalized sentences. If you need to use this over a list, use List.Map., String.ToTitle - Converts the given string to Title Case., StructuralBeamSystem.Members - Thist will collect the members of the ebeam system., TextElement.ToLower - This node converts a Revit text elemnt to upper directly., TextElement.ToTitle - This node converts a Revit text elemnt to upper directly., TextElement.ToUpper - This node converts a Revit text elemnt to upper directly., UI.UserMessage - This will display a user message once. Until it is either toggled or changed., Unicode.LRE - Start of left-to-right embedding Unicode Character, Unicode.LRM - Left-to-right mark unicode character, Unicode.RLE - Start of right-to-left embedding Unicode Character, Unicode.RLM - Right-to-left mark Unicode character, Unicode.ZWJ - Zero width joiner Unicode Character, Unicode.ZWNJ - Zero width non-joiner Unicode Character, View.ConvertToIndependent - This will convert input dependent views to independent. Thanks to TheRevitKid for the idea!, ViewFamilyType.ByName - Select a view family type given it's name., Viewport.ViewName - This node gets the view name of viewports. There is an issue when \"title on sheet\" is used, so this fixes that., Wall.NorthSouthEastWest - This node determines which direction a wall is facing and groups them by the direction or direction they are closest to., Workset.Create - Creates a workset or worksets from input names.",
            "engine_metadata": "",
            "engine_version": "1.2.1.3083",
            "created": "2016-11-30T20:36:40.873Z",
            "full_dependency_versions": [ "2016.11.29" ],
            "full_dependency_ids": [
              {
                "_id": "54e7add1dcee4dfd26000101",
                "name": "Rhythm"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2016.11.29"
          },
          {
            "_id": "58458daefdef23aa6e00007d",
            "contains_binaries": true,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-prod/70a22f3e-9b2c-4d34-bca4-32e79bd0673bgregPkg87.zip",
            "contents": "All Elements of Type in Document - All elements of given type in specified document. This works for unopened files and for linked documents., All Framing at Reference Level - Collects all of the structural framing at a specific reference level, All Pipes at Reference Level - This will collect all pipes by their reference level., All Upper - This converts the ase of selected items to UPPER. Inputs require booleans to enable for category., Arrowhead Assigner - This node assings the arrowhead type for all text and keynote tags. There is an input for ones you want to exclude., Ayuda.IsArchi-LabInstalled - This node determines if Archi-Lab is installed. Useful with a toggle., Ayuda.IsClockworkInstalled - This node determines if clockwork is installed. Useful with a toggle., Ayuda.IsSteamNodesInstalled - This node determines if steamnodes is installed. Useful with a toggle.;, Ayuda.ThisOrThat - This node is a toggle between two inputs., CableTray.Space - This node will determine the space a cable tray's center falls within., Collector.Areas - This is an area collector element that utilizes mostly OOTB nodes., Collector.DuctsBySystem - This collects all ducts in the project and organizes them by System Classification, Collector.KeynoteTags - This collects all of the keynote tags in the model. Similar to other nodes, but this doesn't use python., Collector.LabelTypes - This node collects all of the label types for the active family document., Collector.PipesBySystem - This collects all pipes in the project and organizes them by System Classification, Collector.TagTypes - This node collects the tag types in the model., Collector.Viewports - This collects all of the viewports in the model and outputs the name, title on sheet, scale and viewport type., CurtainGrid.AllSegmentCurves - This will return the vertical and horizontal curtain grid segments regardless if hidden or not. Groups by U and V., CurtainGrid.ByElement - Gets the curtain grids by the host element. Seperates into U and V, CurtainGrid.FullCurve - Returns the curves of the input curtain grids. Groups by U and V., CurtainGrid.RemoveSegment - Removes segments from curtain grids. Can't take lists yet. Use with List.Combine., CurtainGrid.RemoveSegmentsFunction - Function to apply to remove segments node, Curve.FromLine - This will translate a line element to a curve., Dash Remover - This node removes the dash at index 2 if it exists. The reason being, NCS states that no dash shall be used., Dimension.IsOverridden - This will report if a dimension has been overridden. , Dimension.LeaderEndPosition - This will return the leader end postion as a point., Dimension.MultiSegmentMembers - This will output all of the members of a multi-segment dimension., Dimension.NumberOfSegments - This will return the number of segments a dimension has. If it is a single dimension, this will return zero., Dimension.Origin - This will return the dimension origin as a point., Dimension.SetAboveValue - This will set the above value of a dimension., Dimension.SetBelowValue - This will set the below value of a dimension., Dimension.TextPosition - This will return the postition of the text as a point., Dimension.ValueString - The displayed value shown for the dimension segment. , Document.BackgroundOpen - This will open the input Revit files in the background., Document.Close - This will close the input Revit document. Offers a boolean toggle to save., Document.SetStartingView - This will set the starting view for a given document. ONLY WORKS IN ONE DOCUMENT AT A TIME, DraftingView.CreateInDocument - This will create a new drafting view in the given document. ONLY WORKS FOR ONE DOCUMENT AT A TIME, Element.AreaLocation - This node will determine what area (area plans) an element is located within. Made possible thanks to clockwork. :), Element.AreaWithTotal - This will get the area of an element if the parameter exists. Will total as well if needed., Element.Category - This node will get the input element(s)' categories, Element.CopyFromDocument - This node allows you to copy elements from a specific document to your current document., Element.GetJoinedElements - This will obtain the elements joined to the input element., Element.GetLevelNameAsString - This retrieves the level name of the input elements as a string. This is in response to a known issue with the get value node., Element.GetMultipleParameterValuesByName - Get the value of multiple parameters from elements. (Seperate parameters with comma), Element.GetParameterValueByName(CaSe iNSeNSiTive) - Get the value of one of the element's parameters. (CaSe iNSeNSiTiVe), Element.OverrideCutColorInView - Overrides the elements cut color in the view., Element.OverrideCutLineweight - Overrides the cut lines of the elements, Element.OverrideProjectionFillColor - This node overrides the fill color of the element in view., Element.OverrideProjectionLineColor - This node overrides the projection line color with the input color value. Useful for annotation., Element.OverrideProjectionLineweight - Overrides the line thickness of projection lines, Element.ParentFamily - This node retrieces the parent family name for each input element., Element.Room - This node takes the input of all elements of category and reports back the associated room per element. Currently tested with casework, furniture and plumbing fixtures., Element.SetMultipleParametersByName - Set multiple (comma seperated) parameters by name., Element.SetParameterByName(CaSe iNSeNSiTiVe) - Set one of the element's parameters. (CaSe iNSeNSiTiVe), Element.SetPinnedStatus - Will set the element to either pinned or not pinned. True is pinned, false is unpinned. For multiple elements use List.Map, Element.Space - This will retrieve the space in which an element is contained. (if available), Element.Type - This retrieves the element type of the given elements. (if available) Similar to others available but no python here., Geometry.SpaceEvenlyWithBuffer - This will take input geometry and space it out in the Y direction with a buffer between, Geometry.ToRevitType - This will convert designscript geometyr into Revit.DB types. Currently tested with curves, nurbs curves and solids., GetParameterValueByName(TypeOrInstance) - Gets a parameter value by name regardless of type or instance., GetParameterValueByNameAsString - Returns paramter value as string. Same effect as lunchbox node, without python., Gmail.ComposeEmail - This node will compose a new email. Useful for notifications regarding a graph concluding. Uses pythons built-in SMTP Library., Gmail.ComposeEmailDetailed - This will compose a detailed email with subject and message., Group.UngroupElements - This will ungroup the input groups and output their elements. Use with care!, Inspiration.BuffettNode - This is a result of \"what if?\" thinking. The output is a random Warren Buffett quote from brainyquotes.com, Inspiration.CarreyNode - This is a result of \"what if?\" thinking. The output is a random Jim Carrey quote from brainyquotes.com, Inspiration.CashNode - This is a result of \"what if?\" thinking. The output is a random Johnny Cash quote from brainyquotes.com, Inspiration.MarleyNode - This is a result of \"what if?\" thinking. The output is a random Bob Marley quote from brainyquotes.com, Inspiration.SearchQuoteNode - This is a result of \"what if?\" thinking. The output is a random quote based on the search criteria from brainyquotes.com. (As long as it is on the site), Inspiration.TeresaNode - This is a result of \"what if?\" thinking. The output is a random Mother Teresa quote from brainyquotes.com, Isolated Pick Model Elements(ordered) - Pick model elements in desired order of a desired category., Isolated Pick Model Elements - This allows a multiple selection of elements of specified category., Level Element Collector - This collects data for all of the Level elements in the model. Similar to the node on Lunchbox, but this one uses all O.O.B. nodes., List.AllIndicesOf - Given an item, returns the zero-based indices of all its occurrences in the list. If the item cannot be found, an empty list is returned. , List.ArchitecturalAlphabeticalSequence - This creates a list of characters. What's different is we typically exclude I's and O's from our characters so there is a toggle for this., List.Contains - Determines if the given list contains the item or items., List.GetItemIndices - This node searches the input list for the given string or number., List.MergeSublists - This will merge all sublists with or without a character between the strings., List.ReturnItemsPreviousToIndex - This will take an index (or indices) and return the items previous to it. Useful for sums of all items previous., Mullion.SortByDirection - This will sort mullions of a host curtain wall by direction they are facing., OS.CurrentUser - This node retrieves the current user logged in., OS.CurrentUserAppData - This retrieves the current user's appdata location, Output.Clean - This will return a single value or list from one input., Parametric Graphic Scale - This node automates the graphic scale assigned per viewport. The input required is all instances of viewport category. It also requires shared parameters. Visit sixtysecondrevit.blogspot.com for details., Pick Model Elements - This node offers a pick method for selecting elements in Revit., Railing.BalusterCount - This node will count the amout of balusters in a rail element. Only works for single element for now., RemoveListFromList - This node essentially \"subtracts\" the contents of List B from List A to produce a new list with the unique items., Rhythm.3DRoomTags - This node will generate 3D room tags for all rooms in the model. (RFA in extra folder in Dynamo download), Rhythm.3DSpaceTags - This will generate 3D space tags for all spaces in the project., Rhythm.BackupRFADeleter - This node will scan the contents of a driectory and delete backup RFA files that appear with a four digit backup number before the file extension. (eg. Family1.0001.rfa) This is deleting files so please use with caution!, Rhythm.Detail Number by View Name  - Automatically numbers your detail number based on the first two characters of your view name. i.e. A4/... (Requires slash to be present), Rhythm.MassOSMData - This node will mass the OSM data based upon the know heights. If the building doesn't have a height, it will just output the polygon., Rhythm.OverrideInteriorCrop - This node will override the lineweight of the crop region on interior elevations. This node would not be possible without the power of the Dynamo community. Specifically Danny Jones with Clark Patterson Lee, Rhythm.PercentGlazingByOrientation - This node was show at RTCNA2015 to optimize your workflows. It reports the window to wall % by direction the wall faces., Rhythm.RenumberGridsByCurve - This node will renumber grids in order of curve drawn through them. Select either letters or numbers. (Alphanumeric coming soon), Rhythm.RenumberRoomsByCurve - This node will renumber rooms along a curve path. This was developed through the guidance of WIlliam Wong at case. Considering WeWork bought Case I wanted this node to live somewhere., Rhythm.TextBoxInput - Provides a text box input for users. Allows for multiple strings if needed., Rhythm.Toggle - Toggle that offers two outputs. Created for Dynamo 0.8.1 because of changes to the \"IF\" node, Rhythm.WhatTheNode - This node will let you search dynamonodes.com for the most likely package a node is from. Helps fix \"red\" nodes when users do not have package installed., Room Element Collector - THis will collect data regarding rooms in the active model. Similar to Lunchbox node, but this one does not use python., RoomTag.Host - Retrieves the assoicated room with a room tag., Select Elements By Curve - This will select model elements in order that a curve is drawn through them., Select Grids By Curve - This will select Revit grids by the input Revit curve,, SetParameterByName(TypeOrInstance) - Set one of the element's parameters regardless of parameter type or instance., Space.IsPointInside - This will test if a point falls within a space., Space.SetSpaceType - This node will set the space type for the input space., Space.GetSpaceType - This will retrieve the space type of the space as a string., SpaceTag.Host - This obtains the MEP space associated with a given MEP space tag., SpaceType.All - This node will output ALL space types., SpaceType.ByName - This will output a MEP space type based on name search., SquareFeetDropper - This node drops square feet from the pulled area, String.CharacterAtIndex - Get's the character at a given index, String.ElementsModified - THis custom node reports the amount of elements in a list as a phrase., String.FlipReverse - This node flips the string and reverses it. (April Fools '15) Works for 0.8.0 only, added unicode support, String.IndicesOfCharacter - This node gets all the indices of a given character, String.IsUnicode - Determines if input string is a unicode character., String.RemoveAfterGivenCharacter - This will move all characters at and after the given character., String.RemovePriorToCharacter - This will remove all characters prior to the input character. Accepts strings., String.SpecifyDecimalPlaces - This node will take your inout string and number of decimal places to create a new simplified output., String.ToSentenceCase - This node will convert a single string of text to have capitalized sentences. If you need to use this over a list, use List.Map., String.ToTitle - Converts the given string to Title Case., StructuralBeamSystem.Members - Thist will collect the members of the ebeam system., TextElement.ToLower - This node converts a Revit text elemnt to upper directly., TextElement.ToTitle - This node converts a Revit text elemnt to upper directly., TextElement.ToUpper - This node converts a Revit text elemnt to upper directly., UI.UserMessage - This will display a user message once. Until it is either toggled or changed., Unicode.LRE - Start of left-to-right embedding Unicode Character, Unicode.LRM - Left-to-right mark unicode character, Unicode.RLE - Start of right-to-left embedding Unicode Character, Unicode.RLM - Right-to-left mark Unicode character, Unicode.ZWJ - Zero width joiner Unicode Character, Unicode.ZWNJ - Zero width non-joiner Unicode Character, View.ConvertToIndependent - This will convert input dependent views to independent. Thanks to TheRevitKid for the idea!, ViewFamilyType.ByName - Select a view family type given it's name., Viewport.ViewName - This node gets the view name of viewports. There is an issue when \"title on sheet\" is used, so this fixes that., Wall.NorthSouthEastWest - This node determines which direction a wall is facing and groups them by the direction or direction they are closest to., Workset.Create - Creates a workset or worksets from input names.",
            "engine_metadata": "",
            "engine_version": "1.2.1.3083",
            "created": "2016-12-05T15:54:22.745Z",
            "full_dependency_versions": [ "2016.12.5" ],
            "full_dependency_ids": [
              {
                "_id": "54e7add1dcee4dfd26000101",
                "name": "Rhythm"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2016.12.5"
          },
          {
            "_id": "5845eda4fdef23aa6e000086",
            "contains_binaries": true,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-prod/3acf9b5d-109e-4ff0-b1f5-bc81d1389c12gregPkg236.zip",
            "contents": "All Elements of Type in Document - All elements of given type in specified document. This works for unopened files and for linked documents., All Framing at Reference Level - Collects all of the structural framing at a specific reference level, All Pipes at Reference Level - This will collect all pipes by their reference level., All Upper - This converts the ase of selected items to UPPER. Inputs require booleans to enable for category., Arrowhead Assigner - This node assings the arrowhead type for all text and keynote tags. There is an input for ones you want to exclude., Ayuda.IsArchi-LabInstalled - This node determines if Archi-Lab is installed. Useful with a toggle., Ayuda.IsClockworkInstalled - This node determines if clockwork is installed. Useful with a toggle., Ayuda.IsSteamNodesInstalled - This node determines if steamnodes is installed. Useful with a toggle.;, Ayuda.ThisOrThat - This node is a toggle between two inputs., CableTray.Space - This node will determine the space a cable tray's center falls within., Collector.Areas - This is an area collector element that utilizes mostly OOTB nodes., Collector.DuctsBySystem - This collects all ducts in the project and organizes them by System Classification, Collector.KeynoteTags - This collects all of the keynote tags in the model. Similar to other nodes, but this doesn't use python., Collector.LabelTypes - This node collects all of the label types for the active family document., Collector.PipesBySystem - This collects all pipes in the project and organizes them by System Classification, Collector.TagTypes - This node collects the tag types in the model., Collector.Viewports - This collects all of the viewports in the model and outputs the name, title on sheet, scale and viewport type., CurtainGrid.AllSegmentCurves - This will return the vertical and horizontal curtain grid segments regardless if hidden or not. Groups by U and V., CurtainGrid.ByElement - Gets the curtain grids by the host element. Seperates into U and V, CurtainGrid.FullCurve - Returns the curves of the input curtain grids. Groups by U and V., CurtainGrid.RemoveSegment - Removes segments from curtain grids. Can't take lists yet. Use with List.Combine., CurtainGrid.RemoveSegmentsFunction - Function to apply to remove segments node, Curve.FromLine - This will translate a line element to a curve., Dash Remover - This node removes the dash at index 2 if it exists. The reason being, NCS states that no dash shall be used., Dimension.IsOverridden - This will report if a dimension has been overridden. , Dimension.LeaderEndPosition - This will return the leader end postion as a point., Dimension.MultiSegmentMembers - This will output all of the members of a multi-segment dimension., Dimension.NumberOfSegments - This will return the number of segments a dimension has. If it is a single dimension, this will return zero., Dimension.Origin - This will return the dimension origin as a point., Dimension.SetAboveValue - This will set the above value of a dimension., Dimension.SetBelowValue - This will set the below value of a dimension., Dimension.TextPosition - This will return the postition of the text as a point., Dimension.ValueString - The displayed value shown for the dimension segment. , Document.BackgroundOpen - This will open the input Revit files in the background., Document.Close - This will close the input Revit document. Offers a boolean toggle to save., Document.SetStartingView - This will set the starting view for a given document. ONLY WORKS IN ONE DOCUMENT AT A TIME, DraftingView.CreateInDocument - This will create a new drafting view in the given document. ONLY WORKS FOR ONE DOCUMENT AT A TIME, Element.AreaLocation - This node will determine what area (area plans) an element is located within. Made possible thanks to clockwork. :), Element.AreaWithTotal - This will get the area of an element if the parameter exists. Will total as well if needed., Element.Category - This node will get the input element(s)' categories, Element.CopyFromDocument - This node allows you to copy elements from a specific document to your current document., Element.GetJoinedElements - This will obtain the elements joined to the input element., Element.GetLevelNameAsString - This retrieves the level name of the input elements as a string. This is in response to a known issue with the get value node., Element.GetMultipleParameterValuesByName - Get the value of multiple parameters from elements. (Seperate parameters with comma), Element.GetParameterValueByName(CaSe iNSeNSiTive) - Get the value of one of the element's parameters. (CaSe iNSeNSiTiVe), Element.OverrideCutColorInView - Overrides the elements cut color in the view., Element.OverrideCutLineweight - Overrides the cut lines of the elements, Element.OverrideProjectionFillColor - This node overrides the fill color of the element in view., Element.OverrideProjectionLineColor - This node overrides the projection line color with the input color value. Useful for annotation., Element.OverrideProjectionLineweight - Overrides the line thickness of projection lines, Element.ParentFamily - This node retrieces the parent family name for each input element., Element.Room - This node takes the input of all elements of category and reports back the associated room per element. Currently tested with casework, furniture and plumbing fixtures., Element.SetMultipleParametersByName - Set multiple (comma seperated) parameters by name., Element.SetParameterByName(CaSe iNSeNSiTiVe) - Set one of the element's parameters. (CaSe iNSeNSiTiVe), Element.SetPinnedStatus - Will set the element to either pinned or not pinned. True is pinned, false is unpinned. For multiple elements use List.Map, Element.Space - This will retrieve the space in which an element is contained. (if available), Element.Type - This retrieves the element type of the given elements. (if available) Similar to others available but no python here., Geometry.SpaceEvenlyWithBuffer - This will take input geometry and space it out in the Y direction with a buffer between, Geometry.ToRevitType - This will convert designscript geometyr into Revit.DB types. Currently tested with curves, nurbs curves and solids., GetParameterValueByName(TypeOrInstance) - Gets a parameter value by name regardless of type or instance., GetParameterValueByNameAsString - Returns paramter value as string. Same effect as lunchbox node, without python., Gmail.ComposeEmail - This node will compose a new email. Useful for notifications regarding a graph concluding. Uses pythons built-in SMTP Library., Gmail.ComposeEmailDetailed - This will compose a detailed email with subject and message., Group.UngroupElements - This will ungroup the input groups and output their elements. Use with care!, Inspiration.BuffettNode - This is a result of \"what if?\" thinking. The output is a random Warren Buffett quote from brainyquotes.com, Inspiration.CarreyNode - This is a result of \"what if?\" thinking. The output is a random Jim Carrey quote from brainyquotes.com, Inspiration.CashNode - This is a result of \"what if?\" thinking. The output is a random Johnny Cash quote from brainyquotes.com, Inspiration.MarleyNode - This is a result of \"what if?\" thinking. The output is a random Bob Marley quote from brainyquotes.com, Inspiration.SearchQuoteNode - This is a result of \"what if?\" thinking. The output is a random quote based on the search criteria from brainyquotes.com. (As long as it is on the site), Inspiration.TeresaNode - This is a result of \"what if?\" thinking. The output is a random Mother Teresa quote from brainyquotes.com, Isolated Pick Model Elements(ordered) - Pick model elements in desired order of a desired category., Isolated Pick Model Elements - This allows a multiple selection of elements of specified category., Level Element Collector - This collects data for all of the Level elements in the model. Similar to the node on Lunchbox, but this one uses all O.O.B. nodes., List.AllIndicesOf - Given an item, returns the zero-based indices of all its occurrences in the list. If the item cannot be found, an empty list is returned. , List.ArchitecturalAlphabeticalSequence - This creates a list of characters. What's different is we typically exclude I's and O's from our characters so there is a toggle for this., List.Contains - Determines if the given list contains the item or items., List.GetItemIndices - This node searches the input list for the given string or number., List.MergeSublists - This will merge all sublists with or without a character between the strings., List.ReturnItemsPreviousToIndex - This will take an index (or indices) and return the items previous to it. Useful for sums of all items previous., Mullion.SortByDirection - This will sort mullions of a host curtain wall by direction they are facing., OS.CurrentUser - This node retrieves the current user logged in., OS.CurrentUserAppData - This retrieves the current user's appdata location, Output.Clean - This will return a single value or list from one input., Parametric Graphic Scale - This node automates the graphic scale assigned per viewport. The input required is all instances of viewport category. It also requires shared parameters. Visit sixtysecondrevit.blogspot.com for details., Pick Model Elements - This node offers a pick method for selecting elements in Revit., Railing.BalusterCount - This node will count the amout of balusters in a rail element. Only works for single element for now., RemoveListFromList - This node essentially \"subtracts\" the contents of List B from List A to produce a new list with the unique items., Rhythm.3DRoomTags - This node will generate 3D room tags for all rooms in the model. (RFA in extra folder in Dynamo download), Rhythm.3DSpaceTags - This will generate 3D space tags for all spaces in the project., Rhythm.BackupRFADeleter - This node will scan the contents of a driectory and delete backup RFA files that appear with a four digit backup number before the file extension. (eg. Family1.0001.rfa) This is deleting files so please use with caution!, Rhythm.Detail Number by View Name  - Automatically numbers your detail number based on the first two characters of your view name. i.e. A4/... (Requires slash to be present), Rhythm.MassOSMData - This node will mass the OSM data based upon the know heights. If the building doesn't have a height, it will just output the polygon., Rhythm.OverrideInteriorCrop - This node will override the lineweight of the crop region on interior elevations. This node would not be possible without the power of the Dynamo community. Specifically Danny Jones with Clark Patterson Lee, Rhythm.PercentGlazingByOrientation - This node was show at RTCNA2015 to optimize your workflows. It reports the window to wall % by direction the wall faces., Rhythm.RenumberGridsByCurve - This node will renumber grids in order of curve drawn through them. Select either letters or numbers. (Alphanumeric coming soon), Rhythm.RenumberRoomsByCurve - This node will renumber rooms along a curve path. This was developed through the guidance of WIlliam Wong at case. Considering WeWork bought Case I wanted this node to live somewhere., Rhythm.TextBoxInput - Provides a text box input for users. Allows for multiple strings if needed., Rhythm.Toggle - Toggle that offers two outputs. Created for Dynamo 0.8.1 because of changes to the \"IF\" node, Rhythm.WhatTheNode - This node will let you search dynamonodes.com for the most likely package a node is from. Helps fix \"red\" nodes when users do not have package installed., Room Element Collector - THis will collect data regarding rooms in the active model. Similar to Lunchbox node, but this one does not use python., RoomTag.Host - Retrieves the assoicated room with a room tag., Select Elements By Curve - This will select model elements in order that a curve is drawn through them., Select Grids By Curve - This will select Revit grids by the input Revit curve,, SetParameterByName(TypeOrInstance) - Set one of the element's parameters regardless of parameter type or instance., Space.IsPointInside - This will test if a point falls within a space., Space.SetSpaceType - This node will set the space type for the input space., Space.GetSpaceType - This will retrieve the space type of the space as a string., SpaceTag.Host - This obtains the MEP space associated with a given MEP space tag., SpaceType.All - This node will output ALL space types., SpaceType.ByName - This will output a MEP space type based on name search., SquareFeetDropper - This node drops square feet from the pulled area, String.CharacterAtIndex - Get's the character at a given index, String.ElementsModified - THis custom node reports the amount of elements in a list as a phrase., String.FlipReverse - This node flips the string and reverses it. (April Fools '15) Works for 0.8.0 only, added unicode support, String.IndicesOfCharacter - This node gets all the indices of a given character, String.IsUnicode - Determines if input string is a unicode character., String.RemoveAfterGivenCharacter - This will move all characters at and after the given character., String.RemovePriorToCharacter - This will remove all characters prior to the input character. Accepts strings., String.SpecifyDecimalPlaces - This node will take your inout string and number of decimal places to create a new simplified output., String.ToSentenceCase - This node will convert a single string of text to have capitalized sentences. If you need to use this over a list, use List.Map., String.ToTitle - Converts the given string to Title Case., StructuralBeamSystem.Members - Thist will collect the members of the ebeam system., TextElement.ToLower - This node converts a Revit text elemnt to upper directly., TextElement.ToTitle - This node converts a Revit text elemnt to upper directly., TextElement.ToUpper - This node converts a Revit text elemnt to upper directly., UI.UserMessage - This will display a user message once. Until it is either toggled or changed., Unicode.LRE - Start of left-to-right embedding Unicode Character, Unicode.LRM - Left-to-right mark unicode character, Unicode.RLE - Start of right-to-left embedding Unicode Character, Unicode.RLM - Right-to-left mark Unicode character, Unicode.ZWJ - Zero width joiner Unicode Character, Unicode.ZWNJ - Zero width non-joiner Unicode Character, View.ConvertToIndependent - This will convert input dependent views to independent. Thanks to TheRevitKid for the idea!, ViewFamilyType.ByName - Select a view family type given it's name., Viewport.ViewName - This node gets the view name of viewports. There is an issue when \"title on sheet\" is used, so this fixes that., Wall.NorthSouthEastWest - This node determines which direction a wall is facing and groups them by the direction or direction they are closest to., Workset.Create - Creates a workset or worksets from input names., UI.ColorPicker - This node allows the user to choose a color via the Revit API color selection dialog., UI.FilePath - Provides a file path option for use with Dynamo Player.",
            "engine_metadata": "",
            "engine_version": "1.2.1.3083",
            "created": "2016-12-05T22:43:48.160Z",
            "full_dependency_versions": [ "2016.12.6" ],
            "full_dependency_ids": [
              {
                "_id": "54e7add1dcee4dfd26000101",
                "name": "Rhythm"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2016.12.6"
          },
          {
            "_id": "5846fd72fdef23aa6e00008c",
            "contains_binaries": true,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-prod/7677a390-18d9-4daf-b418-e2457837c691gregPkg370.zip",
            "contents": "All Elements of Type in Document - All elements of given type in specified document. This works for unopened files and for linked documents., All Framing at Reference Level - Collects all of the structural framing at a specific reference level, All Pipes at Reference Level - This will collect all pipes by their reference level., All Upper - This converts the ase of selected items to UPPER. Inputs require booleans to enable for category., Arrowhead Assigner - This node assings the arrowhead type for all text and keynote tags. There is an input for ones you want to exclude., Ayuda.IsArchi-LabInstalled - This node determines if Archi-Lab is installed. Useful with a toggle., Ayuda.IsClockworkInstalled - This node determines if clockwork is installed. Useful with a toggle., Ayuda.IsSteamNodesInstalled - This node determines if steamnodes is installed. Useful with a toggle.;, Ayuda.ThisOrThat - This node is a toggle between two inputs., CableTray.Space - This node will determine the space a cable tray's center falls within., Collector.Areas - This is an area collector element that utilizes mostly OOTB nodes., Collector.DuctsBySystem - This collects all ducts in the project and organizes them by System Classification, Collector.KeynoteTags - This collects all of the keynote tags in the model. Similar to other nodes, but this doesn't use python., Collector.LabelTypes - This node collects all of the label types for the active family document., Collector.PipesBySystem - This collects all pipes in the project and organizes them by System Classification, Collector.TagTypes - This node collects the tag types in the model., Collector.Viewports - This collects all of the viewports in the model and outputs the name, title on sheet, scale and viewport type., CurtainGrid.AllSegmentCurves - This will return the vertical and horizontal curtain grid segments regardless if hidden or not. Groups by U and V., CurtainGrid.ByElement - Gets the curtain grids by the host element. Seperates into U and V, CurtainGrid.FullCurve - Returns the curves of the input curtain grids. Groups by U and V., CurtainGrid.RemoveSegment - Removes segments from curtain grids. Can't take lists yet. Use with List.Combine., CurtainGrid.RemoveSegmentsFunction - Function to apply to remove segments node, Curve.FromLine - This will translate a line element to a curve., Dash Remover - This node removes the dash at index 2 if it exists. The reason being, NCS states that no dash shall be used., Dimension.IsOverridden - This will report if a dimension has been overridden. , Dimension.LeaderEndPosition - This will return the leader end postion as a point., Dimension.MultiSegmentMembers - This will output all of the members of a multi-segment dimension., Dimension.NumberOfSegments - This will return the number of segments a dimension has. If it is a single dimension, this will return zero., Dimension.Origin - This will return the dimension origin as a point., Dimension.SetAboveValue - This will set the above value of a dimension., Dimension.SetBelowValue - This will set the below value of a dimension., Dimension.TextPosition - This will return the postition of the text as a point., Dimension.ValueString - The displayed value shown for the dimension segment. , Document.BackgroundOpen - This will open the input Revit files in the background., Document.Close - This will close the input Revit document. Offers a boolean toggle to save., Document.SetStartingView - This will set the starting view for a given document. ONLY WORKS IN ONE DOCUMENT AT A TIME, DraftingView.CreateInDocument - This will create a new drafting view in the given document. ONLY WORKS FOR ONE DOCUMENT AT A TIME, Element.AreaLocation - This node will determine what area (area plans) an element is located within. Made possible thanks to clockwork. :), Element.AreaWithTotal - This will get the area of an element if the parameter exists. Will total as well if needed., Element.Category - This node will get the input element(s)' categories, Element.CopyFromDocument - This node allows you to copy elements from a specific document to your current document., Element.GetJoinedElements - This will obtain the elements joined to the input element., Element.GetLevelNameAsString - This retrieves the level name of the input elements as a string. This is in response to a known issue with the get value node., Element.GetMultipleParameterValuesByName - Get the value of multiple parameters from elements. (Seperate parameters with comma), Element.GetParameterValueByName(CaSe iNSeNSiTive) - Get the value of one of the element's parameters. (CaSe iNSeNSiTiVe), Element.OverrideCutColorInView - Overrides the elements cut color in the view., Element.OverrideCutLineweight - Overrides the cut lines of the elements, Element.OverrideProjectionFillColor - This node overrides the fill color of the element in view., Element.OverrideProjectionLineColor - This node overrides the projection line color with the input color value. Useful for annotation., Element.OverrideProjectionLineweight - Overrides the line thickness of projection lines, Element.ParentFamily - This node retrieces the parent family name for each input element., Element.Room - This node takes the input of all elements of category and reports back the associated room per element. Currently tested with casework, furniture and plumbing fixtures., Element.SetMultipleParametersByName - Set multiple (comma seperated) parameters by name., Element.SetParameterByName(CaSe iNSeNSiTiVe) - Set one of the element's parameters. (CaSe iNSeNSiTiVe), Element.SetPinnedStatus - Will set the element to either pinned or not pinned. True is pinned, false is unpinned. For multiple elements use List.Map, Element.Space - This will retrieve the space in which an element is contained. (if available), Element.Type - This retrieves the element type of the given elements. (if available) Similar to others available but no python here., Geometry.SpaceEvenlyWithBuffer - This will take input geometry and space it out in the Y direction with a buffer between, Geometry.ToRevitType - This will convert designscript geometyr into Revit.DB types. Currently tested with curves, nurbs curves and solids., GetParameterValueByName(TypeOrInstance) - Gets a parameter value by name regardless of type or instance., GetParameterValueByNameAsString - Returns paramter value as string. Same effect as lunchbox node, without python., Gmail.ComposeEmail - This node will compose a new email. Useful for notifications regarding a graph concluding. Uses pythons built-in SMTP Library., Gmail.ComposeEmailDetailed - This will compose a detailed email with subject and message., Group.UngroupElements - This will ungroup the input groups and output their elements. Use with care!, Inspiration.BuffettNode - This is a result of \"what if?\" thinking. The output is a random Warren Buffett quote from brainyquotes.com, Inspiration.CarreyNode - This is a result of \"what if?\" thinking. The output is a random Jim Carrey quote from brainyquotes.com, Inspiration.CashNode - This is a result of \"what if?\" thinking. The output is a random Johnny Cash quote from brainyquotes.com, Inspiration.MarleyNode - This is a result of \"what if?\" thinking. The output is a random Bob Marley quote from brainyquotes.com, Inspiration.SearchQuoteNode - This is a result of \"what if?\" thinking. The output is a random quote based on the search criteria from brainyquotes.com. (As long as it is on the site), Inspiration.TeresaNode - This is a result of \"what if?\" thinking. The output is a random Mother Teresa quote from brainyquotes.com, Isolated Pick Model Elements(ordered) - Pick model elements in desired order of a desired category., Isolated Pick Model Elements - This allows a multiple selection of elements of specified category., Level Element Collector - This collects data for all of the Level elements in the model. Similar to the node on Lunchbox, but this one uses all O.O.B. nodes., List.AllIndicesOf - Given an item, returns the zero-based indices of all its occurrences in the list. If the item cannot be found, an empty list is returned. , List.ArchitecturalAlphabeticalSequence - This creates a list of characters. What's different is we typically exclude I's and O's from our characters so there is a toggle for this., List.Contains - Determines if the given list contains the item or items., List.GetItemIndices - This node searches the input list for the given string or number., List.MergeSublists - This will merge all sublists with or without a character between the strings., List.ReturnItemsPreviousToIndex - This will take an index (or indices) and return the items previous to it. Useful for sums of all items previous., Mullion.SortByDirection - This will sort mullions of a host curtain wall by direction they are facing., OS.CurrentUser - This node retrieves the current user logged in., OS.CurrentUserAppData - This retrieves the current user's appdata location, Output.Clean - This will return a single value or list from one input., Parametric Graphic Scale - This node automates the graphic scale assigned per viewport. The input required is all instances of viewport category. It also requires shared parameters. Visit sixtysecondrevit.blogspot.com for details., Pick Model Elements - This node offers a pick method for selecting elements in Revit., Railing.BalusterCount - This node will count the amout of balusters in a rail element. Only works for single element for now., RemoveListFromList - This node essentially \"subtracts\" the contents of List B from List A to produce a new list with the unique items., Rhythm.3DRoomTags - This node will generate 3D room tags for all rooms in the model. (RFA in extra folder in Dynamo download), Rhythm.3DSpaceTags - This will generate 3D space tags for all spaces in the project., Rhythm.BackupRFADeleter - This node will scan the contents of a driectory and delete backup RFA files that appear with a four digit backup number before the file extension. (eg. Family1.0001.rfa) This is deleting files so please use with caution!, Rhythm.Detail Number by View Name  - Automatically numbers your detail number based on the first two characters of your view name. i.e. A4/... (Requires slash to be present), Rhythm.MassOSMData - This node will mass the OSM data based upon the know heights. If the building doesn't have a height, it will just output the polygon., Rhythm.OverrideInteriorCrop - This node will override the lineweight of the crop region on interior elevations. This node would not be possible without the power of the Dynamo community. Specifically Danny Jones with Clark Patterson Lee., Rhythm.PercentGlazingByOrientation - This node was show at RTCNA2015 to optimize your workflows. It reports the window to wall % by direction the wall faces., Rhythm.RenumberGridsByCurve - This node will renumber grids in order of curve drawn through them. Select either letters or numbers. (Alphanumeric coming soon), Rhythm.RenumberRoomsByCurve - This node will renumber rooms along a curve path. This was developed through the guidance of WIlliam Wong at case. Considering WeWork bought Case I wanted this node to live somewhere., Rhythm.TextBoxInput - Provides a text box input for users. Allows for multiple strings if needed., Rhythm.Toggle - Toggle that offers two outputs. Created for Dynamo 0.8.1 because of changes to the \"IF\" node, Rhythm.WhatTheNode - This node will let you search dynamonodes.com for the most likely package a node is from. Helps fix \"red\" nodes when users do not have package installed., Room Element Collector - THis will collect data regarding rooms in the active model. Similar to Lunchbox node, but this one does not use python., RoomTag.Host - Retrieves the assoicated room with a room tag., Select Elements By Curve - This will select model elements in order that a curve is drawn through them., Select Grids By Curve - This will select Revit grids by the input Revit curve,, SetParameterByName(TypeOrInstance) - Set one of the element's parameters regardless of parameter type or instance., Space.IsPointInside - This will test if a point falls within a space., Space.SetSpaceType - This node will set the space type for the input space., Space.GetSpaceType - This will retrieve the space type of the space as a string., SpaceTag.Host - This obtains the MEP space associated with a given MEP space tag., SpaceType.All - This node will output ALL space types., SpaceType.ByName - This will output a MEP space type based on name search., SquareFeetDropper - This node drops square feet from the pulled area, String.CharacterAtIndex - Get's the character at a given index, String.ElementsModified - THis custom node reports the amount of elements in a list as a phrase., String.FlipReverse - This node flips the string and reverses it. (April Fools '15) Works for 0.8.0 only, added unicode support, String.IndicesOfCharacter - This node gets all the indices of a given character, String.IsUnicode - Determines if input string is a unicode character., String.RemoveAfterGivenCharacter - This will move all characters at and after the given character., String.RemovePriorToCharacter - This will remove all characters prior to the input character. Accepts strings., String.SpecifyDecimalPlaces - This node will take your inout string and number of decimal places to create a new simplified output., String.ToSentenceCase - This node will convert a single string of text to have capitalized sentences. If you need to use this over a list, use List.Map., String.ToTitle - Converts the given string to Title Case., StructuralBeamSystem.Members - Thist will collect the members of the ebeam system., TextElement.ToLower - This node converts a Revit text elemnt to upper directly., TextElement.ToTitle - This node converts a Revit text elemnt to upper directly., TextElement.ToUpper - This node converts a Revit text elemnt to upper directly., UI.ColorPicker - This node allows the user to choose a color via the Revit API color selection dialog., UI.FilePath - Provides a file path option for use with Dynamo Player., UI.UserMessage - This will display a user message once. Until it is either toggled or changed., Unicode.LRE - Start of left-to-right embedding Unicode Character, Unicode.LRM - Left-to-right mark unicode character, Unicode.RLE - Start of right-to-left embedding Unicode Character, Unicode.RLM - Right-to-left mark Unicode character, Unicode.ZWJ - Zero width joiner Unicode Character, Unicode.ZWNJ - Zero width non-joiner Unicode Character, View.ConvertToIndependent - This will convert input dependent views to independent. Thanks to TheRevitKid for the idea!, ViewFamilyType.ByName - Select a view family type given it's name., Viewport.ViewName - This node gets the view name of viewports. There is an issue when \"title on sheet\" is used, so this fixes that., Wall.NorthSouthEastWest - This node determines which direction a wall is facing and groups them by the direction or direction they are closest to., Workset.Create - Creates a workset or worksets from input names.",
            "engine_metadata": "",
            "engine_version": "1.2.1.3083",
            "created": "2016-12-06T18:03:30.214Z",
            "full_dependency_versions": [ "2016.12.7" ],
            "full_dependency_ids": [
              {
                "_id": "54e7add1dcee4dfd26000101",
                "name": "Rhythm"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2016.12.7"
          },
          {
            "_id": "58483cf3fdef23aa6e00009d",
            "contains_binaries": true,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-prod/f7ce6afd-461d-410a-afbc-105dceded237gregPkg992.zip",
            "contents": "Select Grids By Curve - This will select Revit grids by the input Revit curve,, All Elements of Type in Document - All elements of given type in specified document. This works for unopened files and for linked documents., All Framing at Reference Level - Collects all of the structural framing at a specific reference level, All Pipes at Reference Level - This will collect all pipes by their reference level., All Upper - This converts the ase of selected items to UPPER. Inputs require booleans to enable for category., Arrowhead Assigner - This node assings the arrowhead type for all text and keynote tags. There is an input for ones you want to exclude., Ayuda.IsArchi-LabInstalled - This node determines if Archi-Lab is installed. Useful with a toggle., Ayuda.IsClockworkInstalled - This node determines if clockwork is installed. Useful with a toggle., Ayuda.IsSteamNodesInstalled - This node determines if steamnodes is installed. Useful with a toggle.;, Ayuda.ThisOrThat - This node is a toggle between two inputs., CableTray.Space - This node will determine the space a cable tray's center falls within., Collector.Areas - This is an area collector element that utilizes mostly OOTB nodes., Collector.DuctsBySystem - This collects all ducts in the project and organizes them by System Classification, Collector.KeynoteTags - This collects all of the keynote tags in the model. Similar to other nodes, but this doesn't use python., Collector.LabelTypes - This node collects all of the label types for the active family document., Collector.PipesBySystem - This collects all pipes in the project and organizes them by System Classification, Collector.TagTypes - This node collects the tag types in the model., Collector.Viewports - This collects all of the viewports in the model and outputs the name, title on sheet, scale and viewport type., CurtainGrid.AllSegmentCurves - This will return the vertical and horizontal curtain grid segments regardless if hidden or not. Groups by U and V., CurtainGrid.ByElement - Gets the curtain grids by the host element. Seperates into U and V, CurtainGrid.FullCurve - Returns the curves of the input curtain grids. Groups by U and V., CurtainGrid.RemoveSegment - Removes segments from curtain grids. Can't take lists yet. Use with List.Combine., CurtainGrid.RemoveSegmentsFunction - Function to apply to remove segments node, Curve.FromLine - This will translate a line element to a curve., Dash Remover - This node removes the dash at index 2 if it exists. The reason being, NCS states that no dash shall be used., Dimension.IsOverridden - This will report if a dimension has been overridden. , Dimension.LeaderEndPosition - This will return the leader end postion as a point., Dimension.MultiSegmentMembers - This will output all of the members of a multi-segment dimension., Dimension.NumberOfSegments - This will return the number of segments a dimension has. If it is a single dimension, this will return zero., Dimension.Origin - This will return the dimension origin as a point., Dimension.SetAboveValue - This will set the above value of a dimension., Dimension.SetBelowValue - This will set the below value of a dimension., Dimension.TextPosition - This will return the postition of the text as a point., Dimension.ValueString - The displayed value shown for the dimension segment. , Document.BackgroundOpen - This will open the input Revit files in the background., Document.Close - This will close the input Revit document. Offers a boolean toggle to save., Document.SetStartingView - This will set the starting view for a given document. ONLY WORKS IN ONE DOCUMENT AT A TIME, DraftingView.CreateInDocument - This will create a new drafting view in the given document. ONLY WORKS FOR ONE DOCUMENT AT A TIME, Element.AreaLocation - This node will determine what area (area plans) an element is located within. Made possible thanks to clockwork. :), Element.AreaWithTotal - This will get the area of an element if the parameter exists. Will total as well if needed., Element.Category - This node will get the input element(s)' categories, Element.CopyFromDocument - This node allows you to copy elements from a specific document to your current document., Element.GetJoinedElements - This will obtain the elements joined to the input element., Element.GetLevelNameAsString - This retrieves the level name of the input elements as a string. This is in response to a known issue with the get value node., Element.GetMultipleParameterValuesByName - Get the value of multiple parameters from elements. (Seperate parameters with comma), Element.GetParameterValueByName(CaSe iNSeNSiTive) - Get the value of one of the element's parameters. (CaSe iNSeNSiTiVe), Element.OverrideCutColorInView - Overrides the elements cut color in the view., Element.OverrideCutLineweight - Overrides the cut lines of the elements, Element.OverrideProjectionFillColor - This node overrides the fill color of the element in view., Element.OverrideProjectionLineColor - This node overrides the projection line color with the input color value. Useful for annotation., Element.OverrideProjectionLineweight - Overrides the line thickness of projection lines, Element.ParentFamily - This node retrieces the parent family name for each input element., Element.Room - This node takes the input of all elements of category and reports back the associated room per element. Currently tested with casework, furniture and plumbing fixtures., Element.SetMultipleParametersByName - Set multiple (comma seperated) parameters by name., Element.SetParameterByName(CaSe iNSeNSiTiVe) - Set one of the element's parameters. (CaSe iNSeNSiTiVe), Element.SetPinnedStatus - Will set the element to either pinned or not pinned. True is pinned, false is unpinned. For multiple elements use List.Map, Element.Space - This will retrieve the space in which an element is contained. (if available), Element.Type - This retrieves the element type of the given elements. (if available) Similar to others available but no python here., Geometry.SpaceEvenlyWithBuffer - This will take input geometry and space it out in the Y direction with a buffer between, Geometry.ToRevitType - This will convert designscript geometyr into Revit.DB types. Currently tested with curves, nurbs curves and solids., GetParameterValueByName(TypeOrInstance) - Gets a parameter value by name regardless of type or instance., GetParameterValueByNameAsString - Returns paramter value as string. Same effect as lunchbox node, without python., Gmail.ComposeEmail - This node will compose a new email. Useful for notifications regarding a graph concluding. Uses pythons built-in SMTP Library., Gmail.ComposeEmailDetailed - This will compose a detailed email with subject and message., Group.UngroupElements - This will ungroup the input groups and output their elements. Use with care!, Inspiration.BuffettNode - This is a result of \"what if?\" thinking. The output is a random Warren Buffett quote from brainyquotes.com, Inspiration.CarreyNode - This is a result of \"what if?\" thinking. The output is a random Jim Carrey quote from brainyquotes.com, Inspiration.CashNode - This is a result of \"what if?\" thinking. The output is a random Johnny Cash quote from brainyquotes.com, Inspiration.MarleyNode - This is a result of \"what if?\" thinking. The output is a random Bob Marley quote from brainyquotes.com, Inspiration.SearchQuoteNode - This is a result of \"what if?\" thinking. The output is a random quote based on the search criteria from brainyquotes.com. (As long as it is on the site), Inspiration.TeresaNode - This is a result of \"what if?\" thinking. The output is a random Mother Teresa quote from brainyquotes.com, Isolated Pick Model Elements(ordered) - Pick model elements in desired order of a desired category., Isolated Pick Model Elements - This allows a multiple selection of elements of specified category., Level Element Collector - This collects data for all of the Level elements in the model. Similar to the node on Lunchbox, but this one uses all O.O.B. nodes., List.AllIndicesOf - Given an item, returns the zero-based indices of all its occurrences in the list. If the item cannot be found, an empty list is returned. , List.ArchitecturalAlphabeticalSequence - This creates a list of characters. What's different is we typically exclude I's and O's from our characters so there is a toggle for this., List.Contains - Determines if the given list contains the item or items., List.GetItemIndices - This node searches the input list for the given string or number., List.MergeSublists - This will merge all sublists with or without a character between the strings., List.ReturnItemsPreviousToIndex - This will take an index (or indices) and return the items previous to it. Useful for sums of all items previous., Mullion.SortByDirection - This will sort mullions of a host curtain wall by direction they are facing., OS.CurrentUser - This node retrieves the current user logged in., OS.CurrentUserAppData - This retrieves the current user's appdata location, Output.Clean - This will return a single value or list from one input., Parametric Graphic Scale - This node automates the graphic scale assigned per viewport. The input required is all instances of viewport category. It also requires shared parameters. Visit sixtysecondrevit.blogspot.com for details., Pick Model Elements - This node offers a pick method for selecting elements in Revit., Railing.BalusterCount - This node will count the amout of balusters in a rail element. Only works for single element for now., RemoveListFromList - This node essentially \"subtracts\" the contents of List B from List A to produce a new list with the unique items., Rhythm.3DRoomTags - This node will generate 3D room tags for all rooms in the model. (RFA in extra folder in Dynamo download), Rhythm.3DSpaceTags - This will generate 3D space tags for all spaces in the project., Rhythm.BackupRFADeleter - This node will scan the contents of a driectory and delete backup RFA files that appear with a four digit backup number before the file extension. (eg. Family1.0001.rfa) This is deleting files so please use with caution!, Rhythm.Detail Number by View Name  - Automatically numbers your detail number based on the first two characters of your view name. i.e. A4/... (Requires slash to be present), Rhythm.MassOSMData - This node will mass the OSM data based upon the know heights. If the building doesn't have a height, it will just output the polygon., Rhythm.OverrideInteriorCrop - This node will override the lineweight of the crop region on interior elevations. This node would not be possible without the power of the Dynamo community. Specifically Danny Jones with Clark Patterson Lee., Rhythm.PercentGlazingByOrientation - This node was show at RTCNA2015 to optimize your workflows. It reports the window to wall % by direction the wall faces., Rhythm.RenumberGridsByCurve - This node will renumber grids in order of curve drawn through them. Select either letters or numbers. (Alphanumeric coming soon), Rhythm.RenumberRoomsByCurve - This node will renumber rooms along a curve path. This was developed through the guidance of WIlliam Wong at case. Considering WeWork bought Case I wanted this node to live somewhere., Rhythm.TextBoxInput - Provides a text box input for users. Allows for multiple strings if needed., Rhythm.Toggle - Toggle that offers two outputs. Created for Dynamo 0.8.1 because of changes to the \"IF\" node, Rhythm.WhatTheNode - This node will let you search dynamonodes.com for the most likely package a node is from. Helps fix \"red\" nodes when users do not have package installed., Room Element Collector - THis will collect data regarding rooms in the active model. Similar to Lunchbox node, but this one does not use python., RoomTag.Host - Retrieves the assoicated room with a room tag., Select Elements By Curve - This will select model elements in order that a curve is drawn through them., Select Grids By Curve - This will select Revit grids by the input Revit curve,, SetParameterByName(TypeOrInstance) - Set one of the element's parameters regardless of parameter type or instance., Space.IsPointInside - This will test if a point falls within a space., Space.SetSpaceType - This node will set the space type for the input space., Space.GetSpaceType - This will retrieve the space type of the space as a string., SpaceTag.Host - This obtains the MEP space associated with a given MEP space tag., SpaceType.All - This node will output ALL space types., SpaceType.ByName - This will output a MEP space type based on name search., SquareFeetDropper - This node drops square feet from the pulled area, String.CharacterAtIndex - Get's the character at a given index, String.ElementsModified - THis custom node reports the amount of elements in a list as a phrase., String.FlipReverse - This node flips the string and reverses it. (April Fools '15) Works for 0.8.0 only, added unicode support, String.IndicesOfCharacter - This node gets all the indices of a given character, String.IsUnicode - Determines if input string is a unicode character., String.RemoveAfterGivenCharacter - This will move all characters at and after the given character., String.RemovePriorToCharacter - This will remove all characters prior to the input character. Accepts strings., String.SpecifyDecimalPlaces - This node will take your inout string and number of decimal places to create a new simplified output., String.ToSentenceCase - This node will convert a single string of text to have capitalized sentences. If you need to use this over a list, use List.Map., String.ToTitle - Converts the given string to Title Case., StructuralBeamSystem.Members - Thist will collect the members of the ebeam system., TextElement.ToLower - This node converts a Revit text elemnt to upper directly., TextElement.ToTitle - This node converts a Revit text elemnt to upper directly., TextElement.ToUpper - This node converts a Revit text elemnt to upper directly., UI.ColorPicker - This node allows the user to choose a color via the Revit API color selection dialog., UI.FilePath - Provides a file path option for use with Dynamo Player., UI.UserMessage - This will display a user message once. Until it is either toggled or changed., Unicode.LRE - Start of left-to-right embedding Unicode Character, Unicode.LRM - Left-to-right mark unicode character, Unicode.RLE - Start of right-to-left embedding Unicode Character, Unicode.RLM - Right-to-left mark Unicode character, Unicode.ZWJ - Zero width joiner Unicode Character, Unicode.ZWNJ - Zero width non-joiner Unicode Character, View.ConvertToIndependent - This will convert input dependent views to independent. Thanks to TheRevitKid for the idea!, ViewFamilyType.ByName - Select a view family type given it's name., Viewport.ViewName - This node gets the view name of viewports. There is an issue when \"title on sheet\" is used, so this fixes that., Wall.NorthSouthEastWest - This node determines which direction a wall is facing and groups them by the direction or direction they are closest to., Workset.Create - Creates a workset or worksets from input names., Rhythm.DatePicker - This provides a popup date selector for the user., Rhythm.YesNoToggle - This provides a toggle to use for graphs with dynamo player. The user chooses if they would like to run the graph.",
            "engine_metadata": "",
            "engine_version": "1.2.1.3083",
            "created": "2016-12-07T16:46:43.446Z",
            "full_dependency_versions": [ "2016.12.8" ],
            "full_dependency_ids": [
              {
                "_id": "54e7add1dcee4dfd26000101",
                "name": "Rhythm"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2016.12.8"
          },
          {
            "_id": "58489100fdef23aa6e0000a6",
            "contains_binaries": true,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-prod/8834dfea-2893-435a-a790-c21acad60299gregPkg140.zip",
            "contents": "All Elements of Type in Document - All elements of given type in specified document. This works for unopened files and for linked documents., All Framing at Reference Level - Collects all of the structural framing at a specific reference level, All Pipes at Reference Level - This will collect all pipes by their reference level., All Upper - This converts the ase of selected items to UPPER. Inputs require booleans to enable for category., Arrowhead Assigner - This node assings the arrowhead type for all text and keynote tags. There is an input for ones you want to exclude., Ayuda.IsArchi-LabInstalled - This node determines if Archi-Lab is installed. Useful with a toggle., Ayuda.IsClockworkInstalled - This node determines if clockwork is installed. Useful with a toggle., Ayuda.IsSteamNodesInstalled - This node determines if steamnodes is installed. Useful with a toggle.;, Ayuda.ThisOrThat - This node is a toggle between two inputs., CableTray.Space - This node will determine the space a cable tray's center falls within., Collector.Areas - This is an area collector element that utilizes mostly OOTB nodes., Collector.DuctsBySystem - This collects all ducts in the project and organizes them by System Classification, Collector.KeynoteTags - This collects all of the keynote tags in the model. Similar to other nodes, but this doesn't use python., Collector.LabelTypes - This node collects all of the label types for the active family document., Collector.PipesBySystem - This collects all pipes in the project and organizes them by System Classification, Collector.TagTypes - This node collects the tag types in the model., Collector.Viewports - This collects all of the viewports in the model and outputs the name, title on sheet, scale and viewport type., CurtainGrid.AllSegmentCurves - This will return the vertical and horizontal curtain grid segments regardless if hidden or not. Groups by U and V., CurtainGrid.ByElement - Gets the curtain grids by the host element. Seperates into U and V, CurtainGrid.FullCurve - Returns the curves of the input curtain grids. Groups by U and V., CurtainGrid.RemoveSegment - Removes segments from curtain grids. Can't take lists yet. Use with List.Combine., CurtainGrid.RemoveSegmentsFunction - Function to apply to remove segments node, Curve.FromLine - This will translate a line element to a curve., Dash Remover - This node removes the dash at index 2 if it exists. The reason being, NCS states that no dash shall be used., Dimension.IsOverridden - This will report if a dimension has been overridden. , Dimension.LeaderEndPosition - This will return the leader end postion as a point., Dimension.MultiSegmentMembers - This will output all of the members of a multi-segment dimension., Dimension.NumberOfSegments - This will return the number of segments a dimension has. If it is a single dimension, this will return zero., Dimension.Origin - This will return the dimension origin as a point., Dimension.SetAboveValue - This will set the above value of a dimension., Dimension.SetBelowValue - This will set the below value of a dimension., Dimension.TextPosition - This will return the postition of the text as a point., Dimension.ValueString - The displayed value shown for the dimension segment. , Document.BackgroundOpen - This will open the input Revit files in the background., Document.Close - This will close the input Revit document. Offers a boolean toggle to save., Document.SetStartingView - This will set the starting view for a given document. ONLY WORKS IN ONE DOCUMENT AT A TIME, DraftingView.CreateInDocument - This will create a new drafting view in the given document. ONLY WORKS FOR ONE DOCUMENT AT A TIME, Element.AreaLocation - This node will determine what area (area plans) an element is located within. Made possible thanks to clockwork. :), Element.AreaWithTotal - This will get the area of an element if the parameter exists. Will total as well if needed., Element.Category - This node will get the input element(s)' categories, Element.CopyFromDocument - This node allows you to copy elements from a specific document to your current document., Element.GetJoinedElements - This will obtain the elements joined to the input element., Element.GetLevelNameAsString - This retrieves the level name of the input elements as a string. This is in response to a known issue with the get value node., Element.GetMultipleParameterValuesByName - Get the value of multiple parameters from elements. (Seperate parameters with comma), Element.GetParameterValueByName(CaSe iNSeNSiTive) - Get the value of one of the element's parameters. (CaSe iNSeNSiTiVe), Element.OverrideCutColorInView - Overrides the elements cut color in the view., Element.OverrideCutLineweight - Overrides the cut lines of the elements, Element.OverrideProjectionFillColor - This node overrides the fill color of the element in view., Element.OverrideProjectionLineColor - This node overrides the projection line color with the input color value. Useful for annotation., Element.OverrideProjectionLineweight - Overrides the line thickness of projection lines, Element.ParentFamily - This node retrieces the parent family name for each input element., Element.Room - This node takes the input of all elements of category and reports back the associated room per element. Currently tested with casework, furniture and plumbing fixtures., Element.SetMultipleParametersByName - Set multiple (comma seperated) parameters by name., Element.SetParameterByName(CaSe iNSeNSiTiVe) - Set one of the element's parameters. (CaSe iNSeNSiTiVe), Element.SetPinnedStatus - Will set the element to either pinned or not pinned. True is pinned, false is unpinned. For multiple elements use List.Map, Element.Space - This will retrieve the space in which an element is contained. (if available), Element.Type - This retrieves the element type of the given elements. (if available) Similar to others available but no python here., Geometry.SpaceEvenlyWithBuffer - This will take input geometry and space it out in the Y direction with a buffer between, Geometry.ToRevitType - This will convert designscript geometyr into Revit.DB types. Currently tested with curves, nurbs curves and solids., GetParameterValueByName(TypeOrInstance) - Gets a parameter value by name regardless of type or instance., GetParameterValueByNameAsString - Returns paramter value as string. Same effect as lunchbox node, without python., Gmail.ComposeEmail - This node will compose a new email. Useful for notifications regarding a graph concluding. Uses pythons built-in SMTP Library., Gmail.ComposeEmailDetailed - This will compose a detailed email with subject and message., Group.UngroupElements - This will ungroup the input groups and output their elements. Use with care!, Inspiration.BuffettNode - This is a result of \"what if?\" thinking. The output is a random Warren Buffett quote from brainyquotes.com, Inspiration.CarreyNode - This is a result of \"what if?\" thinking. The output is a random Jim Carrey quote from brainyquotes.com, Inspiration.CashNode - This is a result of \"what if?\" thinking. The output is a random Johnny Cash quote from brainyquotes.com, Inspiration.MarleyNode - This is a result of \"what if?\" thinking. The output is a random Bob Marley quote from brainyquotes.com, Inspiration.SearchQuoteNode - This is a result of \"what if?\" thinking. The output is a random quote based on the search criteria from brainyquotes.com. (As long as it is on the site), Inspiration.TeresaNode - This is a result of \"what if?\" thinking. The output is a random Mother Teresa quote from brainyquotes.com, Isolated Pick Model Elements(ordered) - Pick model elements in desired order of a desired category., Isolated Pick Model Elements - This allows a multiple selection of elements of specified category., Level Element Collector - This collects data for all of the Level elements in the model. Similar to the node on Lunchbox, but this one uses all O.O.B. nodes., List.AllIndicesOf - Given an item, returns the zero-based indices of all its occurrences in the list. If the item cannot be found, an empty list is returned. , List.ArchitecturalAlphabeticalSequence - This creates a list of characters. What's different is we typically exclude I's and O's from our characters so there is a toggle for this., List.Contains - Determines if the given list contains the item or items., List.GetItemIndices - This node searches the input list for the given string or number., List.MergeSublists - This will merge all sublists with or without a character between the strings., List.ReturnItemsPreviousToIndex - This will take an index (or indices) and return the items previous to it. Useful for sums of all items previous., Mullion.SortByDirection - This will sort mullions of a host curtain wall by direction they are facing., OS.CurrentUser - This node retrieves the current user logged in., OS.CurrentUserAppData - This retrieves the current user's appdata location, Output.Clean - This will return a single value or list from one input., Parametric Graphic Scale - This node automates the graphic scale assigned per viewport. The input required is all instances of viewport category. It also requires shared parameters. Visit sixtysecondrevit.blogspot.com for details., Pick Model Elements - This node offers a pick method for selecting elements in Revit., Railing.BalusterCount - This node will count the amout of balusters in a rail element. Only works for single element for now., RemoveListFromList - This node essentially \"subtracts\" the contents of List B from List A to produce a new list with the unique items., Rhythm.3DRoomTags - This node will generate 3D room tags for all rooms in the model. (RFA in extra folder in Dynamo download), Rhythm.3DSpaceTags - This will generate 3D space tags for all spaces in the project., Rhythm.BackupRFADeleter - This node will scan the contents of a driectory and delete backup RFA files that appear with a four digit backup number before the file extension. (eg. Family1.0001.rfa) This is deleting files so please use with caution!, Rhythm.DatePicker - This provides a popup date selector for the user., Rhythm.Detail Number by View Name  - Automatically numbers your detail number based on the first two characters of your view name. i.e. A4/... (Requires slash to be present), Rhythm.MassOSMData - This node will mass the OSM data based upon the know heights. If the building doesn't have a height, it will just output the polygon., Rhythm.OverrideInteriorCrop - This node will override the lineweight of the crop region on interior elevations. This node would not be possible without the power of the Dynamo community. Specifically Danny Jones with Clark Patterson Lee., Rhythm.PercentGlazingByOrientation - This node was show at RTCNA2015 to optimize your workflows. It reports the window to wall % by direction the wall faces., Rhythm.RenumberGridsByCurve - This node will renumber grids in order of curve drawn through them. Select either letters or numbers. (Alphanumeric coming soon), Rhythm.RenumberRoomsByCurve - This node will renumber rooms along a curve path. This was developed through the guidance of WIlliam Wong at case. Considering WeWork bought Case I wanted this node to live somewhere., Rhythm.TextBoxInput - Provides a text box input for users. Allows for multiple strings if needed., Rhythm.Toggle - Toggle that offers two outputs. Created for Dynamo 0.8.1 because of changes to the \"IF\" node, Rhythm.WhatTheNode - This node will let you search dynamonodes.com for the most likely package a node is from. Helps fix \"red\" nodes when users do not have package installed., Rhythm.YesNoToggle - This provides a toggle to use for graphs with dynamo player. The user chooses if they would like to run the graph., Room Element Collector - THis will collect data regarding rooms in the active model. Similar to Lunchbox node, but this one does not use python., RoomTag.Host - Retrieves the assoicated room with a room tag., Select Elements By Curve - This will select model elements in order that a curve is drawn through them., Select Grids By Curve - This will select Revit grids by the input Revit curve,, SetParameterByName(TypeOrInstance) - Set one of the element's parameters regardless of parameter type or instance., Space.IsPointInside - This will test if a point falls within a space., Space.SetSpaceType - This node will set the space type for the input space., Space.GetSpaceType - This will retrieve the space type of the space as a string., SpaceTag.Host - This obtains the MEP space associated with a given MEP space tag., SpaceType.All - This node will output ALL space types., SpaceType.ByName - This will output a MEP space type based on name search., SquareFeetDropper - This node drops square feet from the pulled area, String.CharacterAtIndex - Get's the character at a given index, String.ElementsModified - THis custom node reports the amount of elements in a list as a phrase., String.FlipReverse - This node flips the string and reverses it. (April Fools '15) Works for 0.8.0 only, added unicode support, String.IndicesOfCharacter - This node gets all the indices of a given character, String.IsUnicode - Determines if input string is a unicode character., String.RemoveAfterGivenCharacter - This will move all characters at and after the given character., String.RemovePriorToCharacter - This will remove all characters prior to the input character. Accepts strings., String.SpecifyDecimalPlaces - This node will take your inout string and number of decimal places to create a new simplified output., String.ToSentenceCase - This node will convert a single string of text to have capitalized sentences. If you need to use this over a list, use List.Map., String.ToTitle - Converts the given string to Title Case., StructuralBeamSystem.Members - Thist will collect the members of the ebeam system., TextElement.ToLower - This node converts a Revit text elemnt to upper directly., TextElement.ToTitle - This node converts a Revit text elemnt to upper directly., TextElement.ToUpper - This node converts a Revit text elemnt to upper directly., UI.ColorPicker - This node allows the user to choose a color via the Revit API color selection dialog., UI.FilePath - Provides a file path option for use with Dynamo Player., UI.UserMessage - This will display a user message once. Until it is either toggled or changed., Unicode.LRE - Start of left-to-right embedding Unicode Character, Unicode.LRM - Left-to-right mark unicode character, Unicode.RLE - Start of right-to-left embedding Unicode Character, Unicode.RLM - Right-to-left mark Unicode character, Unicode.ZWJ - Zero width joiner Unicode Character, Unicode.ZWNJ - Zero width non-joiner Unicode Character, View.ConvertToIndependent - This will convert input dependent views to independent. Thanks to TheRevitKid for the idea!, ViewFamilyType.ByName - Select a view family type given it's name., Viewport.ViewName - This node gets the view name of viewports. There is an issue when \"title on sheet\" is used, so this fixes that., Wall.NorthSouthEastWest - This node determines which direction a wall is facing and groups them by the direction or direction they are closest to., Workset.Create - Creates a workset or worksets from input names., Rhythm.IntegerSlider - Provides an integer slider for the dynamo player. Has min, max and description.",
            "engine_metadata": "",
            "engine_version": "1.2.1.3083",
            "created": "2016-12-07T22:45:20.136Z",
            "full_dependency_versions": [ "2016.12.9" ],
            "full_dependency_ids": [
              {
                "_id": "54e7add1dcee4dfd26000101",
                "name": "Rhythm"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2016.12.9"
          },
          {
            "_id": "584ad63bfdef23aa6e0000c6",
            "contains_binaries": true,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-prod/b0c3a0d2-34f5-4627-a2eb-2c2aad0fc574gregPkg136.zip",
            "contents": "All Elements of Type in Document - All elements of given type in specified document. This works for unopened files and for linked documents., All Framing at Reference Level - Collects all of the structural framing at a specific reference level, All Pipes at Reference Level - This will collect all pipes by their reference level., All Upper - This converts the ase of selected items to UPPER. Inputs require booleans to enable for category., Arrowhead Assigner - This node assings the arrowhead type for all text and keynote tags. There is an input for ones you want to exclude., Ayuda.IsArchi-LabInstalled - This node determines if Archi-Lab is installed. Useful with a toggle., Ayuda.IsClockworkInstalled - This node determines if clockwork is installed. Useful with a toggle., Ayuda.IsSteamNodesInstalled - This node determines if steamnodes is installed. Useful with a toggle.;, Ayuda.ThisOrThat - This node is a toggle between two inputs., CableTray.Space - This node will determine the space a cable tray's center falls within., Collector.Areas - This is an area collector element that utilizes mostly OOTB nodes., Collector.DuctsBySystem - This collects all ducts in the project and organizes them by System Classification, Collector.KeynoteTags - This collects all of the keynote tags in the model. Similar to other nodes, but this doesn't use python., Collector.LabelTypes - This node collects all of the label types for the active family document., Collector.PipesBySystem - This collects all pipes in the project and organizes them by System Classification, Collector.TagTypes - This node collects the tag types in the model., Collector.Viewports - This collects all of the viewports in the model and outputs the name, title on sheet, scale and viewport type., CurtainGrid.AllSegmentCurves - This will return the vertical and horizontal curtain grid segments regardless if hidden or not. Groups by U and V., CurtainGrid.ByElement - Gets the curtain grids by the host element. Seperates into U and V, CurtainGrid.FullCurve - Returns the curves of the input curtain grids. Groups by U and V., CurtainGrid.RemoveSegment - Removes segments from curtain grids. Can't take lists yet. Use with List.Combine., CurtainGrid.RemoveSegmentsFunction - Function to apply to remove segments node, Curve.FromLine - This will translate a line element to a curve., Dash Remover - This node removes the dash at index 2 if it exists. The reason being, NCS states that no dash shall be used., Dimension.IsOverridden - This will report if a dimension has been overridden. , Dimension.LeaderEndPosition - This will return the leader end postion as a point., Dimension.MultiSegmentMembers - This will output all of the members of a multi-segment dimension., Dimension.NumberOfSegments - This will return the number of segments a dimension has. If it is a single dimension, this will return zero., Dimension.Origin - This will return the dimension origin as a point., Dimension.SetAboveValue - This will set the above value of a dimension., Dimension.SetBelowValue - This will set the below value of a dimension., Dimension.TextPosition - This will return the postition of the text as a point., Dimension.ValueString - The displayed value shown for the dimension segment. , Document.BackgroundOpen - This will open the input Revit files in the background., Document.Close - This will close the input Revit document. Offers a boolean toggle to save., Document.SetStartingView - This will set the starting view for a given document. ONLY WORKS IN ONE DOCUMENT AT A TIME, DraftingView.CreateInDocument - This will create a new drafting view in the given document. ONLY WORKS FOR ONE DOCUMENT AT A TIME, Element.AreaLocation - This node will determine what area (area plans) an element is located within. Made possible thanks to clockwork. :), Element.AreaWithTotal - This will get the area of an element if the parameter exists. Will total as well if needed., Element.Category - This node will get the input element(s)' categories, Element.CopyFromDocument - This node allows you to copy elements from a specific document to your current document., Element.GetJoinedElements - This will obtain the elements joined to the input element., Element.GetLevelNameAsString - This retrieves the level name of the input elements as a string. This is in response to a known issue with the get value node., Element.GetMultipleParameterValuesByName - Get the value of multiple parameters from elements. (Seperate parameters with comma), Element.GetParameterValueByName(CaSe iNSeNSiTive) - Get the value of one of the element's parameters. (CaSe iNSeNSiTiVe), Element.OverrideCutColorInView - Overrides the elements cut color in the view., Element.OverrideCutLineweight - Overrides the cut lines of the elements, Element.OverrideProjectionFillColor - This node overrides the fill color of the element in view., Element.OverrideProjectionLineColor - This node overrides the projection line color with the input color value. Useful for annotation., Element.OverrideProjectionLineweight - Overrides the line thickness of projection lines, Element.ParentFamily - This node retrieces the parent family name for each input element., Element.Room - This node takes the input of all elements of category and reports back the associated room per element. Currently tested with casework, furniture and plumbing fixtures., Element.SetMultipleParametersByName - Set multiple (comma seperated) parameters by name., Element.SetParameterByName(CaSe iNSeNSiTiVe) - Set one of the element's parameters. (CaSe iNSeNSiTiVe), Element.SetPinnedStatus - Will set the element to either pinned or not pinned. True is pinned, false is unpinned. For multiple elements use List.Map, Element.Space - This will retrieve the space in which an element is contained. (if available), Element.Type - This retrieves the element type of the given elements. (if available) Similar to others available but no python here., Geometry.SpaceEvenlyWithBuffer - This will take input geometry and space it out in the Y direction with a buffer between, Geometry.ToRevitType - This will convert designscript geometyr into Revit.DB types. Currently tested with curves, nurbs curves and solids., GetParameterValueByName(TypeOrInstance) - Gets a parameter value by name regardless of type or instance., GetParameterValueByNameAsString - Returns paramter value as string. Same effect as lunchbox node, without python., Gmail.ComposeEmail - This node will compose a new email. Useful for notifications regarding a graph concluding. Uses pythons built-in SMTP Library., Gmail.ComposeEmailDetailed - This will compose a detailed email with subject and message., Group.UngroupElements - This will ungroup the input groups and output their elements. Use with care!, Inspiration.BuffettNode - This is a result of \"what if?\" thinking. The output is a random Warren Buffett quote from brainyquotes.com, Inspiration.CarreyNode - This is a result of \"what if?\" thinking. The output is a random Jim Carrey quote from brainyquotes.com, Inspiration.CashNode - This is a result of \"what if?\" thinking. The output is a random Johnny Cash quote from brainyquotes.com, Inspiration.MarleyNode - This is a result of \"what if?\" thinking. The output is a random Bob Marley quote from brainyquotes.com, Inspiration.SearchQuoteNode - This is a result of \"what if?\" thinking. The output is a random quote based on the search criteria from brainyquotes.com. (As long as it is on the site), Inspiration.TeresaNode - This is a result of \"what if?\" thinking. The output is a random Mother Teresa quote from brainyquotes.com, Isolated Pick Model Elements(ordered) - Pick model elements in desired order of a desired category., Isolated Pick Model Elements - This allows a multiple selection of elements of specified category., Level Element Collector - This collects data for all of the Level elements in the model. Similar to the node on Lunchbox, but this one uses all O.O.B. nodes., List.AllIndicesOf - Given an item, returns the zero-based indices of all its occurrences in the list. If the item cannot be found, an empty list is returned. , List.ArchitecturalAlphabeticalSequence - This creates a list of characters. What's different is we typically exclude I's and O's from our characters so there is a toggle for this., List.Contains - Determines if the given list contains the item or items., List.GetItemIndices - This node searches the input list for the given string or number., List.MergeSublists - This will merge all sublists with or without a character between the strings., List.ReturnItemsPreviousToIndex - This will take an index (or indices) and return the items previous to it. Useful for sums of all items previous., Mullion.SortByDirection - This will sort mullions of a host curtain wall by direction they are facing., OS.CurrentUser - This node retrieves the current user logged in., OS.CurrentUserAppData - This retrieves the current user's appdata location, Output.Clean - This will return a single value or list from one input., Parametric Graphic Scale - This node automates the graphic scale assigned per viewport. The input required is all instances of viewport category. It also requires shared parameters. Visit sixtysecondrevit.blogspot.com for details., Pick Model Elements - This node offers a pick method for selecting elements in Revit., Railing.BalusterCount - This node will count the amout of balusters in a rail element. Only works for single element for now., RemoveListFromList - This node essentially \"subtracts\" the contents of List B from List A to produce a new list with the unique items., Rhythm.3DRoomTags - This node will generate 3D room tags for all rooms in the model. (RFA in extra folder in Dynamo download), Rhythm.3DSpaceTags - This will generate 3D space tags for all spaces in the project., Rhythm.BackupRFADeleter - This node will scan the contents of a driectory and delete backup RFA files that appear with a four digit backup number before the file extension. (eg. Family1.0001.rfa) This is deleting files so please use with caution!, Rhythm.DatePicker - This provides a popup date selector for the user., Rhythm.Detail Number by View Name  - Automatically numbers your detail number based on the first two characters of your view name. i.e. A4/... (Requires slash to be present), Rhythm.IntegerSlider - Provides an integer slider for the dynamo player. Has min, max and description., Rhythm.MassOSMData - This node will mass the OSM data based upon the know heights. If the building doesn't have a height, it will just output the polygon., Rhythm.OverrideInteriorCrop - This node will override the lineweight of the crop region on interior elevations. This node would not be possible without the power of the Dynamo community. Specifically Danny Jones with Clark Patterson Lee., Rhythm.PercentGlazingByOrientation - This node was show at RTCNA2015 to optimize your workflows. It reports the window to wall % by direction the wall faces., Rhythm.RenumberGridsByCurve - This node will renumber grids in order of curve drawn through them. Select either letters or numbers. (Alphanumeric coming soon), Rhythm.RenumberRoomsByCurve - This node will renumber rooms along a curve path. This was developed through the guidance of WIlliam Wong at case. Considering WeWork bought Case I wanted this node to live somewhere., Rhythm.TextBoxInput - Provides a text box input for users. Allows for multiple strings if needed., Rhythm.Toggle - Toggle that offers two outputs. Created for Dynamo 0.8.1 because of changes to the \"IF\" node, Rhythm.WhatTheNode - This node will let you search dynamonodes.com for the most likely package a node is from. Helps fix \"red\" nodes when users do not have package installed., Rhythm.YesNoToggle - This provides a toggle to use for graphs with dynamo player. The user chooses if they would like to run the graph., Room Element Collector - THis will collect data regarding rooms in the active model. Similar to Lunchbox node, but this one does not use python., RoomTag.Host - Retrieves the assoicated room with a room tag., Select Elements By Curve - This will select model elements in order that a curve is drawn through them., Select Grids By Curve - This will select Revit grids by the input Revit curve,, SetParameterByName(TypeOrInstance) - Set one of the element's parameters regardless of parameter type or instance., Space.IsPointInside - This will test if a point falls within a space., Space.SetSpaceType - This node will set the space type for the input space., Space.GetSpaceType - This will retrieve the space type of the space as a string., SpaceTag.Host - This obtains the MEP space associated with a given MEP space tag., SpaceType.All - This node will output ALL space types., SpaceType.ByName - This will output a MEP space type based on name search., SquareFeetDropper - This node drops square feet from the pulled area, String.CharacterAtIndex - Get's the character at a given index, String.ElementsModified - THis custom node reports the amount of elements in a list as a phrase., String.FlipReverse - This node flips the string and reverses it. (April Fools '15) Works for 0.8.0 only, added unicode support, String.IndicesOfCharacter - This node gets all the indices of a given character, String.IsUnicode - Determines if input string is a unicode character., String.RemoveAfterGivenCharacter - This will move all characters at and after the given character., String.RemovePriorToCharacter - This will remove all characters prior to the input character. Accepts strings., String.SpecifyDecimalPlaces - This node will take your inout string and number of decimal places to create a new simplified output., String.ToSentenceCase - This node will convert a single string of text to have capitalized sentences. If you need to use this over a list, use List.Map., String.ToTitle - Converts the given string to Title Case., StructuralBeamSystem.Members - Thist will collect the members of the ebeam system., TextElement.ToLower - This node converts a Revit text elemnt to upper directly., TextElement.ToTitle - This node converts a Revit text elemnt to upper directly., TextElement.ToUpper - This node converts a Revit text elemnt to upper directly., UI.ColorPicker - This node allows the user to choose a color via the Revit API color selection dialog., UI.FilePath - Provides a file path option for use with Dynamo Player., UI.UserMessage - This will display a user message once. Until it is either toggled or changed., Unicode.LRE - Start of left-to-right embedding Unicode Character, Unicode.LRM - Left-to-right mark unicode character, Unicode.RLE - Start of right-to-left embedding Unicode Character, Unicode.RLM - Right-to-left mark Unicode character, Unicode.ZWJ - Zero width joiner Unicode Character, Unicode.ZWNJ - Zero width non-joiner Unicode Character, View.ConvertToIndependent - This will convert input dependent views to independent. Thanks to TheRevitKid for the idea!, ViewFamilyType.ByName - Select a view family type given it's name., Viewport.ViewName - This node gets the view name of viewports. There is an issue when \"title on sheet\" is used, so this fixes that., Wall.NorthSouthEastWest - This node determines which direction a wall is facing and groups them by the direction or direction they are closest to., Workset.Create - Creates a workset or worksets from input names., CurtainGrid.ExistingSegmentCurves - Retrieve all the existing segment curves of the grid line.  Groups by U and V., CurtainGrid.SkippedSegmentCurves - Retrieve all the removed segment curves of the grid line. ",
            "engine_metadata": "",
            "engine_version": "1.2.1.3083",
            "created": "2016-12-09T16:05:15.746Z",
            "full_dependency_versions": [ "2016.12.10" ],
            "full_dependency_ids": [
              {
                "_id": "54e7add1dcee4dfd26000101",
                "name": "Rhythm"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2016.12.10"
          },
          {
            "_id": "58500e56fdef23aa6e000101",
            "contains_binaries": true,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-prod/f136b2f3-f45f-4a9d-937e-8f3ef170ebfagregPkg817.zip",
            "contents": "All Elements of Type in Document - All elements of given type in specified document. This works for unopened files and for linked documents., All Framing at Reference Level - Collects all of the structural framing at a specific reference level, All Pipes at Reference Level - This will collect all pipes by their reference level., All Upper - This converts the ase of selected items to UPPER. Inputs require booleans to enable for category., Arrowhead Assigner - This node assings the arrowhead type for all text and keynote tags. There is an input for ones you want to exclude., Ayuda.IsArchi-LabInstalled - This node determines if Archi-Lab is installed. Useful with a toggle., Ayuda.IsClockworkInstalled - This node determines if clockwork is installed. Useful with a toggle., Ayuda.IsSteamNodesInstalled - This node determines if steamnodes is installed. Useful with a toggle.;, Ayuda.ThisOrThat - This node is a toggle between two inputs., CableTray.Space - This node will determine the space a cable tray's center falls within., Collector.Areas - This is an area collector element that utilizes mostly OOTB nodes., Collector.DuctsBySystem - This collects all ducts in the project and organizes them by System Classification, Collector.KeynoteTags - This collects all of the keynote tags in the model. Similar to other nodes, but this doesn't use python., Collector.LabelTypes - This node collects all of the label types for the active family document., Collector.PipesBySystem - This collects all pipes in the project and organizes them by System Classification, Collector.TagTypes - This node collects the tag types in the model., Collector.Viewports - This collects all of the viewports in the model and outputs the name, title on sheet, scale and viewport type., CurtainGrid.AllSegmentCurves - This will return the vertical and horizontal curtain grid segments regardless if hidden or not. Groups by U and V., CurtainGrid.ByElement - Gets the curtain grids by the host element. Seperates into U and V, CurtainGrid.ExistingSegmentCurves - Retrieve all the existing segment curves of the grid line.  Groups by U and V., CurtainGrid.FullCurve - Returns the curves of the input curtain grids. Groups by U and V., CurtainGrid.RemoveSegment - Removes segments from curtain grids. Can't take lists yet. Use with List.Combine., CurtainGrid.RemoveSegmentsFunction - Function to apply to remove segments node, CurtainGrid.SkippedSegmentCurves - Retrieve all the removed segment curves of the grid line. , Curve.FromLine - This will translate a line element to a curve., Dash Remover - This node removes the dash at index 2 if it exists. The reason being, NCS states that no dash shall be used., Dimension.IsOverridden - This will report if a dimension has been overridden. , Dimension.LeaderEndPosition - This will return the leader end postion as a point., Dimension.MultiSegmentMembers - This will output all of the members of a multi-segment dimension., Dimension.NumberOfSegments - This will return the number of segments a dimension has. If it is a single dimension, this will return zero., Dimension.Origin - This will return the dimension origin as a point., Dimension.SetAboveValue - This will set the above value of a dimension., Dimension.SetBelowValue - This will set the below value of a dimension., Dimension.TextPosition - This will return the postition of the text as a point., Dimension.ValueString - The displayed value shown for the dimension segment. , Document.BackgroundOpen - This will open the input Revit files in the background., Document.Close - This will close the input Revit document. Offers a boolean toggle to save., Document.SetStartingView - This will set the starting view for a given document. ONLY WORKS IN ONE DOCUMENT AT A TIME, DraftingView.CreateInDocument - This will create a new drafting view in the given document. ONLY WORKS FOR ONE DOCUMENT AT A TIME, Element.AreaLocation - This node will determine what area (area plans) an element is located within. Made possible thanks to clockwork. :), Element.AreaWithTotal - This will get the area of an element if the parameter exists. Will total as well if needed., Element.Category - This node will get the input element(s)' categories, Element.CopyFromDocument - This node allows you to copy elements from a specific document to your current document., Element.GetJoinedElements - This will obtain the elements joined to the input element., Element.GetLevelNameAsString - This retrieves the level name of the input elements as a string. This is in response to a known issue with the get value node., Element.GetMultipleParameterValuesByName - Get the value of multiple parameters from elements. (Seperate parameters with comma), Element.GetParameterValueByName(CaSe iNSeNSiTive) - Get the value of one of the element's parameters. (CaSe iNSeNSiTiVe), Element.OverrideCutColorInView - Overrides the elements cut color in the view., Element.OverrideCutLineweight - Overrides the cut lines of the elements, Element.OverrideProjectionFillColor - This node overrides the fill color of the element in view., Element.OverrideProjectionLineColor - This node overrides the projection line color with the input color value. Useful for annotation., Element.OverrideProjectionLineweight - Overrides the line thickness of projection lines, Element.ParentFamily - This node retrieces the parent family name for each input element., Element.Room - This node takes the input of all elements of category and reports back the associated room per element. Currently tested with casework, furniture and plumbing fixtures., Element.SetMultipleParametersByName - Set multiple (comma seperated) parameters by name., Element.SetParameterByName(CaSe iNSeNSiTiVe) - Set one of the element's parameters. (CaSe iNSeNSiTiVe), Element.SetPinnedStatus - Will set the element to either pinned or not pinned. True is pinned, false is unpinned. For multiple elements use List.Map, Element.Space - This will retrieve the space in which an element is contained. (if available), Element.Type - This retrieves the element type of the given elements. (if available) Similar to others available but no python here., Geometry.SpaceEvenlyWithBuffer - This will take input geometry and space it out in the Y direction with a buffer between, Geometry.ToRevitType - This will convert designscript geometyr into Revit.DB types. Currently tested with curves, nurbs curves and solids., GetParameterValueByName(TypeOrInstance) - Gets a parameter value by name regardless of type or instance., GetParameterValueByNameAsString - Returns paramter value as string. Same effect as lunchbox node, without python., Gmail.ComposeEmail - This node will compose a new email. Useful for notifications regarding a graph concluding. Uses pythons built-in SMTP Library., Gmail.ComposeEmailDetailed - This will compose a detailed email with subject and message., Group.UngroupElements - This will ungroup the input groups and output their elements. Use with care!, Inspiration.BuffettNode - This is a result of \"what if?\" thinking. The output is a random Warren Buffett quote from brainyquotes.com, Inspiration.CarreyNode - This is a result of \"what if?\" thinking. The output is a random Jim Carrey quote from brainyquotes.com, Inspiration.CashNode - This is a result of \"what if?\" thinking. The output is a random Johnny Cash quote from brainyquotes.com, Inspiration.MarleyNode - This is a result of \"what if?\" thinking. The output is a random Bob Marley quote from brainyquotes.com, Inspiration.SearchQuoteNode - This is a result of \"what if?\" thinking. The output is a random quote based on the search criteria from brainyquotes.com. (As long as it is on the site), Inspiration.TeresaNode - This is a result of \"what if?\" thinking. The output is a random Mother Teresa quote from brainyquotes.com, Isolated Pick Model Elements(ordered) - Pick model elements in desired order of a desired category., Isolated Pick Model Elements - This allows a multiple selection of elements of specified category., Level Element Collector - This collects data for all of the Level elements in the model. Similar to the node on Lunchbox, but this one uses all O.O.B. nodes., List.AllIndicesOf - Given an item, returns the zero-based indices of all its occurrences in the list. If the item cannot be found, an empty list is returned. , List.ArchitecturalAlphabeticalSequence - This creates a list of characters. What's different is we typically exclude I's and O's from our characters so there is a toggle for this., List.Contains - Determines if the given list contains the item or items., List.GetItemIndices - This node searches the input list for the given string or number., List.MergeSublists - This will merge all sublists with or without a character between the strings., List.ReturnItemsPreviousToIndex - This will take an index (or indices) and return the items previous to it. Useful for sums of all items previous., Mullion.SortByDirection - This will sort mullions of a host curtain wall by direction they are facing., OS.CurrentUser - This node retrieves the current user logged in., OS.CurrentUserAppData - This retrieves the current user's appdata location, Output.Clean - This will return a single value or list from one input., Parametric Graphic Scale - This node automates the graphic scale assigned per viewport. The input required is all instances of viewport category. It also requires shared parameters. Visit sixtysecondrevit.blogspot.com for details., Pick Model Elements - This node offers a pick method for selecting elements in Revit., Railing.BalusterCount - This node will count the amout of balusters in a rail element. Only works for single element for now., RemoveListFromList - This node essentially \"subtracts\" the contents of List B from List A to produce a new list with the unique items., Rhythm.3DRoomTags - This node will generate 3D room tags for all rooms in the model. (RFA in extra folder in Dynamo download), Rhythm.3DSpaceTags - This will generate 3D space tags for all spaces in the project., Rhythm.BackupRFADeleter - This node will scan the contents of a driectory and delete backup RFA files that appear with a four digit backup number before the file extension. (eg. Family1.0001.rfa) This is deleting files so please use with caution!, Rhythm.DatePicker - This provides a popup date selector for the user., Rhythm.Detail Number by View Name  - Automatically numbers your detail number based on the first two characters of your view name. i.e. A4/... (Requires slash to be present), Rhythm.IntegerSlider - Provides an integer slider for the dynamo player. Has min, max and description., Rhythm.MassOSMData - This node will mass the OSM data based upon the know heights. If the building doesn't have a height, it will just output the polygon., Rhythm.OverrideInteriorCrop - This node will override the lineweight of the crop region on interior elevations. This node would not be possible without the power of the Dynamo community. Specifically Danny Jones with Clark Patterson Lee., Rhythm.PercentGlazingByOrientation - This node was show at RTCNA2015 to optimize your workflows. It reports the window to wall % by direction the wall faces., Rhythm.RenumberGridsByCurve - This node will renumber grids in order of curve drawn through them. Select either letters or numbers. (Alphanumeric coming soon), Rhythm.RenumberRoomsByCurve - This node will renumber rooms along a curve path. This was developed through the guidance of WIlliam Wong at case. Considering WeWork bought Case I wanted this node to live somewhere., Rhythm.TextBoxInput - Provides a text box input for users. Allows for multiple strings if needed., Rhythm.Toggle - Toggle that offers two outputs. Created for Dynamo 0.8.1 because of changes to the \"IF\" node, Rhythm.WhatTheNode - This node will let you search dynamonodes.com for the most likely package a node is from. Helps fix \"red\" nodes when users do not have package installed., Rhythm.YesNoToggle - This provides a toggle to use for graphs with dynamo player. The user chooses if they would like to run the graph., Room Element Collector - THis will collect data regarding rooms in the active model. Similar to Lunchbox node, but this one does not use python., RoomTag.Host - Retrieves the assoicated room with a room tag., Select Elements By Curve - This will select model elements in order that a curve is drawn through them., Select Grids By Curve - This will select Revit grids by the input Revit curve,, SetParameterByName(TypeOrInstance) - Set one of the element's parameters regardless of parameter type or instance., Space.IsPointInside - This will test if a point falls within a space., Space.SetSpaceType - This node will set the space type for the input space., Space.GetSpaceType - This will retrieve the space type of the space as a string., SpaceTag.Host - This obtains the MEP space associated with a given MEP space tag., SpaceType.All - This node will output ALL space types., SpaceType.ByName - This will output a MEP space type based on name search., SquareFeetDropper - This node drops square feet from the pulled area, String.CharacterAtIndex - Get's the character at a given index, String.ElementsModified - THis custom node reports the amount of elements in a list as a phrase., String.FlipReverse - This node flips the string and reverses it. (April Fools '15) Works for 0.8.0 only, added unicode support, String.IndicesOfCharacter - This node gets all the indices of a given character, String.IsUnicode - Determines if input string is a unicode character., String.RemoveAfterGivenCharacter - This will move all characters at and after the given character., String.RemovePriorToCharacter - This will remove all characters prior to the input character. Accepts strings., String.SpecifyDecimalPlaces - This node will take your inout string and number of decimal places to create a new simplified output., String.ToSentenceCase - This node will convert a single string of text to have capitalized sentences. If you need to use this over a list, use List.Map., String.ToTitle - Converts the given string to Title Case., StructuralBeamSystem.Members - Thist will collect the members of the ebeam system., TextElement.ToLower - This node converts a Revit text elemnt to upper directly., TextElement.ToTitle - This node converts a Revit text elemnt to upper directly., TextElement.ToUpper - This node converts a Revit text elemnt to upper directly., UI.ColorPicker - This node allows the user to choose a color via the Revit API color selection dialog., UI.FilePath - Provides a file path option for use with Dynamo Player., UI.UserMessage - This will display a user message once. Until it is either toggled or changed., Unicode.LRE - Start of left-to-right embedding Unicode Character, Unicode.LRM - Left-to-right mark unicode character, Unicode.RLE - Start of right-to-left embedding Unicode Character, Unicode.RLM - Right-to-left mark Unicode character, Unicode.ZWJ - Zero width joiner Unicode Character, Unicode.ZWNJ - Zero width non-joiner Unicode Character, View.ConvertToIndependent - This will convert input dependent views to independent. Thanks to TheRevitKid for the idea!, ViewFamilyType.ByName - Select a view family type given it's name., Viewport.ViewName - This node gets the view name of viewports. There is an issue when \"title on sheet\" is used, so this fixes that., Wall.NorthSouthEastWest - This node determines which direction a wall is facing and groups them by the direction or direction they are closest to., Workset.Create - Creates a workset or worksets from input names.",
            "engine_metadata": "",
            "engine_version": "1.2.1.3083",
            "created": "2016-12-13T15:05:58.968Z",
            "full_dependency_versions": [ "2016.12.12" ],
            "full_dependency_ids": [
              {
                "_id": "54e7add1dcee4dfd26000101",
                "name": "Rhythm"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2016.12.12"
          },
          {
            "_id": "585800b0fdef23aa6e000157",
            "contains_binaries": true,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-prod/9fc5c6d0-4618-463d-a72c-e12fccb5a54agregPkg610.zip",
            "contents": "Element.IsPhaseCreatedValid - This will determine if the input phase is the correct one for the input elements, All Elements of Type in Document - All elements of given type in specified document. This works for unopened files and for linked documents., All Framing at Reference Level - Collects all of the structural framing at a specific reference level, All Pipes at Reference Level - This will collect all pipes by their reference level., All Upper - This converts the ase of selected items to UPPER. Inputs require booleans to enable for category., Arrowhead Assigner - This node assings the arrowhead type for all text and keynote tags. There is an input for ones you want to exclude., Ayuda.IsArchi-LabInstalled - This node determines if Archi-Lab is installed. Useful with a toggle., Ayuda.IsClockworkInstalled - This node determines if clockwork is installed. Useful with a toggle., Ayuda.IsSteamNodesInstalled - This node determines if steamnodes is installed. Useful with a toggle.;, Ayuda.ThisOrThat - This node is a toggle between two inputs., CableTray.Space - This node will determine the space a cable tray's center falls within., Collector.Areas - This is an area collector element that utilizes mostly OOTB nodes., Collector.DuctsBySystem - This collects all ducts in the project and organizes them by System Classification, Collector.KeynoteTags - This collects all of the keynote tags in the model. Similar to other nodes, but this doesn't use python., Collector.LabelTypes - This node collects all of the label types for the active family document., Collector.PipesBySystem - This collects all pipes in the project and organizes them by System Classification, Collector.TagTypes - This node collects the tag types in the model., Collector.Viewports - This collects all of the viewports in the model and outputs the name, title on sheet, scale and viewport type., CurtainGrid.AllSegmentCurves - This will return the vertical and horizontal curtain grid segments regardless if hidden or not. Groups by U and V., CurtainGrid.ByElement - Gets the curtain grids by the host element. Seperates into U and V, CurtainGrid.ExistingSegmentCurves - Retrieve all the existing segment curves of the grid line.  Groups by U and V., CurtainGrid.FullCurve - Returns the curves of the input curtain grids. Groups by U and V., CurtainGrid.RemoveSegment - Removes segments from curtain grids. Can't take lists yet. Use with List.Combine., CurtainGrid.RemoveSegmentsFunction - Function to apply to remove segments node, CurtainGrid.SkippedSegmentCurves - Retrieve all the removed segment curves of the grid line. , Curve.FromLine - This will translate a line element to a curve., Dash Remover - This node removes the dash at index 2 if it exists. The reason being, NCS states that no dash shall be used., Dimension.IsOverridden - This will report if a dimension has been overridden. , Dimension.LeaderEndPosition - This will return the leader end postion as a point., Dimension.MultiSegmentMembers - This will output all of the members of a multi-segment dimension., Dimension.NumberOfSegments - This will return the number of segments a dimension has. If it is a single dimension, this will return zero., Dimension.Origin - This will return the dimension origin as a point., Dimension.SetAboveValue - This will set the above value of a dimension., Dimension.SetBelowValue - This will set the below value of a dimension., Dimension.TextPosition - This will return the postition of the text as a point., Dimension.ValueString - The displayed value shown for the dimension segment. , Document.BackgroundOpen - This will open the input Revit files in the background., Document.Close - This will close the input Revit document. Offers a boolean toggle to save., Document.SetStartingView - This will set the starting view for a given document. ONLY WORKS IN ONE DOCUMENT AT A TIME, DraftingView.CreateInDocument - This will create a new drafting view in the given document. ONLY WORKS FOR ONE DOCUMENT AT A TIME, Element.AreaLocation - This node will determine what area (area plans) an element is located within. Made possible thanks to clockwork. :), Element.AreaWithTotal - This will get the area of an element if the parameter exists. Will total as well if needed., Element.Category - This node will get the input element(s)' categories, Element.CopyFromDocument - This node allows you to copy elements from a specific document to your current document., Element.GetJoinedElements - This will obtain the elements joined to the input element., Element.GetLevelNameAsString - This retrieves the level name of the input elements as a string. This is in response to a known issue with the get value node., Element.GetMultipleParameterValuesByName - Get the value of multiple parameters from elements. (Seperate parameters with comma), Element.GetParameterValueByName(CaSe iNSeNSiTive) - Get the value of one of the element's parameters. (CaSe iNSeNSiTiVe), Element.OverrideCutColorInView - Overrides the elements cut color in the view., Element.OverrideCutLineweight - Overrides the cut lines of the elements, Element.OverrideProjectionFillColor - This node overrides the fill color of the element in view., Element.OverrideProjectionLineColor - This node overrides the projection line color with the input color value. Useful for annotation., Element.OverrideProjectionLineweight - Overrides the line thickness of projection lines, Element.ParentFamily - This node retrieces the parent family name for each input element., Element.Room - This node takes the input of all elements of category and reports back the associated room per element. Currently tested with casework, furniture and plumbing fixtures., Element.SetMultipleParametersByName - Set multiple (comma seperated) parameters by name., Element.SetParameterByName(CaSe iNSeNSiTiVe) - Set one of the element's parameters. (CaSe iNSeNSiTiVe), Element.SetPinnedStatus - Will set the element to either pinned or not pinned. True is pinned, false is unpinned. For multiple elements use List.Map, Element.Space - This will retrieve the space in which an element is contained. (if available), Element.Type - This retrieves the element type of the given elements. (if available) Similar to others available but no python here., Geometry.SpaceEvenlyWithBuffer - This will take input geometry and space it out in the Y direction with a buffer between, Geometry.ToRevitType - This will convert designscript geometyr into Revit.DB types. Currently tested with curves, nurbs curves and solids., GetParameterValueByName(TypeOrInstance) - Gets a parameter value by name regardless of type or instance., GetParameterValueByNameAsString - Returns paramter value as string. Same effect as lunchbox node, without python., Gmail.ComposeEmail - This node will compose a new email. Useful for notifications regarding a graph concluding. Uses pythons built-in SMTP Library., Gmail.ComposeEmailDetailed - This will compose a detailed email with subject and message., Group.UngroupElements - This will ungroup the input groups and output their elements. Use with care!, Inspiration.BuffettNode - This is a result of \"what if?\" thinking. The output is a random Warren Buffett quote from brainyquotes.com, Inspiration.CarreyNode - This is a result of \"what if?\" thinking. The output is a random Jim Carrey quote from brainyquotes.com, Inspiration.CashNode - This is a result of \"what if?\" thinking. The output is a random Johnny Cash quote from brainyquotes.com, Inspiration.MarleyNode - This is a result of \"what if?\" thinking. The output is a random Bob Marley quote from brainyquotes.com, Inspiration.SearchQuoteNode - This is a result of \"what if?\" thinking. The output is a random quote based on the search criteria from brainyquotes.com. (As long as it is on the site), Inspiration.TeresaNode - This is a result of \"what if?\" thinking. The output is a random Mother Teresa quote from brainyquotes.com, Isolated Pick Model Elements(ordered) - Pick model elements in desired order of a desired category., Isolated Pick Model Elements - This allows a multiple selection of elements of specified category., Level Element Collector - This collects data for all of the Level elements in the model. Similar to the node on Lunchbox, but this one uses all O.O.B. nodes., List.AllIndicesOf - Given an item, returns the zero-based indices of all its occurrences in the list. If the item cannot be found, an empty list is returned. , List.ArchitecturalAlphabeticalSequence - This creates a list of characters. What's different is we typically exclude I's and O's from our characters so there is a toggle for this., List.Contains - Determines if the given list contains the item or items., List.GetItemIndices - This node searches the input list for the given string or number., List.MergeSublists - This will merge all sublists with or without a character between the strings., List.ReturnItemsPreviousToIndex - This will take an index (or indices) and return the items previous to it. Useful for sums of all items previous., Mullion.SortByDirection - This will sort mullions of a host curtain wall by direction they are facing., OS.CurrentUser - This node retrieves the current user logged in., OS.CurrentUserAppData - This retrieves the current user's appdata location, Output.Clean - This will return a single value or list from one input., Parametric Graphic Scale - This node automates the graphic scale assigned per viewport. The input required is all instances of viewport category. It also requires shared parameters. Visit sixtysecondrevit.blogspot.com for details., Pick Model Elements - This node offers a pick method for selecting elements in Revit., Railing.BalusterCount - This node will count the amout of balusters in a rail element. Only works for single element for now., RemoveListFromList - This node essentially \"subtracts\" the contents of List B from List A to produce a new list with the unique items., Rhythm.3DRoomTags - This node will generate 3D room tags for all rooms in the model. (RFA in extra folder in Dynamo download), Rhythm.3DSpaceTags - This will generate 3D space tags for all spaces in the project., Rhythm.BackupRFADeleter - This node will scan the contents of a driectory and delete backup RFA files that appear with a four digit backup number before the file extension. (eg. Family1.0001.rfa) This is deleting files so please use with caution!, Rhythm.DatePicker - This provides a popup date selector for the user., Rhythm.Detail Number by View Name  - Automatically numbers your detail number based on the first two characters of your view name. i.e. A4/... (Requires slash to be present), Rhythm.IntegerSlider - Provides an integer slider for the dynamo player. Has min, max and description., Rhythm.MassOSMData - This node will mass the OSM data based upon the know heights. If the building doesn't have a height, it will just output the polygon., Rhythm.OverrideInteriorCrop - This node will override the lineweight of the crop region on interior elevations. This node would not be possible without the power of the Dynamo community. Specifically Danny Jones with Clark Patterson Lee., Rhythm.PercentGlazingByOrientation - This node was show at RTCNA2015 to optimize your workflows. It reports the window to wall % by direction the wall faces., Rhythm.RenumberGridsByCurve - This node will renumber grids in order of curve drawn through them. Select either letters or numbers. (Alphanumeric coming soon), Rhythm.RenumberRoomsByCurve - This node will renumber rooms along a curve path. This was developed through the guidance of WIlliam Wong at case. Considering WeWork bought Case I wanted this node to live somewhere., Rhythm.TextBoxInput - Provides a text box input for users. Allows for multiple strings if needed., Rhythm.Toggle - Toggle that offers two outputs. Created for Dynamo 0.8.1 because of changes to the \"IF\" node, Rhythm.WhatTheNode - This node will let you search dynamonodes.com for the most likely package a node is from. Helps fix \"red\" nodes when users do not have package installed., Rhythm.YesNoToggle - This provides a toggle to use for graphs with dynamo player. The user chooses if they would like to run the graph., Room Element Collector - THis will collect data regarding rooms in the active model. Similar to Lunchbox node, but this one does not use python., RoomTag.Host - Retrieves the assoicated room with a room tag., Select Elements By Curve - This will select model elements in order that a curve is drawn through them., Select Grids By Curve - This will select Revit grids by the input Revit curve,, SetParameterByName(TypeOrInstance) - Set one of the element's parameters regardless of parameter type or instance., Space.IsPointInside - This will test if a point falls within a space., Space.SetSpaceType - This node will set the space type for the input space., Space.GetSpaceType - This will retrieve the space type of the space as a string., SpaceTag.Host - This obtains the MEP space associated with a given MEP space tag., SpaceType.All - This node will output ALL space types., SpaceType.ByName - This will output a MEP space type based on name search., SquareFeetDropper - This node drops square feet from the pulled area, String.CharacterAtIndex - Get's the character at a given index, String.ElementsModified - THis custom node reports the amount of elements in a list as a phrase., String.FlipReverse - This node flips the string and reverses it. (April Fools '15) Works for 0.8.0 only, added unicode support, String.IndicesOfCharacter - This node gets all the indices of a given character, String.IsUnicode - Determines if input string is a unicode character., String.RemoveAfterGivenCharacter - This will move all characters at and after the given character., String.RemovePriorToCharacter - This will remove all characters prior to the input character. Accepts strings., String.SpecifyDecimalPlaces - This node will take your inout string and number of decimal places to create a new simplified output., String.ToSentenceCase - This node will convert a single string of text to have capitalized sentences. If you need to use this over a list, use List.Map., String.ToTitle - Converts the given string to Title Case., StructuralBeamSystem.Members - Thist will collect the members of the ebeam system., TextElement.ToLower - This node converts a Revit text elemnt to upper directly., TextElement.ToTitle - This node converts a Revit text elemnt to upper directly., TextElement.ToUpper - This node converts a Revit text elemnt to upper directly., UI.ColorPicker - This node allows the user to choose a color via the Revit API color selection dialog., UI.FilePath - Provides a file path option for use with Dynamo Player., UI.UserMessage - This will display a user message once. Until it is either toggled or changed., Unicode.LRE - Start of left-to-right embedding Unicode Character, Unicode.LRM - Left-to-right mark unicode character, Unicode.RLE - Start of right-to-left embedding Unicode Character, Unicode.RLM - Right-to-left mark Unicode character, Unicode.ZWJ - Zero width joiner Unicode Character, Unicode.ZWNJ - Zero width non-joiner Unicode Character, View.ConvertToIndependent - This will convert input dependent views to independent. Thanks to TheRevitKid for the idea!, ViewFamilyType.ByName - Select a view family type given it's name., Viewport.ViewName - This node gets the view name of viewports. There is an issue when \"title on sheet\" is used, so this fixes that., Wall.NorthSouthEastWest - This node determines which direction a wall is facing and groups them by the direction or direction they are closest to., Workset.Create - Creates a workset or worksets from input names., Element.IsPhaseCreatedValid - This will determine if the input phase is the correct one for the input elements",
            "engine_metadata": "",
            "engine_version": "1.2.1.3083",
            "created": "2016-12-19T15:45:52.015Z",
            "full_dependency_versions": [ "2016.12.18" ],
            "full_dependency_ids": [
              {
                "_id": "54e7add1dcee4dfd26000101",
                "name": "Rhythm"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2016.12.18"
          },
          {
            "_id": "58598c70fdef23aa6e000164",
            "contains_binaries": true,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-prod/cf0deebd-15aa-4f73-ba63-700877db4847gregPkg804.zip",
            "contents": "All Elements of Type in Document - All elements of given type in specified document. This works for unopened files and for linked documents., All Framing at Reference Level - Collects all of the structural framing at a specific reference level, All Pipes at Reference Level - This will collect all pipes by their reference level., All Upper - This converts the ase of selected items to UPPER. Inputs require booleans to enable for category., Arrowhead Assigner - This node assings the arrowhead type for all text and keynote tags. There is an input for ones you want to exclude., Ayuda.IsArchi-LabInstalled - This node determines if Archi-Lab is installed. Useful with a toggle., Ayuda.IsClockworkInstalled - This node determines if clockwork is installed. Useful with a toggle., Ayuda.IsSteamNodesInstalled - This node determines if steamnodes is installed. Useful with a toggle.;, Ayuda.ThisOrThat - This node is a toggle between two inputs., CableTray.Space - This node will determine the space a cable tray's center falls within., Collector.Areas - This is an area collector element that utilizes mostly OOTB nodes., Collector.DuctsBySystem - This collects all ducts in the project and organizes them by System Classification, Collector.KeynoteTags - This collects all of the keynote tags in the model. Similar to other nodes, but this doesn't use python., Collector.LabelTypes - This node collects all of the label types for the active family document., Collector.PipesBySystem - This collects all pipes in the project and organizes them by System Classification, Collector.TagTypes - This node collects the tag types in the model., Collector.Viewports - This collects all of the viewports in the model and outputs the name, title on sheet, scale and viewport type., CurtainGrid.AllSegmentCurves - This will return the vertical and horizontal curtain grid segments regardless if hidden or not. Groups by U and V., CurtainGrid.ByElement - Gets the curtain grids by the host element. Seperates into U and V, CurtainGrid.ExistingSegmentCurves - Retrieve all the existing segment curves of the grid line.  Groups by U and V., CurtainGrid.FullCurve - Returns the curves of the input curtain grids. Groups by U and V., CurtainGrid.RemoveSegment - Removes segments from curtain grids. Can't take lists yet. Use with List.Combine., CurtainGrid.RemoveSegmentsFunction - Function to apply to remove segments node, CurtainGrid.SkippedSegmentCurves - Retrieve all the removed segment curves of the grid line. , Curve.FromLine - This will translate a line element to a curve., Dash Remover - This node removes the dash at index 2 if it exists. The reason being, NCS states that no dash shall be used., Dimension.IsOverridden - This will report if a dimension has been overridden. , Dimension.LeaderEndPosition - This will return the leader end postion as a point., Dimension.MultiSegmentMembers - This will output all of the members of a multi-segment dimension., Dimension.NumberOfSegments - This will return the number of segments a dimension has. If it is a single dimension, this will return zero., Dimension.Origin - This will return the dimension origin as a point., Dimension.SetAboveValue - This will set the above value of a dimension., Dimension.SetBelowValue - This will set the below value of a dimension., Dimension.TextPosition - This will return the postition of the text as a point., Dimension.ValueString - The displayed value shown for the dimension segment. , Document.BackgroundOpen - This will open the input Revit files in the background., Document.Close - This will close the input Revit document. Offers a boolean toggle to save., Document.SetStartingView - This will set the starting view for a given document. ONLY WORKS IN ONE DOCUMENT AT A TIME, DraftingView.CreateInDocument - This will create a new drafting view in the given document. ONLY WORKS FOR ONE DOCUMENT AT A TIME, Element.AreaLocation - This node will determine what area (area plans) an element is located within. Made possible thanks to clockwork. :), Element.AreaWithTotal - This will get the area of an element if the parameter exists. Will total as well if needed., Element.Category - This node will get the input element(s)' categories, Element.CopyFromDocument - This node allows you to copy elements from a specific document to your current document., Element.GetJoinedElements - This will obtain the elements joined to the input element., Element.GetLevelNameAsString - This retrieves the level name of the input elements as a string. This is in response to a known issue with the get value node., Element.GetMultipleParameterValuesByName - Get the value of multiple parameters from elements. (Seperate parameters with comma), Element.GetParameterValueByName(CaSe iNSeNSiTive) - Get the value of one of the element's parameters. (CaSe iNSeNSiTiVe), Element.IsPhaseCreatedValid - This will determine if the input phase is the correct one for the input elements, Element.OverrideCutColorInView - Overrides the elements cut color in the view., Element.OverrideCutLineweight - Overrides the cut lines of the elements, Element.OverrideProjectionFillColor - This node overrides the fill color of the element in view., Element.OverrideProjectionLineColor - This node overrides the projection line color with the input color value. Useful for annotation., Element.OverrideProjectionLineweight - Overrides the line thickness of projection lines, Element.ParentFamily - This node retrieces the parent family name for each input element., Element.Room - This node takes the input of all elements of category and reports back the associated room per element. Currently tested with casework, furniture and plumbing fixtures., Element.SetMultipleParametersByName - Set multiple (comma seperated) parameters by name., Element.SetParameterByName(CaSe iNSeNSiTiVe) - Set one of the element's parameters. (CaSe iNSeNSiTiVe), Element.SetPinnedStatus - Will set the element to either pinned or not pinned. True is pinned, false is unpinned. For multiple elements use List.Map, Element.Space - This will retrieve the space in which an element is contained. (if available), Element.Type - This retrieves the element type of the given elements. (if available) Similar to others available but no python here., Geometry.SpaceEvenlyWithBuffer - This will take input geometry and space it out in the Y direction with a buffer between, Geometry.ToRevitType - This will convert designscript geometyr into Revit.DB types. Currently tested with curves, nurbs curves and solids., GetParameterValueByName(TypeOrInstance) - Gets a parameter value by name regardless of type or instance., GetParameterValueByNameAsString - Returns paramter value as string. Same effect as lunchbox node, without python., Gmail.ComposeEmail - This node will compose a new email. Useful for notifications regarding a graph concluding. Uses pythons built-in SMTP Library., Gmail.ComposeEmailDetailed - This will compose a detailed email with subject and message., Group.UngroupElements - This will ungroup the input groups and output their elements. Use with care!, Inspiration.BuffettNode - This is a result of \"what if?\" thinking. The output is a random Warren Buffett quote from brainyquotes.com, Inspiration.CarreyNode - This is a result of \"what if?\" thinking. The output is a random Jim Carrey quote from brainyquotes.com, Inspiration.CashNode - This is a result of \"what if?\" thinking. The output is a random Johnny Cash quote from brainyquotes.com, Inspiration.MarleyNode - This is a result of \"what if?\" thinking. The output is a random Bob Marley quote from brainyquotes.com, Inspiration.SearchQuoteNode - This is a result of \"what if?\" thinking. The output is a random quote based on the search criteria from brainyquotes.com. (As long as it is on the site), Inspiration.TeresaNode - This is a result of \"what if?\" thinking. The output is a random Mother Teresa quote from brainyquotes.com, Isolated Pick Model Elements(ordered) - Pick model elements in desired order of a desired category., Isolated Pick Model Elements - This allows a multiple selection of elements of specified category., Level Element Collector - This collects data for all of the Level elements in the model. Similar to the node on Lunchbox, but this one uses all O.O.B. nodes., List.AllIndicesOf - Given an item, returns the zero-based indices of all its occurrences in the list. If the item cannot be found, an empty list is returned. , List.ArchitecturalAlphabeticalSequence - This creates a list of characters. What's different is we typically exclude I's and O's from our characters so there is a toggle for this., List.Contains - Determines if the given list contains the item or items., List.GetItemIndices - This node searches the input list for the given string or number., List.MergeSublists - This will merge all sublists with or without a character between the strings., List.ReturnItemsPreviousToIndex - This will take an index (or indices) and return the items previous to it. Useful for sums of all items previous., Mullion.SortByDirection - This will sort mullions of a host curtain wall by direction they are facing., OS.CurrentUser - This node retrieves the current user logged in., OS.CurrentUserAppData - This retrieves the current user's appdata location, Output.Clean - This will return a single value or list from one input., Parametric Graphic Scale - This node automates the graphic scale assigned per viewport. The input required is all instances of viewport category. It also requires shared parameters. Visit sixtysecondrevit.blogspot.com for details., Pick Model Elements - This node offers a pick method for selecting elements in Revit., Railing.BalusterCount - This node will count the amout of balusters in a rail element. Only works for single element for now., RemoveListFromList - This node essentially \"subtracts\" the contents of List B from List A to produce a new list with the unique items., Rhythm.3DRoomTags - This node will generate 3D room tags for all rooms in the model. (RFA in extra folder in Dynamo download), Rhythm.3DSpaceTags - This will generate 3D space tags for all spaces in the project., Rhythm.BackupRFADeleter - This node will scan the contents of a driectory and delete backup RFA files that appear with a four digit backup number before the file extension. (eg. Family1.0001.rfa) This is deleting files so please use with caution!, Rhythm.DatePicker - This provides a popup date selector for the user., Rhythm.Detail Number by View Name  - Automatically numbers your detail number based on the first two characters of your view name. i.e. A4/... (Requires slash to be present), Rhythm.IntegerSlider - Provides an integer slider for the dynamo player. Has min, max and description., Rhythm.MassOSMData - This node will mass the OSM data based upon the know heights. If the building doesn't have a height, it will just output the polygon., Rhythm.OverrideInteriorCrop - This node will override the lineweight of the crop region on interior elevations. This node would not be possible without the power of the Dynamo community. Specifically Danny Jones with Clark Patterson Lee., Rhythm.PercentGlazingByOrientation - This node was show at RTCNA2015 to optimize your workflows. It reports the window to wall % by direction the wall faces., Rhythm.RenumberGridsByCurve - This node will renumber grids in order of curve drawn through them. Select either letters or numbers. (Alphanumeric coming soon), Rhythm.RenumberRoomsByCurve - This node will renumber rooms along a curve path. This was developed through the guidance of WIlliam Wong at case. Considering WeWork bought Case I wanted this node to live somewhere., Rhythm.TextBoxInput - Provides a text box input for users. Allows for multiple strings if needed., Rhythm.Toggle - Toggle that offers two outputs. Created for Dynamo 0.8.1 because of changes to the \"IF\" node, Rhythm.WhatTheNode - This node will let you search dynamonodes.com for the most likely package a node is from. Helps fix \"red\" nodes when users do not have package installed., Rhythm.YesNoToggle - This provides a toggle to use for graphs with dynamo player. The user chooses if they would like to run the graph., Room Element Collector - THis will collect data regarding rooms in the active model. Similar to Lunchbox node, but this one does not use python., RoomTag.Host - Retrieves the assoicated room with a room tag., Select Elements By Curve - This will select model elements in order that a curve is drawn through them., Select Grids By Curve - This will select Revit grids by the input Revit curve,, SetParameterByName(TypeOrInstance) - Set one of the element's parameters regardless of parameter type or instance., Space.IsPointInside - This will test if a point falls within a space., Space.SetSpaceType - This node will set the space type for the input space., Space.GetSpaceType - This will retrieve the space type of the space as a string., SpaceTag.Host - This obtains the MEP space associated with a given MEP space tag., SpaceType.All - This node will output ALL space types., SpaceType.ByName - This will output a MEP space type based on name search., SquareFeetDropper - This node drops square feet from the pulled area, String.CharacterAtIndex - Get's the character at a given index, String.ElementsModified - THis custom node reports the amount of elements in a list as a phrase., String.FlipReverse - This node flips the string and reverses it. (April Fools '15) Works for 0.8.0 only, added unicode support, String.IndicesOfCharacter - This node gets all the indices of a given character, String.IsUnicode - Determines if input string is a unicode character., String.RemoveAfterGivenCharacter - This will move all characters at and after the given character., String.RemovePriorToCharacter - This will remove all characters prior to the input character. Accepts strings., String.SpecifyDecimalPlaces - This node will take your inout string and number of decimal places to create a new simplified output., String.ToSentenceCase - This node will convert a single string of text to have capitalized sentences. If you need to use this over a list, use List.Map., String.ToTitle - Converts the given string to Title Case., StructuralBeamSystem.Members - Thist will collect the members of the ebeam system., TextElement.ToLower - This node converts a Revit text elemnt to upper directly., TextElement.ToTitle - This node converts a Revit text elemnt to upper directly., TextElement.ToUpper - This node converts a Revit text elemnt to upper directly., UI.ColorPicker - This node allows the user to choose a color via the Revit API color selection dialog., UI.FilePath - Provides a file path option for use with Dynamo Player., UI.UserMessage - This will display a user message once. Until it is either toggled or changed., Unicode.LRE - Start of left-to-right embedding Unicode Character, Unicode.LRM - Left-to-right mark unicode character, Unicode.RLE - Start of right-to-left embedding Unicode Character, Unicode.RLM - Right-to-left mark Unicode character, Unicode.ZWJ - Zero width joiner Unicode Character, Unicode.ZWNJ - Zero width non-joiner Unicode Character, View.ConvertToIndependent - This will convert input dependent views to independent. Thanks to TheRevitKid for the idea!, ViewFamilyType.ByName - Select a view family type given it's name., Viewport.ViewName - This node gets the view name of viewports. There is an issue when \"title on sheet\" is used, so this fixes that., Wall.NorthSouthEastWest - This node determines which direction a wall is facing and groups them by the direction or direction they are closest to., Workset.Create - Creates a workset or worksets from input names., BasicFileInfo.SavedInVersion - This will supply the version that the revit model is saved in.",
            "engine_metadata": "",
            "engine_version": "1.2.1.3083",
            "created": "2016-12-20T19:54:24.742Z",
            "full_dependency_versions": [ "2016.12.19" ],
            "full_dependency_ids": [
              {
                "_id": "54e7add1dcee4dfd26000101",
                "name": "Rhythm"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2016.12.19"
          },
          {
            "_id": "586590cdfdef23aa6e0001a7",
            "contains_binaries": true,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-prod/6bf19b61-0305-4c55-b3b4-7ee3b5938142gregPkg985.zip",
            "contents": "All Elements of Type in Document - All elements of given type in specified document. This works for unopened files and for linked documents., All Framing at Reference Level - Collects all of the structural framing at a specific reference level, All Pipes at Reference Level - This will collect all pipes by their reference level., All Upper - This converts the ase of selected items to UPPER. Inputs require booleans to enable for category., Arrowhead Assigner - This node assings the arrowhead type for all text and keynote tags. There is an input for ones you want to exclude., Ayuda.IsArchi-LabInstalled - This node determines if Archi-Lab is installed. Useful with a toggle., Ayuda.IsClockworkInstalled - This node determines if clockwork is installed. Useful with a toggle., Ayuda.IsSteamNodesInstalled - This node determines if steamnodes is installed. Useful with a toggle.;, Ayuda.ThisOrThat - This node is a toggle between two inputs., BasicFileInfo.SavedInVersion - This will supply the version that the revit model is saved in., CableTray.Space - This node will determine the space a cable tray's center falls within., Collector.Areas - This is an area collector element that utilizes mostly OOTB nodes., Collector.DuctsBySystem - This collects all ducts in the project and organizes them by System Classification, Collector.KeynoteTags - This collects all of the keynote tags in the model. Similar to other nodes, but this doesn't use python., Collector.LabelTypes - This node collects all of the label types for the active family document., Collector.PipesBySystem - This collects all pipes in the project and organizes them by System Classification, Collector.TagTypes - This node collects the tag types in the model., Collector.Viewports - This collects all of the viewports in the model and outputs the name, title on sheet, scale and viewport type., CurtainGrid.AllSegmentCurves - This will return the vertical and horizontal curtain grid segments regardless if hidden or not. Groups by U and V., CurtainGrid.ByElement - Gets the curtain grids by the host element. Seperates into U and V, CurtainGrid.ExistingSegmentCurves - Retrieve all the existing segment curves of the grid line.  Groups by U and V., CurtainGrid.FullCurve - Returns the curves of the input curtain grids. Groups by U and V., CurtainGrid.RemoveSegment - Removes segments from curtain grids. Can't take lists yet. Use with List.Combine., CurtainGrid.RemoveSegmentsFunction - Function to apply to remove segments node, CurtainGrid.SkippedSegmentCurves - Retrieve all the removed segment curves of the grid line. , Curve.FromLine - This will translate a line element to a curve., Dash Remover - This node removes the dash at index 2 if it exists. The reason being, NCS states that no dash shall be used., Dimension.IsOverridden - This will report if a dimension has been overridden. , Dimension.LeaderEndPosition - This will return the leader end postion as a point., Dimension.MultiSegmentMembers - This will output all of the members of a multi-segment dimension., Dimension.NumberOfSegments - This will return the number of segments a dimension has. If it is a single dimension, this will return zero., Dimension.Origin - This will return the dimension origin as a point., Dimension.SetAboveValue - This will set the above value of a dimension., Dimension.SetBelowValue - This will set the below value of a dimension., Dimension.TextPosition - This will return the postition of the text as a point., Dimension.ValueString - The displayed value shown for the dimension segment. , Document.BackgroundOpen - This will open the input Revit files in the background., Document.Close - This will close the input Revit document. Offers a boolean toggle to save., Document.SetStartingView - This will set the starting view for a given document. ONLY WORKS IN ONE DOCUMENT AT A TIME, DraftingView.CreateInDocument - This will create a new drafting view in the given document. ONLY WORKS FOR ONE DOCUMENT AT A TIME, Element.AreaLocation - This node will determine what area (area plans) an element is located within. Made possible thanks to clockwork. :), Element.AreaWithTotal - This will get the area of an element if the parameter exists. Will total as well if needed., Element.Category - This node will get the input element(s)' categories, Element.CopyFromDocument - This node allows you to copy elements from a specific document to your current document., Element.GetJoinedElements - This will obtain the elements joined to the input element., Element.GetLevelNameAsString - This retrieves the level name of the input elements as a string. This is in response to a known issue with the get value node., Element.GetMultipleParameterValuesByName - Get the value of multiple parameters from elements. (Seperate parameters with comma), Element.GetParameterValueByName(CaSe iNSeNSiTive) - Get the value of one of the element's parameters. (CaSe iNSeNSiTiVe), Element.IsPhaseCreatedValid - This will determine if the input phase is the correct one for the input elements, Element.OverrideCutColorInView - Overrides the elements cut color in the view., Element.OverrideCutLineweight - Overrides the cut lines of the elements, Element.OverrideProjectionFillColor - This node overrides the fill color of the element in view., Element.OverrideProjectionLineColor - This node overrides the projection line color with the input color value. Useful for annotation., Element.OverrideProjectionLineweight - Overrides the line thickness of projection lines, Element.ParentFamily - This node retrieces the parent family name for each input element., Element.Room - This node takes the input of all elements of category and reports back the associated room per element. Currently tested with casework, furniture and plumbing fixtures., Element.SetMultipleParametersByName - Set multiple (comma seperated) parameters by name., Element.SetParameterByName(CaSe iNSeNSiTiVe) - Set one of the element's parameters. (CaSe iNSeNSiTiVe), Element.SetPinnedStatus - Will set the element to either pinned or not pinned. True is pinned, false is unpinned. For multiple elements use List.Map, Element.Space - This will retrieve the space in which an element is contained. (if available), Element.Type - This retrieves the element type of the given elements. (if available) Similar to others available but no python here., Geometry.SpaceEvenlyWithBuffer - This will take input geometry and space it out in the Y direction with a buffer between, Geometry.ToRevitType - This will convert designscript geometyr into Revit.DB types. Currently tested with curves, nurbs curves and solids., GetParameterValueByName(TypeOrInstance) - Gets a parameter value by name regardless of type or instance., GetParameterValueByNameAsString - Returns paramter value as string. Same effect as lunchbox node, without python., Gmail.ComposeEmail - This node will compose a new email. Useful for notifications regarding a graph concluding. Uses pythons built-in SMTP Library., Gmail.ComposeEmailDetailed - This will compose a detailed email with subject and message., Group.UngroupElements - This will ungroup the input groups and output their elements. Use with care!, Inspiration.BuffettNode - This is a result of \"what if?\" thinking. The output is a random Warren Buffett quote from brainyquotes.com, Inspiration.CarreyNode - This is a result of \"what if?\" thinking. The output is a random Jim Carrey quote from brainyquotes.com, Inspiration.CashNode - This is a result of \"what if?\" thinking. The output is a random Johnny Cash quote from brainyquotes.com, Inspiration.MarleyNode - This is a result of \"what if?\" thinking. The output is a random Bob Marley quote from brainyquotes.com, Inspiration.SearchQuoteNode - This is a result of \"what if?\" thinking. The output is a random quote based on the search criteria from brainyquotes.com. (As long as it is on the site), Inspiration.TeresaNode - This is a result of \"what if?\" thinking. The output is a random Mother Teresa quote from brainyquotes.com, Isolated Pick Model Elements(ordered) - Pick model elements in desired order of a desired category., Isolated Pick Model Elements - This allows a multiple selection of elements of specified category., Level Element Collector - This collects data for all of the Level elements in the model. Similar to the node on Lunchbox, but this one uses all O.O.B. nodes., List.AllIndicesOf - Given an item, returns the zero-based indices of all its occurrences in the list. If the item cannot be found, an empty list is returned. , List.ArchitecturalAlphabeticalSequence - This creates a list of characters. What's different is we typically exclude I's and O's from our characters so there is a toggle for this., List.Contains - Determines if the given list contains the item or items., List.GetItemIndices - This node searches the input list for the given string or number., List.MergeSublists - This will merge all sublists with or without a character between the strings., List.ReturnItemsPreviousToIndex - This will take an index (or indices) and return the items previous to it. Useful for sums of all items previous., Mullion.SortByDirection - This will sort mullions of a host curtain wall by direction they are facing., OS.CurrentUser - This node retrieves the current user logged in., OS.CurrentUserAppData - This retrieves the current user's appdata location, Output.Clean - This will return a single value or list from one input., Parametric Graphic Scale - This node automates the graphic scale assigned per viewport. The input required is all instances of viewport category. It also requires shared parameters. Visit sixtysecondrevit.blogspot.com for details., Pick Model Elements - This node offers a pick method for selecting elements in Revit., Railing.BalusterCount - This node will count the amout of balusters in a rail element. Only works for single element for now., RemoveListFromList - This node essentially \"subtracts\" the contents of List B from List A to produce a new list with the unique items., Rhythm.3DRoomTags - This node will generate 3D room tags for all rooms in the model. (RFA in extra folder in Dynamo download), Rhythm.3DSpaceTags - This will generate 3D space tags for all spaces in the project., Rhythm.BackupRFADeleter - This node will scan the contents of a driectory and delete backup RFA files that appear with a four digit backup number before the file extension. (eg. Family1.0001.rfa) This is deleting files so please use with caution!, Rhythm.DatePicker - This provides a popup date selector for the user., Rhythm.Detail Number by View Name  - Automatically numbers your detail number based on the first two characters of your view name. i.e. A4/... (Requires slash to be present), Rhythm.IntegerSlider - Provides an integer slider for the dynamo player. Has min, max and description., Rhythm.MassOSMData - This node will mass the OSM data based upon the know heights. If the building doesn't have a height, it will just output the polygon., Rhythm.OverrideInteriorCrop - This node will override the lineweight of the crop region on interior elevations. This node would not be possible without the power of the Dynamo community. Specifically Danny Jones with Clark Patterson Lee., Rhythm.PercentGlazingByOrientation - This node was show at RTCNA2015 to optimize your workflows. It reports the window to wall % by direction the wall faces., Rhythm.RenumberGridsByCurve - This node will renumber grids in order of curve drawn through them. Select either letters or numbers. (Alphanumeric coming soon), Rhythm.RenumberRoomsByCurve - This node will renumber rooms along a curve path. This was developed through the guidance of WIlliam Wong at case. Considering WeWork bought Case I wanted this node to live somewhere., Rhythm.TextBoxInput - Provides a text box input for users. Allows for multiple strings if needed., Rhythm.Toggle - Toggle that offers two outputs. Created for Dynamo 0.8.1 because of changes to the \"IF\" node, Rhythm.WhatTheNode - This node will let you search dynamonodes.com for the most likely package a node is from. Helps fix \"red\" nodes when users do not have package installed., Rhythm.YesNoToggle - This provides a toggle to use for graphs with dynamo player. The user chooses if they would like to run the graph., Room Element Collector - THis will collect data regarding rooms in the active model. Similar to Lunchbox node, but this one does not use python., RoomTag.Host - Retrieves the assoicated room with a room tag., Select Elements By Curve - This will select model elements in order that a curve is drawn through them., Select Grids By Curve - This will select Revit grids by the input Revit curve,, SetParameterByName(TypeOrInstance) - Set one of the element's parameters regardless of parameter type or instance., Space.IsPointInside - This will test if a point falls within a space., Space.SetSpaceType - This node will set the space type for the input space., Space.GetSpaceType - This will retrieve the space type of the space as a string., SpaceTag.Host - This obtains the MEP space associated with a given MEP space tag., SpaceType.All - This node will output ALL space types., SpaceType.ByName - This will output a MEP space type based on name search., SquareFeetDropper - This node drops square feet from the pulled area, String.CharacterAtIndex - Get's the character at a given index, String.ElementsModified - THis custom node reports the amount of elements in a list as a phrase., String.FlipReverse - This node flips the string and reverses it. (April Fools '15) Works for 0.8.0 only, added unicode support, String.IndicesOfCharacter - This node gets all the indices of a given character, String.IsUnicode - Determines if input string is a unicode character., String.RemoveAfterGivenCharacter - This will move all characters at and after the given character., String.RemovePriorToCharacter - This will remove all characters prior to the input character. Accepts strings., String.SpecifyDecimalPlaces - This node will take your inout string and number of decimal places to create a new simplified output., String.ToSentenceCase - This node will convert a single string of text to have capitalized sentences. If you need to use this over a list, use List.Map., String.ToTitle - Converts the given string to Title Case., StructuralBeamSystem.Members - Thist will collect the members of the ebeam system., TextElement.ToLower - This node converts a Revit text elemnt to upper directly., TextElement.ToTitle - This node converts a Revit text elemnt to upper directly., TextElement.ToUpper - This node converts a Revit text elemnt to upper directly., UI.ColorPicker - This node allows the user to choose a color via the Revit API color selection dialog., UI.FilePath - Provides a file path option for use with Dynamo Player., UI.UserMessage - This will display a user message once. Until it is either toggled or changed., Unicode.LRE - Start of left-to-right embedding Unicode Character, Unicode.LRM - Left-to-right mark unicode character, Unicode.RLE - Start of right-to-left embedding Unicode Character, Unicode.RLM - Right-to-left mark Unicode character, Unicode.ZWJ - Zero width joiner Unicode Character, Unicode.ZWNJ - Zero width non-joiner Unicode Character, View.ConvertToIndependent - This will convert input dependent views to independent. Thanks to TheRevitKid for the idea!, ViewFamilyType.ByName - Select a view family type given it's name., Viewport.ViewName - This node gets the view name of viewports. There is an issue when \"title on sheet\" is used, so this fixes that., Wall.NorthSouthEastWest - This node determines which direction a wall is facing and groups them by the direction or direction they are closest to., Workset.Create - Creates a workset or worksets from input names., ReferencePlane.ByStartPointEndPointActiveViewVector - This will create a reference plane by the given start point, end point and active view vector. If you want to use multiple points as input you need to use List@Level with level 1 for both inputs.",
            "engine_metadata": "",
            "engine_version": "1.2.1.3083",
            "created": "2016-12-29T22:40:13.750Z",
            "full_dependency_versions": [ "2016.12.28" ],
            "full_dependency_ids": [
              {
                "_id": "54e7add1dcee4dfd26000101",
                "name": "Rhythm"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2016.12.28"
          },
          {
            "_id": "5873ceb775c961bb1e000056",
            "contains_binaries": true,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-prod/3e942d75-48ba-4dc4-8f7c-0cd39bc00250gregPkg488.zip",
            "contents": "All Elements of Type in Document - All elements of given type in specified document. This works for unopened files and for linked documents., All Framing at Reference Level - Collects all of the structural framing at a specific reference level, All Pipes at Reference Level - This will collect all pipes by their reference level., All Upper - This converts the ase of selected items to UPPER. Inputs require booleans to enable for category., Arrowhead Assigner - This node assings the arrowhead type for all text and keynote tags. There is an input for ones you want to exclude., Ayuda.IsArchi-LabInstalled - This node determines if Archi-Lab is installed. Useful with a toggle., Ayuda.IsClockworkInstalled - This node determines if clockwork is installed. Useful with a toggle., Ayuda.IsSteamNodesInstalled - This node determines if steamnodes is installed. Useful with a toggle.;, Ayuda.ThisOrThat - This node is a toggle between two inputs., BasicFileInfo.SavedInVersion - This will supply the version that the revit model is saved in., CableTray.Space - This node will determine the space a cable tray's center falls within., Collector.Areas - This is an area collector element that utilizes mostly OOTB nodes., Collector.DuctsBySystem - This collects all ducts in the project and organizes them by System Classification, Collector.KeynoteTags - This collects all of the keynote tags in the model. Similar to other nodes, but this doesn't use python., Collector.LabelTypes - This node collects all of the label types for the active family document., Collector.PipesBySystem - This collects all pipes in the project and organizes them by System Classification, Collector.TagTypes - This node collects the tag types in the model., Collector.Viewports - This collects all of the viewports in the model and outputs the name, title on sheet, scale and viewport type., CurtainGrid.AllSegmentCurves - This will return the vertical and horizontal curtain grid segments regardless if hidden or not. Groups by U and V., CurtainGrid.ByElement - Gets the curtain grids by the host element. Seperates into U and V, CurtainGrid.ExistingSegmentCurves - Retrieve all the existing segment curves of the grid line.  Groups by U and V., CurtainGrid.FullCurve - Returns the curves of the input curtain grids. Groups by U and V., CurtainGrid.RemoveSegment - Removes segments from curtain grids. Can't take lists yet. Use with List.Combine., CurtainGrid.RemoveSegmentsFunction - Function to apply to remove segments node, CurtainGrid.SkippedSegmentCurves - Retrieve all the removed segment curves of the grid line. , Curve.FromLine - This will translate a line element to a curve., Dash Remover - This node removes the dash at index 2 if it exists. The reason being, NCS states that no dash shall be used., Dimension.IsOverridden - This will report if a dimension has been overridden. , Dimension.LeaderEndPosition - This will return the leader end postion as a point., Dimension.MultiSegmentMembers - This will output all of the members of a multi-segment dimension., Dimension.NumberOfSegments - This will return the number of segments a dimension has. If it is a single dimension, this will return zero., Dimension.Origin - This will return the dimension origin as a point., Dimension.SetAboveValue - This will set the above value of a dimension., Dimension.SetBelowValue - This will set the below value of a dimension., Dimension.TextPosition - This will return the postition of the text as a point., Dimension.ValueString - The displayed value shown for the dimension segment. , Document.BackgroundOpen - This will open the input Revit files in the background., Document.Close - This will close the input Revit document. Offers a boolean toggle to save., Document.SetStartingView - This will set the starting view for a given document. ONLY WORKS IN ONE DOCUMENT AT A TIME, DraftingView.CreateInDocument - This will create a new drafting view in the given document. ONLY WORKS FOR ONE DOCUMENT AT A TIME, Element.AreaLocation - This node will determine what area (area plans) an element is located within. Made possible thanks to clockwork. :), Element.AreaWithTotal - This will get the area of an element if the parameter exists. Will total as well if needed., Element.Category - This node will get the input element(s)' categories, Element.CopyFromDocument - This node allows you to copy elements from a specific document to your current document., Element.GetJoinedElements - This will obtain the elements joined to the input element., Element.GetLevelNameAsString - This retrieves the level name of the input elements as a string. This is in response to a known issue with the get value node., Element.GetMultipleParameterValuesByName - Get the value of multiple parameters from elements. (Seperate parameters with comma), Element.GetParameterValueByName(CaSe iNSeNSiTive) - Get the value of one of the element's parameters. (CaSe iNSeNSiTiVe), Element.IsPhaseCreatedValid - This will determine if the input phase is the correct one for the input elements, Element.OverrideCutColorInView - Overrides the elements cut color in the view., Element.OverrideCutLineweight - Overrides the cut lines of the elements, Element.OverrideProjectionFillColor - This node overrides the fill color of the element in view., Element.OverrideProjectionLineColor - This node overrides the projection line color with the input color value. Useful for annotation., Element.OverrideProjectionLineweight - Overrides the line thickness of projection lines, Element.ParentFamily - This node retrieces the parent family name for each input element., Element.Room - This node takes the input of all elements of category and reports back the associated room per element. Currently tested with casework, furniture and plumbing fixtures., Element.SetMultipleParametersByName - Set multiple (comma seperated) parameters by name., Element.SetParameterByName(CaSe iNSeNSiTiVe) - Set one of the element's parameters. (CaSe iNSeNSiTiVe), Element.SetPinnedStatus - Will set the element to either pinned or not pinned. True is pinned, false is unpinned. For multiple elements use List.Map, Element.Space - This will retrieve the space in which an element is contained. (if available), Element.Type - This retrieves the element type of the given elements. (if available) Similar to others available but no python here., Geometry.SpaceEvenlyWithBuffer - This will take input geometry and space it out in the Y direction with a buffer between, Geometry.ToRevitType - This will convert designscript geometyr into Revit.DB types. Currently tested with curves, nurbs curves and solids., GetParameterValueByName(TypeOrInstance) - Gets a parameter value by name regardless of type or instance., GetParameterValueByNameAsString - Returns paramter value as string. Same effect as lunchbox node, without python., Gmail.ComposeEmail - This node will compose a new email. Useful for notifications regarding a graph concluding. Uses pythons built-in SMTP Library., Gmail.ComposeEmailDetailed - This will compose a detailed email with subject and message., Group.UngroupElements - This will ungroup the input groups and output their elements. Use with care!, Inspiration.BuffettNode - This is a result of \"what if?\" thinking. The output is a random Warren Buffett quote from brainyquotes.com, Inspiration.CarreyNode - This is a result of \"what if?\" thinking. The output is a random Jim Carrey quote from brainyquotes.com, Inspiration.CashNode - This is a result of \"what if?\" thinking. The output is a random Johnny Cash quote from brainyquotes.com, Inspiration.MarleyNode - This is a result of \"what if?\" thinking. The output is a random Bob Marley quote from brainyquotes.com, Inspiration.SearchQuoteNode - This is a result of \"what if?\" thinking. The output is a random quote based on the search criteria from brainyquotes.com. (As long as it is on the site), Inspiration.TeresaNode - This is a result of \"what if?\" thinking. The output is a random Mother Teresa quote from brainyquotes.com, Isolated Pick Model Elements(ordered) - Pick model elements in desired order of a desired category., Isolated Pick Model Elements - This allows a multiple selection of elements of specified category., Level Element Collector - This collects data for all of the Level elements in the model. Similar to the node on Lunchbox, but this one uses all O.O.B. nodes., List.AllIndicesOf - Given an item, returns the zero-based indices of all its occurrences in the list. If the item cannot be found, an empty list is returned. , List.ArchitecturalAlphabeticalSequence - This creates a list of characters. What's different is we typically exclude I's and O's from our characters so there is a toggle for this., List.Contains - Determines if the given list contains the item or items., List.GetItemIndices - This node searches the input list for the given string or number., List.MergeSublists - This will merge all sublists with or without a character between the strings., List.ReturnItemsPreviousToIndex - This will take an index (or indices) and return the items previous to it. Useful for sums of all items previous., Mullion.SortByDirection - This will sort mullions of a host curtain wall by direction they are facing., OS.CurrentUser - This node retrieves the current user logged in., OS.CurrentUserAppData - This retrieves the current user's appdata location, Output.Clean - This will return a single value or list from one input., Parametric Graphic Scale - This node automates the graphic scale assigned per viewport. The input required is all instances of viewport category. It also requires shared parameters. Visit sixtysecondrevit.blogspot.com for details., Pick Model Elements - This node offers a pick method for selecting elements in Revit., Railing.BalusterCount - This node will count the amout of balusters in a rail element. Only works for single element for now., ReferencePlane.ByStartPointEndPointActiveViewVector - This will create a reference plane by the given start point, end point and active view vector. If you want to use multiple points as input you need to use List@Level with level 1 for both inputs., RemoveListFromList - This node essentially \"subtracts\" the contents of List B from List A to produce a new list with the unique items., Rhythm.3DRoomTags - This node will generate 3D room tags for all rooms in the model. (RFA in extra folder in Dynamo download), Rhythm.3DSpaceTags - This will generate 3D space tags for all spaces in the project., Rhythm.BackupRFADeleter - This node will scan the contents of a driectory and delete backup RFA files that appear with a four digit backup number before the file extension. (eg. Family1.0001.rfa) This is deleting files so please use with caution!, Rhythm.DatePicker - This provides a popup date selector for the user., Rhythm.Detail Number by View Name  - Automatically numbers your detail number based on the first two characters of your view name. i.e. A4/... (Requires slash to be present), Rhythm.IntegerSlider - Provides an integer slider for the dynamo player. Has min, max and description., Rhythm.MassOSMData - This node will mass the OSM data based upon the know heights. If the building doesn't have a height, it will just output the polygon., Rhythm.OverrideInteriorCrop - This node will override the lineweight of the crop region on interior elevations. This node would not be possible without the power of the Dynamo community. Specifically Danny Jones with Clark Patterson Lee., Rhythm.PercentGlazingByOrientation - This node was show at RTCNA2015 to optimize your workflows. It reports the window to wall % by direction the wall faces., Rhythm.RenumberGridsByCurve - This node will renumber grids in order of curve drawn through them. Select either letters or numbers. (Alphanumeric coming soon), Rhythm.RenumberRoomsByCurve - This node will renumber rooms along a curve path. This was developed through the guidance of WIlliam Wong at case. Considering WeWork bought Case I wanted this node to live somewhere., Rhythm.TextBoxInput - Provides a text box input for users. Allows for multiple strings if needed., Rhythm.Toggle - Toggle that offers two outputs. Created for Dynamo 0.8.1 because of changes to the \"IF\" node, Rhythm.WhatTheNode - This node will let you search dynamonodes.com for the most likely package a node is from. Helps fix \"red\" nodes when users do not have package installed., Rhythm.YesNoToggle - This provides a toggle to use for graphs with dynamo player. The user chooses if they would like to run the graph., Room Element Collector - THis will collect data regarding rooms in the active model. Similar to Lunchbox node, but this one does not use python., RoomTag.Host - Retrieves the assoicated room with a room tag., Select Elements By Curve - This will select model elements in order that a curve is drawn through them., Select Grids By Curve - This will select Revit grids by the input Revit curve,, SetParameterByName(TypeOrInstance) - Set one of the element's parameters regardless of parameter type or instance., Space.IsPointInside - This will test if a point falls within a space., Space.SetSpaceType - This node will set the space type for the input space., Space.GetSpaceType - This will retrieve the space type of the space as a string., SpaceTag.Host - This obtains the MEP space associated with a given MEP space tag., SpaceType.All - This node will output ALL space types., SpaceType.ByName - This will output a MEP space type based on name search., SquareFeetDropper - This node drops square feet from the pulled area, String.CharacterAtIndex - Get's the character at a given index, String.ElementsModified - THis custom node reports the amount of elements in a list as a phrase., String.FlipReverse - This node flips the string and reverses it. (April Fools '15) Works for 0.8.0 only, added unicode support, String.IndicesOfCharacter - This node gets all the indices of a given character, String.IsUnicode - Determines if input string is a unicode character., String.RemoveAfterGivenCharacter - This will move all characters at and after the given character., String.RemovePriorToCharacter - This will remove all characters prior to the input character. Accepts strings., String.SpecifyDecimalPlaces - This node will take your inout string and number of decimal places to create a new simplified output., String.ToSentenceCase - This node will convert a single string of text to have capitalized sentences. If you need to use this over a list, use List.Map., String.ToTitle - Converts the given string to Title Case., StructuralBeamSystem.Members - Thist will collect the members of the ebeam system., TextElement.ToLower - This node converts a Revit text elemnt to upper directly., TextElement.ToTitle - This node converts a Revit text elemnt to upper directly., TextElement.ToUpper - This node converts a Revit text elemnt to upper directly., UI.ColorPicker - This node allows the user to choose a color via the Revit API color selection dialog., UI.FilePath - Provides a file path option for use with Dynamo Player., UI.UserMessage - This will display a user message once. Until it is either toggled or changed., Unicode.LRE - Start of left-to-right embedding Unicode Character, Unicode.LRM - Left-to-right mark unicode character, Unicode.RLE - Start of right-to-left embedding Unicode Character, Unicode.RLM - Right-to-left mark Unicode character, Unicode.ZWJ - Zero width joiner Unicode Character, Unicode.ZWNJ - Zero width non-joiner Unicode Character, View.ConvertToIndependent - This will convert input dependent views to independent. Thanks to TheRevitKid for the idea!, ViewFamilyType.ByName - Select a view family type given it's name., Viewport.ViewName - This node gets the view name of viewports. There is an issue when \"title on sheet\" is used, so this fixes that., Wall.NorthSouthEastWest - This node determines which direction a wall is facing and groups them by the direction or direction they are closest to., Workset.Create - Creates a workset or worksets from input names., Pick Model Element - This offers a single selection of a model element. Created for Dynamo Player usage., PipeInsulation.Create - This will add insulation to the input pipes. Can only handle one type of insulation and size for now.",
            "engine_metadata": "",
            "engine_version": "1.2.1.3083",
            "created": "2017-01-09T17:56:07.813Z",
            "full_dependency_versions": [ "2017.1.8" ],
            "full_dependency_ids": [
              {
                "_id": "54e7add1dcee4dfd26000101",
                "name": "Rhythm"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2017.1.8"
          },
          {
            "_id": "587655daca6a5edb6500000b",
            "contains_binaries": true,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-prod/6ae3e7b5-c208-4ff8-b82e-f4f7a3c96150gregPkg930.zip",
            "contents": "All Elements of Type in Document - All elements of given type in specified document. This works for unopened files and for linked documents., All Framing at Reference Level - Collects all of the structural framing at a specific reference level, All Pipes at Reference Level - This will collect all pipes by their reference level., All Upper - This converts the ase of selected items to UPPER. Inputs require booleans to enable for category., Arrowhead Assigner - This node assings the arrowhead type for all text and keynote tags. There is an input for ones you want to exclude., Ayuda.IsArchi-LabInstalled - This node determines if Archi-Lab is installed. Useful with a toggle., Ayuda.IsClockworkInstalled - This node determines if clockwork is installed. Useful with a toggle., Ayuda.IsSteamNodesInstalled - This node determines if steamnodes is installed. Useful with a toggle.;, Ayuda.ThisOrThat - This node is a toggle between two inputs., BasicFileInfo.SavedInVersion - This will supply the version that the revit model is saved in., CableTray.Space - This node will determine the space a cable tray's center falls within., Collector.Areas - This is an area collector element that utilizes mostly OOTB nodes., Collector.DuctsBySystem - This collects all ducts in the project and organizes them by System Classification, Collector.KeynoteTags - This collects all of the keynote tags in the model. Similar to other nodes, but this doesn't use python., Collector.LabelTypes - This node collects all of the label types for the active family document., Collector.PipesBySystem - This collects all pipes in the project and organizes them by System Classification, Collector.TagTypes - This node collects the tag types in the model., Collector.Viewports - This collects all of the viewports in the model and outputs the name, title on sheet, scale and viewport type., CurtainGrid.AllSegmentCurves - This will return the vertical and horizontal curtain grid segments regardless if hidden or not. Groups by U and V., CurtainGrid.ByElement - Gets the curtain grids by the host element. Seperates into U and V, CurtainGrid.ExistingSegmentCurves - Retrieve all the existing segment curves of the grid line.  Groups by U and V., CurtainGrid.FullCurve - Returns the curves of the input curtain grids. Groups by U and V., CurtainGrid.RemoveSegment - Removes segments from curtain grids. Can't take lists yet. Use with List.Combine., CurtainGrid.RemoveSegmentsFunction - Function to apply to remove segments node, CurtainGrid.SkippedSegmentCurves - Retrieve all the removed segment curves of the grid line. , Curve.FromLine - This will translate a line element to a curve., Dash Remover - This node removes the dash at index 2 if it exists. The reason being, NCS states that no dash shall be used., Dimension.IsOverridden - This will report if a dimension has been overridden. , Dimension.LeaderEndPosition - This will return the leader end postion as a point., Dimension.MultiSegmentMembers - This will output all of the members of a multi-segment dimension., Dimension.NumberOfSegments - This will return the number of segments a dimension has. If it is a single dimension, this will return zero., Dimension.Origin - This will return the dimension origin as a point., Dimension.SetAboveValue - This will set the above value of a dimension., Dimension.SetBelowValue - This will set the below value of a dimension., Dimension.TextPosition - This will return the postition of the text as a point., Dimension.ValueString - The displayed value shown for the dimension segment. , Document.BackgroundOpen - This will open the input Revit files in the background., Document.Close - This will close the input Revit document. Offers a boolean toggle to save., Document.SetStartingView - This will set the starting view for a given document. ONLY WORKS IN ONE DOCUMENT AT A TIME, DraftingView.CreateInDocument - This will create a new drafting view in the given document. ONLY WORKS FOR ONE DOCUMENT AT A TIME, Element.AreaLocation - This node will determine what area (area plans) an element is located within. Made possible thanks to clockwork. :), Element.AreaWithTotal - This will get the area of an element if the parameter exists. Will total as well if needed., Element.Category - This node will get the input element(s)' categories, Element.CopyFromDocument - This node allows you to copy elements from a specific document to your current document., Element.GetJoinedElements - This will obtain the elements joined to the input element., Element.GetLevelNameAsString - This retrieves the level name of the input elements as a string. This is in response to a known issue with the get value node., Element.GetMultipleParameterValuesByName - Get the value of multiple parameters from elements. (Seperate parameters with comma), Element.GetParameterValueByName(CaSe iNSeNSiTive) - Get the value of one of the element's parameters. (CaSe iNSeNSiTiVe), Element.IsPhaseCreatedValid - This will determine if the input phase is the correct one for the input elements, Element.OverrideCutColorInView - Overrides the elements cut color in the view., Element.OverrideCutLineweight - Overrides the cut lines of the elements, Element.OverrideProjectionFillColor - This node overrides the fill color of the element in view., Element.OverrideProjectionLineColor - This node overrides the projection line color with the input color value. Useful for annotation., Element.OverrideProjectionLineweight - Overrides the line thickness of projection lines, Element.ParentFamily - This node retrieces the parent family name for each input element., Element.Room - This node takes the input of all elements of category and reports back the associated room per element. Currently tested with casework, furniture and plumbing fixtures., Element.SetMultipleParametersByName - Set multiple (comma seperated) parameters by name., Element.SetParameterByName(CaSe iNSeNSiTiVe) - Set one of the element's parameters. (CaSe iNSeNSiTiVe), Element.SetPinnedStatus - Will set the element to either pinned or not pinned. True is pinned, false is unpinned. For multiple elements use List.Map, Element.Space - This will retrieve the space in which an element is contained. (if available), Element.Type - This retrieves the element type of the given elements. (if available) Similar to others available but no python here., Geometry.SpaceEvenlyWithBuffer - This will take input geometry and space it out in the Y direction with a buffer between, Geometry.ToRevitType - This will convert designscript geometyr into Revit.DB types. Currently tested with curves, nurbs curves and solids., GetParameterValueByName(TypeOrInstance) - Gets a parameter value by name regardless of type or instance., GetParameterValueByNameAsString - Returns paramter value as string. Same effect as lunchbox node, without python., Gmail.ComposeEmail - This node will compose a new email. Useful for notifications regarding a graph concluding. Uses pythons built-in SMTP Library., Gmail.ComposeEmailDetailed - This will compose a detailed email with subject and message., Group.UngroupElements - This will ungroup the input groups and output their elements. Use with care!, Inspiration.BuffettNode - This is a result of \"what if?\" thinking. The output is a random Warren Buffett quote from brainyquotes.com, Inspiration.CarreyNode - This is a result of \"what if?\" thinking. The output is a random Jim Carrey quote from brainyquotes.com, Inspiration.CashNode - This is a result of \"what if?\" thinking. The output is a random Johnny Cash quote from brainyquotes.com, Inspiration.MarleyNode - This is a result of \"what if?\" thinking. The output is a random Bob Marley quote from brainyquotes.com, Inspiration.SearchQuoteNode - This is a result of \"what if?\" thinking. The output is a random quote based on the search criteria from brainyquotes.com. (As long as it is on the site), Inspiration.TeresaNode - This is a result of \"what if?\" thinking. The output is a random Mother Teresa quote from brainyquotes.com, Isolated Pick Model Elements(ordered) - Pick model elements in desired order of a desired category., Isolated Pick Model Elements - This allows a multiple selection of elements of specified category., Level Element Collector - This collects data for all of the Level elements in the model. Similar to the node on Lunchbox, but this one uses all O.O.B. nodes., List.AllIndicesOf - Given an item, returns the zero-based indices of all its occurrences in the list. If the item cannot be found, an empty list is returned. , List.ArchitecturalAlphabeticalSequence - This creates a list of characters. What's different is we typically exclude I's and O's from our characters so there is a toggle for this., List.Contains - Determines if the given list contains the item or items., List.GetItemIndices - This node searches the input list for the given string or number., List.MergeSublists - This will merge all sublists with or without a character between the strings., List.ReturnItemsPreviousToIndex - This will take an index (or indices) and return the items previous to it. Useful for sums of all items previous., Mullion.SortByDirection - This will sort mullions of a host curtain wall by direction they are facing., OS.CurrentUser - This node retrieves the current user logged in., OS.CurrentUserAppData - This retrieves the current user's appdata location, Output.Clean - This will return a single value or list from one input., Parametric Graphic Scale - This node automates the graphic scale assigned per viewport. The input required is all instances of viewport category. It also requires shared parameters. Visit sixtysecondrevit.blogspot.com for details., Pick Model Element - This offers a single selection of a model element. Created for Dynamo Player usage., Pick Model Elements - This node offers a pick method for selecting elements in Revit., PipeInsulation.Create - This will add insulation to the input pipes. Can only handle one type of insulation and size for now., Railing.BalusterCount - This node will count the amout of balusters in a rail element. Only works for single element for now., ReferencePlane.ByStartPointEndPointActiveViewVector - This will create a reference plane by the given start point, end point and active view vector. If you want to use multiple points as input you need to use List@Level with level 1 for both inputs., RemoveListFromList - This node essentially \"subtracts\" the contents of List B from List A to produce a new list with the unique items., Rhythm.3DRoomTags - This node will generate 3D room tags for all rooms in the model. (RFA in extra folder in Dynamo download), Rhythm.3DSpaceTags - This will generate 3D space tags for all spaces in the project., Rhythm.BackupRFADeleter - This node will scan the contents of a driectory and delete backup RFA files that appear with a four digit backup number before the file extension. (eg. Family1.0001.rfa) This is deleting files so please use with caution!, Rhythm.DatePicker - This provides a popup date selector for the user., Rhythm.Detail Number by View Name  - Automatically numbers your detail number based on the first two characters of your view name. i.e. A4/... (Requires slash to be present), Rhythm.IntegerSlider - Provides an integer slider for the dynamo player. Has min, max and description., Rhythm.MassOSMData - This node will mass the OSM data based upon the know heights. If the building doesn't have a height, it will just output the polygon., Rhythm.OverrideInteriorCrop - This node will override the lineweight of the crop region on interior elevations. This node would not be possible without the power of the Dynamo community. Specifically Danny Jones with Clark Patterson Lee., Rhythm.PercentGlazingByOrientation - This node was show at RTCNA2015 to optimize your workflows. It reports the window to wall % by direction the wall faces., Rhythm.RenumberGridsByCurve - This node will renumber grids in order of curve drawn through them. Select either letters or numbers. (Alphanumeric coming soon), Rhythm.RenumberRoomsByCurve - This node will renumber rooms along a curve path. This was developed through the guidance of WIlliam Wong at case. Considering WeWork bought Case I wanted this node to live somewhere., Rhythm.TextBoxInput - Provides a text box input for users. Allows for multiple strings if needed., Rhythm.Toggle - Toggle that offers two outputs. Created for Dynamo 0.8.1 because of changes to the \"IF\" node, Rhythm.WhatTheNode - This node will let you search dynamonodes.com for the most likely package a node is from. Helps fix \"red\" nodes when users do not have package installed., Rhythm.YesNoToggle - This provides a toggle to use for graphs with dynamo player. The user chooses if they would like to run the graph., Room Element Collector - THis will collect data regarding rooms in the active model. Similar to Lunchbox node, but this one does not use python., RoomTag.Host - Retrieves the assoicated room with a room tag., Select Elements By Curve - This will select model elements in order that a curve is drawn through them., Select Grids By Curve - This will select Revit grids by the input Revit curve,, SetParameterByName(TypeOrInstance) - Set one of the element's parameters regardless of parameter type or instance., Space.IsPointInside - This will test if a point falls within a space., Space.SetSpaceType - This node will set the space type for the input space., Space.GetSpaceType - This will retrieve the space type of the space as a string., SpaceTag.Host - This obtains the MEP space associated with a given MEP space tag., SpaceType.All - This node will output ALL space types., SpaceType.ByName - This will output a MEP space type based on name search., SquareFeetDropper - This node drops square feet from the pulled area, String.CharacterAtIndex - Get's the character at a given index, String.ElementsModified - THis custom node reports the amount of elements in a list as a phrase., String.FlipReverse - This node flips the string and reverses it. (April Fools '15) Works for 0.8.0 only, added unicode support, String.IndicesOfCharacter - This node gets all the indices of a given character, String.IsUnicode - Determines if input string is a unicode character., String.RemoveAfterGivenCharacter - This will move all characters at and after the given character., String.RemovePriorToCharacter - This will remove all characters prior to the input character. Accepts strings., String.SpecifyDecimalPlaces - This node will take your inout string and number of decimal places to create a new simplified output., String.ToSentenceCase - This node will convert a single string of text to have capitalized sentences. If you need to use this over a list, use List.Map., String.ToTitle - Converts the given string to Title Case., StructuralBeamSystem.Members - Thist will collect the members of the ebeam system., TextElement.ToLower - This node converts a Revit text elemnt to upper directly., TextElement.ToTitle - This node converts a Revit text elemnt to upper directly., TextElement.ToUpper - This node converts a Revit text elemnt to upper directly., UI.ColorPicker - This node allows the user to choose a color via the Revit API color selection dialog., UI.FilePath - Provides a file path option for use with Dynamo Player., UI.UserMessage - This will display a user message once. Until it is either toggled or changed., Unicode.LRE - Start of left-to-right embedding Unicode Character, Unicode.LRM - Left-to-right mark unicode character, Unicode.RLE - Start of right-to-left embedding Unicode Character, Unicode.RLM - Right-to-left mark Unicode character, Unicode.ZWJ - Zero width joiner Unicode Character, Unicode.ZWNJ - Zero width non-joiner Unicode Character, View.ConvertToIndependent - This will convert input dependent views to independent. Thanks to TheRevitKid for the idea!, ViewFamilyType.ByName - Select a view family type given it's name., Viewport.ViewName - This node gets the view name of viewports. There is an issue when \"title on sheet\" is used, so this fixes that., Wall.NorthSouthEastWest - This node determines which direction a wall is facing and groups them by the direction or direction they are closest to., Workset.Create - Creates a workset or worksets from input names., View3D.SetSectionBox - This will set a views section box giving a bounding box.",
            "engine_metadata": "",
            "engine_version": "1.2.1.3083",
            "created": "2017-01-11T15:57:14.184Z",
            "full_dependency_versions": [ "2017.1.10" ],
            "full_dependency_ids": [
              {
                "_id": "54e7add1dcee4dfd26000101",
                "name": "Rhythm"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2017.1.10"
          },
          {
            "_id": "588249f8ca6a5edb6500006e",
            "contains_binaries": true,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-prod/96aa9ef4-068e-4a30-9d91-e9f221e458bbgregPkg899.zip",
            "contents": "All Elements of Type in Document - All elements of given type in specified document. This works for unopened files and for linked documents., All Framing at Reference Level - Collects all of the structural framing at a specific reference level, All Pipes at Reference Level - This will collect all pipes by their reference level., All Upper - This converts the ase of selected items to UPPER. Inputs require booleans to enable for category., Arrowhead Assigner - This node assings the arrowhead type for all text and keynote tags. There is an input for ones you want to exclude., Ayuda.IsArchi-LabInstalled - This node determines if Archi-Lab is installed. Useful with a toggle., Ayuda.IsClockworkInstalled - This node determines if clockwork is installed. Useful with a toggle., Ayuda.IsSteamNodesInstalled - This node determines if steamnodes is installed. Useful with a toggle.;, Ayuda.ThisOrThat - This node is a toggle between two inputs., BasicFileInfo.SavedInVersion - This will supply the version that the revit model is saved in., CableTray.Space - This node will determine the space a cable tray's center falls within., Collector.Areas - This is an area collector element that utilizes mostly OOTB nodes., Collector.DuctsBySystem - This collects all ducts in the project and organizes them by System Classification, Collector.KeynoteTags - This collects all of the keynote tags in the model. Similar to other nodes, but this doesn't use python., Collector.LabelTypes - This node collects all of the label types for the active family document., Collector.PipesBySystem - This collects all pipes in the project and organizes them by System Classification, Collector.TagTypes - This node collects the tag types in the model., Collector.Viewports - This collects all of the viewports in the model and outputs the name, title on sheet, scale and viewport type., CurtainGrid.AllSegmentCurves - This will return the vertical and horizontal curtain grid segments regardless if hidden or not. Groups by U and V., CurtainGrid.ByElement - Gets the curtain grids by the host element. Seperates into U and V, CurtainGrid.ExistingSegmentCurves - Retrieve all the existing segment curves of the grid line.  Groups by U and V., CurtainGrid.FullCurve - Returns the curves of the input curtain grids. Groups by U and V., CurtainGrid.RemoveSegment - Removes segments from curtain grids. Can't take lists yet. Use with List.Combine., CurtainGrid.RemoveSegmentsFunction - Function to apply to remove segments node, CurtainGrid.SkippedSegmentCurves - Retrieve all the removed segment curves of the grid line. , Curve.FromLine - This will translate a line element to a curve., Dash Remover - This node removes the dash at index 2 if it exists. The reason being, NCS states that no dash shall be used., Dimension.IsOverridden - This will report if a dimension has been overridden. , Dimension.LeaderEndPosition - This will return the leader end postion as a point., Dimension.MultiSegmentMembers - This will output all of the members of a multi-segment dimension., Dimension.NumberOfSegments - This will return the number of segments a dimension has. If it is a single dimension, this will return zero., Dimension.Origin - This will return the dimension origin as a point., Dimension.SetAboveValue - This will set the above value of a dimension., Dimension.SetBelowValue - This will set the below value of a dimension., Dimension.TextPosition - This will return the postition of the text as a point., Dimension.ValueString - The displayed value shown for the dimension segment. , Document.BackgroundOpen - This will open the input Revit files in the background., Document.Close - This will close the input Revit document. Offers a boolean toggle to save., Document.SetStartingView - This will set the starting view for a given document. ONLY WORKS IN ONE DOCUMENT AT A TIME, DraftingView.CreateInDocument - This will create a new drafting view in the given document. ONLY WORKS FOR ONE DOCUMENT AT A TIME, Element.AreaLocation - This node will determine what area (area plans) an element is located within. Made possible thanks to clockwork. :), Element.AreaWithTotal - This will get the area of an element if the parameter exists. Will total as well if needed., Element.Category - This node will get the input element(s)' categories, Element.CopyFromDocument - This node allows you to copy elements from a specific document to your current document., Element.GetJoinedElements - This will obtain the elements joined to the input element., Element.GetLevelNameAsString - This retrieves the level name of the input elements as a string. This is in response to a known issue with the get value node., Element.GetMultipleParameterValuesByName - Get the value of multiple parameters from elements. (Seperate parameters with comma), Element.GetParameterValueByName(CaSe iNSeNSiTive) - Get the value of one of the element's parameters. (CaSe iNSeNSiTiVe), Element.IsPhaseCreatedValid - This will determine if the input phase is the correct one for the input elements, Element.OverrideCutColorInView - Overrides the elements cut color in the view., Element.OverrideCutLineweight - Overrides the cut lines of the elements, Element.OverrideProjectionFillColor - This node overrides the fill color of the element in view., Element.OverrideProjectionLineColor - This node overrides the projection line color with the input color value. Useful for annotation., Element.OverrideProjectionLineweight - Overrides the line thickness of projection lines, Element.ParentFamily - This node retrieces the parent family name for each input element., Element.Room - This node takes the input of all elements of category and reports back the associated room per element. Currently tested with casework, furniture and plumbing fixtures., Element.SetMultipleParametersByName - Set multiple (comma seperated) parameters by name., Element.SetParameterByName(CaSe iNSeNSiTiVe) - Set one of the element's parameters. (CaSe iNSeNSiTiVe), Element.SetPinnedStatus - Will set the element to either pinned or not pinned. True is pinned, false is unpinned. For multiple elements use List.Map, Element.Space - This will retrieve the space in which an element is contained. (if available), Element.Type - This retrieves the element type of the given elements. (if available) Similar to others available but no python here., Geometry.SpaceEvenlyWithBuffer - This will take input geometry and space it out in the Y direction with a buffer between, Geometry.ToRevitType - This will convert designscript geometyr into Revit.DB types. Currently tested with curves, nurbs curves and solids., GetParameterValueByName(TypeOrInstance) - Gets a parameter value by name regardless of type or instance., GetParameterValueByNameAsString - Returns paramter value as string. Same effect as lunchbox node, without python., Gmail.ComposeEmail - This node will compose a new email. Useful for notifications regarding a graph concluding. Uses pythons built-in SMTP Library., Gmail.ComposeEmailDetailed - This will compose a detailed email with subject and message., Group.UngroupElements - This will ungroup the input groups and output their elements. Use with care!, Inspiration.BuffettNode - This is a result of \"what if?\" thinking. The output is a random Warren Buffett quote from brainyquotes.com, Inspiration.CarreyNode - This is a result of \"what if?\" thinking. The output is a random Jim Carrey quote from brainyquotes.com, Inspiration.CashNode - This is a result of \"what if?\" thinking. The output is a random Johnny Cash quote from brainyquotes.com, Inspiration.MarleyNode - This is a result of \"what if?\" thinking. The output is a random Bob Marley quote from brainyquotes.com, Inspiration.SearchQuoteNode - This is a result of \"what if?\" thinking. The output is a random quote based on the search criteria from brainyquotes.com. (As long as it is on the site), Inspiration.TeresaNode - This is a result of \"what if?\" thinking. The output is a random Mother Teresa quote from brainyquotes.com, Isolated Pick Model Elements(ordered) - Pick model elements in desired order of a desired category., Isolated Pick Model Elements - This allows a multiple selection of elements of specified category., Level Element Collector - This collects data for all of the Level elements in the model. Similar to the node on Lunchbox, but this one uses all O.O.B. nodes., List.AllIndicesOf - Given an item, returns the zero-based indices of all its occurrences in the list. If the item cannot be found, an empty list is returned. , List.ArchitecturalAlphabeticalSequence - This creates a list of characters. What's different is we typically exclude I's and O's from our characters so there is a toggle for this., List.Contains - Determines if the given list contains the item or items., List.GetItemIndices - This node searches the input list for the given string or number., List.MergeSublists - This will merge all sublists with or without a character between the strings., List.ReturnItemsPreviousToIndex - This will take an index (or indices) and return the items previous to it. Useful for sums of all items previous., Mullion.SortByDirection - This will sort mullions of a host curtain wall by direction they are facing., OS.CurrentUser - This node retrieves the current user logged in., OS.CurrentUserAppData - This retrieves the current user's appdata location, Output.Clean - This will return a single value or list from one input., Parametric Graphic Scale - This node automates the graphic scale assigned per viewport. The input required is all instances of viewport category. It also requires shared parameters. Visit sixtysecondrevit.blogspot.com for details., Pick Model Element - This offers a single selection of a model element. Created for Dynamo Player usage., Pick Model Elements - This node offers a pick method for selecting elements in Revit., PipeInsulation.Create - This will add insulation to the input pipes. Can only handle one type of insulation and size for now., Railing.BalusterCount - This node will count the amout of balusters in a rail element. Only works for single element for now., ReferencePlane.ByStartPointEndPointActiveViewVector - This will create a reference plane by the given start point, end point and active view vector. If you want to use multiple points as input you need to use List@Level with level 1 for both inputs., RemoveListFromList - This node essentially \"subtracts\" the contents of List B from List A to produce a new list with the unique items., Rhythm.3DRoomTags - This node will generate 3D room tags for all rooms in the model. (RFA in extra folder in Dynamo download), Rhythm.3DSpaceTags - This will generate 3D space tags for all spaces in the project., Rhythm.BackupRFADeleter - This node will scan the contents of a driectory and delete backup RFA files that appear with a four digit backup number before the file extension. (eg. Family1.0001.rfa) This is deleting files so please use with caution!, Rhythm.DatePicker - This provides a popup date selector for the user., Rhythm.Detail Number by View Name  - Automatically numbers your detail number based on the first two characters of your view name. i.e. A4/... (Requires slash to be present), Rhythm.IntegerSlider - Provides an integer slider for the dynamo player. Has min, max and description., Rhythm.MassOSMData - This node will mass the OSM data based upon the know heights. If the building doesn't have a height, it will just output the polygon., Rhythm.OverrideInteriorCrop - This node will override the lineweight of the crop region on interior elevations. This node would not be possible without the power of the Dynamo community. Specifically Danny Jones with Clark Patterson Lee., Rhythm.PercentGlazingByOrientation - This node was show at RTCNA2015 to optimize your workflows. It reports the window to wall % by direction the wall faces., Rhythm.RenumberGridsByCurve - This node will renumber grids in order of curve drawn through them. Select either letters or numbers. (Alphanumeric coming soon), Rhythm.RenumberRoomsByCurve - This node will renumber rooms along a curve path. This was developed through the guidance of WIlliam Wong at case. Considering WeWork bought Case I wanted this node to live somewhere., Rhythm.TextBoxInput - Provides a text box input for users. Allows for multiple strings if needed., Rhythm.Toggle - Toggle that offers two outputs. Created for Dynamo 0.8.1 because of changes to the \"IF\" node, Rhythm.WhatTheNode - This node will let you search dynamonodes.com for the most likely package a node is from. Helps fix \"red\" nodes when users do not have package installed., Rhythm.YesNoToggle - This provides a toggle to use for graphs with dynamo player. The user chooses if they would like to run the graph., Room Element Collector - THis will collect data regarding rooms in the active model. Similar to Lunchbox node, but this one does not use python., RoomTag.Host - Retrieves the assoicated room with a room tag., Select Elements By Curve - This will select model elements in order that a curve is drawn through them., Select Grids By Curve - This will select Revit grids by the input Revit curve,, SetParameterByName(TypeOrInstance) - Set one of the element's parameters regardless of parameter type or instance., Space.IsPointInside - This will test if a point falls within a space., Space.SetSpaceType - This node will set the space type for the input space., Space.GetSpaceType - This will retrieve the space type of the space as a string., SpaceTag.Host - This obtains the MEP space associated with a given MEP space tag., SpaceType.All - This node will output ALL space types., SpaceType.ByName - This will output a MEP space type based on name search., SquareFeetDropper - This node drops square feet from the pulled area, String.CharacterAtIndex - Get's the character at a given index, String.ElementsModified - THis custom node reports the amount of elements in a list as a phrase., String.FlipReverse - This node flips the string and reverses it. (April Fools '15) Works for 0.8.0 only, added unicode support, String.IndicesOfCharacter - This node gets all the indices of a given character, String.IsUnicode - Determines if input string is a unicode character., String.RemoveAfterGivenCharacter - This will move all characters at and after the given character., String.RemovePriorToCharacter - This will remove all characters prior to the input character. Accepts strings., String.SpecifyDecimalPlaces - This node will take your inout string and number of decimal places to create a new simplified output., String.ToSentenceCase - This node will convert a single string of text to have capitalized sentences. If you need to use this over a list, use List.Map., String.ToTitle - Converts the given string to Title Case., StructuralBeamSystem.Members - Thist will collect the members of the ebeam system., TextElement.ToLower - This node converts a Revit text elemnt to upper directly., TextElement.ToTitle - This node converts a Revit text elemnt to upper directly., TextElement.ToUpper - This node converts a Revit text elemnt to upper directly., UI.ColorPicker - This node allows the user to choose a color via the Revit API color selection dialog., UI.FilePath - Provides a file path option for use with Dynamo Player., UI.UserMessage - This will display a user message once. Until it is either toggled or changed., Unicode.LRE - Start of left-to-right embedding Unicode Character, Unicode.LRM - Left-to-right mark unicode character, Unicode.RLE - Start of right-to-left embedding Unicode Character, Unicode.RLM - Right-to-left mark Unicode character, Unicode.ZWJ - Zero width joiner Unicode Character, Unicode.ZWNJ - Zero width non-joiner Unicode Character, View.ConvertToIndependent - This will convert input dependent views to independent. Thanks to TheRevitKid for the idea!, View3D.SetSectionBox - This will set a views section box giving a bounding box., ViewFamilyType.ByName - Select a view family type given it's name., Viewport.ViewName - This node gets the view name of viewports. There is an issue when \"title on sheet\" is used, so this fixes that., Wall.NorthSouthEastWest - This node determines which direction a wall is facing and groups them by the direction or direction they are closest to., Workset.Create - Creates a workset or worksets from input names., AdaptiveComponent.PlacementPoints - This node retrieves the adaptive components points.",
            "engine_metadata": "",
            "engine_version": "1.2.1.3083",
            "created": "2017-01-20T17:33:44.013Z",
            "full_dependency_versions": [ "2017.1.19" ],
            "full_dependency_ids": [
              {
                "_id": "54e7add1dcee4dfd26000101",
                "name": "Rhythm"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2017.1.19"
          },
          {
            "_id": "5891fcd0ca6a5edb650000f0",
            "contains_binaries": true,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-prod/06dcd28c-859c-44f5-9c6e-c9671cf4caccgregPkg283.zip",
            "contents": "AdaptiveComponent.PlacementPoints - This node retrieves the adaptive components points., All Elements of Type in Document - All elements of given type in specified document. This works for unopened files and for linked documents., All Framing at Reference Level - Collects all of the structural framing at a specific reference level, All Pipes at Reference Level - This will collect all pipes by their reference level., All Upper - This converts the ase of selected items to UPPER. Inputs require booleans to enable for category., Arrowhead Assigner - This node assings the arrowhead type for all text and keynote tags. There is an input for ones you want to exclude., Ayuda.IsArchi-LabInstalled - This node determines if Archi-Lab is installed. Useful with a toggle., Ayuda.IsClockworkInstalled - This node determines if clockwork is installed. Useful with a toggle., Ayuda.IsSteamNodesInstalled - This node determines if steamnodes is installed. Useful with a toggle.;, Ayuda.ThisOrThat - This node is a toggle between two inputs., BasicFileInfo.SavedInVersion - This will supply the version that the revit model is saved in., CableTray.Space - This node will determine the space a cable tray's center falls within., Collector.Areas - This is an area collector element that utilizes mostly OOTB nodes., Collector.DuctsBySystem - This collects all ducts in the project and organizes them by System Classification, Collector.KeynoteTags - This collects all of the keynote tags in the model. Similar to other nodes, but this doesn't use python., Collector.LabelTypes - This node collects all of the label types for the active family document., Collector.PipesBySystem - This collects all pipes in the project and organizes them by System Classification, Collector.TagTypes - This node collects the tag types in the model., Collector.Viewports - This collects all of the viewports in the model and outputs the name, title on sheet, scale and viewport type., CurtainGrid.AllSegmentCurves - This will return the vertical and horizontal curtain grid segments regardless if hidden or not. Groups by U and V., CurtainGrid.ByElement - Gets the curtain grids by the host element. Seperates into U and V, CurtainGrid.ExistingSegmentCurves - Retrieve all the existing segment curves of the grid line.  Groups by U and V., CurtainGrid.FullCurve - Returns the curves of the input curtain grids. Groups by U and V., CurtainGrid.RemoveSegment - Removes segments from curtain grids. Can't take lists yet. Use with List.Combine., CurtainGrid.RemoveSegmentsFunction - Function to apply to remove segments node, CurtainGrid.SkippedSegmentCurves - Retrieve all the removed segment curves of the grid line. , Curve.FromLine - This will translate a line element to a curve., Dash Remover - This node removes the dash at index 2 if it exists. The reason being, NCS states that no dash shall be used., Dimension.IsOverridden - This will report if a dimension has been overridden. , Dimension.LeaderEndPosition - This will return the leader end postion as a point., Dimension.MultiSegmentMembers - This will output all of the members of a multi-segment dimension., Dimension.NumberOfSegments - This will return the number of segments a dimension has. If it is a single dimension, this will return zero., Dimension.Origin - This will return the dimension origin as a point., Dimension.SetAboveValue - This will set the above value of a dimension., Dimension.SetBelowValue - This will set the below value of a dimension., Dimension.TextPosition - This will return the postition of the text as a point., Dimension.ValueString - The displayed value shown for the dimension segment. , Document.BackgroundOpen - This will open the input Revit files in the background., Document.Close - This will close the input Revit document. Offers a boolean toggle to save., Document.SetStartingView - This will set the starting view for a given document. ONLY WORKS IN ONE DOCUMENT AT A TIME, DraftingView.CreateInDocument - This will create a new drafting view in the given document. ONLY WORKS FOR ONE DOCUMENT AT A TIME, Element.AreaLocation - This node will determine what area (area plans) an element is located within. Made possible thanks to clockwork. :), Element.AreaWithTotal - This will get the area of an element if the parameter exists. Will total as well if needed., Element.Category - This node will get the input element(s)' categories, Element.CopyFromDocument - This node allows you to copy elements from a specific document to your current document., Element.GetJoinedElements - This will obtain the elements joined to the input element., Element.GetLevelNameAsString - This retrieves the level name of the input elements as a string. This is in response to a known issue with the get value node., Element.GetMultipleParameterValuesByName - Get the value of multiple parameters from elements. (Seperate parameters with comma), Element.GetParameterValueByName(CaSe iNSeNSiTive) - Get the value of one of the element's parameters. (CaSe iNSeNSiTiVe), Element.IsPhaseCreatedValid - This will determine if the input phase is the correct one for the input elements, Element.OverrideCutColorInView - Overrides the elements cut color in the view., Element.OverrideCutLineweight - Overrides the cut lines of the elements, Element.OverrideProjectionFillColor - This node overrides the fill color of the element in view., Element.OverrideProjectionLineColor - This node overrides the projection line color with the input color value. Useful for annotation., Element.OverrideProjectionLineweight - Overrides the line thickness of projection lines, Element.ParentFamily - This node retrieces the parent family name for each input element., Element.Room - This node takes the input of all elements of category and reports back the associated room per element. Currently tested with casework, furniture and plumbing fixtures., Element.SetMultipleParametersByName - Set multiple (comma seperated) parameters by name., Element.SetParameterByName(CaSe iNSeNSiTiVe) - Set one of the element's parameters. (CaSe iNSeNSiTiVe), Element.SetPinnedStatus - Will set the element to either pinned or not pinned. True is pinned, false is unpinned. For multiple elements use List.Map, Element.Space - This will retrieve the space in which an element is contained. (if available), Element.Type - This retrieves the element type of the given elements. (if available) Similar to others available but no python here., Geometry.SpaceEvenlyWithBuffer - This will take input geometry and space it out in the Y direction with a buffer between, Geometry.ToRevitType - This will convert designscript geometyr into Revit.DB types. Currently tested with curves, nurbs curves and solids., GetParameterValueByName(TypeOrInstance) - Gets a parameter value by name regardless of type or instance., GetParameterValueByNameAsString - Returns paramter value as string. Same effect as lunchbox node, without python., Gmail.ComposeEmail - This node will compose a new email. Useful for notifications regarding a graph concluding. Uses pythons built-in SMTP Library., Gmail.ComposeEmailDetailed - This will compose a detailed email with subject and message., Group.UngroupElements - This will ungroup the input groups and output their elements. Use with care!, Inspiration.BuffettNode - This is a result of \"what if?\" thinking. The output is a random Warren Buffett quote from brainyquotes.com, Inspiration.CarreyNode - This is a result of \"what if?\" thinking. The output is a random Jim Carrey quote from brainyquotes.com, Inspiration.CashNode - This is a result of \"what if?\" thinking. The output is a random Johnny Cash quote from brainyquotes.com, Inspiration.MarleyNode - This is a result of \"what if?\" thinking. The output is a random Bob Marley quote from brainyquotes.com, Inspiration.SearchQuoteNode - This is a result of \"what if?\" thinking. The output is a random quote based on the search criteria from brainyquotes.com. (As long as it is on the site), Inspiration.TeresaNode - This is a result of \"what if?\" thinking. The output is a random Mother Teresa quote from brainyquotes.com, Isolated Pick Model Elements(ordered) - Pick model elements in desired order of a desired category., Isolated Pick Model Elements - This allows a multiple selection of elements of specified category., Level Element Collector - This collects data for all of the Level elements in the model. Similar to the node on Lunchbox, but this one uses all O.O.B. nodes., List.AllIndicesOf - Given an item, returns the zero-based indices of all its occurrences in the list. If the item cannot be found, an empty list is returned. , List.ArchitecturalAlphabeticalSequence - This creates a list of characters. What's different is we typically exclude I's and O's from our characters so there is a toggle for this., List.Contains - Determines if the given list contains the item or items., List.GetItemIndices - This node searches the input list for the given string or number., List.MergeSublists - This will merge all sublists with or without a character between the strings., List.ReturnItemsPreviousToIndex - This will take an index (or indices) and return the items previous to it. Useful for sums of all items previous., Mullion.SortByDirection - This will sort mullions of a host curtain wall by direction they are facing., OS.CurrentUser - This node retrieves the current user logged in., OS.CurrentUserAppData - This retrieves the current user's appdata location, Output.Clean - This will return a single value or list from one input., Parametric Graphic Scale - This node automates the graphic scale assigned per viewport. The input required is all instances of viewport category. It also requires shared parameters. Visit sixtysecondrevit.blogspot.com for details., Pick Model Element - This offers a single selection of a model element. Created for Dynamo Player usage., Pick Model Elements - This node offers a pick method for selecting elements in Revit., PipeInsulation.Create - This will add insulation to the input pipes. Can only handle one type of insulation and size for now., Railing.BalusterCount - This node will count the amout of balusters in a rail element. Only works for single element for now., ReferencePlane.ByStartPointEndPointActiveViewVector - This will create a reference plane by the given start point, end point and active view vector. If you want to use multiple points as input you need to use List@Level with level 1 for both inputs., RemoveListFromList - This node essentially \"subtracts\" the contents of List B from List A to produce a new list with the unique items., Rhythm.3DRoomTags - This node will generate 3D room tags for all rooms in the model. (RFA in extra folder in Dynamo download), Rhythm.3DSpaceTags - This will generate 3D space tags for all spaces in the project., Rhythm.BackupRFADeleter - This node will scan the contents of a driectory and delete backup RFA files that appear with a four digit backup number before the file extension. (eg. Family1.0001.rfa) This is deleting files so please use with caution!, Rhythm.DatePicker - This provides a popup date selector for the user., Rhythm.Detail Number by View Name  - Automatically numbers your detail number based on the first two characters of your view name. i.e. A4/... (Requires slash to be present), Rhythm.IntegerSlider - Provides an integer slider for the dynamo player. Has min, max and description., Rhythm.MassOSMData - This node will mass the OSM data based upon the know heights. If the building doesn't have a height, it will just output the polygon., Rhythm.OverrideInteriorCrop - This node will override the lineweight of the crop region on interior elevations. This node would not be possible without the power of the Dynamo community. Specifically Danny Jones with Clark Patterson Lee., Rhythm.PercentGlazingByOrientation - This node was show at RTCNA2015 to optimize your workflows. It reports the window to wall % by direction the wall faces., Rhythm.RenumberGridsByCurve - This node will renumber grids in order of curve drawn through them. Select either letters or numbers. (Alphanumeric coming soon), Rhythm.RenumberRoomsByCurve - This node will renumber rooms along a curve path. This was developed through the guidance of WIlliam Wong at case. Considering WeWork bought Case I wanted this node to live somewhere., Rhythm.TextBoxInput - Provides a text box input for users. Allows for multiple strings if needed., Rhythm.Toggle - Toggle that offers two outputs. Created for Dynamo 0.8.1 because of changes to the \"IF\" node, Rhythm.WhatTheNode - This node will let you search dynamonodes.com for the most likely package a node is from. Helps fix \"red\" nodes when users do not have package installed., Rhythm.YesNoToggle - This provides a toggle to use for graphs with dynamo player. The user chooses if they would like to run the graph., Room Element Collector - THis will collect data regarding rooms in the active model. Similar to Lunchbox node, but this one does not use python., RoomTag.Host - Retrieves the assoicated room with a room tag., Select Elements By Curve - This will select model elements in order that a curve is drawn through them., Select Grids By Curve - This will select Revit grids by the input Revit curve,, SetParameterByName(TypeOrInstance) - Set one of the element's parameters regardless of parameter type or instance., Space.IsPointInside - This will test if a point falls within a space., Space.SetSpaceType - This node will set the space type for the input space., Space.GetSpaceType - This will retrieve the space type of the space as a string., SpaceTag.Host - This obtains the MEP space associated with a given MEP space tag., SpaceType.All - This node will output ALL space types., SpaceType.ByName - This will output a MEP space type based on name search., SquareFeetDropper - This node drops square feet from the pulled area, String.CharacterAtIndex - Get's the character at a given index, String.ElementsModified - THis custom node reports the amount of elements in a list as a phrase., String.FlipReverse - This node flips the string and reverses it. (April Fools '15) Works for 0.8.0 only, added unicode support, String.IndicesOfCharacter - This node gets all the indices of a given character, String.IsUnicode - Determines if input string is a unicode character., String.RemoveAfterGivenCharacter - This will move all characters at and after the given character., String.RemovePriorToCharacter - This will remove all characters prior to the input character. Accepts strings., String.SpecifyDecimalPlaces - This node will take your inout string and number of decimal places to create a new simplified output., String.ToSentenceCase - This node will convert a single string of text to have capitalized sentences. If you need to use this over a list, use List.Map., String.ToTitle - Converts the given string to Title Case., StructuralBeamSystem.Members - Thist will collect the members of the ebeam system., TextElement.ToLower - This node converts a Revit text elemnt to upper directly., TextElement.ToTitle - This node converts a Revit text elemnt to upper directly., TextElement.ToUpper - This node converts a Revit text elemnt to upper directly., UI.ColorPicker - This node allows the user to choose a color via the Revit API color selection dialog., UI.FilePath - Provides a file path option for use with Dynamo Player., UI.UserMessage - This will display a user message once. Until it is either toggled or changed., Unicode.LRE - Start of left-to-right embedding Unicode Character, Unicode.LRM - Left-to-right mark unicode character, Unicode.RLE - Start of right-to-left embedding Unicode Character, Unicode.RLM - Right-to-left mark Unicode character, Unicode.ZWJ - Zero width joiner Unicode Character, Unicode.ZWNJ - Zero width non-joiner Unicode Character, View.ConvertToIndependent - This will convert input dependent views to independent. Thanks to TheRevitKid for the idea!, View3D.SetSectionBox - This will set a views section box giving a bounding box., ViewFamilyType.ByName - Select a view family type given it's name., Viewport.ViewName - This node gets the view name of viewports. There is an issue when \"title on sheet\" is used, so this fixes that., Wall.NorthSouthEastWest - This node determines which direction a wall is facing and groups them by the direction or direction they are closest to., Workset.Create - Creates a workset or worksets from input names., Element.CopyFromViewToView - This will copy elements from view to view.",
            "engine_metadata": "",
            "engine_version": "1.2.1.3083",
            "created": "2017-02-01T15:20:48.533Z",
            "full_dependency_versions": [ "2017.2.1" ],
            "full_dependency_ids": [
              {
                "_id": "54e7add1dcee4dfd26000101",
                "name": "Rhythm"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2017.2.1"
          },
          {
            "_id": "58922b19ca6a5edb650000f3",
            "contains_binaries": true,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-prod/ed77067a-4169-4494-8334-122e35cd7aa3gregPkg116.zip",
            "contents": "AdaptiveComponent.PlacementPoints - This node retrieves the adaptive components points., All Elements of Type in Document - All elements of given type in specified document. This works for unopened files and for linked documents., All Framing at Reference Level - Collects all of the structural framing at a specific reference level, All Pipes at Reference Level - This will collect all pipes by their reference level., All Upper - This converts the ase of selected items to UPPER. Inputs require booleans to enable for category., Arrowhead Assigner - This node assings the arrowhead type for all text and keynote tags. There is an input for ones you want to exclude., Ayuda.IsArchi-LabInstalled - This node determines if Archi-Lab is installed. Useful with a toggle., Ayuda.IsClockworkInstalled - This node determines if clockwork is installed. Useful with a toggle., Ayuda.IsSteamNodesInstalled - This node determines if steamnodes is installed. Useful with a toggle.;, Ayuda.ThisOrThat - This node is a toggle between two inputs., BasicFileInfo.SavedInVersion - This will supply the version that the revit model is saved in., CableTray.Space - This node will determine the space a cable tray's center falls within., Collector.Areas - This is an area collector element that utilizes mostly OOTB nodes., Collector.DuctsBySystem - This collects all ducts in the project and organizes them by System Classification, Collector.KeynoteTags - This collects all of the keynote tags in the model. Similar to other nodes, but this doesn't use python., Collector.LabelTypes - This node collects all of the label types for the active family document., Collector.PipesBySystem - This collects all pipes in the project and organizes them by System Classification, Collector.TagTypes - This node collects the tag types in the model., Collector.Viewports - This collects all of the viewports in the model and outputs the name, title on sheet, scale and viewport type., CurtainGrid.AllSegmentCurves - This will return the vertical and horizontal curtain grid segments regardless if hidden or not. Groups by U and V., CurtainGrid.ByElement - Gets the curtain grids by the host element. Seperates into U and V, CurtainGrid.ExistingSegmentCurves - Retrieve all the existing segment curves of the grid line.  Groups by U and V., CurtainGrid.FullCurve - Returns the curves of the input curtain grids. Groups by U and V., CurtainGrid.RemoveSegment - Removes segments from curtain grids. Can't take lists yet. Use with List.Combine., CurtainGrid.RemoveSegmentsFunction - Function to apply to remove segments node, CurtainGrid.SkippedSegmentCurves - Retrieve all the removed segment curves of the grid line. , Curve.FromLine - This will translate a line element to a curve., Dash Remover - This node removes the dash at index 2 if it exists. The reason being, NCS states that no dash shall be used., Dimension.IsOverridden - This will report if a dimension has been overridden. , Dimension.LeaderEndPosition - This will return the leader end postion as a point., Dimension.MultiSegmentMembers - This will output all of the members of a multi-segment dimension., Dimension.NumberOfSegments - This will return the number of segments a dimension has. If it is a single dimension, this will return zero., Dimension.Origin - This will return the dimension origin as a point., Dimension.SetAboveValue - This will set the above value of a dimension., Dimension.SetBelowValue - This will set the below value of a dimension., Dimension.TextPosition - This will return the postition of the text as a point., Dimension.ValueString - The displayed value shown for the dimension segment. , Document.BackgroundOpen - This will open the input Revit files in the background., Document.Close - This will close the input Revit document. Offers a boolean toggle to save., Document.SetStartingView - This will set the starting view for a given document. ONLY WORKS IN ONE DOCUMENT AT A TIME, DraftingView.CreateInDocument - This will create a new drafting view in the given document. ONLY WORKS FOR ONE DOCUMENT AT A TIME, Element.AreaLocation - This node will determine what area (area plans) an element is located within. Made possible thanks to clockwork. :), Element.AreaWithTotal - This will get the area of an element if the parameter exists. Will total as well if needed., Element.Category - This node will get the input element(s)' categories, Element.CopyFromDocument - This node allows you to copy elements from a specific document to your current document., Element.CopyFromViewToView - This will copy elements from view to view., Element.GetJoinedElements - This will obtain the elements joined to the input element., Element.GetLevelNameAsString - This retrieves the level name of the input elements as a string. This is in response to a known issue with the get value node., Element.GetMultipleParameterValuesByName - Get the value of multiple parameters from elements. (Seperate parameters with comma), Element.GetParameterValueByName(CaSe iNSeNSiTive) - Get the value of one of the element's parameters. (CaSe iNSeNSiTiVe), Element.IsPhaseCreatedValid - This will determine if the input phase is the correct one for the input elements, Element.OverrideCutColorInView - Overrides the elements cut color in the view., Element.OverrideCutLineweight - Overrides the cut lines of the elements, Element.OverrideProjectionFillColor - This node overrides the fill color of the element in view., Element.OverrideProjectionLineColor - This node overrides the projection line color with the input color value. Useful for annotation., Element.OverrideProjectionLineweight - Overrides the line thickness of projection lines, Element.ParentFamily - This node retrieces the parent family name for each input element., Element.Room - This node takes the input of all elements of category and reports back the associated room per element. Currently tested with casework, furniture and plumbing fixtures., Element.SetMultipleParametersByName - Set multiple (comma seperated) parameters by name., Element.SetParameterByName(CaSe iNSeNSiTiVe) - Set one of the element's parameters. (CaSe iNSeNSiTiVe), Element.SetPinnedStatus - Will set the element to either pinned or not pinned. True is pinned, false is unpinned. For multiple elements use List.Map, Element.Space - This will retrieve the space in which an element is contained. (if available), Element.Type - This retrieves the element type of the given elements. (if available) Similar to others available but no python here., Geometry.SpaceEvenlyWithBuffer - This will take input geometry and space it out in the Y direction with a buffer between, Geometry.ToRevitType - This will convert designscript geometyr into Revit.DB types. Currently tested with curves, nurbs curves and solids., GetParameterValueByName(TypeOrInstance) - Gets a parameter value by name regardless of type or instance., GetParameterValueByNameAsString - Returns paramter value as string. Same effect as lunchbox node, without python., Gmail.ComposeEmail - This node will compose a new email. Useful for notifications regarding a graph concluding. Uses pythons built-in SMTP Library., Gmail.ComposeEmailDetailed - This will compose a detailed email with subject and message., Group.UngroupElements - This will ungroup the input groups and output their elements. Use with care!, Inspiration.BuffettNode - This is a result of \"what if?\" thinking. The output is a random Warren Buffett quote from brainyquotes.com, Inspiration.CarreyNode - This is a result of \"what if?\" thinking. The output is a random Jim Carrey quote from brainyquotes.com, Inspiration.CashNode - This is a result of \"what if?\" thinking. The output is a random Johnny Cash quote from brainyquotes.com, Inspiration.MarleyNode - This is a result of \"what if?\" thinking. The output is a random Bob Marley quote from brainyquotes.com, Inspiration.SearchQuoteNode - This is a result of \"what if?\" thinking. The output is a random quote based on the search criteria from brainyquotes.com. (As long as it is on the site), Inspiration.TeresaNode - This is a result of \"what if?\" thinking. The output is a random Mother Teresa quote from brainyquotes.com, Isolated Pick Model Elements(ordered) - Pick model elements in desired order of a desired category., Isolated Pick Model Elements - This allows a multiple selection of elements of specified category., Level Element Collector - This collects data for all of the Level elements in the model. Similar to the node on Lunchbox, but this one uses all O.O.B. nodes., List.AllIndicesOf - Given an item, returns the zero-based indices of all its occurrences in the list. If the item cannot be found, an empty list is returned. , List.ArchitecturalAlphabeticalSequence - This creates a list of characters. What's different is we typically exclude I's and O's from our characters so there is a toggle for this., List.Contains - Determines if the given list contains the item or items., List.GetItemIndices - This node searches the input list for the given string or number., List.MergeSublists - This will merge all sublists with or without a character between the strings., List.ReturnItemsPreviousToIndex - This will take an index (or indices) and return the items previous to it. Useful for sums of all items previous., Mullion.SortByDirection - This will sort mullions of a host curtain wall by direction they are facing., OS.CurrentUser - This node retrieves the current user logged in., OS.CurrentUserAppData - This retrieves the current user's appdata location, Output.Clean - This will return a single value or list from one input., Parametric Graphic Scale - This node automates the graphic scale assigned per viewport. The input required is all instances of viewport category. It also requires shared parameters. Visit sixtysecondrevit.blogspot.com for details., Pick Model Element - This offers a single selection of a model element. Created for Dynamo Player usage., Pick Model Elements - This node offers a pick method for selecting elements in Revit., PipeInsulation.Create - This will add insulation to the input pipes. Can only handle one type of insulation and size for now., Railing.BalusterCount - This node will count the amout of balusters in a rail element. Only works for single element for now., ReferencePlane.ByStartPointEndPointActiveViewVector - This will create a reference plane by the given start point, end point and active view vector. If you want to use multiple points as input you need to use List@Level with level 1 for both inputs., RemoveListFromList - This node essentially \"subtracts\" the contents of List B from List A to produce a new list with the unique items., Rhythm.3DRoomTags - This node will generate 3D room tags for all rooms in the model. (RFA in extra folder in Dynamo download), Rhythm.3DSpaceTags - This will generate 3D space tags for all spaces in the project., Rhythm.BackupRFADeleter - This node will scan the contents of a driectory and delete backup RFA files that appear with a four digit backup number before the file extension. (eg. Family1.0001.rfa) This is deleting files so please use with caution!, Rhythm.DatePicker - This provides a popup date selector for the user., Rhythm.Detail Number by View Name  - Automatically numbers your detail number based on the first two characters of your view name. i.e. A4/... (Requires slash to be present), Rhythm.IntegerSlider - Provides an integer slider for the dynamo player. Has min, max and description., Rhythm.MassOSMData - This node will mass the OSM data based upon the know heights. If the building doesn't have a height, it will just output the polygon., Rhythm.OverrideInteriorCrop - This node will override the lineweight of the crop region on interior elevations. This node would not be possible without the power of the Dynamo community. Specifically Danny Jones with Clark Patterson Lee., Rhythm.PercentGlazingByOrientation - This node was show at RTCNA2015 to optimize your workflows. It reports the window to wall % by direction the wall faces., Rhythm.RenumberGridsByCurve - This node will renumber grids in order of curve drawn through them. Select either letters or numbers. (Alphanumeric coming soon), Rhythm.RenumberRoomsByCurve - This node will renumber rooms along a curve path. This was developed through the guidance of WIlliam Wong at case. Considering WeWork bought Case I wanted this node to live somewhere., Rhythm.TextBoxInput - Provides a text box input for users. Allows for multiple strings if needed., Rhythm.Toggle - Toggle that offers two outputs. Created for Dynamo 0.8.1 because of changes to the \"IF\" node, Rhythm.WhatTheNode - This node will let you search dynamonodes.com for the most likely package a node is from. Helps fix \"red\" nodes when users do not have package installed., Rhythm.YesNoToggle - This provides a toggle to use for graphs with dynamo player. The user chooses if they would like to run the graph., Room Element Collector - THis will collect data regarding rooms in the active model. Similar to Lunchbox node, but this one does not use python., RoomTag.Host - Retrieves the assoicated room with a room tag., Select Elements By Curve - This will select model elements in order that a curve is drawn through them., Select Grids By Curve - This will select Revit grids by the input Revit curve,, SetParameterByName(TypeOrInstance) - Set one of the element's parameters regardless of parameter type or instance., Space.IsPointInside - This will test if a point falls within a space., Space.SetSpaceType - This node will set the space type for the input space., Space.GetSpaceType - This will retrieve the space type of the space as a string., SpaceTag.Host - This obtains the MEP space associated with a given MEP space tag., SpaceType.All - This node will output ALL space types., SpaceType.ByName - This will output a MEP space type based on name search., SquareFeetDropper - This node drops square feet from the pulled area, String.CharacterAtIndex - Get's the character at a given index, String.ElementsModified - THis custom node reports the amount of elements in a list as a phrase., String.FlipReverse - This node flips the string and reverses it. (April Fools '15) Works for 0.8.0 only, added unicode support, String.IndicesOfCharacter - This node gets all the indices of a given character, String.IsUnicode - Determines if input string is a unicode character., String.RemoveAfterGivenCharacter - This will move all characters at and after the given character., String.RemovePriorToCharacter - This will remove all characters prior to the input character. Accepts strings., String.SpecifyDecimalPlaces - This node will take your inout string and number of decimal places to create a new simplified output., String.ToSentenceCase - This node will convert a single string of text to have capitalized sentences. If you need to use this over a list, use List.Map., String.ToTitle - Converts the given string to Title Case., StructuralBeamSystem.Members - Thist will collect the members of the ebeam system., TextElement.ToLower - This node converts a Revit text elemnt to upper directly., TextElement.ToTitle - This node converts a Revit text elemnt to upper directly., TextElement.ToUpper - This node converts a Revit text elemnt to upper directly., UI.ColorPicker - This node allows the user to choose a color via the Revit API color selection dialog., UI.FilePath - Provides a file path option for use with Dynamo Player., UI.UserMessage - This will display a user message once. Until it is either toggled or changed., Unicode.LRE - Start of left-to-right embedding Unicode Character, Unicode.LRM - Left-to-right mark unicode character, Unicode.RLE - Start of right-to-left embedding Unicode Character, Unicode.RLM - Right-to-left mark Unicode character, Unicode.ZWJ - Zero width joiner Unicode Character, Unicode.ZWNJ - Zero width non-joiner Unicode Character, View.ConvertToIndependent - This will convert input dependent views to independent. Thanks to TheRevitKid for the idea!, View3D.SetSectionBox - This will set a views section box giving a bounding box., ViewFamilyType.ByName - Select a view family type given it's name., Viewport.ViewName - This node gets the view name of viewports. There is an issue when \"title on sheet\" is used, so this fixes that., Wall.NorthSouthEastWest - This node determines which direction a wall is facing and groups them by the direction or direction they are closest to., Workset.Create - Creates a workset or worksets from input names.",
            "engine_metadata": "",
            "engine_version": "1.2.1.3083",
            "created": "2017-02-01T18:38:17.354Z",
            "full_dependency_versions": [ "2017.2.2" ],
            "full_dependency_ids": [
              {
                "_id": "54e7add1dcee4dfd26000101",
                "name": "Rhythm"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2017.2.2"
          },
          {
            "_id": "58a479a961de680108000075",
            "contains_binaries": true,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-prod/c1430f26-92ce-4da0-b331-2ce565d93ad7gregPkg903.zip",
            "contents": "AdaptiveComponent.PlacementPoints - This node retrieves the adaptive components points., All Elements of Type in Document - All elements of given type in specified document. This works for unopened files and for linked documents., All Framing at Reference Level - Collects all of the structural framing at a specific reference level, All Pipes at Reference Level - This will collect all pipes by their reference level., All Upper - This converts the ase of selected items to UPPER. Inputs require booleans to enable for category., Arrowhead Assigner - This node assings the arrowhead type for all text and keynote tags. There is an input for ones you want to exclude., Ayuda.IsArchi-LabInstalled - This node determines if Archi-Lab is installed. Useful with a toggle., Ayuda.IsClockworkInstalled - This node determines if clockwork is installed. Useful with a toggle., Ayuda.IsSteamNodesInstalled - This node determines if steamnodes is installed. Useful with a toggle.;, Ayuda.ThisOrThat - This node is a toggle between two inputs., BasicFileInfo.SavedInVersion - This will supply the version that the revit model is saved in., CableTray.Space - This node will determine the space a cable tray's center falls within., Collector.Areas - This is an area collector element that utilizes mostly OOTB nodes., Collector.DuctsBySystem - This collects all ducts in the project and organizes them by System Classification, Collector.KeynoteTags - This collects all of the keynote tags in the model. Similar to other nodes, but this doesn't use python., Collector.LabelTypes - This node collects all of the label types for the active family document., Collector.PipesBySystem - This collects all pipes in the project and organizes them by System Classification, Collector.TagTypes - This node collects the tag types in the model., Collector.Viewports - This collects all of the viewports in the model and outputs the name, title on sheet, scale and viewport type., CurtainGrid.AllSegmentCurves - This will return the vertical and horizontal curtain grid segments regardless if hidden or not. Groups by U and V., CurtainGrid.ByElement - Gets the curtain grids by the host element. Seperates into U and V, CurtainGrid.ExistingSegmentCurves - Retrieve all the existing segment curves of the grid line.  Groups by U and V., CurtainGrid.FullCurve - Returns the curves of the input curtain grids. Groups by U and V., CurtainGrid.RemoveSegment - Removes segments from curtain grids. Can't take lists yet. Use with List.Combine., CurtainGrid.RemoveSegmentsFunction - Function to apply to remove segments node, CurtainGrid.SkippedSegmentCurves - Retrieve all the removed segment curves of the grid line. , Curve.FromLine - This will translate a line element to a curve., Dash Remover - This node removes the dash at index 2 if it exists. The reason being, NCS states that no dash shall be used., Dimension.IsOverridden - This will report if a dimension has been overridden. , Dimension.LeaderEndPosition - This will return the leader end postion as a point., Dimension.MultiSegmentMembers - This will output all of the members of a multi-segment dimension., Dimension.NumberOfSegments - This will return the number of segments a dimension has. If it is a single dimension, this will return zero., Dimension.Origin - This will return the dimension origin as a point., Dimension.SetAboveValue - This will set the above value of a dimension., Dimension.SetBelowValue - This will set the below value of a dimension., Dimension.TextPosition - This will return the postition of the text as a point., Dimension.ValueString - The displayed value shown for the dimension segment. , Document.BackgroundOpen - This will open the input Revit files in the background., Document.Close - This will close the input Revit document. Offers a boolean toggle to save., Document.SetStartingView - This will set the starting view for a given document. ONLY WORKS IN ONE DOCUMENT AT A TIME, DraftingView.CreateInDocument - This will create a new drafting view in the given document. ONLY WORKS FOR ONE DOCUMENT AT A TIME, Element.AreaLocation - This node will determine what area (area plans) an element is located within. Made possible thanks to clockwork. :), Element.AreaWithTotal - This will get the area of an element if the parameter exists. Will total as well if needed., Element.Category - This node will get the input element(s)' categories, Element.CopyFromDocument - This node allows you to copy elements from a specific document to your current document., Element.CopyFromViewToView - This will copy elements from view to view., Element.GetJoinedElements - This will obtain the elements joined to the input element., Element.GetLevelNameAsString - This retrieves the level name of the input elements as a string. This is in response to a known issue with the get value node., Element.GetMultipleParameterValuesByName - Get the value of multiple parameters from elements. (Seperate parameters with comma), Element.GetParameterValueByName(CaSe iNSeNSiTive) - Get the value of one of the element's parameters. (CaSe iNSeNSiTiVe), Element.IsPhaseCreatedValid - This will determine if the input phase is the correct one for the input elements, Element.OverrideCutColorInView - Overrides the elements cut color in the view., Element.OverrideCutLineweight - Overrides the cut lines of the elements, Element.OverrideProjectionFillColor - This node overrides the fill color of the element in view., Element.OverrideProjectionLineColor - This node overrides the projection line color with the input color value. Useful for annotation., Element.OverrideProjectionLineweight - Overrides the line thickness of projection lines, Element.ParentFamily - This node retrieces the parent family name for each input element., Element.Room - This node takes the input of all elements of category and reports back the associated room per element. Currently tested with casework, furniture and plumbing fixtures., Element.SetMultipleParametersByName - Set multiple (comma seperated) parameters by name., Element.SetParameterByName(CaSe iNSeNSiTiVe) - Set one of the element's parameters. (CaSe iNSeNSiTiVe), Element.SetPinnedStatus - Will set the element to either pinned or not pinned. True is pinned, false is unpinned. For multiple elements use List.Map, Element.Space - This will retrieve the space in which an element is contained. (if available), Element.Type - This retrieves the element type of the given elements. (if available) Similar to others available but no python here., Geometry.SpaceEvenlyWithBuffer - This will take input geometry and space it out in the Y direction with a buffer between, Geometry.ToRevitType - This will convert designscript geometyr into Revit.DB types. Currently tested with curves, nurbs curves and solids., GetParameterValueByName(TypeOrInstance) - Gets a parameter value by name regardless of type or instance., GetParameterValueByNameAsString - Returns paramter value as string. Same effect as lunchbox node, without python., Gmail.ComposeEmail - This node will compose a new email. Useful for notifications regarding a graph concluding. Uses pythons built-in SMTP Library., Gmail.ComposeEmailDetailed - This will compose a detailed email with subject and message., Group.UngroupElements - This will ungroup the input groups and output their elements. Use with care!, Inspiration.BuffettNode - This is a result of \"what if?\" thinking. The output is a random Warren Buffett quote from brainyquotes.com, Inspiration.CarreyNode - This is a result of \"what if?\" thinking. The output is a random Jim Carrey quote from brainyquotes.com, Inspiration.CashNode - This is a result of \"what if?\" thinking. The output is a random Johnny Cash quote from brainyquotes.com, Inspiration.MarleyNode - This is a result of \"what if?\" thinking. The output is a random Bob Marley quote from brainyquotes.com, Inspiration.SearchQuoteNode - This is a result of \"what if?\" thinking. The output is a random quote based on the search criteria from brainyquotes.com. (As long as it is on the site), Inspiration.TeresaNode - This is a result of \"what if?\" thinking. The output is a random Mother Teresa quote from brainyquotes.com, Isolated Pick Model Elements(ordered) - Pick model elements in desired order of a desired category., Isolated Pick Model Elements - This allows a multiple selection of elements of specified category., Level Element Collector - This collects data for all of the Level elements in the model. Similar to the node on Lunchbox, but this one uses all O.O.B. nodes., List.AllIndicesOf - Given an item, returns the zero-based indices of all its occurrences in the list. If the item cannot be found, an empty list is returned. , List.ArchitecturalAlphabeticalSequence - This creates a list of characters. What's different is we typically exclude I's and O's from our characters so there is a toggle for this., List.Contains - Determines if the given list contains the item or items., List.GetItemIndices - This node searches the input list for the given string or number., List.MergeSublists - This will merge all sublists with or without a character between the strings., List.ReturnItemsPreviousToIndex - This will take an index (or indices) and return the items previous to it. Useful for sums of all items previous., Mullion.SortByDirection - This will sort mullions of a host curtain wall by direction they are facing., OS.CurrentUser - This node retrieves the current user logged in., OS.CurrentUserAppData - This retrieves the current user's appdata location, Output.Clean - This will return a single value or list from one input., Parametric Graphic Scale - This node automates the graphic scale assigned per viewport. The input required is all instances of viewport category. It also requires shared parameters. Visit sixtysecondrevit.blogspot.com for details., Pick Model Element - This offers a single selection of a model element. Created for Dynamo Player usage., Pick Model Elements - This node offers a pick method for selecting elements in Revit., PipeInsulation.Create - This will add insulation to the input pipes. Can only handle one type of insulation and size for now., Railing.BalusterCount - This node will count the amout of balusters in a rail element. Only works for single element for now., ReferencePlane.ByStartPointEndPointActiveViewVector - This will create a reference plane by the given start point, end point and active view vector. If you want to use multiple points as input you need to use List@Level with level 1 for both inputs., RemoveListFromList - This node essentially \"subtracts\" the contents of List B from List A to produce a new list with the unique items., Rhythm.3DRoomTags - This node will generate 3D room tags for all rooms in the model. (RFA in extra folder in Dynamo download), Rhythm.3DSpaceTags - This will generate 3D space tags for all spaces in the project., Rhythm.BackupRFADeleter - This node will scan the contents of a driectory and delete backup RFA files that appear with a four digit backup number before the file extension. (eg. Family1.0001.rfa) This is deleting files so please use with caution!, Rhythm.DatePicker - This provides a popup date selector for the user., Rhythm.Detail Number by View Name  - Automatically numbers your detail number based on the first two characters of your view name. i.e. A4/... (Requires slash to be present), Rhythm.IntegerSlider - Provides an integer slider for the dynamo player. Has min, max and description., Rhythm.MassOSMData - This node will mass the OSM data based upon the know heights. If the building doesn't have a height, it will just output the polygon., Rhythm.OverrideInteriorCrop - This node will override the lineweight of the crop region on interior elevations. This node would not be possible without the power of the Dynamo community. Specifically Danny Jones with Clark Patterson Lee., Rhythm.PercentGlazingByOrientation - This node was show at RTCNA2015 to optimize your workflows. It reports the window to wall % by direction the wall faces., Rhythm.RenumberGridsByCurve - This node will renumber grids in order of curve drawn through them. Select either letters or numbers. (Alphanumeric coming soon), Rhythm.RenumberRoomsByCurve - This node will renumber rooms along a curve path. This was developed through the guidance of WIlliam Wong at case. Considering WeWork bought Case I wanted this node to live somewhere., Rhythm.TextBoxInput - Provides a text box input for users. Allows for multiple strings if needed., Rhythm.Toggle - Toggle that offers two outputs. Created for Dynamo 0.8.1 because of changes to the \"IF\" node, Rhythm.WhatTheNode - This node will let you search dynamonodes.com for the most likely package a node is from. Helps fix \"red\" nodes when users do not have package installed., Rhythm.YesNoToggle - This provides a toggle to use for graphs with dynamo player. The user chooses if they would like to run the graph., Room Element Collector - THis will collect data regarding rooms in the active model. Similar to Lunchbox node, but this one does not use python., RoomTag.Host - Retrieves the assoicated room with a room tag., Select Elements By Curve - This will select model elements in order that a curve is drawn through them., Select Grids By Curve - This will select Revit grids by the input Revit curve,, SetParameterByName(TypeOrInstance) - Set one of the element's parameters regardless of parameter type or instance., Space.IsPointInside - This will test if a point falls within a space., Space.SetSpaceType - This node will set the space type for the input space., Space.GetSpaceType - This will retrieve the space type of the space as a string., SpaceTag.Host - This obtains the MEP space associated with a given MEP space tag., SpaceType.All - This node will output ALL space types., SpaceType.ByName - This will output a MEP space type based on name search., SquareFeetDropper - This node drops square feet from the pulled area, String.CharacterAtIndex - Get's the character at a given index, String.ElementsModified - THis custom node reports the amount of elements in a list as a phrase., String.FlipReverse - This node flips the string and reverses it. (April Fools '15) Works for 0.8.0 only, added unicode support, String.IndicesOfCharacter - This node gets all the indices of a given character, String.IsUnicode - Determines if input string is a unicode character., String.RemoveAfterGivenCharacter - This will move all characters at and after the given character., String.RemovePriorToCharacter - This will remove all characters prior to the input character. Accepts strings., String.SpecifyDecimalPlaces - This node will take your inout string and number of decimal places to create a new simplified output., String.ToSentenceCase - This node will convert a single string of text to have capitalized sentences. If you need to use this over a list, use List.Map., String.ToTitle - Converts the given string to Title Case., StructuralBeamSystem.Members - Thist will collect the members of the ebeam system., TextElement.ToLower - This node converts a Revit text elemnt to upper directly., TextElement.ToTitle - This node converts a Revit text elemnt to upper directly., TextElement.ToUpper - This node converts a Revit text elemnt to upper directly., UI.ColorPicker - This node allows the user to choose a color via the Revit API color selection dialog., UI.FilePath - Provides a file path option for use with Dynamo Player., UI.UserMessage - This will display a user message once. Until it is either toggled or changed., Unicode.LRE - Start of left-to-right embedding Unicode Character, Unicode.LRM - Left-to-right mark unicode character, Unicode.RLE - Start of right-to-left embedding Unicode Character, Unicode.RLM - Right-to-left mark Unicode character, Unicode.ZWJ - Zero width joiner Unicode Character, Unicode.ZWNJ - Zero width non-joiner Unicode Character, View.ConvertToIndependent - This will convert input dependent views to independent. Thanks to TheRevitKid for the idea!, View3D.SetSectionBox - This will set a views section box giving a bounding box., ViewFamilyType.ByName - Select a view family type given it's name., Viewport.ViewName - This node gets the view name of viewports. There is an issue when \"title on sheet\" is used, so this fixes that., Wall.NorthSouthEastWest - This node determines which direction a wall is facing and groups them by the direction or direction they are closest to., Workset.Create - Creates a workset or worksets from input names., PostableCommand.CloseHiddenWindows - This will close the hidden windows in your current Revit document., PostableCommand.Default3DView - This will set the active view as the default (little house) 3D view., PostableCommand.ReplicateWindow - Does what is says. Creates another instance of the same window you have open.",
            "engine_metadata": "",
            "engine_version": "1.2.1.3083",
            "created": "2017-02-15T15:54:17.614Z",
            "full_dependency_versions": [ "2017.2.14" ],
            "full_dependency_ids": [
              {
                "_id": "54e7add1dcee4dfd26000101",
                "name": "Rhythm"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2017.2.14"
          },
          {
            "_id": "58a5249f61de68010800007c",
            "contains_binaries": true,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-prod/07c6be6e-eb12-4ef0-89c2-e8a2a9bcbaebgregPkg186.zip",
            "contents": "AdaptiveComponent.PlacementPoints - This node retrieves the adaptive components points., All Elements of Type in Document - All elements of given type in specified document. This works for unopened files and for linked documents., All Framing at Reference Level - Collects all of the structural framing at a specific reference level, All Pipes at Reference Level - This will collect all pipes by their reference level., All Upper - This converts the ase of selected items to UPPER. Inputs require booleans to enable for category., Arrowhead Assigner - This node assings the arrowhead type for all text and keynote tags. There is an input for ones you want to exclude., Ayuda.IsArchi-LabInstalled - This node determines if Archi-Lab is installed. Useful with a toggle., Ayuda.IsClockworkInstalled - This node determines if clockwork is installed. Useful with a toggle., Ayuda.IsSteamNodesInstalled - This node determines if steamnodes is installed. Useful with a toggle.;, Ayuda.ThisOrThat - This node is a toggle between two inputs., BasicFileInfo.SavedInVersion - This will supply the version that the revit model is saved in., CableTray.Space - This node will determine the space a cable tray's center falls within., Collector.Areas - This is an area collector element that utilizes mostly OOTB nodes., Collector.DuctsBySystem - This collects all ducts in the project and organizes them by System Classification, Collector.KeynoteTags - This collects all of the keynote tags in the model. Similar to other nodes, but this doesn't use python., Collector.LabelTypes - This node collects all of the label types for the active family document., Collector.PipesBySystem - This collects all pipes in the project and organizes them by System Classification, Collector.TagTypes - This node collects the tag types in the model., Collector.Viewports - This collects all of the viewports in the model and outputs the name, title on sheet, scale and viewport type., CurtainGrid.AllSegmentCurves - This will return the vertical and horizontal curtain grid segments regardless if hidden or not. Groups by U and V., CurtainGrid.ByElement - Gets the curtain grids by the host element. Seperates into U and V, CurtainGrid.ExistingSegmentCurves - Retrieve all the existing segment curves of the grid line.  Groups by U and V., CurtainGrid.FullCurve - Returns the curves of the input curtain grids. Groups by U and V., CurtainGrid.RemoveSegment - Removes segments from curtain grids. Can't take lists yet. Use with List.Combine., CurtainGrid.RemoveSegmentsFunction - Function to apply to remove segments node, CurtainGrid.SkippedSegmentCurves - Retrieve all the removed segment curves of the grid line. , Curve.FromLine - This will translate a line element to a curve., Dash Remover - This node removes the dash at index 2 if it exists. The reason being, NCS states that no dash shall be used., Dimension.IsOverridden - This will report if a dimension has been overridden. , Dimension.LeaderEndPosition - This will return the leader end postion as a point., Dimension.MultiSegmentMembers - This will output all of the members of a multi-segment dimension., Dimension.NumberOfSegments - This will return the number of segments a dimension has. If it is a single dimension, this will return zero., Dimension.Origin - This will return the dimension origin as a point., Dimension.SetAboveValue - This will set the above value of a dimension., Dimension.SetBelowValue - This will set the below value of a dimension., Dimension.TextPosition - This will return the postition of the text as a point., Dimension.ValueString - The displayed value shown for the dimension segment. , Document.BackgroundOpen - This will open the input Revit files in the background., Document.Close - This will close the input Revit document. Offers a boolean toggle to save., Document.SetStartingView - This will set the starting view for a given document. ONLY WORKS IN ONE DOCUMENT AT A TIME, DraftingView.CreateInDocument - This will create a new drafting view in the given document. ONLY WORKS FOR ONE DOCUMENT AT A TIME, Element.AreaLocation - This node will determine what area (area plans) an element is located within. Made possible thanks to clockwork. :), Element.AreaWithTotal - This will get the area of an element if the parameter exists. Will total as well if needed., Element.Category - This node will get the input element(s)' categories, Element.CopyFromDocument - This node allows you to copy elements from a specific document to your current document., Element.CopyFromViewToView - This will copy elements from view to view., Element.GetJoinedElements - This will obtain the elements joined to the input element., Element.GetLevelNameAsString - This retrieves the level name of the input elements as a string. This is in response to a known issue with the get value node., Element.GetMultipleParameterValuesByName - Get the value of multiple parameters from elements. (Seperate parameters with comma), Element.GetParameterValueByName(CaSe iNSeNSiTive) - Get the value of one of the element's parameters. (CaSe iNSeNSiTiVe), Element.IsPhaseCreatedValid - This will determine if the input phase is the correct one for the input elements, Element.OverrideCutColorInView - Overrides the elements cut color in the view., Element.OverrideCutLineweight - Overrides the cut lines of the elements, Element.OverrideProjectionFillColor - This node overrides the fill color of the element in view., Element.OverrideProjectionLineColor - This node overrides the projection line color with the input color value. Useful for annotation., Element.OverrideProjectionLineweight - Overrides the line thickness of projection lines, Element.ParentFamily - This node retrieces the parent family name for each input element., Element.Room - This node takes the input of all elements of category and reports back the associated room per element. Currently tested with casework, furniture and plumbing fixtures., Element.SetMultipleParametersByName - Set multiple (comma seperated) parameters by name., Element.SetParameterByName(CaSe iNSeNSiTiVe) - Set one of the element's parameters. (CaSe iNSeNSiTiVe), Element.SetPinnedStatus - Will set the element to either pinned or not pinned. True is pinned, false is unpinned. For multiple elements use List.Map, Element.Space - This will retrieve the space in which an element is contained. (if available), Element.Type - This retrieves the element type of the given elements. (if available) Similar to others available but no python here., Geometry.SpaceEvenlyWithBuffer - This will take input geometry and space it out in the Y direction with a buffer between, Geometry.ToRevitType - This will convert designscript geometyr into Revit.DB types. Currently tested with curves, nurbs curves and solids., GetParameterValueByName(TypeOrInstance) - Gets a parameter value by name regardless of type or instance., GetParameterValueByNameAsString - Returns paramter value as string. Same effect as lunchbox node, without python., Gmail.ComposeEmail - This node will compose a new email. Useful for notifications regarding a graph concluding. Uses pythons built-in SMTP Library., Gmail.ComposeEmailDetailed - This will compose a detailed email with subject and message., Group.UngroupElements - This will ungroup the input groups and output their elements. Use with care!, Inspiration.BuffettNode - This is a result of \"what if?\" thinking. The output is a random Warren Buffett quote from brainyquotes.com, Inspiration.CarreyNode - This is a result of \"what if?\" thinking. The output is a random Jim Carrey quote from brainyquotes.com, Inspiration.CashNode - This is a result of \"what if?\" thinking. The output is a random Johnny Cash quote from brainyquotes.com, Inspiration.MarleyNode - This is a result of \"what if?\" thinking. The output is a random Bob Marley quote from brainyquotes.com, Inspiration.SearchQuoteNode - This is a result of \"what if?\" thinking. The output is a random quote based on the search criteria from brainyquotes.com. (As long as it is on the site), Inspiration.TeresaNode - This is a result of \"what if?\" thinking. The output is a random Mother Teresa quote from brainyquotes.com, Isolated Pick Model Elements(ordered) - Pick model elements in desired order of a desired category., Isolated Pick Model Elements - This allows a multiple selection of elements of specified category., Level Element Collector - This collects data for all of the Level elements in the model. Similar to the node on Lunchbox, but this one uses all O.O.B. nodes., List.AllIndicesOf - Given an item, returns the zero-based indices of all its occurrences in the list. If the item cannot be found, an empty list is returned. , List.ArchitecturalAlphabeticalSequence - This creates a list of characters. What's different is we typically exclude I's and O's from our characters so there is a toggle for this., List.Contains - Determines if the given list contains the item or items., List.GetItemIndices - This node searches the input list for the given string or number., List.MergeSublists - This will merge all sublists with or without a character between the strings., List.ReturnItemsPreviousToIndex - This will take an index (or indices) and return the items previous to it. Useful for sums of all items previous., Mullion.SortByDirection - This will sort mullions of a host curtain wall by direction they are facing., OS.CurrentUser - This node retrieves the current user logged in., OS.CurrentUserAppData - This retrieves the current user's appdata location, Output.Clean - This will return a single value or list from one input., Parametric Graphic Scale - This node automates the graphic scale assigned per viewport. The input required is all instances of viewport category. It also requires shared parameters. Visit sixtysecondrevit.blogspot.com for details., Pick Model Element - This offers a single selection of a model element. Created for Dynamo Player usage., Pick Model Elements - This node offers a pick method for selecting elements in Revit., PipeInsulation.Create - This will add insulation to the input pipes. Can only handle one type of insulation and size for now., PostableCommand.CloseHiddenWindows - This will close the hidden windows in your current Revit document., PostableCommand.Default3DView - This will set the active view as the default (little house) 3D view., PostableCommand.ReplicateWindow - Does what is says. Creates another instance of the same window you have open., Railing.BalusterCount - This node will count the amout of balusters in a rail element. Only works for single element for now., ReferencePlane.ByStartPointEndPointActiveViewVector - This will create a reference plane by the given start point, end point and active view vector. If you want to use multiple points as input you need to use List@Level with level 1 for both inputs., RemoveListFromList - This node essentially \"subtracts\" the contents of List B from List A to produce a new list with the unique items., Rhythm.3DRoomTags - This node will generate 3D room tags for all rooms in the model. (RFA in extra folder in Dynamo download), Rhythm.3DSpaceTags - This will generate 3D space tags for all spaces in the project., Rhythm.BackupRFADeleter - This node will scan the contents of a driectory and delete backup RFA files that appear with a four digit backup number before the file extension. (eg. Family1.0001.rfa) This is deleting files so please use with caution!, Rhythm.DatePicker - This provides a popup date selector for the user., Rhythm.Detail Number by View Name  - Automatically numbers your detail number based on the first two characters of your view name. i.e. A4/... (Requires slash to be present), Rhythm.IntegerSlider - Provides an integer slider for the dynamo player. Has min, max and description., Rhythm.MassOSMData - This node will mass the OSM data based upon the know heights. If the building doesn't have a height, it will just output the polygon., Rhythm.OverrideInteriorCrop - This node will override the lineweight of the crop region on interior elevations. This node would not be possible without the power of the Dynamo community. Specifically Danny Jones with Clark Patterson Lee., Rhythm.PercentGlazingByOrientation - This node was show at RTCNA2015 to optimize your workflows. It reports the window to wall % by direction the wall faces., Rhythm.RenumberGridsByCurve - This node will renumber grids in order of curve drawn through them. Select either letters or numbers. (Alphanumeric coming soon), Rhythm.RenumberRoomsByCurve - This node will renumber rooms along a curve path. This was developed through the guidance of WIlliam Wong at case. Considering WeWork bought Case I wanted this node to live somewhere., Rhythm.TextBoxInput - Provides a text box input for users. Allows for multiple strings if needed., Rhythm.Toggle - Toggle that offers two outputs. Created for Dynamo 0.8.1 because of changes to the \"IF\" node, Rhythm.WhatTheNode - This node will let you search dynamonodes.com for the most likely package a node is from. Helps fix \"red\" nodes when users do not have package installed., Rhythm.YesNoToggle - This provides a toggle to use for graphs with dynamo player. The user chooses if they would like to run the graph., Room Element Collector - THis will collect data regarding rooms in the active model. Similar to Lunchbox node, but this one does not use python., RoomTag.Host - Retrieves the assoicated room with a room tag., Select Elements By Curve - This will select model elements in order that a curve is drawn through them., Select Grids By Curve - This will select Revit grids by the input Revit curve,, SetParameterByName(TypeOrInstance) - Set one of the element's parameters regardless of parameter type or instance., Space.IsPointInside - This will test if a point falls within a space., Space.SetSpaceType - This node will set the space type for the input space., Space.GetSpaceType - This will retrieve the space type of the space as a string., SpaceTag.Host - This obtains the MEP space associated with a given MEP space tag., SpaceType.All - This node will output ALL space types., SpaceType.ByName - This will output a MEP space type based on name search., SquareFeetDropper - This node drops square feet from the pulled area, String.CharacterAtIndex - Get's the character at a given index, String.ElementsModified - THis custom node reports the amount of elements in a list as a phrase., String.FlipReverse - This node flips the string and reverses it. (April Fools '15) Works for 0.8.0 only, added unicode support, String.IndicesOfCharacter - This node gets all the indices of a given character, String.IsUnicode - Determines if input string is a unicode character., String.RemoveAfterGivenCharacter - This will move all characters at and after the given character., String.RemovePriorToCharacter - This will remove all characters prior to the input character. Accepts strings., String.SpecifyDecimalPlaces - This node will take your inout string and number of decimal places to create a new simplified output., String.ToSentenceCase - This node will convert a single string of text to have capitalized sentences. If you need to use this over a list, use List.Map., String.ToTitle - Converts the given string to Title Case., StructuralBeamSystem.Members - Thist will collect the members of the ebeam system., TextElement.ToLower - This node converts a Revit text elemnt to upper directly., TextElement.ToTitle - This node converts a Revit text elemnt to upper directly., TextElement.ToUpper - This node converts a Revit text elemnt to upper directly., UI.ColorPicker - This node allows the user to choose a color via the Revit API color selection dialog., UI.FilePath - Provides a file path option for use with Dynamo Player., UI.UserMessage - This will display a user message once. Until it is either toggled or changed., Unicode.LRE - Start of left-to-right embedding Unicode Character, Unicode.LRM - Left-to-right mark unicode character, Unicode.RLE - Start of right-to-left embedding Unicode Character, Unicode.RLM - Right-to-left mark Unicode character, Unicode.ZWJ - Zero width joiner Unicode Character, Unicode.ZWNJ - Zero width non-joiner Unicode Character, View.ConvertToIndependent - This will convert input dependent views to independent. Thanks to TheRevitKid for the idea!, View3D.SetSectionBox - This will set a views section box giving a bounding box., ViewFamilyType.ByName - Select a view family type given it's name., Viewport.ViewName - This node gets the view name of viewports. There is an issue when \"title on sheet\" is used, so this fixes that., Wall.NorthSouthEastWest - This node determines which direction a wall is facing and groups them by the direction or direction they are closest to., Workset.Create - Creates a workset or worksets from input names.",
            "engine_metadata": "",
            "engine_version": "1.2.1.3083",
            "created": "2017-02-16T04:03:43.977Z",
            "full_dependency_versions": [ "2017.2.15" ],
            "full_dependency_ids": [
              {
                "_id": "54e7add1dcee4dfd26000101",
                "name": "Rhythm"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2017.2.15"
          },
          {
            "_id": "58b4484ff4db78ec0100005b",
            "contains_binaries": true,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-prod/3ce64cbf-9c05-4a69-94e7-77b349e1f4aegregPkg191.zip",
            "contents": "AdaptiveComponent.PlacementPoints - This node retrieves the adaptive components points., All Elements of Type in Document - All elements of given type in specified document. This works for unopened files and for linked documents., All Framing at Reference Level - Collects all of the structural framing at a specific reference level, All Pipes at Reference Level - This will collect all pipes by their reference level., All Upper - This converts the ase of selected items to UPPER. Inputs require booleans to enable for category., Arrowhead Assigner - This node assings the arrowhead type for all text and keynote tags. There is an input for ones you want to exclude., Ayuda.IsArchi-LabInstalled - This node determines if Archi-Lab is installed. Useful with a toggle., Ayuda.IsClockworkInstalled - This node determines if clockwork is installed. Useful with a toggle., Ayuda.IsSteamNodesInstalled - This node determines if steamnodes is installed. Useful with a toggle.;, Ayuda.ThisOrThat - This node is a toggle between two inputs., BasicFileInfo.SavedInVersion - This will supply the version that the revit model is saved in., CableTray.Space - This node will determine the space a cable tray's center falls within., Collector.Areas - This is an area collector element that utilizes mostly OOTB nodes., Collector.DuctsBySystem - This collects all ducts in the project and organizes them by System Classification, Collector.KeynoteTags - This collects all of the keynote tags in the model. Similar to other nodes, but this doesn't use python., Collector.LabelTypes - This node collects all of the label types for the active family document., Collector.PipesBySystem - This collects all pipes in the project and organizes them by System Classification, Collector.TagTypes - This node collects the tag types in the model., Collector.Viewports - This collects all of the viewports in the model and outputs the name, title on sheet, scale and viewport type., CurtainGrid.AllSegmentCurves - This will return the vertical and horizontal curtain grid segments regardless if hidden or not. Groups by U and V., CurtainGrid.ByElement - Gets the curtain grids by the host element. Seperates into U and V, CurtainGrid.ExistingSegmentCurves - Retrieve all the existing segment curves of the grid line.  Groups by U and V., CurtainGrid.FullCurve - Returns the curves of the input curtain grids. Groups by U and V., CurtainGrid.RemoveSegment - Removes segments from curtain grids. Can't take lists yet. Use with List.Combine., CurtainGrid.RemoveSegmentsFunction - Function to apply to remove segments node, CurtainGrid.SkippedSegmentCurves - Retrieve all the removed segment curves of the grid line. , Curve.FromLine - This will translate a line element to a curve., Dash Remover - This node removes the dash at index 2 if it exists. The reason being, NCS states that no dash shall be used., Dimension.IsOverridden - This will report if a dimension has been overridden. , Dimension.LeaderEndPosition - This will return the leader end postion as a point., Dimension.MultiSegmentMembers - This will output all of the members of a multi-segment dimension., Dimension.NumberOfSegments - This will return the number of segments a dimension has. If it is a single dimension, this will return zero., Dimension.Origin - This will return the dimension origin as a point., Dimension.SetAboveValue - This will set the above value of a dimension., Dimension.SetBelowValue - This will set the below value of a dimension., Dimension.TextPosition - This will return the postition of the text as a point., Dimension.ValueString - The displayed value shown for the dimension segment. , Document.BackgroundOpen - This will open the input Revit files in the background., Document.Close - This will close the input Revit document. Offers a boolean toggle to save., Document.SetStartingView - This will set the starting view for a given document. ONLY WORKS IN ONE DOCUMENT AT A TIME, DraftingView.CreateInDocument - This will create a new drafting view in the given document. ONLY WORKS FOR ONE DOCUMENT AT A TIME, Element.AreaLocation - This node will determine what area (area plans) an element is located within. Made possible thanks to clockwork. :), Element.AreaWithTotal - This will get the area of an element if the parameter exists. Will total as well if needed., Element.Category - This node will get the input element(s)' categories, Element.CopyFromDocument - This node allows you to copy elements from a specific document to your current document., Element.CopyFromViewToView - This will copy elements from view to view., Element.GetJoinedElements - This will obtain the elements joined to the input element., Element.GetLevelNameAsString - This retrieves the level name of the input elements as a string. This is in response to a known issue with the get value node., Element.GetMultipleParameterValuesByName - Get the value of multiple parameters from elements. (Seperate parameters with comma), Element.GetParameterValueByName(CaSe iNSeNSiTive) - Get the value of one of the element's parameters. (CaSe iNSeNSiTiVe), Element.IsPhaseCreatedValid - This will determine if the input phase is the correct one for the input elements, Element.OverrideCutColorInView - Overrides the elements cut color in the view., Element.OverrideCutLineweight - Overrides the cut lines of the elements, Element.OverrideProjectionFillColor - This node overrides the fill color of the element in view., Element.OverrideProjectionLineColor - This node overrides the projection line color with the input color value. Useful for annotation., Element.OverrideProjectionLineweight - Overrides the line thickness of projection lines, Element.ParentFamily - This node retrieces the parent family name for each input element., Element.Room - This node takes the input of all elements of category and reports back the associated room per element. Currently tested with casework, furniture and plumbing fixtures., Element.SetMultipleParametersByName - Set multiple (comma seperated) parameters by name., Element.SetParameterByName(CaSe iNSeNSiTiVe) - Set one of the element's parameters. (CaSe iNSeNSiTiVe), Element.SetPinnedStatus - Will set the element to either pinned or not pinned. True is pinned, false is unpinned. For multiple elements use List.Map, Element.Space - This will retrieve the space in which an element is contained. (if available), Element.Type - This retrieves the element type of the given elements. (if available) Similar to others available but no python here., Geometry.SpaceEvenlyWithBuffer - This will take input geometry and space it out in the Y direction with a buffer between, Geometry.ToRevitType - This will convert designscript geometyr into Revit.DB types. Currently tested with curves, nurbs curves and solids., GetParameterValueByName(TypeOrInstance) - Gets a parameter value by name regardless of type or instance., GetParameterValueByNameAsString - Returns paramter value as string. Same effect as lunchbox node, without python., Gmail.ComposeEmail - This node will compose a new email. Useful for notifications regarding a graph concluding. Uses pythons built-in SMTP Library., Gmail.ComposeEmailDetailed - This will compose a detailed email with subject and message., Group.UngroupElements - This will ungroup the input groups and output their elements. Use with care!, Inspiration.BuffettNode - This is a result of \"what if?\" thinking. The output is a random Warren Buffett quote from brainyquotes.com, Inspiration.CarreyNode - This is a result of \"what if?\" thinking. The output is a random Jim Carrey quote from brainyquotes.com, Inspiration.CashNode - This is a result of \"what if?\" thinking. The output is a random Johnny Cash quote from brainyquotes.com, Inspiration.MarleyNode - This is a result of \"what if?\" thinking. The output is a random Bob Marley quote from brainyquotes.com, Inspiration.SearchQuoteNode - This is a result of \"what if?\" thinking. The output is a random quote based on the search criteria from brainyquotes.com. (As long as it is on the site), Inspiration.TeresaNode - This is a result of \"what if?\" thinking. The output is a random Mother Teresa quote from brainyquotes.com, Isolated Pick Model Elements(ordered) - Pick model elements in desired order of a desired category., Isolated Pick Model Elements - This allows a multiple selection of elements of specified category., Level Element Collector - This collects data for all of the Level elements in the model. Similar to the node on Lunchbox, but this one uses all O.O.B. nodes., List.AllIndicesOf - Given an item, returns the zero-based indices of all its occurrences in the list. If the item cannot be found, an empty list is returned. , List.ArchitecturalAlphabeticalSequence - This creates a list of characters. What's different is we typically exclude I's and O's from our characters so there is a toggle for this., List.Contains - Determines if the given list contains the item or items., List.GetItemIndices - This node searches the input list for the given string or number., List.MergeSublists - This will merge all sublists with or without a character between the strings., List.ReturnItemsPreviousToIndex - This will take an index (or indices) and return the items previous to it. Useful for sums of all items previous., Mullion.SortByDirection - This will sort mullions of a host curtain wall by direction they are facing., OS.CurrentUser - This node retrieves the current user logged in., OS.CurrentUserAppData - This retrieves the current user's appdata location, Output.Clean - This will return a single value or list from one input., Parametric Graphic Scale - This node automates the graphic scale assigned per viewport. The input required is all instances of viewport category. It also requires shared parameters. Visit sixtysecondrevit.blogspot.com for details., Pick Model Element - This offers a single selection of a model element. Created for Dynamo Player usage., Pick Model Elements - This node offers a pick method for selecting elements in Revit., PipeInsulation.Create - This will add insulation to the input pipes. Can only handle one type of insulation and size for now., PostableCommand.CloseHiddenWindows - This will close the hidden windows in your current Revit document., PostableCommand.Default3DView - This will set the active view as the default (little house) 3D view., PostableCommand.ReplicateWindow - Does what is says. Creates another instance of the same window you have open., Railing.BalusterCount - This node will count the amout of balusters in a rail element. Only works for single element for now., ReferencePlane.ByStartPointEndPointActiveViewVector - This will create a reference plane by the given start point, end point and active view vector. If you want to use multiple points as input you need to use List@Level with level 1 for both inputs., RemoveListFromList - This node essentially \"subtracts\" the contents of List B from List A to produce a new list with the unique items., Rhythm.3DRoomTags - This node will generate 3D room tags for all rooms in the model. (RFA in extra folder in Dynamo download), Rhythm.3DSpaceTags - This will generate 3D space tags for all spaces in the project., Rhythm.BackupRFADeleter - This node will scan the contents of a driectory and delete backup RFA files that appear with a four digit backup number before the file extension. (eg. Family1.0001.rfa) This is deleting files so please use with caution!, Rhythm.DatePicker - This provides a popup date selector for the user., Rhythm.Detail Number by View Name  - Automatically numbers your detail number based on the first two characters of your view name. i.e. A4/... (Requires slash to be present), Rhythm.IntegerSlider - Provides an integer slider for the dynamo player. Has min, max and description., Rhythm.MassOSMData - This node will mass the OSM data based upon the know heights. If the building doesn't have a height, it will just output the polygon., Rhythm.OverrideInteriorCrop - This node will override the lineweight of the crop region on interior elevations. This node would not be possible without the power of the Dynamo community. Specifically Danny Jones with Clark Patterson Lee., Rhythm.PercentGlazingByOrientation - This node was show at RTCNA2015 to optimize your workflows. It reports the window to wall % by direction the wall faces., Rhythm.RenumberGridsByCurve - This node will renumber grids in order of curve drawn through them. Select either letters or numbers. (Alphanumeric coming soon), Rhythm.RenumberRoomsByCurve - This node will renumber rooms along a curve path. This was developed through the guidance of WIlliam Wong at case. Considering WeWork bought Case I wanted this node to live somewhere., Rhythm.TextBoxInput - Provides a text box input for users. Allows for multiple strings if needed., Rhythm.Toggle - Toggle that offers two outputs. Created for Dynamo 0.8.1 because of changes to the \"IF\" node, Rhythm.WhatTheNode - This node will let you search dynamonodes.com for the most likely package a node is from. Helps fix \"red\" nodes when users do not have package installed., Rhythm.YesNoToggle - This provides a toggle to use for graphs with dynamo player. The user chooses if they would like to run the graph., Room Element Collector - THis will collect data regarding rooms in the active model. Similar to Lunchbox node, but this one does not use python., RoomTag.Host - Retrieves the assoicated room with a room tag., Select Elements By Curve - This will select model elements in order that a curve is drawn through them., Select Grids By Curve - This will select Revit grids by the input Revit curve,, SetParameterByName(TypeOrInstance) - Set one of the element's parameters regardless of parameter type or instance., Space.IsPointInside - This will test if a point falls within a space., Space.SetSpaceType - This node will set the space type for the input space., Space.GetSpaceType - This will retrieve the space type of the space as a string., SpaceTag.Host - This obtains the MEP space associated with a given MEP space tag., SpaceType.All - This node will output ALL space types., SpaceType.ByName - This will output a MEP space type based on name search., SquareFeetDropper - This node drops square feet from the pulled area, String.CharacterAtIndex - Get's the character at a given index, String.ElementsModified - THis custom node reports the amount of elements in a list as a phrase., String.FlipReverse - This node flips the string and reverses it. (April Fools '15) Works for 0.8.0 only, added unicode support, String.IndicesOfCharacter - This node gets all the indices of a given character, String.IsUnicode - Determines if input string is a unicode character., String.RemoveAfterGivenCharacter - This will move all characters at and after the given character., String.RemovePriorToCharacter - This will remove all characters prior to the input character. Accepts strings., String.SpecifyDecimalPlaces - This node will take your inout string and number of decimal places to create a new simplified output., String.ToSentenceCase - This node will convert a single string of text to have capitalized sentences. If you need to use this over a list, use List.Map., String.ToTitle - Converts the given string to Title Case., StructuralBeamSystem.Members - Thist will collect the members of the ebeam system., TextElement.ToLower - This node converts a Revit text elemnt to upper directly., TextElement.ToTitle - This node converts a Revit text elemnt to upper directly., TextElement.ToUpper - This node converts a Revit text elemnt to upper directly., UI.ColorPicker - This node allows the user to choose a color via the Revit API color selection dialog., UI.FilePath - Provides a file path option for use with Dynamo Player., UI.UserMessage - This will display a user message once. Until it is either toggled or changed., Unicode.LRE - Start of left-to-right embedding Unicode Character, Unicode.LRM - Left-to-right mark unicode character, Unicode.RLE - Start of right-to-left embedding Unicode Character, Unicode.RLM - Right-to-left mark Unicode character, Unicode.ZWJ - Zero width joiner Unicode Character, Unicode.ZWNJ - Zero width non-joiner Unicode Character, View.ConvertToIndependent - This will convert input dependent views to independent. Thanks to TheRevitKid for the idea!, View3D.SetSectionBox - This will set a views section box giving a bounding box., ViewFamilyType.ByName - Select a view family type given it's name., Viewport.ViewName - This node gets the view name of viewports. There is an issue when \"title on sheet\" is used, so this fixes that., Wall.NorthSouthEastWest - This node determines which direction a wall is facing and groups them by the direction or direction they are closest to., Workset.Create - Creates a workset or worksets from input names., Viewport.GetBoxOutline - This will retrieve the bounding box of  the viewport on a sheet. Not including the view title.",
            "engine_metadata": "",
            "engine_version": "1.2.1.3083",
            "created": "2017-02-27T15:39:59.838Z",
            "full_dependency_versions": [ "2017.2.26" ],
            "full_dependency_ids": [
              {
                "_id": "54e7add1dcee4dfd26000101",
                "name": "Rhythm"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2017.2.26"
          },
          {
            "_id": "58c32689f4db78ec010000e0",
            "contains_binaries": true,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-prod/0b638b42-f81f-4fa4-97fa-ab2e03e8c9b8gregPkg86.zip",
            "contents": "InteriorElevation.GetCropRegion - This will obtain the crop region from an Interior Elevation View Type., AdaptiveComponent.PlacementPoints - This node retrieves the adaptive components points., All Elements of Type in Document - All elements of given type in specified document. This works for unopened files and for linked documents., All Framing at Reference Level - Collects all of the structural framing at a specific reference level, All Pipes at Reference Level - This will collect all pipes by their reference level., All Upper - This converts the ase of selected items to UPPER. Inputs require booleans to enable for category., Arrowhead Assigner - This node assings the arrowhead type for all text and keynote tags. There is an input for ones you want to exclude., Ayuda.IsArchi-LabInstalled - This node determines if Archi-Lab is installed. Useful with a toggle., Ayuda.IsClockworkInstalled - This node determines if clockwork is installed. Useful with a toggle., Ayuda.IsSteamNodesInstalled - This node determines if steamnodes is installed. Useful with a toggle.;, Ayuda.ThisOrThat - This node is a toggle between two inputs., BasicFileInfo.SavedInVersion - This will supply the version that the revit model is saved in., CableTray.Space - This node will determine the space a cable tray's center falls within., Collector.Areas - This is an area collector element that utilizes mostly OOTB nodes., Collector.DuctsBySystem - This collects all ducts in the project and organizes them by System Classification, Collector.KeynoteTags - This collects all of the keynote tags in the model. Similar to other nodes, but this doesn't use python., Collector.LabelTypes - This node collects all of the label types for the active family document., Collector.PipesBySystem - This collects all pipes in the project and organizes them by System Classification, Collector.TagTypes - This node collects the tag types in the model., Collector.Viewports - This collects all of the viewports in the model and outputs the name, title on sheet, scale and viewport type., CurtainGrid.AllSegmentCurves - This will return the vertical and horizontal curtain grid segments regardless if hidden or not. Groups by U and V., CurtainGrid.ByElement - Gets the curtain grids by the host element. Seperates into U and V, CurtainGrid.ExistingSegmentCurves - Retrieve all the existing segment curves of the grid line.  Groups by U and V., CurtainGrid.FullCurve - Returns the curves of the input curtain grids. Groups by U and V., CurtainGrid.RemoveSegment - Removes segments from curtain grids. Can't take lists yet. Use with List.Combine., CurtainGrid.RemoveSegmentsFunction - Function to apply to remove segments node, CurtainGrid.SkippedSegmentCurves - Retrieve all the removed segment curves of the grid line. , Curve.FromLine - This will translate a line element to a curve., Dash Remover - This node removes the dash at index 2 if it exists. The reason being, NCS states that no dash shall be used., Dimension.IsOverridden - This will report if a dimension has been overridden. , Dimension.LeaderEndPosition - This will return the leader end postion as a point., Dimension.MultiSegmentMembers - This will output all of the members of a multi-segment dimension., Dimension.NumberOfSegments - This will return the number of segments a dimension has. If it is a single dimension, this will return zero., Dimension.Origin - This will return the dimension origin as a point., Dimension.SetAboveValue - This will set the above value of a dimension., Dimension.SetBelowValue - This will set the below value of a dimension., Dimension.TextPosition - This will return the postition of the text as a point., Dimension.ValueString - The displayed value shown for the dimension segment. , Document.BackgroundOpen - This will open the input Revit files in the background., Document.Close - This will close the input Revit document. Offers a boolean toggle to save., Document.SetStartingView - This will set the starting view for a given document. ONLY WORKS IN ONE DOCUMENT AT A TIME, DraftingView.CreateInDocument - This will create a new drafting view in the given document. ONLY WORKS FOR ONE DOCUMENT AT A TIME, Element.AreaLocation - This node will determine what area (area plans) an element is located within. Made possible thanks to clockwork. :), Element.AreaWithTotal - This will get the area of an element if the parameter exists. Will total as well if needed., Element.Category - This node will get the input element(s)' categories, Element.CopyFromDocument - This node allows you to copy elements from a specific document to your current document., Element.CopyFromViewToView - This will copy elements from view to view., Element.GetJoinedElements - This will obtain the elements joined to the input element., Element.GetLevelNameAsString - This retrieves the level name of the input elements as a string. This is in response to a known issue with the get value node., Element.GetMultipleParameterValuesByName - Get the value of multiple parameters from elements. (Seperate parameters with comma), Element.GetParameterValueByName(CaSe iNSeNSiTive) - Get the value of one of the element's parameters. (CaSe iNSeNSiTiVe), Element.IsPhaseCreatedValid - This will determine if the input phase is the correct one for the input elements, Element.OverrideCutColorInView - Overrides the elements cut color in the view., Element.OverrideCutLineweight - Overrides the cut lines of the elements, Element.OverrideProjectionFillColor - This node overrides the fill color of the element in view., Element.OverrideProjectionLineColor - This node overrides the projection line color with the input color value. Useful for annotation., Element.OverrideProjectionLineweight - Overrides the line thickness of projection lines, Element.ParentFamily - This node retrieces the parent family name for each input element., Element.Room - This node takes the input of all elements of category and reports back the associated room per element. Currently tested with casework, furniture and plumbing fixtures., Element.SetMultipleParametersByName - Set multiple (comma seperated) parameters by name., Element.SetParameterByName(CaSe iNSeNSiTiVe) - Set one of the element's parameters. (CaSe iNSeNSiTiVe), Element.SetPinnedStatus - Will set the element to either pinned or not pinned. True is pinned, false is unpinned. For multiple elements use List.Map, Element.Space - This will retrieve the space in which an element is contained. (if available), Element.Type - This retrieves the element type of the given elements. (if available) Similar to others available but no python here., Geometry.SpaceEvenlyWithBuffer - This will take input geometry and space it out in the Y direction with a buffer between, Geometry.ToRevitType - This will convert designscript geometyr into Revit.DB types. Currently tested with curves, nurbs curves and solids., GetParameterValueByName(TypeOrInstance) - Gets a parameter value by name regardless of type or instance., GetParameterValueByNameAsString - Returns paramter value as string. Same effect as lunchbox node, without python., Gmail.ComposeEmail - This node will compose a new email. Useful for notifications regarding a graph concluding. Uses pythons built-in SMTP Library., Gmail.ComposeEmailDetailed - This will compose a detailed email with subject and message., Group.UngroupElements - This will ungroup the input groups and output their elements. Use with care!, Inspiration.BuffettNode - This is a result of \"what if?\" thinking. The output is a random Warren Buffett quote from brainyquotes.com, Inspiration.CarreyNode - This is a result of \"what if?\" thinking. The output is a random Jim Carrey quote from brainyquotes.com, Inspiration.CashNode - This is a result of \"what if?\" thinking. The output is a random Johnny Cash quote from brainyquotes.com, Inspiration.MarleyNode - This is a result of \"what if?\" thinking. The output is a random Bob Marley quote from brainyquotes.com, Inspiration.SearchQuoteNode - This is a result of \"what if?\" thinking. The output is a random quote based on the search criteria from brainyquotes.com. (As long as it is on the site), Inspiration.TeresaNode - This is a result of \"what if?\" thinking. The output is a random Mother Teresa quote from brainyquotes.com, Isolated Pick Model Elements(ordered) - Pick model elements in desired order of a desired category., Isolated Pick Model Elements - This allows a multiple selection of elements of specified category., Level Element Collector - This collects data for all of the Level elements in the model. Similar to the node on Lunchbox, but this one uses all O.O.B. nodes., List.AllIndicesOf - Given an item, returns the zero-based indices of all its occurrences in the list. If the item cannot be found, an empty list is returned. , List.ArchitecturalAlphabeticalSequence - This creates a list of characters. What's different is we typically exclude I's and O's from our characters so there is a toggle for this., List.Contains - Determines if the given list contains the item or items., List.GetItemIndices - This node searches the input list for the given string or number., List.MergeSublists - This will merge all sublists with or without a character between the strings., List.ReturnItemsPreviousToIndex - This will take an index (or indices) and return the items previous to it. Useful for sums of all items previous., Mullion.SortByDirection - This will sort mullions of a host curtain wall by direction they are facing., OS.CurrentUser - This node retrieves the current user logged in., OS.CurrentUserAppData - This retrieves the current user's appdata location, Output.Clean - This will return a single value or list from one input., Parametric Graphic Scale - This node automates the graphic scale assigned per viewport. The input required is all instances of viewport category. It also requires shared parameters. Visit sixtysecondrevit.blogspot.com for details., Pick Model Element - This offers a single selection of a model element. Created for Dynamo Player usage., Pick Model Elements - This node offers a pick method for selecting elements in Revit., PipeInsulation.Create - This will add insulation to the input pipes. Can only handle one type of insulation and size for now., PostableCommand.CloseHiddenWindows - This will close the hidden windows in your current Revit document., PostableCommand.Default3DView - This will set the active view as the default (little house) 3D view., PostableCommand.ReplicateWindow - Does what is says. Creates another instance of the same window you have open., Railing.BalusterCount - This node will count the amout of balusters in a rail element. Only works for single element for now., ReferencePlane.ByStartPointEndPointActiveViewVector - This will create a reference plane by the given start point, end point and active view vector. If you want to use multiple points as input you need to use List@Level with level 1 for both inputs., RemoveListFromList - This node essentially \"subtracts\" the contents of List B from List A to produce a new list with the unique items., Rhythm.3DRoomTags - This node will generate 3D room tags for all rooms in the model. (RFA in extra folder in Dynamo download), Rhythm.3DSpaceTags - This will generate 3D space tags for all spaces in the project., Rhythm.BackupRFADeleter - This node will scan the contents of a driectory and delete backup RFA files that appear with a four digit backup number before the file extension. (eg. Family1.0001.rfa) This is deleting files so please use with caution!, Rhythm.DatePicker - This provides a popup date selector for the user., Rhythm.Detail Number by View Name  - Automatically numbers your detail number based on the first two characters of your view name. i.e. A4/... (Requires slash to be present), Rhythm.IntegerSlider - Provides an integer slider for the dynamo player. Has min, max and description., Rhythm.MassOSMData - This node will mass the OSM data based upon the know heights. If the building doesn't have a height, it will just output the polygon., Rhythm.OverrideInteriorCrop - This node will override the lineweight of the crop region on interior elevations. This node would not be possible without the power of the Dynamo community. Specifically Danny Jones with Clark Patterson Lee., Rhythm.PercentGlazingByOrientation - This node was show at RTCNA2015 to optimize your workflows. It reports the window to wall % by direction the wall faces., Rhythm.RenumberGridsByCurve - This node will renumber grids in order of curve drawn through them. Select either letters or numbers. (Alphanumeric coming soon), Rhythm.RenumberRoomsByCurve - This node will renumber rooms along a curve path. This was developed through the guidance of WIlliam Wong at case. Considering WeWork bought Case I wanted this node to live somewhere., Rhythm.TextBoxInput - Provides a text box input for users. Allows for multiple strings if needed., Rhythm.Toggle - Toggle that offers two outputs. Created for Dynamo 0.8.1 because of changes to the \"IF\" node, Rhythm.WhatTheNode - This node will let you search dynamonodes.com for the most likely package a node is from. Helps fix \"red\" nodes when users do not have package installed., Rhythm.YesNoToggle - This provides a toggle to use for graphs with dynamo player. The user chooses if they would like to run the graph., Room Element Collector - THis will collect data regarding rooms in the active model. Similar to Lunchbox node, but this one does not use python., RoomTag.Host - Retrieves the assoicated room with a room tag., Select Elements By Curve - This will select model elements in order that a curve is drawn through them., Select Grids By Curve - This will select Revit grids by the input Revit curve,, SetParameterByName(TypeOrInstance) - Set one of the element's parameters regardless of parameter type or instance., Space.IsPointInside - This will test if a point falls within a space., Space.SetSpaceType - This node will set the space type for the input space., Space.GetSpaceType - This will retrieve the space type of the space as a string., SpaceTag.Host - This obtains the MEP space associated with a given MEP space tag., SpaceType.All - This node will output ALL space types., SpaceType.ByName - This will output a MEP space type based on name search., SquareFeetDropper - This node drops square feet from the pulled area, String.CharacterAtIndex - Get's the character at a given index, String.ElementsModified - THis custom node reports the amount of elements in a list as a phrase., String.FlipReverse - This node flips the string and reverses it. (April Fools '15) Works for 0.8.0 only, added unicode support, String.IndicesOfCharacter - This node gets all the indices of a given character, String.IsUnicode - Determines if input string is a unicode character., String.RemoveAfterGivenCharacter - This will move all characters at and after the given character., String.RemovePriorToCharacter - This will remove all characters prior to the input character. Accepts strings., String.SpecifyDecimalPlaces - This node will take your inout string and number of decimal places to create a new simplified output., String.ToSentenceCase - This node will convert a single string of text to have capitalized sentences. If you need to use this over a list, use List.Map., String.ToTitle - Converts the given string to Title Case., StructuralBeamSystem.Members - Thist will collect the members of the ebeam system., TextElement.ToLower - This node converts a Revit text elemnt to upper directly., TextElement.ToTitle - This node converts a Revit text elemnt to upper directly., TextElement.ToUpper - This node converts a Revit text elemnt to upper directly., UI.ColorPicker - This node allows the user to choose a color via the Revit API color selection dialog., UI.FilePath - Provides a file path option for use with Dynamo Player., UI.UserMessage - This will display a user message once. Until it is either toggled or changed., Unicode.LRE - Start of left-to-right embedding Unicode Character, Unicode.LRM - Left-to-right mark unicode character, Unicode.RLE - Start of right-to-left embedding Unicode Character, Unicode.RLM - Right-to-left mark Unicode character, Unicode.ZWJ - Zero width joiner Unicode Character, Unicode.ZWNJ - Zero width non-joiner Unicode Character, View.ConvertToIndependent - This will convert input dependent views to independent. Thanks to TheRevitKid for the idea!, View3D.SetSectionBox - This will set a views section box giving a bounding box., ViewFamilyType.ByName - Select a view family type given it's name., Viewport.GetBoxOutline - This will retrieve the bounding box of  the viewport on a sheet. Not including the view title., Viewport.ViewName - This node gets the view name of viewports. There is an issue when \"title on sheet\" is used, so this fixes that., Wall.NorthSouthEastWest - This node determines which direction a wall is facing and groups them by the direction or direction they are closest to., Workset.Create - Creates a workset or worksets from input names., ReferencePlane.GetCurvesInView - This will obtain the geometric curves of the reference plane in a given view.",
            "engine_metadata": "",
            "engine_version": "1.2.1.3083",
            "created": "2017-03-10T22:19:53.374Z",
            "full_dependency_versions": [ "2017.3.10" ],
            "full_dependency_ids": [
              {
                "_id": "54e7add1dcee4dfd26000101",
                "name": "Rhythm"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2017.3.10"
          },
          {
            "_id": "58d28d0bf4db78ec01000155",
            "contains_binaries": true,
            "node_libraries": [ "RhythmUI, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-prod/a8417c18-816b-479c-82aa-9a6216139d6cgregPkg323.zip",
            "contents": "AdaptiveComponent.PlacementPoints - This node retrieves the adaptive components points., All Elements of Type in Document - All elements of given type in specified document. This works for unopened files and for linked documents., All Framing at Reference Level - Collects all of the structural framing at a specific reference level, All Pipes at Reference Level - This will collect all pipes by their reference level., All Upper - This converts the ase of selected items to UPPER. Inputs require booleans to enable for category., Arrowhead Assigner - This node assings the arrowhead type for all text and keynote tags. There is an input for ones you want to exclude., Ayuda.IsArchi-LabInstalled - This node determines if Archi-Lab is installed. Useful with a toggle., Ayuda.IsClockworkInstalled - This node determines if clockwork is installed. Useful with a toggle., Ayuda.IsSteamNodesInstalled - This node determines if steamnodes is installed. Useful with a toggle.;, Ayuda.ThisOrThat - This node is a toggle between two inputs., BasicFileInfo.SavedInVersion - This will supply the version that the revit model is saved in., CableTray.Space - This node will determine the space a cable tray's center falls within., Collector.Areas - This is an area collector element that utilizes mostly OOTB nodes., Collector.DuctsBySystem - This collects all ducts in the project and organizes them by System Classification, Collector.KeynoteTags - This collects all of the keynote tags in the model. Similar to other nodes, but this doesn't use python., Collector.LabelTypes - This node collects all of the label types for the active family document., Collector.PipesBySystem - This collects all pipes in the project and organizes them by System Classification, Collector.TagTypes - This node collects the tag types in the model., Collector.Viewports - This collects all of the viewports in the model and outputs the name, title on sheet, scale and viewport type., CurtainGrid.AllSegmentCurves - This will return the vertical and horizontal curtain grid segments regardless if hidden or not. Groups by U and V., CurtainGrid.ByElement - Gets the curtain grids by the host element. Seperates into U and V, CurtainGrid.ExistingSegmentCurves - Retrieve all the existing segment curves of the grid line.  Groups by U and V., CurtainGrid.FullCurve - Returns the curves of the input curtain grids. Groups by U and V., CurtainGrid.RemoveSegment - Removes segments from curtain grids. Can't take lists yet. Use with List.Combine., CurtainGrid.RemoveSegmentsFunction - Function to apply to remove segments node, CurtainGrid.SkippedSegmentCurves - Retrieve all the removed segment curves of the grid line. , Curve.FromLine - This will translate a line element to a curve., Dash Remover - This node removes the dash at index 2 if it exists. The reason being, NCS states that no dash shall be used., Dimension.IsOverridden - This will report if a dimension has been overridden. , Dimension.LeaderEndPosition - This will return the leader end postion as a point., Dimension.MultiSegmentMembers - This will output all of the members of a multi-segment dimension., Dimension.NumberOfSegments - This will return the number of segments a dimension has. If it is a single dimension, this will return zero., Dimension.Origin - This will return the dimension origin as a point., Dimension.SetAboveValue - This will set the above value of a dimension., Dimension.SetBelowValue - This will set the below value of a dimension., Dimension.TextPosition - This will return the postition of the text as a point., Dimension.ValueString - The displayed value shown for the dimension segment. , Document.BackgroundOpen - This will open the input Revit files in the background., Document.Close - This will close the input Revit document. Offers a boolean toggle to save., Document.SetStartingView - This will set the starting view for a given document. ONLY WORKS IN ONE DOCUMENT AT A TIME, DraftingView.CreateInDocument - This will create a new drafting view in the given document. ONLY WORKS FOR ONE DOCUMENT AT A TIME, Element.AreaLocation - This node will determine what area (area plans) an element is located within. Made possible thanks to clockwork. :), Element.AreaWithTotal - This will get the area of an element if the parameter exists. Will total as well if needed., Element.Category - This node will get the input element(s)' categories, Element.CopyFromDocument - This node allows you to copy elements from a specific document to your current document., Element.CopyFromViewToView - This will copy elements from view to view., Element.GetJoinedElements - This will obtain the elements joined to the input element., Element.GetLevelNameAsString - This retrieves the level name of the input elements as a string. This is in response to a known issue with the get value node., Element.GetMultipleParameterValuesByName - Get the value of multiple parameters from elements. (Seperate parameters with comma), Element.GetParameterValueByName(CaSe iNSeNSiTive) - Get the value of one of the element's parameters. (CaSe iNSeNSiTiVe), Element.IsPhaseCreatedValid - This will determine if the input phase is the correct one for the input elements, Element.OverrideCutColorInView - Overrides the elements cut color in the view., Element.OverrideCutLineweight - Overrides the cut lines of the elements, Element.OverrideProjectionFillColor - This node overrides the fill color of the element in view., Element.OverrideProjectionLineColor - This node overrides the projection line color with the input color value. Useful for annotation., Element.OverrideProjectionLineweight - Overrides the line thickness of projection lines, Element.ParentFamily - This node retrieces the parent family name for each input element., Element.Room - This node takes the input of all elements of category and reports back the associated room per element. Currently tested with casework, furniture and plumbing fixtures., Element.SetMultipleParametersByName - Set multiple (comma seperated) parameters by name., Element.SetParameterByName(CaSe iNSeNSiTiVe) - Set one of the element's parameters. (CaSe iNSeNSiTiVe), Element.SetPinnedStatus - Will set the element to either pinned or not pinned. True is pinned, false is unpinned. For multiple elements use List.Map, Element.Space - This will retrieve the space in which an element is contained. (if available), Element.Type - This retrieves the element type of the given elements. (if available) Similar to others available but no python here., Geometry.SpaceEvenlyWithBuffer - This will take input geometry and space it out in the Y direction with a buffer between, Geometry.ToRevitType - This will convert designscript geometyr into Revit.DB types. Currently tested with curves, nurbs curves and solids., GetParameterValueByName(TypeOrInstance) - Gets a parameter value by name regardless of type or instance., GetParameterValueByNameAsString - Returns paramter value as string. Same effect as lunchbox node, without python., Gmail.ComposeEmail - This node will compose a new email. Useful for notifications regarding a graph concluding. Uses pythons built-in SMTP Library., Gmail.ComposeEmailDetailed - This will compose a detailed email with subject and message., Group.UngroupElements - This will ungroup the input groups and output their elements. Use with care!, Inspiration.BuffettNode - This is a result of \"what if?\" thinking. The output is a random Warren Buffett quote from brainyquotes.com, Inspiration.CarreyNode - This is a result of \"what if?\" thinking. The output is a random Jim Carrey quote from brainyquotes.com, Inspiration.CashNode - This is a result of \"what if?\" thinking. The output is a random Johnny Cash quote from brainyquotes.com, Inspiration.MarleyNode - This is a result of \"what if?\" thinking. The output is a random Bob Marley quote from brainyquotes.com, Inspiration.SearchQuoteNode - This is a result of \"what if?\" thinking. The output is a random quote based on the search criteria from brainyquotes.com. (As long as it is on the site), Inspiration.TeresaNode - This is a result of \"what if?\" thinking. The output is a random Mother Teresa quote from brainyquotes.com, InteriorElevation.GetCropRegion - This will obtain the crop region from an Interior Elevation View Type., Isolated Pick Model Elements(ordered) - Pick model elements in desired order of a desired category., Isolated Pick Model Elements - This allows a multiple selection of elements of specified category., Level Element Collector - This collects data for all of the Level elements in the model. Similar to the node on Lunchbox, but this one uses all O.O.B. nodes., List.AllIndicesOf - Given an item, returns the zero-based indices of all its occurrences in the list. If the item cannot be found, an empty list is returned. , List.ArchitecturalAlphabeticalSequence - This creates a list of characters. What's different is we typically exclude I's and O's from our characters so there is a toggle for this., List.Contains - Determines if the given list contains the item or items., List.GetItemIndices - This node searches the input list for the given string or number., List.MergeSublists - This will merge all sublists with or without a character between the strings., List.ReturnItemsPreviousToIndex - This will take an index (or indices) and return the items previous to it. Useful for sums of all items previous., Mullion.SortByDirection - This will sort mullions of a host curtain wall by direction they are facing., OS.CurrentUser - This node retrieves the current user logged in., OS.CurrentUserAppData - This retrieves the current user's appdata location, Output.Clean - This will return a single value or list from one input., Parametric Graphic Scale - This node automates the graphic scale assigned per viewport. The input required is all instances of viewport category. It also requires shared parameters. Visit sixtysecondrevit.blogspot.com for details., Pick Model Element - This offers a single selection of a model element. Created for Dynamo Player usage., Pick Model Elements - This node offers a pick method for selecting elements in Revit., PipeInsulation.Create - This will add insulation to the input pipes. Can only handle one type of insulation and size for now., PostableCommand.CloseHiddenWindows - This will close the hidden windows in your current Revit document., PostableCommand.Default3DView - This will set the active view as the default (little house) 3D view., PostableCommand.ReplicateWindow - Does what is says. Creates another instance of the same window you have open., Railing.BalusterCount - This node will count the amout of balusters in a rail element. Only works for single element for now., ReferencePlane.ByStartPointEndPointActiveViewVector - This will create a reference plane by the given start point, end point and active view vector. If you want to use multiple points as input you need to use List@Level with level 1 for both inputs., ReferencePlane.GetCurvesInView - This will obtain the geometric curves of the reference plane in a given view., RemoveListFromList - This node essentially \"subtracts\" the contents of List B from List A to produce a new list with the unique items., Rhythm.3DRoomTags - This node will generate 3D room tags for all rooms in the model. (RFA in extra folder in Dynamo download), Rhythm.3DSpaceTags - This will generate 3D space tags for all spaces in the project., Rhythm.BackupRFADeleter - This node will scan the contents of a driectory and delete backup RFA files that appear with a four digit backup number before the file extension. (eg. Family1.0001.rfa) This is deleting files so please use with caution!, Rhythm.DatePicker - This provides a popup date selector for the user., Rhythm.Detail Number by View Name  - Automatically numbers your detail number based on the first two characters of your view name. i.e. A4/... (Requires slash to be present), Rhythm.IntegerSlider - Provides an integer slider for the dynamo player. Has min, max and description., Rhythm.MassOSMData - This node will mass the OSM data based upon the know heights. If the building doesn't have a height, it will just output the polygon., Rhythm.OverrideInteriorCrop - This node will override the lineweight of the crop region on interior elevations. This node would not be possible without the power of the Dynamo community. Specifically Danny Jones with Clark Patterson Lee., Rhythm.PercentGlazingByOrientation - This node was show at RTCNA2015 to optimize your workflows. It reports the window to wall % by direction the wall faces., Rhythm.RenumberGridsByCurve - This node will renumber grids in order of curve drawn through them. Select either letters or numbers. (Alphanumeric coming soon), Rhythm.RenumberRoomsByCurve - This node will renumber rooms along a curve path. This was developed through the guidance of WIlliam Wong at case. Considering WeWork bought Case I wanted this node to live somewhere., Rhythm.TextBoxInput - Provides a text box input for users. Allows for multiple strings if needed., Rhythm.Toggle - Toggle that offers two outputs. Created for Dynamo 0.8.1 because of changes to the \"IF\" node, Rhythm.WhatTheNode - This node will let you search dynamonodes.com for the most likely package a node is from. Helps fix \"red\" nodes when users do not have package installed., Rhythm.YesNoToggle - This provides a toggle to use for graphs with dynamo player. The user chooses if they would like to run the graph., Room Element Collector - THis will collect data regarding rooms in the active model. Similar to Lunchbox node, but this one does not use python., RoomTag.Host - Retrieves the assoicated room with a room tag., Select Elements By Curve - This will select model elements in order that a curve is drawn through them., Select Grids By Curve - This will select Revit grids by the input Revit curve,, SetParameterByName(TypeOrInstance) - Set one of the element's parameters regardless of parameter type or instance., Space.IsPointInside - This will test if a point falls within a space., Space.SetSpaceType - This node will set the space type for the input space., Space.GetSpaceType - This will retrieve the space type of the space as a string., SpaceTag.Host - This obtains the MEP space associated with a given MEP space tag., SpaceType.All - This node will output ALL space types., SpaceType.ByName - This will output a MEP space type based on name search., SquareFeetDropper - This node drops square feet from the pulled area, String.CharacterAtIndex - Get's the character at a given index, String.ElementsModified - THis custom node reports the amount of elements in a list as a phrase., String.FlipReverse - This node flips the string and reverses it. (April Fools '15) Works for 0.8.0 only, added unicode support, String.IndicesOfCharacter - This node gets all the indices of a given character, String.IsUnicode - Determines if input string is a unicode character., String.RemoveAfterGivenCharacter - This will move all characters at and after the given character., String.RemovePriorToCharacter - This will remove all characters prior to the input character. Accepts strings., String.SpecifyDecimalPlaces - This node will take your inout string and number of decimal places to create a new simplified output., String.ToSentenceCase - This node will convert a single string of text to have capitalized sentences. If you need to use this over a list, use List.Map., String.ToTitle - Converts the given string to Title Case., StructuralBeamSystem.Members - Thist will collect the members of the ebeam system., TextElement.ToLower - This node converts a Revit text elemnt to upper directly., TextElement.ToTitle - This node converts a Revit text elemnt to upper directly., TextElement.ToUpper - This node converts a Revit text elemnt to upper directly., UI.ColorPicker - This node allows the user to choose a color via the Revit API color selection dialog., UI.FilePath - Provides a file path option for use with Dynamo Player., UI.UserMessage - This will display a user message once. Until it is either toggled or changed., Unicode.LRE - Start of left-to-right embedding Unicode Character, Unicode.LRM - Left-to-right mark unicode character, Unicode.RLE - Start of right-to-left embedding Unicode Character, Unicode.RLM - Right-to-left mark Unicode character, Unicode.ZWJ - Zero width joiner Unicode Character, Unicode.ZWNJ - Zero width non-joiner Unicode Character, View.ConvertToIndependent - This will convert input dependent views to independent. Thanks to TheRevitKid for the idea!, View3D.SetSectionBox - This will set a views section box giving a bounding box., ViewFamilyType.ByName - Select a view family type given it's name., Viewport.GetBoxOutline - This will retrieve the bounding box of  the viewport on a sheet. Not including the view title., Viewport.ViewName - This node gets the view name of viewports. There is an issue when \"title on sheet\" is used, so this fixes that., Wall.NorthSouthEastWest - This node determines which direction a wall is facing and groups them by the direction or direction they are closest to., Workset.Create - Creates a workset or worksets from input names.",
            "engine_metadata": "",
            "engine_version": "1.2.1.3083",
            "created": "2017-03-22T14:41:15.925Z",
            "full_dependency_versions": [ "2017.3.22" ],
            "full_dependency_ids": [
              {
                "_id": "54e7add1dcee4dfd26000101",
                "name": "Rhythm"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2017.3.22"
          },
          {
            "_id": "58d29028f4db78ec01000156",
            "contains_binaries": true,
            "node_libraries": [ "RhythmUI, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-prod/822869e0-662f-4e6a-ac5a-f3d14e849b0egregPkg172.zip",
            "contents": "AdaptiveComponent.PlacementPoints - This node retrieves the adaptive components points., All Elements of Type in Document - All elements of given type in specified document. This works for unopened files and for linked documents., All Framing at Reference Level - Collects all of the structural framing at a specific reference level, All Pipes at Reference Level - This will collect all pipes by their reference level., All Upper - This converts the ase of selected items to UPPER. Inputs require booleans to enable for category., Arrowhead Assigner - This node assings the arrowhead type for all text and keynote tags. There is an input for ones you want to exclude., Ayuda.IsArchi-LabInstalled - This node determines if Archi-Lab is installed. Useful with a toggle., Ayuda.IsClockworkInstalled - This node determines if clockwork is installed. Useful with a toggle., Ayuda.IsSteamNodesInstalled - This node determines if steamnodes is installed. Useful with a toggle.;, Ayuda.ThisOrThat - This node is a toggle between two inputs., BasicFileInfo.SavedInVersion - This will supply the version that the revit model is saved in., CableTray.Space - This node will determine the space a cable tray's center falls within., Collector.Areas - This is an area collector element that utilizes mostly OOTB nodes., Collector.DuctsBySystem - This collects all ducts in the project and organizes them by System Classification, Collector.KeynoteTags - This collects all of the keynote tags in the model. Similar to other nodes, but this doesn't use python., Collector.LabelTypes - This node collects all of the label types for the active family document., Collector.PipesBySystem - This collects all pipes in the project and organizes them by System Classification, Collector.TagTypes - This node collects the tag types in the model., Collector.Viewports - This collects all of the viewports in the model and outputs the name, title on sheet, scale and viewport type., CurtainGrid.AllSegmentCurves - This will return the vertical and horizontal curtain grid segments regardless if hidden or not. Groups by U and V., CurtainGrid.ByElement - Gets the curtain grids by the host element. Seperates into U and V, CurtainGrid.ExistingSegmentCurves - Retrieve all the existing segment curves of the grid line.  Groups by U and V., CurtainGrid.FullCurve - Returns the curves of the input curtain grids. Groups by U and V., CurtainGrid.RemoveSegment - Removes segments from curtain grids. Can't take lists yet. Use with List.Combine., CurtainGrid.RemoveSegmentsFunction - Function to apply to remove segments node, CurtainGrid.SkippedSegmentCurves - Retrieve all the removed segment curves of the grid line. , Curve.FromLine - This will translate a line element to a curve., Dash Remover - This node removes the dash at index 2 if it exists. The reason being, NCS states that no dash shall be used., Dimension.IsOverridden - This will report if a dimension has been overridden. , Dimension.LeaderEndPosition - This will return the leader end postion as a point., Dimension.MultiSegmentMembers - This will output all of the members of a multi-segment dimension., Dimension.NumberOfSegments - This will return the number of segments a dimension has. If it is a single dimension, this will return zero., Dimension.Origin - This will return the dimension origin as a point., Dimension.SetAboveValue - This will set the above value of a dimension., Dimension.SetBelowValue - This will set the below value of a dimension., Dimension.TextPosition - This will return the postition of the text as a point., Dimension.ValueString - The displayed value shown for the dimension segment. , Document.BackgroundOpen - This will open the input Revit files in the background., Document.Close - This will close the input Revit document. Offers a boolean toggle to save., Document.SetStartingView - This will set the starting view for a given document. ONLY WORKS IN ONE DOCUMENT AT A TIME, DraftingView.CreateInDocument - This will create a new drafting view in the given document. ONLY WORKS FOR ONE DOCUMENT AT A TIME, Element.AreaLocation - This node will determine what area (area plans) an element is located within. Made possible thanks to clockwork. :), Element.AreaWithTotal - This will get the area of an element if the parameter exists. Will total as well if needed., Element.Category - This node will get the input element(s)' categories, Element.CopyFromDocument - This node allows you to copy elements from a specific document to your current document., Element.CopyFromViewToView - This will copy elements from view to view., Element.GetJoinedElements - This will obtain the elements joined to the input element., Element.GetLevelNameAsString - This retrieves the level name of the input elements as a string. This is in response to a known issue with the get value node., Element.GetMultipleParameterValuesByName - Get the value of multiple parameters from elements. (Seperate parameters with comma), Element.GetParameterValueByName(CaSe iNSeNSiTive) - Get the value of one of the element's parameters. (CaSe iNSeNSiTiVe), Element.IsPhaseCreatedValid - This will determine if the input phase is the correct one for the input elements, Element.OverrideCutColorInView - Overrides the elements cut color in the view., Element.OverrideCutLineweight - Overrides the cut lines of the elements, Element.OverrideProjectionFillColor - This node overrides the fill color of the element in view., Element.OverrideProjectionLineColor - This node overrides the projection line color with the input color value. Useful for annotation., Element.OverrideProjectionLineweight - Overrides the line thickness of projection lines, Element.ParentFamily - This node retrieces the parent family name for each input element., Element.Room - This node takes the input of all elements of category and reports back the associated room per element. Currently tested with casework, furniture and plumbing fixtures., Element.SetMultipleParametersByName - Set multiple (comma seperated) parameters by name., Element.SetParameterByName(CaSe iNSeNSiTiVe) - Set one of the element's parameters. (CaSe iNSeNSiTiVe), Element.SetPinnedStatus - Will set the element to either pinned or not pinned. True is pinned, false is unpinned. For multiple elements use List.Map, Element.Space - This will retrieve the space in which an element is contained. (if available), Element.Type - This retrieves the element type of the given elements. (if available) Similar to others available but no python here., Geometry.SpaceEvenlyWithBuffer - This will take input geometry and space it out in the Y direction with a buffer between, Geometry.ToRevitType - This will convert designscript geometyr into Revit.DB types. Currently tested with curves, nurbs curves and solids., GetParameterValueByName(TypeOrInstance) - Gets a parameter value by name regardless of type or instance., GetParameterValueByNameAsString - Returns paramter value as string. Same effect as lunchbox node, without python., Gmail.ComposeEmail - This node will compose a new email. Useful for notifications regarding a graph concluding. Uses pythons built-in SMTP Library., Gmail.ComposeEmailDetailed - This will compose a detailed email with subject and message., Group.UngroupElements - This will ungroup the input groups and output their elements. Use with care!, Inspiration.BuffettNode - This is a result of \"what if?\" thinking. The output is a random Warren Buffett quote from brainyquotes.com, Inspiration.CarreyNode - This is a result of \"what if?\" thinking. The output is a random Jim Carrey quote from brainyquotes.com, Inspiration.CashNode - This is a result of \"what if?\" thinking. The output is a random Johnny Cash quote from brainyquotes.com, Inspiration.MarleyNode - This is a result of \"what if?\" thinking. The output is a random Bob Marley quote from brainyquotes.com, Inspiration.SearchQuoteNode - This is a result of \"what if?\" thinking. The output is a random quote based on the search criteria from brainyquotes.com. (As long as it is on the site), Inspiration.TeresaNode - This is a result of \"what if?\" thinking. The output is a random Mother Teresa quote from brainyquotes.com, InteriorElevation.GetCropRegion - This will obtain the crop region from an Interior Elevation View Type., Isolated Pick Model Elements(ordered) - Pick model elements in desired order of a desired category., Isolated Pick Model Elements - This allows a multiple selection of elements of specified category., Level Element Collector - This collects data for all of the Level elements in the model. Similar to the node on Lunchbox, but this one uses all O.O.B. nodes., List.AllIndicesOf - Given an item, returns the zero-based indices of all its occurrences in the list. If the item cannot be found, an empty list is returned. , List.ArchitecturalAlphabeticalSequence - This creates a list of characters. What's different is we typically exclude I's and O's from our characters so there is a toggle for this., List.Contains - Determines if the given list contains the item or items., List.GetItemIndices - This node searches the input list for the given string or number., List.MergeSublists - This will merge all sublists with or without a character between the strings., List.ReturnItemsPreviousToIndex - This will take an index (or indices) and return the items previous to it. Useful for sums of all items previous., Mullion.SortByDirection - This will sort mullions of a host curtain wall by direction they are facing., OS.CurrentUser - This node retrieves the current user logged in., OS.CurrentUserAppData - This retrieves the current user's appdata location, Output.Clean - This will return a single value or list from one input., Parametric Graphic Scale - This node automates the graphic scale assigned per viewport. The input required is all instances of viewport category. It also requires shared parameters. Visit sixtysecondrevit.blogspot.com for details., Pick Model Element - This offers a single selection of a model element. Created for Dynamo Player usage., Pick Model Elements - This node offers a pick method for selecting elements in Revit., PipeInsulation.Create - This will add insulation to the input pipes. Can only handle one type of insulation and size for now., PostableCommand.CloseHiddenWindows - This will close the hidden windows in your current Revit document., PostableCommand.Default3DView - This will set the active view as the default (little house) 3D view., PostableCommand.ReplicateWindow - Does what is says. Creates another instance of the same window you have open., Railing.BalusterCount - This node will count the amout of balusters in a rail element. Only works for single element for now., ReferencePlane.ByStartPointEndPointActiveViewVector - This will create a reference plane by the given start point, end point and active view vector. If you want to use multiple points as input you need to use List@Level with level 1 for both inputs., ReferencePlane.GetCurvesInView - This will obtain the geometric curves of the reference plane in a given view., RemoveListFromList - This node essentially \"subtracts\" the contents of List B from List A to produce a new list with the unique items., Rhythm.3DRoomTags - This node will generate 3D room tags for all rooms in the model. (RFA in extra folder in Dynamo download), Rhythm.3DSpaceTags - This will generate 3D space tags for all spaces in the project., Rhythm.BackupRFADeleter - This node will scan the contents of a driectory and delete backup RFA files that appear with a four digit backup number before the file extension. (eg. Family1.0001.rfa) This is deleting files so please use with caution!, Rhythm.DatePicker - This provides a popup date selector for the user., Rhythm.Detail Number by View Name  - Automatically numbers your detail number based on the first two characters of your view name. i.e. A4/... (Requires slash to be present), Rhythm.IntegerSlider - Provides an integer slider for the dynamo player. Has min, max and description., Rhythm.MassOSMData - This node will mass the OSM data based upon the know heights. If the building doesn't have a height, it will just output the polygon., Rhythm.OverrideInteriorCrop - This node will override the lineweight of the crop region on interior elevations. This node would not be possible without the power of the Dynamo community. Specifically Danny Jones with Clark Patterson Lee., Rhythm.PercentGlazingByOrientation - This node was show at RTCNA2015 to optimize your workflows. It reports the window to wall % by direction the wall faces., Rhythm.RenumberGridsByCurve - This node will renumber grids in order of curve drawn through them. Select either letters or numbers. (Alphanumeric coming soon), Rhythm.RenumberRoomsByCurve - This node will renumber rooms along a curve path. This was developed through the guidance of WIlliam Wong at case. Considering WeWork bought Case I wanted this node to live somewhere., Rhythm.TextBoxInput - Provides a text box input for users. Allows for multiple strings if needed., Rhythm.Toggle - Toggle that offers two outputs. Created for Dynamo 0.8.1 because of changes to the \"IF\" node, Rhythm.WhatTheNode - This node will let you search dynamonodes.com for the most likely package a node is from. Helps fix \"red\" nodes when users do not have package installed., Rhythm.YesNoToggle - This provides a toggle to use for graphs with dynamo player. The user chooses if they would like to run the graph., Room Element Collector - THis will collect data regarding rooms in the active model. Similar to Lunchbox node, but this one does not use python., RoomTag.Host - Retrieves the assoicated room with a room tag., Select Elements By Curve - This will select model elements in order that a curve is drawn through them., Select Grids By Curve - This will select Revit grids by the input Revit curve,, SetParameterByName(TypeOrInstance) - Set one of the element's parameters regardless of parameter type or instance., Space.IsPointInside - This will test if a point falls within a space., Space.SetSpaceType - This node will set the space type for the input space., Space.GetSpaceType - This will retrieve the space type of the space as a string., SpaceTag.Host - This obtains the MEP space associated with a given MEP space tag., SpaceType.All - This node will output ALL space types., SpaceType.ByName - This will output a MEP space type based on name search., SquareFeetDropper - This node drops square feet from the pulled area, String.CharacterAtIndex - Get's the character at a given index, String.ElementsModified - THis custom node reports the amount of elements in a list as a phrase., String.FlipReverse - This node flips the string and reverses it. (April Fools '15) Works for 0.8.0 only, added unicode support, String.IndicesOfCharacter - This node gets all the indices of a given character, String.IsUnicode - Determines if input string is a unicode character., String.RemoveAfterGivenCharacter - This will move all characters at and after the given character., String.RemovePriorToCharacter - This will remove all characters prior to the input character. Accepts strings., String.SpecifyDecimalPlaces - This node will take your inout string and number of decimal places to create a new simplified output., String.ToSentenceCase - This node will convert a single string of text to have capitalized sentences. If you need to use this over a list, use List.Map., String.ToTitle - Converts the given string to Title Case., StructuralBeamSystem.Members - Thist will collect the members of the ebeam system., TextElement.ToLower - This node converts a Revit text elemnt to upper directly., TextElement.ToTitle - This node converts a Revit text elemnt to upper directly., TextElement.ToUpper - This node converts a Revit text elemnt to upper directly., UI.ColorPicker - This node allows the user to choose a color via the Revit API color selection dialog., UI.FilePath - Provides a file path option for use with Dynamo Player., UI.UserMessage - This will display a user message once. Until it is either toggled or changed., Unicode.LRE - Start of left-to-right embedding Unicode Character, Unicode.LRM - Left-to-right mark unicode character, Unicode.RLE - Start of right-to-left embedding Unicode Character, Unicode.RLM - Right-to-left mark Unicode character, Unicode.ZWJ - Zero width joiner Unicode Character, Unicode.ZWNJ - Zero width non-joiner Unicode Character, View.ConvertToIndependent - This will convert input dependent views to independent. Thanks to TheRevitKid for the idea!, View3D.SetSectionBox - This will set a views section box giving a bounding box., ViewFamilyType.ByName - Select a view family type given it's name., Viewport.GetBoxOutline - This will retrieve the bounding box of  the viewport on a sheet. Not including the view title., Viewport.ViewName - This node gets the view name of viewports. There is an issue when \"title on sheet\" is used, so this fixes that., Wall.NorthSouthEastWest - This node determines which direction a wall is facing and groups them by the direction or direction they are closest to., Workset.Create - Creates a workset or worksets from input names.",
            "engine_metadata": "",
            "engine_version": "1.2.1.3083",
            "created": "2017-03-22T14:54:32.341Z",
            "full_dependency_versions": [ "2017.3.23" ],
            "full_dependency_ids": [
              {
                "_id": "54e7add1dcee4dfd26000101",
                "name": "Rhythm"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2017.3.23"
          },
          {
            "_id": "58d5267af4db78ec01000178",
            "contains_binaries": true,
            "node_libraries": [ "RhythmUI, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-prod/21cd5e48-64c8-45ce-a773-ba23dde64b44gregPkg613.zip",
            "contents": "AdaptiveComponent.PlacementPoints - This node retrieves the adaptive components points., All Elements of Type in Document - All elements of given type in specified document. This works for unopened files and for linked documents., All Framing at Reference Level - Collects all of the structural framing at a specific reference level, All Pipes at Reference Level - This will collect all pipes by their reference level., All Upper - This converts the ase of selected items to UPPER. Inputs require booleans to enable for category., Arrowhead Assigner - This node assings the arrowhead type for all text and keynote tags. There is an input for ones you want to exclude., Ayuda.IsArchi-LabInstalled - This node determines if Archi-Lab is installed. Useful with a toggle., Ayuda.IsClockworkInstalled - This node determines if clockwork is installed. Useful with a toggle., Ayuda.IsSteamNodesInstalled - This node determines if steamnodes is installed. Useful with a toggle.;, Ayuda.ThisOrThat - This node is a toggle between two inputs., BasicFileInfo.SavedInVersion - This will supply the version that the revit model is saved in., CableTray.Space - This node will determine the space a cable tray's center falls within., Collector.Areas - This is an area collector element that utilizes mostly OOTB nodes., Collector.DuctsBySystem - This collects all ducts in the project and organizes them by System Classification, Collector.KeynoteTags - This collects all of the keynote tags in the model. Similar to other nodes, but this doesn't use python., Collector.LabelTypes - This node collects all of the label types for the active family document., Collector.PipesBySystem - This collects all pipes in the project and organizes them by System Classification, Collector.TagTypes - This node collects the tag types in the model., Collector.Viewports - This collects all of the viewports in the model and outputs the name, title on sheet, scale and viewport type., CurtainGrid.AllSegmentCurves - This will return the vertical and horizontal curtain grid segments regardless if hidden or not. Groups by U and V., CurtainGrid.ByElement - Gets the curtain grids by the host element. Seperates into U and V, CurtainGrid.ExistingSegmentCurves - Retrieve all the existing segment curves of the grid line.  Groups by U and V., CurtainGrid.FullCurve - Returns the curves of the input curtain grids. Groups by U and V., CurtainGrid.RemoveSegment - Removes segments from curtain grids. Can't take lists yet. Use with List.Combine., CurtainGrid.RemoveSegmentsFunction - Function to apply to remove segments node, CurtainGrid.SkippedSegmentCurves - Retrieve all the removed segment curves of the grid line. , Curve.FromLine - This will translate a line element to a curve., Dash Remover - This node removes the dash at index 2 if it exists. The reason being, NCS states that no dash shall be used., Dimension.IsOverridden - This will report if a dimension has been overridden. , Dimension.LeaderEndPosition - This will return the leader end postion as a point., Dimension.MultiSegmentMembers - This will output all of the members of a multi-segment dimension., Dimension.NumberOfSegments - This will return the number of segments a dimension has. If it is a single dimension, this will return zero., Dimension.Origin - This will return the dimension origin as a point., Dimension.SetAboveValue - This will set the above value of a dimension., Dimension.SetBelowValue - This will set the below value of a dimension., Dimension.TextPosition - This will return the postition of the text as a point., Dimension.ValueString - The displayed value shown for the dimension segment. , Document.BackgroundOpen - This will open the input Revit files in the background., Document.Close - This will close the input Revit document. Offers a boolean toggle to save., Document.SetStartingView - This will set the starting view for a given document. ONLY WORKS IN ONE DOCUMENT AT A TIME, DraftingView.CreateInDocument - This will create a new drafting view in the given document. ONLY WORKS FOR ONE DOCUMENT AT A TIME, Element.AreaLocation - This node will determine what area (area plans) an element is located within. Made possible thanks to clockwork. :), Element.AreaWithTotal - This will get the area of an element if the parameter exists. Will total as well if needed., Element.Category - This node will get the input element(s)' categories, Element.CopyFromDocument - This node allows you to copy elements from a specific document to your current document., Element.CopyFromViewToView - This will copy elements from view to view., Element.GetJoinedElements - This will obtain the elements joined to the input element., Element.GetLevelNameAsString - This retrieves the level name of the input elements as a string. This is in response to a known issue with the get value node., Element.GetMultipleParameterValuesByName - Get the value of multiple parameters from elements. (Seperate parameters with comma), Element.GetParameterValueByName(CaSe iNSeNSiTive) - Get the value of one of the element's parameters. (CaSe iNSeNSiTiVe), Element.IsPhaseCreatedValid - This will determine if the input phase is the correct one for the input elements, Element.OverrideCutColorInView - Overrides the elements cut color in the view., Element.OverrideCutLineweight - Overrides the cut lines of the elements, Element.OverrideProjectionFillColor - This node overrides the fill color of the element in view., Element.OverrideProjectionLineColor - This node overrides the projection line color with the input color value. Useful for annotation., Element.OverrideProjectionLineweight - Overrides the line thickness of projection lines, Element.ParentFamily - This node retrieces the parent family name for each input element., Element.Room - This node takes the input of all elements of category and reports back the associated room per element. Currently tested with casework, furniture and plumbing fixtures., Element.SetMultipleParametersByName - Set multiple (comma seperated) parameters by name., Element.SetParameterByName(CaSe iNSeNSiTiVe) - Set one of the element's parameters. (CaSe iNSeNSiTiVe), Element.SetPinnedStatus - Will set the element to either pinned or not pinned. True is pinned, false is unpinned. For multiple elements use List.Map, Element.Space - This will retrieve the space in which an element is contained. (if available), Element.Type - This retrieves the element type of the given elements. (if available) Similar to others available but no python here., Geometry.SpaceEvenlyWithBuffer - This will take input geometry and space it out in the Y direction with a buffer between, Geometry.ToRevitType - This will convert designscript geometyr into Revit.DB types. Currently tested with curves, nurbs curves and solids., GetParameterValueByName(TypeOrInstance) - Gets a parameter value by name regardless of type or instance., GetParameterValueByNameAsString - Returns paramter value as string. Same effect as lunchbox node, without python., Gmail.ComposeEmail - This node will compose a new email. Useful for notifications regarding a graph concluding. Uses pythons built-in SMTP Library., Gmail.ComposeEmailDetailed - This will compose a detailed email with subject and message., Group.UngroupElements - This will ungroup the input groups and output their elements. Use with care!, Inspiration.BuffettNode - This is a result of \"what if?\" thinking. The output is a random Warren Buffett quote from brainyquotes.com, Inspiration.CarreyNode - This is a result of \"what if?\" thinking. The output is a random Jim Carrey quote from brainyquotes.com, Inspiration.CashNode - This is a result of \"what if?\" thinking. The output is a random Johnny Cash quote from brainyquotes.com, Inspiration.MarleyNode - This is a result of \"what if?\" thinking. The output is a random Bob Marley quote from brainyquotes.com, Inspiration.SearchQuoteNode - This is a result of \"what if?\" thinking. The output is a random quote based on the search criteria from brainyquotes.com. (As long as it is on the site), Inspiration.TeresaNode - This is a result of \"what if?\" thinking. The output is a random Mother Teresa quote from brainyquotes.com, InteriorElevation.GetCropRegion - This will obtain the crop region from an Interior Elevation View Type., Isolated Pick Model Elements(ordered) - Pick model elements in desired order of a desired category., Isolated Pick Model Elements - This allows a multiple selection of elements of specified category., Level Element Collector - This collects data for all of the Level elements in the model. Similar to the node on Lunchbox, but this one uses all O.O.B. nodes., List.AllIndicesOf - Given an item, returns the zero-based indices of all its occurrences in the list. If the item cannot be found, an empty list is returned. , List.ArchitecturalAlphabeticalSequence - This creates a list of characters. What's different is we typically exclude I's and O's from our characters so there is a toggle for this., List.Contains - Determines if the given list contains the item or items., List.GetItemIndices - This node searches the input list for the given string or number., List.MergeSublists - This will merge all sublists with or without a character between the strings., List.ReturnItemsPreviousToIndex - This will take an index (or indices) and return the items previous to it. Useful for sums of all items previous., Mullion.SortByDirection - This will sort mullions of a host curtain wall by direction they are facing., OS.CurrentUser - This node retrieves the current user logged in., OS.CurrentUserAppData - This retrieves the current user's appdata location, Output.Clean - This will return a single value or list from one input., Parametric Graphic Scale - This node automates the graphic scale assigned per viewport. The input required is all instances of viewport category. It also requires shared parameters. Visit sixtysecondrevit.blogspot.com for details., Pick Model Element - This offers a single selection of a model element. Created for Dynamo Player usage., Pick Model Elements - This node offers a pick method for selecting elements in Revit., PipeInsulation.Create - This will add insulation to the input pipes. Can only handle one type of insulation and size for now., PostableCommand.CloseHiddenWindows - This will close the hidden windows in your current Revit document., PostableCommand.Default3DView - This will set the active view as the default (little house) 3D view., PostableCommand.ReplicateWindow - Does what is says. Creates another instance of the same window you have open., Railing.BalusterCount - This node will count the amout of balusters in a rail element. Only works for single element for now., ReferencePlane.ByStartPointEndPointActiveViewVector - This will create a reference plane by the given start point, end point and active view vector. If you want to use multiple points as input you need to use List@Level with level 1 for both inputs., ReferencePlane.GetCurvesInView - This will obtain the geometric curves of the reference plane in a given view., RemoveListFromList - This node essentially \"subtracts\" the contents of List B from List A to produce a new list with the unique items., Rhythm.3DRoomTags - This node will generate 3D room tags for all rooms in the model. (RFA in extra folder in Dynamo download), Rhythm.3DSpaceTags - This will generate 3D space tags for all spaces in the project., Rhythm.BackupRFADeleter - This node will scan the contents of a driectory and delete backup RFA files that appear with a four digit backup number before the file extension. (eg. Family1.0001.rfa) This is deleting files so please use with caution!, Rhythm.DatePicker - This provides a popup date selector for the user., Rhythm.Detail Number by View Name  - Automatically numbers your detail number based on the first two characters of your view name. i.e. A4/... (Requires slash to be present), Rhythm.IntegerSlider - Provides an integer slider for the dynamo player. Has min, max and description., Rhythm.MassOSMData - This node will mass the OSM data based upon the know heights. If the building doesn't have a height, it will just output the polygon., Rhythm.OverrideInteriorCrop - This node will override the lineweight of the crop region on interior elevations. This node would not be possible without the power of the Dynamo community. Specifically Danny Jones with Clark Patterson Lee., Rhythm.PercentGlazingByOrientation - This node was show at RTCNA2015 to optimize your workflows. It reports the window to wall % by direction the wall faces., Rhythm.RenumberGridsByCurve - This node will renumber grids in order of curve drawn through them. Select either letters or numbers. (Alphanumeric coming soon), Rhythm.RenumberRoomsByCurve - This node will renumber rooms along a curve path. This was developed through the guidance of WIlliam Wong at case. Considering WeWork bought Case I wanted this node to live somewhere., Rhythm.TextBoxInput - Provides a text box input for users. Allows for multiple strings if needed., Rhythm.Toggle - Toggle that offers two outputs. Created for Dynamo 0.8.1 because of changes to the \"IF\" node, Rhythm.WhatTheNode - This node will let you search dynamonodes.com for the most likely package a node is from. Helps fix \"red\" nodes when users do not have package installed., Rhythm.YesNoToggle - This provides a toggle to use for graphs with dynamo player. The user chooses if they would like to run the graph., Room Element Collector - THis will collect data regarding rooms in the active model. Similar to Lunchbox node, but this one does not use python., RoomTag.Host - Retrieves the assoicated room with a room tag., Select Elements By Curve - This will select model elements in order that a curve is drawn through them., Select Grids By Curve - This will select Revit grids by the input Revit curve,, SetParameterByName(TypeOrInstance) - Set one of the element's parameters regardless of parameter type or instance., Space.IsPointInside - This will test if a point falls within a space., Space.SetSpaceType - This node will set the space type for the input space., Space.GetSpaceType - This will retrieve the space type of the space as a string., SpaceTag.Host - This obtains the MEP space associated with a given MEP space tag., SpaceType.All - This node will output ALL space types., SpaceType.ByName - This will output a MEP space type based on name search., SquareFeetDropper - This node drops square feet from the pulled area, String.CharacterAtIndex - Get's the character at a given index, String.ElementsModified - THis custom node reports the amount of elements in a list as a phrase., String.FlipReverse - This node flips the string and reverses it. (April Fools '15) Works for 0.8.0 only, added unicode support, String.IndicesOfCharacter - This node gets all the indices of a given character, String.IsUnicode - Determines if input string is a unicode character., String.RemoveAfterGivenCharacter - This will move all characters at and after the given character., String.RemovePriorToCharacter - This will remove all characters prior to the input character. Accepts strings., String.SpecifyDecimalPlaces - This node will take your inout string and number of decimal places to create a new simplified output., String.ToSentenceCase - This node will convert a single string of text to have capitalized sentences. If you need to use this over a list, use List.Map., String.ToTitle - Converts the given string to Title Case., StructuralBeamSystem.Members - Thist will collect the members of the ebeam system., TextElement.ToLower - This node converts a Revit text elemnt to upper directly., TextElement.ToTitle - This node converts a Revit text elemnt to upper directly., TextElement.ToUpper - This node converts a Revit text elemnt to upper directly., UI.ColorPicker - This node allows the user to choose a color via the Revit API color selection dialog., UI.FilePath - Provides a file path option for use with Dynamo Player., UI.UserMessage - This will display a user message once. Until it is either toggled or changed., Unicode.LRE - Start of left-to-right embedding Unicode Character, Unicode.LRM - Left-to-right mark unicode character, Unicode.RLE - Start of right-to-left embedding Unicode Character, Unicode.RLM - Right-to-left mark Unicode character, Unicode.ZWJ - Zero width joiner Unicode Character, Unicode.ZWNJ - Zero width non-joiner Unicode Character, View.ConvertToIndependent - This will convert input dependent views to independent. Thanks to TheRevitKid for the idea!, View3D.SetSectionBox - This will set a views section box giving a bounding box., ViewFamilyType.ByName - Select a view family type given it's name., Viewport.GetBoxOutline - This will retrieve the bounding box of  the viewport on a sheet. Not including the view title., Viewport.ViewName - This node gets the view name of viewports. There is an issue when \"title on sheet\" is used, so this fixes that., Wall.NorthSouthEastWest - This node determines which direction a wall is facing and groups them by the direction or direction they are closest to., Workset.Create - Creates a workset or worksets from input names.",
            "engine_metadata": "",
            "engine_version": "1.2.1.3083",
            "created": "2017-03-24T14:00:26.995Z",
            "full_dependency_versions": [ "2017.3.24" ],
            "full_dependency_ids": [
              {
                "_id": "54e7add1dcee4dfd26000101",
                "name": "Rhythm"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2017.3.24"
          },
          {
            "_id": "58f1067a19da52d31a00002a",
            "contains_binaries": true,
            "node_libraries": [ "RhythmUI, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-prod/a2c8200b-6c47-480f-a46e-10c3246290fcgregPkg218.zip",
            "contents": "AdaptiveComponent.PlacementPoints - This node retrieves the adaptive components points., All Elements of Type in Document - All elements of given type in specified document. This works for unopened files and for linked documents., All Framing at Reference Level - Collects all of the structural framing at a specific reference level, All Pipes at Reference Level - This will collect all pipes by their reference level., All Upper - This converts the ase of selected items to UPPER. Inputs require booleans to enable for category., Arrowhead Assigner - This node assings the arrowhead type for all text and keynote tags. There is an input for ones you want to exclude., Ayuda.IsArchi-LabInstalled - This node determines if Archi-Lab is installed. Useful with a toggle., Ayuda.IsClockworkInstalled - This node determines if clockwork is installed. Useful with a toggle., Ayuda.IsSteamNodesInstalled - This node determines if steamnodes is installed. Useful with a toggle.;, Ayuda.ThisOrThat - This node is a toggle between two inputs., BasicFileInfo.SavedInVersion - This will supply the version that the revit model is saved in., CableTray.Space - This node will determine the space a cable tray's center falls within., Collector.Areas - This is an area collector element that utilizes mostly OOTB nodes., Collector.DuctsBySystem - This collects all ducts in the project and organizes them by System Classification, Collector.KeynoteTags - This collects all of the keynote tags in the model. Similar to other nodes, but this doesn't use python., Collector.LabelTypes - This node collects all of the label types for the active family document., Collector.PipesBySystem - This collects all pipes in the project and organizes them by System Classification, Collector.TagTypes - This node collects the tag types in the model., Collector.Viewports - This collects all of the viewports in the model and outputs the name, title on sheet, scale and viewport type., CurtainGrid.AllSegmentCurves - This will return the vertical and horizontal curtain grid segments regardless if hidden or not. Groups by U and V., CurtainGrid.ByElement - Gets the curtain grids by the host element. Seperates into U and V, CurtainGrid.ExistingSegmentCurves - Retrieve all the existing segment curves of the grid line.  Groups by U and V., CurtainGrid.FullCurve - Returns the curves of the input curtain grids. Groups by U and V., CurtainGrid.RemoveSegment - Removes segments from curtain grids. Can't take lists yet. Use with List.Combine., CurtainGrid.RemoveSegmentsFunction - Function to apply to remove segments node, CurtainGrid.SkippedSegmentCurves - Retrieve all the removed segment curves of the grid line. , Curve.FromLine - This will translate a line element to a curve., Dash Remover - This node removes the dash at index 2 if it exists. The reason being, NCS states that no dash shall be used., Dimension.IsOverridden - This will report if a dimension has been overridden. , Dimension.LeaderEndPosition - This will return the leader end postion as a point., Dimension.MultiSegmentMembers - This will output all of the members of a multi-segment dimension., Dimension.NumberOfSegments - This will return the number of segments a dimension has. If it is a single dimension, this will return zero., Dimension.Origin - This will return the dimension origin as a point., Dimension.SetAboveValue - This will set the above value of a dimension., Dimension.SetBelowValue - This will set the below value of a dimension., Dimension.TextPosition - This will return the postition of the text as a point., Dimension.ValueString - The displayed value shown for the dimension segment. , Document.BackgroundOpen - This will open the input Revit files in the background., Document.Close - This will close the input Revit document. Offers a boolean toggle to save., Document.SetStartingView - This will set the starting view for a given document. ONLY WORKS IN ONE DOCUMENT AT A TIME, DraftingView.CreateInDocument - This will create a new drafting view in the given document. ONLY WORKS FOR ONE DOCUMENT AT A TIME, Element.AreaLocation - This node will determine what area (area plans) an element is located within. Made possible thanks to clockwork. :), Element.AreaWithTotal - This will get the area of an element if the parameter exists. Will total as well if needed., Element.Category - This node will get the input element(s)' categories, Element.CopyFromDocument - This node allows you to copy elements from a specific document to your current document., Element.CopyFromViewToView - This will copy elements from view to view., Element.GetJoinedElements - This will obtain the elements joined to the input element., Element.GetLevelNameAsString - This retrieves the level name of the input elements as a string. This is in response to a known issue with the get value node., Element.GetMultipleParameterValuesByName - Get the value of multiple parameters from elements. (Seperate parameters with comma), Element.GetParameterValueByName(CaSe iNSeNSiTive) - Get the value of one of the element's parameters. (CaSe iNSeNSiTiVe), Element.IsPhaseCreatedValid - This will determine if the input phase is the correct one for the input elements, Element.OverrideCutColorInView - Overrides the elements cut color in the view., Element.OverrideCutLineweight - Overrides the cut lines of the elements, Element.OverrideProjectionFillColor - This node overrides the fill color of the element in view., Element.OverrideProjectionLineColor - This node overrides the projection line color with the input color value. Useful for annotation., Element.OverrideProjectionLineweight - Overrides the line thickness of projection lines, Element.ParentFamily - This node retrieces the parent family name for each input element., Element.Room - This node takes the input of all elements of category and reports back the associated room per element. Currently tested with casework, furniture and plumbing fixtures., Element.SetMultipleParametersByName - Set multiple (comma seperated) parameters by name., Element.SetParameterByName(CaSe iNSeNSiTiVe) - Set one of the element's parameters. (CaSe iNSeNSiTiVe), Element.SetPinnedStatus - Will set the element to either pinned or not pinned. True is pinned, false is unpinned. For multiple elements use List.Map, Element.Space - This will retrieve the space in which an element is contained. (if available), Element.Type - This retrieves the element type of the given elements. (if available) Similar to others available but no python here., Geometry.SpaceEvenlyWithBuffer - This will take input geometry and space it out in the Y direction with a buffer between, Geometry.ToRevitType - This will convert designscript geometyr into Revit.DB types. Currently tested with curves, nurbs curves and solids., GetParameterValueByName(TypeOrInstance) - Gets a parameter value by name regardless of type or instance., GetParameterValueByNameAsString - Returns paramter value as string. Same effect as lunchbox node, without python., Gmail.ComposeEmail - This node will compose a new email. Useful for notifications regarding a graph concluding. Uses pythons built-in SMTP Library., Gmail.ComposeEmailDetailed - This will compose a detailed email with subject and message., Group.UngroupElements - This will ungroup the input groups and output their elements. Use with care!, Inspiration.BuffettNode - This is a result of \"what if?\" thinking. The output is a random Warren Buffett quote from brainyquotes.com, Inspiration.CarreyNode - This is a result of \"what if?\" thinking. The output is a random Jim Carrey quote from brainyquotes.com, Inspiration.CashNode - This is a result of \"what if?\" thinking. The output is a random Johnny Cash quote from brainyquotes.com, Inspiration.MarleyNode - This is a result of \"what if?\" thinking. The output is a random Bob Marley quote from brainyquotes.com, Inspiration.SearchQuoteNode - This is a result of \"what if?\" thinking. The output is a random quote based on the search criteria from brainyquotes.com. (As long as it is on the site), Inspiration.TeresaNode - This is a result of \"what if?\" thinking. The output is a random Mother Teresa quote from brainyquotes.com, InteriorElevation.GetCropRegion - This will obtain the crop region from an Interior Elevation View Type., Isolated Pick Model Elements(ordered) - Pick model elements in desired order of a desired category., Isolated Pick Model Elements - This allows a multiple selection of elements of specified category., Level Element Collector - This collects data for all of the Level elements in the model. Similar to the node on Lunchbox, but this one uses all O.O.B. nodes., List.AllIndicesOf - Given an item, returns the zero-based indices of all its occurrences in the list. If the item cannot be found, an empty list is returned. , List.ArchitecturalAlphabeticalSequence - This creates a list of characters. What's different is we typically exclude I's and O's from our characters so there is a toggle for this., List.Contains - Determines if the given list contains the item or items., List.GetItemIndices - This node searches the input list for the given string or number., List.MergeSublists - This will merge all sublists with or without a character between the strings., List.ReturnItemsPreviousToIndex - This will take an index (or indices) and return the items previous to it. Useful for sums of all items previous., Mullion.SortByDirection - This will sort mullions of a host curtain wall by direction they are facing., OS.CurrentUser - This node retrieves the current user logged in., OS.CurrentUserAppData - This retrieves the current user's appdata location, Output.Clean - This will return a single value or list from one input., Parametric Graphic Scale - This node automates the graphic scale assigned per viewport. The input required is all instances of viewport category. It also requires shared parameters. Visit sixtysecondrevit.blogspot.com for details., Pick Model Element - This offers a single selection of a model element. Created for Dynamo Player usage., Pick Model Elements - This node offers a pick method for selecting elements in Revit., PipeInsulation.Create - This will add insulation to the input pipes. Can only handle one type of insulation and size for now., PostableCommand.CloseHiddenWindows - This will close the hidden windows in your current Revit document., PostableCommand.Default3DView - This will set the active view as the default (little house) 3D view., PostableCommand.ReplicateWindow - Does what is says. Creates another instance of the same window you have open., Railing.BalusterCount - This node will count the amout of balusters in a rail element. Only works for single element for now., ReferencePlane.ByStartPointEndPointActiveViewVector - This will create a reference plane by the given start point, end point and active view vector. If you want to use multiple points as input you need to use List@Level with level 1 for both inputs., ReferencePlane.GetCurvesInView - This will obtain the geometric curves of the reference plane in a given view., RemoveListFromList - This node essentially \"subtracts\" the contents of List B from List A to produce a new list with the unique items., Rhythm.3DRoomTags - This node will generate 3D room tags for all rooms in the model. (RFA in extra folder in Dynamo download), Rhythm.3DSpaceTags - This will generate 3D space tags for all spaces in the project., Rhythm.BackupRFADeleter - This node will scan the contents of a driectory and delete backup RFA files that appear with a four digit backup number before the file extension. (eg. Family1.0001.rfa) This is deleting files so please use with caution!, Rhythm.DatePicker - This provides a popup date selector for the user., Rhythm.Detail Number by View Name  - Automatically numbers your detail number based on the first two characters of your view name. i.e. A4/... (Requires slash to be present), Rhythm.IntegerSlider - Provides an integer slider for the dynamo player. Has min, max and description., Rhythm.MassOSMData - This node will mass the OSM data based upon the know heights. If the building doesn't have a height, it will just output the polygon., Rhythm.OverrideInteriorCrop - This node will override the lineweight of the crop region on interior elevations. This node would not be possible without the power of the Dynamo community. Specifically Danny Jones with Clark Patterson Lee., Rhythm.PercentGlazingByOrientation - This node was show at RTCNA2015 to optimize your workflows. It reports the window to wall % by direction the wall faces., Rhythm.RenumberGridsByCurve - This node will renumber grids in order of curve drawn through them. Select either letters or numbers. (Alphanumeric coming soon), Rhythm.RenumberRoomsByCurve - This node will renumber rooms along a curve path. This was developed through the guidance of WIlliam Wong at case. Considering WeWork bought Case I wanted this node to live somewhere., Rhythm.TextBoxInput - Provides a text box input for users. Allows for multiple strings if needed., Rhythm.Toggle - Toggle that offers two outputs. Created for Dynamo 0.8.1 because of changes to the \"IF\" node, Rhythm.WhatTheNode - This node will let you search dynamonodes.com for the most likely package a node is from. Helps fix \"red\" nodes when users do not have package installed., Rhythm.YesNoToggle - This provides a toggle to use for graphs with dynamo player. The user chooses if they would like to run the graph., Room Element Collector - THis will collect data regarding rooms in the active model. Similar to Lunchbox node, but this one does not use python., RoomTag.Host - Retrieves the assoicated room with a room tag., Select Elements By Curve - This will select model elements in order that a curve is drawn through them., Select Grids By Curve - This will select Revit grids by the input Revit curve,, SetParameterByName(TypeOrInstance) - Set one of the element's parameters regardless of parameter type or instance., Space.IsPointInside - This will test if a point falls within a space., Space.SetSpaceType - This node will set the space type for the input space., Space.GetSpaceType - This will retrieve the space type of the space as a string., SpaceTag.Host - This obtains the MEP space associated with a given MEP space tag., SpaceType.All - This node will output ALL space types., SpaceType.ByName - This will output a MEP space type based on name search., SquareFeetDropper - This node drops square feet from the pulled area, String.CharacterAtIndex - Get's the character at a given index, String.ElementsModified - THis custom node reports the amount of elements in a list as a phrase., String.FlipReverse - This node flips the string and reverses it. (April Fools '15) Works for 0.8.0 only, added unicode support, String.IndicesOfCharacter - This node gets all the indices of a given character, String.IsUnicode - Determines if input string is a unicode character., String.RemoveAfterGivenCharacter - This will move all characters at and after the given character., String.RemovePriorToCharacter - This will remove all characters prior to the input character. Accepts strings., String.SpecifyDecimalPlaces - This node will take your inout string and number of decimal places to create a new simplified output., String.ToSentenceCase - This node will convert a single string of text to have capitalized sentences. If you need to use this over a list, use List.Map., String.ToTitle - Converts the given string to Title Case., StructuralBeamSystem.Members - Thist will collect the members of the ebeam system., TextElement.ToLower - This node converts a Revit text elemnt to upper directly., TextElement.ToTitle - This node converts a Revit text elemnt to upper directly., TextElement.ToUpper - This node converts a Revit text elemnt to upper directly., UI.ColorPicker - This node allows the user to choose a color via the Revit API color selection dialog., UI.FilePath - Provides a file path option for use with Dynamo Player., UI.UserMessage - This will display a user message once. Until it is either toggled or changed., Unicode.LRE - Start of left-to-right embedding Unicode Character, Unicode.LRM - Left-to-right mark unicode character, Unicode.RLE - Start of right-to-left embedding Unicode Character, Unicode.RLM - Right-to-left mark Unicode character, Unicode.ZWJ - Zero width joiner Unicode Character, Unicode.ZWNJ - Zero width non-joiner Unicode Character, View.ConvertToIndependent - This will convert input dependent views to independent. Thanks to TheRevitKid for the idea!, View3D.SetSectionBox - This will set a views section box giving a bounding box., ViewFamilyType.ByName - Select a view family type given it's name., Viewport.GetBoxOutline - This will retrieve the bounding box of  the viewport on a sheet. Not including the view title., Viewport.ViewName - This node gets the view name of viewports. There is an issue when \"title on sheet\" is used, so this fixes that., Wall.NorthSouthEastWest - This node determines which direction a wall is facing and groups them by the direction or direction they are closest to., Workset.Create - Creates a workset or worksets from input names., Collector.ModelGroupByName - This will collect all instances of a model group by given name., Element.OverrideProjectionLineweightInView - This will override a projection lineweight of an element in a given view., List.RestoreList - This will restore the list to it's original indentation.",
            "engine_metadata": "",
            "engine_version": "1.3.0.875",
            "created": "2017-04-14T17:27:22.178Z",
            "full_dependency_versions": [ "2017.4.14" ],
            "full_dependency_ids": [
              {
                "_id": "54e7add1dcee4dfd26000101",
                "name": "Rhythm"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2017.4.14"
          },
          {
            "_id": "58f61aa019da52d31a000041",
            "contains_binaries": true,
            "node_libraries": [ "RhythmUI, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-prod/7ebf8a31-16ba-4ef6-870b-887e74b1a008gregPkg681.zip",
            "contents": "Dimension.UsesProjectSettings - This will determine if a dimension uses project settings., AdaptiveComponent.PlacementPoints - This node retrieves the adaptive components points., All Elements of Type in Document - All elements of given type in specified document. This works for unopened files and for linked documents., All Framing at Reference Level - Collects all of the structural framing at a specific reference level, All Pipes at Reference Level - This will collect all pipes by their reference level., All Upper - This converts the ase of selected items to UPPER. Inputs require booleans to enable for category., Arrowhead Assigner - This node assings the arrowhead type for all text and keynote tags. There is an input for ones you want to exclude., Ayuda.IsArchi-LabInstalled - This node determines if Archi-Lab is installed. Useful with a toggle., Ayuda.IsClockworkInstalled - This node determines if clockwork is installed. Useful with a toggle., Ayuda.IsSteamNodesInstalled - This node determines if steamnodes is installed. Useful with a toggle.;, Ayuda.ThisOrThat - This node is a toggle between two inputs., BasicFileInfo.SavedInVersion - This will supply the version that the revit model is saved in., CableTray.Space - This node will determine the space a cable tray's center falls within., Collector.Areas - This is an area collector element that utilizes mostly OOTB nodes., Collector.DuctsBySystem - This collects all ducts in the project and organizes them by System Classification, Collector.KeynoteTags - This collects all of the keynote tags in the model. Similar to other nodes, but this doesn't use python., Collector.LabelTypes - This node collects all of the label types for the active family document., Collector.ModelGroupByName - This will collect all instances of a model group by given name., Collector.PipesBySystem - This collects all pipes in the project and organizes them by System Classification, Collector.TagTypes - This node collects the tag types in the model., Collector.Viewports - This collects all of the viewports in the model and outputs the name, title on sheet, scale and viewport type., CurtainGrid.AllSegmentCurves - This will return the vertical and horizontal curtain grid segments regardless if hidden or not. Groups by U and V., CurtainGrid.ByElement - Gets the curtain grids by the host element. Seperates into U and V, CurtainGrid.ExistingSegmentCurves - Retrieve all the existing segment curves of the grid line.  Groups by U and V., CurtainGrid.FullCurve - Returns the curves of the input curtain grids. Groups by U and V., CurtainGrid.RemoveSegment - Removes segments from curtain grids. Can't take lists yet. Use with List.Combine., CurtainGrid.RemoveSegmentsFunction - Function to apply to remove segments node, CurtainGrid.SkippedSegmentCurves - Retrieve all the removed segment curves of the grid line. , Curve.FromLine - This will translate a line element to a curve., Dash Remover - This node removes the dash at index 2 if it exists. The reason being, NCS states that no dash shall be used., Dimension.IsOverridden - This will report if a dimension has been overridden. , Dimension.LeaderEndPosition - This will return the leader end postion as a point., Dimension.MultiSegmentMembers - This will output all of the members of a multi-segment dimension., Dimension.NumberOfSegments - This will return the number of segments a dimension has. If it is a single dimension, this will return zero., Dimension.Origin - This will return the dimension origin as a point., Dimension.SetAboveValue - This will set the above value of a dimension., Dimension.SetBelowValue - This will set the below value of a dimension., Dimension.TextPosition - This will return the postition of the text as a point., Dimension.ValueString - The displayed value shown for the dimension segment. , Document.BackgroundOpen - This will open the input Revit files in the background., Document.Close - This will close the input Revit document. Offers a boolean toggle to save., Document.SetStartingView - This will set the starting view for a given document. ONLY WORKS IN ONE DOCUMENT AT A TIME, DraftingView.CreateInDocument - This will create a new drafting view in the given document. ONLY WORKS FOR ONE DOCUMENT AT A TIME, Element.AreaLocation - This node will determine what area (area plans) an element is located within. Made possible thanks to clockwork. :), Element.AreaWithTotal - This will get the area of an element if the parameter exists. Will total as well if needed., Element.Category - This node will get the input element(s)' categories, Element.CopyFromDocument - This node allows you to copy elements from a specific document to your current document., Element.CopyFromViewToView - This will copy elements from view to view., Element.GetJoinedElements - This will obtain the elements joined to the input element., Element.GetLevelNameAsString - This retrieves the level name of the input elements as a string. This is in response to a known issue with the get value node., Element.GetMultipleParameterValuesByName - Get the value of multiple parameters from elements. (Seperate parameters with comma), Element.GetParameterValueByName(CaSe iNSeNSiTive) - Get the value of one of the element's parameters. (CaSe iNSeNSiTiVe), Element.IsPhaseCreatedValid - This will determine if the input phase is the correct one for the input elements, Element.OverrideCutColorInView - Overrides the elements cut color in the view., Element.OverrideCutLineweight - Overrides the cut lines of the elements, Element.OverrideProjectionFillColor - This node overrides the fill color of the element in view., Element.OverrideProjectionLineColor - This node overrides the projection line color with the input color value. Useful for annotation., Element.OverrideProjectionLineweight - Overrides the line thickness of projection lines, Element.OverrideProjectionLineweightInView - This will override a projection lineweight of an element in a given view., Element.ParentFamily - This node retrieces the parent family name for each input element., Element.Room - This node takes the input of all elements of category and reports back the associated room per element. Currently tested with casework, furniture and plumbing fixtures., Element.SetMultipleParametersByName - Set multiple (comma seperated) parameters by name., Element.SetParameterByName(CaSe iNSeNSiTiVe) - Set one of the element's parameters. (CaSe iNSeNSiTiVe), Element.SetPinnedStatus - Will set the element to either pinned or not pinned. True is pinned, false is unpinned. For multiple elements use List.Map, Element.Space - This will retrieve the space in which an element is contained. (if available), Element.Type - This retrieves the element type of the given elements. (if available) Similar to others available but no python here., Geometry.SpaceEvenlyWithBuffer - This will take input geometry and space it out in the Y direction with a buffer between, Geometry.ToRevitType - This will convert designscript geometyr into Revit.DB types. Currently tested with curves, nurbs curves and solids., GetParameterValueByName(TypeOrInstance) - Gets a parameter value by name regardless of type or instance., GetParameterValueByNameAsString - Returns paramter value as string. Same effect as lunchbox node, without python., Gmail.ComposeEmail - This node will compose a new email. Useful for notifications regarding a graph concluding. Uses pythons built-in SMTP Library., Gmail.ComposeEmailDetailed - This will compose a detailed email with subject and message., Group.UngroupElements - This will ungroup the input groups and output their elements. Use with care!, Inspiration.BuffettNode - This is a result of \"what if?\" thinking. The output is a random Warren Buffett quote from brainyquotes.com, Inspiration.CarreyNode - This is a result of \"what if?\" thinking. The output is a random Jim Carrey quote from brainyquotes.com, Inspiration.CashNode - This is a result of \"what if?\" thinking. The output is a random Johnny Cash quote from brainyquotes.com, Inspiration.MarleyNode - This is a result of \"what if?\" thinking. The output is a random Bob Marley quote from brainyquotes.com, Inspiration.SearchQuoteNode - This is a result of \"what if?\" thinking. The output is a random quote based on the search criteria from brainyquotes.com. (As long as it is on the site), Inspiration.TeresaNode - This is a result of \"what if?\" thinking. The output is a random Mother Teresa quote from brainyquotes.com, InteriorElevation.GetCropRegion - This will obtain the crop region from an Interior Elevation View Type., Isolated Pick Model Elements(ordered) - Pick model elements in desired order of a desired category., Isolated Pick Model Elements - This allows a multiple selection of elements of specified category., Level Element Collector - This collects data for all of the Level elements in the model. Similar to the node on Lunchbox, but this one uses all O.O.B. nodes., List.AllIndicesOf - Given an item, returns the zero-based indices of all its occurrences in the list. If the item cannot be found, an empty list is returned. , List.ArchitecturalAlphabeticalSequence - This creates a list of characters. What's different is we typically exclude I's and O's from our characters so there is a toggle for this., List.Contains - Determines if the given list contains the item or items., List.GetItemIndices - This node searches the input list for the given string or number., List.MergeSublists - This will merge all sublists with or without a character between the strings., List.RestoreList - This will restore the list to it's original indentation., List.ReturnItemsPreviousToIndex - This will take an index (or indices) and return the items previous to it. Useful for sums of all items previous., Mullion.SortByDirection - This will sort mullions of a host curtain wall by direction they are facing., OS.CurrentUser - This node retrieves the current user logged in., OS.CurrentUserAppData - This retrieves the current user's appdata location, Output.Clean - This will return a single value or list from one input., Parametric Graphic Scale - This node automates the graphic scale assigned per viewport. The input required is all instances of viewport category. It also requires shared parameters. Visit sixtysecondrevit.blogspot.com for details., Pick Model Element - This offers a single selection of a model element. Created for Dynamo Player usage., Pick Model Elements - This node offers a pick method for selecting elements in Revit., PipeInsulation.Create - This will add insulation to the input pipes. Can only handle one type of insulation and size for now., PostableCommand.CloseHiddenWindows - This will close the hidden windows in your current Revit document., PostableCommand.Default3DView - This will set the active view as the default (little house) 3D view., PostableCommand.ReplicateWindow - Does what is says. Creates another instance of the same window you have open., Railing.BalusterCount - This node will count the amout of balusters in a rail element. Only works for single element for now., ReferencePlane.ByStartPointEndPointActiveViewVector - This will create a reference plane by the given start point, end point and active view vector. If you want to use multiple points as input you need to use List@Level with level 1 for both inputs., ReferencePlane.GetCurvesInView - This will obtain the geometric curves of the reference plane in a given view., RemoveListFromList - This node essentially \"subtracts\" the contents of List B from List A to produce a new list with the unique items., Rhythm.3DRoomTags - This node will generate 3D room tags for all rooms in the model. (RFA in extra folder in Dynamo download), Rhythm.3DSpaceTags - This will generate 3D space tags for all spaces in the project., Rhythm.BackupRFADeleter - This node will scan the contents of a driectory and delete backup RFA files that appear with a four digit backup number before the file extension. (eg. Family1.0001.rfa) This is deleting files so please use with caution!, Rhythm.DatePicker - This provides a popup date selector for the user., Rhythm.Detail Number by View Name  - Automatically numbers your detail number based on the first two characters of your view name. i.e. A4/... (Requires slash to be present), Rhythm.IntegerSlider - Provides an integer slider for the dynamo player. Has min, max and description., Rhythm.MassOSMData - This node will mass the OSM data based upon the know heights. If the building doesn't have a height, it will just output the polygon., Rhythm.OverrideInteriorCrop - This node will override the lineweight of the crop region on interior elevations. This node would not be possible without the power of the Dynamo community. Specifically Danny Jones with Clark Patterson Lee., Rhythm.PercentGlazingByOrientation - This node was show at RTCNA2015 to optimize your workflows. It reports the window to wall % by direction the wall faces., Rhythm.RenumberGridsByCurve - This node will renumber grids in order of curve drawn through them. Select either letters or numbers. (Alphanumeric coming soon), Rhythm.RenumberRoomsByCurve - This node will renumber rooms along a curve path. This was developed through the guidance of WIlliam Wong at case. Considering WeWork bought Case I wanted this node to live somewhere., Rhythm.TextBoxInput - Provides a text box input for users. Allows for multiple strings if needed., Rhythm.Toggle - Toggle that offers two outputs. Created for Dynamo 0.8.1 because of changes to the \"IF\" node, Rhythm.WhatTheNode - This node will let you search dynamonodes.com for the most likely package a node is from. Helps fix \"red\" nodes when users do not have package installed., Rhythm.YesNoToggle - This provides a toggle to use for graphs with dynamo player. The user chooses if they would like to run the graph., Room Element Collector - THis will collect data regarding rooms in the active model. Similar to Lunchbox node, but this one does not use python., RoomTag.Host - Retrieves the assoicated room with a room tag., Select Elements By Curve - This will select model elements in order that a curve is drawn through them., Select Grids By Curve - This will select Revit grids by the input Revit curve,, SetParameterByName(TypeOrInstance) - Set one of the element's parameters regardless of parameter type or instance., Space.IsPointInside - This will test if a point falls within a space., Space.SetSpaceType - This node will set the space type for the input space., Space.GetSpaceType - This will retrieve the space type of the space as a string., SpaceTag.Host - This obtains the MEP space associated with a given MEP space tag., SpaceType.All - This node will output ALL space types., SpaceType.ByName - This will output a MEP space type based on name search., SquareFeetDropper - This node drops square feet from the pulled area, String.CharacterAtIndex - Get's the character at a given index, String.ElementsModified - THis custom node reports the amount of elements in a list as a phrase., String.FlipReverse - This node flips the string and reverses it. (April Fools '15) Works for 0.8.0 only, added unicode support, String.IndicesOfCharacter - This node gets all the indices of a given character, String.IsUnicode - Determines if input string is a unicode character., String.RemoveAfterGivenCharacter - This will move all characters at and after the given character., String.RemovePriorToCharacter - This will remove all characters prior to the input character. Accepts strings., String.SpecifyDecimalPlaces - This node will take your inout string and number of decimal places to create a new simplified output., String.ToSentenceCase - This node will convert a single string of text to have capitalized sentences. If you need to use this over a list, use List.Map., String.ToTitle - Converts the given string to Title Case., StructuralBeamSystem.Members - Thist will collect the members of the ebeam system., TextElement.ToLower - This node converts a Revit text elemnt to upper directly., TextElement.ToTitle - This node converts a Revit text elemnt to upper directly., TextElement.ToUpper - This node converts a Revit text elemnt to upper directly., UI.ColorPicker - This node allows the user to choose a color via the Revit API color selection dialog., UI.FilePath - Provides a file path option for use with Dynamo Player., UI.UserMessage - This will display a user message once. Until it is either toggled or changed., Unicode.LRE - Start of left-to-right embedding Unicode Character, Unicode.LRM - Left-to-right mark unicode character, Unicode.RLE - Start of right-to-left embedding Unicode Character, Unicode.RLM - Right-to-left mark Unicode character, Unicode.ZWJ - Zero width joiner Unicode Character, Unicode.ZWNJ - Zero width non-joiner Unicode Character, View.ConvertToIndependent - This will convert input dependent views to independent. Thanks to TheRevitKid for the idea!, View3D.SetSectionBox - This will set a views section box giving a bounding box., ViewFamilyType.ByName - Select a view family type given it's name., Viewport.GetBoxOutline - This will retrieve the bounding box of  the viewport on a sheet. Not including the view title., Viewport.ViewName - This node gets the view name of viewports. There is an issue when \"title on sheet\" is used, so this fixes that., Wall.NorthSouthEastWest - This node determines which direction a wall is facing and groups them by the direction or direction they are closest to., Workset.Create - Creates a workset or worksets from input names., Collector.PlacedRooms - This will collect placed rooms in current file., DImension.Properties - This will reports some of the available properties of a dimension., Dimension.UsesProjectSettings - This will determine if a dimension uses project settings.",
            "engine_metadata": "",
            "engine_version": "1.3.0.875",
            "created": "2017-04-18T13:54:40.639Z",
            "full_dependency_versions": [ "2017.4.17" ],
            "full_dependency_ids": [
              {
                "_id": "54e7add1dcee4dfd26000101",
                "name": "Rhythm"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2017.4.17"
          }
        ],
        "latest_version_update": "2017-04-18T13:54:40.639Z",
        "num_versions": 120,
        "comments": [ ],
        "num_comments": 0,
        "latest_comment": "1970-01-01T00:00:00.000Z",
        "votes": 2,
        "downloads": 17002,
        "repository_url": "",
        "site_url": "sixtysecondrevit.blogspot.com",
        "banned": false,
        "deprecated": false,
        "group": "Breaking CAD",
        "engine": "dynamo",
        "license": "",
        "used_by": [
          {
            "_id": "555e8bfea8367b98610000b8",
            "name": "Bakery"
          },
          {
            "_id": "55c30c7f662bf0e908000080",
            "name": "MTHV Package"
          },
          {
            "_id": "55f84b9e662bf0e908000188",
            "name": "Ayuda"
          },
          {
            "_id": "56099113662bf0e9080001f8",
            "name": "BNIM Tools"
          },
          {
            "_id": "55842cbaf2ae5a9a070000c2",
            "name": "Zebra"
          },
          {
            "_id": "57a073e2e8d2032d77000015",
            "name": "Convert Arch to Stru Columns"
          },
          {
            "_id": "57b123c44172a48a3500005a",
            "name": "Update all Levels and Grids to New Workset"
          },
          {
            "_id": "57ebcea9b135d45974000031",
            "name": "KC Star"
          },
          {
            "_id": "582ed4885af9f3713d0000b6",
            "name": "BIMSYK"
          },
          {
            "_id": "57dbd203882d868b4200000d",
            "name": "SYKES"
          },
          {
            "_id": "5835897f7332da0d25000003",
            "name": "Summerisle"
          },
          {
            "_id": "582ef5635af9f3713d0000ba",
            "name": "J-Nodes"
          },
          {
            "_id": "5792c16e53514606480000a5",
            "name": "InfraBIM"
          }
        ],
        "num_dependents": 13,
        "description": "Built against Dynamo 1.2.1 and Revit 2017. Rhythm is a set of useful nodes to help your Revit project maintain Rhythm with Dynamo. Rhythm is authored by John Pierson of EvolveLAB, (evolvebim.com) and author of sixtysecondrevit.com. This project was generated initially at DPS Design, (dpsdesign.org). \r\n\r\n*Although these nodes are tested thoroughly we are not responsible for any adverse affects they may have on your file. Make sure you save before running anyone's nodes or graphs. ",
        "maintainers": [
          {
            "_id": "54943e329508c43706000013",
            "username": "j0hnp"
          }
        ],
        "keywords": [ "text", "override", "list", "remove", "documentation", "workset", "select", "dimension", "curtainwall", "open", "document", "copy", "unopened", "background" ],
        "created": "2015-02-20T21:57:37.119Z"
      },

      {
        "_id": "57ddac02882d868b42000012",
        "name": "Clockwork for Dynamo 1.x",
        "__v": 22,
        "white_list": false,
        "versions": [
          {
            "_id": "57ddac02882d868b42000013",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-prod/5c947751-f6b0-4d7b-8616-52bdb4b11ef3gregPkg876.zip",
            "contents": "TurnIntoList - Turns an element (or a nested list) into a flat list",
            "engine_metadata": "",
            "engine_version": "1.0.0.1180",
            "created": "2016-09-17T20:48:02.684Z",
            "full_dependency_versions": [ "1.0.0" ],
            "full_dependency_ids": [
              {
                "_id": "57ddac02882d868b42000012",
                "name": "Clockwork for Dynamo 1.x"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "1.0.0"
          },
          {
            "_id": "57ddac9f882d868b42000014",
            "contains_binaries": true,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-prod/6516e4f1-f3ec-48df-86fe-04d3c0172835gregPkg603.zip",
            "contents": "+1 - Increments a value by 1, -1 - Decrements a value by 1, All Elements of Family Type (Universal) - Unlike the built-in  node, this node retrieves all placed instances of a given loadable *or* system family type, All Families Of Category - Gets all famiies of a given category in the model  (does *not *work for system families), All Family Types Of Category - Gets all family types/symbols of a given category in the model  (does *not *work for system families), All Intersecting Elements Of Category - Finds all elements of a specified category that intersect with a list of vectors, All View-Dependent Family Instances Of Category - Gets all view-dependent family instances in a given view for a given list of categories - useful for finding annotation elements, Angle.ByAngleSum - Computes the missing interior angle of a *planar* polygon based on a given list of all other interior angles. , Angle.ByLawOfCosines - Computes an angle of a triangle using the law of cosines. A is the opposite side of the triangle while B and C are the sides forming the angle., Angle.ByLawOfSines - Determines the angle of a triangle based on the law of sines. (Alpha is the angle opposite side A and beta is the angle opposite side B...), Angle.ExteriorAngle - Computes the exterior angle of a given angle., AngleBisector.ByPoints - Retrieves the vector of an angle bisector at point B based on three points (A, B, C) that define the angle. , Application.Version - Retrieves the name, version and build of the current Revit application., AreaSeparator.FromCurve - Creates area separation lines from geometry curves. , Array.AssociatedFamilyParameter - Returns the associated family parameter of an array label (if any). PLEASE NOTE: This node will only work in a family document!, Assembly.AddMembers - Adds any given elements to a given assembly., Assembly.Disassemble - Disassembles an assembly and returns its members, Assembly.FromElements - Creates an assembly from a list of elements, Assembly.Members - Retrieves the members of an assembly, Assembly.RemoveMembers - Removes any given elements to a given assembly., BoundingBox.ByElement - Gets the bounding box of a Revit element, BoundingBox.ByElements - Retrieves a bounding box for a list of elements, BoundingBox.PerimeterCurvesByNormal - Returns the perimeter curve of a bounding box on a plane determined by a given normal and the centroid of the bounding box, BoundingBox.PerimeterCurvesOnPlane - Returns the perimeter curve of a bounding box on a given plane (assuming that the bounding box and plane intersect), Buckyball.ByOriginAndRadius - Returns all the data necessary for modeling a truncated icosahedron (vertices and struts) as well as the surface area and volume. , BuiltInCategory.ByName - Looks up all the built-in categories based on a given name (or part of a name) of the category. Search is case-insensitive., BuiltInParameter.ByName - Looks up all the built-in parameters based on a given name (or part of a name) of the parameters. Search is case-insensitive., Category.Subcategories - Retrieves all the subcategories for a given category, Cathetus.ByPythagoras - Computes the length of one of the catheti / legs of a right triangle using the Pythagorean Theorem. B is the other leg / cathetus of the triangle while C is the hypotenuse., Character.FromNumber - Converts a number into a character (where 1 = A, 2 = B, ... , 27 = AA, 28 = AB etc.)., Character.ToNumber - Converts an Excel-style character to a number (e.g. A = 1, AA = 27 etc.)., Clipboard.GetFrom - Gets the content of the clipboard. ATTENTION: Will only work with strings., Clipboard.SendTo - Copies a string to the clipboard. , Color.Aqua - Returns the colour aqua., Color.Black - Returns the colour black., Color.Blue - Returns the colour blue., Color.ByWebColor - Creates a color from a given web color (a hex triplet like #FF9900), Color.Fuchsia - Returns the colour fuchsia a.k.a. magenta., Color.Green - Returns the colour green., Color.Grey - Returns the colour grey., Color.GreyscaleByNormalizedValue - Creates a greyscale color based on a normalized value (0 = black, 1 = white), Color.Lime - Returns the colour lime., Color.Maroon - Returns the colour maroon., Color.Navy - Returns the colour navy., Color.Olive - Returns the colour olive., Color.Purple - Returns the colour purple., Color.Red - Returns the colour red., Color.Silver - Returns the colour silver., Color.Teal - Returns the colour teal., Color.White - Returns the colour white., Color.Yellow - Returns the colour yellow., CurtainPanel.HostPanel - Retrieves the host panel of a given curtain panel. This is typcially needed when wanting to access wall elements used as curtain panels., CurtainSystem.ByFace - Creates a curtain system on top of a face. The face typically needs to be the face of a mass surface in Revit., Curve.ClosedLoopThroughPoints - Creates a *closed* loop of curves based on a given list of points, CustomNode.Info - Extracts information from a custom node., DesignOption.DesignOptionSet - Returns the design option set of a given design option, DetailComponent.ByCurve - Places a line-based detail component in a given view, DetailLine.FromCurve - Creates a detail line based on a given curve, Dimension.AssociatedFamilyParameter - Returns the associated family parameter of a dimension label (if any). PLEASE NOTE: This node will only work in a family document!, Dimension.SetType - Changes the dimension type of a given dimension instance to the specified type, DimensionType.Style - Gets the style of a given Revit dimension type, Directory.ContentsAll - Unlike the built-in node Directory.Contents, this node browses a directory recursively and returns all relevant files contained in subfolders as well., DisplayUnit.ToInternalUnit - Converts a value from a given display unit to Revit's internal unit, DividedSurface.AddIntersect - Adds an intersect to a divided surface, DividedSurface.EvaluateGridNodes - Returns UV and XYZ coordinates as well as surface normals for all grid nodes of a given divided surface. Also returns the underlying face., DividedSurface.HorizontalIntersectsByEndpoints - Creates a number of equally spaced horizontal intersects for a divided surface based on the path between between two points. , DividedSurface.HorizontalIntersectsByEndpointsAndFunction - Creates a number of horizontal intersects (levels)for a divided surface based on the path between two points. The spacing of the intersects can be controlled by a function., DividedSurface.VerticalIntersectsByEndpoints - Creates a number of equally spaced vertical intersects for a divided surface based on the path between between two points. You may need to switch start point and end point., DividedSurface.VerticalIntersectsByEndpointsAndFunction - Creates a number of vertical intersects (reference planes) for a divided surface based on the path between between two points. The spacing can be controlled by a function. You may need to switch start point and end point., Document.ActiveViewFromCurrentDocument - Gets the active view of the current document, Document.AddLink - Adds a link to a model to the current document, Document.BuiltInCategories - List all the available BuiltInCategories, Document.BuiltInParameters - List all the available BuiltInParameters, Document.ContainsElementsOfCategory - Checks if family instances of specified categories are present in the model., Document.DesignOptions - Returns all design options in the model, grouped by design option set, Document.IsWorkshared - Returns true if the current project is workshared, Document.LinksAndImports - Gets all linked and imported files in the document. NOTE: Does *not* retrieve linked Revit files., Document.LoadFamily - A very crude implementation of family loading. Will *not* reload an already loaded family of the same name., Document.Phases - Retrieves all phases in the active document in *chronological* order, Document.ProjectInfo - Gets the project information., Document.ProjectPosition - Gets the project's position data relative to the origin. Use the built-in nodes Location.Latitude & Location.Longitude to retrieve latitude and longitude., Document.SaveAs - Saves the active Revit document under the given name., Document.StartingView - Retrieves the starting view of a Project file. Returns null if no starting view is set., Document.SynchronizeWithCentral - Synchronizes a workshared model with the central model., Document.Views - Gets all views in the document - except for 3D view templates (as long as this bug is not fixed: https://github.com/DynamoDS/Dynamo/issues/2970), Document.Worksets - Returns all Worksets in the current document, Door.Rooms - Gets the rooms that are connected by a given door, Element.AllInstances - Retrieves all instances of a given element, Element.AllInstancesAtLevel - Retrieves all instances of an element on a given level, Element.AllViewDependentInstances - Retrieves all instances of a view-dependent element in a given view, Element.Area - Returns the area property of a given element (if that element has such a property), Element.AssociatedFamilyParameters - Returns the associated family parameters of an element in a family (and the respective element parameters). PLEASE NOTE: This node will only work in a family document!, Element.ByID - Gets the Revit element(s) for a list of IDs (or a single ID), Element.ContainsTransparentMaterials - Checks if a given element contains transparent materials., Element.CopyByVector - Copies an element or a list of elements by a given vector., Element.CopyToLevel - Copies an element or a list of elements to a given level. Preserves the element's transform. PLEASE NOTE: This node only works for levels that have at least one view (e.g. floor plan) associated with them., Element.CutGeometry - Adds a solid-solid cut for two model elements (if possible). , Element.ElevationOfHostLevel - Returns the elevation of the level a given element is associated with, Element.ExternalFileReferencePath - Returns the full path of an element's external file reference as as string, Element.FromDynamoSurface - Returns the underlying Revit element of a given face, Element.Group - Retrieves the group an element belongs to (if any), Element.Host - Gets an element's host, Element.ID - Gets the ID(s) for a list of Revit elements (or a single element) - unlike the built-in Element.Id node, this node returns an actual Revit Element ID and *not* a number, Element.Inserts - Gets all the objects inserted into a given element., Element.IsOfCategory - Checks whether an element is of a specified category, Element.IsRelatedToMass - Returns true if an object (wall, roof, floor or curtain system) has been modelled by face and the underlying mass still exists in the project., Element.JoinGeometry - Joins two model elements (if possible). Only works inside the project environment., Element.Level - Gets an element's level, Element.Location - Returns the location of an element as an XYZ (or if it's line-based the start and end point of the line), along with some booleans to help filtering the results. Use this for some element types (e.g. walls or lines) that do not work with the built-in Get Family Instance Location node. , Element.Materials - Retrieves all materials froma given element, Element.Name (Universal) - Gets an element's name (Dynamo's built-in Name nodes don't work for all element types, e.g. worksets...), Element.OverrideTransparencyInView - Overrides the transparency of an element in a given view, Element.OwnerView - Gets the owner view of a given Revit element (if possible), Element.Panels - Retrieves the panels nested in a curtain wall, curtain system or glazed roof., Element.ParameterExists - Checks if an element contains a parameter of a given name, Element.ParameterIsReadOnly - Checks if a parameter of a given element is read-only, Element.PermanentlyIsolateInView - (Permanently) isolates elements in the given view, Element.Phases - Gets the created and demolished phases of an element, Element.ResetOverridesInView - Resets all overrides for an element in a given view, Element.SetMaterialParameterByCategory - Sets a material parameter of a given element to <By Category>, Element.SetName - Gets the name of a given Revit element, Element.SetWorkset - Sets the workset of a given element, Element.TemporarilyIsolateInView - (Temporarily) isolates elements in the given view, Element.Type - Gets the family type of a given element (if applicable). , Element.Workset - Retrieves the workset of a given element, Elements.FilterByName - Retrieves those elements from a collection whose names match the search string, Elements.FilterByParameterValueAndCondition - Keine Beschreibung angegeben, Elements.GroupByHost - Groups a list of Revit elements by their respective hosts (if they have any), Family.IsInPlace - Determines if a family is an in-place family, FamilyDocument.CurrentFamilyType - Retrieves the current family type from the active family document. PLEASE NOTE: This node will only work in a family document!, FamilyDocument.FamilyParameters - Retrieves all family parameters from the active family document. PLEASE NOTE: This node will only work in a family document!, FamilyDocument.FamilyTypes - Retrieves all family types from the active family document. PLEASE NOTE: This node will only work in a family document!, FamilyInstance.AddCoping - Adds a coping (cut) to a steel beam, FamilyInstance.ByCurve - Places a line-based family instance on a given level, FamilyInstance.ByPointInView - Places a family instance at a given point in a given view (e.g. a detail component)., FamilyInstance.CopingElements - Returns all elements used as coping cutters for a given element., FamilyInstance.FlipFacingOrientation - Flips the facing orientation of a given family instance, FamilyInstance.FlipFromToRoom - Flips the settings of \"From Room\" and \"To Room\" for any given door or window instance. , FamilyInstance.FlipHandOrientation - Flips the hand orientation of a given family instance, FamilyInstance.HandOrientation - Gets the hand orientation of a hosted object (e.g. a window or a door), FamilyInstance.RemoveCoping - Removes a coping (cut) from a steel beam, FamilyInstance.SetLevel - Sets the level property of a family instance. Family instance will move accordingly., FamilyInstance.SetType - Changes the family type of a given family instance to the specified type, FamilyInstance.SubComponents - Retrieves all subcomponents of a given family instance, FamilyInstance.SuperComponent - Retrieves the supercomponent of a given family instance, FamilyParameter.Properties - Retrieves all properties of a given family parameter. PLEASE NOTE: This node will only work in a family document!, FamilyType.CompoundStructureHasVariableLayer - Checks if the compound structure of a given floor or roof type contains a variable layer., FamilyType.CompoundStructureLayers - Retrieves the compound layers of any layered family type (wall types, roof types, floor types etc.), FamilyType.Duplicate - Duplicates a family type, FamilyType.SetCompoundLayerMaterial - Sets the material of a specified compound layer of a given family type (only applies to family types that have a compound structure, e.g. walls, floors etc.)., FamilyType.SetCompoundLayerWidth - Sets the width of a specified compound layer of a given family type (only applies to family types that have a compound structure, e.g. walls, floors etc.)., File.WriteToCSV - Writes data to a CSV file with a custom delimiter. Data inputs needs to contain strings only!, Floor.SlabShapeByPoints - Transform a slab shape based on a list of XYZs. PLEASE NOTE: Will reset any previous edits on the slab shape., Floor.SlabShapeHasBeenModified - Checks if the shape of a floor slab has been modified with the shape editing tools, FootingType.BreaksAtInserts - Determines whether a list of wall footing types break at inserts in their attached walls, Geometry.ClosestTo - Finds the closest entity in a list of geometric entities from another given entity, Geometry.FurthestFrom - Finds the furthest entity in a list of geometric entities from another given entity, GlobalParameter.GetValue - Gets the value of a global parameter (only in Revit 2016 R2 or later)., Group.FromElements - Creates a group from a list of Revit elements, Group.Members - Retrieves the members of a group, Group.Ungroup - Ungroups a group and returns the ungrouped elements., Hypotenuse.ByPythagoras - Computes the length of the hypotenuse of a right triangle using the Pythagorean Theorem. A and B are the legs / catheti of the triangle., InternalUnit.ToDisplayUnit - Converts a value from Revit's internal unit to a given display unit, Level.Plane - Retrieves the plane of a given level, Level.Views - Returns all views associated with a given level, List.AlphabeticalSequence - Creates a list of the first N letters of the alphabet  (where 1 = A, 2 = B, ... , 27 = AA, 28 = AB etc.)., List.AnyFalse - Returns true if any item in a list of booleans is false., List.AnyTrue - Returns true if any item in a list of booleans is true., List.CountBooleanSequences - Retrieves the lengths of uninterrupted sequences of booleans (true or false) in a given list., List.CountOccurences - Counts the number of occurences of each unique element in a given list, List.DropLastItem - Drops the last item from a given list., List.EqualSublistLengths - Trims all given lists to the length of the shortest list, List.FibonacciFromList - Creates a Fibonacci row from a starting list (last two values) of a given length (starting values do *not* count toward length)., List.FibonacciFromValues - Creates a Fibonacci row from two starting values of a given length (starting values do *not* count toward length)., List.FilterBySublistLength - Filters out all sublists that do not have the specified length, List.FromCSV - Converts the content of a given CSV file to a list, List.FromString - Chops up a string into a list of characters, List.GroupListOfListsByKey - Groups a list of lists by one of its keys, List.IsNotEmpty - Just the inversion of the built-in Is Empty List node., List.MatchWithKeyValues - Matches a list with a given set of keys and returns the values corresponding to the keys, List.NormalizedSequence - Creates a sequence of N values between 0 and 1, List.NormalizedSequenceByFunction - Creates a sequence of N values between 0 and 1 driven by a function, List.RandomElements - Creates a list of random elements based on a given list of elements, List.RepeatItemsByLengths - Repeats a list of items into sublists of given lengths, List.ReplaceEmptyLists - Replaces all empty lists within a given list with a substitute, List.ReplaceItemAtIndex - Replaces the item at a given index (or list of indices) of a list by another item, List.ReplaceNull - Replaces all null values within a given list with a substitute, List.SortListOfLists - Sorts a list of lists by one of its sublists, List.SublistLengths - Gets the lengths of all sublists in a given list of lists., List.SublistsContain - Looks for an item in each sublist of a given list and returns true/false for each sublist., List.WithLeadingZeroes - Adds leading zeros to a sequence of numbers, MassFloor.Mass - Gets the mass a given mass floor belongs to, Material.Duplicate - Duplicates a material, Material.Properties - Retrieves a number of properties froma given material, Math.AlmostZero - Returns a feasable computational tolerance to zero (1.0e-9 or a billionth of 1) for use in calculations. More background info: https://github.com/DynamoDS/Dynamo/issues/879, Math.DecimalToBinary - Converts a number to a string of its binary value, Math.DecimalToHex - Converts a number to a string of its hexadecimal value, Math.InvertNormalized - Inverts a value between 0 and 1 to its opposite (1-x), Math.IsEvenNumber - Checks if a number is even., Math.IsMultipleOf - Checks if A is a multiple of B., Math.IsOddNumber - Checks if a number is odd., Math.Normalize - Converts a value into a normalized value according to a value range, Math.NormalizeRange - Normalizes a range of numbers, Math.RandomIntegerList - Creates a list of random integers between 0 and a given maximum value, Math.RoundDownToPrecision - Rounds a number *down* to a specified precision, Math.RoundToPrecision - Rounds a number to a specified precision, Math.RoundUpToPrecision - Rounds a number *up* to a specified precision, Math.ScaleNormalized - Scales a normalized value according to a given minimum and maximum, Math.Similar - Computes the difference between two values and whether that difference is within a given tolerance factor, Mesh.FaceVertices - Gets the vertices of each face of a given mesh, Mesh.IntersectionWithPlane - Calculates the intersection of a mesh and a plane, Normal.CorrectOrientation - Inverts normal A if its inversion is closer to normal B, Object.Members - Gets a list of all members (properties and methods) of a selected element, Object.MembersByName - Looks up all the members of a given element based on a given name (or part of a name) of the property or method. Search is case-insensitive., OppositeSide.ByLawOfCosines - Computes the length of the missing side of a triangle using the law of cosines. Gamma is the angle between sides A and B., Paneling.BuildTriangularSublists - Creates sublists of three items each from a list based on given indices, shift and reverse settings and offset., Paneling.DropLastRowAndColumn - Drops the last row and column from a UV field, Paneling.GridFromFace - Returns UV coordinates, XYZ coordinates and normals for a face with UV subdivision, Paneling.Hexagonal - Creates groups of points from a list of UVs or XYZs for the placement of hexagonal panels. The placement pattern can be reversed (boolean) and shifted (integer)., Paneling.InvertAndMirrorNormalizedValues - Inverts and mirrors (horizontally & vertically) a nested list of normalized values., Paneling.Quadrilateral - Creates groups of points from a list of UVs or XYZs for the placement of quadrilateral panels. The placement pattern can be reversed (boolean) and shifted (integer)., Paneling.Quadrilateral2byX - Keine Beschreibung angegeben, Paneling.QuadrilateralAlternatingRows - Creates groups of points from a list of UVs or XYZs for the placement of quadrilateral panels in alternating rows. The placement pattern can be reversed (boolean) and shifted (integer)., Paneling.QuadrilateralCheckerboard - Creates groups of points from a list of UVs or XYZs for the placement of quadrilateral panels in a checkerboard pattern. The placement pattern can be reversed (boolean) and shifted (integer)., Paneling.ShiftPlacementAndReverse - Shifts (integer) and reverses (bool) a given list, Paneling.TriangularFlatDiagonal - Creates groups of points from a list of UVs or XYZs for the placement of triangular panels. The placement pattern can be reversed (boolean) and shifted (integer)., Paneling.TriangularSubpattern - Subcomponent of the Triangular Pattern From Grid node., Part.SourceElement - Retrieves the element a given part was made from, Passthrough - Forces a sequential order of execution. The node wired into the output of the Passthrough node will be executed *after* the node wired into the waitFor input (e.g. important for some Revit operations). The value of the passThrough input will be passed on to the node wired into the output port of the Passthrough node., PathGraph.AllPaths - Finds all possible paths between two nodes.  The connections input expects a list of value pairs., PathGraph.ByPairs - Builds a path graph (Python dictionary) from a list of value pairs., PathGraph.ShortestPath - Finds the shortest path (fewest steps) between two nodes. The connections input expects a list of value pairs., PerspectiveView.OrientToEyeAndTargetPosition - Sets the orientation of a given perspective view based on a given eye and target position, PlaceholderSheet.ByNumberAndName - Creates placeholder sheets, Plane.ByBestFitFromFace - Creates a plane from face, Plane.ByFirst3Points - Returns a plane, its origin and its normal based on the first three XYZs in a given list, Point.Average - Determines the average of a list of points, Point.CentralProjectionOnFace - Projects a list of points onto a given face, Point.CentralProjectionOnPlane - Projects a list of points onto a given plane, Point.IsOutOfPlane - Checks a list for XYZs that are not located on a given plane, Point.RoundDownToPrecision - Rounds a point coordinate *down* to a specified precision, Point.RoundToPrecision - Rounds a point coordinate to a specified precision, Point.RoundUpToPrecision - Rounds a point coordinate *up* to a specified precision, PointSequence.AccumulatedDistance - Retrieves the accumulated distances of a sequence of points, PointSequence.ContainsOutOfPlanePoints - Checks a list for XYZs that are not located on a given plane, PointSequence.GreatestDistanceToPoint - Retrieves the furthest point in a sequence of points, PointSequences.ShortestPath - Retrieves the shortest path from a number of point sequences, ReturnListOrSingleValue - If the unknown item is not a list but rather a single item, only the first item of the list (input \"seq\") will be returned., RevisionCloud.FromCurves - Creates a revision cloud from a list of geometry curves. , RevisionCloud.FromElements - Create a revision cloud for a list of Revit elements, RevitBoundingBox.FromDynamoBoundingBox - Turns a Dynamo bounding box into a Revit bounding box., RevitColor.FromDynamoColor - Creates a Revit color from a Dynamo color, RevitColor.ToDynamoColor - Converts Revit colors into Dynamo colors, RevitFace.FromDynamoSurface - Returns the underlying Revit face of a given surface, RevitFaceReference.FromDynamoSurface - Returns the underlying Revit face reference of a given surface, RevitUV.ToDynamoUV - Converts Revit UV coordinates to Dynamo UV coordinates, Roof.CreationMethod - Retrieves the creation method of a given roof, Roof.Kind - Retrieves the roof kind (Basic, Glazed, Other). PLEASE NOTE: Roofs that were created by face will be identified as 'Other', Roof.SlabShapeByPoints - Transform a slab shape based on a list of XYZs. PLEASE NOTE: Will reset any previous edits on the slab shape., Roof.SlabShapeHasBeenModified - Checks if the shape of a roof slab has been modified with the shape editing tools, Room.AtPointInPhase - Tries to retrieve a room element at the given location for the given phase., Room.Boundaries - Gets a list of all boundary elements of a given room or area, Room.Doors - Retrieves all doors that are associated with a room (hosted in walls and roofs)., Room.InsertsOfBoundaries - Retrieves the inserts of the bounding elements of a given room., Room.InsertsOfBoundariesByCategory - Retrieves the inserts of the bounding elements of a given room - filtered by a given category., Room.IsPointInside - Evaluates if a ponti is located inside a given room., Room.IsUnbounded - Checks whether a room is unbounded., Room.UnplacedByNameAndNumber - Creates an unplaced room, Room.Windows - Retrieves all windows that are associated with a room (hosted in walls and roofs)., RoomSeparator.FromCurve - Creates room separation lines from geometry curves. , RoomSequence.ToDoorSequence - Retrieves a sequence of doors connecting a given sequence of rooms (if possible), RoomTag.Room - Returns the room of a given room tag, RoomTag.SetType - Changes the family type of a given room tag to the specified type, SelectionSet.ByElements - Creates a selection set of the given elements. Note that if a selection set of the given name already exists in the model, its contents will be replaced. Also, if the selection set is already applied as a view filter, the view filter will have to be manually updated in the visibility / graphic overrides. DO ***NOT*** USE IN AUTOMATIC MODE!, SelectionSet.Elements - Retrieves all elements stored in a selection set, Sheet.Scale - Returns the scale of a given sheet, Sheet.Schedules - Returns all schedules placed on a specified sheet , Side.ByLawOfSines - Determines the length of a side based on the law of sines. (Alpha is the angle opposite side A and beta is the angle opposite side B...), SpaceSeparator.FromCurve - Creates space separation lines from geometry curves. , String.AlphanumericToMorse - Converts an alphanumeric string to Morse code, String.BinaryToDecimal - Converts a string of a binary number into a decimal value, String.FindRegularExpression - Returns all occurences of a regular expression within a string (or list of strings). The syntax for regular expressions is explained at\r\nhttp://ironpython-test.readthedocs.org/en/latest/howto/regex.html, String.HexToDecimal - Converts a string of a hexadecimal value to a number, String.MatchRegularExpression - Determines if a regular expression matches a string (or a list of strings) and returns a boolean value (or a list, depending on the input). The syntax for regular expressions is explained at\r\nhttp://ironpython-test.readthedocs.org/en/latest/howto/regex.html, String.MorseToAlphanumeric - Converts a string in Morse code to alphanumeric, String.ReplaceRegularExpression - Replaces all occurences of a regular expression within a given string (or list of strings) with another string. The syntax for regular expressions is explained at\r\nhttp://ironpython-test.readthedocs.org/en/latest/howto/regex.html, String.SplitByRegularExpression - Splits a given string by a regular expression. The syntax for regular expressions is explained at\r\nhttp://ironpython-test.readthedocs.org/en/latest/howto/regex.html, StructuralFoundation.Kind - Retrieves the kind of a given structural foundation (isolated, wall, slab)., Subcategory.ByName - Creates a new subcategory for a given element category in a *family document* (unless a subcategory of that name already exists - in that case it returns the existing subcategory), Surface.FilterByOrientation - Sorts surfaces in three lists based on their orientation (vertical, horizontal up & horizontal down) and also returns three corresponding lists of booleans., Surface.IsPlanar - Checks whether a face is planar, Switch - Emulates the Switch/Case statement that is  available in multiple programming languages., TextAlignFlags.Bottom - Returns the \"Left\" text align flag., TextAlignFlags.Center - Returns the \"Left\" text align flag., TextAlignFlags.Left - Returns the \"Left\" text align flag., TextAlignFlags.Middle - Returns the \"Left\" text align flag., TextAlignFlags.Right - Returns the \"Left\" text align flag., TextAlignFlags.Top - Returns the \"Left\" text align flag., TextElement.SetText - Sets the text of a given text element (i.e. text note or model text), TextElement.Text - Gets the text stored in a text element (i.e. text note or model text), TextNote.ByStringAndPosition - Creates a text note at a given location, ThirdXYZAxis.ByTwoVectors - Given two main XYZ axes (or vectors pointing more or less in thei general direction), this node will find the third axis., Time.EvaluateLapTimes - Evaluates a list of lap times and returns the overall time, Time.LapTime - Records a timestamp and adds it to a given list of lap times. Also passes through an arbitrary variable for integration into a graph., Topography.IntersectionWithPlane - Calculates the intersection of a toposurface and a plane, Topography.IsSubregion - Filters out everything that is *not* a topo subregion. Needs Revit 2014 or newer to work., Triangle.SolveByPoints - Solves a triangle based on the XYZ coordinates of its vertices., TurnIntoList - Turns an element (or a nested list) into a flat list, UnitType.DisplayUnitType - Retrieves the display unit type for a given unit type. , UV.Average - Determines the average of a list of UVs, UV.ByXY - Creates UVs from the XY components of point coordinates, UV.ConvexHull2D - Computes the convex hull of a given set of UV coordinates based on the monotone chain algorithm, UV.IsInsidePolygon - Determines if a point is inside the space enclosed by a polygon, UV.PruneDuplicates - Prune UVs to exclude duplicates within a given tolerance, UV.RoundDownToPrecision - Rounds a UV coordinate *down* to a specified precision, UV.RoundToPrecision - Rounds a UV coordinate to a specified precision, UV.RoundUpToPrecision - Rounds a UV coordinate *up* to a specified precision, UV.Swap - Swaps U and V coordinates, Vector.AltitudeAndAzimuth - Computes the altitude and azimuth of a given vector, Vector.Average - Determines the average vector of a list of vectors, Vector.IntersectionWithPlane - Finds the intersection point between a plane and a vector, Vector.IntersectionWithVector - Determines if two vectors intersect and returns the closest points of intersection on both vectors., Vector.IsInPlane - Checks if a given vector is located on a given plane, Vector.IsOrthogonalToVector - Checks if two vectors are orthogonal to each other, Vector.IsParallelToPlane - Checks if a given vector is parallel to a given plane, Vector.PruneDuplicates - Prune vectors to exclude duplicates within a given tolerance, Vector.XAxisNegative - Returns an XYZ of -1,0,0, Vector.YAxisNegative - Returns an XYZ of 0,-1,0, Vector.ZAxisNegative - Returns an XYZ of 0,0,-1, VersionNumber.ToInteger - Converts a version number (e.g. a Dynamo version number) to an integer., View.CategoryIsVisible - Checks if a given category is visible in a given view, View.ConvertTemporaryHideIsolateToPermanent - Convert all temporary hidden elements or categories to permanently hidden in the given view., View.DetailLevel - Retrieves the detail level of a given view, View.DisableTemporaryHideIsolate - Disables the temporary hide/isolate for the given view (if set), View.Duplicate - Duplicates a given view, View.DuplicateAsDependent - Duplicates a given view as a dependent view, View.DuplicateWithDetailing - Duplicates a given view with detailing, View.IsPerspective - Checks whether a given view is a perspective view., View.IsViewTemplate - Checks if a given view is a view template, View.Phase - Returns the phase of a given view, View.Plane - Retrieves the plane of a given view, View.ResizeCropBox - Resizes the bounding box of a given Revit element by the specified amount in X, Y and Z direction. May need to be used in conjunction with a Transaction node., View.Scale - Returns the scale of a given view, View.SetDesignOption - Sets the view to a given design option. PLEASE NOTE: This node is kind of hacky. It does not use the design option settings in the visibility / graphic overrides. Instead it sets the view property \"Visible in Option\" to *one* specific design option - which also means that the symbolic representation of this view is only visible in views that display the given design options., View.SetPhase - Sets the phase of a given view, View.SetSolarStudyActiveFrameNumber - Sets the active frame number of the solar study in a given view, View.SolarStudyTotalFrames - Retrieves the number of frames of a solar study for a given view (if the view's sun and shadow settings are indeed set to single or multi day study), View.Type - Returns the type of a given view, View.UsesViewFilters - Checks if a given view has any view filters applied to it., View.ViewTemplate - Returns the view template assigned to a given view (if one is assigned), View3D.IsLocked - Checks if a given view is locked, Wall.ByFace - Creates a wall on top of a face. The face typically needs to be the face of a mass surface in Revit., Wall.CreationMethod - Retrieves the creation method of a given wall, Wall.Flip - Flips the  orientation of a given wall - DO ***NOT*** USE IN AUTOMATIC MODE, Wall.Orientation - Gets the orientation of a given wall instance (normal of the exterior face of the wall). Will *not* work for walls hosted on mass faces or in-place walls., WallLocationLine.CoreCenterline - Returns the WallLocationLine option for CoreCenterLine, WallLocationLine.CoreExterior - Returns the WallLocationLine option for CoreExterior, WallLocationLine.CoreInterior - Returns the WallLocationLine option for CoreInterior, WallLocationLine.FinishFaceExterior - Returns the WallLocationLine option for FinishFaceExterior, WallLocationLine.FinishFaceInterior - Returns the WallLocationLine option for FinishFaceInterior, WallLocationLine.WallCenterline - Returns the WallLocationLine option for WallCenterLine, WallType.Function - Retrieves the Function property of a given wall type, WallType.Kind - Retrieves the wall kind of a given wall type, Window.Rooms - Gets the rooms that are connected by a given window, Workset.Kind - Retrieves the kind of a given workset, XYZAxis.FromVector - Returns whichever main axis (X, Y or Z) is closest to a given vector",
            "engine_metadata": "",
            "engine_version": "1.0.0.1180",
            "created": "2016-09-17T20:50:39.364Z",
            "full_dependency_versions": [ "1.0.1" ],
            "full_dependency_ids": [
              {
                "_id": "57ddac02882d868b42000012",
                "name": "Clockwork for Dynamo 1.x"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "1.0.1"
          },
          {
            "_id": "57ea2120b135d4597400001f",
            "contains_binaries": true,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-prod/b85cb038-0162-418f-a1ed-3a5f2bda4bc3gregPkg475.zip",
            "contents": "PointSequence.GreatestDistanceToPoint - Retrieves the furthest point in a sequence of points, Document.BuiltInParameters - List all the available BuiltInParameters, XYZAxis.FromVector - Returns whichever main axis (X, Y or Z) is closest to a given vector, Object.Members - Gets a list of all members (properties and methods) of a selected element, PathGraph.ShortestPath - Finds the shortest path (fewest steps) between two nodes. The connections input expects a list of value pairs., Room.Boundaries - Gets a list of all boundary elements of a given room or area, Paneling.Quadrilateral - Creates groups of points from a list of UVs or XYZs for the placement of quadrilateral panels. The placement pattern can be reversed (boolean) and shifted (integer)., Vector.Average - Determines the average vector of a list of vectors, Math.Similar - Computes the difference between two values and whether that difference is within a given tolerance factor, All Intersecting Elements Of Category - Finds all elements of a specified category that intersect with a list of vectors, UV.ByXY - Creates UVs from the XY components of point coordinates, PointSequence.ContainsOutOfPlanePoints - Checks a list for XYZs that are not located on a given plane, Document.StartingView - Retrieves the starting view of a Project file. Returns null if no starting view is set., View.DuplicateWithDetailing - Duplicates a given view with detailing, RevitFaceReference.FromDynamoSurface - Returns the underlying Revit face reference of a given surface, Element.Host - Gets an element's host, Room.UnplacedByNameAndNumber - Creates an unplaced room, RevitFace.FromDynamoSurface - Returns the underlying Revit face of a given surface, Room.IsPointInside - Evaluates if a ponti is located inside a given room., Color.ByWebColor - Creates a color from a given web color (a hex triplet like #FF9900), Object.MembersByName - Looks up all the members of a given element based on a given name (or part of a name) of the property or method. Search is case-insensitive., Vector.AltitudeAndAzimuth - Computes the altitude and azimuth of a given vector, List.DropLastItem - Drops the last item from a given list., Wall.Orientation - Gets the orientation of a given wall instance (normal of the exterior face of the wall). Will *not* work for walls hosted on mass faces or in-place walls., DisplayUnit.ToInternalUnit - Converts a value from a given display unit to Revit's internal unit, View.SetPhase - Sets the phase of a given view, Elements.FilterByParameterValueAndCondition - Keine Beschreibung angegeben, TurnIntoList - Turns an element (or a nested list) into a flat list, Group.Ungroup - Ungroups a group and returns the ungrouped elements., Math.IsOddNumber - Checks if a number is odd., FamilyInstance.AddCoping - Adds a coping (cut) to a steel beam, Family.IsInPlace - Determines if a family is an in-place family, Group.Members - Retrieves the members of a group, Element.Group - Retrieves the group an element belongs to (if any), BoundingBox.PerimeterCurvesOnPlane - Returns the perimeter curve of a bounding box on a given plane (assuming that the bounding box and plane intersect), Element.Type - Gets the family type of a given element (if applicable). , Color.GreyscaleByNormalizedValue - Creates a greyscale color based on a normalized value (0 = black, 1 = white), TextNote.ByStringAndPosition - Creates a text note at a given location, Element.Location - Returns the location of an element as an XYZ (or if it's line-based the start and end point of the line), along with some booleans to help filtering the results. Use this for some element types (e.g. walls or lines) that do not work with the built-in Get Family Instance Location node. , Assembly.Members - Retrieves the members of an assembly, Element.Name (Universal) - Gets an element's name (Dynamo's built-in Name nodes don't work for all element types, e.g. worksets...), Window.Rooms - Gets the rooms that are connected by a given window, Topography.IsSubregion - Filters out everything that is *not* a topo subregion. Needs Revit 2014 or newer to work., AreaSeparator.FromCurve - Creates area separation lines from geometry curves. , PointSequences.ShortestPath - Retrieves the shortest path from a number of point sequences, TextAlignFlags.Middle - Returns the \"Left\" text align flag., Math.NormalizeRange - Normalizes a range of numbers, FamilyInstance.RemoveCoping - Removes a coping (cut) from a steel beam, DividedSurface.VerticalIntersectsByEndpoints - Creates a number of equally spaced vertical intersects for a divided surface based on the path between between two points. You may need to switch start point and end point., Directory.ContentsAll - Unlike the built-in node Directory.Contents, this node browses a directory recursively and returns all relevant files contained in subfolders as well., Element.ResetOverridesInView - Resets all overrides for an element in a given view, List.AnyFalse - Returns true if any item in a list of booleans is false., FamilyType.SetCompoundLayerWidth - Sets the width of a specified compound layer of a given family type (only applies to family types that have a compound structure, e.g. walls, floors etc.)., UnitType.DisplayUnitType - Retrieves the display unit type for a given unit type. , View.Scale - Returns the scale of a given view, Element.Phases - Gets the created and demolished phases of an element, Document.AddLink - Adds a link to a model to the current document, UV.Swap - Swaps U and V coordinates, Color.Purple - Returns the colour purple., TextAlignFlags.Bottom - Returns the \"Left\" text align flag., Angle.ExteriorAngle - Computes the exterior angle of a given angle., List.NormalizedSequence - Creates a sequence of N values between 0 and 1, List.SublistsContain - Looks for an item in each sublist of a given list and returns true/false for each sublist., Color.Red - Returns the colour red., VersionNumber.ToInteger - Converts a version number (e.g. a Dynamo version number) to an integer., Vector.YAxisNegative - Returns an XYZ of 0,-1,0, Color.Maroon - Returns the colour maroon., RoomTag.Room - Returns the room of a given room tag, TextAlignFlags.Center - Returns the \"Left\" text align flag., Math.IsEvenNumber - Checks if a number is even., WallType.Function - Retrieves the Function property of a given wall type, Color.Fuchsia - Returns the colour fuchsia a.k.a. magenta., Element.Panels - Retrieves the panels nested in a curtain wall, curtain system or glazed roof., WallLocationLine.CoreInterior - Returns the WallLocationLine option for CoreInterior, Element.ContainsTransparentMaterials - Checks if a given element contains transparent materials., Math.AlmostZero - Returns a feasable computational tolerance to zero (1.0e-9 or a billionth of 1) for use in calculations. More background info: https://github.com/DynamoDS/Dynamo/issues/879, List.FibonacciFromList - Creates a Fibonacci row from a starting list (last two values) of a given length (starting values do *not* count toward length)., Color.Black - Returns the colour black., Clipboard.GetFrom - Gets the content of the clipboard. ATTENTION: Will only work with strings., List.WithLeadingZeroes - Adds leading zeros to a sequence of numbers, Category.Subcategories - Retrieves all the subcategories for a given category, Paneling.GridFromFace - Returns UV coordinates, XYZ coordinates and normals for a face with UV subdivision, List.RandomElements - Creates a list of random elements based on a given list of elements, FamilyType.SetCompoundLayerMaterial - Sets the material of a specified compound layer of a given family type (only applies to family types that have a compound structure, e.g. walls, floors etc.)., UV.RoundUpToPrecision - Rounds a UV coordinate *up* to a specified precision, RoomTag.SetType - Changes the family type of a given room tag to the specified type, DividedSurface.AddIntersect - Adds an intersect to a divided surface, Vector.IntersectionWithVector - Determines if two vectors intersect and returns the closest points of intersection on both vectors., DetailLevel.Fine - Returns the fine detail level, Geometry.FurthestFrom - Finds the furthest entity in a list of geometric entities from another given entity, WallLocationLine.CoreCenterline - Returns the WallLocationLine option for CoreCenterLine, Dimension.SetType - Changes the dimension type of a given dimension instance to the specified type, Wall.ByFace - Creates a wall on top of a face. The face typically needs to be the face of a mass surface in Revit., Color.White - Returns the colour white., View.SolarStudyTotalFrames - Retrieves the number of frames of a solar study for a given view (if the view's sun and shadow settings are indeed set to single or multi day study), Time.EvaluateLapTimes - Evaluates a list of lap times and returns the overall time, PointSequence.AccumulatedDistance - Retrieves the accumulated distances of a sequence of points, Door.Rooms - Gets the rooms that are connected by a given door, View.SetDesignOption - Sets the view to a given design option. PLEASE NOTE: This node is kind of hacky. It does not use the design option settings in the visibility / graphic overrides. Instead it sets the view property \"Visible in Option\" to *one* specific design option - which also means that the symbolic representation of this view is only visible in views that display the given design options., Paneling.ShiftPlacementAndReverse - Shifts (integer) and reverses (bool) a given list, Hypotenuse.ByPythagoras - Computes the length of the hypotenuse of a right triangle using the Pythagorean Theorem. A and B are the legs / catheti of the triangle., TextElement.SetText - Sets the text of a given text element (i.e. text note or model text), CurtainPanel.HostPanel - Retrieves the host panel of a given curtain panel. This is typcially needed when wanting to access wall elements used as curtain panels., List.SortListOfLists - Sorts a list of lists by one of its sublists, Document.ProjectInfo - Gets the project information., Math.Normalize - Converts a value into a normalized value according to a value range, Color.Olive - Returns the colour olive., Elements.FilterByName - Retrieves those elements from a collection whose names match the search string, View.ConvertTemporaryHideIsolateToPermanent - Convert all temporary hidden elements or categories to permanently hidden in the given view., FamilyInstance.SuperComponent - Retrieves the supercomponent of a given family instance, WallLocationLine.CoreExterior - Returns the WallLocationLine option for CoreExterior, View.ViewTemplate - Returns the view template assigned to a given view (if one is assigned), Array.AssociatedFamilyParameter - Returns the associated family parameter of an array label (if any). PLEASE NOTE: This node will only work in a family document!, Assembly.Disassemble - Disassembles an assembly and returns its members, View.CategoryIsVisible - Checks if a given category is visible in a given view, View.DetailLevel - Retrieves the detail level of a given view, Element.ByID - Gets the Revit element(s) for a list of IDs (or a single ID), View.DisableTemporaryHideIsolate - Disables the temporary hide/isolate for the given view (if set), View.Type - Returns the type of a given view, View.SetSolarStudyActiveFrameNumber - Sets the active frame number of the solar study in a given view, Document.ContainsElementsOfCategory - Checks if family instances of specified categories are present in the model., Color.Navy - Returns the colour navy., Point.Average - Determines the average of a list of points, Geometry.ClosestTo - Finds the closest entity in a list of geometric entities from another given entity, String.AlphanumericToMorse - Converts an alphanumeric string to Morse code, View.ResizeCropBox - Resizes the bounding box of a given Revit element by the specified amount in X, Y and Z direction. May need to be used in conjunction with a Transaction node., FamilyType.Duplicate - Duplicates a family type, Element.Workset - Retrieves the workset of a given element, PlaceholderSheet.ByNumberAndName - Creates placeholder sheets, DetailLevel.Medium - Returns the medium detail level, List.FromCSV - Converts the content of a given CSV file to a list, Workset.Kind - Retrieves the kind of a given workset, DirectShape.FromRevitGeometry - Creates a DirectShape from native Revit geometry objects, Element.Materials - Retrieves all materials froma given element, Element.OwnerView - Gets the owner view of a given Revit element (if possible), Element.Geometry+ - Returns Dynamo AND native Revit geometry of a given element, All View-Dependent Family Instances Of Category - Gets all view-dependent family instances in a given view for a given list of categories - useful for finding annotation elements, CustomNode.Info - Extracts information from a custom node., Room.InsertsOfBoundariesByCategory - Retrieves the inserts of the bounding elements of a given room - filtered by a given category., String.ReplaceRegularExpression - Replaces all occurences of a regular expression within a given string (or list of strings) with another string. The syntax for regular expressions is explained at\r\nhttp://ironpython-test.readthedocs.org/en/latest/howto/regex.html, Math.RoundUpToPrecision - Rounds a number *up* to a specified precision, FamilyInstance.ByCurve - Places a line-based family instance on a given level, DividedSurface.HorizontalIntersectsByEndpoints - Creates a number of equally spaced horizontal intersects for a divided surface based on the path between between two points. , Color.Lime - Returns the colour lime., File.WriteToCSV - Writes data to a CSV file with a custom delimiter. Data inputs needs to contain strings only!, Side.ByLawOfSines - Determines the length of a side based on the law of sines. (Alpha is the angle opposite side A and beta is the angle opposite side B...), Subcategory.ByName - Creates a new subcategory for a given element category in a *family document* (unless a subcategory of that name already exists - in that case it returns the existing subcategory), Roof.SlabShapeHasBeenModified - Checks if the shape of a roof slab has been modified with the shape editing tools, Assembly.FromElements - Creates an assembly from a list of elements, Paneling.TriangularFlatDiagonal - Creates groups of points from a list of UVs or XYZs for the placement of triangular panels. The placement pattern can be reversed (boolean) and shifted (integer)., Wall.Flip - Flips the  orientation of a given wall - DO ***NOT*** USE IN AUTOMATIC MODE, Assembly.RemoveMembers - Removes any given elements to a given assembly., RevitUV.ToDynamoUV - Converts Revit UV coordinates to Dynamo UV coordinates, SelectionSet.Elements - Retrieves all elements stored in a selection set, View.IsPerspective - Checks whether a given view is a perspective view., Part.SourceElement - Retrieves the element a given part was made from, UV.RoundToPrecision - Rounds a UV coordinate to a specified precision, SelectionSet.ByElements - Creates a selection set of the given elements. Note that if a selection set of the given name already exists in the model, its contents will be replaced. Also, if the selection set is already applied as a view filter, the view filter will have to be manually updated in the visibility / graphic overrides. DO ***NOT*** USE IN AUTOMATIC MODE!, Document.SynchronizeWithCentral - Synchronizes a workshared model with the central model., DesignOption.DesignOptionSet - Returns the design option set of a given design option, PerspectiveView.OrientToEyeAndTargetPosition - Sets the orientation of a given perspective view based on a given eye and target position, List.GroupListOfListsByKey - Groups a list of lists by one of its keys, Group.FromElements - Creates a group from a list of Revit elements, Paneling.QuadrilateralAlternatingRows - Creates groups of points from a list of UVs or XYZs for the placement of quadrilateral panels in alternating rows. The placement pattern can be reversed (boolean) and shifted (integer)., RoomSeparator.FromCurve - Creates room separation lines from geometry curves. , Paneling.QuadrilateralCheckerboard - Creates groups of points from a list of UVs or XYZs for the placement of quadrilateral panels in a checkerboard pattern. The placement pattern can be reversed (boolean) and shifted (integer)., Element.Level - Gets an element's level, All Family Types Of Category - Gets all family types/symbols of a given category in the model  (does *not *work for system families), Element.SetName - Gets the name of a given Revit element, FamilyInstance.SetType - Changes the family type of a given family instance to the specified type, View.Duplicate - Duplicates a given view, Room.IsUnbounded - Checks whether a room is unbounded., List.FilterBySublistLength - Filters out all sublists that do not have the specified length, Roof.SlabShapeByPoints - Transform a slab shape based on a list of XYZs. PLEASE NOTE: Will reset any previous edits on the slab shape., ReturnListOrSingleValue - If the unknown item is not a list but rather a single item, only the first item of the list (input \"seq\") will be returned., Level.Plane - Retrieves the plane of a given level, List.NormalizedSequenceByFunction - Creates a sequence of N values between 0 and 1 driven by a function, Elements.GroupByHost - Groups a list of Revit elements by their respective hosts (if they have any), DetailComponent.ByCurve - Places a line-based detail component in a given view, Point.RoundToPrecision - Rounds a point coordinate to a specified precision, InternalUnit.ToDisplayUnit - Converts a value from Revit's internal unit to a given display unit, All Families Of Category - Gets all famiies of a given category in the model  (does *not *work for system families), View.DuplicateAsDependent - Duplicates a given view as a dependent view, MassFloor.Mass - Gets the mass a given mass floor belongs to, Math.RoundDownToPrecision - Rounds a number *down* to a specified precision, TextAlignFlags.Right - Returns the \"Left\" text align flag., Triangle.SolveByPoints - Solves a triangle based on the XYZ coordinates of its vertices., TextAlignFlags.Top - Returns the \"Left\" text align flag., Angle.ByAngleSum - Computes the missing interior angle of a *planar* polygon based on a given list of all other interior angles. , Sheet.Scale - Returns the scale of a given sheet, Color.Silver - Returns the colour silver., Wall.CreationMethod - Retrieves the creation method of a given wall, UV.ConvexHull2D - Computes the convex hull of a given set of UV coordinates based on the monotone chain algorithm, BoundingBox.ByElement - Gets the bounding box of a Revit element, Element.FromDynamoSurface - Returns the underlying Revit element of a given face, PathGraph.ByPairs - Builds a path graph (Python dictionary) from a list of value pairs., RevitColor.FromDynamoColor - Creates a Revit color from a Dynamo color, Element.AssociatedFamilyParameters - Returns the associated family parameters of an element in a family (and the respective element parameters). PLEASE NOTE: This node will only work in a family document!, Surface.IsPlanar - Checks whether a face is planar, Application.Version - Retrieves the name, version and build of the current Revit application., FamilyDocument.CurrentFamilyType - Retrieves the current family type from the active family document. PLEASE NOTE: This node will only work in a family document!, WallLocationLine.FinishFaceExterior - Returns the WallLocationLine option for FinishFaceExterior, Color.Grey - Returns the colour grey., DividedSurface.HorizontalIntersectsByEndpointsAndFunction - Creates a number of horizontal intersects (levels)for a divided surface based on the path between two points. The spacing of the intersects can be controlled by a function., List.MatchWithKeyValues - Matches a list with a given set of keys and returns the values corresponding to the keys, Math.IsMultipleOf - Checks if A is a multiple of B., Document.LoadFamily - A very crude implementation of family loading. Will *not* reload an already loaded family of the same name., RevisionCloud.FromElements - Create a revision cloud for a list of Revit elements, Document.Worksets - Returns all Worksets in the current document, RevitColor.ToDynamoColor - Converts Revit colors into Dynamo colors, Level.Views - Returns all views associated with a given level, Angle.ByLawOfCosines - Computes an angle of a triangle using the law of cosines. A is the opposite side of the triangle while B and C are the sides forming the angle., Material.Duplicate - Duplicates a material, TextAlignFlags.Left - Returns the \"Left\" text align flag., Element.AllInstancesAtLevel - Retrieves all instances of an element on a given level, FamilyInstance.ByPointInView - Places a family instance at a given point in a given view (e.g. a detail component)., String.MorseToAlphanumeric - Converts a string in Morse code to alphanumeric, BuiltInCategory.ByName - Looks up all the built-in categories based on a given name (or part of a name) of the category. Search is case-insensitive., View.Phase - Returns the phase of a given view, FamilyInstance.CopingElements - Returns all elements used as coping cutters for a given element., Document.ActiveViewFromCurrentDocument - Gets the active view of the current document, Mesh.FaceVertices - Gets the vertices of each face of a given mesh, List.FibonacciFromValues - Creates a Fibonacci row from two starting values of a given length (starting values do *not* count toward length)., Vector.ZAxisNegative - Returns an XYZ of 0,0,-1, Paneling.BuildTriangularSublists - Creates sublists of three items each from a list based on given indices, shift and reverse settings and offset., Document.SaveAs - Saves the active Revit document under the given name., DividedSurface.VerticalIntersectsByEndpointsAndFunction - Creates a number of vertical intersects (reference planes) for a divided surface based on the path between between two points. The spacing can be controlled by a function. You may need to switch start point and end point., CurtainSystem.ByFace - Creates a curtain system on top of a face. The face typically needs to be the face of a mass surface in Revit., String.FindRegularExpression - Returns all occurences of a regular expression within a string (or list of strings). The syntax for regular expressions is explained at\r\nhttp://ironpython-test.readthedocs.org/en/latest/howto/regex.html, FamilyType.CompoundStructureHasVariableLayer - Checks if the compound structure of a given floor or roof type contains a variable layer., FamilyParameter.Properties - Retrieves all properties of a given family parameter. PLEASE NOTE: This node will only work in a family document!, StructuralFoundation.Kind - Retrieves the kind of a given structural foundation (isolated, wall, slab)., FamilyType.CompoundStructureLayers - Retrieves the compound layers of any layered family type (wall types, roof types, floor types etc.), Point.IsOutOfPlane - Checks a list for XYZs that are not located on a given plane, List.ReplaceEmptyLists - Replaces all empty lists within a given list with a substitute, Element.JoinGeometry - Joins two model elements (if possible). Only works inside the project environment., Element.ParameterExists - Checks if an element contains a parameter of a given name, Room.Windows - Retrieves all windows that are associated with a room (hosted in walls and roofs)., FamilyInstance.FlipFromToRoom - Flips the settings of \"From Room\" and \"To Room\" for any given door or window instance. , Element.SetMaterialParameterByCategory - Sets a material parameter of a given element to <By Category>, List.CountOccurences - Counts the number of occurences of each unique element in a given list, FamilyInstance.FlipHandOrientation - Flips the hand orientation of a given family instance, RevitBoundingBox.FromDynamoBoundingBox - Turns a Dynamo bounding box into a Revit bounding box., String.MatchRegularExpression - Determines if a regular expression matches a string (or a list of strings) and returns a boolean value (or a list, depending on the input). The syntax for regular expressions is explained at\r\nhttp://ironpython-test.readthedocs.org/en/latest/howto/regex.html, Math.DecimalToHex - Converts a number to a string of its hexadecimal value, Time.LapTime - Records a timestamp and adds it to a given list of lap times. Also passes through an arbitrary variable for integration into a graph., Element.CopyByVector - Copies an element or a list of elements by a given vector., Floor.SlabShapeByPoints - Transform a slab shape based on a list of XYZs. PLEASE NOTE: Will reset any previous edits on the slab shape., Cathetus.ByPythagoras - Computes the length of one of the catheti / legs of a right triangle using the Pythagorean Theorem. B is the other leg / cathetus of the triangle while C is the hypotenuse., Assembly.AddMembers - Adds any given elements to a given assembly., Point.RoundDownToPrecision - Rounds a point coordinate *down* to a specified precision, String.HexToDecimal - Converts a string of a hexadecimal value to a number, FamilyInstance.HandOrientation - Gets the hand orientation of a hosted object (e.g. a window or a door), Vector.IntersectionWithPlane - Finds the intersection point between a plane and a vector, List.EqualSublistLengths - Trims all given lists to the length of the shortest list, WallLocationLine.FinishFaceInterior - Returns the WallLocationLine option for FinishFaceInterior, Roof.CreationMethod - Retrieves the creation method of a given roof, View.UsesViewFilters - Checks if a given view has any view filters applied to it., Buckyball.ByOriginAndRadius - Returns all the data necessary for modeling a truncated icosahedron (vertices and struts) as well as the surface area and volume. , Point.CentralProjectionOnFace - Projects a list of points onto a given face, Vector.XAxisNegative - Returns an XYZ of -1,0,0, Clipboard.SendTo - Copies a string to the clipboard. , GlobalParameter.GetValue - Gets the value of a global parameter (only in Revit 2016 R2 or later)., Element.Inserts - Gets all the objects inserted into a given element., Vector.IsOrthogonalToVector - Checks if two vectors are orthogonal to each other, Element.IsRelatedToMass - Returns true if an object (wall, roof, floor or curtain system) has been modelled by face and the underlying mass still exists in the project., DetailLine.FromCurve - Creates a detail line based on a given curve, BoundingBox.PerimeterCurvesByNormal - Returns the perimeter curve of a bounding box on a plane determined by a given normal and the centroid of the bounding box, List.SublistLengths - Gets the lengths of all sublists in a given list of lists., WallType.Kind - Retrieves the wall kind of a given wall type, List.FromString - Chops up a string into a list of characters, FamilyDocument.FamilyTypes - Retrieves all family types from the active family document. PLEASE NOTE: This node will only work in a family document!, String.BinaryToDecimal - Converts a string of a binary number into a decimal value, Paneling.Quadrilateral2byX - Keine Beschreibung angegeben, Room.AtPointInPhase - Tries to retrieve a room element at the given location for the given phase., Room.InsertsOfBoundaries - Retrieves the inserts of the bounding elements of a given room., Point.RoundUpToPrecision - Rounds a point coordinate *up* to a specified precision, Color.Green - Returns the colour green., Dimension.AssociatedFamilyParameter - Returns the associated family parameter of a dimension label (if any). PLEASE NOTE: This node will only work in a family document!, Element.CutGeometry - Adds a solid-solid cut for two model elements (if possible). , Room.Doors - Retrieves all doors that are associated with a room (hosted in walls and roofs)., Character.ToNumber - Converts an Excel-style character to a number (e.g. A = 1, AA = 27 etc.)., Passthrough - Forces a sequential order of execution. The node wired into the output of the Passthrough node will be executed *after* the node wired into the waitFor input (e.g. important for some Revit operations). The value of the passThrough input will be passed on to the node wired into the output port of the Passthrough node., Math.RandomIntegerList - Creates a list of random integers between 0 and a given maximum value, View3D.IsLocked - Checks if a given view is locked, List.AlphabeticalSequence - Creates a list of the first N letters of the alphabet  (where 1 = A, 2 = B, ... , 27 = AA, 28 = AB etc.)., FamilyInstance.FlipFacingOrientation - Flips the facing orientation of a given family instance, List.CountBooleanSequences - Retrieves the lengths of uninterrupted sequences of booleans (true or false) in a given list., Element.ID - Gets the ID(s) for a list of Revit elements (or a single element) - unlike the built-in Element.Id node, this node returns an actual Revit Element ID and *not* a number, DividedSurface.EvaluateGridNodes - Returns UV and XYZ coordinates as well as surface normals for all grid nodes of a given divided surface. Also returns the underlying face., PathGraph.AllPaths - Finds all possible paths between two nodes.  The connections input expects a list of value pairs., Paneling.InvertAndMirrorNormalizedValues - Inverts and mirrors (horizontally & vertically) a nested list of normalized values., Document.Views - Gets all views in the document - except for 3D view templates (as long as this bug is not fixed: https://github.com/DynamoDS/Dynamo/issues/2970), Paneling.TriangularSubpattern - Subcomponent of the Triangular Pattern From Grid node., Angle.ByLawOfSines - Determines the angle of a triangle based on the law of sines. (Alpha is the angle opposite side A and beta is the angle opposite side B...), SpaceSeparator.FromCurve - Creates space separation lines from geometry curves. , List.AnyTrue - Returns true if any item in a list of booleans is true., Element.AllViewDependentInstances - Retrieves all instances of a view-dependent element in a given view, Math.ScaleNormalized - Scales a normalized value according to a given minimum and maximum, Element.IsOfCategory - Checks whether an element is of a specified category, Math.InvertNormalized - Inverts a value between 0 and 1 to its opposite (1-x), View.IsViewTemplate - Checks if a given view is a view template, Color.Aqua - Returns the colour aqua., View.Plane - Retrieves the plane of a given view, Element.ElevationOfHostLevel - Returns the elevation of the level a given element is associated with, TextElement.Text - Gets the text stored in a text element (i.e. text note or model text), List.RepeatItemsByLengths - Repeats a list of items into sublists of given lengths, Color.Blue - Returns the colour blue., -1 - Decrements a value by 1, Plane.ByBestFitFromFace - Creates a plane from face, Plane.ByFirst3Points - Returns a plane, its origin and its normal based on the first three XYZs in a given list, List.ReplaceItemAtIndex - Replaces the item at a given index (or list of indices) of a list by another item, Element.TemporarilyIsolateInView - (Temporarily) isolates elements in the given view, RevisionCloud.FromCurves - Creates a revision cloud from a list of geometry curves. , Element.Area - Returns the area property of a given element (if that element has such a property), Mesh.IntersectionWithPlane - Calculates the intersection of a mesh and a plane, Topography.IntersectionWithPlane - Calculates the intersection of a toposurface and a plane, +1 - Increments a value by 1, Document.IsWorkshared - Returns true if the current project is workshared, Character.FromNumber - Converts a number into a character (where 1 = A, 2 = B, ... , 27 = AA, 28 = AB etc.)., Element.OverrideTransparencyInView - Overrides the transparency of an element in a given view, Sheet.Schedules - Returns all schedules placed on a specified sheet , Vector.IsInPlane - Checks if a given vector is located on a given plane, Document.BuiltInCategories - List all the available BuiltInCategories, Vector.PruneDuplicates - Prune vectors to exclude duplicates within a given tolerance, Switch - Emulates the Switch/Case statement that is  available in multiple programming languages., Element.ExternalFileReferencePath - Returns the full path of an element's external file reference as as string, OppositeSide.ByLawOfCosines - Computes the length of the missing side of a triangle using the law of cosines. Gamma is the angle between sides A and B., BuiltInParameter.ByName - Looks up all the built-in parameters based on a given name (or part of a name) of the parameters. Search is case-insensitive., FamilyInstance.SetLevel - Sets the level property of a family instance. Family instance will move accordingly., DetailLevel.Coarse - Returns the coarse detail level, Paneling.Hexagonal - Creates groups of points from a list of UVs or XYZs for the placement of hexagonal panels. The placement pattern can be reversed (boolean) and shifted (integer)., FamilyInstance.SubComponents - Retrieves all subcomponents of a given family instance, Material.Properties - Retrieves a number of properties froma given material, List.IsNotEmpty - Just the inversion of the built-in Is Empty List node., Document.LinksAndImports - Gets all linked and imported files in the document. NOTE: Does *not* retrieve linked Revit files., UV.RoundDownToPrecision - Rounds a UV coordinate *down* to a specified precision, Color.Teal - Returns the colour teal., Curve.ClosedLoopThroughPoints - Creates a *closed* loop of curves based on a given list of points, FootingType.BreaksAtInserts - Determines whether a list of wall footing types break at inserts in their attached walls, Math.DecimalToBinary - Converts a number to a string of its binary value, Document.ProjectPosition - Gets the project's position data relative to the origin. Use the built-in nodes Location.Latitude & Location.Longitude to retrieve latitude and longitude., UV.PruneDuplicates - Prune UVs to exclude duplicates within a given tolerance, Color.Yellow - Returns the colour yellow., UV.Average - Determines the average of a list of UVs, Element.SetWorkset - Sets the workset of a given element, AngleBisector.ByPoints - Retrieves the vector of an angle bisector at point B based on three points (A, B, C) that define the angle. , All Elements of Family Type (Universal) - Unlike the built-in  node, this node retrieves all placed instances of a given loadable *or* system family type, List.ReplaceNull - Replaces all null values within a given list with a substitute, Element.CopyToLevel - Copies an element or a list of elements to a given level. Preserves the element's transform. PLEASE NOTE: This node only works for levels that have at least one view (e.g. floor plan) associated with them., Document.DesignOptions - Returns all design options in the model, grouped by design option set, Normal.CorrectOrientation - Inverts normal A if its inversion is closer to normal B, Roof.Kind - Retrieves the roof kind (Basic, Glazed, Other). PLEASE NOTE: Roofs that were created by face will be identified as 'Other', Point.CentralProjectionOnPlane - Projects a list of points onto a given plane, UV.IsInsidePolygon - Determines if a point is inside the space enclosed by a polygon, DimensionType.Style - Gets the style of a given Revit dimension type, BoundingBox.ByElements - Retrieves a bounding box for a list of elements, RoomSequence.ToDoorSequence - Retrieves a sequence of doors connecting a given sequence of rooms (if possible), Element.AllInstances - Retrieves all instances of a given element, Vector.IsParallelToPlane - Checks if a given vector is parallel to a given plane, Math.RoundToPrecision - Rounds a number to a specified precision, String.SplitByRegularExpression - Splits a given string by a regular expression. The syntax for regular expressions is explained at\r\nhttp://ironpython-test.readthedocs.org/en/latest/howto/regex.html, WallLocationLine.WallCenterline - Returns the WallLocationLine option for WallCenterLine, Element.ParameterIsReadOnly - Checks if a parameter of a given element is read-only, Surface.FilterByOrientation - Sorts surfaces in three lists based on their orientation (vertical, horizontal up & horizontal down) and also returns three corresponding lists of booleans., Element.PermanentlyIsolateInView - (Permanently) isolates elements in the given view, FamilyDocument.FamilyParameters - Retrieves all family parameters from the active family document. PLEASE NOTE: This node will only work in a family document!, ThirdXYZAxis.ByTwoVectors - Given two main XYZ axes (or vectors pointing more or less in thei general direction), this node will find the third axis., Floor.SlabShapeHasBeenModified - Checks if the shape of a floor slab has been modified with the shape editing tools, Document.Phases - Retrieves all phases in the active document in *chronological* order, Paneling.DropLastRowAndColumn - Drops the last row and column from a UV field",
            "engine_metadata": "",
            "engine_version": "1.0.0.1180",
            "created": "2016-09-27T07:34:56.763Z",
            "full_dependency_versions": [ "1.0.2" ],
            "full_dependency_ids": [
              {
                "_id": "57ddac02882d868b42000012",
                "name": "Clockwork for Dynamo 1.x"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "1.0.2"
          },
          {
            "_id": "58d8b255f4db78ec0100018b",
            "contains_binaries": true,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-prod/bffcbd6a-ffea-4e09-b157-deff5516c6bdgregPkg665.zip",
            "contents": "PointSequence.GreatestDistanceToPoint - Retrieves the furthest point in a sequence of points, Document.BuiltInParameters - List all the available BuiltInParameters, XYZAxis.FromVector - Returns whichever main axis (X, Y or Z) is closest to a given vector, Object.Members - Gets a list of all members (properties and methods) of a selected element, PathGraph.ShortestPath - Finds the shortest path (fewest steps) between two nodes. The connections input expects a list of value pairs., Room.Boundaries - Gets a list of all boundary elements of a given room or area, Paneling.Quadrilateral - Creates groups of points from a list of UVs or XYZs for the placement of quadrilateral panels. The placement pattern can be reversed (boolean) and shifted (integer)., Vector.Average - Determines the average vector of a list of vectors, Math.Similar - Computes the difference between two values and whether that difference is within a given tolerance factor, All Intersecting Elements Of Category - Finds all elements of a specified category that intersect with a list of vectors, UV.ByXY - Creates UVs from the XY components of point coordinates, PointSequence.ContainsOutOfPlanePoints - Checks a list for XYZs that are not located on a given plane, Document.StartingView - Retrieves the starting view of a Project file. Returns null if no starting view is set., View.DuplicateWithDetailing - Duplicates a given view with detailing, RevitFaceReference.FromDynamoSurface - Returns the underlying Revit face reference of a given surface, Element.Host - Gets an element's host, Room.UnplacedByNameAndNumber - Creates an unplaced room, RevitFace.FromDynamoSurface - Returns the underlying Revit face of a given surface, Room.IsPointInside - Evaluates if a ponti is located inside a given room., Color.ByWebColor - Creates a color from a given web color (a hex triplet like #FF9900), Object.MembersByName - Looks up all the members of a given element based on a given name (or part of a name) of the property or method. Search is case-insensitive., Vector.AltitudeAndAzimuth - Computes the altitude and azimuth of a given vector, List.DropLastItem - Drops the last item from a given list., Wall.Orientation - Gets the orientation of a given wall instance (normal of the exterior face of the wall). Will *not* work for walls hosted on mass faces or in-place walls., DisplayUnit.ToInternalUnit - Converts a value from a given display unit to Revit's internal unit, View.SetPhase - Sets the phase of a given view, Elements.FilterByParameterValueAndCondition - Keine Beschreibung angegeben, TurnIntoList - Turns an element (or a nested list) into a flat list, Group.Ungroup - Ungroups a group and returns the ungrouped elements., Math.IsOddNumber - Checks if a number is odd., FamilyInstance.AddCoping - Adds a coping (cut) to a steel beam, Family.IsInPlace - Determines if a family is an in-place family, Group.Members - Retrieves the members of a group, Math.Ceiling+ - Rounds a number *up* to a specified precision, Element.Group - Retrieves the group an element belongs to (if any), BoundingBox.PerimeterCurvesOnPlane - Returns the perimeter curve of a bounding box on a given plane (assuming that the bounding box and plane intersect), Element.Type - Gets the family type of a given element (if applicable). , Color.GreyscaleByNormalizedValue - Creates a greyscale color based on a normalized value (0 = black, 1 = white), TextNote.ByStringAndPosition - Creates a text note at a given location, Element.Location - Returns the location of an element as an XYZ (or if it's line-based the start and end point of the line), along with some booleans to help filtering the results. Use this for some element types (e.g. walls or lines) that do not work with the built-in Get Family Instance Location node. , Assembly.Members - Retrieves the members of an assembly, Window.Rooms - Gets the rooms that are connected by a given window, Topography.IsSubregion - Filters out everything that is *not* a topo subregion. Needs Revit 2014 or newer to work., AreaSeparator.FromCurve - Creates area separation lines from geometry curves. , PointSequences.ShortestPath - Retrieves the shortest path from a number of point sequences, TextAlignFlags.Middle - Returns the \"Left\" text align flag., Math.NormalizeRange - Normalizes a range of numbers, FamilyInstance.RemoveCoping - Removes a coping (cut) from a steel beam, DividedSurface.VerticalIntersectsByEndpoints - Creates a number of equally spaced vertical intersects for a divided surface based on the path between between two points. You may need to switch start point and end point., Element.ResetOverridesInView - Resets all overrides for an element in a given view, List.AnyFalse - Returns true if any item in a list of booleans is false., FamilyType.SetCompoundLayerWidth - Sets the width of a specified compound layer of a given family type (only applies to family types that have a compound structure, e.g. walls, floors etc.)., UnitType.DisplayUnitType - Retrieves the display unit type for a given unit type. , View.Scale - Returns the scale of a given view, Element.Phases - Gets the created and demolished phases of an element, Document.AddLink - Adds a link to a model to the current document, UV.Swap - Swaps U and V coordinates, Color.Purple - Returns the colour purple., TextAlignFlags.Bottom - Returns the \"Left\" text align flag., Angle.ExteriorAngle - Computes the exterior angle of a given angle., List.NormalizedSequence - Creates a sequence of N values between 0 and 1, List.SublistsContain - Looks for an item in each sublist of a given list and returns true/false for each sublist., Color.Red - Returns the colour red., VersionNumber.ToInteger - Converts a version number (e.g. a Dynamo version number) to an integer., Vector.YAxisNegative - Returns an XYZ of 0,-1,0, Color.Maroon - Returns the colour maroon., RoomTag.Room - Returns the room of a given room tag, TextAlignFlags.Center - Returns the \"Left\" text align flag., Math.IsEvenNumber - Checks if a number is even., WallType.Function - Retrieves the Function property of a given wall type, Color.Fuchsia - Returns the colour fuchsia a.k.a. magenta., Element.Panels - Retrieves the panels nested in a curtain wall, curtain system or glazed roof., WallLocationLine.CoreInterior - Returns the WallLocationLine option for CoreInterior, Element.ContainsTransparentMaterials - Checks if a given element contains transparent materials., Math.AlmostZero - Returns a feasable computational tolerance to zero (1.0e-9 or a billionth of 1) for use in calculations. More background info: https://github.com/DynamoDS/Dynamo/issues/879, View.SetDetailLevel - Sets the detail level of a given view, List.FibonacciFromList - Creates a Fibonacci row from a starting list (last two values) of a given length (starting values do *not* count toward length)., Color.Black - Returns the colour black., Clipboard.GetFrom - Gets the content of the clipboard. ATTENTION: Will only work with strings., List.WithLeadingZeroes - Adds leading zeros to a sequence of numbers, Category.Subcategories - Retrieves all the subcategories for a given category, Paneling.GridFromFace - Returns UV coordinates, XYZ coordinates and normals for a face with UV subdivision, List.RandomElements - Creates a list of random elements based on a given list of elements, FamilyType.SetCompoundLayerMaterial - Sets the material of a specified compound layer of a given family type (only applies to family types that have a compound structure, e.g. walls, floors etc.)., UV.RoundUpToPrecision - Rounds a UV coordinate *up* to a specified precision, RoomTag.SetType - Changes the family type of a given room tag to the specified type, DividedSurface.AddIntersect - Adds an intersect to a divided surface, Vector.IntersectionWithVector - Determines if two vectors intersect and returns the closest points of intersection on both vectors., DetailLevel.Fine - Returns the fine detail level, Geometry.FurthestFrom - Finds the furthest entity in a list of geometric entities from another given entity, WallLocationLine.CoreCenterline - Returns the WallLocationLine option for CoreCenterLine, Dimension.SetType - Changes the dimension type of a given dimension instance to the specified type, Wall.ByFace - Creates a wall on top of a face. The face typically needs to be the face of a mass surface in Revit., Color.White - Returns the colour white., View.SolarStudyTotalFrames - Retrieves the number of frames of a solar study for a given view (if the view's sun and shadow settings are indeed set to single or multi day study), Time.EvaluateLapTimes - Evaluates a list of lap times and returns the overall time, Schedule.KeyScheduleParameterName - If the schedule is a key schedule, the node returns the name of the key schedule parameter. , PointSequence.AccumulatedDistance - Retrieves the accumulated distances of a sequence of points, Document.ProjectParameters - Retrieves all project parameters and the categories they have been assigned to, Door.Rooms - Gets the rooms that are connected by a given door, View.SetDesignOption - Sets the view to a given design option. PLEASE NOTE: This node is kind of hacky. It does not use the design option settings in the visibility / graphic overrides. Instead it sets the view property \"Visible in Option\" to *one* specific design option - which also means that the symbolic representation of this view is only visible in views that display the given design options., Paneling.ShiftPlacementAndReverse - Shifts (integer) and reverses (bool) a given list, Hypotenuse.ByPythagoras - Computes the length of the hypotenuse of a right triangle using the Pythagorean Theorem. A and B are the legs / catheti of the triangle., TextElement.SetText - Sets the text of a given text element (i.e. text note or model text), CurtainPanel.HostPanel - Retrieves the host panel of a given curtain panel. This is typcially needed when wanting to access wall elements used as curtain panels., List.SortListOfLists - Sorts a list of lists by one of its sublists, Document.ProjectInfo - Gets the project information., Math.Normalize - Converts a value into a normalized value according to a value range, Color.Olive - Returns the colour olive., Elements.FilterByName - Retrieves those elements from a collection whose names match the search string, View.ConvertTemporaryHideIsolateToPermanent - Convert all temporary hidden elements or categories to permanently hidden in the given view., FamilyInstance.SuperComponent - Retrieves the supercomponent of a given family instance, ViewSheetSet.Views - Retrieves all the views/sheets in a given view/sheet set., WallLocationLine.CoreExterior - Returns the WallLocationLine option for CoreExterior, View.ViewTemplate - Returns the view template assigned to a given view (if one is assigned), Array.AssociatedFamilyParameter - Returns the associated family parameter of an array label (if any). PLEASE NOTE: This node will only work in a family document!, Element.Name+ - Gets an element's name (Dynamo's built-in Name nodes don't work for all element types, e.g. worksets...), Assembly.Disassemble - Disassembles an assembly and returns its members, View.CategoryIsVisible - Checks if a given category is visible in a given view, View.DetailLevel - Retrieves the detail level of a given view, Element.ByID - Gets the Revit element(s) for a list of IDs (or a single ID), View.DisableTemporaryHideIsolate - Disables the temporary hide/isolate for the given view (if set), View.Type - Returns the type of a given view, View.SetSolarStudyActiveFrameNumber - Sets the active frame number of the solar study in a given view, Document.ContainsElementsOfCategory - Checks if family instances of specified categories are present in the model., Color.Navy - Returns the colour navy., Point.Average - Determines the average of a list of points, Geometry.ClosestTo - Finds the closest entity in a list of geometric entities from another given entity, String.AlphanumericToMorse - Converts an alphanumeric string to Morse code, View.ResizeCropBox - Resizes the bounding box of a given Revit element by the specified amount in X, Y and Z direction. May need to be used in conjunction with a Transaction node., FamilyType.Duplicate - Duplicates a family type, Element.Workset - Retrieves the workset of a given element, PlaceholderSheet.ByNumberAndName - Creates placeholder sheets, DetailLevel.Medium - Returns the medium detail level, List.FromCSV - Converts the content of a given CSV file to a list, Workset.Kind - Retrieves the kind of a given workset, DirectShape.FromRevitGeometry - Creates a DirectShape from native Revit geometry objects, String.ReplaceIllegalFilenameCharacters - Replaces all characters in a string that are illegal characters for filenames, Element.Materials - Retrieves all materials froma given element, Element.OwnerView - Gets the owner view of a given Revit element (if possible), Element.Geometry+ - Returns Dynamo AND native Revit geometry of a given element, All View-Dependent Family Instances Of Category - Gets all view-dependent family instances in a given view for a given list of categories - useful for finding annotation elements, CustomNode.Info - Extracts information from a custom node., Room.InsertsOfBoundariesByCategory - Retrieves the inserts of the bounding elements of a given room - filtered by a given category., String.ReplaceRegularExpression - Replaces all occurences of a regular expression within a given string (or list of strings) with another string. The syntax for regular expressions is explained at\r\nhttp://ironpython-test.readthedocs.org/en/latest/howto/regex.html, All Placed Family Types of Category - Retrieves all family types of a given category that have *placed* instances, FamilyInstance.ByCurve - Places a line-based family instance on a given level, DividedSurface.HorizontalIntersectsByEndpoints - Creates a number of equally spaced horizontal intersects for a divided surface based on the path between between two points. , Color.Lime - Returns the colour lime., File.WriteToCSV - Writes data to a CSV file with a custom delimiter. Data inputs needs to contain strings only!, Side.ByLawOfSines - Determines the length of a side based on the law of sines. (Alpha is the angle opposite side A and beta is the angle opposite side B...), Subcategory.ByName - Creates a new subcategory for a given element category in a *family document* (unless a subcategory of that name already exists - in that case it returns the existing subcategory), Roof.SlabShapeHasBeenModified - Checks if the shape of a roof slab has been modified with the shape editing tools, Assembly.FromElements - Creates an assembly from a list of elements, Paneling.TriangularFlatDiagonal - Creates groups of points from a list of UVs or XYZs for the placement of triangular panels. The placement pattern can be reversed (boolean) and shifted (integer)., Wall.Flip - Flips the  orientation of a given wall - DO ***NOT*** USE IN AUTOMATIC MODE, Assembly.RemoveMembers - Removes any given elements to a given assembly., RevitUV.ToDynamoUV - Converts Revit UV coordinates to Dynamo UV coordinates, Directory.Contents+ - Unlike the built-in node Directory.Contents, this node browses a directory recursively and returns all relevant files contained in subfolders as well., SelectionSet.Elements - Retrieves all elements stored in a selection set, View.IsPerspective - Checks whether a given view is a perspective view., Part.SourceElement - Retrieves the element a given part was made from, UV.RoundToPrecision - Rounds a UV coordinate to a specified precision, SelectionSet.ByElements - Creates a selection set of the given elements. Note that if a selection set of the given name already exists in the model, its contents will be replaced. Also, if the selection set is already applied as a view filter, the view filter will have to be manually updated in the visibility / graphic overrides. DO ***NOT*** USE IN AUTOMATIC MODE!, Document.SynchronizeWithCentral - Synchronizes a workshared model with the central model., DesignOption.DesignOptionSet - Returns the design option set of a given design option, PerspectiveView.OrientToEyeAndTargetPosition - Sets the orientation of a given perspective view based on a given eye and target position, List.GroupListOfListsByKey - Groups a list of lists by one of its keys, Group.FromElements - Creates a group from a list of Revit elements, Paneling.QuadrilateralAlternatingRows - Creates groups of points from a list of UVs or XYZs for the placement of quadrilateral panels in alternating rows. The placement pattern can be reversed (boolean) and shifted (integer)., RoomSeparator.FromCurve - Creates room separation lines from geometry curves. , Paneling.QuadrilateralCheckerboard - Creates groups of points from a list of UVs or XYZs for the placement of quadrilateral panels in a checkerboard pattern. The placement pattern can be reversed (boolean) and shifted (integer)., Element.Level - Gets an element's level, All Family Types Of Category - Gets all family types/symbols of a given category in the model  (does *not *work for system families), Element.SetName - Gets the name of a given Revit element, FamilyInstance.SetType - Changes the family type of a given family instance to the specified type, View.Duplicate - Duplicates a given view, Room.IsUnbounded - Checks whether a room is unbounded., List.FilterBySublistLength - Filters out all sublists that do not have the specified length, Roof.SlabShapeByPoints - Transform a slab shape based on a list of XYZs. PLEASE NOTE: Will reset any previous edits on the slab shape., ReturnListOrSingleValue - If the unknown item is not a list but rather a single item, only the first item of the list (input \"seq\") will be returned., Level.Plane - Retrieves the plane of a given level, List.NormalizedSequenceByFunction - Creates a sequence of N values between 0 and 1 driven by a function, Elements.GroupByHost - Groups a list of Revit elements by their respective hosts (if they have any), DetailComponent.ByCurve - Places a line-based detail component in a given view, Point.RoundToPrecision - Rounds a point coordinate to a specified precision, InternalUnit.ToDisplayUnit - Converts a value from Revit's internal unit to a given display unit, All Families Of Category - Gets all famiies of a given category in the model  (does *not *work for system families), View.Direction - Returns the direction of a view, View.DuplicateAsDependent - Duplicates a given view as a dependent view, MassFloor.Mass - Gets the mass a given mass floor belongs to, TextAlignFlags.Right - Returns the \"Left\" text align flag., Triangle.SolveByPoints - Solves a triangle based on the XYZ coordinates of its vertices., TextAlignFlags.Top - Returns the \"Left\" text align flag., Angle.ByAngleSum - Computes the missing interior angle of a *planar* polygon based on a given list of all other interior angles. , Sheet.Scale - Returns the scale of a given sheet, Color.Silver - Returns the colour silver., Wall.CreationMethod - Retrieves the creation method of a given wall, UV.ConvexHull2D - Computes the convex hull of a given set of UV coordinates based on the monotone chain algorithm, BoundingBox.ByElement - Gets the bounding box of a Revit element, Element.FromDynamoSurface - Returns the underlying Revit element of a given face, PathGraph.ByPairs - Builds a path graph (Python dictionary) from a list of value pairs., RevitColor.FromDynamoColor - Creates a Revit color from a Dynamo color, Element.AssociatedFamilyParameters - Returns the associated family parameters of an element in a family (and the respective element parameters). PLEASE NOTE: This node will only work in a family document!, Surface.IsPlanar - Checks whether a face is planar, Application.Version - Retrieves the name, version and build of the current Revit application., FamilyDocument.CurrentFamilyType - Retrieves the current family type from the active family document. PLEASE NOTE: This node will only work in a family document!, SpotElevation.ByFloorPlanAndPoint - Places a spot elevation at a given point in a given floor plan., WallLocationLine.FinishFaceExterior - Returns the WallLocationLine option for FinishFaceExterior, Color.Grey - Returns the colour grey., DividedSurface.HorizontalIntersectsByEndpointsAndFunction - Creates a number of horizontal intersects (levels)for a divided surface based on the path between two points. The spacing of the intersects can be controlled by a function., List.MatchWithKeyValues - Matches a list with a given set of keys and returns the values corresponding to the keys, Math.IsMultipleOf - Checks if A is a multiple of B., Document.LoadFamily - A very crude implementation of family loading. Will *not* reload an already loaded family of the same name., RevisionCloud.FromElements - Create a revision cloud for a list of Revit elements, Document.Worksets - Returns all Worksets in the current document, RevitColor.ToDynamoColor - Converts Revit colors into Dynamo colors, Level.Views - Returns all views associated with a given level, Angle.ByLawOfCosines - Computes an angle of a triangle using the law of cosines. A is the opposite side of the triangle while B and C are the sides forming the angle., Material.Duplicate - Duplicates a material, TextAlignFlags.Left - Returns the \"Left\" text align flag., Element.AllInstancesAtLevel - Retrieves all instances of an element on a given level, FamilyInstance.ByPointInView - Places a family instance at a given point in a given view (e.g. a detail component)., String.MorseToAlphanumeric - Converts a string in Morse code to alphanumeric, BuiltInCategory.ByName - Looks up all the built-in categories based on a given name (or part of a name) of the category. Search is case-insensitive., All Elements of Family Type+ - Unlike the built-in  node, this node retrieves all placed instances of a given loadable *or* system family type, View.Phase - Returns the phase of a given view, FamilyInstance.CopingElements - Returns all elements used as coping cutters for a given element., Document.ActiveViewFromCurrentDocument - Gets the active view of the current document, Mesh.FaceVertices - Gets the vertices of each face of a given mesh, List.FibonacciFromValues - Creates a Fibonacci row from two starting values of a given length (starting values do *not* count toward length)., Vector.ZAxisNegative - Returns an XYZ of 0,0,-1, Paneling.BuildTriangularSublists - Creates sublists of three items each from a list based on given indices, shift and reverse settings and offset., Document.SaveAs - Saves the active Revit document under the given name., DividedSurface.VerticalIntersectsByEndpointsAndFunction - Creates a number of vertical intersects (reference planes) for a divided surface based on the path between between two points. The spacing can be controlled by a function. You may need to switch start point and end point., CurtainSystem.ByFace - Creates a curtain system on top of a face. The face typically needs to be the face of a mass surface in Revit., Math.Round+ - Rounds a number to a specified precision, String.FindRegularExpression - Returns all occurences of a regular expression within a string (or list of strings). The syntax for regular expressions is explained at\r\nhttp://ironpython-test.readthedocs.org/en/latest/howto/regex.html, FamilyType.CompoundStructureHasVariableLayer - Checks if the compound structure of a given floor or roof type contains a variable layer., FamilyParameter.Properties - Retrieves all properties of a given family parameter. PLEASE NOTE: This node will only work in a family document!, StructuralFoundation.Kind - Retrieves the kind of a given structural foundation (isolated, wall, slab)., FamilyType.CompoundStructureLayers - Retrieves the compound layers of any layered family type (wall types, roof types, floor types etc.), Point.IsOutOfPlane - Checks a list for XYZs that are not located on a given plane, Element.Category - Returns the category of a given element, List.ReplaceEmptyLists - Replaces all empty lists within a given list with a substitute, Element.JoinGeometry - Joins two model elements (if possible). Only works inside the project environment., Element.ParameterExists - Checks if an element contains a parameter of a given name, Room.Windows - Retrieves all windows that are associated with a room (hosted in walls and roofs)., FamilyInstance.FlipFromToRoom - Flips the settings of \"From Room\" and \"To Room\" for any given door or window instance. , Element.SetMaterialParameterByCategory - Sets a material parameter of a given element to <By Category>, List.CountOccurences - Counts the number of occurences of each unique element in a given list, FamilyInstance.FlipHandOrientation - Flips the hand orientation of a given family instance, RevitBoundingBox.FromDynamoBoundingBox - Turns a Dynamo bounding box into a Revit bounding box., String.MatchRegularExpression - Determines if a regular expression matches a string (or a list of strings) and returns a boolean value (or a list, depending on the input). The syntax for regular expressions is explained at\r\nhttp://ironpython-test.readthedocs.org/en/latest/howto/regex.html, Math.DecimalToHex - Converts a number to a string of its hexadecimal value, Time.LapTime - Records a timestamp and adds it to a given list of lap times. Also passes through an arbitrary variable for integration into a graph., Element.CopyByVector - Copies an element or a list of elements by a given vector., Floor.SlabShapeByPoints - Transform a slab shape based on a list of XYZs. PLEASE NOTE: Will reset any previous edits on the slab shape., String.CompileRegularExpression - This is a helper node for setting certain flags for the Regular Expresssion nodes.\r\nhttp://ironpython-test.readthedocs.org/en/latest/howto/regex.html, Document.Default3DView - Returns the default 3D view of the current model (if there is such a view), Cathetus.ByPythagoras - Computes the length of one of the catheti / legs of a right triangle using the Pythagorean Theorem. B is the other leg / cathetus of the triangle while C is the hypotenuse., Assembly.AddMembers - Adds any given elements to a given assembly., Point.RoundDownToPrecision - Rounds a point coordinate *down* to a specified precision, String.HexToDecimal - Converts a string of a hexadecimal value to a number, FamilyInstance.HandOrientation - Gets the hand orientation of a hosted object (e.g. a window or a door), Vector.IntersectionWithPlane - Finds the intersection point between a plane and a vector, Math.Floor+ - Rounds a number *down* to a specified precision, List.EqualSublistLengths - Trims all given lists to the length of the shortest list, WallLocationLine.FinishFaceInterior - Returns the WallLocationLine option for FinishFaceInterior, Roof.CreationMethod - Retrieves the creation method of a given roof, View.UsesViewFilters - Checks if a given view has any view filters applied to it., Buckyball.ByOriginAndRadius - Returns all the data necessary for modeling a truncated icosahedron (vertices and struts) as well as the surface area and volume. , Point.CentralProjectionOnFace - Projects a list of points onto a given face, Vector.XAxisNegative - Returns an XYZ of -1,0,0, Grid.Plane - Retrieves the plane of a grid, Clipboard.SendTo - Copies a string to the clipboard. , GlobalParameter.GetValue - Gets the value of a global parameter (only in Revit 2016 R2 or later)., Element.Inserts - Gets all the objects inserted into a given element., Vector.IsOrthogonalToVector - Checks if two vectors are orthogonal to each other, Element.IsRelatedToMass - Returns true if an object (wall, roof, floor or curtain system) has been modelled by face and the underlying mass still exists in the project., DetailLine.FromCurve - Creates a detail line based on a given curve, BoundingBox.PerimeterCurvesByNormal - Returns the perimeter curve of a bounding box on a plane determined by a given normal and the centroid of the bounding box, List.SublistLengths - Gets the lengths of all sublists in a given list of lists., WallType.Kind - Retrieves the wall kind of a given wall type, List.FromString - Chops up a string into a list of characters, FamilyType.FamilyName - Returns the *family* name of a given family *type*, FamilyDocument.FamilyTypes - Retrieves all family types from the active family document. PLEASE NOTE: This node will only work in a family document!, String.BinaryToDecimal - Converts a string of a binary number into a decimal value, Paneling.Quadrilateral2byX - Keine Beschreibung angegeben, Room.AtPointInPhase - Tries to retrieve a room element at the given location for the given phase., List.JoinByKey - Joins two lists by common keys., Room.InsertsOfBoundaries - Retrieves the inserts of the bounding elements of a given room., Point.RoundUpToPrecision - Rounds a point coordinate *up* to a specified precision, Color.Green - Returns the colour green., Dimension.AssociatedFamilyParameter - Returns the associated family parameter of a dimension label (if any). PLEASE NOTE: This node will only work in a family document!, Element.CutGeometry - Adds a solid-solid cut for two model elements (if possible). , Room.Doors - Retrieves all doors that are associated with a room (hosted in walls and roofs)., Character.ToNumber - Converts an Excel-style character to a number (e.g. A = 1, AA = 27 etc.)., Passthrough - Forces a sequential order of execution. The node wired into the output of the Passthrough node will be executed *after* the node wired into the waitFor input (e.g. important for some Revit operations). The value of the passThrough input will be passed on to the node wired into the output port of the Passthrough node., Math.RandomIntegerList - Creates a list of random integers between 0 and a given maximum value, View3D.IsLocked - Checks if a given view is locked, List.AlphabeticalSequence - Creates a list of the first N letters of the alphabet  (where 1 = A, 2 = B, ... , 27 = AA, 28 = AB etc.)., FamilyInstance.FlipFacingOrientation - Flips the facing orientation of a given family instance, List.CountBooleanSequences - Retrieves the lengths of uninterrupted sequences of booleans (true or false) in a given list., Element.ID - Gets the ID(s) for a list of Revit elements (or a single element) - unlike the built-in Element.Id node, this node returns an actual Revit Element ID and *not* a number, DividedSurface.EvaluateGridNodes - Returns UV and XYZ coordinates as well as surface normals for all grid nodes of a given divided surface. Also returns the underlying face., PathGraph.AllPaths - Finds all possible paths between two nodes.  The connections input expects a list of value pairs., Paneling.InvertAndMirrorNormalizedValues - Inverts and mirrors (horizontally & vertically) a nested list of normalized values., Document.Views - Gets all views in the document - except for 3D view templates (as long as this bug is not fixed: https://github.com/DynamoDS/Dynamo/issues/2970), Paneling.TriangularSubpattern - Subcomponent of the Triangular Pattern From Grid node., Angle.ByLawOfSines - Determines the angle of a triangle based on the law of sines. (Alpha is the angle opposite side A and beta is the angle opposite side B...), SpaceSeparator.FromCurve - Creates space separation lines from geometry curves. , List.AnyTrue - Returns true if any item in a list of booleans is true., Element.AllViewDependentInstances - Retrieves all instances of a view-dependent element in a given view, Math.ScaleNormalized - Scales a normalized value according to a given minimum and maximum, Element.IsOfCategory - Checks whether an element is of a specified category, Math.InvertNormalized - Inverts a value between 0 and 1 to its opposite (1-x), View.IsViewTemplate - Checks if a given view is a view template, Color.Aqua - Returns the colour aqua., View.Plane - Retrieves the plane of a given view, Element.ElevationOfHostLevel - Returns the elevation of the level a given element is associated with, TextElement.Text - Gets the text stored in a text element (i.e. text note or model text), List.RepeatItemsByLengths - Repeats a list of items into sublists of given lengths, Color.Blue - Returns the colour blue., -1 - Decrements a value by 1, Plane.ByBestFitFromFace - Creates a plane from face, Document.ProjectParametersByCategory - Retrieves all project parameters for a given category, Plane.ByFirst3Points - Returns a plane, its origin and its normal based on the first three XYZs in a given list, Element.TemporarilyIsolateInView - (Temporarily) isolates elements in the given view, RevisionCloud.FromCurves - Creates a revision cloud from a list of geometry curves. , ModelCurve.Type - Gets the type of a given model curve, Element.Area - Returns the area property of a given element (if that element has such a property), List.ReplaceItemAtIndex+ - Replaces the item at a given index (or list of indices) of a list by another item, Mesh.IntersectionWithPlane - Calculates the intersection of a mesh and a plane, Topography.IntersectionWithPlane - Calculates the intersection of a toposurface and a plane, +1 - Increments a value by 1, Document.IsWorkshared - Returns true if the current project is workshared, List.Chop+ - Turns a list into a list of lists with sublists of varying lengths., Character.FromNumber - Converts a number into a character (where 1 = A, 2 = B, ... , 27 = AA, 28 = AB etc.)., Element.OverrideTransparencyInView - Overrides the transparency of an element in a given view, Sheet.Schedules - Returns all schedules placed on a specified sheet , Vector.IsInPlane - Checks if a given vector is located on a given plane, Document.BuiltInCategories - List all the available BuiltInCategories, Vector.PruneDuplicates - Prune vectors to exclude duplicates within a given tolerance, Switch - Emulates the Switch/Case statement that is  available in multiple programming languages., Element.ExternalFileReferencePath - Returns the full path of an element's external file reference as as string, OppositeSide.ByLawOfCosines - Computes the length of the missing side of a triangle using the law of cosines. Gamma is the angle between sides A and B., BuiltInParameter.ByName - Looks up all the built-in parameters based on a given name (or part of a name) of the parameters. Search is case-insensitive., FamilyInstance.SetLevel - Sets the level property of a family instance. Family instance will move accordingly., DetailLevel.Coarse - Returns the coarse detail level, Paneling.Hexagonal - Creates groups of points from a list of UVs or XYZs for the placement of hexagonal panels. The placement pattern can be reversed (boolean) and shifted (integer)., FamilyInstance.SubComponents - Retrieves all subcomponents of a given family instance, Material.Properties - Retrieves a number of properties froma given material, List.IsNotEmpty - Just the inversion of the built-in Is Empty List node., Document.LinksAndImports - Gets all linked and imported files in the document. NOTE: Does *not* retrieve linked Revit files., UV.RoundDownToPrecision - Rounds a UV coordinate *down* to a specified precision, Color.Teal - Returns the colour teal., Curve.ClosedLoopThroughPoints - Creates a *closed* loop of curves based on a given list of points, FootingType.BreaksAtInserts - Determines whether a list of wall footing types break at inserts in their attached walls, Math.DecimalToBinary - Converts a number to a string of its binary value, String.Replace+ - Replaces multiple items in a given string. Items in the string have to be denoted as {0], {1}, ..., {n} - corresponding to the respective list index of the replacement string., Document.ProjectPosition - Gets the project's position data relative to the origin. Use the built-in nodes Location.Latitude & Location.Longitude to retrieve latitude and longitude., UV.PruneDuplicates - Prune UVs to exclude duplicates within a given tolerance, Color.Yellow - Returns the colour yellow., UV.Average - Determines the average of a list of UVs, Element.SetWorkset - Sets the workset of a given element, AngleBisector.ByPoints - Retrieves the vector of an angle bisector at point B based on three points (A, B, C) that define the angle. , List.ReplaceNull - Replaces all null values within a given list with a substitute, Element.CopyToLevel - Copies an element or a list of elements to a given level. Preserves the element's transform. PLEASE NOTE: This node only works for levels that have at least one view (e.g. floor plan) associated with them., Document.DesignOptions - Returns all design options in the model, grouped by design option set, Normal.CorrectOrientation - Inverts normal A if its inversion is closer to normal B, Roof.Kind - Retrieves the roof kind (Basic, Glazed, Other). PLEASE NOTE: Roofs that were created by face will be identified as 'Other', Point.CentralProjectionOnPlane - Projects a list of points onto a given plane, UV.IsInsidePolygon - Determines if a point is inside the space enclosed by a polygon, DimensionType.Style - Gets the style of a given Revit dimension type, BoundingBox.ByElements - Retrieves a bounding box for a list of elements, RoomSequence.ToDoorSequence - Retrieves a sequence of doors connecting a given sequence of rooms (if possible), Element.AllInstances - Retrieves all instances of a given element, Vector.IsParallelToPlane - Checks if a given vector is parallel to a given plane, String.SplitByRegularExpression - Splits a given string by a regular expression. The syntax for regular expressions is explained at\r\nhttp://ironpython-test.readthedocs.org/en/latest/howto/regex.html, WallLocationLine.WallCenterline - Returns the WallLocationLine option for WallCenterLine, Element.ParameterIsReadOnly - Checks if a parameter of a given element is read-only, Surface.FilterByOrientation - Sorts surfaces in three lists based on their orientation (vertical, horizontal up & horizontal down) and also returns three corresponding lists of booleans., Element.PermanentlyIsolateInView - (Permanently) isolates elements in the given view, FamilyDocument.FamilyParameters - Retrieves all family parameters from the active family document. PLEASE NOTE: This node will only work in a family document!, ThirdXYZAxis.ByTwoVectors - Given two main XYZ axes (or vectors pointing more or less in thei general direction), this node will find the third axis., Floor.SlabShapeHasBeenModified - Checks if the shape of a floor slab has been modified with the shape editing tools, Document.Phases - Retrieves all phases in the active document in *chronological* order, Paneling.DropLastRowAndColumn - Drops the last row and column from a UV field",
            "engine_metadata": "",
            "engine_version": "1.0.0.1180",
            "created": "2017-03-27T06:33:57.722Z",
            "full_dependency_versions": [ "1.0.3" ],
            "full_dependency_ids": [
              {
                "_id": "57ddac02882d868b42000012",
                "name": "Clockwork for Dynamo 1.x"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "1.0.3"
          }
        ],
        "latest_version_update": "2017-03-27T06:33:57.722Z",
        "num_versions": 4,
        "comments": [ ],
        "num_comments": 0,
        "latest_comment": "1970-01-01T00:00:00.000Z",
        "votes": 9,
        "downloads": 15831,
        "repository_url": "https://github.com/andydandy74/ClockworkForDynamo",
        "site_url": "https://github.com/andydandy74/ClockworkForDynamo",
        "banned": false,
        "deprecated": false,
        "group": "Bad Monkeys",
        "engine": "dynamo",
        "license": "",
        "used_by": [
          {
            "_id": "562f91e4662bf0e9080002af",
            "name": "DynamoAutomation"
          },
          {
            "_id": "57e90783b135d45974000017",
            "name": "TheOmniaFiles"
          },
          {
            "_id": "57bc2ef24172a48a350000bc",
            "name": "BIM4Struc.BridgeDesign"
          },
          {
            "_id": "564dc5a3662bf0e90800035b",
            "name": "Landform"
          },
          {
            "_id": "555e8bfea8367b98610000b8",
            "name": "Bakery"
          },
          {
            "_id": "5835897f7332da0d25000003",
            "name": "Summerisle"
          },
          {
            "_id": "5832c9d65af9f3713d0000d3",
            "name": "LRCZ"
          },
          {
            "_id": "587c08aaca6a5edb65000032",
            "name": "RollingPin"
          },
          {
            "_id": "58934ae6ca6a5edb650000fd",
            "name": "Custom Filter 112124"
          },
          {
            "_id": "58a1da1361de68010800005a",
            "name": "CheapWine"
          },
          {
            "_id": "58bed0cef4db78ec010000ad",
            "name": "Conco Custom"
          },
          {
            "_id": "58cf622af4db78ec01000134",
            "name": "Structural Framing Optimization"
          },
          {
            "_id": "57ebcea9b135d45974000031",
            "name": "KC Star"
          },
          {
            "_id": "559c28d4f2ae5a9a0700011e",
            "name": "BesideTheCursor"
          },
          {
            "_id": "58ef59b719da52d31a00001c",
            "name": "LRCZ_Elements.Bake"
          }
        ],
        "num_dependents": 15,
        "description": "Clockwork is a collection of 380+ custom nodes. It contains many Revit-related nodes, but also lots of nodes for various other purposes such as list management, mathematical operations, string operations, geometric operations (mainly bounding boxes, planes, points, surfaces, UVs and vectors) and paneling. More information: https://github.com/andydandy74/ClockworkForDynamo ",
        "maintainers": [
          {
            "_id": "51fa7982e2f476ca0500000f",
            "username": "andydandy"
          }
        ],
        "keywords": [ "clockwork", "bad", "monkeys" ],
        "created": "2016-09-17T20:48:02.684Z"
      },
      {

        "_id": "545a51aa893c653357000008",
        "__v": 86,
        "name": "SteamNodes",
        "white_list": false,
        "versions": [
          {
            "_id": "545a51aa893c653357000009",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/4daf68fa-7127-4b10-80b9-818c1327bc81gregPkg886.zip",
            "contents": "Tool.EraserByName - Erase things from a list, matching a string|ContainsPythonScripts(58B25C0B-CBBE-4DDC-AC39-ECBEB8B55B10)",
            "engine_metadata": "",
            "engine_version": "0.7.2.2921",
            "created": "2014-11-05T16:34:50.452Z",
            "full_dependency_versions": [ "0.7.0" ],
            "full_dependency_ids": [
              {
                "_id": "545a51aa893c653357000008",
                "name": "SteamNodes"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "0.7.0"
          },
          {
            "_id": "545a549d893c65335700000a",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/f5a0925f-7910-4ebc-97ef-63429c5a6643gregPkg815.zip",
            "contents": "Element.TypeName - Get Type Name as string, Tool.EraserByName - Erase things from a list, matching a string|ContainsPythonScripts(58B25C0B-CBBE-4DDC-AC39-ECBEB8B55B10)",
            "engine_metadata": "",
            "engine_version": "0.7.2.2921",
            "created": "2014-11-05T16:47:25.597Z",
            "full_dependency_versions": [ "0.7.1" ],
            "full_dependency_ids": [
              {
                "_id": "545a51aa893c653357000008",
                "name": "SteamNodes"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "0.7.1"
          },
          {
            "_id": "545a55a9893c65335700000b",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/a9309837-4c42-49bc-bd58-0078c83df88egregPkg915.zip",
            "contents": "Analytical.CreateLineBoundaryCondition - Create Line Boundary Condition from Analytical Line, Element.TypeName - Get Type Name as string, Tool.EraserByName - Erase things from a list, matching a string|ContainsPythonScripts(58B25C0B-CBBE-4DDC-AC39-ECBEB8B55B10)",
            "engine_metadata": "",
            "engine_version": "0.7.2.2921",
            "created": "2014-11-05T16:51:53.507Z",
            "full_dependency_versions": [ "0.7.11" ],
            "full_dependency_ids": [
              {
                "_id": "545a51aa893c653357000008",
                "name": "SteamNodes"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "0.7.11"
          },
          {
            "_id": "545bdb35895fdbc25e000005",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/7522cef6-bcd6-4eb0-aa4e-d8a8c4ee9b2cgregPkg288.zip",
            "contents": "Analytical.CreateLineBoundaryCondition - Create Line Boundary Condition from Analytical Line, Element.MakeParts - Create parts from elements, Element.Parts.Getparents - Returns parents of selected Parts, Element.SelectInView - Select the input elements in active view, Element.TypeName - Get Type Name as string, Tool.Eraser - Try to delete any element from project, Eraser by name - erase things in a list, selected by the name, View.ApplyViewTemplate - Applies a view template to any given view(s). Supply a string with a view template name.|ContainsPythonScripts(58B25C0B-CBBE-4DDC-AC39-ECBEB8B55B10)",
            "engine_metadata": "",
            "engine_version": "0.7.2.2921",
            "created": "2014-11-06T20:33:57.979Z",
            "full_dependency_versions": [ "0.7.12" ],
            "full_dependency_ids": [
              {
                "_id": "545a51aa893c653357000008",
                "name": "SteamNodes"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "0.7.12"
          },
          {
            "_id": "545bdbb9895fdbc25e000006",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/2bc8359d-4803-4d52-b2c2-a645baf69934gregPkg386.zip",
            "contents": "Analytical.CreateLineBoundaryCondition - Create Line Boundary Condition from Analytical Line, Element.MakeParts - Create parts from elements, Element.Parts.Getparents - Returns parents of selected Parts, Element.SelectInView - Select the input elements in active view, Element.TypeName - Get Type Name as string, Tool.Eraser - Try to delete any element from project, Tool.EraserByName - erase things in a list, selected by the name, View.ApplyViewTemplate - Applies a view template to any given view(s). Supply a string with a view template name.|ContainsPythonScripts(58B25C0B-CBBE-4DDC-AC39-ECBEB8B55B10)",
            "engine_metadata": "",
            "engine_version": "0.7.2.2921",
            "created": "2014-11-06T20:36:09.425Z",
            "full_dependency_versions": [ "0.7.13" ],
            "full_dependency_ids": [
              {
                "_id": "545a51aa893c653357000008",
                "name": "SteamNodes"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "0.7.13"
          },
          {
            "_id": "545bdf98895fdbc25e000007",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/fefbda53-b6d9-4e51-ac99-b140a9ea4291gregPkg159.zip",
            "contents": "Analytical.CreateLineBoundaryCondition - Create Line Boundary Condition from Analytical Line, Element.MakeParts - Create parts from elements, Element.Parts.Getparents - Returns parents of selected Parts, Element.SelectInView - Select the input elements in active view, Element.TypeName - Get Type Name as string, List.FilterByString - Filter a list by a string match, List.Operations - List A-B / List Intersection / List symmetric difference, Tool.CreateRoomAtPointAndLevel - create rooms from center points at Level, Tool.Eraser - Try to delete any element from project, Tool.EraserByName - erase things in a list, selected by the name, Tool.GetLineStyleByName - Collects LineStyle from string.contains, Tool.GetPhaseByName - Get Document Phases by String, Tool.GetRevitSelection - get the selection from the revit UI, works for views, Tool.PlaceGroupAtPoint - place a given group at given points, View.ApplyViewTemplate - Applies a view template to any given view(s). Supply a string with a view template name.|ContainsPythonScripts(58B25C0B-CBBE-4DDC-AC39-ECBEB8B55B10)",
            "engine_metadata": "",
            "engine_version": "0.7.2.2921",
            "created": "2014-11-06T20:52:40.070Z",
            "full_dependency_versions": [ "0.7.14" ],
            "full_dependency_ids": [
              {
                "_id": "545a51aa893c653357000008",
                "name": "SteamNodes"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "0.7.14"
          },
          {
            "_id": "545be41b895fdbc25e000008",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/f8062408-36ae-4a21-b6ab-b1214ec75b7agregPkg79.zip",
            "contents": "Analytical.CreateLineBoundaryCondition - Create Line Boundary Condition from Analytical Line, Analytical.CreateLineLoadBeta - beta 1, Element.Create 3D Cropped view - create 3d view for each element and crop view, Element.GetFromLinkedFile - Get elements from link document instance based on category, Element.MakeParts - Create parts from elements, Element.Parts.Getparents - Returns parents of selected Parts, Element.SelectInView - Select the input elements in active view, Element.TypeName - Get Type Name as string, List.FilterByString - Filter a list by a string match, List.Operations - List A-B / List Intersection / List symmetric difference, Tool.CreateRoomAtPointAndLevel - create rooms from center points at Level, Tool.Eraser - Try to delete any element from project, Tool.EraserByName - erase things in a list, selected by the name, Tool.GetLineStyleByName - Collects LineStyle from string.contains, Tool.GetPhaseByName - Get Document Phases by String, Tool.GetRevitSelection - get the selection from the revit UI, works for views, Tool.PlaceGroupAtPoint - place a given group at given points, View.ApplyViewTemplate - Applies a view template to any given view(s). Supply a string with a view template name.|ContainsPythonScripts(58B25C0B-CBBE-4DDC-AC39-ECBEB8B55B10)",
            "engine_metadata": "",
            "engine_version": "0.7.2.2921",
            "created": "2014-11-06T21:11:55.973Z",
            "full_dependency_versions": [ "0.7.15" ],
            "full_dependency_ids": [
              {
                "_id": "545a51aa893c653357000008",
                "name": "SteamNodes"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "0.7.15"
          },
          {
            "_id": "545beace895fdbc25e000009",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/4ac38596-aa1b-4de1-83f5-4a3668107f24gregPkg403.zip",
            "contents": "Analytical.CreateLineBoundaryCondition - Create Line Boundary Condition from Analytical Line, Analytical.CreateLineLoadBeta - beta 1, Element.Create 3D Cropped view - create 3d view for each element and crop view, Element.GetFromLinkedFile - Get elements from link document instance based on category, Element.MakeParts - Create parts from elements, Element.Parts.Getparents - Returns parents of selected Parts, Element.SelectInView - Select the input elements in active view, Element.TypeName - Get Type Name as string, List.FilterByString - Filter a list by a string match, List.Operations - List A-B / List Intersection / List symmetric difference, Schedule.GetCalculatedValues - Get Schedule Calculated Values from name input, Schedule.GetTextFromHeader - from Viewschedule input, returns columns header values as text, Tool.AddVoidCut - Add void cut for a Set of elements. In combination with Get surrounding elements node., Tool.CreateRoomAtPointAndLevel - create rooms from center points at Level, Tool.ElementsInGroup - returns elements from a given group, selected by his name, Tool.Eraser - Try to delete any element from project, Tool.EraserByName - erase things in a list, selected by the name, Tool.GetLineStyleByName - Collects LineStyle from string.contains, Tool.GetPhaseByName - Get Document Phases by String, Tool.GetRevitSelection - get the selection from the revit UI, works for views, Tool.GetSurroundingElements - Get Surrounding Elements by Categories, group them  as  List. Tolerance distance available., Tool.PlaceGroupAtPoint - place a given group at given points, Tool.RemoveVoidCut - Add void cut for a Set of elements. In combination with Get surrounding elements node., View.ApplyViewTemplate - Applies a view template to any given view(s). Supply a string with a view template name., Wall.GetTotalWidth - Get Wall's  Total Width parameter|ContainsPythonScripts(58B25C0B-CBBE-4DDC-AC39-ECBEB8B55B10)",
            "engine_metadata": "",
            "engine_version": "0.7.2.2921",
            "created": "2014-11-06T21:40:30.503Z",
            "full_dependency_versions": [ "0.7.16" ],
            "full_dependency_ids": [
              {
                "_id": "545a51aa893c653357000008",
                "name": "SteamNodes"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "0.7.16"
          },
          {
            "_id": "545bf577895fdbc25e00000a",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/b85e1335-d3bd-4565-b0db-27c1232103d0gregPkg608.zip",
            "contents": "Analytical.CreateLineBoundaryCondition - Create Line Boundary Condition from Analytical Line, Analytical.CreateLineLoadBeta - beta 1, Element.Create 3D Cropped view - create 3d view for each element and crop view, Element.GetFromLinkedFile - Get elements from link document instance based on category, Element.MakeParts - Create parts from elements, Element.Parts.Getparents - Returns parents of selected Parts, Element.SelectInView - Select the input elements in active view, Element.TypeName - Get Type Name as string, List.FilterByString - Filter a list by a string match, List.Operations - List A-B / List Intersection / List symmetric difference, Schedule.GetCalculatedValues - Get Schedule Calculated Values from name input, Schedule.GetTextFromHeader - from Viewschedule input, returns columns header values as text, Tool.AddVoidCut - Add void cut for a Set of elements. In combination with Get surrounding elements node., Tool.CreateRoomAtPointAndLevel - create rooms from center points at Level, Tool.ElementsInGroup - returns elements from a given group, selected by his name, Tool.Eraser - Try to delete any element from project, Tool.EraserByName - erase things in a list, selected by the name, Tool.GetLineStyleByName - Collects LineStyle from string.contains, Tool.GetPhaseByName - Get Document Phases by String, Tool.GetRevitSelection - get the selection from the revit UI, works for views, Tool.GetSurroundingElements - Get Surrounding Elements by Categories, group them  as  List. Tolerance distance available., Tool.PlaceGroupAtPoint - place a given group at given points, Tool.RemoveVoidCut - Add void cut for a Set of elements. In combination with Get surrounding elements node., View.ApplyViewTemplate - Applies a view template to any given view(s). Supply a string with a view template name., Wall.GetTotalWidth - Get Wall's  Total Width parameter|ContainsPythonScripts(58B25C0B-CBBE-4DDC-AC39-ECBEB8B55B10)",
            "engine_metadata": "",
            "engine_version": "0.7.2.2921",
            "created": "2014-11-06T22:25:59.715Z",
            "full_dependency_versions": [ "0.7.20" ],
            "full_dependency_ids": [
              {
                "_id": "545a51aa893c653357000008",
                "name": "SteamNodes"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "0.7.20"
          },
          {
            "_id": "546524bab77c84600c000005",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/e1f343b0-1270-49f8-aefa-3364a6995f9bgregPkg299.zip",
            "contents": "Analytical.CreateLineBoundaryCondition - Create Line Boundary Condition from Analytical Line, Analytical.CreateLineLoadBeta - beta 1, Element.Create 3D Cropped view - create 3d view for each element and crop view, Element.GetFromLinkedFile - Get elements from link document instance based on category, Element.MakeParts - Create parts from elements, Element.Parts.Getparents - Returns parents of selected Parts, Element.SelectInView - Select the input elements in active view, Element.TypeName - Get Type Name as string, List.FilterByString - Filter a list by a string match, List.Operations - List A-B / List Intersection / List symmetric difference, Schedule.GetCalculatedValues - Get Schedule Calculated Values from name input, Schedule.GetTextFromHeader - from Viewschedule input, returns columns header values as text, Tool.AddVoidCut - Add void cut for a Set of elements. In combination with Get surrounding elements node., Tool.CreateRoomAtPointAndLevel - create rooms from center points at Level, Tool.ElementsInGroup - returns elements from a given group, selected by his name, Tool.Eraser - Try to delete any element from project, Tool.EraserByName - erase things in a list, selected by the name, Tool.GetLineStyleByName - Collects LineStyle from string.contains, Tool.GetPhaseByName - Get Document Phases by String, Tool.GetRevitSelection - get the selection from the revit UI, works for views, Tool.GetSurroundingElements - Get Surrounding Elements by Categories, group them  as  List. Tolerance distance available., Tool.PlaceGroupAtPoint - place a given group at given points, Tool.RemoveVoidCut - Add void cut for a Set of elements. In combination with Get surrounding elements node., View.ApplyViewTemplate - Applies a view template to any given view(s). Supply a string with a view template name., Wall.GetTotalWidth - Get Wall's  Total Width parameter|ContainsPythonScripts(58B25C0B-CBBE-4DDC-AC39-ECBEB8B55B10)",
            "engine_metadata": "",
            "engine_version": "0.7.2.13394",
            "created": "2014-11-13T21:38:02.464Z",
            "full_dependency_versions": [ "0.7.21" ],
            "full_dependency_ids": [
              {
                "_id": "545a51aa893c653357000008",
                "name": "SteamNodes"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "0.7.21"
          },
          {
            "_id": "546b697fb77c84600c00000f",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/81ebd58e-ffdd-4ab5-b8bf-7688896cf99fgregPkg318.zip",
            "contents": "Analytical.CreateLineBoundaryCondition - Create Line Boundary Condition from Analytical Line, Analytical.CreateLineLoadBeta - beta 1, Element.Create 3D Cropped view - create 3d view for each element and crop view, Element.GetFromLinkedFile - Get elements from link document instance based on category, Element.MakeParts - Create parts from elements, Element.Parts.Getparents - Returns parents of selected Parts, Element.SelectInView - Select the input elements in active view, Element.TypeName - Get Type Name as string, List.FilterByString - Filter a list by a string match, List.Operations - List A-B / List Intersection / List symmetric difference, Schedule.GetCalculatedValues - Get Schedule Calculated Values from name input, Schedule.GetTextFromHeader - from Viewschedule input, returns columns header values as text, Tool.AddVoidCut - Add void cut for a Set of elements. In combination with Get surrounding elements node., Tool.CreateRoomAtPointAndLevel - create rooms from center points at Level, Tool.ElementsInGroup - returns elements from a given group, selected by his name, Tool.Eraser - Try to delete any element from project, Tool.EraserByName - erase things in a list, selected by the name, Tool.GetLineStyleByName - Collects LineStyle from string.contains, Tool.GetPhaseByName - Get Document Phases by String, Tool.GetRevitSelection - get the selection from the revit UI, works for views, Tool.GetSurroundingElements - Get Surrounding Elements by Categories, group them  as  List. Tolerance distance available., Tool.PlaceGroupAtPoint - place a given group at given points, Tool.RemoveVoidCut - Add void cut for a Set of elements. In combination with Get surrounding elements node., View.ApplyViewTemplate - Applies a view template to any given view(s). Supply a string with a view template name., Wall.GetTotalWidth - Get Wall's  Total Width parameter",
            "engine_metadata": "",
            "engine_version": "0.7.4.3143",
            "created": "2014-11-18T15:45:03.181Z",
            "full_dependency_versions": [ "0.7.22" ],
            "full_dependency_ids": [
              {
                "_id": "545a51aa893c653357000008",
                "name": "SteamNodes"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "0.7.22"
          },
          {
            "_id": "547e35e9fa779c1c11000008",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/ec87a6de-6c0a-4939-9c34-32a61620dac3gregPkg224.zip",
            "contents": "Analytical.CreateLineBoundaryCondition - Create Line Boundary Condition from Analytical Line, Analytical.CreateLineLoadBeta - beta 1, Element.Create 3D Cropped view - create 3d view for each element and crop view, Element.GetFromLinkedFile - Get elements from link document instance based on category, Element.MakeParts - Create parts from elements, Element.Parts.Getparents - Returns parents of selected Parts, Element.SelectInView - Select the input elements in active view, Element.TypeName - Get Type Name as string, List.FilterByString - Filter a list by a string match, List.Operations - List A-B / List Intersection / List symmetric difference, Schedule.GetCalculatedValues - Get Schedule Calculated Values from name input, Schedule.GetTextFromHeader - from Viewschedule input, returns columns header values as text, Tool.AddVoidCut - Add void cut for a Set of elements. In combination with Get surrounding elements node., Tool.CreateRoomAtPointAndLevel - create rooms from center points at Level, Tool.ElementsInGroup - returns elements from a given group, selected by his name, Tool.Eraser - Try to delete any element from project, Tool.EraserByName - erase things in a list, selected by the name, Tool.GetLineStyleByName - Collects LineStyle from string.contains, Tool.GetPhaseByName - Get Document Phases by String, Tool.GetRevitSelection - get the selection from the revit UI, works for views, Tool.GetSurroundingElements - Get Surrounding Elements by Categories, group them  as  List. Tolerance distance available., Tool.PlaceGroupAtPoint - place a given group at given points, Tool.RemoveVoidCut - Add void cut for a Set of elements. In combination with Get surrounding elements node., Tool.Toggle - Offers 2 ways for output, View.ApplyViewTemplate - Applies a view template to any given view(s). Supply a string with a view template name., Wall.GetTotalWidth - Get Wall's  Total Width parameter",
            "engine_metadata": "",
            "engine_version": "0.7.5.3346",
            "created": "2014-12-02T21:58:01.521Z",
            "full_dependency_versions": [ "0.7.23" ],
            "full_dependency_ids": [
              {
                "_id": "545a51aa893c653357000008",
                "name": "SteamNodes"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "0.7.23"
          },
          {
            "_id": "54c24d7cdcee4dfd26000083",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/e5b720b5-ba55-4130-ad96-c90b42cd1fecgregPkg770.zip",
            "contents": "Analytical.CreateLineBoundaryCondition - Create Line Boundary Condition from Analytical Line, Analytical.CreateLineLoadBeta - beta 1, Element.Create 3D Cropped view - create 3d view for each element and crop view, Element.GetFromLinkedFile - Get elements from link document instance based on category, Element.MakeParts - Create parts from elements, Element.Parts.Getparents - Returns parents of selected Parts, Element.SelectInView - Select the input elements in active view, Element.TypeName - Get Type Name as string, List.FilterByString - Filter a list by a string match, List.Operations - List A-B / List Intersection / List symmetric difference, Schedule.GetCalculatedValues - Get Schedule Calculated Values from name input, Schedule.GetTextFromHeader - from Viewschedule input, returns columns header values as text, Tool.AddVoidCut - Add void cut for a Set of elements. In combination with Get surrounding elements node., Tool.CreateRoomAtPointAndLevel - create rooms from center points at Level, Tool.ElementsInGroup - returns elements from a given group, selected by his name, Tool.Eraser - Try to delete any element from project, Tool.EraserByName - erase things in a list, selected by the name, Tool.GetLineStyleByName - Collects LineStyle from string.contains, Tool.GetPhaseByName - Get Document Phases by String, Tool.GetRevitSelection - get the selection from the revit UI, works for views, Tool.GetSurroundingElements - Get Surrounding Elements by Categories, group them  as  List. Tolerance distance available., Tool.PlaceGroupAtPoint - place a given group at given points, Tool.RemoveVoidCut - Add void cut for a Set of elements. In combination with Get surrounding elements node., Tool.Toggle - Offers 2 ways for output, View.ApplyViewTemplate - Applies a view template to any given view(s). Supply a string with a view template name., Wall.GetTotalWidth - Get Wall's  Total Width parameter",
            "engine_metadata": "",
            "engine_version": "0.7.6.3867",
            "created": "2015-01-23T13:32:44.175Z",
            "full_dependency_versions": [ "0.7.24" ],
            "full_dependency_ids": [
              {
                "_id": "545a51aa893c653357000008",
                "name": "SteamNodes"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "0.7.24"
          },
          {
            "_id": "54d9f703dcee4dfd260000dd",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/94ddace4-2e28-4959-9533-0ec9a19dff82gregPkg210.zip",
            "contents": "Analytical.CreateLineBoundaryCondition - Create Line Boundary Condition from Analytical Line, Analytical.CreateLineLoadBeta - beta 1, Element.Create 3D Cropped view - create 3d view for each element and crop view, Element.GetFromLinkedFile - Get elements from link document instance based on category, Element.MakeParts - Create parts from elements, Element.Parts.Getparents - Returns parents of selected Parts, Element.SelectInView - Select the input elements in active view, Element.TypeName - Get Type Name as string, List.FilterByString - Filter a list by a string match, List.Operations - List A-B / List Intersection / List symmetric difference, Schedule.GetCalculatedValues - Get Schedule Calculated Values from name input, Schedule.GetTextFromHeader - from Viewschedule input, returns columns header values as text, Tool.AddVoidCut - Add void cut for a Set of elements. In combination with Get surrounding elements node., Tool.CreateRoomAtPointAndLevel - create rooms from center points at Level, Tool.ElementsInGroup - returns elements from a given group, selected by his name, Tool.Eraser - Try to delete any element from project, Tool.EraserByName - erase things in a list, selected by the name, Tool.GetLineStyleByName - Collects LineStyle from string.contains, Tool.GetPhaseByName - Get Document Phases by String, Tool.GetRevitSelection - get the selection from the revit UI, works for views, Tool.GetSurroundingElements - Get Surrounding Elements by Categories, group them  as  List. Tolerance distance available., Tool.PlaceGroupAtPoint - place a given group at given points, Tool.RemoveVoidCut - Add void cut for a Set of elements. In combination with Get surrounding elements node., Tool.Toggle - Offers 2 ways for output, View.ApplyViewTemplate - Applies a view template to any given view(s). Supply a string with a view template name., Wall.GetTotalWidth - Get Wall's  Total Width parameter",
            "engine_metadata": "",
            "engine_version": "0.7.6.3992",
            "created": "2015-02-10T12:18:11.020Z",
            "full_dependency_versions": [ "0.7.25" ],
            "full_dependency_ids": [
              {
                "_id": "545a51aa893c653357000008",
                "name": "SteamNodes"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "0.7.25"
          },
          {
            "_id": "54da004fdcee4dfd260000de",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/93d4775a-fb0b-431b-9deb-e8987128cb2agregPkg473.zip",
            "contents": "Analytical.CreateLineBoundaryCondition - Create Line Boundary Condition from Analytical Line, Analytical.CreateLineLoadBeta - beta 1, Element.Create 3D Cropped view - create 3d view for each element and crop view, Element.GetFromLinkedFile - Get elements from link document instance based on category, Element.MakeParts - Create parts from elements, Element.Parts.Getparents - Returns parents of selected Parts, Element.SelectInView - Select the input elements in active view, Element.TypeName - Get Type Name as string, List.FilterByString - Filter a list by a string match, List.Operations - List A-B / List Intersection / List symmetric difference, Schedule.GetCalculatedValues - Get Schedule Calculated Values from name input, Schedule.GetTextFromHeader - from Viewschedule input, returns columns header values as text, Tool.AddVoidCut - Add void cut for a Set of elements. In combination with Get surrounding elements node., Tool.CreateRoomAtPointAndLevel - create rooms from center points at Level, Tool.ElementsInGroup - returns elements from a given group, selected by his name, Tool.Eraser - Try to delete any element from project, Tool.EraserByName - erase things in a list, selected by the name, Tool.ExportDWF - Export Views to DWF file, Tool.GetLineStyleByName - Collects LineStyle from string.contains, Tool.GetPhaseByName - Get Document Phases by String, Tool.GetRevitSelection - get the selection from the revit UI, works for views, Tool.GetSurroundingElements - Get Surrounding Elements by Categories, group them  as  List. Tolerance distance available., Tool.PlaceGroupAtPoint - place a given group at given points, Tool.RemoveVoidCut - Add void cut for a Set of elements. In combination with Get surrounding elements node., Tool.Toggle - Offers 2 ways for output, View.ApplyViewTemplate - Applies a view template to any given view(s). Supply a string with a view template name., Wall.GetTotalWidth - Get Wall's  Total Width parameter",
            "engine_metadata": "",
            "engine_version": "0.7.6.3992",
            "created": "2015-02-10T12:57:51.822Z",
            "full_dependency_versions": [ "0.7.26" ],
            "full_dependency_ids": [
              {
                "_id": "545a51aa893c653357000008",
                "name": "SteamNodes"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "0.7.26"
          },
          {
            "_id": "551865005899bb3705000017",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/411582df-4157-4d2e-b521-f3fbc8363d0bgregPkg594.zip",
            "contents": "Analytical.CreateLineBoundaryCondition - Create Line Boundary Condition from Analytical Line, Analytical.CreateLineLoadBeta - beta 1, Element.Create 3D Cropped view - create 3d view for each element and crop view, Element.GetFromLinkedFile - Get elements from link document instance based on category, Element.IsTagged - Checks if all Elements are tagged in the project, Element.MakeParts - Create parts from elements, Element.Parts.Getparents - Returns parents of selected Parts, Element.SelectInView - Select the input elements in active view, Element.TypeName - Get Type Name as string, List.FilterByString - Filter a list by a string match, List.Operations - List A-B / List Intersection / List symmetric difference, Parts.IsFromLinkedElement - Check if Parts are derived from linked elements, Schedule.GetCalculatedValues - Get Schedule Calculated Values from name input, Schedule.GetTextFromHeader - from Viewschedule input, returns columns header values as text, Tool.AddVoidCut - Add void cut for a Set of elements. In combination with Get surrounding elements node., Tool.CreateRoomAtPointAndLevel - create rooms from center points at Level, Tool.ElementsInGroup - returns elements from a given group, selected by his name, Tool.Eraser - Try to delete any element from project, Tool.EraserByName - erase things in a list, selected by the name, Tool.ExportDWF - Export Views to DWF file, Tool.GetLineStyleByName - Collects LineStyle from string.contains, Tool.GetPhaseByName - Get Document Phases by String, Tool.GetRevitSelection - get the selection from the revit UI, works for views, Tool.GetSurroundingElements - Get Surrounding Elements by Categories, group them  as  List. Tolerance distance available., Tool.PlaceGroupAtPoint - place a given group at given points, Tool.RemoveVoidCut - Add void cut for a Set of elements. In combination with Get surrounding elements node., Tool.Toggle - Offers 2 ways for output, View.ApplyViewTemplate - Applies a view template to any given view(s). Supply a string with a view template name., Wall.GetTotalWidth - Get Wall's  Total Width parameter",
            "engine_metadata": "",
            "engine_version": "0.8.0.856",
            "created": "2015-03-29T20:48:00.301Z",
            "full_dependency_versions": [ "0.8.1", "2015.3.12" ],
            "full_dependency_ids": [
              {
                "_id": "545a51aa893c653357000008",
                "name": "SteamNodes"
              },
              {
                "_id": "53e99ce50e5572016a00018a",
                "name": "archi-lab.net"
              }
            ],
            "direct_dependency_versions": [ "2015.3.12" ],
            "direct_dependency_ids": [
              {
                "_id": "53e99ce50e5572016a00018a",
                "name": "archi-lab.net"
              }
            ],
            "change_log": "",
            "version": "0.8.1"
          },
          {
            "_id": "552c1fd35899bb370500006e",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/949f8338-3961-449a-a8a5-053d71176237gregPkg829.zip",
            "contents": "Analytical.CreateLineBoundaryCondition - Create Line Boundary Condition from Analytical Line, Analytical.CreateLineLoadBeta - beta 1, Element.Create 3D Cropped view - create 3d view for each element and crop view, Element.GetFromLinkedFile - Get elements from link document instance based on category, Element.IsTagged - Checks if all Elements are tagged in the project, Element.MakeParts - Create parts from elements, Element.Parts.Getparents - Returns parents of selected Parts, Element.SelectInView - Select the input elements in active view, Element.TypeName - Get Type Name as string, List.FilterByString - Filter a list by a string match, List.Operations - List A-B / List Intersection / List symmetric difference, Parts.IsFromLinkedElement - Check if Parts are derived from linked elements, Schedule.GetCalculatedValues - Get Schedule Calculated Values from name input, Schedule.GetTextFromHeader - from Viewschedule input, returns columns header values as text, Tool.AddVoidCut - Add void cut for a Set of elements. In combination with Get surrounding elements node., Tool.CreateRoomAtPointAndLevel - create rooms from center points at Level, Tool.ElementsInGroup - returns elements from a given group, selected by his name, Tool.Eraser - Try to delete any element from project, Tool.EraserByName - erase things in a list, selected by the name, Tool.ExportDWF - Export Views to DWF file, Tool.GetLineStyleByName - Collects LineStyle from string.contains, Tool.GetPhaseByName - Get Document Phases by String, Tool.GetRevitSelection - get the selection from the revit UI, works for views, Tool.GetSurroundingElements - Get Surrounding Elements by Categories, group them  as  List. Tolerance distance available., Tool.PlaceGroupAtPoint - place a given group at given points, Tool.RemoveVoidCut - Add void cut for a Set of elements. In combination with Get surrounding elements node., Tool.Toggle - Offers 2 ways for output, View.ApplyViewTemplate - Applies a view template to any given view(s). Supply a string with a view template name., Wall.GetTotalWidth - Get Wall's  Total Width parameter",
            "engine_metadata": "",
            "engine_version": "0.8.0.856",
            "created": "2015-04-13T19:58:11.926Z",
            "full_dependency_versions": [ "0.8.11", "2015.3.12" ],
            "full_dependency_ids": [
              {
                "_id": "545a51aa893c653357000008",
                "name": "SteamNodes"
              },
              {
                "_id": "53e99ce50e5572016a00018a",
                "name": "archi-lab.net"
              }
            ],
            "direct_dependency_versions": [ "2015.3.12" ],
            "direct_dependency_ids": [
              {
                "_id": "53e99ce50e5572016a00018a",
                "name": "archi-lab.net"
              }
            ],
            "change_log": "",
            "version": "0.8.11"
          },
          {
            "_id": "55433c6ea8367b9861000059",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/3770e983-3ef2-4c6d-b417-11ba9bd8d631gregPkg306.zip",
            "contents": "Analytical.CreateLineBoundaryCondition - Create Line Boundary Condition from Analytical Line, Analytical.CreateLineLoadBeta - beta 1, Element.Create 3D Cropped view - create 3d view for each element and crop view, Element.GetFromLinkedFile - Get elements from link document instance based on category, Element.IsTagged - Checks if all Elements are tagged in the project, Element.MakeParts - Create parts from elements, Element.SelectInView - Select the input elements in active view, Element.TypeName - Get Type Name as string, List.FilterByString - Filter a list by a string match, List.Operations - List A-B / List Intersection / List symmetric difference, Parts.Genealogy - Get Parent, Childs and PartMaker for any Part, Parts.Getparents - Returns parents of selected Parts, Parts.IsFromLinkedElement - Check if Parts are derived from linked elements, Schedule.GetCalculatedValues - Get Schedule Calculated Values from name input, Schedule.GetTextFromHeader - from Viewschedule input, returns columns header values as text, Tool.AddVoidCut - Add void cut for a Set of elements. In combination with Get surrounding elements node., Tool.CreateRoomAtPointAndLevel - create rooms from center points at Level, Tool.ElementsInGroup - returns elements from a given group, selected by his name, Tool.Eraser - Try to delete any element from project, Tool.EraserByName - erase things in a list, selected by the name, Tool.ExportDWF - Export Views to DWF file, Tool.GetLineStyleByName - Collects LineStyle from string.contains, Tool.GetPhaseByName - Get Document Phases by String, Tool.GetRevitSelection - get the selection from the revit UI, works for views, Tool.GetSurroundingElements - Get Surrounding Elements by Categories, group them  as  List. Tolerance distance available., Tool.PlaceGroupAtPoint - place a given group at given points, Tool.RemoveVoidCut - Add void cut for a Set of elements. In combination with Get surrounding elements node., Tool.Toggle - Offers 2 ways for output, View.ApplyViewTemplate - Applies a view template to any given view(s). Supply a string with a view template name., Wall.GetTotalWidth - Get Wall's  Total Width parameter",
            "engine_metadata": "",
            "engine_version": "0.8.0.950",
            "created": "2015-05-01T08:42:22.246Z",
            "full_dependency_versions": [ "0.8.20", "2015.3.12" ],
            "full_dependency_ids": [
              {
                "_id": "545a51aa893c653357000008",
                "name": "SteamNodes"
              },
              {
                "_id": "53e99ce50e5572016a00018a",
                "name": "archi-lab.net"
              }
            ],
            "direct_dependency_versions": [ "2015.3.12" ],
            "direct_dependency_ids": [
              {
                "_id": "53e99ce50e5572016a00018a",
                "name": "archi-lab.net"
              }
            ],
            "change_log": "",
            "version": "0.8.20"
          },
          {
            "_id": "556b58e2a8367b98610000ec",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/5605c747-65a5-451e-89f4-d9146f969f25gregPkg349.zip",
            "contents": "Analytical.CreateLineBoundaryCondition - Create Line Boundary Condition from Analytical Line, Analytical.CreateLineLoadBeta - beta 1, Element.Create 3D Cropped view - create 3d view for each element and crop view, Element.GetFromLinkedFile - Get elements from link document instance based on category, Element.IsTagged - Checks if all Elements are tagged in the project, Element.MakeParts - Create parts from elements, Parts.Getparents - Returns parents of selected Parts, Element.SelectInView - Select the input elements in active view, Element.TypeName - Get Type Name as string, List.FilterByString - Filter a list by a string match, List.Operations - List A-B / List Intersection / List symmetric difference, Parts.Genealogy - Get Parent, Childs and PartMaker for any Part, Parts.IsFromLinkedElement - Check if Parts are derived from linked elements, Schedule.GetCalculatedValues - Get Schedule Calculated Values from name input, Schedule.GetTextFromHeader - from Viewschedule input, returns columns header values as text, Tool.AddVoidCut - Add void cut for a Set of elements. In combination with Get surrounding elements node., Tool.CreateRoomAtPointAndLevel - create rooms from center points at Level, Tool.ElementsInGroup - returns elements from a given group, selected by his name, Tool.Eraser - Try to delete any element from project, Tool.EraserByName - erase things in a list, selected by the name, Tool.ExportDWF - Export Views to DWF file, Tool.GetLineStyleByName - Collects LineStyle from string.contains, Tool.GetPhaseByName - Get Document Phases by String, Tool.GetRevitSelection - get the selection from the revit UI, works for views, Tool.GetSurroundingElements - Get Surrounding Elements by Categories, group them  as  List. Tolerance distance available., Tool.PhysicalBeamToAnalytical - Move Physical Beam to his Analytical model location, Tool.PlaceGroupAtPoint - place a given group at given points, Tool.RemoveVoidCut - Add void cut for a Set of elements. In combination with Get surrounding elements node., Tool.Toggle - Offers 2 ways for output, View.ApplyViewTemplate - Applies a view template to any given view(s). Supply a string with a view template name., Wall.GetTotalWidth - Get Wall's  Total Width parameter",
            "engine_metadata": "",
            "engine_version": "0.8.0.950",
            "created": "2015-05-31T18:54:26.114Z",
            "full_dependency_versions": [ "0.8.21", "2015.5.5" ],
            "full_dependency_ids": [
              {
                "_id": "545a51aa893c653357000008",
                "name": "SteamNodes"
              },
              {
                "_id": "53e99ce50e5572016a00018a",
                "name": "archi-lab.net"
              }
            ],
            "direct_dependency_versions": [ "2015.5.5" ],
            "direct_dependency_ids": [
              {
                "_id": "53e99ce50e5572016a00018a",
                "name": "archi-lab.net"
              }
            ],
            "change_log": "",
            "version": "0.8.21"
          },
          {
            "_id": "556c795da8367b98610000ee",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/34f7e3a9-970b-4713-b472-03f15c6ffa35gregPkg629.zip",
            "contents": "Analytical.CreateLineBoundaryCondition - Create Line Boundary Condition from Analytical Line, Analytical.CreateLineLoadBeta - beta 1, Element.Create 3D Cropped view - create 3d view for each element and crop view, Element.GetFromLinkedFile - Get elements from link document instance based on category, Element.IsTagged - Checks if all Elements are tagged in the project, Element.MakeParts - Create parts from elements, Parts.Getparents - Returns parents of selected Parts, Element.SelectInView - Select the input elements in active view, Element.TypeName - Get Type Name as string, List.FilterByString - Filter a list by a string match, List.Operations - List A-B / List Intersection / List symmetric difference, Parts.Genealogy - Get Parent, Childs and PartMaker for any Part, Parts.IsFromLinkedElement - Check if Parts are derived from linked elements, Schedule.GetCalculatedValues - Get Schedule Calculated Values from name input, Schedule.GetTextFromHeader - from Viewschedule input, returns columns header values as text, Tool.AddVoidCut - Add void cut for a Set of elements. In combination with Get surrounding elements node., Tool.CreateRoomAtPointAndLevel - create rooms from center points at Level, Tool.ElementsInGroup - returns elements from a given group, selected by his name, Tool.Eraser - Try to delete any element from project, Tool.EraserByName - erase things in a list, selected by the name, Tool.ExportDWF - Export Views to DWF file, Tool.GetLineStyleByName - Collects LineStyle from string.contains, Tool.GetPhaseByName - Get Document Phases by String, Tool.GetRevitSelection - get the selection from the revit UI, works for views, Tool.GetSurroundingElements - Get Surrounding Elements by Categories, group them  as  List. Tolerance distance available., Tool.PhysicalBeamToAnalytical - Move Physical Beam to his Analytical model location, Tool.PlaceGroupAtPoint - place a given group at given points, Tool.RemoveVoidCut - Add void cut for a Set of elements. In combination with Get surrounding elements node., Tool.Toggle - Offers 2 ways for output, View.ApplyViewTemplate - Applies a view template to any given view(s). Supply a string with a view template name., Wall.GetTotalWidth - Get Wall's  Total Width parameter",
            "engine_metadata": "",
            "engine_version": "0.8.0.950",
            "created": "2015-06-01T15:25:17.005Z",
            "full_dependency_versions": [ "0.8.22", "2015.3.12" ],
            "full_dependency_ids": [
              {
                "_id": "545a51aa893c653357000008",
                "name": "SteamNodes"
              },
              {
                "_id": "53e99ce50e5572016a00018a",
                "name": "archi-lab.net"
              }
            ],
            "direct_dependency_versions": [ "2015.3.12" ],
            "direct_dependency_ids": [
              {
                "_id": "53e99ce50e5572016a00018a",
                "name": "archi-lab.net"
              }
            ],
            "change_log": "",
            "version": "0.8.22"
          },
          {
            "_id": "556cb80ca8367b98610000f1",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/66075443-351b-4a37-b45f-616c31e4b2a9gregPkg169.zip",
            "contents": "Analytical.CreateLineBoundaryCondition - Create Line Boundary Condition from Analytical Line, Analytical.CreateLineLoadBeta - beta 1, Element.Create 3D Cropped view - create 3d view for each element and crop view, Element.GetFromLinkedFile - Get elements from link document instance based on category, Element.IsTagged - Checks if all Elements are tagged in the project, Element.MakeParts - Create parts from elements, Parts.Getparents - Returns parents of selected Parts, Element.SelectInView - Select the input elements in active view, Element.TypeName - Get Type Name as string, List.FilterByString - Filter a list by a string match, List.Operations - List A-B / List Intersection / List symmetric difference, Parts.Genealogy - Get Parent, Childs and PartMaker for any Part, Parts.IsFromLinkedElement - Check if Parts are derived from linked elements, Schedule.GetCalculatedValues - Get Schedule Calculated Values from name input, Schedule.GetTextFromHeader - from Viewschedule input, returns columns header values as text, Tool.AddVoidCut - Add void cut for a Set of elements. In combination with Get surrounding elements node., Tool.CreateRoomAtPointAndLevel - create rooms from center points at Level, Tool.ElementsInGroup - returns elements from a given group, selected by his name, Tool.Eraser - Try to delete any element from project, Tool.EraserByName - erase things in a list, selected by the name, Tool.ExportDWF - Export Views to DWF file, Tool.GetLineStyleByName - Collects LineStyle from string.contains, Tool.GetPhaseByName - Get Document Phases by String, Tool.GetRevitSelection - get the selection from the revit UI, works for views, Tool.GetSurroundingElements - Get Surrounding Elements by Categories, group them  as  List. Tolerance distance available., Tool.PhysicalBeamToAnalytical - **MANUAL MODE ONLY**\r\nMove Physical Beam to his Analytical model location, Tool.PlaceGroupAtPoint - place a given group at given points, Tool.RemoveVoidCut - Add void cut for a Set of elements. In combination with Get surrounding elements node., Tool.Toggle - Offers 2 ways for output, View.ApplyViewTemplate - Applies a view template to any given view(s). Supply a string with a view template name., Wall.GetTotalWidth - Get Wall's  Total Width parameter",
            "engine_metadata": "",
            "engine_version": "0.8.0.950",
            "created": "2015-06-01T19:52:44.988Z",
            "full_dependency_versions": [ "0.8.23", "2015.3.12" ],
            "full_dependency_ids": [
              {
                "_id": "545a51aa893c653357000008",
                "name": "SteamNodes"
              },
              {
                "_id": "53e99ce50e5572016a00018a",
                "name": "archi-lab.net"
              }
            ],
            "direct_dependency_versions": [ "2015.3.12" ],
            "direct_dependency_ids": [
              {
                "_id": "53e99ce50e5572016a00018a",
                "name": "archi-lab.net"
              }
            ],
            "change_log": "",
            "version": "0.8.23"
          },
          {
            "_id": "55cb8cbb662bf0e9080000a8",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/6d259cb6-9f06-415e-adbc-6454a00e338fgregPkg693.zip",
            "contents": "Analytical.CreateLineBoundaryCondition - Create Line Boundary Condition from Analytical Line, Analytical.CreateLineLoadBeta - beta 1, Element.3DCropViewTopBaseOffset - create 3d view for each element and crop view, Element.Create 3D Cropped view - create 3d view for each element and crop view, Element.GetFromLinkedFile - Get elements from link document instance based on category, Element.IsTagged - Checks if all Elements are tagged in the project, Element.MakeParts - Create parts from elements, Parts.Getparents - Returns parents of selected Parts, Element.SelectInView - Select the input elements in active view, Element.TypeName - Get Type Name as string, List.FilterByString - Filter a list by a string match, List.Operations - List A-B / List Intersection / List symmetric difference, Parts.Genealogy - Get Parent, Childs and PartMaker for any Part, Parts.IsFromLinkedElement - Check if Parts are derived from linked elements, Schedule.GetCalculatedValues - Get Schedule Calculated Values from name input, Schedule.GetTextFromHeader - from Viewschedule input, returns columns header values as text, Tool.AddVoidCut - Add void cut for a Set of elements. In combination with Get surrounding elements node., Tool.CreateAssembly - Create an Assembly for each element, Tool.CreateRoomAtPointAndLevel - create rooms from center points at Level, Tool.ElementsInGroup - returns elements from a given group, selected by his name, Tool.Eraser - Try to delete any element from project, Tool.EraserByName - erase things in a list, selected by the name, Tool.ExportDWF - Export Views to DWF file, Tool.GetLineStyleByName - Collects LineStyle from string.contains, Tool.GetPhaseByName - Get Document Phases by String, Tool.GetRevitSelection - get the selection from the revit UI, works for views, Tool.GetSurroundingElements - Get Surrounding Elements by Categories, group them  as  List. Tolerance distance available., Tool.PhysicalBeamToAnalytical - **MANUAL MODE ONLY**\r\nMove Physical Beam to his Analytical model location, Tool.PlaceGroupAtPoint - place a given group at given points, Tool.RemoveVoidCut - Add void cut for a Set of elements. In combination with Get surrounding elements node., Tool.Toggle - Offers 2 ways for output, Tool.UpdateString - Replace a Parameter string value by another one, View.ApplyViewTemplate - Applies a view template to any given view(s). Supply a string with a view template name., Wall.GetTotalWidth - Get Wall's  Total Width parameter",
            "engine_metadata": "",
            "engine_version": "1.0.0.0",
            "created": "2015-08-12T18:13:15.215Z",
            "full_dependency_versions": [ "0.8.24", "2015.3.12" ],
            "full_dependency_ids": [
              {
                "_id": "545a51aa893c653357000008",
                "name": "SteamNodes"
              },
              {
                "_id": "53e99ce50e5572016a00018a",
                "name": "archi-lab.net"
              }
            ],
            "direct_dependency_versions": [ "2015.3.12" ],
            "direct_dependency_ids": [
              {
                "_id": "53e99ce50e5572016a00018a",
                "name": "archi-lab.net"
              }
            ],
            "change_log": "",
            "version": "0.8.24"
          },
          {
            "_id": "55d4e72d662bf0e9080000eb",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/17c043b2-8b25-44a7-a99c-cd415f95a3f2gregPkg687.zip",
            "contents": "Analytical.CreateLineBoundaryCondition - Create Line Boundary Condition from Analytical Line, Analytical.CreateLineLoadBeta - beta 1, Element.3DCropViewTopBaseOffset - create 3d view for each element and crop view, Element.Create 3D Cropped view - create 3d view for each element and crop view, Element.GetFromLinkedFile - Get elements from link document instance based on category, Element.IsTagged - Checks if all Elements are tagged in the project, Element.MakeParts - Create parts from elements, Parts.Getparents - Returns parents of selected Parts, Element.SelectInView - Select the input elements in active view, Element.TypeName - Get Type Name as string, List.FilterByString - Filter a list by a string match, List.Operations - List A-B / List Intersection / List symmetric difference, Parts.Genealogy - Get Parent, Childs and PartMaker for any Part, Parts.IsFromLinkedElement - Check if Parts are derived from linked elements, Schedule.GetCalculatedValues - Get Schedule Calculated Values from name input, Schedule.GetTextFromHeader - from Viewschedule input, returns columns header values as text, Tool.AddVoidCut - Add void cut for a Set of elements. In combination with Get surrounding elements node., Tool.AlignSheetViewsFromTemplateSheet - Align views and schedules from a sheet template, Tool.AssemblyViews - Create Sheet and Views for Assembly instances, Tool.CreateAssembly - Create an Assembly for each element, Tool.CreateRoomAtPointAndLevel - create rooms from center points at Level, Tool.ElementsInGroup - returns elements from a given group, selected by his name, Tool.Eraser - Try to delete any element from project, Tool.EraserByName - erase things in a list, selected by the name, Tool.ExportDWF - Export Views to DWF file, Tool.GetLineStyleByName - Collects LineStyle from string.contains, Tool.GetPhaseByName - Get Document Phases by String, Tool.GetRevitSelection - get the selection from the revit UI, works for views, Tool.GetSurroundingElements - Get Surrounding Elements by Categories, group them  as  List. Tolerance distance available., Tool.PhysicalBeamToAnalytical - **MANUAL MODE ONLY**\r\nMove Physical Beam to his Analytical model location, Tool.PlaceGroupAtPoint - place a given group at given points, Tool.RemoveVoidCut - Add void cut for a Set of elements. In combination with Get surrounding elements node., Tool.RunMe - Use Boolean to perform an action, Tool.Toggle - Offers 2 ways for output, Tool.UpdateString - Replace a Parameter string value by another one, View.ApplyViewTemplate - Applies a view template to any given view(s). Supply a string with a view template name., View.CropView - Crop a 3D view, View.GetViewport - Get Vieworts from Views, View.ViewPortBoxCenter - Get ViewPort Box center point, Viewport.SetBoxCenter - API class, ViewSchedule.GetColumnWidth - ViewSchedule.GetColumnWidth, ViewSchedule.SetColumnWidth - ViewSchedule.SetColumnWidth, Wall.GetTotalWidth - Get Wall's  Total Width parameter",
            "engine_metadata": "",
            "engine_version": "1.0.0.0",
            "created": "2015-08-19T20:29:33.341Z",
            "full_dependency_versions": [ "0.8.25", "2015.3.12" ],
            "full_dependency_ids": [
              {
                "_id": "545a51aa893c653357000008",
                "name": "SteamNodes"
              },
              {
                "_id": "53e99ce50e5572016a00018a",
                "name": "archi-lab.net"
              }
            ],
            "direct_dependency_versions": [ "2015.3.12" ],
            "direct_dependency_ids": [
              {
                "_id": "53e99ce50e5572016a00018a",
                "name": "archi-lab.net"
              }
            ],
            "change_log": "",
            "version": "0.8.25"
          },
          {
            "_id": "55f1f564662bf0e90800016c",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/f0e5699c-95ec-4788-9e0e-bd890696d9bfgregPkg784.zip",
            "contents": "Analytical.CreateLineBoundaryCondition - Create Line Boundary Condition from Analytical Line, Analytical.CreateLineLoadBeta - beta 1, Element.3DCropViewTopBaseOffset - create 3d view for each element and crop view, Element.Create 3D Cropped view - create 3d view for each element and crop view, Element.GetFromLinkedFile - Get elements from link document instance based on category, Element.IsTagged - Checks if all Elements are tagged in the project, Element.MakeParts - Create parts from elements, Parts.Getparents - Returns parents of selected Parts, Element.SelectInView - Select the input elements in active view, Element.TypeName - Get Type Name as string, List.FilterByString - Filter a list by a string match, List.Operations - List A-B / List Intersection / List symmetric difference, Parts.Genealogy - Get Parent, Childs and PartMaker for any Part, Parts.IsFromLinkedElement - Check if Parts are derived from linked elements, Schedule.GetCalculatedValues - Get Schedule Calculated Values from name input, Schedule.GetTextFromHeader - from Viewschedule input, returns columns header values as text, Tool.AddVoidCut - Add void cut for a Set of elements. In combination with Get surrounding elements node., Tool.AlignSheetViewsFromTemplateSheet - Align views and schedules from a sheet template, Tool.AssemblyViews - Create Sheet and Views for Assembly instances, Tool.CreateAssembly - Create an Assembly for each element, Tool.CreateRoomAtPointAndLevel - create rooms from center points at Level, Tool.ElementsInGroup - returns elements from a given group, selected by his name, Tool.Eraser - Try to delete any element from project, Tool.EraserByName - erase things in a list, selected by the name, Tool.ExportDWF - Export Views to DWF file, Tool.GetLineStyleByName - Collects LineStyle from string.contains, Tool.GetPhaseByName - Get Document Phases by String, Tool.GetRevitSelection - get the selection from the revit UI, works for views, Tool.GetSurroundingElements - Get Surrounding Elements by Categories, group them  as  List. Tolerance distance available., Tool.IntersectionChecker - Checks if elements have a geometrical intersection, Tool.PhysicalBeamToAnalytical - **MANUAL MODE ONLY**\r\nMove Physical Beam to his Analytical model location, Tool.PlaceGroupAtPoint - place a given group at given points, Tool.RemoveVoidCut - Add void cut for a Set of elements. In combination with Get surrounding elements node., Tool.RunMe - Use Boolean to perform an action, Tool.Toggle - Offers 2 ways for output, Tool.UpdateString - Replace a Parameter string value by another one, View.ApplyViewTemplate - Applies a view template to any given view(s). Supply a string with a view template name., View.CropView - Crop a 3D view, View.GetViewport - Get Vieworts from Views, View.ViewPortBoxCenter - Get ViewPort Box center point, Viewport.SetBoxCenter - API class, ViewSchedule.GetColumnWidth - ViewSchedule.GetColumnWidth, ViewSchedule.SetColumnWidth - ViewSchedule.SetColumnWidth, Wall.GetTotalWidth - Get Wall's  Total Width parameter",
            "engine_metadata": "",
            "engine_version": "0.8.2.2392",
            "created": "2015-09-10T21:25:56.945Z",
            "full_dependency_versions": [ "0.8.26" ],
            "full_dependency_ids": [
              {
                "_id": "545a51aa893c653357000008",
                "name": "SteamNodes"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "0.8.26"
          },
          {
            "_id": "55fb2096662bf0e9080001a2",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/c510e947-2dd4-4736-bb30-5508d2f7c409gregPkg459.zip",
            "contents": "Analytical.CreateLineBoundaryCondition - Create Line Boundary Condition from Analytical Line, Analytical.CreateLineLoadBeta - beta 1, Element.3DCropViewTopBaseOffset - create 3d view for each element and crop view, Element.Create 3D Cropped view - create 3d view for each element and crop view, Element.GetFromLinkedFile - Get elements from link document instance based on category, Element.IsTagged - Checks if all Elements are tagged in the project, Element.MakeParts - Create parts from elements, Parts.Getparents - Returns parents of selected Parts, Element.SelectInView - Select the input elements in active view, Element.TypeName - Get Type Name as string, List.FilterByString - Filter a list by a string match, List.Operations - List A-B / List Intersection / List symmetric difference, Parts.Genealogy - Get Parent, Childs and PartMaker for any Part, Parts.IsFromLinkedElement - Check if Parts are derived from linked elements, Schedule.GetCalculatedValues - Get Schedule Calculated Values from name input, Schedule.GetTextFromHeader - from Viewschedule input, returns columns header values as text, Tool.AddVoidCut - Add void cut for a Set of elements. In combination with Get surrounding elements node., Tool.AlignSheetViewsFromTemplateSheet - Align views and schedules from a sheet template, Tool.AssemblyViews - Create Sheet and Views for Assembly instances, Tool.CreateAssembly - Create an Assembly for each element, Tool.CreateRoomAtPointAndLevel - create rooms from center points at Level, Tool.ElementsInGroup - returns elements from a given group, selected by his name, Tool.Eraser - Try to delete any element from project, Tool.EraserByName - erase things in a list, selected by the name, Tool.ExportDWF - Export Views to DWF file, Tool.GetLineStyleByName - Collects LineStyle from string.contains, Tool.GetPhaseByName - Get Document Phases by String, Tool.GetRevitSelection - get the selection from the revit UI, works for views, Tool.GetSurroundingElements - Get Surrounding Elements by Categories, group them  as  List. Tolerance distance available., Tool.IntersectionChecker - Checks if elements have a geometrical intersection, Tool.PhysicalBeamToAnalytical - **MANUAL MODE ONLY**\r\nMove Physical Beam to his Analytical model location, Tool.PlaceGroupAtPoint - place a given group at given points, Tool.RemoveVoidCut - Add void cut for a Set of elements. In combination with Get surrounding elements node., Tool.RenameAssembly - Rename Existing Assembly - doesn't work yet at Assembly creation (transaction related, WIP)\r\nBeware: same length Lists, Tool.RunMe - Use Boolean to perform an action, Tool.Toggle - Offers 2 ways for output, Tool.UnusedTypes - collects unused types in model before deletion, Tool.UpdateString - Replace a Parameter string value by another one, View.ApplyViewTemplate - Applies a view template to any given view(s). Supply a string with a view template name., View.CropView - Crop a 3D view, View.GetViewport - Get Vieworts from Views, View.ViewPortBoxCenter - Get ViewPort Box center point, Viewport.SetBoxCenter - API class, ViewSchedule.GetColumnWidth - ViewSchedule.GetColumnWidth, ViewSchedule.SetColumnWidth - ViewSchedule.SetColumnWidth, Wall.GetTotalWidth - Get Wall's  Total Width parameter",
            "engine_metadata": "",
            "engine_version": "0.8.2.2392",
            "created": "2015-09-17T20:20:38.946Z",
            "full_dependency_versions": [ "0.8.27" ],
            "full_dependency_ids": [
              {
                "_id": "545a51aa893c653357000008",
                "name": "SteamNodes"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "0.8.27"
          },
          {
            "_id": "55fb21a9662bf0e9080001a3",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/de5a0546-f1c0-4232-a80c-1b6815d601e3gregPkg116.zip",
            "contents": "Analytical.CreateLineBoundaryCondition - Create Line Boundary Condition from Analytical Line, Analytical.CreateLineLoadBeta - beta 1, Element.3DCropViewTopBaseOffset - create 3d view for each element and crop view, Element.Create 3D Cropped view - create 3d view for each element and crop view, Element.GetFromLinkedFile - Get elements from link document instance based on category, Element.IsTagged - Checks if all Elements are tagged in the project, Element.MakeParts - Create parts from elements, Parts.Getparents - Returns parents of selected Parts, Element.SelectInView - Select the input elements in active view, Element.TypeName - Get Type Name as string, List.FilterByString - Filter a list by a string match, List.Operations - List A-B / List Intersection / List symmetric difference, Parts.Genealogy - Get Parent, Childs and PartMaker for any Part, Parts.IsFromLinkedElement - Check if Parts are derived from linked elements, Schedule.GetCalculatedValues - Get Schedule Calculated Values from name input, Schedule.GetTextFromHeader - from Viewschedule input, returns columns header values as text, Tool.AddVoidCut - Add void cut for a Set of elements. In combination with Get surrounding elements node., Tool.AlignSheetViewsFromTemplateSheet - Align views and schedules from a sheet template, Tool.AssemblyViews - Create Sheet and Views for Assembly instances, Tool.CreateAssembly - Create an Assembly for each element, Tool.CreateRoomAtPointAndLevel - create rooms from center points at Level, Tool.ElementsInGroup - returns elements from a given group, selected by his name, Tool.Eraser - Try to delete any element from project, Tool.EraserByName - erase things in a list, selected by the name, Tool.ExportDWF - Export Views to DWF file, Tool.GetLineStyleByName - Collects LineStyle from string.contains, Tool.GetPhaseByName - Get Document Phases by String, Tool.GetRevitSelection - get the selection from the revit UI, works for views, Tool.GetSurroundingElements - Get Surrounding Elements by Categories, group them  as  List. Tolerance distance available., Tool.IntersectionChecker - Checks if elements have a geometrical intersection, Tool.PhysicalBeamToAnalytical - **MANUAL MODE ONLY**\r\nMove Physical Beam to his Analytical model location, Tool.PlaceGroupAtPoint - place a given group at given points, Tool.RemoveVoidCut - Add void cut for a Set of elements. In combination with Get surrounding elements node., Tool.RenameAssembly - Rename Existing Assembly - doesn't work yet at Assembly creation (transaction related, WIP)\r\nBeware: same length Lists, Tool.RunMe - Use Boolean to perform an action, Tool.Toggle - Offers 2 ways for output, Tool.UnusedTypes - collects unused types in model before deletion, Tool.UpdateString - Replace a Parameter string value by another one, View.ApplyViewTemplate - Applies a view template to any given view(s). Supply a string with a view template name., View.CropView - Crop a 3D view, View.GetViewport - Get Vieworts from Views, View.ViewPortBoxCenter - Get ViewPort Box center point, Viewport.SetBoxCenter - API class, ViewSchedule.GetColumnWidth - ViewSchedule.GetColumnWidth, ViewSchedule.SetColumnWidth - ViewSchedule.SetColumnWidth, Wall.GetTotalWidth - Get Wall's  Total Width parameter",
            "engine_metadata": "",
            "engine_version": "0.8.2.2392",
            "created": "2015-09-17T20:25:13.556Z",
            "full_dependency_versions": [ "0.8.28" ],
            "full_dependency_ids": [
              {
                "_id": "545a51aa893c653357000008",
                "name": "SteamNodes"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "0.8.28"
          },
          {
            "_id": "569d714dc6d90c553d000027",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/3d41562b-828f-4b01-a17d-4dd5a8187ba6gregPkg88.zip",
            "contents": "Analytical.CreateLineBoundaryCondition - Create Line Boundary Condition from Analytical Line, Analytical.CreateLineLoadBeta - beta 1, Area.CreateAtPoint - create Area from center points at Level, Area.CreateAtUV - create Area from center points at Level, Area.CreateFromPlanCircuit - Place new Areas in Plan Circuit, Element.3DCropViewTopBaseOffset - create 3d view for each element and crop view, Element.Create 3D Cropped view - create 3d view for each element and crop view, Element.GetFromLinkedFile - Get elements from link document instance based on category, Element.IsTagged - Checks if all Elements are tagged in the project, Element.MakeParts - Create parts from elements, Parts.Getparents - Returns parents of selected Parts, Element.SelectInView - Select the input elements in active view, Element.TypeName - Get Type Name as string, List.FilterByString - Filter a list by a string match, List.Operations - List A-B / List Intersection / List symmetric difference, Parts.Genealogy - Get Parent, Childs and PartMaker for any Part, Parts.IsFromLinkedElement - Check if Parts are derived from linked elements, Schedule.GetCalculatedValues - Get Schedule Calculated Values from name input, Schedule.GetTextFromHeader - from Viewschedule input, returns columns header values as text, Tool.AddVoidCut - Add void cut for a Set of elements. In combination with Get surrounding elements node., Tool.AlignSheetViewsFromTemplateSheet - Align views and schedules from a sheet template, Tool.AssemblyViews - Create Sheet and Views for Assembly instances, Tool.CreateAssembly - Create an Assembly for each element, Tool.CreateRoomAtPointAndLevel - create rooms from center points at Level, Tool.ElementsInGroup - returns elements from a given group, selected by his name, Tool.Eraser - Try to delete any element from project, Tool.EraserByName - erase things in a list, selected by the name, Tool.ExportDWF - Export Views to DWF file, Tool.GetLineStyleByName - Collects LineStyle from string.contains, Tool.GetPhaseByName - Get Document Phases by String, Tool.GetRevitSelection - get the selection from the revit UI, works for views, Tool.GetSurroundingElements - Get Surrounding Elements by Categories, group them  as  List. Tolerance distance available., Tool.IntersectionChecker - Checks if elements have a geometrical intersection, Tool.PhysicalBeamToAnalytical - **MANUAL MODE ONLY**\r\nMove Physical Beam to his Analytical model location, Tool.PlaceGroupAtPoint - place a given group at given points, Tool.RemoveVoidCut - Add void cut for a Set of elements. In combination with Get surrounding elements node., Tool.RenameAssembly - Rename Existing Assembly - doesn't work yet at Assembly creation (transaction related, WIP)\r\nBeware: same length Lists, Tool.RunMe - Use Boolean to perform an action, Tool.Toggle - Offers 2 ways for output, Tool.UnusedTypes - collects unused types in model before deletion, Tool.UpdateString - Replace a Parameter string value by another one, View.ApplyViewTemplate - Applies a view template to any given view(s). Supply a string with a view template name., View.CropView - Crop a 3D view, View.GetViewport - Get Vieworts from Views, View.ViewPortBoxCenter - Get ViewPort Box center point, Viewport.SetBoxCenter - API class, ViewSchedule.GetColumnWidth - ViewSchedule.GetColumnWidth, ViewSchedule.SetColumnWidth - ViewSchedule.SetColumnWidth, Wall.GetTotalWidth - Get Wall's  Total Width parameter",
            "engine_metadata": "",
            "engine_version": "0.9.1.3067",
            "created": "2016-01-18T23:12:13.414Z",
            "full_dependency_versions": [ "0.8.30" ],
            "full_dependency_ids": [
              {
                "_id": "545a51aa893c653357000008",
                "name": "SteamNodes"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "0.8.30"
          },
          {
            "_id": "56a69128c3e9ee4a0800002b",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/31878ffb-7cd6-43a7-919d-4b6160599b62gregPkg409.zip",
            "contents": "Element.GetParts - Get parts for the elements from Input. Returns Parts and Parent elements, Analytical.CreateLineBoundaryCondition - Create Line Boundary Condition from Analytical Line, Analytical.CreateLineLoadBeta - beta 1, Area.CreateAtPoint - create Area from center points at Level, Area.CreateAtUV - create Area from center points at Level, Area.CreateFromPlanCircuit - Place new Areas in Plan Circuit, Element.3DCropViewTopBaseOffset - create 3d view for each element and crop view, Element.Create 3D Cropped view - create 3d view for each element and crop view, Element.GetFromLinkedFile - Get elements from link document instance based on category, Element.GetParts - Get parts for the elements from Input. Returns Parts and Parent elements, Element.IsTagged - Checks if all Elements are tagged in the project, Element.MakeParts - Create Parts from valid elements, Parts.Getparents - Returns parents of selected Parts, Element.SelectInView - Select the input elements in active view, Element.TypeName - Get Type Name as string, List.FilterByString - Filter a list by a string match, List.Operations - List A-B / List Intersection / List symmetric difference, Parts.ElementsAreValidToCreateParts - Filter Elements to create Parts from, Parts.Genealogy - Get Parent, Childs and PartMaker for any Part, Parts.IsFromLinkedElement - Check if Parts are derived from linked elements, Schedule.GetCalculatedValues - Get Schedule Calculated Values from name input, Schedule.GetTextFromHeader - from Viewschedule input, returns columns header values as text, Tool.AddVoidCut - Add void cut for a Set of elements. In combination with Get surrounding elements node., Tool.AlignSheetViewsFromTemplateSheet - Align views and schedules from a sheet template, Tool.AssemblyViews - Create Sheet and Views for Assembly instances, Tool.CreateAssembly - Create an Assembly for each element, Tool.CreateEmptySheet - Add the amount of sheets from titleblock type, Tool.CreateRoomAtPointAndLevel - create rooms from center points at Level, Tool.ElementsInGroup - returns elements from a given group, selected by his name, Tool.Eraser - Try to delete any element from project, Tool.EraserByName - erase things in a list, selected by the name, Tool.ExportDWF - Export Views to DWF file, Tool.GetLineStyleByName - Collects LineStyle from string.contains, Tool.GetPhaseByName - Get Document Phases by String, Tool.GetRevitSelection - get the selection from the revit UI, works for views, Tool.GetSurroundingElements - Get Surrounding Elements by Categories, group them  as  List. Tolerance distance available., Tool.IntersectionChecker - Checks if elements have a geometrical intersection. The result is a list of list, with First Element is checked against the others., Tool.PhysicalBeamToAnalytical - **MANUAL MODE ONLY**\r\nMove Physical Beam to his Analytical model location, Tool.PlaceGroupAtPoint - place a given group at given points, Tool.RemoveVoidCut - Add void cut for a Set of elements. In combination with Get surrounding elements node., Tool.RenameAssembly - Rename Existing Assembly - doesn't work yet at Assembly creation (transaction related, WIP)\r\nBeware: same length Lists, Tool.RunMe - Use Boolean to perform an action, Tool.Toggle - Offers 2 ways for output, Tool.UnusedTypes - collects unused types in model before deletion, Tool.UpdateString - Replace a Parameter string value by another one, View.ApplyViewTemplate - Applies a view template to any given view(s). Supply a string with a view template name., View.CropView - Crop a 3D view, View.GetViewport - Get Vieworts from Views, View.ViewPortBoxCenter - Get ViewPort Box center point, Viewport.SetBoxCenter - API class, ViewSchedule.GetColumnWidth - ViewSchedule.GetColumnWidth, ViewSchedule.SetColumnWidth - ViewSchedule.SetColumnWidth, Wall.GetTotalWidth - Get Wall's  Total Width parameter",
            "engine_metadata": "",
            "engine_version": "0.9.1.3067",
            "created": "2016-01-25T21:18:32.985Z",
            "full_dependency_versions": [ "0.8.40" ],
            "full_dependency_ids": [
              {
                "_id": "545a51aa893c653357000008",
                "name": "SteamNodes"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "0.8.40"
          },
          {
            "_id": "56a7e493c3e9ee4a0800003d",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/7e105575-248c-4a2a-be18-016b35be7b42gregPkg795.zip",
            "contents": "Analytical.CreateLineBoundaryCondition - Create Line Boundary Condition from Analytical Line, Analytical.CreateLineLoadBeta - beta 1, Area.CreateAtPoint - create Area from center points at Level, Area.CreateAtUV - create Area from center points at Level, Area.CreateFromPlanCircuit - Place new Areas in Plan Circuit, Element.3DCropViewTopBaseOffset - create 3d view for each element and crop view, Element.Create 3D Cropped view - create 3d view for each element and crop view, Element.GetFromLinkedFile - Get elements from link document instance based on category, Element.GetParts - Get parts for the elements from Input. Returns Parts and Parent elements, Element.IsTagged - Checks if all Elements are tagged in the project, Element.MakeParts - Create Parts from valid elements, Parts.Getparents - Returns parents of selected Parts, Element.SelectInView - Select the input elements in active view, Element.TypeName - Get Type Name as string, List.FilterByString - Filter a list by a string match, List.Operations - List A-B / List Intersection / List symmetric difference, Parts.ElementsAreValidToCreateParts - Filter Elements to create Parts from, Parts.Genealogy - Get Parent, Childs and PartMaker for any Part, Parts.IsFromLinkedElement - Check if Parts are derived from linked elements, Schedule.GetCalculatedValues - Get Schedule Calculated Values from name input, Schedule.GetTextFromHeader - from Viewschedule input, returns columns header values as text, Tool.AddVoidCut - Add void cut for a Set of elements. In combination with Get surrounding elements node., Tool.AlignSheetViewsFromTemplateSheet - Align views and schedules from a sheet template, Tool.AssemblyViews - Create Sheet and Views for Assembly instances, Tool.CreateAssembly - Create an Assembly for each element, Tool.CreateEmptySheet - Add the amount of sheets from titleblock type. numbers and names are set from lists, Tool.CreateRoomAtPointAndLevel - create rooms from center points at Level, Tool.ElementsInGroup - returns elements from a given group, selected by his name, Tool.Eraser - Try to delete any element from project, Tool.EraserByName - erase things in a list, selected by the name, Tool.ExportDWF - Export Views to DWF file, Tool.GetLineStyleByName - Collects LineStyle from string.contains, Tool.GetPhaseByName - Get Document Phases by String, Tool.GetRevitSelection - get the selection from the revit UI, works for views, Tool.GetSurroundingElements - Get Surrounding Elements by Categories, group them  as  List. Tolerance distance available., Tool.IntersectionChecker - Checks if elements have a geometrical intersection. The result is a list of list, with First Element is checked against the others., Tool.PhysicalBeamToAnalytical - **MANUAL MODE ONLY**\r\nMove Physical Beam to his Analytical model location, Tool.PlaceGroupAtPoint - place a given group at given points, Tool.RemoveVoidCut - Add void cut for a Set of elements. In combination with Get surrounding elements node., Tool.RenameAssembly - Rename Existing Assembly - doesn't work yet at Assembly creation (transaction related, WIP)\r\nBeware: same length Lists, Tool.RunMe - Use Boolean to perform an action, Tool.Toggle - Offers 2 ways for output, Tool.UnusedTypes - collects unused types in model before deletion, Tool.UpdateString - Replace a Parameter string value by another one, View.ApplyViewTemplate - Applies a view template to any given view(s). Supply a string with a view template name., View.CropView - Crop a 3D view, View.GetViewport - Get Vieworts from Views, View.ViewPortBoxCenter - Get ViewPort Box center point, Viewport.SetBoxCenter - API class, ViewSchedule.GetColumnWidth - ViewSchedule.GetColumnWidth, ViewSchedule.SetColumnWidth - ViewSchedule.SetColumnWidth, Wall.GetTotalWidth - Get Wall's  Total Width parameter",
            "engine_metadata": "",
            "engine_version": "0.9.1.3067",
            "created": "2016-01-26T21:26:43.969Z",
            "full_dependency_versions": [ "0.8.41" ],
            "full_dependency_ids": [
              {
                "_id": "545a51aa893c653357000008",
                "name": "SteamNodes"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "0.8.41"
          },
          {
            "_id": "56afeaadc3e9ee4a0800007a",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/a3b4b17a-45bd-4631-a7d3-42a429437509gregPkg761.zip",
            "contents": "Analytical.CreateLineBoundaryCondition - Create Line Boundary Condition from Analytical Line, Analytical.CreateLineLoadBeta - beta 1, Area.CreateAtPoint - create Area from center points at Level, Area.CreateAtUV - create Area from center points at Level, Area.CreateFromPlanCircuit - Place new Areas in Plan Circuit, Element.3DCropViewTopBaseOffset - create 3d view for each element and crop view, Element.Create 3D Cropped view - create 3d view for each element and crop view, Element.GetFromLinkedFile - Get elements from link document instance based on category, Element.GetParts - Get parts for the elements from Input. Returns Parts and Parent elements, Element.IsTagged - Checks if all Elements are tagged in the project, Element.MakeParts - Create Parts from valid elements, Parts.Getparents - Returns parents of selected Parts, Element.SelectInView - Select the input elements in active view, Element.TypeName - Get Type Name as string, List.FilterByString - Filter a list by a string match, List.Operations - List A-B / List Intersection / List symmetric difference, Parts.ElementsAreValidToCreateParts - Filter Elements to create Parts from, Parts.Genealogy - Get Parent, Childs and PartMaker for any Part, Parts.IsFromLinkedElement - Check if Parts are derived from linked elements, Schedule.GetCalculatedValues - Get Schedule Calculated Values from name input, Schedule.GetTextFromHeader - from Viewschedule input, returns columns header values as text, Tool.AddVoidCut - Add void cut for a Set of elements. In combination with Get surrounding elements node., Tool.AlignSheetViewsFromTemplateSheet - Align views and schedules from a sheet template, Tool.AssemblyViews - Create Sheet and Views for Assembly instances, Tool.CreateAssembly - Create an Assembly for each element, Tool.CreateEmptySheet - Add the amount of sheets from titleblock type. numbers and names are set from lists, Tool.CreateRoomAtPointAndLevel - create rooms from center points at Level, Tool.ElementsInGroup - returns elements from a given group, selected by his name, Tool.Eraser - Try to delete any element from project, Tool.EraserByName - erase things in a list, selected by the name, Tool.ExportDWF - Export Views to DWF file, Tool.GetLineStyleByName - Collects LineStyle from string.contains, Tool.GetPhaseByName - Get Document Phases by String, Tool.GetRevitSelection - get the selection from the revit UI, works for views, Tool.GetSurroundingElements - Get Surrounding Elements by Categories, group them  as  List. Tolerance distance available., Tool.IntersectionChecker - Checks if elements have a geometrical intersection. The result is a list of list, with First Element is checked against the others., Tool.PhysicalBeamToAnalytical - **MANUAL MODE ONLY**\r\nMove Physical Beam to his Analytical model location, Tool.PlaceGroupAtPoint - place a given group at given points, Tool.RemoveVoidCut - Add void cut for a Set of elements. In combination with Get surrounding elements node., Tool.RenameAssembly - Rename Existing Assembly - doesn't work yet at Assembly creation (transaction related, WIP)\r\nBeware: same length Lists, Tool.RunMe - Use Boolean to perform an action, Tool.Toggle - Offers 2 ways for output, Tool.UnusedTypes - collects unused types in model before deletion, Tool.UpdateString - Replace a Parameter string value by another one, View.ApplyViewTemplate - Applies a view template to any given view(s). Supply a string with a view template name., View.CropView - Crop a 3D view, View.GetViewport - Get Vieworts from Views, View.ViewPortBoxCenter - Get ViewPort Box center point, Viewport.SetBoxCenter - API class, ViewSchedule.GetColumnWidth - ViewSchedule.GetColumnWidth, ViewSchedule.SetColumnWidth - ViewSchedule.SetColumnWidth, Wall.GetTotalWidth - Get Wall's  Total Width parameter",
            "engine_metadata": "",
            "engine_version": "0.9.1.3067",
            "created": "2016-02-01T23:30:53.486Z",
            "full_dependency_versions": [ "0.8.42" ],
            "full_dependency_ids": [
              {
                "_id": "545a51aa893c653357000008",
                "name": "SteamNodes"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "0.8.42"
          },
          {
            "_id": "5704da605bee3e21380000ef",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/ff9db5fe-2721-4ada-8e3a-96945e03d248gregPkg712.zip",
            "contents": "Analytical.CreateLineBoundaryCondition - Create Line Boundary Condition from Analytical Line, Analytical.CreateLineLoadBeta - beta 1, Area.CreateAtPoint - create Area from center points at Level, Area.CreateAtUV - create Area from center points at Level, Area.CreateFromPlanCircuit - Place new Areas in Plan Circuit, Element.3DCropViewTopBaseOffset - create 3d view for each element and crop view, Element.Create 3D Cropped view - create 3d view for each element and crop view, Element.GetFromLinkedFile - Get elements from link document instance based on category, Element.GetParts - Get parts for the elements from Input. Returns Parts and Parent elements, Element.IsTagged - Checks if all Elements are tagged in the project, Element.MakeParts - Create Parts from valid elements, Parts.Getparents - Returns parents of selected Parts, Element.SelectInView - Select the input elements in active view, Element.TypeName - Get Type Name as string, List.FilterByString - Filter a list by a string match, List.Operations - List A-B / List Intersection / List symmetric difference, Parts.ElementsAreValidToCreateParts - Filter Elements to create Parts from, Parts.Genealogy - Get Parent, Childs and PartMaker for any Part, Parts.IsFromLinkedElement - Check if Parts are derived from linked elements, Schedule.GetCalculatedValues - Get Schedule Calculated Values from name input, Schedule.GetTextFromHeader - from Viewschedule input, returns columns header values as text, Tool.AddVoidCut - Add void cut for a Set of elements. In combination with Get surrounding elements node., Tool.AlignSheetViewsFromTemplateSheet - Align views and schedules from a sheet template, Tool.AssemblyViews - Create Sheet and Views for Assembly instances, Tool.CreateAssembly - Create an Assembly for each element, Tool.CreateEmptySheet - Add the amount of sheets from titleblock type. numbers and names are set from lists, Tool.CreateRoomAtPointAndLevel - create rooms from center points at Level, Tool.ElementsInGroup - returns elements from a given group, selected by his name, Tool.Eraser - Try to delete any element from project, Tool.EraserByName - erase things in a list, selected by the name, Tool.ExportDWF - Export Views to DWF file, Tool.GetFillPatternTarget - Returns the target (drafting-model-none) from a FillPatternElement, Tool.GetLineStyleByName - Collects LineStyle from string.contains, Tool.GetPhaseByName - Get Document Phases by String, Tool.GetRevitSelection - get the selection from the revit UI, works for views, Tool.GetSurroundingElements - Get Surrounding Elements by Categories, group them  as  List. Tolerance distance available., Tool.IntersectionChecker - Checks if elements have a geometrical intersection. The result is a list of list, with First Element is checked against the others., Tool.PhysicalBeamToAnalytical - **MANUAL MODE ONLY**\r\nMove Physical Beam to his Analytical model location, Tool.PlaceGroupAtPoint - place a given group at given points, Tool.RemoveVoidCut - Add void cut for a Set of elements. In combination with Get surrounding elements node., Tool.RenameAssembly - Rename Existing Assembly - doesn't work yet at Assembly creation (transaction related, WIP)\r\nBeware: same length Lists, Tool.RunMe - Use Boolean to perform an action, Tool.Toggle - Offers 2 ways for output, Tool.UnusedTypes - collects unused types in model before deletion, Tool.UpdateString - Replace a Parameter string value by another one, View.ApplyViewTemplate - Applies a view template to any given view(s). Supply a string with a view template name., View.CropView - Crop a 3D view, View.GetViewport - Get Vieworts from Views, View.ViewPortBoxCenter - Get ViewPort Box center point, Viewport.SetBoxCenter - API class, ViewSchedule.GetColumnWidth - ViewSchedule.GetColumnWidth, ViewSchedule.SetColumnWidth - ViewSchedule.SetColumnWidth, Wall.GetTotalWidth - Get Wall's  Total Width parameter",
            "engine_metadata": "",
            "engine_version": "0.9.2.4472",
            "created": "2016-04-06T09:44:00.483Z",
            "full_dependency_versions": [ "0.8.43" ],
            "full_dependency_ids": [
              {
                "_id": "545a51aa893c653357000008",
                "name": "SteamNodes"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "0.8.43"
          },
          {
            "_id": "575f2bf7e70394822f000094",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-prod/14184975-fa30-4297-8e05-56cb096a0bcbgregPkg652.zip",
            "contents": "Analytical.CreateLineBoundaryCondition - Create Line Boundary Condition from Analytical Line, Area.CreateAtPoint - create Area from center points at Level, Area.CreateAtUV - create Area from center points at Level, Area.CreateFromPlanCircuit - Place new Areas in Plan Circuit, Element.3DCropViewTopBaseOffset - create 3d view for each element and crop view, Element.Create 3D Cropped view - create 3d view for each element and crop view, Element.GetFromLinkedFile - Get elements from link document instance based on category, Element.GetParts - Get parts for the elements from Input. Returns Parts and Parent elements, Element.IsTagged - Checks if all Elements are tagged in the project, Element.MakeParts - Create Parts from valid elements, Element.SelectInView - Select the input elements in active view. Disconnect / Connect to refresh., Element.TypeName - Get Type Name as string, List.FilterByString - Filter a list by a string match, List.Operations - List A-B / List Intersection / List symmetric difference, Parts.ElementsAreValidToCreateParts - Filter Elements to create Parts from, Parts.Genealogy - Get Parent, Childs and PartMaker for any Part, Parts.Getparents - Returns parents of selected Parts, Parts.IsFromLinkedElement - Check if Parts are derived from linked elements, Schedule.GetCalculatedValues - Get Schedule Calculated Values from name input, Schedule.GetTextFromHeader - from Viewschedule input, returns columns header values as text, Tool.AddVoidCut - Add void cut for a Set of elements. In combination with Get surrounding elements node., Tool.AlignSheetViewsFromTemplateSheet - Align views and schedules from a sheet template, Tool.AssemblyViews - Create Sheet and Views for Assembly instances, Tool.CreateAssembly - Create an Assembly for each element, Tool.CreateEmptySheet - Add the amount of sheets from titleblock type. numbers and names are set from lists, Tool.CreateRoomAtPointAndLevel - create rooms from center points at Level, Tool.ElementsInGroup - returns elements from a given group, selected by his name, Tool.Eraser - Try to delete any element from project, Tool.EraserByName - erase things in a list, selected by the name, Tool.ExportDWF - Export Views to DWF file, Tool.GetFillPatternTarget - Returns the target (drafting-model-none) from a FillPatternElement, Tool.GetLineStyleByName - Collects LineStyle from string.contains, Tool.GetPhaseByName - Get Document Phases by String, Tool.GetRevitSelection - Get the selection from the Revit UI, use boolean action to refresh when selection must be updated, Tool.GetSurroundingElements - Get Surrounding Elements by Categories, group them  as  List. Tolerance distance available., Tool.IntersectionChecker - Checks if elements have a geometrical intersection. The result is a list of list, with First Element is checked against the others., Tool.PhysicalBeamToAnalytical - **MANUAL MODE ONLY**\r\nMove Physical Beam to his Analytical model location, Tool.PlaceGroupAtPoint - place a given group at given points, Tool.RemoveVoidCut - Add void cut for a Set of elements. In combination with Get surrounding elements node., Tool.RenameAssembly - Rename Existing Assembly - doesn't work yet at Assembly creation (transaction related, WIP)\r\nBeware: same length Lists, Tool.RunMe - Use Boolean to perform an action, Tool.Toggle - Offers 2 ways for output, Tool.UnusedTypes - collects unused types in model before deletion, View.ApplyViewTemplate - Applies a view template to any given view(s). Supply a string with a view template name., View.CropView - Crop a 3D view, View.GetViewport - Get Vieworts from Views, View.ViewPortBoxCenter - Get ViewPort Box center point, Viewport.SetBoxCenter - API class, ViewSchedule.GetColumnWidth - ViewSchedule.GetColumnWidth, ViewSchedule.SetColumnWidth - ViewSchedule.SetColumnWidth, Wall.GetTotalWidth - Get Wall's  Total Width parameter",
            "engine_metadata": "",
            "engine_version": "1.0.0.1180",
            "created": "2016-06-13T21:56:07.756Z",
            "full_dependency_versions": [ "1.0.0" ],
            "full_dependency_ids": [
              {
                "_id": "545a51aa893c653357000008",
                "name": "SteamNodes"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "1.0.0"
          },
          {
            "_id": "582752045af9f3713d00004f",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-prod/3ace5b21-525b-418b-b987-5c6119ea3c40gregPkg475.zip",
            "contents": "Analytical.CreateLineBoundaryCondition - Create Line Boundary Condition from Analytical Line, Analytical.CreateLineLoadBeta - beta 1, Area.CreateAtPoint - create Area from center points at Level, Area.CreateAtUV - create Area from center points at Level, Area.CreateFromPlanCircuit - Place new Areas in Plan Circuit, Element.3DCropViewTopBaseOffset - create 3d view for each element and crop view, Element.Create 3D Cropped view - create 3d view for each element and crop view, Element.GetFromLinkedFile - Get elements from link document instance based on category, Element.GetParts - Get parts for the elements from Input. Returns Parts and Parent elements, Element.IsTagged - Checks if all Elements are tagged in the project, Element.MakeParts - Create Parts from valid elements, Parts.Getparents - Returns parents of selected Parts, Element.SelectInView - Select the input elements in active view. Disconnect / Connect to refresh., Element.TypeName - Get Type Name as string, List.FilterByString - Filter a list by a string match, List.Operations - List A-B / List Intersection / List symmetric difference, List.SortByFunctionGetNmaxvalues - Get N max values from a sorted list, Parts.ElementsAreValidToCreateParts - Filter Elements to create Parts from, Parts.Genealogy - Get Parent, Childs and PartMaker for any Part, Parts.IsFromLinkedElement - Check if Parts are derived from linked elements, PointCloud.GetPointsFromBoxSelection - WIP: collects the points from a point cloud instance by using a box shape collector (aka a Revit element such as a Mass). Mass geometry has to be a box (parallel faces).\r\nThe number of points read must range from 1 to 1000000. Default 50000.\r\nAverage Distance is a setting for PC density. Less distance increases the number of points.\r\n, Schedule.GetCalculatedValues - Get Schedule Calculated Values from name input, Schedule.GetTextFromHeader - from Viewschedule input, returns columns header values as text, Tool.AddVoidCut - Add void cut for a Set of elements. In combination with Get surrounding elements node., Tool.AlignSheetViewsFromTemplateSheet - Align views and schedules from a sheet template, Tool.AssemblyViews - Create Sheet and Views for Assembly instances, Tool.CreateAssembly - Create an Assembly for each element, Tool.CreateEmptySheet - Add the amount of sheets from titleblock type. numbers and names are set from lists, Tool.CreateRoomAtPointAndLevel - create rooms from center points at Level, Tool.CropViewFromRoomShapeWithOffset - Crop the floor plan view according to the room shape with an offset value., Tool.ElementsInGroup - returns elements from a given group, selected by his name, Tool.Eraser - Try to delete any element from project, Tool.EraserByName - erase things in a list, selected by the name, Tool.ExportDWF - Export Views to DWF file, Tool.GetFillPatternTarget - Returns the target (drafting-model-none) from a FillPatternElement, Tool.GetLineStyleByName - Collects LineStyle from string.contains, Tool.GetPhaseByName - Get Document Phases by String, Tool.GetRevitSelection - Get the selection from the Revit UI, use boolean action to refresh when selection must be updated, Tool.GetSurroundingElements - Get Surrounding Elements by Categories, group them  as  List. Tolerance distance available., Tool.IntersectionChecker - Checks if elements have a geometrical intersection. The result is a list of list, with First Element is checked against the others., Tool.PhysicalBeamToAnalytical - **MANUAL MODE ONLY**\r\nMove Physical Beam to his Analytical model location, Tool.PlaceGroupAtPoint - place a given group at given points, Tool.PlaceViewsOnExistingSheets - Place the views on the sheets at the points you provide., Tool.PlaceViewsOnSheets - Places existing views on existing sheets, Tool.RemoveVoidCut - Add void cut for a Set of elements. In combination with Get surrounding elements node., Tool.RenameAssembly - Rename Existing Assembly - doesn't work yet at Assembly creation (transaction related, WIP)\r\nBeware: same length Lists, Tool.RunMe - Use Boolean to perform an action, Tool.Toggle - Offers 2 ways for output, Tool.UnusedTypes - collects unused types in model before deletion, Tool.UpdateString - Replace a Parameter string value by another one, View.ApplyViewTemplate - Applies a view template to any given view(s). Supply a string with a view template name., View.CropView - Crop a 3D view, View.GetViewport - Get Vieworts from Views, View.ViewPortBoxCenter - Get ViewPort Box center point, Viewport.SetBoxCenter - API class, ViewSchedule.GetColumnWidth - ViewSchedule.GetColumnWidth, ViewSchedule.SetColumnWidth - ViewSchedule.SetColumnWidth, Wall.GetTotalWidth - Get Wall's  Total Width parameter",
            "engine_metadata": "",
            "engine_version": "1.2.0.2690",
            "created": "2016-11-12T17:31:48.423Z",
            "full_dependency_versions": [ "1.2.0" ],
            "full_dependency_ids": [
              {
                "_id": "545a51aa893c653357000008",
                "name": "SteamNodes"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "1.2.0"
          },
          {
            "_id": "582753b05af9f3713d000050",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-prod/67570d7e-f04b-4b6c-8916-f9143570fe96gregPkg889.zip",
            "contents": "Analytical.CreateLineBoundaryCondition - Create Line Boundary Condition from Analytical Line, Analytical.CreateLineLoadBeta - beta 1, Area.CreateAtPoint - create Area from center points at Level, Area.CreateAtUV - create Area from center points at Level, Area.CreateFromPlanCircuit - Place new Areas in Plan Circuit, Element.3DCropViewTopBaseOffset - create 3d view for each element and crop view, Element.Create 3D Cropped view - create 3d view for each element and crop view, Element.GetFromLinkedFile - Get elements from link document instance based on category, Element.GetParts - Get parts for the elements from Input. Returns Parts and Parent elements, Element.IsTagged - Checks if all Elements are tagged in the project, Element.MakeParts - Create Parts from valid elements, Element.SelectInView - Select the input elements in active view. Disconnect / Connect to refresh., Element.TypeName - Get Type Name as string, List.FilterByString - Filter a list by a string match, List.Operations - List A-B / List Intersection / List symmetric difference, List.SortByFunctionGetNmaxvalues - Get N max values from a sorted list, Parts.ElementsAreValidToCreateParts - Filter Elements to create Parts from, Parts.Genealogy - Get Parent, Childs and PartMaker for any Part, Parts.Getparents - Returns parents of selected Parts, Parts.IsFromLinkedElement - Check if Parts are derived from linked elements, PointCloud.GetPointsFromBoxSelection - WIP: collects the points from a point cloud instance by using a box shape collector (aka a Revit element such as a Mass). Mass geometry has to be a box (parallel faces).\r\nThe number of points read must range from 1 to 1000000. Default 50000.\r\nAverage Distance is a setting for PC density. Less distance increases the number of points.\r\n, Schedule.GetCalculatedValues - Get Schedule Calculated Values from name input, Schedule.GetTextFromHeader - from Viewschedule input, returns columns header values as text, Tool.AddVoidCut - Add void cut for a Set of elements. In combination with Get surrounding elements node., Tool.AlignSheetViewsFromTemplateSheet - Align views and schedules from a sheet template, Tool.AssemblyViews - Create Sheet and Views for Assembly instances, Tool.CreateAssembly - Create an Assembly for each element, Tool.CreateEmptySheet - Add the amount of sheets from titleblock type. numbers and names are set from lists, Tool.CreateRoomAtPointAndLevel - create rooms from center points at Level, Tool.CropViewFromRoomShapeWithOffset - Crop the floor plan view according to the room shape with an offset value., Tool.ElementsInGroup - returns elements from a given group, selected by his name, Tool.Eraser - Try to delete any element from project, Tool.EraserByName - erase things in a list, selected by the name, Tool.ExportDWF - Export Views to DWF file, Tool.GetFillPatternTarget - Returns the target (drafting-model-none) from a FillPatternElement, Tool.GetLineStyleByName - Collects LineStyle from string.contains, Tool.GetPhaseByName - Get Document Phases by String, Tool.GetRevitSelection - Get the selection from the Revit UI, use boolean action to refresh when selection must be updated, Tool.GetSurroundingElements - Get Surrounding Elements by Categories, group them  as  List. Tolerance distance available., Tool.IntersectionChecker - Checks if elements have a geometrical intersection. The result is a list of list, with First Element is checked against the others., Tool.PhysicalBeamToAnalytical - **MANUAL MODE ONLY**\r\nMove Physical Beam to his Analytical model location, Tool.PlaceGroupAtPoint - place a given group at given points, Tool.PlaceViewsOnExistingSheets - Place the views on the sheets at the points you provide., Tool.PlaceViewsOnSheets - Places existing views on existing sheets, Tool.RemoveVoidCut - Add void cut for a Set of elements. In combination with Get surrounding elements node., Tool.RenameAssembly - Rename Existing Assembly - doesn't work yet at Assembly creation (transaction related, WIP)\r\nBeware: same length Lists, Tool.RunMe - Use Boolean to perform an action, Tool.Toggle - Offers 2 ways for output, Tool.UnusedTypes - collects unused types in model before deletion, Tool.UpdateString - Replace a Parameter string value by another one, View.ApplyViewTemplate - Applies a view template to any given view(s). Supply a string with a view template name., View.CropView - Crop a 3D view, View.GetViewport - Get Vieworts from Views, View.ViewPortBoxCenter - Get ViewPort Box center point, Viewport.SetBoxCenter - API class, ViewSchedule.GetColumnWidth - ViewSchedule.GetColumnWidth, ViewSchedule.SetColumnWidth - ViewSchedule.SetColumnWidth, Wall.GetTotalWidth - Get Wall's  Total Width parameter",
            "engine_metadata": "",
            "engine_version": "1.2.0.2690",
            "created": "2016-11-12T17:38:56.981Z",
            "full_dependency_versions": [ "1.2.1" ],
            "full_dependency_ids": [
              {
                "_id": "545a51aa893c653357000008",
                "name": "SteamNodes"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "1.2.1"
          },
          {
            "_id": "584fc8a7fdef23aa6e000100",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-prod/5d93248c-9999-4cbe-b998-0f8f0a3f43e2gregPkg542.zip",
            "contents": "Analytical.CreateLineBoundaryCondition - Create Line Boundary Condition from Analytical Line, Analytical.CreateLineLoadBeta - beta 1, Area.CreateAtPoint - create Area from center points at Level, Area.CreateAtUV - create Area from center points at Level, Area.CreateFromPlanCircuit - Place new Areas in Plan Circuit, Element.3DCropViewTopBaseOffset - create 3d view for each element and crop view, Element.Create 3D Cropped view - create 3d view for each element and crop view, Element.GetFromLinkedFile - Get elements from link document instance based on category, Element.GetParts - Get parts for the elements from Input. Returns Parts and Parent elements, Element.IsTagged - Checks if all Elements are tagged in the project, Element.MakeParts - Create Parts from valid elements, Element.SelectInView - Select the input elements in active view. Disconnect / Connect to refresh., Element.TypeName - Get Type Name as string, List.FilterByString - Filter a list by a string match, List.Operations - List A-B / List Intersection / List symmetric difference, List.SortByFunctionGetNmaxvalues - Get N max values from a sorted list, Parts.ElementsAreValidToCreateParts - Filter Elements to create Parts from, Parts.Genealogy - Get Parent, Childs and PartMaker for any Part, Parts.Getparents - Returns parents of selected Parts, Parts.IsFromLinkedElement - Check if Parts are derived from linked elements, PointCloud.GetPointsFromBoxSelection - WIP: collects the points from a point cloud instance by using a box shape collector (aka a Revit element such as a Mass). Mass geometry has to be a box (parallel faces).\r\nThe number of points read must range from 1 to 1000000. Default 50000.\r\nAverage Distance is a setting for PC density. Less distance increases the number of points.\r\n, Schedule.GetCalculatedValues - Get Schedule Calculated Values from name input, Schedule.GetTextFromHeader - from Viewschedule input, returns columns header values as text, Tool.AddVoidCut - Add void cut for a Set of elements. In combination with Get surrounding elements node., Tool.AlignSheetViewsFromTemplateSheet - Align views and schedules from a sheet template, Tool.AssemblyViews - Create Sheet and Views for Assembly instances, Tool.CreateAssembly - Create an Assembly for each element, Tool.CreateEmptySheet - Add the amount of sheets from titleblock type. numbers and names are set from lists, Tool.CreateRoomAtPointAndLevel - create rooms from center points at Level, Tool.CropViewFromRoomShapeWithOffset - Crop the floor plan view according to the room shape with an offset value., Tool.ElementsInGroup - returns elements from a given group, selected by his name, Tool.Eraser - Try to delete any element from project, Tool.EraserByName - erase things in a list, selected by the name, Tool.ExportDWF - Export Views to DWF file, Tool.GetFillPatternTarget - Returns the target (drafting-model-none) from a FillPatternElement, Tool.GetLineStyleByName - Collects LineStyle from string.contains, Tool.GetPhaseByName - Get Document Phases by String, Tool.GetRevitSelection - Get the selection from the Revit UI, use boolean action to refresh when selection must be updated, Tool.GetSurroundingElements - Get Surrounding Elements by Categories, group them  as  List. Tolerance distance available., Tool.IntersectionChecker - Checks if elements have a geometrical intersection. The result is a list of list, with First Element is checked against the others., Tool.PhysicalBeamToAnalytical - **MANUAL MODE ONLY**\r\nMove Physical Beam to his Analytical model location, Tool.PlaceGroupAtPoint - place a given group at given points, Tool.PlaceViewsOnExistingSheets - Place the views on the sheets at the points you provide., Tool.PlaceViewsOnSheets - Places existing views on existing sheets, Tool.PointComponents - X Y Z of points, Tool.RemoveVoidCut - Add void cut for a Set of elements. In combination with Get surrounding elements node., Tool.RenameAssembly - Rename Existing Assembly - doesn't work yet at Assembly creation (transaction related, WIP)\r\nBeware: same length Lists, Tool.RunMe - Use Boolean to perform an action, Tool.Toggle - Offers 2 ways for output, Tool.UnusedTypes - collects unused types in model before deletion, Tool.UpdateString - Replace a Parameter string value by another one, Tool.WeightedAverage - Calculate Weigted Average of 2 lists, View.ApplyViewTemplate - Applies a view template to any given view(s). Supply a string with a view template name., View.CropView - Crop a 3D view, View.GetViewport - Get Vieworts from Views, View.ViewPortBoxCenter - Get ViewPort Box center point, Viewport.SetBoxCenter - API class, ViewSchedule.GetColumnWidth - ViewSchedule.GetColumnWidth, ViewSchedule.SetColumnWidth - ViewSchedule.SetColumnWidth, Wall.GetTotalWidth - Get Wall's  Total Width parameter",
            "engine_metadata": "",
            "engine_version": "1.2.1.3083",
            "created": "2016-12-13T10:08:39.826Z",
            "full_dependency_versions": [ "1.2.2" ],
            "full_dependency_ids": [
              {
                "_id": "545a51aa893c653357000008",
                "name": "SteamNodes"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "1.2.2"
          },
          {
            "_id": "58530391fdef23aa6e00012d",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-prod/cfb06597-8a51-4dd8-8f4b-c97366cf95ddgregPkg533.zip",
            "contents": "Analytical.CreateLineBoundaryCondition - Create Line Boundary Condition from Analytical Line, Analytical.CreateLineLoadBeta - beta 1, Area.CreateAtPoint - create Area from center points at Level, Area.CreateAtUV - create Area from center points at Level, Area.CreateFromPlanCircuit - Place new Areas in Plan Circuit, Element.3DCropViewTopBaseOffset - create 3d view for each element and crop view, Element.Create 3D Cropped view - create 3d view for each element and crop view, Element.GetFromLinkedFile - Get elements from link document instance based on category, Element.GetParts - Get parts for the elements from Input. Returns Parts and Parent elements, Element.IsTagged - Checks if all Elements are tagged in the project, Element.MakeParts - Create Parts from valid elements, Element.SelectInView - Select the input elements in active view. Disconnect / Connect to refresh., Element.TypeName - Get Type Name as string, List.FilterByString - Filter a list by a string match, List.Operations - List A-B / List Intersection / List symmetric difference, List.SortByFunctionGetNmaxvalues - Get N max values from a sorted list, Parts.ElementsAreValidToCreateParts - Filter Elements to create Parts from, Parts.Genealogy - Get Parent, Childs and PartMaker for any Part, Parts.Getparents - Returns parents of selected Parts, Parts.IsFromLinkedElement - Check if Parts are derived from linked elements, PointCloud.GetPointsFromBoxSelection - WIP: collects the points from a point cloud instance by using a box shape collector (aka a Revit element such as a Mass). Mass geometry has to be a box (parallel faces).\r\nThe number of points read must range from 1 to 1000000. Default 50000.\r\nAverage Distance is a setting for PC density. Less distance increases the number of points.\r\n, Schedule.GetCalculatedValues - Get Schedule Calculated Values from name input, Schedule.GetTextFromHeader - from Viewschedule input, returns columns header values as text, Tool.AddVoidCut - Add void cut for a Set of elements. In combination with Get surrounding elements node., Tool.AlignSheetViewsFromTemplateSheet - Align views and schedules from a sheet template, Tool.AssemblyViews - Create Sheet and Views for Assembly instances, Tool.CreateAssembly - Create an Assembly for each element, Tool.CreateEmptySheet - Add the amount of sheets from titleblock type. numbers and names are set from lists, Tool.CreateRoomAtPointAndLevel - create rooms from center points at Level, Tool.CropViewFromRoomShapeWithOffset - Crop the floor plan view according to the room shape with an offset value., Tool.ElementsInGroup - returns elements from a given group, selected by his name, Tool.Eraser - Try to delete any element from project, Tool.EraserByName - erase things in a list, selected by the name, Tool.ExportDWF - Export Views to DWF file, Tool.GetFillPatternTarget - Returns the target (drafting-model-none) from a FillPatternElement, Tool.GetLineStyleByName - Collects LineStyle from string.contains, Tool.GetPhaseByName - Get Document Phases by String, Tool.GetRevitSelection - Get the selection from the Revit UI, use boolean action to refresh when selection must be updated, Tool.GetSurroundingElements - Get Surrounding Elements by Categories, group them  as  List. Tolerance distance available., Tool.IntersectionChecker - Checks if elements have a geometrical intersection. The result is a list of list, with First Element is checked against the others., Tool.PhysicalBeamToAnalytical - **MANUAL MODE ONLY**\r\nMove Physical Beam to his Analytical model location, Tool.PlaceGroupAtPoint - place a given group at given points, Tool.PlaceViewsOnExistingSheets - Place the views on the sheets at the points you provide., Tool.PlaceViewsOnSheets - Places existing views on existing sheets, Tool.PointComponents - X Y Z of points, Tool.RemoveVoidCut - Add void cut for a Set of elements. In combination with Get surrounding elements node., Tool.RenameAssembly - Rename Existing Assembly - doesn't work yet at Assembly creation (transaction related, WIP)\r\nBeware: same length Lists, Tool.RunMe - Use Boolean to perform an action, Tool.Toggle - Offers 2 ways for output, Tool.UnusedTypes - collects unused types in model before deletion, Tool.UpdateString - Replace a Parameter string value by another one, Tool.WeightedAverage - Calculate Weigted Average of 2 lists, View.ApplyViewTemplate - Applies a view template to any given view(s). Supply a string with a view template name., View.CropView - Crop a 3D view, View.GetViewport - Get Vieworts from Views, View.ViewPortBoxCenter - Get ViewPort Box center point, Viewport.SetBoxCenter - API class, ViewSchedule.GetColumnWidth - ViewSchedule.GetColumnWidth, ViewSchedule.SetColumnWidth - ViewSchedule.SetColumnWidth, Wall.GetTotalWidth - Get Wall's  Total Width parameter",
            "engine_metadata": "",
            "engine_version": "1.2.1.3083",
            "created": "2016-12-15T20:56:49.583Z",
            "full_dependency_versions": [ "1.2.3" ],
            "full_dependency_ids": [
              {
                "_id": "545a51aa893c653357000008",
                "name": "SteamNodes"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "1.2.3"
          }
        ],
        "latest_version_update": "2016-12-15T20:56:49.583Z",
        "num_versions": 36,
        "comments": [ ],
        "num_comments": 0,
        "latest_comment": "1970-01-01T00:00:00.000Z",
        "votes": -3,
        "downloads": 16165,
        "repository_url": "",
        "site_url": "https://aecuandme.wordpress.com/",
        "banned": false,
        "deprecated": false,
        "group": "",
        "engine": "dynamo",
        "license": "MIT",
        "used_by": [
          {
            "_id": "555e8bfea8367b98610000b8",
            "name": "Bakery"
          },
          {
            "_id": "5507ae3e0c7eac9b57000053",
            "name": "BVN"
          },
          {
            "_id": "56dadd8e5bee3e2138000025",
            "name": "MOST-BCF2014"
          },
          {
            "_id": "5828c0155af9f3713d000057",
            "name": "FrTe"
          },
          {
            "_id": "582ed4885af9f3713d0000b6",
            "name": "BIMSYK"
          },
          {
            "_id": "57dbd203882d868b4200000d",
            "name": "SYKES"
          },
          {
            "_id": "5835897f7332da0d25000003",
            "name": "Summerisle"
          },
          {
            "_id": "584c2d99fdef23aa6e0000d0",
            "name": "MyVit"
          },
          {
            "_id": "58c6bb92f4db78ec010000f2",
            "name": "lineal"
          },
          {
            "_id": "58e4e62db529d0bb2400007d",
            "name": "Structural Rebar"
          },
          {
            "_id": "58e4eba8b529d0bb24000080",
            "name": "BS-Rebar-LapSplice"
          },
          {
            "_id": "58e4ee8fb529d0bb24000084",
            "name": "BimSolutions.rebar"
          },
          {
            "_id": "57ebcea9b135d45974000031",
            "name": "KC Star"
          },
          {
            "_id": "58e4fec3b529d0bb24000089",
            "name": "BS-RebarLabSplice"
          },
          {
            "_id": "58e5188fb529d0bb2400008f",
            "name": "BS.Rebar"
          }
        ],
        "num_dependents": 15,
        "description": "A set of various nodes to implement a Dynamo workflow in your job. contact: @jbenoit44",
        "maintainers": [
          {
            "_id": "530f6303bfe42595360000b3",
            "username": "julien_benoit"
          }
        ],
        "keywords": [ "steamnodes", "bad", "monkeys" ],
        "created": "2014-11-05T16:34:50.452Z"
      },
      {

        "_id": "5592f3b0f2ae5a9a07000100",
        "__v": 55,
        "name": "BumbleBee",
        "white_list": false,
        "versions": [
          {
            "_id": "5592f3b0f2ae5a9a07000101",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/93e6c44e-046f-40ba-b7cf-07fd67ce2ffdgregPkg806.zip",
            "contents": "(2) Color Scale Format Condition - This node will generate a two (2) color scheme that can be used to format a range of numbers in Excel., (3) Color Scale Format Condition - This node will generate a three (3) color scheme that can be used to format a range of numbers in Excel., BB Data - This node is a building block for different modes of writing to Excel files. You can combines this node into a list to write to multiple sheets or use just one to write to a single sheet. , Border Style - This node can be used to change default formatting of Excel cells using Format Excel of Conditionally Format Excel Nodes. , Cell Index - This node will convert an excel address notation from string format (A1) to index format (1,1)., Cell Value Format Condition - This node creates a format condition based on a cell value. , Condition Value Type - This node will return all Condition Value Types that are available for use with Excel., Conditionally Format Excel - This node will allow you to apply conditional formatting to an Excel document or a specific range within the document., Data Bar Format Condition - This node will generate a Data Bar format condition. Based on range of numbers a small bar will be placed in a cell that graphically represents the value contained within the cell. , Direction Types - This node returns all direction types available in Excel., Expression Format Condition - This node will generate an expression based formatting condition that can be used with Conditionally Format Excel Node., Fill Style - This node generates a Fill Style that can be used for conditional formatting or regular cell formatting., Get Worksheet Names - This node will query an Excel file and return a list of sheet names that it contains. , Graphic Style - This node will create a graphic style that can be used either for conditional formatting or regular cell formatting. , Horizontal Align Type - This node will return all horizontal justification types that can be used when defning text style., Line Types - This node will return all Line Types that are available for use with Excel., Line Weight Type - This node will return all Line Weight Types that are available for use in Excel, Operator Types - This node returns all operator types available in Excel., Pattern Types - This node will return all pattern types available in Excel., Read Excel - This node will read an excel file. You can read an entore sheet contents, read from specific origin cell, read only specific range, or do all of the former for multiple sheets at the same time. , Search Value Get Row - This node will search the Excel Spreadsheet for a single string value and return an entire row of data that this value was found in. For example if key was found at A15 then entire row 15 will be returned., Text Style - This node will generate a text style that can be used to format excel or with conditional formatting., Top/Bottom Percentile Format Condition - This node will generate a Formatting Condition based on the top/bottom ranked values. It can either be top percentile (0-100) or number of top/bottom ranked values (top 10 values for example)., Vertical Align Type - This node will return all Vertical justification types available in Excel that can be used to define text style., Write Excel - This node will write data to Excel file and based on how your BBData nodes are structured it will either override the exsting file, create a new one and write a single worksheet or write multiple worksheets. ",
            "engine_metadata": "",
            "engine_version": "0.8.0.950",
            "created": "2015-06-30T19:53:20.577Z",
            "full_dependency_versions": [ "2015.6.30" ],
            "full_dependency_ids": [
              {
                "_id": "5592f3b0f2ae5a9a07000100",
                "name": "BumbleBee"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2015.6.30"
          },
          {
            "_id": "5593fab3f2ae5a9a07000105",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/c2cdd811-f10f-431d-a284-50a826bcd72egregPkg93.zip",
            "contents": "(2) Color Scale Format Condition - This node will generate a two (2) color scheme that can be used to format a range of numbers in Excel., (3) Color Scale Format Condition - This node will generate a three (3) color scheme that can be used to format a range of numbers in Excel., BB Data - This node is a building block for different modes of writing to Excel files. You can combines this node into a list to write to multiple sheets or use just one to write to a single sheet. , Border Style - This node can be used to change default formatting of Excel cells using Format Excel of Conditionally Format Excel Nodes. , Cell Index - This node will convert an excel address notation from string format (A1) to index format (1,1)., Cell Value Format Condition - This node creates a format condition based on a cell value. , Condition Value Type - This node will return all Condition Value Types that are available for use with Excel., Conditionally Format Excel - This node will allow you to apply conditional formatting to an Excel document or a specific range within the document., Data Bar Format Condition - This node will generate a Data Bar format condition. Based on range of numbers a small bar will be placed in a cell that graphically represents the value contained within the cell. , Direction Types - This node returns all direction types available in Excel., Expression Format Condition - This node will generate an expression based formatting condition that can be used with Conditionally Format Excel Node., Fill Style - This node generates a Fill Style that can be used for conditional formatting or regular cell formatting., Get Worksheet Names - This node will query an Excel file and return a list of sheet names that it contains. , Graphic Style - This node will create a graphic style that can be used either for conditional formatting or regular cell formatting. , Horizontal Align Type - This node will return all horizontal justification types that can be used when defning text style., Line Types - This node will return all Line Types that are available for use with Excel., Line Weight Type - This node will return all Line Weight Types that are available for use in Excel, Operator Types - This node returns all operator types available in Excel., Pattern Types - This node will return all pattern types available in Excel., Read Excel - This node will read an excel file. You can read an entore sheet contents, read from specific origin cell, read only specific range, or do all of the former for multiple sheets at the same time. , Search Value Get Row - This node will search the Excel Spreadsheet for a single string value and return an entire row of data that this value was found in. For example if key was found at A15 then entire row 15 will be returned., Text Style - This node will generate a text style that can be used to format excel or with conditional formatting., Top/Bottom Percentile Format Condition - This node will generate a Formatting Condition based on the top/bottom ranked values. It can either be top percentile (0-100) or number of top/bottom ranked values (top 10 values for example)., Vertical Align Type - This node will return all Vertical justification types available in Excel that can be used to define text style., Write Excel - This node will write data to Excel file and based on how your BBData nodes are structured it will either override the exsting file, create a new one and write a single worksheet or write multiple worksheets. ",
            "engine_metadata": "",
            "engine_version": "0.8.0.950",
            "created": "2015-07-01T14:35:31.149Z",
            "full_dependency_versions": [ "2015.7.1" ],
            "full_dependency_ids": [
              {
                "_id": "5592f3b0f2ae5a9a07000100",
                "name": "BumbleBee"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2015.7.1"
          },
          {
            "_id": "5594321af2ae5a9a0700010a",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/427b24d6-8ec6-4c1c-8431-5d5d75e06f43gregPkg5.zip",
            "contents": "(2) Color Scale Format Condition - This node will generate a two (2) color scheme that can be used to format a range of numbers in Excel., (3) Color Scale Format Condition - This node will generate a three (3) color scheme that can be used to format a range of numbers in Excel., BB Data - This node is a building block for different modes of writing to Excel files. You can combines this node into a list to write to multiple sheets or use just one to write to a single sheet. , Border Style - This node can be used to change default formatting of Excel cells using Format Excel of Conditionally Format Excel Nodes. , Cell Index - This node will convert an excel address notation from string format (A1) to index format (1,1)., Cell Value Format Condition - This node creates a format condition based on a cell value. , Condition Value Type - This node will return all Condition Value Types that are available for use with Excel., Conditionally Format Excel - This node will allow you to apply conditional formatting to an Excel document or a specific range within the document., Data Bar Format Condition - This node will generate a Data Bar format condition. Based on range of numbers a small bar will be placed in a cell that graphically represents the value contained within the cell. , Direction Types - This node returns all direction types available in Excel., Expression Format Condition - This node will generate an expression based formatting condition that can be used with Conditionally Format Excel Node., Fill Style - This node generates a Fill Style that can be used for conditional formatting or regular cell formatting., Get Worksheet Names - This node will query an Excel file and return a list of sheet names that it contains. , Graphic Style - This node will create a graphic style that can be used either for conditional formatting or regular cell formatting. , Horizontal Align Type - This node will return all horizontal justification types that can be used when defning text style., Line Types - This node will return all Line Types that are available for use with Excel., Line Weight Type - This node will return all Line Weight Types that are available for use in Excel, Operator Types - This node returns all operator types available in Excel., Pattern Types - This node will return all pattern types available in Excel., Read Excel - This node will read an excel file. You can read an entore sheet contents, read from specific origin cell, read only specific range, or do all of the former for multiple sheets at the same time. , Search Value Get Row - This node will search the Excel Spreadsheet for a single string value and return an entire row of data that this value was found in. For example if key was found at A15 then entire row 15 will be returned., Text Style - This node will generate a text style that can be used to format excel or with conditional formatting., Top/Bottom Percentile Format Condition - This node will generate a Formatting Condition based on the top/bottom ranked values. It can either be top percentile (0-100) or number of top/bottom ranked values (top 10 values for example)., Vertical Align Type - This node will return all Vertical justification types available in Excel that can be used to define text style., Write Excel - This node will write data to Excel file and based on how your BBData nodes are structured it will either override the exsting file, create a new one and write a single worksheet or write multiple worksheets. ",
            "engine_metadata": "",
            "engine_version": "0.8.0.950",
            "created": "2015-07-01T18:31:54.351Z",
            "full_dependency_versions": [ "2015.7.2" ],
            "full_dependency_ids": [
              {
                "_id": "5592f3b0f2ae5a9a07000100",
                "name": "BumbleBee"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2015.7.2"
          },
          {
            "_id": "559bf36bf2ae5a9a0700011c",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/cae36904-11cd-419f-a18d-0da6107fc55dgregPkg310.zip",
            "contents": "(2) Color Scale Format Condition - This node will generate a two (2) color scheme that can be used to format a range of numbers in Excel., (3) Color Scale Format Condition - This node will generate a three (3) color scheme that can be used to format a range of numbers in Excel., BB Data - This node is a building block for different modes of writing to Excel files. You can combines this node into a list to write to multiple sheets or use just one to write to a single sheet. , Border Style - This node can be used to change default formatting of Excel cells using Format Excel of Conditionally Format Excel Nodes. , Cell Index - This node will convert an excel address notation from string format (A1) to index format (1,1)., Cell Value Format Condition - This node creates a format condition based on a cell value. , Condition Value Type - This node will return all Condition Value Types that are available for use with Excel., Conditionally Format Excel - This node will allow you to apply conditional formatting to an Excel document or a specific range within the document., Data Bar Format Condition - This node will generate a Data Bar format condition. Based on range of numbers a small bar will be placed in a cell that graphically represents the value contained within the cell. , Direction Types - This node returns all direction types available in Excel., Expression Format Condition - This node will generate an expression based formatting condition that can be used with Conditionally Format Excel Node., Fill Style - This node generates a Fill Style that can be used for conditional formatting or regular cell formatting., Get Worksheet Names - This node will query an Excel file and return a list of sheet names that it contains. , Graphic Style - This node will create a graphic style that can be used either for conditional formatting or regular cell formatting. , Horizontal Align Type - This node will return all horizontal justification types that can be used when defning text style., Line Types - This node will return all Line Types that are available for use with Excel., Line Weight Type - This node will return all Line Weight Types that are available for use in Excel, Live Write Excel - This node will allow you to write to Excel file that is currently open and you will be able to see the results of your data stream live in excel. , Operator Types - This node returns all operator types available in Excel., Pattern Types - This node will return all pattern types available in Excel., Read Excel - This node will read an excel file. You can read an entore sheet contents, read from specific origin cell, read only specific range, or do all of the former for multiple sheets at the same time. , Search Value Get Row - This node will search the Excel Spreadsheet for a single string value and return an entire row of data that this value was found in. For example if key was found at A15 then entire row 15 will be returned., Text Style - This node will generate a text style that can be used to format excel or with conditional formatting., Top/Bottom Percentile Format Condition - This node will generate a Formatting Condition based on the top/bottom ranked values. It can either be top percentile (0-100) or number of top/bottom ranked values (top 10 values for example)., Vertical Align Type - This node will return all Vertical justification types available in Excel that can be used to define text style., Write Excel - This node will write data to Excel file and based on how your BBData nodes are structured it will either override the exsting file, create a new one and write a single worksheet or write multiple worksheets. ",
            "engine_metadata": "",
            "engine_version": "0.8.0.950",
            "created": "2015-07-07T15:42:35.426Z",
            "full_dependency_versions": [ "2015.7.7" ],
            "full_dependency_ids": [
              {
                "_id": "5592f3b0f2ae5a9a07000100",
                "name": "BumbleBee"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2015.7.7"
          },
          {
            "_id": "55a7c74d662bf0e90800001c",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/65817311-1879-4127-9861-7bbd0f5d8c9cgregPkg710.zip",
            "contents": "(2) Color Scale Format Condition - This node will generate a two (2) color scheme that can be used to format a range of numbers in Excel., (3) Color Scale Format Condition - This node will generate a three (3) color scheme that can be used to format a range of numbers in Excel., BB Data - This node is a building block for different modes of writing to Excel files. You can combines this node into a list to write to multiple sheets or use just one to write to a single sheet. , Border Style - This node can be used to change default formatting of Excel cells using Format Excel of Conditionally Format Excel Nodes. , Cell Index - This node will convert an excel address notation from string format (A1) to index format (1,1)., Cell Value Format Condition - This node creates a format condition based on a cell value. , Condition Value Type - This node will return all Condition Value Types that are available for use with Excel., Conditionally Format Excel - This node will allow you to apply conditional formatting to an Excel document or a specific range within the document., Data Bar Format Condition - This node will generate a Data Bar format condition. Based on range of numbers a small bar will be placed in a cell that graphically represents the value contained within the cell. , Direction Types - This node returns all direction types available in Excel., Expression Format Condition - This node will generate an expression based formatting condition that can be used with Conditionally Format Excel Node., Fill Style - This node generates a Fill Style that can be used for conditional formatting or regular cell formatting., Get Worksheet Names - This node will query an Excel file and return a list of sheet names that it contains. , Graphic Style - This node will create a graphic style that can be used either for conditional formatting or regular cell formatting. , Horizontal Align Type - This node will return all horizontal justification types that can be used when defning text style., Line Types - This node will return all Line Types that are available for use with Excel., Line Weight Type - This node will return all Line Weight Types that are available for use in Excel, Live Write Excel - This node will allow you to write to Excel file that is currently open and you will be able to see the results of your data stream live in excel. , Operator Types - This node returns all operator types available in Excel., Pattern Types - This node will return all pattern types available in Excel., Read Excel - This node will read an excel file. You can read an entore sheet contents, read from specific origin cell, read only specific range, or do all of the former for multiple sheets at the same time. , Search Value Get Row - This node will search the Excel Spreadsheet for a single string value and return an entire row of data that this value was found in. For example if key was found at A15 then entire row 15 will be returned., Text Style - This node will generate a text style that can be used to format excel or with conditional formatting., Top/Bottom Percentile Format Condition - This node will generate a Formatting Condition based on the top/bottom ranked values. It can either be top percentile (0-100) or number of top/bottom ranked values (top 10 values for example)., Vertical Align Type - This node will return all Vertical justification types available in Excel that can be used to define text style., Write Excel - This node will write data to Excel file and based on how your BBData nodes are structured it will either override the exsting file, create a new one and write a single worksheet or write multiple worksheets. , Chart Style - This node will generate a style that can be used to format a chart., Graph Style - This node will generate a style that can be used to control appearance of the graph portion of the chart., Label Position Types - This node will return all currently available position types that can e assign to labels on a chart., Legend Style - This node will generate a style to visually format a chart legend. , Pie Chart Types - This node will return all pie chart types that can be generated using bumblebee Pie Chart node. , Pie Chart - This node will generate a new Pie Chart in your currently running session of Excel.",
            "engine_metadata": "",
            "engine_version": "0.8.0.950",
            "created": "2015-07-16T15:01:33.737Z",
            "full_dependency_versions": [ "2015.7.16" ],
            "full_dependency_ids": [
              {
                "_id": "5592f3b0f2ae5a9a07000100",
                "name": "BumbleBee"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2015.7.16"
          },
          {
            "_id": "561d294d662bf0e908000252",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/f2005052-5626-4dfb-ad9d-67e4cfd2c7e8gregPkg455.zip",
            "contents": "(2) Color Scale Format Condition - This node will generate a two (2) color scheme that can be used to format a range of numbers in Excel., (3) Color Scale Format Condition - This node will generate a three (3) color scheme that can be used to format a range of numbers in Excel., BB Data - This node is a building block for different modes of writing to Excel files. You can combines this node into a list to write to multiple sheets or use just one to write to a single sheet. , BB Style - This node is a building block for different modes of formatting an Excel file. You can combines this node into a list to apply formatting to multiple ranges or sheets at the same time. , Border Style - This node can be used to change default formatting of Excel cells using Format Excel of Conditionally Format Excel Nodes. , Cell Index - This node will convert an excel address notation from string format (A1) to index format (1,1)., Cell Value Format Condition - This node creates a format condition based on a cell value. , Chart Style - This node will generate a style that can be used to format a chart., Clear Contents - This node will clear contents or formatting from a range within Excel sheet or an entire sheet. , Conditionally Format Excel - This node will allow you to apply conditional formatting to an Excel document or a specific range within the document., Data Bar Format Condition - This node will generate a Data Bar format condition. Based on range of numbers a small bar will be placed in a cell that graphically represents the value contained within the cell. , Expression Format Condition - This node will generate an expression based formatting condition that can be used with Conditionally Format Excel Node., Fill Style - This node generates a Fill Style that can be used for conditional formatting or regular cell formatting., Format Excel - This node will allow you to apply formatting to a specific range within the document. You can format a single range on a single sheet or multiple ranges on multiple sheets at the same time., Get Worksheet Names - This node will query an Excel file and return a list of sheet names that it contains. , Graphic Style - This node will create a graphic style that can be used either for conditional formatting or regular cell formatting. , Label Style - This node will generate a style that can be used to format labels on a chart., Legend Style - This node will generate a style to visually format a chart legend. , Line Chart Graph Style - This node controls appearance of the graph area of the chart. In this case it will be the line portion of the Line Chart., Line Chart - This node will generate a Line Chart in Excel., Line Style - This node controls Chart's Line Style ex. Line Chart., Live Write Excel - This node will allow you to write to Excel file that is currently open and you will be able to see the results of your data stream live in excel. , Marker Style - This node controls the Marker Style that can be used with charts ex. Line Chart., New File By Template - This node will take a template file and create a new file based on that template. , Pie Chart Graph Style - This node will generate a style that can be used to control appearance of the graph portion of the chart., Pie Chart - This node will generate a new Pie Chart in your currently running session of Excel., Read Excel - This node will read an excel file. You can read an entore sheet contents, read from specific origin cell, read only specific range, or do all of the former for multiple sheets at the same time. , Search Value Get Row - This node will search the Excel Spreadsheet for a single string value and return an entire row of data that this value was found in. For example if key was found at A15 then entire row 15 will be returned., Text Style - This node will generate a text style that can be used to format excel or with conditional formatting., Top/Bottom Percentile Format Condition - This node will generate a Formatting Condition based on the top/bottom ranked values. It can either be top percentile (0-100) or number of top/bottom ranked values (top 10 values for example)., Write Excel - This node will write data to Excel file and based on how your BBData nodes are structured it will either override the exsting file, create a new one and write a single worksheet or write multiple worksheets. ",
            "engine_metadata": "",
            "engine_version": "0.8.2.2392",
            "created": "2015-10-13T15:54:53.824Z",
            "full_dependency_versions": [ "2015.10.12" ],
            "full_dependency_ids": [
              {
                "_id": "5592f3b0f2ae5a9a07000100",
                "name": "BumbleBee"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2015.10.12"
          },
          {
            "_id": "56427642662bf0e90800031c",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/30e39dfe-0c17-491c-a3f7-3092c496407fgregPkg995.zip",
            "contents": "(2) Color Scale Format Condition - This node will generate a two (2) color scheme that can be used to format a range of numbers in Excel., (3) Color Scale Format Condition - This node will generate a three (3) color scheme that can be used to format a range of numbers in Excel., BB Data - This node is a building block for different modes of writing to Excel files. You can combines this node into a list to write to multiple sheets or use just one to write to a single sheet. , BB Style - This node is a building block for different modes of formatting an Excel file. You can combines this node into a list to apply formatting to multiple ranges or sheets at the same time. , Border Style - This node can be used to change default formatting of Excel cells using Format Excel of Conditionally Format Excel Nodes. , Cell Index - This node will convert an excel address notation from string format (A1) to index format (1,1)., Cell Value Format Condition - This node creates a format condition based on a cell value. , Chart Style - This node will generate a style that can be used to format a chart., Clear Contents - This node will clear contents or formatting from a range within Excel sheet or an entire sheet. , Conditionally Format Excel - This node will allow you to apply conditional formatting to an Excel document or a specific range within the document., Data Bar Format Condition - This node will generate a Data Bar format condition. Based on range of numbers a small bar will be placed in a cell that graphically represents the value contained within the cell. , Expression Format Condition - This node will generate an expression based formatting condition that can be used with Conditionally Format Excel Node., Fill Style - This node generates a Fill Style that can be used for conditional formatting or regular cell formatting., Format Excel - This node will allow you to apply formatting to a specific range within the document. You can format a single range on a single sheet or multiple ranges on multiple sheets at the same time., Get Worksheet Names - This node will query an Excel file and return a list of sheet names that it contains. , Graphic Style - This node will create a graphic style that can be used either for conditional formatting or regular cell formatting. , Label Style - This node will generate a style that can be used to format labels on a chart., Legend Style - This node will generate a style to visually format a chart legend. , Line Chart Graph Style - This node controls appearance of the graph area of the chart. In this case it will be the line portion of the Line Chart., Line Chart - This node will generate a Line Chart in Excel., Line Style - This node controls Chart's Line Style ex. Line Chart., Live Write Excel - This node will allow you to write to Excel file that is currently open and you will be able to see the results of your data stream live in excel. , Marker Style - This node controls the Marker Style that can be used with charts ex. Line Chart., New File By Template - This node will take a template file and create a new file based on that template. , Pie Chart Graph Style - This node will generate a style that can be used to control appearance of the graph portion of the chart., Pie Chart - This node will generate a new Pie Chart in your currently running session of Excel., Read Excel - This node will read an excel file. You can read an entore sheet contents, read from specific origin cell, read only specific range, or do all of the former for multiple sheets at the same time. , Search Value Get Row - This node will search the Excel Spreadsheet for a single string value and return an entire row of data that this value was found in. For example if key was found at A15 then entire row 15 will be returned., Text Style - This node will generate a text style that can be used to format excel or with conditional formatting., Top/Bottom Percentile Format Condition - This node will generate a Formatting Condition based on the top/bottom ranked values. It can either be top percentile (0-100) or number of top/bottom ranked values (top 10 values for example)., Write Excel - This node will write data to Excel file and based on how your BBData nodes are structured it will either override the exsting file, create a new one and write a single worksheet or write multiple worksheets. ",
            "engine_metadata": "",
            "engine_version": "0.9.1.2912",
            "created": "2015-11-10T22:57:06.347Z",
            "full_dependency_versions": [ "2015.11.10" ],
            "full_dependency_ids": [
              {
                "_id": "5592f3b0f2ae5a9a07000100",
                "name": "BumbleBee"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2015.11.10"
          },
          {
            "_id": "56965a7dc6d90c553d00000a",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/84f970de-0553-4e4d-91cf-def08963d8eagregPkg31.zip",
            "contents": "(2) Color Scale Format Condition - This node will generate a two (2) color scheme that can be used to format a range of numbers in Excel., (3) Color Scale Format Condition - This node will generate a three (3) color scheme that can be used to format a range of numbers in Excel., BB Data - This node is a building block for different modes of writing to Excel files. You can combines this node into a list to write to multiple sheets or use just one to write to a single sheet. , BB Style - This node is a building block for different modes of formatting an Excel file. You can combines this node into a list to apply formatting to multiple ranges or sheets at the same time. , Border Style - This node can be used to change default formatting of Excel cells using Format Excel of Conditionally Format Excel Nodes. , Cell Index - This node will convert an excel address notation from string format (A1) to index format (1,1)., Cell Value Format Condition - This node creates a format condition based on a cell value. , Chart Style - This node will generate a style that can be used to format a chart., Clear Contents - This node will clear contents or formatting from a range within Excel sheet or an entire sheet. , Conditionally Format Excel - This node will allow you to apply conditional formatting to an Excel document or a specific range within the document., Data Bar Format Condition - This node will generate a Data Bar format condition. Based on range of numbers a small bar will be placed in a cell that graphically represents the value contained within the cell. , Expression Format Condition - This node will generate an expression based formatting condition that can be used with Conditionally Format Excel Node., Fill Style - This node generates a Fill Style that can be used for conditional formatting or regular cell formatting., Format Excel - This node will allow you to apply formatting to a specific range within the document. You can format a single range on a single sheet or multiple ranges on multiple sheets at the same time., Get Worksheet Names - This node will query an Excel file and return a list of sheet names that it contains. , Graphic Style - This node will create a graphic style that can be used either for conditional formatting or regular cell formatting. , Label Style - This node will generate a style that can be used to format labels on a chart., Legend Style - This node will generate a style to visually format a chart legend. , Line Chart Graph Style - This node controls appearance of the graph area of the chart. In this case it will be the line portion of the Line Chart., Line Chart - This node will generate a Line Chart in Excel., Line Style - This node controls Chart's Line Style ex. Line Chart., Live Write Excel - This node will allow you to write to Excel file that is currently open and you will be able to see the results of your data stream live in excel. , Marker Style - This node controls the Marker Style that can be used with charts ex. Line Chart., New File By Template - This node will take a template file and create a new file based on that template. , Pie Chart Graph Style - This node will generate a style that can be used to control appearance of the graph portion of the chart., Pie Chart - This node will generate a new Pie Chart in your currently running session of Excel., Read Excel - This node will read an excel file. You can read an entore sheet contents, read from specific origin cell, read only specific range, or do all of the former for multiple sheets at the same time. , Search Value Get Row - This node will search the Excel Spreadsheet for a single string value and return an entire row of data that this value was found in. For example if key was found at A15 then entire row 15 will be returned., Text Style - This node will generate a text style that can be used to format excel or with conditional formatting., Top/Bottom Percentile Format Condition - This node will generate a Formatting Condition based on the top/bottom ranked values. It can either be top percentile (0-100) or number of top/bottom ranked values (top 10 values for example)., Write Excel - This node will write data to Excel file and based on how your BBData nodes are structured it will either override the exsting file, create a new one and write a single worksheet or write multiple worksheets. ",
            "engine_metadata": "",
            "engine_version": "0.9.1.2912",
            "created": "2016-01-13T14:09:01.779Z",
            "full_dependency_versions": [ "2016.1.13" ],
            "full_dependency_ids": [
              {
                "_id": "5592f3b0f2ae5a9a07000100",
                "name": "BumbleBee"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2016.1.13"
          },
          {
            "_id": "56a2ca1fc3e9ee4a0800001f",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/b271aead-f9b7-42d9-a1ba-a6e3affa72b9gregPkg567.zip",
            "contents": "(2) Color Scale Format Condition - This node will generate a two (2) color scheme that can be used to format a range of numbers in Excel., (3) Color Scale Format Condition - This node will generate a three (3) color scheme that can be used to format a range of numbers in Excel., BB Data - This node is a building block for different modes of writing to Excel files. You can combines this node into a list to write to multiple sheets or use just one to write to a single sheet. , BB Style - This node is a building block for different modes of formatting an Excel file. You can combines this node into a list to apply formatting to multiple ranges or sheets at the same time. , Border Style - This node can be used to change default formatting of Excel cells using Format Excel of Conditionally Format Excel Nodes. , Cell Index - This node will convert an excel address notation from string format (A1) to index format (1,1)., Cell Value Format Condition - This node creates a format condition based on a cell value. , Chart Style - This node will generate a style that can be used to format a chart., Clear Contents - This node will clear contents or formatting from a range within Excel sheet or an entire sheet. , Conditionally Format Excel - This node will allow you to apply conditional formatting to an Excel document or a specific range within the document., Data Bar Format Condition - This node will generate a Data Bar format condition. Based on range of numbers a small bar will be placed in a cell that graphically represents the value contained within the cell. , Expression Format Condition - This node will generate an expression based formatting condition that can be used with Conditionally Format Excel Node., Fill Style - This node generates a Fill Style that can be used for conditional formatting or regular cell formatting., Format Excel - This node will allow you to apply formatting to a specific range within the document. You can format a single range on a single sheet or multiple ranges on multiple sheets at the same time., Get Worksheet Names - This node will query an Excel file and return a list of sheet names that it contains. , Graphic Style - This node will create a graphic style that can be used either for conditional formatting or regular cell formatting. , Label Style - This node will generate a style that can be used to format labels on a chart., Legend Style - This node will generate a style to visually format a chart legend. , Line Chart Graph Style - This node controls appearance of the graph area of the chart. In this case it will be the line portion of the Line Chart., Line Chart - This node will generate a Line Chart in Excel., Line Style - This node controls Chart's Line Style ex. Line Chart., Live Write Excel - This node will allow you to write to Excel file that is currently open and you will be able to see the results of your data stream live in excel. , Marker Style - This node controls the Marker Style that can be used with charts ex. Line Chart., New File By Template - This node will take a template file and create a new file based on that template. , Pie Chart Graph Style - This node will generate a style that can be used to control appearance of the graph portion of the chart., Pie Chart - This node will generate a new Pie Chart in your currently running session of Excel., Read Excel - This node will read an excel file. You can read an entore sheet contents, read from specific origin cell, read only specific range, or do all of the former for multiple sheets at the same time. , Search Value Get Row - This node will search the Excel Spreadsheet for a single string value and return an entire row of data that this value was found in. For example if key was found at A15 then entire row 15 will be returned., Text Style - This node will generate a text style that can be used to format excel or with conditional formatting., Top/Bottom Percentile Format Condition - This node will generate a Formatting Condition based on the top/bottom ranked values. It can either be top percentile (0-100) or number of top/bottom ranked values (top 10 values for example)., Write Excel - This node will write data to Excel file and based on how your BBData nodes are structured it will either override the exsting file, create a new one and write a single worksheet or write multiple worksheets. , ReadExcel.ByRange - This node allows for reading an Excel file by specifying a Range in A1 formatting style \"A1:X11\" or by using a named range. ",
            "engine_metadata": "",
            "engine_version": "0.9.1.2912",
            "created": "2016-01-23T00:32:31.810Z",
            "full_dependency_versions": [ "2016.1.22" ],
            "full_dependency_ids": [
              {
                "_id": "5592f3b0f2ae5a9a07000100",
                "name": "BumbleBee"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2016.1.22"
          },
          {
            "_id": "56b92b0ec3e9ee4a080000cb",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/b6794dfb-25a7-468d-96c3-754274509523gregPkg279.zip",
            "contents": "(2) Color Scale Format Condition - This node will generate a two (2) color scheme that can be used to format a range of numbers in Excel., (3) Color Scale Format Condition - This node will generate a three (3) color scheme that can be used to format a range of numbers in Excel., BB Data - This node is a building block for different modes of writing to Excel files. You can combines this node into a list to write to multiple sheets or use just one to write to a single sheet. , BB Style - This node is a building block for different modes of formatting an Excel file. You can combines this node into a list to apply formatting to multiple ranges or sheets at the same time. , Border Style - This node can be used to change default formatting of Excel cells using Format Excel of Conditionally Format Excel Nodes. , Cell Index - This node will convert an excel address notation from string format (A1) to index format (1,1)., Cell Value Format Condition - This node creates a format condition based on a cell value. , Chart Style - This node will generate a style that can be used to format a chart., Clear Contents - This node will clear contents or formatting from a range within Excel sheet or an entire sheet. , Conditionally Format Excel - This node will allow you to apply conditional formatting to an Excel document or a specific range within the document., Data Bar Format Condition - This node will generate a Data Bar format condition. Based on range of numbers a small bar will be placed in a cell that graphically represents the value contained within the cell. , Expression Format Condition - This node will generate an expression based formatting condition that can be used with Conditionally Format Excel Node., Fill Style - This node generates a Fill Style that can be used for conditional formatting or regular cell formatting., Format Excel - This node will allow you to apply formatting to a specific range within the document. You can format a single range on a single sheet or multiple ranges on multiple sheets at the same time., Get Worksheet Names - This node will query an Excel file and return a list of sheet names that it contains. , Graphic Style - This node will create a graphic style that can be used either for conditional formatting or regular cell formatting. , Label Style - This node will generate a style that can be used to format labels on a chart., Legend Style - This node will generate a style to visually format a chart legend. , Line Chart Graph Style - This node controls appearance of the graph area of the chart. In this case it will be the line portion of the Line Chart., Line Chart - This node will generate a Line Chart in Excel., Line Style - This node controls Chart's Line Style ex. Line Chart., Live Write Excel - This node will allow you to write to Excel file that is currently open and you will be able to see the results of your data stream live in excel. , Marker Style - This node controls the Marker Style that can be used with charts ex. Line Chart., New File By Template - This node will take a template file and create a new file based on that template. , Pie Chart Graph Style - This node will generate a style that can be used to control appearance of the graph portion of the chart., Pie Chart - This node will generate a new Pie Chart in your currently running session of Excel., Read Excel - This node will read an excel file. You can read an entore sheet contents, read from specific origin cell, read only specific range, or do all of the former for multiple sheets at the same time. , ReadExcel.ByRange - This node allows for reading an Excel file by specifying a Range in A1 formatting style \"A1:X11\" or by using a named range. , Search Value Get Row - This node will search the Excel Spreadsheet for a single string value and return an entire row of data that this value was found in. For example if key was found at A15 then entire row 15 will be returned., Text Style - This node will generate a text style that can be used to format excel or with conditional formatting., Top/Bottom Percentile Format Condition - This node will generate a Formatting Condition based on the top/bottom ranked values. It can either be top percentile (0-100) or number of top/bottom ranked values (top 10 values for example)., Write Excel - This node will write data to Excel file and based on how your BBData nodes are structured it will either override the exsting file, create a new one and write a single worksheet or write multiple worksheets. ",
            "engine_metadata": "",
            "engine_version": "0.9.1.3872",
            "created": "2016-02-08T23:55:58.864Z",
            "full_dependency_versions": [ "2016.2.8" ],
            "full_dependency_ids": [
              {
                "_id": "5592f3b0f2ae5a9a07000100",
                "name": "BumbleBee"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2016.2.8"
          },
          {
            "_id": "56f459415bee3e213800009d",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/3e82fa70-d5b4-4e19-a612-67567393fb29gregPkg494.zip",
            "contents": "(2) Color Scale Format Condition - This node will generate a two (2) color scheme that can be used to format a range of numbers in Excel., (3) Color Scale Format Condition - This node will generate a three (3) color scheme that can be used to format a range of numbers in Excel., BB Data - This node is a building block for different modes of writing to Excel files. You can combines this node into a list to write to multiple sheets or use just one to write to a single sheet. , BB Style - This node is a building block for different modes of formatting an Excel file. You can combines this node into a list to apply formatting to multiple ranges or sheets at the same time. , Border Style - This node can be used to change default formatting of Excel cells using Format Excel of Conditionally Format Excel Nodes. , Cell Index - This node will convert an excel address notation from string format (A1) to index format (1,1)., Cell Value Format Condition - This node creates a format condition based on a cell value. , Chart Style - This node will generate a style that can be used to format a chart., Clear Contents - This node will clear contents or formatting from a range within Excel sheet or an entire sheet. , Conditionally Format Excel - This node will allow you to apply conditional formatting to an Excel document or a specific range within the document., Data Bar Format Condition - This node will generate a Data Bar format condition. Based on range of numbers a small bar will be placed in a cell that graphically represents the value contained within the cell. , Expression Format Condition - This node will generate an expression based formatting condition that can be used with Conditionally Format Excel Node., Fill Style - This node generates a Fill Style that can be used for conditional formatting or regular cell formatting., Format Excel - This node will allow you to apply formatting to a specific range within the document. You can format a single range on a single sheet or multiple ranges on multiple sheets at the same time., Get Worksheet Names - This node will query an Excel file and return a list of sheet names that it contains. , Graphic Style - This node will create a graphic style that can be used either for conditional formatting or regular cell formatting. , Label Style - This node will generate a style that can be used to format labels on a chart., Legend Style - This node will generate a style to visually format a chart legend. , Line Chart Graph Style - This node controls appearance of the graph area of the chart. In this case it will be the line portion of the Line Chart., Line Chart - This node will generate a Line Chart in Excel., Line Style - This node controls Chart's Line Style ex. Line Chart., Live Write Excel - This node will allow you to write to Excel file that is currently open and you will be able to see the results of your data stream live in excel. , Marker Style - This node controls the Marker Style that can be used with charts ex. Line Chart., New File By Template - This node will take a template file and create a new file based on that template. , Pie Chart Graph Style - This node will generate a style that can be used to control appearance of the graph portion of the chart., Pie Chart - This node will generate a new Pie Chart in your currently running session of Excel., Read Excel - This node will read an excel file. You can read an entore sheet contents, read from specific origin cell, read only specific range, or do all of the former for multiple sheets at the same time. , ReadExcel.ByRange - This node allows for reading an Excel file by specifying a Range in A1 formatting style \"A1:X11\" or by using a named range. , Search Value Get Row - This node will search the Excel Spreadsheet for a single string value and return an entire row of data that this value was found in. For example if key was found at A15 then entire row 15 will be returned., Text Style - This node will generate a text style that can be used to format excel or with conditional formatting., Top/Bottom Percentile Format Condition - This node will generate a Formatting Condition based on the top/bottom ranked values. It can either be top percentile (0-100) or number of top/bottom ranked values (top 10 values for example)., Write Excel - This node will write data to Excel file and based on how your BBData nodes are structured it will either override the exsting file, create a new one and write a single worksheet or write multiple worksheets. ",
            "engine_metadata": "",
            "engine_version": "0.9.1.3872",
            "created": "2016-03-24T21:16:49.974Z",
            "full_dependency_versions": [ "2016.3.24" ],
            "full_dependency_ids": [
              {
                "_id": "5592f3b0f2ae5a9a07000100",
                "name": "BumbleBee"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2016.3.24"
          },
          {
            "_id": "56fad03b5bee3e21380000b2",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/b5be4e97-43b9-4559-8b60-493628ca1522gregPkg531.zip",
            "contents": "(2) Color Scale Format Condition - This node will generate a two (2) color scheme that can be used to format a range of numbers in Excel., (3) Color Scale Format Condition - This node will generate a three (3) color scheme that can be used to format a range of numbers in Excel., BB Data - This node is a building block for different modes of writing to Excel files. You can combines this node into a list to write to multiple sheets or use just one to write to a single sheet. , BB Style - This node is a building block for different modes of formatting an Excel file. You can combines this node into a list to apply formatting to multiple ranges or sheets at the same time. , Border Style - This node can be used to change default formatting of Excel cells using Format Excel of Conditionally Format Excel Nodes. , Cell Index - This node will convert an excel address notation from string format (A1) to index format (1,1)., Cell Value Format Condition - This node creates a format condition based on a cell value. , Chart Style - This node will generate a style that can be used to format a chart., Clear Contents - This node will clear contents or formatting from a range within Excel sheet or an entire sheet. , Conditionally Format Excel - This node will allow you to apply conditional formatting to an Excel document or a specific range within the document., Data Bar Format Condition - This node will generate a Data Bar format condition. Based on range of numbers a small bar will be placed in a cell that graphically represents the value contained within the cell. , Expression Format Condition - This node will generate an expression based formatting condition that can be used with Conditionally Format Excel Node., Fill Style - This node generates a Fill Style that can be used for conditional formatting or regular cell formatting., Format Excel - This node will allow you to apply formatting to a specific range within the document. You can format a single range on a single sheet or multiple ranges on multiple sheets at the same time., Get Worksheet Names - This node will query an Excel file and return a list of sheet names that it contains. , Graphic Style - This node will create a graphic style that can be used either for conditional formatting or regular cell formatting. , Label Style - This node will generate a style that can be used to format labels on a chart., Legend Style - This node will generate a style to visually format a chart legend. , Line Chart Graph Style - This node controls appearance of the graph area of the chart. In this case it will be the line portion of the Line Chart., Line Chart - This node will generate a Line Chart in Excel., Line Style - This node controls Chart's Line Style ex. Line Chart., Live Write Excel - This node will allow you to write to Excel file that is currently open and you will be able to see the results of your data stream live in excel. , Marker Style - This node controls the Marker Style that can be used with charts ex. Line Chart., New File By Template - This node will take a template file and create a new file based on that template. , Pie Chart Graph Style - This node will generate a style that can be used to control appearance of the graph portion of the chart., Pie Chart - This node will generate a new Pie Chart in your currently running session of Excel., Read Excel - This node will read an excel file. You can read an entore sheet contents, read from specific origin cell, read only specific range, or do all of the former for multiple sheets at the same time. , ReadExcel.ByRange - This node allows for reading an Excel file by specifying a Range in A1 formatting style \"A1:X11\" or by using a named range. , Search Value Get Row - This node will search the Excel Spreadsheet for a single string value and return an entire row of data that this value was found in. For example if key was found at A15 then entire row 15 will be returned., Text Style - This node will generate a text style that can be used to format excel or with conditional formatting., Top/Bottom Percentile Format Condition - This node will generate a Formatting Condition based on the top/bottom ranked values. It can either be top percentile (0-100) or number of top/bottom ranked values (top 10 values for example)., Write Excel - This node will write data to Excel file and based on how your BBData nodes are structured it will either override the exsting file, create a new one and write a single worksheet or write multiple worksheets. ",
            "engine_metadata": "",
            "engine_version": "0.9.2.4472",
            "created": "2016-03-29T18:58:03.036Z",
            "full_dependency_versions": [ "2016.3.29" ],
            "full_dependency_ids": [
              {
                "_id": "5592f3b0f2ae5a9a07000100",
                "name": "BumbleBee"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2016.3.29"
          },
          {
            "_id": "57180a60305bec4d3c000006",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/e6cfbb85-e152-4b94-b310-0b7d0731d15cgregPkg320.zip",
            "contents": "(2) Color Scale Format Condition - This node will generate a two (2) color scheme that can be used to format a range of numbers in Excel., (3) Color Scale Format Condition - This node will generate a three (3) color scheme that can be used to format a range of numbers in Excel., BB Data - This node is a building block for different modes of writing to Excel files. You can combines this node into a list to write to multiple sheets or use just one to write to a single sheet. , BB Style - This node is a building block for different modes of formatting an Excel file. You can combines this node into a list to apply formatting to multiple ranges or sheets at the same time. , Border Style - This node can be used to change default formatting of Excel cells using Format Excel of Conditionally Format Excel Nodes. , Cell Index - This node will convert an excel address notation from string format (A1) to index format (1,1)., Cell Value Format Condition - This node creates a format condition based on a cell value. , Chart Style - This node will generate a style that can be used to format a chart., Clear Contents - This node will clear contents or formatting from a range within Excel sheet or an entire sheet. , Conditionally Format Excel - This node will allow you to apply conditional formatting to an Excel document or a specific range within the document., Data Bar Format Condition - This node will generate a Data Bar format condition. Based on range of numbers a small bar will be placed in a cell that graphically represents the value contained within the cell. , Expression Format Condition - This node will generate an expression based formatting condition that can be used with Conditionally Format Excel Node., Fill Style - This node generates a Fill Style that can be used for conditional formatting or regular cell formatting., Format Excel - This node will allow you to apply formatting to a specific range within the document. You can format a single range on a single sheet or multiple ranges on multiple sheets at the same time., Get Worksheet Names - This node will query an Excel file and return a list of sheet names that it contains. , Graphic Style - This node will create a graphic style that can be used either for conditional formatting or regular cell formatting. , Label Style - This node will generate a style that can be used to format labels on a chart., Legend Style - This node will generate a style to visually format a chart legend. , Line Chart Graph Style - This node controls appearance of the graph area of the chart. In this case it will be the line portion of the Line Chart., Line Chart - This node will generate a Line Chart in Excel., Line Style - This node controls Chart's Line Style ex. Line Chart., Marker Style - This node controls the Marker Style that can be used with charts ex. Line Chart., New File By Template - This node will take a template file and create a new file based on that template. , Pie Chart Graph Style - This node will generate a style that can be used to control appearance of the graph portion of the chart., Pie Chart - This node will generate a new Pie Chart in your currently running session of Excel., Read Excel - This node will read an excel file. You can read an entore sheet contents, read from specific origin cell, read only specific range, or do all of the former for multiple sheets at the same time. , ReadExcel.ByRange - This node allows for reading an Excel file by specifying a Range in A1 formatting style \"A1:X11\" or by using a named range. , Search Value Get Row - This node will search the Excel Spreadsheet for a single string value and return an entire row of data that this value was found in. For example if key was found at A15 then entire row 15 will be returned., Text Style - This node will generate a text style that can be used to format excel or with conditional formatting., Top/Bottom Percentile Format Condition - This node will generate a Formatting Condition based on the top/bottom ranked values. It can either be top percentile (0-100) or number of top/bottom ranked values (top 10 values for example)., Write Excel - This node will write data to Excel file and based on how your BBData nodes are structured it will either override the exsting file, create a new one and write a single worksheet or write multiple worksheets. ",
            "engine_metadata": "",
            "engine_version": "0.9.2.4472",
            "created": "2016-04-20T23:01:52.048Z",
            "full_dependency_versions": [ "2016.4.20" ],
            "full_dependency_ids": [
              {
                "_id": "5592f3b0f2ae5a9a07000100",
                "name": "BumbleBee"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2016.4.20"
          },
          {
            "_id": "5748d477e70394822f00001e",
            "contains_binaries": true,
            "node_libraries": [ "bumblebeeTypes, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "bumblebeeUI, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-prod/bcd1b1eb-b2c7-480a-8470-24549a7542d6gregPkg503.zip",
            "contents": "(2) Color Scale Format Condition - This node will generate a two (2) color scheme that can be used to format a range of numbers in Excel., (3) Color Scale Format Condition - This node will generate a three (3) color scheme that can be used to format a range of numbers in Excel., BB Data - This node is a building block for different modes of writing to Excel files. You can combines this node into a list to write to multiple sheets or use just one to write to a single sheet. , BB Style - This node is a building block for different modes of formatting an Excel file. You can combines this node into a list to apply formatting to multiple ranges or sheets at the same time. , Border Style - This node can be used to change default formatting of Excel cells using Format Excel of Conditionally Format Excel Nodes. , Cell Index - This node will convert an excel address notation from string format (A1) to index format (1,1)., Cell Value Format Condition - This node creates a format condition based on a cell value. , Chart Style - This node will generate a style that can be used to format a chart., Clear Contents - This node will clear contents or formatting from a range within Excel sheet or an entire sheet. , Conditionally Format Excel - This node will allow you to apply conditional formatting to an Excel document or a specific range within the document., Data Bar Format Condition - This node will generate a Data Bar format condition. Based on range of numbers a small bar will be placed in a cell that graphically represents the value contained within the cell. , Expression Format Condition - This node will generate an expression based formatting condition that can be used with Conditionally Format Excel Node., Fill Style - This node generates a Fill Style that can be used for conditional formatting or regular cell formatting., Format Excel - This node will allow you to apply formatting to a specific range within the document. You can format a single range on a single sheet or multiple ranges on multiple sheets at the same time., Get Worksheet Names - This node will query an Excel file and return a list of sheet names that it contains. , Graphic Style - This node will create a graphic style that can be used either for conditional formatting or regular cell formatting. , Label Style - This node will generate a style that can be used to format labels on a chart., Legend Style - This node will generate a style to visually format a chart legend. , Line Chart Graph Style - This node controls appearance of the graph area of the chart. In this case it will be the line portion of the Line Chart., Line Chart - This node will generate a Line Chart in Excel., Line Style - This node controls Chart's Line Style ex. Line Chart., Marker Style - This node controls the Marker Style that can be used with charts ex. Line Chart., New File By Template - This node will take a template file and create a new file based on that template. , Pie Chart Graph Style - This node will generate a style that can be used to control appearance of the graph portion of the chart., Pie Chart - This node will generate a new Pie Chart in your currently running session of Excel., Read Excel - This node will read an excel file. You can read an entore sheet contents, read from specific origin cell, read only specific range, or do all of the former for multiple sheets at the same time. , ReadExcel.ByRange - This node allows for reading an Excel file by specifying a Range in A1 formatting style \"A1:X11\" or by using a named range. , Search Value Get Row - This node will search the Excel Spreadsheet for a single string value and return an entire row of data that this value was found in. For example if key was found at A15 then entire row 15 will be returned., Text Style - This node will generate a text style that can be used to format excel or with conditional formatting., Top/Bottom Percentile Format Condition - This node will generate a Formatting Condition based on the top/bottom ranked values. It can either be top percentile (0-100) or number of top/bottom ranked values (top 10 values for example)., Write Excel - This node will write data to Excel file and based on how your BBData nodes are structured it will either override the exsting file, create a new one and write a single worksheet or write multiple worksheets. ",
            "engine_metadata": "",
            "engine_version": "1.0.0.1180",
            "created": "2016-05-27T23:12:55.642Z",
            "full_dependency_versions": [ "2016.5.27" ],
            "full_dependency_ids": [
              {
                "_id": "5592f3b0f2ae5a9a07000100",
                "name": "BumbleBee"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2016.5.27"
          },
          {
            "_id": "5766d3e8e70394822f0000cc",
            "contains_binaries": true,
            "node_libraries": [ "bumblebeeTypes, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "bumblebeeUI, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-prod/a4bce61e-f3d5-44ae-b0de-a8c9194a6fc4gregPkg694.zip",
            "contents": "(2) Color Scale Format Condition - This node will generate a two (2) color scheme that can be used to format a range of numbers in Excel., (3) Color Scale Format Condition - This node will generate a three (3) color scheme that can be used to format a range of numbers in Excel., BB Data - This node is a building block for different modes of writing to Excel files. You can combines this node into a list to write to multiple sheets or use just one to write to a single sheet. , BB Style - This node is a building block for different modes of formatting an Excel file. You can combines this node into a list to apply formatting to multiple ranges or sheets at the same time. , Border Style - This node can be used to change default formatting of Excel cells using Format Excel of Conditionally Format Excel Nodes. , Cell Index - This node will convert an excel address notation from string format (A1) to index format (1,1)., Cell Value Format Condition - This node creates a format condition based on a cell value. , Chart Style - This node will generate a style that can be used to format a chart., Clear Contents - This node will clear contents or formatting from a range within Excel sheet or an entire sheet. , Conditionally Format Excel - This node will allow you to apply conditional formatting to an Excel document or a specific range within the document., Data Bar Format Condition - This node will generate a Data Bar format condition. Based on range of numbers a small bar will be placed in a cell that graphically represents the value contained within the cell. , Expression Format Condition - This node will generate an expression based formatting condition that can be used with Conditionally Format Excel Node., Fill Style - This node generates a Fill Style that can be used for conditional formatting or regular cell formatting., Format Excel - This node will allow you to apply formatting to a specific range within the document. You can format a single range on a single sheet or multiple ranges on multiple sheets at the same time., Get Worksheet Names - This node will query an Excel file and return a list of sheet names that it contains. , Graphic Style - This node will create a graphic style that can be used either for conditional formatting or regular cell formatting. , Label Style - This node will generate a style that can be used to format labels on a chart., Legend Style - This node will generate a style to visually format a chart legend. , Line Chart Graph Style - This node controls appearance of the graph area of the chart. In this case it will be the line portion of the Line Chart., Line Chart - This node will generate a Line Chart in Excel., Line Style - This node controls Chart's Line Style ex. Line Chart., Marker Style - This node controls the Marker Style that can be used with charts ex. Line Chart., New File By Template - This node will take a template file and create a new file based on that template. , Pie Chart Graph Style - This node will generate a style that can be used to control appearance of the graph portion of the chart., Pie Chart - This node will generate a new Pie Chart in your currently running session of Excel., Read Excel - This node will read an excel file. You can read an entore sheet contents, read from specific origin cell, read only specific range, or do all of the former for multiple sheets at the same time. , ReadExcel.ByRange - This node allows for reading an Excel file by specifying a Range in A1 formatting style \"A1:X11\" or by using a named range. , Search Value Get Row - This node will search the Excel Spreadsheet for a single string value and return an entire row of data that this value was found in. For example if key was found at A15 then entire row 15 will be returned., Text Style - This node will generate a text style that can be used to format excel or with conditional formatting., Top/Bottom Percentile Format Condition - This node will generate a Formatting Condition based on the top/bottom ranked values. It can either be top percentile (0-100) or number of top/bottom ranked values (top 10 values for example)., Write Excel - This node will write data to Excel file and based on how your BBData nodes are structured it will either override the exsting file, create a new one and write a single worksheet or write multiple worksheets. ",
            "engine_metadata": "",
            "engine_version": "1.0.0.1180",
            "created": "2016-06-19T17:18:32.177Z",
            "full_dependency_versions": [ "2016.6.19" ],
            "full_dependency_ids": [
              {
                "_id": "5592f3b0f2ae5a9a07000100",
                "name": "BumbleBee"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2016.6.19"
          },
          {
            "_id": "57759662535146064800000c",
            "contains_binaries": true,
            "node_libraries": [ "bumblebeeTypes, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "bumblebeeUI, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-prod/cd28d78f-775e-41d2-971a-3b3c5f348ad7gregPkg982.zip",
            "contents": "(2) Color Scale Format Condition - This node will generate a two (2) color scheme that can be used to format a range of numbers in Excel., (3) Color Scale Format Condition - This node will generate a three (3) color scheme that can be used to format a range of numbers in Excel., BB Data - This node is a building block for different modes of writing to Excel files. You can combines this node into a list to write to multiple sheets or use just one to write to a single sheet. , BB Style - This node is a building block for different modes of formatting an Excel file. You can combines this node into a list to apply formatting to multiple ranges or sheets at the same time. , Border Style - This node can be used to change default formatting of Excel cells using Format Excel of Conditionally Format Excel Nodes. , Cell Index - This node will convert an excel address notation from string format (A1) to index format (1,1)., Cell Value Format Condition - This node creates a format condition based on a cell value. , Chart Style - This node will generate a style that can be used to format a chart., Clear Contents - This node will clear contents or formatting from a range within Excel sheet or an entire sheet. , Conditionally Format Excel - This node will allow you to apply conditional formatting to an Excel document or a specific range within the document., Data Bar Format Condition - This node will generate a Data Bar format condition. Based on range of numbers a small bar will be placed in a cell that graphically represents the value contained within the cell. , Expression Format Condition - This node will generate an expression based formatting condition that can be used with Conditionally Format Excel Node., Fill Style - This node generates a Fill Style that can be used for conditional formatting or regular cell formatting., Format Excel - This node will allow you to apply formatting to a specific range within the document. You can format a single range on a single sheet or multiple ranges on multiple sheets at the same time., Get Worksheet Names - This node will query an Excel file and return a list of sheet names that it contains. , Graphic Style - This node will create a graphic style that can be used either for conditional formatting or regular cell formatting. , Label Style - This node will generate a style that can be used to format labels on a chart., Legend Style - This node will generate a style to visually format a chart legend. , Line Chart Graph Style - This node controls appearance of the graph area of the chart. In this case it will be the line portion of the Line Chart., Line Chart - This node will generate a Line Chart in Excel., Line Style - This node controls Chart's Line Style ex. Line Chart., Marker Style - This node controls the Marker Style that can be used with charts ex. Line Chart., New File By Template - This node will take a template file and create a new file based on that template. , Pie Chart Graph Style - This node will generate a style that can be used to control appearance of the graph portion of the chart., Pie Chart - This node will generate a new Pie Chart in your currently running session of Excel., Read Excel - This node will read an excel file. You can read an entore sheet contents, read from specific origin cell, read only specific range, or do all of the former for multiple sheets at the same time. , ReadExcel.ByRange - This node allows for reading an Excel file by specifying a Range in A1 formatting style \"A1:X11\" or by using a named range. , Search Value Get Row - This node will search the Excel Spreadsheet for a single string value and return an entire row of data that this value was found in. For example if key was found at A15 then entire row 15 will be returned., Text Style - This node will generate a text style that can be used to format excel or with conditional formatting., Top/Bottom Percentile Format Condition - This node will generate a Formatting Condition based on the top/bottom ranked values. It can either be top percentile (0-100) or number of top/bottom ranked values (top 10 values for example)., Write Excel - This node will write data to Excel file and based on how your BBData nodes are structured it will either override the exsting file, create a new one and write a single worksheet or write multiple worksheets. , Embed Image - This node will embed an image into an Excel document., Image Style - This node generates an image style for images being embedded in a document. ",
            "engine_metadata": "",
            "engine_version": "1.0.0.1180",
            "created": "2016-06-30T22:00:02.953Z",
            "full_dependency_versions": [ "2016.6.30" ],
            "full_dependency_ids": [
              {
                "_id": "5592f3b0f2ae5a9a07000100",
                "name": "BumbleBee"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2016.6.30"
          },
          {
            "_id": "57c88ca84172a48a3500010c",
            "contains_binaries": true,
            "node_libraries": [ "bumblebeeTypes, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "bumblebeeUI, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-prod/45e1b18b-0b49-47c4-8819-9593227edceagregPkg66.zip",
            "contents": "(2) Color Scale Format Condition - This node will generate a two (2) color scheme that can be used to format a range of numbers in Excel., (3) Color Scale Format Condition - This node will generate a three (3) color scheme that can be used to format a range of numbers in Excel., BB Data - This node is a building block for different modes of writing to Excel files. You can combines this node into a list to write to multiple sheets or use just one to write to a single sheet. , BB Style - This node is a building block for different modes of formatting an Excel file. You can combines this node into a list to apply formatting to multiple ranges or sheets at the same time. , Border Style - This node can be used to change default formatting of Excel cells using Format Excel of Conditionally Format Excel Nodes. , Cell Index - This node will convert an excel address notation from string format (A1) to index format (1,1)., Cell Value Format Condition - This node creates a format condition based on a cell value. , Chart Style - This node will generate a style that can be used to format a chart., Clear Contents - This node will clear contents or formatting from a range within Excel sheet or an entire sheet. , Conditionally Format Excel - This node will allow you to apply conditional formatting to an Excel document or a specific range within the document., Data Bar Format Condition - This node will generate a Data Bar format condition. Based on range of numbers a small bar will be placed in a cell that graphically represents the value contained within the cell. , Embed Image - This node will embed an image into an Excel document., Expression Format Condition - This node will generate an expression based formatting condition that can be used with Conditionally Format Excel Node., Fill Style - This node generates a Fill Style that can be used for conditional formatting or regular cell formatting., Format Excel - This node will allow you to apply formatting to a specific range within the document. You can format a single range on a single sheet or multiple ranges on multiple sheets at the same time., Get Worksheet Names - This node will query an Excel file and return a list of sheet names that it contains. , Graphic Style - This node will create a graphic style that can be used either for conditional formatting or regular cell formatting. , Image Style - This node generates an image style for images being embedded in a document. , Label Style - This node will generate a style that can be used to format labels on a chart., Legend Style - This node will generate a style to visually format a chart legend. , Line Chart Graph Style - This node controls appearance of the graph area of the chart. In this case it will be the line portion of the Line Chart., Line Chart - This node will generate a Line Chart in Excel., Line Style - This node controls Chart's Line Style ex. Line Chart., Marker Style - This node controls the Marker Style that can be used with charts ex. Line Chart., New File By Template - This node will take a template file and create a new file based on that template. , Pie Chart Graph Style - This node will generate a style that can be used to control appearance of the graph portion of the chart., Pie Chart - This node will generate a new Pie Chart in your currently running session of Excel., Read Excel - This node will read an excel file. You can read an entore sheet contents, read from specific origin cell, read only specific range, or do all of the former for multiple sheets at the same time. , ReadExcel.ByRange - This node allows for reading an Excel file by specifying a Range in A1 formatting style \"A1:X11\" or by using a named range. , Search Value Get Row - This node will search the Excel Spreadsheet for a single string value and return an entire row of data that this value was found in. For example if key was found at A15 then entire row 15 will be returned., Text Style - This node will generate a text style that can be used to format excel or with conditional formatting., Top/Bottom Percentile Format Condition - This node will generate a Formatting Condition based on the top/bottom ranked values. It can either be top percentile (0-100) or number of top/bottom ranked values (top 10 values for example)., Write Excel - This node will write data to Excel file and based on how your BBData nodes are structured it will either override the exsting file, create a new one and write a single worksheet or write multiple worksheets. ",
            "engine_metadata": "",
            "engine_version": "1.1.0.2094",
            "created": "2016-09-01T20:16:40.891Z",
            "full_dependency_versions": [ "2016.9.1" ],
            "full_dependency_ids": [
              {
                "_id": "5592f3b0f2ae5a9a07000100",
                "name": "BumbleBee"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2016.9.1"
          },
          {
            "_id": "57c899e64172a48a3500010d",
            "contains_binaries": true,
            "node_libraries": [ "bumblebeeTypes, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "bumblebeeUI, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-prod/08eded81-995b-468e-ab8c-f59d6cbab7b3gregPkg757.zip",
            "contents": "(2) Color Scale Format Condition - This node will generate a two (2) color scheme that can be used to format a range of numbers in Excel., (3) Color Scale Format Condition - This node will generate a three (3) color scheme that can be used to format a range of numbers in Excel., BB Data - This node is a building block for different modes of writing to Excel files. You can combines this node into a list to write to multiple sheets or use just one to write to a single sheet. , BB Style - This node is a building block for different modes of formatting an Excel file. You can combines this node into a list to apply formatting to multiple ranges or sheets at the same time. , Border Style - This node can be used to change default formatting of Excel cells using Format Excel of Conditionally Format Excel Nodes. , Cell Index - This node will convert an excel address notation from string format (A1) to index format (1,1)., Cell Value Format Condition - This node creates a format condition based on a cell value. , Chart Style - This node will generate a style that can be used to format a chart., Clear Contents - This node will clear contents or formatting from a range within Excel sheet or an entire sheet. , Conditionally Format Excel - This node will allow you to apply conditional formatting to an Excel document or a specific range within the document., Data Bar Format Condition - This node will generate a Data Bar format condition. Based on range of numbers a small bar will be placed in a cell that graphically represents the value contained within the cell. , Embed Image - This node will embed an image into an Excel document., Expression Format Condition - This node will generate an expression based formatting condition that can be used with Conditionally Format Excel Node., Fill Style - This node generates a Fill Style that can be used for conditional formatting or regular cell formatting., Format Excel - This node will allow you to apply formatting to a specific range within the document. You can format a single range on a single sheet or multiple ranges on multiple sheets at the same time., Get Worksheet Names - This node will query an Excel file and return a list of sheet names that it contains. , Graphic Style - This node will create a graphic style that can be used either for conditional formatting or regular cell formatting. , Image Style - This node generates an image style for images being embedded in a document. , Label Style - This node will generate a style that can be used to format labels on a chart., Legend Style - This node will generate a style to visually format a chart legend. , Line Chart Graph Style - This node controls appearance of the graph area of the chart. In this case it will be the line portion of the Line Chart., Line Chart - This node will generate a Line Chart in Excel., Line Style - This node controls Chart's Line Style ex. Line Chart., Marker Style - This node controls the Marker Style that can be used with charts ex. Line Chart., New File By Template - This node will take a template file and create a new file based on that template. , Pie Chart Graph Style - This node will generate a style that can be used to control appearance of the graph portion of the chart., Pie Chart - This node will generate a new Pie Chart in your currently running session of Excel., Read Excel - This node will read an excel file. You can read an entore sheet contents, read from specific origin cell, read only specific range, or do all of the former for multiple sheets at the same time. , ReadExcel.ByRange - This node allows for reading an Excel file by specifying a Range in A1 formatting style \"A1:X11\" or by using a named range. , Search Value Get Row - This node will search the Excel Spreadsheet for a single string value and return an entire row of data that this value was found in. For example if key was found at A15 then entire row 15 will be returned., Text Style - This node will generate a text style that can be used to format excel or with conditional formatting., Top/Bottom Percentile Format Condition - This node will generate a Formatting Condition based on the top/bottom ranked values. It can either be top percentile (0-100) or number of top/bottom ranked values (top 10 values for example)., Write Excel - This node will write data to Excel file and based on how your BBData nodes are structured it will either override the exsting file, create a new one and write a single worksheet or write multiple worksheets. ",
            "engine_metadata": "",
            "engine_version": "1.1.0.2094",
            "created": "2016-09-01T21:13:10.394Z",
            "full_dependency_versions": [ "2016.9.2" ],
            "full_dependency_ids": [
              {
                "_id": "5592f3b0f2ae5a9a07000100",
                "name": "BumbleBee"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2016.9.2"
          },
          {
            "_id": "57c985f34172a48a35000113",
            "contains_binaries": true,
            "node_libraries": [ "bumblebeeTypes, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "bumblebeeUI, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-prod/d27c9fce-bc1c-4e49-ac0f-5c62b01ee062gregPkg528.zip",
            "contents": "(2) Color Scale Format Condition - This node will generate a two (2) color scheme that can be used to format a range of numbers in Excel., (3) Color Scale Format Condition - This node will generate a three (3) color scheme that can be used to format a range of numbers in Excel., BB Data - This node is a building block for different modes of writing to Excel files. You can combines this node into a list to write to multiple sheets or use just one to write to a single sheet. , BB Style - This node is a building block for different modes of formatting an Excel file. You can combines this node into a list to apply formatting to multiple ranges or sheets at the same time. , Border Style - This node can be used to change default formatting of Excel cells using Format Excel of Conditionally Format Excel Nodes. , Cell Index - This node will convert an excel address notation from string format (A1) to index format (1,1)., Cell Value Format Condition - This node creates a format condition based on a cell value. , Chart Style - This node will generate a style that can be used to format a chart., Clear Contents - This node will clear contents or formatting from a range within Excel sheet or an entire sheet. , Conditionally Format Excel - This node will allow you to apply conditional formatting to an Excel document or a specific range within the document., Data Bar Format Condition - This node will generate a Data Bar format condition. Based on range of numbers a small bar will be placed in a cell that graphically represents the value contained within the cell. , Embed Image - This node will embed an image into an Excel document., Expression Format Condition - This node will generate an expression based formatting condition that can be used with Conditionally Format Excel Node., Fill Style - This node generates a Fill Style that can be used for conditional formatting or regular cell formatting., Format Excel - This node will allow you to apply formatting to a specific range within the document. You can format a single range on a single sheet or multiple ranges on multiple sheets at the same time., Get Worksheet Names - This node will query an Excel file and return a list of sheet names that it contains. , Graphic Style - This node will create a graphic style that can be used either for conditional formatting or regular cell formatting. , Image Style - This node generates an image style for images being embedded in a document. , Label Style - This node will generate a style that can be used to format labels on a chart., Legend Style - This node will generate a style to visually format a chart legend. , Line Chart Graph Style - This node controls appearance of the graph area of the chart. In this case it will be the line portion of the Line Chart., Line Chart - This node will generate a Line Chart in Excel., Line Style - This node controls Chart's Line Style ex. Line Chart., Marker Style - This node controls the Marker Style that can be used with charts ex. Line Chart., New File By Template - This node will take a template file and create a new file based on that template. , Pie Chart Graph Style - This node will generate a style that can be used to control appearance of the graph portion of the chart., Pie Chart - This node will generate a new Pie Chart in your currently running session of Excel., Read Excel - This node will read an excel file. You can read an entore sheet contents, read from specific origin cell, read only specific range, or do all of the former for multiple sheets at the same time. , ReadExcel.ByRange - This node allows for reading an Excel file by specifying a Range in A1 formatting style \"A1:X11\" or by using a named range. , Search Value Get Row - This node will search the Excel Spreadsheet for a single string value and return an entire row of data that this value was found in. For example if key was found at A15 then entire row 15 will be returned., Text Style - This node will generate a text style that can be used to format excel or with conditional formatting., Top/Bottom Percentile Format Condition - This node will generate a Formatting Condition based on the top/bottom ranked values. It can either be top percentile (0-100) or number of top/bottom ranked values (top 10 values for example)., Write Excel - This node will write data to Excel file and based on how your BBData nodes are structured it will either override the exsting file, create a new one and write a single worksheet or write multiple worksheets. ",
            "engine_metadata": "",
            "engine_version": "1.1.0.2094",
            "created": "2016-09-02T14:00:19.211Z",
            "full_dependency_versions": [ "2016.9.3" ],
            "full_dependency_ids": [
              {
                "_id": "5592f3b0f2ae5a9a07000100",
                "name": "BumbleBee"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2016.9.3"
          },
          {
            "_id": "57ca39894172a48a35000119",
            "contains_binaries": true,
            "node_libraries": [ "bumblebeeTypes, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "bumblebeeUI, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-prod/93e68802-60e6-4824-88b2-8907afbee26fgregPkg891.zip",
            "contents": "(2) Color Scale Format Condition - This node will generate a two (2) color scheme that can be used to format a range of numbers in Excel., (3) Color Scale Format Condition - This node will generate a three (3) color scheme that can be used to format a range of numbers in Excel., BB Data - This node is a building block for different modes of writing to Excel files. You can combines this node into a list to write to multiple sheets or use just one to write to a single sheet. , BB Style - This node is a building block for different modes of formatting an Excel file. You can combines this node into a list to apply formatting to multiple ranges or sheets at the same time. , Border Style - This node can be used to change default formatting of Excel cells using Format Excel of Conditionally Format Excel Nodes. , Cell Index - This node will convert an excel address notation from string format (A1) to index format (1,1)., Cell Value Format Condition - This node creates a format condition based on a cell value. , Chart Style - This node will generate a style that can be used to format a chart., Clear Contents - This node will clear contents or formatting from a range within Excel sheet or an entire sheet. , Conditionally Format Excel - This node will allow you to apply conditional formatting to an Excel document or a specific range within the document., Data Bar Format Condition - This node will generate a Data Bar format condition. Based on range of numbers a small bar will be placed in a cell that graphically represents the value contained within the cell. , Embed Image - This node will embed an image into an Excel document., Expression Format Condition - This node will generate an expression based formatting condition that can be used with Conditionally Format Excel Node., Fill Style - This node generates a Fill Style that can be used for conditional formatting or regular cell formatting., Format Excel - This node will allow you to apply formatting to a specific range within the document. You can format a single range on a single sheet or multiple ranges on multiple sheets at the same time., Get Worksheet Names - This node will query an Excel file and return a list of sheet names that it contains. , Graphic Style - This node will create a graphic style that can be used either for conditional formatting or regular cell formatting. , Image Style - This node generates an image style for images being embedded in a document. , Label Style - This node will generate a style that can be used to format labels on a chart., Legend Style - This node will generate a style to visually format a chart legend. , Line Chart Graph Style - This node controls appearance of the graph area of the chart. In this case it will be the line portion of the Line Chart., Line Chart - This node will generate a Line Chart in Excel., Line Style - This node controls Chart's Line Style ex. Line Chart., Marker Style - This node controls the Marker Style that can be used with charts ex. Line Chart., New File By Template - This node will take a template file and create a new file based on that template. , Pie Chart Graph Style - This node will generate a style that can be used to control appearance of the graph portion of the chart., Pie Chart - This node will generate a new Pie Chart in your currently running session of Excel., Read Excel - This node will read an excel file. You can read an entore sheet contents, read from specific origin cell, read only specific range, or do all of the former for multiple sheets at the same time. , ReadExcel.ByRange - This node allows for reading an Excel file by specifying a Range in A1 formatting style \"A1:X11\" or by using a named range. , Search Value Get Row - This node will search the Excel Spreadsheet for a single string value and return an entire row of data that this value was found in. For example if key was found at A15 then entire row 15 will be returned., Text Style - This node will generate a text style that can be used to format excel or with conditional formatting., Top/Bottom Percentile Format Condition - This node will generate a Formatting Condition based on the top/bottom ranked values. It can either be top percentile (0-100) or number of top/bottom ranked values (top 10 values for example)., Write Excel - This node will write data to Excel file and based on how your BBData nodes are structured it will either override the exsting file, create a new one and write a single worksheet or write multiple worksheets. ",
            "engine_metadata": "",
            "engine_version": "1.1.0.2094",
            "created": "2016-09-03T02:46:33.586Z",
            "full_dependency_versions": [ "2016.9.4" ],
            "full_dependency_ids": [
              {
                "_id": "5592f3b0f2ae5a9a07000100",
                "name": "BumbleBee"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2016.9.4"
          },
          {
            "_id": "57ceba0b4172a48a35000131",
            "contains_binaries": true,
            "node_libraries": [ "bumblebeeTypes, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "bumblebeeUI, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-prod/19f696b6-df96-4fe1-be5d-99a68bece2f0gregPkg122.zip",
            "contents": "(2) Color Scale Format Condition - This node will generate a two (2) color scheme that can be used to format a range of numbers in Excel., (3) Color Scale Format Condition - This node will generate a three (3) color scheme that can be used to format a range of numbers in Excel., BB Data - This node is a building block for different modes of writing to Excel files. You can combines this node into a list to write to multiple sheets or use just one to write to a single sheet. , BB Style - This node is a building block for different modes of formatting an Excel file. You can combines this node into a list to apply formatting to multiple ranges or sheets at the same time. , Border Style - This node can be used to change default formatting of Excel cells using Format Excel of Conditionally Format Excel Nodes. , Cell Index - This node will convert an excel address notation from string format (A1) to index format (1,1)., Cell Value Format Condition - This node creates a format condition based on a cell value. , Chart Style - This node will generate a style that can be used to format a chart., Clear Contents - This node will clear contents or formatting from a range within Excel sheet or an entire sheet. , Conditionally Format Excel - This node will allow you to apply conditional formatting to an Excel document or a specific range within the document., Data Bar Format Condition - This node will generate a Data Bar format condition. Based on range of numbers a small bar will be placed in a cell that graphically represents the value contained within the cell. , Embed Image - This node will embed an image into an Excel document., Expression Format Condition - This node will generate an expression based formatting condition that can be used with Conditionally Format Excel Node., Fill Style - This node generates a Fill Style that can be used for conditional formatting or regular cell formatting., Format Excel - This node will allow you to apply formatting to a specific range within the document. You can format a single range on a single sheet or multiple ranges on multiple sheets at the same time., Get Worksheet Names - This node will query an Excel file and return a list of sheet names that it contains. , Graphic Style - This node will create a graphic style that can be used either for conditional formatting or regular cell formatting. , Image Style - This node generates an image style for images being embedded in a document. , Label Style - This node will generate a style that can be used to format labels on a chart., Legend Style - This node will generate a style to visually format a chart legend. , Line Chart Graph Style - This node controls appearance of the graph area of the chart. In this case it will be the line portion of the Line Chart., Line Chart - This node will generate a Line Chart in Excel., Line Style - This node controls Chart's Line Style ex. Line Chart., Marker Style - This node controls the Marker Style that can be used with charts ex. Line Chart., New File By Template - This node will take a template file and create a new file based on that template. , Pie Chart Graph Style - This node will generate a style that can be used to control appearance of the graph portion of the chart., Pie Chart - This node will generate a new Pie Chart in your currently running session of Excel., Read Excel - This node will read an excel file. You can read an entore sheet contents, read from specific origin cell, read only specific range, or do all of the former for multiple sheets at the same time. , ReadExcel.ByRange - This node allows for reading an Excel file by specifying a Range in A1 formatting style \"A1:X11\" or by using a named range. , Search Value Get Row - This node will search the Excel Spreadsheet for a single string value and return an entire row of data that this value was found in. For example if key was found at A15 then entire row 15 will be returned., Text Style - This node will generate a text style that can be used to format excel or with conditional formatting., Top/Bottom Percentile Format Condition - This node will generate a Formatting Condition based on the top/bottom ranked values. It can either be top percentile (0-100) or number of top/bottom ranked values (top 10 values for example)., Write Excel - This node will write data to Excel file and based on how your BBData nodes are structured it will either override the exsting file, create a new one and write a single worksheet or write multiple worksheets. ",
            "engine_metadata": "",
            "engine_version": "1.1.0.2094",
            "created": "2016-09-06T12:43:55.140Z",
            "full_dependency_versions": [ "2016.9.6" ],
            "full_dependency_ids": [
              {
                "_id": "5592f3b0f2ae5a9a07000100",
                "name": "BumbleBee"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2016.9.6"
          },
          {
            "_id": "57ced64c4172a48a35000134",
            "contains_binaries": true,
            "node_libraries": [ "bumblebeeTypes, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "bumblebeeUI, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-prod/ab4c3ebe-87d0-46ec-9c1b-ef340ccdc210gregPkg915.zip",
            "contents": "(2) Color Scale Format Condition - This node will generate a two (2) color scheme that can be used to format a range of numbers in Excel., (3) Color Scale Format Condition - This node will generate a three (3) color scheme that can be used to format a range of numbers in Excel., BB Data - This node is a building block for different modes of writing to Excel files. You can combines this node into a list to write to multiple sheets or use just one to write to a single sheet. , BB Style - This node is a building block for different modes of formatting an Excel file. You can combines this node into a list to apply formatting to multiple ranges or sheets at the same time. , Border Style - This node can be used to change default formatting of Excel cells using Format Excel of Conditionally Format Excel Nodes. , Cell Index - This node will convert an excel address notation from string format (A1) to index format (1,1)., Cell Value Format Condition - This node creates a format condition based on a cell value. , Chart Style - This node will generate a style that can be used to format a chart., Clear Contents - This node will clear contents or formatting from a range within Excel sheet or an entire sheet. , Conditionally Format Excel - This node will allow you to apply conditional formatting to an Excel document or a specific range within the document., Data Bar Format Condition - This node will generate a Data Bar format condition. Based on range of numbers a small bar will be placed in a cell that graphically represents the value contained within the cell. , Embed Image - This node will embed an image into an Excel document., Expression Format Condition - This node will generate an expression based formatting condition that can be used with Conditionally Format Excel Node., Fill Style - This node generates a Fill Style that can be used for conditional formatting or regular cell formatting., Format Excel - This node will allow you to apply formatting to a specific range within the document. You can format a single range on a single sheet or multiple ranges on multiple sheets at the same time., Get Worksheet Names - This node will query an Excel file and return a list of sheet names that it contains. , Graphic Style - This node will create a graphic style that can be used either for conditional formatting or regular cell formatting. , Image Style - This node generates an image style for images being embedded in a document. , Label Style - This node will generate a style that can be used to format labels on a chart., Legend Style - This node will generate a style to visually format a chart legend. , Line Chart Graph Style - This node controls appearance of the graph area of the chart. In this case it will be the line portion of the Line Chart., Line Chart - This node will generate a Line Chart in Excel., Line Style - This node controls Chart's Line Style ex. Line Chart., Marker Style - This node controls the Marker Style that can be used with charts ex. Line Chart., New File By Template - This node will take a template file and create a new file based on that template. , Pie Chart Graph Style - This node will generate a style that can be used to control appearance of the graph portion of the chart., Pie Chart - This node will generate a new Pie Chart in your currently running session of Excel., Read Excel - This node will read an excel file. You can read an entore sheet contents, read from specific origin cell, read only specific range, or do all of the former for multiple sheets at the same time. , ReadExcel.ByRange - This node allows for reading an Excel file by specifying a Range in A1 formatting style \"A1:X11\" or by using a named range. , Search Value Get Row - This node will search the Excel Spreadsheet for a single string value and return an entire row of data that this value was found in. For example if key was found at A15 then entire row 15 will be returned., Text Style - This node will generate a text style that can be used to format excel or with conditional formatting., Top/Bottom Percentile Format Condition - This node will generate a Formatting Condition based on the top/bottom ranked values. It can either be top percentile (0-100) or number of top/bottom ranked values (top 10 values for example)., Write Excel - This node will write data to Excel file and based on how your BBData nodes are structured it will either override the exsting file, create a new one and write a single worksheet or write multiple worksheets. ",
            "engine_metadata": "",
            "engine_version": "1.1.0.2094",
            "created": "2016-09-06T14:44:28.641Z",
            "full_dependency_versions": [ "2016.9.7" ],
            "full_dependency_ids": [
              {
                "_id": "5592f3b0f2ae5a9a07000100",
                "name": "BumbleBee"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2016.9.7"
          },
          {
            "_id": "57d0bb3cf615e77258000005",
            "contains_binaries": true,
            "node_libraries": [ "bumblebeeTypes, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "bumblebeeUI, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-prod/fc377ac7-887b-4cbc-9bbd-790e011587d4gregPkg774.zip",
            "contents": "(2) Color Scale Format Condition - This node will generate a two (2) color scheme that can be used to format a range of numbers in Excel., (3) Color Scale Format Condition - This node will generate a three (3) color scheme that can be used to format a range of numbers in Excel., BB Data - This node is a building block for different modes of writing to Excel files. You can combines this node into a list to write to multiple sheets or use just one to write to a single sheet. , BB Style - This node is a building block for different modes of formatting an Excel file. You can combines this node into a list to apply formatting to multiple ranges or sheets at the same time. , Border Style - This node can be used to change default formatting of Excel cells using Format Excel of Conditionally Format Excel Nodes. , Cell Index - This node will convert an excel address notation from string format (A1) to index format (1,1)., Cell Value Format Condition - This node creates a format condition based on a cell value. , Chart Style - This node will generate a style that can be used to format a chart., Clear Contents - This node will clear contents or formatting from a range within Excel sheet or an entire sheet. , Conditionally Format Excel - This node will allow you to apply conditional formatting to an Excel document or a specific range within the document., Data Bar Format Condition - This node will generate a Data Bar format condition. Based on range of numbers a small bar will be placed in a cell that graphically represents the value contained within the cell. , Embed Image - This node will embed an image into an Excel document., Expression Format Condition - This node will generate an expression based formatting condition that can be used with Conditionally Format Excel Node., Fill Style - This node generates a Fill Style that can be used for conditional formatting or regular cell formatting., Format Excel - This node will allow you to apply formatting to a specific range within the document. You can format a single range on a single sheet or multiple ranges on multiple sheets at the same time., Get Worksheet Names - This node will query an Excel file and return a list of sheet names that it contains. , Graphic Style - This node will create a graphic style that can be used either for conditional formatting or regular cell formatting. , Image Style - This node generates an image style for images being embedded in a document. , Label Style - This node will generate a style that can be used to format labels on a chart., Legend Style - This node will generate a style to visually format a chart legend. , Line Chart Graph Style - This node controls appearance of the graph area of the chart. In this case it will be the line portion of the Line Chart., Line Chart - This node will generate a Line Chart in Excel., Line Style - This node controls Chart's Line Style ex. Line Chart., Marker Style - This node controls the Marker Style that can be used with charts ex. Line Chart., New File By Template - This node will take a template file and create a new file based on that template. , Pie Chart Graph Style - This node will generate a style that can be used to control appearance of the graph portion of the chart., Pie Chart - This node will generate a new Pie Chart in your currently running session of Excel., Read Excel - This node will read an excel file. You can read an entore sheet contents, read from specific origin cell, read only specific range, or do all of the former for multiple sheets at the same time. , ReadExcel.ByRange - This node allows for reading an Excel file by specifying a Range in A1 formatting style \"A1:X11\" or by using a named range. , Search Value Get Row - This node will search the Excel Spreadsheet for a single string value and return an entire row of data that this value was found in. For example if key was found at A15 then entire row 15 will be returned., Text Style - This node will generate a text style that can be used to format excel or with conditional formatting., Top/Bottom Percentile Format Condition - This node will generate a Formatting Condition based on the top/bottom ranked values. It can either be top percentile (0-100) or number of top/bottom ranked values (top 10 values for example)., Write Excel - This node will write data to Excel file and based on how your BBData nodes are structured it will either override the exsting file, create a new one and write a single worksheet or write multiple worksheets. ",
            "engine_metadata": "",
            "engine_version": "1.1.0.2094",
            "created": "2016-09-08T01:13:32.771Z",
            "full_dependency_versions": [ "2017.1.1" ],
            "full_dependency_ids": [
              {
                "_id": "5592f3b0f2ae5a9a07000100",
                "name": "BumbleBee"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2017.1.1"
          },
          {
            "_id": "57d0bbd6f615e77258000006",
            "contains_binaries": true,
            "node_libraries": [ "bumblebeeTypes, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "bumblebeeUI, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-prod/2f6de975-f612-4c3e-b446-c1d43e0b99fagregPkg895.zip",
            "contents": "(2) Color Scale Format Condition - This node will generate a two (2) color scheme that can be used to format a range of numbers in Excel., (3) Color Scale Format Condition - This node will generate a three (3) color scheme that can be used to format a range of numbers in Excel., BB Data - This node is a building block for different modes of writing to Excel files. You can combines this node into a list to write to multiple sheets or use just one to write to a single sheet. , BB Style - This node is a building block for different modes of formatting an Excel file. You can combines this node into a list to apply formatting to multiple ranges or sheets at the same time. , Border Style - This node can be used to change default formatting of Excel cells using Format Excel of Conditionally Format Excel Nodes. , Cell Index - This node will convert an excel address notation from string format (A1) to index format (1,1)., Cell Value Format Condition - This node creates a format condition based on a cell value. , Chart Style - This node will generate a style that can be used to format a chart., Clear Contents - This node will clear contents or formatting from a range within Excel sheet or an entire sheet. , Conditionally Format Excel - This node will allow you to apply conditional formatting to an Excel document or a specific range within the document., Data Bar Format Condition - This node will generate a Data Bar format condition. Based on range of numbers a small bar will be placed in a cell that graphically represents the value contained within the cell. , Embed Image - This node will embed an image into an Excel document., Expression Format Condition - This node will generate an expression based formatting condition that can be used with Conditionally Format Excel Node., Fill Style - This node generates a Fill Style that can be used for conditional formatting or regular cell formatting., Format Excel - This node will allow you to apply formatting to a specific range within the document. You can format a single range on a single sheet or multiple ranges on multiple sheets at the same time., Get Worksheet Names - This node will query an Excel file and return a list of sheet names that it contains. , Graphic Style - This node will create a graphic style that can be used either for conditional formatting or regular cell formatting. , Image Style - This node generates an image style for images being embedded in a document. , Label Style - This node will generate a style that can be used to format labels on a chart., Legend Style - This node will generate a style to visually format a chart legend. , Line Chart Graph Style - This node controls appearance of the graph area of the chart. In this case it will be the line portion of the Line Chart., Line Chart - This node will generate a Line Chart in Excel., Line Style - This node controls Chart's Line Style ex. Line Chart., Marker Style - This node controls the Marker Style that can be used with charts ex. Line Chart., New File By Template - This node will take a template file and create a new file based on that template. , Pie Chart Graph Style - This node will generate a style that can be used to control appearance of the graph portion of the chart., Pie Chart - This node will generate a new Pie Chart in your currently running session of Excel., Read Excel - This node will read an excel file. You can read an entore sheet contents, read from specific origin cell, read only specific range, or do all of the former for multiple sheets at the same time. , ReadExcel.ByRange - This node allows for reading an Excel file by specifying a Range in A1 formatting style \"A1:X11\" or by using a named range. , Search Value Get Row - This node will search the Excel Spreadsheet for a single string value and return an entire row of data that this value was found in. For example if key was found at A15 then entire row 15 will be returned., Text Style - This node will generate a text style that can be used to format excel or with conditional formatting., Top/Bottom Percentile Format Condition - This node will generate a Formatting Condition based on the top/bottom ranked values. It can either be top percentile (0-100) or number of top/bottom ranked values (top 10 values for example)., Write Excel - This node will write data to Excel file and based on how your BBData nodes are structured it will either override the exsting file, create a new one and write a single worksheet or write multiple worksheets. ",
            "engine_metadata": "",
            "engine_version": "1.1.0.2094",
            "created": "2016-09-08T01:16:06.553Z",
            "full_dependency_versions": [ "2017.1.2" ],
            "full_dependency_ids": [
              {
                "_id": "5592f3b0f2ae5a9a07000100",
                "name": "BumbleBee"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2017.1.2"
          },
          {
            "_id": "57d0bc07f615e77258000007",
            "contains_binaries": true,
            "node_libraries": [ "bumblebeeTypes, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "bumblebeeUI, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-prod/64e77c43-9e13-427e-b9d0-5900e98bd7d1gregPkg232.zip",
            "contents": "(2) Color Scale Format Condition - This node will generate a two (2) color scheme that can be used to format a range of numbers in Excel., (3) Color Scale Format Condition - This node will generate a three (3) color scheme that can be used to format a range of numbers in Excel., BB Data - This node is a building block for different modes of writing to Excel files. You can combines this node into a list to write to multiple sheets or use just one to write to a single sheet. , BB Style - This node is a building block for different modes of formatting an Excel file. You can combines this node into a list to apply formatting to multiple ranges or sheets at the same time. , Border Style - This node can be used to change default formatting of Excel cells using Format Excel of Conditionally Format Excel Nodes. , Cell Index - This node will convert an excel address notation from string format (A1) to index format (1,1)., Cell Value Format Condition - This node creates a format condition based on a cell value. , Chart Style - This node will generate a style that can be used to format a chart., Clear Contents - This node will clear contents or formatting from a range within Excel sheet or an entire sheet. , Conditionally Format Excel - This node will allow you to apply conditional formatting to an Excel document or a specific range within the document., Data Bar Format Condition - This node will generate a Data Bar format condition. Based on range of numbers a small bar will be placed in a cell that graphically represents the value contained within the cell. , Embed Image - This node will embed an image into an Excel document., Expression Format Condition - This node will generate an expression based formatting condition that can be used with Conditionally Format Excel Node., Fill Style - This node generates a Fill Style that can be used for conditional formatting or regular cell formatting., Format Excel - This node will allow you to apply formatting to a specific range within the document. You can format a single range on a single sheet or multiple ranges on multiple sheets at the same time., Get Worksheet Names - This node will query an Excel file and return a list of sheet names that it contains. , Graphic Style - This node will create a graphic style that can be used either for conditional formatting or regular cell formatting. , Image Style - This node generates an image style for images being embedded in a document. , Label Style - This node will generate a style that can be used to format labels on a chart., Legend Style - This node will generate a style to visually format a chart legend. , Line Chart Graph Style - This node controls appearance of the graph area of the chart. In this case it will be the line portion of the Line Chart., Line Chart - This node will generate a Line Chart in Excel., Line Style - This node controls Chart's Line Style ex. Line Chart., Marker Style - This node controls the Marker Style that can be used with charts ex. Line Chart., New File By Template - This node will take a template file and create a new file based on that template. , Pie Chart Graph Style - This node will generate a style that can be used to control appearance of the graph portion of the chart., Pie Chart - This node will generate a new Pie Chart in your currently running session of Excel., Read Excel - This node will read an excel file. You can read an entore sheet contents, read from specific origin cell, read only specific range, or do all of the former for multiple sheets at the same time. , ReadExcel.ByRange - This node allows for reading an Excel file by specifying a Range in A1 formatting style \"A1:X11\" or by using a named range. , Search Value Get Row - This node will search the Excel Spreadsheet for a single string value and return an entire row of data that this value was found in. For example if key was found at A15 then entire row 15 will be returned., Text Style - This node will generate a text style that can be used to format excel or with conditional formatting., Top/Bottom Percentile Format Condition - This node will generate a Formatting Condition based on the top/bottom ranked values. It can either be top percentile (0-100) or number of top/bottom ranked values (top 10 values for example)., Write Excel - This node will write data to Excel file and based on how your BBData nodes are structured it will either override the exsting file, create a new one and write a single worksheet or write multiple worksheets. ",
            "engine_metadata": "",
            "engine_version": "1.1.0.2094",
            "created": "2016-09-08T01:16:55.891Z",
            "full_dependency_versions": [ "2017.11.2" ],
            "full_dependency_ids": [
              {
                "_id": "5592f3b0f2ae5a9a07000100",
                "name": "BumbleBee"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2017.11.2"
          },
          {
            "_id": "57ff9d98d3d589541a000085",
            "contains_binaries": true,
            "node_libraries": [ "bumblebeeTypes, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "bumblebeeUI, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-prod/0bf8cde6-713a-4812-8905-cd08d73e2d9agregPkg500.zip",
            "contents": "(2) Color Scale Format Condition - This node will generate a two (2) color scheme that can be used to format a range of numbers in Excel., (3) Color Scale Format Condition - This node will generate a three (3) color scheme that can be used to format a range of numbers in Excel., BB Data - This node is a building block for different modes of writing to Excel files. You can combines this node into a list to write to multiple sheets or use just one to write to a single sheet. , BB Style - This node is a building block for different modes of formatting an Excel file. You can combines this node into a list to apply formatting to multiple ranges or sheets at the same time. , Border Style - This node can be used to change default formatting of Excel cells using Format Excel of Conditionally Format Excel Nodes. , Cell Index - This node will convert an excel address notation from string format (A1) to index format (1,1)., Cell Value Format Condition - This node creates a format condition based on a cell value. , Chart Style - This node will generate a style that can be used to format a chart., Clear Contents - This node will clear contents or formatting from a range within Excel sheet or an entire sheet. , Conditionally Format Excel - This node will allow you to apply conditional formatting to an Excel document or a specific range within the document., Data Bar Format Condition - This node will generate a Data Bar format condition. Based on range of numbers a small bar will be placed in a cell that graphically represents the value contained within the cell. , Embed Image - This node will embed an image into an Excel document., Expression Format Condition - This node will generate an expression based formatting condition that can be used with Conditionally Format Excel Node., Fill Style - This node generates a Fill Style that can be used for conditional formatting or regular cell formatting., Format Excel - This node will allow you to apply formatting to a specific range within the document. You can format a single range on a single sheet or multiple ranges on multiple sheets at the same time., Get Worksheet Names - This node will query an Excel file and return a list of sheet names that it contains. , Graphic Style - This node will create a graphic style that can be used either for conditional formatting or regular cell formatting. , Image Style - This node generates an image style for images being embedded in a document. , Label Style - This node will generate a style that can be used to format labels on a chart., Legend Style - This node will generate a style to visually format a chart legend. , Line Chart Graph Style - This node controls appearance of the graph area of the chart. In this case it will be the line portion of the Line Chart., Line Chart - This node will generate a Line Chart in Excel., Line Style - This node controls Chart's Line Style ex. Line Chart., Marker Style - This node controls the Marker Style that can be used with charts ex. Line Chart., New File By Template - This node will take a template file and create a new file based on that template. , Pie Chart Graph Style - This node will generate a style that can be used to control appearance of the graph portion of the chart., Pie Chart - This node will generate a new Pie Chart in your currently running session of Excel., Read Excel - This node will read an excel file. You can read an entore sheet contents, read from specific origin cell, read only specific range, or do all of the former for multiple sheets at the same time. , ReadExcel.ByRange - This node allows for reading an Excel file by specifying a Range in A1 formatting style \"A1:X11\" or by using a named range. , Search Value Get Row - This node will search the Excel Spreadsheet for a single string value and return an entire row of data that this value was found in. For example if key was found at A15 then entire row 15 will be returned., Text Style - This node will generate a text style that can be used to format excel or with conditional formatting., Top/Bottom Percentile Format Condition - This node will generate a Formatting Condition based on the top/bottom ranked values. It can either be top percentile (0-100) or number of top/bottom ranked values (top 10 values for example)., Write Excel - This node will write data to Excel file and based on how your BBData nodes are structured it will either override the exsting file, create a new one and write a single worksheet or write multiple worksheets. ",
            "engine_metadata": "",
            "engine_version": "1.2.0.2654",
            "created": "2016-10-13T14:43:36.755Z",
            "full_dependency_versions": [ "2017.12.1" ],
            "full_dependency_ids": [
              {
                "_id": "5592f3b0f2ae5a9a07000100",
                "name": "BumbleBee"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2017.12.1"
          },
          {
            "_id": "584191adfdef23aa6e000061",
            "contains_binaries": true,
            "node_libraries": [ "bumblebeeTypes, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "bumblebeeUI, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-prod/3437d34d-f157-421c-99ea-a638c9c9be08gregPkg677.zip",
            "contents": "(2) Color Scale Format Condition - This node will generate a two (2) color scheme that can be used to format a range of numbers in Excel., (3) Color Scale Format Condition - This node will generate a three (3) color scheme that can be used to format a range of numbers in Excel., BB Data - This node is a building block for different modes of writing to Excel files. You can combines this node into a list to write to multiple sheets or use just one to write to a single sheet. , BB Style - This node is a building block for different modes of formatting an Excel file. You can combines this node into a list to apply formatting to multiple ranges or sheets at the same time. , Border Style - This node can be used to change default formatting of Excel cells using Format Excel of Conditionally Format Excel Nodes. , Cell Index - This node will convert an excel address notation from string format (A1) to index format (1,1)., Cell Value Format Condition - This node creates a format condition based on a cell value. , Chart Style - This node will generate a style that can be used to format a chart., Clear Contents - This node will clear contents or formatting from a range within Excel sheet or an entire sheet. , Conditionally Format Excel - This node will allow you to apply conditional formatting to an Excel document or a specific range within the document., Data Bar Format Condition - This node will generate a Data Bar format condition. Based on range of numbers a small bar will be placed in a cell that graphically represents the value contained within the cell. , Embed Image - This node will embed an image into an Excel document., Expression Format Condition - This node will generate an expression based formatting condition that can be used with Conditionally Format Excel Node., Fill Style - This node generates a Fill Style that can be used for conditional formatting or regular cell formatting., Format Excel - This node will allow you to apply formatting to a specific range within the document. You can format a single range on a single sheet or multiple ranges on multiple sheets at the same time., Get Worksheet Names - This node will query an Excel file and return a list of sheet names that it contains. , Graphic Style - This node will create a graphic style that can be used either for conditional formatting or regular cell formatting. , Image Style - This node generates an image style for images being embedded in a document. , Label Style - This node will generate a style that can be used to format labels on a chart., Legend Style - This node will generate a style to visually format a chart legend. , Line Chart Graph Style - This node controls appearance of the graph area of the chart. In this case it will be the line portion of the Line Chart., Line Chart - This node will generate a Line Chart in Excel., Line Style - This node controls Chart's Line Style ex. Line Chart., Marker Style - This node controls the Marker Style that can be used with charts ex. Line Chart., New File By Template - This node will take a template file and create a new file based on that template. , Pie Chart Graph Style - This node will generate a style that can be used to control appearance of the graph portion of the chart., Pie Chart - This node will generate a new Pie Chart in your currently running session of Excel., Read Excel - This node will read an excel file. You can read an entore sheet contents, read from specific origin cell, read only specific range, or do all of the former for multiple sheets at the same time. , ReadExcel.ByRange - This node allows for reading an Excel file by specifying a Range in A1 formatting style \"A1:X11\" or by using a named range. , Search Value Get Row - This node will search the Excel Spreadsheet for a single string value and return an entire row of data that this value was found in. For example if key was found at A15 then entire row 15 will be returned., Text Style - This node will generate a text style that can be used to format excel or with conditional formatting., Top/Bottom Percentile Format Condition - This node will generate a Formatting Condition based on the top/bottom ranked values. It can either be top percentile (0-100) or number of top/bottom ranked values (top 10 values for example)., Write Excel - This node will write data to Excel file and based on how your BBData nodes are structured it will either override the exsting file, create a new one and write a single worksheet or write multiple worksheets. ",
            "engine_metadata": "",
            "engine_version": "1.2.0.2690",
            "created": "2016-12-02T15:22:21.529Z",
            "full_dependency_versions": [ "2017.12.2" ],
            "full_dependency_ids": [
              {
                "_id": "5592f3b0f2ae5a9a07000100",
                "name": "BumbleBee"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2017.12.2"
          }
        ],
        "latest_version_update": "2016-12-02T15:22:21.529Z",
        "num_versions": 27,
        "comments": [ ],
        "num_comments": 0,
        "latest_comment": "1970-01-01T00:00:00.000Z",
        "votes": 0,
        "downloads": 10747,
        "repository_url": "https://github.com/ksobon/Bumblebee",
        "site_url": "www.archi-lab.net",
        "banned": false,
        "deprecated": false,
        "group": "archi-lab",
        "engine": "dynamo",
        "license": "",
        "used_by": [
          {
            "_id": "555e8bfea8367b98610000b8",
            "name": "Bakery"
          },
          {
            "_id": "57a4e4d84172a48a35000010",
            "name": "Etabs Excel to Revit"
          }
        ],
        "num_dependents": 2,
        "description": "Dynamo 1.2 - Dynamo and Excel Interop developed by Konrad K. Sobon. Instructions and totorials can be found at www.archi-lab.net. This is an open source project with GitHub page: https://github.com/ksobon/Bumblebee as well as an open source primer: https://github.com/ksobon/BumblebeePrimer. You can read the primer here: http://konradsobon.gitbooks.io/bumblebee-primer/content/ ",
        "maintainers": [
          {
            "_id": "5592f3b0f2ae5a9a070000ff",
            "username": "ksobon"
          }
        ],
        "keywords": [ "bumblebee", "excel", "bad", "monkey" ],
        "created": "2015-06-30T19:53:20.577Z"
      },
      {

        "_id": "546b8e83b77c84600c000011",
        "__v": 22,
        "name": "Structural Analysis for Dynamo",
        "white_list": false,
        "versions": [
          {
            "_id": "546b8e83b77c84600c000012",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/d6a79c68-f3c9-45b2-a22e-3e2c49a6be7agregPkg118.zip",
            "contents": "",
            "engine_metadata": "",
            "engine_version": "0.7.4.3192",
            "created": "2014-11-18T18:22:59.757Z",
            "full_dependency_versions": [ "0.1.0" ],
            "full_dependency_ids": [
              {
                "_id": "546b8e83b77c84600c000011",
                "name": "Structural Analysis for Dynamo"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "0.1.0"
          },
          {
            "_id": "546bad42b77c84600c000013",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/9f44cbe6-ed6e-46ff-b312-a2cef80dced2gregPkg227.zip",
            "contents": "",
            "engine_metadata": "",
            "engine_version": "0.7.4.3192",
            "created": "2014-11-18T20:34:10.739Z",
            "full_dependency_versions": [ "0.1.1" ],
            "full_dependency_ids": [
              {
                "_id": "546b8e83b77c84600c000011",
                "name": "Structural Analysis for Dynamo"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "0.1.1"
          },
          {
            "_id": "550146840c7eac9b5700003d",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/58ce9244-b04d-42b3-bb63-9ea495ae0ee7gregPkg158.zip",
            "contents": "",
            "engine_metadata": "",
            "engine_version": "0.7.5.3566",
            "created": "2015-03-12T07:55:48.326Z",
            "full_dependency_versions": [ "0.1.2" ],
            "full_dependency_ids": [
              {
                "_id": "546b8e83b77c84600c000011",
                "name": "Structural Analysis for Dynamo"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "0.1.2"
          },
          {
            "_id": "5527e4a15899bb370500005f",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/963bac6f-49f1-4eb5-9b58-f285e1048104gregPkg431.zip",
            "contents": "",
            "engine_metadata": "",
            "engine_version": "0.8.0.950",
            "created": "2015-04-10T14:56:33.218Z",
            "full_dependency_versions": [ "0.2.0" ],
            "full_dependency_ids": [
              {
                "_id": "546b8e83b77c84600c000011",
                "name": "Structural Analysis for Dynamo"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "0.2.0"
          },
          {
            "_id": "55bb9e7a662bf0e908000064",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/9402106a-b728-4695-b2f5-bc2c1a4bd18dgregPkg500.zip",
            "contents": "",
            "engine_metadata": "",
            "engine_version": "0.8.0.1233",
            "created": "2015-07-31T16:12:42.892Z",
            "full_dependency_versions": [ "0.2.1" ],
            "full_dependency_ids": [
              {
                "_id": "546b8e83b77c84600c000011",
                "name": "Structural Analysis for Dynamo"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "0.2.1"
          },
          {
            "_id": "564ae639662bf0e908000344",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/f72b8d00-5929-4839-99fd-26f0a5fd2deegregPkg221.zip",
            "contents": "",
            "engine_metadata": "",
            "engine_version": "0.9.1.3067",
            "created": "2015-11-17T08:32:57.741Z",
            "full_dependency_versions": [ "0.2.2" ],
            "full_dependency_ids": [
              {
                "_id": "546b8e83b77c84600c000011",
                "name": "Structural Analysis for Dynamo"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "0.2.2"
          },
          {
            "_id": "56b0885fc3e9ee4a0800008c",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/2b0804c1-4031-4395-ab51-2f339dee6886gregPkg803.zip",
            "contents": "",
            "engine_metadata": "",
            "engine_version": "0.9.1.3011",
            "created": "2016-02-02T10:43:43.391Z",
            "full_dependency_versions": [ "0.2.3" ],
            "full_dependency_ids": [
              {
                "_id": "546b8e83b77c84600c000011",
                "name": "Structural Analysis for Dynamo"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "0.2.3"
          },
          {
            "_id": "57518688e70394822f000057",
            "contains_binaries": true,
            "node_libraries": [ "DynamoSimulationRSA, Version=0.2.4.1, Culture=neutral, PublicKeyToken=null", "DynamoSimulationRSAUI, Version=0.2.4.1, Culture=neutral, PublicKeyToken=null" ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-prod/6f6286f8-4554-4306-848a-e04d3f765bedgregPkg556.zip",
            "contents": "",
            "engine_metadata": "",
            "engine_version": "1.0.0.1180",
            "created": "2016-06-03T13:30:48.610Z",
            "full_dependency_versions": [ "0.2.4" ],
            "full_dependency_ids": [
              {
                "_id": "546b8e83b77c84600c000011",
                "name": "Structural Analysis for Dynamo"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "0.2.4"
          },
          {
            "_id": "5811a9adf50b17c720000088",
            "contains_binaries": true,
            "node_libraries": [ "DynamoSimulationRSA, Version=0.2.5.1, Culture=neutral, PublicKeyToken=null", "DynamoSimulationRSAUI, Version=0.2.5.1, Culture=neutral, PublicKeyToken=null" ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-prod/97bd59ee-5347-4085-ae6b-7b565f50f588gregPkg749.zip",
            "contents": "",
            "engine_metadata": "",
            "engine_version": "1.2.0.2690",
            "created": "2016-10-27T07:15:57.019Z",
            "full_dependency_versions": [ "0.2.5" ],
            "full_dependency_ids": [
              {
                "_id": "546b8e83b77c84600c000011",
                "name": "Structural Analysis for Dynamo"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "0.2.5"
          },
          {
            "_id": "58667e28fdef23aa6e0001ad",
            "contains_binaries": true,
            "node_libraries": [ "DynamoSimulationRSA, Version=0.2.6.1, Culture=neutral, PublicKeyToken=null", "DynamoSimulationRSAUI, Version=0.2.6.1, Culture=neutral, PublicKeyToken=null" ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-prod/c91e6de8-6156-49bc-bb89-f76f55e5c365gregPkg729.zip",
            "contents": "",
            "engine_metadata": "",
            "engine_version": "1.2.0.2690",
            "created": "2016-12-30T15:32:56.113Z",
            "full_dependency_versions": [ "0.2.6" ],
            "full_dependency_ids": [
              {
                "_id": "546b8e83b77c84600c000011",
                "name": "Structural Analysis for Dynamo"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "0.2.6"
          },
          {
            "_id": "58d50755f4db78ec01000173",
            "contains_binaries": true,
            "node_libraries": [ "DynamoSimulationRSA, Version=0.2.7.1, Culture=neutral, PublicKeyToken=null", "DynamoSimulationRSAUI, Version=0.2.7.1, Culture=neutral, PublicKeyToken=null" ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-prod/3bb66562-5a0e-46b2-965d-00037973f403gregPkg387.zip",
            "contents": "",
            "engine_metadata": "",
            "engine_version": "1.3.0.792",
            "created": "2017-03-24T11:47:33.393Z",
            "full_dependency_versions": [ "0.2.7" ],
            "full_dependency_ids": [
              {
                "_id": "546b8e83b77c84600c000011",
                "name": "Structural Analysis for Dynamo"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "0.2.7"
          }
        ],
        "latest_version_update": "2017-03-24T11:47:33.393Z",
        "num_versions": 11,
        "comments": [ ],
        "num_comments": 0,
        "latest_comment": "1970-01-01T00:00:00.000Z",
        "votes": 2,
        "downloads": 5413,
        "repository_url": "",
        "site_url": "",
        "banned": false,
        "deprecated": false,
        "group": "",
        "engine": "dynamo",
        "license": "",
        "used_by": [
          {
            "_id": "5582bdd4f2ae5a9a070000b5",
            "name": "OptimaX"
          }
        ],
        "num_dependents": 1,
        "description": "Structural Analysis for Dynamo allows for parametric modeling and structural analysis workflows in Dynamo 1.2 and 1.3\r\nStructural Analysis for Dynamo allows the user to configure the structural model in Dynamo, submit to Autodesk Robot Structural Analysis 2017 or 2018 for calculation and dig into the results returned from the analysis. \r\nPlease sign in to Dynamo forum to get more information, provide your feedback and report any issues (https://forum.dynamobim.com/)",
        "maintainers": [
          {
            "_id": "546b8e81b77c84600c000010",
            "username": "_ew"
          }
        ],
        "keywords": [ "analyze", "structural", "analysis", "rsa", "robot", "simulation", "structures" ],
        "created": "2014-11-18T18:22:59.757Z"
      },
      {

        "_id": "56273e18662bf0e908000278",
        "__v": 20,
        "name": "MeshToolkit",
        "white_list": false,
        "versions": [
          {
            "_id": "56273e18662bf0e908000279",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/306102e3-ad95-4ce4-8078-2b3031057c00gregPkg311.zip",
            "contents": "",
            "engine_metadata": "",
            "engine_version": "0.9.1.2931",
            "created": "2015-10-21T07:26:16.782Z",
            "full_dependency_versions": [ "0.7.5" ],
            "full_dependency_ids": [
              {
                "_id": "56273e18662bf0e908000278",
                "name": "MeshToolkit"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "0.7.5"
          },
          {
            "_id": "56274489662bf0e90800027a",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/1dbe5923-d57b-4255-9ed1-b7fc73b4dd02gregPkg661.zip",
            "contents": "",
            "engine_metadata": "",
            "engine_version": "0.9.1.2931",
            "created": "2015-10-21T07:53:45.526Z",
            "full_dependency_versions": [ "0.8.0" ],
            "full_dependency_ids": [
              {
                "_id": "56273e18662bf0e908000278",
                "name": "MeshToolkit"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "0.8.0"
          },
          {
            "_id": "56275ea4662bf0e90800027b",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/76633940-dd1b-40b1-8c1a-d7a013929f45gregPkg375.zip",
            "contents": "",
            "engine_metadata": "",
            "engine_version": "0.9.1.2931",
            "created": "2015-10-21T09:45:08.888Z",
            "full_dependency_versions": [ "0.8.1" ],
            "full_dependency_ids": [
              {
                "_id": "56273e18662bf0e908000278",
                "name": "MeshToolkit"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "0.8.1"
          },
          {
            "_id": "5627629a662bf0e90800027c",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/80d3493e-5364-42bb-84bb-6a308864593dgregPkg823.zip",
            "contents": "",
            "engine_metadata": "",
            "engine_version": "0.9.1.2931",
            "created": "2015-10-21T10:02:02.831Z",
            "full_dependency_versions": [ "0.8.2" ],
            "full_dependency_ids": [
              {
                "_id": "56273e18662bf0e908000278",
                "name": "MeshToolkit"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "0.8.2"
          },
          {
            "_id": "5627643e662bf0e90800027d",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/77bba5fd-9656-448a-beb9-841ae1fce98dgregPkg791.zip",
            "contents": "",
            "engine_metadata": "",
            "engine_version": "0.9.1.2931",
            "created": "2015-10-21T10:09:02.454Z",
            "full_dependency_versions": [ "0.9.0" ],
            "full_dependency_ids": [
              {
                "_id": "56273e18662bf0e908000278",
                "name": "MeshToolkit"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "0.9.0"
          },
          {
            "_id": "5715a0d2287283f905000047",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/77453a87-22a2-43b0-8947-8775a8d7ad53gregPkg166.zip",
            "contents": "",
            "engine_metadata": "",
            "engine_version": "1.0.0.1081",
            "created": "2016-04-19T03:06:58.379Z",
            "full_dependency_versions": [ "1.0.0" ],
            "full_dependency_ids": [
              {
                "_id": "56273e18662bf0e908000278",
                "name": "MeshToolkit"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "1.0.0"
          },
          {
            "_id": "578e98ab5351460648000083",
            "contains_binaries": true,
            "node_libraries": [ "MeshToolkit, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-prod/e30960d0-fcda-4df8-9c0a-56dcc71661ecgregPkg5.zip",
            "contents": "",
            "engine_metadata": "",
            "engine_version": "1.1.0.1930",
            "created": "2016-07-19T21:16:27.963Z",
            "full_dependency_versions": [ "1.1.0" ],
            "full_dependency_ids": [
              {
                "_id": "56273e18662bf0e908000278",
                "name": "MeshToolkit"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "1.1.0"
          },
          {
            "_id": "5806bee8f50b17c720000027",
            "contains_binaries": true,
            "node_libraries": [ "MeshToolkit, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-prod/a7240397-5d65-4cc2-8f69-6089d1f29bafgregPkg559.zip",
            "contents": "",
            "engine_metadata": "",
            "engine_version": "1.2.0.2690",
            "created": "2016-10-19T00:31:36.128Z",
            "full_dependency_versions": [ "1.2.0" ],
            "full_dependency_ids": [
              {
                "_id": "56273e18662bf0e908000278",
                "name": "MeshToolkit"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "1.2.0"
          },
          {
            "_id": "58b927d3f4db78ec01000082",
            "contains_binaries": true,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-prod/b86bba9d-06eb-4933-8622-ddbf155fdccbgregPkg602.zip",
            "contents": "",
            "engine_metadata": "",
            "engine_version": "1.2.3.582",
            "created": "2017-03-03T08:22:43.360Z",
            "full_dependency_versions": [ "1.3.0" ],
            "full_dependency_ids": [
              {
                "_id": "56273e18662bf0e908000278",
                "name": "MeshToolkit"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "1.3.0"
          },
          {
            "_id": "58be6960f4db78ec010000a5",
            "contains_binaries": true,
            "node_libraries": [ "MeshToolkit, Version=1.3.0.0, Culture=neutral, PublicKeyToken=null" ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-prod/221fa841-a90e-419b-9fee-b2d2004b99f8gregPkg802.zip",
            "contents": "",
            "engine_metadata": "",
            "engine_version": "1.3.0.652",
            "created": "2017-03-07T08:03:44.232Z",
            "full_dependency_versions": [ "1.3.1" ],
            "full_dependency_ids": [
              {
                "_id": "56273e18662bf0e908000278",
                "name": "MeshToolkit"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "1.3.1"
          }
        ],
        "latest_version_update": "2017-03-07T08:03:44.232Z",
        "num_versions": 10,
        "comments": [ ],
        "num_comments": 0,
        "latest_comment": "1970-01-01T00:00:00.000Z",
        "votes": -3,
        "downloads": 4576,
        "repository_url": "https://github.com/DynamoDS/Dynamo/wiki/Dynamo-Mesh-Toolkit",
        "site_url": "",
        "banned": false,
        "deprecated": false,
        "group": "MeshToolkit",
        "engine": "dynamo",
        "license": "",
        "used_by": [
          {
            "_id": "555e8bfea8367b98610000b8",
            "name": "Bakery"
          }
        ],
        "num_dependents": 1,
        "description": "Dynamo MeshToolkit backed by AMT. For more information visit github link WARNING: VERY LARGE DOWNLOAD!",
        "maintainers": [
          {
            "_id": "556e21d1888bb8ca03000008",
            "username": "DynamoTeam"
          }
        ],
        "keywords": [ "mesh", "geometry", "obj" ],
        "created": "2015-10-21T07:26:16.782Z"
      },
      {

        "_id": "562baef5662bf0e908000298",
        "__v": 15,
        "name": "DynamoMEP",
        "white_list": false,
        "versions": [
          {
            "_id": "562baef5662bf0e908000299",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/7316de74-6a6a-4dd2-8af8-f8610493960cgregPkg681.zip",
            "contents": "",
            "engine_metadata": "",
            "engine_version": "0.9.0.2805",
            "created": "2015-10-24T16:16:53.103Z",
            "full_dependency_versions": [ "0.1.1" ],
            "full_dependency_ids": [
              {
                "_id": "562baef5662bf0e908000298",
                "name": "DynamoMEP"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "0.1.1"
          },
          {
            "_id": "56bf1f61c3e9ee4a080000f9",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/b5408ecb-b339-4352-86b8-a0fb1cc22be2gregPkg475.zip",
            "contents": "",
            "engine_metadata": "",
            "engine_version": "0.9.0.2805",
            "created": "2016-02-13T12:19:45.280Z",
            "full_dependency_versions": [ "0.2.1" ],
            "full_dependency_ids": [
              {
                "_id": "562baef5662bf0e908000298",
                "name": "DynamoMEP"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "0.2.1"
          },
          {
            "_id": "56bf2291c3e9ee4a080000fa",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/ac7373e6-e533-4935-b57c-2d94bc8e55bfgregPkg219.zip",
            "contents": "",
            "engine_metadata": "",
            "engine_version": "0.9.0.2805",
            "created": "2016-02-13T12:33:21.318Z",
            "full_dependency_versions": [ "0.2.2" ],
            "full_dependency_ids": [
              {
                "_id": "562baef5662bf0e908000298",
                "name": "DynamoMEP"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "0.2.2"
          },
          {
            "_id": "56bf59bcc3e9ee4a080000fd",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/f024ac83-f83c-430f-9e37-7d6713d3c7c8gregPkg914.zip",
            "contents": "",
            "engine_metadata": "",
            "engine_version": "0.9.0.2805",
            "created": "2016-02-13T16:28:44.610Z",
            "full_dependency_versions": [ "0.2.3" ],
            "full_dependency_ids": [
              {
                "_id": "562baef5662bf0e908000298",
                "name": "DynamoMEP"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "0.2.3"
          },
          {
            "_id": "57404b92c1a604fb36000006",
            "contains_binaries": true,
            "node_libraries": [ "DynamoMEP, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-prod/9281fe66-877f-4d55-9076-f0f439cf0d24gregPkg187.zip",
            "contents": "",
            "engine_metadata": "",
            "engine_version": "1.0.0.1180",
            "created": "2016-05-21T11:50:42.679Z",
            "full_dependency_versions": [ "0.3.0" ],
            "full_dependency_ids": [
              {
                "_id": "562baef5662bf0e908000298",
                "name": "DynamoMEP"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "0.3.0"
          },
          {
            "_id": "5742c024c1a604fb3600001a",
            "contains_binaries": true,
            "node_libraries": [ "DynamoMEP, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-prod/1559f768-e5e4-4c32-944f-dc20c6dc2d74gregPkg859.zip",
            "contents": "",
            "engine_metadata": "",
            "engine_version": "1.0.0.1180",
            "created": "2016-05-23T08:32:36.855Z",
            "full_dependency_versions": [ "0.4.0" ],
            "full_dependency_ids": [
              {
                "_id": "562baef5662bf0e908000298",
                "name": "DynamoMEP"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "0.4.0"
          },
          {
            "_id": "57f8e3e1d3d589541a000041",
            "contains_binaries": true,
            "node_libraries": [ "DynamoMEP, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-prod/d78289a8-4441-47ac-86c6-abfb76a0f288gregPkg812.zip",
            "contents": "",
            "engine_metadata": "",
            "engine_version": "1.2.0.2690",
            "created": "2016-10-08T12:17:37.735Z",
            "full_dependency_versions": [ "0.5.0" ],
            "full_dependency_ids": [
              {
                "_id": "562baef5662bf0e908000298",
                "name": "DynamoMEP"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "0.5.0"
          },
          {
            "_id": "57f8e615d3d589541a000042",
            "contains_binaries": true,
            "node_libraries": [ "DynamoMEP, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-prod/21f52f92-b285-460d-ad6c-315b27cc9fc7gregPkg93.zip",
            "contents": "",
            "engine_metadata": "",
            "engine_version": "1.2.0.2690",
            "created": "2016-10-08T12:27:01.979Z",
            "full_dependency_versions": [ "0.5.1" ],
            "full_dependency_ids": [
              {
                "_id": "562baef5662bf0e908000298",
                "name": "DynamoMEP"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "0.5.1"
          }
        ],
        "latest_version_update": "2016-10-08T12:27:01.979Z",
        "num_versions": 8,
        "comments": [ ],
        "num_comments": 0,
        "latest_comment": "1970-01-01T00:00:00.000Z",
        "votes": 3,
        "downloads": 2892,
        "repository_url": "https://github.com/simonmoreau/DynamoMEP",
        "site_url": "www.bim42.com",
        "banned": false,
        "deprecated": false,
        "group": "BIM 42",
        "engine": "dynamo",
        "license": "",
        "used_by": [ ],
        "num_dependents": 0,
        "description": "DynamoMEP is a package for working with MEP elements, Rooms and Spaces.",
        "maintainers": [
          {
            "_id": "5623ae45662bf0e90800026d",
            "username": "moreaus"
          }
        ],
        "keywords": [ "mep", "room", "space" ],
        "created": "2015-10-24T16:16:53.103Z"
      },
      {

        "_id": "56aa7950c3e9ee4a08000059",
        "__v": 29,
        "name": "Ladybug",
        "white_list": false,
        "versions": [
          {
            "_id": "56aa7950c3e9ee4a0800005a",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/9ce90606-341e-4aa1-83f9-c6eb1bedd620gregPkg48.zip",
            "contents": "Ladybug - This node installs ladybug on your machine. You need to run it once and only once to download the files.",
            "engine_metadata": "",
            "engine_version": "0.9.1.3872",
            "created": "2016-01-28T20:25:52.644Z",
            "full_dependency_versions": [ "0.0.1" ],
            "full_dependency_ids": [
              {
                "_id": "56aa7950c3e9ee4a08000059",
                "name": "Ladybug"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "0.0.1"
          },
          {
            "_id": "56aa7bb7c3e9ee4a0800005c",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/bef9e4a9-c5cf-462d-8db1-ba4d17571422gregPkg255.zip",
            "contents": "Ladybug - This node installs ladybug on your machine. You need to run it once and only once to download the files.",
            "engine_metadata": "",
            "engine_version": "0.9.1.3872",
            "created": "2016-01-28T20:36:07.034Z",
            "full_dependency_versions": [ "0.0.2" ],
            "full_dependency_ids": [
              {
                "_id": "56aa7950c3e9ee4a08000059",
                "name": "Ladybug"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "0.0.2"
          },
          {
            "_id": "56aa7da1c3e9ee4a0800005d",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/72180d7a-dc44-4904-88b8-2f6064dbaf2fgregPkg540.zip",
            "contents": "Ladybug - This node installs ladybug on your machine. You need to run it once and only once to download the files.",
            "engine_metadata": "",
            "engine_version": "0.9.1.3872",
            "created": "2016-01-28T20:44:17.181Z",
            "full_dependency_versions": [ "0.0.3" ],
            "full_dependency_ids": [
              {
                "_id": "56aa7950c3e9ee4a08000059",
                "name": "Ladybug"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "0.0.3"
          },
          {
            "_id": "56aa8387c3e9ee4a0800005e",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/95f525db-f8ce-446a-9ef5-e01272640d0dgregPkg658.zip",
            "contents": "Ladybug - This node installs ladybug on your machine. You need to run it once and only once to download the files.",
            "engine_metadata": "",
            "engine_version": "0.9.1.3872",
            "created": "2016-01-28T21:09:27.572Z",
            "full_dependency_versions": [ "0.0.4" ],
            "full_dependency_ids": [
              {
                "_id": "56aa7950c3e9ee4a08000059",
                "name": "Ladybug"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "0.0.4"
          },
          {
            "_id": "56aa8ba5c3e9ee4a08000061",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/c196042b-6da6-4f37-873e-2903974f78e8gregPkg207.zip",
            "contents": "Ladybug - This node installs ladybug on your machine. You need to run it once and only once to download the files.",
            "engine_metadata": "",
            "engine_version": "0.9.1.3872",
            "created": "2016-01-28T21:44:05.255Z",
            "full_dependency_versions": [ "0.0.5" ],
            "full_dependency_ids": [
              {
                "_id": "56aa7950c3e9ee4a08000059",
                "name": "Ladybug"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "0.0.5"
          },
          {
            "_id": "56aa8d9ac3e9ee4a08000062",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/d9d157a7-0a3c-4ec3-8690-31550c9bd5afgregPkg285.zip",
            "contents": "Ladybug - This node installs ladybug on your machine. You need to run it once and only once to download the files.",
            "engine_metadata": "",
            "engine_version": "0.9.1.3872",
            "created": "2016-01-28T21:52:26.121Z",
            "full_dependency_versions": [ "0.0.6" ],
            "full_dependency_ids": [
              {
                "_id": "56aa7950c3e9ee4a08000059",
                "name": "Ladybug"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "0.0.6"
          },
          {
            "_id": "572ae72f384037b37e000014",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-prod/032f9a94-7ecd-45d7-8733-ceef4c427203gregPkg26.zip",
            "contents": "Analysis Period - Create a Ladybug Analysis Period, Calculate HOY - Calculate hour of year for a month, day and hour, Color Surface - Color a test surface based on the results of a study. The results structure should match the test points structure to be mapped correctly on the surface., Construct Location - Construct a Ladybug location based on input data, Deconstruct Location - Get different location data from a location string, Filter Sky Matrix - Filter Cumulative Sky for an analysis period. You can also filter diffuse or direct component of the sky, Generate Sky Matrix - Generate sky matrix for a location from epw file, Generate Test Points - Generate test points from a surface based on number of segments and distance from the surface, Import epw - Use this node to import lists of weather data into Dynamo from a standard .epw file.\nFor detailed information about the structure of an epw file, you may want to read the\n\"Weather Converter Program\" section in \"Auxiliary EnergyPlus Programs\" document.\nAll descriptions of importaed data are borrowed from this document.\nThe document is available online at this address:\n\"http://apps1.eere.energy.gov/buildings/energyplus/pdfs/auxiliaryprograms.pdf\", Import Location - Import location data from an epw weather file, Ladybug - This node installs ladybug on your machine. You need to run it once and only once to download the files., LB Color Range - A set of color ranges for coloring analysis results, Legend Parameters - Use legend parameter to set up results visualization setting, Solar Radiation Analysis - Calculate solar radiation for points in wh, Sunlighthours Analysis - Calculate sunlight hours for a list of test points, Sunpath - Use this node to make a 3D sun-path (aka. sun plot) in the Dynamo scene.  The node also outputs sun vectors that can be used for sunlight hours analysis or shading design with the other Ladybug nodes.",
            "engine_metadata": "",
            "engine_version": "1.0.0.1180",
            "created": "2016-05-05T06:24:47.297Z",
            "full_dependency_versions": [ "0.0.7" ],
            "full_dependency_ids": [
              {
                "_id": "56aa7950c3e9ee4a08000059",
                "name": "Ladybug"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "0.0.7"
          },
          {
            "_id": "572b4e2f384037b37e00001b",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-prod/8a7655a9-8bcd-4e42-aa25-21b92014e0c3gregPkg142.zip",
            "contents": "Analysis Period - Create a Ladybug Analysis Period, Calculate HOY - Calculate hour of year for a month, day and hour, Color Surface - Color a test surface based on the results of a study. The results structure should match the test points structure to be mapped correctly on the surface., Construct Location - Construct a Ladybug location based on input data, Deconstruct Location - Get different location data from a location string, Filter Sky Matrix - Filter Cumulative Sky for an analysis period. You can also filter diffuse or direct component of the sky, Generate Sky Matrix - Generate sky matrix for a location from epw file, Generate Test Points - Generate test points from a surface based on number of segments and distance from the surface, Import epw - Use this node to import lists of weather data into Dynamo from a standard .epw file.\nFor detailed information about the structure of an epw file, you may want to read the\n\"Weather Converter Program\" section in \"Auxiliary EnergyPlus Programs\" document.\nAll descriptions of importaed data are borrowed from this document.\nThe document is available online at this address:\n\"http://apps1.eere.energy.gov/buildings/energyplus/pdfs/auxiliaryprograms.pdf\", Import Location - Import location data from an epw weather file, LB Color Range - A set of color ranges for coloring analysis results, Legend Parameters - Use legend parameter to set up results visualization setting, Solar Radiation Analysis - Calculate solar radiation for points in wh, Sunlighthours Analysis - Calculate sunlight hours for a list of test points, Sunpath - Use this node to make a 3D sun-path (aka. sun plot) in the Dynamo scene.  The node also outputs sun vectors that can be used for sunlight hours analysis or shading design with the other Ladybug nodes.",
            "engine_metadata": "",
            "engine_version": "1.0.0.1180",
            "created": "2016-05-05T13:44:15.859Z",
            "full_dependency_versions": [ "0.0.8" ],
            "full_dependency_ids": [
              {
                "_id": "56aa7950c3e9ee4a08000059",
                "name": "Ladybug"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "0.0.8"
          },
          {
            "_id": "572d55f7384037b37e00002a",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-prod/cc0fa4ef-8f3d-43cd-8869-69a07494104dgregPkg241.zip",
            "contents": "Analysis Period - Create a Ladybug Analysis Period, Calculate HOY - Calculate hour of year for a month, day and hour, Color Surface - Color a test surface based on the results of a study. The results structure should match the test points structure to be mapped correctly on the surface., Construct Location - Construct a Ladybug location based on input data, Deconstruct Location - Get different location data from a location string, Filter Sky Matrix - Filter Cumulative Sky for an analysis period. You can also filter diffuse or direct component of the sky, Generate Sky Matrix - Generate sky matrix for a location from epw file, Generate Test Points - Generate test points from a surface based on number of segments and distance from the surface, Import epw - Use this node to import lists of weather data into Dynamo from a standard .epw file.\nFor detailed information about the structure of an epw file, you may want to read the\n\"Weather Converter Program\" section in \"Auxiliary EnergyPlus Programs\" document.\nAll descriptions of importaed data are borrowed from this document.\nThe document is available online at this address:\n\"http://apps1.eere.energy.gov/buildings/energyplus/pdfs/auxiliaryprograms.pdf\", Import Location - Import location data from an epw weather file, LB Color Range - A set of color ranges for coloring analysis results, Legend Parameters - Use legend parameter to set up results visualization setting, Solar Radiation Analysis - Calculate solar radiation for points in wh, Sunlighthours Analysis - Calculate sunlight hours for a list of test points, Sunpath - Use this node to make a 3D sun-path (aka. sun plot) in the Dynamo scene.  The node also outputs sun vectors that can be used for sunlight hours analysis or shading design with the other Ladybug nodes.",
            "engine_metadata": "",
            "engine_version": "1.0.0.1180",
            "created": "2016-05-07T02:41:59.273Z",
            "full_dependency_versions": [ "0.0.9" ],
            "full_dependency_ids": [
              {
                "_id": "56aa7950c3e9ee4a08000059",
                "name": "Ladybug"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "0.0.9"
          },
          {
            "_id": "5751161ae70394822f000052",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-prod/acc80fc4-206a-4127-9e06-82803790ba3cgregPkg828.zip",
            "contents": "Analysis Period - Create a Ladybug Analysis Period, Calculate HOY - Calculate hour of year for a month, day and hour, Color Surface - Color a test surface based on the results of a study. The results structure should match the test points structure to be mapped correctly on the surface., Construct Location - Construct a Ladybug location based on input data, Deconstruct Location - Get different location data from a location string, Filter Sky Matrix - Filter Cumulative Sky for an analysis period. You can also filter diffuse or direct component of the sky, Generate Sky Matrix - Generate sky matrix for a location from epw file, Generate Test Points - Generate test points from a surface based on number of segments and distance from the surface, Import epw - Use this node to import lists of weather data into Dynamo from a standard .epw file.\nFor detailed information about the structure of an epw file, you may want to read the\n\"Weather Converter Program\" section in \"Auxiliary EnergyPlus Programs\" document.\nAll descriptions of importaed data are borrowed from this document.\nThe document is available online at this address:\n\"http://apps1.eere.energy.gov/buildings/energyplus/pdfs/auxiliaryprograms.pdf\", Import Location - Import location data from an epw weather file, LB Color Range - A set of color ranges for coloring analysis results, Legend Parameters - Use legend parameter to set up results visualization setting, Solar Radiation Analysis - Calculate solar radiation for points in wh, Sunlighthours Analysis - Calculate sunlight hours for a list of test points, Sunpath - Use this node to make a 3D sun-path (aka. sun plot) in the Dynamo scene.  The node also outputs sun vectors that can be used for sunlight hours analysis or shading design with the other Ladybug nodes.",
            "engine_metadata": "",
            "engine_version": "1.0.0.1180",
            "created": "2016-06-03T05:31:06.337Z",
            "full_dependency_versions": [ "0.1.1" ],
            "full_dependency_ids": [
              {
                "_id": "56aa7950c3e9ee4a08000059",
                "name": "Ladybug"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "0.1.1"
          },
          {
            "_id": "575cb321e70394822f00008c",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-prod/1b8e21bb-2916-407f-9076-221e50277099gregPkg480.zip",
            "contents": "Analysis Period - Create a Ladybug Analysis Period, Calculate HOY - Calculate hour of year for a month, day and hour, Color Surface - Color a test surface based on the results of a study. The results structure should match the test points structure to be mapped correctly on the surface., Construct Location - Construct a Ladybug location based on input data, Deconstruct Location - Get different location data from a location string, Filter Sky Matrix - Filter Cumulative Sky for an analysis period. You can also filter diffuse or direct component of the sky, Generate Sky Matrix - Generate sky matrix for a location from epw file, Generate Test Points - Generate test points from a surface based on number of segments and distance from the surface, Import epw - Use this node to import lists of weather data into Dynamo from a standard .epw file.\nFor detailed information about the structure of an epw file, you may want to read the\n\"Weather Converter Program\" section in \"Auxiliary EnergyPlus Programs\" document.\nAll descriptions of importaed data are borrowed from this document.\nThe document is available online at this address:\n\"http://apps1.eere.energy.gov/buildings/energyplus/pdfs/auxiliaryprograms.pdf\", Import Location - Import location data from an epw weather file, LB Color Range - A set of color ranges for coloring analysis results, Legend Parameters - Use legend parameter to set up results visualization setting, Solar Radiation Analysis - Calculate solar radiation for points in wh, Sunlighthours Analysis - Calculate sunlight hours for a list of test points, Sunpath - Use this node to make a 3D sun-path (aka. sun plot) in the Dynamo scene.  The node also outputs sun vectors that can be used for sunlight hours analysis or shading design with the other Ladybug nodes.",
            "engine_metadata": "",
            "engine_version": "1.0.0.1180",
            "created": "2016-06-12T00:56:01.158Z",
            "full_dependency_versions": [ "0.1.2" ],
            "full_dependency_ids": [
              {
                "_id": "56aa7950c3e9ee4a08000059",
                "name": "Ladybug"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "0.1.2"
          },
          {
            "_id": "577d7bf7535146064800002f",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-prod/c6ed0e5a-9273-45de-a728-4e34bdffa804gregPkg573.zip",
            "contents": "Analysis Period - Create a Ladybug Analysis Period, Calculate HOY - Calculate hour of year for a month, day and hour, Construct Location - Construct a Ladybug location based on input data, Deconstruct Location - Get different location data from a location string, Filter Sky Matrix - Filter Cumulative Sky for an analysis period. You can also filter diffuse or direct component of the sky, Generate Colors - Color a test surface based on the results of a study. The results structure should match the test points structure to be mapped correctly on the surface., Generate Sky Matrix - Generate sky matrix for a location from epw file, Generate Test Points - Generate test points from a surface based on number of segments and distance from the surface, Import epw - Use this node to import lists of weather data into Dynamo from a standard .epw file.\nFor detailed information about the structure of an epw file, you may want to read the\n\"Weather Converter Program\" section in \"Auxiliary EnergyPlus Programs\" document.\nAll descriptions of importaed data are borrowed from this document.\nThe document is available online at this address:\n\"http://apps1.eere.energy.gov/buildings/energyplus/pdfs/auxiliaryprograms.pdf\", Import Location - Import location data from an epw weather file, LB Color Range - A set of color ranges for coloring analysis results, Legend Parameters - Use legend parameter to set up results visualization setting, Solar Radiation Analysis - Calculate solar radiation for points in wh, Sunlighthours Analysis - Calculate sunlight hours for a list of test points, Sunpath - Use this node to make a 3D sun-path (aka. sun plot) in the Dynamo scene.  The node also outputs sun vectors that can be used for sunlight hours analysis or shading design with the other Ladybug nodes.",
            "engine_metadata": "",
            "engine_version": "1.0.0.1180",
            "created": "2016-07-06T21:45:27.298Z",
            "full_dependency_versions": [ "0.1.3" ],
            "full_dependency_ids": [
              {
                "_id": "56aa7950c3e9ee4a08000059",
                "name": "Ladybug"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "0.1.3"
          },
          {
            "_id": "582906745af9f3713d000059",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-prod/f73d25a2-e139-43bd-a3be-9750d0811123gregPkg539.zip",
            "contents": "Analysis Period - Create a Ladybug Analysis Period, Calculate HOY - Calculate hour of year for a month, day and hour, Construct Location - Construct a Ladybug location based on input data, Deconstruct Location - Get different location data from a location string, Filter Sky Matrix - Filter Cumulative Sky for an analysis period. You can also filter diffuse or direct component of the sky, Generate Colors - Color a test surface based on the results of a study. The results structure should match the test points structure to be mapped correctly on the surface., Generate Sky Matrix - Generate sky matrix for a location from epw file, Generate Test Points - Generate test points from a surface based on number of segments and distance from the surface, Import epw - Use this node to import lists of weather data into Dynamo from a standard .epw file.\nFor detailed information about the structure of an epw file, you may want to read the\n\"Weather Converter Program\" section in \"Auxiliary EnergyPlus Programs\" document.\nAll descriptions of importaed data are borrowed from this document.\nThe document is available online at this address:\n\"http://apps1.eere.energy.gov/buildings/energyplus/pdfs/auxiliaryprograms.pdf\", Import Location - Import location data from an epw weather file, LB Color Range - A set of color ranges for coloring analysis results, Legend Parameters - Use legend parameter to set up results visualization setting, Solar Radiation Analysis - Calculate solar radiation for points in wh, Sunlighthours Analysis - Calculate sunlight hours for a list of test points, Sunpath - Use this node to make a 3D sun-path (aka. sun plot) in the Dynamo scene.  The node also outputs sun vectors that can be used for sunlight hours analysis or shading design with the other Ladybug nodes.",
            "engine_metadata": "",
            "engine_version": "1.2.0.2690",
            "created": "2016-11-14T00:33:56.117Z",
            "full_dependency_versions": [ "0.1.4" ],
            "full_dependency_ids": [
              {
                "_id": "56aa7950c3e9ee4a08000059",
                "name": "Ladybug"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "0.1.4"
          },
          {
            "_id": "58349a9f5af9f3713d0000e2",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-prod/41df9217-d9ee-4694-af64-9b63e067f725gregPkg383.zip",
            "contents": "Analysis Period - Create a Ladybug Analysis Period, Calculate HOY - Calculate hour of year for a month, day and hour, Construct Location - Construct a Ladybug location based on input data, Deconstruct Location - Get different location data from a location string, Filter Sky Matrix - Filter Cumulative Sky for an analysis period. You can also filter diffuse or direct component of the sky, Generate Colors - Color a test surface based on the results of a study. The results structure should match the test points structure to be mapped correctly on the surface., Generate Sky Matrix - Generate sky matrix for a location from epw file, Generate Test Points - Generate test points from a surface based on number of segments and distance from the surface, Import epw - Use this node to import lists of weather data into Dynamo from a standard .epw file.\nFor detailed information about the structure of an epw file, you may want to read the\n\"Weather Converter Program\" section in \"Auxiliary EnergyPlus Programs\" document.\nAll descriptions of importaed data are borrowed from this document.\nThe document is available online at this address:\n\"http://apps1.eere.energy.gov/buildings/energyplus/pdfs/auxiliaryprograms.pdf\", Import Location - Import location data from an epw weather file, LB Color Range - A set of color ranges for coloring analysis results, Legend Parameters - Use legend parameter to set up results visualization setting, Solar Radiation Analysis - Calculate solar radiation for points in wh, Sunlighthours Analysis - Calculate sunlight hours for a list of test points, Sunpath - Use this node to make a 3D sun-path (aka. sun plot) in the Dynamo scene.  The node also outputs sun vectors that can be used for sunlight hours analysis or shading design with the other Ladybug nodes.",
            "engine_metadata": "",
            "engine_version": "1.2.0.2690",
            "created": "2016-11-22T19:21:03.261Z",
            "full_dependency_versions": [ "0.1.5" ],
            "full_dependency_ids": [
              {
                "_id": "56aa7950c3e9ee4a08000059",
                "name": "Ladybug"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "0.1.5"
          }
        ],
        "latest_version_update": "2016-11-22T19:21:03.261Z",
        "num_versions": 14,
        "comments": [ ],
        "num_comments": 0,
        "latest_comment": "1970-01-01T00:00:00.000Z",
        "votes": 2,
        "downloads": 4151,
        "repository_url": "https://github.com/ladybug-analysis-tools/ladybug-dynamo",
        "site_url": "https://www.facebook.com/LadybugAnalysisTools",
        "banned": false,
        "deprecated": false,
        "group": "Ladybug Analysis Tools",
        "engine": "dynamo",
        "license": "GPL.V3",
        "used_by": [
          {
            "_id": "5507ae3e0c7eac9b57000053",
            "name": "BVN"
          },
          {
            "_id": "58ac69def4db78ec0100000a",
            "name": "Butterfly"
          }
        ],
        "num_dependents": 2,
        "description": "Ladybug is a plugin for weather data and environmental analysis [Updated for Dynamo 1.2.0].",
        "maintainers": [
          {
            "_id": "56a911d7c3e9ee4a0800004a",
            "username": "thisisladybug"
          }
        ],
        "keywords": [ "ladybug", "environmental", "analysis", "sunpath", "radition", "solar" ],
        "created": "2016-01-28T20:25:52.644Z"
      },
      {

        "_id": "564dc5a3662bf0e90800035b",
        "__v": 30,
        "name": "Landform",
        "white_list": false,
        "versions": [
          {
            "_id": "564dc5a3662bf0e90800035c",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/5259ad79-9a01-4fbb-8253-7e62a86de2c7gregPkg841.zip",
            "contents": "Elements.RandomizeParameter - Set an element's instance parameter to a random value between a range specified by the minimum and maximum parameter., FamilyInstance.RandomRotation - Rotates the angle of the family instance a random amount (between 0 and 360)., SlabShape.Points - Get the XYZ points of any slab shape Roof or Floor., Topography.ByLines - Create a toposurface from lines. Generates points at a specified interval along the lines., Topography.ColorBySlope - Applies a color range based on the slope of the triangle faces. Based on percentage slope. Max slope index is 1 (100%, or 45 degrees).",
            "engine_metadata": "",
            "engine_version": "0.9.1.3067",
            "created": "2015-11-19T12:50:43.977Z",
            "full_dependency_versions": [ "2015.11.19" ],
            "full_dependency_ids": [
              {
                "_id": "564dc5a3662bf0e90800035b",
                "name": "Landform"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2015.11.19"
          },
          {
            "_id": "56558cc70370b0a907000017",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/912ca6ff-7819-49eb-b9cc-f4e56495d1b1gregPkg815.zip",
            "contents": "Point.YRange - Get all Y components and the minimum and maximum Y components from a list of Points., Point.XRange - Get all X components and the minimum and maximum X components from a list of Points., Elements.RandomizeParameter - Set an element's instance parameter to a random value between a range specified by the minimum and maximum parameter., FamilyInstance.RandomRotation - Rotates the angle of the family instance a random amount (between 0 and 360)., SlabShape.Points - Get the XYZ points of any slab shape Roof or Floor., Topography.ByLines - Create a toposurface from lines. Generates points at a specified interval along the lines., Topography.ColorBySlope - Applies a color range based on the slope of the triangle faces. Based on percentage slope. Max slope index is 1 (100%, or 45 degrees)., NurbsSurface.ByNurbsCurves - Creates a NurbsSurface with points generated from an interval along the specified curves., Point.XRange - Get all X components and the minimum and maximum X components from a list of Points., Point.YRange - Get all Y components and the minimum and maximum Y components from a list of Points., Point.ZRange - Get all Z components and the minimum and maximum Z components from a list of Points., Topography.ColorByElevation - Applies a color range based on the elevation of each triangle face. Elevation is calculated from the center point of each triangle face., Topography.Plane.XZ - Creates a row of planes cutting through the Toposurface in the world XZ",
            "engine_metadata": "",
            "engine_version": "0.9.1.3067",
            "created": "2015-11-25T10:26:15.693Z",
            "full_dependency_versions": [ "2015.11.25" ],
            "full_dependency_ids": [
              {
                "_id": "564dc5a3662bf0e90800035b",
                "name": "Landform"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2015.11.25"
          },
          {
            "_id": "566983655c568ad00c000013",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/6ec13c63-525c-451d-8918-c987e8e4eebdgregPkg116.zip",
            "contents": "Curve.MidPoint - Get the midpoint along the Curve, Curve.StartMidPoint - Get the start point and midpoint along the Curve., Elements.RandomizeParameter - Set an element's instance parameter to a random value between a range specified by the minimum and maximum parameter., FamilyInstance.Percentage - Place familiy instances by point from a list of multiple family types and percentages., FamilyInstance.RandomRotation - Rotates the angle of the family instance a random amount (between 0 and 360)., List.CombineByMap - Combine lists using cycle and a mapped count of the list., Math.RandomIntegerMin - Creates a list of random integers between a given minimum and maximum value, NurbsSurface.ByNurbsCurves - Creates a NurbsSurface with points generated from an interval along the specified curves., Point.GridTriangle - Create a triangular grid of points over an area from a set of boundary curves., Point.GridTriangleContain - Create a triangular grid of points contained within a set of boundary curves., Point.Random - Creates a random set of points within a set of boundary cuves. Tolerance specifies the minimum distance between points., Point.RandomAmount - Creates the specified amount of random points within a set boundary curves. Tolerance specifies the minimum distance between points., Point.XRange - Get all X components and the minimum and maximum X components from a list of Points., Point.XYZByCoordinates - Get the X,Y, and Z components and create a point from those coordinates., Point.YRange - Get all Y components and the minimum and maximum Y components from a list of Points., Point.ZRange - Get all Z components and the minimum and maximum Z components from a list of Points., SlabShape.Points - Get the XYZ points of any slab shape Roof or Floor., Topography.ByLines - Create a toposurface from lines. Generates points at a specified interval along the lines., Topography.ColorByElevation - Applies a color range based on the elevation of each triangle face. Elevation is calculated from the center point of each triangle face., Topography.ColorBySlope - Applies a color range based on the slope of the triangle faces. Based on percentage slope. Max slope index is 1 (100%, or 45 degrees)., Topography.Plane.XZ - Creates a row of planes cutting through the Toposurface in the world XZ",
            "engine_metadata": "",
            "engine_version": "0.9.1.3067",
            "created": "2015-12-10T13:51:33.198Z",
            "full_dependency_versions": [ "2015.12.10" ],
            "full_dependency_ids": [
              {
                "_id": "564dc5a3662bf0e90800035b",
                "name": "Landform"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2015.12.10"
          },
          {
            "_id": "566a98275c568ad00c000017",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/044303bc-04f3-4044-b946-a46b65723729gregPkg120.zip",
            "contents": "Curve.MidPoint - Get the midpoint along the Curve, Curve.StartMidPoint - Get the start point and midpoint along the Curve., Elements.RandomizeParameter - Set an element's instance parameter to a random value between a range specified by the minimum and maximum parameter., FamilyInstance.Percentage - Place familiy instances by point from a list of multiple family types and percentages., FamilyInstance.RandomRotation - Rotates the angle of the family instance a random amount (between 0 and 360)., Math.RandomIntegerMin - Creates a list of random integers between a given minimum and maximum value, NurbsSurface.ByNurbsCurves - Creates a NurbsSurface with points generated from an interval along the specified curves., Point.GridTriangle - Create a triangular grid of points over an area from a set of boundary curves., Point.GridTriangleContain - Create a triangular grid of points contained within a set of boundary curves., Point.Random - Creates a random set of points within a set of boundary cuves. Tolerance specifies the minimum distance between points., Point.RandomAmount - Creates the specified amount of random points within a set boundary curves. Tolerance specifies the minimum distance between points., Point.XRange - Get all X components and the minimum and maximum X components from a list of Points., Point.XYZByCoordinates - Get the X,Y, and Z components and create a point from those coordinates., Point.YRange - Get all Y components and the minimum and maximum Y components from a list of Points., Point.ZRange - Get all Z components and the minimum and maximum Z components from a list of Points., SlabShape.Points - Get the XYZ points of any slab shape Roof or Floor., Topography.ByLines - Create a toposurface from lines. Generates points at a specified interval along the lines., Topography.ColorByElevation - Applies a color range based on the elevation of each triangle face. Elevation is calculated from the center point of each triangle face., Topography.ColorBySlope - Applies a color range based on the slope of the triangle faces. Based on percentage slope. Max slope index is 1 (100%, or 45 degrees)., Topography.Plane.XZ - Creates a row of planes cutting through the Toposurface in the world XZ, List.MatchLength - Cycle a list to match the length of the first list.",
            "engine_metadata": "",
            "engine_version": "0.9.1.3067",
            "created": "2015-12-11T09:32:23.269Z",
            "full_dependency_versions": [ "2015.12.11" ],
            "full_dependency_ids": [
              {
                "_id": "564dc5a3662bf0e90800035b",
                "name": "Landform"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2015.12.11"
          },
          {
            "_id": "56a8d0ccc3e9ee4a08000044",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/d25ea745-b9b2-4879-bc04-89dfb97ce527gregPkg489.zip",
            "contents": "Curve.DividePoints - Get the (start) points along an equally divided curve., Curve.MidPoint - Get the midpoint along the Curve, Curve.StartMidPoint - Get the start point and midpoint along the Curve., Elements.RandomizeParameter - Set an element's instance parameter to a random value between a range specified by the minimum and maximum parameter., FamilyInstance.Percentage - Place familiy instances by point from a list of multiple family types and percentages., FamilyInstance.RandomRotation - Rotates the angle of the family instance a random amount (between 0 and 360)., List.MatchLength - Cycle a list to match the length of the first list., List.RemoveEmpty - Removes empty indices from a list., Math.RandomIntegerMin - Creates a list of random integers between a given minimum and maximum value, NurbsSurface.ByNurbsCurves - Creates a NurbsSurface with points generated from an interval along the specified curves., Point.GridTriangle - Create a triangular grid of points over an area from a set of boundary curves., Point.GridTriangleContain - Create a triangular grid of points contained within a set of boundary curves., Point.Random - Creates a random set of points within a set of boundary cuves. Tolerance specifies the minimum distance between points., Point.RandomAmount - Creates the specified amount of random points within a set boundary curves. Tolerance specifies the minimum distance between points., Point.XRange - Get all X components and the minimum and maximum X components from a list of Points., Point.XYZByCoordinates - Get the X,Y, and Z components and create a point from those coordinates., Point.YRange - Get all Y components and the minimum and maximum Y components from a list of Points., Point.ZRange - Get all Z components and the minimum and maximum Z components from a list of Points., SlabShape.Points - Get the XYZ points of any slab shape Roof or Floor., Topography.ByLines - Create a toposurface from lines. Generates points at a specified interval along the lines., Topography.ColorByElevation - Applies a color range based on the elevation of each triangle face. Elevation is calculated from the center point of each triangle face., Topography.ColorBySlope - Applies a color range based on the slope of the triangle faces. Based on percentage slope. Max slope index is 1 (100%, or 45 degrees)., Topography.Plane.XZ - Creates a row of planes cutting through the Toposurface in the world XZ",
            "engine_metadata": "",
            "engine_version": "0.9.1.3067",
            "created": "2016-01-27T14:14:36.098Z",
            "full_dependency_versions": [ "2016.1.27" ],
            "full_dependency_ids": [
              {
                "_id": "564dc5a3662bf0e90800035b",
                "name": "Landform"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2016.1.27"
          },
          {
            "_id": "56cda665c3e9ee4a08000141",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/cf1b448a-c053-4f04-baa5-014fada8fdbdgregPkg953.zip",
            "contents": "Arc.ByLine - Create an arc from the start and end point of a line. Specify the height of the arc (from 0 to 1) and (if desired) flip the arc across the line., Curve.DividePoints - Get the (start) points along an equally divided curve., Curve.MidPoint - Get the midpoint along the Curve, Curve.StartMidPoint - Get the start point and midpoint along the Curve., Elements.RandomizeParameter - Set an element's instance parameter to a random value between a range specified by the minimum and maximum parameter., FamilyInstance.Percentage - Place familiy instances by point from a list of multiple family types and percentages., FamilyInstance.RandomRotation - Rotates the angle of the family instance a random amount (between 0 and 360)., List.MatchLength - Cycle a list to match the length of the first list., List.RemoveEmpty - Removes empty indices from a list., Math.RandomIntegerMin - Creates a list of random integers between a given minimum and maximum value, NurbsSurface.ByNurbsCurves - Creates a NurbsSurface with points generated from an interval along the specified curves., Point.GridTriangle - Create a triangular grid of points over an area from a set of boundary curves., Point.GridTriangleContain - Create a triangular grid of points contained within a set of boundary curves., Point.Random - Creates a random set of points within a set of boundary cuves. Tolerance specifies the minimum distance between points., Point.RandomAmount - Creates the specified amount of random points within a set boundary curves. Tolerance specifies the minimum distance between points., Point.XRange - Get all X components and the minimum and maximum X components from a list of Points., Point.XYZByCoordinates - Get the X,Y, and Z components and create a point from those coordinates., Point.YRange - Get all Y components and the minimum and maximum Y components from a list of Points., Point.ZRange - Get all Z components and the minimum and maximum Z components from a list of Points., SlabShape.Points - Get the XYZ points of any slab shape Roof or Floor., Topography.ByLines - Create a toposurface from lines. Generates points at a specified interval along the lines., Topography.ColorByElevation - Applies a color range based on the elevation of each triangle face. Elevation is calculated from the center point of each triangle face., Topography.ColorBySlope - Applies a color range based on the slope of the triangle faces. Based on percentage slope. Max slope index is 1 (100%, or 45 degrees)., Topography.Plane.XZ - Creates a row of planes cutting through the Toposurface in the world XZ",
            "engine_metadata": "",
            "engine_version": "0.9.1.3067",
            "created": "2016-02-24T12:47:33.964Z",
            "full_dependency_versions": [ "2016.2.24" ],
            "full_dependency_ids": [
              {
                "_id": "564dc5a3662bf0e90800035b",
                "name": "Landform"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2016.2.24"
          },
          {
            "_id": "56eac7905bee3e2138000073",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/8ecebcc5-12ef-4417-a57e-772f7056a732gregPkg475.zip",
            "contents": "Arc.ByLine - Create an arc from the start and end point of a line. Specify the height of the arc (from 0 to 1) and (if desired) flip the arc across the line., Curve.DividePoints - Get the (start) points along an equally divided curve., Curve.MidPoint - Get the midpoint along the Curve, Curve.StartMidPoint - Get the start point and midpoint along the Curve., Elements.RandomizeParameter - Set an element's instance parameter to a random value between a range specified by the minimum and maximum parameter., FamilyInstance.Percentage - Place familiy instances by point from a list of multiple family types and percentages., FamilyInstance.RandomRotation - Rotates the angle of the family instance a random amount (between 0 and 360)., List.MatchLength - Cycle a list to match the length of the first list., List.RemoveEmpty - Removes empty indices from a list., List.SortByKey - Sort a list (or lists) according to the order specified by the key list., Math.RandomIntegerMin - Creates a list of random integers between a given minimum and maximum value, NurbsSurface.ByNurbsCurves - Creates a NurbsSurface with points generated from an interval along the specified curves., Point.GridTriangle - Create a triangular grid of points over an area from a set of boundary curves., Point.GridTriangleContain - Create a triangular grid of points contained within a set of boundary curves., Point.Random - Creates a random set of points within a set of boundary cuves. Tolerance specifies the minimum distance between points., Point.RandomAmount - Creates the specified amount of random points within a set boundary curves. Tolerance specifies the minimum distance between points., Point.ShiftCoordinates - Shifts the coordinates of the point by the given amount. The default shift is positive (add) but can be switched to negative (via boolean)., Point.XRange - Get all X components and the minimum and maximum X components from a list of Points., Point.XYZByCoordinates - Get the X,Y, and Z components and create a point from those coordinates., Point.YRange - Get all Y components and the minimum and maximum Y components from a list of Points., Point.ZRange - Get all Z components and the minimum and maximum Z components from a list of Points., Points.SortByDistance - Sort a list of points based on their distance from a specified point, Points.SortByXY - Sort list of points based on its X and Y coordinate values. In order to sort correctly, points must be rounded (default value is 3 decimal points)., SlabShape.Points - Get the XYZ points of any slab shape Roof or Floor., Topography.ByLines - Create a toposurface from lines. Generates points at a specified interval along the lines., Topography.ColorByElevation - Applies a color range based on the elevation of each triangle face. Elevation is calculated from the center point of each triangle face., Topography.ColorBySlope - Applies a color range based on the slope of the triangle faces. Based on percentage slope. Max slope index is 1 (100%, or 45 degrees)., Topography.Plane.XZ - Creates a row of planes cutting through the Toposurface in the world XZ",
            "engine_metadata": "",
            "engine_version": "0.9.1.3067",
            "created": "2016-03-17T15:04:48.565Z",
            "full_dependency_versions": [ "2016.3.17", "2016.2.23" ],
            "full_dependency_ids": [
              {
                "_id": "564dc5a3662bf0e90800035b",
                "name": "Landform"
              },
              {
                "_id": "54f9396c0c7eac9b5700001a",
                "name": "Ampersand"
              }
            ],
            "direct_dependency_versions": [ "2016.2.23" ],
            "direct_dependency_ids": [
              {
                "_id": "54f9396c0c7eac9b5700001a",
                "name": "Ampersand"
              }
            ],
            "change_log": "",
            "version": "2016.3.17"
          },
          {
            "_id": "56f2a0235bee3e2138000094",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/f22aab9a-0792-41fa-9b0c-c11b7af83d21gregPkg632.zip",
            "contents": "Arc.ByLine - Create an arc from the start and end point of a line. Specify the height of the arc (from 0 to 1) and (if desired) flip the arc across the line., Curve.DividePoints - Get the (start) points along an equally divided curve., Curve.MidPoint - Get the midpoint along the Curve, Curve.StartMidPoint - Get the start point and midpoint along the Curve., Elements.RandomizeParameter - Set an element's instance parameter to a random value between a range specified by the minimum and maximum parameter., FamilyInstance.Percentage - Place familiy instances by point from a list of multiple family types and percentages., FamilyInstance.RandomRotation - Rotates the angle of the family instance a random amount (between 0 and 360)., List.MatchLength - Cycle a list to match the length of the first list., List.RemoveEmpty - Removes empty indices from a list., List.SortByKey - Sort a list (or lists) according to the order specified by the key list., Math.RandomIntegerMin - Creates a list of random integers between a given minimum and maximum value, NurbsSurface.ByNurbsCurves - Creates a NurbsSurface with points generated from an interval along the specified curves., Point.GridTriangle - Create a triangular grid of points over an area from a set of boundary curves., Point.GridTriangleContain - Create a triangular grid of points contained within a set of boundary curves., Point.Random - Creates a random set of points within a set of boundary cuves. Tolerance specifies the minimum distance between points., Point.RandomAmount - Creates the specified amount of random points within a set boundary curves. Tolerance specifies the minimum distance between points., Point.ShiftCoordinates - Shifts the coordinates of the point by the given amount. The default shift is positive (add) but can be switched to negative (via boolean)., Point.XRange - Get all X components and the minimum and maximum X components from a list of Points., Point.XYZByCoordinates - Get the X,Y, and Z components and create a point from those coordinates., Point.YRange - Get all Y components and the minimum and maximum Y components from a list of Points., Point.ZRange - Get all Z components and the minimum and maximum Z components from a list of Points., Points.SortByDistance - Sort a list of points based on their distance from a specified point, Points.SortByXY - Sort list of points based on its X and Y coordinate values. In order to sort correctly, points must be rounded (default value is 3 decimal points)., PointsFromCSV - Imports data points from a text file containing comma separated values., PointsToCSV - Write a list of points into a file using a comma-separated values format., SlabShape.Points - Get the XYZ points of any slab shape Roof or Floor., Topography.ByLines - Create a toposurface from lines. Generates points at a specified interval along the lines., Topography.ColorByElevation - Applies a color range based on the elevation of each triangle face. Elevation is calculated from the center point of each triangle face., Topography.ColorBySlope - Applies a color range based on the slope of the triangle faces. Based on percentage slope. Max slope index is 1 (100%, or 45 degrees)., Topography.Plane.XZ - Creates a row of planes cutting through the Toposurface in the world XZ",
            "engine_metadata": "",
            "engine_version": "0.9.1.3067",
            "created": "2016-03-23T13:54:43.957Z",
            "full_dependency_versions": [ "2016.3.23" ],
            "full_dependency_ids": [
              {
                "_id": "564dc5a3662bf0e90800035b",
                "name": "Landform"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2016.3.23"
          },
          {
            "_id": "570505075bee3e21380000f4",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/8148a985-9384-4d19-9a15-deaecffabf01gregPkg612.zip",
            "contents": "Arc.ByLine - Create an arc from the start and end point of a line. Specify the height of the arc (from 0 to 1) and (if desired) flip the arc across the line., Curve.DividePoints - Get the (start) points along an equally divided curve., Curve.MidPoint - Get the midpoint along the Curve, Curve.StartMidPoint - Get the start point and midpoint along the Curve., Elements.RandomizeParameter - Set an element's instance parameter to a random value between a range specified by the minimum and maximum parameter., FamilyInstance.Percentage - Place familiy instances by point from a list of multiple family types and percentages., FamilyInstance.RandomRotation - Rotates the angle of the family instance a random amount (between 0 and 360)., List.MatchLength - Cycle a list to match the length of the first list., List.RemoveEmpty - Removes empty indices from a list., List.SortByKey - Sort a list (or lists) according to the order specified by the key list., Math.RandomIntegerMin - Creates a list of random integers between a given minimum and maximum value, NurbsSurface.ByNurbsCurves - Creates a NurbsSurface with points generated from an interval along the specified curves., Point.GridTriangle - Create a triangular grid of points over an area from a set of boundary curves., Point.GridTriangleContain - Create a triangular grid of points contained within a set of boundary curves., Point.Random - Creates a random set of points within a set of boundary cuves. Tolerance specifies the minimum distance between points., Point.RandomAmount - Creates the specified amount of random points within a set boundary curves. Tolerance specifies the minimum distance between points., Point.ShiftCoordinates - Shifts the coordinates of the point by the given amount. The default shift is positive (add) but can be switched to negative (via boolean)., Point.XRange - Get all X components and the minimum and maximum X components from a list of Points., Point.XYZ - Get the X, Y, and Z components of a Point, Point.XYZByCoordinates - Get the X,Y, and Z components and create a point from those coordinates., Point.YRange - Get all Y components and the minimum and maximum Y components from a list of Points., Point.ZRange - Get all Z components and the minimum and maximum Z components from a list of Points., Points.SortByDistance - Sort a list of points based on their distance from a specified point, Points.SortByXY - Sort list of points based on its X and Y coordinate values. In order to sort correctly, points must be rounded (default value is 3 decimal points)., PointsFromCSV - Imports data points from a text file containing comma separated values., PointsToCSV - Write a list of points into a file using a comma-separated values format., SlabShape.Points - Get the XYZ points of any slab shape Roof or Floor., Surfaces.TopBasePolysurface - Get the top and bottom polysurfaces from a set of surfaces., Topography.ByLines - Create a toposurface from lines. Generates points at a specified interval along the lines., Topography.ColorByElevation - Applies a color range based on the elevation of each triangle face. Elevation is calculated from the center point of each triangle face., Topography.ColorBySlope - Applies a color range based on the slope of the triangle faces. Based on percentage slope. Max slope index is 1 (100%, or 45 degrees)., Topography.Plane.XZ - Creates a row of planes cutting through the Toposurface in the world XZ",
            "engine_metadata": "",
            "engine_version": "0.9.2.4472",
            "created": "2016-04-06T12:45:59.084Z",
            "full_dependency_versions": [ "2016.4.6" ],
            "full_dependency_ids": [
              {
                "_id": "564dc5a3662bf0e90800035b",
                "name": "Landform"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2016.4.6"
          },
          {
            "_id": "572b353d384037b37e00001a",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-prod/6fc4940a-8fdc-41d6-b60a-eedb9f6e897agregPkg778.zip",
            "contents": "Arc.ByLine - Create an arc from the start and end point of a line. Specify the height of the arc (from 0 to 1) and (if desired) flip the arc across the line., Curve.DivideByLengthEnd - Gets the end remainder after dividing a curve by given length., Curve.DivideByLengthRemainders - Divides curve into curves of given length. Will return remainder at end or split the remainder between the start and end., Curve.DivideByLengthStart - Gets the start remainder after dividing a curve by given length., Curve.DividePoints - Get the (start) points along an equally divided curve., Curve.MidPoint - Get the midpoint along the Curve, Curve.StartMidPoint - Get the start point and midpoint along the Curve., Curves.Reorder - Reorders the list of curves by creating a polycurve and returning the curves of the polycurve., Elements.RandomizeParameter - Set an element's instance parameter to a random value between a range specified by the minimum and maximum parameter., FamilyInstance.Percentage - Place familiy instances by point from a list of multiple family types and percentages., FamilyInstance.RandomRotation - Rotates the angle of the family instance a random amount (between 0 and 360)., List.MatchLength - Cycle a list to match the length of the first list., List.RemoveEmpty - Removes empty indices from a list., List.SortByKey - Sort a list (or lists) according to the order specified by the key list., Math.RandomIntegerMin - Creates a list of random integers between a given minimum and maximum value, NurbsSurface.ByNurbsCurves - Creates a NurbsSurface with points generated from an interval along the specified curves., Point.GridTriangle - Create a triangular grid of points over an area from a set of boundary curves., Point.GridTriangleContain - Create a triangular grid of points contained within a set of boundary curves., Point.Random - Creates a random set of points within a set of boundary cuves. Tolerance specifies the minimum distance between points., Point.RandomAmount - Creates the specified amount of random points within a set boundary curves. Tolerance specifies the minimum distance between points., Point.ShiftCoordinates - Shifts the coordinates of the point by the given amount. The default shift is positive (add) but can be switched to negative (via boolean)., Point.XRange - Get all X components and the minimum and maximum X components from a list of Points., Point.XYZ - Get the X, Y, and Z components of a Point, Point.XYZByCoordinates - Get the X,Y, and Z components and create a point from those coordinates., Point.YRange - Get all Y components and the minimum and maximum Y components from a list of Points., Point.ZRange - Get all Z components and the minimum and maximum Z components from a list of Points., Points.SortByDistance - Sort a list of points based on their distance from a specified point, Points.SortByXY - Sort list of points based on its X and Y coordinate values. In order to sort correctly, points must be rounded (default value is 3 decimal points)., PointsFromCSV - Imports data points from a text file containing comma separated values., PointsToCSV - Write a list of points into a file using a comma-separated values format., SlabShape.Points - Get the XYZ points of any slab shape Roof or Floor., Surfaces.TopBasePolysurface - Get the top and bottom polysurfaces from a set of surfaces., Topography.ByLines - Create a toposurface from lines. Generates points at a specified interval along the lines., Topography.ColorByElevation - Applies a color range based on the elevation of each triangle face. Elevation is calculated from the center point of each triangle face., Topography.ColorBySlope - Applies a color range based on the slope of the triangle faces. Based on percentage slope. Max slope index is 1 (100%, or 45 degrees)., Topography.Plane.XZ - Creates a row of planes cutting through the Toposurface in the world XZ",
            "engine_metadata": "",
            "engine_version": "0.9.2.4472",
            "created": "2016-05-05T11:57:49.932Z",
            "full_dependency_versions": [ "2016.5.5" ],
            "full_dependency_ids": [
              {
                "_id": "564dc5a3662bf0e90800035b",
                "name": "Landform"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2016.5.5"
          },
          {
            "_id": "5732f66dea5c185008000009",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-prod/dd9c9f2e-bc70-45db-97f9-644521a2faffgregPkg353.zip",
            "contents": "Arc.ByLine - Create an arc from the start and end point of a line. Specify the height of the arc (from 0 to 1) and (if desired) flip the arc across the line., Curve.DivideByLengthEnd - Gets the end remainder after dividing a curve by given length., Curve.DivideByLengthRemainders - Divides curve into curves of given length. Will return remainder at end or split the remainder between the start and end., Curve.DivideByLengthStart - Gets the start remainder after dividing a curve by given length., Curve.DividePoints - Get the (start) points along an equally divided curve., Curve.MidPoint - Get the midpoint along the Curve, Curve.StartMidPoint - Get the start point and midpoint along the Curve., Curves.Reorder - Reorders the list of curves by creating a polycurve and returning the curves of the polycurve., Element.TopBasePolysurface - Get the top and bottom polysurfaces from an element., Elements.RandomizeParameter - Set an element's instance parameter to a random value between a range specified by the minimum and maximum parameter., FamilyInstance.Percentage - Place familiy instances by point from a list of multiple family types and percentages., FamilyInstance.RandomRotation - Rotates the angle of the family instance a random amount (between 0 and 360)., List.GetTrueFalseAtIndex - Using a list of booleans, get all corresponding true and false items from the specified list., List.MatchLength - Cycle a list to match the length of the first list., List.RemoveEmpty - Removes empty indices from a list., List.SortByKey - Sort a list (or lists) according to the order specified by the key list., Math.RandomIntegerMin - Creates a list of random integers between a given minimum and maximum value, NurbsSurface.ByNurbsCurves - Creates a NurbsSurface with points generated from an interval along the specified curves., Point.GridTriangle - Create a triangular grid of points over an area from a set of boundary curves., Point.GridTriangleContain - Create a triangular grid of points contained within a set of boundary curves., Point.Random - Creates a random set of points within a set of boundary cuves. Tolerance specifies the minimum distance between points., Point.RandomAmount - Creates the specified amount of random points within a set boundary curves. Tolerance specifies the minimum distance between points., Point.ShiftCoordinates - Shifts the coordinates of the point by the given amount. The default shift is positive (add) but can be switched to negative (via boolean)., Point.XRange - Get all X components and the minimum and maximum X components from a list of Points., Point.XYZ - Get the X, Y, and Z components of a Point, Point.XYZByCoordinates - Get the X,Y, and Z components and create a point from those coordinates., Point.YRange - Get all Y components and the minimum and maximum Y components from a list of Points., Point.ZRange - Get all Z components and the minimum and maximum Z components from a list of Points., Points.SortByDistance - Sort a list of points based on their distance from a specified point, Points.SortByXY - Sort list of points based on its X and Y coordinate values. In order to sort correctly, points must be rounded (default value is 3 decimal points)., PointsFromCSV - Imports data points from a text file containing comma separated values., PointsToCSV - Write a list of points into a file using a comma-separated values format., SlabShape.Points - Get the XYZ points of any slab shape Roof or Floor., Surfaces.TopBasePolysurface - Get the top and bottom polysurfaces from a set of surfaces., Topography.ByLines - Create a toposurface from lines. Generates points at a specified interval along the lines., Topography.ColorByElevation - Applies a color range based on the elevation of each triangle face. Elevation is calculated from the center point of each triangle face., Topography.ColorBySlope - Applies a color range based on the slope of the triangle faces. Based on percentage slope. Max slope index is 1 (100%, or 45 degrees)., Topography.Plane.XZ - Creates a row of planes cutting through the Toposurface in the world XZ",
            "engine_metadata": "",
            "engine_version": "0.9.2.4472",
            "created": "2016-05-11T09:07:57.698Z",
            "full_dependency_versions": [ "2016.5.11" ],
            "full_dependency_ids": [
              {
                "_id": "564dc5a3662bf0e90800035b",
                "name": "Landform"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2016.5.11"
          },
          {
            "_id": "573c67eed629c6fb27000003",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-prod/ec9850c7-13df-4bd5-97dd-331f47ecb1f6gregPkg301.zip",
            "contents": "Arc.ByLine - Create an arc from the start and end point of a line. Specify the height of the arc (from 0 to 1) and (if desired) flip the arc across the line., Curve.DivideByLengthEnd - Gets the end remainder after dividing a curve by given length., Curve.DivideByLengthRemainders - Divides curve into curves of given length. Will return remainder at end or split the remainder between the start and end., Curve.DivideByLengthStart - Gets the start remainder after dividing a curve by given length., Curve.DividePoints - Get the (start) points along an equally divided curve., Curve.MidPoint - Get the midpoint along the Curve, Curve.StartMidPoint - Get the start point and midpoint along the Curve., Curves.Reorder - Reorders the list of curves by creating a polycurve and returning the curves of the polycurve., Element.TopBasePolysurface - Get the top and bottom polysurfaces from an element., Elements.RandomizeParameter - Set an element's instance parameter to a random value between a range specified by the minimum and maximum parameter., FamilyInstance.Percentage - Place familiy instances by point from a list of multiple family types and percentages., FamilyInstance.RandomRotation - Rotates the angle of the family instance a random amount (between 0 and 360)., List.GetTrueFalseAtIndex - Using a list of booleans, get all corresponding true and false items from the specified list., List.MatchLength - Cycle a list to match the length of the first list., List.RemoveEmpty - Removes empty indices from a list., List.SortByKey - Sort a list (or lists) according to the order specified by the key list., Math.RandomIntegerMin - Creates a list of random integers between a given minimum and maximum value, NurbsSurface.ByNurbsCurves - Creates a NurbsSurface with points generated from an interval along the specified curves., Point.GridTriangle - Create a triangular grid of points over an area from a set of boundary curves., Point.GridTriangleContain - Create a triangular grid of points contained within a set of boundary curves., Point.Random - Creates a random set of points within a set of boundary cuves. Tolerance specifies the minimum distance between points., Point.RandomAmount - Creates the specified amount of random points within a set boundary curves. Tolerance specifies the minimum distance between points., Point.ShiftCoordinates - Shifts the coordinates of the point by the given amount. The default shift is positive (add) but can be switched to negative (via boolean)., Point.XRange - Get all X components and the minimum and maximum X components from a list of Points., Point.XYZ - Get the X, Y, and Z components of a Point, Point.XYZByCoordinates - Get the X,Y, and Z components and create a point from those coordinates., Point.YRange - Get all Y components and the minimum and maximum Y components from a list of Points., Point.ZRange - Get all Z components and the minimum and maximum Z components from a list of Points., Points.SortByDistance - Sort a list of points based on their distance from a specified point, Points.SortByXY - Sort list of points based on its X and Y coordinate values. In order to sort correctly, points must be rounded (default value is 3 decimal points)., PointsFromCSV - Imports data points from a text file containing comma separated values., PointsToCSV - Write a list of points into a file using a comma-separated values format., SlabShape.Points - Get the XYZ points of any slab shape Roof or Floor., Surfaces.TopBasePolysurface - Get the top and bottom polysurfaces from a set of surfaces., Topography.ByLines - Create a toposurface from lines. Generates points at a specified interval along the lines., Topography.ColorByElevation - Applies a color range based on the elevation of each triangle face. Elevation is calculated from the center point of each triangle face., Topography.ColorBySlope - Applies a color range based on the slope of the triangle faces. Based on percentage slope. Max slope index is 1 (100%, or 45 degrees)., Topography.Plane.XZ - Creates a row of planes cutting through the Toposurface in the world XZ, SlabShape.AdjacentPoints - Get the adjacent slab shape points between two adjacent Floors.",
            "engine_metadata": "",
            "engine_version": "0.9.2.4472",
            "created": "2016-05-18T13:02:38.939Z",
            "full_dependency_versions": [ "2016.5.18", "0.1.0" ],
            "full_dependency_ids": [
              {
                "_id": "564dc5a3662bf0e90800035b",
                "name": "Landform"
              },
              {
                "_id": "5297a3ff9de41c8235000018",
                "name": "If Equal Return Index"
              }
            ],
            "direct_dependency_versions": [ "0.1.0" ],
            "direct_dependency_ids": [
              {
                "_id": "5297a3ff9de41c8235000018",
                "name": "If Equal Return Index"
              }
            ],
            "change_log": "",
            "version": "2016.5.18"
          },
          {
            "_id": "573c6c8fd629c6fb27000004",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-prod/7a8d0a41-150d-4206-bfa2-676f440dbc9egregPkg581.zip",
            "contents": "Arc.ByLine - Create an arc from the start and end point of a line. Specify the height of the arc (from 0 to 1) and (if desired) flip the arc across the line., Curve.DivideByLengthEnd - Gets the end remainder after dividing a curve by given length., Curve.DivideByLengthRemainders - Divides curve into curves of given length. Will return remainder at end or split the remainder between the start and end., Curve.DivideByLengthStart - Gets the start remainder after dividing a curve by given length., Curve.DividePoints - Get the (start) points along an equally divided curve., Curve.MidPoint - Get the midpoint along the Curve, Curve.StartMidPoint - Get the start point and midpoint along the Curve., Curves.Reorder - Reorders the list of curves by creating a polycurve and returning the curves of the polycurve., Element.TopBasePolysurface - Get the top and bottom polysurfaces from an element., Elements.RandomizeParameter - Set an element's instance parameter to a random value between a range specified by the minimum and maximum parameter., FamilyInstance.Percentage - Place familiy instances by point from a list of multiple family types and percentages., FamilyInstance.RandomRotation - Rotates the angle of the family instance a random amount (between 0 and 360)., IndexOf.Equals - Returns the indices of items in list B that are equal to items in list A., List.GetTrueFalseAtIndex - Using a list of booleans, get all corresponding true and false items from the specified list., List.MatchLength - Cycle a list to match the length of the first list., List.RemoveEmpty - Removes empty indices from a list., List.SortByKey - Sort a list (or lists) according to the order specified by the key list., Math.RandomIntegerMin - Creates a list of random integers between a given minimum and maximum value, NurbsSurface.ByNurbsCurves - Creates a NurbsSurface with points generated from an interval along the specified curves., Point.GridTriangle - Create a triangular grid of points over an area from a set of boundary curves., Point.GridTriangleContain - Create a triangular grid of points contained within a set of boundary curves., Point.Random - Creates a random set of points within a set of boundary cuves. Tolerance specifies the minimum distance between points., Point.RandomAmount - Creates the specified amount of random points within a set boundary curves. Tolerance specifies the minimum distance between points., Point.ShiftCoordinates - Shifts the coordinates of the point by the given amount. The default shift is positive (add) but can be switched to negative (via boolean)., Point.XRange - Get all X components and the minimum and maximum X components from a list of Points., Point.XYZ - Get the X, Y, and Z components of a Point, Point.XYZByCoordinates - Get the X,Y, and Z components and create a point from those coordinates., Point.YRange - Get all Y components and the minimum and maximum Y components from a list of Points., Point.ZRange - Get all Z components and the minimum and maximum Z components from a list of Points., Points.SortByDistance - Sort a list of points based on their distance from a specified point, Points.SortByXY - Sort list of points based on its X and Y coordinate values. In order to sort correctly, points must be rounded (default value is 3 decimal points)., PointsFromCSV - Imports data points from a text file containing comma separated values., PointsToCSV - Write a list of points into a file using a comma-separated values format., SlabShape.AdjacentPoints - Get the adjacent slab shape points between two adjacent Floors., SlabShape.Points - Get the XYZ points of any slab shape Roof or Floor., Surfaces.TopBasePolysurface - Get the top and bottom polysurfaces from a set of surfaces., Topography.ByLines - Create a toposurface from lines. Generates points at a specified interval along the lines., Topography.ColorByElevation - Applies a color range based on the elevation of each triangle face. Elevation is calculated from the center point of each triangle face., Topography.ColorBySlope - Applies a color range based on the slope of the triangle faces. Based on percentage slope. Max slope index is 1 (100%, or 45 degrees)., Topography.Plane.XZ - Creates a row of planes cutting through the Toposurface in the world XZ",
            "engine_metadata": "",
            "engine_version": "0.9.2.4472",
            "created": "2016-05-18T13:22:23.076Z",
            "full_dependency_versions": [ "2016.5.19" ],
            "full_dependency_ids": [
              {
                "_id": "564dc5a3662bf0e90800035b",
                "name": "Landform"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "2016.5.19"
          },
          {
            "_id": "57444abfc1a604fb36000028",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-prod/3e5f172a-2179-498f-b6bc-722b5dfd120dgregPkg896.zip",
            "contents": "SlabShape.AdjacentPoints - Get the adjacent slab shape points between two adjacent Floors., Arc.ByLine - Create an arc from the start and end point of a line. Specify the height of the arc (from 0 to 1) and (if desired) flip the arc across the line., Curve.DivideByLengthEnd - Gets the end remainder after dividing a curve by given length., Curve.DivideByLengthRemainders - Divides curve into curves of given length. Will return remainder at end or split the remainder between the start and end., Curve.DivideByLengthStart - Gets the start remainder after dividing a curve by given length., Curve.DividePoints - Get the (start) points along an equally divided curve., Curve.MidPoint - Get the midpoint along the Curve, Curve.StartMidPoint - Get the start point and midpoint along the Curve., Curves.Reorder - Reorders the list of curves by creating a polycurve and returning the curves of the polycurve., Element.TopBasePolysurface - Get the top and bottom polysurfaces from an element., Elements.RandomizeParameter - Set an element's instance parameter to a random value between a range specified by the minimum and maximum parameter., FamilyInstance.Percentage - Place familiy instances by point from a list of multiple family types and percentages., FamilyInstance.RandomRotation - Rotates the angle of the family instance a random amount (between 0 and 360)., IndexOf.Equals - Returns the indices of items in list B that are equal to items in list A., List.GetTrueFalseAtIndex - Using a list of booleans, get all corresponding true and false items from the specified list., List.MatchLength - Cycle a list to match the length of the first list., List.RemoveEmpty - Removes empty indices from a list., List.SortByKey - Sort a list (or lists) according to the order specified by the key list., Math.RandomIntegerMin - Creates a list of random integers between a given minimum and maximum value, NurbsSurface.ByNurbsCurves - Creates a NurbsSurface with points generated from an interval along the specified curves., Point.GridTriangle - Create a triangular grid of points over an area from a set of boundary curves., Point.GridTriangleContain - Create a triangular grid of points contained within a set of boundary curves., Point.Random - Creates a random set of points within a set of boundary cuves. Tolerance specifies the minimum distance between points., Point.RandomAmount - Creates the specified amount of random points within a set boundary curves. Tolerance specifies the minimum distance between points., Point.ShiftCoordinates - Shifts the coordinates of the point by the given amount. The default shift is positive (add) but can be switched to negative (via boolean)., Point.XRange - Get all X components and the minimum and maximum X components from a list of Points., Point.XYZ - Get the X, Y, and Z components of a Point, Point.XYZByCoordinates - Get the X,Y, and Z components and create a point from those coordinates., Point.YRange - Get all Y components and the minimum and maximum Y components from a list of Points., Point.ZRange - Get all Z components and the minimum and maximum Z components from a list of Points., Points.SortByDistance - Sort a list of points based on their distance from a specified point, Points.SortByXY - Sort list of points based on its X and Y coordinate values. In order to sort correctly, points must be rounded (default value is 3 decimal points)., PointsFromCSV - Imports data points from a text file containing comma separated values., PointsToCSV - Write a list of points into a file using a comma-separated values format., SlabShape.AdjacentPoints - Get the adjacent slab shape points between two adjacent Floors., SlabShape.MatchPoints - Match the adjacent slab shape points from Floor 1 to Floor 2. (requires Clockwork package), SlabShape.Points - Get the XYZ points of any slab shape Roof or Floor., Surfaces.TopBasePolysurface - Get the top and bottom polysurfaces from a set of surfaces., Topography.ByLines - Create a toposurface from lines. Generates points at a specified interval along the lines., Topography.ColorByElevation - Applies a color range based on the elevation of each triangle face. Elevation is calculated from the center point of each triangle face., Topography.ColorBySlope - Applies a color range based on the slope of the triangle faces. Based on percentage slope. Max slope index is 1 (100%, or 45 degrees)., Topography.Plane.XZ - Creates a row of planes cutting through the Toposurface in the world XZ",
            "engine_metadata": "",
            "engine_version": "0.9.2.4472",
            "created": "2016-05-24T12:36:15.877Z",
            "full_dependency_versions": [ "2016.5.24", "0.90.7" ],
            "full_dependency_ids": [
              {
                "_id": "564dc5a3662bf0e90800035b",
                "name": "Landform"
              },
              {
                "_id": "562f800e662bf0e9080002ab",
                "name": "Clockwork for Dynamo 0.9.x"
              }
            ],
            "direct_dependency_versions": [ "0.90.7" ],
            "direct_dependency_ids": [
              {
                "_id": "562f800e662bf0e9080002ab",
                "name": "Clockwork for Dynamo 0.9.x"
              }
            ],
            "change_log": "",
            "version": "2016.5.24"
          },
          {
            "_id": "57ff1941d3d589541a00007d",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-prod/0bc53a8d-be73-4d9b-9caa-2bfc0c5b52a9gregPkg507.zip",
            "contents": "Arc.ByLine - Create an arc from the start and end point of a line. Specify the height of the arc (from 0 to 1) and (if desired) flip the arc across the line., Curve.DivideByLengthRemainders - Divides curve into curves of given length. Will return remainder at end or split the remainder between the start and end., Curve.DividePoints - Get the (start) points along an equally divided curve., Curve.MidPoint - Get the midpoint along the Curve, Curve.StartMidPoint - Get the start point and midpoint along the Curve., Curves.Reorder - Reorders the list of curves by creating a polycurve and returning the curves of the polycurve., Element.TopBasePolysurface - Get the top and bottom polysurfaces from an element., Elements.RandomizeParameter - Set an element's instance parameter to a random value between a range specified by the minimum and maximum parameter., FamilyInstance.Percentage - Place familiy instances by point from a list of multiple family types and percentages., FamilyInstance.RandomRotation - Rotates the angle of the family instance a random amount (between 0 and 360)., IndexOf.Equals - Returns the indices of items in list B that are equal to items in list A., List.MatchLength - Cycle a list to match the length of the first list., List.RemoveEmpty - Removes empty indices from a list., List.SortByKey - Sort a list (or lists) according to the order specified by the key list., Math.RandomIntegerMin - Creates a list of random integers between a given minimum and maximum value, NurbsSurface.ByNurbsCurves - Creates a NurbsSurface with points generated from an interval along the specified curves., Point.GridTriangle - Create a triangular grid of points over an area from a set of boundary curves., Point.GridTriangleContain - Create a triangular grid of points contained within a set of boundary curves., Point.Random - Creates a random set of points within a set of boundary cuves. Tolerance specifies the minimum distance between points., Point.RandomAmount - Creates the specified amount of random points within a set boundary curves. Tolerance specifies the minimum distance between points., Point.ShiftCoordinates - Shifts the coordinates of the point by the given amount. The default shift is positive (add) but can be switched to negative (via boolean)., Point.XRange - Get all X components and the minimum and maximum X components from a list of Points., Point.XYZ - Get the X, Y, and Z components of a Point, Point.XYZByCoordinates - Get the X,Y, and Z components and create a point from those coordinates., Point.YRange - Get all Y components and the minimum and maximum Y components from a list of Points., Point.ZRange - Get all Z components and the minimum and maximum Z components from a list of Points., Points.SortByDistance - Sort a list of points based on their distance from a specified point, Points.SortByXY - Sort list of points based on its X and Y coordinate values. In order to sort correctly, points must be rounded (default value is 3 decimal points)., PointsFromCSV - Imports data points from a text file containing comma separated values., PointsToCSV - Write a list of points into a file using a comma-separated values format., SlabShape.AdjacentPoints - Get the adjacent slab shape points between two adjacent Floors., SlabShape.MatchPoints - Match the adjacent slab shape points from Floor 1 to Floor 2. (requires Clockwork package), SlabShape.Points - Get the XYZ points of any slab shape Roof or Floor., Surfaces.TopBasePolysurface - Get the top and bottom polysurfaces from a set of surfaces., Topography.ByLines - Create a toposurface from lines. Generates points at a specified interval along the lines., Topography.ColorByElevation - Applies a color range based on the elevation of each triangle face. Elevation is calculated from the center point of each triangle face., Topography.ColorBySlope - Applies a color range based on the slope of the triangle faces. Based on percentage slope. Max slope index is 1 (100%, or 45 degrees)., Topography.Plane.XZ - Creates a row of planes cutting through the Toposurface in the world XZ, SlabShape.AddAdjacentPoints - Add and match adjacent slab shape points (Floor or Roof) from Slab 1 to Slab 2. (requires Spring Nodes and Clockwork packages), Points.SameXY - Find points that share the same XY (or overlap in plan). Used for creating Topography., Curve.DivideEqually - Divides a curve into a given number of equal length curves.",
            "engine_metadata": "",
            "engine_version": "1.1.0.2094",
            "created": "2016-10-13T05:18:57.340Z",
            "full_dependency_versions": [ "2016.10.13", "1.0.2", "100.0.1" ],
            "full_dependency_ids": [
              {
                "_id": "564dc5a3662bf0e90800035b",
                "name": "Landform"
              },
              {
                "_id": "57ddac02882d868b42000012",
                "name": "Clockwork for Dynamo 1.x"
              },
              {
                "_id": "56077cf3662bf0e9080001ea",
                "name": "spring nodes"
              }
            ],
            "direct_dependency_versions": [ "1.0.2", "100.0.1" ],
            "direct_dependency_ids": [
              {
                "_id": "57ddac02882d868b42000012",
                "name": "Clockwork for Dynamo 1.x"
              },
              {
                "_id": "56077cf3662bf0e9080001ea",
                "name": "spring nodes"
              }
            ],
            "change_log": "",
            "version": "2016.10.13"
          }
        ],
        "latest_version_update": "2016-10-13T05:18:57.340Z",
        "num_versions": 15,
        "comments": [ ],
        "num_comments": 0,
        "latest_comment": "1970-01-01T00:00:00.000Z",
        "votes": 5,
        "downloads": 2361,
        "repository_url": "",
        "site_url": "landarchbim.com",
        "banned": false,
        "deprecated": false,
        "group": "",
        "engine": "dynamo",
        "license": "",
        "used_by": [
          {
            "_id": "555e8bfea8367b98610000b8",
            "name": "Bakery"
          }
        ],
        "num_dependents": 1,
        "description": "A growing set of nodes created primarily to assist with site and landscape modeling and analysis in Revit. Developed by the author of landarchbim.com. @landarchBIM",
        "maintainers": [
          {
            "_id": "55fb1f20662bf0e9080001a1",
            "username": "laurenkschmidt"
          }
        ],
        "keywords": [ "landscape", "architecture", "site", "land", "topo", "topography", "points" ],
        "created": "2015-11-19T12:50:43.977Z"
      },
      {
        
        "_id": "54740c03b77c84600c000040",
        "__v": 24,
        "name": "Solar Analysis for Dynamo",
        "white_list": true,
        "versions": [
          {
            "_id": "54740c03b77c84600c000041",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/8d090643-ae87-4cfc-a79b-bacff63b1b79gregPkg399.zip",
            "contents": "",
            "engine_metadata": "",
            "engine_version": "0.7.5.3267",
            "created": "2014-11-25T04:56:35.190Z",
            "full_dependency_versions": [ "0.1.0" ],
            "full_dependency_ids": [
              {
                "_id": "54740c03b77c84600c000040",
                "name": "Solar Analysis for Dynamo"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "0.1.0"
          },
          {
            "_id": "54767801b77c84600c000053",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/fda13781-d35b-4046-85ff-d1851621f688gregPkg876.zip",
            "contents": "",
            "engine_metadata": "",
            "engine_version": "0.7.5.3296",
            "created": "2014-11-27T01:01:53.123Z",
            "full_dependency_versions": [ "0.1.1" ],
            "full_dependency_ids": [
              {
                "_id": "54740c03b77c84600c000040",
                "name": "Solar Analysis for Dynamo"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "0.1.1"
          },
          {
            "_id": "5479faefb77c84600c00005a",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/59e3ea9f-6b30-42df-b0d0-156f66abb395gregPkg787.zip",
            "contents": "",
            "engine_metadata": "",
            "engine_version": "0.7.4.3245",
            "created": "2014-11-29T16:57:19.570Z",
            "full_dependency_versions": [ "0.1.2" ],
            "full_dependency_ids": [
              {
                "_id": "54740c03b77c84600c000040",
                "name": "Solar Analysis for Dynamo"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "0.1.2"
          },
          {
            "_id": "555ac039a8367b98610000ac",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/2d0986f7-039d-43c0-b4b3-91acfa0a12ecgregPkg908.zip",
            "contents": "",
            "engine_metadata": "",
            "engine_version": "0.8.0.855",
            "created": "2015-05-19T04:46:49.871Z",
            "full_dependency_versions": [ "0.8.0" ],
            "full_dependency_ids": [
              {
                "_id": "54740c03b77c84600c000040",
                "name": "Solar Analysis for Dynamo"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "0.8.0"
          },
          {
            "_id": "556e25b7004829a606000005",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/3be30342-44ee-4316-a6bb-d74608a76df1gregPkg416.zip",
            "contents": "",
            "engine_metadata": "",
            "engine_version": "0.8.0.1233",
            "created": "2015-06-02T21:52:55.268Z",
            "full_dependency_versions": [ "0.8.1" ],
            "full_dependency_ids": [
              {
                "_id": "54740c03b77c84600c000040",
                "name": "Solar Analysis for Dynamo"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "0.8.1"
          },
          {
            "_id": "55fdd058662bf0e9080001b3",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/62b72fa8-df3d-41ce-b42c-c2bd15741622gregPkg678.zip",
            "contents": "",
            "engine_metadata": "",
            "engine_version": "0.8.2.2607",
            "created": "2015-09-19T21:15:04.929Z",
            "full_dependency_versions": [ "0.8.2" ],
            "full_dependency_ids": [
              {
                "_id": "54740c03b77c84600c000040",
                "name": "Solar Analysis for Dynamo"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "0.8.2"
          },
          {
            "_id": "56abfe74c3e9ee4a0800006d",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/35b4d44b-f7c9-45f1-8e55-f2a95a1eab63gregPkg706.zip",
            "contents": "",
            "engine_metadata": "",
            "engine_version": "0.9.1.3067",
            "created": "2016-01-30T00:06:12.595Z",
            "full_dependency_versions": [ "0.9.0" ],
            "full_dependency_ids": [
              {
                "_id": "54740c03b77c84600c000040",
                "name": "Solar Analysis for Dynamo"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "0.9.0"
          },
          {
            "_id": "571ef33c305bec4d3c000031",
            "contains_binaries": false,
            "node_libraries": [ ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-dev/c3099c0d-44a6-47c8-9c78-7f76054cb6e9gregPkg59.zip",
            "contents": "",
            "engine_metadata": "",
            "engine_version": "0.9.2.4811",
            "created": "2016-04-26T04:49:00.442Z",
            "full_dependency_versions": [ "0.9.2" ],
            "full_dependency_ids": [
              {
                "_id": "54740c03b77c84600c000040",
                "name": "Solar Analysis for Dynamo"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "0.9.2"
          },
          {
            "_id": "5880bb70ca6a5edb65000057",
            "contains_binaries": true,
            "node_libraries": [ "DynamoSolarAnalysis, Version=0.8.2.0, Culture=neutral, PublicKeyToken=null" ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-prod/9b86afa2-af9c-47d5-8bd3-5d97c1d56dc7gregPkg16.zip",
            "contents": "",
            "engine_metadata": "",
            "engine_version": "1.2.2.161",
            "created": "2017-01-19T13:13:20.839Z",
            "full_dependency_versions": [ "1.2.1" ],
            "full_dependency_ids": [
              {
                "_id": "54740c03b77c84600c000040",
                "name": "Solar Analysis for Dynamo"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "1.2.1"
          },
          {
            "_id": "58d41a13f4db78ec01000169",
            "contains_binaries": true,
            "node_libraries": [ "DynamoSolarAnalysis, Version=0.8.2.0, Culture=neutral, PublicKeyToken=null" ],
            "url_with_deps": "",
            "url": "https://s3.amazonaws.com/greg-pkgs-prod/a4a06507-a4f3-44be-ae12-8b2f35b46680gregPkg736.zip",
            "contents": "",
            "engine_metadata": "",
            "engine_version": "1.1.0.2093",
            "created": "2017-03-23T18:55:15.180Z",
            "full_dependency_versions": [ "1.2.2" ],
            "full_dependency_ids": [
              {
                "_id": "54740c03b77c84600c000040",
                "name": "Solar Analysis for Dynamo"
              }
            ],
            "direct_dependency_versions": [ ],
            "direct_dependency_ids": [ ],
            "change_log": "",
            "version": "1.2.2"
          }
        ],
        "latest_version_update": "2017-03-23T18:55:15.180Z",
        "num_versions": 10,
        "comments": [ ],
        "num_comments": 0,
        "latest_comment": "1970-01-01T00:00:00.000Z",
        "votes": 0,
        "downloads": 1984,
        "repository_url": "",
        "site_url": "http://www.autodesk.com",
        "banned": false,
        "deprecated": false,
        "group": "",
        "engine": "dynamo",
        "license": "Copyright ©, 2015. Autodesk, Inc.",
        "used_by": [ ],
        "num_dependents": 0,
        "description": "A library for conducting solar insolation analysis in Dynamo. This version of Solar Analysis for Dynamo will timeout on January 1, 2016.",
        "maintainers": [
          {
            "_id": "556e21d1888bb8ca03000008",
            "username": "DynamoTeam"
          }
        ],
        "keywords": [ "solar", "analysis", "insolation" ],
        "created": "2014-11-25T04:56:35.190Z"
      }

    ]
}