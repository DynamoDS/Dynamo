{"success":true,"message":"Found package","content":{"_id":"56077cf3662bf0e9080001ea","__v":77,"name":"spring nodes","white_list":false,"versions":[{"_id":"56077cf3662bf0e9080001eb","contains_binaries":false,"node_libraries":[],"url_with_deps":"","url":"https://s3.amazonaws.com/greg-pkgs-dev/cb934edf-0cd2-494c-899b-112c1eb9d179gregPkg893.zip","contents":"Dictionary.ByKeysValues - Dictionaries are an incredibly powerful tool for making associative sets between two equal length lists. The fitst list must be of unique strings (or numbers) and will be the key and the second list will be the matching values (it can be made up of geometry, elements, even other lists)\r\nThe search keys list will provide the coresponding value to the input key., List.DropLast - Removes the last value of the list., List.GetEven - Gets even indices from the list., Filter.ByClassName - Filters a list of objects by the object's class name. Note that Dynamo elements belong to different classes than their Revit counterparts. Use the Object.Class node to check an object's class., List.GetOdd - Gets the odd indices from the list., Math.AlmostEqual - Checks if a number is almost equal to a value with a specified tollerance., Number.ToString - Converts the input number(s) to string. Can process lists., List.DropFirstLast - Removes the first and last items from the list, File.Size - Checks the file size. Provide a file path as a string., Fn.ElementsOfCategory - Same as the built in \"All Elements of Category\" but can act as a function object., NullIndexOf - Similar to the bult-in node but provides a null value instead of -1 of failure. Part of the SmartCopyMonitor workflow., NullReorder - Simiar to the built-in function with the difference that it can handle null indices. Part of the SmartCopyMonitor workflow., NullSetDifference - Similar to the built in node, with a built-in safety for null values. Part of the SmartCopyMonitor workflow., Object.Class - Gets the input object's class name. Can process lists., List.ShiftIndices+ - The built in node fails if the shift number is greater than the lenght of the list. This node acts as a work-around., Ln2Str - Serilize a geometry line to a string for use in Revit parameters, Pt2Str - Serilize a geometry point to a string for use in Revit parameters, Str2Ln - De-serilize a Revit parameter string into a geometric line., Str2Pt - De-serilize a Revit parameter string into a geometric point., Star.ByCenterRadiusRays - Fun little node to create star shapes., Input.Wait - Waits for all inputs to be completed before continuing the execution process.Part of the SmartCopyMon workflow., Collector.ElementsInView - Selects all elements visible in the input view., Collector.FamilyInstances - Collects placed family instance elements from the document that match the name. Partially mathing elements are collected as well. If no matches are found, a list of all isntance names will be output., Collector.FamilyTypes - Collects non-system family types that fully match or partially match the provided names. If no matches are found, a list of all type names will be output., Collector.Revisions - Collects all revisions from a specific date., Collector.Sheets - Search for sheets by either their name or their number. Use a false boolean switch to search by number., Geometry.SplitRecursively - Splits a surface or a solid recursively, using the resulting reduced geometry for every next split., List.Randomise&Divide - Shiffles the input list and divides it into sub-lists based on ratios(1/4 + 1/2 + 1/4 will give you three lists split accordingly) The smalest ratio will always be 1 / the list length and the largest ratio will be 1. A seed input can shuffle the list further., NullAllIndicesOf - list all of the indices of a list that match the specified value. Capable of handling null values, part of the SmartCopyMonitor workflow., Collector.Views - Search for views based on naming. You can choose to either include or exclude schedules. Use the sheet collector for sheets., Doc.DeleteElements - Attempts to delete the input revit elements and returns the number of successfully deleted elements. Carefully observe the deleted elements count. It may be greater than the input list because hosted elements or tags will be deleted as well., DirectShape.ByGeometry - Attempts to create a DirectShape element inside the Revit document. It is based on an alternative process that uses a SAT inport and can produce smooth surfaces., HostedInstanceByPoints - Creates hosted family instances(doors/windows) at the specified points. You can feed either a single family type or a unique type for each instance., Form.ByGeometry - Attempts to convert the input geometry to a Revit Form object. Warning - use method this only in the family environment. Can convert complicated solids or surfaces directly into forms., Collector.FloorTypes - Collects Floor types by name., FamilyType.Duplicate - Create duplicate family types with the specified name. If the type exists, it is called., FloorType.Duplicate - Attemts to create duplicate floor types. If the floor type exists, it is appended to the end. Sets only the structural width of the floor. The width must be in feet., Floor-WallType.SetMaterial - Sets a new material to the structural core of the provided floor and wall types., Wall.WallType - Queries the wall type of the input wall. Works for types from linked documents as well., WallType.Duplicate - Attemts to create duplicate wall types. If the wall type exists, it is appended to the end. Sets only the structural width of the wall. The width must be in feet., NullSetParameter - Similar to the built-in function but with the ability to handle null values. Part of the SmartCopyMon workflow., Collector.WallTypes - Collects wall types by name., FloorOpening.ByCurves - Create hosted floor opeinngs through the input floors. The second input is a list of sub-lists of the boundary curves., Shaft.ByCurves - Creates a shaft opening. The top level MUST be higher than the base level for a successful execution. You can either provide one base and top level for all shafts or have unique levels for each shaft instance., NullGetParameter - Similar to the built in node.Capable of handling null values, part of the SmartCopyMonitor workflow., Beams.FixExtents - Detects all beams from the input list with broken extents(actual length - cut length <  margin) and attemts to correct them., Lines.Group&FixCorners - Groups unconnected lines into sub-lists by margin(the maximum distance between endpoints) and attempts to create clean corner connections between them. Built on top of the Group curves node found in archi-lab.net., Topography.ToPolySurface - Optimized algorithm for converting topographies into polysurfaces. Tested with topographies containing up to 40 000 points. \r\nWarning conversions of such mangitudes consume a lot of resources and are sub-optimal. Ensure that you have plenty at least 8GB of ram and patience before attempting such a conversion, otherwise your Dynamo and Revit instances may crash., Element.SetLocation - Attempts to modify the location of the input element. This can effectively add as a move comand in Revit. Works for both line based and point based elements., Filter.ByCategoryName - Filters the input elements by their category name. You can input multiple category names., SelectInRevit - Selects the input elements in Revit. Works with Revit 2016., Collector.CurrentSelection - Gets the currently selected elements. Connect a boolean switch to refresh the selection., Active View - Selects the current document's active view. Supports more view types, Sheet.Views+ - Extracts all views placed on the input sheet(s).  Will be depreciated once the bult in node works with all plan types., ViewSet.ByViewsName - Creates a set of views(or sheets) for printing. If the set exists, set Overwrite to true to replace it., Collector.LinkedInstanceElements - Extract elements by category from the selected linked instances. The transform vector can be used to get the exact location of the elements in the local file","engine_metadata":"","engine_version":"0.8.2.2392","created":"2015-09-27T05:21:55.183Z","full_dependency_versions":["0.1.0"],"full_dependency_ids":[{"_id":"56077cf3662bf0e9080001ea","name":"spring nodes"}],"direct_dependency_versions":[],"direct_dependency_ids":[],"change_log":"","version":"0.1.0"},{"_id":"5607bd4c662bf0e9080001ec","contains_binaries":false,"node_libraries":[],"url_with_deps":"","url":"https://s3.amazonaws.com/greg-pkgs-dev/a9770359-7abe-4165-81d9-69a874e8871fgregPkg293.zip","contents":"Active View - Selects the current document's active view. Supports more view types, Beams.FixExtents - Detects all beams from the input list with broken extents(actual length - cut length <  margin) and attemts to correct them., Collector.CurrentSelection - Gets the currently selected elements. Connect a boolean switch to refresh the selection. Compatible with Revit 2016, Collector.ElementsInView - Selects all elements visible in the input view., Collector.FamilyInstances - Collects placed family instance elements from the document that match the name. Partially mathing elements are collected as well. If no matches are found, a list of all isntance names will be output., Collector.FamilyTypes - Collects non-system family types that fully match or partially match the provided names. If no matches are found, a list of all type names will be output., Collector.FloorTypes - Collects Floor types by name., Collector.LinkedInstanceElements - Extract elements by category from the selected linked instances. The transform vector can be used to get the exact location of the elements in the local file, Collector.Revisions - Collects all revisions from a specific date., Collector.Sheets - Search for sheets by either their name or their number. Use a false boolean switch to search by number., Collector.Views - Search for views based on naming. You can choose to either include or exclude schedules. Use the sheet collector for sheets., Collector.WallTypes - Collects wall types by name., Dictionary.ByKeysValues - Dictionaries are an incredibly powerful tool for making associative sets between two equal length lists. The fitst list must be of unique strings (or numbers) and will be the key and the second list will be the matching values (it can be made up of geometry, elements, even other lists)\r\nThe search keys list will provide the coresponding value to the input key., DirectShape.ByGeometry - Attempts to create a DirectShape element inside the Revit document. It is based on an alternative process that uses a SAT inport and can produce smooth surfaces., Doc.DeleteElements - Attempts to delete the input revit elements and returns the number of successfully deleted elements. Carefully observe the deleted elements count. It may be greater than the input list because hosted elements or tags will be deleted as well., Element.SetLocation - Attempts to modify the location of the input element. This can effectively add as a move comand in Revit. Works for both line based and point based elements., FamilyType.Duplicate - Create duplicate family types with the specified name. If the type exists, it is called., File.Size - Checks the file size. Provide a file path as a string., Filter.ByCategoryName - Filters the input elements by their category name. You can input multiple category names., Filter.ByClassName - Filters a list of objects by the object's class name. Note that Dynamo elements belong to different classes than their Revit counterparts. Use the Object.Class node to check an object's class., Floor-WallType.SetMaterial - Sets a new material to the structural core of the provided floor and wall types., FloorOpening.ByCurves - Create hosted floor opeinngs through the input floors. The second input is a list of sub-lists of the boundary curves., FloorType.Duplicate - Attemts to create duplicate floor types. If the floor type exists, it is appended to the end. Sets only the structural width of the floor. The width must be in feet., Fn.ElementsOfCategory - Same as the built in \"All Elements of Category\" but can act as a function object., Form.ByGeometry - Attempts to convert the input geometry to a Revit Form object. Warning - use method this only in the family environment. Can convert complicated solids or surfaces directly into forms., Geometry.SplitRecursively - Splits a surface or a solid recursively, using the resulting reduced geometry for every next split., HostedInstanceByPoints - Creates hosted family instances(doors/windows) at the specified points. You can feed either a single family type or a unique type for each instance., Input.Wait - Waits for all inputs to be completed before continuing the execution process.Part of the SmartCopyMon workflow., Lines.Group&FixCorners - Groups unconnected lines into sub-lists by margin(the maximum distance between endpoints) and attempts to create clean corner connections between them. Built on top of the Group curves node found in archi-lab.net., List.DropFirstLast - Removes the first and last items from the list, List.DropLast - Removes the last value of the list., List.GetEven - Gets even indices from the list., List.GetOdd - Gets the odd indices from the list., List.Randomise&Divide - Shiffles the input list and divides it into sub-lists based on ratios(1/4 + 1/2 + 1/4 will give you three lists split accordingly) The smalest ratio will always be 1 / the list length and the largest ratio will be 1. A seed input can shuffle the list further., List.ShiftIndices+ - The built in node fails if the shift number is greater than the lenght of the list. This node acts as a work-around., Ln2Str - Serilize a geometry line to a string for use in Revit parameters, Math.AlmostEqual - Checks if a number is almost equal to a value with a specified tollerance., NullAllIndicesOf - list all of the indices of a list that match the specified value. Capable of handling null values, part of the SmartCopyMonitor workflow., NullGetParameter - Similar to the built in node.Capable of handling null values, part of the SmartCopyMonitor workflow., NullIndexOf - Similar to the bult-in node but provides a null value instead of -1 of failure. Part of the SmartCopyMonitor workflow., NullReorder - Simiar to the built-in function with the difference that it can handle null indices. Part of the SmartCopyMonitor workflow., NullSetDifference - Similar to the built in node, with a built-in safety for null values. Part of the SmartCopyMonitor workflow., NullSetParameter - Similar to the built-in function but with the ability to handle null values. Part of the SmartCopyMon workflow., Number.ToString - Converts the input number(s) to string. Can process lists., Object.Class - Gets the input object's class name. Can process lists., Pt2Str - Serilize a geometry point to a string for use in Revit parameters, SelectInRevit - Selects the input elements in Revit. Works with Revit 2016., Shaft.ByCurves - Creates a shaft opening. The top level MUST be higher than the base level for a successful execution. You can either provide one base and top level for all shafts or have unique levels for each shaft instance., Sheet.Views+ - Extracts all views placed on the input sheet(s).  Will be depreciated once the bult in node works with all plan types., Star.ByCenterRadiusRays - Fun little node to create star shapes., Str2Ln - De-serilize a Revit parameter string into a geometric line., Str2Pt - De-serilize a Revit parameter string into a geometric point., Topography.ToPolySurface - Optimized algorithm for converting topographies into polysurfaces. Tested with topographies containing up to 40 000 points. \r\nWarning conversions of such mangitudes consume a lot of resources and are sub-optimal. Ensure that you have plenty at least 8GB of ram and patience before attempting such a conversion, otherwise your Dynamo and Revit instances may crash., ViewSet.ByViewsName - Creates a set of views(or sheets) for printing. If the set exists, set Overwrite to true to replace it., Wall.WallType - Queries the wall type of the input wall. Works for types from linked documents as well., WallType.Duplicate - Attemts to create duplicate wall types. If the wall type exists, it is appended to the end. Sets only the structural width of the wall. The width must be in feet.","engine_metadata":"","engine_version":"0.8.2.2392","created":"2015-09-27T09:56:28.638Z","full_dependency_versions":["82.1.1"],"full_dependency_ids":[{"_id":"56077cf3662bf0e9080001ea","name":"spring nodes"}],"direct_dependency_versions":[],"direct_dependency_ids":[],"change_log":"","version":"82.1.1"},{"_id":"5607f991662bf0e9080001ee","contains_binaries":false,"node_libraries":[],"url_with_deps":"","url":"https://s3.amazonaws.com/greg-pkgs-dev/ac9c14a7-8c25-488e-82cb-1ae4e6c67e31gregPkg18.zip","contents":"Active View - Selects the current document's active view. Supports more view types, Beams.FixExtents - Detects all beams from the input list with broken extents(actual length - cut length <  margin) and attemts to correct them., Collector.CurrentSelection - Gets the currently selected elements. Connect a boolean switch to refresh the selection. Compatible with Revit 2016, Collector.ElementsInView - Selects all elements visible in the input view., Collector.FamilyInstances - Collects placed family instance elements from the document that match the name. Partially mathing elements are collected as well. If no matches are found, a list of all isntance names will be output., Collector.FamilyTypes - Collects non-system family types that fully match or partially match the provided names. If no matches are found, a list of all type names will be output., Collector.FloorTypes - Collects Floor types by name., Collector.LinkedInstanceElements - Extract elements by category from the selected linked instances. The transform vector can be used to get the exact location of the elements in the local file, Collector.Revisions - Collects all revisions from a specific date., Collector.Sheets - Search for sheets by either their name or their number. Use a false boolean switch to search by number., Collector.Views - Search for views based on naming. You can choose to either include or exclude schedules. Use the sheet collector for sheets., Collector.WallTypes - Collects wall types by name., Dictionary.ByKeysValues - Dictionaries are an incredibly powerful tool for making associative sets between two equal length lists. The fitst list must be of unique strings (or numbers) and will be the key and the second list will be the matching values (it can be made up of geometry, elements, even other lists)\r\nThe search keys list will provide the coresponding value to the input key., DirectShape.ByGeometry - Attempts to create a DirectShape element inside the Revit document. It is based on an alternative process that uses a SAT inport and can produce smooth surfaces., Doc.DeleteElements - Attempts to delete the input revit elements and returns the number of successfully deleted elements. Carefully observe the deleted elements count. It may be greater than the input list because hosted elements or tags will be deleted as well., Element.SetLocation - Attempts to modify the location of the input element. This can effectively add as a move comand in Revit. Works for both line based and point based elements., FamilyType.Duplicate - Create duplicate family types with the specified name. If the type exists, it is called., File.Size - Checks the file size. Provide a file path as a string., Filter.ByCategoryName - Filters the input elements by their category name. You can input multiple category names., Filter.ByClassName - Filters a list of objects by the object's class name. Note that Dynamo elements belong to different classes than their Revit counterparts. Use the Object.Class node to check an object's class., Floor-WallType.SetMaterial - Sets a new material to the structural core of the provided floor and wall types., FloorOpening.ByCurves - Create hosted floor opeinngs through the input floors. The second input is a list of sub-lists of the boundary curves., FloorType.Duplicate - Attemts to create duplicate floor types. If the floor type exists, it is appended to the end. Sets only the structural width of the floor. The width must be in feet., Fn.ElementsOfCategory - Same as the built in \"All Elements of Category\" but can act as a function object., Form.ByGeometry - Attempts to convert the input geometry to a Revit Form object. Warning - use method this only in the family environment. Can convert complicated solids or surfaces directly into forms., Geometry.SplitRecursively - Splits a surface or a solid recursively, using the resulting reduced geometry for every next split., HostedInstanceByPoints - Creates hosted family instances(doors/windows) at the specified points. You can feed either a single family type or a unique type for each instance., Input.Wait - Waits for all inputs to be completed before continuing the execution process.Part of the SmartCopyMon workflow., Lines.Group&FixCorners - Groups unconnected lines into sub-lists by margin(the maximum distance between endpoints) and attempts to create clean corner connections between them. Built on top of the Group curves node found in archi-lab.net., List.DropFirstLast - Removes the first and last items from the list, List.DropLast - Removes the last value of the list., List.GetEven - Gets even indices from the list., List.GetOdd - Gets the odd indices from the list., List.Randomise&Divide - Shiffles the input list and divides it into sub-lists based on ratios(1/4 + 1/2 + 1/4 will give you three lists split accordingly) The smalest ratio will always be 1 / the list length and the largest ratio will be 1. A seed input can shuffle the list further., List.ShiftIndices+ - The built in node fails if the shift number is greater than the lenght of the list. This node acts as a work-around., Ln2Str - Serilize a geometry line to a string for use in Revit parameters, Math.AlmostEqual - Checks if a number is almost equal to a value with a specified tollerance., NullAllIndicesOf - list all of the indices of a list that match the specified value. Capable of handling null values, part of the SmartCopyMonitor workflow., NullGetParameter - Similar to the built in node.Capable of handling null values, part of the SmartCopyMonitor workflow., NullIndexOf - Similar to the bult-in node but provides a null value instead of -1 of failure. Part of the SmartCopyMonitor workflow., NullReorder - Simiar to the built-in function with the difference that it can handle null indices. Part of the SmartCopyMonitor workflow., NullSetDifference - Similar to the built in node, with a built-in safety for null values. Part of the SmartCopyMonitor workflow., NullSetParameter - Similar to the built-in function but with the ability to handle null values. Part of the SmartCopyMon workflow., Number.ToString - Converts the input number(s) to string. Can process lists., Object.Class - Gets the input object's class name. Can process lists., Pt2Str - Serilize a geometry point to a string for use in Revit parameters, SelectInRevit - Selects the input elements in Revit. Works with Revit 2016., Shaft.ByCurves - Creates a shaft opening. The top level MUST be higher than the base level for a successful execution. You can either provide one base and top level for all shafts or have unique levels for each shaft instance., Sheet.Views+ - Extracts all views placed on the input sheet(s).  Will be depreciated once the bult in node works with all plan types., Star.ByCenterRadiusRays - Fun little node to create star shapes., Str2Ln - De-serilize a Revit parameter string into a geometric line., Str2Pt - De-serilize a Revit parameter string into a geometric point., Topography.ToPolySurface - Optimized algorithm for converting topographies into polysurfaces. Tested with topographies containing up to 40 000 points. \r\nWarning conversions of such mangitudes consume a lot of resources and are sub-optimal. Ensure that you have plenty at least 8GB of ram and patience before attempting such a conversion, otherwise your Dynamo and Revit instances may crash., ViewSet.ByViewsName - Creates a set of views(or sheets) for printing. If the set exists, set Overwrite to true to replace it., Wall.WallType - Queries the wall type of the input wall. Works for types from linked documents as well., WallType.Duplicate - Attemts to create duplicate wall types. If the wall type exists, it is appended to the end. Sets only the structural width of the wall. The width must be in feet.","engine_metadata":"","engine_version":"0.8.3.2670","created":"2015-09-27T14:13:37.891Z","full_dependency_versions":["82.1.2"],"full_dependency_ids":[{"_id":"56077cf3662bf0e9080001ea","name":"spring nodes"}],"direct_dependency_versions":[],"direct_dependency_ids":[],"change_log":"","version":"82.1.2"},{"_id":"56096e90662bf0e9080001f5","contains_binaries":false,"node_libraries":[],"url_with_deps":"","url":"https://s3.amazonaws.com/greg-pkgs-dev/d92d41e2-e0c2-4451-b123-753862628fc1gregPkg689.zip","contents":"Active View - Selects the current document's active view. Supports more view types, Beams.FixExtents - Detects all beams from the input list with broken extents(actual length - cut length <  margin) and attemts to correct them., Collector.CurrentSelection - Gets the currently selected elements. Connect a boolean switch to refresh the selection. Compatible with Revit 2016, Collector.ElementsInView - Selects all elements visible in the input view., Collector.FamilyInstances - Collects placed family instance elements from the document that match the name. Partially mathing elements are collected as well. If no matches are found, a list of all isntance names will be output., Collector.FamilyTypes - Collects non-system family types that fully match or partially match the provided names. If no matches are found, a list of all type names will be output., Collector.FloorTypes - Collects Floor types by name., Collector.LinkedInstanceElements - Extract elements by category from the selected linked instances. The transform vector can be used to get the exact location of the elements in the local file, Collector.Revisions - Collects all revisions from a specific date., Collector.Sheets - Search for sheets by either their name or their number. Use a false boolean switch to search by number., Collector.Views - Search for views based on naming. You can choose to either include or exclude schedules. Use the sheet collector for sheets., Collector.WallTypes - Collects wall types by name., Dictionary.ByKeysValues - Dictionaries are an incredibly powerful tool for making associative sets between two equal length lists. The fitst list must be of unique strings (or numbers) and will be the key and the second list will be the matching values (it can be made up of geometry, elements, even other lists)\r\nThe search keys list will provide the coresponding value to the input key., DirectShape.ByGeometry - Attempts to create a DirectShape element inside the Revit document.  It is based on an alternative process that uses a SAT inport and can produce smooth surfaces. Each created DS will have a unique type. Make sure that each input geometry has a unique name. You can either feed a single category for all geometries or a unique category for each geometry., DirectShape.Transform - Copy the input DirectShape element with the help of a translation vector, similarly to the Geometry.Translate node. This method should prove much faster than Element.Copy, Doc.DeleteElements - Attempts to delete the input revit elements and returns the number of successfully deleted elements. Carefully observe the deleted elements count. It may be greater than the input list because hosted elements or tags will be deleted as well., Element.Copy - Copy the input Revit elements with the help of a translation vector, similarly to the Geometry.Translate node., Element.SetLocation - Attempts to modify the location of the input element. This can effectively add as a move comand in Revit. Works for both line based and point based elements., FamilyType.Duplicate - Create duplicate family types with the specified name. If the type exists, it is called., File.Size - Checks the file size. Provide a file path as a string., Filter.ByCategoryName - Filters the input elements by their category name. You can input multiple category names., Filter.ByClassName - Filters a list of objects by the object's class name. Note that Dynamo elements belong to different classes than their Revit counterparts. Use the Object.Class node to check an object's class., Floor-WallType.SetMaterial - Sets a new material to the structural core of the provided floor and wall types., FloorOpening.ByCurves - Create hosted floor opeinngs through the input floors. The second input is a list of sub-lists of the boundary curves., FloorType.Duplicate - Attemts to create duplicate floor types. If the floor type exists, it is appended to the end. Sets only the structural width of the floor. The width must be in feet., Fn.ElementsOfCategory - Same as the built in \"All Elements of Category\" but can act as a function object., Form.ByGeometry - Attempts to convert the input geometry to a Revit Form object. Warning - use method this only in the family environment. Can convert complicated solids or surfaces directly into forms., Geometry.SplitRecursively - Splits a surface or a solid recursively, using the resulting reduced geometry for every next split., HostedInstanceByPoints - Creates hosted family instances(doors/windows) at the specified points. You can feed either a single family type or a unique type for each instance., Input.Wait - Waits for all inputs to be completed before continuing the execution process.Part of the SmartCopyMon workflow., Lines.Group&FixCorners - Groups unconnected lines into sub-lists by margin(the maximum distance between endpoints) and attempts to create clean corner connections between them. Built on top of the Group curves node found in archi-lab.net., List.DropFirstLast - Removes the first and last items from the list, List.DropLast - Removes the last value of the list., List.GetEven - Gets even indices from the list., List.GetOdd - Gets the odd indices from the list., List.Randomise&Divide - Shiffles the input list and divides it into sub-lists based on ratios(1/4 + 1/2 + 1/4 will give you three lists split accordingly) The smalest ratio will always be 1 / the list length and the largest ratio will be 1. A seed input can shuffle the list further., List.ShiftIndices+ - The built in node fails if the shift number is greater than the lenght of the list. This node acts as a work-around., Ln2Str - Serilize a geometry line to a string for use in Revit parameters, Math.AlmostEqual - Checks if a number is almost equal to a value with a specified tollerance., NullAllIndicesOf - list all of the indices of a list that match the specified value. Capable of handling null values, part of the SmartCopyMonitor workflow., NullGetParameter - Similar to the built in node.Capable of handling null values, part of the SmartCopyMonitor workflow., NullIndexOf - Similar to the bult-in node but provides a null value instead of -1 of failure. Part of the SmartCopyMonitor workflow., NullReorder - Simiar to the built-in function with the difference that it can handle null indices. Part of the SmartCopyMonitor workflow., NullSetDifference - Similar to the built in node, with a built-in safety for null values. Part of the SmartCopyMonitor workflow., NullSetParameter - Similar to the built-in function but with the ability to handle null values. Part of the SmartCopyMon workflow., Number.ToString - Converts the input number(s) to string. Can process lists., Object.Class - Gets the input object's class name. Can process lists., Pt2Str - Serilize a geometry point to a string for use in Revit parameters, SelectInRevit - Selects the input elements in Revit. Works with Revit 2016., Shaft.ByCurves - Creates a shaft opening. The top level MUST be higher than the base level for a successful execution. You can either provide one base and top level for all shafts or have unique levels for each shaft instance., Sheet.Views+ - Extracts all views placed on the input sheet(s).  Will be depreciated once the bult in node works with all plan types., Star.ByCenterRadiusRays - Fun little node to create star shapes., Str2Ln - De-serilize a Revit parameter string into a geometric line., Str2Pt - De-serilize a Revit parameter string into a geometric point., Topography.ToPolySurface - Optimized algorithm for converting topographies into polysurfaces. Tested with topographies containing up to 40 000 points. \r\nWarning conversions of such mangitudes consume a lot of resources and are sub-optimal. Ensure that you have plenty at least 8GB of ram and patience before attempting such a conversion, otherwise your Dynamo and Revit instances may crash., ViewSet.ByViewsName - Creates a set of views(or sheets) for printing. If the set exists, set Overwrite to true to replace it., Wall.WallType - Queries the wall type of the input wall. Works for types from linked documents as well., WallType.Duplicate - Attemts to create duplicate wall types. If the wall type exists, it is appended to the end. Sets only the structural width of the wall. The width must be in feet.","engine_metadata":"","engine_version":"0.8.2.2392","created":"2015-09-28T16:45:04.259Z","full_dependency_versions":["82.2.0"],"full_dependency_ids":[{"_id":"56077cf3662bf0e9080001ea","name":"spring nodes"}],"direct_dependency_versions":[],"direct_dependency_ids":[],"change_log":"","version":"82.2.0"},{"_id":"560a018e662bf0e908000200","contains_binaries":false,"node_libraries":[],"url_with_deps":"","url":"https://s3.amazonaws.com/greg-pkgs-dev/7417a898-023b-4696-b695-952edbda235dgregPkg520.zip","contents":"Active View - Selects the current document's active view. Supports more view types, Beams.FixExtents - Detects all beams from the input list with broken extents(actual length - cut length <  margin) and attemts to correct them., Collector.CurrentSelection - Gets the currently selected elements. Connect a boolean switch to refresh the selection. Compatible with Revit 2016, Collector.ElementsInView - Selects all elements visible in the input view., Collector.FamilyInstances - Collects placed family instance elements from the document that match the name. Partially mathing elements are collected as well. If no matches are found, a list of all isntance names will be output., Collector.FamilyTypes - Collects non-system family types that fully match or partially match the provided names. If no matches are found, a list of all type names will be output., Collector.FloorTypes - Collects Floor types by name., Collector.LinkedInstanceElements - Extract elements by category from the selected linked instances. The transform vector can be used to get the exact location of the elements in the local file, Collector.Revisions - Collects all revisions from a specific date., Collector.Sheets - Search for sheets by either their name or their number. Use a false boolean switch to search by number., Collector.Views - Search for views based on naming. You can choose to either include or exclude schedules. Use the sheet collector for sheets., Collector.WallTypes - Collects wall types by name., Dictionary.ByKeysValues - Dictionaries are an incredibly powerful tool for making associative sets between two equal length lists. The fitst list must be of unique strings (or numbers) and will be the key and the second list will be the matching values (it can be made up of geometry, elements, even other lists)\r\nThe search keys list will provide the coresponding value to the input key., DirectShape.ByGeometry - Attempts to create a DirectShape element inside the Revit document.  It is based on an alternative process that uses a SAT inport and can produce smooth surfaces. Each created DS will have a unique type. Make sure that each input geometry has a unique name. You can either feed a single category for all geometries or a unique category for each geometry., DirectShape.Transform - Copy the input DirectShape element with the help of a translation vector, similarly to the Geometry.Translate node. This method should prove much faster than Element.Copy, Doc.DeleteElements - Attempts to delete the input revit elements and returns the number of successfully deleted elements. Carefully observe the deleted elements count. It may be greater than the input list because hosted elements or tags will be deleted as well., Element.Copy - Copy the input Revit elements with the help of a translation vector, similarly to the Geometry.Translate node., Element.SetLocation - Attempts to modify the location of the input element. This can effectively add as a move comand in Revit. Works for both line based and point based elements., FamilyType.Duplicate - Create duplicate family types with the specified name. If the type exists, it is called., File.Size - Checks the file size. Provide a file path as a string., Filter.ByCategoryName - Filters the input elements by their category name. You can input multiple category names., Filter.ByClassName - Filters a list of objects by the object's class name. Note that Dynamo elements belong to different classes than their Revit counterparts. Use the Object.Class node to check an object's class., Floor-WallType.SetMaterial - Sets a new material to the structural core of the provided floor and wall types., FloorOpening.ByCurves - Create hosted floor opeinngs through the input floors. The second input is a list of sub-lists of the boundary curves., FloorType.Duplicate - Attemts to create duplicate floor types. If the floor type exists, it is appended to the end. Sets only the structural width of the floor. The width must be in feet., Fn.ElementsOfCategory - Same as the built in \"All Elements of Category\" but can act as a function object., Form.ByGeometry - Attempts to convert the input geometry to a Revit Form object. Forms can exist only in the family environment. You can convert complicated solids or surfaces directly into forms. Solids can be converted into voids. Provide either one true boolean to convert everything into voids or a unique boolean for each geometry object., Geometry.SplitRecursively - Splits a surface or a solid recursively, using the resulting reduced geometry for every next split., HostedInstanceByPoints - Creates hosted family instances(doors/windows) at the specified points. You can feed either a single family type or a unique type for each instance., Input.Wait - Waits for all inputs to be completed before continuing the execution process.Part of the SmartCopyMon workflow., Lines.Group&FixCorners - Groups unconnected lines into sub-lists by margin(the maximum distance between endpoints) and attempts to create clean corner connections between them. Built on top of the Group curves node found in archi-lab.net., List.DropFirstLast - Removes the first and last items from the list, List.DropLast - Removes the last value of the list., List.GetEven - Gets even indices from the list., List.GetOdd - Gets the odd indices from the list., List.Randomise&Divide - Shiffles the input list and divides it into sub-lists based on ratios(1/4 + 1/2 + 1/4 will give you three lists split accordingly) The smalest ratio will always be 1 / the list length and the largest ratio will be 1. A seed input can shuffle the list further., List.ShiftIndices+ - The built in node fails if the shift number is greater than the lenght of the list. This node acts as a work-around., Ln2Str - Serilize a geometry line to a string for use in Revit parameters, Math.AlmostEqual - Checks if a number is almost equal to a value with a specified tollerance., NullAllIndicesOf - list all of the indices of a list that match the specified value. Capable of handling null values, part of the SmartCopyMonitor workflow., NullGetParameter - Similar to the built in node.Capable of handling null values, part of the SmartCopyMonitor workflow., NullIndexOf - Similar to the bult-in node but provides a null value instead of -1 of failure. Part of the SmartCopyMonitor workflow., NullReorder - Simiar to the built-in function with the difference that it can handle null indices. Part of the SmartCopyMonitor workflow., NullSetDifference - Similar to the built in node, with a built-in safety for null values. Part of the SmartCopyMonitor workflow., NullSetParameter - Similar to the built-in function but with the ability to handle null values. Part of the SmartCopyMon workflow., Number.ToString - Converts the input number(s) to string. Can process lists., Object.Class - Gets the input object's class name. Can process lists., Pt2Str - Serilize a geometry point to a string for use in Revit parameters, SelectInRevit - Selects the input elements in Revit. Works with Revit 2016., Shaft.ByCurves - Creates a shaft opening. The top level MUST be higher than the base level for a successful execution. You can either provide one base and top level for all shafts or have unique levels for each shaft instance., Sheet.Views+ - Extracts all views placed on the input sheet(s).  Will be depreciated once the bult in node works with all plan types., Star.ByCenterRadiusRays - Fun little node to create star shapes., Str2Ln - De-serilize a Revit parameter string into a geometric line., Str2Pt - De-serilize a Revit parameter string into a geometric point., Topography.ToPolySurface - Optimized algorithm for converting topographies into polysurfaces. Tested with topographies containing up to 40 000 points. \r\nWarning conversions of such mangitudes consume a lot of resources and are sub-optimal. Ensure that you have plenty at least 8GB of ram and patience before attempting such a conversion, otherwise your Dynamo and Revit instances may crash., ViewSet.ByViewsName - Creates a set of views(or sheets) for printing. If the set exists, set Overwrite to true to replace it., Wall.WallType - Queries the wall type of the input wall. Works for types from linked documents as well., WallType.Duplicate - Attemts to create duplicate wall types. If the wall type exists, it is appended to the end. Sets only the structural width of the wall. The width must be in feet.","engine_metadata":"","engine_version":"0.8.2.2392","created":"2015-09-29T03:12:14.117Z","full_dependency_versions":["82.2.1"],"full_dependency_ids":[{"_id":"56077cf3662bf0e9080001ea","name":"spring nodes"}],"direct_dependency_versions":[],"direct_dependency_ids":[],"change_log":"","version":"82.2.1"},{"_id":"560be8de662bf0e908000211","contains_binaries":false,"node_libraries":[],"url_with_deps":"","url":"https://s3.amazonaws.com/greg-pkgs-dev/2e0cdb4d-909c-4e86-a479-79f99f8a99ccgregPkg93.zip","contents":"Active View - Selects the current document's active view. Supports more view types, Beams.FixExtents - Detects all beams from the input list with broken extents(actual length - cut length <  margin) and attemts to correct them., BoundingBox.Scale - Scales the bounding box in three dimensions according to it's center., Collector.CurrentSelection - Gets the currently selected elements. Connect a boolean switch to refresh the selection. Compatible with Revit 2016, Collector.ElementsInView - Selects all elements visible in the input view., Collector.FamilyInstances - Collects placed family instance elements from the document that match the name. Partially mathing elements are collected as well. If no matches are found, a list of all isntance names will be output., Collector.FamilyTypes - Collects non-system family types that fully match or partially match the provided names. If no matches are found, a list of all type names will be output., Collector.FloorTypes - Collects Floor types by name., Collector.LinkedInstanceElements - Extract elements by category from the selected linked instances. The transform vector can be used to get the exact location of the elements in the local file, Collector.Revisions - Collects all revisions from a specific date., Collector.Sheets - Search for sheets by either their name or their number. Use a false boolean switch to search by number., Collector.Views - Search for views based on naming. You can choose to either include or exclude schedules. Use the sheet collector for sheets., Collector.WallTypes - Collects wall types by name., Dictionary.ByKeysValues - Dictionaries are an incredibly powerful tool for making associative sets between two equal length lists. The fitst list must be of unique strings (or numbers) and will be the key and the second list will be the matching values (it can be made up of geometry, elements, even other lists)\r\nThe search keys list will provide the coresponding value to the input key., DirectShape.ByGeometry(SAT) - Attempts to create a DirectShape element inside the Revit document.  It is based on an alternative process that uses a SAT inport and can produce smooth surfaces. Each created DS will have a unique type. Make sure that each input geometry has a unique name. You can either feed a single category for all geometries or a unique category for each geometry., DirectShape.ByGeometry - Attempts to create a DirectShape element inside the Revit document.  It is based on an alternative process that uses a SAT inport and can produce smooth surfaces. Each created DS will have a unique type. Make sure that each input geometry has a unique name. You can either feed a single category for all geometries or a unique category for each geometry., DirectShape.Transform - Copy the input DirectShape element with the help of a translation vector, similarly to the Geometry.Translate node. This method should prove much faster than Element.Copy, Doc.DeleteElements - Attempts to delete the input revit elements and returns the number of successfully deleted elements. Carefully observe the deleted elements count. It may be greater than the input list because hosted elements or tags will be deleted as well., Element.Copy - Copy the input Revit elements with the help of a translation vector, similarly to the Geometry.Translate node., Element.SetLocation - Attempts to modify the location of the input element. This can effectively add as a move comand in Revit. Works for both line based and point based elements., FamilyType.Duplicate - Create duplicate family types with the specified name. If the type exists, it is called., File.Size - Checks the file size. Provide a file path as a string., Filter.ByCategoryName - Filters the input elements by their category name. You can input multiple category names., Filter.ByClassName - Filters a list of objects by the object's class name. Note that Dynamo elements belong to different classes than their Revit counterparts. Use the Object.Class node to check an object's class., Floor-WallType.SetMaterial - Sets a new material to the structural core of the provided floor and wall types., FloorOpening.ByCurves - Create hosted floor opeinngs through the input floors. The second input is a list of sub-lists of the boundary curves., FloorType.Duplicate - Attemts to create duplicate floor types. If the floor type exists, it is appended to the end. Sets only the structural width of the floor. The width must be in feet., Fn.ElementsOfCategory - Same as the built in \"All Elements of Category\" but can act as a function object., Form.ByGeometry - Attempts to convert the input geometry to a Revit Form object. Forms can exist only in the family environment. You can convert complicated solids or surfaces directly into forms. Solids can be converted into voids. Provide either one true boolean to convert everything into voids or a unique boolean for each geometry object., Geometry.SplitRecursively - Splits a surface or a solid recursively, using the resulting reduced geometry for every next split., HostedInstanceByPoints - Creates hosted family instances(doors/windows) at the specified points. You can feed either a single family type or a unique type for each instance., Input.Wait - Waits for all inputs to be completed before continuing the execution process.Part of the SmartCopyMon workflow., Lines.Group&FixCorners - Groups unconnected lines into sub-lists by margin(the maximum distance between endpoints) and attempts to create clean corner connections between them. Built on top of the Group curves node found in archi-lab.net., List.DropFirstLast - Removes the first and last items from the list, List.DropLast - Removes the last value of the list., List.GetEven - Gets even indices from the list., List.GetOdd - Gets the odd indices from the list., List.Randomise&Divide - Shiffles the input list and divides it into sub-lists based on ratios(1/4 + 1/2 + 1/4 will give you three lists split accordingly) The smalest ratio will always be 1 / the list length and the largest ratio will be 1. A seed input can shuffle the list further., List.ShiftIndices+ - The built in node fails if the shift number is greater than the lenght of the list. This node acts as a work-around., Ln2Str - Serilize a geometry line to a string for use in Revit parameters, Math.AlmostEqual - Checks if a number is almost equal to a value with a specified tollerance., NullAllIndicesOf - list all of the indices of a list that match the specified value. Capable of handling null values, part of the SmartCopyMonitor workflow., NullGetParameter - Similar to the built in node.Capable of handling null values, part of the SmartCopyMonitor workflow., NullIndexOf - Similar to the bult-in node but provides a null value instead of -1 of failure. Part of the SmartCopyMonitor workflow., NullReorder - Simiar to the built-in function with the difference that it can handle null indices. Part of the SmartCopyMonitor workflow., NullSetDifference - Similar to the built in node, with a built-in safety for null values. Part of the SmartCopyMonitor workflow., NullSetParameter - Similar to the built-in function but with the ability to handle null values. Part of the SmartCopyMon workflow., Number.ToString - Converts the input number(s) to string. Can process lists., Object.Class - Gets the input object's class name. Can process lists., Pt2Str - Serilize a geometry point to a string for use in Revit parameters, SelectInRevit - Selects the input elements in Revit. Works with Revit 2016., Shaft.ByCurves - Creates a shaft opening. The top level MUST be higher than the base level for a successful execution. You can either provide one base and top level for all shafts or have unique levels for each shaft instance., Sheet.Views+ - Extracts all views placed on the input sheet(s).  Will be depreciated once the bult in node works with all plan types., Star.ByCenterRadiusRays - Fun little node to create star shapes., Str2Ln - De-serilize a Revit parameter string into a geometric line., Str2Pt - De-serilize a Revit parameter string into a geometric point., Topography.ToPolySurface - Optimized algorithm for converting topographies into polysurfaces. Tested with topographies containing up to 40 000 points. \r\nWarning conversions of such mangitudes consume a lot of resources and are sub-optimal. Ensure that you have plenty at least 8GB of ram and patience before attempting such a conversion, otherwise your Dynamo and Revit instances may crash., ViewSet.ByViewsName - Creates a set of views(or sheets) for printing. If the set exists, set Overwrite to true to replace it., Wall.WallType - Queries the wall type of the input wall. Works for types from linked documents as well., WallType.Duplicate - Attemts to create duplicate wall types. If the wall type exists, it is appended to the end. Sets only the structural width of the wall. The width must be in feet.","engine_metadata":"","engine_version":"0.8.2.2392","created":"2015-09-30T13:51:26.293Z","full_dependency_versions":["82.2.2"],"full_dependency_ids":[{"_id":"56077cf3662bf0e9080001ea","name":"spring nodes"}],"direct_dependency_versions":[],"direct_dependency_ids":[],"change_log":"","version":"82.2.2"},{"_id":"560d06de662bf0e908000218","contains_binaries":false,"node_libraries":[],"url_with_deps":"","url":"https://s3.amazonaws.com/greg-pkgs-dev/47e9056b-3779-42df-91d6-27c38dd9c3ccgregPkg72.zip","contents":"Active View - Selects the current document's active view. Supports more view types, Beams.FixExtents - Detects all beams from the input list with broken extents(actual length - cut length <  margin) and attemts to correct them., BoundingBox.Scale - Scales the bounding box in three dimensions according to it's center., Collector.CurrentSelection - Gets the currently selected elements. Connect a boolean switch to refresh the selection. Compatible with Revit 2016, Collector.ElementsInView - Selects all elements visible in the input view., Collector.FamilyInstances - Collects placed family instance elements from the document that match the name. Partially mathing elements are collected as well. If no matches are found, a list of all isntance names will be output., Collector.FamilyTypes - Collects non-system family types that fully match or partially match the provided names. If no matches are found, a list of all type names will be output., Collector.FloorTypes - Collects Floor types by name., Collector.LinkedInstanceElements - Extract elements by category from the selected linked instances. The transform vector can be used to get the exact location of the elements in the local file, Collector.Revisions - Collects all revisions from a specific date., Collector.Sheets - Search for sheets by either their name or their number. Use a false boolean switch to search by number., Collector.Views - Search for views based on naming. You can choose to either include or exclude schedules. Use the sheet collector for sheets., Collector.WallTypes - Collects wall types by name., Dictionary.ByKeysValues - Dictionaries are an incredibly powerful tool for making associative sets between two equal length lists. The fitst list must be of unique strings (or numbers) and will be the key and the second list will be the matching values (it can be made up of geometry, elements, even other lists)\r\nThe search keys list will provide the coresponding value to the input key., DirectShape.ByGeometry(SAT) - Attempts to create a DirectShape element inside the Revit document.  It is based on an alternative process that uses a SAT inport and can produce smooth surfaces. Each created DS will have a unique type. Make sure that each input geometry has a unique name. You can either feed a single category for all geometries or a unique category for each geometry. This node works in millimeters., DirectShape.ByGeometry - Attempts to create a DirectShape element inside the Revit document.  It is based on an alternative process that uses a SAT inport and can produce smooth surfaces. Each created DS will have a unique type. Make sure that each input geometry has a unique name. You can either feed a single category for all geometries or a unique category for each geometry., DirectShape.Transform - Copy the input DirectShape element with the help of a translation vector, similarly to the Geometry.Translate node. This method should prove much faster than Element.Copy, Doc.DeleteElements - Attempts to delete the input revit elements and returns the number of successfully deleted elements. Carefully observe the deleted elements count. It may be greater than the input list because hosted elements or tags will be deleted as well., Element.Copy - Copy the input Revit elements with the help of a translation vector, similarly to the Geometry.Translate node., Element.SetLocation - Attempts to modify the location of the input element. This can effectively add as a move comand in Revit. Works for both line based and point based elements., FamilyType.Duplicate - Create duplicate family types with the specified name. If the type exists, it is called., File.Size - Checks the file size. Provide a file path as a string., Filter.ByCategoryName - Filters the input elements by their category name. You can input multiple category names., Filter.ByClassName - Filters a list of objects by the object's class name. Note that Dynamo elements belong to different classes than their Revit counterparts. Use the Object.Class node to check an object's class., Floor-WallType.SetMaterial - Sets a new material to the structural core of the provided floor and wall types., FloorOpening.ByCurves - Create hosted floor opeinngs through the input floors. The second input is a list of sub-lists of the boundary curves., FloorType.Duplicate - Attemts to create duplicate floor types. If the floor type exists, it is appended to the end. Sets only the structural width of the floor. The width must be in feet., Fn.ElementsOfCategory - Same as the built in \"All Elements of Category\" but can act as a function object., Form.ByGeometry(SAT) - Attempts to convert the input geometry to a Revit Form object. Forms can exist only in the family environment. You can convert complicated solids or surfaces directly into forms. Solids can be converted into voids. Provide either one true boolean to convert everything into voids or a unique boolean for each geometry object. This node works in millimeters., Form.ByGeometry - Attempts to convert the input geometry to a Revit Form object. Forms can exist only in the family environment. You can convert complicated solids or surfaces directly into forms. Solids can be converted into voids. Provide either one true boolean to convert everything into voids or a unique boolean for each geometry object., Geometry.SplitRecursively - Splits a surface or a solid recursively, using the resulting reduced geometry for every next split., HostedInstanceByPoints - Creates hosted family instances(doors/windows) at the specified points. You can feed either a single family type or a unique type for each instance., Input.Wait - Waits for all inputs to be completed before continuing the execution process.Part of the SmartCopyMon workflow., Lines.Group&FixCorners - Groups unconnected lines into sub-lists by margin(the maximum distance between endpoints) and attempts to create clean corner connections between them. Built on top of the Group curves node found in archi-lab.net., List.DropFirstLast - Removes the first and last items from the list, List.DropLast - Removes the last value of the list., List.GetEven - Gets even indices from the list., List.GetOdd - Gets the odd indices from the list., List.Randomise&Divide - Shiffles the input list and divides it into sub-lists based on ratios(1/4 + 1/2 + 1/4 will give you three lists split accordingly) The smalest ratio will always be 1 / the list length and the largest ratio will be 1. A seed input can shuffle the list further., List.ShiftIndices+ - The built in node fails if the shift number is greater than the lenght of the list. This node acts as a work-around., Ln2Str - Serilize a geometry line to a string for use in Revit parameters, Math.AlmostEqual - Checks if a number is almost equal to a value with a specified tollerance., NullAllIndicesOf - list all of the indices of a list that match the specified value. Capable of handling null values, part of the SmartCopyMonitor workflow., NullGetParameter - Similar to the built in node.Capable of handling null values, part of the SmartCopyMonitor workflow., NullIndexOf - Similar to the bult-in node but provides a null value instead of -1 of failure. Part of the SmartCopyMonitor workflow., NullReorder - Simiar to the built-in function with the difference that it can handle null indices. Part of the SmartCopyMonitor workflow., NullSetDifference - Similar to the built in node, with a built-in safety for null values. Part of the SmartCopyMonitor workflow., NullSetParameter - Similar to the built-in function but with the ability to handle null values. Part of the SmartCopyMon workflow., Number.ToString - Converts the input number(s) to string. Can process lists., Object.Class - Gets the input object's class name. Can process lists., Pt2Str - Serilize a geometry point to a string for use in Revit parameters, SelectInRevit - Selects the input elements in Revit. Works with Revit 2016., Shaft.ByCurves - Creates a shaft opening. The top level MUST be higher than the base level for a successful execution. You can either provide one base and top level for all shafts or have unique levels for each shaft instance., Sheet.Views+ - Extracts all views placed on the input sheet(s).  Will be depreciated once the bult in node works with all plan types., Star.ByCenterRadiusRays - Fun little node to create star shapes., Str2Ln - De-serilize a Revit parameter string into a geometric line., Str2Pt - De-serilize a Revit parameter string into a geometric point., Topography.ToPolySurface - Optimized algorithm for converting topographies into polysurfaces. Tested with topographies containing up to 40 000 points. \r\nWarning conversions of such mangitudes consume a lot of resources and are sub-optimal. Ensure that you have plenty at least 8GB of ram and patience before attempting such a conversion, otherwise your Dynamo and Revit instances may crash., ViewSet.ByViewsName - Creates a set of views(or sheets) for printing. If the set exists, set Overwrite to true to replace it., Wall.WallType - Queries the wall type of the input wall. Works for types from linked documents as well., WallType.Duplicate - Attemts to create duplicate wall types. If the wall type exists, it is appended to the end. Sets only the structural width of the wall. The width must be in feet.","engine_metadata":"","engine_version":"0.8.2.2392","created":"2015-10-01T10:11:42.954Z","full_dependency_versions":["82.2.3"],"full_dependency_ids":[{"_id":"56077cf3662bf0e9080001ea","name":"spring nodes"}],"direct_dependency_versions":[],"direct_dependency_ids":[],"change_log":"","version":"82.2.3"},{"_id":"560fb0c5662bf0e908000223","contains_binaries":false,"node_libraries":[],"url_with_deps":"","url":"https://s3.amazonaws.com/greg-pkgs-dev/c5f89b4e-d3c8-440d-b1c8-f85e6387613bgregPkg695.zip","contents":"Active View - Selects the current document's active view. Supports more view types, Beams.FixExtents - Detects all beams from the input list with broken extents(actual length - cut length <  margin) and attemts to correct them., BoundingBox.Scale - Scales the bounding box in three dimensions according to it's center., Collector.CurrentSelection - Gets the currently selected elements. Connect a boolean switch to refresh the selection. Compatible with Revit 2016, Collector.ElementsInView - Selects all elements visible in the input view., Collector.FamilyInstances - Collects placed family instance elements from the document that match the name. Partially mathing elements are collected as well. If no matches are found, a list of all isntance names will be output., Collector.FamilyTypes - Collects non-system family types that fully match or partially match the provided names. If no matches are found, a list of all type names will be output., Collector.FloorTypes - Collects Floor types by name., Collector.LinkedInstanceElements - Extract elements by category from the selected linked instances. The transform vector can be used to get the exact location of the elements in the local file, Collector.Revisions - Collects all revisions from a specific date., Collector.Sheets - Search for sheets by either their name or their number. Use a false boolean switch to search by number., Collector.Views - Search for views based on naming. You can choose to either include or exclude schedules. Use the sheet collector for sheets., Collector.WallTypes - Collects wall types by name., Dictionary.ByKeysValues - Dictionaries are an incredibly powerful tool for making associative sets between two equal length lists. The fitst list must be of unique strings (or numbers) and will be the key and the second list will be the matching values (it can be made up of geometry, elements, even other lists)\r\nThe search keys list will provide the coresponding value to the input key., DirectShape.ByGeometry(SAT) - Attempts to create a DirectShape element inside the Revit document.  It is based on an alternative process that uses a SAT inport and can produce smooth surfaces. Each created DS will have a unique type. Make sure that each input geometry has a unique name. You can either feed a single category for all geometries or a unique category for each geometry. This node works in millimeters., DirectShape.ByGeometry - Attempts to create a DirectShape element inside the Revit document.  It is based on an alternative process that uses a SAT inport and can produce smooth surfaces. Each created DS will have a unique type. Make sure that each input geometry has a unique name. You can either feed a single category for all geometries or a unique category for each geometry., DirectShape.Transform - Copy the input DirectShape element with the help of a translation vector, similarly to the Geometry.Translate node. This method should prove much faster than Element.Copy, Doc.DeleteElements - Attempts to delete the input revit elements and returns the number of successfully deleted elements. Carefully observe the deleted elements count. It may be greater than the input list because hosted elements or tags will be deleted as well., Element.Copy - Copy the input Revit elements with the help of a translation vector, similarly to the Geometry.Translate node., Element.SetLocation - Attempts to modify the location of the input element. This can effectively add as a move comand in Revit. Works for both line based and point based elements., FamilyType.Duplicate - Create duplicate family types with the specified name. If the type exists, it is called., File.Size - Checks the file size. Provide a file path as a string., Filter.ByCategoryName - Filters the input elements by their category name. You can input multiple category names., Filter.ByClassName - Filters a list of objects by the object's class name. Note that Dynamo elements belong to different classes than their Revit counterparts. Use the Object.Class node to check an object's class., Floor-WallType.SetMaterial - Sets a new material to the structural core of the provided floor and wall types., FloorOpening.ByCurves - Create hosted floor opeinngs through the input floors. The second input is a list of sub-lists of the boundary curves., FloorType.Duplicate - Attemts to create duplicate floor types. If the floor type exists, it is appended to the end. Sets only the structural width of the floor. The width must be in feet., Fn.ElementsOfCategory - Same as the built in \"All Elements of Category\" but can act as a function object., Form.ByGeometry(SAT) - Attempts to convert the input geometry to a Revit Form object. Forms can exist only in the family environment. You can convert complicated solids or surfaces directly into forms. Solids can be converted into voids. Provide either one true boolean to convert everything into voids or a unique boolean for each geometry object. This node works in millimeters., Form.ByGeometry - Attempts to convert the input geometry to a Revit Form object. Forms can exist only in the family environment. You can convert complicated solids or surfaces directly into forms. Solids can be converted into voids. Provide either one true boolean to convert everything into voids or a unique boolean for each geometry object., Geometry.SplitRecursively - Splits a surface or a solid recursively, using the resulting reduced geometry for every next split., HostedInstanceByPoints - Creates hosted family instances(doors/windows) at the specified points. You can feed either a single family type or a unique type for each instance., Input.Wait - Waits for all inputs to be completed before continuing the execution process.Part of the SmartCopyMon workflow., Lines.Group&FixCorners - Groups unconnected lines into sub-lists by margin(the maximum distance between endpoints) and attempts to create clean corner connections between them. Built on top of the Group curves node found in archi-lab.net., List.DropFirstLast - Removes the first and last items from the list, List.DropLast - Removes the last value of the list., List.GetEven - Gets even indices from the list., List.GetOdd - Gets the odd indices from the list., List.Randomise&Divide - Shiffles the input list and divides it into sub-lists based on ratios(1/4 + 1/2 + 1/4 will give you three lists split accordingly) The smalest ratio will always be 1 / the list length and the largest ratio will be 1. A seed input can shuffle the list further., List.ShiftIndices+ - The built in node fails if the shift number is greater than the lenght of the list. This node acts as a work-around., Ln2Str - Serilize a geometry line to a string for use in Revit parameters, Math.AlmostEqual - Checks if a number is almost equal to a value with a specified tollerance., NullAllIndicesOf - list all of the indices of a list that match the specified value. Capable of handling null values, part of the SmartCopyMonitor workflow., NullGetParameter - Similar to the built in node.Capable of handling null values, part of the SmartCopyMonitor workflow., NullIndexOf - Similar to the bult-in node but provides a null value instead of -1 of failure. Part of the SmartCopyMonitor workflow., NullReorder - Simiar to the built-in function with the difference that it can handle null indices. Part of the SmartCopyMonitor workflow., NullSetDifference - Similar to the built in node, with a built-in safety for null values. Part of the SmartCopyMonitor workflow., NullSetParameter - Similar to the built-in function but with the ability to handle null values. Part of the SmartCopyMon workflow., Number.ToString - Converts the input number(s) to string. Can process lists., Object.Class - Gets the input object's class name. Can process lists., Pt2Str - Serilize a geometry point to a string for use in Revit parameters, Select Linked Element - Select the linked instance first, followed by the element. If your selection fails, just press escape.\r\nTo refresh the node, connect a boolean switch node., Select Linked Elements - Select the linked instance first, followed by the elements. To finish the selection, press Finish. If your selection fails, just press escape or Cancel.\r\nTo refresh the node, connect a boolean switch node., SelectInRevit - Selects the input elements in Revit. Works with Revit 2016., Shaft.ByCurves - Creates a shaft opening. The top level MUST be higher than the base level for a successful execution. You can either provide one base and top level for all shafts or have unique levels for each shaft instance., Sheet.Views+ - Extracts all views placed on the input sheet(s).  Will be depreciated once the bult in node works with all plan types., Star.ByCenterRadiusRays - Fun little node to create star shapes., Str2Ln - De-serilize a Revit parameter string into a geometric line., Str2Pt - De-serilize a Revit parameter string into a geometric point., Topography.ToPolySurface - Optimized algorithm for converting topographies into polysurfaces. Tested with topographies containing up to 40 000 points. \r\nWarning conversions of such mangitudes consume a lot of resources and are sub-optimal. Ensure that you have plenty at least 8GB of ram and patience before attempting such a conversion, otherwise your Dynamo and Revit instances may crash., ViewSet.ByViewsName - Creates a set of views(or sheets) for printing. If the set exists, set Overwrite to true to replace it., Wall.WallType - Queries the wall type of the input wall. Works for types from linked documents as well., WallType.Duplicate - Attemts to create duplicate wall types. If the wall type exists, it is appended to the end. Sets only the structural width of the wall. The width must be in feet.","engine_metadata":"","engine_version":"0.8.2.2392","created":"2015-10-03T10:41:09.995Z","full_dependency_versions":["82.3.0"],"full_dependency_ids":[{"_id":"56077cf3662bf0e9080001ea","name":"spring nodes"}],"direct_dependency_versions":[],"direct_dependency_ids":[],"change_log":"","version":"82.3.0"},{"_id":"5610c438662bf0e908000226","contains_binaries":false,"node_libraries":[],"url_with_deps":"","url":"https://s3.amazonaws.com/greg-pkgs-dev/428beb5e-3ce6-409d-bff0-9504bc11ba26gregPkg819.zip","contents":"Active View - Selects the current document's active view. Supports more view types, Beams.FixExtents - Detects all beams from the input list with broken extents(actual length - cut length <  margin) and attemts to correct them., BoundingBox.Scale - Scales the bounding box in three dimensions according to it's center., Collector.CurrentSelection - Gets the currently selected elements. Connect a boolean switch to refresh the selection. Compatible with Revit 2016, Collector.ElementsInView - Selects all elements visible in the input view., Collector.FamilyInstances - Collects placed family instance elements from the document that match the name. Partially mathing elements are collected as well. If no matches are found, a list of all isntance names will be output., Collector.FamilyTypes - Collects non-system family types that fully match or partially match the provided names. If no matches are found, a list of all type names will be output., Collector.FloorTypes - Collects Floor types by name., Collector.LinkedInstanceElements - Extract elements by category from the selected linked instances. The transform vector can be used to get the exact location of the elements in the local file, Collector.Revisions - Collects all revisions from a specific date., Collector.Sheets - Search for sheets by either their name or their number. Use a false boolean switch to search by number., Collector.Views - Search for views based on naming. You can choose to either include or exclude schedules. Use the sheet collector for sheets., Collector.WallTypes - Collects wall types by name., Dictionary.ByKeysValues - Dictionaries are an incredibly powerful tool for making associative sets between two equal length lists. The fitst list must be of unique strings (or numbers) and will be the key and the second list will be the matching values (it can be made up of geometry, elements, even other lists)\r\nThe search keys list will provide the coresponding value to the input key., DirectShape.ByGeometry(SAT) - Attempts to create a DirectShape element inside the Revit document.  It is based on an alternative process that uses a SAT inport and can produce smooth surfaces. Each created DS will have a unique type. Make sure that each input geometry has a unique name. You can either feed a single category for all geometries or a unique category for each geometry. This node works in millimeters., DirectShape.ByGeometry - Attempts to create a DirectShape element inside the Revit document.  It is based on an alternative process that uses a SAT inport and can produce smooth surfaces. Each created DS will have a unique type. Make sure that each input geometry has a unique name. You can either feed a single category for all geometries or a unique category for each geometry., DirectShape.Transform - Copy the input DirectShape element with the help of a translation vector, similarly to the Geometry.Translate node. This method should prove much faster than Element.Copy, Doc.DeleteElements - Attempts to delete the input revit elements and returns the number of successfully deleted elements. Carefully observe the deleted elements count. It may be greater than the input list because hosted elements or tags will be deleted as well., Element.Copy - Copy the input Revit elements with the help of a translation vector, similarly to the Geometry.Translate node., Element.SetLocation - Attempts to modify the location of the input element. This can effectively add as a move comand in Revit. Works for both line based and point based elements., FamilyType.Duplicate - Create duplicate family types with the specified name. If the type exists, it is called., Feet2Fraction - Converts a decimal foot value to a fractional foot/inch string., File.Size - Checks the file size. Provide a file path as a string., Filter.ByCategoryName - Filters the input elements by their category name. You can input multiple category names., Filter.ByClassName - Filters a list of objects by the object's class name. Note that Dynamo elements belong to different classes than their Revit counterparts. Use the Object.Class node to check an object's class., Floor-WallType.SetMaterial - Sets a new material to the structural core of the provided floor and wall types., FloorOpening.ByCurves - Create hosted floor opeinngs through the input floors. The second input is a list of sub-lists of the boundary curves., FloorType.Duplicate - Attemts to create duplicate floor types. If the floor type exists, it is appended to the end. Sets only the structural width of the floor. The width must be in feet., Fn.ElementsOfCategory - Same as the built in \"All Elements of Category\" but can act as a function object., Form.ByGeometry(SAT) - Attempts to convert the input geometry to a Revit Form object. Forms can exist only in the family environment. You can convert complicated solids or surfaces directly into forms. Solids can be converted into voids. Provide either one true boolean to convert everything into voids or a unique boolean for each geometry object. This node works in millimeters., Form.ByGeometry - Attempts to convert the input geometry to a Revit Form object. Forms can exist only in the family environment. You can convert complicated solids or surfaces directly into forms. Solids can be converted into voids. Provide either one true boolean to convert everything into voids or a unique boolean for each geometry object., Fraction2Feet - Converts a fractioned feet /inch string value into a decimal foot value., Geometry.SplitRecursively - Splits a surface or a solid recursively, using the resulting reduced geometry for every next split., HostedInstanceByPoints - Creates hosted family instances(doors/windows) at the specified points. You can feed either a single family type or a unique type for each instance., Input.Wait - Waits for all inputs to be completed before continuing the execution process.Part of the SmartCopyMon workflow., Lines.Group&FixCorners - Groups unconnected lines into sub-lists by margin(the maximum distance between endpoints) and attempts to create clean corner connections between them. Built on top of the Group curves node found in archi-lab.net., List.DropFirstLast - Removes the first and last items from the list, List.DropLast - Removes the last value of the list., List.GetEven - Gets even indices from the list., List.GetOdd - Gets the odd indices from the list., List.Randomise&Divide - Shiffles the input list and divides it into sub-lists based on ratios(1/4 + 1/2 + 1/4 will give you three lists split accordingly) The smalest ratio will always be 1 / the list length and the largest ratio will be 1. A seed input can shuffle the list further., List.ShiftIndices+ - The built in node fails if the shift number is greater than the lenght of the list. This node acts as a work-around., Ln2Str - Serilize a geometry line to a string for use in Revit parameters, Math.AlmostEqual - Checks if a number is almost equal to a value with a specified tollerance., NullAllIndicesOf - list all of the indices of a list that match the specified value. Capable of handling null values, part of the SmartCopyMonitor workflow., NullGetParameter - Similar to the built in node.Capable of handling null values, part of the SmartCopyMonitor workflow., NullIndexOf - Similar to the bult-in node but provides a null value instead of -1 of failure. Part of the SmartCopyMonitor workflow., NullReorder - Simiar to the built-in function with the difference that it can handle null indices. Part of the SmartCopyMonitor workflow., NullSetDifference - Similar to the built in node, with a built-in safety for null values. Part of the SmartCopyMonitor workflow., NullSetParameter - Similar to the built-in function but with the ability to handle null values. Part of the SmartCopyMon workflow., Number.ToString - Converts the input number(s) to string. Can process lists., Object.Class - Gets the input object's class name. Can process lists., Pt2Str - Serilize a geometry point to a string for use in Revit parameters, Select Linked Element - Select the linked instance first, followed by the element. If your selection fails, just press escape.\r\nTo refresh the node, connect a boolean switch node., Select Linked Elements - Select the linked instance first, followed by the elements. To finish the selection, press Finish. If your selection fails, just press escape or Cancel.\r\nTo refresh the node, connect a boolean switch node., SelectInRevit - Selects the input elements in Revit. Works with Revit 2016., Shaft.ByCurves - Creates a shaft opening. The top level MUST be higher than the base level for a successful execution. You can either provide one base and top level for all shafts or have unique levels for each shaft instance., Sheet.Views+ - Extracts all views placed on the input sheet(s).  Will be depreciated once the bult in node works with all plan types., Star.ByCenterRadiusRays - Fun little node to create star shapes., Str2Ln - De-serilize a Revit parameter string into a geometric line., Str2Pt - De-serilize a Revit parameter string into a geometric point., Topography.ToPolySurface - Optimized algorithm for converting topographies into polysurfaces. Tested with topographies containing up to 40 000 points. \r\nWarning conversions of such mangitudes consume a lot of resources and are sub-optimal. Ensure that you have plenty at least 8GB of ram and patience before attempting such a conversion, otherwise your Dynamo and Revit instances may crash., ViewSet.ByViewsName - Creates a set of views(or sheets) for printing. If the set exists, set Overwrite to true to replace it., Wall.WallType - Queries the wall type of the input wall. Works for types from linked documents as well., WallType.Duplicate - Attemts to create duplicate wall types. If the wall type exists, it is appended to the end. Sets only the structural width of the wall. The width must be in feet.","engine_metadata":"","engine_version":"0.8.2.2392","created":"2015-10-04T06:16:24.313Z","full_dependency_versions":["82.3.1"],"full_dependency_ids":[{"_id":"56077cf3662bf0e9080001ea","name":"spring nodes"}],"direct_dependency_versions":[],"direct_dependency_ids":[],"change_log":"","version":"82.3.1"},{"_id":"561206ff662bf0e90800022b","contains_binaries":false,"node_libraries":[],"url_with_deps":"","url":"https://s3.amazonaws.com/greg-pkgs-dev/10faf11f-5bd3-44a4-953d-bb36930e211dgregPkg141.zip","contents":"Active View - Selects the current document's active view. Supports more view types, Beams.FixExtents - Detects all beams from the input list with broken extents(actual length - cut length <  margin) and attemts to correct them., BoundingBox.Scale - Scales the bounding box in three dimensions according to it's center., Collector.CurrentSelection - Gets the currently selected elements. Connect a boolean switch to refresh the selection. Compatible with Revit 2016, Collector.ElementsInView - Selects all elements visible in the input view., Collector.FamilyInstances - Collects placed family instance elements from the document that match the name. Partially mathing elements are collected as well. If no matches are found, a list of all isntance names will be output., Collector.FamilyTypes - Collects non-system family types that fully match or partially match the provided names. If no matches are found, a list of all type names will be output., Collector.FloorTypes - Collects Floor types by name., Collector.LinkedInstanceElements - Extract elements by category from the selected linked instances. The transform vector can be used to get the exact location of the elements in the local file, Collector.Revisions - Collects all revisions from a specific date., Collector.Sheets - Search for sheets by either their name or their number. Use a false boolean switch to search by number., Collector.Views - Search for views based on naming. You can choose to either include or exclude schedules. Use the sheet collector for sheets., Collector.WallTypes - Collects wall types by name., Color2Decimal - Converts a Dynamo colour its Revit equivalent  decimal value., Decimal2Color - Converts a revit colour decimal value to its Dynamo equivalent., Dictionary.ByKeysValues - Dictionaries are an incredibly powerful tool for making associative sets between two equal length lists. The fitst list must be of unique strings (or numbers) and will be the key and the second list will be the matching values (it can be made up of geometry, elements, even other lists)\r\nThe search keys list will provide the coresponding value to the input key., DirectShape.ByGeometry(SAT) - Attempts to create a DirectShape element inside the Revit document.  It is based on an alternative process that uses a SAT inport and can produce smooth surfaces. Each created DS will have a unique type. Make sure that each input geometry has a unique name. You can either feed a single category for all geometries or a unique category for each geometry. This node works in millimeters., DirectShape.ByGeometry - Attempts to create a DirectShape element inside the Revit document.  It is based on an alternative process that uses a SAT inport and can produce smooth surfaces. Each created DS will have a unique type. Make sure that each input geometry has a unique name. You can either feed a single category for all geometries or a unique category for each geometry., DirectShape.Transform - Copy the input DirectShape element with the help of a translation vector, similarly to the Geometry.Translate node. This method should prove much faster than Element.Copy, Doc.DeleteElements - Attempts to delete the input revit elements and returns the number of successfully deleted elements. Carefully observe the deleted elements count. It may be greater than the input list because hosted elements or tags will be deleted as well., Element.Copy - Copy the input Revit elements with the help of a translation vector, similarly to the Geometry.Translate node., Element.SetLocation - Attempts to modify the location of the input element. This can effectively add as a move comand in Revit. Works for both line based and point based elements., FamilyType.Duplicate - Create duplicate family types with the specified name. If the type exists, it is called., Feet2Fraction - Converts a decimal foot value to a fractional foot/inch string., File.Size - Checks the file size. Provide a file path as a string., Filter.ByCategoryName - Filters the input elements by their category name. You can input multiple category names., Filter.ByClassName - Filters a list of objects by the object's class name. Note that Dynamo elements belong to different classes than their Revit counterparts. Use the Object.Class node to check an object's class., Floor-WallType.SetMaterial - Sets a new material to the structural core of the provided floor and wall types., FloorOpening.ByCurves - Create hosted floor opeinngs through the input floors. The second input is a list of sub-lists of the boundary curves., FloorType.Duplicate - Attemts to create duplicate floor types. If the floor type exists, it is appended to the end. Sets only the structural width of the floor. The width must be in feet., Fn.ElementsOfCategory - Same as the built in \"All Elements of Category\" but can act as a function object., Form.ByGeometry(SAT) - Attempts to convert the input geometry to a Revit Form object. Forms can exist only in the family environment. You can convert complicated solids or surfaces directly into forms. Solids can be converted into voids. Provide either one true boolean to convert everything into voids or a unique boolean for each geometry object. This node works in millimeters., Form.ByGeometry - Attempts to convert the input geometry to a Revit Form object. Forms can exist only in the family environment. You can convert complicated solids or surfaces directly into forms. Solids can be converted into voids. Provide either one true boolean to convert everything into voids or a unique boolean for each geometry object., Fraction2Feet - Converts a fractioned feet /inch string value into a decimal foot value., Geometry.SplitRecursively - Splits a surface or a solid recursively, using the resulting reduced geometry for every next split., HostedInstanceByPoints - Creates hosted family instances(doors/windows) at the specified points. You can feed either a single family type or a unique type for each instance., Input.Wait - Waits for all inputs to be completed before continuing the execution process.Part of the SmartCopyMon workflow., Lines.Group&FixCorners - Groups unconnected lines into sub-lists by margin(the maximum distance between endpoints) and attempts to create clean corner connections between them. Built on top of the Group curves node found in archi-lab.net., List.DropFirstLast - Removes the first and last items from the list, List.DropLast - Removes the last value of the list., List.GetEven - Gets even indices from the list., List.GetOdd - Gets the odd indices from the list., List.Randomise&Divide - Shiffles the input list and divides it into sub-lists based on ratios(1/4 + 1/2 + 1/4 will give you three lists split accordingly) The smalest ratio will always be 1 / the list length and the largest ratio will be 1. A seed input can shuffle the list further., List.ShiftIndices+ - The built in node fails if the shift number is greater than the lenght of the list. This node acts as a work-around., Ln2Str - Serilize a geometry line to a string for use in Revit parameters, Math.AlmostEqual - Checks if a number is almost equal to a value with a specified tollerance., NullAllIndicesOf - list all of the indices of a list that match the specified value. Capable of handling null values, part of the SmartCopyMonitor workflow., NullGetParameter - Similar to the built in node.Capable of handling null values, part of the SmartCopyMonitor workflow., NullIndexOf - Similar to the bult-in node but provides a null value instead of -1 of failure. Part of the SmartCopyMonitor workflow., NullReorder - Simiar to the built-in function with the difference that it can handle null indices. Part of the SmartCopyMonitor workflow., NullSetDifference - Similar to the built in node, with a built-in safety for null values. Part of the SmartCopyMonitor workflow., NullSetParameter - Similar to the built-in function but with the ability to handle null values. Part of the SmartCopyMon workflow., Number.ToString - Converts the input number(s) to string. Can process lists., Object.Class - Gets the input object's class name. Can process lists., Pt2Str - Serilize a geometry point to a string for use in Revit parameters, Select Linked Element - Select the linked instance first, followed by the element. If your selection fails, just press escape.\r\nTo refresh the node, connect a boolean switch node., Select Linked Elements - Select the linked instance first, followed by the elements. To finish the selection, press Finish. If your selection fails, just press escape or Cancel.\r\nTo refresh the node, connect a boolean switch node., SelectInRevit - Selects the input elements in Revit. Works with Revit 2016., Shaft.ByCurves - Creates a shaft opening. The top level MUST be higher than the base level for a successful execution. You can either provide one base and top level for all shafts or have unique levels for each shaft instance., Sheet.Views+ - Extracts all views placed on the input sheet(s).  Will be depreciated once the bult in node works with all plan types., Star.ByCenterRadiusRays - Fun little node to create star shapes., Str2Ln - De-serilize a Revit parameter string into a geometric line., Str2Pt - De-serilize a Revit parameter string into a geometric point., Topography.ToPolySurface - Optimized algorithm for converting topographies into polysurfaces. Tested with topographies containing up to 40 000 points. \r\nWarning conversions of such mangitudes consume a lot of resources and are sub-optimal. Ensure that you have plenty at least 8GB of ram and patience before attempting such a conversion, otherwise your Dynamo and Revit instances may crash., ViewSet.ByViewsName - Creates a set of views(or sheets) for printing. If the set exists, set Overwrite to true to replace it., Wall.WallType - Queries the wall type of the input wall. Works for types from linked documents as well., WallType.Duplicate - Attemts to create duplicate wall types. If the wall type exists, it is appended to the end. Sets only the structural width of the wall. The width must be in feet.","engine_metadata":"","engine_version":"0.8.2.2392","created":"2015-10-05T05:13:35.009Z","full_dependency_versions":["82.3.2"],"full_dependency_ids":[{"_id":"56077cf3662bf0e9080001ea","name":"spring nodes"}],"direct_dependency_versions":[],"direct_dependency_ids":[],"change_log":"","version":"82.3.2"},{"_id":"56371f78662bf0e9080002d5","contains_binaries":false,"node_libraries":[],"url_with_deps":"","url":"https://s3.amazonaws.com/greg-pkgs-dev/a932b18a-4d72-4890-bf42-b33ef78cec29gregPkg532.zip","contents":"Active View - Selects the current document's active view. Supports more view types, Beams.FixExtents - Detects all beams from the input list with broken extents(actual length - cut length <  margin) and attemts to correct them., BoundingBox.Scale - Scales the bounding box in three dimensions according to it's center., Collector.CurrentSelection - Gets the currently selected elements. Connect a boolean switch to refresh the selection. Compatible with Revit 2016, Collector.ElementsInView - Selects all elements visible in the input view., Collector.FamilyInstances - Collects placed family instance elements from the document that match the name. Partially mathing elements are collected as well. If no matches are found, a list of all isntance names will be output., Collector.FamilyTypes - Collects non-system family types that fully match or partially match the provided names. If no matches are found, a list of all type names will be output., Collector.FloorTypes - Collects Floor types by name., Collector.LinkedInstanceElements - Extract elements by category from the selected linked instances. The transform vector can be used to get the exact location of the elements in the local file, Collector.Revisions - Collects all revisions from a specific date., Collector.Sheets - Search for sheets by either their name or their number. Use a false boolean switch to search by number., Collector.Views - Search for views based on naming. You can choose to either include or exclude schedules. Use the sheet collector for sheets., Collector.WallTypes - Collects wall types by name., Color2Decimal - Converts a Dynamo colour its Revit equivalent  decimal value., CurveLoop.Simplify - Attempts to simplify an open or a closed curve loop by connecting straight separate line segments into a single line., Decimal2Color - Converts a revit colour decimal value to its Dynamo equivalent., Dictionary.ByKeysValues - Dictionaries are an incredibly powerful tool for making associative sets between two equal length lists. The fitst list must be of unique strings (or numbers) and will be the key and the second list will be the matching values (it can be made up of geometry, elements, even other lists)\r\nThe search keys list will provide the coresponding value to the input key., DirectShape.ByGeometry(SAT) - Attempts to create a DirectShape element inside the Revit document.  It is based on an alternative process that uses a SAT inport and can produce smooth surfaces. Each created DS will have a unique type. Make sure that each input geometry has a unique name. You can either feed a single category for all geometries or a unique category for each geometry. This node works in millimeters., DirectShape.ByGeometry - Attempts to create a DirectShape element inside the Revit document.  It is based on an alternative process that uses a SAT inport and can produce smooth surfaces. Each created DS will have a unique type. Make sure that each input geometry has a unique name. You can either feed a single category for all geometries or a unique category for each geometry., DirectShape.Transform - Copy the input DirectShape element with the help of a translation vector, similarly to the Geometry.Translate node. This method should prove much faster than Element.Copy, Doc.DeleteElements - Attempts to delete the input revit elements and returns the number of successfully deleted elements. Carefully observe the deleted elements count. It may be greater than the input list because hosted elements or tags will be deleted as well., Element.Copy - Copy the input Revit elements with the help of a translation vector, similarly to the Geometry.Translate node., Element.SetLocation - Attempts to modify the location of the input element. This can effectively add as a move comand in Revit. Works for both line based and point based elements., FamilyInstance.Rotation - Fetches the angle of rotation around the insertion point of a point based element. The angle is always measured counter-clockwise., FamilyType.Duplicate - Create duplicate family types with the specified name. If the type exists, it is called., Feet2Fraction - Converts a decimal foot value to a fractional foot/inch string., File.Size - Checks the file size. Provide a file path as a string., Filter.ByCategoryName - Filters the input elements by their category name. You can input multiple category names., Filter.ByClassName - Filters a list of objects by the object's class name. Note that Dynamo elements belong to different classes than their Revit counterparts. Use the Object.Class node to check an object's class., Floor-WallType.SetMaterial - Sets a new material to the structural core of the provided floor and wall types., FloorOpening.ByCurves - Create hosted floor opeinngs through the input floors. The second input is a list of sub-lists of the boundary curves., FloorType.Duplicate - Attemts to create duplicate floor types. If the floor type exists, it is appended to the end. Sets only the structural width of the floor. The width must be in feet., Fn.ElementsOfCategory - Same as the built in \"All Elements of Category\" but can act as a function object., Form.ByGeometry(SAT) - Attempts to convert the input geometry to a Revit Form object. Forms can exist only in the family environment. You can convert complicated solids or surfaces directly into forms. Solids can be converted into voids. Provide either one true boolean to convert everything into voids or a unique boolean for each geometry object. This node works in millimeters., Form.ByGeometry - Attempts to convert the input geometry to a Revit Form object. Forms can exist only in the family environment. You can convert complicated solids or surfaces directly into forms. Solids can be converted into voids. Provide either one true boolean to convert everything into voids or a unique boolean for each geometry object., Fraction2Feet - Converts a fractioned feet /inch string value into a decimal foot value., Geometry.SplitRecursively - Splits a surface or a solid recursively, using the resulting reduced geometry for every next split., HostedInstance.ByPoints - Creates hosted family instances(doors/windows) at the specified points. You can feed either a single family type or a unique type for each instance., Input.Wait - Waits for all inputs to be completed before continuing the execution process.Part of the SmartCopyMon workflow., Lines.Group&FixCorners - Groups unconnected lines into sub-lists by margin(the maximum distance between endpoints) and attempts to create clean corner connections between them. Built on top of the Group curves node found in archi-lab.net., List.DropFirstLast - Removes the first and last items from the list, List.DropLast - Removes the last value of the list., List.EveryOther - Useful for when you want to combine an item on the list with every other item on the list. For example in list {1,2,3} , \"2\" will be paired up only with \"1\" and \"3\" and will not be paired up with itself., List.GetEven - Gets even indices from the list., List.GetOdd - Gets the odd indices from the list., List.Randomise&Divide - Shiffles the input list and divides it into sub-lists based on ratios(1/4 + 1/2 + 1/4 will give you three lists split accordingly) The smalest ratio will always be 1 / the list length and the largest ratio will be 1. A seed input can shuffle the list further., List.ShiftIndices+ - The built in node fails if the shift number is greater than the lenght of the list. This node acts as a work-around., Ln2Str - Serilize a geometry line to a string for use in Revit parameters, Math.AlmostEqual - Checks if a number is almost equal to a value with a specified tollerance., NullAllIndicesOf - list all of the indices of a list that match the specified value. Capable of handling null values, part of the SmartCopyMonitor workflow., NullGetParameter - Similar to the built in node.Capable of handling null values, part of the SmartCopyMonitor workflow., NullIndexOf - Similar to the bult-in node but provides a null value instead of -1 of failure. Part of the SmartCopyMonitor workflow., NullReorder - Simiar to the built-in function with the difference that it can handle null indices. Part of the SmartCopyMonitor workflow., NullSetDifference - Similar to the built in node, with a built-in safety for null values. Part of the SmartCopyMonitor workflow., NullSetParameter - Similar to the built-in function but with the ability to handle null values. Part of the SmartCopyMon workflow., Number.ToString - Converts the input number(s) to string. Can process lists., Object.Class - Gets the input object's class name. Can process lists., Pt2Str - Serilize a geometry point to a string for use in Revit parameters, Select Linked Element - Select the linked instance first, followed by the element. If your selection fails, just press escape.\r\nTo refresh the node, connect a boolean switch node., Select Linked Elements - Select the linked instance first, followed by the elements. To finish the selection, press Finish. If your selection fails, just press escape or Cancel.\r\nTo refresh the node, connect a boolean switch node., SelectInRevit - Selects the input elements in Revit. Works with Revit 2016., Shaft.ByCurves - Creates a shaft opening. The top level MUST be higher than the base level for a successful execution. You can either provide one base and top level for all shafts or have unique levels for each shaft instance., Sheet.Views+ - Extracts all views placed on the input sheet(s).  Will be depreciated once the bult in node works with all plan types., Star.ByCenterRadiusRays - Fun little node to create star shapes., Str2Ln - De-serilize a Revit parameter string into a geometric line., Str2Pt - De-serilize a Revit parameter string into a geometric point., Topography.ToPolySurface - Optimized algorithm for converting topographies into polysurfaces. Tested with topographies containing up to 40 000 points. \r\nWarning conversions of such mangitudes consume a lot of resources and are sub-optimal. Ensure that you have plenty at least 8GB of ram and patience before attempting such a conversion, otherwise your Dynamo and Revit instances may crash., ViewSet.ByViewsName - Creates a set of views(or sheets) for printing. If the set exists, set Overwrite to true to replace it., Wall.WallType - Queries the wall type of the input wall. Works for types from linked documents as well., WallType.Duplicate - Attemts to create duplicate wall types. If the wall type exists, it is appended to the end. Sets only the structural width of the wall. The width must be in feet.","engine_metadata":"","engine_version":"0.8.2.2392","created":"2015-11-02T08:31:52.986Z","full_dependency_versions":["82.3.3"],"full_dependency_ids":[{"_id":"56077cf3662bf0e9080001ea","name":"spring nodes"}],"direct_dependency_versions":[],"direct_dependency_ids":[],"change_log":"","version":"82.3.3"},{"_id":"56443b2e662bf0e908000323","contains_binaries":false,"node_libraries":[],"url_with_deps":"","url":"https://s3.amazonaws.com/greg-pkgs-dev/484b14bd-7e83-43a7-b92b-888d3d1c0417gregPkg545.zip","contents":"Active View - Selects the current document's active view. Supports more view types, Beams.FixExtents - Detects all beams from the input list with broken extents(actual length - cut length <  margin) and attemts to correct them., BoundingBox.Scale - Scales the bounding box in three dimensions according to it's center., Collector.CurrentSelection - Gets the currently selected elements. Connect a boolean switch to refresh the selection. Compatible with Revit 2016, Collector.ElementsInView - Selects all elements visible in the input view., Collector.FamilyInstances - Collects placed family instance elements from the document that match the name. Partially mathing elements are collected as well. If no matches are found, a list of all isntance names will be output., Collector.FamilyTypes - Collects non-system family types that fully match or partially match the provided names. If no matches are found, a list of all type names will be output., Collector.FloorTypes - Collects Floor types by name., Collector.LinkedInstanceElements - Extract elements by category from the selected linked instances. The transform vector can be used to get the exact location of the elements in the local file, Collector.Revisions - Collects all revisions from a specific date., Collector.Sheets - Search for sheets by either their name or their number. Use a false boolean switch to search by number., Collector.Views - Search for views based on naming. You can choose to either include or exclude schedules. Use the sheet collector for sheets., Collector.WallTypes - Collects wall types by name., Color2Decimal - Converts a Dynamo colour its Revit equivalent  decimal value., CurveLoop.Simplify - Attempts to simplify an open or a closed curve loop by connecting straight separate line segments into a single line., Decimal2Color - Converts a revit colour decimal value to its Dynamo equivalent., Dictionary.ByKeysValues - Dictionaries are an incredibly powerful tool for making associative sets between two equal length lists. The fitst list must be of unique strings (or numbers) and will be the key and the second list will be the matching values (it can be made up of geometry, elements, even other lists)\r\nThe search keys list will provide the coresponding value to the input key., DirectShape.ByGeometry - Convert the input geometry to DirectShape element inside the Revit document.  It supports solids or surfaces.It is based on an alternative process that uses a SAT import and can produce smooth surfaces. Each created DS will have a unique type. Make sure that each input geometry has a unique name. You can either feed a single category for all geometries or a unique category for each geometry - the node's lacing is set to longest by default., DirectShape.Transform - Copy the input DirectShape element with the help of a translation vector, similarly to the Geometry.Translate node. This method should prove much faster than Element.Copy, Doc.DeleteElements - Attempts to delete the input revit elements and returns the number of successfully deleted elements. Carefully observe the deleted elements count. It may be greater than the input list because hosted elements or tags will be deleted as well., Element.Copy - Copy the input Revit elements with the help of a translation vector, similarly to the Geometry.Translate node., Element.SetLocation - Attempts to modify the location of the input element. This can effectively add as a move comand in Revit. Works for both line based and point based elements., FamilyInstance.Rotation - Fetches the angle of rotation around the insertion point of a point based element. The angle is always measured counter-clockwise., FamilyType.Duplicate - Create duplicate family types with the specified name. If the type exists, it is called., Feet2Fraction - Converts a decimal foot value to a fractional foot/inch string., File.Size - Checks the file size. Provide a file path as a string., Filter.ByCategoryName - Filters the input elements by their category name. You can input multiple category names., Filter.ByClassName - Filters a list of objects by the object's class name. Note that Dynamo elements belong to different classes than their Revit counterparts. Use the Object.Class node to check an object's class., Floor-WallType.SetMaterial - Sets a new material to the structural core of the provided floor and wall types., FloorOpening.ByCurves - Create hosted floor opeinngs through the input floors. The second input is a list of sub-lists of the boundary curves., FloorType.Duplicate - Attemts to create duplicate floor types. If the floor type exists, it is appended to the end. Sets only the structural width of the floor. The width must be in feet., Fn.ElementsOfCategory - Same as the built in \"All Elements of Category\" but can act as a function object., Form.ByGeometry - Convert the input geometry to a Revit Form object. Forms can exist only in the family environment. You can convert complicated solids or surfaces directly into forms. A form can act as a void. Provide either one true boolean value to convert a form into a void. The node's lacing is set to longest by default., Fraction2Feet - Converts a fractioned feet /inch string value into a decimal foot value., Geometry.SplitRecursively - Splits a surface or a solid recursively, using the resulting reduced geometry for every next split., HostedInstance.ByPoints - Creates hosted family instances(doors/windows) at the specified points. You can feed either a single family type or a unique type for each instance., Input.Wait - Waits for all inputs to be completed before continuing the execution process.Part of the SmartCopyMon workflow., Lines.Group&FixCorners - Groups unconnected lines into sub-lists by margin(the maximum distance between endpoints) and attempts to create clean corner connections between them. Built on top of the Group curves node found in archi-lab.net., List.DropFirstLast - Removes the first and last items from the list, List.DropLast - Removes the last value of the list., List.EveryOther - Useful for when you want to combine an item on the list with every other item on the list. For example in list {1,2,3} , \"2\" will be paired up only with \"1\" and \"3\" and will not be paired up with itself., List.GetEven - Gets even indices from the list., List.GetOdd - Gets the odd indices from the list., List.Randomise&Divide - Shiffles the input list and divides it into sub-lists based on ratios(1/4 + 1/2 + 1/4 will give you three lists split accordingly) The smalest ratio will always be 1 / the list length and the largest ratio will be 1. A seed input can shuffle the list further., List.ShiftIndices+ - The built in node fails if the shift number is greater than the lenght of the list. This node acts as a work-around., Ln2Str - Serilize a geometry line to a string for use in Revit parameters, Math.AlmostEqual - Checks if a number is almost equal to a value with a specified tollerance., NullAllIndicesOf - list all of the indices of a list that match the specified value. Capable of handling null values, part of the SmartCopyMonitor workflow., NullGetParameter - Similar to the built in node.Capable of handling null values, part of the SmartCopyMonitor workflow., NullIndexOf - Similar to the bult-in node but provides a null value instead of -1 of failure. Part of the SmartCopyMonitor workflow., NullReorder - Simiar to the built-in function with the difference that it can handle null indices. Part of the SmartCopyMonitor workflow., NullSetDifference - Similar to the built in node, with a built-in safety for null values. Part of the SmartCopyMonitor workflow., NullSetParameter - Similar to the built-in function but with the ability to handle null values. Part of the SmartCopyMon workflow., Number.ToString - Converts the input number(s) to string. Can process lists., Object.Class - Gets the input object's class name. Can process lists., Pt2Str - Serilize a geometry point to a string for use in Revit parameters, Select Linked Element - Select the linked instance first, followed by the element. If your selection fails, just press escape.\r\nTo refresh the node, connect a boolean switch node., Select Linked Elements - Select the linked instance first, followed by the elements. To finish the selection, press Finish. If your selection fails, just press escape or Cancel.\r\nTo refresh the node, connect a boolean switch node., SelectInRevit - Selects the input elements in Revit. Works with Revit 2016., Shaft.ByCurves - Creates a shaft opening. The top level MUST be higher than the base level for a successful execution. You can either provide one base and top level for all shafts or have unique levels for each shaft instance., Sheet.Views+ - Extracts all views placed on the input sheet(s).  Will be depreciated once the bult in node works with all plan types., Star.ByCenterRadiusRays - Fun little node to create star shapes., Str2Ln - De-serilize a Revit parameter string into a geometric line., Str2Pt - De-serilize a Revit parameter string into a geometric point., Topography.ToPolySurface - Optimized algorithm for converting topographies into polysurfaces. Tested with topographies containing up to 40 000 points. \r\nWarning conversions of such mangitudes consume a lot of resources and are sub-optimal. Ensure that you have plenty at least 8GB of ram and patience before attempting such a conversion, otherwise your Dynamo and Revit instances may crash., ViewSet.ByViewsName - Creates a set of views(or sheets) for printing. If the set exists, set Overwrite to true to replace it., Wall.WallType - Queries the wall type of the input wall. Works for types from linked documents as well., WallType.Duplicate - Attemts to create duplicate wall types. If the wall type exists, it is appended to the end. Sets only the structural width of the wall. The width must be in feet.","engine_metadata":"","engine_version":"0.8.2.2392","created":"2015-11-12T07:09:34.207Z","full_dependency_versions":["82.4.0"],"full_dependency_ids":[{"_id":"56077cf3662bf0e9080001ea","name":"spring nodes"}],"direct_dependency_versions":[],"direct_dependency_ids":[],"change_log":"","version":"82.4.0"},{"_id":"564b3991662bf0e908000345","contains_binaries":false,"node_libraries":[],"url_with_deps":"","url":"https://s3.amazonaws.com/greg-pkgs-dev/58720055-ff13-45d9-bab9-6c86e4f9c669gregPkg886.zip","contents":"Active View - Selects the current document's active view. Supports more view types, Beams.FixExtents - Detects all beams from the input list with broken extents(actual length - cut length <  margin) and attemts to correct them., BoundingBox.Scale - Scales the bounding box in three dimensions according to it's center., Collector.CurrentSelection - Gets the currently selected elements. Connect a boolean switch to refresh the selection. Compatible with Revit 2016, Collector.ElementsInView - Selects all elements visible in the input view., Collector.FamilyInstances - Collects placed family instance elements from the document that match the name. Partially mathing elements are collected as well. If no matches are found, a list of all isntance names will be output., Collector.FamilyTypes - Collects non-system family types that fully match or partially match the provided names. If no matches are found, a list of all type names will be output., Collector.FloorTypes - Collects Floor types by name., Collector.LinkedInstanceElements - Extract elements by category from the selected linked instances. The transform vector can be used to get the exact location of the elements in the local file, Collector.Revisions - Collects all revisions from a specific date., Collector.Sheets - Search for sheets by either their name or their number. Use a false boolean switch to search by number., Collector.Views - Search for views based on naming. You can choose to either include or exclude schedules. Use the sheet collector for sheets., Collector.WallTypes - Collects wall types by name., Color2Decimal - Converts a Dynamo colour its Revit equivalent  decimal value., CurveLoop.Simplify - Attempts to simplify an open or a closed curve loop by connecting straight separate line segments into a single line., Decimal2Color - Converts a revit colour decimal value to its Dynamo equivalent., Dictionary.ByKeysValues - Dictionaries are an incredibly powerful tool for making associative sets between two equal length lists. The fitst list must be of unique strings (or numbers) and will be the key and the second list will be the matching values (it can be made up of geometry, elements, even other lists)\r\nThe search keys list will provide the coresponding value to the input key., DirectShape.ByGeometry - Convert the input geometry to DirectShape element inside the Revit document.  It supports solids or surfaces.It is based on an alternative process that uses a SAT import and can produce smooth surfaces. Each created DS will have a unique type. Make sure that each input geometry has a unique name. You can either feed a single category for all geometries or a unique category for each geometry - the node's lacing is set to longest by default., DirectShape.Transform - Copy the input DirectShape element with the help of a translation vector, similarly to the Geometry.Translate node. This method should prove much faster than Element.Copy, Doc.DeleteElements - Attempts to delete the input revit elements and returns the number of successfully deleted elements. Carefully observe the deleted elements count. It may be greater than the input list because hosted elements or tags will be deleted as well., Element.Copy - Copy the input Revit elements with the help of a translation vector, similarly to the Geometry.Translate node., Element.SetLocation - Attempts to modify the location of the input element. This can effectively add as a move comand in Revit. Works for both line based and point based elements., FamilyInstance.ByGeometry - You must provide a valid family template path that will be used for all input geometry objects. The project units(and not the templates) will be used to determine the size of the output geometry.\r\nThe provided category will be used only if the family template supports it. If not, the default template category will be used instead.\r\nLikewise, the family material(provided as a string) will be set only if a material with that name exists in the template. If not, the default material will be used instead (\"By Category\").\r\nFor void cuts, the material settings will be ignored.\r\nThe output is the resulting family and an instance aligned according to the project document's origin.\r\nThe node expects a unique family name for each geometry object. The rest of the input lists will be processed as if the node lacing is set to longest., FamilyInstance.Rotation - Fetches the angle of rotation around the insertion point of a point based element. The angle is always measured counter-clockwise., FamilyType.Duplicate - Create duplicate family types with the specified name. If the type exists, it is called., Feet2Fraction - Converts a decimal foot value to a fractional foot/inch string., File.Size - Checks the file size. Provide a file path as a string., Filter.ByCategoryName - Filters the input elements by their category name. You can input multiple category names., Filter.ByClassName - Filters a list of objects by the object's class name. Note that Dynamo elements belong to different classes than their Revit counterparts. Use the Object.Class node to check an object's class., Filter.BySelection - Check the items that you'd like to filter in., Floor-WallType.SetMaterial - Sets a new material to the structural core of the provided floor and wall types., FloorOpening.ByCurves - Create hosted floor opeinngs through the input floors. The second input is a list of sub-lists of the boundary curves., FloorType.Duplicate - Attemts to create duplicate floor types. If the floor type exists, it is appended to the end. Sets only the structural width of the floor. The width must be in feet., Fn.ElementsOfCategory - Same as the built in \"All Elements of Category\" but can act as a function object., Form.ByGeometry - Convert the input geometry to a Revit Form object. Forms can exist only in the family environment. You can convert complicated solids or surfaces directly into forms. A form can act as a void. Provide either one true boolean value to convert a form into a void. The node's lacing is set to longest by default., Fraction2Feet - Converts a fractioned feet /inch string value into a decimal foot value., Geometry.SplitRecursively - Splits a surface or a solid recursively, using the resulting reduced geometry for every next split., HostedInstance.ByPoints - Creates hosted family instances(doors/windows) at the specified points. You can feed either a single family type or a unique type for each instance., Input.Wait - Waits for all inputs to be completed before continuing the execution process.Part of the SmartCopyMon workflow., Lines.Group&FixCorners - Groups unconnected lines into sub-lists by margin(the maximum distance between endpoints) and attempts to create clean corner connections between them. Built on top of the Group curves node found in archi-lab.net., List.DropDown - Select one item from the list from a drop-down combo box., List.DropFirstLast - Removes the first and last items from the list, List.DropLast - Removes the last value of the list., List.EveryOther - Useful for when you want to combine an item on the list with every other item on the list. For example in list {1,2,3} , \"2\" will be paired up only with \"1\" and \"3\" and will not be paired up with itself., List.GetEven - Gets even indices from the list., List.GetOdd - Gets the odd indices from the list., List.Randomise&Divide - Shiffles the input list and divides it into sub-lists based on ratios(1/4 + 1/2 + 1/4 will give you three lists split accordingly) The smalest ratio will always be 1 / the list length and the largest ratio will be 1. A seed input can shuffle the list further., List.ShiftIndices+ - The built in node fails if the shift number is greater than the lenght of the list. This node acts as a work-around., Ln2Str - Serilize a geometry line to a string for use in Revit parameters, Math.AlmostEqual - Checks if a number is almost equal to a value with a specified tollerance., N-hedron.ByOriginVector - Creates a multi-sided poyhedron with defined side length and total height., NullAllIndicesOf - list all of the indices of a list that match the specified value. Capable of handling null values, part of the SmartCopyMonitor workflow., NullGetParameter - Similar to the built in node.Capable of handling null values, part of the SmartCopyMonitor workflow., NullIndexOf - Similar to the bult-in node but provides a null value instead of -1 of failure. Part of the SmartCopyMonitor workflow., NullReorder - Simiar to the built-in function with the difference that it can handle null indices. Part of the SmartCopyMonitor workflow., NullSetDifference - Similar to the built in node, with a built-in safety for null values. Part of the SmartCopyMonitor workflow., NullSetParameter - Similar to the built-in function but with the ability to handle null values. Part of the SmartCopyMon workflow., Number.ToString - Converts the input number(s) to string. Can process lists., Object.Class - Gets the input object's class name. Can process lists., Pt2Str - Serilize a geometry point to a string for use in Revit parameters, Select Linked Element - Select the linked instance first, followed by the element. If your selection fails, just press escape.\r\nTo refresh the node, connect a boolean switch node., Select Linked Elements - Select the linked instance first, followed by the elements. To finish the selection, press Finish. If your selection fails, just press escape or Cancel.\r\nTo refresh the node, connect a boolean switch node., SelectInRevit - Selects the input elements in Revit. Works with Revit 2016., Shaft.ByCurves - Creates a shaft opening. The top level MUST be higher than the base level for a successful execution. You can either provide one base and top level for all shafts or have unique levels for each shaft instance., Sheet.Views+ - Extracts all views placed on the input sheet(s).  Will be depreciated once the bult in node works with all plan types., Star.ByCenterRadiusRays - Fun little node to create star shapes., Str2Ln - De-serilize a Revit parameter string into a geometric line., Str2Pt - De-serilize a Revit parameter string into a geometric point., Topography.ToPolySurface - Optimized algorithm for converting topographies into polysurfaces. Tested with topographies containing up to 40 000 points. \r\nWarning conversions of such mangitudes consume a lot of resources and are sub-optimal. Ensure that you have plenty at least 8GB of ram and patience before attempting such a conversion, otherwise your Dynamo and Revit instances may crash., ViewSet.ByViewsName - Creates a set of views(or sheets) for printing. If the set exists, set Overwrite to true to replace it., Wall.WallType - Queries the wall type of the input wall. Works for types from linked documents as well., WallType.Duplicate - Attemts to create duplicate wall types. If the wall type exists, it is appended to the end. Sets only the structural width of the wall. The width must be in feet.","engine_metadata":"","engine_version":"0.8.2.2392","created":"2015-11-17T14:28:33.255Z","full_dependency_versions":["82.5.0"],"full_dependency_ids":[{"_id":"56077cf3662bf0e9080001ea","name":"spring nodes"}],"direct_dependency_versions":[],"direct_dependency_ids":[],"change_log":"","version":"82.5.0"},{"_id":"566413f30370b0a90700005b","contains_binaries":false,"node_libraries":[],"url_with_deps":"","url":"https://s3.amazonaws.com/greg-pkgs-dev/e2312a3b-91b9-47ca-b608-b04955794c62gregPkg110.zip","contents":"Active View - Selects the current document's active view. Supports more view types, Beams.FixExtents - Detects all beams from the input list with broken extents(actual length - cut length <  margin) and attemts to correct them., BoundingBox.Scale - Scales the bounding box in three dimensions according to it's center., ClosedCurve.Offset+(0.9) - Offsets a curve both ways and correctly differenciates the external and internal offset. If an offset goes beyond the curve's bounds, the result will fail and a null value will be appended instead. Also works for convex curves like arcs., ClosedCurve.Offset+ - Offsets a curve both ways and correctly differenciates the external and internal offset. If an offset goes beyond the curve's bounds, the result will fail and a null value will be appended instead. Also works for convex curves like arcs., Collector.CurrentSelection - Gets the currently selected elements. Connect a boolean switch to refresh the selection. Compatible with Revit 2016, Collector.ElementsInView - Selects all elements visible in the input view., Collector.FamilyInstances - Collects placed family instance elements from the document that match the name. Partially mathing elements are collected as well. If no matches are found, a list of all isntance names will be output., Collector.FamilyTypes - Collects non-system family types that fully match or partially match the provided names. If no matches are found, a list of all type names will be output., Collector.FloorTypes - Collects Floor types by name., Collector.LinkedInstanceElements - Extract elements by category from the selected linked instances. The transform vector can be used to get the exact location of the elements in the local file, Collector.Revisions - Collects all revisions from a specific date., Collector.Sheets - Search for sheets by either their name or their number. Use a false boolean switch to search by number., Collector.Views - Search for views based on naming. You can choose to either include or exclude schedules. Use the sheet collector for sheets., Collector.WallTypes - Collects wall types by name., Color2Decimal - Converts a Dynamo colour its Revit equivalent  decimal value., Curve.Offset+ - Offsets a curve towards the specified point, CurveLoop.Simplify - Attempts to simplify an open or a closed curve loop by connecting straight separate line segments into a single line., Decimal2Color - Converts a revit colour decimal value to its Dynamo equivalent., Dictionary.ByKeysValues - Dictionaries are an incredibly powerful tool for making associative sets between two equal length lists. The fitst list must be of unique strings (or numbers) and will be the key and the second list will be the matching values (it can be made up of geometry, elements, even other lists)\r\nThe search keys list will provide the coresponding value to the input key., DirectShape.ByGeometry - Convert the input geometry to DirectShape element inside the Revit document.  It supports solids or surfaces.It is based on an alternative process that uses a SAT import and can produce smooth surfaces. Each created DS will have a unique type. Make sure that each input geometry has a unique name. You can either feed a single category for all geometries or a unique category for each geometry - the node's lacing is set to longest by default., DirectShape.Transform - Copy the input DirectShape element with the help of a translation vector, similarly to the Geometry.Translate node. This method should prove much faster than Element.Copy, Doc.DeleteElements - Attempts to delete the input revit elements and returns the number of successfully deleted elements. Carefully observe the deleted elements count. It may be greater than the input list because hosted elements or tags will be deleted as well., Element.AddVoidCut - Accepts single or list inputs. If an element that can be cut and a family that can act as a void cutting entity are provided, the element will be cut. Please make sure that the geometries of the elements actually cut. Otherwise an empty cut will be created that may impede the performance of your file. Add void cuts sparcely because they affect the size of your project., Element.Copy - Copy the input Revit elements with the help of a translation vector, similarly to the Geometry.Translate node., Element.IsCut - Tests if the element is being cut by any void instances. If any cuts exist all cutting elements will be provided., Element.IsCutting - Tests if the input element (or elements) is a void cut and if it is cutting any elements. In such cases, the cut elements will be provided., Element.RemoveVoidCut - Removes the void cut between the input elements, if such exists., Element.SetLocation - Attempts to modify the location of the input element. This can effectively add as a move comand in Revit. Works for both line based and point based elements., FamilyInstance.ByGeometry - You must provide a valid family template path that will be used for all input geometry objects. The project units(and not the templates) will be used to determine the size of the output geometry.\r\nThe provided category will be used only if the family template supports it. If not, the default template category will be used instead.\r\nLikewise, the family material(provided as a string) will be set only if a material with that name exists in the template. If not, the default material will be used instead (\"By Category\").\r\nFor void cuts, the material settings will be ignored.\r\nThe output is the resulting family and an instance aligned according to the project document's origin.\r\nThe node expects a unique family name for each geometry object. The rest of the input lists will be processed as if the node lacing is set to longest., FamilyInstance.Rotation - Fetches the angle of rotation around the insertion point of a point based element. The angle is always measured counter-clockwise., FamilyType.Duplicate - Create duplicate family types with the specified name. If the type exists, it is called., Feet2Fraction - Converts a decimal foot value to a fractional foot/inch string., File.Size - Checks the file size. Provide a file path as a string., Filter.ByCategoryName - Filters the input elements by their category name. You can input multiple category names., Filter.ByClassName - Filters a list of objects by the object's class name. Note that Dynamo elements belong to different classes than their Revit counterparts. Use the Object.Class node to check an object's class., Filter.BySelection - Check the items that you'd like to filter in., Floor-WallType.SetMaterial - Sets a new material to the structural core of the provided floor and wall types., FloorOpening.ByCurves - Create hosted floor opeinngs through the input floors. The second input is a list of sub-lists of the boundary curves., FloorType.Duplicate - Attemts to create duplicate floor types. If the floor type exists, it is appended to the end. Sets only the structural width of the floor. The width must be in feet., Fn.ElementsOfCategory - Same as the built in \"All Elements of Category\" but can act as a function object., Form.ByGeometry - Convert the input geometry to a Revit Form object. Forms can exist only in the family environment. You can convert complicated solids or surfaces directly into forms. A form can act as a void. Provide either one true boolean value to convert a form into a void. The node's lacing is set to longest by default., Fraction2Feet - Converts a fractioned feet /inch string value into a decimal foot value., Geometry.SplitRecursively - Splits a surface or a solid recursively, using the resulting reduced geometry for every next split., HostedInstance.ByPoints - Creates hosted family instances(doors/windows) at the specified points. You can feed either a single family type or a unique type for each instance., Input.Wait - Waits for all inputs to be completed before continuing the execution process.Part of the SmartCopyMon workflow., Line.StraightenXY - Checks a line's end points for irregularities and corrects them if they are at or below the specified margin. The default margin is 1/5000 of the curve length, which is conservative., Line.StraightenZ - Checks a line's end points for irregularities in  the Z axis and corrects them if they are at or below the specified margin. The default margin is 1/2000 of the curve length, which is conservative., Lines.Group&FixCorners - Groups unconnected lines into sub-lists by margin(the maximum distance between endpoints) and attempts to create clean corner connections between them. Built on top of the Group curves node found in archi-lab.net., List.DropDown - Select one item from the list from a drop-down combo box., List.DropFirstLast - Removes the first and last items from the list, List.DropLast - Removes the last value of the list., List.EveryOther - Useful for when you want to combine an item on the list with every other item on the list. For example in list {1,2,3} , \"2\" will be paired up only with \"1\" and \"3\" and will not be paired up with itself., List.GetEven - Gets even indices from the list., List.GetOdd - Gets the odd indices from the list., List.Randomise&Divide - Shiffles the input list and divides it into sub-lists based on ratios(1/4 + 1/2 + 1/4 will give you three lists split accordingly) The smalest ratio will always be 1 / the list length and the largest ratio will be 1. A seed input can shuffle the list further., List.ShiftIndices+ - The built in node fails if the shift number is greater than the lenght of the list. This node acts as a work-around., List.Split - Splits a list at the desired length, Ln2Str - Serilize a geometry line to a string for use in Revit parameters, Math.AlmostEqual - Checks if a number is almost equal to a value with a specified tollerance., N-hedron.ByOriginVector - Creates a multi-sided poyhedron with defined side length and total height., NullAllIndicesOf - list all of the indices of a list that match the specified value. Capable of handling null values, part of the SmartCopyMonitor workflow., NullGetParameter - Similar to the built in node.Capable of handling null values, part of the SmartCopyMonitor workflow., NullIndexOf - Similar to the bult-in node but provides a null value instead of -1 of failure. Part of the SmartCopyMonitor workflow., NullReorder - Simiar to the built-in function with the difference that it can handle null indices. Part of the SmartCopyMonitor workflow., NullSetDifference - Similar to the built in node, with a built-in safety for null values. Part of the SmartCopyMonitor workflow., NullSetParameter - Similar to the built-in function but with the ability to handle null values. Part of the SmartCopyMon workflow., Number.ToString - Converts the input number(s) to string. Can process lists., Object.Class - Gets the input object's class name. Can process lists., Pt2Str - Serilize a geometry point to a string for use in Revit parameters, Select Linked Element - Select the linked instance first, followed by the element. If your selection fails, just press escape.\r\nTo refresh the node, connect a boolean switch node., Select Linked Elements - Select the linked instance first, followed by the elements. To finish the selection, press Finish. If your selection fails, just press escape or Cancel.\r\nTo refresh the node, connect a boolean switch node., Select Linked Face - Select the linked instance first, followed by the face. If your selection fails, just press escape.\r\nTo refresh the node, connect a boolean switch node., SelectInRevit - Selects the input elements in Revit. Works with Revit 2016., Shaft.ByCurves - Creates a shaft opening. The top level MUST be higher than the base level for a successful execution. You can either provide one base and top level for all shafts or have unique levels for each shaft instance., Sheet.Views+ - Extracts all views placed on the input sheet(s).  Will be depreciated once the bult in node works with all plan types., Star.ByCenterRadiusRays - Fun little node to create star shapes., Str2Ln - De-serilize a Revit parameter string into a geometric line., Str2Pt - De-serilize a Revit parameter string into a geometric point., Topography.ToPolySurface - Optimized algorithm for converting topographies into polysurfaces. Tested with topographies containing up to 40 000 points. \r\nWarning conversions of such mangitudes consume a lot of resources and are sub-optimal. Ensure that you have plenty at least 8GB of ram and patience before attempting such a conversion, otherwise your Dynamo and Revit instances may crash., ViewSet.ByViewsName - Creates a set of views(or sheets) for printing. If the set exists, set Overwrite to true to replace it., Wall.WallType - Queries the wall type of the input wall. Works for types from linked documents as well., WallType.Duplicate - Attemts to create duplicate wall types. If the wall type exists, it is appended to the end. Sets only the structural width of the wall. The width must be in feet.","engine_metadata":"","engine_version":"0.8.2.2392","created":"2015-12-06T10:54:43.320Z","full_dependency_versions":["82.6.1"],"full_dependency_ids":[{"_id":"56077cf3662bf0e9080001ea","name":"spring nodes"}],"direct_dependency_versions":[],"direct_dependency_ids":[],"change_log":"","version":"82.6.1"},{"_id":"569276cf5c568ad00c0000a8","contains_binaries":false,"node_libraries":[],"url_with_deps":"","url":"https://s3.amazonaws.com/greg-pkgs-dev/4867f1a7-7563-4de7-9f7f-7af51e2b140dgregPkg897.zip","contents":"Active View - Selects the current document's active view. Supports more view types, Beams.FixExtents - Detects all beams from the input list with broken extents(actual length - cut length <  margin) and attemts to correct them., BoundingBox.Scale - Scales the bounding box in three dimensions according to it's center., ClosedCurve.Offset+(0.9) - Offsets a curve both ways and correctly differenciates the external and internal offset. If an offset goes beyond the curve's bounds, the result will fail and a null value will be appended instead. Also works for convex curves like arcs., ClosedCurve.Offset+ - Offsets a curve both ways and correctly differenciates the external and internal offset. If an offset goes beyond the curve's bounds, the result will fail and a null value will be appended instead. Also works for convex curves like arcs., Collector.CurrentSelection - Gets the currently selected elements. Connect a boolean switch to refresh the selection. Compatible with Revit 2016, Collector.ElementsInView - Selects all elements visible in the input view., Collector.ElementSketch - Get the actual sketch lines of a sketch based element (floor, ceiling, modified wall, etc.) . You can optionally fetch the matching model curves, however this might prove comptationally heavy on larger data sets., Collector.FamilyInstances - Collects placed family instance elements from the document that match the name. Partially mathing elements are collected as well. If no matches are found, a list of all isntance names will be output., Collector.FamilyTypes - Collects non-system family types that fully match or partially match the provided names. If no matches are found, a list of all type names will be output., Collector.FloorTypes - Collects Floor types by name., Collector.LinkedInstanceElements - Extract elements by category from the selected linked instances. The transform vector can be used to get the exact location of the elements in the local file, Collector.Revisions - Collects all revisions from a specific date., Collector.Sheets - Search for sheets by either their name or their number. Use a false boolean switch to search by number., Collector.Views - Search for views based on naming. You can choose to either include or exclude schedules. Use the sheet collector for sheets., Collector.WallTypes - Collects wall types by name., Color2Decimal - Converts a Dynamo colour its Revit equivalent  decimal value., Curve.Offset+ - Offsets a curve towards the specified point, CurveLoop.Simplify - Attempts to simplify an open or a closed curve loop by connecting straight separate line segments into a single line., Decimal2Color - Converts a revit colour decimal value to its Dynamo equivalent., Dictionary.ByKeysValues - Dictionaries are an incredibly powerful tool for making associative sets between two equal length lists. The fitst list must be of unique strings (or numbers) and will be the key and the second list will be the matching values (it can be made up of geometry, elements, even other lists)\r\nThe search keys list will provide the coresponding value to the input key., DirectShape.ByGeometry - Convert the input geometry to DirectShape element inside the Revit document.  It supports solids or surfaces.It is based on an alternative process that uses a SAT import and can produce smooth surfaces. Each created DS will have a unique type. Make sure that each input geometry has a unique name. You can either feed a single category for all geometries or a unique category for each geometry - the node's lacing is set to longest by default., DirectShape.Transform - Copy the input DirectShape element with the help of a translation vector, similarly to the Geometry.Translate node. This method should prove much faster than Element.Copy, Doc.DeleteElements - Attempts to delete the input revit elements and returns the number of successfully deleted elements. Carefully observe the deleted elements count. It may be greater than the input list because hosted elements or tags will be deleted as well., Element.AddVoidCut - Accepts single or list inputs. If an element that can be cut and a family that can act as a void cutting entity are provided, the element will be cut. Please make sure that the geometries of the elements actually cut. Otherwise an empty cut will be created that may impede the performance of your file. Add void cuts sparcely because they affect the size of your project., Element.Copy - Copy the input Revit elements with the help of a translation vector, similarly to the Geometry.Translate node., Element.IsCut - Tests if the element is being cut by any void instances. If any cuts exist all cutting elements will be provided., Element.IsCutting - Tests if the input element (or elements) is a void cut and if it is cutting any elements. In such cases, the cut elements will be provided., Element.RemoveVoidCut - Removes the void cut between the input elements, if such exists., Element.SetLocation - Attempts to modify the location of the input element. This can effectively add as a move comand in Revit. Works for both line based and point based elements., FamilyInstance.ByGeometry - You must provide a valid family template path that will be used for all input geometry objects. The project units(and not the templates) will be used to determine the size of the output geometry.\r\nThe provided category will be used only if the family template supports it. If not, the default template category will be used instead.\r\nLikewise, the family material(provided as a string) will be set only if a material with that name exists in the template. If not, the default material will be used instead (\"By Category\").\r\nFor void cuts, the material settings will be ignored.\r\nThe Subcategory name is an optional input. If you'd like to skip assigning a Subcategory to any new instance, simply use null.\r\nThe node expects a unique family name for each geometry object. The rest of the input lists will be processed as if the node lacing is set to longest., FamilyInstance.Rotation - Fetches the angle of rotation around the insertion point of a point based element. The angle is always measured counter-clockwise., FamilyType.Duplicate - Create duplicate family types with the specified name. If the type exists, it is called., Feet2Fraction - Converts a decimal foot value to a fractional foot/inch string., File.Size - Checks the file size. Provide a file path as a string., Filter.ByCategoryName - Filters the input elements by their category name. You can input multiple category names., Filter.ByClassName - Filters a list of objects by the object's class name. Note that Dynamo elements belong to different classes than their Revit counterparts. Use the Object.Class node to check an object's class., Filter.BySelection - Check the items that you'd like to filter in.  Unchecked items will be sent to the out list., Floor-WallType.SetMaterial - Sets a new material to the structural core of the provided floor and wall types., FloorOpening.ByCurves - Create hosted floor opeinngs through the input floors. The second input is a list of sub-lists of the boundary curves., FloorType.Duplicate - Attemts to create duplicate floor types. If the floor type exists, it is appended to the end. Sets only the structural width of the floor. The width must be in feet., Fn.ElementsOfCategory - Same as the built in \"All Elements of Category\" but can act as a function object., Form.ByGeometry - Convert the input geometry to a Revit Form object. Forms can exist only in the family environment. You can convert complicated solids or surfaces directly into forms. A form can act as a void. Provide either one true boolean value to convert a form into a void. The node's lacing is set to longest by default., Fraction2Feet - Converts a fractioned feet /inch string value into a decimal foot value., Geometry.SplitRecursively - Splits a surface or a solid recursively, using the resulting reduced geometry for every next split., HostedInstance.ByPoints - Creates hosted family instances(doors/windows) at the specified points. You can feed either a single family type or a unique type for each instance., Input.Wait - Waits for all inputs to be completed before continuing the execution process.Part of the SmartCopyMon workflow., Line.StraightenXY - Checks a line's end points for irregularities and corrects them if they are at or below the specified margin. The default margin is 1/5000 of the curve length, which is conservative., Line.StraightenZ - Checks a line's end points for irregularities in  the Z axis and corrects them if they are at or below the specified margin. The default margin is 1/2000 of the curve length, which is conservative., Lines.Group&FixCorners - Groups unconnected lines into sub-lists by margin(the maximum distance between endpoints) and attempts to create clean corner connections between them. Built on top of the Group curves node found in archi-lab.net., List.DragDropReorder - Press and hold on an item to move it up or down the list. To confirm and close the window, select \"Save Order\", List.DropDown - Selects one list item by a drop-down combo box., List.DropFirstLast - Removes the first and last items from the list, List.DropLast - Removes the last value of the list., List.EveryOther - Useful for when you want to combine an item on the list with every other item on the list. For example in list {1,2,3} , \"2\" will be paired up only with \"1\" and \"3\" and will not be paired up with itself., List.GetEven - Gets even indices from the list., List.GetOdd - Gets the odd indices from the list., List.Randomise&Divide - Shiffles the input list and divides it into sub-lists based on ratios(1/4 + 1/2 + 1/4 will give you three lists split accordingly) The smalest ratio will always be 1 / the list length and the largest ratio will be 1. A seed input can shuffle the list further., List.ShiftIndices+ - The built in node fails if the shift number is greater than the lenght of the list. This node acts as a work-around., List.Split - Splits a list at the desired length, Ln2Str - Serilize a geometry line to a string for use in Revit parameters, Math.AlmostEqual - Checks if a number is almost equal to a value with a specified tollerance., N-hedron.ByOriginVector - Creates a multi-sided poyhedron with defined side length and total height., NullAllIndicesOf - list all of the indices of a list that match the specified value. Capable of handling null values, part of the SmartCopyMonitor workflow., NullGetParameter - Similar to the built in node.Capable of handling null values, part of the SmartCopyMonitor workflow., NullIndexOf - Similar to the bult-in node but provides a null value instead of -1 of failure. Part of the SmartCopyMonitor workflow., NullReorder - Simiar to the built-in function with the difference that it can handle null indices. Part of the SmartCopyMonitor workflow., NullSetDifference - Similar to the built in node, with a built-in safety for null values. Part of the SmartCopyMonitor workflow., NullSetParameter - Similar to the built-in function but with the ability to handle null values. Part of the SmartCopyMon workflow., Number.ToString - Converts the input number(s) to string. Can process lists., Object.Class - Gets the input object's class name. Can process lists., Point.PullOntoPlane - Pulls (projects) the point onto the input plane, following the plane normal., Pt2Str - Serilize a geometry point to a string for use in Revit parameters, Select Edges - Select multiple edges from inside the Revit UI. Be sure to press \"Finish\" once done. You can use a Boolean toggle to refresh your selection., Select Linked Element - Select the linked instance first, followed by the element. If your selection fails, just press escape.\r\nTo refresh the node, connect a boolean switch node., Select Linked Elements - Select the linked instance first, followed by the elements. To finish the selection, press Finish. If your selection fails, just press escape or Cancel.\r\nTo refresh the node, connect a boolean switch node., Select Linked Face - Select the linked instance first, followed by the face. If your selection fails, just press escape.\r\nTo refresh the node, connect a boolean switch node., SelectInRevit - Selects the input elements in Revit. Works with Revit 2016., Shaft.ByCurves - Creates a shaft opening. The top level MUST be higher than the base level for a successful execution. You can either provide one base and top level for all shafts or have unique levels for each shaft instance., Sheet.Views+ - Extracts all views placed on the input sheet(s).  Will be depreciated once the bult in node works with all plan types., Star.ByCenterRadiusRays - Fun little node to create star shapes., Str2Ln - De-serilize a Revit parameter string into a geometric line., Str2Pt - De-serilize a Revit parameter string into a geometric point., Topography.ToPolySurface - Optimized algorithm for converting topographies into polysurfaces. Tested with topographies containing up to 40 000 points. \r\nWarning conversions of such mangitudes consume a lot of resources and are sub-optimal. Ensure that you have plenty at least 8GB of ram and patience before attempting such a conversion, otherwise your Dynamo and Revit instances may crash., ViewSet.ByViewsName - Creates a set of views(or sheets) for printing. If the set exists, set Overwrite to true to replace it., Wall.WallType - Queries the wall type of the input wall. Works for types from linked documents as well., WallType.Duplicate - Attemts to create duplicate wall types. If the wall type exists, it is appended to the end. Sets only the structural width of the wall. The width must be in feet.","engine_metadata":"","engine_version":"0.8.2.2392","created":"2016-01-10T15:20:47.230Z","full_dependency_versions":["82.7.1"],"full_dependency_ids":[{"_id":"56077cf3662bf0e9080001ea","name":"spring nodes"}],"direct_dependency_versions":[],"direct_dependency_ids":[],"change_log":"","version":"82.7.1"},{"_id":"5697c4e4c6d90c553d000011","contains_binaries":false,"node_libraries":[],"url_with_deps":"","url":"https://s3.amazonaws.com/greg-pkgs-dev/0357b3e4-79b8-4c72-b159-e9120011df53gregPkg843.zip","contents":"Active View - Selects the current document's active view. Supports more view types, Beams.FixExtents - Detects all beams from the input list with broken extents(actual length - cut length <  margin) and attemts to correct them., BoundingBox.Scale - Scales the bounding box in three dimensions according to it's center., ClosedCurve.Offset+(0.9) - Offsets a curve both ways and correctly differenciates the external and internal offset. If an offset goes beyond the curve's bounds, the result will fail and a null value will be appended instead. Also works for convex curves like arcs., ClosedCurve.Offset+ - Offsets a curve both ways and correctly differenciates the external and internal offset. If an offset goes beyond the curve's bounds, the result will fail and a null value will be appended instead. Also works for convex curves like arcs., Collector.CurrentSelection - Gets the currently selected elements. Connect a boolean switch to refresh the selection. Compatible with Revit 2016, Collector.ElementsInView - Selects all elements visible in the input view., Collector.ElementSketch - Get the actual sketch lines of a sketch based element (floor, ceiling, modified wall, etc.) . You can optionally fetch the matching model curves, however this might prove comptationally heavy on larger data sets., Collector.FamilyInstances - Collects placed family instance elements from the document that match the name. Partially mathing elements are collected as well. If no matches are found, a list of all isntance names will be output., Collector.FamilyTypes - Collects non-system family types that fully match or partially match the provided names. If no matches are found, a list of all type names will be output., Collector.FloorTypes - Collects Floor types by name., Collector.LinkedInstanceElements - Extract elements by category from the selected linked instances. The transform vector can be used to get the exact location of the elements in the local file, Collector.Revisions - Collects all revisions from a specific date., Collector.Sheets - Search for sheets by either their name or their number. Use a false boolean switch to search by number., Collector.Views - Search for views based on naming. You can choose to either include or exclude schedules. Use the sheet collector for sheets., Collector.WallTypes - Collects wall types by name., Color2Decimal - Converts a Dynamo colour its Revit equivalent  decimal value., Curve.Offset+ - Offsets a curve towards the specified point, CurveLoop.Simplify - Attempts to simplify an open or a closed curve loop by connecting straight separate line segments into a single line., Decimal2Color - Converts a revit colour decimal value to its Dynamo equivalent., Dictionary.ByKeysValues - Dictionaries are an incredibly powerful tool for making associative sets between two equal length lists. The fitst list must be of unique strings (or numbers) and will be the key and the second list will be the matching values (it can be made up of geometry, elements, even other lists)\r\nThe search keys list will provide the coresponding value to the input key., DirectShape.ByGeometry - Convert the input geometry to DirectShape element inside the Revit document.  It supports solids or surfaces.It is based on an alternative process that uses a SAT import and can produce smooth surfaces. Each created DS will have a unique type. Make sure that each input geometry has a unique name. You can either feed a single category for all geometries or a unique category for each geometry - the node's lacing is set to longest by default., DirectShape.Transform - Copy the input DirectShape element with the help of a translation vector, similarly to the Geometry.Translate node. This method should prove much faster than Element.Copy, Doc.DeleteElements - Attempts to delete the input revit elements and returns the number of successfully deleted elements. Carefully observe the deleted elements count. It may be greater than the input list because hosted elements or tags will be deleted as well., Element.AddVoidCut - Accepts single or list inputs. If an element that can be cut and a family that can act as a void cutting entity are provided, the element will be cut. Please make sure that the geometries of the elements actually cut. Otherwise an empty cut will be created that may impede the performance of your file. Add void cuts sparcely because they affect the size of your project., Element.Copy - Copy the input Revit elements with the help of a translation vector, similarly to the Geometry.Translate node., Element.IsCut - Tests if the element is being cut by any void instances. If any cuts exist all cutting elements will be provided., Element.IsCutting - Tests if the input element (or elements) is a void cut and if it is cutting any elements. In such cases, the cut elements will be provided., Element.RemoveVoidCut - Removes the void cut between the input elements, if such exists., Element.SetLocation - Attempts to modify the location of the input element. This can effectively add as a move comand in Revit. Works for both line based and point based elements., ErrorReport.Parse - Process a Revit error report (HTML file) and extract the error types, all affected elements and the total number of errors. If you are executing from a document different than the one the error report belongs to, be sure to set \"fetch_elements\" to false., FamilyInstance.ByGeometry - You must provide a valid family template path that will be used for all input geometry objects. The project units(and not the templates) will be used to determine the size of the output geometry.\r\nThe provided category will be used only if the family template supports it. If not, the default template category will be used instead.\r\nLikewise, the family material(provided as a string) will be set only if a material with that name exists in the template. If not, the default material will be used instead (\"By Category\").\r\nFor void cuts, the material settings will be ignored.\r\nThe Subcategory name is an optional input. If you'd like to skip assigning a Subcategory to any new instance, simply use null.\r\nThe node expects a unique family name for each geometry object. The rest of the input lists will be processed as if the node lacing is set to longest., FamilyInstance.Rotation - Fetches the angle of rotation around the insertion point of a point based element. The angle is always measured counter-clockwise., FamilyType.Duplicate - Create duplicate family types with the specified name. If the type exists, it is called., Feet2Fraction - Converts a decimal foot value to a fractional foot/inch string., File.Size - Checks the file size. Provide a file path as a string., Filter.ByCategoryName - Filters the input elements by their category name. You can input multiple category names., Filter.ByClassName - Filters a list of objects by the object's class name. Note that Dynamo elements belong to different classes than their Revit counterparts. Use the Object.Class node to check an object's class., Filter.BySelection - Check the items that you'd like to filter in.  Unchecked items will be sent to the out list., Floor-WallType.SetMaterial - Sets a new material to the structural core of the provided floor and wall types., FloorOpening.ByCurves - Create hosted floor opeinngs through the input floors. The second input is a list of sub-lists of the boundary curves., FloorType.Duplicate - Attemts to create duplicate floor types. If the floor type exists, it is appended to the end. Sets only the structural width of the floor. The width must be in feet., Fn.ElementsOfCategory - Same as the built in \"All Elements of Category\" but can act as a function object., Form.ByGeometry - Convert the input geometry to a Revit Form object. Forms can exist only in the family environment. You can convert complicated solids or surfaces directly into forms. A form can act as a void. Provide either one true boolean value to convert a form into a void. The node's lacing is set to longest by default., Fraction2Feet - Converts a fractioned feet /inch string value into a decimal foot value., Geometry.SplitRecursively - Splits a surface or a solid recursively, using the resulting reduced geometry for every next split., HostedInstance.ByPoints - Creates hosted family instances(doors/windows) at the specified points. You can feed either a single family type or a unique type for each instance., Input.Wait - Waits for all inputs to be completed before continuing the execution process.Part of the SmartCopyMon workflow., InterferenceCheck.Parse - Process a Revit interference check (HTML file) and extract the interference categories, all affected elements and the total number of clashes. If you are executing from a document different than the one the error report belongs to, be sure to set \"fetch_elements\" to false., Line.StraightenXY - Checks a line's end points for irregularities and corrects them if they are at or below the specified margin. The default margin is 1/5000 of the curve length, which is conservative., Line.StraightenZ - Checks a line's end points for irregularities in  the Z axis and corrects them if they are at or below the specified margin. The default margin is 1/2000 of the curve length, which is conservative., Lines.Group&FixCorners - Groups unconnected lines into sub-lists by margin(the maximum distance between endpoints) and attempts to create clean corner connections between them. Built on top of the Group curves node found in archi-lab.net., List.DragDropReorder - Press and hold on an item to move it up or down the list. To confirm and close the window, select \"Save Order\", List.DropDown - Selects one list item by a drop-down combo box., List.DropFirstLast - Removes the first and last items from the list, List.DropLast - Removes the last value of the list., List.EveryOther - Useful for when you want to combine an item on the list with every other item on the list. For example in list {1,2,3} , \"2\" will be paired up only with \"1\" and \"3\" and will not be paired up with itself., List.GetEven - Gets even indices from the list., List.GetOdd - Gets the odd indices from the list., List.Randomise&Divide - Shiffles the input list and divides it into sub-lists based on ratios(1/4 + 1/2 + 1/4 will give you three lists split accordingly) The smalest ratio will always be 1 / the list length and the largest ratio will be 1. A seed input can shuffle the list further., List.ShiftIndices+ - The built in node fails if the shift number is greater than the lenght of the list. This node acts as a work-around., List.Split - Splits a list at the desired length, Ln2Str - Serilize a geometry line to a string for use in Revit parameters, Math.AlmostEqual - Checks if a number is almost equal to a value with a specified tollerance., N-hedron.ByOriginVector - Creates a multi-sided poyhedron with defined side length and total height., NullAllIndicesOf - list all of the indices of a list that match the specified value. Capable of handling null values, part of the SmartCopyMonitor workflow., NullGetParameter - Similar to the built in node.Capable of handling null values, part of the SmartCopyMonitor workflow., NullIndexOf - Similar to the bult-in node but provides a null value instead of -1 of failure. Part of the SmartCopyMonitor workflow., NullReorder - Simiar to the built-in function with the difference that it can handle null indices. Part of the SmartCopyMonitor workflow., NullSetDifference - Similar to the built in node, with a built-in safety for null values. Part of the SmartCopyMonitor workflow., NullSetParameter - Similar to the built-in function but with the ability to handle null values. Part of the SmartCopyMon workflow., Number.ToString - Converts the input number(s) to string. Can process lists., Object.Class - Gets the input object's class name. Can process lists., Point.PullOntoPlane - Pulls (projects) the point onto the input plane, following the plane normal., Pt2Str - Serilize a geometry point to a string for use in Revit parameters, Select Edges - Select multiple edges from inside the Revit UI. Be sure to press \"Finish\" once done. You can use a Boolean toggle to refresh your selection., Select Linked Element - Select the linked instance first, followed by the element. If your selection fails, just press escape.\r\nTo refresh the node, connect a boolean switch node., Select Linked Elements - Select the linked instance first, followed by the elements. To finish the selection, press Finish. If your selection fails, just press escape or Cancel.\r\nTo refresh the node, connect a boolean switch node., Select Linked Face - Select the linked instance first, followed by the face. If your selection fails, just press escape.\r\nTo refresh the node, connect a boolean switch node., SelectInRevit - Selects the input elements in Revit. Works with Revit 2016., Shaft.ByCurves - Creates a shaft opening. The top level MUST be higher than the base level for a successful execution. You can either provide one base and top level for all shafts or have unique levels for each shaft instance., Sheet.Views+ - Extracts all views placed on the input sheet(s).  Will be depreciated once the bult in node works with all plan types., Star.ByCenterRadiusRays - Fun little node to create star shapes., Str2Ln - De-serilize a Revit parameter string into a geometric line., Str2Pt - De-serilize a Revit parameter string into a geometric point., Topography.ToPolySurface - Optimized algorithm for converting topographies into polysurfaces. Tested with topographies containing up to 40 000 points. \r\nWarning conversions of such mangitudes consume a lot of resources and are sub-optimal. Ensure that you have plenty at least 8GB of ram and patience before attempting such a conversion, otherwise your Dynamo and Revit instances may crash., ViewSet.ByViewsName - Creates a set of views(or sheets) for printing. If the set exists, set Overwrite to true to replace it., Wall.WallType - Queries the wall type of the input wall. Works for types from linked documents as well., WallType.Duplicate - Attemts to create duplicate wall types. If the wall type exists, it is appended to the end. Sets only the structural width of the wall. The width must be in feet.","engine_metadata":"","engine_version":"0.8.2.2392","created":"2016-01-14T15:55:16.037Z","full_dependency_versions":["82.7.2"],"full_dependency_ids":[{"_id":"56077cf3662bf0e9080001ea","name":"spring nodes"}],"direct_dependency_versions":[],"direct_dependency_ids":[],"change_log":"","version":"82.7.2"},{"_id":"56a8e534c3e9ee4a08000045","contains_binaries":false,"node_libraries":[],"url_with_deps":"","url":"https://s3.amazonaws.com/greg-pkgs-dev/ec0125b2-1d5a-4b1a-8745-07dc97beeb0fgregPkg772.zip","contents":"Active View - Selects the current document's active view. Supports more view types, Beams.FixExtents - Detects all beams from the input list with broken extents(actual length - cut length <  margin) and attemts to correct them., BoundingBox.Scale - Scales the bounding box in three dimensions according to it's center., ClosedCurve.Offset+(0.9) - Offsets a curve both ways and correctly differenciates the external and internal offset. If an offset goes beyond the curve's bounds, the result will fail and a null value will be appended instead. Also works for convex curves like arcs., ClosedCurve.Offset+ - Offsets a curve both ways and correctly differenciates the external and internal offset. If an offset goes beyond the curve's bounds, the result will fail and a null value will be appended instead. Also works for convex curves like arcs., Collector.CurrentSelection - Gets the currently selected elements. Connect a boolean switch to refresh the selection. Compatible with Revit 2016, Collector.ElementsInView - Selects all elements visible in the input view., Collector.ElementSketch - Get the actual sketch lines of a sketch based element (floor, ceiling, modified wall, etc.) . You can optionally fetch the matching model curves, however this might prove comptationally heavy on larger data sets., Collector.FamilyInstances - Collects placed family instance elements from the document that match the name. Partially mathing elements are collected as well. If no matches are found, a list of all isntance names will be output., Collector.FamilyTypes - Collects non-system family types that fully match or partially match the provided names. If no matches are found, a list of all type names will be output., Collector.FloorTypes - Collects Floor types by name., Collector.LinkedInstanceElements - Extract elements by category from the selected linked instances. The transform vector can be used to get the exact location of the elements in the local file, Collector.Revisions - Collects all revisions from a specific date., Collector.Sheets - Search for sheets by either their name or their number. Use a false boolean switch to search by number., Collector.Views - Search for views based on naming. You can choose to either include or exclude schedules. Use the sheet collector for sheets., Collector.WallTypes - Collects wall types by name., Color2Decimal - Converts a Dynamo colour its Revit equivalent  decimal value., Curve.Offset+ - Offsets a curve towards the specified point, CurveLoop.Simplify - Attempts to simplify an open or a closed curve loop by connecting straight separate line segments into a single line., Decimal2Color - Converts a revit colour decimal value to its Dynamo equivalent., Dictionary.ByKeysValues - Dictionaries are an incredibly powerful tool for making associative sets between two equal length lists. The fitst list must be of unique strings (or numbers) and will be the key and the second list will be the matching values (it can be made up of geometry, elements, even other lists)\r\nThe search keys list will provide the coresponding value to the input key., DirectShape.ByGeometry - Convert the input geometry to DirectShape element inside the Revit document.  It supports solids or surfaces.It is based on an alternative process that uses a SAT import and can produce smooth surfaces. Each created DS will have a unique type. Make sure that each input geometry has a unique name. You can either feed a single category for all geometries or a unique category for each geometry - the node's lacing is set to longest by default., DirectShape.Transform - Copy the input DirectShape element with the help of a translation vector, similarly to the Geometry.Translate node. This method should prove much faster than Element.Copy, Doc.DeleteElements - Attempts to delete the input revit elements and returns the number of successfully deleted elements. Carefully observe the deleted elements count. It may be greater than the input list because hosted elements or tags will be deleted as well., Element.AddVoidCut - Accepts single or list inputs. If an element that can be cut and a family that can act as a void cutting entity are provided, the element will be cut. Please make sure that the geometries of the elements actually cut. Otherwise an empty cut will be created that may impede the performance of your file. Add void cuts sparcely because they affect the size of your project., Element.Copy - WARNING: Do not use this node in Automatic mode! Copy the input Revit elements with the help of a translation vector, similarly to the Geometry.Translate node., Element.IsCut - Tests if the element is being cut by any void instances. If any cuts exist all cutting elements will be provided., Element.IsCutting - Tests if the input element (or elements) is a void cut and if it is cutting any elements. In such cases, the cut elements will be provided., Element.RemoveVoidCut - Removes the void cut between the input elements, if such exists., Element.SetLocation - Attempts to modify the location of the input element. This can effectively add as a move comand in Revit. Works for both line based and point based elements., ErrorReport.Parse - Process a Revit error report (HTML file) and extract the error types, all affected elements and the total number of errors. If you are executing from a document different than the one the error report belongs to, be sure to set \"fetch_elements\" to false., FamilyInstance.ByGeometry - You must provide a valid family template path that will be used for all input geometry objects. The project units(and not the templates) will be used to determine the size of the output geometry.\r\nThe provided category will be used only if the family template supports it. If not, the default template category will be used instead.\r\nLikewise, the family material(provided as a string) will be set only if a material with that name exists in the template. If not, the default material will be used instead (\"By Category\").\r\nFor void cuts, the material settings will be ignored.\r\nThe Subcategory name is an optional input. If you'd like to skip assigning a Subcategory to any new instance, simply use null.\r\nThe node expects a unique family name for each geometry object. The rest of the input lists will be processed as if the node lacing is set to longest., FamilyInstance.Rotation - Fetches the angle of rotation around the insertion point of a point based element. The angle is always measured counter-clockwise., FamilyType.Duplicate - Create duplicate family types with the specified name. If the type exists, it is called., Feet2Fraction - Converts a decimal foot value to a fractional foot/inch string., File.Size - Checks the file size. Provide a file path as a string., Filter.ByCategoryName - Filters the input elements by their category name. You can input multiple category names., Filter.ByClassName - Filters a list of objects by the object's class name. Note that Dynamo elements belong to different classes than their Revit counterparts. Use the Object.Class node to check an object's class., Filter.BySelection - Check the items that you'd like to filter in.  Unchecked items will be sent to the out list. The optional names input will override the object representation., Floor-WallType.SetMaterial - Sets a new material to the structural core of the provided floor and wall types., FloorOpening.ByCurves - Create hosted floor opeinngs through the input floors. The second input is a list of sub-lists of the boundary curves., FloorType.Duplicate - Attemts to create duplicate floor types. If the floor type exists, it is appended to the end. Sets only the structural width of the floor. The width must be in feet., Fn.ElementsOfCategory - Same as the built in \"All Elements of Category\" but can act as a function object., Form.ByGeometry - Convert the input geometry to a Revit Form object. Forms can exist only in the family environment. You can convert complicated solids or surfaces directly into forms. A form can act as a void. Provide either one true boolean value to convert a form into a void. The node's lacing is set to longest by default., Fraction2Feet - Converts a fractioned feet /inch string value into a decimal foot value., Geometry.SplitRecursively - Splits a surface or a solid recursively, using the resulting reduced geometry for every next split., HostedInstance.ByPoints - Creates hosted family instances(doors/windows) at the specified points. You can feed either a single family type or a unique type for each instance., Input.Wait - Waits for all inputs to be completed before continuing the execution process.Part of the SmartCopyMon workflow., InterferenceCheck.Parse - Process a Revit interference check (HTML file) and extract the interference categories, all affected elements and the total number of clashes. If you are executing from a document different than the one the error report belongs to, be sure to set \"fetch_elements\" to false., Line.StraightenXY - Checks a line's end points for irregularities and corrects them if they are at or below the specified margin. The default margin is 1/5000 of the curve length, which is conservative., Line.StraightenZ - Checks a line's end points for irregularities in  the Z axis and corrects them if they are at or below the specified margin. The default margin is 1/2000 of the curve length, which is conservative., Lines.Group&FixCorners - Groups unconnected lines into sub-lists by margin(the maximum distance between endpoints) and attempts to create clean corner connections between them. Built on top of the Group curves node found in archi-lab.net., List.DragDropReorder - Press and hold on an item to move it up or down the list. To confirm and close the window, select \"Save Order\". The optional names input will override the object representation., List.DropDown - Selects one list item by a drop-down combo box. The optional names input will override the object representation., List.DropFirstLast - Removes the first and last items from the list, List.DropLast - Removes the last value of the list., List.EveryOther - Useful for when you want to combine an item on the list with every other item on the list. For example in list {1,2,3} , \"2\" will be paired up only with \"1\" and \"3\" and will not be paired up with itself., List.GetEven - Gets even indices from the list., List.GetOdd - Gets the odd indices from the list., List.Randomise&Divide - Shiffles the input list and divides it into sub-lists based on ratios(1/4 + 1/2 + 1/4 will give you three lists split accordingly) The smalest ratio will always be 1 / the list length and the largest ratio will be 1. A seed input can shuffle the list further., List.ShiftIndices+ - The built in node fails if the shift number is greater than the lenght of the list. This node acts as a work-around., List.Split - Splits a list at the desired length, Ln2Str - Serilize a geometry line to a string for use in Revit parameters, Math.AlmostEqual - Checks if a number is almost equal to a value with a specified tollerance., N-hedron.ByOriginVector - Creates a multi-sided poyhedron with defined side length and total height., NullAllIndicesOf - list all of the indices of a list that match the specified value. Capable of handling null values, part of the SmartCopyMonitor workflow., NullGetParameter - Similar to the built in node.Capable of handling null values, part of the SmartCopyMonitor workflow., NullIndexOf - Similar to the bult-in node but provides a null value instead of -1 of failure. Part of the SmartCopyMonitor workflow., NullReorder - Simiar to the built-in function with the difference that it can handle null indices. Part of the SmartCopyMonitor workflow., NullSetDifference - Similar to the built in node, with a built-in safety for null values. Part of the SmartCopyMonitor workflow., NullSetParameter - Similar to the built-in function but with the ability to handle null values. Part of the SmartCopyMon workflow., Number.ToString - Converts the input number(s) to string. Can process lists., Object.Class - Gets the input object's class name. Can process lists., Point.PullOntoPlane - Pulls (projects) the point onto the input plane, following the plane normal., Pt2Str - Serilize a geometry point to a string for use in Revit parameters, Select Edges - Select multiple edges from inside the Revit UI. Be sure to press \"Finish\" once done. You can use a Boolean toggle to refresh your selection., Select Linked Element - Select the linked instance first, followed by the element. If your selection fails, just press escape.\r\nTo refresh the node, connect a boolean switch node., Select Linked Elements - Select the linked instance first, followed by the elements. To finish the selection, press Finish. If your selection fails, just press escape or Cancel.\r\nTo refresh the node, connect a boolean switch node., Select Linked Face - Select the linked instance first, followed by the face. If your selection fails, just press escape.\r\nTo refresh the node, connect a boolean switch node., SelectInRevit - Selects the input elements in Revit. Works with Revit 2016., Shaft.ByCurves - Creates a shaft opening. The top level MUST be higher than the base level for a successful execution. You can either provide one base and top level for all shafts or have unique levels for each shaft instance., Sheet.Views+ - Extracts all views placed on the input sheet(s).  Will be depreciated once the bult in node works with all plan types., Star.ByCenterRadiusRays - Fun little node to create star shapes., Str2Ln - De-serilize a Revit parameter string into a geometric line., Str2Pt - De-serilize a Revit parameter string into a geometric point., Topography.ToPolySurface - Optimized algorithm for converting topographies into polysurfaces. Tested with topographies containing up to 40 000 points. \r\nWarning conversions of such mangitudes consume a lot of resources and are sub-optimal. Ensure that you have plenty at least 8GB of ram and patience before attempting such a conversion, otherwise your Dynamo and Revit instances may crash., ViewSet.ByViewsName - Creates a set of views(or sheets) for printing. If the set exists, set Overwrite to true to replace it., Wall.WallType - Queries the wall type of the input wall. Works for types from linked documents as well., WallType.Duplicate - Attemts to create duplicate wall types. If the wall type exists, it is appended to the end. Sets only the structural width of the wall. The width must be in feet., Watch+ - This node that serializes the input information and presents it in a resizable text window.","engine_metadata":"","engine_version":"0.8.2.2392","created":"2016-01-27T15:41:40.943Z","full_dependency_versions":["82.7.3"],"full_dependency_ids":[{"_id":"56077cf3662bf0e9080001ea","name":"spring nodes"}],"direct_dependency_versions":[],"direct_dependency_ids":[],"change_log":"","version":"82.7.3"},{"_id":"56a9a93fc3e9ee4a0800004e","contains_binaries":false,"node_libraries":[],"url_with_deps":"","url":"https://s3.amazonaws.com/greg-pkgs-dev/5c6b9994-c11e-4e98-8b54-921f653eeceagregPkg193.zip","contents":"Active View - Selects the current document's active view. Supports more view types than the built-in option.\r\nWill be depreciated once the bult in node works with all plan types., Beams.FixExtents - Detects all beams from the input list with broken extents(actual length - cut length <  margin) and attemts to correct them., BoundingBox.Scale - Scales the bounding box in three dimensions according to it's center., ClosedCurve.Offset+(0.9) - Offsets a curve both ways and correctly differenciates the external and internal offset. If an offset goes beyond the curve's bounds, the result will fail and a null value will be appended instead. Also works for convex curves like arcs., ClosedCurve.Offset+ - Offsets a curve both ways and correctly differenciates the external and internal offset. If an offset goes beyond the curve's bounds, the result will fail and a null value will be appended instead. Also works for convex curves like arcs., Collector.CurrentSelection - Gets the currently selected elements. Connect a boolean switch to refresh the selection. Compatible with Revit 2016, Collector.ElementsInView - Selects all elements visible in the input view., Collector.ElementSketch - Get the actual sketch lines of a sketch based element (floor, ceiling, modified wall, etc.) . You can optionally fetch the matching model curves, however this might prove comptationally heavy on larger data sets., Collector.FamilyInstances - Collects placed family instance elements from the document that match the name. Partially mathing elements are collected as well. If no matches are found, a list of all isntance names will be output., Collector.FamilyTypes - Collects non-system family types that fully match or partially match the provided names. If no matches are found, a list of all type names will be output., Collector.FloorTypes - Collects Floor types by name., Collector.LinkedInstanceElements - Extract elements by category from the selected linked instances. The transform vector can be used to get the exact location of the elements in the local file, Collector.Revisions - Collects all revisions from a specific date., Collector.Sheets - Search for sheets by either their name or their number. Use a false boolean switch to search by number., Collector.Views - Search for views based on naming. You can choose to either include or exclude schedules. Use the sheet collector for sheets., Collector.WallTypes - Collects wall types by name., Color2Decimal - Converts a Dynamo colour its Revit equivalent  decimal value., Curve.Offset+ - Offsets a curve towards the specified point, CurveLoop.Simplify - Attempts to simplify an open or a closed curve loop by connecting straight separate line segments into a single line., Decimal2Color - Converts a revit colour decimal value to its Dynamo equivalent., Dictionary.ByKeysValues - Dictionaries are an incredibly powerful tool for making associative sets between two equal length lists. The fitst list must be of unique strings (or numbers) and will be the key and the second list will be the matching values (it can be made up of geometry, elements, even other lists)\r\nThe search keys list will provide the coresponding value to the input key., DirectShape.ByGeometry - Convert the input geometry to DirectShape element inside the Revit document.  It supports solids or surfaces.It is based on an alternative process that uses a SAT import and can produce smooth surfaces. Each created DS will have a unique type. Make sure that each input geometry has a unique name. You can either feed a single category for all geometries or a unique category for each geometry - the node's lacing is set to longest by default., DirectShape.Transform - Copy the input DirectShape element with the help of a translation vector, similarly to the Geometry.Translate node. This method should prove much faster than Element.Copy, Doc.DeleteElements - Attempts to delete the input revit elements and returns the number of successfully deleted elements. Carefully observe the deleted elements count. It may be greater than the input list because hosted elements or tags will be deleted as well., Element.AddVoidCut - Accepts single or list inputs. If an element that can be cut and a family that can act as a void cutting entity are provided, the element will be cut. Please make sure that the geometries of the elements actually cut. Otherwise an empty cut will be created that may impede the performance of your file. Add void cuts sparcely because they affect the size of your project., Element.Copy - WARNING: Do not use this node in Automatic mode! Copy the input Revit elements with the help of a translation vector, similarly to the Geometry.Translate node., Element.IsCut - Tests if the element is being cut by any void instances. If any cuts exist all cutting elements will be provided., Element.IsCutting - Tests if the input element (or elements) is a void cut and if it is cutting any elements. In such cases, the cut elements will be provided., Element.RemoveVoidCut - Removes the void cut between the input elements, if such exists., Element.SetLocation - Attempts to modify the location of the input element. This can effectively add as a move comand in Revit. Works for both line based and point based elements., ErrorReport.Parse - Process a Revit error report (HTML file) and extract the error types, all affected elements and the total number of errors. If you are executing from a document different than the one the error report belongs to, be sure to set \"fetch_elements\" to false., FamilyInstance.ByGeometry - You must provide a valid family template path that will be used for all input geometry objects. The project units(and not the templates) will be used to determine the size of the output geometry.\r\nThe provided category will be used only if the family template supports it. If not, the default template category will be used instead.\r\nLikewise, the family material(provided as a string) will be set only if a material with that name exists in the template. If not, the default material will be used instead (\"By Category\").\r\nFor void cuts, the material settings will be ignored.\r\nThe Subcategory name is an optional input. If you'd like to skip assigning a Subcategory to any new instance, simply use null.\r\nThe node expects a unique family name for each geometry object. The rest of the input lists will be processed as if the node lacing is set to longest., FamilyInstance.Rotation - Fetches the angle of rotation around the insertion point of a point based element. The angle is always measured counter-clockwise., FamilyType.Duplicate - Create duplicate family types with the specified name. If the type exists, it is called., Feet2Fraction - Converts a decimal foot value to a fractional foot/inch string., File.Size - Checks the file size. Provide a file path as a string., Filter.ByCategoryName - Filters the input elements by their category name. You can input multiple category names., Filter.ByClassName - Filters a list of objects by the object's class name. Note that Dynamo elements belong to different classes than their Revit counterparts. Use the Object.Class node to check an object's class., Filter.BySelection - Check the items that you'd like to filter in.  Unchecked items will be sent to the out list. The optional names input will override the object representation., Floor-WallType.SetMaterial - Sets a new material to the structural core of the provided floor and wall types., FloorOpening.ByCurves - Create hosted floor opeinngs through the input floors. The second input is a list of sub-lists of the boundary curves., FloorType.Duplicate - Attemts to create duplicate floor types. If the floor type exists, it is appended to the end. Sets only the structural width of the floor. The width must be in feet., Fn.ElementsOfCategory - Same as the built in \"All Elements of Category\" but can act as a function object., Form.ByGeometry - Convert the input geometry to a Revit Form object. Forms can exist only in the family environment. You can convert complicated solids or surfaces directly into forms. A form can act as a void. Provide either one true boolean value to convert a form into a void. The node's lacing is set to longest by default., Fraction2Feet - Converts a fractioned feet /inch string value into a decimal foot value., Geometry.SplitRecursively - Splits a surface or a solid recursively, using the resulting reduced geometry for every next split., HostedInstance.ByPoints - Creates hosted family instances(doors/windows) at the specified points. You can feed either a single family type or a unique type for each instance., Input.Wait - Waits for all inputs to be completed before continuing the execution process.Part of the SmartCopyMon workflow., InterferenceCheck.Parse - Process a Revit interference check (HTML file) and extract the interference categories, all affected elements and the total number of clashes. If you are executing from a document different than the one the error report belongs to, be sure to set \"fetch_elements\" to false., Line.StraightenXY - Checks a line's end points for irregularities and corrects them if they are at or below the specified margin. The default margin is 1/5000 of the curve length, which is conservative., Line.StraightenZ - Checks a line's end points for irregularities in  the Z axis and corrects them if they are at or below the specified margin. The default margin is 1/2000 of the curve length, which is conservative., Lines.Group&FixCorners - Groups unconnected lines into sub-lists by margin(the maximum distance between endpoints) and attempts to create clean corner connections between them. Built on top of the Group curves node found in archi-lab.net., List.DragDropReorder - Press and hold on an item to move it up or down the list. To confirm and close the window, select \"Save Order\". The optional names input will override the object representation., List.DropDown - Selects one list item by a drop-down combo box. The optional names input will override the object representation., List.DropFirstLast - Removes the first and last items from the list, List.DropLast - Removes the last value of the list., List.EveryOther - Useful for when you want to combine an item on the list with every other item on the list. For example in list {1,2,3} , \"2\" will be paired up only with \"1\" and \"3\" and will not be paired up with itself., List.GetEven - Gets even indices from the list., List.GetOdd - Gets the odd indices from the list., List.Randomise&Divide - Shiffles the input list and divides it into sub-lists based on ratios(1/4 + 1/2 + 1/4 will give you three lists split accordingly) The smalest ratio will always be 1 / the list length and the largest ratio will be 1. A seed input can shuffle the list further., List.ShiftIndices+ - The built in node fails if the shift number is greater than the lenght of the list. This node acts as a work-around., List.Split - Splits a list at the desired length, Ln2Str - Serilize a geometry line to a string for use in Revit parameters, Math.AlmostEqual - Checks if a number is almost equal to a value with a specified tollerance., N-hedron.ByOriginVector - Creates a multi-sided poyhedron with defined side length and total height., NullAllIndicesOf - list all of the indices of a list that match the specified value. Capable of handling null values, part of the SmartCopyMonitor workflow., NullGetParameter - Similar to the built in node.Capable of handling null values, part of the SmartCopyMonitor workflow., NullIndexOf - Similar to the bult-in node but provides a null value instead of -1 of failure. Part of the SmartCopyMonitor workflow., NullReorder - Simiar to the built-in function with the difference that it can handle null indices. Part of the SmartCopyMonitor workflow., NullSetDifference - Similar to the built in node, with a built-in safety for null values. Part of the SmartCopyMonitor workflow., NullSetParameter - Similar to the built-in function but with the ability to handle null values. Part of the SmartCopyMon workflow., Number.ToString - Converts the input number(s) to string. Can process lists., Object.Class - Gets the input object's class name. Can process lists., Point.PullOntoPlane - Pulls (projects) the point onto the input plane, following the plane normal., Pt2Str - Serilize a geometry point to a string for use in Revit parameters, Select Edges - Select multiple edges from inside the Revit UI. Be sure to press \"Finish\" once done. You can use a Boolean toggle to refresh your selection., Select Linked Element - Select the linked instance first, followed by the element. If your selection fails, just press escape.\r\nTo refresh the node, connect a boolean switch node., Select Linked Elements - Select the linked instance first, followed by the elements. To finish the selection, press Finish. If your selection fails, just press escape or Cancel.\r\nTo refresh the node, connect a boolean switch node., Select Linked Face - Select the linked instance first, followed by the face. If your selection fails, just press escape.\r\nTo refresh the node, connect a boolean switch node., SelectInRevit - Selects the input elements in Revit. Works with Revit 2016., Shaft.ByCurves - Creates a shaft opening. The top level MUST be higher than the base level for a successful execution. You can either provide one base and top level for all shafts or have unique levels for each shaft instance., Sheet.Views+ - Extracts all views and schedules (minus the revision schedule) placed on the input sheet (or sheets).\r\nWill be depreciated once the bult in node works with all plan types., Star.ByCenterRadiusRays - Fun little node to create star shapes., Str2Ln - De-serilize a Revit parameter string into a geometric line., Str2Pt - De-serilize a Revit parameter string into a geometric point., Topography.ToPolySurface - Optimized algorithm for converting topographies into polysurfaces. Tested with topographies containing up to 40 000 points. \r\nWarning conversions of such mangitudes consume a lot of resources and are sub-optimal. Ensure that you have plenty at least 8GB of ram and patience before attempting such a conversion, otherwise your Dynamo and Revit instances may crash., ViewSet.ByViewsName - Creates a set of views(or sheets) for printing. If the set exists, set Overwrite to true to replace it., Wall.WallType - Queries the wall type of the input wall. Works for types from linked documents as well., WallType.Duplicate - Attemts to create duplicate wall types. If the wall type exists, it is appended to the end. Sets only the structural width of the wall. The width must be in feet., Watch+ - This node that serializes the input information and presents it in a resizable text window.","engine_metadata":"","engine_version":"0.8.2.2392","created":"2016-01-28T05:38:07.983Z","full_dependency_versions":["82.7.4"],"full_dependency_ids":[{"_id":"56077cf3662bf0e9080001ea","name":"spring nodes"}],"direct_dependency_versions":[],"direct_dependency_ids":[],"change_log":"","version":"82.7.4"},{"_id":"56af7b8fc3e9ee4a08000075","contains_binaries":false,"node_libraries":[],"url_with_deps":"","url":"https://s3.amazonaws.com/greg-pkgs-dev/39ade37e-ec13-414a-b4e8-d087bd4d25efgregPkg91.zip","contents":"Active View - Selects the current document's active view. Supports more view types than the built-in option.\r\nWill be depreciated once the bult in node works with all plan types., Beams.FixExtents - Detects all beams from the input list with broken extents(actual length - cut length <  margin) and attemts to correct them., BoundingBox.Scale - Scales the bounding box in three dimensions according to it's center., ClosedCurve.Offset+(0.9) - Offsets a curve both ways and correctly differenciates the external and internal offset. If an offset goes beyond the curve's bounds, the result will fail and a null value will be appended instead. Also works for convex curves like arcs., ClosedCurve.Offset+ - Offsets a curve both ways and correctly differenciates the external and internal offset. If an offset goes beyond the curve's bounds, the result will fail and a null value will be appended instead. Also works for convex curves like arcs., Collector.CurrentSelection - Gets the currently selected elements. Connect a boolean switch to refresh the selection. Compatible with Revit 2016, Collector.ElementsInView - Selects all elements visible in the input view., Collector.ElementSketch - Get the actual sketch lines of a sketch based element (floor, ceiling, modified wall, etc.) . You can optionally fetch the matching model curves, however this might prove comptationally heavy on larger data sets., Collector.FamilyInstances - Collects placed family instance elements from the document that match the name. Partially mathing elements are collected as well. If no matches are found, a list of all isntance names will be output., Collector.FamilyTypes - Collects non-system family types that fully match or partially match the provided names. If no matches are found, a list of all type names will be output., Collector.FloorTypes - Collects Floor types by name., Collector.LinkedInstanceElements - Extract elements by category from the selected linked instances. The transform vector can be used to get the exact location of the elements in the local file, Collector.Revisions - Collects all revisions from a specific date., Collector.Sheets - Search for sheets by either their name or their number. Use a false boolean switch to search by number., Collector.Views - Search for views based on naming. You can choose to either include or exclude schedules. Use the sheet collector for sheets., Collector.WallTypes - Collects wall types by name., Color2Decimal - Converts a Dynamo colour its Revit equivalent  decimal value., Curve.Offset+ - Offsets a curve towards the specified point, CurveLoop.Simplify - Attempts to simplify an open or a closed curve loop by connecting straight separate line segments into a single line., Decimal2Color - Converts a revit colour decimal value to its Dynamo equivalent., Dictionary.ByKeysValues - Dictionaries are an incredibly powerful tool for making associative sets between two equal length lists. The first list must be of unique strings (or numbers) and will be the key and the second list will be the matching values (it can be made up of geometry, elements, even other lists)\r\nThe search keys list will provide the corresponding value to the input key., DirectShape.ByGeometry - Convert the input geometry to DirectShape element inside the Revit document.  It supports solids or surfaces.It is based on an alternative process that uses a SAT import and can produce smooth surfaces. Each created DS will have a unique type. Make sure that each input geometry has a unique name. You can either feed a single category for all geometries or a unique category for each geometry - the node's lacing is set to longest by default., DirectShape.Transform - Copy the input DirectShape element with the help of a translation vector, similarly to the Geometry.Translate node. This method should prove much faster than Element.Copy, Doc.DeleteElements - Attempts to delete the input revit elements and returns the number of successfully deleted elements. Carefully observe the deleted elements count. It may be greater than the input list because hosted elements or tags will be deleted as well., Element.AddVoidCut - Accepts single or list inputs. If an element that can be cut and a family that can act as a void cutting entity are provided, the element will be cut. Please make sure that the geometries of the elements actually cut. Otherwise an empty cut will be created that may impede the performance of your file. Add void cuts sparcely because they affect the size of your project., Element.Copy - WARNING: Do not use this node in Automatic mode! Copy the input Revit elements with the help of a translation vector, similarly to the Geometry.Translate node., Element.IsCut - Tests if the element is being cut by any void instances. If any cuts exist all cutting elements will be provided., Element.IsCutting - Tests if the input element (or elements) is a void cut and if it is cutting any elements. In such cases, the cut elements will be provided., Element.RemoveVoidCut - Removes the void cut between the input elements, if such exists., Element.SetLocation - Attempts to modify the location of the input element. This can effectively add as a move comand in Revit. Works for both line based and point based elements., ErrorReport.Parse - Process a Revit error report (HTML file) and extract the error types, all affected elements and the total number of errors. If you are executing from a document different than the one the error report belongs to, be sure to set \"fetch_elements\" to false., FamilyInstance.ByGeometry - You must provide a valid family template path that will be used for all input geometry objects. The project units(and not the templates) will be used to determine the size of the output geometry.\r\nThe provided category will be used only if the family template supports it. If not, the default template category will be used instead.\r\nLikewise, the family material(provided as a string) will be set only if a material with that name exists in the template. If not, the default material will be used instead (\"By Category\").\r\nFor void cuts, the material settings will be ignored.\r\nThe Subcategory name is an optional input. If you'd like to skip assigning a Subcategory to any new instance, simply use null.\r\nThe node expects a unique family name for each geometry object. The rest of the input lists will be processed as if the node lacing is set to longest., FamilyInstance.Rotation - Fetches the angle of rotation around the insertion point of a point based element. The angle is always measured counter-clockwise., FamilyType.Duplicate - Create duplicate family types with the specified name. If the type exists, it is called., Feet2Fraction - Converts a decimal foot value to a fractional foot/inch string., File.Size - Checks the file size. Provide a file path as a string., Filter.ByCategoryName - Filters the input elements by their category name. You can input multiple category names., Filter.ByClassName - Filters a list of objects by the object's class name. Note that Dynamo elements belong to different classes than their Revit counterparts. Use the Object.Class node to check an object's class., Filter.BySelection - Check the items that you'd like to filter in.  Unchecked items will be sent to the out list. The optional names input will override the object representation., Floor-WallType.SetMaterial - Sets a new material to the structural core of the provided floor and wall types., FloorOpening.ByCurves - Create hosted floor opeinngs through the input floors. The second input is a list of sub-lists of the boundary curves., FloorType.Duplicate - Attemts to create duplicate floor types. If the floor type exists, it is appended to the end. Sets only the structural width of the floor. The width must be in feet., Fn.ElementsOfCategory - Same as the built in \"All Elements of Category\" but can act as a function object., Form.ByGeometry - Convert the input geometry to a Revit Form object. Forms can exist only in the family environment. You can convert complicated solids or surfaces directly into forms. A form can act as a void. Provide either one true boolean value to convert a form into a void. The node's lacing is set to longest by default., Fraction2Feet - Converts a fractioned feet /inch string value into a decimal foot value., Geometry.SplitRecursively - Splits a surface or a solid recursively, using the resulting reduced geometry for every next split., HostedInstance.ByPoints - Creates hosted family instances(doors/windows) at the specified points. You can feed either a single family type or a unique type for each instance., Input.Wait - Waits for all inputs to be completed before continuing the execution process.Part of the SmartCopyMon workflow., InterferenceCheck.Parse - Process a Revit interference check (HTML file) and extract the interference categories, all affected elements and the total number of clashes. If you are executing from a document different than the one the error report belongs to, be sure to set \"fetch_elements\" to false., Line.StraightenXY - Checks a line's end points for irregularities and corrects them if they are at or below the specified margin. The default margin is 1/5000 of the curve length, which is conservative., Line.StraightenZ - Checks a line's end points for irregularities in  the Z axis and corrects them if they are at or below the specified margin. The default margin is 1/2000 of the curve length, which is conservative., Lines.Group&FixCorners - Groups unconnected lines into sub-lists by margin(the maximum distance between endpoints) and attempts to create clean corner connections between them. Built on top of the Group curves node found in archi-lab.net., List.DragDropReorder - Press and hold on an item to move it up or down the list. To confirm and close the window, select \"Save Order\". The optional names input will override the object representation., List.DropDown - Selects one list item by a drop-down combo box. The optional names input will override the object representation., List.DropFirstLast - Removes the first and last items from the list, List.DropLast - Removes the last value of the list., List.EveryOther - Useful for when you want to combine an item on the list with every other item on the list. For example in list {1,2,3} , \"2\" will be paired up only with \"1\" and \"3\" and will not be paired up with itself., List.GetEven - Gets even indices from the list., List.GetOdd - Gets the odd indices from the list., List.Randomise&Divide - Shiffles the input list and divides it into sub-lists based on ratios(1/4 + 1/2 + 1/4 will give you three lists split accordingly) The smalest ratio will always be 1 / the list length and the largest ratio will be 1. A seed input can shuffle the list further., List.ShiftIndices+ - The built in node fails if the shift number is greater than the lenght of the list. This node acts as a work-around., List.Split - Splits a list at the desired length, Ln2Str - Serilize a geometry line to a string for use in Revit parameters, Math.AlmostEqual - Checks if a number is almost equal to a value with a specified tollerance., N-hedron.ByOriginVector - Creates a multi-sided poyhedron with defined side length and total height., NullAllIndicesOf - list all of the indices of a list that match the specified value. Capable of handling null values, part of the SmartCopyMonitor workflow., NullGetParameter - Similar to the built in node.Capable of handling null values, part of the SmartCopyMonitor workflow., NullIndexOf - Similar to the bult-in node but provides a null value instead of -1 of failure. Part of the SmartCopyMonitor workflow., NullReorder - Simiar to the built-in function with the difference that it can handle null indices. Part of the SmartCopyMonitor workflow., NullSetDifference - Similar to the built in node, with a built-in safety for null values. Part of the SmartCopyMonitor workflow., NullSetParameter - Similar to the built-in function but with the ability to handle null values. Part of the SmartCopyMon workflow., Number.ToString - Converts the input number(s) to string. Can process lists., Object.Class - Gets the input object's class name. Can process lists., Point.PullOntoPlane - Pulls (projects) the point onto the input plane, following the plane normal., Pt2Str - Serilize a geometry point to a string for use in Revit parameters, Select Edges - Select multiple edges from inside the Revit UI. Be sure to press \"Finish\" once done. You can use a Boolean toggle to refresh your selection., Select Linked Element - Select the linked instance first, followed by the element. If your selection fails, just press escape.\r\nTo refresh the node, connect a boolean switch node., Select Linked Elements - Select the linked instance first, followed by the elements. To finish the selection, press Finish. If your selection fails, just press escape or Cancel.\r\nTo refresh the node, connect a boolean switch node., Select Linked Face - Select the linked instance first, followed by the face. If your selection fails, just press escape.\r\nTo refresh the node, connect a boolean switch node., SelectInRevit - Selects the input elements in Revit. Works with Revit 2016., Shaft.ByCurves - Creates a shaft opening. The top level MUST be higher than the base level for a successful execution. You can either provide one base and top level for all shafts or have unique levels for each shaft instance., Sheet.Views+ - Extracts all views and schedules (minus the revision schedule) placed on the input sheet (or sheets).\r\nWill be depreciated once the bult in node works with all plan types., Star.ByCenterRadiusRays - Fun little node to create star shapes., Str2Ln - De-serilize a Revit parameter string into a geometric line., Str2Pt - De-serilize a Revit parameter string into a geometric point., Topography.ToPolySurface - Optimized algorithm for converting topographies into polysurfaces. Tested with topographies containing up to 40 000 points. \r\nWarning conversions of such mangitudes consume a lot of resources and are sub-optimal. Ensure that you have plenty at least 8GB of ram and patience before attempting such a conversion, otherwise your Dynamo and Revit instances may crash., ViewSet.ByViewsName - Creates a set of views(or sheets) for printing. If the set exists, set Overwrite to true to replace it., Wall.WallType - Queries the wall type of the input wall. Works for types from linked documents as well., WallType.Duplicate - Attemts to create duplicate wall types. If the wall type exists, it is appended to the end. Sets only the structural width of the wall. The width must be in feet., Watch+ - This node that serializes the input information and presents it in a resizable text window.","engine_metadata":"","engine_version":"0.8.2.2392","created":"2016-02-01T15:36:47.894Z","full_dependency_versions":["82.7.5"],"full_dependency_ids":[{"_id":"56077cf3662bf0e9080001ea","name":"spring nodes"}],"direct_dependency_versions":[],"direct_dependency_ids":[],"change_log":"","version":"82.7.5"},{"_id":"56b9efa1c3e9ee4a080000cf","contains_binaries":false,"node_libraries":[],"url_with_deps":"","url":"https://s3.amazonaws.com/greg-pkgs-dev/b8c79da7-9f48-4ee5-b6e3-533b1cf33231gregPkg948.zip","contents":"Active View - Selects the current document's active view. Supports more view types than the built-in option.\r\nWill be depreciated once the bult in node works with all plan types., Beams.FixExtents - Detects all beams from the input list with broken extents(actual length - cut length <  margin) and attemts to correct them., BoundingBox.Scale - Scales the bounding box in three dimensions according to it's center., ClosedCurve.Offset+(0.9) - Offsets a curve both ways and correctly differenciates the external and internal offset. If an offset goes beyond the curve's bounds, the result will fail and a null value will be appended instead. Also works for convex curves like arcs., ClosedCurve.Offset+ - Offsets a curve both ways and correctly differenciates the external and internal offset. If an offset goes beyond the curve's bounds, the result will fail and a null value will be appended instead. Also works for convex curves like arcs., Collector.CurrentSelection - Gets the currently selected elements. Connect a boolean switch to refresh the selection. Compatible with Revit 2016, Collector.ElementsInView - Selects all elements visible in the input view., Collector.ElementSketch - Get the actual sketch lines of a sketch based element (floor, ceiling, modified wall, etc.) . You can optionally fetch the matching model curves, however this might prove comptationally heavy on larger data sets., Collector.FamilyInstances - Collects placed family instance elements from the document that match the name. Partially mathing elements are collected as well. If no matches are found, a list of all isntance names will be output., Collector.FamilyTypes - Collects non-system family types that fully match or partially match the provided names. If no matches are found, a list of all type names will be output., Collector.FloorTypes - Collects Floor types by name., Collector.LinkedInstanceElements - Extract elements by category from the selected linked instances. The transform vector can be used to get the exact location of the elements in the local file, Collector.Revisions - Collects all revision clouds from a specific date., Collector.Sheets - Search for sheets by either their name or their number. Use a false boolean switch to search by number., Collector.Views - Search for views based on naming. You can choose to either include or exclude schedules. Use the sheet collector for sheets., Collector.WallTypes - Collects wall types by name., Color2Decimal - Converts a Dynamo colour its Revit equivalent  decimal value., Curve.Offset+ - Offsets a curve towards the specified point, CurveLoop.Simplify - Attempts to simplify an open or a closed curve loop by connecting straight separate line segments into a single line., Decimal2Color - Converts a revit colour decimal value to its Dynamo equivalent., Dictionary.ByKeysValues - Dictionaries are an incredibly powerful tool for making associative sets between two equal length lists. The first list must be of unique strings (or numbers) and will be the key and the second list will be the matching values (it can be made up of geometry, elements, even other lists)\r\nThe search keys list will provide the corresponding value to the input key., DirectShape.ByGeometry - Convert the input geometry to DirectShape element inside the Revit document.  It supports solids or surfaces.It is based on an alternative process that uses a SAT import and can produce smooth surfaces. Each created DS will have a unique type. Make sure that each input geometry has a unique name. You can either feed a single category for all geometries or a unique category for each geometry - the node's lacing is set to longest by default., DirectShape.Transform - Copy the input DirectShape element with the help of a translation vector, similarly to the Geometry.Translate node. This method should prove much faster than Element.Copy, Doc.DeleteElements - Attempts to delete the input list of elements from the active Revit document.The node returns the number of successfully deleted elements and their Ids as a string. Carefully observe the deleted elements count. It may be greater than the input list because hosted elements or tags will be deleted as well. If an element in the list can not be deleted (for example last revision or last view), the whole list will fail to be deleted., Element.AddVoidCut - Accepts single or list inputs. If an element that can be cut and a family that can act as a void cutting entity are provided, the element will be cut. Please make sure that the geometries of the elements actually cut. Otherwise an empty cut will be created that may impede the performance of your file. Add void cuts sparcely because they affect the size of your project., Element.Copy - WARNING: Do not use this node in Automatic mode! Copy the input Revit elements with the help of a translation vector, similarly to the Geometry.Translate node., Element.IsCut - Tests if the element is being cut by any void instances. If any cuts exist all cutting elements will be provided., Element.IsCutting - Tests if the input element (or elements) is a void cut and if it is cutting any elements. In such cases, the cut elements will be provided., Element.RemoveVoidCut - Removes the void cut between the input elements, if such exists., Element.SetLocation - Attempts to modify the location of the input element. This can effectively add as a move comand in Revit. Works for both line based and point based elements., ErrorReport.Parse - Process a Revit error report (HTML file) and extract the error types, all affected elements and the total number of errors. If you are executing from a document different than the one the error report belongs to, be sure to set \"fetch_elements\" to false., FamilyInstance.ByGeometry - You must provide a valid family template path that will be used for all input geometry objects. The project units(and not the templates) will be used to determine the size of the output geometry.\r\nThe provided category will be used only if the family template supports it. If not, the default template category will be used instead.\r\nLikewise, the family material(provided as a string) will be set only if a material with that name exists in the template. If not, the default material will be used instead (\"By Category\").\r\nFor void cuts, the material settings will be ignored.\r\nThe Subcategory name is an optional input. If you'd like to skip assigning a Subcategory to any new instance, simply use null.\r\nThe node expects a unique family name for each geometry object. The rest of the input lists will be processed as if the node lacing is set to longest., FamilyInstance.Rotation - Fetches the angle of rotation around the insertion point of a point based element. The angle is always measured counter-clockwise., FamilyType.Duplicate - Create duplicate family types with the specified name. If the type exists, it is called., Feet2Fraction - Converts a decimal foot value to a fractional foot/inch string., File.Size - Checks the file size. Provide a file path as a string., Filter.ByCategoryName - Filters the input elements by their category name. You can input multiple category names., Filter.ByClassName - Filters a list of objects by the object's class name. Note that Dynamo elements belong to different classes than their Revit counterparts. Use the Object.Class node to check an object's class., Filter.BySelection - Check the items that you'd like to filter in.  Unchecked items will be sent to the out list. The optional names input will override the object representation., Floor-WallType.SetMaterial - Sets a new material to the structural core of the provided floor and wall types., FloorOpening.ByCurves - Create hosted floor opeinngs through the input floors. The second input is a list of sub-lists of the boundary curves., FloorType.Duplicate - Attemts to create duplicate floor types. If the floor type exists, it is appended to the end. Sets only the structural width of the floor. The width must be in feet., Fn.ElementsOfCategory - Same as the built in \"All Elements of Category\" but can act as a function object., Form.ByGeometry - Convert the input geometry to a Revit Form object. Forms can exist only in the family environment. You can convert complicated solids or surfaces directly into forms. A form can act as a void. Provide either one true boolean value to convert a form into a void. The node's lacing is set to longest by default., Fraction2Feet - Converts a fractioned feet /inch string value into a decimal foot value., Geometry.SplitRecursively - Splits a surface or a solid recursively, using the resulting reduced geometry for every next split., HostedInstance.ByPoints - Creates hosted family instances(doors/windows) at the specified points. You can feed either a single family type or a unique type for each instance., Input.Wait - Waits for all inputs to be completed before continuing the execution process.Part of the SmartCopyMon workflow., InterferenceCheck.Parse - Process a Revit interference check (HTML file) and extract the interference categories, all affected elements and the total number of clashes. If you are executing from a document different than the one the error report belongs to, be sure to set \"fetch_elements\" to false., Line.StraightenXY - Checks a line's end points for irregularities and corrects them if they are at or below the specified margin. The default margin is 1/5000 of the curve length, which is conservative., Line.StraightenZ - Checks a line's end points for irregularities in  the Z axis and corrects them if they are at or below the specified margin. The default margin is 1/2000 of the curve length, which is conservative., Lines.Group&FixCorners - Groups unconnected lines into sub-lists by margin(the maximum distance between endpoints) and attempts to create clean corner connections between them. Built on top of the Group curves node found in archi-lab.net., List.DragDropReorder - Press and hold on an item to move it up or down the list. To confirm and close the window, select \"Save Order\". The optional names input will override the object representation., List.DropDown - Selects one list item by a drop-down combo box. The optional names input will override the object representation., List.DropFirstLast - Removes the first and last items from the list, List.DropLast - Removes the last value of the list., List.EveryOther - Useful for when you want to combine an item on the list with every other item on the list. For example in list {1,2,3} , \"2\" will be paired up only with \"1\" and \"3\" and will not be paired up with itself., List.GetEven - Gets even indices from the list., List.GetOdd - Gets the odd indices from the list., List.Randomise&Divide - Shiffles the input list and divides it into sub-lists based on ratios(1/4 + 1/2 + 1/4 will give you three lists split accordingly) The smalest ratio will always be 1 / the list length and the largest ratio will be 1. A seed input can shuffle the list further., List.ShiftIndices+ - The built in node fails if the shift number is greater than the lenght of the list. This node acts as a work-around., List.Split - Splits a list at the desired length, Ln2Str - Serilize a geometry line to a string for use in Revit parameters, Math.AlmostEqual - Checks if a number is almost equal to a value with a specified tollerance., N-hedron.ByOriginVector - Creates a multi-sided poyhedron with defined side length and total height., NullAllIndicesOf - list all of the indices of a list that match the specified value. Capable of handling null values, part of the SmartCopyMonitor workflow., NullGetParameter - Similar to the built in node.Capable of handling null values, part of the SmartCopyMonitor workflow., NullIndexOf - Similar to the bult-in node but provides a null value instead of -1 of failure. Part of the SmartCopyMonitor workflow., NullReorder - Simiar to the built-in function with the difference that it can handle null indices. Part of the SmartCopyMonitor workflow., NullSetDifference - Similar to the built in node, with a built-in safety for null values. Part of the SmartCopyMonitor workflow., NullSetParameter - Similar to the built-in function but with the ability to handle null values. Part of the SmartCopyMon workflow., Number.ToString - Converts the input number(s) to string. Can process lists., Object.Class - Gets the input object's class name. Can process lists., Point.PullOntoPlane - Pulls (projects) the point onto the input plane, following the plane normal., Pt2Str - Serilize a geometry point to a string for use in Revit parameters, Select Edges - Select multiple edges from inside the Revit UI. Be sure to press \"Finish\" once done. You can use a Boolean toggle to refresh your selection., Select Linked Element - Select the linked instance first, followed by the element. If your selection fails, just press escape.\r\nTo refresh the node, connect a boolean switch node., Select Linked Elements - Select the linked instance first, followed by the elements. To finish the selection, press Finish. If your selection fails, just press escape or Cancel.\r\nTo refresh the node, connect a boolean switch node., Select Linked Face - Select the linked instance first, followed by the face. If your selection fails, just press escape.\r\nTo refresh the node, connect a boolean switch node., SelectInRevit - Selects the input elements in Revit. Works with Revit 2016., Shaft.ByCurves - Creates a shaft opening. The top level MUST be higher than the base level for a successful execution. You can either provide one base and top level for all shafts or have unique levels for each shaft instance., Sheet.Views+ - Extracts all views and schedules (minus the revision schedule) placed on the input sheet (or sheets).\r\nWill be depreciated once the bult in node works with all plan types., Star.ByCenterRadiusRays - Fun little node to create star shapes., Str2Ln - De-serilize a Revit parameter string into a geometric line., Str2Pt - De-serilize a Revit parameter string into a geometric point., Topography.ToPolySurface - Optimized algorithm for converting topographies into polysurfaces. Tested with topographies containing up to 40 000 points. \r\nWarning conversions of such mangitudes consume a lot of resources and are sub-optimal. Ensure that you have plenty at least 8GB of ram and patience before attempting such a conversion, otherwise your Dynamo and Revit instances may crash., ViewSet.ByViewsName - Creates a set of views(or sheets) for printing. If the set exists, set Overwrite to true to replace it., Wall.WallType - Queries the wall type of the input wall. Works for types from linked documents as well., WallType.Duplicate - Attemts to create duplicate wall types. If the wall type exists, it is appended to the end. Sets only the structural width of the wall. The width must be in feet., Watch+ - This node that serializes the input information and presents it in a resizable text window.","engine_metadata":"","engine_version":"0.8.2.2392","created":"2016-02-09T13:54:41.856Z","full_dependency_versions":["82.7.6"],"full_dependency_ids":[{"_id":"56077cf3662bf0e9080001ea","name":"spring nodes"}],"direct_dependency_versions":[],"direct_dependency_ids":[],"change_log":"","version":"82.7.6"},{"_id":"56c5d9e9c3e9ee4a08000117","contains_binaries":false,"node_libraries":[],"url_with_deps":"","url":"https://s3.amazonaws.com/greg-pkgs-dev/ae1ede96-fa55-4ddc-90ea-9e2e1347f53bgregPkg237.zip","contents":"Active View - Selects the current document's active view. Supports more view types than the built-in option.\r\nWill be depreciated once the bult in node works with all plan types., Beams.FixExtents - Detects all beams from the input list with broken extents(actual length - cut length <  margin) and attemts to correct them., BoundingBox.Scale - Scales the bounding box in three dimensions according to it's center., ClosedCurve.Offset+(0.9) - Offsets a curve both ways and correctly differenciates the external and internal offset. If an offset goes beyond the curve's bounds, the result will fail and a null value will be appended instead. Also works for convex curves like arcs., ClosedCurve.Offset+ - Offsets a curve both ways and correctly differenciates the external and internal offset. If an offset goes beyond the curve's bounds, the result will fail and a null value will be appended instead. Also works for convex curves like arcs., Collector.CurrentSelection - Gets the currently selected elements. Connect a boolean switch to refresh the selection. Compatible with Revit 2016, Collector.ElementsInView - Selects all elements visible in the input view., Collector.ElementSketch - Get the actual sketch lines of a sketch based element (floor, ceiling, modified wall, etc.) . You can optionally fetch the matching model curves, however this might prove comptationally heavy on larger data sets., Collector.FamilyInstances - Collects placed family instance elements from the document that match the name. Partially mathing elements are collected as well. If no matches are found, a list of all isntance names will be output., Collector.FamilyTypes - Collects non-system family types that fully match or partially match the provided names. If no matches are found, a list of all type names will be output., Collector.FloorTypes - Collects Floor types by name., Collector.LinkedInstanceElements - Extract elements by category from the selected linked instances. The transform vector can be used to get the exact location of the elements in the local file, Collector.Revisions - Collects all revision clouds from a specific date., Collector.Sheets - Search for sheets by either their name or their number. Use a false boolean switch to search by number., Collector.Views - Search for views based on naming. You can choose to either include or exclude schedules. Use the sheet collector for sheets., Collector.WallTypes - Collects wall types by name., Color2Decimal - Converts a Dynamo colour its Revit equivalent  decimal value., Curve.Offset+ - Offsets a curve towards the specified point, CurveLoop.Simplify - Attempts to simplify an open or a closed curve loop by connecting straight separate line segments into a single line., Decimal2Color - Converts a revit colour decimal value to its Dynamo equivalent., Dictionary.ByKeysValues - Dictionaries are an incredibly powerful tool for making associative sets between two equal length lists. The first list must be of unique strings (or numbers) and will be the key and the second list will be the matching values (it can be made up of geometry, elements, even other lists)\r\nThe search keys list will provide the corresponding value to the input key., DirectShape.ByGeometry - Convert the input geometry to DirectShape element inside the Revit document.  It supports solids or surfaces.It is based on an alternative process that uses a SAT import and can produce smooth surfaces. Each created DS will have a unique type. Make sure that each input geometry has a unique name. You can either feed a single category for all geometries or a unique category for each geometry - the node's lacing is set to longest by default., DirectShape.Transform - Transforms the typed DirectShape element from the identity coordinate system to the input coordinate system(s), in a manner similar to Dynamo's Geometry.Transform node., DirectShape.Translate - Copy the input DirectShape element with the help of a translation vector, similarly to the Geometry.Translate node. This method should prove more efficient than Element.Copy, Doc.DeleteElements - Attempts to delete the input list of elements from the active Revit document.The node returns the number of successfully deleted elements and their Ids as a string. Carefully observe the deleted elements count. It may be greater than the input list because hosted elements or tags will be deleted as well. If an element in the list can not be deleted (for example last revision or last view), the whole list will fail to be deleted., Element.AddVoidCut - Accepts single or list inputs. If an element that can be cut and a family that can act as a void cutting entity are provided, the element will be cut. Please make sure that the geometries of the elements actually cut. Otherwise an empty cut will be created that may impede the performance of your file. Add void cuts sparcely because they affect the size of your project., Element.Copy - WARNING: Do not use this node in Automatic mode! Copy the input Revit elements with the help of a translation vector, similarly to the Geometry.Translate node., Element.IsCut - Tests if the element is being cut by any void instances. If any cuts exist all cutting elements will be provided., Element.IsCutting - Tests if the input element (or elements) is a void cut and if it is cutting any elements. In such cases, the cut elements will be provided., Element.RemoveVoidCut - Removes the void cut between the input elements, if such exists., Element.SetLocation - Attempts to modify the location of the input element. This can effectively add as a move comand in Revit. Works for both line based and point based elements., ErrorReport.Parse - Process a Revit error report (HTML file) and extract the error types, all affected elements and the total number of errors. If you are executing from a document different than the one the error report belongs to, be sure to set \"fetch_elements\" to false., FamilyInstance.ByGeometry - You must provide a valid family template path that will be used for all input geometry objects. The project units(and not the templates) will be used to determine the size of the output geometry.\r\nThe provided category will be used only if the family template supports it. If not, the default template category will be used instead.\r\nLikewise, the family material(provided as a string) will be set only if a material with that name exists in the template. If not, the default material will be used instead (\"By Category\").\r\nFor void cuts, the material settings will be ignored.\r\nThe Subcategory name is an optional input. If you'd like to skip assigning a Subcategory to any new instance, simply use null.\r\nThe node expects a unique family name for each geometry object. The rest of the input lists will be processed as if the node lacing is set to longest., FamilyInstance.Rotation - Fetches the angle of rotation around the insertion point of a point based element. The angle is always measured counter-clockwise., FamilyType.Duplicate - Create duplicate family types with the specified name. If the type exists, it is called., Feet2Fraction - Converts a decimal foot value to a fractional foot/inch string., File.Size - Checks the file size. Provide a file path as a string., Filter.ByCategoryName - Filters the input elements by their category name. You can input multiple category names., Filter.ByClassName - Filters a list of objects by the object's class name. Note that Dynamo elements belong to different classes than their Revit counterparts. Use the Object.Class node to check an object's class., Filter.BySelection - Check the items that you'd like to filter in.  Unchecked items will be sent to the out list. The optional names input will override the object representation., Floor-WallType.SetMaterial - Sets a new material to the structural core of the provided floor and wall types., FloorOpening.ByCurves - Create hosted floor opeinngs through the input floors. The second input is a list of sub-lists of the boundary curves., FloorType.Duplicate - Attemts to create duplicate floor types. If the floor type exists, it is appended to the end. Sets only the structural width of the floor. The width must be in feet., Fn.ElementsOfCategory - Same as the built in \"All Elements of Category\" but can act as a function object., Form.ByGeometry - Convert the input geometry to a Revit Form object. Forms can exist only in the family environment. You can convert complicated solids or surfaces directly into forms. A form can act as a void. Provide either one true boolean value to convert a form into a void. The node's lacing is set to longest by default., Fraction2Feet - Converts a fractioned feet /inch string value into a decimal foot value., Geometry.SplitRecursively - Splits a surface or a solid recursively, using the resulting reduced geometry for every next split., HostedInstance.ByPoints - Creates hosted family instances(doors/windows) at the specified points. You can feed either a single family type or a unique type for each instance., Input.Wait - Waits for all inputs to be completed before continuing the execution process.Part of the SmartCopyMon workflow., InterferenceCheck.Parse - Process a Revit interference check (HTML file) and extract the interference categories, all affected elements and the total number of clashes. If you are executing from a document different than the one the error report belongs to, be sure to set \"fetch_elements\" to false., Line.StraightenXY - Checks a line's end points for irregularities and corrects them if they are at or below the specified margin. The default margin is 1/5000 of the curve length, which is conservative., Line.StraightenZ - Checks a line's end points for irregularities in  the Z axis and corrects them if they are at or below the specified margin. The default margin is 1/2000 of the curve length, which is conservative., Lines.Group&FixCorners - Groups unconnected lines into sub-lists by margin(the maximum distance between endpoints) and attempts to create clean corner connections between them. Built on top of the Group curves node found in archi-lab.net., List.DragDropReorder - Press and hold on an item to move it up or down the list. To confirm and close the window, select \"Save Order\". The optional names input will override the object representation., List.DropDown - Selects one list item by a drop-down combo box. The optional names input will override the object representation., List.DropFirstLast - Removes the first and last items from the list, List.DropLast - Removes the last value of the list., List.EveryOther - Useful for when you want to combine an item on the list with every other item on the list. For example in list {1,2,3} , \"2\" will be paired up only with \"1\" and \"3\" and will not be paired up with itself., List.GetEven - Gets even indices from the list., List.GetOdd - Gets the odd indices from the list., List.Randomise&Divide - Shiffles the input list and divides it into sub-lists based on ratios(1/4 + 1/2 + 1/4 will give you three lists split accordingly) The smalest ratio will always be 1 / the list length and the largest ratio will be 1. A seed input can shuffle the list further., List.ShiftIndices+ - The built in node fails if the shift number is greater than the lenght of the list. This node acts as a work-around., List.Split - Splits a list at the desired length, Ln2Str - Serilize a geometry line to a string for use in Revit parameters, Math.AlmostEqual - Checks if a number is almost equal to a value with a specified tollerance., N-hedron.ByOriginVector - Creates a multi-sided poyhedron with defined side length and total height., NullAllIndicesOf - list all of the indices of a list that match the specified value. Capable of handling null values, part of the SmartCopyMonitor workflow., NullGetParameter - Similar to the built in node.Capable of handling null values, part of the SmartCopyMonitor workflow., NullIndexOf - Similar to the bult-in node but provides a null value instead of -1 of failure. Part of the SmartCopyMonitor workflow., NullReorder - Simiar to the built-in function with the difference that it can handle null indices. Part of the SmartCopyMonitor workflow., NullSetDifference - Similar to the built in node, with a built-in safety for null values. Part of the SmartCopyMonitor workflow., NullSetParameter - Similar to the built-in function but with the ability to handle null values. Part of the SmartCopyMon workflow., Number.ToString - Converts the input number(s) to string. Can process lists., Object.Class - Gets the input object's class name. Can process lists., Point.PullOntoPlane - Pulls (projects) the point onto the input plane, following the plane normal., Pt2Str - Serilize a geometry point to a string for use in Revit parameters, Select Edges - Select multiple edges from inside the Revit UI. Be sure to press \"Finish\" once done. You can use a Boolean toggle to refresh your selection., Select Linked Element - Select the linked instance first, followed by the element. If your selection fails, just press escape.\r\nTo refresh the node, connect a boolean switch node., Select Linked Elements - Select the linked instance first, followed by the elements. To finish the selection, press Finish. If your selection fails, just press escape or Cancel.\r\nTo refresh the node, connect a boolean switch node., Select Linked Face - Select the linked instance first, followed by the face. If your selection fails, just press escape.\r\nTo refresh the node, connect a boolean switch node., SelectInRevit - Selects the input elements in Revit. Works with Revit 2016., Shaft.ByCurves - Creates a shaft opening. The top level MUST be higher than the base level for a successful execution. You can either provide one base and top level for all shafts or have unique levels for each shaft instance., Sheet.Views+ - Extracts all views and schedules (minus the revision schedule) placed on the input sheet (or sheets).\r\nWill be depreciated once the bult in node works with all plan types., Star.ByCenterRadiusRays - Fun little node to create star shapes., Str2Ln - De-serilize a Revit parameter string into a geometric line., Str2Pt - De-serilize a Revit parameter string into a geometric point., Topography.ToPolySurface(py) - Python implementation that should boost performance by 5-10%. Optimized algorithm for converting topographies into polysurfaces. Tested with topographies containing up to 40 000 points. \r\nWarning conversions of such mangitudes consume a lot of resources and are sub-optimal. Ensure that you have at least 8GB of ram and plenty of patience before attempting such a conversion, otherwise your Dynamo and Revit instances may crash., Topography.ToPolySurface - Optimized algorithm for converting topographies into polysurfaces. Tested with topographies containing up to 40 000 points. \r\nWarning conversions of such mangitudes consume a lot of resources and are sub-optimal. Ensure that you have at least 8GB of ram and plenty of patience before attempting such a conversion, otherwise your Dynamo and Revit instances may crash., ViewSet.ByViewsName - Creates a set of views(or sheets) for printing. If the set exists, set Overwrite to true to replace it., Wall.WallType - Queries the wall type of the input wall. Works for types from linked documents as well., WallType.Duplicate - Attemts to create duplicate wall types. If the wall type exists, it is appended to the end. Sets only the structural width of the wall. The width must be in feet., Watch+ - This node that serializes the input information and presents it in a resizable text window.","engine_metadata":"","engine_version":"0.8.2.2392","created":"2016-02-18T14:49:13.248Z","full_dependency_versions":["82.7.7"],"full_dependency_ids":[{"_id":"56077cf3662bf0e9080001ea","name":"spring nodes"}],"direct_dependency_versions":[],"direct_dependency_ids":[],"change_log":"","version":"82.7.7"},{"_id":"56ce9b3bc3e9ee4a08000149","contains_binaries":false,"node_libraries":[],"url_with_deps":"","url":"https://s3.amazonaws.com/greg-pkgs-dev/af309e18-7345-4143-8954-b7992ca28ac2gregPkg391.zip","contents":"Active View - Selects the current document's active view. Supports more view types than the built-in option.\r\nWill be depreciated once the bult in node works with all plan types., Beams.FixExtents - Detects all beams from the input list with broken extents(actual length - cut length <  margin) and attemts to correct them., BoundingBox.Scale - Scales the bounding box in three dimensions according to it's center., ClosedCurve.Offset+(0.9) - Offsets a curve both ways and correctly differenciates the external and internal offset. If an offset goes beyond the curve's bounds, the result will fail and a null value will be appended instead. Also works for convex curves like arcs., ClosedCurve.Offset+ - Offsets a curve both ways and correctly differenciates the external and internal offset. If an offset goes beyond the curve's bounds, the result will fail and a null value will be appended instead. Also works for convex curves like arcs., Collector.CurrentSelection - Gets the currently selected elements. Connect a boolean switch to refresh the selection. Compatible with Revit 2016, Collector.ElementsInView - Selects all elements visible in the input view., Collector.ElementSketch - Get the actual sketch lines of a sketch based element (floor, ceiling, modified wall, etc.) . You can optionally fetch the matching model curves, however this might prove comptationally heavy on larger data sets., Collector.FamilyInstances - Collects placed family instance elements from the document that match the name. Partially mathing elements are collected as well. If no matches are found, a list of all isntance names will be output., Collector.FamilyTypes - Collects non-system family types that fully match or partially match the provided names. If no matches are found, a list of all type names will be output., Collector.FloorTypes - Collects Floor types by name., Collector.LinkedInstanceElements - Extract elements by category from the selected linked instances. The transform vector can be used to get the exact location of the elements in the local file, Collector.Revisions - Collects all revision clouds from a specific date., Collector.Sheets - Search for sheets by either their name or their number. Use a false boolean switch to search by number., Collector.Views - Search for views based on naming. You can choose to either include or exclude schedules. Use the sheet collector for sheets., Collector.WallTypes - Collects wall types by name., Color2Decimal - Converts a Dynamo colour its Revit equivalent  decimal value., Curve.Offset+ - Offsets a curve towards the specified point, CurveLoop.Simplify - Attempts to simplify an open or a closed curve loop by connecting straight separate line segments into a single line., Decimal2Color - Converts a revit colour decimal value to its Dynamo equivalent., Dictionary.ByKeysValues - Dictionaries are an incredibly powerful tool for making associative sets between two equal length lists. The first list must be of unique strings (or numbers) and will be the key and the second list will be the matching values (it can be made up of geometry, elements, even other lists)\r\nThe search keys list will provide the corresponding value to the input key., DirectShape.ByGeometry - Convert the input geometry to DirectShape element inside the Revit document.  It supports solids or surfaces.It is based on an alternative process that uses a SAT import and can produce smooth surfaces. Each created DS will have a unique type. Make sure that each input geometry has a unique name. You can either feed a single category for all geometries or a unique category for each geometry - the node's lacing is set to longest by default., DirectShape.Transform - Transforms the typed DirectShape element from the identity coordinate system to the input coordinate system(s), in a manner similar to Dynamo's Geometry.Transform node., DirectShape.Translate - Copy the input DirectShape element with the help of a translation vector, similarly to the Geometry.Translate node. This method should prove more efficient than Element.Copy, Doc.DeleteElements - Attempts to delete the input list of elements from the active Revit document.The node returns the number of successfully deleted elements and their Ids as a string. Carefully observe the deleted elements count. It may be greater than the input list because hosted elements or tags will be deleted as well. If an element in the list can not be deleted (for example last revision or last view), the whole list will fail to be deleted., Element.AddVoidCut - Accepts single or list inputs. If an element that can be cut and a family that can act as a void cutting entity are provided, the element will be cut. Please make sure that the geometries of the elements actually cut. Otherwise an empty cut will be created that may impede the performance of your file. Add void cuts sparcely because they affect the size of your project., Element.Copy - WARNING: Do not use this node in Automatic mode! Copy the input Revit elements with the help of a translation vector, similarly to the Geometry.Translate node., Element.IsCut - Tests if the element is being cut by any void instances. If any cuts exist all cutting elements will be provided., Element.IsCutting - Tests if the input element (or elements) is a void cut and if it is cutting any elements. In such cases, the cut elements will be provided., Element.RemoveVoidCut - Removes the void cut between the input elements, if such exists., Element.SetLocation - Attempts to modify the location of the input element. This can effectively add as a move comand in Revit. Works for both line based and point based elements., ErrorReport.Parse - Process a Revit error report (HTML file) and extract the error types, all affected elements and the total number of errors. If you are executing from a document different than the one the error report belongs to, be sure to set \"fetch_elements\" to false., FamilyInstance.ByGeometry - You must provide a valid family template path that will be used for all input geometry objects. The project units(and not the templates) will be used to determine the size of the output geometry.\r\nThe provided category will be used only if the family template supports it. If not, the default template category will be used instead.\r\nLikewise, the family material(provided as a string) will be set only if a material with that name exists in the template. If not, the default material will be used instead (\"By Category\").\r\nFor void cuts, the material settings will be ignored.\r\nThe Subcategory name is an optional input. If you'd like to skip assigning a Subcategory to any new instance, simply use null.\r\nThe node expects a unique family name for each geometry object. The rest of the input lists will be processed as if the node lacing is set to longest., FamilyInstance.Rotation - Fetches the angle of rotation around the insertion point of a point based element. The angle is always measured counter-clockwise., FamilyType.Duplicate - Create duplicate family types with the specified name. If the type exists, it is called., Feet2Fraction - Converts a decimal foot value to a fractional foot/inch string., File.Size - Checks the file size. Provide a file path as a string., Filter.ByCategoryName - Filters the input elements by their category name. You can input multiple category names., Filter.ByClassName - Filters a list of objects by the object's class name. Note that Dynamo elements belong to different classes than their Revit counterparts. Use the Object.Class node to check an object's class., Filter.BySelection - Check the items that you'd like to filter in.  Unchecked items will be sent to the out list. The optional names input will override the object representation., Floor-WallType.SetMaterial - Sets a new material to the structural core of the provided floor and wall types., FloorOpening.ByCurves - Create hosted floor opeinngs through the input floors. The second input is a list of sub-lists of the boundary curves., FloorType.Duplicate - Attemts to create duplicate floor types. If the floor type exists, it is appended to the end. Sets only the structural width of the floor. The width must be in feet., Fn.ElementsOfCategory - Same as the built in \"All Elements of Category\" but can act as a function object., Form.ByGeometry - Convert the input geometry to a Revit Form object. Forms can exist only in the family environment. You can convert complicated solids or surfaces directly into forms. A form can act as a void. Provide either one true boolean value to convert a form into a void. The node's lacing is set to longest by default., Fraction2Feet - Converts a fractioned feet /inch string value into a decimal foot value., Geometry.SplitRecursively - Splits a surface or a solid recursively, using the resulting reduced geometry for every next split., HostedInstance.ByPoints - Creates hosted family instances(doors/windows) at the specified points. You can feed either a single family type or a unique type for each instance., Input.Wait - Waits for all inputs to be completed before continuing the execution process.Part of the SmartCopyMon workflow., InterferenceCheck.Parse - Process a Revit interference check (HTML file) and extract the interference categories, all affected elements and the total number of clashes. If you are executing from a document different than the one the error report belongs to, be sure to set \"fetch_elements\" to false., Line.StraightenXY - Checks a line's end points for irregularities and corrects them if they are at or below the specified margin. The default margin is 1/5000 of the curve length, which is conservative., Line.StraightenZ - Checks a line's end points for irregularities in  the Z axis and corrects them if they are at or below the specified margin. The default margin is 1/2000 of the curve length, which is conservative., Lines.Group&FixCorners - Groups unconnected lines into sub-lists by margin(the maximum distance between endpoints) and attempts to create clean corner connections between them. Built on top of the Group curves node found in archi-lab.net., List.DragDropReorder - Press and hold on an item to move it up or down the list. To confirm and close the window, select \"Save Order\". The optional names input will override the object representation., List.DropDown - Selects one list item by a drop-down combo box. The optional names input will override the object representation., List.DropFirstLast - Removes the first and last items from the list, List.DropLast - Removes the last value of the list., List.EveryOther - Useful for when you want to combine an item on the list with every other item on the list. For example in list {1,2,3} , \"2\" will be paired up only with \"1\" and \"3\" and will not be paired up with itself., List.GetEven - Gets even indices from the list., List.GetOdd - Gets the odd indices from the list., List.Randomise&Divide - Shiffles the input list and divides it into sub-lists based on ratios(1/4 + 1/2 + 1/4 will give you three lists split accordingly) The smalest ratio will always be 1 / the list length and the largest ratio will be 1. A seed input can shuffle the list further., List.ShiftIndices+ - The built in node fails if the shift number is greater than the lenght of the list. This node acts as a work-around., List.Split - Splits a list at the desired length, Ln2Str - Serilize a geometry line to a string for use in Revit parameters, Math.AlmostEqual - Checks if a number is almost equal to a value with a specified tollerance., N-hedron.ByOriginVector - Creates a multi-sided poyhedron with defined side length and total height., NullAllIndicesOf - list all of the indices of a list that match the specified value. Capable of handling null values, part of the SmartCopyMonitor workflow., NullGetParameter - Similar to the built in node.Capable of handling null values, part of the SmartCopyMonitor workflow., NullIndexOf - Similar to the bult-in node but provides a null value instead of -1 of failure. Part of the SmartCopyMonitor workflow., NullReorder - Simiar to the built-in function with the difference that it can handle null indices. Part of the SmartCopyMonitor workflow., NullSetDifference - Similar to the built in node, with a built-in safety for null values. Part of the SmartCopyMonitor workflow., NullSetParameter - Similar to the built-in function but with the ability to handle null values. Part of the SmartCopyMon workflow., Number.ToString - Converts the input number(s) to string. Can process lists., Object.Class - Gets the input object's class name. Can process lists., Point.PullOntoPlane - Pulls (projects) the point onto the input plane, following the plane normal., Pt2Str - Serilize a geometry point to a string for use in Revit parameters, Select Edges - Select multiple edges from inside the Revit UI. Be sure to press \"Finish\" once done. You can use a Boolean toggle to refresh your selection., Select Linked Element - Select the linked instance first, followed by the element. If your selection fails, just press escape.\r\nTo refresh the node, connect a boolean switch node., Select Linked Elements - Select the linked instance first, followed by the elements. To finish the selection, press Finish. If your selection fails, just press escape or Cancel.\r\nTo refresh the node, connect a boolean switch node., Select Linked Face - Select the linked instance first, followed by the face. If your selection fails, just press escape.\r\nTo refresh the node, connect a boolean switch node., SelectInRevit - Selects the input elements in Revit. Works with Revit 2016., Shaft.ByCurves - Creates a shaft opening. The top level MUST be higher than the base level for a successful execution. You can either provide one base and top level for all shafts or have unique levels for each shaft instance., Sheet.Views+ - Extracts all views and schedules (minus the revision schedule) placed on the input sheet (or sheets).\r\nWill be depreciated once the bult in node works with all plan types., Star.ByCenterRadiusRays - Fun little node to create star shapes., Str2Ln - De-serilize a Revit parameter string into a geometric line., Str2Pt - De-serilize a Revit parameter string into a geometric point., Topography.ToPolySurface(py) - Python implementation that should boost performance by 5-10%. Optimized algorithm for converting topographies into polysurfaces. Tested with topographies containing up to 40 000 points. \r\nWarning conversions of such mangitudes consume a lot of resources and are sub-optimal. Ensure that you have at least 8GB of ram and plenty of patience before attempting such a conversion, otherwise your Dynamo and Revit instances may crash., Topography.ToPolySurface - Optimized algorithm for converting topographies into polysurfaces. Tested with topographies containing up to 40 000 points. \r\nWarning conversions of such mangitudes consume a lot of resources and are sub-optimal. Ensure that you have at least 8GB of ram and plenty of patience before attempting such a conversion, otherwise your Dynamo and Revit instances may crash., ViewSet.ByViewsName - Creates a set of views(or sheets) for printing. If the set exists, set Overwrite to true to replace it., Wall.WallType - Queries the wall type of the input wall. Works for types from linked documents as well., WallType.Duplicate - Attemts to create duplicate wall types. If the wall type exists, it is appended to the end. Sets only the structural width of the wall. The width must be in feet., Watch+ - This node that serializes the input information and presents it in a resizable text window.","engine_metadata":"","engine_version":"0.8.2.2392","created":"2016-02-25T06:12:11.144Z","full_dependency_versions":["82.7.8"],"full_dependency_ids":[{"_id":"56077cf3662bf0e9080001ea","name":"spring nodes"}],"direct_dependency_versions":[],"direct_dependency_ids":[],"change_log":"","version":"82.7.8"},{"_id":"570130725bee3e21380000d4","contains_binaries":false,"node_libraries":[],"url_with_deps":"","url":"https://s3.amazonaws.com/greg-pkgs-dev/876b59d3-1ca7-4ebe-8338-b92c8d29823egregPkg811.zip","contents":"Active View - Selects the current document's active view. Supports more view types than the built-in option.\r\nWill be depreciated once the bult in node works with all plan types., AreaPlan.ByLevelName - Creates an area plan at the designated levels. Each new view needs a name. An area scheme must first be activated before it can be used. To activate a scheme, place one view of that type in the project(you can then delete it).  If a view with the same scheme and name exists, you'll get a null instead., Beams.FixExtents - Detects all beams from the input list with broken extents(actual length - cut length <  margin) and attemts to correct them., BoundingBox.Scale - Scales the bounding box in three dimensions according to it's center., ClosedCurve.Offset+(0.9) - Offsets a curve both ways and correctly differenciates the external and internal offset. If an offset goes beyond the curve's bounds, the result will fail and a null value will be appended instead. Also works for convex curves like arcs., ClosedCurve.Offset+ - Offsets a curve both ways and correctly differenciates the external and internal offset. If an offset goes beyond the curve's bounds, the result will fail and a null value will be appended instead. Also works for convex curves like arcs., Collector.CurrentSelection - Gets the currently selected elements. Connect a boolean switch to refresh the selection. Compatible with Revit 2016, Collector.ElementsInView - Selects all elements visible in the input view., Collector.ElementSketch - Get the actual sketch lines of a sketch based element (floor, ceiling, modified wall, etc.) . You can optionally fetch the matching model curves, however this might prove comptationally heavy on larger data sets., Collector.FamilyInstances - Collects placed family instance elements from the document that match the name. Partially mathing elements are collected as well. If no matches are found, a list of all isntance names will be output., Collector.FamilyTypes - Collects non-system family types that fully match or partially match the provided names. If no matches are found, a list of all type names will be output., Collector.FloorTypes - Collects Floor types by name., Collector.LinkedInstanceElements - Extract elements by category from the selected linked instances. The transform vector can be used to get the exact location of the elements in the local file, Collector.Revisions - Collects all revision clouds from a specific date., Collector.Sheets - Search for sheets by either their name or their number. Use a false boolean switch to search by number., Collector.Views - Search for views based on naming. You can choose to either include or exclude schedules. Use the sheet collector for sheets., Collector.WallTypes - Collects wall types by name., Color2Decimal - Converts a Dynamo colour its Revit equivalent  decimal value., Curve.Offset+ - Offsets a curve towards the specified point, CurveLoop.Simplify - Attempts to simplify an open or a closed curve loop by connecting straight separate line segments into a single line., Decimal2Color - Converts a revit colour decimal value to its Dynamo equivalent., Dictionary.ByKeysValues - Dictionaries are an incredibly powerful tool for making associative sets between two equal length lists. The first list must be of unique strings (or numbers) and will be the key and the second list will be the matching values (it can be made up of geometry, elements, even other lists)\r\nThe search keys list will provide the corresponding value to the input key., DirectShape.ByGeometry - Convert the input geometry to DirectShape element inside the Revit document.  It supports solids or surfaces.It is based on an alternative process that uses a SAT import and can produce smooth surfaces. Each created DS will have a unique type. Make sure that each input geometry has a unique name. You can either feed a single category for all geometries or a unique category for each geometry - the node's lacing is set to longest by default., DirectShape.Transform - Transforms the typed DirectShape element from the identity coordinate system to the input coordinate system(s), in a manner similar to Dynamo's Geometry.Transform node., DirectShape.Translate - Copy the input DirectShape element with the help of a translation vector, similarly to the Geometry.Translate node. This method should prove more efficient than Element.Copy, Doc.DeleteElements - Attempts to delete the input list of elements from the active Revit document.The node returns the number of successfully deleted elements and their Ids as a string. Carefully observe the deleted elements count. It may be greater than the input list because hosted elements or tags will be deleted as well. If an element in the list can not be deleted (for example last revision or last view), the whole list will fail to be deleted., Element.AddVoidCut - Accepts single or list inputs. If an element that can be cut and a family that can act as a void cutting entity are provided, the element will be cut. Please make sure that the geometries of the elements actually cut. Otherwise an empty cut will be created that may impede the performance of your file. Add void cuts sparcely because they affect the size of your project., Element.Copy - WARNING: Do not use this node in Automatic mode! Copy the input Revit elements with the help of a translation vector, similarly to the Geometry.Translate node., Element.IsCut - Tests if the element is being cut by any void instances. If any cuts exist all cutting elements will be provided., Element.IsCutting - Tests if the input element (or elements) is a void cut and if it is cutting any elements. In such cases, the cut elements will be provided., Element.RemoveVoidCut - Removes the void cut between the input elements, if such exists., Element.SetLocation - Attempts to modify the location of the input element. This can effectively add as a move comand in Revit. Works for both line based and point based elements., ErrorReport.Parse - Process a Revit error report (HTML file) and extract the error types, all affected elements and the total number of errors. If you are executing from a document different than the one the error report belongs to, be sure to set \"fetch_elements\" to false., FamilyInsance.ByFacePoints - Places instances on the input face oriented to the face's U tangent and the global Z axis., FamilyInstance.ByGeometry - You must provide a valid family template path that will be used for all input geometry objects. The project units(and not the templates) will be used to determine the size of the output geometry.\r\nThe provided category will be used only if the family template supports it. If not, the default template category will be used instead.\r\nLikewise, the family material(provided as a string) will be set only if a material with that name exists in the template. If not, the default material will be used instead (\"By Category\").\r\nFor void cuts, the material settings will be ignored.\r\nThe Subcategory name is an optional input. If you'd like to skip assigning a Subcategory to any new instance, simply use null.\r\nThe node expects a unique family name for each geometry object. The rest of the input lists will be processed as if the node lacing is set to longest., FamilyInstance.Rotation - Fetches the angle of rotation around the insertion point of a point based element. The angle is always measured counter-clockwise., FamilyType.Duplicate - Create duplicate family types with the specified name. If the type exists, it is called., Feet2Fraction - Converts a decimal foot value to a fractional foot/inch string., File.Size - Checks the file size. Provide a file path as a string., Filter.ByCategoryName - Filters the input elements by their category name. You can input multiple category names., Filter.ByClassName - Filters a list of objects by the object's class name. Note that Dynamo elements belong to different classes than their Revit counterparts. Use the Object.Class node to check an object's class., Filter.BySelection - Check the items that you'd like to filter in.  Unchecked items will be sent to the out list. The optional names input will override the object representation., Floor-WallType.SetMaterial - Sets a new material to the structural core of the provided floor and wall types., FloorOpening.ByCurves - Create hosted floor opeinngs through the input floors. The second input is a list of sub-lists of the boundary curves., FloorType.Duplicate - Attemts to create duplicate floor types. If the floor type exists, it is appended to the end. Sets only the structural width of the floor. The width must be in feet., Fn.ElementsOfCategory - Same as the built in \"All Elements of Category\" but can act as a function object., Form.ByGeometry - Convert the input geometry to a Revit Form object. Forms can exist only in the family environment. You can convert complicated solids or surfaces directly into forms. A form can act as a void. Provide either one true boolean value to convert a form into a void. The node's lacing is set to longest by default., Fraction2Feet - Converts a fractioned feet /inch string value into a decimal foot value., Geometry.SplitRecursively - Splits a surface or a solid recursively, using the resulting reduced geometry for every next split., HostedInstance.ByPoints - Creates hosted family instances(doors/windows) at the specified points. You can feed either a single family type or a unique type for each instance., Input.Wait - Waits for all inputs to be completed before continuing the execution process.Part of the SmartCopyMon workflow., InterferenceCheck.Parse - Process a Revit interference check (HTML file) and extract the interference categories, all affected elements and the total number of clashes. If you are executing from a document different than the one the error report belongs to, be sure to set \"fetch_elements\" to false., Line.StraightenXY - Checks a line's end points for irregularities and corrects them if they are at or below the specified margin. The default margin is 1/5000 of the curve length, which is conservative., Line.StraightenZ - Checks a line's end points for irregularities in  the Z axis and corrects them if they are at or below the specified margin. The default margin is 1/2000 of the curve length, which is conservative., Lines.Group&FixCorners - Groups unconnected lines into sub-lists by margin(the maximum distance between endpoints) and attempts to create clean corner connections between them. Built on top of the Group curves node found in archi-lab.net., List.DragDropReorder - Press and hold on an item to move it up or down the list. To confirm and close the window, select \"Save Order\". The optional names input will override the object representation., List.DropDown - Selects one list item by a drop-down combo box. The optional names input will override the object representation., List.DropFirstLast - Removes the first and last items from the list, List.DropLast - Removes the last value of the list., List.EveryOther - Useful for when you want to combine an item on the list with every other item on the list. For example in list {1,2,3} , \"2\" will be paired up only with \"1\" and \"3\" and will not be paired up with itself., List.GetEven - Gets even indices from the list., List.GetOdd - Gets the odd indices from the list., List.Randomise&Divide - Shiffles the input list and divides it into sub-lists based on ratios(1/4 + 1/2 + 1/4 will give you three lists split accordingly) The smalest ratio will always be 1 / the list length and the largest ratio will be 1. A seed input can shuffle the list further., List.ShiftIndices+ - The built in node fails if the shift number is greater than the lenght of the list. This node acts as a work-around., List.Split - Splits a list at the desired length, Ln2Str - Serilize a geometry line to a string for use in Revit parameters, Math.AlmostEqual - Checks if a number is almost equal to a value with a specified tollerance., N-hedron.ByOriginVector - Creates a multi-sided poyhedron with defined side length and total height., NullAllIndicesOf - list all of the indices of a list that match the specified value. Capable of handling null values, part of the SmartCopyMonitor workflow., NullGetParameter - Similar to the built in node.Capable of handling null values, part of the SmartCopyMonitor workflow., NullIndexOf - Similar to the bult-in node but provides a null value instead of -1 of failure. Part of the SmartCopyMonitor workflow., NullReorder - Simiar to the built-in function with the difference that it can handle null indices. Part of the SmartCopyMonitor workflow., NullSetDifference - Similar to the built in node, with a built-in safety for null values. Part of the SmartCopyMonitor workflow., NullSetParameter - Similar to the built-in function but with the ability to handle null values. Part of the SmartCopyMon workflow., Number.ToString - Converts the input number(s) to string. Can process lists., Object.Class - Gets the input object's class name. Can process lists., Point.PullOntoPlane - Pulls (projects) the point onto the input plane, following the plane normal., Polygon.ContainmentTest+ - A less accurate method that should perform faster than the built-in node for large data sets., Pt2Str - Serilize a geometry point to a string for use in Revit parameters, Select Edges - Select multiple edges from inside the Revit UI. Be sure to press \"Finish\" once done. You can use a Boolean toggle to refresh your selection., Select Elements (ordered) - Select multiple elements from the Revit document in the desired order. Hit ESC to stop picking. To refresh the node, connect a boolean switch node., Select Linked Element - Select the linked instance first, followed by the element. If your selection fails, just press escape.\r\nTo refresh the node, connect a boolean switch node., Select Linked Elements (ordered) - Select the linked instance first. Then select multiple elements from the Revit document in the desired order. Hit ESC to stop picking. To refresh the node, connect a boolean switch node., Select Linked Elements - Select the linked instance first, followed by the elements. To finish the selection, press Finish. If your selection fails, just press escape or Cancel.\r\nTo refresh the node, connect a boolean switch node., Select Linked Face - Select the linked instance first, followed by the face. If your selection fails, just press escape.\r\nTo refresh the node, connect a boolean switch node., SelectInRevit - Selects the input elements in Revit. Works with Revit 2016., Shaft.ByCurves - Creates a shaft opening. The top level MUST be higher than the base level for a successful execution. You can either provide one base and top level for all shafts or have unique levels for each shaft instance., Sheet.Views+ - Extracts all views and schedules (minus the revision schedule) placed on the input sheet (or sheets).\r\nWill be depreciated once the bult in node works with all plan types., Star.ByCenterRadiusRays - Fun little node to create star shapes., Str2Ln - De-serilize a Revit parameter string into a geometric line., Str2Pt - De-serilize a Revit parameter string into a geometric point., Topography.ToPolySurface(py) - Python implementation that should boost performance by 5-10%. Optimized algorithm for converting topographies into polysurfaces. Tested with topographies containing up to 40 000 points. \r\nWarning conversions of such mangitudes consume a lot of resources and are sub-optimal. Ensure that you have at least 8GB of ram and plenty of patience before attempting such a conversion, otherwise your Dynamo and Revit instances may crash., Topography.ToPolySurface - Optimized algorithm for converting topographies into polysurfaces. Tested with topographies containing up to 40 000 points. \r\nWarning conversions of such mangitudes consume a lot of resources and are sub-optimal. Ensure that you have at least 8GB of ram and plenty of patience before attempting such a conversion, otherwise your Dynamo and Revit instances may crash., ViewSet.ByViewsName - Creates a set of views(or sheets) for printing. If the set exists, set Overwrite to true to replace it., Wall.WallType - Queries the wall type of the input wall. Works for types from linked documents as well., WallType.Duplicate - Attemts to create duplicate wall types. If the wall type exists, it is appended to the end. Sets only the structural width of the wall. The width must be in feet., Watch+ - This node that serializes the input information and presents it in a resizable text window.","engine_metadata":"","engine_version":"0.8.2.2392","created":"2016-04-03T15:02:10.495Z","full_dependency_versions":["82.8.1"],"full_dependency_ids":[{"_id":"56077cf3662bf0e9080001ea","name":"spring nodes"}],"direct_dependency_versions":[],"direct_dependency_ids":[],"change_log":"","version":"82.8.1"},{"_id":"57022a045bee3e21380000d5","contains_binaries":false,"node_libraries":[],"url_with_deps":"","url":"https://s3.amazonaws.com/greg-pkgs-dev/115f0698-a796-4ad5-975a-a285c242f434gregPkg227.zip","contents":"Active View - Selects the current document's active view. Supports more view types than the built-in option.\r\nWill be depreciated once the bult in node works with all plan types., AreaPlan.ByLevelName - Creates an area plan at the designated levels. Each new view needs a name. An area scheme must first be activated before it can be used. To activate a scheme, place one view of that type in the project(you can then delete it).  If a view with the same scheme and name exists, you'll get a null instead., Beams.FixExtents - Detects all beams from the input list with broken extents(actual length - cut length <  margin) and attemts to correct them., BoundingBox.Scale - Scales the bounding box in three dimensions according to it's center., ClosedCurve.Offset+(0.9) - Offsets a curve both ways and correctly differenciates the external and internal offset. If an offset goes beyond the curve's bounds, the result will fail and a null value will be appended instead. Also works for convex curves like arcs., ClosedCurve.Offset+ - Offsets a curve both ways and correctly differenciates the external and internal offset. If an offset goes beyond the curve's bounds, the result will fail and a null value will be appended instead. Also works for convex curves like arcs., Collector.CurrentSelection - Gets the currently selected elements. Connect a boolean switch to refresh the selection. Compatible with Revit 2016, Collector.ElementsInView - Selects all elements visible in the input view., Collector.ElementSketch - Get the actual sketch lines of a sketch based element (floor, ceiling, modified wall, etc.) . You can optionally fetch the matching model curves, however this might prove comptationally heavy on larger data sets., Collector.FamilyInstances - Collects placed family instance elements from the document that match the name. Partially mathing elements are collected as well. If no matches are found, a list of all isntance names will be output., Collector.FamilyTypes - Collects non-system family types that fully match or partially match the provided names. If no matches are found, a list of all type names will be output., Collector.FloorTypes - Collects Floor types by name., Collector.LinkedInstanceElements - Extract elements by category from the selected linked instances. The transform vector can be used to get the exact location of the elements in the local file, Collector.Revisions - Collects all revision clouds from a specific date., Collector.Sheets - Search for sheets by either their name or their number. Use a false boolean switch to search by number., Collector.Views - Search for views based on naming. You can choose to either include or exclude schedules. Use the sheet collector for sheets., Collector.WallTypes - Collects wall types by name., Color2Decimal - Converts a Dynamo colour its Revit equivalent  decimal value., Curve.Offset+ - Offsets a curve towards the specified point, CurveLoop.Simplify - Attempts to simplify an open or a closed curve loop by connecting straight separate line segments into a single line., Decimal2Color - Converts a revit colour decimal value to its Dynamo equivalent., Dictionary.ByKeysValues - Dictionaries are an incredibly powerful tool for making associative sets between two equal length lists. The first list must be of unique strings (or numbers) and will be the key and the second list will be the matching values (it can be made up of geometry, elements, even other lists)\r\nThe search keys list will provide the corresponding value to the input key., DirectShape.ByGeometry - Convert the input geometry to DirectShape element inside the Revit document.  It supports solids or surfaces.It is based on an alternative process that uses a SAT import and can produce smooth surfaces. Each created DS will have a unique type. Make sure that each input geometry has a unique name. You can either feed a single category for all geometries or a unique category for each geometry - the node's lacing is set to longest by default., DirectShape.Transform - Transforms the typed DirectShape element from the identity coordinate system to the input coordinate system(s), in a manner similar to Dynamo's Geometry.Transform node., DirectShape.Translate - Copy the input DirectShape element with the help of a translation vector, similarly to the Geometry.Translate node. This method should prove more efficient than Element.Copy, Doc.DeleteElements - Attempts to delete the input list of elements from the active Revit document.The node returns the number of successfully deleted elements and their Ids as a string. Carefully observe the deleted elements count. It may be greater than the input list because hosted elements or tags will be deleted as well. If an element in the list can not be deleted (for example last revision or last view), the whole list will fail to be deleted., Element.AddVoidCut - Accepts single or list inputs. If an element that can be cut and a family that can act as a void cutting entity are provided, the element will be cut. Please make sure that the geometries of the elements actually cut. Otherwise an empty cut will be created that may impede the performance of your file. Add void cuts sparcely because they affect the size of your project., Element.Copy - WARNING: Do not use this node in Automatic mode! Copy the input Revit elements with the help of a translation vector, similarly to the Geometry.Translate node., Element.IsCut - Tests if the element is being cut by any void instances. If any cuts exist all cutting elements will be provided., Element.IsCutting - Tests if the input element (or elements) is a void cut and if it is cutting any elements. In such cases, the cut elements will be provided., Element.RemoveVoidCut - Removes the void cut between the input elements, if such exists., Element.SetLocation - Attempts to modify the location of the input element. This can effectively add as a move comand in Revit. Works for both line based and point based elements., ErrorReport.Parse - Process a Revit error report (HTML file) and extract the error types, all affected elements and the total number of errors. If you are executing from a document different than the one the error report belongs to, be sure to set \"fetch_elements\" to false., FamilyInsance.ByFacePoints - Places instances on the input face oriented to the face's U tangent and the global Z axis., FamilyInstance.ByGeometry - You must provide a valid family template path that will be used for all input geometry objects. The project units(and not the templates) will be used to determine the size of the output geometry.\r\nThe provided category will be used only if the family template supports it. If not, the default template category will be used instead.\r\nLikewise, the family material(provided as a string) will be set only if a material with that name exists in the template. If not, the default material will be used instead (\"By Category\").\r\nFor void cuts, the material settings will be ignored.\r\nThe Subcategory name is an optional input. If you'd like to skip assigning a Subcategory to any new instance, simply use null.\r\nThe node expects a unique family name for each geometry object. The rest of the input lists will be processed as if the node lacing is set to longest., FamilyInstance.Rotation - Fetches the angle of rotation around the insertion point of a point based element. The angle is always measured counter-clockwise., FamilyType.Duplicate - Create duplicate family types with the specified name. If the type exists, it is called., Feet2Fraction - Converts a decimal foot value to a fractional foot/inch string., File.Size - Checks the file size. Provide a file path as a string., Filter.ByCategoryName - Filters the input elements by their category name. You can input multiple category names., Filter.ByClassName - Filters a list of objects by the object's class name. Note that Dynamo elements belong to different classes than their Revit counterparts. Use the Object.Class node to check an object's class., Filter.BySelection - Check the items that you'd like to filter in.  Unchecked items will be sent to the out list. The optional names input will override the object representation., Floor-WallType.SetMaterial - Sets a new material to the structural core of the provided floor and wall types., FloorOpening.ByCurves - Create hosted floor opeinngs through the input floors. The second input is a list of sub-lists of the boundary curves., FloorType.Duplicate - Attemts to create duplicate floor types. If the floor type exists, it is appended to the end. Sets only the structural width of the floor. The width must be in feet., Fn.ElementsOfCategory - Same as the built in \"All Elements of Category\" but can act as a function object., Form.ByGeometry - Convert the input geometry to a Revit Form object. Forms can exist only in the family environment. You can convert complicated solids or surfaces directly into forms. A form can act as a void. Provide either one true boolean value to convert a form into a void. The node's lacing is set to longest by default., Fraction2Feet - Converts a fractioned feet /inch string value into a decimal foot value., Geometry.SplitRecursively - Splits a surface or a solid recursively, using the resulting reduced geometry for every next split., HostedInstance.ByPoints - Creates hosted family instances(doors/windows) at the specified points. You can feed either a single family type or a unique type for each instance., Input.Wait - Waits for all inputs to be completed before continuing the execution process.Part of the SmartCopyMon workflow., InterferenceCheck.Parse - Process a Revit interference check (HTML file) and extract the interference categories, all affected elements and the total number of clashes. If you are executing from a document different than the one the error report belongs to, be sure to set \"fetch_elements\" to false., Line.StraightenXY - Checks a line's end points for irregularities and corrects them if they are at or below the specified margin. The default margin is 1/5000 of the curve length, which is conservative., Line.StraightenZ - Checks a line's end points for irregularities in  the Z axis and corrects them if they are at or below the specified margin. The default margin is 1/2000 of the curve length, which is conservative., Lines.Group&FixCorners - Groups unconnected lines into sub-lists by margin(the maximum distance between endpoints) and attempts to create clean corner connections between them. Built on top of the Group curves node found in archi-lab.net., List.DragDropReorder - Press and hold on an item to move it up or down the list. To confirm and close the window, select \"Save Order\". The optional names input will override the object representation., List.DropDown - Selects one list item by a drop-down combo box. The optional names input will override the object representation., List.DropFirstLast - Removes the first and last items from the list, List.DropLast - Removes the last value of the list., List.EveryOther - Useful for when you want to combine an item on the list with every other item on the list. For example in list {1,2,3} , \"2\" will be paired up only with \"1\" and \"3\" and will not be paired up with itself., List.GetEven - Gets even indices from the list., List.GetOdd - Gets the odd indices from the list., List.Randomise&Divide - Shiffles the input list and divides it into sub-lists based on ratios(1/4 + 1/2 + 1/4 will give you three lists split accordingly) The smalest ratio will always be 1 / the list length and the largest ratio will be 1. A seed input can shuffle the list further., List.ShiftIndices+ - The built in node fails if the shift number is greater than the lenght of the list. This node acts as a work-around., List.Split - Splits a list at the desired length, Ln2Str - Serilize a geometry line to a string for use in Revit parameters, Math.AlmostEqual - Checks if a number is almost equal to a value with a specified tollerance., N-hedron.ByOriginVector - Creates a multi-sided poyhedron with defined side length and total height., NullAllIndicesOf - list all of the indices of a list that match the specified value. Capable of handling null values, part of the SmartCopyMonitor workflow., NullGetParameter - Similar to the built in node.Capable of handling null values, part of the SmartCopyMonitor workflow., NullIndexOf - Similar to the bult-in node but provides a null value instead of -1 of failure. Part of the SmartCopyMonitor workflow., NullReorder - Simiar to the built-in function with the difference that it can handle null indices. Part of the SmartCopyMonitor workflow., NullSetDifference - Similar to the built in node, with a built-in safety for null values. Part of the SmartCopyMonitor workflow., NullSetParameter - Similar to the built-in function but with the ability to handle null values. Part of the SmartCopyMon workflow., Number.ToString - Converts the input number(s) to string. Can process lists., Object.Class - Gets the input object's class name. Can process lists., Point.PullOntoPlane - Pulls (projects) the point onto the input plane, following the plane normal., Polygon.ContainmentTest+ - A less accurate method that should perform faster than the built-in node for large data sets., Pt2Str - Serilize a geometry point to a string for use in Revit parameters, Select Edges - Select multiple edges from inside the Revit UI. Be sure to press \"Finish\" once done. You can use a Boolean toggle to refresh your selection., Select Elements (ordered) - Select multiple elements from the Revit document in the desired order. Hit ESC to stop picking. To refresh the node, connect a boolean switch node., Select Linked Element - Select the linked instance first, followed by the element. If your selection fails, just press escape.\r\nTo refresh the node, connect a boolean switch node., Select Linked Elements (ordered) - Select the linked instance first. Then select multiple elements from the Revit document in the desired order. Hit ESC to stop picking. To refresh the node, connect a boolean switch node., Select Linked Elements - Select the linked instance first, followed by the elements. To finish the selection, press Finish. If your selection fails, just press escape or Cancel.\r\nTo refresh the node, connect a boolean switch node., Select Linked Face - Select the linked instance first, followed by the face. If your selection fails, just press escape.\r\nTo refresh the node, connect a boolean switch node., SelectInRevit - Selects the input elements in Revit. Works with Revit 2016., Shaft.ByCurves - Creates a shaft opening. The top level MUST be higher than the base level for a successful execution. You can either provide one base and top level for all shafts or have unique levels for each shaft instance., Sheet.Views+ - Extracts all views and schedules (minus the revision schedule) placed on the input sheet (or sheets).\r\nWill be depreciated once the bult in node works with all plan types., Star.ByCenterRadiusRays - Fun little node to create star shapes., Str2Ln - De-serilize a Revit parameter string into a geometric line., Str2Pt - De-serilize a Revit parameter string into a geometric point., Topography.ToPolySurface(py) - Python implementation that should boost performance by 5-10%. Optimized algorithm for converting topographies into polysurfaces. Tested with topographies containing up to 40 000 points. \r\nWarning conversions of such mangitudes consume a lot of resources and are sub-optimal. Ensure that you have at least 8GB of ram and plenty of patience before attempting such a conversion, otherwise your Dynamo and Revit instances may crash., Topography.ToPolySurface - Optimized algorithm for converting topographies into polysurfaces. Tested with topographies containing up to 40 000 points. \r\nWarning conversions of such mangitudes consume a lot of resources and are sub-optimal. Ensure that you have at least 8GB of ram and plenty of patience before attempting such a conversion, otherwise your Dynamo and Revit instances may crash., ViewSet.ByViewsName - Creates a set of views(or sheets) for printing. If the set exists, set Overwrite to true to replace it., Wall.WallType - Queries the wall type of the input wall. Works for types from linked documents as well., WallType.Duplicate - Attemts to create duplicate wall types. If the wall type exists, it is appended to the end. Sets only the structural width of the wall. The width must be in feet., Watch+ - This node that serializes the input information and presents it in a resizable text window.","engine_metadata":"","engine_version":"0.8.2.2392","created":"2016-04-04T08:47:00.445Z","full_dependency_versions":["82.8.2"],"full_dependency_ids":[{"_id":"56077cf3662bf0e9080001ea","name":"spring nodes"}],"direct_dependency_versions":[],"direct_dependency_ids":[],"change_log":"","version":"82.8.2"},{"_id":"572f5bdc384037b37e000033","contains_binaries":false,"node_libraries":[],"url_with_deps":"","url":"https://s3.amazonaws.com/greg-pkgs-prod/e5a38d8d-2204-4d0c-b312-169c8db3acf6gregPkg663.zip","contents":"Active View - Selects the current document's active view. Supports more view types than the built-in option.\r\nWill be depreciated once the bult in node works with all plan types., AreaPlan.ByLevelName - Creates an area plan at the designated levels. Each new view needs a name. An area scheme must first be activated before it can be used. To activate a scheme, place one view of that type in the project(you can then delete it).  If a view with the same scheme and name exists, you'll get a null instead., Beams.FixExtents - Detects all beams from the input list with broken extents(actual length - cut length <  margin) and attemts to correct them., BoundingBox.Scale - Scales the bounding box in three dimensions according to it's center., ClosedCurve.Offset+ - Offsets a curve both ways and correctly differenciates the external and internal offset. If an offset goes beyond the curve's bounds, the result will fail and a null value will be appended instead. Also works for convex curves like arcs., Collector.CurrentSelection - Gets the currently selected elements. Connect a boolean switch to refresh the selection. Compatible with Revit 2016, Collector.ElementsInView - Selects all elements visible in the input view., Collector.ElementSketch - Get the actual sketch lines of a sketch based element (floor, ceiling, modified wall, etc.) . You can optionally fetch the matching model curves, however this might prove comptationally heavy on larger data sets., Collector.FamilyInstances - Collects placed family instance elements from the document that match the name. Partially mathing elements are collected as well. If no matches are found, a list of all isntance names will be output., Collector.FamilyTypes - Collects non-system family types that fully match or partially match the provided names. If no matches are found, a list of all type names will be output., Collector.FloorTypes - Collects Floor types by name., Collector.LinkedInstanceElements - Extract elements by category from the selected linked instances. The transform vector can be used to get the exact location of the elements in the local file, Collector.Revisions - Collects all revision clouds from a specific date., Collector.Sheets - Search for sheets by either their name or their number. Use a false boolean switch to search by number., Collector.Views - Search for views based on naming. You can choose to either include or exclude schedules. Use the sheet collector for sheets., Collector.WallTypes - Collects wall types by name., Color2Decimal - Converts a Dynamo colour its Revit equivalent  decimal value., Curve.Offset+ - Offsets a curve towards the specified point, CurveLoop.Simplify - Attempts to simplify an open or a closed curve loop by connecting straight separate line segments into a single line., Decimal2Color - Converts a revit colour decimal value to its Dynamo equivalent., Dictionary.ByKeysValues - Dictionaries are an incredibly powerful tool for making associative sets between two equal length lists. The first list must be of unique strings (or numbers) and will be the key and the second list will be the matching values (it can be made up of geometry, elements, even other lists)\r\nThe search keys list will provide the corresponding value to the input key., DirectShape.ByGeometry - Convert the input geometry to DirectShape element inside the Revit document.  It supports solids or surfaces.It is based on an alternative process that uses a SAT import and can produce smooth surfaces. Each created DS will have a unique type. Make sure that each input geometry has a unique name. You can either feed a single category for all geometries or a unique category for each geometry - the node's lacing is set to longest by default., DirectShape.Transform - Transforms the typed DirectShape element from the identity coordinate system to the input coordinate system(s), in a manner similar to Dynamo's Geometry.Transform node., DirectShape.Translate - Copy the input DirectShape element with the help of a translation vector, similarly to the Geometry.Translate node. This method should prove more efficient than Element.Copy, Doc.DeleteElements - Attempts to delete the input list of elements from the active Revit document.The node returns the number of successfully deleted elements and their Ids as a string. Carefully observe the deleted elements count. It may be greater than the input list because hosted elements or tags will be deleted as well. If an element in the list can not be deleted (for example last revision or last view), the whole list will fail to be deleted., Element.AddVoidCut - Accepts single or list inputs. If an element that can be cut and a family that can act as a void cutting entity are provided, the element will be cut. Please make sure that the geometries of the elements actually cut. Otherwise an empty cut will be created that may impede the performance of your file. Add void cuts sparcely because they affect the size of your project. Lacing takes an integer input.\r\n0 = Shortest (default)\r\n1 = Longest\r\n2 = Cross-product, Element.Copy - WARNING: Do not use this node in Automatic mode! Copy the input Revit elements with the help of a translation vector, similarly to the Geometry.Translate node., Element.IsCut - Tests if the element is being cut by any void instances. If any cuts exist all cutting elements will be provided., Element.IsCutting - Tests if the input element (or elements) is a void cut and if it is cutting any elements. In such cases, the cut elements will be provided., Element.RemoveVoidCut - Removes the void cut between the input elements, if such exists., Element.SetLocation - Attempts to modify the location of the input element. This can effectively add as a move comand in Revit. Works for both line based and point based elements., ErrorReport.Parse - Process a Revit error report (HTML file) and extract the error types, all affected elements and the total number of errors. If you are executing from a document different than the one the error report belongs to, be sure to set \"fetch_elements\" to false., FamilyInsance.ByFacePoints - Places instances on the input face oriented to the face's U tangent and the global Z axis., FamilyInstance.ByGeometry - You must provide a valid family template path that will be used for all input geometry objects. The project units(and not the templates) will be used to determine the size of the output geometry.\r\nThe provided category will be used only if the family template supports it. If not, the default template category will be used instead.\r\nLikewise, the family material(provided as a string) will be set only if a material with that name exists in the template. If not, the default material will be used instead (\"By Category\").\r\nFor void cuts, the material settings will be ignored.\r\nThe Subcategory name is an optional input. If you'd like to skip assigning a Subcategory to any new instance, simply use null.\r\nThe node expects a unique family name for each geometry object. The rest of the input lists will be processed as if the node lacing is set to longest., FamilyInstance.Rotation - Fetches the angle of rotation around the insertion point of a point based element. The angle is always measured counter-clockwise., FamilyType.Duplicate - Create duplicate family types with the specified name. If the type exists, it is called., Feet2Fraction - Converts a decimal foot value to a fractional foot/inch string., File.Size - Checks the file size. Provide a file path as a string., Filter.ByCategoryName - Filters the input elements by their category name. You can input multiple category names., Filter.ByClassName - Filters a list of objects by the object's class name. Note that Dynamo elements belong to different classes than their Revit counterparts. Use the Object.Class node to check an object's class., Filter.BySelection - Check the items that you'd like to filter in.  Unchecked items will be sent to the out list. The optional names input will override the object representation., Floor-WallType.SetMaterial - Sets a new material to the structural core of the provided floor and wall types., FloorOpening.ByCurves - Create hosted floor opeinngs through the input floors. The second input is a list of sub-lists of the boundary curves., FloorType.Duplicate - Attemts to create duplicate floor types. If the floor type exists, it is appended to the end. Sets only the structural width of the floor. The width must be in feet., Fn.ElementsOfCategory - Same as the built in \"All Elements of Category\" but can act as a function object., Form.ByGeometry - Convert the input geometry to a Revit Form object. Forms can exist only in the family environment. You can convert complicated solids or surfaces directly into forms. A form can act as a void. Provide either one true boolean value to convert a form into a void. The node's lacing is set to longest by default., Fraction2Feet - Converts a fractioned feet /inch string value into a decimal foot value., Geometry.SplitRecursively - Splits a surface or a solid recursively, using the resulting reduced geometry for every next split., HostedInstance.ByPoints - Creates hosted family instances(doors/windows) at the specified points. You can feed either a single family type or a unique type for each instance., Input.Wait - Waits for all inputs to be completed before continuing the execution process.Part of the SmartCopyMon workflow., InterferenceCheck.Parse - Process a Revit interference check (HTML file) and extract the interference categories, all affected elements and the total number of clashes. If you are executing from a document different than the one the error report belongs to, be sure to set \"fetch_elements\" to false., Line.StraightenXY - Checks a line's end points for irregularities and corrects them if they are at or below the specified margin. The default margin is 1/5000 of the curve length, which is conservative., Line.StraightenZ - Checks a line's end points for irregularities in  the Z axis and corrects them if they are at or below the specified margin. The default margin is 1/2000 of the curve length, which is conservative., Lines.Group&FixCorners - Groups unconnected lines into sub-lists by margin(the maximum distance between endpoints) and attempts to create clean corner connections between them. Built on top of the Group curves node found in archi-lab.net., List.DragDropReorder - Press and hold on an item to move it up or down the list. To confirm and close the window, select \"Save Order\". The optional names input will override the object representation., List.DropDown - Selects one list item by a drop-down combo box. The optional names input will override the object representation., List.DropFirstLast - Removes the first and last items from the list, List.DropLast - Removes the last value of the list., List.EveryOther - Useful for when you want to combine an item on the list with every other item on the list. For example in list {1,2,3} , \"2\" will be paired up only with \"1\" and \"3\" and will not be paired up with itself., List.GetEven - Gets even indices from the list., List.GetOdd - Gets the odd indices from the list., List.Randomise&Divide - Shiffles the input list and divides it into sub-lists based on ratios(1/4 + 1/2 + 1/4 will give you three lists split accordingly) The smalest ratio will always be 1 / the list length and the largest ratio will be 1. A seed input can shuffle the list further., List.ShiftIndices+ - The built in node fails if the shift number is greater than the lenght of the list. This node acts as a work-around., List.Split - Splits a list at the desired length, Ln2Str - Serilize a geometry line to a string for use in Revit parameters, Math.AlmostEqual - Checks if a number is almost equal to a value with a specified tollerance., N-hedron.ByOriginVector - Creates a multi-sided poyhedron with defined side length and total height., NullAllIndicesOf - list all of the indices of a list that match the specified value. Capable of handling null values, part of the SmartCopyMonitor workflow., NullGetParameter - Similar to the built in node.Capable of handling null values, part of the SmartCopyMonitor workflow., NullIndexOf - Similar to the bult-in node but provides a null value instead of -1 of failure. Part of the SmartCopyMonitor workflow., NullReorder - Simiar to the built-in function with the difference that it can handle null indices. Part of the SmartCopyMonitor workflow., NullSetDifference - Similar to the built in node, with a built-in safety for null values. Part of the SmartCopyMonitor workflow., NullSetParameter - Similar to the built-in function but with the ability to handle null values. Part of the SmartCopyMon workflow., Number.ToString - Converts the input number(s) to string. Can process lists., Object.Class - Gets the input object's class name. Can process lists., PlanarFace.FixDomain - Corrects the surface domain of a 3 or 4 point planar face extracted from Revit., Point.PullOntoPlane - Pulls (projects) the point onto the input plane, following the plane normal., Polygon.ContainmentTest+ - A less accurate method that should perform faster than the built-in node for large data sets., Pt2Str - Serilize a geometry point to a string for use in Revit parameters, Select Edges - Select multiple edges from inside the Revit UI. Be sure to press \"Finish\" once done. You can use a Boolean toggle to refresh your selection., Select Elements (ordered) - Select multiple elements from the Revit document in the desired order. Hit ESC to stop picking. To refresh the node, connect a boolean switch node., Select Linked Element - Select the linked instance first, followed by the element. If your selection fails, just press escape.\r\nTo refresh the node, connect a boolean switch node., Select Linked Elements (ordered) - Select the linked instance first. Then select multiple elements from the Revit document in the desired order. Hit ESC to stop picking. To refresh the node, connect a boolean switch node., Select Linked Elements - Select the linked instance first, followed by the elements. To finish the selection, press Finish. If your selection fails, just press escape or Cancel.\r\nTo refresh the node, connect a boolean switch node., Select Linked Face - Select the linked instance first, followed by the face. If your selection fails, just press escape.\r\nTo refresh the node, connect a boolean switch node., SelectInRevit - Selects the input elements in Revit. Works with Revit 2016., Shaft.ByCurves - Creates a shaft opening. The top level MUST be higher than the base level for a successful execution. You can either provide one base and top level for all shafts or have unique levels for each shaft instance., Sheet.Views+ - Extracts all views and schedules (minus the revision schedule) placed on the input sheet (or sheets).\r\nWill be depreciated once the bult in node works with all plan types., Star.ByCenterRadiusRays - Fun little node to create star shapes., Str2Ln - De-serilize a Revit parameter string into a geometric line., Str2Pt - De-serilize a Revit parameter string into a geometric point., Topography.ToPolySurface(py) - Python implementation that should boost performance by 5-10%. Optimized algorithm for converting topographies into polysurfaces. Tested with topographies containing up to 40 000 points. \r\nWarning conversions of such mangitudes consume a lot of resources and are sub-optimal. Ensure that you have at least 8GB of ram and plenty of patience before attempting such a conversion, otherwise your Dynamo and Revit instances may crash., Topography.ToPolySurface - Optimized algorithm for converting topographies into polysurfaces. Tested with topographies containing up to 40 000 points. \r\nWarning conversions of such mangitudes consume a lot of resources and are sub-optimal. Ensure that you have at least 8GB of ram and plenty of patience before attempting such a conversion, otherwise your Dynamo and Revit instances may crash., ViewSet.ByViewsName - Creates a set of views(or sheets) for printing. If the set exists, set Overwrite to true to replace it., Wall.WallType - Queries the wall type of the input wall. Works for types from linked documents as well., WallType.Duplicate - Attemts to create duplicate wall types. If the wall type exists, it is appended to the end. Sets only the structural width of the wall. The width must be in feet., Watch+ - This node that serializes the input information and presents it in a resizable text window.","engine_metadata":"","engine_version":"0.8.2.2392","created":"2016-05-08T15:31:40.699Z","full_dependency_versions":["82.8.3"],"full_dependency_ids":[{"_id":"56077cf3662bf0e9080001ea","name":"spring nodes"}],"direct_dependency_versions":[],"direct_dependency_ids":[],"change_log":"","version":"82.8.3"},{"_id":"5741d3dcc1a604fb3600000a","contains_binaries":false,"node_libraries":[],"url_with_deps":"","url":"https://s3.amazonaws.com/greg-pkgs-prod/486ef2ee-23ec-4e57-a401-25c141bf5d4cgregPkg5.zip","contents":"Active View - Selects the current document's active view. Supports more view types than the built-in option.\r\nWill be depreciated once the bult in node works with all plan types., AdaptiveFamily.ByFacetedGeometry - No description provided, AreaPlan.ByLevelName - Creates an area plan at the designated levels. Each new view needs a name. An area scheme must first be activated before it can be used. To activate a scheme, place one view of that type in the project(you can then delete it).  If a view with the same scheme and name exists, you'll get a null instead., Beams.FixExtents - Detects all beams from the input list with broken extents(actual length - cut length <  margin) and attemts to correct them., BoundingBox.Scale - Scales the bounding box in three dimensions according to it's center., ClosedCurve.Offset+ - Offsets a curve both ways and correctly differenciates the external and internal offset. If an offset goes beyond the curve's bounds, the result will fail and a null value will be appended instead. Also works for convex curves like arcs., Collector.CurrentSelection - Gets the currently selected elements. Connect a boolean switch to refresh the selection. Compatible with Revit 2016, Collector.ElementsInView - Selects all elements visible in the input view., Collector.ElementSketch - Get the actual sketch lines of a sketch based element (floor, ceiling, modified wall, etc.) . You can optionally fetch the matching model curves, however this might prove comptationally heavy on larger data sets., Collector.FamilyInstances - Collects placed family instance elements from the document that match the name. Partially mathing elements are collected as well. If no matches are found, a list of all isntance names will be output., Collector.FamilyTypes - Collects non-system family types that fully match or partially match the provided names. If no matches are found, a list of all type names will be output., Collector.FloorTypes - Collects Floor types by name., Collector.LinkedInstanceElements - Extract elements by category from the selected linked instances. The transform vector can be used to get the exact location of the elements in the local file, Collector.Revisions - Collects all revision clouds from a specific date., Collector.Sheets - Search for sheets by either their name or their number. Use a false boolean switch to search by number., Collector.Views - Search for views based on naming. You can choose to either include or exclude schedules. Use the sheet collector for sheets., Collector.WallTypes - Collects wall types by name., Color2Decimal - Converts a Dynamo colour its Revit equivalent  decimal value., Curve.Offset+ - Offsets a curve towards the specified point, CurveLoop.Simplify - Attempts to simplify an open or a closed curve loop by connecting straight separate line segments into a single line., Decimal2Color - Converts a revit colour decimal value to its Dynamo equivalent., Dictionary.ByKeysValues - Dictionaries are an incredibly powerful tool for making associative sets between two equal length lists. The first list must be of unique strings (or numbers) and will be the key and the second list will be the matching values (it can be made up of geometry, elements, even other lists)\r\nThe search keys list will provide the corresponding value to the input key., DirectShape.ByGeometry - Convert the input geometry to DirectShape element inside the Revit document.  It supports solids or surfaces.It is based on an alternative process that uses a SAT import and can produce smooth surfaces. Each created DS will have a unique type. Make sure that each input geometry has a unique name. You can either feed a single category for all geometries or a unique category for each geometry - the node's lacing is set to longest by default., DirectShape.Transform - Transforms the typed DirectShape element from the identity coordinate system to the input coordinate system(s), in a manner similar to Dynamo's Geometry.Transform node., DirectShape.Translate - Copy the input DirectShape element with the help of a translation vector, similarly to the Geometry.Translate node. This method should prove more efficient than Element.Copy, Doc.DeleteElements - Attempts to delete the input list of elements from the active Revit document.The node returns the number of successfully deleted elements and their Ids as a string. Carefully observe the deleted elements count. It may be greater than the input list because hosted elements or tags will be deleted as well. If an element in the list can not be deleted (for example last revision or last view), the whole list will fail to be deleted., Element.AddVoidCut - Accepts single or list inputs. If an element that can be cut and a family that can act as a void cutting entity are provided, the element will be cut. Please make sure that the geometries of the elements actually cut. Otherwise an empty cut will be created that may impede the performance of your file. Add void cuts sparcely because they affect the size of your project. Lacing takes an integer input.\r\n0 = Shortest (default)\r\n1 = Longest\r\n2 = Cross-product, Element.Copy - WARNING: Do not use this node in Automatic mode! Copy the input Revit elements with the help of a translation vector, similarly to the Geometry.Translate node., Element.IsCut - Tests if the element is being cut by any void instances. If any cuts exist all cutting elements will be provided., Element.IsCutting - Tests if the input element (or elements) is a void cut and if it is cutting any elements. In such cases, the cut elements will be provided., Element.RemoveVoidCut - Removes the void cut between the input elements, if such exists., Element.SetLocation - Attempts to modify the location of the input element. This can effectively add as a move comand in Revit. Works for both line based and point based elements., ErrorReport.Parse - Process a Revit error report (HTML file) and extract the error types, all affected elements and the total number of errors. If you are executing from a document different than the one the error report belongs to, be sure to set \"fetch_elements\" to false., FamilyInsance.ByFacePoints - Places instances on the input face oriented to the face's U tangent and the global Z axis., FamilyInstance.ByGeometry - You must provide a valid family template path that will be used for all input geometry objects. The project units(and not the templates) will be used to determine the size of the output geometry.\r\nThe provided category will be used only if the family template supports it. If not, the default template category will be used instead.\r\nLikewise, the family material(provided as a string) will be set only if a material with that name exists in the template. If not, the default material will be used instead (\"By Category\").\r\nFor void cuts, the material settings will be ignored.\r\nThe Subcategory name is an optional input. If you'd like to skip assigning a Subcategory to any new instance, simply use null.\r\nThe node expects a unique family name for each geometry object. The rest of the input lists will be processed as if the node lacing is set to longest., FamilyInstance.Rotation - Fetches the angle of rotation around the insertion point of a point based element. The angle is always measured counter-clockwise., FamilyType.Duplicate - Create duplicate family types with the specified name. If the type exists, it is called., Feet2Fraction - Converts a decimal foot value to a fractional foot/inch string., File.Size - Checks the file size. Provide a file path as a string., Filter.ByCategoryName - Filters the input elements by their category name. You can input multiple category names., Filter.ByClassName - Filters a list of objects by the object's class name. Note that Dynamo elements belong to different classes than their Revit counterparts. Use the Object.Class node to check an object's class., Filter.BySelection - Check the items that you'd like to filter in.  Unchecked items will be sent to the out list. The optional names input will override the object representation., Floor-WallType.SetMaterial - Sets a new material to the structural core of the provided floor and wall types., FloorOpening.ByCurves - Create hosted floor opeinngs through the input floors. The second input is a list of sub-lists of the boundary curves., FloorType.Duplicate - Attemts to create duplicate floor types. If the floor type exists, it is appended to the end. Sets only the structural width of the floor. The width must be in feet., Fn.ElementsOfCategory - Same as the built in \"All Elements of Category\" but can act as a function object., Form.ByGeometry - Convert the input geometry to a Revit Form object. Forms can exist only in the family environment. You can convert complicated solids or surfaces directly into forms. A form can act as a void. Provide either one true boolean value to convert a form into a void. The node's lacing is set to longest by default., Fraction2Feet - Converts a fractioned feet /inch string value into a decimal foot value., Geometry.SplitRecursively(Dir) - Splits a surface or a solid recursively, using the resulting reduced geometry for every consecutive split. Select a point or another geometry to control the direction of the split., Geometry.SplitRecursively - Splits a surface or a solid recursively, using the resulting reduced geometry for every consecutive split., HostedInstance.ByPoints - Creates hosted family instances(doors/windows) at the specified points. You can feed either a single family type or a unique type for each instance., Input.Wait - Waits for all inputs to be completed before continuing the execution process.Part of the SmartCopyMon workflow., InterferenceCheck.Parse - Process a Revit interference check (HTML file) and extract the interference categories, all affected elements and the total number of clashes. If you are executing from a document different than the one the error report belongs to, be sure to set \"fetch_elements\" to false., Line.StraightenXY - Checks a line's end points for irregularities and corrects them if they are at or below the specified margin. The default margin is 1/5000 of the curve length, which is conservative., Line.StraightenZ - Checks a line's end points for irregularities in  the Z axis and corrects them if they are at or below the specified margin. The default margin is 1/2000 of the curve length, which is conservative., Lines.Group&FixCorners - Groups unconnected lines into sub-lists by margin(the maximum distance between endpoints) and attempts to create clean corner connections between them. Built on top of the Group curves node found in archi-lab.net., List.DragDropReorder - Press and hold on an item to move it up or down the list. To confirm and close the window, select \"Save Order\". The optional names input will override the object representation., List.DropDown - Selects one list item by a drop-down combo box. The optional names input will override the object representation., List.DropFirstLast - Removes the first and last items from the list, List.DropLast - Removes the last value of the list., List.EveryOther - Useful for when you want to combine an item on the list with every other item on the list. For example in list {1,2,3} , \"2\" will be paired up only with \"1\" and \"3\" and will not be paired up with itself., List.GetEven - Gets even indices from the list., List.GetOdd - Gets the odd indices from the list., List.MergeByBoolMask - Merge two lists by a boolean mask list. The true count in the mask should be the same as the length of the true list and vice versa for the false list., List.Randomise&Divide - Shiffles the input list and divides it into sub-lists based on ratios(1/4 + 1/2 + 1/4 will give you three lists split accordingly) The smalest ratio will always be 1 / the list length and the largest ratio will be 1. A seed input can shuffle the list further., List.ShiftIndices+ - The built in node fails if the shift number is greater than the lenght of the list. This node acts as a work-around., List.Split - Splits a list at the desired length, List.Subpairs - Pair up each list item with the next one and drop the list item., Ln2Str - Serilize a geometry line to a string for use in Revit parameters, Math.AlmostEqual - Checks if a number is almost equal to a value with a specified tollerance., N-hedron.ByOriginVector - Creates a multi-sided poyhedron with defined side length and total height., NullAllIndicesOf - list all of the indices of a list that match the specified value. Capable of handling null values, part of the SmartCopyMonitor workflow., NullGetParameter - Similar to the built in node.Capable of handling null values, part of the SmartCopyMonitor workflow., NullIndexOf - Similar to the bult-in node but provides a null value instead of -1 of failure. Part of the SmartCopyMonitor workflow., NullReorder - Simiar to the built-in function with the difference that it can handle null indices. Part of the SmartCopyMonitor workflow., NullSetDifference - Similar to the built in node, with a built-in safety for null values. Part of the SmartCopyMonitor workflow., NullSetParameter - Similar to the built-in function but with the ability to handle null values. Part of the SmartCopyMon workflow., Number.ToString - Converts the input number(s) to string. Can process lists., Object.Class - Gets the input object's class name. Can process lists., PlanarFace.FixDomain - Corrects the surface domain of a 3 or 4 point planar face extracted from Revit., Point.PullOntoPlane - Pulls (projects) the point onto the input plane, following the plane normal., PolyCurve.Chamfer - Symmetrically chamfers the corners of the polycurve by the designated distance, Polygon.ContainmentTest+ - A less accurate method that should perform faster than the built-in node for large data sets., Pt2Str - Serilize a geometry point to a string for use in Revit parameters, Select Edges - Select multiple edges from inside the Revit UI. Be sure to press \"Finish\" once done. You can use a Boolean toggle to refresh your selection., Select Elements (ordered) - Select multiple elements from the Revit document in the desired order. Hit ESC to stop picking. To refresh the node, connect a boolean switch node., Select Linked Element - Select the linked instance first, followed by the element. If your selection fails, just press escape.\r\nTo refresh the node, connect a boolean switch node., Select Linked Elements (ordered) - Select the linked instance first. Then select multiple elements from the Revit document in the desired order. Hit ESC to stop picking. To refresh the node, connect a boolean switch node., Select Linked Elements - Select the linked instance first, followed by the elements. To finish the selection, press Finish. If your selection fails, just press escape or Cancel.\r\nTo refresh the node, connect a boolean switch node., Select Linked Face - Select the linked instance first, followed by the face. If your selection fails, just press escape.\r\nTo refresh the node, connect a boolean switch node., SelectInRevit - Selects the input elements in Revit. Works with Revit 2016., Shaft.ByCurves - Creates a shaft opening. The top level MUST be higher than the base level for a successful execution. You can either provide one base and top level for all shafts or have unique levels for each shaft instance., Sheet.Views+ - Extracts all views and schedules (minus the revision schedule) placed on the input sheet (or sheets).\r\nWill be depreciated once the bult in node works with all plan types., Star.ByCenterRadiusRays - Fun little node to create star shapes., Str2Ln - De-serilize a Revit parameter string into a geometric line., Str2Pt - De-serilize a Revit parameter string into a geometric point., Topography.ToPolySurface(py) - Python implementation that should boost performance by 5-10%. Optimized algorithm for converting topographies into polysurfaces. Tested with topographies containing up to 40 000 points. \r\nWarning conversions of such mangitudes consume a lot of resources and are sub-optimal. Ensure that you have at least 8GB of ram and plenty of patience before attempting such a conversion, otherwise your Dynamo and Revit instances may crash., Topography.ToPolySurface - Optimized algorithm for converting topographies into polysurfaces. Tested with topographies containing up to 40 000 points. \r\nWarning conversions of such mangitudes consume a lot of resources and are sub-optimal. Ensure that you have at least 8GB of ram and plenty of patience before attempting such a conversion, otherwise your Dynamo and Revit instances may crash., ViewSet.ByViewsName - Creates a set of views(or sheets) for printing. If the set exists, set Overwrite to true to replace it., Wall.WallType - Queries the wall type of the input wall. Works for types from linked documents as well., WallType.Duplicate - Attemts to create duplicate wall types. If the wall type exists, it is appended to the end. Sets only the structural width of the wall. The width must be in feet., Watch+ - This node that serializes the input information and presents it in a resizable text window.","engine_metadata":"","engine_version":"0.8.2.2392","created":"2016-05-22T15:44:28.630Z","full_dependency_versions":["82.9.1"],"full_dependency_ids":[{"_id":"56077cf3662bf0e9080001ea","name":"spring nodes"}],"direct_dependency_versions":[],"direct_dependency_ids":[],"change_log":"","version":"82.9.1"},{"_id":"57865602535146064800005b","contains_binaries":false,"node_libraries":[],"url_with_deps":"","url":"https://s3.amazonaws.com/greg-pkgs-prod/666fad86-9275-41da-8066-db72de1b502fgregPkg690.zip","contents":"Springs.AdaptiveFamily.ByFacetedGeometry - Genearate a new eight point adaptive component family type from any solid or polysurface consisting of planar faces. Faces with openigs are not supported., Springs.AreaPlan.ByLevelName - Creates an area plan at the designated levels. Each new view needs a name. An area scheme must first be activated before it can be used. To activate a scheme, place one view of that type in the project(you can then delete it).  If a view with the same scheme and name exists, you'll get a null instead., Springs.Beams.FixExtents - Detects all beams from the input list with broken extents(actual length - cut length <  margin) and attemts to correct them., Springs.BoundingBox.Scale - Scales the bounding box in three dimensions according to it's center., Springs.ClosedCurve.Offset+ - Offsets a curve both ways and correctly differenciates the external and internal offset. If an offset goes beyond the curve's bounds, the result will fail and a null value will be appended instead. Also works for convex curves like arcs., Springs.Collector.CurrentSelection - Gets the currently selected elements. Connect a boolean switch to refresh the selection., Springs.Collector.ElementsInView - Selects all elements visible in the input view., Springs.Collector.ElementSketch - Get the actual sketch lines of a sketch based element (floor, ceiling, modified wall, etc.) . You can optionally fetch the matching model curves, however this might prove comptationally heavy on larger data sets., Springs.Collector.FamilyInstances - Collects placed family instance elements from the document that match the name. Partially mathing elements are collected as well. If no matches are found, a list of all isntance names will be output., Springs.Collector.FamilyTypes - Collects non-system family types that fully match or partially match the provided names. If no matches are found, a list of all type names will be output., Springs.Collector.FloorTypes - Collects Floor types by name., Springs.Collector.LinkedInstanceElements - Extract elements by category from the selected linked instances. The transform vector can be used to get the exact location of the elements in the local file, Springs.Collector.Revisions - Collects all revision clouds from a specific date., Springs.Collector.Sheets - Search for sheets by either their name or their number. Use a false boolean switch to search by number., Springs.Collector.Views - Search for views based on naming. You can choose to either include or exclude schedules. Use the sheet collector for sheets., Springs.Collector.WallTypes - Collects wall types by name., Springs.Color2Decimal - Converts a Dynamo colour its Revit equivalent  decimal value., Springs.Curve.Offset+ - Offsets a curve towards the specified point, Springs.CurveLoop.Simplify - Attempts to simplify an open or a closed curve loop by connecting straight separate line segments into a single line., Springs.Decimal2Color - Converts a revit colour decimal value to its Dynamo equivalent., Springs.Dictionary.ByKeysValues - Dictionaries are an incredibly powerful tool for making associative sets between two equal length lists. The first list must be of unique strings (or numbers) and will be the key and the second list will be the matching values (it can be made up of geometry, elements, even other lists)\r\nThe search keys list will provide the corresponding value to the input key., Springs.DirectShape.ByGeometry - Convert the input geometry to DirectShape element inside the Revit document.  It supports solids or surfaces.It is based on an alternative process that uses a SAT import and can produce smooth surfaces. Each created DS will have a unique type. Make sure that each input geometry has a unique name. You can either feed a single category for all geometries or a unique category for each geometry - the node's lacing is set to longest by default., Springs.DirectShape.Transform - Transforms the typed DirectShape element from the identity coordinate system to the input coordinate system(s), in a manner similar to Dynamo's Geometry.Transform node., Springs.DirectShape.Translate - Copy the input DirectShape element with the help of a translation vector, similarly to the Geometry.Translate node. This method should prove more efficient than Element.Copy, Springs.Doc.ActiveView - Selects the current document's active view. Supports more view types than the built-in option.\r\nWill be depreciated once the bult in node works with all plan types., Springs.Doc.DeleteElements - Attempts to delete the input list of elements from the active Revit document.The node returns the number of successfully deleted elements and their Ids as a string. Carefully observe the deleted elements count. It may be greater than the input list because hosted elements or tags will be deleted as well. If an element in the list can not be deleted (for example last revision or last view), the whole list will fail to be deleted., Springs.Element.Copy - WARNING: Do not use this node in Automatic mode! Copy (planar array) the input Revit elements with the help of a translation vector, similarly to the Geometry.Translate node., Springs.Element.IsCut - Tests if the element is being cut by any void instances. If any cuts exist all cutting elements will be provided., Springs.Element.IsCutting - Tests if the input element (or elements) is a void cut and if it is cutting any elements. In such cases, the cut elements will be provided., Springs.Element.RemoveVoidCut - Removes the void cut between the input elements, if such exists., Springs.Element.SetLocation - Attempts to modify the location of the input element. This can effectively add as a move comand in Revit. Works for both line based and point based elements., Springs.ElementsOfCategory - Same as the built in \"All Elements of Category\" but can act as a function object and does not get refreshed automatically., Springs.ElementType.Duplicate - Create duplicate element types. If the type exists, it will be appended instead., Springs.ErrorReport.Parse - Process a Revit error report (HTML file) and extract the error types, all affected elements and the total number of errors. If you are executing from a document different than the one the error report belongs to, be sure to set \"fetch_elements\" to false., Springs.FamilyInsance.ByFacePoints - Places instances on the input face oriented to the face's U tangent and the global Z axis., Springs.FamilyInstance.ByGeometry - You must provide a valid family template path that will be used for all input geometry objects. The project units(and not the templates) will be used to determine the size of the output geometry.\r\nThe provided category will be used only if the family template supports it. If not, the default template category will be used instead.\r\nLikewise, the family material(provided as a string) will be set only if a material with that name exists in the template. If not, the default material will be used instead (\"By Category\").\r\nFor void cuts, the material settings will be ignored.\r\nThe Subcategory name is an optional input. If you'd like to skip assigning a Subcategory to any new instance, simply use null.\r\nThe node expects a unique family name for each geometry object. The rest of the input lists will be processed as if the node lacing is set to longest., Springs.FamilyInstance.Rotation - Fetches the angle of rotation around the insertion point of a point based element. The angle is always measured counter-clockwise., Springs.Feet2Fraction - Converts a decimal foot value to a fractional foot/inch string., Springs.File.Size - Checks the file size. Provide a file path as a string., Springs.Filter.ByCategoryName - Filters the input elements by their category name. You can input multiple category names., Springs.Filter.ByClassName - Filters a list of objects by the object's class name. Note that Dynamo elements belong to different classes than their Revit counterparts. Use the Object.Class node to check an object's class., Springs.Filter.BySelection - Check the items that you'd like to filter in.  Unchecked items will be sent to the out list. The optional names input will override the object representation., Springs.FloorOpening.ByCurves - Create hosted floor opeinngs through the input floors. The second input is a list of sub-lists of the boundary curves., Springs.Form.ByGeometry - Convert the input geometry to a Revit Form object. Forms can exist only in the family environment. You can convert complicated solids or surfaces directly into forms. A form can act as a void. Provide either one true boolean value to convert a form into a void. The node's lacing is set to longest by default., Springs.Fraction2Feet - Converts a fractioned feet /inch string value into a decimal foot value., Springs.Geometry.Extents - Gets the dimensions of the geometry's bounding box., Springs.Geometry.GroupByDistance - Splits the list of curves into groups if the distance between them is lesser than the provided margin., Springs.Geometry.SplitRecursively - Splits a surface or a solid recursively, using the resulting reduced geometry for every consecutive split. Select a point or another geometry to control the direction of the split., Springs.HostedInstance.ByPoints - Creates hosted family instances(doors/windows) at the specified points. You can feed either a single family type or a unique type for each instance., Springs.Input.Wait - Waits for all inputs to be completed before continuing the execution process.Part of the SmartCopyMon workflow., Springs.InterferenceCheck.Parse - Process a Revit interference check (HTML file) and extract the interference categories, all affected elements and the total number of clashes. If you are executing from a document different than the one the error report belongs to, be sure to set \"fetch_elements\" to false., Springs.Line.StraightenXY - Checks a line's end points for irregularities and corrects them if they are at or below the specified margin. The default margin is 1/5000 of the curve length, which is conservative., Springs.Line.StraightenZ - Checks a line's end points for irregularities in  the Z axis and corrects them if they are at or below the specified margin. The default margin is 1/2000 of the curve length, which is conservative., Springs.LineLoop.Merge - Attempts to join lines into a single chain of joined curves. The node returns the new lines as a chain and with the original order. The success outputs returns the success of the execution as a true/false boolean., Springs.List.DragDropReorder - Press and hold on an item to move it up or down the list. To confirm and close the window, select \"Save Order\". The optional names input will override the object representation., Springs.List.DropDown - Selects one list item by a drop-down combo box. The optional names input will override the object representation., Springs.List.DropFirstLast - Removes the first and last items from the list, Springs.List.EveryOther - Useful for when you want to combine an item on the list with every other item on the list. For example in list {1,2,3} , \"2\" will be paired up only with \"1\" and \"3\" and will not be paired up with itself., Springs.List.GetEven - Gets even indices from the list., Springs.List.GetOdd - Gets the odd indices from the list., Springs.List.MergeByBoolMask - Merge two lists by a boolean mask list. The true count in the mask should be the same as the length of the true list and vice versa for the false list., Springs.List.Randomise&Divide - Shiffles the input list and divides it into sub-lists based on ratios(1/4 + 1/2 + 1/4 will give you three lists split accordingly) The smalest ratio will always be 1 / the list length and the largest ratio will be 1. A seed input can shuffle the list further., Springs.List.Split - Splits a list at the desired length, Springs.List.Subpairs - Pair up each list item with the next one and drop the list item., Springs.Ln2Str - Serilize a geometry line to a string for use in Revit parameters, Springs.Math.AlmostEqual - Checks if a number is almost equal to a value with a specified tollerance., Springs.Mesh.ToPolySurface - Converts a Dynamo mesh to a polysurface. Uses multithreading - optimized for 4 cores., Springs.Mesh.ToToolkitMesh - Converts a Dynamo mesh to a toolkit mesh. You obviously need to have the appropriate version of the mesh toolkit package downloaded first., Springs.N-hedron.ByOriginVector - Creates a multi-sided poyhedron with defined side length and total height., Springs.NullAllIndicesOf - list all of the indices of a list that match the specified value. Capable of handling null values, part of the SmartCopyMonitor workflow., Springs.NullGetParameter - Similar to the built in node.Capable of handling null values, part of the SmartCopyMonitor workflow., Springs.NullIndexOf - Similar to the bult-in node but provides a null value instead of -1 of failure. Part of the SmartCopyMonitor workflow., Springs.NullReorder - Simiar to the built-in function with the difference that it can handle null indices. Part of the SmartCopyMonitor workflow., Springs.NullSetDifference - Similar to the built in node, with a built-in safety for null values. Part of the SmartCopyMonitor workflow., Springs.NullSetParameter - Similar to the built-in function but with the ability to handle null values. Part of the SmartCopyMon workflow., Springs.Number.ToString - Converts the input number(s) to string. Can process lists., Springs.PlanarFace.FixDomain - Corrects the surface domain of a 3 or 4 point planar face extracted from Revit., Springs.Point.PullOntoPlane - Pulls (projects) the point onto the input plane, following the plane normal., Springs.PolyCurve.Chamfer - Symmetrically chamfers the corners of the polycurve by the designated distance, Springs.Polygon.ContainmentTest+ - A less accurate method that should perform faster than the built-in node for large data sets., Springs.Pt2Str - Serilize a geometry point to a string for use in Revit parameters, Springs.SelectEdges - Select multiple edges from inside the Revit UI. Be sure to press \"Finish\" once done. You can use a Boolean toggle to refresh your selection., Springs.SelectElements(ordered) - Select multiple elements from the Revit document in the desired order. Hit ESC to stop picking. To refresh the node, connect a boolean switch node., Springs.SelectInRevit - Selects the input elements inside the Revit UI., Springs.SelectLinkedElement - Select the linked instance first, followed by the element. If your selection fails, just press escape.\r\nTo refresh the node, connect a boolean switch node., Springs.SelectLinkedElements(ordered) - Select the linked instance first. Then select multiple elements from the Revit document in the desired order. Hit ESC to stop picking. To refresh the node, connect a boolean switch node., Springs.SelectLinkedElements - Select the linked instance first, followed by the elements. To finish the selection, press Finish. If your selection fails, just press escape or Cancel.\r\nTo refresh the node, connect a boolean switch node., Springs.SelectLinkedFace - Select the linked instance first, followed by the face. If your selection fails, just press escape.\r\nTo refresh the node, connect a boolean switch node., Springs.Shaft.ByCurves - Creates a shaft opening. The top level MUST be higher than the base level for a successful execution. You can either provide one base and top level for all shafts or have unique levels for each shaft instance., Springs.Sheet.Views+ - Extracts all views and schedules (minus the revision schedule) placed on the input sheet (or sheets).\r\nWill be depreciated once the bult in node works with all plan types., Springs.Star.ByCenterRadiusRays - Fun little node to create star shapes., Springs.Str2Ln - De-serilize a Revit parameter string into a geometric line., Springs.Str2Pt - De-serilize a Revit parameter string into a geometric point., Springs.ViewSet.ByViewsName - Creates a set of views(or sheets) for printing. If the set exists, set Overwrite to true to replace it., Springs.Watch+ - This node that serializes the input information and presents it in a resizable text window.","engine_metadata":"","engine_version":"1.0.0.1180","created":"2016-07-13T14:53:54.589Z","full_dependency_versions":["100.0.0"],"full_dependency_ids":[{"_id":"56077cf3662bf0e9080001ea","name":"spring nodes"}],"direct_dependency_versions":[],"direct_dependency_ids":[],"change_log":"","version":"100.0.0"},{"_id":"5787a17a5351460648000061","contains_binaries":false,"node_libraries":[],"url_with_deps":"","url":"https://s3.amazonaws.com/greg-pkgs-prod/28674d40-e310-4fe9-bb6f-95d33e78461bgregPkg84.zip","contents":"Springs.AdaptiveFamily.ByFacetedGeometry - Genearate a new eight point adaptive component family type from any solid or polysurface consisting of planar faces. Faces with openigs are not supported., Springs.AreaPlan.ByLevelName - Creates an area plan at the designated levels. Each new view needs a name. An area scheme must first be activated before it can be used. To activate a scheme, place one view of that type in the project(you can then delete it).  If a view with the same scheme and name exists, you'll get a null instead., Springs.Beams.FixExtents - Detects all beams from the input list with broken extents(actual length - cut length <  margin) and attemts to correct them., Springs.BoundingBox.Scale - Scales the bounding box in three dimensions according to it's center., Springs.ClosedCurve.Offset+ - Offsets a curve both ways and correctly differenciates the external and internal offset. If an offset goes beyond the curve's bounds, the result will fail and a null value will be appended instead. Also works for convex curves like arcs., Springs.Collector.CurrentSelection - Gets the currently selected elements. Connect a boolean switch to refresh the selection., Springs.Collector.ElementsInView - Selects all elements visible in the input view., Springs.Collector.ElementSketch - Get the actual sketch lines of a sketch based element (floor, ceiling, modified wall, etc.) . You can optionally fetch the matching model curves, however this might prove comptationally heavy on larger data sets., Springs.Collector.FamilyInstances - Collects placed family instance elements from the document that match the name. Partially mathing elements are collected as well. If no matches are found, a list of all isntance names will be output., Springs.Collector.FamilyTypes - Collects non-system family types that fully match or partially match the provided names. If no matches are found, a list of all type names will be output., Springs.Collector.FloorTypes - Collects Floor types by name., Springs.Collector.LinkedInstanceElements - Extract elements by category from the selected linked instances. The transform vector can be used to get the exact location of the elements in the local file, Springs.Collector.Revisions - Collects all revision clouds from a specific date., Springs.Collector.Sheets - Search for sheets by either their name or their number. Use a false boolean switch to search by number., Springs.Collector.Views - Search for views based on naming. You can choose to either include or exclude schedules. Use the sheet collector for sheets., Springs.Collector.WallTypes - Collects wall types by name., Springs.Color2Decimal - Converts a Dynamo colour its Revit equivalent  decimal value., Springs.Curve.Offset+ - Offsets a curve towards the specified point, Springs.CurveLoop.Simplify - Attempts to simplify an open or a closed curve loop by connecting straight separate line segments into a single line., Springs.Decimal2Color - Converts a revit colour decimal value to its Dynamo equivalent., Springs.Dictionary.ByKeysValues - Dictionaries are an incredibly powerful tool for making associative sets between two equal length lists. The first list must be of unique strings (or numbers) and will be the key and the second list will be the matching values (it can be made up of geometry, elements, even other lists)\r\nThe search keys list will provide the corresponding value to the input key., Springs.DirectShape.ByGeometry - Convert the input geometry to DirectShape element inside the Revit document.  It supports solids or surfaces.It is based on an alternative process that uses a SAT import and can produce smooth surfaces. Each created DS will have a unique type. Make sure that each input geometry has a unique name. You can either feed a single category for all geometries or a unique category for each geometry - the node's lacing is set to longest by default., Springs.DirectShape.Transform - Transforms the typed DirectShape element from the identity coordinate system to the input coordinate system(s), in a manner similar to Dynamo's Geometry.Transform node., Springs.DirectShape.Translate - Copy the input DirectShape element with the help of a translation vector, similarly to the Geometry.Translate node. This method should prove more efficient than Element.Copy, Springs.Doc.ActiveView - Selects the current document's active view. Supports more view types than the built-in option.\r\nWill be depreciated once the bult in node works with all plan types., Springs.Doc.DeleteElements - Attempts to delete the input list of elements from the active Revit document.The node returns the number of successfully deleted elements and their Ids as a string. Carefully observe the deleted elements count. It may be greater than the input list because hosted elements or tags will be deleted as well. If an element in the list can not be deleted (for example last revision or last view), the whole list will fail to be deleted., Springs.Element.Copy - WARNING: Do not use this node in Automatic mode! Copy (planar array) the input Revit elements with the help of a translation vector, similarly to the Geometry.Translate node., Springs.Element.IsCut - Tests if the element is being cut by any void instances. If any cuts exist all cutting elements will be provided., Springs.Element.IsCutting - Tests if the input element (or elements) is a void cut and if it is cutting any elements. In such cases, the cut elements will be provided., Springs.Element.RemoveVoidCut - Removes the void cut between the input elements, if such exists., Springs.Element.SetLocation - Attempts to modify the location of the input element. This can effectively add as a move comand in Revit. Works for both line based and point based elements., Springs.ElementsOfCategory - Same as the built in \"All Elements of Category\" but can act as a function object and does not get refreshed automatically., Springs.ElementType.Duplicate - Create duplicate element types. If the type exists, it will be appended instead., Springs.ErrorReport.Parse - Process a Revit error report (HTML file) and extract the error types, all affected elements and the total number of errors. If you are executing from a document different than the one the error report belongs to, be sure to set \"fetch_elements\" to false., Springs.FamilyInsance.ByFacePoints - Places instances on the input face oriented to the face's U tangent and the global Z axis., Springs.FamilyInstance.ByGeometry - You must provide a valid family template path that will be used for all input geometry objects. The project units(and not the templates) will be used to determine the size of the output geometry.\r\nThe provided category will be used only if the family template supports it. If not, the default template category will be used instead.\r\nLikewise, the family material(provided as a string) will be set only if a material with that name exists in the template. If not, the default material will be used instead (\"By Category\").\r\nFor void cuts, the material settings will be ignored.\r\nThe Subcategory name is an optional input. If you'd like to skip assigning a Subcategory to any new instance, simply use null.\r\nThe node expects a unique family name for each geometry object. The rest of the input lists will be processed as if the node lacing is set to longest., Springs.FamilyInstance.Rotation - Fetches the angle of rotation around the insertion point of a point based element. The angle is always measured counter-clockwise., Springs.Feet2Fraction - Converts a decimal foot value to a fractional foot/inch string., Springs.File.Size - Checks the file size. Provide a file path as a string., Springs.Filter.ByCategoryName - Filters the input elements by their category name. You can input multiple category names., Springs.Filter.ByClassName - Filters a list of objects by the object's class name. Note that Dynamo elements belong to different classes than their Revit counterparts. Use the Object.Class node to check an object's class., Springs.Filter.BySelection - Check the items that you'd like to filter in.  Unchecked items will be sent to the out list. The optional names input will override the object representation., Springs.FloorOpening.ByCurves - Create hosted floor opeinngs through the input floors. The second input is a list of sub-lists of the boundary curves., Springs.Form.ByGeometry - Convert the input geometry to a Revit Form object. Forms can exist only in the family environment. You can convert complicated solids or surfaces directly into forms. A form can act as a void. Provide either one true boolean value to convert a form into a void. The node's lacing is set to longest by default., Springs.Fraction2Feet - Converts a fractioned feet /inch string value into a decimal foot value., Springs.Geometry.Extents - Gets the dimensions of the geometry's bounding box., Springs.Geometry.GroupByDistance - Splits the list of curves into groups if the distance between them is lesser than the provided margin., Springs.Geometry.SplitRecursively - Splits a surface or a solid recursively, using the resulting reduced geometry for every consecutive split. Select a point or another geometry to control the direction of the split., Springs.HostedInstance.ByPoints - Creates hosted family instances(doors/windows) at the specified points. You can feed either a single family type or a unique type for each instance., Springs.Input.Wait - Waits for all inputs to be completed before continuing the execution process.Part of the SmartCopyMon workflow., Springs.InterferenceCheck.Parse - Process a Revit interference check (HTML file) and extract the interference categories, all affected elements and the total number of clashes. If you are executing from a document different than the one the error report belongs to, be sure to set \"fetch_elements\" to false., Springs.Line.StraightenXY - Checks a line's end points for irregularities and corrects them if they are at or below the specified margin. The default margin is 1/5000 of the curve length, which is conservative., Springs.Line.StraightenZ - Checks a line's end points for irregularities in  the Z axis and corrects them if they are at or below the specified margin. The default margin is 1/2000 of the curve length, which is conservative., Springs.LineLoop.Merge - Attempts to join lines into a single chain of joined curves. The node returns the new lines as a chain and with the original order. The success outputs returns the success of the execution as a true/false boolean., Springs.List.DragDropReorder - Press and hold on an item to move it up or down the list. To confirm and close the window, select \"Save Order\". The optional names input will override the object representation., Springs.List.DropDown - Selects one list item by a drop-down combo box. The optional names input will override the object representation., Springs.List.DropFirstLast - Removes the first and last items from the list, Springs.List.EveryOther - Useful for when you want to combine an item on the list with every other item on the list. For example in list {1,2,3} , \"2\" will be paired up only with \"1\" and \"3\" and will not be paired up with itself., Springs.List.GetEven - Gets even indices from the list., Springs.List.GetOdd - Gets the odd indices from the list., Springs.List.MergeByBoolMask - Merge two lists by a boolean mask list. The true count in the mask should be the same as the length of the true list and vice versa for the false list., Springs.List.Randomise&Divide - Shiffles the input list and divides it into sub-lists based on ratios(1/4 + 1/2 + 1/4 will give you three lists split accordingly) The smalest ratio will always be 1 / the list length and the largest ratio will be 1. A seed input can shuffle the list further., Springs.List.Split - Splits a list at the desired length, Springs.List.Subpairs - Pair up each list item with the next one and drop the list item., Springs.Ln2Str - Serilize a geometry line to a string for use in Revit parameters, Springs.Math.AlmostEqual - Checks if a number is almost equal to a value with a specified tollerance., Springs.Mesh.ToPolySurface - Converts a Dynamo mesh to a polysurface. Uses multithreading - optimized for 4 cores., Springs.Mesh.ToToolkitMesh - Converts a Dynamo mesh to a toolkit mesh. You obviously need to have the appropriate version of the mesh toolkit package downloaded first., Springs.N-hedron.ByOriginVector - Creates a multi-sided poyhedron with defined side length and total height., Springs.NullAllIndicesOf - list all of the indices of a list that match the specified value. Capable of handling null values, part of the SmartCopyMonitor workflow., Springs.NullGetParameter - Similar to the built in node.Capable of handling null values, part of the SmartCopyMonitor workflow., Springs.NullIndexOf - Similar to the bult-in node but provides a null value instead of -1 of failure. Part of the SmartCopyMonitor workflow., Springs.NullReorder - Simiar to the built-in function with the difference that it can handle null indices. Part of the SmartCopyMonitor workflow., Springs.NullSetDifference - Similar to the built in node, with a built-in safety for null values. Part of the SmartCopyMonitor workflow., Springs.NullSetParameter - Similar to the built-in function but with the ability to handle null values. Part of the SmartCopyMon workflow., Springs.Number.ToString - Converts the input number(s) to string. Can process lists., Springs.PlanarFace.FixDomain - Corrects the surface domain of a 3 or 4 point planar face extracted from Revit., Springs.Point.PullOntoPlane - Pulls (projects) the point onto the input plane, following the plane normal., Springs.PolyCurve.Chamfer - Symmetrically chamfers the corners of the polycurve by the designated distance, Springs.Polygon.ContainmentTest+ - A less accurate method that should perform faster than the built-in node for large data sets., Springs.Pt2Str - Serilize a geometry point to a string for use in Revit parameters, Springs.SelectEdges - Select multiple edges from inside the Revit UI. Be sure to press \"Finish\" once done. You can use a Boolean toggle to refresh your selection., Springs.SelectElements(ordered) - Select multiple elements from the Revit document in the desired order. Hit ESC to stop picking. To refresh the node, connect a boolean switch node., Springs.SelectInRevit - Selects the input elements inside the Revit UI., Springs.SelectLinkedElement - Select the linked instance first, followed by the element. If your selection fails, just press escape.\r\nTo refresh the node, connect a boolean switch node., Springs.SelectLinkedElements(ordered) - Select the linked instance first. Then select multiple elements from the Revit document in the desired order. Hit ESC to stop picking. To refresh the node, connect a boolean switch node., Springs.SelectLinkedElements - Select the linked instance first, followed by the elements. To finish the selection, press Finish. If your selection fails, just press escape or Cancel.\r\nTo refresh the node, connect a boolean switch node., Springs.SelectLinkedFace - Select the linked instance first, followed by the face. If your selection fails, just press escape.\r\nTo refresh the node, connect a boolean switch node., Springs.Shaft.ByCurves - Creates a shaft opening. The top level MUST be higher than the base level for a successful execution. You can either provide one base and top level for all shafts or have unique levels for each shaft instance., Springs.Sheet.Views+ - Extracts all views and schedules (minus the revision schedule) placed on the input sheet (or sheets).\r\nWill be depreciated once the bult in node works with all plan types., Springs.Star.ByCenterRadiusRays - Fun little node to create star shapes., Springs.Str2Ln - De-serilize a Revit parameter string into a geometric line., Springs.Str2Pt - De-serilize a Revit parameter string into a geometric point., Springs.ViewSet.ByViewsName - Creates a set of views(or sheets) for printing. If the set exists, set Overwrite to true to replace it., Springs.Watch+ - This node that serializes the input information and presents it in a resizable text window.","engine_metadata":"","engine_version":"1.0.0.1180","created":"2016-07-14T14:28:10.257Z","full_dependency_versions":["100.0.1"],"full_dependency_ids":[{"_id":"56077cf3662bf0e9080001ea","name":"spring nodes"}],"direct_dependency_versions":[],"direct_dependency_ids":[],"change_log":"","version":"100.0.1"},{"_id":"581e93f428c433b35800002c","contains_binaries":false,"node_libraries":[],"url_with_deps":"","url":"https://s3.amazonaws.com/greg-pkgs-prod/c8de9cfb-3ab6-42c2-a3c8-b5cb5e52116dgregPkg761.zip","contents":"Springs.AdaptiveFamily.ByFacetedGeometry - Genearate a new eight point adaptive component family type from any solid or polysurface consisting of planar faces. Faces with openigs are not supported., Springs.AreaPlan.ByLevelName - Creates an area plan at the designated levels. Each new view needs a name. An area scheme must first be activated before it can be used. To activate a scheme, place one view of that type in the project(you can then delete it).  If a view with the same scheme and name exists, you'll get a null instead., Springs.Beams.FixExtents - Detects all beams from the input list with broken extents(actual length - cut length <  margin) and attemts to correct them., Springs.BoundingBox.MidPoint - Fetches the mid point of the bounding box., Springs.BoundingBox.Scale - Scales the bounding box in three dimensions according to it's center., Springs.BrepShape.ByGeometry - Convert the input geometry to DirectShape element inside the Revit document.  Works only in Revit 2017 and later. Usies the more advanced BrepBuilder. It supports solids or surfaces, however periodic faces like spheres, cylinders and cones are not supported. Each created DS will have a unique type. Make sure that each input geometry has a unique name. You can either feed a single category and material for all geometries or a unique one for each geometry - the node's lacing is set to longest by default. The default category is Generic Model., Springs.ClosedCurve.Offset+ - Offsets a curve both ways and correctly differenciates the external and internal offset. If an offset goes beyond the curve's bounds, the result will fail and a null value will be appended instead. Also works for convex curves like arcs., Springs.Collector.CurrentSelection - Gets the currently selected elements. Connect a boolean switch to refresh the selection., Springs.Collector.ElementsInView - Selects all elements visible in the input view., Springs.Collector.ElementSketch - Get the actual sketch lines of a sketch based element (floor, ceiling, modified wall, etc.) . You can optionally fetch the matching model curves, however this might prove comptationally heavy on larger data sets., Springs.Collector.FamilyInstances - Collects placed family instance elements from the document that match the name. Partially mathing elements are collected as well. If no matches are found, a list of all isntance names will be output., Springs.Collector.FamilyTypes - Collects non-system family types that fully match or partially match the provided names. If no matches are found, a list of all type names will be output., Springs.Collector.FloorTypes - Collects Floor types by name., Springs.Collector.LinkedInstanceElements - Extract elements by category from the selected linked instances. The transform vector can be used to get the exact location of the elements in the local file, Springs.Collector.Revisions - Collects all revision clouds from a specific date., Springs.Collector.Sheets - Search for sheets by either their name or their number. Use a false boolean switch to search by number., Springs.Collector.Views - Search for views based on naming. You can choose to either include or exclude schedules. Use the sheet collector for sheets., Springs.Collector.WallTypes - Collects wall types by name., Springs.Color2Decimal - Converts a Dynamo colour its Revit equivalent  decimal value., Springs.Curve.Offset+ - Offsets a curve towards the specified point, Springs.CurveLoop.Simplify - Attempts to simplify an open or a closed curve loop by connecting straight separate line segments into a single line., Springs.Decimal2Color - Converts a revit colour decimal value to its Dynamo equivalent., Springs.Dictionary.ByKeysValues - Dictionaries are an incredibly powerful tool for making associative sets between two equal length lists. The first list must be of unique strings (or numbers) and will be the key and the second list will be the matching values (it can be made up of geometry, elements, even other lists)\r\nThe search keys list will provide the corresponding value to the input key., Springs.DirectShape.ByGeometry - Convert the input geometry to DirectShape element inside the Revit document.  It supports solids or surfaces.It is based on an alternative process that uses a SAT import and can produce smooth surfaces. Each created DS will have a unique type. Make sure that each input geometry has a unique name. You can either feed a single category for all geometries or a unique category for each geometry - the node's lacing is set to longest by default., Springs.DirectShape.Transform - Transforms the typed DirectShape element from the identity coordinate system to the input coordinate system(s), in a manner similar to Dynamo's Geometry.Transform node., Springs.DirectShape.Translate - Copy the input DirectShape element with the help of a translation vector, similarly to the Geometry.Translate node. This method should prove more efficient than Element.Copy, Springs.Doc.ActiveView - Selects the current document's active view. Supports more view types than the built-in option.\r\nWill be depreciated once the bult in node works with all plan types., Springs.Doc.DeleteElements - Attempts to delete the input list of elements from the active Revit document.The node returns the number of successfully deleted elements and their Ids as a string. Carefully observe the deleted elements count. It may be greater than the input list because hosted elements or tags will be deleted as well. If an element in the list can not be deleted (for example last revision or last view), the whole list will fail to be deleted., Springs.Element.IsCut - Tests if the element is being cut by any void instances. If any cuts exist all cutting elements will be provided., Springs.Element.IsCutting - Tests if the input element (or elements) is a void cut and if it is cutting any elements. In such cases, the cut elements will be provided., Springs.Element.RemoveVoidCut - Removes the void cut between the input elements, if such exists., Springs.Element.SetLocation - Attempts to modify the location of the input element. This can effectively add as a move comand in Revit. Works for both line based and point based elements., Springs.ElementsOfCategory - Same as the built in \"All Elements of Category\" but can act as a function object and does not get refreshed automatically., Springs.ElementType.Duplicate - Create duplicate element types. If the type exists, it will be appended instead., Springs.ErrorReport.Parse - Process a Revit error report (HTML file) and extract the error types, all affected elements and the total number of errors. If you are executing from a document different than the one the error report belongs to, be sure to set \"fetch_elements\" to false., Springs.FamilyInstance.ByFacePoints - Places instances on the input face oriented to the face's U tangent and the global Z axis., Springs.FamilyInstance.ByGeometry - You must provide a valid family template path that will be used for all input geometry objects. The project units(and not the templates) will be used to determine the size of the output geometry.\r\nThe provided category will be used only if the family template supports it. If not, the default template category will be used instead.\r\nLikewise, the family material(provided as a string) will be set only if a material with that name exists in the template. If not, the default material will be used instead (\"By Category\").\r\nFor void cuts, the material settings will be ignored.\r\nThe Subcategory name is an optional input. If you'd like to skip assigning a Subcategory to any new instance, simply use null.\r\nThe node expects a unique family name for each geometry object. The rest of the input lists will be processed as if the node lacing is set to longest., Springs.Feet2Fraction - Converts a decimal foot value to a fractional foot/inch string., Springs.File.Size - Checks the file size. Provide a file path as a string., Springs.Filter.ByCategoryName - Filters the input elements by their category name. You can input multiple category names., Springs.Filter.ByClassName - Filters a list of objects by the object's class name. Note that Dynamo elements belong to different classes than their Revit counterparts. Use the Object.Class node to check an object's class., Springs.Filter.BySelection - Check the items that you'd like to filter in.  Unchecked items will be sent to the out list. The optional names input will override the object representation., Springs.FloorOpening.ByCurves - Create hosted floor opeinngs through the input floors. The second input is a list of sub-lists of the boundary curves., Springs.Form.ByGeometry - Convert the input geometry to a Revit Form object. Forms can exist only in the family environment. You can convert complicated solids or surfaces directly into forms. A form can act as a void. Provide either one true boolean value to convert a form into a void. The node's lacing is set to longest by default., Springs.Fraction2Feet - Converts a fractioned feet /inch string value into a decimal foot value., Springs.Geometry.Extents - Gets the dimensions of the geometry's bounding box., Springs.Geometry.GroupByDistance - Splits the list of curves into groups if the distance between them is lesser than the provided margin., Springs.Geometry.SplitRecursively - Splits a surface or a solid recursively, using the resulting reduced geometry for every consecutive split. Select a point or another geometry to control the direction of the split., Springs.HostedInstance.ByPoints - Creates hosted family instances(doors/windows) at the specified points. You can feed either a single family type or a unique type for each instance., Springs.InterferenceCheck.Parse - Process a Revit interference check (HTML file) and extract the interference categories, all affected elements and the total number of clashes. If you are executing from a document different than the one the error report belongs to, be sure to set \"fetch_elements\" to false., Springs.Line.StraightenXY - Checks a line's end points for irregularities and corrects them if they are at or below the specified margin. The default margin is 1/5000 of the curve length, which is conservative., Springs.Line.StraightenZ - Checks a line's end points for irregularities in  the Z axis and corrects them if they are at or below the specified margin. The default margin is 1/2000 of the curve length, which is conservative., Springs.LineLoop.Merge - Attempts to join lines into a single chain of joined curves. The node returns the new lines as a chain and with the original order. The success outputs returns the success of the execution as a true/false boolean., Springs.List.DragDropReorder - Press and hold on an item to move it up or down the list. To confirm and close the window, select \"Save Order\". The optional names input will override the object representation., Springs.List.DropDown - Selects one list item by a drop-down combo box. The optional names input will override the object representation., Springs.List.DropFirstLast - Removes the first and last items from the list, Springs.List.EveryOther - Useful for when you want to combine an item on the list with every other item on the list. For example in list {1,2,3} , \"2\" will be paired up only with \"1\" and \"3\" and will not be paired up with itself., Springs.List.GetEvenOdd - Gets even indices from the list., Springs.List.MergeByBoolMask - Merge two lists by a boolean mask list. The true count in the mask should be the same as the length of the true list and vice versa for the false list., Springs.List.Randomise&Divide - Shiffles the input list and divides it into sub-lists based on ratios(1/4 + 1/2 + 1/4 will give you three lists split accordingly) The smalest ratio will always be 1 / the list length and the largest ratio will be 1. A seed input can shuffle the list further., Springs.List.Split - Splits a list at the desired length, Springs.List.Subpairs - Pair up each list item with the next one and drop the list item., Springs.Ln2Str - Serilize a geometry line to a string for use in Revit parameters, Springs.Math.AlmostEqual - Checks if a number is almost equal to a value with a specified tollerance., Springs.Mesh.ToPolySurface - Converts a Dynamo mesh to a polysurface. Uses multithreading - optimized for 4 cores., Springs.Mesh.ToToolkitMesh - Converts a Dynamo mesh to a toolkit mesh. You obviously need to have the appropriate version of the mesh toolkit package downloaded first., Springs.N-hedron.ByOriginVector - Creates a multi-sided poyhedron with defined side length and total height., Springs.NullAllIndicesOf - list all of the indices of a list that match the specified value. Capable of handling null values, part of the SmartCopyMonitor workflow., Springs.NullGetParameter - Similar to the built in node.Capable of handling null values, part of the SmartCopyMonitor workflow., Springs.NullIndexOf - Similar to the bult-in node but provides a null value instead of -1 of failure. Part of the SmartCopyMonitor workflow., Springs.NullReorder - Simiar to the built-in function with the difference that it can handle null indices. Part of the SmartCopyMonitor workflow., Springs.NullSetDifference - Similar to the built in node, with a built-in safety for null values. Part of the SmartCopyMonitor workflow., Springs.NullSetParameter - Similar to the built-in function but with the ability to handle null values. Part of the SmartCopyMon workflow., Springs.Number.ToString - Converts the input number(s) to string. Can process lists., Springs.PlanarFace.FixDomain - Corrects the surface domain of a 3 or 4 point planar face extracted from Revit., Springs.Point.PullOntoPlane - Pulls (projects) the point onto the input plane, following the plane normal., Springs.Points.ConvexHull2D - Computes the XY convex hull of a given set of points based on the monotone chain algorithm., Springs.PolyCurve.Chamfer - Symmetrically chamfers the corners of the polycurve by the designated distance, Springs.Polygon.ContainmentTest+ - A less accurate method that should perform faster than the built-in node for large data sets., Springs.Pt2Str - Serilize a geometry point to a string for use in Revit parameters, Springs.SelectEdges - Select multiple edges from inside the Revit UI. Be sure to press \"Finish\" once done. You can use a Boolean toggle to refresh your selection., Springs.SelectElements(ordered) - Select multiple elements from the Revit document in the desired order. Hit ESC to stop picking. To refresh the node, connect a boolean switch node., Springs.SelectFaces+ - Select multiple faces from inside the Revit UI. Be sure to press \"Finish\" once done. Unlike the built-in node, face references of instances will be added sucessfully and you'l get the pick points. You can use a Boolean toggle to refresh your selection., Springs.SelectInRevit - Selects the input elements inside the Revit UI., Springs.SelectLinkedElement - Select the linked instance first, followed by the element. If your selection fails, just press escape.\r\nTo refresh the node, connect a boolean switch node., Springs.SelectLinkedElements(ordered) - Select the linked instance first. Then select multiple elements from the Revit document in the desired order. Hit ESC to stop picking. To refresh the node, connect a boolean switch node., Springs.SelectLinkedElements - Select the linked instance first, followed by the elements. To finish the selection, press Finish. If your selection fails, just press escape or Cancel.\r\nTo refresh the node, connect a boolean switch node., Springs.SelectLinkedFace - Select the linked instance first, followed by the face. If your selection fails, just press escape.\r\nTo refresh the node, connect a boolean switch node., Springs.Shaft.ByCurves - Creates a shaft opening. The top level MUST be higher than the base level for a successful execution. You can either provide one base and top level for all shafts or have unique levels for each shaft instance., Springs.Sheet.Views+ - Extracts all views and schedules (minus the revision schedule) placed on the input sheet (or sheets).\r\nWill be depreciated once the bult in node works with all plan types., Springs.Star.ByCenterRadiusRays - Fun little node to create star shapes., Springs.Str2Ln - De-serilize a Revit parameter string into a geometric line., Springs.Str2Pt - De-serilize a Revit parameter string into a geometric point., Springs.ViewSet.ByViewsName - Creates a set of views(or sheets) for printing. If the set exists, set Overwrite to true to replace it., Springs.Watch+ - This node that serializes the input information and presents it in a resizable text window.","engine_metadata":"","engine_version":"1.1.0.2094","created":"2016-11-06T02:22:44.042Z","full_dependency_versions":["110.0.0"],"full_dependency_ids":[{"_id":"56077cf3662bf0e9080001ea","name":"spring nodes"}],"direct_dependency_versions":[],"direct_dependency_ids":[],"change_log":"","version":"110.0.0"},{"_id":"582407f25af9f3713d000029","contains_binaries":false,"node_libraries":[],"url_with_deps":"","url":"https://s3.amazonaws.com/greg-pkgs-prod/ef01df6d-b81e-4d6e-85f7-f35f3139bbc0gregPkg676.zip","contents":"Springs.AdaptiveFamily.ByFacetedGeometry - Genearate a new eight point adaptive component family type from any solid or polysurface consisting of planar faces. Faces with openigs are not supported., Springs.AreaPlan.ByLevelName - Creates an area plan at the designated levels. Each new view needs a name. An area scheme must first be activated before it can be used. To activate a scheme, place one view of that type in the project(you can then delete it).  If a view with the same scheme and name exists, you'll get a null instead., Springs.Beams.FixExtents - Detects all beams from the input list with broken extents(actual length - cut length <  margin) and attemts to correct them., Springs.BoundingBox.MidPoint - Fetches the mid point of the bounding box., Springs.BoundingBox.Scale - Scales the bounding box in three dimensions according to it's center., Springs.BrepShape.ByGeometry - Convert the input geometry to DirectShape element inside the Revit document.  Works only in Revit 2017 and later. Usies the more advanced BrepBuilder. It supports solids or surfaces, however periodic faces like spheres, cylinders and cones are not supported. Each created DS will have a unique type. Make sure that each input geometry has a unique name. You can either feed a single category and material for all geometries or a unique one for each geometry - the node's lacing is set to longest by default. The default category is Generic Model., Springs.ClosedCurve.Offset+ - Offsets a curve both ways and correctly differenciates the external and internal offset. If an offset goes beyond the curve's bounds, the result will fail and a null value will be appended instead. Also works for convex curves like arcs., Springs.Collector.CurrentSelection - Gets the currently selected elements. Connect a boolean switch to refresh the selection., Springs.Collector.ElementsInView - Selects all elements visible in the input view., Springs.Collector.ElementSketch - Get the actual sketch lines of a sketch based element (floor, ceiling, modified wall, etc.) . You can optionally fetch the matching model curves, however this might prove comptationally heavy on larger data sets., Springs.Collector.FamilyInstances - Collects placed family instance elements from the document that match the name. Partially mathing elements are collected as well. If no matches are found, a list of all isntance names will be output., Springs.Collector.FamilyTypes - Collects non-system family types that fully match or partially match the provided names. If no matches are found, a list of all type names will be output., Springs.Collector.FloorTypes - Collects Floor types by name., Springs.Collector.LinkedInstanceElements - Extract elements by category from the selected linked instances. The transform vector can be used to get the exact location of the elements in the local file, Springs.Collector.Revisions - Collects all revision clouds from a specific date., Springs.Collector.Sheets - Search for sheets by either their name or their number. Use a false boolean switch to search by number., Springs.Collector.Views - Search for views based on naming. You can choose to either include or exclude schedules. Use the sheet collector for sheets., Springs.Collector.WallTypes - Collects wall types by name., Springs.Color2Decimal - Converts a Dynamo colour its Revit equivalent  decimal value., Springs.Curve.Offset+ - Offsets a curve towards the specified point, Springs.CurveLoop.Simplify - Attempts to simplify an open or a closed curve loop by connecting straight separate line segments into a single line., Springs.Decimal2Color - Converts a revit colour decimal value to its Dynamo equivalent., Springs.Dictionary.ByKeysValues - Dictionaries are an incredibly powerful tool for making associative sets between two equal length lists. The first list must be of unique strings (or numbers) and will be the key and the second list will be the matching values (it can be made up of geometry, elements, even other lists)\r\nThe search keys list will provide the corresponding value to the input key., Springs.DirectShape.ByGeometry - Convert the input geometry to DirectShape element inside the Revit document.  It supports solids or surfaces.It is based on an alternative process that uses a SAT import and can produce smooth surfaces. Each created DS will have a unique type. Make sure that each input geometry has a unique name. You can either feed a single category for all geometries or a unique category for each geometry - the node's lacing is set to longest by default., Springs.DirectShape.Transform - Transforms the typed DirectShape element from the identity coordinate system to the input coordinate system(s), in a manner similar to Dynamo's Geometry.Transform node., Springs.DirectShape.Translate - Copy the input DirectShape element with the help of a translation vector, similarly to the Geometry.Translate node. This method should prove more efficient than Element.Copy, Springs.Doc.ActiveView - Selects the current document's active view. Supports more view types than the built-in option.\r\nWill be depreciated once the bult in node works with all plan types., Springs.Doc.DeleteElements - Attempts to delete the input list of elements from the active Revit document.The node returns the number of successfully deleted elements and their Ids as a string. Carefully observe the deleted elements count. It may be greater than the input list because hosted elements or tags will be deleted as well. If an element in the list can not be deleted (for example last revision or last view), the whole list will fail to be deleted., Springs.Element.IsCut - Tests if the element is being cut by any void instances. If any cuts exist all cutting elements will be provided., Springs.Element.IsCutting - Tests if the input element (or elements) is a void cut and if it is cutting any elements. In such cases, the cut elements will be provided., Springs.Element.RemoveVoidCut - Removes the void cut between the input elements, if such exists., Springs.Element.SetLocation - Attempts to modify the location of the input element. This can effectively add as a move comand in Revit. Works for both line based and point based elements., Springs.ElementsOfCategory - Same as the built in \"All Elements of Category\" but can act as a function object and does not get refreshed automatically., Springs.ElementType.Duplicate - Create duplicate element types. If the type exists, it will be appended instead., Springs.ErrorReport.Parse - Process a Revit error report (HTML file) and extract the error types, all affected elements and the total number of errors. If you are executing from a document different than the one the error report belongs to, be sure to set \"fetch_elements\" to false., Springs.FamilyInstance.ByFacePoints - Places instances on the input face oriented to the face's U tangent and the global Z axis., Springs.FamilyInstance.ByGeometry - You must provide a valid family template path that will be used for all input geometry objects. The project units(and not the templates) will be used to determine the size of the output geometry.\r\nThe provided category will be used only if the family template supports it. If not, the default template category will be used instead.\r\nLikewise, the family material(provided as a string) will be set only if a material with that name exists in the template. If not, the default material will be used instead (\"By Category\").\r\nFor void cuts, the material settings will be ignored.\r\nThe Subcategory name is an optional input. If you'd like to skip assigning a Subcategory to any new instance, simply use null.\r\nThe node expects a unique family name for each geometry object. The rest of the input lists will be processed as if the node lacing is set to longest., Springs.Feet2Fraction - Converts a decimal foot value to a fractional foot/inch string., Springs.File.Size - Checks the file size. Provide a file path as a string., Springs.Filter.ByCategoryName - Filters the input elements by their category name. You can input multiple category names., Springs.Filter.ByClassName - Filters a list of objects by the object's class name. Note that Dynamo elements belong to different classes than their Revit counterparts. Use the Object.Class node to check an object's class., Springs.Filter.BySelection - Check the items that you'd like to filter in.  Unchecked items will be sent to the out list. The optional names input will override the object representation., Springs.FloorOpening.ByCurves - Create hosted floor opeinngs through the input floors. The second input is a list of sub-lists of the boundary curves., Springs.Form.ByGeometry - Convert the input geometry to a Revit Form object. Forms can exist only in the family environment. You can convert complicated solids or surfaces directly into forms. A form can act as a void. Provide either one true boolean value to convert a form into a void. The node's lacing is set to longest by default., Springs.Fraction2Feet - Converts a fractioned feet /inch string value into a decimal foot value., Springs.Geometry.Extents - Gets the dimensions of the geometry's bounding box., Springs.Geometry.GroupByDistance - Splits the list of curves into groups if the distance between them is lesser than the provided margin., Springs.Geometry.SplitRecursively - Splits a surface or a solid recursively, using the resulting reduced geometry for every consecutive split. Select a point or another geometry to control the direction of the split., Springs.HostedInstance.ByPoints - Creates hosted family instances(doors/windows) at the specified points. You can feed either a single family type or a unique type for each instance., Springs.InterferenceCheck.Parse - Process a Revit interference check (HTML file) and extract the interference categories, all affected elements and the total number of clashes. If you are executing from a document different than the one the error report belongs to, be sure to set \"fetch_elements\" to false., Springs.Line.StraightenXY - Checks a line's end points for irregularities and corrects them if they are at or below the specified margin. The default margin is 1/5000 of the curve length, which is conservative., Springs.Line.StraightenZ - Checks a line's end points for irregularities in  the Z axis and corrects them if they are at or below the specified margin. The default margin is 1/2000 of the curve length, which is conservative., Springs.LineLoop.Merge - Attempts to join lines into a single chain of joined curves. The node returns the new lines as a chain and with the original order. The success outputs returns the success of the execution as a true/false boolean., Springs.List.DragDropReorder - Press and hold on an item to move it up or down the list. To confirm and close the window, select \"Save Order\". The optional names input will override the object representation., Springs.List.DropDown - Selects one list item by a drop-down combo box. The optional names input will override the object representation., Springs.List.DropFirstLast - Removes the first and last items from the list, Springs.List.EveryOther - Useful for when you want to combine an item on the list with every other item on the list. For example in list {1,2,3} , \"2\" will be paired up only with \"1\" and \"3\" and will not be paired up with itself., Springs.List.GetEvenOdd - Gets even indices from the list., Springs.List.MergeByBoolMask - Merge two lists by a boolean mask list. The true count in the mask should be the same as the length of the true list and vice versa for the false list., Springs.List.Randomise&Divide - Shiffles the input list and divides it into sub-lists based on ratios(1/4 + 1/2 + 1/4 will give you three lists split accordingly) The smalest ratio will always be 1 / the list length and the largest ratio will be 1. A seed input can shuffle the list further., Springs.List.Split - Splits a list at the desired length, Springs.List.Subpairs - Pair up each list item with the next one and drop the list item., Springs.Ln2Str - Serilize a geometry line to a string for use in Revit parameters, Springs.Math.AlmostEqual - Checks if a number is almost equal to a value with a specified tollerance., Springs.Mesh.ToPolySurface - Converts a Dynamo mesh to a polysurface. Uses multithreading - optimized for 4 cores., Springs.Mesh.ToToolkitMesh - Converts a Dynamo mesh to a toolkit mesh. You obviously need to have the appropriate version of the mesh toolkit package downloaded first., Springs.N-hedron.ByOriginVector - Creates a multi-sided poyhedron with defined side length and total height., Springs.NullAllIndicesOf - list all of the indices of a list that match the specified value. Capable of handling null values, part of the SmartCopyMonitor workflow., Springs.NullGetParameter - Similar to the built in node.Capable of handling null values, part of the SmartCopyMonitor workflow., Springs.NullIndexOf - Similar to the bult-in node but provides a null value instead of -1 of failure. Part of the SmartCopyMonitor workflow., Springs.NullReorder - Simiar to the built-in function with the difference that it can handle null indices. Part of the SmartCopyMonitor workflow., Springs.NullSetDifference - Similar to the built in node, with a built-in safety for null values. Part of the SmartCopyMonitor workflow., Springs.NullSetParameter - Similar to the built-in function but with the ability to handle null values. Part of the SmartCopyMon workflow., Springs.Number.ToString - Converts the input number(s) to string. Can process lists., Springs.PlanarFace.FixDomain - Corrects the surface domain of a 3 or 4 point planar face extracted from Revit., Springs.Point.PullOntoPlane - Pulls (projects) the point onto the input plane, following the plane normal., Springs.Points.ConvexHull2D - Computes the XY convex hull of a given set of points based on the monotone chain algorithm., Springs.PolyCurve.Chamfer - Symmetrically chamfers the corners of the polycurve by the designated distance, Springs.Polygon.ContainmentTest+ - A less accurate method that should perform faster than the built-in node for large data sets., Springs.Pt2Str - Serilize a geometry point to a string for use in Revit parameters, Springs.SelectEdges - Select multiple edges from inside the Revit UI. Be sure to press \"Finish\" once done. You can use a Boolean toggle to refresh your selection., Springs.SelectElements(ordered) - Select multiple elements from the Revit document in the desired order. Hit ESC to stop picking. To refresh the node, connect a boolean switch node., Springs.SelectFaces+ - Select multiple faces from inside the Revit UI. Be sure to press \"Finish\" once done. Unlike the built-in node, face references of instances will be added sucessfully and you'l get the pick points. You can use a Boolean toggle to refresh your selection., Springs.SelectInRevit - Selects the input elements inside the Revit UI., Springs.SelectLinkedElement - Select the linked instance first, followed by the element. If your selection fails, just press escape.\r\nTo refresh the node, connect a boolean switch node., Springs.SelectLinkedElements(ordered) - Select the linked instance first. Then select multiple elements from the Revit document in the desired order. Hit ESC to stop picking. To refresh the node, connect a boolean switch node., Springs.SelectLinkedElements - Select the linked instance first, followed by the elements. To finish the selection, press Finish. If your selection fails, just press escape or Cancel.\r\nTo refresh the node, connect a boolean switch node., Springs.SelectLinkedFace - Select the linked instance first, followed by the face. If your selection fails, just press escape.\r\nTo refresh the node, connect a boolean switch node., Springs.Shaft.ByCurves - Creates a shaft opening. The top level MUST be higher than the base level for a successful execution. You can either provide one base and top level for all shafts or have unique levels for each shaft instance., Springs.Sheet.Views+ - Extracts all views and schedules (minus the revision schedule) placed on the input sheet (or sheets).\r\nWill be depreciated once the bult in node works with all plan types., Springs.Star.ByCenterRadiusRays - Fun little node to create star shapes., Springs.Str2Ln - De-serilize a Revit parameter string into a geometric line., Springs.Str2Pt - De-serilize a Revit parameter string into a geometric point., Springs.ViewSet.ByViewsName - Creates a set of views(or sheets) for printing. If the set exists, set Overwrite to true to replace it., Springs.Watch+ - This node that serializes the input information and presents it in a resizable text window.","engine_metadata":"","engine_version":"1.1.0.2094","created":"2016-11-10T05:38:58.561Z","full_dependency_versions":["110.0.1"],"full_dependency_ids":[{"_id":"56077cf3662bf0e9080001ea","name":"spring nodes"}],"direct_dependency_versions":[],"direct_dependency_ids":[],"change_log":"","version":"110.0.1"},{"_id":"583d2f4ffdef23aa6e000034","contains_binaries":false,"node_libraries":[],"url_with_deps":"","url":"https://s3.amazonaws.com/greg-pkgs-prod/873bd39a-d246-4873-9934-f75a9066c9e5gregPkg652.zip","contents":"Springs.AdaptiveFamily.ByFacetedGeometry - Genearate a new eight point adaptive component family type from any solid or polysurface consisting of planar faces. Faces with openigs are not supported., Springs.AreaPlan.ByLevelName - Creates an area plan at the designated levels. Each new view needs a name. An area scheme must first be activated before it can be used. To activate a scheme, place one view of that type in the project(you can then delete it).  If a view with the same scheme and name exists, you'll get a null instead., Springs.Beams.FixExtents - Detects all beams from the input list with broken extents(actual length - cut length <  margin) and attemts to correct them., Springs.BoundingBox.MidPoint - Fetches the mid point of the bounding box., Springs.BoundingBox.Scale - Scales the bounding box in three dimensions according to it's center., Springs.BrepShape.ByGeometry - Convert the input geometry to DirectShape element inside the Revit document.  Works only in Revit 2017 and later. Usies the more advanced BrepBuilder. It supports solids or surfaces, however periodic faces like spheres, cylinders and cones are not supported. Each created DS will have a unique type. Make sure that each input geometry has a unique name. You can either feed a single category and material for all geometries or a unique one for each geometry - the node's lacing is set to longest by default. The default category is Generic Model., Springs.ClosedCurve.Offset+ - Offsets a curve both ways and correctly differenciates the external and internal offset. If an offset goes beyond the curve's bounds, the result will fail and a null value will be appended instead. Also works for convex curves like arcs., Springs.Collector.CurrentSelection - Gets the currently selected elements. Connect a boolean switch to refresh the selection., Springs.Collector.ElementsInView - Selects all elements visible in the input view., Springs.Collector.ElementSketch - Get the actual sketch lines of a sketch based element (floor, ceiling, modified wall, etc.) . You can optionally fetch the matching model curves, however this might prove comptationally heavy on larger data sets., Springs.Collector.FamilyInstances - Collects placed family instance elements from the document that match the name. Partially mathing elements are collected as well. If no matches are found, a list of all isntance names will be output., Springs.Collector.FamilyTypes - Collects non-system family types that fully match or partially match the provided names. If no matches are found, a list of all type names will be output., Springs.Collector.FloorTypes - Collects Floor types by name., Springs.Collector.LinkedInstanceElements - Extract elements by category from the selected linked instances. The transform vector can be used to get the exact location of the elements in the local file, Springs.Collector.Revisions - Collects all revision clouds from a specific date., Springs.Collector.Sheets - Search for sheets by either their name or their number. Use a false boolean switch to search by number., Springs.Collector.Views - Search for views based on naming. You can choose to either include or exclude schedules. Use the sheet collector for sheets., Springs.Collector.WallTypes - Collects wall types by name., Springs.Color2Decimal - Converts a Dynamo colour its Revit equivalent  decimal value., Springs.Curve.Offset+ - Offsets a curve towards the specified point, Springs.CurveLoop.Simplify - Attempts to simplify an open or a closed curve loop by connecting straight separate line segments into a single line., Springs.Decimal2Color - Converts a revit colour decimal value to its Dynamo equivalent., Springs.Dictionary.ByKeysValues - Dictionaries are an incredibly powerful tool for making associative sets between two equal length lists. The first list must be of unique strings (or numbers) and will be the key and the second list will be the matching values (it can be made up of geometry, elements, even other lists)\r\nThe search keys list will provide the corresponding value to the input key., Springs.DirectShape.ByGeometry - Convert the input geometry to DirectShape element inside the Revit document.  It supports solids or surfaces.It is based on an alternative process that uses a SAT import and can produce smooth surfaces. Each created DS will have a unique type. Make sure that each input geometry has a unique name. You can either feed a single category for all geometries or a unique category for each geometry - the node's lacing is set to longest by default., Springs.DirectShape.Transform - Transforms the typed DirectShape element from the identity coordinate system to the input coordinate system(s), in a manner similar to Dynamo's Geometry.Transform node., Springs.DirectShape.Translate - Copy the input DirectShape element with the help of a translation vector, similarly to the Geometry.Translate node. This method should prove more efficient than Element.Copy, Springs.Doc.ActiveView - Selects the current document's active view. Supports more view types than the built-in option.\r\nWill be depreciated once the bult in node works with all plan types., Springs.Doc.DeleteElements - Attempts to delete the input list of elements from the active Revit document.The node returns the number of successfully deleted elements and their Ids as a string. Carefully observe the deleted elements count. It may be greater than the input list because hosted elements or tags will be deleted as well. If an element in the list can not be deleted (for example last revision or last view), the whole list will fail to be deleted., Springs.Element.IsCut - Tests if the element is being cut by any void instances. If any cuts exist all cutting elements will be provided., Springs.Element.IsCutting - Tests if the input element (or elements) is a void cut and if it is cutting any elements. In such cases, the cut elements will be provided., Springs.Element.RemoveVoidCut - Removes the void cut between the input elements, if such exists., Springs.Element.SetLocation - Attempts to modify the location of the input element. This can effectively add as a move comand in Revit. Works for both line based and point based elements., Springs.ElementsOfCategory - Same as the built in \"All Elements of Category\" but can act as a function object and does not get refreshed automatically., Springs.ElementType.Duplicate - Create duplicate element types. If the type exists, it will be appended instead., Springs.ErrorReport.Parse - Process a Revit error report (HTML file) and extract the error types, all affected elements and the total number of errors. If you are executing from a document different than the one the error report belongs to, be sure to set \"fetch_elements\" to false., Springs.FamilyInstance.ByFacePoints - Places instances on the input face oriented to the face's U tangent and the global Z axis., Springs.FamilyInstance.ByGeometry - You must provide a valid family template path that will be used for all input geometry objects. The project units(and not the templates) will be used to determine the size of the output geometry.\r\nThe provided category will be used only if the family template supports it. If not, the default template category will be used instead.\r\nLikewise, the family material(provided as a string) will be set only if a material with that name exists in the template. If not, the default material will be used instead (\"By Category\").\r\nFor void cuts, the material settings will be ignored.\r\nThe Subcategory name is an optional input. If you'd like to skip assigning a Subcategory to any new instance, simply use null.\r\nThe node expects a unique family name for each geometry object. The rest of the input lists will be processed as if the node lacing is set to longest., Springs.Feet2Fraction - Converts a decimal foot value to a fractional foot/inch string., Springs.File.Size - Checks the file size. Provide a file path as a string., Springs.Filter.ByCategoryName - Filters the input elements by their category name. You can input multiple category names., Springs.Filter.ByClassName - Filters a list of objects by the object's class name. Note that Dynamo elements belong to different classes than their Revit counterparts. Use the Object.Class node to check an object's class., Springs.Filter.BySelection - Check the items that you'd like to filter in.  Unchecked items will be sent to the out list. The optional names input will override the object representation., Springs.FloorOpening.ByCurves - Create hosted floor opeinngs through the input floors. The second input is a list of sub-lists of the boundary curves., Springs.Form.ByGeometry - Convert the input geometry to a Revit Form object. Forms can exist only in the family environment. You can convert complicated solids or surfaces directly into forms. A form can act as a void. Provide either one true boolean value to convert a form into a void. The node's lacing is set to longest by default., Springs.Fraction2Feet - Converts a fractioned feet /inch string value into a decimal foot value., Springs.Geometry.Extents - Gets the dimensions of the geometry's bounding box., Springs.Geometry.GroupByDistance - Splits the list of curves into groups if the distance between them is lesser than the provided margin., Springs.Geometry.SplitRecursively - Splits a surface or a solid recursively, using the resulting reduced geometry for every consecutive split. Select a point or another geometry to control the direction of the split., Springs.HostedInstance.ByPoints - Creates hosted family instances(doors/windows) at the specified points. You can feed either a single family type or a unique type for each instance., Springs.InterferenceCheck.Parse - Process a Revit interference check (HTML file) and extract the interference categories, all affected elements and the total number of clashes. If you are executing from a document different than the one the error report belongs to, be sure to set \"fetch_elements\" to false., Springs.Line.StraightenXY - Checks a line's end points for irregularities and corrects them if they are at or below the specified margin. The default margin is 1/5000 of the curve length, which is conservative., Springs.Line.StraightenZ - Checks a line's end points for irregularities in  the Z axis and corrects them if they are at or below the specified margin. The default margin is 1/2000 of the curve length, which is conservative., Springs.LineLoop.Merge - Attempts to join lines into a single chain of joined curves. The node returns the new lines as a chain and with the original order. The success outputs returns the success of the execution as a true/false boolean., Springs.List.DragDropReorder - Press and hold on an item to move it up or down the list. To confirm and close the window, select \"Save Order\". The optional names input will override the object representation., Springs.List.DropDown - Selects one list item by a drop-down combo box. The optional names input will override the object representation., Springs.List.DropFirstLast - Removes the first and last items from the list, Springs.List.EveryOther - Useful for when you want to combine an item on the list with every other item on the list. For example in list {1,2,3} , \"2\" will be paired up only with \"1\" and \"3\" and will not be paired up with itself., Springs.List.GetEvenOdd - Gets even indices from the list., Springs.List.MergeByBoolMask - Merge two lists by a boolean mask list. The true count in the mask should be the same as the length of the true list and vice versa for the false list., Springs.List.Randomise&Divide - Shiffles the input list and divides it into sub-lists based on ratios(1/4 + 1/2 + 1/4 will give you three lists split accordingly) The smalest ratio will always be 1 / the list length and the largest ratio will be 1. A seed input can shuffle the list further., Springs.List.Split - Splits a list at the desired length, Springs.List.Subpairs - Pair up each list item with the next one and drop the list item., Springs.Ln2Str - Serilize a geometry line to a string for use in Revit parameters, Springs.Math.AlmostEqual - Checks if a number is almost equal to a value with a specified tollerance., Springs.Mesh.ToPolySurface - Converts a Dynamo mesh to a polysurface. Uses multithreading - optimized for 4 cores., Springs.Mesh.ToToolkitMesh - Converts a Dynamo mesh to a toolkit mesh. You obviously need to have the appropriate version of the mesh toolkit package downloaded first., Springs.N-hedron.ByOriginVector - Creates a multi-sided poyhedron with defined side length and total height., Springs.NullAllIndicesOf - list all of the indices of a list that match the specified value. Capable of handling null values, part of the SmartCopyMonitor workflow., Springs.NullGetParameter - Similar to the built in node.Capable of handling null values, part of the SmartCopyMonitor workflow., Springs.NullIndexOf - Similar to the bult-in node but provides a null value instead of -1 of failure. Part of the SmartCopyMonitor workflow., Springs.NullReorder - Simiar to the built-in function with the difference that it can handle null indices. Part of the SmartCopyMonitor workflow., Springs.NullSetDifference - Similar to the built in node, with a built-in safety for null values. Part of the SmartCopyMonitor workflow., Springs.NullSetParameter - Similar to the built-in function but with the ability to handle null values. Part of the SmartCopyMon workflow., Springs.Number.ToString - Converts the input number(s) to string. Can process lists., Springs.PlanarFace.FixDomain - Corrects the surface domain of a 3 or 4 point planar face extracted from Revit., Springs.Point.PullOntoPlane - Pulls (projects) the point onto the input plane, following the plane normal., Springs.Points.ConvexHull2D - Computes the XY convex hull of a given set of points based on the monotone chain algorithm., Springs.PolyCurve.Chamfer - Symmetrically chamfers the corners of the polycurve by the designated distance, Springs.Polygon.ContainmentTest+ - A less accurate method that should perform faster than the built-in node for large data sets., Springs.Pt2Str - Serilize a geometry point to a string for use in Revit parameters, Springs.SelectEdges - Select multiple edges from inside the Revit UI. Be sure to press \"Finish\" once done. You can use a Boolean toggle to refresh your selection., Springs.SelectElements(ordered) - Select multiple elements from the Revit document in the desired order. Hit ESC to stop picking. To refresh the node, connect a boolean switch node., Springs.SelectFaces+ - Select multiple faces from inside the Revit UI. Be sure to press \"Finish\" once done. Unlike the built-in node, face references of instances will be added sucessfully and you'l get the pick points. You can use a Boolean toggle to refresh your selection., Springs.SelectInRevit - Selects the input elements inside the Revit UI., Springs.SelectLinkedElement - Select the linked instance first, followed by the element. If your selection fails, just press escape.\r\nTo refresh the node, connect a boolean switch node., Springs.SelectLinkedElements(ordered) - Select the linked instance first. Then select multiple elements from the Revit document in the desired order. Hit ESC to stop picking. To refresh the node, connect a boolean switch node., Springs.SelectLinkedElements - Select the linked instance first, followed by the elements. To finish the selection, press Finish. If your selection fails, just press escape or Cancel.\r\nTo refresh the node, connect a boolean switch node., Springs.SelectLinkedFace - Select the linked instance first, followed by the face. If your selection fails, just press escape.\r\nTo refresh the node, connect a boolean switch node., Springs.Shaft.ByCurves - Creates a shaft opening. The top level MUST be higher than the base level for a successful execution. You can either provide one base and top level for all shafts or have unique levels for each shaft instance., Springs.Sheet.Views+ - Extracts all views and schedules (minus the revision schedule) placed on the input sheet (or sheets).\r\nWill be depreciated once the bult in node works with all plan types., Springs.Star.ByCenterRadiusRays - Fun little node to create star shapes., Springs.Str2Ln - De-serilize a Revit parameter string into a geometric line., Springs.Str2Pt - De-serilize a Revit parameter string into a geometric point., Springs.ViewSet.ByViewsName - Creates a set of views(or sheets) for printing. If the set exists, set Overwrite to true to replace it., Springs.Watch+ - This node that serializes the input information and presents it in a resizable text window.","engine_metadata":"","engine_version":"1.1.0.2094","created":"2016-11-29T07:33:35.822Z","full_dependency_versions":["110.0.2"],"full_dependency_ids":[{"_id":"56077cf3662bf0e9080001ea","name":"spring nodes"}],"direct_dependency_versions":[],"direct_dependency_ids":[],"change_log":"","version":"110.0.2"},{"_id":"588ee826ca6a5edb650000d9","contains_binaries":false,"node_libraries":[],"url_with_deps":"","url":"https://s3.amazonaws.com/greg-pkgs-prod/7334ce06-09cd-471c-a290-51774db17bf8gregPkg501.zip","contents":"Springs.AdaptiveFamily.ByFacetedGeometry - Genearate a new eight point adaptive component family type from any solid or polysurface consisting of planar faces. Faces with openigs are not supported., Springs.AreaPlan.ByLevelName - Creates an area plan at the designated levels. Each new view needs a name. An area scheme must first be activated before it can be used. To activate a scheme, place one view of that type in the project(you can then delete it).  If a view with the same scheme and name exists, you'll get a null instead., Springs.Beams.FixExtents - Detects all beams from the input list with broken extents(actual length - cut length <  margin) and attemts to correct them., Springs.BoundingBox.MidPoint - Fetches the mid point of the bounding box., Springs.BoundingBox.Scale - Scales the bounding box in three dimensions according to it's center., Springs.BrepShape.ByGeometry - Convert the input geometry to DirectShape element inside the Revit document.  Works only in Revit 2017 and later. Usies the more advanced BrepBuilder. It supports solids or surfaces, however periodic faces like spheres, cylinders and cones are not supported. Each created DS will have a unique type. Make sure that each input geometry has a unique name. You can either feed a single category and material for all geometries or a unique one for each geometry - the node's lacing is set to longest by default. The default category is Generic Model., Springs.ClosedCurve.Offset+ - Offsets a curve both ways and correctly differenciates the external and internal offset. If an offset goes beyond the curve's bounds, the result will fail and a null value will be appended instead. Also works for convex curves like arcs., Springs.Collector.CurrentSelection - Gets the currently selected elements. Connect a boolean switch to refresh the selection., Springs.Collector.ElementsInView - Selects all elements visible in the input view., Springs.Collector.ElementSketch - Get the actual sketch lines of a sketch based element (floor, ceiling, modified wall, etc.) . You can optionally fetch the matching model curves, however this might prove comptationally heavy on larger data sets., Springs.Collector.FamilyInstances - Collects placed family instance elements from the document that match the name. Partially mathing elements are collected as well. If no matches are found, a list of all isntance names will be output., Springs.Collector.FamilyTypes - Collects non-system family types that fully match or partially match the provided names. If no matches are found, a list of all type names will be output., Springs.Collector.FloorTypes - Collects Floor types by name., Springs.Collector.LinkedInstanceElements - Extract elements by category from the selected linked instances. The transform vector can be used to get the exact location of the elements in the local file, Springs.Collector.Revisions - Collects all revision clouds from a specific date., Springs.Collector.Sheets - Search for sheets by either their name or their number. Use a false boolean switch to search by number., Springs.Collector.Views - Search for views based on naming. You can choose to either include or exclude schedules. Use the sheet collector for sheets., Springs.Collector.WallTypes - Collects wall types by name., Springs.Color2Decimal - Converts a Dynamo colour its Revit equivalent  decimal value., Springs.Curve.Offset+ - Offsets a curve towards the specified point, Springs.CurveLoop.Simplify - Attempts to simplify an open or a closed curve loop by connecting straight separate line segments into a single line., Springs.Decimal2Color - Converts a revit colour decimal value to its Dynamo equivalent., Springs.Dictionary.ByKeysValues - Dictionaries are an incredibly powerful tool for making associative sets between two equal length lists. The first list must be of unique strings (or numbers) and will be the key and the second list will be the matching values (it can be made up of geometry, elements, even other lists)\r\nThe search keys list will provide the corresponding value to the input key., Springs.DirectShape.ByGeometry - Convert the input geometry to DirectShape element inside the Revit document.  It supports solids or surfaces.It is based on an alternative process that uses a SAT import and can produce smooth surfaces. Each created DS will have a unique type. Make sure that each input geometry has a unique name. You can either feed a single category for all geometries or a unique category for each geometry - the node's lacing is set to longest by default., Springs.DirectShape.Transform - Transforms the typed DirectShape element from the identity coordinate system to the input coordinate system(s), in a manner similar to Dynamo's Geometry.Transform node., Springs.DirectShape.Translate - Copy the input DirectShape element with the help of a translation vector, similarly to the Geometry.Translate node. This method should prove more efficient than Element.Copy, Springs.Doc.ActiveView - Selects the current document's active view. Supports more view types than the built-in option.\r\nWill be depreciated once the bult in node works with all plan types., Springs.Doc.DeleteElements - Attempts to delete the input list of elements from the active Revit document.The node returns the number of successfully deleted elements and their Ids as a string. Carefully observe the deleted elements count. It may be greater than the input list because hosted elements or tags will be deleted as well. If an element in the list can not be deleted (for example last revision or last view), the whole list will fail to be deleted., Springs.Element.IsCut - Tests if the element is being cut by any void instances. If any cuts exist all cutting elements will be provided., Springs.Element.IsCutting - Tests if the input element (or elements) is a void cut and if it is cutting any elements. In such cases, the cut elements will be provided., Springs.Element.RemoveVoidCut - Removes the void cut between the input elements, if such exists., Springs.Element.SetLocation - Attempts to modify the location of the input element. This can effectively add as a move comand in Revit. Works for both line based and point based elements., Springs.Elements.GroupByDistance - You'll need two equal length lists of geometry objects and elements. Splits the list of elements into groups if the distance between the coresponding geometry is less than the provided margin., Springs.ElementsOfCategory - Same as the built in \"All Elements of Category\" but can act as a function object and does not get refreshed automatically., Springs.ElementType.Duplicate - Create duplicate element types. If the type exists, it will be appended instead., Springs.ErrorReport.Parse - Process a Revit error report (HTML file) and extract the error types, all affected elements and the total number of errors. If you are executing from a document different than the one the error report belongs to, be sure to set \"fetch_elements\" to false., Springs.FamilyInstance.ByFacePoints - Places instances on the input face oriented to the face's U tangent and the global Z axis., Springs.FamilyInstance.ByGeometry - You must provide a valid family template path that will be used for all input geometry objects. The project units(and not the templates) will be used to determine the size of the output geometry.\r\nThe provided category will be used only if the family template supports it. If not, the default template category will be used instead.\r\nLikewise, the family material(provided as a string) will be set only if a material with that name exists in the template. If not, the default material will be used instead (\"By Category\").\r\nFor void cuts, the material settings will be ignored.\r\nThe Subcategory name is an optional input. If you'd like to skip assigning a Subcategory to any new instance, simply use null.\r\nThe node expects a unique family name for each geometry object. The rest of the input lists will be processed as if the node lacing is set to longest., Springs.Feet2Fraction - Converts a decimal foot value to a fractional foot/inch string., Springs.File.Size - Checks the file size. Provide a file path as a string., Springs.Filter.ByCategoryName - Filters the input elements by their category name. You can input multiple category names., Springs.Filter.ByClassName - Filters a list of objects by the object's class name. Note that Dynamo elements belong to different classes than their Revit counterparts. Use the Object.Class node to check an object's class., Springs.Filter.BySelection - Check the items that you'd like to filter in.  Unchecked items will be sent to the out list. The optional names input will override the object representation., Springs.FloorOpening.ByCurves - Create hosted floor opeinngs through the input floors. The second input is a list of sub-lists of the boundary curves., Springs.Form.ByGeometry - Convert the input geometry to a Revit Form object. Forms can exist only in the family environment. You can convert complicated solids or surfaces directly into forms. A form can act as a void. Provide either one true boolean value to convert a form into a void. The node's lacing is set to longest by default., Springs.Fraction2Feet - Converts a fractioned feet /inch string value into a decimal foot value., Springs.Geometry.Extents - Gets the dimensions of the geometry's bounding box., Springs.Geometry.GroupByDistance - Splits the list of geometry elements into groups if the distance between them is less than the provided margin., Springs.Geometry.SplitRecursively - Splits a surface or a solid recursively, using the resulting reduced geometry for every consecutive split. Select a point or another geometry to control the direction of the split., Springs.HostedInstance.ByPoints - Creates hosted family instances(doors/windows) at the specified points. You can feed either a single family type or a unique type for each instance., Springs.InterferenceCheck.Parse - Process a Revit interference check (HTML file) and extract the interference categories, all affected elements and the total number of clashes. If you are executing from a document different than the one the error report belongs to, be sure to set \"fetch_elements\" to false., Springs.Line.StraightenXY - Checks a line's end points for irregularities and corrects them if they are at or below the specified margin. The default margin is 1/5000 of the curve length, which is conservative., Springs.Line.StraightenZ - Checks a line's end points for irregularities in  the Z axis and corrects them if they are at or below the specified margin. The default margin is 1/2000 of the curve length, which is conservative., Springs.LineLoop.Merge - Attempts to join lines into a single chain of joined curves. The node returns the new lines as a chain and with the original order. The success outputs returns the success of the execution as a true/false boolean., Springs.List.DragDropReorder - Press and hold on an item to move it up or down the list. To confirm and close the window, select \"Save Order\". The optional names input will override the object representation., Springs.List.DropDown - Selects one list item by a drop-down combo box. The optional names input will override the object representation., Springs.List.DropFirstLast - Removes the first and last items from the list, Springs.List.EveryOther - Useful for when you want to combine an item on the list with every other item on the list. For example in list {1,2,3} , \"2\" will be paired up only with \"1\" and \"3\" and will not be paired up with itself., Springs.List.GetEvenOdd - Gets the even and odd indices from the list., Springs.List.MergeByBoolMask - Merge two lists by a boolean mask list. The true count in the mask should be the same as the length of the true list and vice versa for the false list., Springs.List.Randomise&Divide - Shiffles the input list and divides it into sub-lists based on ratios(1/4 + 1/2 + 1/4 will give you three lists split accordingly) The smalest ratio will always be 1 / the list length and the largest ratio will be 1. A seed input can shuffle the list further., Springs.List.Split - Splits a list at the desired length, Springs.List.Subpairs - Pair up each list item with the next one and drop the list item., Springs.Ln2Str - Serilize a geometry line to a string for use in Revit parameters, Springs.Math.AlmostEqual - Checks if a number is almost equal to a value with a specified tollerance., Springs.Mesh.ToPolySurface - Converts a Dynamo mesh to a polysurface. Uses multithreading - optimized for 4 cores., Springs.Mesh.ToToolkitMesh - Converts a Dynamo mesh to a toolkit mesh. You obviously need to have the appropriate version of the mesh toolkit package downloaded first., Springs.N-hedron.ByOriginVector - Creates a multi-sided poyhedron with defined side length and total height., Springs.NullAllIndicesOf - list all of the indices of a list that match the specified value. Capable of handling null values, part of the SmartCopyMonitor workflow., Springs.NullGetParameter - Similar to the built in node.Capable of handling null values, part of the SmartCopyMonitor workflow., Springs.NullIndexOf - Similar to the bult-in node but provides a null value instead of -1 of failure. Part of the SmartCopyMonitor workflow., Springs.NullReorder - Simiar to the built-in function with the difference that it can handle null indices. Part of the SmartCopyMonitor workflow., Springs.NullSetDifference - Similar to the built in node, with a built-in safety for null values. Part of the SmartCopyMonitor workflow., Springs.NullSetParameter - Similar to the built-in function but with the ability to handle null values. Part of the SmartCopyMon workflow., Springs.Number.ToString - Converts the input number(s) to string. Can process lists., Springs.PlanarFace.FixDomain - Corrects the surface domain of a 3 or 4 point planar face extracted from Revit., Springs.Point.PullOntoPlane - Pulls (projects) the point onto the input plane, following the plane normal., Springs.Points.ConvexHull2D - Computes the XY convex hull of a given set of points based on the monotone chain algorithm., Points.PruneDuplicates+ - An alternative to the built in node, that performs faster at the price of loosing the order of the points. All floating point valies are rounded to the nearest 4 decimal points. You can optionally remove duplicate Z values by setting \"keepDuplicateZ\" to false., Springs.PolyCurve.Chamfer - Symmetrically chamfers the corners of the polycurve by the designated distance, Springs.Polygon.ContainmentTest+ - A less accurate method that should perform faster than the built-in node for large data sets., Springs.Pt2Str - Serilize a geometry point to a string for use in Revit parameters, Springs.SelectEdges - Select multiple edges from inside the Revit UI. Be sure to press \"Finish\" once done. You can use a Boolean toggle to refresh your selection., Springs.SelectElements(ordered) - Select multiple elements from the Revit document in the desired order. Hit ESC to stop picking. To refresh the node, connect a boolean switch node., Springs.SelectFaces+ - Select multiple faces from inside the Revit UI. Be sure to press \"Finish\" once done. Unlike the built-in node, face references of instances will be added sucessfully and you'l get the pick points. You can use a Boolean toggle to refresh your selection., Springs.SelectInRevit - Selects the input elements inside the Revit UI., Springs.SelectLinkedElement - Select the linked instance first, followed by the element. If your selection fails, just press escape.\r\nTo refresh the node, connect a boolean switch node., Springs.SelectLinkedElements(ordered) - Select the linked instance first. Then select multiple elements from the Revit document in the desired order. Hit ESC to stop picking. To refresh the node, connect a boolean switch node., Springs.SelectLinkedElements - Select the linked instance first, followed by the elements. To finish the selection, press Finish. If your selection fails, just press escape or Cancel.\r\nTo refresh the node, connect a boolean switch node., Springs.SelectLinkedFace - Select the linked instance first, followed by the face. If your selection fails, just press escape.\r\nTo refresh the node, connect a boolean switch node., Springs.Shaft.ByCurves - Creates a shaft opening. The top level MUST be higher than the base level for a successful execution. You can either provide one base and top level for all shafts or have unique levels for each shaft instance., Springs.Sheet.Views+ - Extracts all views and schedules (minus the revision schedule) placed on the input sheet (or sheets).\r\nWill be depreciated once the bult in node works with all plan types., Springs.Star.ByCenterRadiusRays - Fun little node to create star shapes., Springs.Str2Ln - De-serilize a Revit parameter string into a geometric line., Springs.Str2Pt - De-serilize a Revit parameter string into a geometric point., Springs.ToolkitMeshToMesh - Attempts to convert a toolkit mesh to a Dynamo mesh. You obviously need to have the appropriate version of the mesh toolkit package downloaded first., Springs.ViewSet.ByViewsName - Creates a set of views(or sheets) for printing. If the set exists, set Overwrite to true to replace it., Springs.Watch+ - This node that serializes the input information and presents it in a resizable text window.","engine_metadata":"","engine_version":"1.2.1.3083","created":"2017-01-30T07:15:50.135Z","full_dependency_versions":["110.1.0"],"full_dependency_ids":[{"_id":"56077cf3662bf0e9080001ea","name":"spring nodes"}],"direct_dependency_versions":[],"direct_dependency_ids":[],"change_log":"","version":"110.1.0"},{"_id":"58a963bc61de68010800009e","contains_binaries":false,"node_libraries":[],"url_with_deps":"","url":"https://s3.amazonaws.com/greg-pkgs-prod/f8e0a3cf-96cd-4a7f-a375-890cd041b566gregPkg299.zip","contents":"Springs.AdaptiveFamily.ByFacetedGeometry - Genearate a new eight point adaptive component family type from any solid or polysurface consisting of planar faces. Faces with openigs are not supported., Springs.AreaPlan.ByLevelName - Creates an area plan at the designated levels. Each new view needs a name. An area scheme must first be activated before it can be used. To activate a scheme, place one view of that type in the project(you can then delete it).  If a view with the same scheme and name exists, you'll get a null instead., Springs.Beams.FixExtents - Detects all beams from the input list with broken extents(actual length - cut length <  margin) and attemts to correct them., Springs.BoundingBox.MidPoint - Fetches the mid point of the bounding box., Springs.BoundingBox.Scale - Scales the bounding box in three dimensions according to it's center., Springs.BrepShape.ByGeometry - Convert the input geometry to DirectShape element inside the Revit document.  Works only in Revit 2017 and later. Usies the more advanced BrepBuilder. It supports solids or surfaces, however periodic faces like spheres, cylinders and cones are not supported. Each created DS will have a unique type. Make sure that each input geometry has a unique name. You can either feed a single category and material for all geometries or a unique one for each geometry - the node's lacing is set to longest by default. The default category is Generic Model., Springs.ClosedCurve.Offset+ - Offsets a curve both ways and correctly differenciates the external and internal offset. If an offset goes beyond the curve's bounds, the result will fail and a null value will be appended instead. Also works for convex curves like arcs., Springs.Collector.CurrentSelection - Gets the currently selected elements. Connect a boolean switch to refresh the selection., Springs.Collector.ElementsInView - Selects all elements visible in the input view., Springs.Collector.ElementSketch - Get the actual sketch lines of a sketch based element (floor, ceiling, modified wall, etc.) . You can optionally fetch the matching model curves, however this might prove comptationally heavy on larger data sets., Springs.Collector.FamilyInstances - Collects placed family instance elements from the document that match the name. Partially mathing elements are collected as well. If no matches are found, a list of all isntance names will be output., Springs.Collector.FamilyTypes - Collects non-system family types that fully match or partially match the provided names. If no matches are found, a list of all type names will be output., Springs.Collector.FloorTypes - Collects Floor types by name., Springs.Collector.LinkedInstanceElements - Extract elements by category from the selected linked instances. The transform vector can be used to get the exact location of the elements in the local file, Springs.Collector.Revisions - Collects all revision clouds from a specific date., Springs.Collector.Sheets - Search for sheets by either their name or their number. Use a false boolean switch to search by number., Springs.Collector.Views - Search for views based on naming. You can choose to either include or exclude schedules. Use the sheet collector for sheets., Springs.Collector.WallTypes - Collects wall types by name., Springs.Color2Decimal - Converts a Dynamo colour its Revit equivalent  decimal value., Springs.Curve.Offset+ - Offsets a curve towards the specified point, Springs.CurveLoop.Simplify - Attempts to simplify an open or a closed curve loop by connecting straight separate line segments into a single line., Springs.Decimal2Color - Converts a revit colour decimal value to its Dynamo equivalent., Springs.Delaunay2D.ByPoints - Create a delaunay triangulation of a set of planar points. You can get the result as points or as lines., Springs.Dictionary.ByKeysValues - Dictionaries are an incredibly powerful tool for making associative sets between two equal length lists. The first list must be of unique strings (or numbers) and will be the key and the second list will be the matching values (it can be made up of geometry, elements, even other lists)\r\nThe search keys list will provide the corresponding value to the input key., Springs.DirectShape.ByGeometry - Convert the input geometry to DirectShape element inside the Revit document.  It supports solids or surfaces.It is based on an alternative process that uses a SAT import and can produce smooth surfaces. Each created DS will have a unique type. Make sure that each input geometry has a unique name. You can either feed a single category for all geometries or a unique category for each geometry - the node's lacing is set to longest by default., Springs.DirectShape.Transform - Transforms the typed DirectShape element from the identity coordinate system to the input coordinate system(s), in a manner similar to Dynamo's Geometry.Transform node., Springs.DirectShape.Translate - Copy the input DirectShape element with the help of a translation vector, similarly to the Geometry.Translate node. This method should prove more efficient than Element.Copy, Springs.Doc.ActiveView - Selects the current document's active view. Supports more view types than the built-in option.\r\nWill be depreciated once the bult in node works with all plan types., Springs.Doc.DeleteElements - Attempts to delete the input list of elements from the active Revit document.The node returns the number of successfully deleted elements and their Ids as a string. Carefully observe the deleted elements count. It may be greater than the input list because hosted elements or tags will be deleted as well. If an element in the list can not be deleted (for example last revision or last view), the whole list will fail to be deleted., Springs.Element.IsCut - Tests if the element is being cut by any void instances. If any cuts exist all cutting elements will be provided., Springs.Element.IsCutting - Tests if the input element (or elements) is a void cut and if it is cutting any elements. In such cases, the cut elements will be provided., Springs.Element.RemoveVoidCut - Removes the void cut between the input elements, if such exists., Springs.Element.SetLocation - Attempts to modify the location of the input element. This can effectively add as a move comand in Revit. Works for both line based and point based elements., Springs.Elements.GroupByDistance - You'll need two equal length lists of geometry objects and elements. Splits the list of elements into groups if the distance between the coresponding geometry is less than the provided margin., Springs.ElementsOfCategory - Same as the built in \"All Elements of Category\" but can act as a function object and does not get refreshed automatically., Springs.ElementType.Duplicate - Create duplicate element types. If the type exists, it will be appended instead., Springs.ErrorReport.Parse - Process a Revit error report (HTML file) and extract the error types, all affected elements and the total number of errors. If you are executing from a document different than the one the error report belongs to, be sure to set \"fetch_elements\" to false., Springs.FamilyInstance.ByFacePoints - Places instances on the input face oriented to the face's U tangent and the global Z axis., Springs.FamilyInstance.ByGeometry - You must provide a valid family template path that will be used for all input geometry objects. The project units(and not the templates) will be used to determine the size of the output geometry.\r\nThe provided category will be used only if the family template supports it. If not, the default template category will be used instead.\r\nLikewise, the family material(provided as a string) will be set only if a material with that name exists in the template. If not, the default material will be used instead (\"By Category\").\r\nFor void cuts, the material settings will be ignored.\r\nThe Subcategory name is an optional input. If you'd like to skip assigning a Subcategory to any new instance, simply use null.\r\nThe node expects a unique family name for each geometry object. The rest of the input lists will be processed as if the node lacing is set to longest., Springs.Feet2Fraction - Converts a decimal foot value to a fractional foot/inch string., Springs.File.Size - Checks the file size. Provide a file path as a string., Springs.Filter.ByCategoryName - Filters the input elements by their category name. You can input multiple category names., Springs.Filter.ByClassName - Filters a list of objects by the object's class name. Note that Dynamo elements belong to different classes than their Revit counterparts. Use the Object.Class node to check an object's class., Springs.Filter.BySelection - Check the items that you'd like to filter in.  Unchecked items will be sent to the out list. The optional names input will override the object representation., Springs.FloorOpening.ByCurves - Create hosted floor opeinngs through the input floors. The second input is a list of sub-lists of the boundary curves., Springs.Form.ByGeometry - Convert the input geometry to a Revit Form object. Forms can exist only in the family environment. You can convert complicated solids or surfaces directly into forms. A form can act as a void. Provide either one true boolean value to convert a form into a void. The node's lacing is set to longest by default., Springs.Fraction2Feet - Converts a fractioned feet /inch string value into a decimal foot value., Springs.Geometry.Extents - Gets the dimensions of the geometry's bounding box., Springs.Geometry.GroupByDistance - Splits the list of geometry elements into groups if the distance between them is less than the provided margin., Springs.Geometry.SplitRecursively - Splits a surface or a solid recursively, using the resulting reduced geometry for every consecutive split. Select a point or another geometry to control the direction of the split., Springs.HostedInstance.ByPoints - Creates hosted family instances(doors/windows) at the specified points. You can feed either a single family type or a unique type for each instance., Springs.InterferenceCheck.Parse - Process a Revit interference check (HTML file) and extract the interference categories, all affected elements and the total number of clashes. If you are executing from a document different than the one the error report belongs to, be sure to set \"fetch_elements\" to false., Springs.Line.StraightenXY - Checks a line's end points for irregularities and corrects them if they are at or below the specified margin. The default margin is 1/5000 of the curve length, which is conservative., Springs.Line.StraightenZ - Checks a line's end points for irregularities in  the Z axis and corrects them if they are at or below the specified margin. The default margin is 1/2000 of the curve length, which is conservative., Springs.LineLoop.Merge - Attempts to join lines into a single chain of joined curves. The node returns the new lines as a chain and with the original order. The success outputs returns the success of the execution as a true/false boolean., Springs.List.DragDropReorder - Press and hold on an item to move it up or down the list. To confirm and close the window, select \"Save Order\". The optional names input will override the object representation., Springs.List.DropDown - Selects one list item by a drop-down combo box. The optional names input will override the object representation., Springs.List.DropFirstLast - Removes the first and last items from the list, Springs.List.EveryOther - Useful for when you want to combine an item on the list with every other item on the list. For example in list {1,2,3} , \"2\" will be paired up only with \"1\" and \"3\" and will not be paired up with itself., Springs.List.GetEvenOdd - Gets the even and odd indices from the list., Springs.List.MergeByBoolMask - Merge two lists by a boolean mask list. The true count in the mask should be the same as the length of the true list and vice versa for the false list., Springs.List.Randomise&Divide - Shiffles the input list and divides it into sub-lists based on ratios(1/4 + 1/2 + 1/4 will give you three lists split accordingly) The smalest ratio will always be 1 / the list length and the largest ratio will be 1. A seed input can shuffle the list further., Springs.List.Split - Splits a list at the desired length, Springs.List.Subpairs - Pair up each list item with the next one and drop the list item., Springs.Ln2Str - Serilize a geometry line to a string for use in Revit parameters, Springs.Math.AlmostEqual - Checks if a number is almost equal to a value with a specified tollerance., Springs.Mesh.ToPolySurface - Converts a Dynamo mesh to a polysurface. Uses multithreading - optimized for 4 cores., Springs.Mesh.ToToolkitMesh - Converts a Dynamo mesh to a toolkit mesh. You obviously need to have the appropriate version of the mesh toolkit package downloaded first., Springs.N-hedron.ByOriginVector - Creates a multi-sided poyhedron with defined side length and total height., Springs.NullAllIndicesOf - list all of the indices of a list that match the specified value. Capable of handling null values, part of the SmartCopyMonitor workflow., Springs.NullGetParameter - Similar to the built in node.Capable of handling null values, part of the SmartCopyMonitor workflow., Springs.NullIndexOf - Similar to the bult-in node but provides a null value instead of -1 of failure. Part of the SmartCopyMonitor workflow., Springs.NullReorder - Simiar to the built-in function with the difference that it can handle null indices. Part of the SmartCopyMonitor workflow., Springs.NullSetDifference - Similar to the built in node, with a built-in safety for null values. Part of the SmartCopyMonitor workflow., Springs.NullSetParameter - Similar to the built-in function but with the ability to handle null values. Part of the SmartCopyMon workflow., Springs.Number.ToString - Converts the input number(s) to string. Can process lists., Springs.PlanarFace.FixDomain - Corrects the surface domain of a 3 or 4 point planar face extracted from Revit., Springs.Point.PullOntoPlane - Pulls (projects) the point onto the input plane, following the plane normal., Springs.Points.ConvexHull2D - Computes the XY convex hull of a given set of points based on the monotone chain algorithm., Springs.Points.PruneDuplicates+ - An alternative to the built in node, that performs faster at the price of loosing the order of the points. All floating point valies are rounded to the nearest 4 decimal points. You can optionally remove duplicate Z values by setting \"keepDuplicateZ\" to false., Springs.PolyCurve.Chamfer - Symmetrically chamfers the corners of the polycurve by the designated distance, Springs.Polygon.2DArea - Returns the planar area of the input polygon(s)., Springs.Polygon.ContainmentTest+ - A less accurate method that should perform faster than the built-in node for large data sets., Springs.Pt2Str - Serilize a geometry point to a string for use in Revit parameters, Springs.SelectEdges - Select multiple edges from inside the Revit UI. Be sure to press \"Finish\" once done. You can use a Boolean toggle to refresh your selection., Springs.SelectElements(ordered) - Select multiple elements from the Revit document in the desired order. Hit ESC to stop picking. To refresh the node, connect a boolean switch node., Springs.SelectFaces+ - Select multiple faces from inside the Revit UI. Be sure to press \"Finish\" once done. Unlike the built-in node, face references of instances will be added sucessfully and you'l get the pick points. You can use a Boolean toggle to refresh your selection., Springs.SelectInRevit - Selects the input elements inside the Revit UI., Springs.SelectLinkedElement - Select the linked instance first, followed by the element. If your selection fails, just press escape.\r\nTo refresh the node, connect a boolean switch node., Springs.SelectLinkedElements(ordered) - Select the linked instance first. Then select multiple elements from the Revit document in the desired order. Hit ESC to stop picking. To refresh the node, connect a boolean switch node., Springs.SelectLinkedElements - Select the linked instance first, followed by the elements. To finish the selection, press Finish. If your selection fails, just press escape or Cancel.\r\nTo refresh the node, connect a boolean switch node., Springs.SelectLinkedFace - Select the linked instance first, followed by the face. If your selection fails, just press escape.\r\nTo refresh the node, connect a boolean switch node., Springs.Shaft.ByCurves - Creates a shaft opening. The top level MUST be higher than the base level for a successful execution. You can either provide one base and top level for all shafts or have unique levels for each shaft instance., Springs.Sheet.Views+ - Extracts all views and schedules (minus the revision schedule) placed on the input sheet (or sheets).\r\nWill be depreciated once the bult in node works with all plan types., Springs.Star.ByCenterRadiusRays - Fun little node to create star shapes., Springs.Str2Ln - De-serilize a Revit parameter string into a geometric line., Springs.Str2Pt - De-serilize a Revit parameter string into a geometric point., Springs.ToolkitMeshToMesh - Attempts to convert a toolkit mesh to a Dynamo mesh. You obviously need to have the appropriate version of the mesh toolkit package downloaded first., Springs.ViewSet.ByViewsName - Creates a set of views(or sheets) for printing. If the set exists, set Overwrite to true to replace it., Springs.Watch+ - This node that serializes the input information and presents it in a resizable text window.","engine_metadata":"","engine_version":"1.2.1.3083","created":"2017-02-19T09:22:04.218Z","full_dependency_versions":["110.2.0"],"full_dependency_ids":[{"_id":"56077cf3662bf0e9080001ea","name":"spring nodes"}],"direct_dependency_versions":[],"direct_dependency_ids":[],"change_log":"","version":"110.2.0"}],"latest_version_update":"2017-02-19T09:22:04.218Z","num_versions":33,"comments":[],"num_comments":0,"latest_comment":"1970-01-01T00:00:00.000Z","votes":10,"downloads":19352,"repository_url":"https://github.com/dimven/SpringNodes","site_url":"http://dynamonodes.com/2016/01/28/spring-nodes-node-index/","banned":false,"deprecated":false,"group":"Springs","engine":"dynamo","license":"MIT","used_by":[{"_id":"56446665662bf0e908000324","name":"MEPWORKS"},{"_id":"555e8bfea8367b98610000b8","name":"Bakery"},{"_id":"56c39085c3e9ee4a08000107","name":"Atmos.ElementIsolateByHostLevel"},{"_id":"55916d4bf2ae5a9a070000f2","name":"Atmos"},{"_id":"570e32c5287283f905000021","name":"Revision Clouds on Sheets in Excel"},{"_id":"5745289ac1a604fb36000034","name":"Roof Type Duplicate"},{"_id":"57d9f90df615e7725800004f","name":"OpenStrc"},{"_id":"57dbd203882d868b4200000d","name":"SYKES"},{"_id":"564dc5a3662bf0e90800035b","name":"Landform"},{"_id":"5828c0155af9f3713d000057","name":"FrTe"},{"_id":"582ed4885af9f3713d0000b6","name":"BIMSYK"},{"_id":"5507ae3e0c7eac9b57000053","name":"BVN"}],"num_dependents":12,"description":"Spring Nodes focuses on enhancing Dynamo's interaction with Revit and exploring any means that can help accelerate BIM work-flows. Your recommendations and ideas on how to improve things are always welcome. For more information and sample files, be sure to check out the repository:\r\nhttps://github.com/dimven/SpringNodes\r\ntwitter: @5devene\r\n\r\nPlease report any issues directly to the GitHub repository.\r\n","maintainers":[{"_id":"5606ce80662bf0e9080001e5","username":"dimitar.ven"}],"keywords":["springs","spring","api","revit","design","script","bad","monkey","opening"],"created":"2015-09-27T05:21:55.183Z"}}