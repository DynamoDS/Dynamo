<Window x:Class="Dynamo.PythonMigration.Controls.BaseDiffViewer"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:p="clr-namespace:Dynamo.PythonMigration.Properties"
        xmlns:ui="clr-namespace:Dynamo.UI;assembly=DynamoCoreWpf"
        xmlns:viewModels="clr-namespace:Dynamo.PythonMigration.Differ"
        xmlns:local="clr-namespace:Dynamo.PythonMigration.Controls"
        xmlns:migrationassistant="clr-namespace:Dynamo.PythonMigration.MigrationAssistant"
        d:DataContext="{d:DesignInstance Type=migrationassistant:PythonMigrationAssistantViewModel}"
        mc:Ignorable="d"
        Height="520"
        MinWidth="500"  
        MinHeight="450"
        WindowStyle="None"
        WindowStartupLocation="CenterOwner"
        Background="Transparent">

    <WindowChrome.WindowChrome>
        <WindowChrome CaptionHeight="0"/>
    </WindowChrome.WindowChrome>
    
    <Window.Resources>  
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <ui:SharedResourceDictionary Source="{x:Static ui:SharedDictionaryManager.DynamoModernDictionaryUri}" />
                <ui:SharedResourceDictionary Source="{x:Static ui:SharedDictionaryManager.DynamoColorsAndBrushesDictionaryUri}" />
            </ResourceDictionary.MergedDictionaries>
            <viewModels:DiffStateToVisibilityConverter x:Key="DiffStateToVis" />
            <DataTemplate DataType="{x:Type viewModels:InLineViewModel}">
                <local:InLineControl DataContext="{Binding}" />
            </DataTemplate>
            <DataTemplate DataType="{x:Type viewModels:SideBySideViewModel}">
                <local:SideBySideControl DataContext="{Binding}" />
            </DataTemplate>
            <Style x:Key="HasDifferenceController"
                   TargetType="{x:Type ContentControl}">
                <Style.Triggers>
                    <DataTrigger Binding="{Binding Path=CurrentViewModel.DiffState}"
                                 Value="{x:Static viewModels:State.HasChanges}">
                        <Setter Property="Content"
                                Value="{Binding Path=CurrentViewModel}">
                        </Setter>
                    </DataTrigger>
                    <DataTrigger Binding="{Binding Path=CurrentViewModel.DiffState}"
                                 Value="{x:Static viewModels:State.NoChanges}">
                        <Setter Property="ContentTemplate">
                            <Setter.Value>
                                <DataTemplate>
                                    <StackPanel Orientation="Vertical"
                                                VerticalAlignment="Center"
                                                Width="400">
                                        <TextBlock Text="{x:Static p:Resources.MigrationAssistantNoChangesStateHeader}"
                                                   TextAlignment="Center"
                                                   HorizontalAlignment="Center"
                                                   FontSize="24"
                                                   Foreground="{StaticResource WorkspaceTabHeaderActiveTextBrush}"
                                                   TextWrapping="Wrap" />
                                        <TextBlock Text="{x:Static p:Resources.MigrationAssistantNoChangesStateMessage}"
                                                   TextAlignment="Center"
                                                   HorizontalAlignment="Center"
                                                   FontSize="14"
                                                   Foreground="{StaticResource WorkspaceTabHeaderActiveTextBrush}"
                                                   TextWrapping="Wrap" />
                                    </StackPanel>
                                </DataTemplate>
                            </Setter.Value>
                        </Setter>
                    </DataTrigger>
                    <DataTrigger Binding="{Binding Path=CurrentViewModel.DiffState}"
                                 Value="{x:Static viewModels:State.Error}">
                        <Setter Property="ContentTemplate">
                            <Setter.Value>
                                <DataTemplate>
                                    <StackPanel Orientation="Vertical"
                                                VerticalAlignment="Center"
                                                Width="400">
                                        <TextBlock Text="{x:Static p:Resources.MigrationAssistantErrorStateHeader}"
                                                   TextAlignment="Center"
                                                   HorizontalAlignment="Center"
                                                   FontSize="24"
                                                   Foreground="{StaticResource WorkspaceTabHeaderActiveTextBrush}"
                                                   TextWrapping="Wrap" />
                                        <TextBlock Text="{x:Static p:Resources.MigrationAssistantErrorStateMessage}"
                                                   TextAlignment="Center"
                                                   HorizontalAlignment="Center"
                                                   FontSize="14"
                                                   Foreground="{StaticResource WorkspaceTabHeaderActiveTextBrush}"
                                                   TextWrapping="Wrap" />
                                    </StackPanel>
                                </DataTemplate>
                            </Setter.Value>
                        </Setter>
                    </DataTrigger>
                </Style.Triggers>
            </Style>

            <Style TargetType="{x:Type Button}">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate>
                            <Border x:Name="container"
                                    Background="Transparent"
                                    BorderBrush="#FFFFFF"
                                    CornerRadius="2"
                                    BorderThickness="1">
                                <Grid x:Name="inner"
                                      Background="{StaticResource DarkMidGreyBrush}">
                                    <TextBlock x:Name="text"
                                               HorizontalAlignment="Center"
                                               VerticalAlignment="Center"
                                               FontSize="14px"
                                               Foreground="#FFFFFF"
                                               Text="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Content}" />
                                </Grid>
                            </Border>

                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
        </ResourceDictionary>
    </Window.Resources>

    <Grid Background="{StaticResource DarkMidGreyBrush}" MouseDown="UIElement_OnMouseDown">
        <Grid.RowDefinitions>
            <RowDefinition Height="50" />
            <RowDefinition Height="*" />
            <RowDefinition Height="50" />
        </Grid.RowDefinitions>

        <Grid.Resources>
            <Style TargetType="{x:Type TextBlock}">
                <Setter Property="TextWrapping"
                        Value="Wrap" />
            </Style>
            <Style TargetType="{x:Type TextBox}">
                <Setter Property="TextWrapping"
                        Value="Wrap" />
            </Style>
        </Grid.Resources>

        <!--  Title Bar + Close Button  -->
        <DockPanel Grid.Row="0" Name="TitleBar"
                   VerticalAlignment="Stretch"
                   HorizontalAlignment="Stretch">

            <DockPanel DockPanel.Dock="Right" 
                       VerticalAlignment="Center"
                       HorizontalAlignment="Center" 
                       Width="150"
                       Margin="0 0 20 0">

                <Button Name="CloseButton"
                        Click="CloseButton_OnClick"
                        Margin="25 0 0 0"
                        DockPanel.Dock="Right"
                        Style="{StaticResource CloseButtonDarkStyle}" />

                <Button Name="MaximizeButton"
                        Click="MaximizeButton_OnClick"
                        DockPanel.Dock="Right"
                        Style="{StaticResource MaximizeButtonDarkStyle}" />

                <Button Name="NormalizeButton"
                        Click="MaximizeButton_OnClick"
                        DockPanel.Dock="Right"
                        Visibility="Collapsed"
                        Style="{StaticResource RestoreButtonDarkStyle}" />

                <Button Name="MinimizeButton"
                        Click="MinimizeButton_OnClick"
                        Margin="25 0 0 0"
                        DockPanel.Dock="Right"
                        Style="{StaticResource MinimizeButtonDarkStyle}" />
            </DockPanel>

            <Image Name="MessageBoxImageIcon"
                   Width="20"
                   Height="20"
                   Margin="15,0,0,0"
                   Source="/DynamoCoreWpf;component/UI/Images/dynamonotext.png"
                   HorizontalAlignment="Left"
                   VerticalAlignment="Center"
                   DockPanel.Dock="Left">
            </Image>

            <TextBlock Name="TitleTextBlock"
                       VerticalAlignment="Center"
                       DockPanel.Dock="Left"
                       Margin="7 0 0 0"
                       FontFamily="{StaticResource ArtifaktElementRegular}"
                       FontSize="20px"
                       Foreground="{StaticResource DarkThemeBodyMediumBrush}"
                       Text="{x:Static p:Resources.PythonMigrationAssistantWindowTitle}" 
                       TextWrapping="Wrap" />
        </DockPanel>

        <Rectangle Style="{StaticResource DividerRectangleStyle}"
                           Fill="{StaticResource NodeContextMenuBackgroundHighlight}"
                           Grid.Row="0"
                           Margin="0 1 0 0"/>

        <Border Padding="15,15,15,0"
                Background="Transparent"
                Grid.Row="1">
            <Grid Background="{StaticResource TextEditorBrush}">
                <ContentControl Style="{StaticResource HasDifferenceController}"
                        Grid.Row="1" HorizontalAlignment="Stretch" VerticalAlignment="Stretch"/>
            </Grid>
        </Border>


        <!-- Buttons row -->
        <Grid HorizontalAlignment="Stretch"
              Grid.Row="2"
              Background="Transparent">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="150" />
                <ColumnDefinition Width="*" />
            </Grid.ColumnDefinitions>
            <StackPanel Orientation="Horizontal"
                        HorizontalAlignment="Left"
                        Grid.Column="0">
                <Button  Name="DiffButton"
                         Margin="15,7,0,7"
                         Visibility="{Binding Path=CurrentViewModel.DiffState, Converter={StaticResource DiffStateToVis}}"
                         Click="OnDiffButtonClick"
                         HorizontalAlignment="Right"
                         Content="{x:Static p:Resources.SwitchViewButton}"
                         Width="100"
                         Height="35">
                    <Button.ToolTip>
                        <ToolTip Content="{x:Static p:Resources.DiffButtonTooltip}" Style="{StaticResource GenericToolTipLight}"/>
                    </Button.ToolTip>
                </Button>
            </StackPanel>
            <StackPanel Orientation="Horizontal"
                        HorizontalAlignment="Right"
                        Grid.Column="1">
                <Button  x:Name="AcceptButton"
                         Margin="0,7,15,7"
                         Style="{StaticResource RunButtonStyle}"
                         Visibility="{Binding Path=CurrentViewModel.DiffState, Converter={StaticResource DiffStateToVis}}"
                         Click="OnAcceptButtonClicked"
                         HorizontalAlignment="Right"
                         Content="{x:Static p:Resources.AcceptButton}"
                         Width="100"
                         Height="35">
                    <Button.ToolTip>
                        <ToolTip Content="{x:Static p:Resources.AcceptButtonTooltip}" Style="{StaticResource GenericToolTipLight}"/>
                    </Button.ToolTip>
                </Button>

                <Button x:Name="RejectButton"
                        Margin="0,7,15,7"
                        Click="OnRejectButtonClicked"
                        HorizontalAlignment="Right"
                        Content="{x:Static p:Resources.RejectButton}"
                        Width="100"
                        Height="35">
                    <Button.ToolTip>
                        <ToolTip Content="{x:Static p:Resources.RejectButtonTooltip}" Style="{StaticResource GenericToolTipLight}"/>
                    </Button.ToolTip>
                </Button>
            </StackPanel>
        </Grid>
    </Grid>
</Window>
