abstract Dynamo.Extensions.LinterExtensionBase.Name.get -> string
abstract Dynamo.Extensions.LinterExtensionBase.Shutdown() -> void
abstract Dynamo.Extensions.LinterExtensionBase.UniqueId.get -> string
abstract Dynamo.Graph.ModelBase.DeserializeCore(System.Xml.XmlElement nodeElement, Dynamo.Graph.SaveContext context) -> void
abstract Dynamo.Graph.ModelBase.SerializeCore(System.Xml.XmlElement element, Dynamo.Graph.SaveContext context) -> void
abstract Dynamo.Graph.Nodes.FunctionCallNodeController<T>.GetFunctionApplication(Dynamo.Graph.Nodes.NodeModel model, System.Collections.Generic.List<ProtoCore.AST.AssociativeAST.AssociativeNode> inputAstNodes) -> ProtoCore.AST.AssociativeAST.AssociativeNode
abstract Dynamo.Graph.Nodes.FunctionCallNodeController<T>.InitializeInputs(Dynamo.Graph.Nodes.NodeModel model) -> void
abstract Dynamo.Graph.Nodes.FunctionCallNodeController<T>.InitializeOutputs(Dynamo.Graph.Nodes.NodeModel model) -> void
abstract Dynamo.Graph.Nodes.VariableInputNode.GetInputName(int index) -> string
abstract Dynamo.Graph.Nodes.VariableInputNode.GetInputTooltip(int index) -> string
abstract Dynamo.Graph.Nodes.VariableInputNodeController.GetInputName(int index) -> string
abstract Dynamo.Graph.Nodes.VariableInputNodeController.GetInputTooltip(int index) -> string
abstract Dynamo.Linting.Rules.GraphLinterRule.EvaluateFunction(Dynamo.Graph.Workspaces.WorkspaceModel workspaceModel, string changedEvent, Dynamo.Graph.Nodes.NodeModel modifiedNode = null) -> System.Tuple<Dynamo.Linting.Interfaces.RuleEvaluationStatusEnum, System.Collections.Generic.HashSet<string>>
abstract Dynamo.Linting.Rules.GraphLinterRule.InitFunction(Dynamo.Graph.Workspaces.WorkspaceModel workspaceModel) -> System.Collections.Generic.List<System.Tuple<Dynamo.Linting.Interfaces.RuleEvaluationStatusEnum, System.Collections.Generic.HashSet<string>>>
abstract Dynamo.Linting.Rules.LinterRule.CallToAction.get -> string
abstract Dynamo.Linting.Rules.LinterRule.Description.get -> string
abstract Dynamo.Linting.Rules.LinterRule.EvaluationTriggerEvents.get -> System.Collections.Generic.List<string>
abstract Dynamo.Linting.Rules.LinterRule.Id.get -> string
abstract Dynamo.Linting.Rules.LinterRule.SeverityCode.get -> Dynamo.Linting.Interfaces.SeverityCodesEnum
abstract Dynamo.Linting.Rules.NodeLinterRule.EvaluateFunction(Dynamo.Graph.Nodes.NodeModel nodeModel, string changedEvent) -> Dynamo.Linting.Interfaces.RuleEvaluationStatusEnum
abstract Dynamo.Linting.Rules.NodeLinterRule.InitFunction(Dynamo.Graph.Workspaces.WorkspaceModel workspaceModel) -> System.Collections.Generic.List<System.Tuple<Dynamo.Linting.Interfaces.RuleEvaluationStatusEnum, string>>
abstract Dynamo.Models.DynamoModel.RecordableCommand.ExecuteCore(Dynamo.Models.DynamoModel dynamoModel) -> void
abstract Dynamo.Models.DynamoModel.RecordableCommand.SerializeCore(System.Xml.XmlElement element) -> void
abstract Dynamo.Scheduler.AsyncTask.HandleTaskCompletionCore() -> void
abstract Dynamo.Scheduler.AsyncTask.HandleTaskExecutionCore() -> void
abstract Dynamo.Scheduler.AsyncTask.Priority.get -> Dynamo.Scheduler.AsyncTask.TaskPriority
abstract Dynamo.Search.BrowserItem.Items.get -> System.Collections.ObjectModel.ObservableCollection<Dynamo.Search.BrowserItem>
abstract Dynamo.Search.BrowserItem.Items.set -> void
abstract Dynamo.Search.BrowserItem.Name.get -> string
abstract Dynamo.Search.SearchElements.NodeSearchElement.ConstructNewNodeModel() -> Dynamo.Graph.Nodes.NodeModel
abstract Dynamo.Search.SearchElements.SearchElementBase.Description.get -> string
abstract Dynamo.Search.SearchElements.SearchElementBase.Keywords.get -> string
abstract Dynamo.Search.SearchElements.SearchElementBase.Keywords.set -> void
abstract Dynamo.Search.SearchElements.SearchElementBase.Searchable.get -> bool
abstract Dynamo.Search.SearchElements.SearchElementBase.Type.get -> string
abstract Dynamo.Search.SearchElements.SearchElementBase.Weight.get -> double
abstract Dynamo.Search.SearchElements.SearchElementBase.Weight.set -> void
const Dynamo.Configuration.Configurations.NotificationsDefaultTimeOut = 10000 -> int
const Dynamo.Configuration.Context.NONE = "None" -> string
const Dynamo.Configuration.Context.REVIT_2014 = "Revit 2014" -> string
const Dynamo.Configuration.Context.REVIT_2015 = "Revit 2015" -> string
const Dynamo.Configuration.Context.VASARI_2014 = "Vasari 2014" -> string
const Dynamo.Configuration.PreferenceSettings.DefaultDateFormat = "MMMM dd, yyyy h:mm tt" -> string
const Dynamo.Engine.LibraryServices.Categories.BuiltIn = "BuiltIn" -> string
const Dynamo.Engine.LibraryServices.Categories.Constructors = "Create" -> string
const Dynamo.Engine.LibraryServices.Categories.MemberFunctions = "Actions" -> string
const Dynamo.Engine.LibraryServices.Categories.Operators = "Operators" -> string
const Dynamo.Engine.LibraryServices.Categories.Properties = "Query" -> string
const Dynamo.Graph.Nodes.BuiltinNodeCategories.ANALYZE_SOLAR = "Analyze.Solar" -> string
const Dynamo.Graph.Nodes.BuiltinNodeCategories.CORE = "Core" -> string
const Dynamo.Graph.Nodes.BuiltinNodeCategories.CORE_EVALUATE = "Core.Evaluate" -> string
const Dynamo.Graph.Nodes.BuiltinNodeCategories.CORE_INPUT = "Core.Input" -> string
const Dynamo.Graph.Nodes.BuiltinNodeCategories.CORE_IO = "Core.File" -> string
const Dynamo.Graph.Nodes.BuiltinNodeCategories.CORE_LISTS_ACTION = "Core.List.Actions" -> string
const Dynamo.Graph.Nodes.BuiltinNodeCategories.CORE_LISTS_CREATE = "Core.List.Create" -> string
const Dynamo.Graph.Nodes.BuiltinNodeCategories.CORE_LISTS_QUERY = "Core.List.Query" -> string
const Dynamo.Graph.Nodes.BuiltinNodeCategories.CORE_SCRIPTING = "Core.Scripting" -> string
const Dynamo.Graph.Nodes.BuiltinNodeCategories.CORE_UNITS = "Core.Units" -> string
const Dynamo.Graph.Nodes.BuiltinNodeCategories.CORE_VIEW = "Core.View" -> string
const Dynamo.Graph.Nodes.BuiltinNodeCategories.CORE_WEB = "Core.Web" -> string
const Dynamo.Graph.Nodes.BuiltinNodeCategories.GEOMETRY = "Geometry.Geometry" -> string
const Dynamo.Graph.Nodes.BuiltinNodeCategories.GEOMETRY_CATEGORY = "Geometry" -> string
const Dynamo.Graph.Nodes.BuiltinNodeCategories.IO = "Input/Output" -> string
const Dynamo.Graph.Nodes.BuiltinNodeCategories.IO_HARDWARE = "Input/Output.Hardware" -> string
const Dynamo.Graph.Nodes.BuiltinNodeCategories.LOGIC = "Core.Logic" -> string
const Dynamo.Graph.Nodes.BuiltinNodeCategories.LOGIC_MATH_OPTIMIZE = "Logic.Math.Optimize" -> string
const Dynamo.Graph.Nodes.BuiltinNodeCategories.MODIFIERS = "Modifiers" -> string
const Dynamo.Graph.Presets.PresetModel.DescriptionAttributeName = "Description" -> string
const Dynamo.Graph.Presets.PresetModel.GuidAttributeName = "guid" -> string
const Dynamo.Graph.Presets.PresetModel.NodeNameAttributeName = "nickname" -> string
const Dynamo.Graph.Presets.PresetModel.StateNameAttributeName = "Name" -> string
const Dynamo.Models.RunSettings.DefaultRunPeriod = 1000 -> int
Dynamo.Annotations.NotifyPropertyChangedInvocatorAttribute
Dynamo.Annotations.NotifyPropertyChangedInvocatorAttribute.NotifyPropertyChangedInvocatorAttribute() -> void
Dynamo.Annotations.NotifyPropertyChangedInvocatorAttribute.NotifyPropertyChangedInvocatorAttribute(string parameterName) -> void
Dynamo.Annotations.NotifyPropertyChangedInvocatorAttribute.ParameterName.get -> string
Dynamo.Configuration.Configurations
Dynamo.Configuration.Configurations.Configurations() -> void
Dynamo.Configuration.Context
Dynamo.Configuration.DebugSettings
Dynamo.Configuration.DebugSettings.DebugSettings() -> void
Dynamo.Configuration.DynamoPlayerFolder
Dynamo.Configuration.DynamoPlayerFolder.DisplayName.get -> string
Dynamo.Configuration.DynamoPlayerFolder.DisplayName.set -> void
Dynamo.Configuration.DynamoPlayerFolder.DynamoPlayerFolder() -> void
Dynamo.Configuration.DynamoPlayerFolder.Id.get -> string
Dynamo.Configuration.DynamoPlayerFolder.Id.set -> void
Dynamo.Configuration.DynamoPlayerFolder.IsDefault.get -> bool
Dynamo.Configuration.DynamoPlayerFolder.IsDefault.set -> void
Dynamo.Configuration.DynamoPlayerFolder.IsRemovable.get -> bool
Dynamo.Configuration.DynamoPlayerFolder.IsRemovable.set -> void
Dynamo.Configuration.DynamoPlayerFolder.IsValid.get -> bool
Dynamo.Configuration.DynamoPlayerFolder.IsValid.set -> void
Dynamo.Configuration.DynamoPlayerFolder.Order.get -> int
Dynamo.Configuration.DynamoPlayerFolder.Order.set -> void
Dynamo.Configuration.DynamoPlayerFolder.Path.get -> string
Dynamo.Configuration.DynamoPlayerFolder.Path.set -> void
Dynamo.Configuration.DynamoPlayerFolderGroup
Dynamo.Configuration.DynamoPlayerFolderGroup.DynamoPlayerFolderGroup() -> void
Dynamo.Configuration.DynamoPlayerFolderGroup.EntryPoint.get -> string
Dynamo.Configuration.DynamoPlayerFolderGroup.EntryPoint.set -> void
Dynamo.Configuration.DynamoPlayerFolderGroup.Folders.get -> System.Collections.Generic.List<Dynamo.Configuration.DynamoPlayerFolder>
Dynamo.Configuration.DynamoPlayerFolderGroup.Folders.set -> void
Dynamo.Configuration.GraphChecksumItem
Dynamo.Configuration.GraphChecksumItem.Checksum.get -> string
Dynamo.Configuration.GraphChecksumItem.Checksum.set -> void
Dynamo.Configuration.GraphChecksumItem.GraphChecksumItem() -> void
Dynamo.Configuration.GraphChecksumItem.GraphId.get -> string
Dynamo.Configuration.GraphChecksumItem.GraphId.set -> void
Dynamo.Configuration.GroupStyleItem
Dynamo.Configuration.GroupStyleItem.GroupStyleItem() -> void
Dynamo.Configuration.PreferenceSettings
Dynamo.Configuration.PreferenceSettings.AskForTrustedLocationResult
Dynamo.Configuration.PreferenceSettings.AskForTrustedLocationResult.Ask = 0 -> Dynamo.Configuration.PreferenceSettings.AskForTrustedLocationResult
Dynamo.Configuration.PreferenceSettings.AskForTrustedLocationResult.DontAsk = 1 -> Dynamo.Configuration.PreferenceSettings.AskForTrustedLocationResult
Dynamo.Configuration.PreferenceSettings.AskForTrustedLocationResult.UnableToAsk = 2 -> Dynamo.Configuration.PreferenceSettings.AskForTrustedLocationResult
Dynamo.Configuration.PreferenceSettings.BackgroundPreviews.get -> System.Collections.Generic.List<Dynamo.Interfaces.BackgroundPreviewActiveState>
Dynamo.Configuration.PreferenceSettings.BackgroundPreviews.set -> void
Dynamo.Configuration.PreferenceSettings.BackupFiles.get -> System.Collections.Generic.List<string>
Dynamo.Configuration.PreferenceSettings.BackupFiles.set -> void
Dynamo.Configuration.PreferenceSettings.BackupFilesCount.get -> int
Dynamo.Configuration.PreferenceSettings.BackupFilesCount.set -> void
Dynamo.Configuration.PreferenceSettings.BackupInterval.get -> int
Dynamo.Configuration.PreferenceSettings.BackupInterval.set -> void
Dynamo.Configuration.PreferenceSettings.BackupLocation.get -> string
Dynamo.Configuration.PreferenceSettings.BackupLocation.set -> void
Dynamo.Configuration.PreferenceSettings.ConnectorType.get -> Dynamo.Graph.Connectors.ConnectorType
Dynamo.Configuration.PreferenceSettings.ConnectorType.set -> void
Dynamo.Configuration.PreferenceSettings.ConsoleHeight.get -> int
Dynamo.Configuration.PreferenceSettings.ConsoleHeight.set -> void
Dynamo.Configuration.PreferenceSettings.CustomPackageFolders.get -> System.Collections.Generic.List<string>
Dynamo.Configuration.PreferenceSettings.CustomPackageFolders.set -> void
Dynamo.Configuration.PreferenceSettings.DefaultEnableLegacyPolyCurveBehavior.get -> bool
Dynamo.Configuration.PreferenceSettings.DefaultEnableLegacyPolyCurveBehavior.set -> void
Dynamo.Configuration.PreferenceSettings.DefaultNodeAutocompleteSuggestion.get -> Dynamo.Models.NodeAutocompleteSuggestion
Dynamo.Configuration.PreferenceSettings.DefaultNodeAutocompleteSuggestion.set -> void
Dynamo.Configuration.PreferenceSettings.DefaultPythonEngine.get -> string
Dynamo.Configuration.PreferenceSettings.DefaultPythonEngine.set -> void
Dynamo.Configuration.PreferenceSettings.DefaultRunType.get -> Dynamo.Models.RunType
Dynamo.Configuration.PreferenceSettings.DefaultRunType.set -> void
Dynamo.Configuration.PreferenceSettings.DefaultScaleFactor.get -> double
Dynamo.Configuration.PreferenceSettings.DefaultScaleFactor.set -> void
Dynamo.Configuration.PreferenceSettings.DisableBuiltinPackages.get -> bool
Dynamo.Configuration.PreferenceSettings.DisableBuiltinPackages.set -> void
Dynamo.Configuration.PreferenceSettings.DisableCustomPackageLocations.get -> bool
Dynamo.Configuration.PreferenceSettings.DisableCustomPackageLocations.set -> void
Dynamo.Configuration.PreferenceSettings.DisableTrustWarnings.get -> bool
Dynamo.Configuration.PreferenceSettings.DisableTrustWarnings.set -> void
Dynamo.Configuration.PreferenceSettings.DynamoPlayerFolderGroups.get -> System.Collections.Generic.List<Dynamo.Configuration.DynamoPlayerFolderGroup>
Dynamo.Configuration.PreferenceSettings.DynamoPlayerFolderGroups.set -> void
Dynamo.Configuration.PreferenceSettings.EnableDynamoPlayerRenamedWatchAsOutput.get -> bool
Dynamo.Configuration.PreferenceSettings.EnableDynamoPlayerRenamedWatchAsOutput.set -> void
Dynamo.Configuration.PreferenceSettings.EnableNodeAutoComplete.get -> bool
Dynamo.Configuration.PreferenceSettings.EnableNodeAutoComplete.set -> void
Dynamo.Configuration.PreferenceSettings.EnableNotificationCenter.get -> bool
Dynamo.Configuration.PreferenceSettings.EnableNotificationCenter.set -> void
Dynamo.Configuration.PreferenceSettings.EnablePersistExtensions.get -> bool
Dynamo.Configuration.PreferenceSettings.EnablePersistExtensions.set -> void
Dynamo.Configuration.PreferenceSettings.EnableStaticSplashScreen.get -> bool
Dynamo.Configuration.PreferenceSettings.EnableStaticSplashScreen.set -> void
Dynamo.Configuration.PreferenceSettings.GetIsBackgroundPreviewActive(string name) -> bool
Dynamo.Configuration.PreferenceSettings.GraphChecksumItemsList.get -> System.Collections.Generic.List<Dynamo.Configuration.GraphChecksumItem>
Dynamo.Configuration.PreferenceSettings.GraphChecksumItemsList.set -> void
Dynamo.Configuration.PreferenceSettings.GraphicScaleUnit.get -> string
Dynamo.Configuration.PreferenceSettings.GraphicScaleUnit.set -> void
Dynamo.Configuration.PreferenceSettings.GridScaleFactor.get -> float
Dynamo.Configuration.PreferenceSettings.GridScaleFactor.set -> void
Dynamo.Configuration.PreferenceSettings.GroupStyleItemsList.get -> System.Collections.Generic.List<Dynamo.Configuration.GroupStyleItem>
Dynamo.Configuration.PreferenceSettings.GroupStyleItemsList.set -> void
Dynamo.Configuration.PreferenceSettings.HideAutocompleteMethodOptions.get -> bool
Dynamo.Configuration.PreferenceSettings.HideAutocompleteMethodOptions.set -> void
Dynamo.Configuration.PreferenceSettings.HideNodesBelowSpecificConfidenceLevel.get -> bool
Dynamo.Configuration.PreferenceSettings.HideNodesBelowSpecificConfidenceLevel.set -> void
Dynamo.Configuration.PreferenceSettings.IronPythonResolveTargetVersion.get -> string
Dynamo.Configuration.PreferenceSettings.IronPythonResolveTargetVersion.set -> void
Dynamo.Configuration.PreferenceSettings.IsADPAnalyticsReportingApproved.get -> bool
Dynamo.Configuration.PreferenceSettings.IsADPAnalyticsReportingApproved.set -> void
Dynamo.Configuration.PreferenceSettings.IsBackgroundGridVisible.get -> bool
Dynamo.Configuration.PreferenceSettings.IsBackgroundGridVisible.set -> void
Dynamo.Configuration.PreferenceSettings.IsBackgroundPreviewActive.get -> bool
Dynamo.Configuration.PreferenceSettings.IsBackgroundPreviewActive.set -> void
Dynamo.Configuration.PreferenceSettings.IsCreatedFromValidFile.get -> bool
Dynamo.Configuration.PreferenceSettings.IsFirstRun.get -> bool
Dynamo.Configuration.PreferenceSettings.IsFirstRun.set -> void
Dynamo.Configuration.PreferenceSettings.IsIronPythonDialogDisabled.get -> bool
Dynamo.Configuration.PreferenceSettings.IsIronPythonDialogDisabled.set -> void
Dynamo.Configuration.PreferenceSettings.IsMLAutocompleteTOUApproved.get -> bool
Dynamo.Configuration.PreferenceSettings.IsMLAutocompleteTOUApproved.set -> void
Dynamo.Configuration.PreferenceSettings.IsTimeStampIncludedInExportFilePath.get -> bool
Dynamo.Configuration.PreferenceSettings.IsTimeStampIncludedInExportFilePath.set -> void
Dynamo.Configuration.PreferenceSettings.IsTrustedLocation(string location) -> bool
Dynamo.Configuration.PreferenceSettings.LibraryWidth.get -> int
Dynamo.Configuration.PreferenceSettings.LibraryWidth.set -> void
Dynamo.Configuration.PreferenceSettings.LibraryZoomScale.get -> int
Dynamo.Configuration.PreferenceSettings.LibraryZoomScale.set -> void
Dynamo.Configuration.PreferenceSettings.Locale.get -> string
Dynamo.Configuration.PreferenceSettings.Locale.set -> void
Dynamo.Configuration.PreferenceSettings.MaxNumRecentFiles.get -> int
Dynamo.Configuration.PreferenceSettings.MaxNumRecentFiles.set -> void
Dynamo.Configuration.PreferenceSettings.MessageLogged -> System.Action<Dynamo.Logging.ILogMessage>
Dynamo.Configuration.PreferenceSettings.MLRecommendationConfidenceLevel.get -> int
Dynamo.Configuration.PreferenceSettings.MLRecommendationConfidenceLevel.set -> void
Dynamo.Configuration.PreferenceSettings.MLRecommendationNumberOfResults.get -> int
Dynamo.Configuration.PreferenceSettings.MLRecommendationNumberOfResults.set -> void
Dynamo.Configuration.PreferenceSettings.NamespacesToExcludeFromLibrary.get -> System.Collections.Generic.List<string>
Dynamo.Configuration.PreferenceSettings.NamespacesToExcludeFromLibrary.set -> void
Dynamo.Configuration.PreferenceSettings.NamespacesToExcludeFromLibrarySpecified.get -> bool
Dynamo.Configuration.PreferenceSettings.NamespacesToExcludeFromLibrarySpecified.set -> void
Dynamo.Configuration.PreferenceSettings.NodeSearchTagSizeLimit.get -> int
Dynamo.Configuration.PreferenceSettings.NodeSearchTagSizeLimit.set -> void
Dynamo.Configuration.PreferenceSettings.NumberFormat.get -> string
Dynamo.Configuration.PreferenceSettings.NumberFormat.set -> void
Dynamo.Configuration.PreferenceSettings.OpenFileInManualExecutionMode.get -> bool
Dynamo.Configuration.PreferenceSettings.OpenFileInManualExecutionMode.set -> void
Dynamo.Configuration.PreferenceSettings.PackageDirectoriesToUninstall.get -> System.Collections.Generic.List<string>
Dynamo.Configuration.PreferenceSettings.PackageDirectoriesToUninstall.set -> void
Dynamo.Configuration.PreferenceSettings.PackageDownloadTouAccepted.get -> bool
Dynamo.Configuration.PreferenceSettings.PackageDownloadTouAccepted.set -> void
Dynamo.Configuration.PreferenceSettings.PredefinedGroupStyleFontSizes.get -> System.Collections.ObjectModel.ObservableCollection<int>
Dynamo.Configuration.PreferenceSettings.PreferenceSettings() -> void
Dynamo.Configuration.PreferenceSettings.PythonScriptZoomScale.get -> int
Dynamo.Configuration.PreferenceSettings.PythonScriptZoomScale.set -> void
Dynamo.Configuration.PreferenceSettings.PythonTemplateFilePath.get -> string
Dynamo.Configuration.PreferenceSettings.PythonTemplateFilePath.set -> void
Dynamo.Configuration.PreferenceSettings.ReadNotificationIds.get -> System.Collections.Generic.List<string>
Dynamo.Configuration.PreferenceSettings.ReadNotificationIds.set -> void
Dynamo.Configuration.PreferenceSettings.RecentFiles.get -> System.Collections.Generic.List<string>
Dynamo.Configuration.PreferenceSettings.RecentFiles.set -> void
Dynamo.Configuration.PreferenceSettings.RenderPrecision.get -> int
Dynamo.Configuration.PreferenceSettings.RenderPrecision.set -> void
Dynamo.Configuration.PreferenceSettings.Save(string filePath) -> bool
Dynamo.Configuration.PreferenceSettings.SaveInternal(string preferenceFilePath) -> bool
Dynamo.Configuration.PreferenceSettings.SelectedPackagePathForInstall.get -> string
Dynamo.Configuration.PreferenceSettings.SelectedPackagePathForInstall.set -> void
Dynamo.Configuration.PreferenceSettings.SetIsBackgroundPreviewActive(string name, bool value) -> void
Dynamo.Configuration.PreferenceSettings.ShowCodeBlockLineNumber.get -> bool
Dynamo.Configuration.PreferenceSettings.ShowCodeBlockLineNumber.set -> void
Dynamo.Configuration.PreferenceSettings.ShowConnector.get -> bool
Dynamo.Configuration.PreferenceSettings.ShowConnector.set -> void
Dynamo.Configuration.PreferenceSettings.ShowConnectorToolTip.get -> bool
Dynamo.Configuration.PreferenceSettings.ShowConnectorToolTip.set -> void
Dynamo.Configuration.PreferenceSettings.ShowDetailedLayout.get -> bool
Dynamo.Configuration.PreferenceSettings.ShowDetailedLayout.set -> void
Dynamo.Configuration.PreferenceSettings.ShowEdges.get -> bool
Dynamo.Configuration.PreferenceSettings.ShowEdges.set -> void
Dynamo.Configuration.PreferenceSettings.ShowPreviewBubbles.get -> bool
Dynamo.Configuration.PreferenceSettings.ShowPreviewBubbles.set -> void
Dynamo.Configuration.PreferenceSettings.ShowRunPreview.get -> bool
Dynamo.Configuration.PreferenceSettings.ShowRunPreview.set -> void
Dynamo.Configuration.PreferenceSettings.ShowTabsAndSpacesInScriptEditor.get -> bool
Dynamo.Configuration.PreferenceSettings.ShowTabsAndSpacesInScriptEditor.set -> void
Dynamo.Configuration.PreferenceSettings.StaticFields() -> System.Collections.Generic.List<string>
Dynamo.Configuration.PreferenceSettings.TemplateFilePath.get -> string
Dynamo.Configuration.PreferenceSettings.TemplateFilePath.set -> void
Dynamo.Configuration.PreferenceSettings.TrustedLocations.get -> System.Collections.Generic.List<string>
Dynamo.Configuration.PreferenceSettings.UseHardwareAcceleration.get -> bool
Dynamo.Configuration.PreferenceSettings.UseHardwareAcceleration.set -> void
Dynamo.Configuration.PreferenceSettings.UseHostScaleUnits.get -> bool
Dynamo.Configuration.PreferenceSettings.UseHostScaleUnits.set -> void
Dynamo.Configuration.PreferenceSettings.UseRenderInstancing.get -> bool
Dynamo.Configuration.PreferenceSettings.UseRenderInstancing.set -> void
Dynamo.Configuration.PreferenceSettings.ViewExtensionSettings.get -> System.Collections.Generic.List<Dynamo.Configuration.ViewExtensionSettings>
Dynamo.Configuration.PreferenceSettings.ViewExtensionSettings.set -> void
Dynamo.Configuration.PreferenceSettings.WindowH.get -> double
Dynamo.Configuration.PreferenceSettings.WindowH.set -> void
Dynamo.Configuration.PreferenceSettings.WindowW.get -> double
Dynamo.Configuration.PreferenceSettings.WindowW.set -> void
Dynamo.Configuration.PreferenceSettings.WindowX.get -> double
Dynamo.Configuration.PreferenceSettings.WindowX.set -> void
Dynamo.Configuration.PreferenceSettings.WindowY.get -> double
Dynamo.Configuration.PreferenceSettings.WindowY.set -> void
Dynamo.Configuration.StyleItem
Dynamo.Configuration.StyleItem.FontSize.get -> int
Dynamo.Configuration.StyleItem.FontSize.set -> void
Dynamo.Configuration.StyleItem.GroupStyleId.get -> System.Guid
Dynamo.Configuration.StyleItem.GroupStyleId.set -> void
Dynamo.Configuration.StyleItem.HexColorString.get -> string
Dynamo.Configuration.StyleItem.HexColorString.set -> void
Dynamo.Configuration.StyleItem.IsDefault.get -> bool
Dynamo.Configuration.StyleItem.IsDefault.set -> void
Dynamo.Configuration.StyleItem.Name.get -> string
Dynamo.Configuration.StyleItem.Name.set -> void
Dynamo.Configuration.StyleItem.StyleItem() -> void
Dynamo.Configuration.ViewExtensionDisplayMode
Dynamo.Configuration.ViewExtensionDisplayMode.DockRight = 1 -> Dynamo.Configuration.ViewExtensionDisplayMode
Dynamo.Configuration.ViewExtensionDisplayMode.FloatingWindow = 2 -> Dynamo.Configuration.ViewExtensionDisplayMode
Dynamo.Configuration.ViewExtensionDisplayMode.Unspecified = 0 -> Dynamo.Configuration.ViewExtensionDisplayMode
Dynamo.Configuration.ViewExtensionSettings
Dynamo.Configuration.ViewExtensionSettings.DisplayMode.get -> Dynamo.Configuration.ViewExtensionDisplayMode
Dynamo.Configuration.ViewExtensionSettings.DisplayMode.set -> void
Dynamo.Configuration.ViewExtensionSettings.IsOpen.get -> bool
Dynamo.Configuration.ViewExtensionSettings.IsOpen.set -> void
Dynamo.Configuration.ViewExtensionSettings.Name.get -> string
Dynamo.Configuration.ViewExtensionSettings.Name.set -> void
Dynamo.Configuration.ViewExtensionSettings.UniqueId.get -> string
Dynamo.Configuration.ViewExtensionSettings.UniqueId.set -> void
Dynamo.Configuration.ViewExtensionSettings.ViewExtensionSettings() -> void
Dynamo.Configuration.ViewExtensionSettings.WindowSettings.get -> Dynamo.Configuration.WindowSettings
Dynamo.Configuration.ViewExtensionSettings.WindowSettings.set -> void
Dynamo.Configuration.WindowSettings
Dynamo.Configuration.WindowSettings.Height.get -> int
Dynamo.Configuration.WindowSettings.Height.set -> void
Dynamo.Configuration.WindowSettings.Left.get -> int
Dynamo.Configuration.WindowSettings.Left.set -> void
Dynamo.Configuration.WindowSettings.Status.get -> Dynamo.Configuration.WindowStatus
Dynamo.Configuration.WindowSettings.Status.set -> void
Dynamo.Configuration.WindowSettings.Top.get -> int
Dynamo.Configuration.WindowSettings.Top.set -> void
Dynamo.Configuration.WindowSettings.Width.get -> int
Dynamo.Configuration.WindowSettings.Width.set -> void
Dynamo.Configuration.WindowSettings.WindowSettings() -> void
Dynamo.Configuration.WindowStatus
Dynamo.Configuration.WindowStatus.Maximized = 1 -> Dynamo.Configuration.WindowStatus
Dynamo.Configuration.WindowStatus.Normal = 0 -> Dynamo.Configuration.WindowStatus
Dynamo.Core.AuthenticationManager
Dynamo.Core.AuthenticationManager.AuthenticationManager(Greg.IAuthProvider authProvider) -> void
Dynamo.Core.AuthenticationManager.AuthProvider.get -> Greg.IAuthProvider
Dynamo.Core.AuthenticationManager.HasAuthProvider.get -> bool
Dynamo.Core.AuthenticationManager.LoginState.get -> Greg.AuthProviders.LoginState
Dynamo.Core.AuthenticationManager.LoginStateChanged -> System.Action<Greg.AuthProviders.LoginState>
Dynamo.Core.AuthenticationManager.LoginStateInitial.get -> Greg.AuthProviders.LoginState
Dynamo.Core.AuthenticationManager.Username.get -> string
Dynamo.Core.CrashErrorReportArgs
Dynamo.Core.CrashErrorReportArgs.CrashErrorReportArgs(System.Exception e) -> void
Dynamo.Core.CrashErrorReportArgs.SendRecordedCommands.get -> bool
Dynamo.Core.CrashErrorReportArgs.SendRecordedCommands.set -> void
Dynamo.Core.CrashPromptArgs
Dynamo.Core.CrashPromptArgs.CrashPromptArgs(string details, string overridingText = null, string filePath = null) -> void
Dynamo.Core.CrashPromptArgs.Details.get -> string
Dynamo.Core.CrashPromptArgs.DisplayOptions
Dynamo.Core.CrashPromptArgs.DisplayOptions.HasDetails = 2 -> Dynamo.Core.CrashPromptArgs.DisplayOptions
Dynamo.Core.CrashPromptArgs.DisplayOptions.HasFilePath = 4 -> Dynamo.Core.CrashPromptArgs.DisplayOptions
Dynamo.Core.CrashPromptArgs.DisplayOptions.IsDefaultTextOverridden = 1 -> Dynamo.Core.CrashPromptArgs.DisplayOptions
Dynamo.Core.CrashPromptArgs.FilePath.get -> string
Dynamo.Core.CrashPromptArgs.Options.get -> Dynamo.Core.CrashPromptArgs.DisplayOptions
Dynamo.Core.CrashPromptArgs.OverridingText.get -> string
Dynamo.Core.CustomNodeManager
Dynamo.Core.CustomNodeManager.AddUninitializedCustomNode(string file, bool isTestMode, out Dynamo.CustomNodeInfo info) -> bool
Dynamo.Core.CustomNodeManager.AddUninitializedCustomNodesInPath(string path, bool isTestMode, bool isPackageMember = false) -> System.Collections.Generic.IEnumerable<Dynamo.CustomNodeInfo>
Dynamo.Core.CustomNodeManager.AddUninitializedCustomNodesInPath(string path, bool isTestMode, Dynamo.Graph.Workspaces.PackageInfo packageInfo) -> System.Collections.Generic.IEnumerable<Dynamo.CustomNodeInfo>
Dynamo.Core.CustomNodeManager.Contains(string name) -> bool
Dynamo.Core.CustomNodeManager.Contains(System.Guid guid) -> bool
Dynamo.Core.CustomNodeManager.CreateCustomNodeInstance(System.Guid id, string name = null, bool isTestMode = false) -> Dynamo.Graph.Nodes.CustomNodes.Function
Dynamo.Core.CustomNodeManager.CreateCustomNodeInstance(System.Guid id, string name, bool isTestMode, Dynamo.CustomNodeDefinition def, Dynamo.CustomNodeInfo info) -> Dynamo.Graph.Nodes.CustomNodes.Function
Dynamo.Core.CustomNodeManager.CustomNodeManager(Dynamo.Graph.Nodes.NodeLoaders.NodeFactory nodeFactory, Dynamo.Migration.MigrationManager migrationManager, Dynamo.Engine.LibraryServices libraryServices) -> void
Dynamo.Core.CustomNodeManager.CustomNodeRemoved -> System.Action<System.Guid>
Dynamo.Core.CustomNodeManager.DefinitionUpdated -> System.Action<Dynamo.CustomNodeDefinition>
Dynamo.Core.CustomNodeManager.Dispose() -> void
Dynamo.Core.CustomNodeManager.GetWorkspaceById(System.Guid customNodeId) -> Dynamo.Graph.Workspaces.CustomNodeWorkspaceModel
Dynamo.Core.CustomNodeManager.GuidFromPath(string path) -> System.Guid
Dynamo.Core.CustomNodeManager.InfoUpdated -> System.Action<Dynamo.CustomNodeInfo>
Dynamo.Core.CustomNodeManager.LoadedDefinitions.get -> System.Collections.Generic.IEnumerable<Dynamo.CustomNodeDefinition>
Dynamo.Core.CustomNodeManager.LoadedWorkspaces.get -> System.Collections.Generic.IEnumerable<Dynamo.Graph.Workspaces.CustomNodeWorkspaceModel>
Dynamo.Core.CustomNodeManager.OpenCustomNodeWorkspace(System.Xml.XmlDocument xmlDoc, Dynamo.Graph.Workspaces.WorkspaceInfo workspaceInfo, bool isTestMode, out Dynamo.Graph.Workspaces.WorkspaceModel workspace) -> bool
Dynamo.Core.CustomNodeManager.Remove(System.Guid guid) -> void
Dynamo.Core.CustomNodeManager.TryGetCustomNodeData(System.Guid id, string name, bool isTestMode, out Dynamo.CustomNodeDefinition def, out Dynamo.CustomNodeInfo info) -> bool
Dynamo.Core.CustomNodeManager.TryGetFunctionDefinition(System.Guid id, bool isTestMode, out Dynamo.CustomNodeDefinition definition) -> bool
Dynamo.Core.CustomNodeManager.TryGetFunctionWorkspace(System.Guid id, bool isTestMode, out Dynamo.Graph.Workspaces.CustomNodeWorkspaceModel ws) -> bool
Dynamo.Core.CustomNodeManager.TryGetFunctionWorkspace(System.Guid id, bool isTestMode, out Dynamo.Graph.Workspaces.ICustomNodeWorkspaceModel ws) -> bool
Dynamo.Core.IDSDKManager
Dynamo.Core.IDSDKManager.Dispose() -> void
Dynamo.Core.IDSDKManager.GetAccessToken() -> string
Dynamo.Core.IDSDKManager.IDSDKManager() -> void
Dynamo.Core.IDSDKManager.IsLoggedIn() -> bool
Dynamo.Core.IDSDKManager.Login() -> bool
Dynamo.Core.IDSDKManager.LoginState.get -> Greg.AuthProviders.LoginState
Dynamo.Core.IDSDKManager.LoginStateChanged -> System.Action<Greg.AuthProviders.LoginState>
Dynamo.Core.IDSDKManager.Logout() -> void
Dynamo.Core.IDSDKManager.RequestLogin -> System.Func<object, bool>
Dynamo.Core.IDSDKManager.SignRequest(ref RestSharp.RestRequest m, RestSharp.RestClient client) -> void
Dynamo.Core.IDSDKManager.UserId.get -> string
Dynamo.Core.IDSDKManager.Username.get -> string
Dynamo.Core.NotificationObject
Dynamo.Core.NotificationObject.NotificationObject() -> void
Dynamo.Core.NotificationObject.PropertyChanged -> System.ComponentModel.PropertyChangedEventHandler
Dynamo.Core.NotificationObject.RaisePropertyChanged(params string[] propertyNames) -> void
Dynamo.CustomNodeDefinition
Dynamo.CustomNodeDefinition.ContainsInvalidInput.get -> bool
Dynamo.CustomNodeDefinition.CustomNodeDefinition(System.Guid functionId, string displayName = "", System.Collections.Generic.IEnumerable<Dynamo.Graph.Nodes.NodeModel> nodeModels = null) -> void
Dynamo.CustomNodeDefinition.Dependencies.get -> System.Collections.Generic.IEnumerable<Dynamo.CustomNodeDefinition>
Dynamo.CustomNodeDefinition.DirectDependencies.get -> System.Collections.Generic.IEnumerable<Dynamo.CustomNodeDefinition>
Dynamo.CustomNodeDefinition.DisplayName.get -> string
Dynamo.CustomNodeDefinition.DisplayParameters.get -> System.Collections.Generic.IEnumerable<string>
Dynamo.CustomNodeDefinition.FunctionBody.get -> System.Collections.Generic.IEnumerable<Dynamo.Graph.Nodes.NodeModel>
Dynamo.CustomNodeDefinition.FunctionId.get -> System.Guid
Dynamo.CustomNodeDefinition.FunctionName.get -> string
Dynamo.CustomNodeDefinition.IsProxy.get -> bool
Dynamo.CustomNodeDefinition.MangledName.get -> string
Dynamo.CustomNodeDefinition.OutputNodes.get -> System.Collections.Generic.IEnumerable<ProtoCore.AST.AssociativeAST.AssociativeNode>
Dynamo.CustomNodeDefinition.Parameters.get -> System.Collections.Generic.IEnumerable<Dynamo.Library.TypedParameter>
Dynamo.CustomNodeDefinition.ReturnKeys.get -> System.Collections.Generic.IEnumerable<string>
Dynamo.CustomNodeDefinition.Returns.get -> System.Collections.Generic.IEnumerable<System.Tuple<string, string>>
Dynamo.CustomNodeDefinition.ReturnType.get -> ProtoCore.Type
Dynamo.CustomNodeInfo
Dynamo.CustomNodeInfo.Category.get -> string
Dynamo.CustomNodeInfo.Category.set -> void
Dynamo.CustomNodeInfo.CustomNodeInfo(System.Guid functionId, string name, string category, string description, string path, bool isVisibleInDynamoLibrary = true) -> void
Dynamo.CustomNodeInfo.Description.get -> string
Dynamo.CustomNodeInfo.Description.set -> void
Dynamo.CustomNodeInfo.FunctionId.get -> System.Guid
Dynamo.CustomNodeInfo.FunctionId.set -> void
Dynamo.CustomNodeInfo.IsPackageMember.get -> bool
Dynamo.CustomNodeInfo.IsPackageMember.set -> void
Dynamo.CustomNodeInfo.IsVisibleInDynamoLibrary.get -> bool
Dynamo.CustomNodeInfo.Name.get -> string
Dynamo.CustomNodeInfo.Name.set -> void
Dynamo.CustomNodeInfo.PackageInfo.get -> Dynamo.Graph.Workspaces.PackageInfo
Dynamo.CustomNodeInfo.Path.get -> string
Dynamo.CustomNodeInfo.Path.set -> void
Dynamo.Engine.AstBuiltEventHandler
Dynamo.Engine.CodeGeneration.AstBuilder
Dynamo.Engine.CodeGeneration.AstBuilder.CompileToAstNodes(System.Collections.Generic.IEnumerable<Dynamo.Graph.Nodes.NodeModel> nodes, Dynamo.Engine.CodeGeneration.CompilationContext context, bool verboseLogging) -> System.Collections.Generic.IEnumerable<System.Tuple<Dynamo.Graph.Nodes.NodeModel, System.Collections.Generic.IEnumerable<ProtoCore.AST.AssociativeAST.AssociativeNode>>>
Dynamo.Engine.CodeGeneration.CompilationContext
Dynamo.Engine.CodeGeneration.CompilationContext.DeltaExecution = 1 -> Dynamo.Engine.CodeGeneration.CompilationContext
Dynamo.Engine.CodeGeneration.CompilationContext.NodeToCode = 2 -> Dynamo.Engine.CodeGeneration.CompilationContext
Dynamo.Engine.CodeGeneration.CompilationContext.None = 0 -> Dynamo.Engine.CodeGeneration.CompilationContext
Dynamo.Engine.CodeGeneration.CompilationContext.PreviewGraph = 3 -> Dynamo.Engine.CodeGeneration.CompilationContext
Dynamo.Engine.CodeGeneration.CompiledEventArgs
Dynamo.Engine.CodeGeneration.CompiledEventArgs.AstNodes.get -> System.Collections.Generic.IEnumerable<ProtoCore.AST.AssociativeAST.AssociativeNode>
Dynamo.Engine.CodeGeneration.CompiledEventArgs.NodeId.get -> System.Guid
Dynamo.Engine.CodeGeneration.CompilingEventArgs
Dynamo.Engine.CodeGeneration.CompilingEventArgs.CompilingEventArgs(System.Guid node) -> void
Dynamo.Engine.CodeGeneration.CompilingEventArgs.NodeId.get -> System.Guid
Dynamo.Engine.CodeGeneration.IAstNodeContainer
Dynamo.Engine.CodeGeneration.IAstNodeContainer.OnCompiled(System.Guid nodeGuid, System.Collections.Generic.IEnumerable<ProtoCore.AST.AssociativeAST.AssociativeNode> astNodes) -> void
Dynamo.Engine.CodeGeneration.IAstNodeContainer.OnCompiling(System.Guid nodeGuid) -> void
Dynamo.Engine.CompilationServices
Dynamo.Engine.CompilationServices.CompilationServices(Dynamo.Engine.LibraryServices libraryServices) -> void
Dynamo.Engine.EngineController
Dynamo.Engine.EngineController.AstBuilt -> Dynamo.Engine.AstBuiltEventHandler
Dynamo.Engine.EngineController.Dispose() -> void
Dynamo.Engine.EngineController.EnableProfiling(bool enable, Dynamo.Graph.Workspaces.HomeWorkspaceModel workspace, System.Collections.Generic.IEnumerable<Dynamo.Graph.Nodes.NodeModel> nodes) -> void
Dynamo.Engine.EngineController.EngineController(Dynamo.Engine.LibraryServices libraryServices, string geometryFactoryFileName, bool verboseLogging) -> void
Dynamo.Engine.EngineController.ExecutionTimeData.get -> Dynamo.Engine.Profiling.IProfilingExecutionTimeData
Dynamo.Engine.EngineController.GetMirror(string variableName) -> ProtoCore.Mirror.RuntimeMirror
Dynamo.Engine.EngineController.HasPendingGraphSyncData.get -> bool
Dynamo.Engine.EngineController.IsDisposed.get -> bool
Dynamo.Engine.EngineController.LibraryServices.get -> Dynamo.Engine.LibraryServices
Dynamo.Engine.EngineController.LiveRunnerCore.get -> ProtoCore.Core
Dynamo.Engine.EngineController.LiveRunnerRuntimeCore.get -> ProtoCore.RuntimeCore
Dynamo.Engine.EngineController.NodeDeleted(Dynamo.Graph.Nodes.NodeModel node) -> void
Dynamo.Engine.EngineController.OnCompiled(System.Guid nodeGuid, System.Collections.Generic.IEnumerable<ProtoCore.AST.AssociativeAST.AssociativeNode> astNodes) -> void
Dynamo.Engine.EngineController.OnCompiling(System.Guid nodeGuid) -> void
Dynamo.Engine.EngineController.VerboseLogging -> bool
Dynamo.Engine.FunctionDescriptor
Dynamo.Engine.FunctionDescriptor.Assembly.get -> string
Dynamo.Engine.FunctionDescriptor.CanUpdatePeriodically.get -> bool
Dynamo.Engine.FunctionDescriptor.Category.get -> string
Dynamo.Engine.FunctionDescriptor.ClassName.get -> string
Dynamo.Engine.FunctionDescriptor.Description.get -> string
Dynamo.Engine.FunctionDescriptor.DisplayName.get -> string
Dynamo.Engine.FunctionDescriptor.FunctionDescriptor(Dynamo.Engine.FunctionDescriptorParams funcDescParams) -> void
Dynamo.Engine.FunctionDescriptor.FunctionName.get -> string
Dynamo.Engine.FunctionDescriptor.InputParameters.get -> System.Collections.Generic.IEnumerable<System.Tuple<string, string>>
Dynamo.Engine.FunctionDescriptor.IsBuiltIn.get -> bool
Dynamo.Engine.FunctionDescriptor.IsLacingDisabled.get -> bool
Dynamo.Engine.FunctionDescriptor.IsObsolete.get -> bool
Dynamo.Engine.FunctionDescriptor.IsOverloaded.get -> bool
Dynamo.Engine.FunctionDescriptor.IsOverloaded.set -> void
Dynamo.Engine.FunctionDescriptor.IsPackageMember.get -> bool
Dynamo.Engine.FunctionDescriptor.IsVarArg.get -> bool
Dynamo.Engine.FunctionDescriptor.IsVisibleInLibrary.get -> bool
Dynamo.Engine.FunctionDescriptor.MangledName.get -> string
Dynamo.Engine.FunctionDescriptor.Namespace.get -> string
Dynamo.Engine.FunctionDescriptor.ObsoleteMessage.get -> string
Dynamo.Engine.FunctionDescriptor.ObsoleteMessage.set -> void
Dynamo.Engine.FunctionDescriptor.Parameters.get -> System.Collections.Generic.IEnumerable<Dynamo.Library.TypedParameter>
Dynamo.Engine.FunctionDescriptor.PathManager.get -> Dynamo.Interfaces.IPathManager
Dynamo.Engine.FunctionDescriptor.QualifiedName.get -> string
Dynamo.Engine.FunctionDescriptor.ReturnKeys.get -> System.Collections.Generic.IEnumerable<string>
Dynamo.Engine.FunctionDescriptor.Returns.get -> System.Collections.Generic.IEnumerable<System.Tuple<string, string>>
Dynamo.Engine.FunctionDescriptor.ReturnType.get -> ProtoCore.Type
Dynamo.Engine.FunctionDescriptor.Signature.get -> string
Dynamo.Engine.FunctionDescriptor.Summary.get -> string
Dynamo.Engine.FunctionDescriptor.Type.get -> Dynamo.Engine.FunctionType
Dynamo.Engine.FunctionDescriptor.UnqualifedClassName.get -> string
Dynamo.Engine.FunctionDescriptor.UserFriendlyName.get -> string
Dynamo.Engine.FunctionDescriptorParams
Dynamo.Engine.FunctionDescriptorParams.Assembly.get -> string
Dynamo.Engine.FunctionDescriptorParams.Assembly.set -> void
Dynamo.Engine.FunctionDescriptorParams.CanUpdatePeriodically.get -> bool
Dynamo.Engine.FunctionDescriptorParams.CanUpdatePeriodically.set -> void
Dynamo.Engine.FunctionDescriptorParams.ClassName.get -> string
Dynamo.Engine.FunctionDescriptorParams.ClassName.set -> void
Dynamo.Engine.FunctionDescriptorParams.FunctionDescriptorParams() -> void
Dynamo.Engine.FunctionDescriptorParams.FunctionName.get -> string
Dynamo.Engine.FunctionDescriptorParams.FunctionName.set -> void
Dynamo.Engine.FunctionDescriptorParams.FunctionType.get -> Dynamo.Engine.FunctionType
Dynamo.Engine.FunctionDescriptorParams.FunctionType.set -> void
Dynamo.Engine.FunctionDescriptorParams.IsBuiltIn.get -> bool
Dynamo.Engine.FunctionDescriptorParams.IsBuiltIn.set -> void
Dynamo.Engine.FunctionDescriptorParams.IsLacingDisabled.get -> bool
Dynamo.Engine.FunctionDescriptorParams.IsLacingDisabled.set -> void
Dynamo.Engine.FunctionDescriptorParams.IsPackageMember.get -> bool
Dynamo.Engine.FunctionDescriptorParams.IsPackageMember.set -> void
Dynamo.Engine.FunctionDescriptorParams.IsVarArg.get -> bool
Dynamo.Engine.FunctionDescriptorParams.IsVarArg.set -> void
Dynamo.Engine.FunctionDescriptorParams.IsVisibleInLibrary.get -> bool
Dynamo.Engine.FunctionDescriptorParams.IsVisibleInLibrary.set -> void
Dynamo.Engine.FunctionDescriptorParams.ObsoleteMsg.get -> string
Dynamo.Engine.FunctionDescriptorParams.ObsoleteMsg.set -> void
Dynamo.Engine.FunctionDescriptorParams.Parameters.get -> System.Collections.Generic.IEnumerable<Dynamo.Library.TypedParameter>
Dynamo.Engine.FunctionDescriptorParams.Parameters.set -> void
Dynamo.Engine.FunctionDescriptorParams.PathManager.get -> Dynamo.Interfaces.IPathManager
Dynamo.Engine.FunctionDescriptorParams.PathManager.set -> void
Dynamo.Engine.FunctionDescriptorParams.ReturnKeys.get -> System.Collections.Generic.IEnumerable<string>
Dynamo.Engine.FunctionDescriptorParams.ReturnKeys.set -> void
Dynamo.Engine.FunctionDescriptorParams.ReturnType.get -> ProtoCore.Type
Dynamo.Engine.FunctionDescriptorParams.ReturnType.set -> void
Dynamo.Engine.FunctionDescriptorParams.Summary.get -> string
Dynamo.Engine.FunctionDescriptorParams.Summary.set -> void
Dynamo.Engine.FunctionGroup
Dynamo.Engine.FunctionGroup.FunctionGroup(string qualifiedName) -> void
Dynamo.Engine.FunctionGroup.Functions.get -> System.Collections.Generic.IEnumerable<Dynamo.Engine.FunctionDescriptor>
Dynamo.Engine.FunctionGroup.QualifiedName.get -> string
Dynamo.Engine.FunctionType
Dynamo.Engine.FunctionType.Constructor = 1 -> Dynamo.Engine.FunctionType
Dynamo.Engine.FunctionType.GenericFunction = 0 -> Dynamo.Engine.FunctionType
Dynamo.Engine.FunctionType.InstanceMethod = 3 -> Dynamo.Engine.FunctionType
Dynamo.Engine.FunctionType.InstanceProperty = 5 -> Dynamo.Engine.FunctionType
Dynamo.Engine.FunctionType.StaticMethod = 2 -> Dynamo.Engine.FunctionType
Dynamo.Engine.FunctionType.StaticProperty = 4 -> Dynamo.Engine.FunctionType
Dynamo.Engine.IFunctionDescriptor
Dynamo.Engine.IFunctionDescriptor.DisplayName.get -> string
Dynamo.Engine.IFunctionDescriptor.FunctionName.get -> string
Dynamo.Engine.IFunctionDescriptor.MangledName.get -> string
Dynamo.Engine.IFunctionDescriptor.Parameters.get -> System.Collections.Generic.IEnumerable<Dynamo.Library.TypedParameter>
Dynamo.Engine.IFunctionDescriptor.ReturnKeys.get -> System.Collections.Generic.IEnumerable<string>
Dynamo.Engine.IFunctionDescriptor.ReturnType.get -> ProtoCore.Type
Dynamo.Engine.ITraceReconciliationProcessor
Dynamo.Engine.ITraceReconciliationProcessor.PostTraceReconciliation(System.Collections.Generic.Dictionary<System.Guid, System.Collections.Generic.List<string>> orphanedSerializables) -> void
Dynamo.Engine.LibraryServices
Dynamo.Engine.LibraryServices.BuiltinFunctionGroups.get -> System.Collections.Generic.IEnumerable<Dynamo.Engine.FunctionGroup>
Dynamo.Engine.LibraryServices.Categories
Dynamo.Engine.LibraryServices.Dispose() -> void
Dynamo.Engine.LibraryServices.GetAllFunctionDescriptors(string qualifiedName) -> System.Collections.Generic.IEnumerable<Dynamo.Engine.FunctionDescriptor>
Dynamo.Engine.LibraryServices.GetFunctionDescriptor(string library, string mangledName) -> Dynamo.Engine.FunctionDescriptor
Dynamo.Engine.LibraryServices.GetFunctionDescriptor(string managledName) -> Dynamo.Engine.FunctionDescriptor
Dynamo.Engine.LibraryServices.GetPriorNames() -> System.Collections.Generic.Dictionary<string, string>
Dynamo.Engine.LibraryServices.ImportedFunctionGroups.get -> System.Collections.Generic.IEnumerable<Dynamo.Engine.FunctionGroup>
Dynamo.Engine.LibraryServices.ImportedLibraries.get -> System.Collections.Generic.IEnumerable<string>
Dynamo.Engine.LibraryServices.LibraryLoaded -> System.EventHandler<Dynamo.Engine.LibraryServices.LibraryLoadedEventArgs>
Dynamo.Engine.LibraryServices.LibraryLoadedEventArgs
Dynamo.Engine.LibraryServices.LibraryLoadedEventArgs.LibraryLoadedEventArgs(System.Collections.Generic.IEnumerable<string> libraryPaths) -> void
Dynamo.Engine.LibraryServices.LibraryLoadedEventArgs.LibraryPaths.get -> System.Collections.Generic.IEnumerable<string>
Dynamo.Engine.LibraryServices.LibraryLoadFailed -> System.EventHandler<Dynamo.Engine.LibraryServices.LibraryLoadFailedEventArgs>
Dynamo.Engine.LibraryServices.LibraryLoadFailedEventArgs
Dynamo.Engine.LibraryServices.LibraryLoadFailedEventArgs.LibraryLoadFailedEventArgs(string libraryPath, string reason, bool throwOnFailure = true) -> void
Dynamo.Engine.LibraryServices.LibraryLoadFailedEventArgs.LibraryPath.get -> string
Dynamo.Engine.LibraryServices.LibraryLoadFailedEventArgs.Reason.get -> string
Dynamo.Engine.LibraryServices.LibraryLoadFailedEventArgs.ThrowOnFailure.get -> bool
Dynamo.Engine.LibraryServices.LibraryLoading -> System.EventHandler<Dynamo.Engine.LibraryServices.LibraryLoadingEventArgs>
Dynamo.Engine.LibraryServices.LibraryLoadingEventArgs
Dynamo.Engine.LibraryServices.LibraryLoadingEventArgs.LibraryLoadingEventArgs(string libraryPath) -> void
Dynamo.Engine.LibraryServices.LibraryLoadingEventArgs.LibraryPath.get -> string
Dynamo.Engine.LibraryServices.LibraryManagementCore.get -> ProtoCore.Core
Dynamo.Engine.LibraryServices.LibraryServices(ProtoCore.Core libraryManagementCore, Dynamo.Interfaces.IPathManager pathManager) -> void
Dynamo.Engine.LibraryServices.LibraryServices(ProtoCore.Core libraryManagementCore, Dynamo.Interfaces.IPathManager pathManager, Dynamo.Interfaces.IPreferences preferences) -> void
Dynamo.Engine.LiveRunnerServices
Dynamo.Engine.LiveRunnerServices.Core.get -> ProtoCore.Core
Dynamo.Engine.LiveRunnerServices.Dispose() -> void
Dynamo.Engine.LiveRunnerServices.LiveRunnerServices(Dynamo.Engine.EngineController controller, string geometryFactoryFileName) -> void
Dynamo.Engine.LiveRunnerServices.RuntimeCore.get -> ProtoCore.RuntimeCore
Dynamo.Engine.NodeToCode.INamingProvider
Dynamo.Engine.NodeToCode.INamingProvider.GetTypeDependentName(ProtoCore.Type type) -> string
Dynamo.Engine.Profiling.IProfilingExecutionTimeData
Dynamo.Engine.Profiling.IProfilingExecutionTimeData.NodeExecutionTime(Dynamo.Graph.Nodes.NodeModel node) -> System.TimeSpan?
Dynamo.Engine.Profiling.IProfilingExecutionTimeData.TotalExecutionTime.get -> System.TimeSpan?
Dynamo.Engine.XmlDocumentationExtensions
Dynamo.Exceptions.CustomNodePackageLoadException
Dynamo.Exceptions.CustomNodePackageLoadException.CustomNodePackageLoadException(string path, string installedPath, string reason) -> void
Dynamo.Exceptions.CustomNodePackageLoadException.InstalledPath.get -> string
Dynamo.Exceptions.LibraryLoadFailedException
Dynamo.Exceptions.LibraryLoadFailedException.LibraryLoadFailedException(string path, string reason) -> void
Dynamo.Exceptions.LibraryLoadFailedException.Path -> string
Dynamo.Exceptions.LibraryLoadFailedException.Reason -> string
Dynamo.Extensions.EnumDescriptionAttribute
Dynamo.Extensions.EnumDescriptionAttribute.EnumDescriptionAttribute(string resourceKey, System.Type resourceType) -> void
Dynamo.Extensions.ExtensionData
Dynamo.Extensions.ExtensionData.Data.get -> System.Collections.Generic.Dictionary<string, string>
Dynamo.Extensions.ExtensionData.Data.set -> void
Dynamo.Extensions.ExtensionData.ExtensionData(string extensionGuid, string name, string version, System.Collections.Generic.Dictionary<string, string> data) -> void
Dynamo.Extensions.ExtensionData.ExtensionGuid.get -> string
Dynamo.Extensions.ExtensionData.Name.get -> string
Dynamo.Extensions.ExtensionData.Version.get -> string
Dynamo.Extensions.ExtensionDefinition
Dynamo.Extensions.ExtensionDefinition.AssemblyPath.get -> string
Dynamo.Extensions.ExtensionDefinition.AssemblyPath.set -> void
Dynamo.Extensions.ExtensionDefinition.ExtensionDefinition() -> void
Dynamo.Extensions.ExtensionDefinition.TypeName.get -> string
Dynamo.Extensions.ExtensionDefinition.TypeName.set -> void
Dynamo.Extensions.ExtensionLibraryLoader
Dynamo.Extensions.ExtensionLibraryLoader.LoadNodeLibrary(System.Reflection.Assembly library) -> void
Dynamo.Extensions.ExtensionLibraryLoader.LoadPackages(System.Collections.Generic.IEnumerable<System.Reflection.Assembly> assemblies) -> void
Dynamo.Extensions.ExtensionLoader
Dynamo.Extensions.ExtensionLoader.ExtensionLoader() -> void
Dynamo.Extensions.ExtensionLoader.ExtensionLoading -> System.Action<Dynamo.Extensions.IExtension>
Dynamo.Extensions.ExtensionLoader.Load(string extensionPath) -> Dynamo.Extensions.IExtension
Dynamo.Extensions.ExtensionLoader.LoadDirectory(string extensionsPath) -> System.Collections.Generic.IEnumerable<Dynamo.Extensions.IExtension>
Dynamo.Extensions.ExtensionLoader.MessageLogged -> System.Action<Dynamo.Logging.ILogMessage>
Dynamo.Extensions.ExtensionManager
Dynamo.Extensions.ExtensionManager.Add(Dynamo.Extensions.IExtension extension) -> void
Dynamo.Extensions.ExtensionManager.Dispose() -> void
Dynamo.Extensions.ExtensionManager.ExtensionAdded -> System.Action<Dynamo.Extensions.IExtension>
Dynamo.Extensions.ExtensionManager.ExtensionLoader.get -> Dynamo.Extensions.IExtensionLoader
Dynamo.Extensions.ExtensionManager.ExtensionManager() -> void
Dynamo.Extensions.ExtensionManager.ExtensionManager(System.Collections.Generic.IEnumerable<string> directoriesToVerify) -> void
Dynamo.Extensions.ExtensionManager.ExtensionRemoved -> System.Action<Dynamo.Extensions.IExtension>
Dynamo.Extensions.ExtensionManager.Extensions.get -> System.Collections.Generic.IEnumerable<Dynamo.Extensions.IExtension>
Dynamo.Extensions.ExtensionManager.GetService(System.Type serviceType) -> object
Dynamo.Extensions.ExtensionManager.MessageLogged -> System.Action<Dynamo.Logging.ILogMessage>
Dynamo.Extensions.ExtensionManager.RegisterService<T>(T service) -> string
Dynamo.Extensions.ExtensionManager.Remove(Dynamo.Extensions.IExtension extension) -> void
Dynamo.Extensions.ExtensionManager.Service<T>() -> T
Dynamo.Extensions.ExtensionManager.StorageAccessExtensions.get -> System.Collections.Generic.IEnumerable<Dynamo.Extensions.IExtensionStorageAccess>
Dynamo.Extensions.ExtensionManager.UnregisterService<T>(string serviceKey) -> bool
Dynamo.Extensions.ICommandExecutive
Dynamo.Extensions.ICommandExecutive.ExecuteCommand(Dynamo.Models.DynamoModel.RecordableCommand command, string uniqueId, string extensionName) -> void
Dynamo.Extensions.IExtension
Dynamo.Extensions.IExtension.Name.get -> string
Dynamo.Extensions.IExtension.Ready(Dynamo.Extensions.ReadyParams sp) -> void
Dynamo.Extensions.IExtension.Shutdown() -> void
Dynamo.Extensions.IExtension.Startup(Dynamo.Extensions.StartupParams sp) -> void
Dynamo.Extensions.IExtension.UniqueId.get -> string
Dynamo.Extensions.IExtensionLoader
Dynamo.Extensions.IExtensionLoader.ExtensionLoading -> System.Action<Dynamo.Extensions.IExtension>
Dynamo.Extensions.IExtensionLoader.Load(string extensionPath) -> Dynamo.Extensions.IExtension
Dynamo.Extensions.IExtensionLoader.LoadDirectory(string extensionsPath) -> System.Collections.Generic.IEnumerable<Dynamo.Extensions.IExtension>
Dynamo.Extensions.IExtensionManager
Dynamo.Extensions.IExtensionManager.Add(Dynamo.Extensions.IExtension extension) -> void
Dynamo.Extensions.IExtensionManager.ExtensionAdded -> System.Action<Dynamo.Extensions.IExtension>
Dynamo.Extensions.IExtensionManager.ExtensionLoader.get -> Dynamo.Extensions.IExtensionLoader
Dynamo.Extensions.IExtensionManager.ExtensionRemoved -> System.Action<Dynamo.Extensions.IExtension>
Dynamo.Extensions.IExtensionManager.Extensions.get -> System.Collections.Generic.IEnumerable<Dynamo.Extensions.IExtension>
Dynamo.Extensions.IExtensionManager.Remove(Dynamo.Extensions.IExtension extension) -> void
Dynamo.Extensions.IExtensionSource
Dynamo.Extensions.IExtensionSource.RequestAddExtension -> System.Action<Dynamo.Extensions.IExtension>
Dynamo.Extensions.IExtensionSource.RequestedExtensions.get -> System.Collections.Generic.IEnumerable<Dynamo.Extensions.IExtension>
Dynamo.Extensions.IExtensionSource.RequestLoadExtension -> System.Func<string, Dynamo.Extensions.IExtension>
Dynamo.Extensions.IExtensionStorageAccess
Dynamo.Extensions.IExtensionStorageAccess.Name.get -> string
Dynamo.Extensions.IExtensionStorageAccess.OnWorkspaceOpen(System.Collections.Generic.Dictionary<string, string> extensionData) -> void
Dynamo.Extensions.IExtensionStorageAccess.OnWorkspaceSaving(System.Collections.Generic.Dictionary<string, string> extensionData, Dynamo.Graph.SaveContext saveContext) -> void
Dynamo.Extensions.IExtensionStorageAccess.UniqueId.get -> string
Dynamo.Extensions.IServiceManager
Dynamo.Extensions.IServiceManager.RegisterService<T>(T service) -> string
Dynamo.Extensions.IServiceManager.Service<T>() -> T
Dynamo.Extensions.IServiceManager.UnregisterService<T>(string serviceKey) -> bool
Dynamo.Extensions.LinterExtensionBase
Dynamo.Extensions.LinterExtensionBase.AddLinterRule(Dynamo.Linting.Rules.LinterRule linterRule) -> void
Dynamo.Extensions.LinterExtensionBase.IsActive.get -> bool
Dynamo.Extensions.LinterExtensionBase.LinterExtensionBase() -> void
Dynamo.Extensions.LinterExtensionBase.LinterRules.get -> System.Collections.Generic.HashSet<Dynamo.Linting.Rules.LinterRule>
Dynamo.Extensions.LinterExtensionBase.ReadyParamsRef.get -> Dynamo.Extensions.ReadyParams
Dynamo.Extensions.LinterExtensionBase.RemoveLinterRule(Dynamo.Linting.Rules.LinterRule linterRule) -> void
Dynamo.Extensions.ReadyParams
Dynamo.Extensions.ReadyParams.CurrentWorkspaceChanged -> System.Action<Dynamo.Graph.Workspaces.IWorkspaceModel>
Dynamo.Extensions.ReadyParams.CurrentWorkspaceCleared -> System.Action<Dynamo.Graph.Workspaces.IWorkspaceModel>
Dynamo.Extensions.ReadyParams.CurrentWorkspaceClearingStarted -> System.Action<Dynamo.Graph.Workspaces.IWorkspaceModel>
Dynamo.Extensions.ReadyParams.CurrentWorkspaceModel.get -> Dynamo.Graph.Workspaces.IWorkspaceModel
Dynamo.Extensions.ReadyParams.CurrentWorkspaceOpened -> System.Action<Dynamo.Graph.Workspaces.IWorkspaceModel>
Dynamo.Extensions.ReadyParams.CurrentWorkspaceRemoveStarted -> System.Action<Dynamo.Graph.Workspaces.IWorkspaceModel>
Dynamo.Extensions.ReadyParams.Dispose() -> void
Dynamo.Extensions.ReadyParams.NotificationRecieved -> System.Action<Dynamo.Logging.NotificationMessage>
Dynamo.Extensions.ReadyParams.StartupParams.get -> Dynamo.Extensions.StartupParams
Dynamo.Extensions.ReadyParams.WorkspaceModels.get -> System.Collections.Generic.IEnumerable<Dynamo.Graph.Workspaces.IWorkspaceModel>
Dynamo.Extensions.StartupParams
Dynamo.Extensions.StartupParams.AuthProvider.get -> Greg.IAuthProvider
Dynamo.Extensions.StartupParams.CustomNodeManager.get -> Dynamo.Graph.Nodes.CustomNodes.ICustomNodeManager
Dynamo.Extensions.StartupParams.DynamoVersion.get -> System.Version
Dynamo.Extensions.StartupParams.LibraryLoader.get -> Dynamo.Library.ILibraryLoader
Dynamo.Extensions.StartupParams.LinterManager.get -> Dynamo.Linting.LinterManager
Dynamo.Extensions.StartupParams.NoNetworkMode.get -> bool
Dynamo.Extensions.StartupParams.PathManager.get -> Dynamo.Interfaces.IPathManager
Dynamo.Extensions.StartupParams.Preferences.get -> Dynamo.Interfaces.IPreferences
Dynamo.Graph.Annotations.AnnotationModel
Dynamo.Graph.Annotations.AnnotationModel.AnnotationDescriptionText.get -> string
Dynamo.Graph.Annotations.AnnotationModel.AnnotationDescriptionText.set -> void
Dynamo.Graph.Annotations.AnnotationModel.AnnotationModel(System.Collections.Generic.IEnumerable<Dynamo.Graph.Nodes.NodeModel> nodes, System.Collections.Generic.IEnumerable<Dynamo.Graph.Notes.NoteModel> notes) -> void
Dynamo.Graph.Annotations.AnnotationModel.AnnotationModel(System.Collections.Generic.IEnumerable<Dynamo.Graph.Nodes.NodeModel> nodes, System.Collections.Generic.IEnumerable<Dynamo.Graph.Notes.NoteModel> notes, System.Collections.Generic.IEnumerable<Dynamo.Graph.Annotations.AnnotationModel> groups) -> void
Dynamo.Graph.Annotations.AnnotationModel.AnnotationText.get -> string
Dynamo.Graph.Annotations.AnnotationModel.AnnotationText.set -> void
Dynamo.Graph.Annotations.AnnotationModel.Background.get -> string
Dynamo.Graph.Annotations.AnnotationModel.Background.set -> void
Dynamo.Graph.Annotations.AnnotationModel.ContainsModel(Dynamo.Graph.ModelBase modelBase) -> bool
Dynamo.Graph.Annotations.AnnotationModel.DeletedModelBases.get -> System.Collections.Generic.List<Dynamo.Graph.ModelBase>
Dynamo.Graph.Annotations.AnnotationModel.DeletedModelBases.set -> void
Dynamo.Graph.Annotations.AnnotationModel.FontSize.get -> double
Dynamo.Graph.Annotations.AnnotationModel.FontSize.set -> void
Dynamo.Graph.Annotations.AnnotationModel.GroupBackground -> string
Dynamo.Graph.Annotations.AnnotationModel.GroupState.get -> Dynamo.Graph.Nodes.ElementState
Dynamo.Graph.Annotations.AnnotationModel.GroupStyleId.get -> System.Guid
Dynamo.Graph.Annotations.AnnotationModel.GroupStyleId.set -> void
Dynamo.Graph.Annotations.AnnotationModel.HasNestedGroups.get -> bool
Dynamo.Graph.Annotations.AnnotationModel.HeightAdjustment.get -> double
Dynamo.Graph.Annotations.AnnotationModel.HeightAdjustment.set -> void
Dynamo.Graph.Annotations.AnnotationModel.InitialHeight.get -> double
Dynamo.Graph.Annotations.AnnotationModel.InitialHeight.set -> void
Dynamo.Graph.Annotations.AnnotationModel.InitialTop.get -> double
Dynamo.Graph.Annotations.AnnotationModel.InitialTop.set -> void
Dynamo.Graph.Annotations.AnnotationModel.IsExpanded.get -> bool
Dynamo.Graph.Annotations.AnnotationModel.IsExpanded.set -> void
Dynamo.Graph.Annotations.AnnotationModel.IsVisible.get -> bool
Dynamo.Graph.Annotations.AnnotationModel.loadFromXML.get -> bool
Dynamo.Graph.Annotations.AnnotationModel.loadFromXML.set -> void
Dynamo.Graph.Annotations.AnnotationModel.ModelAreaHeight.get -> double
Dynamo.Graph.Annotations.AnnotationModel.ModelAreaHeight.set -> void
Dynamo.Graph.Annotations.AnnotationModel.ModelBaseRequested -> System.Func<System.Guid, Dynamo.Graph.ModelBase>
Dynamo.Graph.Annotations.AnnotationModel.Nodes.get -> System.Collections.Generic.IEnumerable<Dynamo.Graph.ModelBase>
Dynamo.Graph.Annotations.AnnotationModel.Nodes.set -> void
Dynamo.Graph.Annotations.AnnotationModel.PinnedNode.get -> Dynamo.Graph.Nodes.NodeModel
Dynamo.Graph.Annotations.AnnotationModel.PinnedNode.set -> void
Dynamo.Graph.Annotations.AnnotationModel.Text.get -> string
Dynamo.Graph.Annotations.AnnotationModel.Text.set -> void
Dynamo.Graph.Annotations.AnnotationModel.TextBlockHeight.get -> double
Dynamo.Graph.Annotations.AnnotationModel.TextBlockHeight.set -> void
Dynamo.Graph.Annotations.AnnotationModel.TextMaxWidth.get -> double
Dynamo.Graph.Annotations.AnnotationModel.TextMaxWidth.set -> void
Dynamo.Graph.Annotations.AnnotationModel.WidthAdjustment.get -> double
Dynamo.Graph.Annotations.AnnotationModel.WidthAdjustment.set -> void
Dynamo.Graph.ConnectorPinModel
Dynamo.Graph.ConnectorPinModel.ConnectorId.get -> System.Guid
Dynamo.Graph.ConnectorPinModel.ConnectorId.set -> void
Dynamo.Graph.ConnectorPinModel.ConnectorPinModel(double x, double y, System.Guid id, System.Guid connectorId) -> void
Dynamo.Graph.Connectors.ConnectorModel
Dynamo.Graph.Connectors.ConnectorModel.ConnectorModel(Dynamo.Graph.Nodes.PortModel start, Dynamo.Graph.Nodes.PortModel end, System.Guid guid) -> void
Dynamo.Graph.Connectors.ConnectorModel.ConnectorPinModels.get -> System.Collections.ObjectModel.ObservableCollection<Dynamo.Graph.ConnectorPinModel>
Dynamo.Graph.Connectors.ConnectorModel.Deleted -> System.Action
Dynamo.Graph.Connectors.ConnectorModel.End.get -> Dynamo.Graph.Nodes.PortModel
Dynamo.Graph.Connectors.ConnectorModel.IsHidden.get -> bool
Dynamo.Graph.Connectors.ConnectorModel.IsHidden.set -> void
Dynamo.Graph.Connectors.ConnectorModel.Start.get -> Dynamo.Graph.Nodes.PortModel
Dynamo.Graph.Connectors.ConnectorType
Dynamo.Graph.Connectors.ConnectorType.BEZIER = 0 -> Dynamo.Graph.Connectors.ConnectorType
Dynamo.Graph.Connectors.ConnectorType.POLYLINE = 1 -> Dynamo.Graph.Connectors.ConnectorType
Dynamo.Graph.ILocatable
Dynamo.Graph.ILocatable.CenterX.get -> double
Dynamo.Graph.ILocatable.CenterX.set -> void
Dynamo.Graph.ILocatable.CenterY.get -> double
Dynamo.Graph.ILocatable.CenterY.set -> void
Dynamo.Graph.ILocatable.Height.get -> double
Dynamo.Graph.ILocatable.Height.set -> void
Dynamo.Graph.ILocatable.Rect.get -> Dynamo.Utilities.Rect2D
Dynamo.Graph.ILocatable.ReportPosition() -> void
Dynamo.Graph.ILocatable.Width.get -> double
Dynamo.Graph.ILocatable.Width.set -> void
Dynamo.Graph.ILocatable.X.get -> double
Dynamo.Graph.ILocatable.X.set -> void
Dynamo.Graph.ILocatable.Y.get -> double
Dynamo.Graph.ILocatable.Y.set -> void
Dynamo.Graph.ModelBase
Dynamo.Graph.ModelBase.CenterX.get -> double
Dynamo.Graph.ModelBase.CenterX.set -> void
Dynamo.Graph.ModelBase.CenterY.get -> double
Dynamo.Graph.ModelBase.CenterY.set -> void
Dynamo.Graph.ModelBase.DeletionStarted -> System.EventHandler<System.ComponentModel.CancelEventArgs>
Dynamo.Graph.ModelBase.Deserialize(System.Xml.XmlElement element, Dynamo.Graph.SaveContext context) -> void
Dynamo.Graph.ModelBase.Disposed -> System.Action<Dynamo.Graph.ModelBase>
Dynamo.Graph.ModelBase.IsSelected.get -> bool
Dynamo.Graph.ModelBase.IsSelected.set -> void
Dynamo.Graph.ModelBase.Log(Dynamo.Logging.ILogMessage obj) -> void
Dynamo.Graph.ModelBase.Log(string msg) -> void
Dynamo.Graph.ModelBase.Log(string msg, Dynamo.Logging.WarningLevel severity) -> void
Dynamo.Graph.ModelBase.MessageLogged -> System.Action<Dynamo.Logging.ILogMessage>
Dynamo.Graph.ModelBase.ModelBase() -> void
Dynamo.Graph.ModelBase.Position.get -> Dynamo.Utilities.Point2D
Dynamo.Graph.ModelBase.ReportPosition() -> void
Dynamo.Graph.ModelBase.Serialize(System.Xml.XmlDocument xmlDocument, Dynamo.Graph.SaveContext context) -> System.Xml.XmlElement
Dynamo.Graph.ModelBase.SetSize(double w, double h) -> void
Dynamo.Graph.ModelBase.UpdateValue(Dynamo.Graph.UpdateValueParams updateValueParams) -> bool
Dynamo.Graph.ModelBase.X.get -> double
Dynamo.Graph.ModelBase.X.set -> void
Dynamo.Graph.ModelBase.Y.get -> double
Dynamo.Graph.ModelBase.Y.set -> void
Dynamo.Graph.NodeGraph
Dynamo.Graph.NodeGraph.Annotations.get -> System.Collections.Generic.List<Dynamo.Graph.Annotations.AnnotationModel>
Dynamo.Graph.NodeGraph.Connectors.get -> System.Collections.Generic.List<Dynamo.Graph.Connectors.ConnectorModel>
Dynamo.Graph.NodeGraph.ElementResolver.get -> ProtoCore.Namespace.ElementResolver
Dynamo.Graph.NodeGraph.Nodes.get -> System.Collections.Generic.List<Dynamo.Graph.Nodes.NodeModel>
Dynamo.Graph.NodeGraph.Notes.get -> System.Collections.Generic.List<Dynamo.Graph.Notes.NoteModel>
Dynamo.Graph.NodeGraph.Presets.get -> System.Collections.Generic.List<Dynamo.Graph.Presets.PresetModel>
Dynamo.Graph.Nodes.AlsoKnownAsAttribute
Dynamo.Graph.Nodes.AlsoKnownAsAttribute.AlsoKnownAsAttribute(params string[] values) -> void
Dynamo.Graph.Nodes.AlsoKnownAsAttribute.Values.get -> string[]
Dynamo.Graph.Nodes.AlsoKnownAsAttribute.Values.set -> void
Dynamo.Graph.Nodes.BuiltinNodeCategories
Dynamo.Graph.Nodes.CodeBlockNodeModel
Dynamo.Graph.Nodes.CodeBlockNodeModel.Code.get -> string
Dynamo.Graph.Nodes.CodeBlockNodeModel.CodeBlockNodeModel() -> void
Dynamo.Graph.Nodes.CodeBlockNodeModel.CodeBlockNodeModel(Dynamo.Engine.LibraryServices libraryServices) -> void
Dynamo.Graph.Nodes.CodeBlockNodeModel.CodeBlockNodeModel(string code, double x, double y, Dynamo.Engine.LibraryServices libraryServices, ProtoCore.Namespace.ElementResolver resolver) -> void
Dynamo.Graph.Nodes.CodeBlockNodeModel.CodeBlockNodeModel(string userCode, System.Guid guid, double xPos, double yPos, Dynamo.Engine.LibraryServices libraryServices, ProtoCore.Namespace.ElementResolver resolver) -> void
Dynamo.Graph.Nodes.CodeBlockNodeModel.CodeStatements.get -> System.Collections.Generic.IEnumerable<Dynamo.Graph.Nodes.Statement>
Dynamo.Graph.Nodes.CodeBlockNodeModel.ElementResolver.get -> ProtoCore.Namespace.ElementResolver
Dynamo.Graph.Nodes.CodeBlockNodeModel.ElementResolver.set -> void
Dynamo.Graph.Nodes.CodeBlockNodeModel.GetRawAstIdentifierForOutputIndex(int portIndex) -> ProtoCore.AST.AssociativeAST.IdentifierNode
Dynamo.Graph.Nodes.CodeBlockNodeModel.SetCodeContent(string newCode, ProtoCore.Namespace.ElementResolver workspaceElementResolver) -> void
Dynamo.Graph.Nodes.CodeBlockNodeModel.ShouldFocus.get -> bool
Dynamo.Graph.Nodes.CodeBlockUtils
Dynamo.Graph.Nodes.CustomNodes.CustomNodeController<T>
Dynamo.Graph.Nodes.CustomNodes.CustomNodeController<T>.CustomNodeController(T def) -> void
Dynamo.Graph.Nodes.CustomNodes.CustomNodeController<T>.IsInSyncWithNode(Dynamo.Graph.Nodes.NodeModel model) -> bool
Dynamo.Graph.Nodes.CustomNodes.Function
Dynamo.Graph.Nodes.CustomNodes.Function.Definition.get -> Dynamo.CustomNodeDefinition
Dynamo.Graph.Nodes.CustomNodes.Function.Function(Dynamo.CustomNodeDefinition def, string name, string description, string category) -> void
Dynamo.Graph.Nodes.CustomNodes.Function.FunctionSignature.get -> System.Guid
Dynamo.Graph.Nodes.CustomNodes.Function.FunctionType.get -> string
Dynamo.Graph.Nodes.CustomNodes.Function.ResyncWithDefinition(Dynamo.CustomNodeDefinition def) -> void
Dynamo.Graph.Nodes.CustomNodes.Function.UpdatePortsForUnresolved(Dynamo.Graph.Nodes.PortModel[] inputs, Dynamo.Graph.Nodes.PortModel[] outputs) -> void
Dynamo.Graph.Nodes.CustomNodes.ICustomNodeManager
Dynamo.Graph.Nodes.CustomNodes.ICustomNodeManager.AddUninitializedCustomNodesInPath(string path, bool isTestMode, bool isPackageMember = false) -> System.Collections.Generic.IEnumerable<Dynamo.CustomNodeInfo>
Dynamo.Graph.Nodes.CustomNodes.ICustomNodeManager.GuidFromPath(string path) -> System.Guid
Dynamo.Graph.Nodes.CustomNodes.ICustomNodeManager.TryGetFunctionWorkspace(System.Guid id, bool isTestMode, out Dynamo.Graph.Workspaces.ICustomNodeWorkspaceModel ws) -> bool
Dynamo.Graph.Nodes.CustomNodes.ICustomNodeSource
Dynamo.Graph.Nodes.CustomNodes.ICustomNodeSource.CreateCustomNodeInstance(System.Guid id, string name = null, bool isTestMode = false) -> Dynamo.Graph.Nodes.CustomNodes.Function
Dynamo.Graph.Nodes.CustomNodes.Output
Dynamo.Graph.Nodes.CustomNodes.Output.ElementResolver.get -> ProtoCore.Namespace.ElementResolver
Dynamo.Graph.Nodes.CustomNodes.Output.ElementResolver.set -> void
Dynamo.Graph.Nodes.CustomNodes.Output.Output() -> void
Dynamo.Graph.Nodes.CustomNodes.Output.Output(System.Collections.Generic.IEnumerable<Dynamo.Graph.Nodes.PortModel> inPorts, System.Collections.Generic.IEnumerable<Dynamo.Graph.Nodes.PortModel> outPorts) -> void
Dynamo.Graph.Nodes.CustomNodes.Output.Return.get -> System.Tuple<string, string>
Dynamo.Graph.Nodes.CustomNodes.Output.Symbol.get -> string
Dynamo.Graph.Nodes.CustomNodes.Output.Symbol.set -> void
Dynamo.Graph.Nodes.CustomNodes.Symbol
Dynamo.Graph.Nodes.CustomNodes.Symbol.ElementResolver.get -> ProtoCore.Namespace.ElementResolver
Dynamo.Graph.Nodes.CustomNodes.Symbol.ElementResolver.set -> void
Dynamo.Graph.Nodes.CustomNodes.Symbol.InputSymbol.get -> string
Dynamo.Graph.Nodes.CustomNodes.Symbol.InputSymbol.set -> void
Dynamo.Graph.Nodes.CustomNodes.Symbol.Parameter.get -> Dynamo.Library.TypedParameter
Dynamo.Graph.Nodes.CustomNodes.Symbol.Symbol() -> void
Dynamo.Graph.Nodes.CustomNodes.Symbol.Symbol(System.Collections.Generic.IEnumerable<Dynamo.Graph.Nodes.PortModel> inPorts, System.Collections.Generic.IEnumerable<Dynamo.Graph.Nodes.PortModel> outPorts, Dynamo.Library.TypedParameter parameter, ProtoCore.Namespace.ElementResolver elementResolver) -> void
Dynamo.Graph.Nodes.DoNotLoadOnPlatformsAttribute
Dynamo.Graph.Nodes.DoNotLoadOnPlatformsAttribute.DoNotLoadOnPlatformsAttribute(params string[] values) -> void
Dynamo.Graph.Nodes.DoNotLoadOnPlatformsAttribute.Values.get -> string[]
Dynamo.Graph.Nodes.DoNotLoadOnPlatformsAttribute.Values.set -> void
Dynamo.Graph.Nodes.DummyNode
Dynamo.Graph.Nodes.DummyNode.DummyNode() -> void
Dynamo.Graph.Nodes.DummyNode.DummyNode(int inputCount, int outputCount, string legacyName, System.Xml.XmlElement originalElement, string legacyAssembly, Dynamo.Graph.Nodes.DummyNode.Nature nodeNature) -> void
Dynamo.Graph.Nodes.DummyNode.DummyNode(string id, int inputCount, int outputCount, string legacyAssembly, Newtonsoft.Json.Linq.JObject originalElement) -> void
Dynamo.Graph.Nodes.DummyNode.DummyNode(string id, int inputCount, int outputCount, string legacyAssembly, string functionName, Newtonsoft.Json.Linq.JObject originalElement) -> void
Dynamo.Graph.Nodes.DummyNode.DummyNode(string id, int inputCount, int outputCount, string legacyAssembly, string functionName, string typeName, Newtonsoft.Json.Linq.JObject originalElement) -> void
Dynamo.Graph.Nodes.DummyNode.FunctionName.get -> string
Dynamo.Graph.Nodes.DummyNode.InputCount.get -> int
Dynamo.Graph.Nodes.DummyNode.LegacyAssembly.get -> string
Dynamo.Graph.Nodes.DummyNode.LegacyFullName.get -> string
Dynamo.Graph.Nodes.DummyNode.LegacyNodeName.get -> string
Dynamo.Graph.Nodes.DummyNode.Nature
Dynamo.Graph.Nodes.DummyNode.Nature.Deprecated = 0 -> Dynamo.Graph.Nodes.DummyNode.Nature
Dynamo.Graph.Nodes.DummyNode.Nature.Unresolved = 1 -> Dynamo.Graph.Nodes.DummyNode.Nature
Dynamo.Graph.Nodes.DummyNode.NodeNature.get -> Dynamo.Graph.Nodes.DummyNode.Nature
Dynamo.Graph.Nodes.DummyNode.OriginalNodeContent.get -> object
Dynamo.Graph.Nodes.DummyNode.OutputCount.get -> int
Dynamo.Graph.Nodes.DummyNode.TypeName.get -> string
Dynamo.Graph.Nodes.ElementState
Dynamo.Graph.Nodes.ElementState.Active = 1 -> Dynamo.Graph.Nodes.ElementState
Dynamo.Graph.Nodes.ElementState.AstBuildBroken = 5 -> Dynamo.Graph.Nodes.ElementState
Dynamo.Graph.Nodes.ElementState.Dead = 0 -> Dynamo.Graph.Nodes.ElementState
Dynamo.Graph.Nodes.ElementState.Error = 4 -> Dynamo.Graph.Nodes.ElementState
Dynamo.Graph.Nodes.ElementState.Info = 6 -> Dynamo.Graph.Nodes.ElementState
Dynamo.Graph.Nodes.ElementState.MigratedFormula = 8 -> Dynamo.Graph.Nodes.ElementState
Dynamo.Graph.Nodes.ElementState.PersistentInfo = 7 -> Dynamo.Graph.Nodes.ElementState
Dynamo.Graph.Nodes.ElementState.PersistentWarning = 3 -> Dynamo.Graph.Nodes.ElementState
Dynamo.Graph.Nodes.ElementState.Warning = 2 -> Dynamo.Graph.Nodes.ElementState
Dynamo.Graph.Nodes.FunctionCallBase<TController, TDescriptor>
Dynamo.Graph.Nodes.FunctionCallBase<TController, TDescriptor>.Controller.get -> TController
Dynamo.Graph.Nodes.FunctionCallBase<TController, TDescriptor>.FunctionCallBase(TController controller) -> void
Dynamo.Graph.Nodes.FunctionCallNodeController<T>
Dynamo.Graph.Nodes.FunctionCallNodeController<T>.BuildAst(Dynamo.Graph.Nodes.NodeModel model, System.Collections.Generic.List<ProtoCore.AST.AssociativeAST.AssociativeNode> inputAstNodes) -> System.Collections.Generic.IEnumerable<ProtoCore.AST.AssociativeAST.AssociativeNode>
Dynamo.Graph.Nodes.FunctionCallNodeController<T>.Definition.get -> T
Dynamo.Graph.Nodes.FunctionCallNodeController<T>.Definition.set -> void
Dynamo.Graph.Nodes.FunctionCallNodeController<T>.FunctionCallNodeController(T definition) -> void
Dynamo.Graph.Nodes.FunctionCallNodeController<T>.Name.get -> string
Dynamo.Graph.Nodes.FunctionCallNodeController<T>.SyncWithDefinitionEnd -> System.Action<Dynamo.Graph.Nodes.NodeModel>
Dynamo.Graph.Nodes.FunctionCallNodeController<T>.SyncWithDefinitionStart -> System.Action<Dynamo.Graph.Nodes.NodeModel>
Dynamo.Graph.Nodes.Info
Dynamo.Graph.Nodes.Info.Message -> string
Dynamo.Graph.Nodes.Info.State -> Dynamo.Graph.Nodes.ElementState
Dynamo.Graph.Nodes.InPortDescriptionsAttribute
Dynamo.Graph.Nodes.InPortDescriptionsAttribute.InPortDescriptionsAttribute(params string[] descriptions) -> void
Dynamo.Graph.Nodes.InPortDescriptionsAttribute.InPortDescriptionsAttribute(System.Type resourceType, params string[] resourceNames) -> void
Dynamo.Graph.Nodes.InPortDescriptionsAttribute.PortDescriptions.get -> System.Collections.Generic.IEnumerable<string>
Dynamo.Graph.Nodes.InPortNamesAttribute
Dynamo.Graph.Nodes.InPortNamesAttribute.InPortNamesAttribute(params string[] names) -> void
Dynamo.Graph.Nodes.InPortNamesAttribute.InPortNamesAttribute(System.Type resourceType, params string[] resourceNames) -> void
Dynamo.Graph.Nodes.InPortNamesAttribute.PortNames.get -> System.Collections.Generic.IEnumerable<string>
Dynamo.Graph.Nodes.InPortTypesAttribute
Dynamo.Graph.Nodes.InPortTypesAttribute.InPortTypesAttribute(params string[] types) -> void
Dynamo.Graph.Nodes.InPortTypesAttribute.InPortTypesAttribute(System.Type resourceType, params string[] resourceNames) -> void
Dynamo.Graph.Nodes.InPortTypesAttribute.PortTypes.get -> System.Collections.Generic.IEnumerable<string>
Dynamo.Graph.Nodes.IsDesignScriptCompatibleAttribute
Dynamo.Graph.Nodes.IsDesignScriptCompatibleAttribute.IsDesignScriptCompatibleAttribute() -> void
Dynamo.Graph.Nodes.IsMetaNodeAttribute
Dynamo.Graph.Nodes.IsMetaNodeAttribute.IsMetaNodeAttribute() -> void
Dynamo.Graph.Nodes.LacingStrategy
Dynamo.Graph.Nodes.LacingStrategy.Auto = 5 -> Dynamo.Graph.Nodes.LacingStrategy
Dynamo.Graph.Nodes.LacingStrategy.CrossProduct = 4 -> Dynamo.Graph.Nodes.LacingStrategy
Dynamo.Graph.Nodes.LacingStrategy.Disabled = 0 -> Dynamo.Graph.Nodes.LacingStrategy
Dynamo.Graph.Nodes.LacingStrategy.First = 1 -> Dynamo.Graph.Nodes.LacingStrategy
Dynamo.Graph.Nodes.LacingStrategy.Longest = 3 -> Dynamo.Graph.Nodes.LacingStrategy
Dynamo.Graph.Nodes.LacingStrategy.Shortest = 2 -> Dynamo.Graph.Nodes.LacingStrategy
Dynamo.Graph.Nodes.NodeCategoryAttribute
Dynamo.Graph.Nodes.NodeCategoryAttribute.ElementCategory.get -> string
Dynamo.Graph.Nodes.NodeCategoryAttribute.ElementCategory.set -> void
Dynamo.Graph.Nodes.NodeCategoryAttribute.NodeCategoryAttribute(string category) -> void
Dynamo.Graph.Nodes.NodeDeprecatedAttribute
Dynamo.Graph.Nodes.NodeDeprecatedAttribute.NodeDeprecatedAttribute() -> void
Dynamo.Graph.Nodes.NodeDescriptionAttribute
Dynamo.Graph.Nodes.NodeDescriptionAttribute.ElementDescription.get -> string
Dynamo.Graph.Nodes.NodeDescriptionAttribute.ElementDescription.set -> void
Dynamo.Graph.Nodes.NodeDescriptionAttribute.NodeDescriptionAttribute(string description) -> void
Dynamo.Graph.Nodes.NodeDescriptionAttribute.NodeDescriptionAttribute(string descriptionResourceID, System.Type resourceType) -> void
Dynamo.Graph.Nodes.NodeInputData
Dynamo.Graph.Nodes.NodeInputData.Choices.get -> System.Collections.Generic.List<string>
Dynamo.Graph.Nodes.NodeInputData.Choices.set -> void
Dynamo.Graph.Nodes.NodeInputData.Description.get -> string
Dynamo.Graph.Nodes.NodeInputData.Description.set -> void
Dynamo.Graph.Nodes.NodeInputData.Id.get -> System.Guid
Dynamo.Graph.Nodes.NodeInputData.Id.set -> void
Dynamo.Graph.Nodes.NodeInputData.MaximumValue.get -> double?
Dynamo.Graph.Nodes.NodeInputData.MaximumValue.set -> void
Dynamo.Graph.Nodes.NodeInputData.MinimumValue.get -> double?
Dynamo.Graph.Nodes.NodeInputData.MinimumValue.set -> void
Dynamo.Graph.Nodes.NodeInputData.Name.get -> string
Dynamo.Graph.Nodes.NodeInputData.Name.set -> void
Dynamo.Graph.Nodes.NodeInputData.NodeInputData() -> void
Dynamo.Graph.Nodes.NodeInputData.NumberType.get -> string
Dynamo.Graph.Nodes.NodeInputData.NumberType.set -> void
Dynamo.Graph.Nodes.NodeInputData.SelectedIndex.get -> int?
Dynamo.Graph.Nodes.NodeInputData.SelectedIndex.set -> void
Dynamo.Graph.Nodes.NodeInputData.StepValue.get -> double?
Dynamo.Graph.Nodes.NodeInputData.StepValue.set -> void
Dynamo.Graph.Nodes.NodeInputData.Type.get -> Dynamo.Graph.Nodes.NodeInputTypes
Dynamo.Graph.Nodes.NodeInputData.Type.set -> void
Dynamo.Graph.Nodes.NodeInputData.Type2.get -> Dynamo.Graph.Nodes.NodeInputTypes
Dynamo.Graph.Nodes.NodeInputData.Type2.set -> void
Dynamo.Graph.Nodes.NodeInputData.Value.get -> string
Dynamo.Graph.Nodes.NodeInputData.Value.set -> void
Dynamo.Graph.Nodes.NodeInputTypes
Dynamo.Graph.Nodes.NodeInputTypes.booleanInput = 1 -> Dynamo.Graph.Nodes.NodeInputTypes
Dynamo.Graph.Nodes.NodeInputTypes.colorInput = 3 -> Dynamo.Graph.Nodes.NodeInputTypes
Dynamo.Graph.Nodes.NodeInputTypes.dateInput = 4 -> Dynamo.Graph.Nodes.NodeInputTypes
Dynamo.Graph.Nodes.NodeInputTypes.dropdownSelection = 7 -> Dynamo.Graph.Nodes.NodeInputTypes
Dynamo.Graph.Nodes.NodeInputTypes.hostSelection = 6 -> Dynamo.Graph.Nodes.NodeInputTypes
Dynamo.Graph.Nodes.NodeInputTypes.numberInput = 0 -> Dynamo.Graph.Nodes.NodeInputTypes
Dynamo.Graph.Nodes.NodeInputTypes.selectionInput = 5 -> Dynamo.Graph.Nodes.NodeInputTypes
Dynamo.Graph.Nodes.NodeInputTypes.stringInput = 2 -> Dynamo.Graph.Nodes.NodeInputTypes
Dynamo.Graph.Nodes.NodeLoaders.INodeFactory<T>
Dynamo.Graph.Nodes.NodeLoaders.INodeFactory<T>.CreateNode() -> T
Dynamo.Graph.Nodes.NodeLoaders.INodeLoader<T>
Dynamo.Graph.Nodes.NodeLoaders.INodeLoader<T>.CreateNodeFromXml(System.Xml.XmlElement elNode, Dynamo.Graph.SaveContext context, ProtoCore.Namespace.ElementResolver resolver = null) -> T
Dynamo.Graph.Nodes.NodeLoaders.NodeFactory
Dynamo.Graph.Nodes.NodeLoaders.NodeFactory.NodeFactory() -> void
Dynamo.Graph.Nodes.NodeModel
Dynamo.Graph.Nodes.NodeModel.AllConnectors.get -> System.Collections.Generic.IEnumerable<Dynamo.Graph.Connectors.ConnectorModel>
Dynamo.Graph.Nodes.NodeModel.AreAllOutputsConnected.get -> bool
Dynamo.Graph.Nodes.NodeModel.ArgumentLacing.get -> Dynamo.Graph.Nodes.LacingStrategy
Dynamo.Graph.Nodes.NodeModel.ArgumentLacing.set -> void
Dynamo.Graph.Nodes.NodeModel.AstIdentifierForPreview.get -> ProtoCore.AST.AssociativeAST.IdentifierNode
Dynamo.Graph.Nodes.NodeModel.AstIdentifierGuid.get -> string
Dynamo.Graph.Nodes.NodeModel.CachedValue.get -> ProtoCore.Mirror.MirrorData
Dynamo.Graph.Nodes.NodeModel.CanUpdatePeriodically.get -> bool
Dynamo.Graph.Nodes.NodeModel.CanUpdatePeriodically.set -> void
Dynamo.Graph.Nodes.NodeModel.Category.get -> string
Dynamo.Graph.Nodes.NodeModel.Category.set -> void
Dynamo.Graph.Nodes.NodeModel.ClearDirtyFlag() -> void
Dynamo.Graph.Nodes.NodeModel.ConnectorAdded -> System.Action<Dynamo.Graph.Connectors.ConnectorModel>
Dynamo.Graph.Nodes.NodeModel.Description.get -> string
Dynamo.Graph.Nodes.NodeModel.Description.set -> void
Dynamo.Graph.Nodes.NodeModel.DictionaryLink.get -> string
Dynamo.Graph.Nodes.NodeModel.DictionaryLink.set -> void
Dynamo.Graph.Nodes.NodeModel.DismissedAlerts.get -> System.Collections.ObjectModel.ObservableCollection<string>
Dynamo.Graph.Nodes.NodeModel.DismissedAlerts.set -> void
Dynamo.Graph.Nodes.NodeModel.DismissedAlertsCount.get -> int
Dynamo.Graph.Nodes.NodeModel.DispatchOnUIThread(System.Action a) -> void
Dynamo.Graph.Nodes.NodeModel.DisplayLabels.get -> bool
Dynamo.Graph.Nodes.NodeModel.DisplayLabels.set -> void
Dynamo.Graph.Nodes.NodeModel.Error(string p) -> void
Dynamo.Graph.Nodes.NodeModel.ExecutionHints
Dynamo.Graph.Nodes.NodeModel.ExecutionHints.ForceExecute = 3 -> Dynamo.Graph.Nodes.NodeModel.ExecutionHints
Dynamo.Graph.Nodes.NodeModel.ExecutionHints.Modified = 1 -> Dynamo.Graph.Nodes.NodeModel.ExecutionHints
Dynamo.Graph.Nodes.NodeModel.ExecutionHints.None = 0 -> Dynamo.Graph.Nodes.NodeModel.ExecutionHints
Dynamo.Graph.Nodes.NodeModel.GetDescriptionStringFromAttributes() -> string
Dynamo.Graph.Nodes.NodeModel.GetValue(int outPortIndex, Dynamo.Engine.EngineController engine) -> ProtoCore.Mirror.MirrorData
Dynamo.Graph.Nodes.NodeModel.Info(string p, bool isPersistent = false) -> void
Dynamo.Graph.Nodes.NodeModel.InPorts.get -> System.Collections.ObjectModel.ObservableCollection<Dynamo.Graph.Nodes.PortModel>
Dynamo.Graph.Nodes.NodeModel.InputNodes.get -> System.Collections.Generic.IDictionary<int, System.Tuple<int, Dynamo.Graph.Nodes.NodeModel>>
Dynamo.Graph.Nodes.NodeModel.IsCustomFunction.get -> bool
Dynamo.Graph.Nodes.NodeModel.IsFrozen.get -> bool
Dynamo.Graph.Nodes.NodeModel.IsFrozen.set -> void
Dynamo.Graph.Nodes.NodeModel.IsInErrorState.get -> bool
Dynamo.Graph.Nodes.NodeModel.IsModified.get -> bool
Dynamo.Graph.Nodes.NodeModel.IsPartiallyApplied.get -> bool
Dynamo.Graph.Nodes.NodeModel.IsSetAsInput.get -> bool
Dynamo.Graph.Nodes.NodeModel.IsSetAsInput.set -> void
Dynamo.Graph.Nodes.NodeModel.IsSetAsOutput.get -> bool
Dynamo.Graph.Nodes.NodeModel.IsSetAsOutput.set -> void
Dynamo.Graph.Nodes.NodeModel.IsTopMostNode.get -> bool
Dynamo.Graph.Nodes.NodeModel.IsVisible.get -> bool
Dynamo.Graph.Nodes.NodeModel.MarkNodeAsModified(bool forceExecute = false) -> void
Dynamo.Graph.Nodes.NodeModel.Modified -> System.Action<Dynamo.Graph.Nodes.NodeModel>
Dynamo.Graph.Nodes.NodeModel.Name.get -> string
Dynamo.Graph.Nodes.NodeModel.Name.set -> void
Dynamo.Graph.Nodes.NodeModel.NeedsForceExecution.get -> bool
Dynamo.Graph.Nodes.NodeModel.NodeExecutionBegin -> System.Action<Dynamo.Graph.Nodes.NodeModel>
Dynamo.Graph.Nodes.NodeModel.NodeExecutionEnd -> System.Action<Dynamo.Graph.Nodes.NodeModel>
Dynamo.Graph.Nodes.NodeModel.NodeInfoMessagesClearing -> System.Action<Dynamo.Graph.Nodes.NodeModel>
Dynamo.Graph.Nodes.NodeModel.NodeInfos.get -> System.Collections.Generic.List<Dynamo.Graph.Nodes.Info>
Dynamo.Graph.Nodes.NodeModel.NodeMessagesClearing -> System.Action<Dynamo.Graph.Nodes.NodeModel>
Dynamo.Graph.Nodes.NodeModel.NodeModel() -> void
Dynamo.Graph.Nodes.NodeModel.NodeModel(System.Collections.Generic.IEnumerable<Dynamo.Graph.Nodes.PortModel> inPorts, System.Collections.Generic.IEnumerable<Dynamo.Graph.Nodes.PortModel> outPorts) -> void
Dynamo.Graph.Nodes.NodeModel.NotifyAstBuildBroken(string p) -> void
Dynamo.Graph.Nodes.NodeModel.OutPorts.get -> System.Collections.ObjectModel.ObservableCollection<Dynamo.Graph.Nodes.PortModel>
Dynamo.Graph.Nodes.NodeModel.OutputNodes.get -> System.Collections.Generic.IDictionary<int, System.Collections.Generic.HashSet<System.Tuple<int, Dynamo.Graph.Nodes.NodeModel>>>
Dynamo.Graph.Nodes.NodeModel.PortConnected -> System.Action<Dynamo.Graph.Nodes.PortModel, Dynamo.Graph.Connectors.ConnectorModel>
Dynamo.Graph.Nodes.NodeModel.PortDisconnected -> System.Action<Dynamo.Graph.Nodes.PortModel>
Dynamo.Graph.Nodes.NodeModel.PreviewPinned.get -> bool
Dynamo.Graph.Nodes.NodeModel.RaisesModificationEvents.get -> bool
Dynamo.Graph.Nodes.NodeModel.RaisesModificationEvents.set -> void
Dynamo.Graph.Nodes.NodeModel.RegisterAllPorts() -> void
Dynamo.Graph.Nodes.NodeModel.RegisterInputPorts(System.Collections.Generic.IEnumerable<Dynamo.Graph.Nodes.PortData> portDatas) -> void
Dynamo.Graph.Nodes.NodeModel.RegisterOutputPorts(System.Collections.Generic.IEnumerable<Dynamo.Graph.Nodes.PortData> portDatas) -> void
Dynamo.Graph.Nodes.NodeModel.RenderPackagesUpdated -> System.Action<Dynamo.Graph.Nodes.NodeModel, Dynamo.Visualization.RenderPackageCache>
Dynamo.Graph.Nodes.NodeModel.RequestRenderPackages -> System.Func<Dynamo.Visualization.RenderPackageCache>
Dynamo.Graph.Nodes.NodeModel.SelectDownstreamNeighbours() -> void
Dynamo.Graph.Nodes.NodeModel.SelectNeighbors() -> void
Dynamo.Graph.Nodes.NodeModel.SelectUpstreamAndDownstreamNeighbours() -> void
Dynamo.Graph.Nodes.NodeModel.SelectUpstreamNeighbours() -> void
Dynamo.Graph.Nodes.NodeModel.SetNameFromNodeNameAttribute() -> void
Dynamo.Graph.Nodes.NodeModel.ShouldDisplayPreview.get -> bool
Dynamo.Graph.Nodes.NodeModel.ShouldDisplayPreviewCore.get -> bool
Dynamo.Graph.Nodes.NodeModel.ShouldDisplayPreviewCore.set -> void
Dynamo.Graph.Nodes.NodeModel.State.get -> Dynamo.Graph.Nodes.ElementState
Dynamo.Graph.Nodes.NodeModel.State.set -> void
Dynamo.Graph.Nodes.NodeModel.Tags.get -> System.Collections.Generic.List<string>
Dynamo.Graph.Nodes.NodeModel.TryGetInput(int data, out System.Tuple<int, Dynamo.Graph.Nodes.NodeModel> input) -> bool
Dynamo.Graph.Nodes.NodeModel.TryGetOutput(int output, out System.Collections.Generic.HashSet<System.Tuple<int, Dynamo.Graph.Nodes.NodeModel>> newOutputs) -> bool
Dynamo.Graph.Nodes.NodeModel.UpdateASTCollection -> System.Action<Dynamo.Graph.Nodes.NodeModel>
Dynamo.Graph.Nodes.NodeModel.UseLevelAndReplicationGuide(System.Collections.Generic.List<ProtoCore.AST.AssociativeAST.AssociativeNode> inputs) -> void
Dynamo.Graph.Nodes.NodeModel.Warning(string p, bool isPersistent = false) -> void
Dynamo.Graph.Nodes.NodeModelExtensions
Dynamo.Graph.Nodes.NodeNameAttribute
Dynamo.Graph.Nodes.NodeNameAttribute.Name.get -> string
Dynamo.Graph.Nodes.NodeNameAttribute.Name.set -> void
Dynamo.Graph.Nodes.NodeNameAttribute.NodeNameAttribute(string elementName) -> void
Dynamo.Graph.Nodes.NodeObsoleteAttribute
Dynamo.Graph.Nodes.NodeObsoleteAttribute.NodeObsoleteAttribute(string descriptionResourceID, System.Type resourceType) -> void
Dynamo.Graph.Nodes.NodeObsoleteAttribute.NodeObsoleteAttribute(string message) -> void
Dynamo.Graph.Nodes.NodeOutputData
Dynamo.Graph.Nodes.NodeOutputData.Description.get -> string
Dynamo.Graph.Nodes.NodeOutputData.Description.set -> void
Dynamo.Graph.Nodes.NodeOutputData.Id.get -> System.Guid
Dynamo.Graph.Nodes.NodeOutputData.Id.set -> void
Dynamo.Graph.Nodes.NodeOutputData.InitialValue.get -> string
Dynamo.Graph.Nodes.NodeOutputData.InitialValue.set -> void
Dynamo.Graph.Nodes.NodeOutputData.Name.get -> string
Dynamo.Graph.Nodes.NodeOutputData.Name.set -> void
Dynamo.Graph.Nodes.NodeOutputData.NodeOutputData() -> void
Dynamo.Graph.Nodes.NodeOutputData.Type.get -> Dynamo.Graph.Nodes.NodeOutputTypes
Dynamo.Graph.Nodes.NodeOutputData.Type.set -> void
Dynamo.Graph.Nodes.NodeOutputTypes
Dynamo.Graph.Nodes.NodeOutputTypes.booleanOutput = 2 -> Dynamo.Graph.Nodes.NodeOutputTypes
Dynamo.Graph.Nodes.NodeOutputTypes.floatOutput = 1 -> Dynamo.Graph.Nodes.NodeOutputTypes
Dynamo.Graph.Nodes.NodeOutputTypes.integerOutput = 0 -> Dynamo.Graph.Nodes.NodeOutputTypes
Dynamo.Graph.Nodes.NodeOutputTypes.stringOutput = 3 -> Dynamo.Graph.Nodes.NodeOutputTypes
Dynamo.Graph.Nodes.NodeOutputTypes.unknownOutput = 4 -> Dynamo.Graph.Nodes.NodeOutputTypes
Dynamo.Graph.Nodes.NodeSearchTagsAttribute
Dynamo.Graph.Nodes.NodeSearchTagsAttribute.NodeSearchTagsAttribute(params string[] tags) -> void
Dynamo.Graph.Nodes.NodeSearchTagsAttribute.NodeSearchTagsAttribute(string tagsID, System.Type resourceType) -> void
Dynamo.Graph.Nodes.NodeSearchTagsAttribute.Tags.get -> System.Collections.Generic.List<string>
Dynamo.Graph.Nodes.NodeSearchTagsAttribute.Tags.set -> void
Dynamo.Graph.Nodes.OutPortDescriptionsAttribute
Dynamo.Graph.Nodes.OutPortDescriptionsAttribute.OutPortDescriptionsAttribute(params string[] descriptions) -> void
Dynamo.Graph.Nodes.OutPortDescriptionsAttribute.OutPortDescriptionsAttribute(System.Type resourceType, params string[] resourceNames) -> void
Dynamo.Graph.Nodes.OutPortDescriptionsAttribute.PortDescriptions.get -> System.Collections.Generic.IEnumerable<string>
Dynamo.Graph.Nodes.OutPortNamesAttribute
Dynamo.Graph.Nodes.OutPortNamesAttribute.OutPortNamesAttribute(params string[] names) -> void
Dynamo.Graph.Nodes.OutPortNamesAttribute.OutPortNamesAttribute(System.Type resourceType, params string[] resourceNames) -> void
Dynamo.Graph.Nodes.OutPortNamesAttribute.PortNames.get -> System.Collections.Generic.IEnumerable<string>
Dynamo.Graph.Nodes.OutPortTypesAttribute
Dynamo.Graph.Nodes.OutPortTypesAttribute.OutPortTypesAttribute(params string[] types) -> void
Dynamo.Graph.Nodes.OutPortTypesAttribute.OutPortTypesAttribute(System.Type resourceType, params string[] resourceNames) -> void
Dynamo.Graph.Nodes.OutPortTypesAttribute.PortTypes.get -> System.Collections.Generic.IEnumerable<string>
Dynamo.Graph.Nodes.PortData
Dynamo.Graph.Nodes.PortData.DefaultValue.get -> ProtoCore.AST.AssociativeAST.AssociativeNode
Dynamo.Graph.Nodes.PortData.DefaultValue.set -> void
Dynamo.Graph.Nodes.PortData.Height.get -> double
Dynamo.Graph.Nodes.PortData.Height.set -> void
Dynamo.Graph.Nodes.PortData.LineIndex.get -> int
Dynamo.Graph.Nodes.PortData.LineIndex.set -> void
Dynamo.Graph.Nodes.PortData.Name.get -> string
Dynamo.Graph.Nodes.PortData.Name.set -> void
Dynamo.Graph.Nodes.PortData.PortData(string name, string toolTipString) -> void
Dynamo.Graph.Nodes.PortData.PortData(string name, string toolTipString, ProtoCore.AST.AssociativeAST.AssociativeNode defaultValue) -> void
Dynamo.Graph.Nodes.PortData.ToolTipString.get -> string
Dynamo.Graph.Nodes.PortData.ToolTipString.set -> void
Dynamo.Graph.Nodes.PortEventType
Dynamo.Graph.Nodes.PortEventType.MouseEnter = 0 -> Dynamo.Graph.Nodes.PortEventType
Dynamo.Graph.Nodes.PortEventType.MouseLeave = 1 -> Dynamo.Graph.Nodes.PortEventType
Dynamo.Graph.Nodes.PortEventType.MouseLeftButtonDown = 2 -> Dynamo.Graph.Nodes.PortEventType
Dynamo.Graph.Nodes.PortModel
Dynamo.Graph.Nodes.PortModel.Center.get -> Dynamo.Utilities.Point2D
Dynamo.Graph.Nodes.PortModel.Connectors.get -> System.Collections.ObjectModel.ObservableCollection<Dynamo.Graph.Connectors.ConnectorModel>
Dynamo.Graph.Nodes.PortModel.Connectors.set -> void
Dynamo.Graph.Nodes.PortModel.DefaultValue.get -> ProtoCore.AST.AssociativeAST.AssociativeNode
Dynamo.Graph.Nodes.PortModel.DefaultValue.set -> void
Dynamo.Graph.Nodes.PortModel.Equals(Dynamo.Graph.Nodes.PortModel other) -> bool
Dynamo.Graph.Nodes.PortModel.extensionEdges.get -> Dynamo.Graph.Nodes.SnapExtensionEdges
Dynamo.Graph.Nodes.PortModel.extensionEdges.set -> void
Dynamo.Graph.Nodes.PortModel.Index.get -> int
Dynamo.Graph.Nodes.PortModel.IsConnected.get -> bool
Dynamo.Graph.Nodes.PortModel.IsEnabled.get -> bool
Dynamo.Graph.Nodes.PortModel.IsEnabled.set -> void
Dynamo.Graph.Nodes.PortModel.KeepListStructure.get -> bool
Dynamo.Graph.Nodes.PortModel.KeepListStructure.set -> void
Dynamo.Graph.Nodes.PortModel.Level.get -> int
Dynamo.Graph.Nodes.PortModel.Level.set -> void
Dynamo.Graph.Nodes.PortModel.LineIndex.get -> int
Dynamo.Graph.Nodes.PortModel.MarginThickness.get -> Dynamo.Utilities.Thickness
Dynamo.Graph.Nodes.PortModel.Name.get -> string
Dynamo.Graph.Nodes.PortModel.Owner.get -> Dynamo.Graph.Nodes.NodeModel
Dynamo.Graph.Nodes.PortModel.PortModel(Dynamo.Graph.Nodes.PortType portType, Dynamo.Graph.Nodes.NodeModel owner, Dynamo.Graph.Nodes.PortData data) -> void
Dynamo.Graph.Nodes.PortModel.PortType.get -> Dynamo.Graph.Nodes.PortType
Dynamo.Graph.Nodes.PortModel.ToolTip.get -> string
Dynamo.Graph.Nodes.PortModel.ToolTip.set -> void
Dynamo.Graph.Nodes.PortModel.UseLevels.get -> bool
Dynamo.Graph.Nodes.PortModel.UseLevels.set -> void
Dynamo.Graph.Nodes.PortModel.UsingDefaultValue.get -> bool
Dynamo.Graph.Nodes.PortModel.UsingDefaultValue.set -> void
Dynamo.Graph.Nodes.PortType
Dynamo.Graph.Nodes.PortType.Input = 0 -> Dynamo.Graph.Nodes.PortType
Dynamo.Graph.Nodes.PortType.Output = 1 -> Dynamo.Graph.Nodes.PortType
Dynamo.Graph.Nodes.ScopedNodeModel
Dynamo.Graph.Nodes.ScopedNodeModel.GetInScopeNodesForInport(int portIndex, bool checkEscape = true, bool isInclusive = true, bool forceToGetNodeForInport = false) -> System.Collections.Generic.IEnumerable<Dynamo.Graph.Nodes.NodeModel>
Dynamo.Graph.Nodes.ScopedNodeModel.ScopedNodeModel() -> void
Dynamo.Graph.Nodes.ScopedNodeModel.ScopedNodeModel(System.Collections.Generic.IEnumerable<Dynamo.Graph.Nodes.PortModel> inPorts, System.Collections.Generic.IEnumerable<Dynamo.Graph.Nodes.PortModel> outPorts) -> void
Dynamo.Graph.Nodes.SnapExtensionEdges
Dynamo.Graph.Nodes.SnapExtensionEdges.Bottom = 2 -> Dynamo.Graph.Nodes.SnapExtensionEdges
Dynamo.Graph.Nodes.SnapExtensionEdges.None = 0 -> Dynamo.Graph.Nodes.SnapExtensionEdges
Dynamo.Graph.Nodes.SnapExtensionEdges.Top = 1 -> Dynamo.Graph.Nodes.SnapExtensionEdges
Dynamo.Graph.Nodes.Statement
Dynamo.Graph.Nodes.Statement.AstNode.get -> ProtoCore.AST.Node
Dynamo.Graph.Nodes.Statement.CurrentState.get -> Dynamo.Graph.Nodes.Statement.State
Dynamo.Graph.Nodes.Statement.CurrentType.get -> Dynamo.Graph.Nodes.Statement.StatementType
Dynamo.Graph.Nodes.Statement.EndLine.get -> int
Dynamo.Graph.Nodes.Statement.FirstDefinedVariable.get -> Dynamo.Graph.Nodes.Variable
Dynamo.Graph.Nodes.Statement.StartLine.get -> int
Dynamo.Graph.Nodes.Statement.State
Dynamo.Graph.Nodes.Statement.State.Error = 2 -> Dynamo.Graph.Nodes.Statement.State
Dynamo.Graph.Nodes.Statement.State.Normal = 0 -> Dynamo.Graph.Nodes.Statement.State
Dynamo.Graph.Nodes.Statement.State.Warning = 1 -> Dynamo.Graph.Nodes.Statement.State
Dynamo.Graph.Nodes.Statement.StatementType
Dynamo.Graph.Nodes.Statement.StatementType.AssignmentVar = 4 -> Dynamo.Graph.Nodes.Statement.StatementType
Dynamo.Graph.Nodes.Statement.StatementType.Collection = 3 -> Dynamo.Graph.Nodes.Statement.StatementType
Dynamo.Graph.Nodes.Statement.StatementType.Expression = 1 -> Dynamo.Graph.Nodes.Statement.StatementType
Dynamo.Graph.Nodes.Statement.StatementType.FuncDeclaration = 5 -> Dynamo.Graph.Nodes.Statement.StatementType
Dynamo.Graph.Nodes.Statement.StatementType.Literal = 2 -> Dynamo.Graph.Nodes.Statement.StatementType
Dynamo.Graph.Nodes.Statement.StatementType.None = 0 -> Dynamo.Graph.Nodes.Statement.StatementType
Dynamo.Graph.Nodes.TypeLoadData
Dynamo.Graph.Nodes.TypeLoadData.Assembly.get -> System.Reflection.Assembly
Dynamo.Graph.Nodes.TypeLoadData.Category.get -> string
Dynamo.Graph.Nodes.TypeLoadData.IsObsolete.get -> bool
Dynamo.Graph.Nodes.TypeLoadData.IsPackageMember -> bool
Dynamo.Graph.Nodes.TypeLoadData.TypeLoadData(System.Type typeIn) -> void
Dynamo.Graph.Nodes.UIDispatcherEventArgs
Dynamo.Graph.Nodes.UIDispatcherEventArgs.ActionToDispatch.get -> System.Action
Dynamo.Graph.Nodes.UIDispatcherEventArgs.ActionToDispatch.set -> void
Dynamo.Graph.Nodes.UIDispatcherEventArgs.UIDispatcherEventArgs(System.Action a) -> void
Dynamo.Graph.Nodes.Utilities
Dynamo.Graph.Nodes.Variable
Dynamo.Graph.Nodes.Variable.EndColumn.get -> int
Dynamo.Graph.Nodes.Variable.Name.get -> string
Dynamo.Graph.Nodes.Variable.NameWithIndex.get -> string
Dynamo.Graph.Nodes.Variable.Row.get -> int
Dynamo.Graph.Nodes.Variable.StartColumn.get -> int
Dynamo.Graph.Nodes.Variable.Variable(ProtoCore.AST.AssociativeAST.IdentifierNode identNode) -> void
Dynamo.Graph.Nodes.VariableInputNode
Dynamo.Graph.Nodes.VariableInputNode.VariableInputNode() -> void
Dynamo.Graph.Nodes.VariableInputNode.VariableInputNode(System.Collections.Generic.IEnumerable<Dynamo.Graph.Nodes.PortModel> inPorts, System.Collections.Generic.IEnumerable<Dynamo.Graph.Nodes.PortModel> outPorts) -> void
Dynamo.Graph.Nodes.VariableInputNode.VariableInputPorts.get -> bool
Dynamo.Graph.Nodes.VariableInputNodeController
Dynamo.Graph.Nodes.VariableInputNodeController.DeserializeCore(System.Xml.XmlElement element, Dynamo.Graph.SaveContext context) -> void
Dynamo.Graph.Nodes.VariableInputNodeController.OnBuilt() -> void
Dynamo.Graph.Nodes.VariableInputNodeController.SerializeCore(System.Xml.XmlElement element, Dynamo.Graph.SaveContext context) -> void
Dynamo.Graph.Nodes.VariableInputNodeController.SetNumInputs(int numInputs) -> void
Dynamo.Graph.Nodes.VariableInputNodeController.VariableInputNodeController(Dynamo.Graph.Nodes.NodeModel model) -> void
Dynamo.Graph.Nodes.ZeroTouch.DSFunction
Dynamo.Graph.Nodes.ZeroTouch.DSFunction.DSFunction(Dynamo.Engine.FunctionDescriptor functionDescription) -> void
Dynamo.Graph.Nodes.ZeroTouch.DSFunction.FunctionSignature.get -> string
Dynamo.Graph.Nodes.ZeroTouch.DSFunctionBase
Dynamo.Graph.Nodes.ZeroTouch.DSFunctionBase.DSFunctionBase(Dynamo.Graph.Nodes.ZeroTouch.ZeroTouchNodeController<Dynamo.Engine.FunctionDescriptor> controller) -> void
Dynamo.Graph.Nodes.ZeroTouch.DSVarArgFunction
Dynamo.Graph.Nodes.ZeroTouch.DSVarArgFunction.DSVarArgFunction(Dynamo.Engine.FunctionDescriptor descriptor) -> void
Dynamo.Graph.Nodes.ZeroTouch.DSVarArgFunction.FunctionSignature.get -> string
Dynamo.Graph.Nodes.ZeroTouch.DSVarArgFunction.FunctionType.get -> string
Dynamo.Graph.Nodes.ZeroTouch.DSVarArgFunction.VarInputController.get -> Dynamo.Graph.Nodes.VariableInputNodeController
Dynamo.Graph.Nodes.ZeroTouch.UnresolvedFunctionException
Dynamo.Graph.Nodes.ZeroTouch.UnresolvedFunctionException.FunctionName.get -> string
Dynamo.Graph.Nodes.ZeroTouch.UnresolvedFunctionException.UnresolvedFunctionException(string functionName) -> void
Dynamo.Graph.Nodes.ZeroTouch.ZeroTouchNodeController<T>
Dynamo.Graph.Nodes.ZeroTouch.ZeroTouchNodeController<T>.Category.get -> string
Dynamo.Graph.Nodes.ZeroTouch.ZeroTouchNodeController<T>.CreateFunctionObject(Dynamo.Graph.Nodes.NodeModel model, ProtoCore.AST.AssociativeAST.AssociativeNode functionNode, System.Collections.Generic.List<ProtoCore.AST.AssociativeAST.AssociativeNode> inputs) -> ProtoCore.AST.AssociativeAST.AssociativeNode
Dynamo.Graph.Nodes.ZeroTouch.ZeroTouchNodeController<T>.Description.get -> string
Dynamo.Graph.Nodes.ZeroTouch.ZeroTouchNodeController<T>.IsConstructor() -> bool
Dynamo.Graph.Nodes.ZeroTouch.ZeroTouchNodeController<T>.IsInstanceMember() -> bool
Dynamo.Graph.Nodes.ZeroTouch.ZeroTouchNodeController<T>.IsStaticMember() -> bool
Dynamo.Graph.Nodes.ZeroTouch.ZeroTouchNodeController<T>.MangledName.get -> string
Dynamo.Graph.Nodes.ZeroTouch.ZeroTouchNodeController<T>.ZeroTouchNodeController(T definition) -> void
Dynamo.Graph.Nodes.ZeroTouch.ZeroTouchVarArgNodeController<T>
Dynamo.Graph.Nodes.ZeroTouch.ZeroTouchVarArgNodeController<T>.ZeroTouchVarArgNodeController(T zeroTouchDef) -> void
Dynamo.Graph.Notes.NoteModel
Dynamo.Graph.Notes.NoteModel.NoteModel(double x, double y, string text, System.Guid guid) -> void
Dynamo.Graph.Notes.NoteModel.NoteModel(double x, double y, string text, System.Guid guid, Dynamo.Graph.Nodes.NodeModel pinnedNode) -> void
Dynamo.Graph.Notes.NoteModel.PinnedNode.get -> Dynamo.Graph.Nodes.NodeModel
Dynamo.Graph.Notes.NoteModel.PinnedNode.set -> void
Dynamo.Graph.Notes.NoteModel.PinnedNodeGuid.get -> System.Guid
Dynamo.Graph.Notes.NoteModel.PinnedNodeGuid.set -> void
Dynamo.Graph.Notes.NoteModel.Text.get -> string
Dynamo.Graph.Notes.NoteModel.Text.set -> void
Dynamo.Graph.Notes.NoteModel.UndoAction
Dynamo.Graph.Notes.NoteModel.UndoAction.Pin = 0 -> Dynamo.Graph.Notes.NoteModel.UndoAction
Dynamo.Graph.Notes.NoteModel.UndoAction.Unpin = 1 -> Dynamo.Graph.Notes.NoteModel.UndoAction
Dynamo.Graph.Notes.NoteModel.UndoRedoAction.get -> Dynamo.Graph.Notes.NoteModel.UndoAction
Dynamo.Graph.Notes.NoteModel.UndoRedoAction.set -> void
Dynamo.Graph.Presets.PresetModel
Dynamo.Graph.Presets.PresetModel.Description.get -> string
Dynamo.Graph.Presets.PresetModel.Name.get -> string
Dynamo.Graph.Presets.PresetModel.Nodes.get -> System.Collections.Generic.IEnumerable<Dynamo.Graph.Nodes.NodeModel>
Dynamo.Graph.Presets.PresetModel.PresetModel(string name, string description, System.Collections.Generic.IEnumerable<Dynamo.Graph.Nodes.NodeModel> inputsToSave) -> void
Dynamo.Graph.Presets.PresetModel.SerializedNodes.get -> System.Collections.Generic.IEnumerable<System.Xml.XmlElement>
Dynamo.Graph.SaveContext
Dynamo.Graph.SaveContext.Copy = 1 -> Dynamo.Graph.SaveContext
Dynamo.Graph.SaveContext.File = 0 -> Dynamo.Graph.SaveContext
Dynamo.Graph.SaveContext.None = 4 -> Dynamo.Graph.SaveContext
Dynamo.Graph.SaveContext.Preset = 3 -> Dynamo.Graph.SaveContext
Dynamo.Graph.SaveContext.Save = 5 -> Dynamo.Graph.SaveContext
Dynamo.Graph.SaveContext.SaveAs = 6 -> Dynamo.Graph.SaveContext
Dynamo.Graph.SaveContext.Undo = 2 -> Dynamo.Graph.SaveContext
Dynamo.Graph.UpdateValueParams
Dynamo.Graph.UpdateValueParams.ElementResolver.get -> ProtoCore.Namespace.ElementResolver
Dynamo.Graph.UpdateValueParams.PropertyName.get -> string
Dynamo.Graph.UpdateValueParams.PropertyValue.get -> string
Dynamo.Graph.UpdateValueParams.UpdateValueParams(string propertyName, string propertyValue, ProtoCore.Namespace.ElementResolver elementResolver = null) -> void
Dynamo.Graph.Workspaces.ConnectorConverter
Dynamo.Graph.Workspaces.ConnectorConverter.ConnectorConverter(Dynamo.Logging.ILogger logger) -> void
Dynamo.Graph.Workspaces.CustomNodeWorkspaceModel
Dynamo.Graph.Workspaces.CustomNodeWorkspaceModel.Category.get -> string
Dynamo.Graph.Workspaces.CustomNodeWorkspaceModel.Category.set -> void
Dynamo.Graph.Workspaces.CustomNodeWorkspaceModel.CustomNodeDefinition.get -> Dynamo.CustomNodeDefinition
Dynamo.Graph.Workspaces.CustomNodeWorkspaceModel.CustomNodeDependencies.get -> System.Collections.Generic.IEnumerable<Dynamo.CustomNodeDefinition>
Dynamo.Graph.Workspaces.CustomNodeWorkspaceModel.CustomNodeId.get -> System.Guid
Dynamo.Graph.Workspaces.CustomNodeWorkspaceModel.CustomNodeInfo.get -> Dynamo.CustomNodeInfo
Dynamo.Graph.Workspaces.CustomNodeWorkspaceModel.CustomNodeWorkspaceModel(Dynamo.Graph.Nodes.NodeLoaders.NodeFactory factory, System.Collections.Generic.IEnumerable<Dynamo.Graph.Nodes.NodeModel> nodes, System.Collections.Generic.IEnumerable<Dynamo.Graph.Notes.NoteModel> notes, System.Collections.Generic.IEnumerable<Dynamo.Graph.Annotations.AnnotationModel> annotations, System.Collections.Generic.IEnumerable<Dynamo.Graph.Presets.PresetModel> presets, ProtoCore.Namespace.ElementResolver elementResolver, Dynamo.Graph.Workspaces.WorkspaceInfo info) -> void
Dynamo.Graph.Workspaces.CustomNodeWorkspaceModel.CustomNodeWorkspaceModel(Dynamo.Graph.Workspaces.WorkspaceInfo info, Dynamo.Graph.Nodes.NodeLoaders.NodeFactory factory) -> void
Dynamo.Graph.Workspaces.CustomNodeWorkspaceModel.DefinitionUpdated -> System.Action
Dynamo.Graph.Workspaces.CustomNodeWorkspaceModel.Description.get -> string
Dynamo.Graph.Workspaces.CustomNodeWorkspaceModel.Description.set -> void
Dynamo.Graph.Workspaces.CustomNodeWorkspaceModel.FunctionIdChanged -> System.Action<System.Guid>
Dynamo.Graph.Workspaces.CustomNodeWorkspaceModel.InfoChanged -> System.Action
Dynamo.Graph.Workspaces.CustomNodeWorkspaceModel.IsVisibleInDynamoLibrary.get -> bool
Dynamo.Graph.Workspaces.CustomNodeWorkspaceModel.IsVisibleInDynamoLibrary.set -> void
Dynamo.Graph.Workspaces.CustomNodeWorkspaceModel.SetInfo(string newName = null, string newCategory = null, string newDescription = null, string newFilename = null) -> void
Dynamo.Graph.Workspaces.DescriptionConverter
Dynamo.Graph.Workspaces.DescriptionConverter.DescriptionConverter() -> void
Dynamo.Graph.Workspaces.DummyNodeWriteConverter
Dynamo.Graph.Workspaces.DummyNodeWriteConverter.DummyNodeWriteConverter() -> void
Dynamo.Graph.Workspaces.ExtraAnnotationViewInfo
Dynamo.Graph.Workspaces.ExtraAnnotationViewInfo.Background -> string
Dynamo.Graph.Workspaces.ExtraAnnotationViewInfo.DescriptionText -> string
Dynamo.Graph.Workspaces.ExtraAnnotationViewInfo.ExtraAnnotationViewInfo() -> void
Dynamo.Graph.Workspaces.ExtraAnnotationViewInfo.FontSize -> double
Dynamo.Graph.Workspaces.ExtraAnnotationViewInfo.GroupStyleId -> System.Guid
Dynamo.Graph.Workspaces.ExtraAnnotationViewInfo.HasNestedGroups -> bool
Dynamo.Graph.Workspaces.ExtraAnnotationViewInfo.Height -> double
Dynamo.Graph.Workspaces.ExtraAnnotationViewInfo.HeightAdjustment -> double
Dynamo.Graph.Workspaces.ExtraAnnotationViewInfo.Id -> string
Dynamo.Graph.Workspaces.ExtraAnnotationViewInfo.InitialHeight -> double
Dynamo.Graph.Workspaces.ExtraAnnotationViewInfo.InitialTop -> double
Dynamo.Graph.Workspaces.ExtraAnnotationViewInfo.IsExpanded -> bool
Dynamo.Graph.Workspaces.ExtraAnnotationViewInfo.Left -> double
Dynamo.Graph.Workspaces.ExtraAnnotationViewInfo.Nodes -> System.Collections.Generic.IEnumerable<string>
Dynamo.Graph.Workspaces.ExtraAnnotationViewInfo.PinnedNode -> string
Dynamo.Graph.Workspaces.ExtraAnnotationViewInfo.TextBlockHeight -> double
Dynamo.Graph.Workspaces.ExtraAnnotationViewInfo.Title -> string
Dynamo.Graph.Workspaces.ExtraAnnotationViewInfo.Top -> double
Dynamo.Graph.Workspaces.ExtraAnnotationViewInfo.Width -> double
Dynamo.Graph.Workspaces.ExtraAnnotationViewInfo.WidthAdjustment -> double
Dynamo.Graph.Workspaces.ExtraConnectorPinInfo
Dynamo.Graph.Workspaces.ExtraConnectorPinInfo.ConnectorGuid -> string
Dynamo.Graph.Workspaces.ExtraConnectorPinInfo.ExtraConnectorPinInfo() -> void
Dynamo.Graph.Workspaces.ExtraConnectorPinInfo.Left -> double
Dynamo.Graph.Workspaces.ExtraConnectorPinInfo.Top -> double
Dynamo.Graph.Workspaces.ExtraNodeViewInfo
Dynamo.Graph.Workspaces.ExtraNodeViewInfo.Excluded -> bool
Dynamo.Graph.Workspaces.ExtraNodeViewInfo.ExtraNodeViewInfo() -> void
Dynamo.Graph.Workspaces.ExtraNodeViewInfo.Id -> string
Dynamo.Graph.Workspaces.ExtraNodeViewInfo.IsSetAsInput -> bool
Dynamo.Graph.Workspaces.ExtraNodeViewInfo.IsSetAsOutput -> bool
Dynamo.Graph.Workspaces.ExtraNodeViewInfo.Name -> string
Dynamo.Graph.Workspaces.ExtraNodeViewInfo.ShowGeometry -> bool
Dynamo.Graph.Workspaces.ExtraNodeViewInfo.UserDescription -> string
Dynamo.Graph.Workspaces.ExtraNodeViewInfo.X -> double
Dynamo.Graph.Workspaces.ExtraNodeViewInfo.Y -> double
Dynamo.Graph.Workspaces.ExtraNoteViewInfo
Dynamo.Graph.Workspaces.ExtraNoteViewInfo.ExtraNoteViewInfo() -> void
Dynamo.Graph.Workspaces.ExtraNoteViewInfo.Id -> string
Dynamo.Graph.Workspaces.ExtraNoteViewInfo.Text -> string
Dynamo.Graph.Workspaces.ExtraNoteViewInfo.X -> double
Dynamo.Graph.Workspaces.ExtraNoteViewInfo.Y -> double
Dynamo.Graph.Workspaces.ExtraWorkspaceViewInfo
Dynamo.Graph.Workspaces.ExtraWorkspaceViewInfo.Annotations -> System.Collections.Generic.IEnumerable<Dynamo.Graph.Workspaces.ExtraAnnotationViewInfo>
Dynamo.Graph.Workspaces.ExtraWorkspaceViewInfo.Camera -> object
Dynamo.Graph.Workspaces.ExtraWorkspaceViewInfo.ConnectorPins -> System.Collections.Generic.IEnumerable<Dynamo.Graph.Workspaces.ExtraConnectorPinInfo>
Dynamo.Graph.Workspaces.ExtraWorkspaceViewInfo.ExtraWorkspaceViewInfo() -> void
Dynamo.Graph.Workspaces.ExtraWorkspaceViewInfo.NodeViews -> System.Collections.Generic.IEnumerable<Dynamo.Graph.Workspaces.ExtraNodeViewInfo>
Dynamo.Graph.Workspaces.ExtraWorkspaceViewInfo.Notes -> System.Collections.Generic.IEnumerable<Dynamo.Graph.Workspaces.ExtraNoteViewInfo>
Dynamo.Graph.Workspaces.ExtraWorkspaceViewInfo.X -> double
Dynamo.Graph.Workspaces.ExtraWorkspaceViewInfo.Y -> double
Dynamo.Graph.Workspaces.ExtraWorkspaceViewInfo.Zoom -> double
Dynamo.Graph.Workspaces.HomeWorkspaceModel
Dynamo.Graph.Workspaces.HomeWorkspaceModel.EngineController.get -> Dynamo.Engine.EngineController
Dynamo.Graph.Workspaces.HomeWorkspaceModel.EvaluationCompleted -> System.EventHandler<Dynamo.Models.EvaluationCompletedEventArgs>
Dynamo.Graph.Workspaces.HomeWorkspaceModel.EvaluationCount.get -> long
Dynamo.Graph.Workspaces.HomeWorkspaceModel.EvaluationStarted -> System.EventHandler<System.EventArgs>
Dynamo.Graph.Workspaces.HomeWorkspaceModel.GraphDocumentationURL.get -> System.Uri
Dynamo.Graph.Workspaces.HomeWorkspaceModel.GraphDocumentationURL.set -> void
Dynamo.Graph.Workspaces.HomeWorkspaceModel.HasRunWithoutCrash.get -> bool
Dynamo.Graph.Workspaces.HomeWorkspaceModel.HasRunWithoutCrash.set -> void
Dynamo.Graph.Workspaces.HomeWorkspaceModel.HomeWorkspaceModel(Dynamo.Engine.EngineController engine, Dynamo.Scheduler.DynamoScheduler scheduler, Dynamo.Graph.Nodes.NodeLoaders.NodeFactory factory, bool verboseLogging, bool isTestMode, Dynamo.Linting.LinterManager linterManager, string fileName = "") -> void
Dynamo.Graph.Workspaces.HomeWorkspaceModel.HomeWorkspaceModel(Dynamo.Engine.EngineController engine, Dynamo.Scheduler.DynamoScheduler scheduler, Dynamo.Graph.Nodes.NodeLoaders.NodeFactory factory, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.Guid, System.Collections.Generic.List<ProtoCore.CallSite.RawTraceData>>> traceData, System.Collections.Generic.IEnumerable<Dynamo.Graph.Nodes.NodeModel> nodes, System.Collections.Generic.IEnumerable<Dynamo.Graph.Notes.NoteModel> notes, System.Collections.Generic.IEnumerable<Dynamo.Graph.Annotations.AnnotationModel> annotations, System.Collections.Generic.IEnumerable<Dynamo.Graph.Presets.PresetModel> presets, ProtoCore.Namespace.ElementResolver resolver, Dynamo.Graph.Workspaces.WorkspaceInfo info, bool verboseLogging, bool isTestMode, Dynamo.Linting.LinterManager linterManager) -> void
Dynamo.Graph.Workspaces.HomeWorkspaceModel.HomeWorkspaceModel(System.Guid guid, Dynamo.Engine.EngineController engine, Dynamo.Scheduler.DynamoScheduler scheduler, Dynamo.Graph.Nodes.NodeLoaders.NodeFactory factory, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.Guid, System.Collections.Generic.List<ProtoCore.CallSite.RawTraceData>>> traceData, System.Collections.Generic.IEnumerable<Dynamo.Graph.Nodes.NodeModel> nodes, System.Collections.Generic.IEnumerable<Dynamo.Graph.Notes.NoteModel> notes, System.Collections.Generic.IEnumerable<Dynamo.Graph.Annotations.AnnotationModel> annotations, System.Collections.Generic.IEnumerable<Dynamo.Graph.Presets.PresetModel> presets, ProtoCore.Namespace.ElementResolver resolver, Dynamo.Graph.Workspaces.WorkspaceInfo info, bool verboseLogging, bool isTestMode, Dynamo.Linting.LinterManager linterManager) -> void
Dynamo.Graph.Workspaces.HomeWorkspaceModel.IsTestMode.get -> bool
Dynamo.Graph.Workspaces.HomeWorkspaceModel.IsTestMode.set -> void
Dynamo.Graph.Workspaces.HomeWorkspaceModel.RefreshCompleted -> System.EventHandler<Dynamo.Models.EvaluationCompletedEventArgs>
Dynamo.Graph.Workspaces.HomeWorkspaceModel.Run() -> void
Dynamo.Graph.Workspaces.HomeWorkspaceModel.RunSettings.get -> Dynamo.Models.RunSettings
Dynamo.Graph.Workspaces.HomeWorkspaceModel.RunSettings.set -> void
Dynamo.Graph.Workspaces.HomeWorkspaceModel.Thumbnail.get -> string
Dynamo.Graph.Workspaces.HomeWorkspaceModel.Thumbnail.set -> void
Dynamo.Graph.Workspaces.ICustomNodeWorkspaceModel
Dynamo.Graph.Workspaces.ICustomNodeWorkspaceModel.CustomNodeDefinition.get -> Dynamo.CustomNodeDefinition
Dynamo.Graph.Workspaces.ICustomNodeWorkspaceModel.CustomNodeId.get -> System.Guid
Dynamo.Graph.Workspaces.ICustomNodeWorkspaceModel.CustomNodeInfo.get -> Dynamo.CustomNodeInfo
Dynamo.Graph.Workspaces.ICustomNodeWorkspaceModel.DefinitionUpdated -> System.Action
Dynamo.Graph.Workspaces.ICustomNodeWorkspaceModel.FunctionIdChanged -> System.Action<System.Guid>
Dynamo.Graph.Workspaces.ICustomNodeWorkspaceModel.InfoChanged -> System.Action
Dynamo.Graph.Workspaces.IdReferenceResolver
Dynamo.Graph.Workspaces.IdReferenceResolver.AddReference(object context, string reference, object value) -> void
Dynamo.Graph.Workspaces.IdReferenceResolver.AddToReferenceMap(System.Guid oldId, object newObject) -> void
Dynamo.Graph.Workspaces.IdReferenceResolver.GetReference(object context, object value) -> string
Dynamo.Graph.Workspaces.IdReferenceResolver.IdReferenceResolver() -> void
Dynamo.Graph.Workspaces.IdReferenceResolver.IsReferenced(object context, object value) -> bool
Dynamo.Graph.Workspaces.IdReferenceResolver.ResolveReference(object context, string reference) -> object
Dynamo.Graph.Workspaces.IdReferenceResolver.ResolveReferenceFromMap(object context, string reference) -> object
Dynamo.Graph.Workspaces.IdToGuidConverter
Dynamo.Graph.Workspaces.IdToGuidConverter.IdToGuidConverter() -> void
Dynamo.Graph.Workspaces.IPackageInfo
Dynamo.Graph.Workspaces.IPackageInfo.Name.get -> string
Dynamo.Graph.Workspaces.IPackageInfo.Version.get -> System.Version
Dynamo.Graph.Workspaces.IWorkspaceModel
Dynamo.Graph.Workspaces.IWorkspaceModel.CenterX.get -> double
Dynamo.Graph.Workspaces.IWorkspaceModel.CenterY.get -> double
Dynamo.Graph.Workspaces.IWorkspaceModel.ConnectorAdded -> System.Action<Dynamo.Graph.Connectors.ConnectorModel>
Dynamo.Graph.Workspaces.IWorkspaceModel.ConnectorDeleted -> System.Action<Dynamo.Graph.Connectors.ConnectorModel>
Dynamo.Graph.Workspaces.IWorkspaceModel.Connectors.get -> System.Collections.Generic.IEnumerable<Dynamo.Graph.Connectors.ConnectorModel>
Dynamo.Graph.Workspaces.IWorkspaceModel.CurrentSelection.get -> System.Collections.Generic.IEnumerable<Dynamo.Graph.Nodes.NodeModel>
Dynamo.Graph.Workspaces.IWorkspaceModel.Description.get -> string
Dynamo.Graph.Workspaces.IWorkspaceModel.FileName.get -> string
Dynamo.Graph.Workspaces.IWorkspaceModel.Name.get -> string
Dynamo.Graph.Workspaces.IWorkspaceModel.NodeAdded -> System.Action<Dynamo.Graph.Nodes.NodeModel>
Dynamo.Graph.Workspaces.IWorkspaceModel.NodeRemoved -> System.Action<Dynamo.Graph.Nodes.NodeModel>
Dynamo.Graph.Workspaces.IWorkspaceModel.Nodes.get -> System.Collections.Generic.IEnumerable<Dynamo.Graph.Nodes.NodeModel>
Dynamo.Graph.Workspaces.IWorkspaceModel.NodesCleared -> System.Action
Dynamo.Graph.Workspaces.IWorkspaceModel.RecordModelsForModification(System.Collections.Generic.IEnumerable<Dynamo.Graph.ModelBase> models) -> void
Dynamo.Graph.Workspaces.LayoutExtensions
Dynamo.Graph.Workspaces.LinterManagerConverter
Dynamo.Graph.Workspaces.LinterManagerConverter.LinterManagerConverter(Dynamo.Logging.ILogger logger) -> void
Dynamo.Graph.Workspaces.NodeLibraryDependencyConverter
Dynamo.Graph.Workspaces.NodeLibraryDependencyConverter.NodeLibraryDependencyConverter(Dynamo.Logging.ILogger logger) -> void
Dynamo.Graph.Workspaces.NodeReadConverter
Dynamo.Graph.Workspaces.NodeReadConverter.ElementResolver.get -> ProtoCore.Namespace.ElementResolver
Dynamo.Graph.Workspaces.NodeReadConverter.ElementResolver.set -> void
Dynamo.Graph.Workspaces.NodeReadConverter.NodeReadConverter(Dynamo.Core.CustomNodeManager manager, Dynamo.Engine.LibraryServices libraryServices, Dynamo.Graph.Nodes.NodeLoaders.NodeFactory nodeFactory, bool isTestMode = false) -> void
Dynamo.Graph.Workspaces.PackageDependencyState
Dynamo.Graph.Workspaces.PackageDependencyState.IncorrectVersion = 1 -> Dynamo.Graph.Workspaces.PackageDependencyState
Dynamo.Graph.Workspaces.PackageDependencyState.Loaded = 0 -> Dynamo.Graph.Workspaces.PackageDependencyState
Dynamo.Graph.Workspaces.PackageDependencyState.Missing = 2 -> Dynamo.Graph.Workspaces.PackageDependencyState
Dynamo.Graph.Workspaces.PackageDependencyState.RequiresRestart = 4 -> Dynamo.Graph.Workspaces.PackageDependencyState
Dynamo.Graph.Workspaces.PackageDependencyState.Warning = 3 -> Dynamo.Graph.Workspaces.PackageDependencyState
Dynamo.Graph.Workspaces.PackageInfo
Dynamo.Graph.Workspaces.PackageInfo.Name.get -> string
Dynamo.Graph.Workspaces.PackageInfo.Version.get -> System.Version
Dynamo.Graph.Workspaces.PresetExtensions
Dynamo.Graph.Workspaces.SerializationExtensions
Dynamo.Graph.Workspaces.TypedParameterConverter
Dynamo.Graph.Workspaces.TypedParameterConverter.TypedParameterConverter() -> void
Dynamo.Graph.Workspaces.WorkspaceInfo
Dynamo.Graph.Workspaces.WorkspaceInfo.Category.get -> string
Dynamo.Graph.Workspaces.WorkspaceInfo.Description.get -> string
Dynamo.Graph.Workspaces.WorkspaceInfo.FileName.get -> string
Dynamo.Graph.Workspaces.WorkspaceInfo.HasRunWithoutCrash.get -> bool
Dynamo.Graph.Workspaces.WorkspaceInfo.ID.get -> string
Dynamo.Graph.Workspaces.WorkspaceInfo.IsCustomNodeWorkspace.get -> bool
Dynamo.Graph.Workspaces.WorkspaceInfo.IsVisibleInDynamoLibrary.get -> bool
Dynamo.Graph.Workspaces.WorkspaceInfo.Name.get -> string
Dynamo.Graph.Workspaces.WorkspaceInfo.RunPeriod.get -> int
Dynamo.Graph.Workspaces.WorkspaceInfo.RunType.get -> Dynamo.Models.RunType
Dynamo.Graph.Workspaces.WorkspaceInfo.ScaleFactor.get -> double
Dynamo.Graph.Workspaces.WorkspaceInfo.Version.get -> string
Dynamo.Graph.Workspaces.WorkspaceInfo.WorkspaceInfo() -> void
Dynamo.Graph.Workspaces.WorkspaceInfo.WorkspaceInfo(string id, string name, string description, Dynamo.Models.RunType runType) -> void
Dynamo.Graph.Workspaces.WorkspaceInfo.X.get -> double
Dynamo.Graph.Workspaces.WorkspaceInfo.Y.get -> double
Dynamo.Graph.Workspaces.WorkspaceInfo.Zoom.get -> double
Dynamo.Graph.Workspaces.WorkspaceModel
Dynamo.Graph.Workspaces.WorkspaceModel.AnnotationAdded -> System.Action<Dynamo.Graph.Annotations.AnnotationModel>
Dynamo.Graph.Workspaces.WorkspaceModel.AnnotationRemoved -> System.Action<Dynamo.Graph.Annotations.AnnotationModel>
Dynamo.Graph.Workspaces.WorkspaceModel.Annotations.get -> System.Collections.Generic.IEnumerable<Dynamo.Graph.Annotations.AnnotationModel>
Dynamo.Graph.Workspaces.WorkspaceModel.AnnotationsCleared -> System.Action
Dynamo.Graph.Workspaces.WorkspaceModel.Author.get -> string
Dynamo.Graph.Workspaces.WorkspaceModel.Author.set -> void
Dynamo.Graph.Workspaces.WorkspaceModel.CanRedo.get -> bool
Dynamo.Graph.Workspaces.WorkspaceModel.CanUndo.get -> bool
Dynamo.Graph.Workspaces.WorkspaceModel.CenterX.get -> double
Dynamo.Graph.Workspaces.WorkspaceModel.CenterX.set -> void
Dynamo.Graph.Workspaces.WorkspaceModel.CenterY.get -> double
Dynamo.Graph.Workspaces.WorkspaceModel.CenterY.set -> void
Dynamo.Graph.Workspaces.WorkspaceModel.ConnectorAdded -> System.Action<Dynamo.Graph.Connectors.ConnectorModel>
Dynamo.Graph.Workspaces.WorkspaceModel.ConnectorDeleted -> System.Action<Dynamo.Graph.Connectors.ConnectorModel>
Dynamo.Graph.Workspaces.WorkspaceModel.Connectors.get -> System.Collections.Generic.IEnumerable<Dynamo.Graph.Connectors.ConnectorModel>
Dynamo.Graph.Workspaces.WorkspaceModel.CreateModel(System.Xml.XmlElement modelData) -> void
Dynamo.Graph.Workspaces.WorkspaceModel.CurrentOffsetChanged -> Dynamo.Graph.Workspaces.WorkspaceModel.PointEventHandler
Dynamo.Graph.Workspaces.WorkspaceModel.CurrentSelection.get -> System.Collections.Generic.IEnumerable<Dynamo.Graph.Nodes.NodeModel>
Dynamo.Graph.Workspaces.WorkspaceModel.DelayGraphExecution.get -> bool
Dynamo.Graph.Workspaces.WorkspaceModel.DeleteModel(System.Xml.XmlElement modelData) -> void
Dynamo.Graph.Workspaces.WorkspaceModel.Dependencies.get -> System.Collections.Generic.HashSet<System.Guid>
Dynamo.Graph.Workspaces.WorkspaceModel.Description.get -> string
Dynamo.Graph.Workspaces.WorkspaceModel.Description.set -> void
Dynamo.Graph.Workspaces.WorkspaceModel.Disposed -> System.Action
Dynamo.Graph.Workspaces.WorkspaceModel.ElementResolver.get -> ProtoCore.Namespace.ElementResolver
Dynamo.Graph.Workspaces.WorkspaceModel.ElementResolver.set -> void
Dynamo.Graph.Workspaces.WorkspaceModel.FileName.get -> string
Dynamo.Graph.Workspaces.WorkspaceModel.FileName.set -> void
Dynamo.Graph.Workspaces.WorkspaceModel.GetModelForElement(System.Xml.XmlElement modelData) -> Dynamo.Graph.ModelBase
Dynamo.Graph.Workspaces.WorkspaceModel.GetModelInternal(System.Guid modelGuid) -> Dynamo.Graph.ModelBase
Dynamo.Graph.Workspaces.WorkspaceModel.guid -> System.Guid
Dynamo.Graph.Workspaces.WorkspaceModel.Guid.get -> System.Guid
Dynamo.Graph.Workspaces.WorkspaceModel.HasUnsavedChanges.get -> bool
Dynamo.Graph.Workspaces.WorkspaceModel.HasUnsavedChanges.set -> void
Dynamo.Graph.Workspaces.WorkspaceModel.Height.get -> double
Dynamo.Graph.Workspaces.WorkspaceModel.Height.set -> void
Dynamo.Graph.Workspaces.WorkspaceModel.IsReadOnly.get -> bool
Dynamo.Graph.Workspaces.WorkspaceModel.IsReadOnly.set -> void
Dynamo.Graph.Workspaces.WorkspaceModel.LastSaved.get -> System.DateTime
Dynamo.Graph.Workspaces.WorkspaceModel.LastSaved.set -> void
Dynamo.Graph.Workspaces.WorkspaceModel.Log(Dynamo.Logging.ILogMessage obj) -> void
Dynamo.Graph.Workspaces.WorkspaceModel.Log(string msg) -> void
Dynamo.Graph.Workspaces.WorkspaceModel.Log(string msg, Dynamo.Logging.WarningLevel severity) -> void
Dynamo.Graph.Workspaces.WorkspaceModel.MessageLogged -> System.Action<Dynamo.Logging.ILogMessage>
Dynamo.Graph.Workspaces.WorkspaceModel.Name.get -> string
Dynamo.Graph.Workspaces.WorkspaceModel.Name.set -> void
Dynamo.Graph.Workspaces.WorkspaceModel.NodeAdded -> System.Action<Dynamo.Graph.Nodes.NodeModel>
Dynamo.Graph.Workspaces.WorkspaceModel.NodeRemoved -> System.Action<Dynamo.Graph.Nodes.NodeModel>
Dynamo.Graph.Workspaces.WorkspaceModel.Nodes.get -> System.Collections.Generic.IEnumerable<Dynamo.Graph.Nodes.NodeModel>
Dynamo.Graph.Workspaces.WorkspaceModel.NodesCleared -> System.Action
Dynamo.Graph.Workspaces.WorkspaceModel.NoteAdded -> System.Action<Dynamo.Graph.Notes.NoteModel>
Dynamo.Graph.Workspaces.WorkspaceModel.NoteRemoved -> System.Action<Dynamo.Graph.Notes.NoteModel>
Dynamo.Graph.Workspaces.WorkspaceModel.Notes.get -> System.Collections.Generic.IEnumerable<Dynamo.Graph.Notes.NoteModel>
Dynamo.Graph.Workspaces.WorkspaceModel.NotesCleared -> System.Action
Dynamo.Graph.Workspaces.WorkspaceModel.OnDummyNodesReloaded() -> void
Dynamo.Graph.Workspaces.WorkspaceModel.PointEventHandler
Dynamo.Graph.Workspaces.WorkspaceModel.Presets.get -> System.Collections.Generic.IEnumerable<Dynamo.Graph.Presets.PresetModel>
Dynamo.Graph.Workspaces.WorkspaceModel.RecordModelsForModification(System.Collections.Generic.IEnumerable<Dynamo.Graph.ModelBase> models) -> void
Dynamo.Graph.Workspaces.WorkspaceModel.Rect.get -> Dynamo.Utilities.Rect2D
Dynamo.Graph.Workspaces.WorkspaceModel.ReloadModel(System.Xml.XmlElement modelData) -> void
Dynamo.Graph.Workspaces.WorkspaceModel.RemoveGroup(Dynamo.Graph.ModelBase model) -> void
Dynamo.Graph.Workspaces.WorkspaceModel.ReportPosition() -> void
Dynamo.Graph.Workspaces.WorkspaceModel.RequestNodeCentered -> Dynamo.Models.NodeEventHandler
Dynamo.Graph.Workspaces.WorkspaceModel.Saved -> System.Action
Dynamo.Graph.Workspaces.WorkspaceModel.Saving -> System.Action<System.Xml.XmlDocument>
Dynamo.Graph.Workspaces.WorkspaceModel.ScaleFactor.get -> double
Dynamo.Graph.Workspaces.WorkspaceModel.UpdateWithExtraWorkspaceViewInfo(Dynamo.Graph.Workspaces.ExtraWorkspaceViewInfo workspaceViewInfo) -> void
Dynamo.Graph.Workspaces.WorkspaceModel.UpdateWithExtraWorkspaceViewInfo(Dynamo.Graph.Workspaces.ExtraWorkspaceViewInfo workspaceViewInfo, double offsetX = 0, double offsetY = 0) -> void
Dynamo.Graph.Workspaces.WorkspaceModel.Width.get -> double
Dynamo.Graph.Workspaces.WorkspaceModel.Width.set -> void
Dynamo.Graph.Workspaces.WorkspaceModel.WorkspaceModel(System.Collections.Generic.IEnumerable<Dynamo.Graph.Nodes.NodeModel> nodes, System.Collections.Generic.IEnumerable<Dynamo.Graph.Notes.NoteModel> notes, System.Collections.Generic.IEnumerable<Dynamo.Graph.Annotations.AnnotationModel> annotations, Dynamo.Graph.Workspaces.WorkspaceInfo info, Dynamo.Graph.Nodes.NodeLoaders.NodeFactory factory, System.Collections.Generic.IEnumerable<Dynamo.Graph.Presets.PresetModel> presets, ProtoCore.Namespace.ElementResolver resolver) -> void
Dynamo.Graph.Workspaces.WorkspaceModel.WorkspaceModel(System.Collections.Generic.IEnumerable<Dynamo.Graph.Nodes.NodeModel> nodes, System.Collections.Generic.IEnumerable<Dynamo.Graph.Notes.NoteModel> notes, System.Collections.Generic.IEnumerable<Dynamo.Graph.Annotations.AnnotationModel> annotations, Dynamo.Graph.Workspaces.WorkspaceInfo info, Dynamo.Graph.Nodes.NodeLoaders.NodeFactory factory, System.Collections.Generic.IEnumerable<Dynamo.Graph.Presets.PresetModel> presets, ProtoCore.Namespace.ElementResolver resolver, Dynamo.Linting.LinterManager linterManager) -> void
Dynamo.Graph.Workspaces.WorkspaceModel.WorkspaceSavedEvent
Dynamo.Graph.Workspaces.WorkspaceModel.WorkspaceSaving -> System.Action<Dynamo.Graph.SaveContext>
Dynamo.Graph.Workspaces.WorkspaceModel.X.get -> double
Dynamo.Graph.Workspaces.WorkspaceModel.X.set -> void
Dynamo.Graph.Workspaces.WorkspaceModel.Y.get -> double
Dynamo.Graph.Workspaces.WorkspaceModel.Y.set -> void
Dynamo.Graph.Workspaces.WorkspaceModel.Zoom.get -> double
Dynamo.Graph.Workspaces.WorkspaceModel.Zoom.set -> void
Dynamo.Graph.Workspaces.WorkspaceReadConverter
Dynamo.Graph.Workspaces.WorkspaceReadConverter.WorkspaceReadConverter(Dynamo.Engine.EngineController engine, Dynamo.Scheduler.DynamoScheduler scheduler, Dynamo.Graph.Nodes.NodeLoaders.NodeFactory factory, bool isTestMode, bool verboseLogging) -> void
Dynamo.Graph.Workspaces.WorkspaceReadConverter.WorkspaceReadConverter(Dynamo.Engine.EngineController engine, Dynamo.Scheduler.DynamoScheduler scheduler, Dynamo.Graph.Nodes.NodeLoaders.NodeFactory factory, bool isTestMode, bool verboseLogging, Dynamo.Linting.LinterManager linterManager) -> void
Dynamo.Graph.Workspaces.WorkspaceWriteConverter
Dynamo.Graph.Workspaces.WorkspaceWriteConverter.WorkspaceWriteConverter(Dynamo.Engine.EngineController engine = null) -> void
Dynamo.Interfaces.BackgroundPreviewActiveState
Dynamo.Interfaces.BackgroundPreviewActiveState.BackgroundPreviewActiveState() -> void
Dynamo.Interfaces.BackgroundPreviewActiveState.IsActive.get -> bool
Dynamo.Interfaces.BackgroundPreviewActiveState.IsActive.set -> void
Dynamo.Interfaces.BackgroundPreviewActiveState.Name.get -> string
Dynamo.Interfaces.BackgroundPreviewActiveState.Name.set -> void
Dynamo.Interfaces.IDynamoModel
Dynamo.Interfaces.IDynamoModel.CurrentWorkspace.get -> Dynamo.Graph.Workspaces.WorkspaceModel
Dynamo.Interfaces.IDynamoModel.EvaluationCompleted -> System.EventHandler<Dynamo.Models.EvaluationCompletedEventArgs>
Dynamo.Interfaces.IDynamoModel.ShutdownStarted -> Dynamo.Models.DynamoModelHandler
Dynamo.Interfaces.IDynamoModel.WorkspaceAdded -> System.Action<Dynamo.Graph.Workspaces.WorkspaceModel>
Dynamo.Interfaces.IDynamoModel.WorkspaceCleared -> System.Action<Dynamo.Graph.Workspaces.WorkspaceModel>
Dynamo.Interfaces.IDynamoModel.WorkspaceOpening -> System.Action<object>
Dynamo.Interfaces.IDynamoModel.WorkspaceRemoved -> System.Action<Dynamo.Graph.Workspaces.WorkspaceModel>
Dynamo.Interfaces.IDynamoModel.Workspaces.get -> System.Collections.Generic.IEnumerable<Dynamo.Graph.Workspaces.WorkspaceModel>
Dynamo.Interfaces.IPathManager
Dynamo.Interfaces.IPathManager.AddResolutionPath(string path) -> void
Dynamo.Interfaces.IPathManager.BackupDirectory.get -> string
Dynamo.Interfaces.IPathManager.CommonDataDirectory.get -> string
Dynamo.Interfaces.IPathManager.CommonDefinitions.get -> string
Dynamo.Interfaces.IPathManager.DefaultPackagesDirectory.get -> string
Dynamo.Interfaces.IPathManager.DefaultUserDefinitions.get -> string
Dynamo.Interfaces.IPathManager.DefinitionDirectories.get -> System.Collections.Generic.IEnumerable<string>
Dynamo.Interfaces.IPathManager.DynamoCoreDirectory.get -> string
Dynamo.Interfaces.IPathManager.ExtensionsDirectories.get -> System.Collections.Generic.IEnumerable<string>
Dynamo.Interfaces.IPathManager.HostApplicationDirectory.get -> string
Dynamo.Interfaces.IPathManager.LogDirectory.get -> string
Dynamo.Interfaces.IPathManager.MajorFileVersion.get -> int
Dynamo.Interfaces.IPathManager.MinorFileVersion.get -> int
Dynamo.Interfaces.IPathManager.NodeDirectories.get -> System.Collections.Generic.IEnumerable<string>
Dynamo.Interfaces.IPathManager.PackagesDirectories.get -> System.Collections.Generic.IEnumerable<string>
Dynamo.Interfaces.IPathManager.PathResolver.get -> Dynamo.Interfaces.IPathResolver
Dynamo.Interfaces.IPathManager.PreferenceFilePath.get -> string
Dynamo.Interfaces.IPathManager.PreloadedLibraries.get -> System.Collections.Generic.IEnumerable<string>
Dynamo.Interfaces.IPathManager.PythonTemplateFilePath.get -> string
Dynamo.Interfaces.IPathManager.ResolveDocumentPath(ref string document) -> bool
Dynamo.Interfaces.IPathManager.ResolveLibraryPath(ref string library) -> bool
Dynamo.Interfaces.IPathManager.SamplesDirectory.get -> string
Dynamo.Interfaces.IPathManager.TemplatesDirectory.get -> string
Dynamo.Interfaces.IPathManager.UserDataDirectory.get -> string
Dynamo.Interfaces.IPathManager.ViewExtensionsDirectories.get -> System.Collections.Generic.IEnumerable<string>
Dynamo.Interfaces.IPathResolver
Dynamo.Interfaces.IPathResolver.AdditionalNodeDirectories.get -> System.Collections.Generic.IEnumerable<string>
Dynamo.Interfaces.IPathResolver.AdditionalResolutionPaths.get -> System.Collections.Generic.IEnumerable<string>
Dynamo.Interfaces.IPathResolver.CommonDataRootFolder.get -> string
Dynamo.Interfaces.IPathResolver.GetDynamoUserDataLocations() -> System.Collections.Generic.IEnumerable<string>
Dynamo.Interfaces.IPathResolver.PreloadedLibraryPaths.get -> System.Collections.Generic.IEnumerable<string>
Dynamo.Interfaces.IPathResolver.UserDataRootFolder.get -> string
Dynamo.Interfaces.IPreferences
Dynamo.Interfaces.IPreferences.BackgroundPreviews.get -> System.Collections.Generic.List<Dynamo.Interfaces.BackgroundPreviewActiveState>
Dynamo.Interfaces.IPreferences.BackgroundPreviews.set -> void
Dynamo.Interfaces.IPreferences.BackupFiles.get -> System.Collections.Generic.List<string>
Dynamo.Interfaces.IPreferences.BackupFiles.set -> void
Dynamo.Interfaces.IPreferences.ConnectorType.get -> Dynamo.Graph.Connectors.ConnectorType
Dynamo.Interfaces.IPreferences.ConnectorType.set -> void
Dynamo.Interfaces.IPreferences.ConsoleHeight.get -> int
Dynamo.Interfaces.IPreferences.ConsoleHeight.set -> void
Dynamo.Interfaces.IPreferences.CustomPackageFolders.get -> System.Collections.Generic.List<string>
Dynamo.Interfaces.IPreferences.CustomPackageFolders.set -> void
Dynamo.Interfaces.IPreferences.GetIsBackgroundPreviewActive(string name) -> bool
Dynamo.Interfaces.IPreferences.GraphChecksumItemsList.get -> System.Collections.Generic.List<Dynamo.Configuration.GraphChecksumItem>
Dynamo.Interfaces.IPreferences.GraphChecksumItemsList.set -> void
Dynamo.Interfaces.IPreferences.GridScaleFactor.get -> float
Dynamo.Interfaces.IPreferences.GridScaleFactor.set -> void
Dynamo.Interfaces.IPreferences.IsADPAnalyticsReportingApproved.get -> bool
Dynamo.Interfaces.IPreferences.IsADPAnalyticsReportingApproved.set -> void
Dynamo.Interfaces.IPreferences.IsBackgroundGridVisible.get -> bool
Dynamo.Interfaces.IPreferences.IsBackgroundGridVisible.set -> void
Dynamo.Interfaces.IPreferences.IsBackgroundPreviewActive.get -> bool
Dynamo.Interfaces.IPreferences.IsBackgroundPreviewActive.set -> void
Dynamo.Interfaces.IPreferences.IsFirstRun.get -> bool
Dynamo.Interfaces.IPreferences.IsFirstRun.set -> void
Dynamo.Interfaces.IPreferences.MaxNumRecentFiles.get -> int
Dynamo.Interfaces.IPreferences.MaxNumRecentFiles.set -> void
Dynamo.Interfaces.IPreferences.NumberFormat.get -> string
Dynamo.Interfaces.IPreferences.NumberFormat.set -> void
Dynamo.Interfaces.IPreferences.PackageDirectoriesToUninstall.get -> System.Collections.Generic.List<string>
Dynamo.Interfaces.IPreferences.PackageDirectoriesToUninstall.set -> void
Dynamo.Interfaces.IPreferences.PythonTemplateFilePath.get -> string
Dynamo.Interfaces.IPreferences.PythonTemplateFilePath.set -> void
Dynamo.Interfaces.IPreferences.RecentFiles.get -> System.Collections.Generic.List<string>
Dynamo.Interfaces.IPreferences.RecentFiles.set -> void
Dynamo.Interfaces.IPreferences.Save(string filePath) -> bool
Dynamo.Interfaces.IPreferences.SetIsBackgroundPreviewActive(string name, bool value) -> void
Dynamo.Interfaces.IPreferences.ShowConnector.get -> bool
Dynamo.Interfaces.IPreferences.ShowConnector.set -> void
Dynamo.Interfaces.IPreferences.ShowEdges.get -> bool
Dynamo.Interfaces.IPreferences.ShowEdges.set -> void
Dynamo.Interfaces.IPreferences.ShowPreviewBubbles.get -> bool
Dynamo.Interfaces.IPreferences.ShowPreviewBubbles.set -> void
Dynamo.Interfaces.IPreferences.TemplateFilePath.get -> string
Dynamo.Interfaces.IPreferences.TemplateFilePath.set -> void
Dynamo.Interfaces.IPreferences.WindowH.get -> double
Dynamo.Interfaces.IPreferences.WindowH.set -> void
Dynamo.Interfaces.IPreferences.WindowW.get -> double
Dynamo.Interfaces.IPreferences.WindowW.set -> void
Dynamo.Interfaces.IPreferences.WindowX.get -> double
Dynamo.Interfaces.IPreferences.WindowX.set -> void
Dynamo.Interfaces.IPreferences.WindowY.get -> double
Dynamo.Interfaces.IPreferences.WindowY.set -> void
Dynamo.Interfaces.IRenderPrecisionPreference
Dynamo.Interfaces.IRenderPrecisionPreference.RenderPrecision.get -> int
Dynamo.Interfaces.IRenderPrecisionPreference.RenderPrecision.set -> void
Dynamo.Library.ILibraryLoader
Dynamo.Library.ILibraryLoader.LoadNodeLibrary(System.Reflection.Assembly library) -> void
Dynamo.Library.TypedParameter
Dynamo.Library.TypedParameter.DefaultValue.get -> ProtoCore.AST.AssociativeAST.AssociativeNode
Dynamo.Library.TypedParameter.DefaultValueString.get -> string
Dynamo.Library.TypedParameter.Description.get -> string
Dynamo.Library.TypedParameter.DisplayTypeName.get -> string
Dynamo.Library.TypedParameter.Function.get -> Dynamo.Engine.FunctionDescriptor
Dynamo.Library.TypedParameter.Name.get -> string
Dynamo.Library.TypedParameter.NameIsValid.get -> bool
Dynamo.Library.TypedParameter.Summary.get -> string
Dynamo.Library.TypedParameter.Type.get -> ProtoCore.Type
Dynamo.Library.TypedParameter.TypedParameter(string name = "", string TypeName = "", int TypeRank = -1, string defaultValue = "", string summary = null) -> void
Dynamo.Library.TypedParameter.TypedParameter(string name, ProtoCore.Type type, ProtoCore.AST.AssociativeAST.AssociativeNode defaultValue = null, string shortArgumentName = null, string summary = null) -> void
Dynamo.Library.TypedParameter.TypedParameter(string name, ProtoCore.Type type, ProtoCore.AST.AssociativeAST.AssociativeNode defaultValue, string shortArgumentName, string summary, bool nameIsValid = true) -> void
Dynamo.Linting.Interfaces.RuleEvaluationStatusEnum
Dynamo.Linting.Interfaces.RuleEvaluationStatusEnum.Failed = 1 -> Dynamo.Linting.Interfaces.RuleEvaluationStatusEnum
Dynamo.Linting.Interfaces.RuleEvaluationStatusEnum.Passed = 0 -> Dynamo.Linting.Interfaces.RuleEvaluationStatusEnum
Dynamo.Linting.Interfaces.SeverityCodesEnum
Dynamo.Linting.Interfaces.SeverityCodesEnum.Error = 1 -> Dynamo.Linting.Interfaces.SeverityCodesEnum
Dynamo.Linting.Interfaces.SeverityCodesEnum.Warning = 0 -> Dynamo.Linting.Interfaces.SeverityCodesEnum
Dynamo.Linting.LinterExtensionDescriptor
Dynamo.Linting.LinterExtensionDescriptor.Id.get -> string
Dynamo.Linting.LinterExtensionDescriptor.LinterExtensionDescriptor(string id, string name) -> void
Dynamo.Linting.LinterExtensionDescriptor.Name.get -> string
Dynamo.Linting.LinterManager
Dynamo.Linting.LinterManager.ActiveLinter.get -> Dynamo.Linting.LinterExtensionDescriptor
Dynamo.Linting.LinterManager.AvailableLinters.get -> System.Collections.Generic.HashSet<Dynamo.Linting.LinterExtensionDescriptor>
Dynamo.Linting.LinterManager.Dispose() -> void
Dynamo.Linting.LinterManager.LinterManager(Dynamo.Extensions.IExtensionManager extensionManager) -> void
Dynamo.Linting.LinterManager.SetActiveLinter(Dynamo.Linting.LinterExtensionDescriptor value, bool fullActivation = true) -> void
Dynamo.Linting.Rules.GraphLinterRule
Dynamo.Linting.Rules.GraphLinterRule.GraphLinterRule() -> void
Dynamo.Linting.Rules.LinterRule
Dynamo.Linting.Rules.LinterRule.LinterRule() -> void
Dynamo.Linting.Rules.NodeLinterRule
Dynamo.Linting.Rules.NodeLinterRule.NodeLinterRule() -> void
Dynamo.Logging.DynamoLogger
Dynamo.Logging.DynamoLogger.ClearStartupNotifications() -> void
Dynamo.Logging.DynamoLogger.Dispose() -> void
Dynamo.Logging.DynamoLogger.DynamoLogger(Dynamo.Configuration.DebugSettings debugSettings, string logDirectory, bool isTestMode, bool isCLIMode, bool isServiceMode) -> void
Dynamo.Logging.DynamoLogger.Log(string message) -> void
Dynamo.Logging.DynamoLogger.Log(string message, Dynamo.Logging.LogLevel level) -> void
Dynamo.Logging.DynamoLogger.Log(string tag, string data) -> void
Dynamo.Logging.DynamoLogger.Log(System.Exception e) -> void
Dynamo.Logging.DynamoLogger.LogError(string error) -> void
Dynamo.Logging.DynamoLogger.LogError(string tag, string error) -> void
Dynamo.Logging.DynamoLogger.LogInfo(string tag, string info) -> void
Dynamo.Logging.DynamoLogger.LogNotification(string sender, string title, string shortMessage, string detailedMessage) -> void
Dynamo.Logging.DynamoLogger.LogPath.get -> string
Dynamo.Logging.DynamoLogger.LogText.get -> string
Dynamo.Logging.DynamoLogger.LogWarning(string message, Dynamo.Logging.WarningLevel level) -> void
Dynamo.Logging.DynamoLogger.NotificationLogged -> System.Action<Dynamo.Logging.NotificationMessage>
Dynamo.Logging.DynamoLogger.StartupNotifications.get -> System.Collections.Generic.IEnumerable<Dynamo.Logging.NotificationMessage>
Dynamo.Logging.DynamoLogger.Warning.get -> string
Dynamo.Logging.DynamoLogger.Warning.set -> void
Dynamo.Logging.DynamoLogger.WarningLevel.get -> Dynamo.Logging.WarningLevel
Dynamo.Logging.DynamoLogger.WarningLevel.set -> void
Dynamo.Logging.ILogger
Dynamo.Logging.ILogger.Log(string message) -> void
Dynamo.Logging.ILogger.Log(string tag, string message) -> void
Dynamo.Logging.ILogger.Log(System.Exception e) -> void
Dynamo.Logging.ILogger.LogError(string error) -> void
Dynamo.Logging.ILogger.LogWarning(string warning, Dynamo.Logging.WarningLevel level) -> void
Dynamo.Logging.ILogMessage
Dynamo.Logging.ILogMessage.Log(Dynamo.Logging.ILogger logger) -> void
Dynamo.Logging.ILogSource
Dynamo.Logging.ILogSource.MessageLogged -> System.Action<Dynamo.Logging.ILogMessage>
Dynamo.Logging.LogEventArgs
Dynamo.Logging.LogEventArgs.Level.get -> Dynamo.Logging.LogLevel
Dynamo.Logging.LogEventArgs.Level.set -> void
Dynamo.Logging.LogEventArgs.LogEventArgs(string message, Dynamo.Logging.LogLevel level) -> void
Dynamo.Logging.LogEventArgs.LogEventArgs(System.Exception e, Dynamo.Logging.LogLevel level) -> void
Dynamo.Logging.LogEventArgs.Message.get -> string
Dynamo.Logging.LogEventArgs.Message.set -> void
Dynamo.Logging.LogEventHandler
Dynamo.Logging.LogLevel
Dynamo.Logging.LogLevel.Console = 0 -> Dynamo.Logging.LogLevel
Dynamo.Logging.LogLevel.ConsoleOnly = 3 -> Dynamo.Logging.LogLevel
Dynamo.Logging.LogLevel.File = 1 -> Dynamo.Logging.LogLevel
Dynamo.Logging.LogLevel.Warning = 2 -> Dynamo.Logging.LogLevel
Dynamo.Logging.LogMessage
Dynamo.Logging.LogSourceBase
Dynamo.Logging.LogSourceBase.AsLogger() -> Dynamo.Logging.ILogger
Dynamo.Logging.LogSourceBase.Log(Dynamo.Logging.ILogMessage obj) -> void
Dynamo.Logging.LogSourceBase.Log(string msg) -> void
Dynamo.Logging.LogSourceBase.Log(string msg, Dynamo.Logging.WarningLevel severity) -> void
Dynamo.Logging.LogSourceBase.Log(System.Exception ex) -> void
Dynamo.Logging.LogSourceBase.LogSourceBase() -> void
Dynamo.Logging.LogSourceBase.MessageLogged -> System.Action<Dynamo.Logging.ILogMessage>
Dynamo.Logging.NotificationMessage
Dynamo.Logging.NotificationMessage.DetailedMessage.get -> string
Dynamo.Logging.NotificationMessage.NotificationMessage(string sender, string shortMessage, string detailedMessage, string title = "Notification") -> void
Dynamo.Logging.NotificationMessage.Sender.get -> string
Dynamo.Logging.NotificationMessage.ShortMessage.get -> string
Dynamo.Logging.NotificationMessage.Title.get -> string
Dynamo.Logging.WarningLevel
Dynamo.Logging.WarningLevel.Error = 2 -> Dynamo.Logging.WarningLevel
Dynamo.Logging.WarningLevel.Mild = 0 -> Dynamo.Logging.WarningLevel
Dynamo.Logging.WarningLevel.Moderate = 1 -> Dynamo.Logging.WarningLevel
Dynamo.Migration.MigrationManager
Dynamo.Migration.MigrationManager.AddMigrationType(Dynamo.Graph.Nodes.TypeLoadData t) -> void
Dynamo.Migration.MigrationManager.Decision
Dynamo.Migration.MigrationManager.Decision.Abort = 0 -> Dynamo.Migration.MigrationManager.Decision
Dynamo.Migration.MigrationManager.Decision.Migrate = 1 -> Dynamo.Migration.MigrationManager.Decision
Dynamo.Migration.MigrationManager.Decision.Retain = 2 -> Dynamo.Migration.MigrationManager.Decision
Dynamo.Migration.MigrationManager.FutureFileCallback
Dynamo.Migration.MigrationManager.MigrateXmlNode(System.Version currentVersion, System.Xml.XmlNode elNode, System.Type type, System.Version workspaceVersion) -> Dynamo.Migration.NodeMigrationData
Dynamo.Migration.MigrationManager.MigrationManager(Dynamo.Migration.MigrationManager.FutureFileCallback displayFutureFileMessage, Dynamo.Migration.MigrationManager.ObsoleteFileCallback displayObsoleteFileMessage) -> void
Dynamo.Migration.MigrationManager.MigrationTargets.get -> System.Collections.Generic.List<System.Type>
Dynamo.Migration.MigrationManager.MigrationTargets.set -> void
Dynamo.Migration.MigrationManager.ObsoleteFileCallback
Dynamo.Migration.MigrationManager.ProcessNodesInWorkspace(System.Xml.XmlDocument xmlDoc, System.Version workspaceVersion, System.Version currentVersion, Dynamo.Graph.Nodes.NodeLoaders.NodeFactory nodeFactory) -> void
Dynamo.Migration.MigrationManager.ProcessWorkspace(Dynamo.Graph.Workspaces.WorkspaceInfo workspaceInfo, System.Xml.XmlDocument xmlDoc, bool isTestMode, Dynamo.Graph.Nodes.NodeLoaders.NodeFactory factory) -> bool
Dynamo.Migration.MigrationManager.ProcessWorkspaceMigrations(System.Version currentVersion, System.Xml.XmlDocument xmlDoc, System.Version workspaceVersion) -> void
Dynamo.Migration.NodeMigrationAttribute
Dynamo.Migration.NodeMigrationAttribute.NodeMigrationAttribute(string version) -> void
Dynamo.Migration.NodeMigrationAttribute.Version.get -> System.Version
Dynamo.Migration.NodeMigrationData
Dynamo.Migration.NodeMigrationData.AppendNode(System.Xml.XmlElement node) -> void
Dynamo.Migration.NodeMigrationData.CreateConnector(System.Xml.XmlElement connector) -> void
Dynamo.Migration.NodeMigrationData.CreateConnector(System.Xml.XmlElement startNode, int startIndex, System.Xml.XmlElement endNode, int endIndex) -> void
Dynamo.Migration.NodeMigrationData.CreateConnectorFromId(string startNodeId, int startIndex, string endNodeId, int endIndex) -> void
Dynamo.Migration.NodeMigrationData.Document.get -> System.Xml.XmlDocument
Dynamo.Migration.NodeMigrationData.FindConnector(Dynamo.Migration.PortId startPort, Dynamo.Migration.PortId endPort) -> System.Xml.XmlElement
Dynamo.Migration.NodeMigrationData.FindConnectors(Dynamo.Migration.PortId portId) -> System.Collections.Generic.IEnumerable<System.Xml.XmlElement>
Dynamo.Migration.NodeMigrationData.FindFirstConnector(Dynamo.Migration.PortId portId) -> System.Xml.XmlElement
Dynamo.Migration.NodeMigrationData.MigratedNodes.get -> System.Collections.Generic.IEnumerable<System.Xml.XmlElement>
Dynamo.Migration.NodeMigrationData.NodeMigrationData(System.Xml.XmlDocument document) -> void
Dynamo.Migration.NodeMigrationData.ReconnectToPort(System.Xml.XmlElement connector, Dynamo.Migration.PortId port) -> void
Dynamo.Migration.NodeMigrationData.RemoveFirstConnector(Dynamo.Migration.PortId portId) -> void
Dynamo.Migration.PortId
Dynamo.Migration.PortId.OwningNode.get -> string
Dynamo.Migration.PortId.PortId() -> void
Dynamo.Migration.PortId.PortId(string owningNode, int portIndex, Dynamo.Graph.Nodes.PortType type) -> void
Dynamo.Migration.PortId.PortIndex.get -> int
Dynamo.Migration.PortId.PortType.get -> Dynamo.Graph.Nodes.PortType
Dynamo.Migration.WorkspaceMigrationAttribute
Dynamo.Migration.WorkspaceMigrationAttribute.From.get -> System.Version
Dynamo.Migration.WorkspaceMigrationAttribute.To.get -> System.Version
Dynamo.Migration.WorkspaceMigrationAttribute.WorkspaceMigrationAttribute(string from, string to = "") -> void
Dynamo.Migration.WorkspaceMigrations
Dynamo.Migration.WorkspaceMigrations.Migrate_0_5_3_to_0_6_0(System.Xml.XmlDocument doc) -> void
Dynamo.Migration.WorkspaceMigrations.WorkspaceMigrations(Dynamo.Models.DynamoModel dynamoModel) -> void
Dynamo.Models.ActionHandler
Dynamo.Models.DynamoModel
Dynamo.Models.DynamoModel.AddCustomNodeWorkspace(Dynamo.Graph.Workspaces.CustomNodeWorkspaceModel workspace) -> void
Dynamo.Models.DynamoModel.AddGroupToGroupCommand
Dynamo.Models.DynamoModel.AddGroupToGroupCommand.AddGroupToGroupCommand(string modelGuid, string hostModelGuid) -> void
Dynamo.Models.DynamoModel.AddGroupToGroupCommand.AddGroupToGroupCommand(System.Collections.Generic.IEnumerable<System.Guid> modelGuid, System.Guid hostModelGuid) -> void
Dynamo.Models.DynamoModel.AddGroupToGroupCommand.AddGroupToGroupCommand(System.Guid modelGuid, System.Guid hostModelGuid) -> void
Dynamo.Models.DynamoModel.AddGroupToGroupCommand.HostGroupGuid.get -> System.Guid
Dynamo.Models.DynamoModel.AddGroupToGroupCommand.HostGroupGuid.set -> void
Dynamo.Models.DynamoModel.AddHomeWorkspace() -> void
Dynamo.Models.DynamoModel.AddModelToGroupCommand
Dynamo.Models.DynamoModel.AddModelToGroupCommand.AddModelToGroupCommand(string modelGuid) -> void
Dynamo.Models.DynamoModel.AddModelToGroupCommand.AddModelToGroupCommand(System.Collections.Generic.IEnumerable<System.Guid> modelGuid) -> void
Dynamo.Models.DynamoModel.AddModelToGroupCommand.AddModelToGroupCommand(System.Guid modelGuid) -> void
Dynamo.Models.DynamoModel.AddPackagePath(string path, string file = "") -> bool
Dynamo.Models.DynamoModel.AddPresetCommand
Dynamo.Models.DynamoModel.AddPresetCommand.AddPresetCommand(string name, string description, System.Collections.Generic.IEnumerable<System.Guid> currentSelectionIds) -> void
Dynamo.Models.DynamoModel.AddToSelection(object parameters) -> void
Dynamo.Models.DynamoModel.AddWorkspace(Dynamo.Graph.Workspaces.WorkspaceModel workspace) -> void
Dynamo.Models.DynamoModel.ApplyPresetCommand
Dynamo.Models.DynamoModel.ApplyPresetCommand.ApplyPresetCommand(System.Guid workspaceID, System.Guid stateID) -> void
Dynamo.Models.DynamoModel.AuthenticationManager.get -> Dynamo.Core.AuthenticationManager
Dynamo.Models.DynamoModel.AuthenticationManager.set -> void
Dynamo.Models.DynamoModel.CERLocation.get -> string
Dynamo.Models.DynamoModel.CleaningUp -> System.Action
Dynamo.Models.DynamoModel.ClearCurrentWorkspace() -> void
Dynamo.Models.DynamoModel.CLIMode.get -> bool
Dynamo.Models.DynamoModel.ClipBoard.get -> System.Collections.ObjectModel.ObservableCollection<Dynamo.Graph.ModelBase>
Dynamo.Models.DynamoModel.ClipBoard.set -> void
Dynamo.Models.DynamoModel.ConnectorType.get -> Dynamo.Graph.Connectors.ConnectorType
Dynamo.Models.DynamoModel.ConnectorType.set -> void
Dynamo.Models.DynamoModel.ConvertNodesToCodeCommand
Dynamo.Models.DynamoModel.Copy() -> void
Dynamo.Models.DynamoModel.CrashPromptHandler
Dynamo.Models.DynamoModel.CrashReporterStartupOptions
Dynamo.Models.DynamoModel.CrashReporterStartupOptions.CERLocation.get -> string
Dynamo.Models.DynamoModel.CrashReporterStartupOptions.CERLocation.set -> void
Dynamo.Models.DynamoModel.CrashReporterStartupOptions.CrashReporterStartupOptions() -> void
Dynamo.Models.DynamoModel.CreateAndConnectNodeCommand
Dynamo.Models.DynamoModel.CreateAndConnectNodeCommand.CreateAndConnectNodeCommand(System.Guid newNodeGuid, System.Guid existingNodeGuid, string newNodeName, int outPortIndex, int inPortIndex, double x, double y, bool createAsDownstreamNode, bool addNewNodeToSelection) -> void
Dynamo.Models.DynamoModel.CreateAndConnectNodeCommand.NewNodeName.get -> string
Dynamo.Models.DynamoModel.CreateAnnotationCommand
Dynamo.Models.DynamoModel.CreateAnnotationCommand.CreateAnnotationCommand(System.Collections.Generic.IEnumerable<System.Guid> annotationId, string annotationText, double x, double y, bool defaultPosition) -> void
Dynamo.Models.DynamoModel.CreateAnnotationCommand.CreateAnnotationCommand(System.Collections.Generic.IEnumerable<System.Guid> annotationId, string annotationText, string annotationDescriptionText, double x, double y, bool defaultPosition) -> void
Dynamo.Models.DynamoModel.CreateAnnotationCommand.CreateAnnotationCommand(System.Guid annotationId, string annotationText, double x, double y, bool defaultPosition) -> void
Dynamo.Models.DynamoModel.CreateAnnotationCommand.CreateAnnotationCommand(System.Guid annotationId, string annotationText, string annotationDescriptionText, double x, double y, bool defaultPosition) -> void
Dynamo.Models.DynamoModel.CreateCustomNodeCommand
Dynamo.Models.DynamoModel.CreateCustomNodeCommand.CreateCustomNodeCommand(string nodeId, string name, string category, string description, bool makeCurrent) -> void
Dynamo.Models.DynamoModel.CreateCustomNodeCommand.CreateCustomNodeCommand(System.Collections.Generic.IEnumerable<System.Guid> nodeId, string name, string category, string description, bool makeCurrent) -> void
Dynamo.Models.DynamoModel.CreateCustomNodeCommand.CreateCustomNodeCommand(System.Guid nodeId, string name, string category, string description, bool makeCurrent) -> void
Dynamo.Models.DynamoModel.CreateNodeCommand
Dynamo.Models.DynamoModel.CreateNodeCommand.CreateNodeCommand(Dynamo.Graph.Nodes.NodeModel node, double x, double y, bool defaultPosition, bool transformCoordinates) -> void
Dynamo.Models.DynamoModel.CreateNodeCommand.CreateNodeCommand(string nodeId, string nodeName, double x, double y, bool defaultPosition, bool transformCoordinates) -> void
Dynamo.Models.DynamoModel.CreateNodeCommand.CreateNodeCommand(System.Collections.Generic.IEnumerable<System.Guid> nodeId, string nodeName, double x, double y, bool defaultPosition, bool transformCoordinates) -> void
Dynamo.Models.DynamoModel.CreateNodeCommand.Name.get -> string
Dynamo.Models.DynamoModel.CreateNoteCommand
Dynamo.Models.DynamoModel.CreateNoteCommand.CreateNoteCommand(string nodeId, string noteText, double x, double y, bool defaultPosition) -> void
Dynamo.Models.DynamoModel.CreateNoteCommand.CreateNoteCommand(System.Collections.Generic.IEnumerable<System.Guid> nodeIds, string noteText, double x, double y, bool defaultPosition) -> void
Dynamo.Models.DynamoModel.CreateNoteCommand.CreateNoteCommand(System.Guid nodeId, string noteText, double x, double y, bool defaultPosition) -> void
Dynamo.Models.DynamoModel.CreateProxyNodeCommand
Dynamo.Models.DynamoModel.CreateProxyNodeCommand.CreateProxyNodeCommand(string nodeId, string customnodeFunctionId, double x, double y, bool defaultPosition, bool transformCoordinates, string name, int inputs, int outputs) -> void
Dynamo.Models.DynamoModel.CurrentWorkspace.get -> Dynamo.Graph.Workspaces.WorkspaceModel
Dynamo.Models.DynamoModel.CurrentWorkspace.set -> void
Dynamo.Models.DynamoModel.DefaultStartConfiguration
Dynamo.Models.DynamoModel.DefaultStartConfiguration.AuthProvider.get -> Greg.IAuthProvider
Dynamo.Models.DynamoModel.DefaultStartConfiguration.AuthProvider.set -> void
Dynamo.Models.DynamoModel.DefaultStartConfiguration.CLIMode.get -> bool
Dynamo.Models.DynamoModel.DefaultStartConfiguration.CLIMode.set -> void
Dynamo.Models.DynamoModel.DefaultStartConfiguration.Context.get -> string
Dynamo.Models.DynamoModel.DefaultStartConfiguration.Context.set -> void
Dynamo.Models.DynamoModel.DefaultStartConfiguration.DefaultPythonEngine.get -> string
Dynamo.Models.DynamoModel.DefaultStartConfiguration.DefaultPythonEngine.set -> void
Dynamo.Models.DynamoModel.DefaultStartConfiguration.DefaultStartConfiguration() -> void
Dynamo.Models.DynamoModel.DefaultStartConfiguration.DynamoCorePath.get -> string
Dynamo.Models.DynamoModel.DefaultStartConfiguration.DynamoCorePath.set -> void
Dynamo.Models.DynamoModel.DefaultStartConfiguration.DynamoHostPath.get -> string
Dynamo.Models.DynamoModel.DefaultStartConfiguration.DynamoHostPath.set -> void
Dynamo.Models.DynamoModel.DefaultStartConfiguration.Extensions.get -> System.Collections.Generic.IEnumerable<Dynamo.Extensions.IExtension>
Dynamo.Models.DynamoModel.DefaultStartConfiguration.Extensions.set -> void
Dynamo.Models.DynamoModel.DefaultStartConfiguration.GeometryFactoryPath.get -> string
Dynamo.Models.DynamoModel.DefaultStartConfiguration.GeometryFactoryPath.set -> void
Dynamo.Models.DynamoModel.DefaultStartConfiguration.HostAnalyticsInfo.get -> Dynamo.Models.HostAnalyticsInfo
Dynamo.Models.DynamoModel.DefaultStartConfiguration.HostAnalyticsInfo.set -> void
Dynamo.Models.DynamoModel.DefaultStartConfiguration.IsHeadless.get -> bool
Dynamo.Models.DynamoModel.DefaultStartConfiguration.IsHeadless.set -> void
Dynamo.Models.DynamoModel.DefaultStartConfiguration.IsServiceMode.get -> bool
Dynamo.Models.DynamoModel.DefaultStartConfiguration.IsServiceMode.set -> void
Dynamo.Models.DynamoModel.DefaultStartConfiguration.NoNetworkMode.get -> bool
Dynamo.Models.DynamoModel.DefaultStartConfiguration.NoNetworkMode.set -> void
Dynamo.Models.DynamoModel.DefaultStartConfiguration.PathResolver.get -> Dynamo.Interfaces.IPathResolver
Dynamo.Models.DynamoModel.DefaultStartConfiguration.PathResolver.set -> void
Dynamo.Models.DynamoModel.DefaultStartConfiguration.Preferences.get -> Dynamo.Interfaces.IPreferences
Dynamo.Models.DynamoModel.DefaultStartConfiguration.Preferences.set -> void
Dynamo.Models.DynamoModel.DefaultStartConfiguration.ProcessMode.get -> Dynamo.Scheduler.TaskProcessMode
Dynamo.Models.DynamoModel.DefaultStartConfiguration.ProcessMode.set -> void
Dynamo.Models.DynamoModel.DefaultStartConfiguration.PythonTemplatePath.get -> string
Dynamo.Models.DynamoModel.DefaultStartConfiguration.PythonTemplatePath.set -> void
Dynamo.Models.DynamoModel.DefaultStartConfiguration.SchedulerThread.get -> Dynamo.Scheduler.ISchedulerThread
Dynamo.Models.DynamoModel.DefaultStartConfiguration.SchedulerThread.set -> void
Dynamo.Models.DynamoModel.DefaultStartConfiguration.StartInTestMode.get -> bool
Dynamo.Models.DynamoModel.DefaultStartConfiguration.StartInTestMode.set -> void
Dynamo.Models.DynamoModel.DeleteModelCommand
Dynamo.Models.DynamoModel.DeleteModelCommand.DeleteModelCommand(string modelGuid) -> void
Dynamo.Models.DynamoModel.DeleteModelCommand.DeleteModelCommand(System.Collections.Generic.IEnumerable<System.Guid> modelGuids) -> void
Dynamo.Models.DynamoModel.DeleteModelCommand.DeleteModelCommand(System.Guid modelGuid) -> void
Dynamo.Models.DynamoModel.DeletionComplete -> System.EventHandler
Dynamo.Models.DynamoModel.DeletionStarted -> System.Action
Dynamo.Models.DynamoModel.Dispose() -> void
Dynamo.Models.DynamoModel.DragSelectionCommand
Dynamo.Models.DynamoModel.DragSelectionCommand.DragSelectionCommand(Dynamo.Utilities.Point2D mouseCursor, Dynamo.Models.DynamoModel.DragSelectionCommand.Operation operation) -> void
Dynamo.Models.DynamoModel.DragSelectionCommand.Operation
Dynamo.Models.DynamoModel.DragSelectionCommand.Operation.BeginDrag = 0 -> Dynamo.Models.DynamoModel.DragSelectionCommand.Operation
Dynamo.Models.DynamoModel.DragSelectionCommand.Operation.EndDrag = 1 -> Dynamo.Models.DynamoModel.DragSelectionCommand.Operation
Dynamo.Models.DynamoModel.DynamoModel(Dynamo.Models.DynamoModel.IStartConfiguration config) -> void
Dynamo.Models.DynamoModel.DynamoModelState
Dynamo.Models.DynamoModel.DynamoModelState.NotStarted = 0 -> Dynamo.Models.DynamoModel.DynamoModelState
Dynamo.Models.DynamoModel.DynamoModelState.StartedUI = 2 -> Dynamo.Models.DynamoModel.DynamoModelState
Dynamo.Models.DynamoModel.DynamoModelState.StartedUIless = 1 -> Dynamo.Models.DynamoModel.DynamoModelState
Dynamo.Models.DynamoModel.DynamoReady -> System.Action<Dynamo.Extensions.ReadyParams>
Dynamo.Models.DynamoModel.EngineController.get -> Dynamo.Engine.EngineController
Dynamo.Models.DynamoModel.EngineController.set -> void
Dynamo.Models.DynamoModel.EvaluationCompleted -> System.EventHandler<Dynamo.Models.EvaluationCompletedEventArgs>
Dynamo.Models.DynamoModel.ExecuteCommand(Dynamo.Models.DynamoModel.RecordableCommand command) -> void
Dynamo.Models.DynamoModel.ExtensionManager.get -> Dynamo.Extensions.IExtensionManager
Dynamo.Models.DynamoModel.ForceRun() -> void
Dynamo.Models.DynamoModel.ForceRunCancelCommand
Dynamo.Models.DynamoModel.ForceRunCancelCommand.ForceRunCancelCommand(bool showErrors, bool cancelRun) -> void
Dynamo.Models.DynamoModel.HostVersion.get -> string
Dynamo.Models.DynamoModel.HostVersion.set -> void
Dynamo.Models.DynamoModel.InsertFileCommand
Dynamo.Models.DynamoModel.InsertFileCommand.InsertFileCommand(string filePath, bool forceManualExecutionMode = false) -> void
Dynamo.Models.DynamoModel.InsertFileFromPath(string filePath, bool forceManualExecutionMode = false) -> void
Dynamo.Models.DynamoModel.IsShowingConnectors.get -> bool
Dynamo.Models.DynamoModel.IsShowingConnectors.set -> void
Dynamo.Models.DynamoModel.IsShowingConnectorTooltip.get -> bool
Dynamo.Models.DynamoModel.IsShowingConnectorTooltip.set -> void
Dynamo.Models.DynamoModel.IStartConfigCrashReporter
Dynamo.Models.DynamoModel.IStartConfigCrashReporter.CRStartConfig.get -> Dynamo.Models.DynamoModel.CrashReporterStartupOptions
Dynamo.Models.DynamoModel.IStartConfigCrashReporter.CRStartConfig.set -> void
Dynamo.Models.DynamoModel.IStartConfiguration
Dynamo.Models.DynamoModel.IStartConfiguration.AuthProvider.get -> Greg.IAuthProvider
Dynamo.Models.DynamoModel.IStartConfiguration.AuthProvider.set -> void
Dynamo.Models.DynamoModel.IStartConfiguration.Context.get -> string
Dynamo.Models.DynamoModel.IStartConfiguration.Context.set -> void
Dynamo.Models.DynamoModel.IStartConfiguration.DynamoCorePath.get -> string
Dynamo.Models.DynamoModel.IStartConfiguration.DynamoCorePath.set -> void
Dynamo.Models.DynamoModel.IStartConfiguration.DynamoHostPath.get -> string
Dynamo.Models.DynamoModel.IStartConfiguration.DynamoHostPath.set -> void
Dynamo.Models.DynamoModel.IStartConfiguration.Extensions.get -> System.Collections.Generic.IEnumerable<Dynamo.Extensions.IExtension>
Dynamo.Models.DynamoModel.IStartConfiguration.Extensions.set -> void
Dynamo.Models.DynamoModel.IStartConfiguration.GeometryFactoryPath.get -> string
Dynamo.Models.DynamoModel.IStartConfiguration.GeometryFactoryPath.set -> void
Dynamo.Models.DynamoModel.IStartConfiguration.HostAnalyticsInfo.get -> Dynamo.Models.HostAnalyticsInfo
Dynamo.Models.DynamoModel.IStartConfiguration.HostAnalyticsInfo.set -> void
Dynamo.Models.DynamoModel.IStartConfiguration.IsHeadless.get -> bool
Dynamo.Models.DynamoModel.IStartConfiguration.IsHeadless.set -> void
Dynamo.Models.DynamoModel.IStartConfiguration.NoNetworkMode.get -> bool
Dynamo.Models.DynamoModel.IStartConfiguration.PathResolver.get -> Dynamo.Interfaces.IPathResolver
Dynamo.Models.DynamoModel.IStartConfiguration.PathResolver.set -> void
Dynamo.Models.DynamoModel.IStartConfiguration.Preferences.get -> Dynamo.Interfaces.IPreferences
Dynamo.Models.DynamoModel.IStartConfiguration.Preferences.set -> void
Dynamo.Models.DynamoModel.IStartConfiguration.ProcessMode.get -> Dynamo.Scheduler.TaskProcessMode
Dynamo.Models.DynamoModel.IStartConfiguration.ProcessMode.set -> void
Dynamo.Models.DynamoModel.IStartConfiguration.SchedulerThread.get -> Dynamo.Scheduler.ISchedulerThread
Dynamo.Models.DynamoModel.IStartConfiguration.SchedulerThread.set -> void
Dynamo.Models.DynamoModel.IStartConfiguration.StartInTestMode.get -> bool
Dynamo.Models.DynamoModel.IStartConfiguration.StartInTestMode.set -> void
Dynamo.Models.DynamoModel.LinterManager.get -> Dynamo.Linting.LinterManager
Dynamo.Models.DynamoModel.MakeConnectionCommand
Dynamo.Models.DynamoModel.MakeConnectionCommand.ConnectionMode.get -> Dynamo.Models.DynamoModel.MakeConnectionCommand.Mode
Dynamo.Models.DynamoModel.MakeConnectionCommand.MakeConnectionCommand(string nodeId, int portIndex, Dynamo.Graph.Nodes.PortType portType, Dynamo.Models.DynamoModel.MakeConnectionCommand.Mode mode) -> void
Dynamo.Models.DynamoModel.MakeConnectionCommand.MakeConnectionCommand(System.Collections.Generic.IEnumerable<System.Guid> nodeId, int portIndex, Dynamo.Graph.Nodes.PortType portType, Dynamo.Models.DynamoModel.MakeConnectionCommand.Mode mode) -> void
Dynamo.Models.DynamoModel.MakeConnectionCommand.MakeConnectionCommand(System.Guid nodeId, int portIndex, Dynamo.Graph.Nodes.PortType portType, Dynamo.Models.DynamoModel.MakeConnectionCommand.Mode mode) -> void
Dynamo.Models.DynamoModel.MakeConnectionCommand.Mode
Dynamo.Models.DynamoModel.MakeConnectionCommand.Mode.Begin = 0 -> Dynamo.Models.DynamoModel.MakeConnectionCommand.Mode
Dynamo.Models.DynamoModel.MakeConnectionCommand.Mode.BeginCreateConnections = 7 -> Dynamo.Models.DynamoModel.MakeConnectionCommand.Mode
Dynamo.Models.DynamoModel.MakeConnectionCommand.Mode.BeginDuplicateConnection = 6 -> Dynamo.Models.DynamoModel.MakeConnectionCommand.Mode
Dynamo.Models.DynamoModel.MakeConnectionCommand.Mode.BeginShiftReconnections = 2 -> Dynamo.Models.DynamoModel.MakeConnectionCommand.Mode
Dynamo.Models.DynamoModel.MakeConnectionCommand.Mode.Cancel = 5 -> Dynamo.Models.DynamoModel.MakeConnectionCommand.Mode
Dynamo.Models.DynamoModel.MakeConnectionCommand.Mode.End = 1 -> Dynamo.Models.DynamoModel.MakeConnectionCommand.Mode
Dynamo.Models.DynamoModel.MakeConnectionCommand.Mode.EndAndStartCtrlConnection = 4 -> Dynamo.Models.DynamoModel.MakeConnectionCommand.Mode
Dynamo.Models.DynamoModel.MakeConnectionCommand.Mode.EndShiftReconnections = 3 -> Dynamo.Models.DynamoModel.MakeConnectionCommand.Mode
Dynamo.Models.DynamoModel.MakeConnectionCommand.PortIndex.get -> int
Dynamo.Models.DynamoModel.ModelBasedRecordableCommand
Dynamo.Models.DynamoModel.ModelBasedRecordableCommand.ModelBasedRecordableCommand(System.Collections.Generic.IEnumerable<System.Guid> guids) -> void
Dynamo.Models.DynamoModel.ModelBasedRecordableCommand.ModelGuid.get -> System.Guid
Dynamo.Models.DynamoModel.ModelBasedRecordableCommand.ModelGuids.get -> System.Collections.Generic.IEnumerable<System.Guid>
Dynamo.Models.DynamoModel.ModelEventCommand
Dynamo.Models.DynamoModel.ModelEventCommand.EventName.get -> string
Dynamo.Models.DynamoModel.ModelEventCommand.ModelEventCommand(string modelGuid, string eventName) -> void
Dynamo.Models.DynamoModel.ModelEventCommand.ModelEventCommand(string modelGuid, string eventName, int value) -> void
Dynamo.Models.DynamoModel.ModelEventCommand.ModelEventCommand(System.Collections.Generic.IEnumerable<System.Guid> modelGuid, string eventName) -> void
Dynamo.Models.DynamoModel.ModelEventCommand.ModelEventCommand(System.Collections.Generic.IEnumerable<System.Guid> modelGuid, string eventName, int value) -> void
Dynamo.Models.DynamoModel.ModelEventCommand.ModelEventCommand(System.Guid modelGuid, string eventName) -> void
Dynamo.Models.DynamoModel.ModelEventCommand.ModelEventCommand(System.Guid modelGuid, string eventName, int value) -> void
Dynamo.Models.DynamoModel.ModelEventCommand.Value.get -> int
Dynamo.Models.DynamoModel.MutateTestCommand
Dynamo.Models.DynamoModel.MutateTestCommand.MutateTestCommand() -> void
Dynamo.Models.DynamoModel.OnRequestsCrashPrompt(Dynamo.Core.CrashErrorReportArgs args) -> void
Dynamo.Models.DynamoModel.OpenCustomNodeWorkspace(System.Guid guid) -> bool
Dynamo.Models.DynamoModel.OpenFileCommand
Dynamo.Models.DynamoModel.OpenFileCommand.OpenFileCommand(string filePath, bool forceManualExecutionMode = false) -> void
Dynamo.Models.DynamoModel.OpenFileCommand.OpenFileCommand(string filePath, bool forceManualExecutionMode, bool isTemplate) -> void
Dynamo.Models.DynamoModel.OpenFileFromJson(string fileContents, bool forceManualExecutionMode = false) -> void
Dynamo.Models.DynamoModel.OpenFileFromJsonCommand
Dynamo.Models.DynamoModel.OpenFileFromJsonCommand.OpenFileFromJsonCommand(string fileContents, bool forceManualExecutionMode = false) -> void
Dynamo.Models.DynamoModel.OpenFileFromPath(string filePath, bool forceManualExecutionMode = false) -> void
Dynamo.Models.DynamoModel.OpenTemplateFromPath(string filePath, bool forceManualExecutionMode = false) -> void
Dynamo.Models.DynamoModel.Paste() -> void
Dynamo.Models.DynamoModel.Paste(Dynamo.Utilities.Point2D targetPoint, bool useOffset = true) -> void
Dynamo.Models.DynamoModel.PathManager.get -> Dynamo.Interfaces.IPathManager
Dynamo.Models.DynamoModel.PausePlaybackCommand
Dynamo.Models.DynamoModel.PausePlaybackCommand.PausePlaybackCommand(int pauseDurationInMs) -> void
Dynamo.Models.DynamoModel.PreferenceSettings.get -> Dynamo.Configuration.PreferenceSettings
Dynamo.Models.DynamoModel.PropertyChanged -> System.ComponentModel.PropertyChangedEventHandler
Dynamo.Models.DynamoModel.RecordableCommand
Dynamo.Models.DynamoModel.RecordableCommand.RecordableCommand() -> void
Dynamo.Models.DynamoModel.RecordableCommand.RecordableCommand(string tag) -> void
Dynamo.Models.DynamoModel.RecordableCommand.redundant -> bool
Dynamo.Models.DynamoModel.RefreshCompleted -> System.Action<Dynamo.Graph.Workspaces.HomeWorkspaceModel>
Dynamo.Models.DynamoModel.RemoveWorkspace(Dynamo.Graph.Workspaces.WorkspaceModel workspace) -> void
Dynamo.Models.DynamoModel.RequestCancelActiveStateForNode -> Dynamo.Models.NodeHandler
Dynamo.Models.DynamoModel.RequestLayoutUpdate -> System.EventHandler
Dynamo.Models.DynamoModel.RequestNodeSelect -> Dynamo.Models.NodeEventHandler
Dynamo.Models.DynamoModel.RequestsCrashPrompt -> Dynamo.Models.DynamoModel.CrashPromptHandler
Dynamo.Models.DynamoModel.RequestsRedraw -> System.EventHandler
Dynamo.Models.DynamoModel.RequestWorkspaceBackUpSave -> System.Action<string, bool>
Dynamo.Models.DynamoModel.ResetEngineInternal() -> void
Dynamo.Models.DynamoModel.RunCancelCommand
Dynamo.Models.DynamoModel.RunCancelCommand.RunCancelCommand(bool showErrors, bool cancelRun) -> void
Dynamo.Models.DynamoModel.RunCompleted -> Dynamo.Models.DynamoModel.RunCompletedHandler
Dynamo.Models.DynamoModel.RunCompletedHandler
Dynamo.Models.DynamoModel.SaveBackupFiles(object state) -> void
Dynamo.Models.DynamoModel.Scheduler.get -> Dynamo.Scheduler.DynamoScheduler
Dynamo.Models.DynamoModel.SelectInRegionCommand
Dynamo.Models.DynamoModel.SelectInRegionCommand.SelectInRegionCommand(Dynamo.Utilities.Rect2D region, bool isCrossSelection) -> void
Dynamo.Models.DynamoModel.SelectModelCommand
Dynamo.Models.DynamoModel.SelectModelCommand.SelectModelCommand(string modelGuid, Dynamo.Utilities.ModifierKeys modifiers) -> void
Dynamo.Models.DynamoModel.SelectModelCommand.SelectModelCommand(System.Collections.Generic.IEnumerable<System.Guid> modelGuids, Dynamo.Utilities.ModifierKeys modifiers) -> void
Dynamo.Models.DynamoModel.SelectModelCommand.SelectModelCommand(System.Guid modelGuid, Dynamo.Utilities.ModifierKeys modifiers) -> void
Dynamo.Models.DynamoModel.ShutDown(bool shutdownHost) -> void
Dynamo.Models.DynamoModel.ShutdownCompleted -> Dynamo.Models.DynamoModelHandler
Dynamo.Models.DynamoModel.ShutdownRequested.get -> bool
Dynamo.Models.DynamoModel.ShutdownStarted -> Dynamo.Models.DynamoModelHandler
Dynamo.Models.DynamoModel.State.get -> Dynamo.Models.DynamoModel.DynamoModelState
Dynamo.Models.DynamoModel.SwitchTabCommand
Dynamo.Models.DynamoModel.SwitchTabCommand.SwitchTabCommand(int modelIndex) -> void
Dynamo.Models.DynamoModel.TraceReconciliationProcessor.get -> Dynamo.Engine.ITraceReconciliationProcessor
Dynamo.Models.DynamoModel.TraceReconciliationProcessor.set -> void
Dynamo.Models.DynamoModel.UndoRedoCommand
Dynamo.Models.DynamoModel.UndoRedoCommand.Operation
Dynamo.Models.DynamoModel.UndoRedoCommand.Operation.Redo = 1 -> Dynamo.Models.DynamoModel.UndoRedoCommand.Operation
Dynamo.Models.DynamoModel.UndoRedoCommand.Operation.Undo = 0 -> Dynamo.Models.DynamoModel.UndoRedoCommand.Operation
Dynamo.Models.DynamoModel.UndoRedoCommand.UndoRedoCommand(Dynamo.Models.DynamoModel.UndoRedoCommand.Operation operation) -> void
Dynamo.Models.DynamoModel.UngroupModelCommand
Dynamo.Models.DynamoModel.UngroupModelCommand.UngroupModelCommand(string modelGuid) -> void
Dynamo.Models.DynamoModel.UngroupModelCommand.UngroupModelCommand(System.Collections.Generic.IEnumerable<System.Guid> modelGuid) -> void
Dynamo.Models.DynamoModel.UngroupModelCommand.UngroupModelCommand(System.Guid modelGuid) -> void
Dynamo.Models.DynamoModel.UpdateModelValueCommand
Dynamo.Models.DynamoModel.UpdateModelValueCommand.ModelGuids.get -> System.Collections.Generic.IEnumerable<System.Guid>
Dynamo.Models.DynamoModel.UpdateModelValueCommand.Name.get -> string
Dynamo.Models.DynamoModel.UpdateModelValueCommand.UpdateModelValueCommand(string modelGuid, string name, string value) -> void
Dynamo.Models.DynamoModel.UpdateModelValueCommand.UpdateModelValueCommand(System.Collections.Generic.IEnumerable<System.Guid> modelGuid, string name, string value) -> void
Dynamo.Models.DynamoModel.UpdateModelValueCommand.UpdateModelValueCommand(System.Guid modelGuid, string name, string value) -> void
Dynamo.Models.DynamoModel.UpdateModelValueCommand.UpdateModelValueCommand(System.Guid workspaceGuid, System.Collections.Generic.IEnumerable<System.Guid> modelGuid, string name, string value) -> void
Dynamo.Models.DynamoModel.UpdateModelValueCommand.UpdateModelValueCommand(System.Guid workspaceGuid, System.Guid modelGuid, string name, string value) -> void
Dynamo.Models.DynamoModel.UpdateModelValueCommand.Value.get -> string
Dynamo.Models.DynamoModel.WorkspaceAdded -> System.Action<Dynamo.Graph.Workspaces.WorkspaceModel>
Dynamo.Models.DynamoModel.WorkspaceCleared -> System.Action<Dynamo.Graph.Workspaces.WorkspaceModel>
Dynamo.Models.DynamoModel.WorkspaceClearing -> System.Action
Dynamo.Models.DynamoModel.WorkspaceClearingStarted -> System.Action<Dynamo.Graph.Workspaces.WorkspaceModel>
Dynamo.Models.DynamoModel.WorkspaceHidden -> Dynamo.Models.WorkspaceHandler
Dynamo.Models.DynamoModel.WorkspaceOpened -> Dynamo.Models.WorkspaceHandler
Dynamo.Models.DynamoModel.WorkspaceOpening -> System.Action<object>
Dynamo.Models.DynamoModel.WorkspaceRemoved -> System.Action<Dynamo.Graph.Workspaces.WorkspaceModel>
Dynamo.Models.DynamoModel.WorkspaceRemoveStarted -> System.Action<Dynamo.Graph.Workspaces.WorkspaceModel>
Dynamo.Models.DynamoModel.Workspaces.get -> System.Collections.Generic.IEnumerable<Dynamo.Graph.Workspaces.WorkspaceModel>
Dynamo.Models.DynamoModel.WorkspaceSaved -> Dynamo.Models.WorkspaceHandler
Dynamo.Models.DynamoModel.WorkspaceSaving -> Dynamo.Models.WorkspaceSaveHandler
Dynamo.Models.DynamoModelHandler
Dynamo.Models.DynamoPreferencesData
Dynamo.Models.DynamoPreferencesData.DynamoPreferencesData(double scaleFactor, bool hasRunWithoutCrash, bool isVisibleInDynamoLibrary, string version, string runType, string runPeriod) -> void
Dynamo.Models.DynamoPreferencesData.HasRunWithoutCrash.get -> bool
Dynamo.Models.DynamoPreferencesData.IsVisibleInDynamoLibrary.get -> bool
Dynamo.Models.DynamoPreferencesData.RunPeriod.get -> string
Dynamo.Models.DynamoPreferencesData.RunType.get -> string
Dynamo.Models.DynamoPreferencesData.ScaleFactor.get -> double
Dynamo.Models.DynamoPreferencesData.Version.get -> string
Dynamo.Models.EvaluationCompletedEventArgs
Dynamo.Models.EvaluationCompletedEventArgs.Error.get -> System.Exception
Dynamo.Models.EvaluationCompletedEventArgs.EvaluationCompletedEventArgs(bool evaluationTookPlace, System.Exception errorMsg = null) -> void
Dynamo.Models.EvaluationCompletedEventArgs.EvaluationSucceeded.get -> bool
Dynamo.Models.EvaluationCompletedEventArgs.EvaluationTookPlace.get -> bool
Dynamo.Models.HostAnalyticsInfo
Dynamo.Models.HostAnalyticsInfo.HostAnalyticsInfo() -> void
Dynamo.Models.HostAnalyticsInfo.HostName -> string
Dynamo.Models.HostAnalyticsInfo.HostVersion -> System.Version
Dynamo.Models.HostAnalyticsInfo.ParentId -> string
Dynamo.Models.HostAnalyticsInfo.SessionId -> string
Dynamo.Models.IEngineControllerManager
Dynamo.Models.IEngineControllerManager.EngineController.get -> Dynamo.Engine.EngineController
Dynamo.Models.NodeAutocompleteSuggestion
Dynamo.Models.NodeAutocompleteSuggestion.MLRecommendation = 0 -> Dynamo.Models.NodeAutocompleteSuggestion
Dynamo.Models.NodeAutocompleteSuggestion.ObjectType = 1 -> Dynamo.Models.NodeAutocompleteSuggestion
Dynamo.Models.NodeEventHandler
Dynamo.Models.NodeHandler
Dynamo.Models.NodeModelAssemblyLoader
Dynamo.Models.NodeModelAssemblyLoader.AssemblyLoaded -> Dynamo.Models.NodeModelAssemblyLoader.AssemblyLoadedHandler
Dynamo.Models.NodeModelAssemblyLoader.AssemblyLoadedEventArgs
Dynamo.Models.NodeModelAssemblyLoader.AssemblyLoadedEventArgs.Assembly.get -> System.Reflection.Assembly
Dynamo.Models.NodeModelAssemblyLoader.AssemblyLoadedEventArgs.AssemblyLoadedEventArgs(System.Reflection.Assembly assembly) -> void
Dynamo.Models.NodeModelAssemblyLoader.AssemblyLoadedHandler
Dynamo.Models.NodeModelAssemblyLoader.LoadedAssemblies.get -> System.Collections.Generic.IEnumerable<System.Reflection.Assembly>
Dynamo.Models.NodeModelAssemblyLoader.NodeModelAssemblyLoader() -> void
Dynamo.Models.RunSettings
Dynamo.Models.RunSettings.RunEnabled.get -> bool
Dynamo.Models.RunSettings.RunEnabled.set -> void
Dynamo.Models.RunSettings.RunPeriod.get -> int
Dynamo.Models.RunSettings.RunPeriod.set -> void
Dynamo.Models.RunSettings.RunSettings() -> void
Dynamo.Models.RunSettings.RunSettings(Dynamo.Models.RunType runType, int period) -> void
Dynamo.Models.RunSettings.RunType.get -> Dynamo.Models.RunType
Dynamo.Models.RunSettings.RunType.set -> void
Dynamo.Models.RunSettings.RunTypesEnabled.get -> bool
Dynamo.Models.RunSettings.RunTypesEnabled.set -> void
Dynamo.Models.RunType
Dynamo.Models.RunType.Automatic = 1 -> Dynamo.Models.RunType
Dynamo.Models.RunType.Manual = 0 -> Dynamo.Models.RunType
Dynamo.Models.RunType.Periodic = 2 -> Dynamo.Models.RunType
Dynamo.Models.WorkspaceHandler
Dynamo.Models.WorkspaceSaveHandler
Dynamo.Properties.Resources
Dynamo.Scheduler.AsyncTask
Dynamo.Scheduler.AsyncTask.AsyncTask(Dynamo.Scheduler.IScheduler scheduler) -> void
Dynamo.Scheduler.AsyncTask.Completed -> Dynamo.Scheduler.AsyncTaskCompletedHandler
Dynamo.Scheduler.AsyncTask.TaskMergeInstruction
Dynamo.Scheduler.AsyncTask.TaskMergeInstruction.KeepBoth = 0 -> Dynamo.Scheduler.AsyncTask.TaskMergeInstruction
Dynamo.Scheduler.AsyncTask.TaskMergeInstruction.KeepOther = 2 -> Dynamo.Scheduler.AsyncTask.TaskMergeInstruction
Dynamo.Scheduler.AsyncTask.TaskMergeInstruction.KeepThis = 1 -> Dynamo.Scheduler.AsyncTask.TaskMergeInstruction
Dynamo.Scheduler.AsyncTask.TaskPriority
Dynamo.Scheduler.AsyncTask.TaskPriority.AboveNormal = 2 -> Dynamo.Scheduler.AsyncTask.TaskPriority
Dynamo.Scheduler.AsyncTask.TaskPriority.BelowNormal = 4 -> Dynamo.Scheduler.AsyncTask.TaskPriority
Dynamo.Scheduler.AsyncTask.TaskPriority.Critical = 0 -> Dynamo.Scheduler.AsyncTask.TaskPriority
Dynamo.Scheduler.AsyncTask.TaskPriority.Highest = 1 -> Dynamo.Scheduler.AsyncTask.TaskPriority
Dynamo.Scheduler.AsyncTask.TaskPriority.Idle = 6 -> Dynamo.Scheduler.AsyncTask.TaskPriority
Dynamo.Scheduler.AsyncTask.TaskPriority.Lowest = 5 -> Dynamo.Scheduler.AsyncTask.TaskPriority
Dynamo.Scheduler.AsyncTask.TaskPriority.Normal = 3 -> Dynamo.Scheduler.AsyncTask.TaskPriority
Dynamo.Scheduler.AsyncTaskCompletedHandler
Dynamo.Scheduler.AsyncTaskExtensions
Dynamo.Scheduler.DelegateBasedAsyncTask
Dynamo.Scheduler.DelegateBasedAsyncTask.DelegateBasedAsyncTask(Dynamo.Scheduler.IScheduler scheduler) -> void
Dynamo.Scheduler.DelegateBasedAsyncTask.DelegateBasedAsyncTask(Dynamo.Scheduler.IScheduler scheduler, System.Action action) -> void
Dynamo.Scheduler.DynamoScheduler
Dynamo.Scheduler.DynamoScheduler.HasPendingTasks.get -> bool
Dynamo.Scheduler.DynamoScheduler.HasTaskInProgress.get -> bool
Dynamo.Scheduler.DynamoScheduler.NextTimeStamp.get -> Dynamo.Scheduler.TimeStamp
Dynamo.Scheduler.DynamoScheduler.ProcessMode.get -> Dynamo.Scheduler.TaskProcessMode
Dynamo.Scheduler.DynamoScheduler.ProcessMode.set -> void
Dynamo.Scheduler.DynamoScheduler.ProcessNextTask(bool waitIfTaskQueueIsEmpty) -> bool
Dynamo.Scheduler.DynamoScheduler.ScheduleForExecution(Dynamo.Scheduler.AsyncTask asyncTask) -> void
Dynamo.Scheduler.DynamoScheduler.Tasks.get -> System.Collections.Generic.IEnumerable<Dynamo.Scheduler.AsyncTask>
Dynamo.Scheduler.IScheduler
Dynamo.Scheduler.IScheduler.NextTimeStamp.get -> Dynamo.Scheduler.TimeStamp
Dynamo.Scheduler.IScheduler.ProcessNextTask(bool waitIfTaskQueueIsEmpty) -> bool
Dynamo.Scheduler.IScheduler.ScheduleForExecution(Dynamo.Scheduler.AsyncTask asyncTask) -> void
Dynamo.Scheduler.IScheduler.Tasks.get -> System.Collections.Generic.IEnumerable<Dynamo.Scheduler.AsyncTask>
Dynamo.Scheduler.ISchedulerThread
Dynamo.Scheduler.ISchedulerThread.Initialize(Dynamo.Scheduler.IScheduler owningScheduler) -> void
Dynamo.Scheduler.ISchedulerThread.Shutdown() -> void
Dynamo.Scheduler.TaskProcessMode
Dynamo.Scheduler.TaskProcessMode.Asynchronous = 1 -> Dynamo.Scheduler.TaskProcessMode
Dynamo.Scheduler.TaskProcessMode.Synchronous = 0 -> Dynamo.Scheduler.TaskProcessMode
Dynamo.Scheduler.TaskStateChangedEventArgs
Dynamo.Scheduler.TaskStateChangedEventArgs.State
Dynamo.Scheduler.TaskStateChangedEventArgs.State.CompletionHandled = 5 -> Dynamo.Scheduler.TaskStateChangedEventArgs.State
Dynamo.Scheduler.TaskStateChangedEventArgs.State.Discarded = 1 -> Dynamo.Scheduler.TaskStateChangedEventArgs.State
Dynamo.Scheduler.TaskStateChangedEventArgs.State.ExecutionCompleted = 4 -> Dynamo.Scheduler.TaskStateChangedEventArgs.State
Dynamo.Scheduler.TaskStateChangedEventArgs.State.ExecutionFailed = 3 -> Dynamo.Scheduler.TaskStateChangedEventArgs.State
Dynamo.Scheduler.TaskStateChangedEventArgs.State.ExecutionStarting = 2 -> Dynamo.Scheduler.TaskStateChangedEventArgs.State
Dynamo.Scheduler.TaskStateChangedEventArgs.State.Scheduled = 0 -> Dynamo.Scheduler.TaskStateChangedEventArgs.State
Dynamo.Scheduler.TaskStateChangedEventHandler
Dynamo.Scheduler.TimeStamp
Dynamo.Scheduler.TimeStamp.TimeStamp() -> void
Dynamo.Search.BrowserInternalElement
Dynamo.Search.BrowserInternalElement.FullCategoryName.get -> string
Dynamo.Search.BrowserInternalElement.FullCategoryName.set -> void
Dynamo.Search.BrowserInternalElement.OldParent.get -> Dynamo.Search.BrowserItem
Dynamo.Search.BrowserInternalElement.OldParent.set -> void
Dynamo.Search.BrowserInternalElement.Parent.get -> Dynamo.Search.BrowserItem
Dynamo.Search.BrowserInternalElement.Parent.set -> void
Dynamo.Search.BrowserInternalElement.Siblings.get -> System.Collections.ObjectModel.ObservableCollection<Dynamo.Search.BrowserItem>
Dynamo.Search.BrowserInternalElement.UIParent.get -> object
Dynamo.Search.BrowserInternalElement.UIParent.set -> void
Dynamo.Search.BrowserItem
Dynamo.Search.BrowserItem.BrowserItem() -> void
Dynamo.Search.BrowserItem.BrowserItemHandler
Dynamo.Search.BrowserItem.Executed -> Dynamo.Search.BrowserItem.BrowserItemHandler
Dynamo.Search.BrowserItem.Height.get -> int
Dynamo.Search.BrowserItem.Height.set -> void
Dynamo.Search.BrowserItem.IsExpanded.get -> bool
Dynamo.Search.BrowserItem.IsExpanded.set -> void
Dynamo.Search.BrowserItem.IsSelected.get -> bool
Dynamo.Search.BrowserItem.IsSelected.set -> void
Dynamo.Search.BrowserItem.OnExecuted() -> void
Dynamo.Search.BrowserItem.Visibility.get -> bool
Dynamo.Search.BrowserItem.Visibility.set -> void
Dynamo.Search.EntryDictionary<V>
Dynamo.Search.EntryDictionary<V>.Entries.get -> System.Collections.Generic.IEnumerable<V>
Dynamo.Search.EntryDictionary<V>.EntryAdded -> System.Action<V>
Dynamo.Search.EntryDictionary<V>.EntryRemoved -> System.Action<V>
Dynamo.Search.EntryDictionary<V>.EntryUpdated -> System.Action<V>
Dynamo.Search.EntryDictionary<V>.NumElements.get -> int
Dynamo.Search.EntryDictionary<V>.NumTags.get -> int
Dynamo.Search.ISearchCategory<TEntry>
Dynamo.Search.ISearchCategory<TEntry>.Entries.get -> System.Collections.Generic.IEnumerable<TEntry>
Dynamo.Search.ISearchCategory<TEntry>.Name.get -> string
Dynamo.Search.ISearchCategory<TEntry>.SubCategories.get -> System.Collections.Generic.IEnumerable<Dynamo.Search.ISearchCategory<TEntry>>
Dynamo.Search.ISearchEntry
Dynamo.Search.ISearchEntry.Description.get -> string
Dynamo.Search.ISearchEntry.Name.get -> string
Dynamo.Search.ISearchEntry.SearchTags.get -> System.Collections.Generic.ICollection<string>
Dynamo.Search.ISearchEntry.SearchTagWeights.get -> System.Collections.Generic.IEnumerable<double>
Dynamo.Search.ISource<TItem>
Dynamo.Search.ISource<TItem>.ItemProduced -> System.Action<TItem>
Dynamo.Search.LuceneSearch
Dynamo.Search.LuceneSearch.LuceneSearch() -> void
Dynamo.Search.NodeSearchModel
Dynamo.Search.SearchCategoryUtil
Dynamo.Search.SearchElements.AutoCompletionNodeMachineLearningInfo
Dynamo.Search.SearchElements.AutoCompletionNodeMachineLearningInfo.AutoCompletionNodeMachineLearningInfo() -> void
Dynamo.Search.SearchElements.AutoCompletionNodeMachineLearningInfo.AutoCompletionNodeMachineLearningInfo(bool displayIcon, bool isByRecommendation, double confidenceScore) -> void
Dynamo.Search.SearchElements.AutoCompletionNodeMachineLearningInfo.ConfidenceScore.get -> double
Dynamo.Search.SearchElements.AutoCompletionNodeMachineLearningInfo.ConfidenceScore.set -> void
Dynamo.Search.SearchElements.AutoCompletionNodeMachineLearningInfo.DisplayIcon.get -> bool
Dynamo.Search.SearchElements.AutoCompletionNodeMachineLearningInfo.DisplayIcon.set -> void
Dynamo.Search.SearchElements.AutoCompletionNodeMachineLearningInfo.IsByRecommendation.get -> bool
Dynamo.Search.SearchElements.AutoCompletionNodeMachineLearningInfo.IsByRecommendation.set -> void
Dynamo.Search.SearchElements.AutoCompletionNodeMachineLearningInfo.IsByUse.get -> bool
Dynamo.Search.SearchElements.AutoCompletionNodeMachineLearningInfo.IsByUse.set -> void
Dynamo.Search.SearchElements.CodeBlockNodeSearchElement
Dynamo.Search.SearchElements.CodeBlockNodeSearchElement.CodeBlockNodeSearchElement(Dynamo.Graph.Nodes.TypeLoadData data, Dynamo.Engine.LibraryServices manager) -> void
Dynamo.Search.SearchElements.CustomNodeSearchElement
Dynamo.Search.SearchElements.CustomNodeSearchElement.CustomNodeSearchElement(Dynamo.Graph.Nodes.CustomNodes.ICustomNodeSource customNodeManager, Dynamo.CustomNodeInfo info) -> void
Dynamo.Search.SearchElements.CustomNodeSearchElement.ID.get -> System.Guid
Dynamo.Search.SearchElements.CustomNodeSearchElement.Path.get -> string
Dynamo.Search.SearchElements.CustomNodeSearchElement.SyncWithCustomNodeInfo(Dynamo.CustomNodeInfo info) -> void
Dynamo.Search.SearchElements.DragDropNodeSearchElementInfo
Dynamo.Search.SearchElements.DragDropNodeSearchElementInfo.DragDropNodeSearchElementInfo(Dynamo.Search.SearchElements.NodeSearchElement searchElement) -> void
Dynamo.Search.SearchElements.DragDropNodeSearchElementInfo.SearchElement.get -> Dynamo.Search.SearchElements.NodeSearchElement
Dynamo.Search.SearchElements.ElementTypes
Dynamo.Search.SearchElements.ElementTypes.BuiltIn = 65536 -> Dynamo.Search.SearchElements.ElementTypes
Dynamo.Search.SearchElements.ElementTypes.CustomNode = 2 -> Dynamo.Search.SearchElements.ElementTypes
Dynamo.Search.SearchElements.ElementTypes.None = 0 -> Dynamo.Search.SearchElements.ElementTypes
Dynamo.Search.SearchElements.ElementTypes.Packaged = 131072 -> Dynamo.Search.SearchElements.ElementTypes
Dynamo.Search.SearchElements.ElementTypes.ZeroTouch = 1 -> Dynamo.Search.SearchElements.ElementTypes
Dynamo.Search.SearchElements.NodeModelSearchElement
Dynamo.Search.SearchElements.NodeModelSearchElementBase
Dynamo.Search.SearchElements.NodeModelSearchElementBase.NodeModelSearchElementBase(Dynamo.Graph.Nodes.TypeLoadData typeLoadData) -> void
Dynamo.Search.SearchElements.NodeSearchElement
Dynamo.Search.SearchElements.NodeSearchElement.Assembly.get -> string
Dynamo.Search.SearchElements.NodeSearchElement.Assembly.set -> void
Dynamo.Search.SearchElements.NodeSearchElement.Categories.get -> System.Collections.Generic.ICollection<string>
Dynamo.Search.SearchElements.NodeSearchElement.Clone() -> object
Dynamo.Search.SearchElements.NodeSearchElement.Description.get -> string
Dynamo.Search.SearchElements.NodeSearchElement.Description.set -> void
Dynamo.Search.SearchElements.NodeSearchElement.ElementType.get -> Dynamo.Search.SearchElements.ElementTypes
Dynamo.Search.SearchElements.NodeSearchElement.ElementType.set -> void
Dynamo.Search.SearchElements.NodeSearchElement.FullCategoryName.get -> string
Dynamo.Search.SearchElements.NodeSearchElement.FullCategoryName.set -> void
Dynamo.Search.SearchElements.NodeSearchElement.Group.get -> Dynamo.Search.SearchElements.SearchElementGroup
Dynamo.Search.SearchElements.NodeSearchElement.Group.set -> void
Dynamo.Search.SearchElements.NodeSearchElement.iconName -> string
Dynamo.Search.SearchElements.NodeSearchElement.IconName.get -> string
Dynamo.Search.SearchElements.NodeSearchElement.inputParameters -> System.Collections.Generic.List<System.Tuple<string, string>>
Dynamo.Search.SearchElements.NodeSearchElement.InputParameters.get -> System.Collections.Generic.IEnumerable<System.Tuple<string, string>>
Dynamo.Search.SearchElements.NodeSearchElement.IsVisibleInSearch.get -> bool
Dynamo.Search.SearchElements.NodeSearchElement.IsVisibleInSearch.set -> void
Dynamo.Search.SearchElements.NodeSearchElement.ItemProduced -> System.Action<Dynamo.Graph.Nodes.NodeModel>
Dynamo.Search.SearchElements.NodeSearchElement.Name.get -> string
Dynamo.Search.SearchElements.NodeSearchElement.Name.set -> void
Dynamo.Search.SearchElements.NodeSearchElement.NodeSearchElement() -> void
Dynamo.Search.SearchElements.NodeSearchElement.outputParameters -> System.Collections.Generic.List<string>
Dynamo.Search.SearchElements.NodeSearchElement.OutputParameters.get -> System.Collections.Generic.IEnumerable<string>
Dynamo.Search.SearchElements.NodeSearchElement.Parameters.get -> string
Dynamo.Search.SearchElements.NodeSearchElement.Parameters.set -> void
Dynamo.Search.SearchElements.NodeSearchElement.SearchKeywords.get -> System.Collections.Generic.ICollection<string>
Dynamo.Search.SearchElements.NodeSearchElement.VisibilityChanged -> System.Action
Dynamo.Search.SearchElements.NodeSearchElement.Weight -> double
Dynamo.Search.SearchElements.SearchElementBase
Dynamo.Search.SearchElements.SearchElementBase.OnExecuted() -> void
Dynamo.Search.SearchElements.SearchElementBase.SearchElementBase() -> void
Dynamo.Search.SearchElements.SearchElementBase.SearchElementHandler
Dynamo.Search.SearchElements.SearchElementGroup
Dynamo.Search.SearchElements.SearchElementGroup.Action = 2 -> Dynamo.Search.SearchElements.SearchElementGroup
Dynamo.Search.SearchElements.SearchElementGroup.Create = 1 -> Dynamo.Search.SearchElements.SearchElementGroup
Dynamo.Search.SearchElements.SearchElementGroup.None = 0 -> Dynamo.Search.SearchElements.SearchElementGroup
Dynamo.Search.SearchElements.SearchElementGroup.Query = 3 -> Dynamo.Search.SearchElements.SearchElementGroup
Dynamo.Search.SearchElements.ZeroTouchSearchElement
Dynamo.Search.SearchElements.ZeroTouchSearchElement.ZeroTouchSearchElement(Dynamo.Engine.FunctionDescriptor functionDescriptor) -> void
Dynamo.Search.SearchLibrary<TEntry, TItem>
Dynamo.Search.SearchLibrary<TEntry, TItem>.ItemProduced -> System.Action<TItem>
Dynamo.Selection.ISelectable
Dynamo.Selection.ISelectable.Deselect() -> void
Dynamo.Selection.ISelectable.IsSelected.get -> bool
Dynamo.Selection.ISelectable.IsSelected.set -> void
Dynamo.Selection.ISelectable.Select() -> void
Dynamo.Updates.BinaryVersion
Dynamo.Utilities.LuceneCustomAnalyzer
Dynamo.Utilities.LuceneCustomAnalyzer.LuceneCustomAnalyzer(Lucene.Net.Util.LuceneVersion matchVersion) -> void
Dynamo.Visualization.DefaultRenderPackage
Dynamo.Visualization.DefaultRenderPackage.AddLineStripVertex(double x, double y, double z) -> void
Dynamo.Visualization.DefaultRenderPackage.AddLineStripVertexColor(byte red, byte green, byte blue, byte alpha) -> void
Dynamo.Visualization.DefaultRenderPackage.AddLineStripVertexCount(int n) -> void
Dynamo.Visualization.DefaultRenderPackage.AddPointVertex(double x, double y, double z) -> void
Dynamo.Visualization.DefaultRenderPackage.AddPointVertexColor(byte red, byte green, byte blue, byte alpha) -> void
Dynamo.Visualization.DefaultRenderPackage.AddTextureMapForMeshVerticesRange(int startIndex, int endIndex, byte[] textureMap, int stride) -> void
Dynamo.Visualization.DefaultRenderPackage.AddTriangleVertex(double x, double y, double z) -> void
Dynamo.Visualization.DefaultRenderPackage.AddTriangleVertexColor(byte red, byte green, byte blue, byte alpha) -> void
Dynamo.Visualization.DefaultRenderPackage.AddTriangleVertexNormal(double x, double y, double z) -> void
Dynamo.Visualization.DefaultRenderPackage.AddTriangleVertexUV(double u, double v) -> void
Dynamo.Visualization.DefaultRenderPackage.AllowLegacyColorOperations.get -> bool
Dynamo.Visualization.DefaultRenderPackage.AllowLegacyColorOperations.set -> void
Dynamo.Visualization.DefaultRenderPackage.AppendLineVertexColorRange(byte[] colors) -> void
Dynamo.Visualization.DefaultRenderPackage.AppendMeshVertexColorRange(byte[] colors) -> void
Dynamo.Visualization.DefaultRenderPackage.AppendPointVertexColorRange(byte[] colors) -> void
Dynamo.Visualization.DefaultRenderPackage.ApplyLineVertexColors(byte[] colors) -> void
Dynamo.Visualization.DefaultRenderPackage.ApplyMeshVertexColors(byte[] colors) -> void
Dynamo.Visualization.DefaultRenderPackage.ApplyPointVertexColors(byte[] colors) -> void
Dynamo.Visualization.DefaultRenderPackage.Clear() -> void
Dynamo.Visualization.DefaultRenderPackage.Colors.get -> System.Collections.Generic.IEnumerable<byte>
Dynamo.Visualization.DefaultRenderPackage.ColorsStride.get -> int
Dynamo.Visualization.DefaultRenderPackage.ColorsStride.set -> void
Dynamo.Visualization.DefaultRenderPackage.DefaultRenderPackage() -> void
Dynamo.Visualization.DefaultRenderPackage.Description.get -> string
Dynamo.Visualization.DefaultRenderPackage.Description.set -> void
Dynamo.Visualization.DefaultRenderPackage.DisplayLabels.get -> bool
Dynamo.Visualization.DefaultRenderPackage.DisplayLabels.set -> void
Dynamo.Visualization.DefaultRenderPackage.HasRenderingData.get -> bool
Dynamo.Visualization.DefaultRenderPackage.IsSelected.get -> bool
Dynamo.Visualization.DefaultRenderPackage.IsSelected.set -> void
Dynamo.Visualization.DefaultRenderPackage.LineStripIndices.get -> System.Collections.Generic.IEnumerable<int>
Dynamo.Visualization.DefaultRenderPackage.LineStripVertexColors.get -> System.Collections.Generic.IEnumerable<byte>
Dynamo.Visualization.DefaultRenderPackage.LineStripVertexCounts.get -> System.Collections.Generic.IEnumerable<int>
Dynamo.Visualization.DefaultRenderPackage.LineStripVertices.get -> System.Collections.Generic.IEnumerable<double>
Dynamo.Visualization.DefaultRenderPackage.LineVertexColorCount.get -> int
Dynamo.Visualization.DefaultRenderPackage.LineVertexCount.get -> int
Dynamo.Visualization.DefaultRenderPackage.MeshIndices.get -> System.Collections.Generic.IEnumerable<int>
Dynamo.Visualization.DefaultRenderPackage.MeshNormals.get -> System.Collections.Generic.IEnumerable<double>
Dynamo.Visualization.DefaultRenderPackage.MeshTextureCoordinates.get -> System.Collections.Generic.IEnumerable<double>
Dynamo.Visualization.DefaultRenderPackage.MeshVertexColorCount.get -> int
Dynamo.Visualization.DefaultRenderPackage.MeshVertexColors.get -> System.Collections.Generic.IEnumerable<byte>
Dynamo.Visualization.DefaultRenderPackage.MeshVertexCount.get -> int
Dynamo.Visualization.DefaultRenderPackage.MeshVertices.get -> System.Collections.Generic.IEnumerable<double>
Dynamo.Visualization.DefaultRenderPackage.MeshVerticesRangesAssociatedWithTextureMaps.get -> System.Collections.Generic.List<System.Tuple<int, int>>
Dynamo.Visualization.DefaultRenderPackage.PointIndices.get -> System.Collections.Generic.IEnumerable<int>
Dynamo.Visualization.DefaultRenderPackage.PointVertexColorCount.get -> int
Dynamo.Visualization.DefaultRenderPackage.PointVertexColors.get -> System.Collections.Generic.IEnumerable<byte>
Dynamo.Visualization.DefaultRenderPackage.PointVertexCount.get -> int
Dynamo.Visualization.DefaultRenderPackage.PointVertices.get -> System.Collections.Generic.IEnumerable<double>
Dynamo.Visualization.DefaultRenderPackage.RequiresPerVertexColoration.get -> bool
Dynamo.Visualization.DefaultRenderPackage.RequiresPerVertexColoration.set -> void
Dynamo.Visualization.DefaultRenderPackage.SetColors(byte[] colors) -> void
Dynamo.Visualization.DefaultRenderPackage.TextureMapsList.get -> System.Collections.Generic.List<byte[]>
Dynamo.Visualization.DefaultRenderPackage.TextureMapsStrideList.get -> System.Collections.Generic.List<int>
Dynamo.Visualization.DefaultRenderPackage.UpdateLineVertexColorForRange(int startIndex, int endIndex, byte red, byte green, byte blue, byte alpha) -> void
Dynamo.Visualization.DefaultRenderPackage.UpdateMeshVertexColorForRange(int startIndex, int endIndex, byte red, byte green, byte blue, byte alpha) -> void
Dynamo.Visualization.DefaultRenderPackage.UpdatePointVertexColorForRange(int startIndex, int endIndex, byte red, byte green, byte blue, byte alpha) -> void
Dynamo.Visualization.DefaultRenderPackageFactory
Dynamo.Visualization.DefaultRenderPackageFactory.CreateRenderPackage() -> Autodesk.DesignScript.Interfaces.IRenderPackage
Dynamo.Visualization.DefaultRenderPackageFactory.DefaultRenderPackageFactory() -> void
Dynamo.Visualization.DefaultRenderPackageFactory.TessellationParameters.get -> Autodesk.DesignScript.Interfaces.TessellationParameters
Dynamo.Visualization.DefaultRenderPackageFactory.TessellationParameters.set -> void
Dynamo.Visualization.IRenderPackageFactory
Dynamo.Visualization.IRenderPackageFactory.CreateRenderPackage() -> Autodesk.DesignScript.Interfaces.IRenderPackage
Dynamo.Visualization.IRenderPackageFactory.TessellationParameters.get -> Autodesk.DesignScript.Interfaces.TessellationParameters
Dynamo.Visualization.IRenderPackageFactory.TessellationParameters.set -> void
Dynamo.Visualization.IRenderPackageSource<T>
Dynamo.Visualization.IRenderPackageSource<T>.RenderPackagesUpdated -> System.Action<T, Dynamo.Visualization.RenderPackageCache>
Dynamo.Visualization.RenderPackageCache
Dynamo.Visualization.RenderPackageCache.Add(Autodesk.DesignScript.Interfaces.IRenderPackage package) -> void
Dynamo.Visualization.RenderPackageCache.Add(Autodesk.DesignScript.Interfaces.IRenderPackage package, System.Guid outputPortId) -> void
Dynamo.Visualization.RenderPackageCache.Add(Dynamo.Visualization.RenderPackageCache other) -> void
Dynamo.Visualization.RenderPackageCache.GetPortPackages(System.Guid portId) -> Dynamo.Visualization.RenderPackageCache
Dynamo.Visualization.RenderPackageCache.IsEmpty() -> bool
Dynamo.Visualization.RenderPackageCache.Packages.get -> System.Collections.Generic.IEnumerable<Autodesk.DesignScript.Interfaces.IRenderPackage>
Dynamo.Visualization.RenderPackageCache.RenderPackageCache() -> void
Dynamo.Visualization.RenderPackageCache.RenderPackageCache(System.Collections.Generic.IEnumerable<Autodesk.DesignScript.Interfaces.IRenderPackage> otherPackages) -> void
Dynamo.Wpf.Interfaces.ILibraryViewCustomization
Dynamo.Wpf.Interfaces.ILibraryViewCustomization.AddElements(System.Collections.Generic.IEnumerable<Dynamo.Wpf.Interfaces.LayoutElement> elements, string sectionText = "") -> bool
Dynamo.Wpf.Interfaces.ILibraryViewCustomization.AddIncludeInfo(System.Collections.Generic.IEnumerable<Dynamo.Wpf.Interfaces.LayoutIncludeInfo> includes, string sectionText = "") -> bool
Dynamo.Wpf.Interfaces.ILibraryViewCustomization.AddSections(System.Collections.Generic.IEnumerable<Dynamo.Wpf.Interfaces.LayoutSection> sections) -> bool
Dynamo.Wpf.Interfaces.ILibraryViewCustomization.GetSpecification() -> Dynamo.Wpf.Interfaces.LayoutSpecification
Dynamo.Wpf.Interfaces.ILibraryViewCustomization.OnAppShutdown() -> void
Dynamo.Wpf.Interfaces.ILibraryViewCustomization.RegisterResourceStream(string urlpath, System.IO.Stream resource) -> bool
Dynamo.Wpf.Interfaces.ILibraryViewCustomization.SetSpecification(Dynamo.Wpf.Interfaces.LayoutSpecification specification) -> void
Dynamo.Wpf.Interfaces.ILibraryViewCustomization.SpecificationUpdated -> System.EventHandler
Dynamo.Wpf.Interfaces.ILibraryViewCustomization.ToJSONStream() -> System.IO.Stream
Dynamo.Wpf.Interfaces.LayoutElement
Dynamo.Wpf.Interfaces.LayoutElement.childElements.get -> System.Collections.Generic.List<Dynamo.Wpf.Interfaces.LayoutElement>
Dynamo.Wpf.Interfaces.LayoutElement.childElements.set -> void
Dynamo.Wpf.Interfaces.LayoutElement.elementType.get -> Dynamo.Wpf.Interfaces.LayoutElementType
Dynamo.Wpf.Interfaces.LayoutElement.elementType.set -> void
Dynamo.Wpf.Interfaces.LayoutElement.EnumerateChildren() -> System.Collections.Generic.IEnumerable<Dynamo.Wpf.Interfaces.LayoutElement>
Dynamo.Wpf.Interfaces.LayoutElement.EnumerateIncludes() -> System.Collections.Generic.IEnumerable<Dynamo.Wpf.Interfaces.LayoutIncludeInfo>
Dynamo.Wpf.Interfaces.LayoutElement.iconUrl.get -> string
Dynamo.Wpf.Interfaces.LayoutElement.iconUrl.set -> void
Dynamo.Wpf.Interfaces.LayoutElement.include.get -> System.Collections.Generic.List<Dynamo.Wpf.Interfaces.LayoutIncludeInfo>
Dynamo.Wpf.Interfaces.LayoutElement.include.set -> void
Dynamo.Wpf.Interfaces.LayoutElement.LayoutElement(string text) -> void
Dynamo.Wpf.Interfaces.LayoutElement.text.get -> string
Dynamo.Wpf.Interfaces.LayoutElement.text.set -> void
Dynamo.Wpf.Interfaces.LayoutElementType
Dynamo.Wpf.Interfaces.LayoutElementType.action = 4 -> Dynamo.Wpf.Interfaces.LayoutElementType
Dynamo.Wpf.Interfaces.LayoutElementType.category = 1 -> Dynamo.Wpf.Interfaces.LayoutElementType
Dynamo.Wpf.Interfaces.LayoutElementType.classType = 7 -> Dynamo.Wpf.Interfaces.LayoutElementType
Dynamo.Wpf.Interfaces.LayoutElementType.create = 3 -> Dynamo.Wpf.Interfaces.LayoutElementType
Dynamo.Wpf.Interfaces.LayoutElementType.group = 2 -> Dynamo.Wpf.Interfaces.LayoutElementType
Dynamo.Wpf.Interfaces.LayoutElementType.none = 6 -> Dynamo.Wpf.Interfaces.LayoutElementType
Dynamo.Wpf.Interfaces.LayoutElementType.query = 5 -> Dynamo.Wpf.Interfaces.LayoutElementType
Dynamo.Wpf.Interfaces.LayoutElementType.section = 0 -> Dynamo.Wpf.Interfaces.LayoutElementType
Dynamo.Wpf.Interfaces.LayoutIncludeInfo
Dynamo.Wpf.Interfaces.LayoutIncludeInfo.iconUrl.get -> string
Dynamo.Wpf.Interfaces.LayoutIncludeInfo.iconUrl.set -> void
Dynamo.Wpf.Interfaces.LayoutIncludeInfo.inclusive.get -> bool
Dynamo.Wpf.Interfaces.LayoutIncludeInfo.inclusive.set -> void
Dynamo.Wpf.Interfaces.LayoutIncludeInfo.LayoutIncludeInfo() -> void
Dynamo.Wpf.Interfaces.LayoutIncludeInfo.path.get -> string
Dynamo.Wpf.Interfaces.LayoutIncludeInfo.path.set -> void
Dynamo.Wpf.Interfaces.LayoutSection
Dynamo.Wpf.Interfaces.LayoutSection.LayoutSection(string text) -> void
Dynamo.Wpf.Interfaces.LayoutSection.showHeader.get -> bool
Dynamo.Wpf.Interfaces.LayoutSection.showHeader.set -> void
Dynamo.Wpf.Interfaces.LayoutSpecification
Dynamo.Wpf.Interfaces.LayoutSpecification.Clone() -> Dynamo.Wpf.Interfaces.LayoutSpecification
Dynamo.Wpf.Interfaces.LayoutSpecification.LayoutSpecification() -> void
Dynamo.Wpf.Interfaces.LayoutSpecification.sections.get -> System.Collections.Generic.List<Dynamo.Wpf.Interfaces.LayoutSection>
Dynamo.Wpf.Interfaces.LayoutSpecification.sections.set -> void
Dynamo.Wpf.Interfaces.LayoutSpecification.ToJSONStream() -> System.IO.Stream
override Dynamo.Engine.FunctionDescriptor.Equals(object obj) -> bool
override Dynamo.Engine.FunctionDescriptor.GetHashCode() -> int
override Dynamo.Engine.FunctionGroup.Equals(object obj) -> bool
override Dynamo.Engine.FunctionGroup.GetHashCode() -> int
override Dynamo.Extensions.EnumDescriptionAttribute.Description.get -> string
override Dynamo.Graph.Annotations.AnnotationModel.Deselect() -> void
override Dynamo.Graph.Annotations.AnnotationModel.DeserializeCore(System.Xml.XmlElement element, Dynamo.Graph.SaveContext context) -> void
override Dynamo.Graph.Annotations.AnnotationModel.Dispose() -> void
override Dynamo.Graph.Annotations.AnnotationModel.GUID.get -> System.Guid
override Dynamo.Graph.Annotations.AnnotationModel.GUID.set -> void
override Dynamo.Graph.Annotations.AnnotationModel.Height.get -> double
override Dynamo.Graph.Annotations.AnnotationModel.Height.set -> void
override Dynamo.Graph.Annotations.AnnotationModel.Rect.get -> Dynamo.Utilities.Rect2D
override Dynamo.Graph.Annotations.AnnotationModel.Select() -> void
override Dynamo.Graph.Annotations.AnnotationModel.SerializeCore(System.Xml.XmlElement element, Dynamo.Graph.SaveContext context) -> void
override Dynamo.Graph.Annotations.AnnotationModel.UpdateValueCore(Dynamo.Graph.UpdateValueParams updateValueParams) -> bool
override Dynamo.Graph.Annotations.AnnotationModel.Width.get -> double
override Dynamo.Graph.Annotations.AnnotationModel.Width.set -> void
override Dynamo.Graph.ConnectorPinModel.DeserializeCore(System.Xml.XmlElement nodeElement, Dynamo.Graph.SaveContext context) -> void
override Dynamo.Graph.ConnectorPinModel.Height.get -> double
override Dynamo.Graph.ConnectorPinModel.SerializeCore(System.Xml.XmlElement element, Dynamo.Graph.SaveContext context) -> void
override Dynamo.Graph.ConnectorPinModel.UpdateValueCore(Dynamo.Graph.UpdateValueParams updateValueParams) -> bool
override Dynamo.Graph.ConnectorPinModel.Width.get -> double
override Dynamo.Graph.Connectors.ConnectorModel.DeserializeCore(System.Xml.XmlElement nodeElement, Dynamo.Graph.SaveContext context) -> void
override Dynamo.Graph.Connectors.ConnectorModel.GUID.get -> System.Guid
override Dynamo.Graph.Connectors.ConnectorModel.GUID.set -> void
override Dynamo.Graph.Connectors.ConnectorModel.SerializeCore(System.Xml.XmlElement element, Dynamo.Graph.SaveContext context) -> void
override Dynamo.Graph.Connectors.ConnectorModel.UpdateValueCore(Dynamo.Graph.UpdateValueParams updateValueParams) -> bool
override Dynamo.Graph.Nodes.CodeBlockNodeModel.AstIdentifierBase.get -> string
override Dynamo.Graph.Nodes.CodeBlockNodeModel.DeserializeCore(System.Xml.XmlElement nodeElement, Dynamo.Graph.SaveContext context) -> void
override Dynamo.Graph.Nodes.CodeBlockNodeModel.GetAstIdentifierForOutputIndex(int outputIndex) -> ProtoCore.AST.AssociativeAST.IdentifierNode
override Dynamo.Graph.Nodes.CodeBlockNodeModel.GetTypeHintForOutput(int index) -> ProtoCore.Type
override Dynamo.Graph.Nodes.CodeBlockNodeModel.IsConvertible.get -> bool
override Dynamo.Graph.Nodes.CodeBlockNodeModel.IsInputNode.get -> bool
override Dynamo.Graph.Nodes.CodeBlockNodeModel.IsOutputNode.get -> bool
override Dynamo.Graph.Nodes.CodeBlockNodeModel.NodeType.get -> string
override Dynamo.Graph.Nodes.CodeBlockNodeModel.SerializeCore(System.Xml.XmlElement element, Dynamo.Graph.SaveContext context) -> void
override Dynamo.Graph.Nodes.CodeBlockNodeModel.SetNodeStateBasedOnConnectionAndDefaults() -> void
override Dynamo.Graph.Nodes.CodeBlockNodeModel.UpdateValueCore(Dynamo.Graph.UpdateValueParams updateValueParams) -> bool
override Dynamo.Graph.Nodes.CustomNodes.CustomNodeController<T>.AssignIdentifiersForFunctionCall(Dynamo.Graph.Nodes.NodeModel model, ProtoCore.AST.AssociativeAST.AssociativeNode rhs, System.Collections.Generic.List<ProtoCore.AST.AssociativeAST.AssociativeNode> resultAst) -> void
override Dynamo.Graph.Nodes.CustomNodes.CustomNodeController<T>.BuildOutputAst(Dynamo.Graph.Nodes.NodeModel model, System.Collections.Generic.List<ProtoCore.AST.AssociativeAST.AssociativeNode> inputAstNodes, System.Collections.Generic.List<ProtoCore.AST.AssociativeAST.AssociativeNode> resultAst) -> void
override Dynamo.Graph.Nodes.CustomNodes.CustomNodeController<T>.GetFunctionApplication(Dynamo.Graph.Nodes.NodeModel model, System.Collections.Generic.List<ProtoCore.AST.AssociativeAST.AssociativeNode> inputAstNodes) -> ProtoCore.AST.AssociativeAST.AssociativeNode
override Dynamo.Graph.Nodes.CustomNodes.CustomNodeController<T>.InitializeInputs(Dynamo.Graph.Nodes.NodeModel model) -> void
override Dynamo.Graph.Nodes.CustomNodes.CustomNodeController<T>.InitializeOutputs(Dynamo.Graph.Nodes.NodeModel model) -> void
override Dynamo.Graph.Nodes.CustomNodes.CustomNodeController<T>.SerializeCore(System.Xml.XmlElement nodeElement, Dynamo.Graph.SaveContext saveContext) -> void
override Dynamo.Graph.Nodes.CustomNodes.CustomNodeController<T>.SyncNodeWithDefinition(Dynamo.Graph.Nodes.NodeModel model) -> void
override Dynamo.Graph.Nodes.CustomNodes.Function.DeserializeCore(System.Xml.XmlElement nodeElement, Dynamo.Graph.SaveContext context) -> void
override Dynamo.Graph.Nodes.CustomNodes.Function.NodeType.get -> string
override Dynamo.Graph.Nodes.CustomNodes.Function.SerializeCore(System.Xml.XmlElement element, Dynamo.Graph.SaveContext context) -> void
override Dynamo.Graph.Nodes.CustomNodes.Output.DeserializeCore(System.Xml.XmlElement nodeElement, Dynamo.Graph.SaveContext context) -> void
override Dynamo.Graph.Nodes.CustomNodes.Output.IsInputNode.get -> bool
override Dynamo.Graph.Nodes.CustomNodes.Output.IsOutputNode.get -> bool
override Dynamo.Graph.Nodes.CustomNodes.Output.NodeType.get -> string
override Dynamo.Graph.Nodes.CustomNodes.Output.SerializeCore(System.Xml.XmlElement nodeElement, Dynamo.Graph.SaveContext context) -> void
override Dynamo.Graph.Nodes.CustomNodes.Output.UpdateValueCore(Dynamo.Graph.UpdateValueParams updateValueParams) -> bool
override Dynamo.Graph.Nodes.CustomNodes.Symbol.DeserializeCore(System.Xml.XmlElement nodeElement, Dynamo.Graph.SaveContext context) -> void
override Dynamo.Graph.Nodes.CustomNodes.Symbol.GetAstIdentifierForOutputIndex(int outputIndex) -> ProtoCore.AST.AssociativeAST.IdentifierNode
override Dynamo.Graph.Nodes.CustomNodes.Symbol.IsInputNode.get -> bool
override Dynamo.Graph.Nodes.CustomNodes.Symbol.IsOutputNode.get -> bool
override Dynamo.Graph.Nodes.CustomNodes.Symbol.NodeType.get -> string
override Dynamo.Graph.Nodes.CustomNodes.Symbol.SerializeCore(System.Xml.XmlElement nodeElement, Dynamo.Graph.SaveContext context) -> void
override Dynamo.Graph.Nodes.CustomNodes.Symbol.UpdateValueCore(Dynamo.Graph.UpdateValueParams updateValueParams) -> bool
override Dynamo.Graph.Nodes.DummyNode.CreateElement(System.Xml.XmlDocument xmlDocument, Dynamo.Graph.SaveContext context) -> System.Xml.XmlElement
override Dynamo.Graph.Nodes.DummyNode.DeserializeCore(System.Xml.XmlElement element, Dynamo.Graph.SaveContext context) -> void
override Dynamo.Graph.Nodes.DummyNode.SerializeCore(System.Xml.XmlElement element, Dynamo.Graph.SaveContext context) -> void
override Dynamo.Graph.Nodes.FunctionCallBase<TController, TDescriptor>.CreationName.get -> string
override Dynamo.Graph.Nodes.Info.Equals(object other) -> bool
override Dynamo.Graph.Nodes.Info.GetHashCode() -> int
override Dynamo.Graph.Nodes.Info.ToString() -> string
override Dynamo.Graph.Nodes.NodeInputData.Equals(object obj) -> bool
override Dynamo.Graph.Nodes.NodeModel.Deselect() -> void
override Dynamo.Graph.Nodes.NodeModel.DeserializeCore(System.Xml.XmlElement nodeElement, Dynamo.Graph.SaveContext context) -> void
override Dynamo.Graph.Nodes.NodeModel.GUID.get -> System.Guid
override Dynamo.Graph.Nodes.NodeModel.GUID.set -> void
override Dynamo.Graph.Nodes.NodeModel.SerializeCore(System.Xml.XmlElement element, Dynamo.Graph.SaveContext context) -> void
override Dynamo.Graph.Nodes.NodeModel.ShouldSerializeX() -> bool
override Dynamo.Graph.Nodes.NodeModel.ShouldSerializeY() -> bool
override Dynamo.Graph.Nodes.NodeModel.UpdateValueCore(Dynamo.Graph.UpdateValueParams updateValueParams) -> bool
override Dynamo.Graph.Nodes.NodeOutputData.Equals(object obj) -> bool
override Dynamo.Graph.Nodes.PortModel.DeserializeCore(System.Xml.XmlElement nodeElement, Dynamo.Graph.SaveContext context) -> void
override Dynamo.Graph.Nodes.PortModel.GetHashCode() -> int
override Dynamo.Graph.Nodes.PortModel.GUID.get -> System.Guid
override Dynamo.Graph.Nodes.PortModel.GUID.set -> void
override Dynamo.Graph.Nodes.PortModel.SerializeCore(System.Xml.XmlElement element, Dynamo.Graph.SaveContext context) -> void
override Dynamo.Graph.Nodes.VariableInputNode.DeserializeCore(System.Xml.XmlElement nodeElement, Dynamo.Graph.SaveContext context) -> void
override Dynamo.Graph.Nodes.VariableInputNode.OnBuilt() -> void
override Dynamo.Graph.Nodes.VariableInputNode.SerializeCore(System.Xml.XmlElement element, Dynamo.Graph.SaveContext context) -> void
override Dynamo.Graph.Nodes.ZeroTouch.DSFunction.IsInputNode.get -> bool
override Dynamo.Graph.Nodes.ZeroTouch.DSFunction.NodeType.get -> string
override Dynamo.Graph.Nodes.ZeroTouch.DSFunctionBase.DeserializeCore(System.Xml.XmlElement nodeElement, Dynamo.Graph.SaveContext context) -> void
override Dynamo.Graph.Nodes.ZeroTouch.DSFunctionBase.GetAstIdentifierForOutputIndex(int outputIndex) -> ProtoCore.AST.AssociativeAST.IdentifierNode
override Dynamo.Graph.Nodes.ZeroTouch.DSFunctionBase.GetTypeHintForOutput(int index) -> ProtoCore.Type
override Dynamo.Graph.Nodes.ZeroTouch.DSFunctionBase.IsConvertible.get -> bool
override Dynamo.Graph.Nodes.ZeroTouch.DSFunctionBase.SerializeCore(System.Xml.XmlElement element, Dynamo.Graph.SaveContext context) -> void
override Dynamo.Graph.Nodes.ZeroTouch.DSVarArgFunction.DeserializeCore(System.Xml.XmlElement nodeElement, Dynamo.Graph.SaveContext context) -> void
override Dynamo.Graph.Nodes.ZeroTouch.DSVarArgFunction.NodeType.get -> string
override Dynamo.Graph.Nodes.ZeroTouch.DSVarArgFunction.SerializeCore(System.Xml.XmlElement element, Dynamo.Graph.SaveContext context) -> void
override Dynamo.Graph.Nodes.ZeroTouch.ZeroTouchNodeController<T>.GetFunctionApplication(Dynamo.Graph.Nodes.NodeModel model, System.Collections.Generic.List<ProtoCore.AST.AssociativeAST.AssociativeNode> inputAstNodes) -> ProtoCore.AST.AssociativeAST.AssociativeNode
override Dynamo.Graph.Nodes.ZeroTouch.ZeroTouchNodeController<T>.InitializeInputs(Dynamo.Graph.Nodes.NodeModel model) -> void
override Dynamo.Graph.Nodes.ZeroTouch.ZeroTouchNodeController<T>.InitializeOutputs(Dynamo.Graph.Nodes.NodeModel model) -> void
override Dynamo.Graph.Nodes.ZeroTouch.ZeroTouchNodeController<T>.SerializeCore(System.Xml.XmlElement element, Dynamo.Graph.SaveContext context) -> void
override Dynamo.Graph.Nodes.ZeroTouch.ZeroTouchNodeController<T>.SyncNodeWithDefinition(Dynamo.Graph.Nodes.NodeModel model) -> void
override Dynamo.Graph.Nodes.ZeroTouch.ZeroTouchVarArgNodeController<T>.BuildOutputAst(Dynamo.Graph.Nodes.NodeModel model, System.Collections.Generic.List<ProtoCore.AST.AssociativeAST.AssociativeNode> inputAstNodes, System.Collections.Generic.List<ProtoCore.AST.AssociativeAST.AssociativeNode> resultAst) -> void
override Dynamo.Graph.Nodes.ZeroTouch.ZeroTouchVarArgNodeController<T>.InitializeFunctionParameters(Dynamo.Graph.Nodes.NodeModel model, System.Collections.Generic.IEnumerable<Dynamo.Library.TypedParameter> parameters) -> void
override Dynamo.Graph.Notes.NoteModel.DeserializeCore(System.Xml.XmlElement nodeElement, Dynamo.Graph.SaveContext context) -> void
override Dynamo.Graph.Notes.NoteModel.SerializeCore(System.Xml.XmlElement element, Dynamo.Graph.SaveContext context) -> void
override Dynamo.Graph.Notes.NoteModel.UpdateValueCore(Dynamo.Graph.UpdateValueParams updateValueParams) -> bool
override Dynamo.Graph.Presets.PresetModel.DeserializeCore(System.Xml.XmlElement nodeElement, Dynamo.Graph.SaveContext context) -> void
override Dynamo.Graph.Presets.PresetModel.SerializeCore(System.Xml.XmlElement element, Dynamo.Graph.SaveContext context) -> void
override Dynamo.Graph.Workspaces.ConnectorConverter.CanConvert(System.Type objectType) -> bool
override Dynamo.Graph.Workspaces.ConnectorConverter.ReadJson(Newtonsoft.Json.JsonReader reader, System.Type objectType, object existingValue, Newtonsoft.Json.JsonSerializer serializer) -> object
override Dynamo.Graph.Workspaces.ConnectorConverter.WriteJson(Newtonsoft.Json.JsonWriter writer, object value, Newtonsoft.Json.JsonSerializer serializer) -> void
override Dynamo.Graph.Workspaces.CustomNodeWorkspaceModel.GetSharedName() -> string
override Dynamo.Graph.Workspaces.CustomNodeWorkspaceModel.NodeModified(Dynamo.Graph.Nodes.NodeModel node) -> void
override Dynamo.Graph.Workspaces.CustomNodeWorkspaceModel.Save(string newPath, bool isBackup = false, Dynamo.Engine.EngineController engine = null) -> void
override Dynamo.Graph.Workspaces.DescriptionConverter.CanConvert(System.Type objectType) -> bool
override Dynamo.Graph.Workspaces.DescriptionConverter.ReadJson(Newtonsoft.Json.JsonReader reader, System.Type objectType, object existingValue, Newtonsoft.Json.JsonSerializer serializer) -> object
override Dynamo.Graph.Workspaces.DescriptionConverter.WriteJson(Newtonsoft.Json.JsonWriter writer, object value, Newtonsoft.Json.JsonSerializer serializer) -> void
override Dynamo.Graph.Workspaces.DummyNodeWriteConverter.CanConvert(System.Type objectType) -> bool
override Dynamo.Graph.Workspaces.DummyNodeWriteConverter.CanRead.get -> bool
override Dynamo.Graph.Workspaces.DummyNodeWriteConverter.ReadJson(Newtonsoft.Json.JsonReader reader, System.Type objectType, object existingValue, Newtonsoft.Json.JsonSerializer serializer) -> object
override Dynamo.Graph.Workspaces.DummyNodeWriteConverter.WriteJson(Newtonsoft.Json.JsonWriter writer, object value, Newtonsoft.Json.JsonSerializer serializer) -> void
override Dynamo.Graph.Workspaces.ExtraAnnotationViewInfo.Equals(object obj) -> bool
override Dynamo.Graph.Workspaces.HomeWorkspaceModel.Clear() -> void
override Dynamo.Graph.Workspaces.HomeWorkspaceModel.Dispose() -> void
override Dynamo.Graph.Workspaces.HomeWorkspaceModel.DisposeNode(Dynamo.Graph.Nodes.NodeModel node) -> void
override Dynamo.Graph.Workspaces.HomeWorkspaceModel.NodeModified(Dynamo.Graph.Nodes.NodeModel node) -> void
override Dynamo.Graph.Workspaces.HomeWorkspaceModel.OnNodeRemoved(Dynamo.Graph.Nodes.NodeModel node) -> void
override Dynamo.Graph.Workspaces.HomeWorkspaceModel.OnToggleNodeFreeze(Dynamo.Graph.Nodes.NodeModel node) -> void
override Dynamo.Graph.Workspaces.HomeWorkspaceModel.RegisterNode(Dynamo.Graph.Nodes.NodeModel node) -> void
override Dynamo.Graph.Workspaces.IdToGuidConverter.CanConvert(System.Type objectType) -> bool
override Dynamo.Graph.Workspaces.IdToGuidConverter.ReadJson(Newtonsoft.Json.JsonReader reader, System.Type objectType, object existingValue, Newtonsoft.Json.JsonSerializer serializer) -> object
override Dynamo.Graph.Workspaces.IdToGuidConverter.WriteJson(Newtonsoft.Json.JsonWriter writer, object value, Newtonsoft.Json.JsonSerializer serializer) -> void
override Dynamo.Graph.Workspaces.LinterManagerConverter.CanConvert(System.Type objectType) -> bool
override Dynamo.Graph.Workspaces.LinterManagerConverter.ReadJson(Newtonsoft.Json.JsonReader reader, System.Type objectType, object existingValue, Newtonsoft.Json.JsonSerializer serializer) -> object
override Dynamo.Graph.Workspaces.LinterManagerConverter.WriteJson(Newtonsoft.Json.JsonWriter writer, object value, Newtonsoft.Json.JsonSerializer serializer) -> void
override Dynamo.Graph.Workspaces.NodeLibraryDependencyConverter.CanConvert(System.Type objectType) -> bool
override Dynamo.Graph.Workspaces.NodeLibraryDependencyConverter.CanRead.get -> bool
override Dynamo.Graph.Workspaces.NodeLibraryDependencyConverter.ReadJson(Newtonsoft.Json.JsonReader reader, System.Type objectType, object existingValue, Newtonsoft.Json.JsonSerializer serializer) -> object
override Dynamo.Graph.Workspaces.NodeLibraryDependencyConverter.WriteJson(Newtonsoft.Json.JsonWriter writer, object value, Newtonsoft.Json.JsonSerializer serializer) -> void
override Dynamo.Graph.Workspaces.NodeReadConverter.CanConvert(System.Type objectType) -> bool
override Dynamo.Graph.Workspaces.NodeReadConverter.CanRead.get -> bool
override Dynamo.Graph.Workspaces.NodeReadConverter.CanWrite.get -> bool
override Dynamo.Graph.Workspaces.NodeReadConverter.ReadJson(Newtonsoft.Json.JsonReader reader, System.Type objectType, object existingValue, Newtonsoft.Json.JsonSerializer serializer) -> object
override Dynamo.Graph.Workspaces.NodeReadConverter.WriteJson(Newtonsoft.Json.JsonWriter writer, object value, Newtonsoft.Json.JsonSerializer serializer) -> void
override Dynamo.Graph.Workspaces.PackageInfo.Equals(object obj) -> bool
override Dynamo.Graph.Workspaces.PackageInfo.GetHashCode() -> int
override Dynamo.Graph.Workspaces.PackageInfo.ToString() -> string
override Dynamo.Graph.Workspaces.TypedParameterConverter.CanConvert(System.Type objectType) -> bool
override Dynamo.Graph.Workspaces.TypedParameterConverter.ReadJson(Newtonsoft.Json.JsonReader reader, System.Type objectType, object existingValue, Newtonsoft.Json.JsonSerializer serializer) -> object
override Dynamo.Graph.Workspaces.TypedParameterConverter.WriteJson(Newtonsoft.Json.JsonWriter writer, object value, Newtonsoft.Json.JsonSerializer serializer) -> void
override Dynamo.Graph.Workspaces.WorkspaceReadConverter.CanConvert(System.Type objectType) -> bool
override Dynamo.Graph.Workspaces.WorkspaceReadConverter.CanWrite.get -> bool
override Dynamo.Graph.Workspaces.WorkspaceReadConverter.ReadJson(Newtonsoft.Json.JsonReader reader, System.Type objectType, object existingValue, Newtonsoft.Json.JsonSerializer serializer) -> object
override Dynamo.Graph.Workspaces.WorkspaceReadConverter.WriteJson(Newtonsoft.Json.JsonWriter writer, object value, Newtonsoft.Json.JsonSerializer serializer) -> void
override Dynamo.Graph.Workspaces.WorkspaceWriteConverter.CanConvert(System.Type objectType) -> bool
override Dynamo.Graph.Workspaces.WorkspaceWriteConverter.CanRead.get -> bool
override Dynamo.Graph.Workspaces.WorkspaceWriteConverter.ReadJson(Newtonsoft.Json.JsonReader reader, System.Type objectType, object existingValue, Newtonsoft.Json.JsonSerializer serializer) -> object
override Dynamo.Graph.Workspaces.WorkspaceWriteConverter.WriteJson(Newtonsoft.Json.JsonWriter writer, object value, Newtonsoft.Json.JsonSerializer serializer) -> void
override Dynamo.Library.TypedParameter.ToString() -> string
override Dynamo.Linting.LinterExtensionDescriptor.Equals(object obj) -> bool
override Dynamo.Linting.LinterExtensionDescriptor.GetHashCode() -> int
override Dynamo.Models.DynamoModel.AddGroupToGroupCommand.ExecuteCore(Dynamo.Models.DynamoModel dynamoModel) -> void
override Dynamo.Models.DynamoModel.AddGroupToGroupCommand.SerializeCore(System.Xml.XmlElement element) -> void
override Dynamo.Models.DynamoModel.AddModelToGroupCommand.ExecuteCore(Dynamo.Models.DynamoModel dynamoModel) -> void
override Dynamo.Models.DynamoModel.AddModelToGroupCommand.SerializeCore(System.Xml.XmlElement element) -> void
override Dynamo.Models.DynamoModel.AddPresetCommand.ExecuteCore(Dynamo.Models.DynamoModel dynamoModel) -> void
override Dynamo.Models.DynamoModel.AddPresetCommand.SerializeCore(System.Xml.XmlElement element) -> void
override Dynamo.Models.DynamoModel.ApplyPresetCommand.ExecuteCore(Dynamo.Models.DynamoModel dynamoModel) -> void
override Dynamo.Models.DynamoModel.ApplyPresetCommand.SerializeCore(System.Xml.XmlElement element) -> void
override Dynamo.Models.DynamoModel.CreateAndConnectNodeCommand.ExecuteCore(Dynamo.Models.DynamoModel dynamoModel) -> void
override Dynamo.Models.DynamoModel.CreateAndConnectNodeCommand.SerializeCore(System.Xml.XmlElement element) -> void
override Dynamo.Models.DynamoModel.CreateAnnotationCommand.ExecuteCore(Dynamo.Models.DynamoModel dynamoModel) -> void
override Dynamo.Models.DynamoModel.CreateAnnotationCommand.SerializeCore(System.Xml.XmlElement element) -> void
override Dynamo.Models.DynamoModel.CreateCustomNodeCommand.ExecuteCore(Dynamo.Models.DynamoModel dynamoModel) -> void
override Dynamo.Models.DynamoModel.CreateCustomNodeCommand.SerializeCore(System.Xml.XmlElement element) -> void
override Dynamo.Models.DynamoModel.CreateNodeCommand.ExecuteCore(Dynamo.Models.DynamoModel dynamoModel) -> void
override Dynamo.Models.DynamoModel.CreateNodeCommand.SerializeCore(System.Xml.XmlElement element) -> void
override Dynamo.Models.DynamoModel.CreateNoteCommand.ExecuteCore(Dynamo.Models.DynamoModel dynamoModel) -> void
override Dynamo.Models.DynamoModel.CreateNoteCommand.SerializeCore(System.Xml.XmlElement element) -> void
override Dynamo.Models.DynamoModel.CreateProxyNodeCommand.SerializeCore(System.Xml.XmlElement element) -> void
override Dynamo.Models.DynamoModel.DeleteModelCommand.ExecuteCore(Dynamo.Models.DynamoModel dynamoModel) -> void
override Dynamo.Models.DynamoModel.DeleteModelCommand.SerializeCore(System.Xml.XmlElement element) -> void
override Dynamo.Models.DynamoModel.DragSelectionCommand.ExecuteCore(Dynamo.Models.DynamoModel dynamoModel) -> void
override Dynamo.Models.DynamoModel.DragSelectionCommand.SerializeCore(System.Xml.XmlElement element) -> void
override Dynamo.Models.DynamoModel.ForceRunCancelCommand.ExecuteCore(Dynamo.Models.DynamoModel dynamoModel) -> void
override Dynamo.Models.DynamoModel.InsertFileCommand.ExecuteCore(Dynamo.Models.DynamoModel dynamoModel) -> void
override Dynamo.Models.DynamoModel.InsertFileCommand.SerializeCore(System.Xml.XmlElement element) -> void
override Dynamo.Models.DynamoModel.MakeConnectionCommand.ExecuteCore(Dynamo.Models.DynamoModel dynamoModel) -> void
override Dynamo.Models.DynamoModel.MakeConnectionCommand.SerializeCore(System.Xml.XmlElement element) -> void
override Dynamo.Models.DynamoModel.ModelBasedRecordableCommand.SerializeCore(System.Xml.XmlElement element) -> void
override Dynamo.Models.DynamoModel.ModelEventCommand.ExecuteCore(Dynamo.Models.DynamoModel dynamoModel) -> void
override Dynamo.Models.DynamoModel.ModelEventCommand.SerializeCore(System.Xml.XmlElement element) -> void
override Dynamo.Models.DynamoModel.MutateTestCommand.ExecuteCore(Dynamo.Models.DynamoModel dynamoModel) -> void
override Dynamo.Models.DynamoModel.MutateTestCommand.SerializeCore(System.Xml.XmlElement element) -> void
override Dynamo.Models.DynamoModel.OpenFileCommand.ExecuteCore(Dynamo.Models.DynamoModel dynamoModel) -> void
override Dynamo.Models.DynamoModel.OpenFileCommand.SerializeCore(System.Xml.XmlElement element) -> void
override Dynamo.Models.DynamoModel.OpenFileFromJsonCommand.ExecuteCore(Dynamo.Models.DynamoModel dynamoModel) -> void
override Dynamo.Models.DynamoModel.OpenFileFromJsonCommand.SerializeCore(System.Xml.XmlElement element) -> void
override Dynamo.Models.DynamoModel.PausePlaybackCommand.ExecuteCore(Dynamo.Models.DynamoModel dynamoModel) -> void
override Dynamo.Models.DynamoModel.PausePlaybackCommand.SerializeCore(System.Xml.XmlElement element) -> void
override Dynamo.Models.DynamoModel.RunCancelCommand.ExecuteCore(Dynamo.Models.DynamoModel dynamoModel) -> void
override Dynamo.Models.DynamoModel.RunCancelCommand.SerializeCore(System.Xml.XmlElement element) -> void
override Dynamo.Models.DynamoModel.SelectInRegionCommand.ExecuteCore(Dynamo.Models.DynamoModel dynamoModel) -> void
override Dynamo.Models.DynamoModel.SelectInRegionCommand.SerializeCore(System.Xml.XmlElement element) -> void
override Dynamo.Models.DynamoModel.SelectModelCommand.ExecuteCore(Dynamo.Models.DynamoModel dynamoModel) -> void
override Dynamo.Models.DynamoModel.SelectModelCommand.SerializeCore(System.Xml.XmlElement element) -> void
override Dynamo.Models.DynamoModel.SwitchTabCommand.ExecuteCore(Dynamo.Models.DynamoModel dynamoModel) -> void
override Dynamo.Models.DynamoModel.SwitchTabCommand.SerializeCore(System.Xml.XmlElement element) -> void
override Dynamo.Models.DynamoModel.UndoRedoCommand.ExecuteCore(Dynamo.Models.DynamoModel dynamoModel) -> void
override Dynamo.Models.DynamoModel.UndoRedoCommand.SerializeCore(System.Xml.XmlElement element) -> void
override Dynamo.Models.DynamoModel.UngroupModelCommand.ExecuteCore(Dynamo.Models.DynamoModel dynamoModel) -> void
override Dynamo.Models.DynamoModel.UngroupModelCommand.SerializeCore(System.Xml.XmlElement element) -> void
override Dynamo.Models.DynamoModel.UpdateModelValueCommand.ExecuteCore(Dynamo.Models.DynamoModel dynamoModel) -> void
override Dynamo.Models.DynamoModel.UpdateModelValueCommand.SerializeCore(System.Xml.XmlElement element) -> void
override Dynamo.Models.DynamoModel.UpdateModelValueCommand.ToString() -> string
override Dynamo.Scheduler.DelegateBasedAsyncTask.HandleTaskCompletionCore() -> void
override Dynamo.Scheduler.DelegateBasedAsyncTask.HandleTaskExecutionCore() -> void
override Dynamo.Scheduler.DelegateBasedAsyncTask.Priority.get -> Dynamo.Scheduler.AsyncTask.TaskPriority
override Dynamo.Scheduler.TimeStamp.Equals(object other) -> bool
override Dynamo.Scheduler.TimeStamp.GetHashCode() -> int
override Dynamo.Search.BrowserInternalElement.Items.get -> System.Collections.ObjectModel.ObservableCollection<Dynamo.Search.BrowserItem>
override Dynamo.Search.BrowserInternalElement.Items.set -> void
override Dynamo.Search.BrowserInternalElement.Name.get -> string
override Dynamo.Search.SearchElements.CodeBlockNodeSearchElement.ConstructNewNodeModel() -> Dynamo.Graph.Nodes.NodeModel
override Dynamo.Search.SearchElements.CustomNodeSearchElement.ConstructNewNodeModel() -> Dynamo.Graph.Nodes.NodeModel
override Dynamo.Search.SearchElements.CustomNodeSearchElement.CreationName.get -> string
override Dynamo.Search.SearchElements.CustomNodeSearchElement.GenerateInputParameters() -> System.Collections.Generic.IEnumerable<System.Tuple<string, string>>
override Dynamo.Search.SearchElements.CustomNodeSearchElement.GenerateOutputParameters() -> System.Collections.Generic.IEnumerable<string>
override Dynamo.Search.SearchElements.NodeModelSearchElement.CreationName.get -> string
override Dynamo.Search.SearchElements.ZeroTouchSearchElement.ConstructNewNodeModel() -> Dynamo.Graph.Nodes.NodeModel
override Dynamo.Search.SearchElements.ZeroTouchSearchElement.CreationName.get -> string
override Dynamo.Search.SearchElements.ZeroTouchSearchElement.FullName.get -> string
override Dynamo.Updates.BinaryVersion.Equals(object other) -> bool
override Dynamo.Updates.BinaryVersion.GetHashCode() -> int
override Dynamo.Updates.BinaryVersion.ToString() -> string
override Dynamo.Utilities.LuceneCustomAnalyzer.CreateComponents(string fieldName, System.IO.TextReader reader) -> Lucene.Net.Analysis.TokenStreamComponents
readonly Dynamo.Core.CustomNodeManager.NodeInfos -> System.Collections.Generic.Dictionary<System.Guid, Dynamo.CustomNodeInfo>
readonly Dynamo.Graph.Nodes.TypeLoadData.AlsoKnownAs -> System.Collections.Generic.IEnumerable<string>
readonly Dynamo.Graph.Nodes.TypeLoadData.Description -> string
readonly Dynamo.Graph.Nodes.TypeLoadData.InputParameters -> System.Collections.Generic.IEnumerable<System.Tuple<string, string>>
readonly Dynamo.Graph.Nodes.TypeLoadData.IsDeprecated -> bool
readonly Dynamo.Graph.Nodes.TypeLoadData.IsDSCompatible -> bool
readonly Dynamo.Graph.Nodes.TypeLoadData.IsHidden -> bool
readonly Dynamo.Graph.Nodes.TypeLoadData.IsMetaNode -> bool
readonly Dynamo.Graph.Nodes.TypeLoadData.Name -> string
readonly Dynamo.Graph.Nodes.TypeLoadData.ObsoleteMessage -> string
readonly Dynamo.Graph.Nodes.TypeLoadData.OutputParameters -> System.Collections.Generic.IEnumerable<string>
readonly Dynamo.Graph.Nodes.TypeLoadData.SearchKeys -> System.Collections.Generic.IEnumerable<string>
readonly Dynamo.Graph.Nodes.TypeLoadData.Type -> System.Type
readonly Dynamo.Graph.Workspaces.HomeWorkspaceModel.VerboseLogging -> bool
readonly Dynamo.Graph.Workspaces.WorkspaceModel.NodeFactory -> Dynamo.Graph.Nodes.NodeLoaders.NodeFactory
readonly Dynamo.Models.DynamoModel.Context -> string
readonly Dynamo.Models.DynamoModel.CustomNodeManager -> Dynamo.Core.CustomNodeManager
readonly Dynamo.Models.DynamoModel.DebugSettings -> Dynamo.Configuration.DebugSettings
readonly Dynamo.Models.DynamoModel.LibraryServices -> Dynamo.Engine.LibraryServices
readonly Dynamo.Models.DynamoModel.Loader -> Dynamo.Models.NodeModelAssemblyLoader
readonly Dynamo.Models.DynamoModel.Logger -> Dynamo.Logging.DynamoLogger
readonly Dynamo.Models.DynamoModel.MigrationManager -> Dynamo.Migration.MigrationManager
readonly Dynamo.Models.DynamoModel.NodeFactory -> Dynamo.Graph.Nodes.NodeLoaders.NodeFactory
readonly Dynamo.Models.DynamoModel.SearchModel -> Dynamo.Search.NodeSearchModel
readonly Dynamo.Search.SearchElements.NodeSearchElement.keywordWeights -> System.Collections.Generic.List<double>
static Dynamo.Configuration.Configurations.BackupFileNamePrefix -> string
static Dynamo.Configuration.Configurations.DynamoBimForum -> string
static Dynamo.Configuration.Configurations.DynamoDictionary -> string
static Dynamo.Configuration.Configurations.DynamoDownloadLink -> string
static Dynamo.Configuration.Configurations.DynamoPrimer -> string
static Dynamo.Configuration.Configurations.DynamoSiteLink -> string
static Dynamo.Configuration.Configurations.DynamoTeamEmail -> string
static Dynamo.Configuration.Configurations.DynamoVideoTutorials -> string
static Dynamo.Configuration.Configurations.DynamoWikiLink -> string
static Dynamo.Configuration.Configurations.GitHubBugReportingLink -> string
static Dynamo.Configuration.Configurations.GitHubDynamoLink -> string
static Dynamo.Configuration.Configurations.SupportedLocaleDic.get -> System.Collections.Generic.Dictionary<string, string>
static Dynamo.Configuration.GroupStyleItem.DefaultGroupStyleItems -> System.Collections.ObjectModel.ObservableCollection<Dynamo.Configuration.GroupStyleItem>
static Dynamo.Configuration.PreferenceSettings.AskForTrustedLocation(bool isOpenedFile, bool isFileInTrustedLocation, bool isHomeSpace, bool isShowStartPage, bool isDisableTrustWarnings) -> Dynamo.Configuration.PreferenceSettings.AskForTrustedLocationResult
static Dynamo.Configuration.PreferenceSettings.DynamoTestPath -> string
static Dynamo.Configuration.PreferenceSettings.GetPythonTemplateFilePath() -> string
static Dynamo.Configuration.PreferenceSettings.Load(string filePath) -> Dynamo.Configuration.PreferenceSettings
static Dynamo.Configuration.PreferenceSettings.LoadContent(string content) -> Dynamo.Configuration.PreferenceSettings
static Dynamo.Engine.EngineController.CompilationServices -> Dynamo.Engine.CompilationServices
static Dynamo.Engine.XmlDocumentationExtensions.LogToConsole -> System.Action<string>
static Dynamo.Graph.ConnectorPinModel.StaticWidth.get -> double
static Dynamo.Graph.Connectors.ConnectorModel.operator !=(Dynamo.Graph.Connectors.ConnectorModel lhs, Dynamo.Graph.Connectors.ConnectorModel rhs) -> bool
static Dynamo.Graph.Connectors.ConnectorModel.operator ==(Dynamo.Graph.Connectors.ConnectorModel lhs, Dynamo.Graph.Connectors.ConnectorModel rhs) -> bool
static Dynamo.Graph.NodeGraph.LoadConnectorFromXml(System.Xml.XmlElement connEl, System.Collections.Generic.IDictionary<System.Guid, Dynamo.Graph.Nodes.NodeModel> nodes) -> Dynamo.Graph.Connectors.ConnectorModel
static Dynamo.Graph.NodeGraph.LoadGraphFromXml(System.Xml.XmlDocument xmlDoc, Dynamo.Graph.Nodes.NodeLoaders.NodeFactory nodeFactory) -> Dynamo.Graph.NodeGraph
static Dynamo.Graph.NodeGraph.LoadNodeFromXml(System.Xml.XmlElement elNode, Dynamo.Graph.SaveContext context, Dynamo.Graph.Nodes.NodeLoaders.NodeFactory nodeFactory, ProtoCore.Namespace.ElementResolver resolver) -> Dynamo.Graph.Nodes.NodeModel
static Dynamo.Graph.NodeGraph.LoadNoteFromXml(System.Xml.XmlNode note) -> Dynamo.Graph.Notes.NoteModel
static Dynamo.Graph.NodeGraph.LoadPresetsFromXml(System.Xml.XmlDocument xmlDoc, System.Collections.Generic.IEnumerable<Dynamo.Graph.Nodes.NodeModel> nodesInNodeGraph) -> System.Collections.Generic.IEnumerable<Dynamo.Graph.Presets.PresetModel>
static Dynamo.Graph.Nodes.CodeBlockNodeModel.Migrate_2_0_0(Dynamo.Migration.NodeMigrationData data) -> Dynamo.Migration.NodeMigrationData
static Dynamo.Graph.Nodes.NodeModel.ConfigureSnapEdges(System.Collections.Generic.IList<Dynamo.Graph.Nodes.PortModel> ports) -> void
static Dynamo.Graph.Nodes.NodeModel.MigrateShortestLacingToAutoLacing(Dynamo.Migration.NodeMigrationData data) -> Dynamo.Migration.NodeMigrationData
static Dynamo.Graph.Nodes.NodeModel.MigrateToDsFunction(Dynamo.Migration.NodeMigrationData data, string assembly, string name, string funcName) -> Dynamo.Migration.NodeMigrationData
static Dynamo.Graph.Nodes.NodeModel.MigrateToDsFunction(Dynamo.Migration.NodeMigrationData data, string name, string funcName) -> Dynamo.Migration.NodeMigrationData
static Dynamo.Graph.Nodes.NodeModel.MigrateToDsVarArgFunction(Dynamo.Migration.NodeMigrationData data, string assembly, string name, string funcName) -> Dynamo.Migration.NodeMigrationData
static Dynamo.Graph.Nodes.NodeOutputData.getNodeOutputTypeFromType(System.Type type) -> Dynamo.Graph.Nodes.NodeOutputTypes
static Dynamo.Graph.Nodes.Statement.CreateInstance(ProtoCore.AST.Node parsedNode) -> Dynamo.Graph.Nodes.Statement
static Dynamo.Graph.Nodes.Statement.GetDefinedVariableNames(Dynamo.Graph.Nodes.Statement s) -> System.Collections.Generic.List<string>
static Dynamo.Graph.Nodes.Statement.GetReferencedVariables(ProtoCore.AST.Node astNode, System.Collections.Generic.List<Dynamo.Graph.Nodes.Variable> refVariableList) -> void
static Dynamo.Graph.Nodes.Variable.SetCorrectColumn(System.Collections.Generic.List<Dynamo.Graph.Nodes.Variable> refVar, Dynamo.Graph.Nodes.Statement.StatementType type, int line) -> void
static Dynamo.Graph.Nodes.VariableInputNodeController.SerializeInputCount(System.Xml.XmlElement nodeElement, int amount) -> void
static Dynamo.Graph.Workspaces.PresetExtensions.ImportPresets(this Dynamo.Graph.Workspaces.WorkspaceModel workspace, System.Collections.Generic.IEnumerable<Dynamo.Graph.Presets.PresetModel> presetCollection) -> void
static Dynamo.Graph.Workspaces.WorkspaceModel.DummyNodesReloaded -> System.Action
static Dynamo.Graph.Workspaces.WorkspaceModel.FromJson(string json, Dynamo.Engine.LibraryServices libraryServices, Dynamo.Engine.EngineController engineController, Dynamo.Scheduler.DynamoScheduler scheduler, Dynamo.Graph.Nodes.NodeLoaders.NodeFactory factory, bool isTestMode, bool verboseLogging, Dynamo.Core.CustomNodeManager manager) -> Dynamo.Graph.Workspaces.WorkspaceModel
static Dynamo.Graph.Workspaces.WorkspaceModel.FromJson(string json, Dynamo.Engine.LibraryServices libraryServices, Dynamo.Engine.EngineController engineController, Dynamo.Scheduler.DynamoScheduler scheduler, Dynamo.Graph.Nodes.NodeLoaders.NodeFactory factory, bool isTestMode, bool verboseLogging, Dynamo.Core.CustomNodeManager manager, Dynamo.Linting.LinterManager linterManager) -> Dynamo.Graph.Workspaces.WorkspaceModel
static Dynamo.Logging.LogMessage.Error(string message) -> Dynamo.Logging.ILogMessage
static Dynamo.Logging.LogMessage.Error(System.Exception exception) -> Dynamo.Logging.ILogMessage
static Dynamo.Logging.LogMessage.Info(string message) -> Dynamo.Logging.ILogMessage
static Dynamo.Logging.LogMessage.Log(this Dynamo.Logging.ILogger logger, Dynamo.Logging.ILogMessage message) -> void
static Dynamo.Logging.LogMessage.Warning(string message, Dynamo.Logging.WarningLevel severity) -> Dynamo.Logging.ILogMessage
static Dynamo.Migration.MigrationManager.CloneAndChangeName(System.Xml.XmlElement element, string type, string name, bool cloneInnerXml = false) -> System.Xml.XmlElement
static Dynamo.Migration.MigrationManager.CreateCodeBlockNodeFrom(System.Xml.XmlElement srcElement) -> System.Xml.XmlElement
static Dynamo.Migration.MigrationManager.CreateCodeBlockNodeModelNode(System.Xml.XmlDocument document, System.Xml.XmlElement oldNode, int nodeIndex, string codeText) -> System.Xml.XmlElement
static Dynamo.Migration.MigrationManager.CreateCustomNodeFrom(System.Xml.XmlDocument document, System.Xml.XmlElement srcElement, string id, string name, string description, System.Collections.Generic.List<string> inputs, System.Collections.Generic.List<string> outputs) -> System.Xml.XmlElement
static Dynamo.Migration.MigrationManager.CreateDummyNode(System.Xml.XmlElement element, int inportCount, int outportCount) -> System.Xml.XmlElement
static Dynamo.Migration.MigrationManager.CreateFunctionNode(System.Xml.XmlDocument document, System.Xml.XmlElement oldNode, int nodeIndex, string assembly, string name, string signature) -> System.Xml.XmlElement
static Dynamo.Migration.MigrationManager.CreateFunctionNodeFrom(System.Xml.XmlElement srcElement) -> System.Xml.XmlElement
static Dynamo.Migration.MigrationManager.CreateFunctionNodeFrom(System.Xml.XmlElement srcElement, string[] attribNames) -> System.Xml.XmlElement
static Dynamo.Migration.MigrationManager.CreateMissingNode(System.Xml.XmlElement element, int inportCount, int outportCount) -> System.Xml.XmlElement
static Dynamo.Migration.MigrationManager.CreateNode(System.Xml.XmlDocument document, System.Xml.XmlElement oldNode, int nodeIndex, string type, string name) -> System.Xml.XmlElement
static Dynamo.Migration.MigrationManager.CreateVarArgFunctionNode(System.Xml.XmlDocument document, System.Xml.XmlElement oldNode, int nodeIndex, string assembly, string name, string signature, string inputcount) -> System.Xml.XmlElement
static Dynamo.Migration.MigrationManager.CreateVarArgFunctionNodeFrom(System.Xml.XmlElement srcElement) -> System.Xml.XmlElement
static Dynamo.Migration.MigrationManager.GetGuidFromXmlElement(System.Xml.XmlElement element) -> string
static Dynamo.Migration.MigrationManager.ReplaceAttributeValue(System.Xml.XmlElement element, string attribute, string from, string to) -> void
static Dynamo.Migration.MigrationManager.SetFunctionSignature(System.Xml.XmlElement element, string assemblyName, string methodName, string signature) -> void
static Dynamo.Models.DynamoModel.EnableMigrationLogging.get -> bool
static Dynamo.Models.DynamoModel.EnableMigrationLogging.set -> void
static Dynamo.Models.DynamoModel.HostAnalyticsInfo.get -> Dynamo.Models.HostAnalyticsInfo
static Dynamo.Models.DynamoModel.HostAnalyticsInfo.set -> void
static Dynamo.Models.DynamoModel.IsCrashing.get -> bool
static Dynamo.Models.DynamoModel.IsCrashing.set -> void
static Dynamo.Models.DynamoModel.IsHeadless.get -> bool
static Dynamo.Models.DynamoModel.IsHeadless.set -> void
static Dynamo.Models.DynamoModel.IsTestMode.get -> bool
static Dynamo.Models.DynamoModel.IsTestMode.set -> void
static Dynamo.Models.DynamoModel.ModelBasedRecordableCommand.DeserializeGuid(System.Xml.XmlElement element, Dynamo.Utilities.XmlElementHelper helper) -> System.Collections.Generic.IEnumerable<System.Guid>
static Dynamo.Models.DynamoModel.OnRequestDispatcherBeginInvoke(System.Action action) -> void
static Dynamo.Models.DynamoModel.OnRequestDispatcherInvoke(System.Action action) -> void
static Dynamo.Models.DynamoModel.RecordableCommand.jsonSettings -> Newtonsoft.Json.JsonSerializerSettings
static Dynamo.Models.DynamoModel.RequestDispatcherBeginInvoke -> Dynamo.Models.ActionHandler
static Dynamo.Models.DynamoModel.RequestDispatcherInvoke -> Dynamo.Models.ActionHandler
static Dynamo.Models.DynamoModel.SetUICulture(string locale) -> void
static Dynamo.Models.DynamoModel.Start() -> Dynamo.Models.DynamoModel
static Dynamo.Models.DynamoModel.Start(Dynamo.Models.DynamoModel.IStartConfiguration configuration) -> Dynamo.Models.DynamoModel
static Dynamo.Models.DynamoModel.Version.get -> string
static Dynamo.Models.DynamoPreferencesData.Default() -> Dynamo.Models.DynamoPreferencesData
static Dynamo.Properties.Resources.ArggOKButton.get -> string
static Dynamo.Properties.Resources.ArgumentNullException.get -> string
static Dynamo.Properties.Resources.Autocomplete.get -> string
static Dynamo.Properties.Resources.AutocompleteLowConfidenceMessage.get -> string
static Dynamo.Properties.Resources.AutocompleteLowConfidenceTitle.get -> string
static Dynamo.Properties.Resources.AutocompleteLowConfidenceTooltip.get -> string
static Dynamo.Properties.Resources.AutocompleteNoRecommendationsMessage.get -> string
static Dynamo.Properties.Resources.AutocompleteNoRecommendationsTitle.get -> string
static Dynamo.Properties.Resources.AutocompleteSearchTextBlockText.get -> string
static Dynamo.Properties.Resources.BackUpOriginalFileMessage.get -> string
static Dynamo.Properties.Resources.BackupSavedMsg.get -> string
static Dynamo.Properties.Resources.BadIdentifierSyntax.get -> string
static Dynamo.Properties.Resources.BadRangeSyntax.get -> string
static Dynamo.Properties.Resources.BuildSublistsDescription.get -> string
static Dynamo.Properties.Resources.ButtonDownloadLastest.get -> string
static Dynamo.Properties.Resources.ButtonProcess.get -> string
static Dynamo.Properties.Resources.CancelButton.get -> string
static Dynamo.Properties.Resources.CannotHave0Step.get -> string
static Dynamo.Properties.Resources.CannotOpenFile.get -> string
static Dynamo.Properties.Resources.ClearingWorkflow.get -> string
static Dynamo.Properties.Resources.ClearingWorkSpace.get -> string
static Dynamo.Properties.Resources.CodeBlockDescription.get -> string
static Dynamo.Properties.Resources.CodeBlockNodeDescription.get -> string
static Dynamo.Properties.Resources.CodeBlockSearchTags.get -> string
static Dynamo.Properties.Resources.CodeBlockTempIdentifierOutputLabel.get -> string
static Dynamo.Properties.Resources.ComposeFunctionNodeDescription.get -> string
static Dynamo.Properties.Resources.ComposeFunctionPortDataFunctionToolTip.get -> string
static Dynamo.Properties.Resources.ComposeFunctionPortDataResultToolTip.get -> string
static Dynamo.Properties.Resources.CoreLibraryLoadFailureForBlockedAssembly.get -> string
static Dynamo.Properties.Resources.CoreLibraryLoadFailureMessageBoxTitle.get -> string
static Dynamo.Properties.Resources.CouldNotCompressFile.get -> string
static Dynamo.Properties.Resources.CouldNotGetLatestBuild.get -> string
static Dynamo.Properties.Resources.CouldNotGetUpdateData.get -> string
static Dynamo.Properties.Resources.CouldNotLoadTypes.get -> string
static Dynamo.Properties.Resources.CouldNotRepairOneNodeHoles.get -> string
static Dynamo.Properties.Resources.CreatingConnectorError.get -> string
static Dynamo.Properties.Resources.Culture.get -> System.Globalization.CultureInfo
static Dynamo.Properties.Resources.Culture.set -> void
static Dynamo.Properties.Resources.CustomNodeCouldNotBeInitialized.get -> string
static Dynamo.Properties.Resources.CustomNodeDesciption.get -> string
static Dynamo.Properties.Resources.CustomNodeFolderLoadFailure.get -> string
static Dynamo.Properties.Resources.CustomNodeNotLoaded.get -> string
static Dynamo.Properties.Resources.DefaultCustomNodeCategory.get -> string
static Dynamo.Properties.Resources.DefaultHomeWorkspaceName.get -> string
static Dynamo.Properties.Resources.DefaultValue.get -> string
static Dynamo.Properties.Resources.DefaultValueDisabled.get -> string
static Dynamo.Properties.Resources.DescriptionResource1.get -> string
static Dynamo.Properties.Resources.DirectoryNotFound.get -> string
static Dynamo.Properties.Resources.DisplayEngineFailureMessageDescription.get -> string
static Dynamo.Properties.Resources.DllLoadException.get -> string
static Dynamo.Properties.Resources.DownloadLatestButton.get -> string
static Dynamo.Properties.Resources.DSFunctionNodeDescription.get -> string
static Dynamo.Properties.Resources.DulicatedPackage.get -> string
static Dynamo.Properties.Resources.DummyNodeDescription.get -> string
static Dynamo.Properties.Resources.DuplicatedModelGuidError.get -> string
static Dynamo.Properties.Resources.DuplicatedNewerPackage.get -> string
static Dynamo.Properties.Resources.DuplicatedOlderPackage.get -> string
static Dynamo.Properties.Resources.DuplicateMigrationTypeRegistered.get -> string
static Dynamo.Properties.Resources.DynamoLanguages_noxlate.get -> string
static Dynamo.Properties.Resources.DynamoUpToDate.get -> string
static Dynamo.Properties.Resources.ElapsedWhenLoadingXml.get -> string
static Dynamo.Properties.Resources.EvaluationCompleted.get -> string
static Dynamo.Properties.Resources.ExceptionEncountered.get -> string
static Dynamo.Properties.Resources.FailedInsertFileNodeExistNotification.get -> string
static Dynamo.Properties.Resources.FailedToGetMirrorVariable.get -> string
static Dynamo.Properties.Resources.FailedToHandleReadyEvent.get -> string
static Dynamo.Properties.Resources.FailedToLoad.get -> string
static Dynamo.Properties.Resources.FailedToLoadCustomNode.get -> string
static Dynamo.Properties.Resources.FailedToLoadHeader.get -> string
static Dynamo.Properties.Resources.FailedToLoadLibrary.get -> string
static Dynamo.Properties.Resources.FailedToLoadType.get -> string
static Dynamo.Properties.Resources.FailedToSave.get -> string
static Dynamo.Properties.Resources.FileBackUpLocation.get -> string
static Dynamo.Properties.Resources.FileCannotBeOpened.get -> string
static Dynamo.Properties.Resources.FileLoadFailureMessageBoxTitle.get -> string
static Dynamo.Properties.Resources.FileNotOpenedCorrectly.get -> string
static Dynamo.Properties.Resources.FormulaDSConversionFailure.get -> string
static Dynamo.Properties.Resources.FormulaMigrated.get -> string
static Dynamo.Properties.Resources.FunctionDefinitionOverwrittenMessage.get -> string
static Dynamo.Properties.Resources.FunctionDescription.get -> string
static Dynamo.Properties.Resources.FunctionNodeDescription.get -> string
static Dynamo.Properties.Resources.FutureFileDescription.get -> string
static Dynamo.Properties.Resources.FutureFileSummary.get -> string
static Dynamo.Properties.Resources.FutureFileTitle.get -> string
static Dynamo.Properties.Resources.GoodByeLog.get -> string
static Dynamo.Properties.Resources.GroupDefaultText.get -> string
static Dynamo.Properties.Resources.GroupNameDefaultText.get -> string
static Dynamo.Properties.Resources.GroupStyleDefaultActions.get -> string
static Dynamo.Properties.Resources.GroupStyleDefaultActionsColor.get -> string
static Dynamo.Properties.Resources.GroupStyleDefaultInputs.get -> string
static Dynamo.Properties.Resources.GroupStyleDefaultInputsColor.get -> string
static Dynamo.Properties.Resources.GroupStyleDefaultOutputs.get -> string
static Dynamo.Properties.Resources.GroupStyleDefaultOutputsColor.get -> string
static Dynamo.Properties.Resources.GroupStyleDefaultReview.get -> string
static Dynamo.Properties.Resources.GroupStyleDefaultReviewColor.get -> string
static Dynamo.Properties.Resources.HeaderAction.get -> string
static Dynamo.Properties.Resources.HeaderCreate.get -> string
static Dynamo.Properties.Resources.HeaderQuery.get -> string
static Dynamo.Properties.Resources.IdentifiersNotFound.get -> string
static Dynamo.Properties.Resources.IncompatibleOfFileAndDynamo.get -> string
static Dynamo.Properties.Resources.IncorrectlyFormattedNodeLibraryDisplay.get -> string
static Dynamo.Properties.Resources.IncorrectlyFormattedNodeLibraryWarning.get -> string
static Dynamo.Properties.Resources.IncorrectVersionToOpenFile.get -> string
static Dynamo.Properties.Resources.InputLabel.get -> string
static Dynamo.Properties.Resources.InputNodeDescription.get -> string
static Dynamo.Properties.Resources.InputNodeSearchTags.get -> string
static Dynamo.Properties.Resources.InputPortAlternativeName.get -> string
static Dynamo.Properties.Resources.InsertDialogBoxText.get -> string
static Dynamo.Properties.Resources.InsertGraphRunModeNotificationText.get -> string
static Dynamo.Properties.Resources.InvalidCustomNodeFolderWarning.get -> string
static Dynamo.Properties.Resources.InvalidInputSymbolCustomNodeWarning.get -> string
static Dynamo.Properties.Resources.InvalidInputSymbolErrorMessage.get -> string
static Dynamo.Properties.Resources.InvalidInputSymbolWarningMessage.get -> string
static Dynamo.Properties.Resources.InvalidInputSymbolWarningShortMessage.get -> string
static Dynamo.Properties.Resources.InvalidInputSymbolWarningTitle.get -> string
static Dynamo.Properties.Resources.InvalidLibraryFormat.get -> string
static Dynamo.Properties.Resources.InvalidPackageVersion.get -> string
static Dynamo.Properties.Resources.InvalidStartOrEndOfRange.get -> string
static Dynamo.Properties.Resources.LegacyTraceDataWarning.get -> string
static Dynamo.Properties.Resources.LibraryBuildError.get -> string
static Dynamo.Properties.Resources.LibraryHasBeenLoaded.get -> string
static Dynamo.Properties.Resources.LibraryIsDumped.get -> string
static Dynamo.Properties.Resources.LibraryLoadFailureForBlockedAssembly.get -> string
static Dynamo.Properties.Resources.LibraryLoadFailureMessageBoxTitle.get -> string
static Dynamo.Properties.Resources.LibraryPathCannotBeFound.get -> string
static Dynamo.Properties.Resources.LoadingNodeDefinition.get -> string
static Dynamo.Properties.Resources.LocateInDisk.get -> string
static Dynamo.Properties.Resources.LoginNeededMessage.get -> string
static Dynamo.Properties.Resources.LoginNeededTitle.get -> string
static Dynamo.Properties.Resources.MalformedHeaderPackage.get -> string
static Dynamo.Properties.Resources.MessageCustomNodePackageFailedToLoad.get -> string
static Dynamo.Properties.Resources.MissingXmlTagConsoleMessage.get -> string
static Dynamo.Properties.Resources.ModelNotFoundError.get -> string
static Dynamo.Properties.Resources.MoreButtonTextFormat.get -> string
static Dynamo.Properties.Resources.MoveLabel.get -> string
static Dynamo.Properties.Resources.NewNoteString.get -> string
static Dynamo.Properties.Resources.NodeDeprecatedMsg.get -> string
static Dynamo.Properties.Resources.NodeInformationalStateShowAllErrors.get -> string
static Dynamo.Properties.Resources.NodeNotResolvedMsg.get -> string
static Dynamo.Properties.Resources.NodeOfTypeDeprecatedMsg.get -> string
static Dynamo.Properties.Resources.NodeOfTypeNotResolvedMsg.get -> string
static Dynamo.Properties.Resources.NodeProblemEncountered.get -> string
static Dynamo.Properties.Resources.NoDescriptionAvailable.get -> string
static Dynamo.Properties.Resources.NodeUnhandledMsg.get -> string
static Dynamo.Properties.Resources.NoHeaderPackage.get -> string
static Dynamo.Properties.Resources.NoMatchesFound.get -> string
static Dynamo.Properties.Resources.NoneLinterDescriptorName.get -> string
static Dynamo.Properties.Resources.NoneString.get -> string
static Dynamo.Properties.Resources.NothingIsSelectedWarning.get -> string
static Dynamo.Properties.Resources.NumberNodeDescription.get -> string
static Dynamo.Properties.Resources.ObsoleteFileDescription.get -> string
static Dynamo.Properties.Resources.ObsoleteFileTitle.get -> string
static Dynamo.Properties.Resources.OKButton.get -> string
static Dynamo.Properties.Resources.OpeningHomeWorkspace.get -> string
static Dynamo.Properties.Resources.OpenWorkbenchError.get -> string
static Dynamo.Properties.Resources.OpenWorkspaceError.get -> string
static Dynamo.Properties.Resources.OutputLabel.get -> string
static Dynamo.Properties.Resources.OutputNodeDescription.get -> string
static Dynamo.Properties.Resources.OutputPortAlternativeName.get -> string
static Dynamo.Properties.Resources.PackageEmpty.get -> string
static Dynamo.Properties.Resources.PackageLoadFailureForBlockedAssembly.get -> string
static Dynamo.Properties.Resources.PackageManagerPackageAlreadyExists.get -> string
static Dynamo.Properties.Resources.PackageManagerUserIsNotAMaintainer.get -> string
static Dynamo.Properties.Resources.PackageStateError.get -> string
static Dynamo.Properties.Resources.PackageStateErrorTooltip.get -> string
static Dynamo.Properties.Resources.PackageStateLoaded.get -> string
static Dynamo.Properties.Resources.PackageStateLoadedTooltip.get -> string
static Dynamo.Properties.Resources.PackageStatePendingUnload.get -> string
static Dynamo.Properties.Resources.PackageStatePendingUnloadTooltip.get -> string
static Dynamo.Properties.Resources.PackageStateUnloaded.get -> string
static Dynamo.Properties.Resources.PackageStateUnloadedTooltip.get -> string
static Dynamo.Properties.Resources.PackageTooLarge.get -> string
static Dynamo.Properties.Resources.PathNotRegconizableAsStableOrDailyBuild.get -> string
static Dynamo.Properties.Resources.PortDataFunctionOutputToolTip.get -> string
static Dynamo.Properties.Resources.PortDataInputToolTip.get -> string
static Dynamo.Properties.Resources.PortDataOutputToolTip.get -> string
static Dynamo.Properties.Resources.PortDataParameterToolTip.get -> string
static Dynamo.Properties.Resources.PortDataPathToFileToolTip.get -> string
static Dynamo.Properties.Resources.PortDataReturnValueToolTip.get -> string
static Dynamo.Properties.Resources.PortDataSymbolToolTip.get -> string
static Dynamo.Properties.Resources.PortDataVariableToolTip.get -> string
static Dynamo.Properties.Resources.PortsNameDescriptionDoNotEqualWarningMessage.get -> string
static Dynamo.Properties.Resources.Preview3DOutageTitle.get -> string
static Dynamo.Properties.Resources.ProceedButton.get -> string
static Dynamo.Properties.Resources.PythonTemplateAppData.get -> string
static Dynamo.Properties.Resources.PythonTemplateDefaultFile.get -> string
static Dynamo.Properties.Resources.PythonTemplateDefinedByHost.get -> string
static Dynamo.Properties.Resources.PythonTemplateUserFile.get -> string
static Dynamo.Properties.Resources.RangeEndCouldNotBeParsed.get -> string
static Dynamo.Properties.Resources.RangeOrApprIdentifierAlrUsed.get -> string
static Dynamo.Properties.Resources.RangePortDataAmountToolTip.get -> string
static Dynamo.Properties.Resources.RangePortDataEndToolTip.get -> string
static Dynamo.Properties.Resources.RangePortDataSeqToolTip.get -> string
static Dynamo.Properties.Resources.RangePortDataStartToolTip.get -> string
static Dynamo.Properties.Resources.RangePortDataStepToolTip.get -> string
static Dynamo.Properties.Resources.RangeStepCouldNotBeParsed.get -> string
static Dynamo.Properties.Resources.RangeValuesGreaterThanZero.get -> string
static Dynamo.Properties.Resources.RemoveLabel.get -> string
static Dynamo.Properties.Resources.RequestingVersionUpdate.get -> string
static Dynamo.Properties.Resources.ResourceManager.get -> System.Resources.ResourceManager
static Dynamo.Properties.Resources.ResourcePropertyIsNotStringTypeMessage.get -> string
static Dynamo.Properties.Resources.ResourceTypeDoesNotHavePropertyMessage.get -> string
static Dynamo.Properties.Resources.RunTypeToolTipAutomatically.get -> string
static Dynamo.Properties.Resources.RunTypeToolTipManually.get -> string
static Dynamo.Properties.Resources.RunTypeToolTipPeriodicallyDisabled.get -> string
static Dynamo.Properties.Resources.RunTypeToolTipPeriodicallyEnabled.get -> string
static Dynamo.Properties.Resources.SavingInProgress.get -> string
static Dynamo.Properties.Resources.SearchTextBlockText.get -> string
static Dynamo.Properties.Resources.SplashScreenInitPreferencesSettings.get -> string
static Dynamo.Properties.Resources.SplashScreenLoadNodeLibrary.get -> string
static Dynamo.Properties.Resources.StringNodeDescription.get -> string
static Dynamo.Properties.Resources.SublistPortDataResultToolTip.get -> string
static Dynamo.Properties.Resources.SublistsPortDataListToolTip.get -> string
static Dynamo.Properties.Resources.SublistsPortDataOffsetToolTip.get -> string
static Dynamo.Properties.Resources.SubmitBugButton.get -> string
static Dynamo.Properties.Resources.SubmitBugToGithub.get -> string
static Dynamo.Properties.Resources.SymbolNodeDescription.get -> string
static Dynamo.Properties.Resources.SymbolSearchTags.get -> string
static Dynamo.Properties.Resources.ToolTipForTempVar.get -> string
static Dynamo.Properties.Resources.ToolTipFunctionOutput.get -> string
static Dynamo.Properties.Resources.ToolTipInput.get -> string
static Dynamo.Properties.Resources.ToolTipInputData.get -> string
static Dynamo.Properties.Resources.ToolTipOutput.get -> string
static Dynamo.Properties.Resources.ToolTipOutputData.get -> string
static Dynamo.Properties.Resources.ToolTipReturnValue.get -> string
static Dynamo.Properties.Resources.TopResult.get -> string
static Dynamo.Properties.Resources.UnableToCreateCustomNodeID.get -> string
static Dynamo.Properties.Resources.UnhandledExceptionInDynamoEngine.get -> string
static Dynamo.Properties.Resources.UnhandledExceptionSummary.get -> string
static Dynamo.Properties.Resources.UnhandledExceptionTitle.get -> string
static Dynamo.Properties.Resources.UnknownVersion.get -> string
static Dynamo.Properties.Resources.UnresolvedNodesWarningMessage.get -> string
static Dynamo.Properties.Resources.UnresolvedNodesWarningShortMessage.get -> string
static Dynamo.Properties.Resources.UnresolvedNodesWarningTitle.get -> string
static Dynamo.Properties.Resources.UpdateAvailable.get -> string
static Dynamo.Properties.Resources.UpdateDownloadComplete.get -> string
static Dynamo.Properties.Resources.UpdateDownloadProgress.get -> string
static Dynamo.Properties.Resources.UpdateDownloadStarted.get -> string
static Dynamo.Properties.Resources.UsageReportingErrorMessage.get -> string
static Dynamo.Properties.Resources.WarningCannotFindType.get -> string
static Dynamo.Properties.Resources.WarningInvalidInput.get -> string
static Dynamo.Properties.Resources.WarningInvalidOutput.get -> string
static Dynamo.Properties.Resources.WatermarkLabelText.get -> string
static Dynamo.Properties.Resources.WelcomeMessage.get -> string
static Dynamo.Properties.Resources.WorkbenchNotOpen.get -> string
static Dynamo.Scheduler.AsyncTaskExtensions.AllComplete(this System.Collections.Generic.IEnumerable<Dynamo.Scheduler.AsyncTask> tasks, System.Action<System.Collections.Generic.IEnumerable<Dynamo.Scheduler.AsyncTask>> action) -> System.IDisposable
static Dynamo.Scheduler.AsyncTaskExtensions.Then(this Dynamo.Scheduler.AsyncTask task, Dynamo.Scheduler.AsyncTaskCompletedHandler action) -> System.IDisposable
static Dynamo.Scheduler.AsyncTaskExtensions.ThenPost(this Dynamo.Scheduler.AsyncTask task, Dynamo.Scheduler.AsyncTaskCompletedHandler action, System.Threading.SynchronizationContext context = null) -> System.IDisposable
static Dynamo.Scheduler.AsyncTaskExtensions.ThenSend(this Dynamo.Scheduler.AsyncTask task, Dynamo.Scheduler.AsyncTaskCompletedHandler action, System.Threading.SynchronizationContext context = null) -> System.IDisposable
static Dynamo.Scheduler.TimeStamp.operator <(Dynamo.Scheduler.TimeStamp timeStamp0, Dynamo.Scheduler.TimeStamp timeStamp1) -> bool
static Dynamo.Scheduler.TimeStamp.operator >(Dynamo.Scheduler.TimeStamp timeStamp0, Dynamo.Scheduler.TimeStamp timeStamp1) -> bool
static Dynamo.Search.LuceneSearch.Instance.get -> Dynamo.Search.LuceneSearch
static Dynamo.Updates.BinaryVersion.FromString(string version) -> Dynamo.Updates.BinaryVersion
static Dynamo.Updates.BinaryVersion.operator !=(Dynamo.Updates.BinaryVersion lhs, Dynamo.Updates.BinaryVersion rhs) -> bool
static Dynamo.Updates.BinaryVersion.operator <(Dynamo.Updates.BinaryVersion lhs, Dynamo.Updates.BinaryVersion rhs) -> bool
static Dynamo.Updates.BinaryVersion.operator <=(Dynamo.Updates.BinaryVersion lhs, Dynamo.Updates.BinaryVersion rhs) -> bool
static Dynamo.Updates.BinaryVersion.operator ==(Dynamo.Updates.BinaryVersion lhs, Dynamo.Updates.BinaryVersion rhs) -> bool
static Dynamo.Updates.BinaryVersion.operator >(Dynamo.Updates.BinaryVersion lhs, Dynamo.Updates.BinaryVersion rhs) -> bool
static Dynamo.Updates.BinaryVersion.operator >=(Dynamo.Updates.BinaryVersion lhs, Dynamo.Updates.BinaryVersion rhs) -> bool
static Dynamo.Wpf.Interfaces.LayoutSpecification.FromJSONStream(System.IO.Stream stream) -> Dynamo.Wpf.Interfaces.LayoutSpecification
static Dynamo.Wpf.Interfaces.LayoutSpecification.FromJSONString(string jsonText) -> Dynamo.Wpf.Interfaces.LayoutSpecification
static readonly Dynamo.Configuration.Configurations.AutodeskAsString -> string
static readonly Dynamo.Configuration.Configurations.BackupFolderName -> string
static readonly Dynamo.Configuration.Configurations.CBNMaxPortNameLength -> int
static readonly Dynamo.Configuration.Configurations.CodeBlockOutputPortHeightInPixels -> double
static readonly Dynamo.Configuration.Configurations.DoubleSliderTextBoxWidth -> double
static readonly Dynamo.Configuration.Configurations.DynamoAsString -> string
static readonly Dynamo.Configuration.Configurations.ExtensionsSideBarTabMinWidth -> int
static readonly Dynamo.Configuration.Configurations.FallbackUiCulture -> string
static readonly Dynamo.Configuration.Configurations.FilePathAttribName -> string
static readonly Dynamo.Configuration.Configurations.HighlightingFile -> string
static readonly Dynamo.Configuration.Configurations.IntegerSliderTextBoxWidth -> double
static readonly Dynamo.Configuration.Configurations.MinTabsBeforeClipping -> int
static readonly Dynamo.Configuration.Configurations.PortHeightInPixels -> double
static readonly Dynamo.Configuration.Configurations.TabControlMenuWidth -> int
static readonly Dynamo.Configuration.Configurations.TabDefaultWidth -> int
static readonly Dynamo.Configuration.Configurations.ZoomDirectEditThreshold -> double
static readonly Dynamo.Configuration.Configurations.ZoomIncrement -> double
static readonly Dynamo.Configuration.Configurations.ZoomThreshold -> double
static readonly Dynamo.Configuration.PreferenceSettings.DynamoDefaultTime -> System.DateTime
virtual Dynamo.Core.CustomNodeManager.OnCustomNodeRemoved(System.Guid functionId) -> void
virtual Dynamo.Core.CustomNodeManager.OnDefinitionUpdated(Dynamo.CustomNodeDefinition obj) -> void
virtual Dynamo.Core.CustomNodeManager.OnInfoUpdated(Dynamo.CustomNodeInfo obj) -> void
virtual Dynamo.Core.NotificationObject.RaisePropertyChanged(string propertyName) -> void
virtual Dynamo.Extensions.LinterExtensionBase.Dispose() -> void
virtual Dynamo.Extensions.LinterExtensionBase.Ready(Dynamo.Extensions.ReadyParams sp) -> void
virtual Dynamo.Extensions.LinterExtensionBase.Startup(Dynamo.Extensions.StartupParams sp) -> void
virtual Dynamo.Extensions.ReadyParams.CommandExecutive.get -> Dynamo.Extensions.ICommandExecutive
virtual Dynamo.Graph.Connectors.ConnectorModel.OnDeleted() -> void
virtual Dynamo.Graph.ModelBase.CreateElement(System.Xml.XmlDocument xmlDocument, Dynamo.Graph.SaveContext context) -> System.Xml.XmlElement
virtual Dynamo.Graph.ModelBase.Deselect() -> void
virtual Dynamo.Graph.ModelBase.Dispose() -> void
virtual Dynamo.Graph.ModelBase.GUID.get -> System.Guid
virtual Dynamo.Graph.ModelBase.GUID.set -> void
virtual Dynamo.Graph.ModelBase.Height.get -> double
virtual Dynamo.Graph.ModelBase.Height.set -> void
virtual Dynamo.Graph.ModelBase.OnDeletionStarted(System.ComponentModel.CancelEventArgs e) -> void
virtual Dynamo.Graph.ModelBase.Rect.get -> Dynamo.Utilities.Rect2D
virtual Dynamo.Graph.ModelBase.Select() -> void
virtual Dynamo.Graph.ModelBase.ShouldSerializeX() -> bool
virtual Dynamo.Graph.ModelBase.ShouldSerializeY() -> bool
virtual Dynamo.Graph.ModelBase.UpdateValueCore(Dynamo.Graph.UpdateValueParams updateValueParams) -> bool
virtual Dynamo.Graph.ModelBase.Width.get -> double
virtual Dynamo.Graph.ModelBase.Width.set -> void
virtual Dynamo.Graph.Nodes.FunctionCallNodeController<T>.AssignIdentifiersForFunctionCall(Dynamo.Graph.Nodes.NodeModel model, ProtoCore.AST.AssociativeAST.AssociativeNode rhs, System.Collections.Generic.List<ProtoCore.AST.AssociativeAST.AssociativeNode> resultAst) -> void
virtual Dynamo.Graph.Nodes.FunctionCallNodeController<T>.BuildAstForPartialMultiOutput(Dynamo.Graph.Nodes.NodeModel model, ProtoCore.AST.AssociativeAST.AssociativeNode rhs, System.Collections.Generic.List<ProtoCore.AST.AssociativeAST.AssociativeNode> resultAst) -> void
virtual Dynamo.Graph.Nodes.FunctionCallNodeController<T>.BuildOutputAst(Dynamo.Graph.Nodes.NodeModel model, System.Collections.Generic.List<ProtoCore.AST.AssociativeAST.AssociativeNode> inputAstNodes, System.Collections.Generic.List<ProtoCore.AST.AssociativeAST.AssociativeNode> resultAst) -> void
virtual Dynamo.Graph.Nodes.FunctionCallNodeController<T>.DeserializeCore(System.Xml.XmlElement element, Dynamo.Graph.SaveContext context) -> void
virtual Dynamo.Graph.Nodes.FunctionCallNodeController<T>.OnSyncWithDefinitionStart(Dynamo.Graph.Nodes.NodeModel obj) -> void
virtual Dynamo.Graph.Nodes.FunctionCallNodeController<T>.OnSyncWithDefintionEnd(Dynamo.Graph.Nodes.NodeModel obj) -> void
virtual Dynamo.Graph.Nodes.FunctionCallNodeController<T>.ReturnKeys.get -> System.Collections.Generic.IEnumerable<string>
virtual Dynamo.Graph.Nodes.FunctionCallNodeController<T>.SerializeCore(System.Xml.XmlElement element, Dynamo.Graph.SaveContext context) -> void
virtual Dynamo.Graph.Nodes.FunctionCallNodeController<T>.SyncNodeWithDefinition(Dynamo.Graph.Nodes.NodeModel model) -> void
virtual Dynamo.Graph.Nodes.NodeModel.AstIdentifierBase.get -> string
virtual Dynamo.Graph.Nodes.NodeModel.BuildOutputAst(System.Collections.Generic.List<ProtoCore.AST.AssociativeAST.AssociativeNode> inputAstNodes) -> System.Collections.Generic.IEnumerable<ProtoCore.AST.AssociativeAST.AssociativeNode>
virtual Dynamo.Graph.Nodes.NodeModel.ClearErrorsAndWarnings() -> void
virtual Dynamo.Graph.Nodes.NodeModel.ClearInfoMessages() -> void
virtual Dynamo.Graph.Nodes.NodeModel.CreationName.get -> string
virtual Dynamo.Graph.Nodes.NodeModel.GetAstIdentifierForOutputIndex(int outputIndex) -> ProtoCore.AST.AssociativeAST.IdentifierNode
virtual Dynamo.Graph.Nodes.NodeModel.GetExecutionHintsCore() -> Dynamo.Graph.Nodes.NodeModel.ExecutionHints
virtual Dynamo.Graph.Nodes.NodeModel.GetTypeHintForOutput(int index) -> ProtoCore.Type
virtual Dynamo.Graph.Nodes.NodeModel.InputData.get -> Dynamo.Graph.Nodes.NodeInputData
virtual Dynamo.Graph.Nodes.NodeModel.IsConvertible.get -> bool
virtual Dynamo.Graph.Nodes.NodeModel.IsInputNode.get -> bool
virtual Dynamo.Graph.Nodes.NodeModel.IsOutputNode.get -> bool
virtual Dynamo.Graph.Nodes.NodeModel.NodeType.get -> string
virtual Dynamo.Graph.Nodes.NodeModel.OnBuilt() -> void
virtual Dynamo.Graph.Nodes.NodeModel.OnConnectorAdded(Dynamo.Graph.Connectors.ConnectorModel obj) -> void
virtual Dynamo.Graph.Nodes.NodeModel.OnNodeModified(bool forceExecute = false) -> void
virtual Dynamo.Graph.Nodes.NodeModel.OnSave() -> void
virtual Dynamo.Graph.Nodes.NodeModel.OnUpdateASTCollection() -> void
virtual Dynamo.Graph.Nodes.NodeModel.OutputData.get -> Dynamo.Graph.Nodes.NodeOutputData
virtual Dynamo.Graph.Nodes.NodeModel.RequestVisualUpdateAsync(Dynamo.Scheduler.IScheduler scheduler, Dynamo.Engine.EngineController engine, Dynamo.Visualization.IRenderPackageFactory factory, bool forceUpdate = false) -> bool
virtual Dynamo.Graph.Nodes.NodeModel.RequestVisualUpdateAsync(Dynamo.Scheduler.IScheduler scheduler, Dynamo.Engine.EngineController engine, Dynamo.Visualization.IRenderPackageFactory factory, bool forceUpdate, bool ignoreIsVisible = false) -> bool
virtual Dynamo.Graph.Nodes.NodeModel.SetNodeStateBasedOnConnectionAndDefaults() -> void
virtual Dynamo.Graph.Nodes.ScopedNodeModel.BuildOutputAstInScope(System.Collections.Generic.List<ProtoCore.AST.AssociativeAST.AssociativeNode> inputAstNodes, bool verboseLogging, Dynamo.Engine.CodeGeneration.AstBuilder builder) -> System.Collections.Generic.IEnumerable<ProtoCore.AST.AssociativeAST.AssociativeNode>
virtual Dynamo.Graph.Nodes.ScopedNodeModel.IsScopedInport(int portIndex) -> bool
virtual Dynamo.Graph.Nodes.VariableInputNode.AddInput() -> void
virtual Dynamo.Graph.Nodes.VariableInputNode.GetInputIndex() -> int
virtual Dynamo.Graph.Nodes.VariableInputNode.RemoveInput() -> void
virtual Dynamo.Graph.Nodes.VariableInputNodeController.AddInputToModel() -> void
virtual Dynamo.Graph.Nodes.VariableInputNodeController.GetInputIndexFromModel() -> int
virtual Dynamo.Graph.Nodes.VariableInputNodeController.RemoveInputFromModel() -> void
virtual Dynamo.Graph.Nodes.ZeroTouch.ZeroTouchNodeController<T>.InitializeFunctionParameters(Dynamo.Graph.Nodes.NodeModel model, System.Collections.Generic.IEnumerable<Dynamo.Library.TypedParameter> parameters) -> void
virtual Dynamo.Graph.Workspaces.CustomNodeWorkspaceModel.OnFunctionIdChanged(System.Guid oldId) -> void
virtual Dynamo.Graph.Workspaces.CustomNodeWorkspaceModel.OnInfoChanged() -> void
virtual Dynamo.Graph.Workspaces.HomeWorkspaceModel.OnEvaluationCompleted(Dynamo.Models.EvaluationCompletedEventArgs e) -> void
virtual Dynamo.Graph.Workspaces.HomeWorkspaceModel.OnEvaluationStarted(System.EventArgs e) -> void
virtual Dynamo.Graph.Workspaces.HomeWorkspaceModel.OnRefreshCompleted(Dynamo.Models.EvaluationCompletedEventArgs e) -> void
virtual Dynamo.Graph.Workspaces.WorkspaceModel.Clear() -> void
virtual Dynamo.Graph.Workspaces.WorkspaceModel.Dispose() -> void
virtual Dynamo.Graph.Workspaces.WorkspaceModel.DisposeNode(Dynamo.Graph.Nodes.NodeModel node) -> void
virtual Dynamo.Graph.Workspaces.WorkspaceModel.GetSharedName() -> string
virtual Dynamo.Graph.Workspaces.WorkspaceModel.NodeModified(Dynamo.Graph.Nodes.NodeModel node) -> void
virtual Dynamo.Graph.Workspaces.WorkspaceModel.OnAnnotationAdded(Dynamo.Graph.Annotations.AnnotationModel annotation) -> void
virtual Dynamo.Graph.Workspaces.WorkspaceModel.OnAnnotationRemoved(Dynamo.Graph.Annotations.AnnotationModel annotation) -> void
virtual Dynamo.Graph.Workspaces.WorkspaceModel.OnAnnotationsCleared() -> void
virtual Dynamo.Graph.Workspaces.WorkspaceModel.OnConnectorAdded(Dynamo.Graph.Connectors.ConnectorModel obj) -> void
virtual Dynamo.Graph.Workspaces.WorkspaceModel.OnConnectorDeleted(Dynamo.Graph.Connectors.ConnectorModel obj) -> void
virtual Dynamo.Graph.Workspaces.WorkspaceModel.OnNodeAdded(Dynamo.Graph.Nodes.NodeModel node) -> void
virtual Dynamo.Graph.Workspaces.WorkspaceModel.OnNodeRemoved(Dynamo.Graph.Nodes.NodeModel node) -> void
virtual Dynamo.Graph.Workspaces.WorkspaceModel.OnNodesCleared() -> void
virtual Dynamo.Graph.Workspaces.WorkspaceModel.OnNoteAdded(Dynamo.Graph.Notes.NoteModel note) -> void
virtual Dynamo.Graph.Workspaces.WorkspaceModel.OnNoteRemoved(Dynamo.Graph.Notes.NoteModel note) -> void
virtual Dynamo.Graph.Workspaces.WorkspaceModel.OnNotesCleared() -> void
virtual Dynamo.Graph.Workspaces.WorkspaceModel.OnPopulateJSONWorkspace(Newtonsoft.Json.Linq.JObject modelData) -> void
virtual Dynamo.Graph.Workspaces.WorkspaceModel.OnSaving(System.Xml.XmlDocument obj) -> void
virtual Dynamo.Graph.Workspaces.WorkspaceModel.OnToggleNodeFreeze(Dynamo.Graph.Nodes.NodeModel obj) -> void
virtual Dynamo.Graph.Workspaces.WorkspaceModel.RegisterNode(Dynamo.Graph.Nodes.NodeModel node) -> void
virtual Dynamo.Graph.Workspaces.WorkspaceModel.ResetWorkspaceCore() -> void
virtual Dynamo.Graph.Workspaces.WorkspaceModel.Save(string filePath, bool isBackup = false, Dynamo.Engine.EngineController engine = null) -> void
virtual Dynamo.Linting.Rules.LinterRule.CleanupRule(Dynamo.Graph.Workspaces.WorkspaceModel muribundWorkspaceModel) -> void
virtual Dynamo.Models.DynamoModel.InsertFileImpl(Dynamo.Models.DynamoModel.InsertFileCommand command) -> void
virtual Dynamo.Models.DynamoModel.OnCleanup() -> void
virtual Dynamo.Models.DynamoModel.OnDeletionComplete(object sender, System.EventArgs e) -> void
virtual Dynamo.Models.DynamoModel.OnDeletionStarted(System.Collections.Generic.List<Dynamo.Graph.ModelBase> modelsToDelete, System.ComponentModel.CancelEventArgs cancelEventArgs) -> void
virtual Dynamo.Models.DynamoModel.OnEvaluationCompleted(object sender, Dynamo.Models.EvaluationCompletedEventArgs e) -> void
virtual Dynamo.Models.DynamoModel.OnPropertyChanged(string propertyName) -> void
virtual Dynamo.Models.DynamoModel.OnRefreshCompleted(object sender, System.EventArgs e) -> void
virtual Dynamo.Models.DynamoModel.OnRequestLayoutUpdate(object sender, System.EventArgs e) -> void
virtual Dynamo.Models.DynamoModel.OnRequestsRedraw(object sender, System.EventArgs e) -> void
virtual Dynamo.Models.DynamoModel.OnRunCompleted(object sender, bool success) -> void
virtual Dynamo.Models.DynamoModel.OnWorkspaceAdded(Dynamo.Graph.Workspaces.WorkspaceModel obj) -> void
virtual Dynamo.Models.DynamoModel.OnWorkspaceCleared(Dynamo.Graph.Workspaces.WorkspaceModel workspace) -> void
virtual Dynamo.Models.DynamoModel.OnWorkspaceClearing() -> void
virtual Dynamo.Models.DynamoModel.OnWorkspaceClearingStarted(Dynamo.Graph.Workspaces.WorkspaceModel workspace) -> void
virtual Dynamo.Models.DynamoModel.OnWorkspaceRemoved(Dynamo.Graph.Workspaces.WorkspaceModel obj) -> void
virtual Dynamo.Models.DynamoModel.OnWorkspaceRemoveStarted(Dynamo.Graph.Workspaces.WorkspaceModel obj) -> void
virtual Dynamo.Models.DynamoModel.OpenFileFromJsonImpl(Dynamo.Models.DynamoModel.OpenFileFromJsonCommand command) -> void
virtual Dynamo.Models.DynamoModel.OpenFileImpl(Dynamo.Models.DynamoModel.OpenFileCommand command) -> void
virtual Dynamo.Models.DynamoModel.OpenTemplateImpl(Dynamo.Models.DynamoModel.OpenFileCommand command) -> void
virtual Dynamo.Models.DynamoModel.PostShutdownCore(bool shutdownHost) -> void
virtual Dynamo.Models.DynamoModel.PostTraceReconciliation(System.Collections.Generic.Dictionary<System.Guid, System.Collections.Generic.List<string>> orphanedSerializables) -> void
virtual Dynamo.Models.DynamoModel.PreShutdownCore(bool shutdownHost) -> void
virtual Dynamo.Models.DynamoModel.ResetEngine(bool markNodesAsDirty = false) -> void
virtual Dynamo.Models.DynamoModel.ShutDownCore(bool shutdownHost) -> void
virtual Dynamo.Scheduler.AsyncTask.CanMergeWithCore(Dynamo.Scheduler.AsyncTask otherTask) -> Dynamo.Scheduler.AsyncTask.TaskMergeInstruction
virtual Dynamo.Scheduler.AsyncTask.CompareCore(Dynamo.Scheduler.AsyncTask otherTask) -> int
virtual Dynamo.Search.SearchElements.NodeSearchElement.CreationName.get -> string
virtual Dynamo.Search.SearchElements.NodeSearchElement.FullName.get -> string
virtual Dynamo.Search.SearchElements.NodeSearchElement.GenerateInputParameters() -> System.Collections.Generic.IEnumerable<System.Tuple<string, string>>
virtual Dynamo.Search.SearchElements.NodeSearchElement.GenerateOutputParameters() -> System.Collections.Generic.IEnumerable<string>
virtual Dynamo.Search.SearchElements.NodeSearchElement.OnItemProduced(Dynamo.Graph.Nodes.NodeModel obj) -> void
virtual Dynamo.Search.SearchElements.SearchElementBase.CreationName.get -> string