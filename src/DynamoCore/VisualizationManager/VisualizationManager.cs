using System;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using System.Threading.Tasks;
using Autodesk.DesignScript.Interfaces;
using Dynamo.Interfaces;
using Dynamo.Models;
using Dynamo.Nodes;
using Dynamo.Selection;
using Dynamo.Utilities;
using Microsoft.Practices.Prism.ViewModel;
using Dynamo.DSEngine;

namespace Dynamo
{
    public delegate void RenderCompleteEventHandler(object sender, RenderCompletionEventArgs e);

    public delegate void ResultsReadyHandler(object sender, VisualizationEventArgs e);

    public delegate void VisualizerDelegate(NodeModel node, object geom, string tag, RenderDescription target, Octree.OctreeSearch.Octree octree);

    /// <summary>
    /// Visualization manager consolidates functionality for creating visualizations 
    /// of geometry and images of geometry generated by nodes.
    /// </summary>
    public class VisualizationManager : NotificationObject, IVisualizationManager, ICleanup
    {
        #region private members

        private string _alternateContextName = "Host";
        private bool _drawToAlternateContext = true;
        //private Octree.OctreeSearch.Octree octree;
        private bool updatingPaused = false;
        private DynamoController _controller;
        private List<RenderPackage> _currentTaggedPackages = new List<RenderPackage>();
        private bool _alternateDrawingContextAvailable;
        private long _taskId = -1;
        private List<long> _taskList = new List<long>();

        #endregion

        #region public properties

        /// <summary>
        /// Flag allows us to pause visualization updates.
        /// </summary>
        public bool UpdatingPaused
        {
            get { return updatingPaused; }
            internal set
            {
                if (updatingPaused && value == false)
                {
                    AggregateUpstreamRenderPackages(new RenderTag(CurrentTaskId, null));
                }
                Debug.WriteLine("Updating paused = " + value.ToString());
                updatingPaused = value;
            }
        }

        /// <summary>
        /// Is another context available for drawing?
        /// This property can be queried indirectly by the view to enable or disable
        /// UI functionality based on whether an alternate drawing context is available.
        /// </summary>
        public bool AlternateDrawingContextAvailable
        {
            get { return _alternateDrawingContextAvailable; }
            set
            {
                _alternateDrawingContextAvailable = value;
                RaisePropertyChanged("AlternateDrawingContextAvailable");
            }
        }

        /// <summary>
        /// Should we draw to the alternate context if it is available?
        /// </summary>
        public bool DrawToAlternateContext
        {
            get { return _drawToAlternateContext; }
            set
            {
                if (value == false)
                {
                    //if the present value has us drawing to the alternate
                    //context and we would like to stop doing so, we need 
                    //to trigger an event requesting alternate contexts
                    //to drop their visualizations
                    if (_drawToAlternateContext)
                    {
                        _drawToAlternateContext = value;
                        OnRequestAlternateContextClear(this, EventArgs.Empty);
                    }
                }
                else
                {
                    //we would like to reenable drawing to an alternate context.
                    //trigger the standard visualization complete event
                    if (!_drawToAlternateContext)
                    {
                        _drawToAlternateContext = value;
                        QueueRenderTask();
                    }
                }
                RaisePropertyChanged("DrawToAlternateContext");
            }
        }

        /// <summary>
        /// Can be used to expose a name of the alternate context for use in the UI.
        /// </summary>
        public string AlternateContextName
        {
            get { return _alternateContextName; }
            set { _alternateContextName = value; }
        }

        //public Octree.OctreeSearch.Octree Octree
        //{
        //    get { return octree; }
        //    set { octree = value; }
        //}

        public int MaxGridLines { get; set; }

        public Object CurrentTaskIdMutex = new object();
        public long CurrentTaskId
        {
            get
            {
                lock (CurrentTaskIdMutex)
                {
                    return _taskId;
                }
            }

            set
            {
                lock (CurrentTaskIdMutex)
                {
                    _taskId = value;
                }
            }
        }

        public Object TaskListMutex = new object();
        public List<long> TaskList
        {
            get
            {
                lock (TaskListMutex)
                {
                    return _taskList;
                }
            }
            set
            {
                lock (TaskListMutex)
                {
                    _taskList = value;
                }
            }
        }
        
        #endregion

        #region events

        /// <summary>
        /// An event triggered when there are results to visualize
        /// </summary>
        public event ResultsReadyHandler ResultsReadyToVisualize;

        protected virtual void OnResultsReadyToVisualize(object sender, VisualizationEventArgs e)
        {
            if (ResultsReadyToVisualize != null)
                ResultsReadyToVisualize(sender, e);
        }

        /// <summary>
        /// An event triggered on the completion of visualization update.
        /// </summary>
        public event RenderCompleteEventHandler RenderComplete;

        /// <summary>
        /// Called when the update of visualizations is complete.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        protected virtual void OnRenderComplete(object sender, RenderCompletionEventArgs e)
        {
            if (RenderComplete != null)
                RenderComplete(sender, e);
        }

        /// <summary>
        /// An event triggered when want any alternate drawing contexts to be cleared.
        /// </summary>
        public event EventHandler RequestAlternateContextClear;

        /// <summary>
        /// Called when we would like to request the clearing of any alternate drawing contexts.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        protected virtual void OnRequestAlternateContextClear(object sender, EventArgs e)
        {
            if (RequestAlternateContextClear != null)
                RequestAlternateContextClear(sender, e);
        }

        #endregion

        #region constructors

        public VisualizationManager()
        {
            MaxGridLines = 12;

            _controller = dynSettings.Controller;
            //octree = new Octree.OctreeSearch.Octree(10000,-10000,10000,-10000,10000,-10000,10000000);

            _controller.DynamoModel.WorkspaceClearing += Pause;
            _controller.DynamoModel.WorkspaceCleared += UnPauseAndUpdate;

            _controller.DynamoModel.NodeAdded += NodeAdded;
            _controller.DynamoModel.NodeDeleted += NodeDeleted;

            _controller.DynamoModel.DeletionStarted += Pause;
            _controller.DynamoModel.DeletionComplete += UnPauseAndUpdate;

            _controller.DynamoModel.CleaningUp += Clear;

            UnPause(this, EventArgs.Empty);
        }

        #endregion

        #region public methods

        /// <summary>
        /// Pause the visualization manager.
        /// When the visualization manager is paused, no rendering
        /// will occur.
        /// </summary>
        public void Pause()
        {
            Pause(this, EventArgs.Empty);
        }

        /// <summary>
        /// Unpause the visualization manager.
        /// When the visualization manager is unpaused, the visualization
        /// manager begins rendering again.
        /// </summary>
        public void UnPause()
        {
            UnPause(this, EventArgs.Empty);
        }

        /// <summary>
        /// Display a label for one or several render packages 
        /// based on the paths of those render packages.
        /// </summary>
        /// <param name="path"></param>
        public void TagRenderPackageForPath(string path)
        {
            CurrentTaskId++;
            TaskList.Add(CurrentTaskId);

            var packages = new List<RenderPackage>();

            foreach (var node in dynSettings.Controller.DynamoModel.Nodes)
            {
                lock (node.RenderPackagesMutex)
                {
                    packages
                        .AddRange(node.RenderPackages.Where(x => x.Tag == path || x.Tag.Contains(path + ":"))
                        .Cast<RenderPackage>());
                }
            }

            if (packages.Any())
            {
                //clear any labels that might have been drawn on this
                //package already and add the one we want
                if (_currentTaggedPackages.Any())
                {
                    _currentTaggedPackages.ForEach(x => x.DisplayLabels = false);
                    _currentTaggedPackages.Clear();
                }

                packages.ToList().ForEach(x => x.DisplayLabels = true);
                _currentTaggedPackages.AddRange(packages);

                var allPackages = new List<RenderPackage>();

                foreach (var node in _controller.DynamoModel.Nodes)
                {
                    lock (node.RenderPackagesMutex)
                    {
                        allPackages.AddRange(node.RenderPackages.Where(x => ((RenderPackage)x).IsNotEmpty()).Cast<RenderPackage>());
                    }
                }

                OnResultsReadyToVisualize(this,
                        new VisualizationEventArgs(
                            allPackages, string.Empty, CurrentTaskId));
            }
        }

        /// <summary>
        /// Aggregates all upstream geometry for the given node then sends
        /// a message that a visualization is ready
        /// </summary>
        /// <param name="node">The node whose upstream geometry you need.</param>
        /// <returns>A render description containing all upstream geometry.</returns>
        public void AggregateUpstreamRenderPackages(RenderTag tag)
        {
            var packages = new List<IRenderPackage>();

            //send back just what the node needs
            var watch = new Stopwatch();
            watch.Start();

            if (tag.Node == null)
            {
                //send back everything
                foreach (var modelNode in _controller.DynamoModel.Nodes)
                {
                    lock (modelNode.RenderPackagesMutex)
                    {
                        packages.AddRange(modelNode.RenderPackages);
                    }
                }

                watch.Stop();
                Debug.WriteLine(String.Format("RENDER: {0} ellapsed for aggregating geometry for background preview.", watch.Elapsed));

                if (packages.Any())
                {
                    // if there are packages, send any that aren't empty
                    OnResultsReadyToVisualize(this,
                        new VisualizationEventArgs(
                            packages.Where(x => ((RenderPackage)x).IsNotEmpty()).Cast<RenderPackage>(), string.Empty, tag.TaskId));
                }
                else
                {
                    // if there are no packages, still trigger an update
                    // so the view gets redrawn
                    OnResultsReadyToVisualize(this,
                        new VisualizationEventArgs(packages.Cast<RenderPackage>(), string.Empty, tag.TaskId));
                }

            }
            else
            {
                watch.Stop();
                Debug.WriteLine(String.Format("RENDER: {0} ellapsed for aggregating geometry for branch {1}.", watch.Elapsed, tag.Node.GUID));

                //send back renderables for the branch
                packages = GetUpstreamPackages(tag.Node.Inputs).ToList();
                if (packages.Any())
                    OnResultsReadyToVisualize(this, new VisualizationEventArgs(packages.Where(x => ((RenderPackage)x).IsNotEmpty()).Cast<RenderPackage>(), tag.Node.GUID.ToString(),tag.TaskId));
            }

            

            //LogVisualizationUpdateData(rd, watch.Elapsed.ToString());
        }

        /// <summary>
        /// Checks the current Render task id against the list of task ids.
        /// If a 'newer' task id is found, then another update has been fired more
        /// recently, so we should trigger a re-render.
        /// </summary>
        public void CheckIfLatestAndUpdate(long taskId)
        {
            if (!TaskList.Any(id => id > taskId)) return;

            Debug.WriteLine("RENDER : Latest render task id > {0}, re-rendering...", taskId);
            Render(null,false);
        }

        #endregion

        #region private event handlers

        /// <summary>
        /// Disable visualization updates by unregistering event listeners from the model.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void Pause(object sender, EventArgs e)
        {
            UpdatingPaused = true;
            UnregisterEventListeners();
        }

        /// <summary>
        /// Enable visualization updates by registering event listeners on the model.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void UnPause(object sender, EventArgs e)
        {
            UpdatingPaused = false;
            RegisterEventListeners();
        }

        /// <summary>
        /// Enable visualization updates and trigger an update of the visualizations.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void UnPauseAndUpdate(object sender, EventArgs e)
        {
            UpdatingPaused = false;
            RegisterEventListeners();
            QueueRenderTask();
        }

        /// <summary>
        /// Handler for the model's NodeDeleted event.
        /// </summary>
        /// <param name="node"></param>
        private void NodeDeleted(NodeModel node)
        {
            node.PropertyChanged -= NodePropertyChanged;

            /*if (!UpdatingPaused)
            {
                QueueRenderTask();
            }*/
        }

        /// <summary>
        /// Handler for the model's NodeAdded event.
        /// Registers for property changed events on the node.
        /// </summary>
        /// <param name="node"></param>
        private void NodeAdded(NodeModel node)
        {
            //node.BlockingStarted += Pause;
            //node.BlockingEnded += UnPause;

            if (updatingPaused) return;

            node.PropertyChanged += NodePropertyChanged;
        }

        /// <summary>
        /// Handler for a node model's property changed event
        /// </summary>
        /// <remarks>Used to observe changes in the nodes visualization state.
        /// </remarks>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void NodePropertyChanged(object sender, PropertyChangedEventArgs e)
        {
            if (e.PropertyName == "IsVisible" ||
                e.PropertyName == "IsUpstreamVisible" ||
                e.PropertyName == "DisplayLabels")
            {
                Render();
            }
        }

        private void SelectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.Action == NotifyCollectionChangedAction.Reset)
                return;

            if (updatingPaused || dynSettings.Controller == null)
                return;

            // For a selection event, we need only to trigger a new rendering for 
            // the background preview.
            AggregateUpstreamRenderPackages(new RenderTag(CurrentTaskId, null));
        }

        /// <summary>
        /// Handler for the model's ConnectorDeleted event.
        /// </summary>
        /// <param name="connector"></param>
        private void DynamoModel_ConnectorDeleted(ConnectorModel connector)
        {
            // TODO: Ian should remove this when the CBN reconnection bug is solved.
            /*if (connector.Start.Owner.GetType() == typeof(CodeBlockNodeModel))
            {
                return;
            }

            //we are given the connector that was deleted
            //if it's end node still exists, clear the package for 
            //the node and trigger an update.
            if (connector.End != null)
                connector.End.Owner.ClearRenderPackages();

            //tell the watches that they require re-binding.
            QueueRenderTask();*/
        }

        #endregion

        #region private methods

        private void RegisterEventListeners()
        {
            _controller.EvaluationCompleted += Update;
            _controller.RequestsRedraw += Update;
            _controller.DynamoModel.ConnectorDeleted += DynamoModel_ConnectorDeleted;
            DynamoSelection.Instance.Selection.CollectionChanged += SelectionChanged;

            dynSettings.Controller.DynamoModel.Nodes.ForEach(n => n.PropertyChanged += NodePropertyChanged);
        }

        private void UnregisterEventListeners()
        {
            _controller.EvaluationCompleted -= Update;
            _controller.RequestsRedraw -= Update;
            _controller.DynamoModel.ConnectorDeleted -= DynamoModel_ConnectorDeleted;
            DynamoSelection.Instance.Selection.CollectionChanged -= SelectionChanged;

            dynSettings.Controller.DynamoModel.Nodes.ForEach(n => n.PropertyChanged -= NodePropertyChanged);
        }

        /// <summary>
        /// Handler for the controller's RequestRedraw event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void Update(object sender, EventArgs e)
        {
            Render();
        }

        private void Clear(object sender, EventArgs e)
        {
            Pause(this, EventArgs.Empty);
            QueueRenderTask();
        }

        /// <summary>
        /// Increment the render task id and fire the render completed event.
        /// </summary>
        private void QueueRenderTask(bool increment = true)
        {
            if (increment)
            {
                CurrentTaskId++;
            }
            
            Debug.WriteLine("RENDER : Current task id = {0}", CurrentTaskId);
            TaskList.Add(CurrentTaskId);
            OnRenderComplete(this, new RenderCompletionEventArgs(CurrentTaskId));
        }

        /// <summary>
        /// Finds all nodes marked as upated in the graph and calls their,
        /// update methods in paralell.
        /// </summary>
        private void Render(IEnumerable<NodeModel> toUpdate = null, bool incrementId = true)
        {
            if (_controller == null)
                return;

            var worker = new BackgroundWorker();

            worker.DoWork += (n,i) => RenderThread(toUpdate, incrementId);

            if (DynamoController.IsTestMode)
                RenderThread(toUpdate, incrementId);
            else
                worker.RunWorkerAsync();   
        }

        private void RenderThread(IEnumerable<NodeModel> nodes, bool incrementId)
        {
            try
            {
                var sw = new Stopwatch();
                sw.Start();

                //If the the event arguments contains a list of nodes,
                //then update those nodes, otherwise process any nodes
                //that are marked for updating.

                var toUpdate = nodes ??
                               _controller.DynamoModel.Nodes.Where(node => node.IsUpdated || node.RequiresRecalc);

                var nodeModels = toUpdate as IList<NodeModel> ?? toUpdate.ToList();
                if (!nodeModels.Any())
                    return;

                nodeModels.ToList().ForEach(x => x.UpdateRenderPackage());

                //Setup the octree. An optimization would defer this operation until
                //a short while after update operations are complete to avoid
                //to many rebuilds of this index while building dynamically.
                //if(!DynamoController.IsTestMode)
                //    SetupOctree(nodeModels);

                sw.Stop();
                Debug.WriteLine(string.Format("RENDER: {0} ellapsed for updating render packages.", sw.Elapsed));

                //Debug.WriteLine(string.Format("Visualization updating {0} objects", toUpdate.Count()));
                QueueRenderTask(incrementId);

            }
            catch (Exception ex)
            {
                dynSettings.DynamoLogger.Log(ex);
            }
        }

        /// <summary>
        /// Setup a spatial index for triangle vertex locations to 
        /// be used in selection operations.
        /// </summary>
        /// <param name="toUpdate"></param>
        //private void SetupOctree(IEnumerable<NodeModel> toUpdate)
        //{
        //    octree.Clear();
        //    foreach (var node in toUpdate)
        //    {
        //        var packages = node.RenderPackages;
        //        foreach (var p in packages)
        //        {
        //            for (int i = 0; i < p.TriangleVertices.Count - 3; i += 3)
        //            {
        //                var a = p.TriangleVertices[i];
        //                var b = p.TriangleVertices[i + 1];
        //                var c = p.TriangleVertices[i + 2];
        //                octree.AddNode(a, b, c, node.GUID.ToString());
        //            }
        //        }
        //    }
        //}

        /// <summary>
        /// Gathers the Ids of the upstream drawable nodes.
        /// </summary>
        /// <param name="inputs">A dictionary describing the inputs on the node.</param>
        /// <returns>A collection of strings.</returns>
        private IEnumerable<IRenderPackage> GetUpstreamPackages(Dictionary<int, Tuple<int, NodeModel>> inputs)
        {
            var packages = new List<IRenderPackage>();

            foreach (KeyValuePair<int, Tuple<int, NodeModel>> pair in inputs)
            {
                if (pair.Value == null)
                    continue;

                NodeModel node = pair.Value.Item2;

                //We no longer depend on OldValue, as long as the given node has
                //registered it's render description with Visualization manager
                //we will be able to visualize the given node. -Sharad
                if (node != null)
                {
                    lock (node.RenderPackagesMutex)
                    {
                        packages.AddRange(node.RenderPackages);
                    }
                }

                if (node.IsUpstreamVisible)
                    packages.AddRange(GetUpstreamPackages(node.Inputs));
            }

            return packages;
        }

        /// <summary>
        /// Log visualization update timing and geometry data.
        /// </summary>
        /// <param name="rd">The aggregated render description for the model.</param>
        /// <param name="ellapsedTime">The ellapsed time of visualization as a string.</param>
        //protected void LogVisualizationUpdateData(RenderDescription rd, string ellapsedTime)
        //{
        //    var renderDict = new Dictionary<string, object>();
        //    renderDict["points"] = rd.Points.Count;
        //    renderDict["line_segments"] = rd.Lines.Count / 2;
        //    renderDict["mesh_facets"] = rd.Meshes.Any()
        //                                    ? rd.Meshes.Select(x => x.TriangleIndices.Count / 3).Aggregate((a, b) => a + b)
        //                                    : 0;
        //    renderDict["time"] = ellapsedTime;
        //    renderDict["manager_type"] = this.GetType().ToString();

        //    var renderData = JsonConvert.SerializeObject(renderDict);

        //    InstrumentationLogger.LogInfo("Perf-Latency-RenderGeometryGeneration", renderData);

        //    //Debug.WriteLine(renderData);
        //}

        /// <summary>
        /// Lookup a node from a location selected on geometry in the scene.
        /// </summary>
        /// <param name="x"></param>
        /// <param name="y"></param>
        /// <param name="z"></param>
        //public void LookupSelectedElement(double x, double y, double z)
        //{
        //    var id = octree.GetNode(x, y, z);

        //    if (id == null)
        //        return;

        //    var node = _controller.DynamoModel.Nodes.FirstOrDefault(n => n.GUID.ToString() == id.ToString());
        //    if (node != null && !DynamoSelection.Instance.Selection.Contains(node))
        //    {
        //        DynamoSelection.Instance.ClearSelection();
        //        DynamoSelection.Instance.Selection.Add(node);
        //    }
        //}

        #endregion

        #region ICleanup interface

        public void Cleanup()
        {
            UnregisterEventListeners();
        }

        #endregion
    }

    public class VisualizationEventArgs : EventArgs
    {
        /// <summary>
        /// A list of render packages corresponding to 
        /// a branch or a whole graph.
        /// </summary>
        public IEnumerable<RenderPackage> Packages { get; internal set; }

        /// <summary>
        /// The id of the view for which the description belongs.
        /// </summary>
        public string Id { get; internal set; }

        public long TaskId { get; internal set; }

        public VisualizationEventArgs(IEnumerable<RenderPackage> description, string viewId, long taskId)
        {
            Packages = description;
            Id = viewId;
            TaskId = taskId;
        }
    }

    public class RenderCompletionEventArgs : EventArgs
    {
        public long TaskId { get; set; }

        public RenderCompletionEventArgs(long taskId)
        {
            TaskId = taskId;
        }
    }

    public class RenderTag
    {
        public long TaskId { get; internal set; }
        public NodeModel Node { get; internal set; }

        public RenderTag(long taskId, NodeModel node)
        {
            TaskId = taskId;
            Node = node;
        }
    }
}
