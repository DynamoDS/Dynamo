<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:clr="clr-namespace:System;assembly=mscorlib" 
                    xmlns:controls="clr-namespace:Dynamo.Views" xmlns:nodes="clr-namespace:Dynamo.Nodes">

    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="/DynamoCore;component/UI/Themes/DynamoConverters.xaml" />
    </ResourceDictionary.MergedDictionaries>
    
    <!--Control colors.-->
    <Color x:Key="WindowColor">#FFE8EDF9</Color>
    <Color x:Key="ContentAreaColorLight">#FFC5CBF9</Color>
    <Color x:Key="ContentAreaColorDark">#FF7381F9</Color>

    <Color x:Key="DisabledControlLightColor">#FFE8EDF9</Color>
    <Color x:Key="DisabledControlDarkColor">#FFC5CBF9</Color>
    <Color x:Key="DisabledForegroundColor">#FF888888</Color>

    <Color x:Key="SelectedBackgroundColor">#FFC5CBF9</Color>
    <Color x:Key="SelectedUnfocusedColor">#FFDDDDDD</Color>

    <Color x:Key="ControlLightColor">White</Color>
    <Color x:Key="ControlMediumColor">#FF7381F9</Color>
    <Color x:Key="ControlDarkColor">#FF211AA9</Color>

    <Color x:Key="ControlMouseOverColor">#FF3843C4</Color>
    <Color x:Key="ControlPressedColor">#FF211AA9</Color>


    <Color x:Key="GlyphColor">#FF444444</Color>
    <Color x:Key="GlyphMouseOver">sc#1, 0.004391443, 0.002428215, 0.242281124</Color>

    <!--Border colors-->
    <Color x:Key="BorderLightColor">#FFCCCCCC</Color>
    <Color x:Key="BorderMediumColor">#FF888888</Color>
    <Color x:Key="BorderDarkColor">#FF444444</Color>

    <Color x:Key="PressedBorderLightColor">#FF888888</Color>
    <Color x:Key="PressedBorderDarkColor">#FF444444</Color>

    <Color x:Key="DisabledBorderLightColor">#FFAAAAAA</Color>
    <Color x:Key="DisabledBorderDarkColor">#FF888888</Color>

    <Color x:Key="DefaultBorderBrushDarkColor">Black</Color>

    <!--Control-specific resources.-->
    <Color x:Key="HeaderTopColor">#FFC5CBF9</Color>
    <Color x:Key="DatagridCurrentCellBorderColor">Black</Color>
    <Color x:Key="SliderTrackDarkColor">#FFC5CBF9</Color>

    <Color x:Key="NavButtonFrameColor">#FF3843C4</Color>
    
    <LinearGradientBrush x:Key="MenuPopupBrush" EndPoint="0.5,1" StartPoint="0.5,0">
        <GradientStop Color="{DynamicResource ControlLightColor}" Offset="0" />
        <GradientStop Color="{DynamicResource ControlMediumColor}" Offset="0.5" />
        <GradientStop Color="{DynamicResource ControlLightColor}" Offset="1" />
    </LinearGradientBrush>

    <!-- Import -->
    <BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter" />
    
    <!-- Embedded Font -->
    <!-- Open Sans (under Apache License, version 2.0)
         Link: http://www.google.com/fonts/specimen/Open+Sans -->
    <FontFamily x:Key="OpenSansRegular">/DynamoCore;component/UI/Fonts/#Open Sans</FontFamily>
    <FontFamily x:Key="OpenSansItalic">/DynamoCore;component/UI/Fonts/#Open Sans Italic</FontFamily>
    <FontFamily x:Key="OpenSansLight">/DynamoCore;component/UI/Fonts/#Open Sans Light</FontFamily>
    <FontFamily x:Key="OpenSansSemibold">/DynamoCore;component/UI/Fonts/#Open Sans Semibold</FontFamily>
    <FontFamily x:Key="OpenSansBold">/DynamoCore;component/UI/Fonts/#Open Sans Bold</FontFamily>
    <FontFamily x:Key="OpenSansLightItalic">/DynamoCore;component/UI/Fonts/#Open Sans Light Italic</FontFamily>
    <FontFamily x:Key="OpenSansSemiboldItalic">/DynamoCore;component/UI/Fonts/#Open Sans Semibold Italic</FontFamily>
    <FontFamily x:Key="OpenSansBoldItalic">/DynamoCore;component/UI/Fonts/#Open Sans Bold Italic</FontFamily>
    
    <!-- Window Common Styling -->
    <Style x:Key="DynamoWindowStyle"  TargetType="{x:Type Window}">
        <Setter Property="FontFamily" Value="{StaticResource OpenSansRegular}" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="Background" Value="#343434" />
    </Style>

    <Image x:Key="ComboDownIcon_normal"
           Source="/DynamoCore;component/UI/Images/tick_selected.png" />
    <ControlTemplate x:Key="ComboBoxToggleButton" TargetType="ToggleButton">
        <Grid>
            <Border x:Name="Border"
                    Background="#2c2c2c"
                    BorderBrush="#444444"
                    BorderThickness="1" />
            <Path x:Name="Arrow"
                  Fill="#999"
                  HorizontalAlignment="Right"
                  VerticalAlignment="Center"
                  Margin="0,0,10,0"
                  Data="M 0 0 L 4 4 L 8 0 Z" />
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="ToggleButton.IsMouseOver" Value="true">
                <Setter TargetName="Arrow" Property="Fill" Value="#fff" />
            </Trigger>
            <Trigger Property="ToggleButton.IsChecked" Value="true">
                <Setter TargetName="Border" Property="Background" Value="#333" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <ControlTemplate x:Key="ComboBoxTextBox" TargetType="TextBox">
        <Border x:Name="PART_ContentHost" Focusable="False" />
    </ControlTemplate>

    <SolidColorBrush x:Key="SComboBoxBackground" Color="#2c2c2c" />
    <SolidColorBrush x:Key="SComboBoxBorder" Color="#444444" />
    <Style x:Key="SComboBox" TargetType="{x:Type ComboBox}">
        <Setter Property="SnapsToDevicePixels" Value="true"/>
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.CanContentScroll" Value="true"/>
        <Setter Property="MinWidth" Value="120"/>
        <Setter Property="MinHeight" Value="20"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ComboBox">
                    <Grid>
                        <ToggleButton 
                            Name="ToggleButton" 
                            Template="{StaticResource ComboBoxToggleButton}" 
                            Grid.Column="2" 
                            Focusable="false"
                            IsChecked="{Binding Path=IsDropDownOpen,Mode=TwoWay,RelativeSource={RelativeSource TemplatedParent}}"
                            ClickMode="Press">
                        </ToggleButton>
                        <ContentPresenter
                            Name="ContentSite"
                            IsHitTestVisible="False" 
                            Content="{TemplateBinding SelectionBoxItem}"
                            ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}"
                            ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}"
                            Margin="3,3,23,3"
                            VerticalAlignment="Center"
                            HorizontalAlignment="Left" />
                        <TextBox x:Name="PART_EditableTextBox"
                            Style="{x:Null}" 
                            Template="{StaticResource ComboBoxTextBox}" 
                            HorizontalAlignment="Left" 
                            VerticalAlignment="Center" 
                            Margin="3,3,23,3"
                            Padding="10"
                            Focusable="True" 
                            Foreground="#bbbbbb"
                            CaretBrush="#bbbbbb"
                            Visibility="Hidden"
                            IsReadOnly="{TemplateBinding IsReadOnly}"/>
                        <Popup 
                            Name="Popup"
                            Placement="Bottom"
                            IsOpen="{TemplateBinding IsDropDownOpen}"
                            AllowsTransparency="True" 
                            Focusable="False"
                            PopupAnimation="Slide">
                            <Grid Name="DropDown"
                                  SnapsToDevicePixels="True"                
                                  MinWidth="{TemplateBinding ActualWidth}"
                                  MaxHeight="{TemplateBinding MaxDropDownHeight}">
                                <Border 
                                    x:Name="DropDownBorder"
                                    Background="#2c2c2c"
                                    BorderThickness="1,0,1,1"
                                    BorderBrush="#444444"/>
                                <ScrollViewer Margin="4,6,4,6" SnapsToDevicePixels="True">
                                    <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Contained"/>
                                </ScrollViewer>
                            </Grid>
                        </Popup>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="HasItems" Value="false">
                            <Setter TargetName="DropDownBorder" Property="MinHeight" Value="95"/>
                        </Trigger>
                        <Trigger Property="IsGrouping" Value="true">
                            <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
                        </Trigger>
                        <Trigger SourceName="Popup" Property="Popup.AllowsTransparency" Value="true">
                            <Setter TargetName="DropDownBorder" Property="CornerRadius" Value="4"/>
                            <Setter TargetName="DropDownBorder" Property="Margin" Value="0,2,0,0"/>
                        </Trigger>
                        <Trigger Property="IsEditable" Value="true">
                            <Setter Property="IsTabStop" Value="false"/>
                            <Setter TargetName="PART_EditableTextBox" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="ContentSite" Property="Visibility" Value="Hidden"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
        </Style.Triggers>
    </Style>

    <Style x:Key="SSearchOnlineToggleButton" TargetType="{x:Type ToggleButton}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate>

                    <Grid x:Name="container" Background="Transparent">
                        <Grid x:Name="inner" Background="#333">

                            <Image Width="24" Height="24" x:Name="display" Source="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Tag}"></Image>

                        </Grid>
                    </Grid>

                    <ControlTemplate.Triggers>

                        <Trigger Property="ToggleButton.IsChecked" Value="True">
                            <Setter TargetName="inner" Property="Background" Value="LightBlue"/>
                        </Trigger>

                        <Trigger Property="ToggleButton.IsMouseOver" Value="true">
                            <Setter TargetName="inner" Property = "Background" Value="LightBlue"/>
                        </Trigger>

                    </ControlTemplate.Triggers>

                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--Zoom fade text-->
    <Style x:Key="SZoomFadeText" TargetType="{x:Type TextBlock}">
        <Style.Triggers>
            <DataTrigger
              Binding="{Binding Path=DataContext.Zoom, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type controls:dynWorkspaceView}}, Converter={StaticResource ZoomToBooleanConverter}}" Value="true">
                <DataTrigger.EnterActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetProperty="Opacity"
                             To="1.0" Duration="0:0:0.2"/>
                        </Storyboard>
                    </BeginStoryboard>
                </DataTrigger.EnterActions>
                <DataTrigger.ExitActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetProperty="Opacity"
                             To="0.0" Duration="0:0:0.2"/>
                        </Storyboard>
                    </BeginStoryboard>
                </DataTrigger.ExitActions>
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="SZoomFadeTextBox" TargetType="{x:Type TextBox}">
        <Style.Triggers>
            <DataTrigger
              Binding="{Binding Path=DataContext.Zoom, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type controls:dynWorkspaceView}}, Converter={StaticResource ZoomToBooleanConverter}}" Value="true">
                <DataTrigger.EnterActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetProperty="Opacity"
                             To="1.0" Duration="0:0:0.2"/>
                        </Storyboard>
                    </BeginStoryboard>
                </DataTrigger.EnterActions>
                <DataTrigger.ExitActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetProperty="Opacity"
                             To="0.0" Duration="0:0:0.2"/>
                        </Storyboard>
                    </BeginStoryboard>
                </DataTrigger.ExitActions>
            </DataTrigger>
        </Style.Triggers>
    </Style>
    
    <LinearGradientBrush x:Key="ButtonGradientBackground" StartPoint="0.5,0" EndPoint="0.5,1">
        <GradientStop Color="#444" Offset="0.0" />
        <GradientStop Color="#2E2E2E" Offset="1.0" />
    </LinearGradientBrush>

    <LinearGradientBrush x:Key="DarkButtonGradientBackground" StartPoint="0.5,0" EndPoint="0.5,1">
        <GradientStop Color="#111" Offset="0.0" />
        <GradientStop Color="#000" Offset="1.0" />
    </LinearGradientBrush>

    <Style x:Key="SImageButton" TargetType="{x:Type Button}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate>

                    <Grid x:Name="container" Background="Transparent">
                        <Grid x:Name="inner" Background="{StaticResource ButtonGradientBackground}">
                            
                            <Image Width="24" Height="24" x:Name="display" Source="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Tag}"></Image>

                        </Grid>
                    </Grid>

                    <ControlTemplate.Triggers>

                        <Trigger Property="ToggleButton.IsMouseOver" Value="true">
                            <Setter TargetName="inner" Property = "Background" Value="LightBlue"/>
                        </Trigger>

                    </ControlTemplate.Triggers>

                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

        <Style x:Key="SBadgeButton" TargetType="{x:Type Button}">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate>

                                    <Border x:Name="container" Background="Transparent" >
                                        <Border x:Name="inner" Background="#55000000" CornerRadius="2" Margin="3">
                                            <TextBlock x:Name="text" HorizontalAlignment="Center" Margin="3" FontSize="11" Foreground="#BBB" FontWeight="Bold" Text="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Content}"></TextBlock>
                                        </Border>
                                    </Border>

                                    <ControlTemplate.Triggers>

                                        <Trigger Property="Button.IsMouseOver" Value="true">
                                            <Setter TargetName="inner" Property ="Background" Value="#88000000"/>
                                        </Trigger>
                                        
                                        <Trigger Property="IsEnabled" Value="false">
                                            <Setter TargetName="text" Property = "Foreground" Value="#666"/>
                                        </Trigger>

                                    </ControlTemplate.Triggers>

                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

    <Style x:Key="SDarkTextBox"
           BasedOn="{StaticResource {x:Type TextBox}}"
           TargetType="{x:Type TextBox}">
        <Setter Property="Foreground" Value="#bbbbbb" />
        <Setter Property="CaretBrush" Value="White" />
        <Setter Property="HorizontalAlignment" Value="Stretch" />
        <Setter Property="FontSize" Value="14px" />
        <Setter Property="Padding" Value="5" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBox}">
                    <Border Name="borderText"
                            BorderThickness="1px"
                            BorderBrush="#444"
                            Background="#2c2c2c">
                        <Grid>
                            <ScrollViewer x:Name="PART_ContentHost"
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                            <TextBlock x:Name="previewText"
                                       Foreground="#555555"
                                       FontSize="12px"
                                       Padding="6"
                                       Margin="4 0 0 0"
                                       IsHitTestVisible="False"
                                       Visibility="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Text.IsEmpty, Converter={StaticResource BooleanToVisibilityConverter}}"
                                       Text="{TemplateBinding Tag}" />
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsKeyboardFocusWithin" Value="True">
                            <Setter TargetName="borderText"
                                    Property="BorderBrush"
                                    Value="#666666" />
                        </Trigger>

                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Foreground"
                                    Value="#555555" />
                            <Setter TargetName="borderText"
                                    Property="BorderBrush"
                                    Value="#444444" />
                        </Trigger>

                        <Trigger Property="Text" Value="">
                            <Setter Property="Visibility"
                                    TargetName="previewText"
                                    Value="Visible" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="STextButton" TargetType="{x:Type Button}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate>

                    <Border x:Name="container"
                            Background="Transparent"
                            BorderBrush="#3c3c3c"
                            BorderThickness="1">
                        <Grid x:Name="inner"
                              Background="#373737">

                            <TextBlock x:Name="text"
                                       HorizontalAlignment="Center"
                                       VerticalAlignment="Center"
                                       Margin="10, 10, 10, 10"
                                       Foreground="#bbbbbb" FontSize="14px" Text="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Content}"></TextBlock>
                        </Grid>
                    </Border>

                    <ControlTemplate.Triggers>

                        <Trigger Property="Button.IsMouseOver" Value="true">
                            <Setter TargetName="container"
                                    Property="BorderBrush"
                                    Value="#656565"/>
                            <Setter TargetName="inner"
                                    Property="Background"
                                    Value="#373737" />
                        </Trigger>

                        <Trigger Property="Button.IsPressed"
                                 Value="true">
                            <Setter TargetName="container"
                                    Property="BorderBrush"
                                    Value="#656565" />
                            <Setter TargetName="inner"
                                    Property="Background"
                                    Value="#272727" />
                        </Trigger>

                        <Trigger Property="IsEnabled" Value="true">
                            <Setter TargetName="text"
                                    Property="Foreground"
                                    Value="#bbbbbb"/>
                        </Trigger>

                        <Trigger Property="IsEnabled"
                                 Value="false">
                            <Setter TargetName="container"
                                    Property="BorderBrush"
                                    Value="Transparent" />
                            <Setter TargetName="inner"
                                    Property="Background"
                                    Value="#373737" />
                            <Setter TargetName="text"
                                    Property="Foreground"
                                    Value="#555555"/>
                        </Trigger>

                    </ControlTemplate.Triggers>

                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="SErrorTextButton" TargetType="{x:Type Button}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate>

                    <Grid x:Name="container" Background="Transparent">
                        <Border x:Name="inner" BorderBrush="#bd362f" BorderThickness="1">

                            <Border.Background>
                                <LinearGradientBrush  StartPoint="0.5,0" EndPoint="0.5,1">
                                    <GradientStop Color="#ee5f5b" Offset="0.0" />
                                    <GradientStop Color="#bd362f" Offset="1.0" />
                                </LinearGradientBrush>
                            </Border.Background>

                            <TextBlock x:Name="text" HorizontalAlignment="Center" Foreground="WhiteSmoke" Margin="7,10,7,7" FontSize="14" Text="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Content}"></TextBlock>
                        </Border>
                    </Grid>

                    <ControlTemplate.Triggers>

                        <Trigger Property="Button.IsMouseOver" Value="true">
                            <Setter TargetName="inner" Property = "Background" Value="LightBlue"/>
                        </Trigger>

                        <Trigger Property="IsEnabled" Value="true">
                            <Setter TargetName="text" Property = "Foreground" Value="WhiteSmoke"/>
                        </Trigger>

                        <Trigger Property="IsEnabled" Value="false">
                            <Setter TargetName="text" Property = "Foreground" Value="DarkGray"/>
                        </Trigger>

                    </ControlTemplate.Triggers>

                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <Style x:Key="SNodeTextButton" TargetType="{x:Type Button}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate>

                    <Grid x:Name="container" Background="Transparent">
                        <Grid x:Name="inner">

                            <Grid.Background>
                                <LinearGradientBrush  StartPoint="0.5,0" EndPoint="0.5,1">
                                    <GradientStop Color="#CCFFFFFF" Offset="0.0" />
                                    <GradientStop Color="#55FFFFFF" Offset="1.0" />
                                </LinearGradientBrush>
                            </Grid.Background>

                            <TextBlock x:Name="text" 
                                       HorizontalAlignment="Center" 
                                       Foreground="Black" 
                                       Margin="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Margin}" 
                                       FontSize="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=FontSize}"
                                       Text="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Content}" 
                                       Padding="3" 
                                       Style="{StaticResource SZoomFadeText}"></TextBlock>
                        </Grid>
                    </Grid>

                    <ControlTemplate.Triggers>

                        <Trigger Property="Button.IsMouseOver" Value="true">
                            <Setter TargetName="inner" Property = "Background" Value="#CCFFFFFF"/>
                        </Trigger>

                        <Trigger Property="IsEnabled" Value="false">
                            <Setter TargetName="text" Property = "Foreground" Value="DarkGray"/>
                            <Setter TargetName="inner" Property = "Background" Value="#CCFFFFFF"/>
                        </Trigger>

                        <Trigger Property="IsEnabled" Value="true">
                            <Setter TargetName="text" Property = "Foreground" Value="Black"/>
                        </Trigger>

                    </ControlTemplate.Triggers>

                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type CheckBox}">
        <Setter Property="SnapsToDevicePixels" Value="true" />
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="CheckBox">
                    <BulletDecorator Background="Transparent"
                                     VerticalAlignment="Center">
                        <BulletDecorator.Bullet>
                            <Border x:Name="Border"
                                    Width="13"
                                    Height="13"
                                    BorderThickness="1"
                                    BorderBrush="#666666"
                                    Background="#373737">
                                <Image x:Name="CheckBoxTick"
                                       Width="7"
                                       Height="7"
                                       VerticalAlignment="Center"
                                       HorizontalAlignment="Center"
                                       Visibility="Hidden"
                                       Source="/DynamoCore;component/UI/Images/tick_selected.png" />
                            </Border>
                        </BulletDecorator.Bullet>

                        <ContentPresenter x:Name="contentPresent"
                                          TextBlock.FontSize="14px"
                                          TextBlock.Foreground="#bbbbbb"
                                          Margin="5,0,5,0"
                                          Content="{TemplateBinding Content}"
                                          ContentTemplate="{TemplateBinding ContentTemplate}" />
                    </BulletDecorator>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="true">
                            <Setter TargetName="CheckBoxTick" Property="Visibility" Value="Visible" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="SSearchButton" TargetType="{x:Type Button}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate>

                    <Grid x:Name="container" Background="Transparent">
                        <Grid x:Name="inner" Background="#333">

                            <Image Width="24" Height="24" x:Name="display" Source="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Tag}"></Image>

                        </Grid>
                    </Grid>

                    <ControlTemplate.Triggers>

                        <!--<Trigger Property="ToggleButton.IsMouseOver" Value="true">
                <Setter TargetName="inner" Property = "Background" Value="LightBlue"/>
              </Trigger>-->

                    </ControlTemplate.Triggers>

                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--Scrollbar Thumbs-->
    <Style x:Key="SScrollThumbs" TargetType="{x:Type Thumb}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <Grid x:Name="Grid">
                        <Rectangle HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Width="Auto" Height="Auto" Fill="Transparent" />
                        <Border x:Name="Rectangle1" CornerRadius="0" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Width="Auto" Height="Auto"  Background="{TemplateBinding Background}" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="Tag" Value="Horizontal">
                            <Setter TargetName="Rectangle1" Property="Width" Value="Auto" />
                            <Setter TargetName="Rectangle1" Property="Height" Value="7" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--ScrollBars-->
    <Style x:Key="{x:Type ScrollBar}" TargetType="{x:Type ScrollBar}">
        <Setter Property="Stylus.IsFlicksEnabled" Value="false" />
        <Setter Property="Foreground" Value="#444" />
        <Setter Property="Background" Value="#111" />
        <Setter Property="Width" Value="8" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ScrollBar}">
                    <Grid x:Name="GridRoot" Width="19" Background="{TemplateBinding Background}">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="0.00001*" />
                        </Grid.RowDefinitions>

                        <Track x:Name="PART_Track" Grid.Row="0" IsDirectionReversed="true" Focusable="false">
                            <Track.Thumb>
                                <Thumb x:Name="Thumb" Background="{TemplateBinding Foreground}" Style="{DynamicResource SScrollThumbs}" />
                            </Track.Thumb>
                            <Track.IncreaseRepeatButton>
                                <RepeatButton x:Name="PageUp" Command="ScrollBar.PageDownCommand" Opacity="0" Focusable="false" />
                            </Track.IncreaseRepeatButton>
                            <Track.DecreaseRepeatButton>
                                <RepeatButton x:Name="PageDown" Command="ScrollBar.PageUpCommand" Opacity="0" Focusable="false" />
                            </Track.DecreaseRepeatButton>
                        </Track>
                    </Grid>

                    <ControlTemplate.Triggers>
                        <Trigger SourceName="Thumb" Property="IsMouseOver" Value="true">
                            <Setter Value="{DynamicResource ButtonSelectBrush}" TargetName="Thumb" Property="Background" />
                        </Trigger>
                        <Trigger SourceName="Thumb" Property="IsDragging" Value="true">
                            <Setter Value="{DynamicResource DarkBrush}" TargetName="Thumb" Property="Background" />
                        </Trigger>

                        <Trigger Property="IsEnabled" Value="false">
                            <Setter TargetName="Thumb" Property="Visibility" Value="Collapsed" />
                        </Trigger>
                        <Trigger Property="Orientation" Value="Horizontal">
                            <Setter TargetName="GridRoot" Property="LayoutTransform">
                                <Setter.Value>
                                    <RotateTransform Angle="-90" />
                                </Setter.Value>
                            </Setter>
                            <Setter TargetName="PART_Track" Property="LayoutTransform">
                                <Setter.Value>
                                    <RotateTransform Angle="-90" />
                                </Setter.Value>
                            </Setter>
                            <Setter Property="Width" Value="Auto" />
                            <Setter Property="Height" Value="12" />
                            <Setter TargetName="Thumb" Property="Tag" Value="Horizontal" />
                            <Setter TargetName="PageDown" Property="Command" Value="ScrollBar.PageLeftCommand" />
                            <Setter TargetName="PageUp" Property="Command" Value="ScrollBar.PageRightCommand" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--Connectors-->
    
    <clr:Int32 x:Key="connector_end_dot_size">6</clr:Int32>
    <clr:Int32 x:Key="connector_stroke_thickness">2</clr:Int32>
    <clr:Double x:Key="connector_stroke_opacity">0.6</clr:Double>
    <clr:Double x:Key="connector_bezier_offset">20.0</clr:Double>

</ResourceDictionary>