; Script generated by the Inno Setup Script Wizard.
; SEE THE DOCUMENTATION FOR DETAILS ON CREATING INNO SETUP SCRIPT FILES!
[Setup]
AppName=Dynamo
AppPublisher=Dynamo
AppID={{6B5FA6CA-9D69-46CF-B517-1F90C64F7C0B}
AppCopyright=
AppPublisherURL=http://www.dynamobim.org
AppSupportURL=http://www.dynamobim.org
AppUpdatesURL=http://www.dynamobim.org
AppVersion=0.7.2
VersionInfoVersion=0.7.2
VersionInfoCompany=Dynamo 
VersionInfoDescription=Dynamo 0.7.2
VersionInfoTextVersion=Dynamo 0.7.2
VersionInfoCopyright=
DefaultDirName={pf64}\Dynamo 0.7
DefaultGroupName=Dynamo
OutputDir=Installers
OutputBaseFilename=InstallDynamo0.7.2
SetupIconFile=Extra\DynamoInstaller.ico
Compression=lzma
SolidCompression=true
RestartIfNeededByRun=false
FlatComponentsList=false
ShowLanguageDialog=auto
DirExistsWarning=no
UninstallFilesDir={app}\Uninstall
UninstallDisplayIcon={app}\DynamoInstaller.ico
UninstallDisplayName=Dynamo 0.7.2
UsePreviousAppDir=no

[Dirs]
Name: "{app}\libg_219"
Name: "{app}\libg_220"
Name: "{app}\nodes"

[Components]
Name: "DynamoCore"; Description: "Dynamo Core Functionality"; Types: full compact custom; Flags: fixed
Name: "DynamoForRevit2014"; Description: "Dynamo For Revit 2014"; Types: full compact custom;
Name: "DynamoForRevit2015"; Description: "Dynamo For Revit 2015"; Types: full compact custom;
Name: "DynamoForRevit2016"; Description: "Dynamo For Revit 2016"; Types: full compact custom;
Name: "DynamoForVasariBeta3"; Description: "Dynamo For Vasari Beta 3"; Types: full compact custom; 
Name: "DynamoTrainingFiles"; Description: "Dynamo Training Files"; Types: full

[Files]
;Needed before installation guaranteed to be complete
Source: "Extra\RevitInstallDetective.exe"; Flags: dontcopy
Source: "Extra\RevitAddinUtility.dll"; Flags: dontcopy
Source: "Extra\DynamoAddinGenerator.exe"; Flags: dontcopy

;Core Files
Source: temp\bin\*; DestDir: {app}; Flags: ignoreversion overwritereadonly; Components: DynamoCore
Source: temp\bin\nodes\*; DestDir: {app}\nodes; Flags: ignoreversion overwritereadonly; Components: DynamoCore
Source: Extra\README.txt; DestDir: {app}; Flags: isreadme ignoreversion overwritereadonly; Components: DynamoCore
Source: Extra\IronPython-2.7.3.msi; DestDir: {tmp}; Flags: deleteafterinstall;

;Revit 2014 / Vasari Beta 3
Source: temp\bin\Revit_2014\*; DestDir: {app}\Revit_2014; Flags:skipifsourcedoesntexist ignoreversion overwritereadonly; Components: DynamoForRevit2014 DynamoForVasariBeta3
Source: temp\bin\Revit_2014\nodes\*; DestDir: {app}\Revit_2014\nodes; Flags:skipifsourcedoesntexist ignoreversion overwritereadonly; Components: DynamoForRevit2014 DynamoForVasariBeta3

;Revit 2015 / Revit 2016
Source: temp\bin\Revit_2015\*; DestDir: {app}\Revit_2015; Flags:skipifsourcedoesntexist ignoreversion overwritereadonly; Components: DynamoForRevit2015 DynamoForRevit2016
Source: temp\bin\Revit_2015\nodes\*; DestDir: {app}\Revit_2015\nodes; Flags:skipifsourcedoesntexist ignoreversion overwritereadonly; Components: DynamoForRevit2015 DynamoForRevit2016

;AddinGenerator
Source: Extra\DynamoAddinGenerator.exe; DestDir: {app}; Flags: ignoreversion overwritereadonly uninsneveruninstall; Components: DynamoCore
Source: Extra\RevitAddinUtility.dll; DestDir: {app}; Flags: ignoreversion overwritereadonly uninsneveruninstall; Components: DynamoForRevit2015 DynamoForRevit2014 DynamoForRevit2016 DynamoForVasariBeta3

;LibG
Source: temp\bin\LibG_219\*; DestDir: {app}\libg_219; Flags: ignoreversion overwritereadonly; Components: DynamoCore
Source: temp\bin\LibG_220\*; DestDir: {app}\libg_220; Flags: ignoreversion overwritereadonly; Components: DynamoCore

;Icon
Source: Extra\DynamoInstaller.ico; DestDir: {app}; Flags: ignoreversion overwritereadonly;

;UI
Source: temp\bin\UI\*; DestDir: {app}\UI; Flags: ignoreversion overwritereadonly recursesubdirs; Components: DynamoCore

;Samples
Source: temp\Samples\*.*; DestDir: {commonappdata}\Dynamo\0.7\samples; Flags: ignoreversion overwritereadonly recursesubdirs; Components: DynamoTrainingFiles

;Other Custom Nodes
Source: temp\definitions\*; DestDir: {commonappdata}\Dynamo\0.7\definitions; Flags: ignoreversion overwritereadonly recursesubdirs; Components: DynamoCore

[UninstallDelete]
Type: files; Name: "{commonappdata}\Autodesk\Revit\Addins\2014\Dynamo071.addin"
Type: files; Name: "{commonappdata}\Autodesk\Revit\Addins\2015\Dynamo071.addin"
Type: files; Name: "{commonappdata}\Autodesk\Vasari\Addins\2014\Dynamo071.addin"
Type: files; Name: "{commonappdata}\Autodesk\Revit\Addins\2014\DynamoVersionSelector.addin"
Type: files; Name: "{commonappdata}\Autodesk\Vasari\Addins\2014\DynamoVersionSelector.addin"
Type: filesandordirs; Name: {app}\libg_219
Type: filesandordirs; Name: {app}\libg_220

[Run]
Filename: "msiexec.exe"; Parameters: "/i ""{tmp}\IronPython-2.7.3.msi"" /qn"; WorkingDir: {tmp};
Filename: "{tmp}\DynamoAddinGenerator.exe"; Parameters: """{app}"""; Flags: runhidden;

[UninstallRun]
Filename: "{app}\DynamoAddinGenerator.exe"; Flags: runhidden;

[Icons]
Name: "{group}\Dynamo"; Filename: "{app}\DynamoSandbox.exe"

[Code]
var
silentFlag : String;

{ HANDLE INSTALL PROCESS STEPS }

// added custom uninstall trigger based on http://stackoverflow.com/questions/2000296/innosetup-how-to-automatically-uninstall-previous-installed-version
/////////////////////////////////////////////////////////////////////

function GetSilentParam(Param: String): String;
begin
  Result := silentFlag;
end;

function GetUninstallStringForEXE(): String;
var
  sUnInstPath: String;
  sUnInstallString: String;
begin
  sUnInstallString := '';

  sUnInstPath := ExpandConstant('Software\Microsoft\Windows\CurrentVersion\Uninstall\{#emit SetupSetting("AppId")}_is1')
  if not RegQueryStringValue(HKLM, sUnInstPath, 'UninstallString', sUnInstallString) then
    RegQueryStringValue(HKCU, sUnInstPath, 'UninstallString', sUnInstallString)

  Result := sUnInstallString;
end;

function GetUninstallStringForMSI() : String;
var 
  sUnInstPath: String;
  sUnInstallString: String;
begin
  sUnInstallString := '';

  sUnInstPath := ExpandConstant('Software\Microsoft\Windows\CurrentVersion\Uninstall\{#emit SetupSetting("AppId")}')
  if not RegQueryStringValue(HKLM64, sUnInstPath, 'UninstallString', sUnInstallString) then
    RegQueryStringValue(HKCU64, sUnInstPath, 'UninstallString', sUnInstallString);

  Result := sUnInstallString;
end;

function RevitInstallationExists(Version: String): Boolean;
var 
  ResultCode: Integer;
begin
  if Exec(ExpandConstant('{tmp}\RevitInstallDetective.exe'), Version, '', SW_HIDE, ewWaitUntilTerminated, ResultCode) then
    Result := (ResultCode = 0)
  else
    MsgBox('RevitInstallDetective failed!' + #13#10 + SysErrorMessage(ResultCode), mbError, MB_OK);
end;

function InitSetupFlags(): Integer;
var
j: Cardinal;
begin
  Result := 0;
  for j := 1 to ParamCount do
    begin
      if (CompareText(ParamStr(j),'/verysilent') = 0)  then
        silentFlag := '/VERYSILENT'
      else if (CompareText(ParamStr(j),'/silent') = 0)  then
        silentFlag := '/SILENT'
      else
        silentFlag := '';   
    end;
end;

function InitializeSetup(): Boolean;
begin
  InitSetupFlags();
  // we'll need these files to check for a revit installation
  ExtractTemporaryFile('RevitInstallDetective.exe');
  ExtractTemporaryFile('RevitAddinUtility.dll');
  ExtractTemporaryFile('DynamoAddinGenerator.exe');

  // check if there is a valid revit installation on this machine, if not - fail
  if (RevitInstallationExists('Revit2016') or RevitInstallationExists('Revit2015') or RevitInstallationExists('Revit2014') or RevitInstallationExists('VasariBeta3')) then
    begin
    result := true;
    end
  else
    begin
    MsgBox('Dynamo requires an installation of Revit 2014, Revit 2015, Revit 2016, or Vasari Beta 3 in order to proceed!', mbCriticalError, MB_OK);
    result := false;
    end;
end;

function InitializeUninstall(): Boolean;
begin
  InitSetupFlags();
  Result := True;
end;

/////////////////////////////////////////////////////////////////////
function IsEXEInstalled(): Boolean;
begin
  Result := (GetUninstallStringForEXE() <> '');
end;

function IsMSIInstalled(): Boolean;
begin
  Result := (GetUninstallStringForMSI() <> '');
end;

/////////////////////////////////////////////////////////////////////
function UnInstallOldEXE(sUnInstallString: String): Integer;
var
  iResultCode: Integer;
begin
// Return Values:
// 1 - uninstall string is empty
// 2 - error executing the UnInstallString
// 3 - successfully executed the UnInstallString

  // default return value
  Result := 0;

  if sUnInstallString <> '' then begin
    sUnInstallString := RemoveQuotes(sUnInstallString);
    if Exec(sUnInstallString, '/SILENT /NORESTART /SUPPRESSMSGBOXES','', SW_HIDE, ewWaitUntilTerminated, iResultCode) then
      Result := 3
    else
      Result := 2;
  end else
    Result := 1;
end;

function UnInstallOldMSI(sUnInstallString: String): Integer;
var
  iResultCode: Integer;
begin
  // default return value
  Result := 0;

  if sUnInstallString <> '' then begin
    sUnInstallString := RemoveQuotes(sUnInstallString);
    if Exec('MsiExec.exe', '/x{#emit StringChange(SetupSetting("AppId"),'{{','{')} /quiet','', SW_SHOWNORMAL, ewWaitUntilTerminated, iResultCode) then
      Result := 3
    else
      Result := 2;
  end else
    Result := 1;
end;

// check if the components exists, if they do enable the component for installation
procedure CurPageChanged(CurPageID: Integer);
begin
  if CurPageID = wpSelectComponents then
	if not RevitInstallationExists('Revit2014') then
    begin
      WizardForm.ComponentsList.Checked[1] := False;
      WizardForm.ComponentsList.ItemEnabled[1] := False;
    end;
  if not RevitInstallationExists('Revit2015') then
    begin
      WizardForm.ComponentsList.Checked[2] := False;
      WizardForm.ComponentsList.ItemEnabled[2] := False;
    end;
  if not RevitInstallationExists('Revit2016') then
    begin
      WizardForm.ComponentsList.Checked[3] := False;
      WizardForm.ComponentsList.ItemEnabled[3] := False;
    end;
	if not RevitInstallationExists('VasariBeta3') then
    begin
      WizardForm.ComponentsList.Checked[4] := False;
      WizardForm.ComponentsList.ItemEnabled[4] := False;
    end;
end;

function UpdateAddins() : Integer;
var
    iResultCode: Integer;
begin
  Result := 0;
  if Exec(ExpandConstant('{tmp}\DynamoAddinGenerator.exe'), '', '', SW_HIDE, ewWaitUntilTerminated, iResultCode) then
    Result := 0
  else
    Result := 1
end;

function RemoveRegistryKeys(key : String) : Boolean;
begin
  Result := True;
  if RegKeyExists(HKEY_CURRENT_USER, key) then
    Result := RegDeleteKeyIncludingSubkeys(HKEY_CURRENT_USER, key);
  else if RegKeyExists(HKEY_LOCAL_MACHINE, key) then
    Result := RegDeleteKeyIncludingSubkeys(HKEY_LOCAL_MACHINE, key);
end;

procedure CurStepChanged(CurStep: TSetupStep);
var 
  sUninstallString: String;
begin
  if (CurStep=ssInstall) then
    begin
      if (IsEXEInstalled()) then
        begin
          sUninstallString := GetUninstallStringForEXE()
          UnInstallOldEXE(sUninstallString)
        end;
      if (IsMSIInstalled()) then
        begin
          sUninstallString := GetUninstallStringForMSI()
          UnInstallOldMSI(sUninstallString)
        end;
    end;
end;

procedure CurUninstallStepChanged(CurUninstallStep: TUninstallStep);
begin
   if (CurUninstallStep=usPostUninstall) then
    begin
        UpdateAddins();
        //If it's not a silent uninstall, Remove the instrumentation registry entry.
        if(silentFlag = '') then
          RemoveRegistryKeys('Software\DynamoUXG');
    end;
end;

