<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>ICSharpCode.AvalonEdit</name>
  </assembly>
  <members>
    <member name="T:ICSharpCode.AvalonEdit.AvalonEditCommands">
      <summary>
            Custom commands for AvalonEdit.
            </summary>
    </member>
    <member name="F:ICSharpCode.AvalonEdit.AvalonEditCommands.ConvertLeadingSpacesToTabs">
      <summary>
            Converts leading spaces to tabs in the selected lines (or the whole document if the selection is empty).
            </summary>
    </member>
    <member name="F:ICSharpCode.AvalonEdit.AvalonEditCommands.ConvertLeadingTabsToSpaces">
      <summary>
            Converts leading tabs to spaces in the selected lines (or the whole document if the selection is empty).
            </summary>
    </member>
    <member name="F:ICSharpCode.AvalonEdit.AvalonEditCommands.ConvertSpacesToTabs">
      <summary>
            Converts spaces to tabs in the selected text.
            </summary>
    </member>
    <member name="F:ICSharpCode.AvalonEdit.AvalonEditCommands.ConvertTabsToSpaces">
      <summary>
            Converts tabs to spaces in the selected text.
            </summary>
    </member>
    <member name="F:ICSharpCode.AvalonEdit.AvalonEditCommands.ConvertToLowercase">
      <summary>
            Converts the selected text to lower case.
            </summary>
    </member>
    <member name="F:ICSharpCode.AvalonEdit.AvalonEditCommands.ConvertToTitleCase">
      <summary>
            Converts the selected text to title case.
            </summary>
    </member>
    <member name="F:ICSharpCode.AvalonEdit.AvalonEditCommands.ConvertToUppercase">
      <summary>
            Converts the selected text to upper case.
            </summary>
    </member>
    <member name="F:ICSharpCode.AvalonEdit.AvalonEditCommands.DeleteLine">
      <summary>
            Deletes the current line.
            The default shortcut is Ctrl+D.
            </summary>
    </member>
    <member name="F:ICSharpCode.AvalonEdit.AvalonEditCommands.IndentSelection">
      <summary>
            Runs the IIndentationStrategy on the selected lines (or the whole document if the selection is empty).
            </summary>
    </member>
    <member name="F:ICSharpCode.AvalonEdit.AvalonEditCommands.InvertCase">
      <summary>
            Inverts the case of the selected text.
            </summary>
    </member>
    <member name="F:ICSharpCode.AvalonEdit.AvalonEditCommands.RemoveLeadingWhitespace">
      <summary>
            Removes leading whitespace from the selected lines (or the whole document if the selection is empty).
            </summary>
    </member>
    <member name="F:ICSharpCode.AvalonEdit.AvalonEditCommands.RemoveTrailingWhitespace">
      <summary>
            Removes trailing whitespace from the selected lines (or the whole document if the selection is empty).
            </summary>
    </member>
    <member name="T:ICSharpCode.AvalonEdit.ITextEditorComponent">
      <summary>
            Represents a text editor control (<see cref="T:ICSharpCode.AvalonEdit.TextEditor" />, <see cref="T:ICSharpCode.AvalonEdit.Editing.TextArea" />
            or <see cref="T:ICSharpCode.AvalonEdit.Rendering.TextView" />).
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.ITextEditorComponent.Document">
      <summary>
            Gets the document being edited.
            </summary>
    </member>
    <member name="E:ICSharpCode.AvalonEdit.ITextEditorComponent.DocumentChanged">
      <summary>
            Occurs when the Document property changes (when the text editor is connected to another
            document - not when the document content changes).
            </summary>
    </member>
    <member name="E:ICSharpCode.AvalonEdit.ITextEditorComponent.OptionChanged">
      <summary>
            Occurs when the Options property changes, or when an option inside the current option list
            changes.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.ITextEditorComponent.Options">
      <summary>
            Gets the options of the text editor.
            </summary>
    </member>
    <member name="T:ICSharpCode.AvalonEdit.TextEditor">
      <summary>
            The text editor control.
            Contains a scrollable TextArea.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.TextEditor.#ctor">
      <summary>
            Creates a new TextEditor instance.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.TextEditor.#ctor(ICSharpCode.AvalonEdit.Editing.TextArea)">
      <summary>
            Creates a new TextEditor instance.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.TextEditor.AppendText(System.String)">
      <summary>
            Appends text to the end of the document.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.TextEditor.BeginChange">
      <summary>
            Begins a group of document changes.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.TextEditor.CanRedo">
      <summary>
            Gets if the most recent undone command can be redone.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.TextEditor.CanUndo">
      <summary>
            Gets if the most recent command can be undone.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.TextEditor.CaretOffset">
      <summary>
            Gets/sets the caret position.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.TextEditor.Clear">
      <summary>
            Clears the text.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.TextEditor.Copy">
      <summary>
            Copies the current selection to the clipboard.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.TextEditor.CreateColorizer(ICSharpCode.AvalonEdit.Highlighting.IHighlightingDefinition)">
      <summary>
            Creates the highlighting colorizer for the specified highlighting definition.
            Allows derived classes to provide custom colorizer implementations for special highlighting definitions.
            </summary>
      <returns></returns>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.TextEditor.Cut">
      <summary>
            Removes the current selection and copies it to the clipboard.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.TextEditor.DeclareChangeBlock">
      <summary>
            Begins a group of document changes and returns an object that ends the group of document
            changes when it is disposed.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.TextEditor.Document">
      <summary>
            Gets/Sets the document displayed by the text editor.
            This is a dependency property.
            </summary>
    </member>
    <member name="E:ICSharpCode.AvalonEdit.TextEditor.DocumentChanged">
      <summary>
            Occurs when the document property has changed.
            </summary>
    </member>
    <member name="F:ICSharpCode.AvalonEdit.TextEditor.DocumentProperty">
      <summary>
            Document property.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.TextEditor.Encoding">
      <summary>
            Gets/sets the encoding used when the file is saved.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.TextEditor.EndChange">
      <summary>
            Ends the current group of document changes.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.TextEditor.ExtentHeight">
      <summary>
            Gets the vertical size of the document.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.TextEditor.ExtentWidth">
      <summary>
            Gets the horizontal size of the current document region.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.TextEditor.GetPositionFromPoint(System.Windows.Point)">
      <summary>
            Gets the text view position from a point inside the editor.
            </summary>
      <param name="point">The position, relative to top left
            corner of TextEditor control</param>
      <returns>The text view position, or null if the point is outside the document.</returns>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.TextEditor.HorizontalOffset">
      <summary>
            Gets the horizontal scroll position.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.TextEditor.HorizontalScrollBarVisibility">
      <summary>
            Gets/Sets the horizontal scroll bar visibility.
            </summary>
    </member>
    <member name="F:ICSharpCode.AvalonEdit.TextEditor.HorizontalScrollBarVisibilityProperty">
      <summary>
            Dependency property for <see cref="P:ICSharpCode.AvalonEdit.TextEditor.HorizontalScrollBarVisibility" /></summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.TextEditor.IsModified">
      <summary>
            Gets/Sets the 'modified' flag.
            </summary>
    </member>
    <member name="F:ICSharpCode.AvalonEdit.TextEditor.IsModifiedProperty">
      <summary>
            Dependency property for <see cref="P:ICSharpCode.AvalonEdit.TextEditor.IsModified" /></summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.TextEditor.IsReadOnly">
      <summary>
            Specifies whether the user can change the text editor content.
            Setting this property will replace the
            <see cref="P:ICSharpCode.AvalonEdit.Editing.TextArea.ReadOnlySectionProvider">TextArea.ReadOnlySectionProvider</see>.
            </summary>
    </member>
    <member name="F:ICSharpCode.AvalonEdit.TextEditor.IsReadOnlyProperty">
      <summary>
            IsReadOnly dependency property.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.TextEditor.LineCount">
      <summary>
            Gets the number of lines in the document.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.TextEditor.LineDown">
      <summary>
            Scrolls one line down.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.TextEditor.LineLeft">
      <summary>
            Scrolls to the left.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.TextEditor.LineNumbersForeground">
      <summary>
            Gets/sets the Brush used for displaying the foreground color of line numbers.
            </summary>
    </member>
    <member name="F:ICSharpCode.AvalonEdit.TextEditor.LineNumbersForegroundProperty">
      <summary>
            LineNumbersForeground dependency property.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.TextEditor.LineRight">
      <summary>
            Scrolls to the right.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.TextEditor.LineUp">
      <summary>
            Scrolls one line up.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.TextEditor.Load(System.IO.Stream)">
      <summary>
            Loads the text from the stream, auto-detecting the encoding.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.TextEditor.Load(System.String)">
      <summary>
            Loads the text from the stream, auto-detecting the encoding.
            </summary>
    </member>
    <member name="E:ICSharpCode.AvalonEdit.TextEditor.MouseHover">
      <summary>
            Occurs when the mouse has hovered over a fixed location for some time.
            </summary>
    </member>
    <member name="F:ICSharpCode.AvalonEdit.TextEditor.MouseHoverEvent">
      <summary>
            The MouseHover event.
            </summary>
    </member>
    <member name="E:ICSharpCode.AvalonEdit.TextEditor.MouseHoverStopped">
      <summary>
            Occurs when the mouse had previously hovered but now started moving again.
            </summary>
    </member>
    <member name="F:ICSharpCode.AvalonEdit.TextEditor.MouseHoverStoppedEvent">
      <summary>
            The MouseHoverStopped event.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.TextEditor.OnApplyTemplate">
      <summary>
            Is called after the template was applied.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.TextEditor.OnCreateAutomationPeer">
      <summary>Returns class-specific <see cref="T:System.Windows.Automation.Peers.AutomationPeer" /> implementations for the Windows Presentation Foundation (WPF) infrastructure.</summary>
      <returns>The type-specific <see cref="T:System.Windows.Automation.Peers.AutomationPeer" /> implementation.</returns>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.TextEditor.OnDocumentChanged(System.EventArgs)">
      <summary>
            Raises the <see cref="E:ICSharpCode.AvalonEdit.TextEditor.DocumentChanged" /> event.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.TextEditor.OnGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Keyboard.GotKeyboardFocus" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.KeyboardFocusChangedEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.TextEditor.OnOptionChanged(System.ComponentModel.PropertyChangedEventArgs)">
      <summary>
            Raises the <see cref="E:ICSharpCode.AvalonEdit.TextEditor.OptionChanged" /> event.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.TextEditor.OnTextChanged(System.EventArgs)">
      <summary>
            Raises the <see cref="E:ICSharpCode.AvalonEdit.TextEditor.TextChanged" /> event.
            </summary>
    </member>
    <member name="E:ICSharpCode.AvalonEdit.TextEditor.OptionChanged">
      <summary>
            Occurs when a text editor option has changed.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.TextEditor.Options">
      <summary>
            Gets/Sets the options currently used by the text editor.
            </summary>
    </member>
    <member name="F:ICSharpCode.AvalonEdit.TextEditor.OptionsProperty">
      <summary>
            Options property.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.TextEditor.PageDown">
      <summary>
            Scrolls one page down.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.TextEditor.PageLeft">
      <summary>
            Scrolls one page left.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.TextEditor.PageRight">
      <summary>
            Scrolls one page right.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.TextEditor.PageUp">
      <summary>
            Scrolls one page up.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.TextEditor.Paste">
      <summary>
            Pastes the clipboard content.
            </summary>
    </member>
    <member name="E:ICSharpCode.AvalonEdit.TextEditor.PreviewMouseHover">
      <summary>
            Occurs when the mouse has hovered over a fixed location for some time.
            </summary>
    </member>
    <member name="F:ICSharpCode.AvalonEdit.TextEditor.PreviewMouseHoverEvent">
      <summary>
            The PreviewMouseHover event.
            </summary>
    </member>
    <member name="E:ICSharpCode.AvalonEdit.TextEditor.PreviewMouseHoverStopped">
      <summary>
            Occurs when the mouse had previously hovered but now started moving again.
            </summary>
    </member>
    <member name="F:ICSharpCode.AvalonEdit.TextEditor.PreviewMouseHoverStoppedEvent">
      <summary>
            The PreviewMouseHoverStopped event.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.TextEditor.ReceiveWeakEvent(System.Type,System.Object,System.EventArgs)">
      <summary>Receives events from the centralized event manager.</summary>
      <param name="managerType">The type of the <see cref="T:System.Windows.WeakEventManager" /> calling this method.</param>
      <param name="sender">Object that originated the event.</param>
      <param name="e">Event data.</param>
      <returns>true if the listener handled the event. It is considered an error by the <see cref="T:System.Windows.WeakEventManager" /> handling in WPF to register a listener for an event that the listener does not handle. Regardless, the method should return false if it receives an event that it does not recognize or handle.</returns>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.TextEditor.Redo">
      <summary>
            Redoes the most recent undone command.
            </summary>
      <returns>True is the redo operation was successful, false is the redo stack is empty.</returns>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.TextEditor.Save(System.IO.Stream)">
      <summary>
            Saves the text to the stream.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.TextEditor.Save(System.String)">
      <summary>
            Saves the text to the file.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.TextEditor.ScrollTo(System.Int32,System.Int32)">
      <summary>
            Scrolls to the specified line/column.
            This method requires that the TextEditor was already assigned a size (WPF layout must have run prior).
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.TextEditor.ScrollToEnd">
      <summary>
            Scrolls to the end of the document.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.TextEditor.ScrollToHome">
      <summary>
            Scrolls to the start of the document.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.TextEditor.ScrollToHorizontalOffset(System.Double)">
      <summary>
            Scrolls to the specified position in the document.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.TextEditor.ScrollToLine(System.Int32)">
      <summary>
            Scrolls to the specified line.
            This method requires that the TextEditor was already assigned a size (WPF layout must have run prior).
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.TextEditor.ScrollToVerticalOffset(System.Double)">
      <summary>
            Scrolls to the specified position in the document.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.TextEditor.Select(System.Int32,System.Int32)">
      <summary>
            Selects the specified text section.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.TextEditor.SelectAll">
      <summary>
            Selects the entire text.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.TextEditor.SelectedText">
      <summary>
            Gets/Sets the selected text.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.TextEditor.SelectionLength">
      <summary>
            Gets/sets the length of the selection.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.TextEditor.SelectionStart">
      <summary>
            Gets/sets the start position of the selection.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.TextEditor.ShowLineNumbers">
      <summary>
            Specifies whether line numbers are shown on the left to the text view.
            </summary>
    </member>
    <member name="F:ICSharpCode.AvalonEdit.TextEditor.ShowLineNumbersProperty">
      <summary>
            ShowLineNumbers dependency property.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.TextEditor.SyntaxHighlighting">
      <summary>
            Gets/sets the syntax highlighting definition used to colorize the text.
            </summary>
    </member>
    <member name="F:ICSharpCode.AvalonEdit.TextEditor.SyntaxHighlightingProperty">
      <summary>
            The <see cref="P:ICSharpCode.AvalonEdit.TextEditor.SyntaxHighlighting" /> property.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.TextEditor.Text">
      <summary>
            Gets/Sets the text of the current document.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.TextEditor.TextArea">
      <summary>
            Gets the text area.
            </summary>
    </member>
    <member name="E:ICSharpCode.AvalonEdit.TextEditor.TextChanged">
      <summary>
            Occurs when the Text property changes.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.TextEditor.Undo">
      <summary>
            Undoes the most recent command.
            </summary>
      <returns>True is the undo operation was successful, false is the undo stack is empty.</returns>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.TextEditor.VerticalOffset">
      <summary>
            Gets the vertical scroll position.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.TextEditor.VerticalScrollBarVisibility">
      <summary>
            Gets/Sets the vertical scroll bar visibility.
            </summary>
    </member>
    <member name="F:ICSharpCode.AvalonEdit.TextEditor.VerticalScrollBarVisibilityProperty">
      <summary>
            Dependency property for <see cref="P:ICSharpCode.AvalonEdit.TextEditor.VerticalScrollBarVisibility" /></summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.TextEditor.ViewportHeight">
      <summary>
            Gets the horizontal size of the viewport.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.TextEditor.ViewportWidth">
      <summary>
            Gets the horizontal size of the viewport.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.TextEditor.WordWrap">
      <summary>
            Specifies whether the text editor uses word wrapping.
            </summary>
    </member>
    <member name="F:ICSharpCode.AvalonEdit.TextEditor.WordWrapProperty">
      <summary>
            Word wrap dependency property.
            </summary>
    </member>
    <member name="T:ICSharpCode.AvalonEdit.TextEditorAutomationPeer">
      <summary>
            Exposes <see cref="P:ICSharpCode.AvalonEdit.TextEditorAutomationPeer.TextEditor" /> to automation.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.TextEditorAutomationPeer.#ctor(ICSharpCode.AvalonEdit.TextEditor)">
      <summary>
            Creates a new TextEditorAutomationPeer instance.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.TextEditorAutomationPeer.GetPattern(System.Windows.Automation.Peers.PatternInterface)">
      <summary>Gets the control pattern for the <see cref="T:System.Windows.UIElement" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.UIElementAutomationPeer" />.</summary>
      <param name="patternInterface">A value from the enumeration.</param>
      <returns>An object that implements the <see cref="T:System.Windows.Automation.Provider.ISynchronizedInputProvider" /> interface if <paramref name="patternInterface" /> is <see cref="F:System.Windows.Automation.Peers.PatternInterface.SynchronizedInput" />; otherwise, null.</returns>
    </member>
    <member name="T:ICSharpCode.AvalonEdit.TextEditorOptions">
      <summary>
            A container for the text editor options.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.TextEditorOptions.#ctor">
      <summary>
            Initializes an empty instance of TextEditorOptions.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.TextEditorOptions.#ctor(ICSharpCode.AvalonEdit.TextEditorOptions)">
      <summary>
            Initializes a new instance of TextEditorOptions by copying all values
            from <paramref name="options" /> to the new instance.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.TextEditorOptions.AllowScrollBelowDocument">
      <summary>
            Gets/Sets whether the user can scroll below the bottom of the document.
            The default value is false; but it a good idea to set this property to true when using folding.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.TextEditorOptions.ColumnRulerPosition">
      <summary>
            Gets/Sets where the column ruler should be shown.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.TextEditorOptions.ConvertTabsToSpaces">
      <summary>
            Gets/Sets whether to use spaces for indentation instead of tabs.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.TextEditorOptions.CutCopyWholeLine">
      <summary>
            Gets/Sets whether copying without a selection copies the whole current line.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.TextEditorOptions.EnableEmailHyperlinks">
      <summary>
            Gets/Sets whether to enable clickable hyperlinks for e-mail addresses in the editor.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.TextEditorOptions.EnableHyperlinks">
      <summary>
            Gets/Sets whether to enable clickable hyperlinks in the editor.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.TextEditorOptions.EnableImeSupport">
      <summary>
            Gets/Sets whether the support for Input Method Editors (IME)
            for non-alphanumeric scripts (Chinese, Japanese, Korean, ...) is enabled.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.TextEditorOptions.EnableRectangularSelection">
      <summary>
            Enables rectangular selection (press ALT and select a rectangle)
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.TextEditorOptions.EnableTextDragDrop">
      <summary>
            Enable dragging text within the text area.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.TextEditorOptions.EnableVirtualSpace">
      <summary>
            Gets/Sets whether the user can set the caret behind the line ending
            (into "virtual space").
            Note that virtual space is always used (independent from this setting)
            when doing rectangle selections.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.TextEditorOptions.GetIndentationString(System.Int32)">
      <summary>
            Gets text required to indent from the specified <paramref name="column" /> to the next indentation level.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.TextEditorOptions.IndentationSize">
      <summary>
            Gets/Sets the width of one indentation unit.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.TextEditorOptions.IndentationString">
      <summary>
            Gets the text used for indentation.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.TextEditorOptions.InheritWordWrapIndentation">
      <summary>
            Gets/Sets whether the indentation is inherited from the first line when word-wrapping.
            The default value is true.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.TextEditorOptions.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
      <summary>
            Raises the PropertyChanged event.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.TextEditorOptions.OnPropertyChanged(System.String)">
      <summary>
            Raises the PropertyChanged event.
            </summary>
      <param name="propertyName">The name of the changed property.</param>
    </member>
    <member name="E:ICSharpCode.AvalonEdit.TextEditorOptions.PropertyChanged">
      <summary>Occurs when a property value changes.</summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.TextEditorOptions.RequireControlModifierForHyperlinkClick">
      <summary>
            Gets/Sets whether the user needs to press Control to click hyperlinks.
            The default value is true.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.TextEditorOptions.ShowBoxForControlCharacters">
      <summary>
            Gets/Sets whether to show a box with the hex code for control characters.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.TextEditorOptions.ShowColumnRuler">
      <summary>
            Gets/Sets whether the column ruler should be shown.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.TextEditorOptions.ShowEndOfLine">
      <summary>
            Gets/Sets whether to show ¶ at the end of lines.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.TextEditorOptions.ShowSpaces">
      <summary>
            Gets/Sets whether to show · for spaces.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.TextEditorOptions.ShowTabs">
      <summary>
            Gets/Sets whether to show » for tabs.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.TextEditorOptions.WordWrapIndentation">
      <summary>
            Gets/Sets the indentation used for all lines except the first when word-wrapping.
            The default value is 0.
            </summary>
    </member>
    <member name="T:ICSharpCode.AvalonEdit.TextEditorWeakEventManager">
      <summary>
            Contains weak event managers for <see cref="T:ICSharpCode.AvalonEdit.ITextEditorComponent" />.
            </summary>
    </member>
    <member name="T:ICSharpCode.AvalonEdit.TextEditorWeakEventManager.DocumentChanged">
      <summary>
            Weak event manager for the <see cref="E:ICSharpCode.AvalonEdit.ITextEditorComponent.DocumentChanged" /> event.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.TextEditorWeakEventManager.DocumentChanged.#ctor">
      <summary>Initializes a new instance of the <see cref="T:ICSharpCode.AvalonEdit.TextEditorWeakEventManager.DocumentChanged" /> class</summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.TextEditorWeakEventManager.DocumentChanged.StartListening(ICSharpCode.AvalonEdit.ITextEditorComponent)">
      <summary>
            Attaches the event handler.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.TextEditorWeakEventManager.DocumentChanged.StopListening(ICSharpCode.AvalonEdit.ITextEditorComponent)">
      <summary>
            Detaches the event handler.
            </summary>
    </member>
    <member name="T:ICSharpCode.AvalonEdit.TextEditorWeakEventManager.OptionChanged">
      <summary>
            Weak event manager for the <see cref="E:ICSharpCode.AvalonEdit.ITextEditorComponent.OptionChanged" /> event.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.TextEditorWeakEventManager.OptionChanged.#ctor">
      <summary>Initializes a new instance of the <see cref="T:ICSharpCode.AvalonEdit.TextEditorWeakEventManager.OptionChanged" /> class</summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.TextEditorWeakEventManager.OptionChanged.StartListening(ICSharpCode.AvalonEdit.ITextEditorComponent)">
      <summary>
            Attaches the event handler.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.TextEditorWeakEventManager.OptionChanged.StopListening(ICSharpCode.AvalonEdit.ITextEditorComponent)">
      <summary>
            Detaches the event handler.
            </summary>
    </member>
    <member name="T:ICSharpCode.AvalonEdit.TextViewPosition">
      <summary>
            Represents a text location with a visual column.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.TextViewPosition.#ctor(ICSharpCode.AvalonEdit.Document.TextLocation)">
      <summary>
            Creates a new TextViewPosition instance.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.TextViewPosition.#ctor(ICSharpCode.AvalonEdit.Document.TextLocation,System.Int32)">
      <summary>
            Creates a new TextViewPosition instance.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.TextViewPosition.#ctor(System.Int32,System.Int32)">
      <summary>
            Creates a new TextViewPosition instance.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.TextViewPosition.#ctor(System.Int32,System.Int32,System.Int32)">
      <summary>
            Creates a new TextViewPosition instance.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.TextViewPosition.Column">
      <summary>
            Gets/Sets the (text) column number.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.TextViewPosition.Equals(ICSharpCode.AvalonEdit.TextViewPosition)">
      <summary>
            Equality test.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.TextViewPosition.Equals(System.Object)">
      <summary>Indicates whether this instance and a specified object are equal.</summary>
      <param name="obj">Another object to compare to. </param>
      <returns>true if <paramref name="obj" /> and this instance are the same type and represent the same value; otherwise, false.</returns>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.TextViewPosition.GetHashCode">
      <summary>Returns the hash code for this instance.</summary>
      <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.TextViewPosition.Line">
      <summary>
            Gets/Sets the line number.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.TextViewPosition.Location">
      <summary>
            Gets/Sets Location.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.TextViewPosition.op_Equality(ICSharpCode.AvalonEdit.TextViewPosition,ICSharpCode.AvalonEdit.TextViewPosition)">
      <summary>
            Equality test.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.TextViewPosition.op_Implicit(ICSharpCode.AvalonEdit.TextViewPosition)~ICSharpCode.AvalonEdit.Document.TextLocation">
      <summary>
            Implicit conversion to <see cref="T:ICSharpCode.AvalonEdit.Document.TextLocation" />.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.TextViewPosition.op_Inequality(ICSharpCode.AvalonEdit.TextViewPosition,ICSharpCode.AvalonEdit.TextViewPosition)">
      <summary>
            Inequality test.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.TextViewPosition.ToString">
      <summary>Returns the fully qualified type name of this instance.</summary>
      <returns>A <see cref="T:System.String" /> containing a fully qualified type name.</returns>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.TextViewPosition.VisualColumn">
      <summary>
            Gets/Sets the visual column number.
            Can be -1 (meaning unknown visual column).
            </summary>
    </member>
    <member name="T:ICSharpCode.AvalonEdit.CodeCompletion.CompletionList">
      <summary>
            The listbox used inside the CompletionWindow, contains CompletionListBox.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.CodeCompletion.CompletionList.#ctor">
      <summary>Initializes a new instance of the <see cref="T:ICSharpCode.AvalonEdit.CodeCompletion.CompletionList" /> class</summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.CodeCompletion.CompletionList.CompletionData">
      <summary>
            Gets the list to which completion data can be added.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.CodeCompletion.CompletionList.EmptyTemplate">
      <summary>
            Content of EmptyTemplate will be shown when CompletionList contains no items.
            If EmptyTemplate is null, nothing will be shown.
            </summary>
    </member>
    <member name="F:ICSharpCode.AvalonEdit.CodeCompletion.CompletionList.EmptyTemplateProperty">
      <summary>
            Dependency property for <see cref="P:ICSharpCode.AvalonEdit.CodeCompletion.CompletionList.EmptyTemplate" />.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.CodeCompletion.CompletionList.HandleKey(System.Windows.Input.KeyEventArgs)">
      <summary>
            Handles a key press. Used to let the completion list handle key presses while the
            focus is still on the text editor.
            </summary>
    </member>
    <member name="E:ICSharpCode.AvalonEdit.CodeCompletion.CompletionList.InsertionRequested">
      <summary>
            Is raised when the completion list indicates that the user has chosen
            an entry to be completed.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.CodeCompletion.CompletionList.IsFiltering">
      <summary>
            If true, the CompletionList is filtered to show only matching items. Also enables search by substring.
            If false, enables the old behavior: no filtering, search by string.StartsWith.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.CodeCompletion.CompletionList.ListBox">
      <summary>
            Gets the list box.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.CodeCompletion.CompletionList.OnApplyTemplate">
      <summary>When overridden in a derived class, is invoked whenever application code or internal processes call <see cref="M:System.Windows.FrameworkElement.ApplyTemplate" />.</summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.CodeCompletion.CompletionList.OnKeyDown(System.Windows.Input.KeyEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Keyboard.KeyDown" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.KeyEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.CodeCompletion.CompletionList.OnMouseDoubleClick(System.Windows.Input.MouseButtonEventArgs)">
      <summary>Raises the <see cref="E:System.Windows.Controls.Control.MouseDoubleClick" /> routed event. </summary>
      <param name="e">The event data.</param>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.CodeCompletion.CompletionList.RequestInsertion(System.EventArgs)">
      <summary>
            Raises the InsertionRequested event.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.CodeCompletion.CompletionList.ScrollViewer">
      <summary>
            Gets the scroll viewer used in this list box.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.CodeCompletion.CompletionList.SelectedItem">
      <summary>
            Gets/Sets the selected item.
            </summary>
    </member>
    <member name="E:ICSharpCode.AvalonEdit.CodeCompletion.CompletionList.SelectionChanged">
      <summary>
            Occurs when the SelectedItem property changes.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.CodeCompletion.CompletionList.SelectItem(System.String)">
      <summary>
            Selects the best match, and filter the items if turned on using <see cref="P:ICSharpCode.AvalonEdit.CodeCompletion.CompletionList.IsFiltering" />.
            </summary>
    </member>
    <member name="T:ICSharpCode.AvalonEdit.CodeCompletion.CompletionListBox">
      <summary>
            The list box used inside the CompletionList.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.CodeCompletion.CompletionListBox.#ctor">
      <summary>Initializes a new instance of the <see cref="T:ICSharpCode.AvalonEdit.CodeCompletion.CompletionListBox" /> class</summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.CodeCompletion.CompletionListBox.CenterViewOn(System.Int32)">
      <summary>
            Centers the view on the item with the specified index.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.CodeCompletion.CompletionListBox.ClearSelection">
      <summary>
            Removes the selection.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.CodeCompletion.CompletionListBox.FirstVisibleItem">
      <summary>
            Gets the number of the first visible item.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.CodeCompletion.CompletionListBox.OnApplyTemplate">
      <summary>When overridden in a derived class, is invoked whenever application code or internal processes call <see cref="M:System.Windows.FrameworkElement.ApplyTemplate" />.</summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.CodeCompletion.CompletionListBox.SelectIndex(System.Int32)">
      <summary>
            Selects the item with the specified index and scrolls it into view.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.CodeCompletion.CompletionListBox.VisibleItemCount">
      <summary>
            Gets the number of visible items.
            </summary>
    </member>
    <member name="T:ICSharpCode.AvalonEdit.CodeCompletion.CompletionWindow">
      <summary>
            The code completion window.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.CodeCompletion.CompletionWindow.#ctor(ICSharpCode.AvalonEdit.Editing.TextArea)">
      <summary>
            Creates a new code completion window.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.CodeCompletion.CompletionWindow.CloseAutomatically">
      <summary>
            Gets/Sets whether the completion window should close automatically.
            The default value is true.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.CodeCompletion.CompletionWindow.CloseOnFocusLost">
      <summary>
            Gets whether the completion window should automatically close when the text editor looses focus.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.CodeCompletion.CompletionWindow.CloseWhenCaretAtBeginning">
      <summary>
            When this flag is set, code completion closes if the caret moves to the
            beginning of the allowed range. This is useful in Ctrl+Space and "complete when typing",
            but not in dot-completion.
            Has no effect if CloseAutomatically is false.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.CodeCompletion.CompletionWindow.CompletionList">
      <summary>
            Gets the completion list used in this completion window.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.CodeCompletion.CompletionWindow.DetachEvents">
      <summary>
            Detaches events from the text area.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.CodeCompletion.CompletionWindow.OnClosed(System.EventArgs)">
      <summary>Raises the <see cref="E:System.Windows.Window.Closed" /> event.</summary>
      <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.CodeCompletion.CompletionWindow.OnKeyDown(System.Windows.Input.KeyEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Keyboard.KeyDown" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.KeyEventArgs" /> that contains the event data.</param>
    </member>
    <member name="T:ICSharpCode.AvalonEdit.CodeCompletion.CompletionWindowBase">
      <summary>
            Base class for completion windows. Handles positioning the window at the caret.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.CodeCompletion.CompletionWindowBase.#ctor(ICSharpCode.AvalonEdit.Editing.TextArea)">
      <summary>
            Creates a new CompletionWindowBase.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.CodeCompletion.CompletionWindowBase.ActivateParentWindow">
      <summary>
            Activates the parent window.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.CodeCompletion.CompletionWindowBase.CloseOnFocusLost">
      <summary>
            Gets whether the completion window should automatically close when the text editor looses focus.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.CodeCompletion.CompletionWindowBase.DetachEvents">
      <summary>
            Detaches events from the text area.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.CodeCompletion.CompletionWindowBase.EndOffset">
      <summary>
            Gets/Sets the end of the text range in which the completion window stays open.
            This text portion is used to determine the text used to select an entry in the completion list by typing.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.CodeCompletion.CompletionWindowBase.ExpectInsertionBeforeStart">
      <summary>
            Gets/sets whether the completion window should expect text insertion at the start offset,
            which not go into the completion region, but before it.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.CodeCompletion.CompletionWindowBase.IsUp">
      <summary>
            Gets whether the window was opened above the current line.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.CodeCompletion.CompletionWindowBase.OnClosed(System.EventArgs)">
      <summary>Raises the <see cref="E:System.Windows.Window.Closed" /> event.</summary>
      <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.CodeCompletion.CompletionWindowBase.OnDeactivated(System.EventArgs)">
      <summary>Raises the <see cref="E:System.Windows.Window.Deactivated" /> event.</summary>
      <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.CodeCompletion.CompletionWindowBase.OnKeyDown(System.Windows.Input.KeyEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Keyboard.KeyDown" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.KeyEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.CodeCompletion.CompletionWindowBase.OnRenderSizeChanged(System.Windows.SizeChangedInfo)">
      <summary>Raises the <see cref="E:System.Windows.FrameworkElement.SizeChanged" /> event, using the specified information as part of the eventual event data. </summary>
      <param name="sizeInfo">Details of the old and new size involved in the change.</param>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.CodeCompletion.CompletionWindowBase.OnSourceInitialized(System.EventArgs)">
      <summary>Raises the <see cref="E:System.Windows.Window.SourceInitialized" /> event.</summary>
      <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.CodeCompletion.CompletionWindowBase.RaiseEventPair(System.Windows.UIElement,System.Windows.RoutedEvent,System.Windows.RoutedEvent,System.Windows.RoutedEventArgs)">
      <summary>
            Raises a tunnel/bubble event pair for a WPF control.
            </summary>
      <param name="target">The WPF control for which the event should be raised.</param>
      <param name="previewEvent">The tunneling event.</param>
      <param name="event">The bubbling event.</param>
      <param name="args">The event args to use.</param>
      <returns>The <see cref="P:System.Windows.RoutedEventArgs.Handled" /> value of the event args.</returns>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.CodeCompletion.CompletionWindowBase.SetPosition(ICSharpCode.AvalonEdit.TextViewPosition)">
      <summary>
            Positions the completion window at the specified position.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.CodeCompletion.CompletionWindowBase.StartOffset">
      <summary>
            Gets/Sets the start of the text range in which the completion window stays open.
            This text portion is used to determine the text used to select an entry in the completion list by typing.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.CodeCompletion.CompletionWindowBase.TextArea">
      <summary>
            Gets the parent TextArea.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.CodeCompletion.CompletionWindowBase.UpdatePosition">
      <summary>
            Updates the position of the CompletionWindow based on the parent TextView position and the screen working area.
            It ensures that the CompletionWindow is completely visible on the screen.
            </summary>
    </member>
    <member name="T:ICSharpCode.AvalonEdit.CodeCompletion.ICompletionData">
      <summary>
            Describes an entry in the <see cref="T:ICSharpCode.AvalonEdit.CodeCompletion.CompletionList" />.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.CodeCompletion.ICompletionData.Complete(ICSharpCode.AvalonEdit.Editing.TextArea,ICSharpCode.AvalonEdit.Document.ISegment,System.EventArgs)">
      <summary>
            Perform the completion.
            </summary>
      <param name="textArea">The text area on which completion is performed.</param>
      <param name="completionSegment">The text segment that was used by the completion window if
            the user types (segment between CompletionWindow.StartOffset and CompletionWindow.EndOffset).</param>
      <param name="insertionRequestEventArgs">The EventArgs used for the insertion request.
            These can be TextCompositionEventArgs, KeyEventArgs, MouseEventArgs, depending on how
            the insertion was triggered.</param>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.CodeCompletion.ICompletionData.Content">
      <summary>
            The displayed content. This can be the same as 'Text', or a WPF UIElement if
            you want to display rich content.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.CodeCompletion.ICompletionData.Description">
      <summary>
            Gets the description.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.CodeCompletion.ICompletionData.Image">
      <summary>
            Gets the image.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.CodeCompletion.ICompletionData.Priority">
      <summary>
            Gets the priority. This property is used in the selection logic. You can use it to prefer selecting those items
            which the user is accessing most frequently.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.CodeCompletion.ICompletionData.Text">
      <summary>
            Gets the text. This property is used to filter the list of visible elements.
            </summary>
    </member>
    <member name="T:ICSharpCode.AvalonEdit.CodeCompletion.InsightWindow">
      <summary>
            A popup-like window that is attached to a text segment.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.CodeCompletion.InsightWindow.#ctor(ICSharpCode.AvalonEdit.Editing.TextArea)">
      <summary>
            Creates a new InsightWindow.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.CodeCompletion.InsightWindow.CloseAutomatically">
      <summary>
            Gets/Sets whether the insight window should close automatically.
            The default value is true.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.CodeCompletion.InsightWindow.CloseOnFocusLost">
      <summary>
            Gets whether the completion window should automatically close when the text editor looses focus.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.CodeCompletion.InsightWindow.DetachEvents">
      <summary>
            Detaches events from the text area.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.CodeCompletion.InsightWindow.OnSourceInitialized(System.EventArgs)">
      <summary>Raises the <see cref="E:System.Windows.Window.SourceInitialized" /> event.</summary>
      <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
    </member>
    <member name="T:ICSharpCode.AvalonEdit.CodeCompletion.IOverloadProvider">
      <summary>
            Provides the items for the OverloadViewer.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.CodeCompletion.IOverloadProvider.Count">
      <summary>
            Gets the number of overloads.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.CodeCompletion.IOverloadProvider.CurrentContent">
      <summary>
            Gets the current content.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.CodeCompletion.IOverloadProvider.CurrentHeader">
      <summary>
            Gets the current header.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.CodeCompletion.IOverloadProvider.CurrentIndexText">
      <summary>
            Gets the text 'SelectedIndex of Count'.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.CodeCompletion.IOverloadProvider.SelectedIndex">
      <summary>
            Gets/Sets the selected index.
            </summary>
    </member>
    <member name="T:ICSharpCode.AvalonEdit.CodeCompletion.OverloadInsightWindow">
      <summary>
            Insight window that shows an OverloadViewer.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.CodeCompletion.OverloadInsightWindow.#ctor(ICSharpCode.AvalonEdit.Editing.TextArea)">
      <summary>
            Creates a new OverloadInsightWindow.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.CodeCompletion.OverloadInsightWindow.OnKeyDown(System.Windows.Input.KeyEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Keyboard.KeyDown" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.KeyEventArgs" /> that contains the event data.</param>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.CodeCompletion.OverloadInsightWindow.Provider">
      <summary>
            Gets/Sets the item provider.
            </summary>
    </member>
    <member name="T:ICSharpCode.AvalonEdit.CodeCompletion.OverloadViewer">
      <summary>
            Represents a text between "Up" and "Down" buttons.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.CodeCompletion.OverloadViewer.#ctor">
      <summary>Initializes a new instance of the <see cref="T:ICSharpCode.AvalonEdit.CodeCompletion.OverloadViewer" /> class</summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.CodeCompletion.OverloadViewer.ChangeIndex(System.Int32)">
      <summary>
            Changes the selected index.
            </summary>
      <param name="relativeIndexChange">The relative index change - usual values are +1 or -1.</param>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.CodeCompletion.OverloadViewer.OnApplyTemplate">
      <summary>When overridden in a derived class, is invoked whenever application code or internal processes call <see cref="M:System.Windows.FrameworkElement.ApplyTemplate" />.</summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.CodeCompletion.OverloadViewer.Provider">
      <summary>
            Gets/Sets the item provider.
            </summary>
    </member>
    <member name="F:ICSharpCode.AvalonEdit.CodeCompletion.OverloadViewer.ProviderProperty">
      <summary>
            The ItemProvider property.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.CodeCompletion.OverloadViewer.Text">
      <summary>
            Gets/Sets the text between the Up and Down buttons.
            </summary>
    </member>
    <member name="F:ICSharpCode.AvalonEdit.CodeCompletion.OverloadViewer.TextProperty">
      <summary>
            The text property.
            </summary>
    </member>
    <member name="T:ICSharpCode.AvalonEdit.Document.AnchorMovementType">
      <summary>
            Defines how a text anchor moves.
            </summary>
    </member>
    <member name="F:ICSharpCode.AvalonEdit.Document.AnchorMovementType.Default">
      <summary>
            When text is inserted at the anchor position, the type of the insertion
            determines where the caret moves to. For normal insertions, the anchor will stay
            behind the inserted text.
            </summary>
    </member>
    <member name="F:ICSharpCode.AvalonEdit.Document.AnchorMovementType.BeforeInsertion">
      <summary>
            When text is inserted at the anchor position, the anchor will stay
            before the inserted text.
            </summary>
    </member>
    <member name="F:ICSharpCode.AvalonEdit.Document.AnchorMovementType.AfterInsertion">
      <summary>
            When text is insered at the anchor position, the anchor will move
            after the inserted text.
            </summary>
    </member>
    <member name="T:ICSharpCode.AvalonEdit.Document.AnchorSegment">
      <summary>
            A segment using <see cref="T:ICSharpCode.AvalonEdit.Document.TextAnchor" />s as start and end positions.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Document.AnchorSegment.#ctor(ICSharpCode.AvalonEdit.Document.TextAnchor,ICSharpCode.AvalonEdit.Document.TextAnchor)">
      <summary>
            Creates a new AnchorSegment using the specified anchors.
            The anchors must have <see cref="P:ICSharpCode.AvalonEdit.Document.TextAnchor.SurviveDeletion" /> set to true.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Document.AnchorSegment.#ctor(ICSharpCode.AvalonEdit.Document.TextDocument,ICSharpCode.AvalonEdit.Document.ISegment)">
      <summary>
            Creates a new AnchorSegment that creates new anchors.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Document.AnchorSegment.#ctor(ICSharpCode.AvalonEdit.Document.TextDocument,System.Int32,System.Int32)">
      <summary>
            Creates a new AnchorSegment that creates new anchors.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Document.AnchorSegment.EndOffset">
      <summary>
            Gets the end offset of the segment.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Document.AnchorSegment.Length">
      <summary>
            Gets the length of the segment.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Document.AnchorSegment.Offset">
      <summary>
            Gets the start offset of the segment.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Document.AnchorSegment.ToString">
      <summary>Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.</summary>
      <returns>A <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.</returns>
    </member>
    <member name="T:ICSharpCode.AvalonEdit.Document.CaretPositioningMode">
      <summary>
            Specifies the mode for getting the next caret position.
            </summary>
    </member>
    <member name="F:ICSharpCode.AvalonEdit.Document.CaretPositioningMode.Normal">
      <summary>
            Normal positioning (stop at every caret position)
            </summary>
    </member>
    <member name="F:ICSharpCode.AvalonEdit.Document.CaretPositioningMode.WordBorder">
      <summary>
            Stop only on word borders.
            </summary>
    </member>
    <member name="F:ICSharpCode.AvalonEdit.Document.CaretPositioningMode.WordStart">
      <summary>
            Stop only at the beginning of words. This is used for Ctrl+Left/Ctrl+Right.
            </summary>
    </member>
    <member name="F:ICSharpCode.AvalonEdit.Document.CaretPositioningMode.WordStartOrSymbol">
      <summary>
            Stop only at the beginning of words, and anywhere in the middle of symbols.
            </summary>
    </member>
    <member name="F:ICSharpCode.AvalonEdit.Document.CaretPositioningMode.WordBorderOrSymbol">
      <summary>
            Stop only on word borders, and anywhere in the middle of symbols.
            </summary>
    </member>
    <member name="T:ICSharpCode.AvalonEdit.Document.ChangeTrackingCheckpoint">
      <summary>
        <para>A checkpoint that allows tracking changes to a TextDocument.</para>
        <para>
            Use <see cref="M:ICSharpCode.AvalonEdit.Document.TextDocument.CreateSnapshot(ICSharpCode.AvalonEdit.Document.ChangeTrackingCheckpoint@)" /> to create a checkpoint.
            </para>
      </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Document.ChangeTrackingCheckpoint.BelongsToSameDocumentAs(ICSharpCode.AvalonEdit.Document.ChangeTrackingCheckpoint)">
      <summary>
            Gets whether this checkpoint belongs to the same document as the other checkpoint.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Document.ChangeTrackingCheckpoint.CompareAge(ICSharpCode.AvalonEdit.Document.ChangeTrackingCheckpoint)">
      <summary>
            Compares the age of this checkpoint to the other checkpoint.
            </summary>
      <returns>-1 if this checkpoint is older than <paramref name="other" />.
            0 if <c>this</c>==<paramref name="other" />.
            1 if this checkpoint is newer than <paramref name="other" />.</returns>
      <exception cref="T:System.ArgumentException">Raised if 'other' belongs to a different document than this checkpoint.</exception>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Document.ChangeTrackingCheckpoint.Create(ICSharpCode.AvalonEdit.Document.TextDocument)">
      <summary>
            Creates a change tracking checkpoint for the specified document.
            This method is thread-safe.
            If you need a ChangeTrackingCheckpoint that's consistent with a snapshot of the document,
            use <see cref="M:ICSharpCode.AvalonEdit.Document.TextDocument.CreateSnapshot(ICSharpCode.AvalonEdit.Document.ChangeTrackingCheckpoint@)" />.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Document.ChangeTrackingCheckpoint.GetChangesTo(ICSharpCode.AvalonEdit.Document.ChangeTrackingCheckpoint)">
      <summary>
            Gets the changes from this checkpoint to the other checkpoint.
            If 'other' is older than this checkpoint, reverse changes are calculated.
            </summary>
      <exception cref="T:System.ArgumentException">Raised if 'other' belongs to a different document than this checkpoint.</exception>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Document.ChangeTrackingCheckpoint.MoveOffsetTo(ICSharpCode.AvalonEdit.Document.ChangeTrackingCheckpoint,System.Int32,ICSharpCode.AvalonEdit.Document.AnchorMovementType)">
      <summary>
            Calculates where the offset has moved in the other buffer version.
            </summary>
      <exception cref="T:System.ArgumentException">Raised if 'other' belongs to a different document than this checkpoint.</exception>
    </member>
    <member name="T:ICSharpCode.AvalonEdit.Document.CharacterClass">
      <summary>
            Classifies a character as whitespace, line terminator, part of an identifier, or other.
            </summary>
    </member>
    <member name="F:ICSharpCode.AvalonEdit.Document.CharacterClass.Other">
      <summary>
            The character is not whitespace, line terminator or part of an identifier.
            </summary>
    </member>
    <member name="F:ICSharpCode.AvalonEdit.Document.CharacterClass.Whitespace">
      <summary>
            The character is whitespace (but not line terminator).
            </summary>
    </member>
    <member name="F:ICSharpCode.AvalonEdit.Document.CharacterClass.IdentifierPart">
      <summary>
            The character can be part of an identifier (Letter, digit or underscore).
            </summary>
    </member>
    <member name="F:ICSharpCode.AvalonEdit.Document.CharacterClass.LineTerminator">
      <summary>
            The character is line terminator (\r or \n).
            </summary>
    </member>
    <member name="T:ICSharpCode.AvalonEdit.Document.DocumentChangeEventArgs">
      <summary>
            Describes a change of the document text.
            This class is thread-safe.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Document.DocumentChangeEventArgs.#ctor(System.Int32,System.String,System.String)">
      <summary>
            Creates a new DocumentChangeEventArgs object.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Document.DocumentChangeEventArgs.#ctor(System.Int32,System.String,System.String,ICSharpCode.AvalonEdit.Document.OffsetChangeMap)">
      <summary>
            Creates a new DocumentChangeEventArgs object.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Document.DocumentChangeEventArgs.GetNewOffset(System.Int32,ICSharpCode.AvalonEdit.Document.AnchorMovementType)">
      <summary>
            Gets the new offset where the specified offset moves after this document change.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Document.DocumentChangeEventArgs.InsertedText">
      <summary>
            The text that was inserted.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Document.DocumentChangeEventArgs.InsertionLength">
      <summary>
            The number of characters inserted.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Document.DocumentChangeEventArgs.Invert">
      <summary>
            Creates DocumentChangeEventArgs for the reverse change.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Document.DocumentChangeEventArgs.Offset">
      <summary>
            The offset at which the change occurs.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Document.DocumentChangeEventArgs.OffsetChangeMap">
      <summary>
            Gets the OffsetChangeMap associated with this document change.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Document.DocumentChangeEventArgs.RemovalLength">
      <summary>
            The number of characters removed.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Document.DocumentChangeEventArgs.RemovedText">
      <summary>
            The text that was removed.
            </summary>
    </member>
    <member name="T:ICSharpCode.AvalonEdit.Document.DocumentLine">
      <summary>
            Represents a line inside a <see cref="T:ICSharpCode.AvalonEdit.Document.TextDocument" />.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Document.DocumentLine.DelimiterLength">
      <summary>
        <para>Gets the length of the line delimiter.</para>
        <para>The value is 1 for single <c>"\r"</c> or <c>"\n"</c>, 2 for the <c>"\r\n"</c> sequence;
            and 0 for the last line in the document.</para>
      </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Document.DocumentLine.EndOffset">
      <summary>
            Gets the end offset of the line in the document's text (the offset before the line delimiter).
            Runtime: O(log n)
            </summary>
      <exception cref="T:System.InvalidOperationException">The line was deleted.</exception>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Document.DocumentLine.IsDeleted">
      <summary>
            Gets if this line was deleted from the document.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Document.DocumentLine.Length">
      <summary>
            Gets the length of this line. The length does not include the line delimiter. O(1)
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Document.DocumentLine.LineNumber">
      <summary>
            Gets the number of this line.
            Runtime: O(log n)
            </summary>
      <exception cref="T:System.InvalidOperationException">The line was deleted.</exception>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Document.DocumentLine.NextLine">
      <summary>
            Gets the next line in the document.
            </summary>
      <returns>The line following this line, or null if this is the last line.</returns>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Document.DocumentLine.Offset">
      <summary>
            Gets the starting offset of the line in the document's text.
            Runtime: O(log n)
            </summary>
      <exception cref="T:System.InvalidOperationException">The line was deleted.</exception>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Document.DocumentLine.PreviousLine">
      <summary>
            Gets the previous line in the document.
            </summary>
      <returns>The line before this line, or null if this is the first line.</returns>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Document.DocumentLine.ToString">
      <summary>
            Gets a string with debug output showing the line number and offset.
            Does not include the line's text.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Document.DocumentLine.TotalLength">
      <summary>
            Gets the length of this line, including the line delimiter. O(1)
            </summary>
    </member>
    <member name="T:ICSharpCode.AvalonEdit.Document.ILineTracker">
      <summary>
            Allows for low-level line tracking.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Document.ILineTracker.BeforeRemoveLine(ICSharpCode.AvalonEdit.Document.DocumentLine)">
      <summary>
            Is called immediately before a document line is removed.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Document.ILineTracker.LineInserted(ICSharpCode.AvalonEdit.Document.DocumentLine,ICSharpCode.AvalonEdit.Document.DocumentLine)">
      <summary>
            Is called immediately after a line was inserted.
            </summary>
      <param name="newLine">The new line</param>
      <param name="insertionPos">The existing line before the new line</param>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Document.ILineTracker.RebuildDocument">
      <summary>
            Indicates that there were changes to the document that the line tracker was not notified of.
            The document is in a consistent state (but the line trackers aren't), and line trackers should
            throw away their data and rebuild the document.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Document.ILineTracker.SetLineLength(ICSharpCode.AvalonEdit.Document.DocumentLine,System.Int32)">
      <summary>
            Is called immediately before a document line changes length.
            This method will be called whenever the line is changed, even when the length stays as it is.
            The method might be called multiple times for a single line because
            a replacement is internally handled as removal followed by insertion.
            </summary>
    </member>
    <member name="T:ICSharpCode.AvalonEdit.Document.ISegment">
      <summary>
            An (Offset,Length)-pair.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Document.ISegment.EndOffset">
      <summary>
            Gets the end offset of the segment.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Document.ISegment.Length">
      <summary>
            Gets the length of the segment.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Document.ISegment.Offset">
      <summary>
            Gets the start offset of the segment.
            </summary>
    </member>
    <member name="T:ICSharpCode.AvalonEdit.Document.ITextSource">
      <summary>
            Interface for read-only access to a text source.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Document.ITextSource.CreateReader">
      <summary>
            Creates a text reader.
            If the text is changed while a reader is active, the reader will continue to read from the old text version.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Document.ITextSource.CreateSnapshot">
      <summary>
            Creates a snapshot of the current text.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Document.ITextSource.CreateSnapshot(System.Int32,System.Int32)">
      <summary>
            Creates a snapshot of a part of the current text.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Document.ITextSource.GetCharAt(System.Int32)">
      <summary>
            Gets a character at the specified position in the document.
            </summary>
      <returns>The character at the specified position.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">Offset is outside the valid range (0 to TextLength-1).</exception>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Document.ITextSource.GetText(System.Int32,System.Int32)">
      <summary>
            Retrieves the text for a portion of the document.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">offset or length is outside the valid range.</exception>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Document.ITextSource.IndexOfAny(System.Char[],System.Int32,System.Int32)">
      <summary>
            Gets the index of the first occurrence of any character in the specified array.
            </summary>
      <param name="anyOf"></param>
      <param name="startIndex">Start index of the search.</param>
      <param name="count">Length of the area to search.</param>
      <returns>The first index where any character was found; or -1 if no occurrence was found.</returns>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Document.ITextSource.Text">
      <summary>
            Gets the whole text as string.
            </summary>
    </member>
    <member name="E:ICSharpCode.AvalonEdit.Document.ITextSource.TextChanged">
      <summary>
            Is raised when the Text property changes.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Document.ITextSource.TextLength">
      <summary>
            Gets the total text length.
            </summary>
      <returns>The length of the text, in characters.</returns>
    </member>
    <member name="T:ICSharpCode.AvalonEdit.Document.IUndoableOperation">
      <summary>
            This Interface describes a the basic Undo/Redo operation
            all Undo Operations must implement this interface.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Document.IUndoableOperation.Redo">
      <summary>
            Redo the last operation
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Document.IUndoableOperation.Undo">
      <summary>
            Undo the last operation
            </summary>
    </member>
    <member name="T:ICSharpCode.AvalonEdit.Document.OffsetChangeMap">
      <summary>
            Describes a series of offset changes.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Document.OffsetChangeMap.#ctor">
      <summary>
            Creates a new OffsetChangeMap instance.
            </summary>
    </member>
    <member name="F:ICSharpCode.AvalonEdit.Document.OffsetChangeMap.Empty">
      <summary>
            Immutable OffsetChangeMap that is empty.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Document.OffsetChangeMap.Freeze">
      <summary>
            Freezes this instance.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Document.OffsetChangeMap.FromSingleElement(ICSharpCode.AvalonEdit.Document.OffsetChangeMapEntry)">
      <summary>
            Creates a new OffsetChangeMap with a single element.
            </summary>
      <param name="entry">The entry.</param>
      <returns>Returns a frozen OffsetChangeMap with a single entry.</returns>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Document.OffsetChangeMap.GetNewOffset(System.Int32,ICSharpCode.AvalonEdit.Document.AnchorMovementType)">
      <summary>
            Gets the new offset where the specified offset moves after this document change.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Document.OffsetChangeMap.InsertItem(System.Int32,ICSharpCode.AvalonEdit.Document.OffsetChangeMapEntry)">
      <summary>Inserts an element into the <see cref="T:System.Collections.ObjectModel.Collection`1" /> at the specified index.</summary>
      <param name="index">The zero-based index at which <paramref name="item" /> should be inserted.</param>
      <param name="item">The object to insert. The value can be null for reference types.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero.-or-<paramref name="index" /> is greater than <see cref="P:System.Collections.ObjectModel.Collection`1.Count" />.</exception>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Document.OffsetChangeMap.Invert">
      <summary>
            Calculates the inverted OffsetChangeMap (used for the undo operation).
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Document.OffsetChangeMap.IsFrozen">
      <summary>
            Gets if this instance is frozen. Frozen instances are immutable and thus thread-safe.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Document.OffsetChangeMap.IsValidForDocumentChange(System.Int32,System.Int32,System.Int32)">
      <summary>
            Gets whether this OffsetChangeMap is a valid explanation for the specified document change.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Document.OffsetChangeMap.RemoveItem(System.Int32)">
      <summary>Removes the element at the specified index of the <see cref="T:System.Collections.ObjectModel.Collection`1" />.</summary>
      <param name="index">The zero-based index of the element to remove.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero.-or-<paramref name="index" /> is equal to or greater than <see cref="P:System.Collections.ObjectModel.Collection`1.Count" />.</exception>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Document.OffsetChangeMap.SetItem(System.Int32,ICSharpCode.AvalonEdit.Document.OffsetChangeMapEntry)">
      <summary>Replaces the element at the specified index.</summary>
      <param name="index">The zero-based index of the element to replace.</param>
      <param name="item">The new value for the element at the specified index. The value can be null for reference types.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero.-or-<paramref name="index" /> is greater than <see cref="P:System.Collections.ObjectModel.Collection`1.Count" />.</exception>
    </member>
    <member name="T:ICSharpCode.AvalonEdit.Document.OffsetChangeMapEntry">
      <summary>
            An entry in the OffsetChangeMap.
            This represents the offset of a document change (either insertion or removal, not both at once).
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Document.OffsetChangeMapEntry.#ctor(System.Int32,System.Int32,System.Int32)">
      <summary>
            Creates a new OffsetChangeMapEntry instance.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Document.OffsetChangeMapEntry.#ctor(System.Int32,System.Int32,System.Int32,System.Boolean,System.Boolean)">
      <summary>
            Creates a new OffsetChangeMapEntry instance.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Document.OffsetChangeMapEntry.DefaultAnchorMovementIsBeforeInsertion">
      <summary>
            Gets whether default anchor movement causes the anchor to stay in front of the caret.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Document.OffsetChangeMapEntry.Equals(ICSharpCode.AvalonEdit.Document.OffsetChangeMapEntry)">
      <summary>Indicates whether the current object is equal to another object of the same type.</summary>
      <param name="other">An object to compare with this object.</param>
      <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.</returns>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Document.OffsetChangeMapEntry.Equals(System.Object)">
      <summary>Indicates whether this instance and a specified object are equal.</summary>
      <param name="obj">Another object to compare to. </param>
      <returns>true if <paramref name="obj" /> and this instance are the same type and represent the same value; otherwise, false.</returns>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Document.OffsetChangeMapEntry.GetHashCode">
      <summary>Returns the hash code for this instance.</summary>
      <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Document.OffsetChangeMapEntry.GetNewOffset(System.Int32,ICSharpCode.AvalonEdit.Document.AnchorMovementType)">
      <summary>
            Gets the new offset where the specified offset moves after this document change.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Document.OffsetChangeMapEntry.InsertionLength">
      <summary>
            The number of characters inserted.
            Returns 0 if this entry represents a removal.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Document.OffsetChangeMapEntry.Offset">
      <summary>
            The offset at which the change occurs.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Document.OffsetChangeMapEntry.op_Equality(ICSharpCode.AvalonEdit.Document.OffsetChangeMapEntry,ICSharpCode.AvalonEdit.Document.OffsetChangeMapEntry)">
      <summary>
            Tests the two entries for equality.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Document.OffsetChangeMapEntry.op_Inequality(ICSharpCode.AvalonEdit.Document.OffsetChangeMapEntry,ICSharpCode.AvalonEdit.Document.OffsetChangeMapEntry)">
      <summary>
            Tests the two entries for inequality.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Document.OffsetChangeMapEntry.RemovalLength">
      <summary>
            The number of characters removed.
            Returns 0 if this entry represents an insertion.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Document.OffsetChangeMapEntry.RemovalNeverCausesAnchorDeletion">
      <summary>
            Gets whether the removal should not cause any anchor deletions.
            </summary>
    </member>
    <member name="T:ICSharpCode.AvalonEdit.Document.OffsetChangeMappingType">
      <summary>
            Contains predefined offset change mapping types.
            </summary>
    </member>
    <member name="F:ICSharpCode.AvalonEdit.Document.OffsetChangeMappingType.Normal">
      <summary>
            Normal replace.
            Anchors in front of the replaced region will stay in front, anchors after the replaced region will stay after.
            Anchors in the middle of the removed region will be deleted. If they survive deletion,
            they move depending on their AnchorMovementType.
            </summary>
    </member>
    <member name="F:ICSharpCode.AvalonEdit.Document.OffsetChangeMappingType.RemoveAndInsert">
      <summary>
            First the old text is removed, then the new text is inserted.
            Anchors immediately in front (or after) the replaced region may move to the other side of the insertion,
            depending on the AnchorMovementType.
            </summary>
    </member>
    <member name="F:ICSharpCode.AvalonEdit.Document.OffsetChangeMappingType.CharacterReplace">
      <summary>
            The text is replaced character-by-character.
            Anchors keep their position inside the replaced text.
            Anchors after the replaced region will move accordingly if the replacement text has a different length than the replaced text.
            If the new text is shorter than the old text, anchors inside the old text that would end up behind the replacement text
            will be moved so that they point to the end of the replacement text.
            </summary>
    </member>
    <member name="F:ICSharpCode.AvalonEdit.Document.OffsetChangeMappingType.KeepAnchorBeforeInsertion">
      <summary>
            Like 'Normal', but anchors with <see cref="P:ICSharpCode.AvalonEdit.Document.TextAnchor.MovementType" /> = Default will stay in front of the
            insertion instead of being moved behind it.
            </summary>
    </member>
    <member name="T:ICSharpCode.AvalonEdit.Document.RopeTextSource">
      <summary>
            Implements the ITextSource interface using a rope.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Document.RopeTextSource.#ctor(ICSharpCode.AvalonEdit.Utils.Rope{System.Char})">
      <summary>
            Creates a new RopeTextSource.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Document.RopeTextSource.CreateReader">
      <summary>
            Creates a text reader.
            If the text is changed while a reader is active, the reader will continue to read from the old text version.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Document.RopeTextSource.CreateSnapshot">
      <summary>
            Creates a snapshot of the current text.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Document.RopeTextSource.CreateSnapshot(System.Int32,System.Int32)">
      <summary>
            Creates a snapshot of a part of the current text.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Document.RopeTextSource.GetCharAt(System.Int32)">
      <summary>
            Gets a character at the specified position in the document.
            </summary>
      <returns>The character at the specified position.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">Offset is outside the valid range (0 to TextLength-1).</exception>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Document.RopeTextSource.GetRope">
      <summary>
            Returns a clone of the rope used for this text source.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Document.RopeTextSource.GetText(System.Int32,System.Int32)">
      <summary>
            Retrieves the text for a portion of the document.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">offset or length is outside the valid range.</exception>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Document.RopeTextSource.IndexOfAny(System.Char[],System.Int32,System.Int32)">
      <summary>
            Gets the index of the first occurrence of any character in the specified array.
            </summary>
      <param name="anyOf"></param>
      <param name="startIndex">Start index of the search.</param>
      <param name="count">Length of the area to search.</param>
      <returns>The first index where any character was found; or -1 if no occurrence was found.</returns>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Document.RopeTextSource.Text">
      <summary>
            Gets the whole text as string.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Document.RopeTextSource.TextLength">
      <summary>
            Gets the total text length.
            </summary>
      <returns>The length of the text, in characters.</returns>
    </member>
    <member name="T:ICSharpCode.AvalonEdit.Document.StringTextSource">
      <summary>
            Implements the ITextSource interface using a string.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Document.StringTextSource.#ctor(System.String)">
      <summary>
            Creates a new StringTextSource.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Document.StringTextSource.CreateReader">
      <summary>
            Creates a text reader.
            If the text is changed while a reader is active, the reader will continue to read from the old text version.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Document.StringTextSource.CreateSnapshot">
      <summary>
            Creates a snapshot of the current text.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Document.StringTextSource.CreateSnapshot(System.Int32,System.Int32)">
      <summary>
            Creates a snapshot of a part of the current text.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Document.StringTextSource.GetCharAt(System.Int32)">
      <summary>
            Gets a character at the specified position in the document.
            </summary>
      <returns>The character at the specified position.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">Offset is outside the valid range (0 to TextLength-1).</exception>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Document.StringTextSource.GetText(System.Int32,System.Int32)">
      <summary>
            Retrieves the text for a portion of the document.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">offset or length is outside the valid range.</exception>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Document.StringTextSource.IndexOfAny(System.Char[],System.Int32,System.Int32)">
      <summary>
            Gets the index of the first occurrence of any character in the specified array.
            </summary>
      <param name="anyOf"></param>
      <param name="startIndex">Start index of the search.</param>
      <param name="count">Length of the area to search.</param>
      <returns>The first index where any character was found; or -1 if no occurrence was found.</returns>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Document.StringTextSource.Text">
      <summary>
            Gets the whole text as string.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Document.StringTextSource.TextLength">
      <summary>
            Gets the total text length.
            </summary>
      <returns>The length of the text, in characters.</returns>
    </member>
    <member name="T:ICSharpCode.AvalonEdit.Document.TextAnchor">
      <summary>
            The TextAnchor class references an offset (a position between two characters).
            It automatically updates the offset when text is inserted/removed in front of the anchor.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Document.TextAnchor.Column">
      <summary>
            Gets the column number of this anchor.
            </summary>
      <exception cref="T:System.InvalidOperationException">Thrown when trying to get the Offset from a deleted anchor.</exception>
    </member>
    <member name="E:ICSharpCode.AvalonEdit.Document.TextAnchor.Deleted">
      <summary>
            Occurs after the anchor was deleted.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Document.TextAnchor.Document">
      <summary>
            Gets the document owning the anchor.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Document.TextAnchor.IsDeleted">
      <summary>
            Gets whether the anchor was deleted.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Document.TextAnchor.Line">
      <summary>
            Gets the line number of the anchor.
            </summary>
      <exception cref="T:System.InvalidOperationException">Thrown when trying to get the Offset from a deleted anchor.</exception>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Document.TextAnchor.Location">
      <summary>
            Gets the text location of this anchor.
            </summary>
      <exception cref="T:System.InvalidOperationException">Thrown when trying to get the Offset from a deleted anchor.</exception>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Document.TextAnchor.MovementType">
      <summary>
            Controls how the anchor moves.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Document.TextAnchor.Offset">
      <summary>
            Gets the offset of the text anchor.
            </summary>
      <exception cref="T:System.InvalidOperationException">Thrown when trying to get the Offset from a deleted anchor.</exception>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Document.TextAnchor.SurviveDeletion">
      <summary>
        <para>
            Specifies whether the anchor survives deletion of the text containing it.
            </para>
        <para>
          <c>false</c>: The anchor is deleted when the a selection that includes the anchor is deleted.
            <c>true</c>: The anchor is not deleted.
            </para>
      </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Document.TextAnchor.ToString">
      <summary>Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.</summary>
      <returns>A <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.</returns>
    </member>
    <member name="T:ICSharpCode.AvalonEdit.Document.TextDocument">
      <summary>
            This class is the main class of the text model. Basically, it is a <see cref="T:System.Text.StringBuilder" /> with events.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Document.TextDocument.#ctor">
      <summary>
            Create an empty text document.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Document.TextDocument.#ctor(ICSharpCode.AvalonEdit.Document.ITextSource)">
      <summary>
            Create a new text document with the specified initial text.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Document.TextDocument.#ctor(System.Collections.Generic.IEnumerable{System.Char})">
      <summary>
            Create a new text document with the specified initial text.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Document.TextDocument.BeginUpdate">
      <summary>
        <para>Begins a group of document changes.</para>
        <para>Some events are suspended until EndUpdate is called, and the <see cref="P:ICSharpCode.AvalonEdit.Document.TextDocument.UndoStack" /> will
            group all changes into a single action.</para>
        <para>Calling BeginUpdate several times increments a counter, only after the appropriate number
            of EndUpdate calls the events resume their work.</para>
      </summary>
    </member>
    <member name="E:ICSharpCode.AvalonEdit.Document.TextDocument.Changed">
      <summary>
            Is raised after the document has changed.
            </summary>
    </member>
    <member name="E:ICSharpCode.AvalonEdit.Document.TextDocument.Changing">
      <summary>
            Is raised before the document changes.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Document.TextDocument.CreateAnchor(System.Int32)">
      <summary>
            Creates a new <see cref="T:ICSharpCode.AvalonEdit.Document.TextAnchor" /> at the specified offset.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Document.TextDocument.CreateReader">
      <summary>
            Creates a text reader.
            If the text is changed while a reader is active, the reader will continue to read from the old text version.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Document.TextDocument.CreateSnapshot">
      <summary>
            Creates a snapshot of the current text.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Document.TextDocument.CreateSnapshot(ICSharpCode.AvalonEdit.Document.ChangeTrackingCheckpoint@)">
      <summary>
            Creates a snapshot of the current text.
            Additionally, creates a checkpoint that allows tracking document changes.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Document.TextDocument.CreateSnapshot(System.Int32,System.Int32)">
      <summary>
            Creates a snapshot of a part of the current text.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Document.TextDocument.EndUpdate">
      <summary>
            Ends a group of document changes.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Document.TextDocument.GetCharAt(System.Int32)">
      <summary>
            Gets a character at the specified position in the document.
            </summary>
      <returns>The character at the specified position.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">Offset is outside the valid range (0 to TextLength-1).</exception>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Document.TextDocument.GetLineByNumber(System.Int32)">
      <summary>
            Gets a line by the line number: O(log n)
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Document.TextDocument.GetLineByOffset(System.Int32)">
      <summary>
            Gets a document lines by offset.
            Runtime: O(log n)
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Document.TextDocument.GetLocation(System.Int32)">
      <summary>
            Gets the location from an offset.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Document.TextDocument.GetOffset(ICSharpCode.AvalonEdit.Document.TextLocation)">
      <summary>
            Gets the offset from a text location.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Document.TextDocument.GetOffset(System.Int32,System.Int32)">
      <summary>
            Gets the offset from a text location.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Document.TextDocument.GetText(ICSharpCode.AvalonEdit.Document.ISegment)">
      <summary>
            Retrieves the text for a portion of the document.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Document.TextDocument.GetText(System.Int32,System.Int32)">
      <summary>
            Retrieves the text for a portion of the document.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">offset or length is outside the valid range.</exception>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Document.TextDocument.Insert(System.Int32,System.String)">
      <summary>
            Inserts text.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Document.TextDocument.IsInUpdate">
      <summary>
            Gets if an update is running.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Document.TextDocument.LineCount">
      <summary>
            Gets the total number of lines in the document.
            Runtime: O(1).
            </summary>
    </member>
    <member name="E:ICSharpCode.AvalonEdit.Document.TextDocument.LineCountChanged">
      <summary>
            Is raised when the LineCount property changes.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Document.TextDocument.Lines">
      <summary>
            Gets a read-only list of lines.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Document.TextDocument.LineTrackers">
      <summary>
            Gets the list of <see cref="T:ICSharpCode.AvalonEdit.Document.ILineTracker" />s attached to this document.
            You can add custom line trackers to this list.
            </summary>
    </member>
    <member name="E:ICSharpCode.AvalonEdit.Document.TextDocument.PropertyChanged">
      <summary>
            Is raised when one of the properties <see cref="P:ICSharpCode.AvalonEdit.Document.TextDocument.Text" />, <see cref="P:ICSharpCode.AvalonEdit.Document.TextDocument.TextLength" />, <see cref="P:ICSharpCode.AvalonEdit.Document.TextDocument.LineCount" />,
            <see cref="P:ICSharpCode.AvalonEdit.Document.TextDocument.UndoStack" /> changes.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Document.TextDocument.Remove(ICSharpCode.AvalonEdit.Document.ISegment)">
      <summary>
            Removes text.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Document.TextDocument.Remove(System.Int32,System.Int32)">
      <summary>
            Removes text.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Document.TextDocument.Replace(ICSharpCode.AvalonEdit.Document.ISegment,System.String)">
      <summary>
            Replaces text.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Document.TextDocument.Replace(System.Int32,System.Int32,System.String)">
      <summary>
            Replaces text.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Document.TextDocument.Replace(System.Int32,System.Int32,System.String,ICSharpCode.AvalonEdit.Document.OffsetChangeMap)">
      <summary>
            Replaces text.
            </summary>
      <param name="offset">The starting offset of the text to be replaced.</param>
      <param name="length">The length of the text to be replaced.</param>
      <param name="text">The new text.</param>
      <param name="offsetChangeMap">The offsetChangeMap determines how offsets inside the old text are mapped to the new text.
            This affects how the anchors and segments inside the replaced region behave.
            If you pass null (the default when using one of the other overloads), the offsets are changed as
            in OffsetChangeMappingType.Normal mode.
            If you pass OffsetChangeMap.Empty, then everything will stay in its old place (OffsetChangeMappingType.CharacterReplace mode).
            The offsetChangeMap must be a valid 'explanation' for the document change. See <see cref="M:ICSharpCode.AvalonEdit.Document.OffsetChangeMap.IsValidForDocumentChange(System.Int32,System.Int32,System.Int32)" />.
            Passing an OffsetChangeMap to the Replace method will automatically freeze it to ensure the thread safety of the resulting
            DocumentChangeEventArgs instance.
            </param>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Document.TextDocument.Replace(System.Int32,System.Int32,System.String,ICSharpCode.AvalonEdit.Document.OffsetChangeMappingType)">
      <summary>
            Replaces text.
            </summary>
      <param name="offset">The starting offset of the text to be replaced.</param>
      <param name="length">The length of the text to be replaced.</param>
      <param name="text">The new text.</param>
      <param name="offsetChangeMappingType">The offsetChangeMappingType determines how offsets inside the old text are mapped to the new text.
            This affects how the anchors and segments inside the replaced region behave.</param>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Document.TextDocument.RunUpdate">
      <summary>
            Immediately calls <see cref="M:ICSharpCode.AvalonEdit.Document.TextDocument.BeginUpdate" />,
            and returns an IDisposable that calls <see cref="M:ICSharpCode.AvalonEdit.Document.TextDocument.EndUpdate" />.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Document.TextDocument.SetOwnerThread(System.Threading.Thread)">
      <summary>
            Transfers ownership of the document to another thread. This method can be used to load
            a file into a TextDocument on a background thread and then transfer ownership to the UI thread
            for displaying the document.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Document.TextDocument.Text">
      <summary>
            Gets/Sets the text of the whole document.
            </summary>
    </member>
    <member name="E:ICSharpCode.AvalonEdit.Document.TextDocument.TextChanged">
      <summary>
            Is raised when the Text property changes.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Document.TextDocument.TextLength">
      <summary>
            Gets the total text length.
            </summary>
      <returns>The length of the text, in characters.</returns>
    </member>
    <member name="E:ICSharpCode.AvalonEdit.Document.TextDocument.TextLengthChanged">
      <summary>
            Is raised when the TextLength property changes.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Document.TextDocument.UndoStack">
      <summary>
            Gets the <see cref="P:ICSharpCode.AvalonEdit.Document.TextDocument.UndoStack" /> of the document.
            </summary>
    </member>
    <member name="E:ICSharpCode.AvalonEdit.Document.TextDocument.UpdateFinished">
      <summary>
            Occurs when a document change is finished.
            </summary>
    </member>
    <member name="E:ICSharpCode.AvalonEdit.Document.TextDocument.UpdateStarted">
      <summary>
            Occurs when a document change starts.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Document.TextDocument.VerifyAccess">
      <summary>
            Verifies that the current thread is the documents owner thread.
            Throws an <see cref="T:System.InvalidOperationException" /> if the wrong thread accesses the TextDocument.
            </summary>
    </member>
    <member name="T:ICSharpCode.AvalonEdit.Document.TextDocumentWeakEventManager">
      <summary>
            Contains weak event managers for the TextDocument events.
            </summary>
    </member>
    <member name="T:ICSharpCode.AvalonEdit.Document.TextDocumentWeakEventManager.Changed">
      <summary>
            Weak event manager for the <see cref="E:ICSharpCode.AvalonEdit.Document.TextDocument.Changed" /> event.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Document.TextDocumentWeakEventManager.Changed.#ctor">
      <summary>Initializes a new instance of the <see cref="T:ICSharpCode.AvalonEdit.Document.TextDocumentWeakEventManager.Changed" /> class</summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Document.TextDocumentWeakEventManager.Changed.StartListening(ICSharpCode.AvalonEdit.Document.TextDocument)">
      <summary>
            Attaches the event handler.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Document.TextDocumentWeakEventManager.Changed.StopListening(ICSharpCode.AvalonEdit.Document.TextDocument)">
      <summary>
            Detaches the event handler.
            </summary>
    </member>
    <member name="T:ICSharpCode.AvalonEdit.Document.TextDocumentWeakEventManager.Changing">
      <summary>
            Weak event manager for the <see cref="E:ICSharpCode.AvalonEdit.Document.TextDocument.Changing" /> event.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Document.TextDocumentWeakEventManager.Changing.#ctor">
      <summary>Initializes a new instance of the <see cref="T:ICSharpCode.AvalonEdit.Document.TextDocumentWeakEventManager.Changing" /> class</summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Document.TextDocumentWeakEventManager.Changing.StartListening(ICSharpCode.AvalonEdit.Document.TextDocument)">
      <summary>
            Attaches the event handler.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Document.TextDocumentWeakEventManager.Changing.StopListening(ICSharpCode.AvalonEdit.Document.TextDocument)">
      <summary>
            Detaches the event handler.
            </summary>
    </member>
    <member name="T:ICSharpCode.AvalonEdit.Document.TextDocumentWeakEventManager.LineCountChanged">
      <summary>
            Weak event manager for the <see cref="E:ICSharpCode.AvalonEdit.Document.TextDocument.LineCountChanged" /> event.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Document.TextDocumentWeakEventManager.LineCountChanged.#ctor">
      <summary>Initializes a new instance of the <see cref="T:ICSharpCode.AvalonEdit.Document.TextDocumentWeakEventManager.LineCountChanged" /> class</summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Document.TextDocumentWeakEventManager.LineCountChanged.StartListening(ICSharpCode.AvalonEdit.Document.TextDocument)">
      <summary>
            Attaches the event handler.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Document.TextDocumentWeakEventManager.LineCountChanged.StopListening(ICSharpCode.AvalonEdit.Document.TextDocument)">
      <summary>
            Detaches the event handler.
            </summary>
    </member>
    <member name="T:ICSharpCode.AvalonEdit.Document.TextDocumentWeakEventManager.TextChanged">
      <summary>
            Weak event manager for the <see cref="E:ICSharpCode.AvalonEdit.Document.TextDocument.TextChanged" /> event.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Document.TextDocumentWeakEventManager.TextChanged.#ctor">
      <summary>Initializes a new instance of the <see cref="T:ICSharpCode.AvalonEdit.Document.TextDocumentWeakEventManager.TextChanged" /> class</summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Document.TextDocumentWeakEventManager.TextChanged.StartListening(ICSharpCode.AvalonEdit.Document.TextDocument)">
      <summary>
            Attaches the event handler.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Document.TextDocumentWeakEventManager.TextChanged.StopListening(ICSharpCode.AvalonEdit.Document.TextDocument)">
      <summary>
            Detaches the event handler.
            </summary>
    </member>
    <member name="T:ICSharpCode.AvalonEdit.Document.TextDocumentWeakEventManager.TextLengthChanged">
      <summary>
            Weak event manager for the <see cref="E:ICSharpCode.AvalonEdit.Document.TextDocument.TextLengthChanged" /> event.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Document.TextDocumentWeakEventManager.TextLengthChanged.#ctor">
      <summary>Initializes a new instance of the <see cref="T:ICSharpCode.AvalonEdit.Document.TextDocumentWeakEventManager.TextLengthChanged" /> class</summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Document.TextDocumentWeakEventManager.TextLengthChanged.StartListening(ICSharpCode.AvalonEdit.Document.TextDocument)">
      <summary>
            Attaches the event handler.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Document.TextDocumentWeakEventManager.TextLengthChanged.StopListening(ICSharpCode.AvalonEdit.Document.TextDocument)">
      <summary>
            Detaches the event handler.
            </summary>
    </member>
    <member name="T:ICSharpCode.AvalonEdit.Document.TextDocumentWeakEventManager.UpdateFinished">
      <summary>
            Weak event manager for the <see cref="E:ICSharpCode.AvalonEdit.Document.TextDocument.UpdateFinished" /> event.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Document.TextDocumentWeakEventManager.UpdateFinished.#ctor">
      <summary>Initializes a new instance of the <see cref="T:ICSharpCode.AvalonEdit.Document.TextDocumentWeakEventManager.UpdateFinished" /> class</summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Document.TextDocumentWeakEventManager.UpdateFinished.StartListening(ICSharpCode.AvalonEdit.Document.TextDocument)">
      <summary>
            Attaches the event handler.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Document.TextDocumentWeakEventManager.UpdateFinished.StopListening(ICSharpCode.AvalonEdit.Document.TextDocument)">
      <summary>
            Detaches the event handler.
            </summary>
    </member>
    <member name="T:ICSharpCode.AvalonEdit.Document.TextDocumentWeakEventManager.UpdateStarted">
      <summary>
            Weak event manager for the <see cref="E:ICSharpCode.AvalonEdit.Document.TextDocument.UpdateStarted" /> event.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Document.TextDocumentWeakEventManager.UpdateStarted.#ctor">
      <summary>Initializes a new instance of the <see cref="T:ICSharpCode.AvalonEdit.Document.TextDocumentWeakEventManager.UpdateStarted" /> class</summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Document.TextDocumentWeakEventManager.UpdateStarted.StartListening(ICSharpCode.AvalonEdit.Document.TextDocument)">
      <summary>
            Attaches the event handler.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Document.TextDocumentWeakEventManager.UpdateStarted.StopListening(ICSharpCode.AvalonEdit.Document.TextDocument)">
      <summary>
            Detaches the event handler.
            </summary>
    </member>
    <member name="T:ICSharpCode.AvalonEdit.Document.TextLocation">
      <summary>
            A line/column position.
            Text editor lines/columns are counted started from one.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Document.TextLocation.#ctor(System.Int32,System.Int32)">
      <summary>
            Creates a TextLocation instance.
            <para>
            Warning: the parameters are (line, column).
            Not (column, line) as in ICSharpCode.TextEditor!
            </para></summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Document.TextLocation.Column">
      <summary>
            Gets the column number.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Document.TextLocation.CompareTo(ICSharpCode.AvalonEdit.Document.TextLocation)">
      <summary>
            Compares two text locations.
            </summary>
    </member>
    <member name="F:ICSharpCode.AvalonEdit.Document.TextLocation.Empty">
      <summary>
            Represents no text location (0, 0).
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Document.TextLocation.Equals(ICSharpCode.AvalonEdit.Document.TextLocation)">
      <summary>
            Equality test.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Document.TextLocation.Equals(System.Object)">
      <summary>
            Equality test.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Document.TextLocation.GetHashCode">
      <summary>
            Gets a hash code.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Document.TextLocation.IsEmpty">
      <summary>
            Gets whether the TextLocation instance is empty.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Document.TextLocation.Line">
      <summary>
            Gets the line number.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Document.TextLocation.op_Equality(ICSharpCode.AvalonEdit.Document.TextLocation,ICSharpCode.AvalonEdit.Document.TextLocation)">
      <summary>
            Equality test.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Document.TextLocation.op_GreaterThan(ICSharpCode.AvalonEdit.Document.TextLocation,ICSharpCode.AvalonEdit.Document.TextLocation)">
      <summary>
            Compares two text locations.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Document.TextLocation.op_GreaterThanOrEqual(ICSharpCode.AvalonEdit.Document.TextLocation,ICSharpCode.AvalonEdit.Document.TextLocation)">
      <summary>
            Compares two text locations.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Document.TextLocation.op_Inequality(ICSharpCode.AvalonEdit.Document.TextLocation,ICSharpCode.AvalonEdit.Document.TextLocation)">
      <summary>
            Inequality test.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Document.TextLocation.op_LessThan(ICSharpCode.AvalonEdit.Document.TextLocation,ICSharpCode.AvalonEdit.Document.TextLocation)">
      <summary>
            Compares two text locations.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Document.TextLocation.op_LessThanOrEqual(ICSharpCode.AvalonEdit.Document.TextLocation,ICSharpCode.AvalonEdit.Document.TextLocation)">
      <summary>
            Compares two text locations.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Document.TextLocation.ToString">
      <summary>
            Gets a string representation for debugging purposes.
            </summary>
    </member>
    <member name="T:ICSharpCode.AvalonEdit.Document.TextSegment">
      <summary>
            A segment that can be put into a <see cref="T:ICSharpCode.AvalonEdit.Document.TextSegmentCollection`1" />.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Document.TextSegment.#ctor">
      <summary>Initializes a new instance of the <see cref="T:ICSharpCode.AvalonEdit.Document.TextSegment" /> class</summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Document.TextSegment.EndOffset">
      <summary>
            Gets/Sets the end offset of the segment.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Document.TextSegment.IsConnectedToCollection">
      <summary>
            Gets whether this segment is connected to a TextSegmentCollection and will automatically
            update its offsets.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Document.TextSegment.Length">
      <summary>
            Gets/Sets the length of the segment.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Document.TextSegment.OnSegmentChanged">
      <summary>
            This method gets called when the StartOffset/Length/EndOffset properties are set.
            It is not called when StartOffset/Length/EndOffset change due to document changes
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Document.TextSegment.StartOffset">
      <summary>
            Gets/Sets the start offset of the segment.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Document.TextSegment.ToString">
      <summary>Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.</summary>
      <returns>A <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.</returns>
    </member>
    <member name="T:ICSharpCode.AvalonEdit.Document.TextSegmentCollection`1">
      <summary>
        <para>
            A collection of text segments that supports efficient lookup of segments
            intersecting with another segment.
            </para>
      </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Document.TextSegmentCollection`1.#ctor">
      <summary>
            Creates a new TextSegmentCollection that needs manual calls to <see cref="M:ICSharpCode.AvalonEdit.Document.TextSegmentCollection`1.UpdateOffsets(ICSharpCode.AvalonEdit.Document.DocumentChangeEventArgs)" />.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Document.TextSegmentCollection`1.#ctor(ICSharpCode.AvalonEdit.Document.TextDocument)">
      <summary>
            Creates a new TextSegmentCollection that updates the offsets automatically.
            </summary>
      <param name="textDocument">The document to which the text segments
            that will be added to the tree belong. When the document changes, the
            position of the text segments will be updated accordingly.</param>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Document.TextSegmentCollection`1.Add(`0)">
      <summary>
            Adds the specified segment to the tree. This will cause the segment to update when the
            document changes.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Document.TextSegmentCollection`1.Clear">
      <summary>
            Removes all segments from the tree.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Document.TextSegmentCollection`1.Contains(`0)">
      <summary>
            Gets whether this tree contains the specified item.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Document.TextSegmentCollection`1.CopyTo(`0[],System.Int32)">
      <summary>
            Copies all segments in this SegmentTree to the specified array.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Document.TextSegmentCollection`1.Count">
      <summary>
            Gets the number of segments in the tree.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Document.TextSegmentCollection`1.FindFirstSegmentWithStartAfter(System.Int32)">
      <summary>
            Gets the first segment with a start offset greater or equal to <paramref name="startOffset" />.
            Returns null if no such segment is found.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Document.TextSegmentCollection`1.FindOverlappingSegments(ICSharpCode.AvalonEdit.Document.ISegment)">
      <summary>
            Finds all segments that overlap with the given segment (including touching segments).
            </summary>
      <returns>Returns a new collection containing the results of the query.
            This means it is safe to modify the TextSegmentCollection while iterating through the result collection.</returns>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Document.TextSegmentCollection`1.FindOverlappingSegments(System.Int32,System.Int32)">
      <summary>
            Finds all segments that overlap with the given segment (including touching segments).
            Segments are returned in the order given by GetNextSegment/GetPreviousSegment.
            </summary>
      <returns>Returns a new collection containing the results of the query.
            This means it is safe to modify the TextSegmentCollection while iterating through the result collection.</returns>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Document.TextSegmentCollection`1.FindSegmentsContaining(System.Int32)">
      <summary>
            Finds all segments that contain the given offset.
            (StartOffset &lt;= offset &lt;= EndOffset)
            Segments are returned in the order given by GetNextSegment/GetPreviousSegment.
            </summary>
      <returns>Returns a new collection containing the results of the query.
            This means it is safe to modify the TextSegmentCollection while iterating through the result collection.</returns>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Document.TextSegmentCollection`1.FirstSegment">
      <summary>
            Returns the first segment in the collection or null, if the collection is empty.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Document.TextSegmentCollection`1.GetEnumerator">
      <summary>
            Gets an enumerator to enumerate the segments.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Document.TextSegmentCollection`1.GetNextSegment(`0)">
      <summary>
            Gets the next segment after the specified segment.
            Segments are sorted by their start offset.
            Returns null if segment is the last segment.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Document.TextSegmentCollection`1.GetPreviousSegment(`0)">
      <summary>
            Gets the previous segment before the specified segment.
            Segments are sorted by their start offset.
            Returns null if segment is the first segment.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Document.TextSegmentCollection`1.LastSegment">
      <summary>
            Returns the last segment in the collection or null, if the collection is empty.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Document.TextSegmentCollection`1.Remove(`0)">
      <summary>
            Removes the specified segment from the tree. This will cause the segment to not update
            anymore when the document changes.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Document.TextSegmentCollection`1.UpdateOffsets(ICSharpCode.AvalonEdit.Document.DocumentChangeEventArgs)">
      <summary>
            Updates the start and end offsets of all segments stored in this collection.
            </summary>
      <param name="e">DocumentChangeEventArgs instance describing the change to the document.</param>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Document.TextSegmentCollection`1.UpdateOffsets(ICSharpCode.AvalonEdit.Document.OffsetChangeMapEntry)">
      <summary>
            Updates the start and end offsets of all segments stored in this collection.
            </summary>
      <param name="change">OffsetChangeMapEntry instance describing the change to the document.</param>
    </member>
    <member name="T:ICSharpCode.AvalonEdit.Document.TextSourceView">
      <summary>
            Implements the ITextSource interface by wrapping another TextSource
            and viewing only a part of the text.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Document.TextSourceView.#ctor(ICSharpCode.AvalonEdit.Document.ITextSource,ICSharpCode.AvalonEdit.Document.ISegment)">
      <summary>
            Creates a new TextSourceView object.
            </summary>
      <param name="baseTextSource">The base text source.</param>
      <param name="viewedSegment">A text segment from the base text source</param>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Document.TextSourceView.CreateReader">
      <summary>
            Creates a text reader.
            If the text is changed while a reader is active, the reader will continue to read from the old text version.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Document.TextSourceView.CreateSnapshot">
      <summary>
            Creates a snapshot of the current text.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Document.TextSourceView.CreateSnapshot(System.Int32,System.Int32)">
      <summary>
            Creates a snapshot of a part of the current text.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Document.TextSourceView.GetCharAt(System.Int32)">
      <summary>
            Gets a character at the specified position in the document.
            </summary>
      <returns>The character at the specified position.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">Offset is outside the valid range (0 to TextLength-1).</exception>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Document.TextSourceView.GetText(System.Int32,System.Int32)">
      <summary>
            Retrieves the text for a portion of the document.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">offset or length is outside the valid range.</exception>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Document.TextSourceView.IndexOfAny(System.Char[],System.Int32,System.Int32)">
      <summary>
            Gets the index of the first occurrence of any character in the specified array.
            </summary>
      <param name="anyOf"></param>
      <param name="startIndex">Start index of the search.</param>
      <param name="count">Length of the area to search.</param>
      <returns>The first index where any character was found; or -1 if no occurrence was found.</returns>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Document.TextSourceView.Text">
      <summary>
            Gets the whole text as string.
            </summary>
    </member>
    <member name="E:ICSharpCode.AvalonEdit.Document.TextSourceView.TextChanged">
      <summary>
            Is raised when the Text property changes.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Document.TextSourceView.TextLength">
      <summary>
            Gets the total text length.
            </summary>
      <returns>The length of the text, in characters.</returns>
    </member>
    <member name="T:ICSharpCode.AvalonEdit.Document.TextUtilities">
      <summary>
            Static helper methods for working with text.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Document.TextUtilities.FindNextNewLine(ICSharpCode.AvalonEdit.Document.ITextSource,System.Int32,System.String@)">
      <summary>
            Finds the next new line character starting at offset.
            </summary>
      <param name="text">The text source to search in.</param>
      <param name="offset">The starting offset for the search.</param>
      <param name="newLineType">The string representing the new line that was found, or null if no new line was found.</param>
      <returns>The position of the first new line starting at or after <paramref name="offset" />,
            or -1 if no new line was found.</returns>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Document.TextUtilities.GetCharacterClass(System.Char)">
      <summary>
            Gets whether the character is whitespace, part of an identifier, or line terminator.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Document.TextUtilities.GetControlCharacterName(System.Char)">
      <summary>
            Gets the name of the control character.
            For unknown characters, the unicode codepoint is returned as 4-digit hexadecimal value.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Document.TextUtilities.GetLeadingWhitespace(ICSharpCode.AvalonEdit.Document.TextDocument,ICSharpCode.AvalonEdit.Document.DocumentLine)">
      <summary>
            Gets the leading whitespace segment on the document line.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Document.TextUtilities.GetNewLineFromDocument(ICSharpCode.AvalonEdit.Document.TextDocument,System.Int32)">
      <summary>
            Gets the newline sequence used in the document at the specified line.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Document.TextUtilities.GetNextCaretPosition(ICSharpCode.AvalonEdit.Document.ITextSource,System.Int32,System.Windows.Documents.LogicalDirection,ICSharpCode.AvalonEdit.Document.CaretPositioningMode)">
      <summary>
            Gets the next caret position.
            </summary>
      <param name="textSource">The text source.</param>
      <param name="offset">The start offset inside the text source.</param>
      <param name="direction">The search direction (forwards or backwards).</param>
      <param name="mode">The mode for caret positioning.</param>
      <returns>The offset of the next caret position, or -1 if there is no further caret position
            in the text source.</returns>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Document.TextUtilities.GetSingleIndentationSegment(ICSharpCode.AvalonEdit.Document.ITextSource,System.Int32,System.Int32)">
      <summary>
            Gets a single indentation segment starting at <paramref name="offset" /> - at most one tab
            or <paramref name="indentationSize" /> spaces.
            </summary>
      <param name="textSource">The text source.</param>
      <param name="offset">The offset where the indentation segment starts.</param>
      <param name="indentationSize">The size of an indentation unit. See <see cref="P:ICSharpCode.AvalonEdit.TextEditorOptions.IndentationSize" />.</param>
      <returns>The indentation segment.
            If there is no indentation character at the specified <paramref name="offset" />,
            an empty segment is returned.</returns>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Document.TextUtilities.GetTrailingWhitespace(ICSharpCode.AvalonEdit.Document.TextDocument,ICSharpCode.AvalonEdit.Document.DocumentLine)">
      <summary>
            Gets the trailing whitespace segment on the document line.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Document.TextUtilities.GetWhitespaceAfter(ICSharpCode.AvalonEdit.Document.ITextSource,System.Int32)">
      <summary>
            Gets all whitespace (' ' and '\t', but no newlines) after offset.
            </summary>
      <param name="textSource">The text source.</param>
      <param name="offset">The offset where the whitespace starts.</param>
      <returns>The segment containing the whitespace.</returns>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Document.TextUtilities.GetWhitespaceBefore(ICSharpCode.AvalonEdit.Document.ITextSource,System.Int32)">
      <summary>
            Gets all whitespace (' ' and '\t', but no newlines) before offset.
            </summary>
      <param name="textSource">The text source.</param>
      <param name="offset">The offset where the whitespace ends.</param>
      <returns>The segment containing the whitespace.</returns>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Document.TextUtilities.IsNewLine(System.String)">
      <summary>
            Gets whether the specified string is a newline sequence.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Document.TextUtilities.NormalizeNewLines(System.String,System.String)">
      <summary>
            Normalizes all new lines in <paramref name="input" /> to be <paramref name="newLine" />.
            </summary>
    </member>
    <member name="T:ICSharpCode.AvalonEdit.Document.UndoStack">
      <summary>
            Undo stack implementation.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Document.UndoStack.#ctor">
      <summary>Initializes a new instance of the <see cref="T:ICSharpCode.AvalonEdit.Document.UndoStack" /> class</summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Document.UndoStack.AcceptChanges">
      <summary>
            Gets if the undo stack currently accepts changes.
            Is false while an undo action is running.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Document.UndoStack.CanRedo">
      <summary>
            Gets if there are actions on the redo stack.
            Use the PropertyChanged event to listen to changes of this property.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Document.UndoStack.CanUndo">
      <summary>
            Gets if there are actions on the undo stack.
            Use the PropertyChanged event to listen to changes of this property.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Document.UndoStack.ClearAll">
      <summary>
            Clears both the undo and redo stack.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Document.UndoStack.ClearRedoStack">
      <summary>
            Call this method, if you want to clear the redo stack
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Document.UndoStack.DiscardOriginalFileMarker">
      <summary>
            Discards the current "original" marker.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Document.UndoStack.EndUndoGroup">
      <summary>
            Stops grouping changes.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Document.UndoStack.IsOriginalFile">
      <summary>
            Gets whether the document is currently in its original state (no modifications).
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Document.UndoStack.LastGroupDescriptor">
      <summary>
            If an undo group is open, gets the group descriptor of the current top-level
            undo group.
            If no undo group is open, gets the group descriptor from the previous undo group.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Document.UndoStack.MarkAsOriginalFile">
      <summary>
            Marks the current state as original. Discards any previous "original" markers.
            </summary>
    </member>
    <member name="E:ICSharpCode.AvalonEdit.Document.UndoStack.PropertyChanged">
      <summary>
            Is raised when a property (CanUndo, CanRedo) changed.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Document.UndoStack.Push(ICSharpCode.AvalonEdit.Document.IUndoableOperation)">
      <summary>
            Call this method to push an UndoableOperation on the undostack.
            The redostack will be cleared if you use this method.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Document.UndoStack.PushOptional(ICSharpCode.AvalonEdit.Document.IUndoableOperation)">
      <summary>
            Call this method to push an UndoableOperation on the undostack.
            However, the operation will be only stored if the undo group contains a
            non-optional operation.
            Use this method to store the caret position/selection on the undo stack to
            prevent having only actions that affect only the caret and not the document.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Document.UndoStack.Redo">
      <summary>
            Call this method to redo the last undone operation
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Document.UndoStack.SizeLimit">
      <summary>
            Gets/Sets the limit on the number of items on the undo stack.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Document.UndoStack.StartContinuedUndoGroup(System.Object)">
      <summary>
            Starts grouping changes, continuing with the previously closed undo group if possible.
            Maintains a counter so that nested calls are possible.
            If the call to StartContinuedUndoGroup is a nested call, it behaves exactly
            as <see cref="M:ICSharpCode.AvalonEdit.Document.UndoStack.StartUndoGroup" />, only top-level calls can continue existing undo groups.
            </summary>
      <param name="groupDescriptor">An object that is stored with the undo group.
            If this is not a top-level undo group, the parameter is ignored.</param>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Document.UndoStack.StartUndoGroup">
      <summary>
            Starts grouping changes.
            Maintains a counter so that nested calls are possible.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Document.UndoStack.StartUndoGroup(System.Object)">
      <summary>
            Starts grouping changes.
            Maintains a counter so that nested calls are possible.
            </summary>
      <param name="groupDescriptor">An object that is stored with the undo group.
            If this is not a top-level undo group, the parameter is ignored.</param>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Document.UndoStack.Undo">
      <summary>
            Call this method to undo the last operation on the stack
            </summary>
    </member>
    <member name="T:ICSharpCode.AvalonEdit.Document.WeakLineTracker">
      <summary>
            Allows registering a line tracker on a TextDocument using a weak reference from the document to the line tracker.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Document.WeakLineTracker.Deregister">
      <summary>
            Deregisters the weak line tracker.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Document.WeakLineTracker.Register(ICSharpCode.AvalonEdit.Document.TextDocument,ICSharpCode.AvalonEdit.Document.ILineTracker)">
      <summary>
            Registers the <paramref name="targetTracker" /> as line tracker for the <paramref name="textDocument" />.
            A weak reference to the target tracker will be used, and the WeakLineTracker will deregister itself
            when the target tracker is garbage collected.
            </summary>
    </member>
    <member name="T:ICSharpCode.AvalonEdit.Editing.AbstractMargin">
      <summary>
            Base class for margins.
            Margins don't have to derive from this class, it just helps maintaining a reference to the TextView
            and the TextDocument.
            AbstractMargin derives from FrameworkElement, so if you don't want to handle visual children and rendering
            on your own, choose another base class for your margin!
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Editing.AbstractMargin.#ctor">
      <summary>Initializes a new instance of the <see cref="T:ICSharpCode.AvalonEdit.Editing.AbstractMargin" /> class</summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Editing.AbstractMargin.Document">
      <summary>
            Gets the document associated with the margin.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Editing.AbstractMargin.OnDocumentChanged(ICSharpCode.AvalonEdit.Document.TextDocument,ICSharpCode.AvalonEdit.Document.TextDocument)">
      <summary>
            Called when the <see cref="P:ICSharpCode.AvalonEdit.Editing.AbstractMargin.Document" /> is changing.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Editing.AbstractMargin.OnTextViewChanged(ICSharpCode.AvalonEdit.Rendering.TextView,ICSharpCode.AvalonEdit.Rendering.TextView)">
      <summary>
            Called when the <see cref="P:ICSharpCode.AvalonEdit.Editing.AbstractMargin.TextView" /> is changing.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Editing.AbstractMargin.TextView">
      <summary>
            Gets/sets the text view for which line numbers are displayed.
            </summary>
    </member>
    <member name="F:ICSharpCode.AvalonEdit.Editing.AbstractMargin.TextViewProperty">
      <summary>
            TextView property.
            </summary>
    </member>
    <member name="T:ICSharpCode.AvalonEdit.Editing.Caret">
      <summary>
            Helper class with caret-related methods.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Editing.Caret.BringCaretToView">
      <summary>
            Scrolls the text view so that the caret is visible.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Editing.Caret.CalculateCaretRectangle">
      <summary>
            Returns the caret rectangle. The coordinate system is in device-independent pixels from the top of the document.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Editing.Caret.CaretBrush">
      <summary>
            Gets/Sets the color of the caret.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Editing.Caret.Column">
      <summary>
            Gets/Sets the caret column.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Editing.Caret.DesiredXPos">
      <summary>
            Gets/Sets the desired x-position of the caret, in device-independent pixels.
            This property is NaN if the caret has no desired position.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Editing.Caret.Hide">
      <summary>
            Makes the caret invisible.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Editing.Caret.IsInVirtualSpace">
      <summary>
            Gets whether the caret is in virtual space.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Editing.Caret.Line">
      <summary>
            Gets/Sets the caret line.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Editing.Caret.Location">
      <summary>
            Gets/Sets the location of the caret.
            The getter of this property is faster than <see cref="P:ICSharpCode.AvalonEdit.Editing.Caret.Position" /> because it doesn't have
            to validate the visual column.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Editing.Caret.Offset">
      <summary>
            Gets/Sets the caret offset.
            Setting the caret offset has the side effect of setting the <see cref="P:ICSharpCode.AvalonEdit.Editing.Caret.DesiredXPos" /> to NaN.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Editing.Caret.Position">
      <summary>
            Gets/Sets the position of the caret.
            Retrieving this property will validate the visual column (which can be expensive).
            Use the <see cref="P:ICSharpCode.AvalonEdit.Editing.Caret.Location" /> property instead if you don't need the visual column.
            </summary>
    </member>
    <member name="E:ICSharpCode.AvalonEdit.Editing.Caret.PositionChanged">
      <summary>
            Event raised when the caret position has changed.
            If the caret position is changed inside a document update (between BeginUpdate/EndUpdate calls),
            the PositionChanged event is raised only once at the end of the document update.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Editing.Caret.Show">
      <summary>
            Makes the caret visible and updates its on-screen position.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Editing.Caret.VisualColumn">
      <summary>
            Gets/Sets the caret visual column.
            </summary>
    </member>
    <member name="T:ICSharpCode.AvalonEdit.Editing.CaretWeakEventManager">
      <summary>
            Contains classes for handling weak events on the Caret class.
            </summary>
    </member>
    <member name="T:ICSharpCode.AvalonEdit.Editing.CaretWeakEventManager.PositionChanged">
      <summary>
            Handles the Caret.PositionChanged event.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Editing.CaretWeakEventManager.PositionChanged.#ctor">
      <summary>Initializes a new instance of the <see cref="T:ICSharpCode.AvalonEdit.Editing.CaretWeakEventManager.PositionChanged" /> class</summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Editing.CaretWeakEventManager.PositionChanged.StartListening(ICSharpCode.AvalonEdit.Editing.Caret)">
      <summary>
            Attaches the event handler.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Editing.CaretWeakEventManager.PositionChanged.StopListening(ICSharpCode.AvalonEdit.Editing.Caret)">
      <summary>
            Detaches the event handler.
            </summary>
    </member>
    <member name="T:ICSharpCode.AvalonEdit.Editing.DottedLineMargin">
      <summary>
            Margin for use with the text area.
            A vertical dotted line to separate the line numbers from the text view.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Editing.DottedLineMargin.Create">
      <summary>
            Creates a vertical dotted line to separate the line numbers from the text view.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Editing.DottedLineMargin.Create(ICSharpCode.AvalonEdit.TextEditor)">
      <summary>
            Creates a vertical dotted line to separate the line numbers from the text view.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Editing.DottedLineMargin.IsDottedLineMargin(System.Windows.UIElement)">
      <summary>
            Gets whether the specified UIElement is the result of a DottedLineMargin.Create call.
            </summary>
    </member>
    <member name="T:ICSharpCode.AvalonEdit.Editing.DragDropException">
      <summary>
            Wraps exceptions that occur during drag'n'drop.
            Exceptions during drag'n'drop might
            get swallowed by WPF/COM, so AvalonEdit catches them and re-throws them later
            wrapped in a DragDropException.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Editing.DragDropException.#ctor">
      <summary>
            Creates a new DragDropException.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Editing.DragDropException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Deserializes a DragDropException.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Editing.DragDropException.#ctor(System.String)">
      <summary>
            Creates a new DragDropException.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Editing.DragDropException.#ctor(System.String,System.Exception)">
      <summary>
            Creates a new DragDropException.
            </summary>
    </member>
    <member name="T:ICSharpCode.AvalonEdit.Editing.IReadOnlySectionProvider">
      <summary>
            Determines whether the document can be modified.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Editing.IReadOnlySectionProvider.CanInsert(System.Int32)">
      <summary>
            Gets whether insertion is possible at the specified offset.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Editing.IReadOnlySectionProvider.GetDeletableSegments(ICSharpCode.AvalonEdit.Document.ISegment)">
      <summary>
            Gets the deletable segments inside the given segment.
            </summary>
    </member>
    <member name="T:ICSharpCode.AvalonEdit.Editing.ITextAreaInputHandler">
      <summary>
            A set of input bindings and event handlers for the text area.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Editing.ITextAreaInputHandler.Attach">
      <summary>
            Attaches an input handler to the text area.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Editing.ITextAreaInputHandler.Detach">
      <summary>
            Detaches the input handler from the text area.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Editing.ITextAreaInputHandler.TextArea">
      <summary>
            Gets the text area that the input handler belongs to.
            </summary>
    </member>
    <member name="T:ICSharpCode.AvalonEdit.Editing.LineNumberMargin">
      <summary>
            Margin showing line numbers.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Editing.LineNumberMargin.#ctor">
      <summary>Initializes a new instance of the <see cref="T:ICSharpCode.AvalonEdit.Editing.LineNumberMargin" /> class</summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Editing.LineNumberMargin.HitTestCore(System.Windows.Media.PointHitTestParameters)">
      <summary> Implements <see cref="M:System.Windows.Media.Visual.HitTestCore(System.Windows.Media.PointHitTestParameters)" /> to supply base element hit testing behavior (returning <see cref="T:System.Windows.Media.HitTestResult" />). </summary>
      <param name="hitTestParameters">Describes the hit test to perform, including the initial hit point.</param>
      <returns>Results of the test, including the evaluated point.</returns>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Editing.LineNumberMargin.MeasureOverride(System.Windows.Size)">
      <summary>When overridden in a derived class, measures the size in layout required for child elements and determines a size for the <see cref="T:System.Windows.FrameworkElement" />-derived class. </summary>
      <param name="availableSize">The available size that this element can give to child elements. Infinity can be specified as a value to indicate that the element will size to whatever content is available.</param>
      <returns>The size that this element determines it needs during layout, based on its calculations of child element sizes.</returns>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Editing.LineNumberMargin.OnDocumentChanged(ICSharpCode.AvalonEdit.Document.TextDocument,ICSharpCode.AvalonEdit.Document.TextDocument)">
      <summary>
            Called when the <see cref="P:ICSharpCode.AvalonEdit.Editing.AbstractMargin.Document" /> is changing.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Editing.LineNumberMargin.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.UIElement.MouseLeftButtonDown" /> routed event is raised on this element. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> that contains the event data. The event data reports that the left mouse button was pressed.</param>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Editing.LineNumberMargin.OnMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.UIElement.MouseLeftButtonUp" /> routed event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> that contains the event data. The event data reports that the left mouse button was released.</param>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Editing.LineNumberMargin.OnMouseMove(System.Windows.Input.MouseEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.MouseMove" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.MouseEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Editing.LineNumberMargin.OnRender(System.Windows.Media.DrawingContext)">
      <summary>When overridden in a derived class, participates in rendering operations that are directed by the layout system. The rendering instructions for this element are not used directly when this method is invoked, and are instead preserved for later asynchronous use by layout and drawing. </summary>
      <param name="drawingContext">The drawing instructions for a specific element. This context is provided to the layout system.</param>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Editing.LineNumberMargin.OnTextViewChanged(ICSharpCode.AvalonEdit.Rendering.TextView,ICSharpCode.AvalonEdit.Rendering.TextView)">
      <summary>
            Called when the <see cref="P:ICSharpCode.AvalonEdit.Editing.AbstractMargin.TextView" /> is changing.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Editing.LineNumberMargin.ReceiveWeakEvent(System.Type,System.Object,System.EventArgs)">
      <summary>Receives events from the centralized event manager.</summary>
      <param name="managerType">The type of the <see cref="T:System.Windows.WeakEventManager" /> calling this method.</param>
      <param name="sender">Object that originated the event.</param>
      <param name="e">Event data.</param>
      <returns>true if the listener handled the event. It is considered an error by the <see cref="T:System.Windows.WeakEventManager" /> handling in WPF to register a listener for an event that the listener does not handle. Regardless, the method should return false if it receives an event that it does not recognize or handle.</returns>
    </member>
    <member name="T:ICSharpCode.AvalonEdit.Editing.RectangleSelection">
      <summary>
            Rectangular selection ("box selection").
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Editing.RectangleSelection.#ctor(ICSharpCode.AvalonEdit.Editing.TextArea,ICSharpCode.AvalonEdit.TextViewPosition,ICSharpCode.AvalonEdit.TextViewPosition)">
      <summary>
            Creates a new rectangular selection.
            </summary>
    </member>
    <member name="F:ICSharpCode.AvalonEdit.Editing.RectangleSelection.BoxSelectDownByLine">
      <summary>
            Expands the selection up by one line, creating a rectangular selection.
            Key gesture: Alt+Shift+Down
            </summary>
    </member>
    <member name="F:ICSharpCode.AvalonEdit.Editing.RectangleSelection.BoxSelectLeftByCharacter">
      <summary>
            Expands the selection left by one character, creating a rectangular selection.
            Key gesture: Alt+Shift+Left
            </summary>
    </member>
    <member name="F:ICSharpCode.AvalonEdit.Editing.RectangleSelection.BoxSelectLeftByWord">
      <summary>
            Expands the selection left by one word, creating a rectangular selection.
            Key gesture: Ctrl+Alt+Shift+Left
            </summary>
    </member>
    <member name="F:ICSharpCode.AvalonEdit.Editing.RectangleSelection.BoxSelectRightByCharacter">
      <summary>
            Expands the selection right by one character, creating a rectangular selection.
            Key gesture: Alt+Shift+Right
            </summary>
    </member>
    <member name="F:ICSharpCode.AvalonEdit.Editing.RectangleSelection.BoxSelectRightByWord">
      <summary>
            Expands the selection left by one word, creating a rectangular selection.
            Key gesture: Ctrl+Alt+Shift+Right
            </summary>
    </member>
    <member name="F:ICSharpCode.AvalonEdit.Editing.RectangleSelection.BoxSelectToLineEnd">
      <summary>
            Expands the selection to the end of the line, creating a rectangular selection.
            Key gesture: Alt+Shift+End
            </summary>
    </member>
    <member name="F:ICSharpCode.AvalonEdit.Editing.RectangleSelection.BoxSelectToLineStart">
      <summary>
            Expands the selection to the start of the line, creating a rectangular selection.
            Key gesture: Alt+Shift+Home
            </summary>
    </member>
    <member name="F:ICSharpCode.AvalonEdit.Editing.RectangleSelection.BoxSelectUpByLine">
      <summary>
            Expands the selection up by one line, creating a rectangular selection.
            Key gesture: Alt+Shift+Up
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Editing.RectangleSelection.CreateDataObject(ICSharpCode.AvalonEdit.Editing.TextArea)">
      <summary>
            Creates a data object containing the selection's text.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Editing.RectangleSelection.EnableVirtualSpace">
      <summary>
            Gets whether virtual space is enabled for this selection.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Editing.RectangleSelection.EndPosition">
      <summary>
            Gets the end position of the selection.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Editing.RectangleSelection.Equals(System.Object)">
      <summary>Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />.</summary>
      <param name="obj">The <see cref="T:System.Object" /> to compare with the current <see cref="T:System.Object" />. </param>
      <returns>true if the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />; otherwise, false.</returns>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Editing.RectangleSelection.GetHashCode">
      <summary>Serves as a hash function for a particular type. </summary>
      <returns>A hash code for the current <see cref="T:System.Object" />.</returns>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Editing.RectangleSelection.GetText">
      <summary>
            Gets the selected text.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Editing.RectangleSelection.Length">
      <summary>
            Gets the selection length.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Editing.RectangleSelection.PerformRectangularPaste(ICSharpCode.AvalonEdit.Editing.TextArea,ICSharpCode.AvalonEdit.TextViewPosition,System.String,System.Boolean)">
      <summary>
            Performs a rectangular paste operation.
            </summary>
    </member>
    <member name="F:ICSharpCode.AvalonEdit.Editing.RectangleSelection.RectangularSelectionDataType">
      <summary>
            Gets the name of the entry in the DataObject that signals rectangle selections.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Editing.RectangleSelection.ReplaceSelectionWithText(System.String)">
      <summary>
            Replaces the selection with the specified text.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Editing.RectangleSelection.Segments">
      <summary>
            Gets the selected text segments.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Editing.RectangleSelection.SetEndpoint(ICSharpCode.AvalonEdit.TextViewPosition)">
      <summary>
            Returns a new selection with the changed end point.
            </summary>
      <exception cref="T:System.NotSupportedException">Cannot set endpoint for empty selection</exception>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Editing.RectangleSelection.StartPosition">
      <summary>
            Gets the start position of the selection.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Editing.RectangleSelection.StartSelectionOrSetEndpoint(ICSharpCode.AvalonEdit.TextViewPosition,ICSharpCode.AvalonEdit.TextViewPosition)">
      <summary>
            If this selection is empty, starts a new selection from <paramref name="startPosition" /> to
            <paramref name="endPosition" />, otherwise, changes the endpoint of this selection.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Editing.RectangleSelection.SurroundingSegment">
      <summary>
            Gets the smallest segment that contains all segments in this selection.
            May return null if the selection is empty.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Editing.RectangleSelection.ToString">
      <summary>Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.</summary>
      <returns>A <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.</returns>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Editing.RectangleSelection.UpdateOnDocumentChange(ICSharpCode.AvalonEdit.Document.DocumentChangeEventArgs)">
      <summary>
            Updates the selection when the document changes.
            </summary>
    </member>
    <member name="T:ICSharpCode.AvalonEdit.Editing.Selection">
      <summary>
            Base class for selections.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Editing.Selection.#ctor(ICSharpCode.AvalonEdit.Editing.TextArea)">
      <summary>
            Constructor for Selection.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Editing.Selection.Contains(System.Int32)">
      <summary>
            Gets whether the specified offset is included in the selection.
            </summary>
      <returns>True, if the selection contains the offset (selection borders inclusive);
            otherwise, false.</returns>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Editing.Selection.Create(ICSharpCode.AvalonEdit.Editing.TextArea,ICSharpCode.AvalonEdit.Document.ISegment)">
      <summary>
            Creates a new simple selection that selects the text in the specified segment.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Editing.Selection.Create(ICSharpCode.AvalonEdit.Editing.TextArea,System.Int32,System.Int32)">
      <summary>
            Creates a new simple selection that selects the text from startOffset to endOffset.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Editing.Selection.CreateDataObject(ICSharpCode.AvalonEdit.Editing.TextArea)">
      <summary>
            Creates a data object containing the selection's text.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Editing.Selection.CreateHtmlFragment(ICSharpCode.AvalonEdit.Highlighting.HtmlOptions)">
      <summary>
            Creates a HTML fragment for the selected text.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Editing.Selection.EnableVirtualSpace">
      <summary>
            Gets whether virtual space is enabled for this selection.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Editing.Selection.EndPosition">
      <summary>
            Gets the end position of the selection.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Editing.Selection.Equals(System.Object)">
      <summary>Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />.</summary>
      <param name="obj">The <see cref="T:System.Object" /> to compare with the current <see cref="T:System.Object" />. </param>
      <returns>true if the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />; otherwise, false.</returns>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Editing.Selection.GetHashCode">
      <summary>Serves as a hash function for a particular type. </summary>
      <returns>A hash code for the current <see cref="T:System.Object" />.</returns>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Editing.Selection.GetText">
      <summary>
            Gets the selected text.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Editing.Selection.IsEmpty">
      <summary>
            Gets whether the selection is empty.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Editing.Selection.IsMultiline">
      <summary>
            Gets whether the selection is multi-line.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Editing.Selection.Length">
      <summary>
            Gets the selection length.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Editing.Selection.ReplaceSelectionWithText(System.String)">
      <summary>
            Replaces the selection with the specified text.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Editing.Selection.Segments">
      <summary>
            Gets the selected text segments.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Editing.Selection.SetEndpoint(ICSharpCode.AvalonEdit.TextViewPosition)">
      <summary>
            Returns a new selection with the changed end point.
            </summary>
      <exception cref="T:System.NotSupportedException">Cannot set endpoint for empty selection</exception>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Editing.Selection.StartPosition">
      <summary>
            Gets the start position of the selection.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Editing.Selection.StartSelectionOrSetEndpoint(ICSharpCode.AvalonEdit.TextViewPosition,ICSharpCode.AvalonEdit.TextViewPosition)">
      <summary>
            If this selection is empty, starts a new selection from <paramref name="startPosition" /> to
            <paramref name="endPosition" />, otherwise, changes the endpoint of this selection.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Editing.Selection.SurroundingSegment">
      <summary>
            Gets the smallest segment that contains all segments in this selection.
            May return null if the selection is empty.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Editing.Selection.UpdateOnDocumentChange(ICSharpCode.AvalonEdit.Document.DocumentChangeEventArgs)">
      <summary>
            Updates the selection when the document changes.
            </summary>
    </member>
    <member name="T:ICSharpCode.AvalonEdit.Editing.SelectionSegment">
      <summary>
            Represents a selected segment.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Editing.SelectionSegment.#ctor(System.Int32,System.Int32)">
      <summary>
            Creates a SelectionSegment from two offsets.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Editing.SelectionSegment.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
            Creates a SelectionSegment from two offsets and visual columns.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Editing.SelectionSegment.EndOffset">
      <summary>
            Gets the end offset.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Editing.SelectionSegment.EndVisualColumn">
      <summary>
            Gets the end visual column.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Editing.SelectionSegment.Length">
      <summary>
            Gets the length of the segment.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Editing.SelectionSegment.StartOffset">
      <summary>
            Gets the start offset.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Editing.SelectionSegment.StartVisualColumn">
      <summary>
            Gets the start visual column.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Editing.SelectionSegment.ToString">
      <summary>Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.</summary>
      <returns>A <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.</returns>
    </member>
    <member name="T:ICSharpCode.AvalonEdit.Editing.TextArea">
      <summary>
            Control that wraps a TextView and adds support for user input and the caret.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Editing.TextArea.#ctor">
      <summary>
            Creates a new TextArea instance.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Editing.TextArea.#ctor(ICSharpCode.AvalonEdit.Rendering.TextView)">
      <summary>
            Creates a new TextArea instance.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Editing.TextArea.ActiveInputHandler">
      <summary>
            Gets/Sets the active input handler.
            This property does not return currently active stacked input handlers. Setting this property detached all stacked input handlers.
            </summary>
    </member>
    <member name="E:ICSharpCode.AvalonEdit.Editing.TextArea.ActiveInputHandlerChanged">
      <summary>
            Occurs when the ActiveInputHandler property changes.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Editing.TextArea.AllowCaretOutsideSelection">
      <summary>
            Temporarily allows positioning the caret outside the selection.
            Dispose the returned IDisposable to revert the allowance.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Editing.TextArea.Caret">
      <summary>
            Gets the Caret used for this text area.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Editing.TextArea.ClearSelection">
      <summary>
            Clears the current selection.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Editing.TextArea.DefaultInputHandler">
      <summary>
            Gets the default input handler.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Editing.TextArea.Document">
      <summary>
            Gets/Sets the document displayed by the text editor.
            </summary>
    </member>
    <member name="E:ICSharpCode.AvalonEdit.Editing.TextArea.DocumentChanged">
      <summary>
            Occurs when the Document property changes (when the text editor is connected to another
            document - not when the document content changes).
            </summary>
    </member>
    <member name="F:ICSharpCode.AvalonEdit.Editing.TextArea.DocumentProperty">
      <summary>
            Document property.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Editing.TextArea.GetService(System.Type)">
      <summary>
            Gets the requested service.
            </summary>
      <returns>Returns the requested service instance, or null if the service cannot be found.</returns>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Editing.TextArea.HitTestCore(System.Windows.Media.PointHitTestParameters)">
      <summary> Implements <see cref="M:System.Windows.Media.Visual.HitTestCore(System.Windows.Media.PointHitTestParameters)" /> to supply base element hit testing behavior (returning <see cref="T:System.Windows.Media.HitTestResult" />). </summary>
      <param name="hitTestParameters">Describes the hit test to perform, including the initial hit point.</param>
      <returns>Results of the test, including the evaluated point.</returns>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Editing.TextArea.IndentationStrategy">
      <summary>
            Gets/Sets the indentation strategy used when inserting new lines.
            </summary>
    </member>
    <member name="F:ICSharpCode.AvalonEdit.Editing.TextArea.IndentationStrategyProperty">
      <summary>
            IndentationStrategy property.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Editing.TextArea.LeftMargins">
      <summary>
            Gets the collection of margins displayed to the left of the text view.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Editing.TextArea.OnApplyTemplate">
      <summary>When overridden in a derived class, is invoked whenever application code or internal processes call <see cref="M:System.Windows.FrameworkElement.ApplyTemplate" />.</summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Editing.TextArea.OnGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Keyboard.GotKeyboardFocus" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.KeyboardFocusChangedEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Editing.TextArea.OnKeyDown(System.Windows.Input.KeyEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Keyboard.KeyDown" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.KeyEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Editing.TextArea.OnKeyUp(System.Windows.Input.KeyEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Keyboard.KeyUp" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.KeyEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Editing.TextArea.OnLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Keyboard.LostKeyboardFocus" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.KeyboardFocusChangedEventArgs" /> that contains event data.</param>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Editing.TextArea.OnMouseDown(System.Windows.Input.MouseButtonEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.MouseDown" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> that contains the event data. This event data reports details about the mouse button that was pressed and the handled state.</param>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Editing.TextArea.OnOptionChanged(System.ComponentModel.PropertyChangedEventArgs)">
      <summary>
            Raises the <see cref="E:ICSharpCode.AvalonEdit.Editing.TextArea.OptionChanged" /> event.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Editing.TextArea.OnPreviewKeyDown(System.Windows.Input.KeyEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Keyboard.PreviewKeyDown" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.KeyEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Editing.TextArea.OnPreviewKeyUp(System.Windows.Input.KeyEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Keyboard.PreviewKeyUp" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.KeyEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Editing.TextArea.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
      <summary>Invoked whenever the effective value of any dependency property on this <see cref="T:System.Windows.FrameworkElement" /> has been updated. The specific dependency property that changed is reported in the arguments parameter. Overrides <see cref="M:System.Windows.DependencyObject.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)" />.</summary>
      <param name="e">The event data that describes the property that changed, as well as old and new values.</param>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Editing.TextArea.OnTextEntered(System.Windows.Input.TextCompositionEventArgs)">
      <summary>
            Raises the TextEntered event.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Editing.TextArea.OnTextEntering(System.Windows.Input.TextCompositionEventArgs)">
      <summary>
            Raises the TextEntering event.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Editing.TextArea.OnTextInput(System.Windows.Input.TextCompositionEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.TextCompositionManager.TextInput" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.TextCompositionEventArgs" /> that contains the event data.</param>
    </member>
    <member name="E:ICSharpCode.AvalonEdit.Editing.TextArea.OptionChanged">
      <summary>
            Occurs when a text editor option has changed.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Editing.TextArea.Options">
      <summary>
            Gets/Sets the document displayed by the text editor.
            </summary>
    </member>
    <member name="F:ICSharpCode.AvalonEdit.Editing.TextArea.OptionsProperty">
      <summary>
            Options property.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Editing.TextArea.PerformTextInput(System.String)">
      <summary>
            Performs text input.
            This raises the <see cref="E:ICSharpCode.AvalonEdit.Editing.TextArea.TextEntering" /> event, replaces the selection with the text,
            and then raises the <see cref="E:ICSharpCode.AvalonEdit.Editing.TextArea.TextEntered" /> event.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Editing.TextArea.PerformTextInput(System.Windows.Input.TextCompositionEventArgs)">
      <summary>
            Performs text input.
            This raises the <see cref="E:ICSharpCode.AvalonEdit.Editing.TextArea.TextEntering" /> event, replaces the selection with the text,
            and then raises the <see cref="E:ICSharpCode.AvalonEdit.Editing.TextArea.TextEntered" /> event.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Editing.TextArea.PopStackedInputHandler(ICSharpCode.AvalonEdit.Editing.TextAreaStackedInputHandler)">
      <summary>
            Pops the stacked input handler (and all input handlers above it).
            If <paramref name="inputHandler" /> is not found in the currently stacked input handlers, or is null, this method
            does nothing.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Editing.TextArea.PushStackedInputHandler(ICSharpCode.AvalonEdit.Editing.TextAreaStackedInputHandler)">
      <summary>
            Pushes an input handler onto the list of stacked input handlers.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Editing.TextArea.ReadOnlySectionProvider">
      <summary>
            Gets/Sets an object that provides read-only sections for the text area.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Editing.TextArea.ReceiveWeakEvent(System.Type,System.Object,System.EventArgs)">
      <summary>Receives events from the centralized event manager.</summary>
      <param name="managerType">The type of the <see cref="T:System.Windows.WeakEventManager" /> calling this method.</param>
      <param name="sender">Object that originated the event.</param>
      <param name="e">Event data.</param>
      <returns>true if the listener handled the event. It is considered an error by the <see cref="T:System.Windows.WeakEventManager" /> handling in WPF to register a listener for an event that the listener does not handle. Regardless, the method should return false if it receives an event that it does not recognize or handle.</returns>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Editing.TextArea.Selection">
      <summary>
            Gets/Sets the selection in this text area.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Editing.TextArea.SelectionBorder">
      <summary>
            Gets/Sets the background brush used for the selection.
            </summary>
    </member>
    <member name="F:ICSharpCode.AvalonEdit.Editing.TextArea.SelectionBorderProperty">
      <summary>
            The <see cref="P:ICSharpCode.AvalonEdit.Editing.TextArea.SelectionBorder" /> property.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Editing.TextArea.SelectionBrush">
      <summary>
            Gets/Sets the background brush used for the selection.
            </summary>
    </member>
    <member name="F:ICSharpCode.AvalonEdit.Editing.TextArea.SelectionBrushProperty">
      <summary>
            The <see cref="P:ICSharpCode.AvalonEdit.Editing.TextArea.SelectionBrush" /> property.
            </summary>
    </member>
    <member name="E:ICSharpCode.AvalonEdit.Editing.TextArea.SelectionChanged">
      <summary>
            Occurs when the selection has changed.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Editing.TextArea.SelectionCornerRadius">
      <summary>
            Gets/Sets the corner radius of the selection.
            </summary>
    </member>
    <member name="F:ICSharpCode.AvalonEdit.Editing.TextArea.SelectionCornerRadiusProperty">
      <summary>
            The <see cref="P:ICSharpCode.AvalonEdit.Editing.TextArea.SelectionCornerRadius" /> property.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Editing.TextArea.SelectionForeground">
      <summary>
            Gets/Sets the foreground brush used selected text.
            </summary>
    </member>
    <member name="F:ICSharpCode.AvalonEdit.Editing.TextArea.SelectionForegroundProperty">
      <summary>
            The <see cref="P:ICSharpCode.AvalonEdit.Editing.TextArea.SelectionForeground" /> property.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Editing.TextArea.StackedInputHandlers">
      <summary>
            Gets the list of currently active stacked input handlers.
            </summary>
    </member>
    <member name="E:ICSharpCode.AvalonEdit.Editing.TextArea.TextCopied">
      <summary>
            Occurs when text inside the TextArea was copied.
            </summary>
    </member>
    <member name="E:ICSharpCode.AvalonEdit.Editing.TextArea.TextEntered">
      <summary>
            Occurs when the TextArea receives text input.
            This is like the <see cref="E:System.Windows.UIElement.TextInput" /> event,
            but occurs immediately after the TextArea handles the TextInput event.
            </summary>
    </member>
    <member name="E:ICSharpCode.AvalonEdit.Editing.TextArea.TextEntering">
      <summary>
            Occurs when the TextArea receives text input.
            This is like the <see cref="E:System.Windows.UIElement.TextInput" /> event,
            but occurs immediately before the TextArea handles the TextInput event.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Editing.TextArea.TextView">
      <summary>
            Gets the text view used to display text in this text area.
            </summary>
    </member>
    <member name="T:ICSharpCode.AvalonEdit.Editing.TextAreaDefaultInputHandler">
      <summary>
            Contains the predefined input handlers.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Editing.TextAreaDefaultInputHandler.#ctor(ICSharpCode.AvalonEdit.Editing.TextArea)">
      <summary>
            Creates a new TextAreaDefaultInputHandler instance.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Editing.TextAreaDefaultInputHandler.CaretNavigation">
      <summary>
            Gets the caret navigation input handler.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Editing.TextAreaDefaultInputHandler.Editing">
      <summary>
            Gets the editing input handler.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Editing.TextAreaDefaultInputHandler.MouseSelection">
      <summary>
            Gets the mouse selection input handler.
            </summary>
    </member>
    <member name="T:ICSharpCode.AvalonEdit.Editing.TextAreaInputHandler">
      <summary>
            Default-implementation of <see cref="T:ICSharpCode.AvalonEdit.Editing.ITextAreaInputHandler" />.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Editing.TextAreaInputHandler.#ctor(ICSharpCode.AvalonEdit.Editing.TextArea)">
      <summary>
            Creates a new TextAreaInputHandler.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Editing.TextAreaInputHandler.AddBinding(System.Windows.Input.ICommand,System.Windows.Input.ModifierKeys,System.Windows.Input.Key,System.Windows.Input.ExecutedRoutedEventHandler)">
      <summary>
            Adds a command and input binding.
            </summary>
      <param name="command">The command ID.</param>
      <param name="modifiers">The modifiers of the keyboard shortcut.</param>
      <param name="key">The key of the keyboard shortcut.</param>
      <param name="handler">The event handler to run when the command is executed.</param>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Editing.TextAreaInputHandler.Attach">
      <summary>
            Attaches an input handler to the text area.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Editing.TextAreaInputHandler.CommandBindings">
      <summary>
            Gets the command bindings of this input handler.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Editing.TextAreaInputHandler.Detach">
      <summary>
            Detaches the input handler from the text area.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Editing.TextAreaInputHandler.InputBindings">
      <summary>
            Gets the input bindings of this input handler.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Editing.TextAreaInputHandler.IsAttached">
      <summary>
            Gets whether the input handler is currently attached to the text area.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Editing.TextAreaInputHandler.NestedInputHandlers">
      <summary>
            Gets the collection of nested input handlers. NestedInputHandlers are activated and deactivated
            together with this input handler.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Editing.TextAreaInputHandler.TextArea">
      <summary>
            Gets the text area that the input handler belongs to.
            </summary>
    </member>
    <member name="T:ICSharpCode.AvalonEdit.Editing.TextAreaStackedInputHandler">
      <summary>
            Stacked input handler.
            Uses OnEvent-methods instead of registering event handlers to ensure that the events are handled in the correct order.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Editing.TextAreaStackedInputHandler.#ctor(ICSharpCode.AvalonEdit.Editing.TextArea)">
      <summary>
            Creates a new TextAreaInputHandler.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Editing.TextAreaStackedInputHandler.Attach">
      <summary>
            Attaches an input handler to the text area.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Editing.TextAreaStackedInputHandler.Detach">
      <summary>
            Detaches the input handler from the text area.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Editing.TextAreaStackedInputHandler.OnPreviewKeyDown(System.Windows.Input.KeyEventArgs)">
      <summary>
            Called for the PreviewKeyDown event.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Editing.TextAreaStackedInputHandler.OnPreviewKeyUp(System.Windows.Input.KeyEventArgs)">
      <summary>
            Called for the PreviewKeyUp event.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Editing.TextAreaStackedInputHandler.TextArea">
      <summary>
            Gets the text area that the input handler belongs to.
            </summary>
    </member>
    <member name="T:ICSharpCode.AvalonEdit.Editing.TextEventArgs">
      <summary>
            EventArgs with text.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Editing.TextEventArgs.#ctor(System.String)">
      <summary>
            Creates a new TextEventArgs instance.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Editing.TextEventArgs.Text">
      <summary>
            Gets the text.
            </summary>
    </member>
    <member name="T:ICSharpCode.AvalonEdit.Editing.TextSegmentReadOnlySectionProvider`1">
      <summary>
            Implementation for <see cref="T:ICSharpCode.AvalonEdit.Editing.IReadOnlySectionProvider" /> that stores the segments
            in a <see cref="T:ICSharpCode.AvalonEdit.Document.TextSegmentCollection`1" />.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Editing.TextSegmentReadOnlySectionProvider`1.#ctor(ICSharpCode.AvalonEdit.Document.TextDocument)">
      <summary>
            Creates a new TextSegmentReadOnlySectionProvider instance for the specified document.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Editing.TextSegmentReadOnlySectionProvider`1.#ctor(ICSharpCode.AvalonEdit.Document.TextSegmentCollection{`0})">
      <summary>
            Creates a new TextSegmentReadOnlySectionProvider instance using the specified TextSegmentCollection.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Editing.TextSegmentReadOnlySectionProvider`1.CanInsert(System.Int32)">
      <summary>
            Gets whether insertion is possible at the specified offset.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Editing.TextSegmentReadOnlySectionProvider`1.GetDeletableSegments(ICSharpCode.AvalonEdit.Document.ISegment)">
      <summary>
            Gets the deletable segments inside the given segment.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Editing.TextSegmentReadOnlySectionProvider`1.Segments">
      <summary>
            Gets the collection storing the read-only segments.
            </summary>
    </member>
    <member name="T:ICSharpCode.AvalonEdit.Folding.AbstractFoldingStrategy">
      <summary>
            Base class for folding strategies.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Folding.AbstractFoldingStrategy.#ctor">
      <summary>Initializes a new instance of the <see cref="T:ICSharpCode.AvalonEdit.Folding.AbstractFoldingStrategy" /> class</summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Folding.AbstractFoldingStrategy.CreateNewFoldings(ICSharpCode.AvalonEdit.Document.TextDocument,System.Int32@)">
      <summary>
            Create <see cref="T:ICSharpCode.AvalonEdit.Folding.NewFolding" />s for the specified document.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Folding.AbstractFoldingStrategy.UpdateFoldings(ICSharpCode.AvalonEdit.Folding.FoldingManager,ICSharpCode.AvalonEdit.Document.TextDocument)">
      <summary>
            Create <see cref="T:ICSharpCode.AvalonEdit.Folding.NewFolding" />s for the specified document and updates the folding manager with them.
            </summary>
    </member>
    <member name="T:ICSharpCode.AvalonEdit.Folding.FoldingElementGenerator">
      <summary>
            A <see cref="T:ICSharpCode.AvalonEdit.Rendering.VisualLineElementGenerator" /> that produces line elements for folded <see cref="T:ICSharpCode.AvalonEdit.Folding.FoldingSection" />s.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Folding.FoldingElementGenerator.#ctor">
      <summary>Initializes a new instance of the <see cref="T:ICSharpCode.AvalonEdit.Folding.FoldingElementGenerator" /> class</summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Folding.FoldingElementGenerator.ConstructElement(System.Int32)">
      <summary>
            Constructs an element at the specified offset.
            May return null if no element should be constructed.
            </summary>
    </member>
    <member name="F:ICSharpCode.AvalonEdit.Folding.FoldingElementGenerator.DefaultTextBrush">
      <summary>
            Default brush for folding element text. Value: Brushes.Gray
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Folding.FoldingElementGenerator.FoldingManager">
      <summary>
            Gets/Sets the folding manager from which the foldings should be shown.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Folding.FoldingElementGenerator.GetFirstInterestedOffset(System.Int32)">
      <summary>
            Gets the first offset &gt;= startOffset where the generator wants to construct an element.
            Return -1 to signal no interest.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Folding.FoldingElementGenerator.StartGeneration(ICSharpCode.AvalonEdit.Rendering.ITextRunConstructionContext)">
      <summary>
            Initializes the generator for the <see cref="T:ICSharpCode.AvalonEdit.Rendering.ITextRunConstructionContext" /></summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Folding.FoldingElementGenerator.TextBrush">
      <summary>
            Gets/sets the brush used for folding element text.
            </summary>
    </member>
    <member name="T:ICSharpCode.AvalonEdit.Folding.FoldingManager">
      <summary>
            Stores a list of foldings for a specific TextView and TextDocument.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Folding.FoldingManager.#ctor(ICSharpCode.AvalonEdit.Document.TextDocument)">
      <summary>
            Creates a new FoldingManager instance.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Folding.FoldingManager.#ctor(ICSharpCode.AvalonEdit.Rendering.TextView,ICSharpCode.AvalonEdit.Document.TextDocument)">
      <summary>
            Creates a new FoldingManager instance.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Folding.FoldingManager.AllFoldings">
      <summary>
            Gets all foldings in this manager.
            The foldings are returned sorted by start offset;
            for multiple foldings at the same offset the order is undefined.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Folding.FoldingManager.Clear">
      <summary>
            Removes all folding sections.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Folding.FoldingManager.CreateFolding(System.Int32,System.Int32)">
      <summary>
            Creates a folding for the specified text section.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Folding.FoldingManager.GetFoldingsAt(System.Int32)">
      <summary>
            Gets all foldings that start exactly at <paramref name="startOffset" />.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Folding.FoldingManager.GetFoldingsContaining(System.Int32)">
      <summary>
            Gets all foldings that contain <paramref name="offset" />.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Folding.FoldingManager.GetNextFoldedFoldingStart(System.Int32)">
      <summary>
            Gets the first offset greater or equal to <paramref name="startOffset" /> where a folded folding starts.
            Returns -1 if there are no foldings after <paramref name="startOffset" />.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Folding.FoldingManager.GetNextFolding(System.Int32)">
      <summary>
            Gets the first folding with a <see cref="P:ICSharpCode.AvalonEdit.Document.TextSegment.StartOffset" /> greater or equal to
            <paramref name="startOffset" />.
            Returns null if there are no foldings after <paramref name="startOffset" />.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Folding.FoldingManager.Install(ICSharpCode.AvalonEdit.Editing.TextArea)">
      <summary>
            Adds Folding support to the specified text area.
            Warning: The folding manager is only valid for the text area's current document. The folding manager
            must be uninstalled before the text area is bound to a different document.
            </summary>
      <returns>The <see cref="T:ICSharpCode.AvalonEdit.Folding.FoldingManager" /> that manages the list of foldings inside the text area.</returns>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Folding.FoldingManager.ReceiveWeakEvent(System.Type,System.Object,System.EventArgs)">
      <summary>Receives events from the centralized event manager.</summary>
      <param name="managerType">The type of the <see cref="T:System.Windows.WeakEventManager" /> calling this method.</param>
      <param name="sender">Object that originated the event.</param>
      <param name="e">Event data.</param>
      <returns>true if the listener handled the event. It is considered an error by the <see cref="T:System.Windows.WeakEventManager" /> handling in WPF to register a listener for an event that the listener does not handle. Regardless, the method should return false if it receives an event that it does not recognize or handle.</returns>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Folding.FoldingManager.RemoveFolding(ICSharpCode.AvalonEdit.Folding.FoldingSection)">
      <summary>
            Removes a folding section from this manager.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Folding.FoldingManager.Uninstall(ICSharpCode.AvalonEdit.Folding.FoldingManager)">
      <summary>
            Uninstalls the folding manager.
            </summary>
      <exception cref="T:System.ArgumentException">The specified manager was not created using <see cref="M:ICSharpCode.AvalonEdit.Folding.FoldingManager.Install(ICSharpCode.AvalonEdit.Editing.TextArea)" />.</exception>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Folding.FoldingManager.UpdateFoldings(System.Collections.Generic.IEnumerable{ICSharpCode.AvalonEdit.Folding.NewFolding},System.Int32)">
      <summary>
            Updates the foldings in this <see cref="T:ICSharpCode.AvalonEdit.Folding.FoldingManager" /> using the given new foldings.
            This method will try to detect which new foldings correspond to which existing foldings; and will keep the state
            (<see cref="P:ICSharpCode.AvalonEdit.Folding.FoldingSection.IsFolded" />) for existing foldings.
            </summary>
      <param name="newFoldings">The new set of foldings. These must be sorted by starting offset.</param>
      <param name="firstErrorOffset">The first position of a parse error. Existing foldings starting after
            this offset will be kept even if they don't appear in <paramref name="newFoldings" />.
            Use -1 for this parameter if there were no parse errors.</param>
    </member>
    <member name="T:ICSharpCode.AvalonEdit.Folding.FoldingMargin">
      <summary>
            A margin that shows markers for foldings and allows to expand/collapse the foldings.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Folding.FoldingMargin.#ctor">
      <summary>Initializes a new instance of the <see cref="T:ICSharpCode.AvalonEdit.Folding.FoldingMargin" /> class</summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Folding.FoldingMargin.ArrangeOverride(System.Windows.Size)">
      <summary>When overridden in a derived class, positions child elements and determines a size for a <see cref="T:System.Windows.FrameworkElement" /> derived class. </summary>
      <param name="finalSize">The final area within the parent that this element should use to arrange itself and its children.</param>
      <returns>The actual size used.</returns>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Folding.FoldingMargin.FoldingManager">
      <summary>
            Gets/Sets the folding manager from which the foldings should be shown.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Folding.FoldingMargin.FoldingMarkerBackgroundBrush">
      <summary>
            Gets/sets the Brush used for displaying the background of folding markers.
            </summary>
    </member>
    <member name="F:ICSharpCode.AvalonEdit.Folding.FoldingMargin.FoldingMarkerBackgroundBrushProperty">
      <summary>
            FoldingMarkerBackgroundBrush dependency property.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Folding.FoldingMargin.FoldingMarkerBrush">
      <summary>
            Gets/sets the Brush used for displaying the lines of folding markers.
            </summary>
    </member>
    <member name="F:ICSharpCode.AvalonEdit.Folding.FoldingMargin.FoldingMarkerBrushProperty">
      <summary>
            FoldingMarkerBrush dependency property.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Folding.FoldingMargin.GetVisualChild(System.Int32)">
      <summary>Overrides <see cref="M:System.Windows.Media.Visual.GetVisualChild(System.Int32)" />, and returns a child at the specified index from a collection of child elements. </summary>
      <param name="index">The zero-based index of the requested child element in the collection.</param>
      <returns>The requested child element. This should not return null; if the provided index is out of range, an exception is thrown.</returns>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Folding.FoldingMargin.MeasureOverride(System.Windows.Size)">
      <summary>When overridden in a derived class, measures the size in layout required for child elements and determines a size for the <see cref="T:System.Windows.FrameworkElement" />-derived class. </summary>
      <param name="availableSize">The available size that this element can give to child elements. Infinity can be specified as a value to indicate that the element will size to whatever content is available.</param>
      <returns>The size that this element determines it needs during layout, based on its calculations of child element sizes.</returns>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Folding.FoldingMargin.OnRender(System.Windows.Media.DrawingContext)">
      <summary>When overridden in a derived class, participates in rendering operations that are directed by the layout system. The rendering instructions for this element are not used directly when this method is invoked, and are instead preserved for later asynchronous use by layout and drawing. </summary>
      <param name="drawingContext">The drawing instructions for a specific element. This context is provided to the layout system.</param>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Folding.FoldingMargin.OnTextViewChanged(ICSharpCode.AvalonEdit.Rendering.TextView,ICSharpCode.AvalonEdit.Rendering.TextView)">
      <summary>
            Called when the <see cref="P:ICSharpCode.AvalonEdit.Editing.AbstractMargin.TextView" /> is changing.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Folding.FoldingMargin.SelectedFoldingMarkerBackgroundBrush">
      <summary>
            Gets/sets the Brush used for displaying the background of selected folding markers.
            </summary>
    </member>
    <member name="F:ICSharpCode.AvalonEdit.Folding.FoldingMargin.SelectedFoldingMarkerBackgroundBrushProperty">
      <summary>
            SelectedFoldingMarkerBackgroundBrush dependency property.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Folding.FoldingMargin.SelectedFoldingMarkerBrush">
      <summary>
            Gets/sets the Brush used for displaying the lines of selected folding markers.
            </summary>
    </member>
    <member name="F:ICSharpCode.AvalonEdit.Folding.FoldingMargin.SelectedFoldingMarkerBrushProperty">
      <summary>
            SelectedFoldingMarkerBrush dependency property.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Folding.FoldingMargin.VisualChildrenCount">
      <summary>Gets the number of visual child elements within this element.</summary>
      <returns>The number of visual child elements for this element.</returns>
    </member>
    <member name="T:ICSharpCode.AvalonEdit.Folding.FoldingSection">
      <summary>
            A section that can be folded.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Folding.FoldingSection.IsFolded">
      <summary>
            Gets/sets if the section is folded.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Folding.FoldingSection.Tag">
      <summary>
            Gets/Sets an additional object associated with this folding section.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Folding.FoldingSection.TextContent">
      <summary>
            Gets the content of the collapsed lines as text.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Folding.FoldingSection.Title">
      <summary>
            Gets/Sets the text used to display the collapsed version of the folding section.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Folding.FoldingSection.TooltipText">
      <summary>
            Gets the content of the collapsed lines as tooltip text.
            </summary>
    </member>
    <member name="T:ICSharpCode.AvalonEdit.Folding.NewFolding">
      <summary>
            Helper class used for <see cref="M:ICSharpCode.AvalonEdit.Folding.FoldingManager.UpdateFoldings(System.Collections.Generic.IEnumerable{ICSharpCode.AvalonEdit.Folding.NewFolding},System.Int32)" />.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Folding.NewFolding.#ctor">
      <summary>
            Creates a new NewFolding instance.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Folding.NewFolding.#ctor(System.Int32,System.Int32)">
      <summary>
            Creates a new NewFolding instance.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Folding.NewFolding.DefaultClosed">
      <summary>
            Gets/Sets whether the folding is closed by default.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Folding.NewFolding.EndOffset">
      <summary>
            Gets/Sets the end offset.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Folding.NewFolding.Name">
      <summary>
            Gets/Sets the name displayed for the folding.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Folding.NewFolding.StartOffset">
      <summary>
            Gets/Sets the start offset.
            </summary>
    </member>
    <member name="T:ICSharpCode.AvalonEdit.Folding.XmlFoldingStrategy">
      <summary>
            Determines folds for an xml string in the editor.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Folding.XmlFoldingStrategy.#ctor">
      <summary>Initializes a new instance of the <see cref="T:ICSharpCode.AvalonEdit.Folding.XmlFoldingStrategy" /> class</summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Folding.XmlFoldingStrategy.CreateNewFoldings(ICSharpCode.AvalonEdit.Document.TextDocument,System.Int32@)">
      <summary>
            Create <see cref="T:ICSharpCode.AvalonEdit.Folding.NewFolding" />s for the specified document.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Folding.XmlFoldingStrategy.CreateNewFoldings(ICSharpCode.AvalonEdit.Document.TextDocument,System.Xml.XmlReader,System.Int32@)">
      <summary>
            Create <see cref="T:ICSharpCode.AvalonEdit.Folding.NewFolding" />s for the specified document.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Folding.XmlFoldingStrategy.ShowAttributesWhenFolded">
      <summary>
            Flag indicating whether attributes should be displayed on folded
            elements.
            </summary>
    </member>
    <member name="T:ICSharpCode.AvalonEdit.Highlighting.DocumentHighlighter">
      <summary>
            This class can syntax-highlight a document.
            It automatically manages invalidating the highlighting when the document changes.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Highlighting.DocumentHighlighter.#ctor(ICSharpCode.AvalonEdit.Document.TextDocument,ICSharpCode.AvalonEdit.Highlighting.HighlightingRuleSet)">
      <summary>
            Creates a new DocumentHighlighter instance.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Highlighting.DocumentHighlighter.Document">
      <summary>
            Gets the document that this DocumentHighlighter is highlighting.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Highlighting.DocumentHighlighter.GetSpanStack(System.Int32)">
      <summary>
            Gets the span stack at the end of the specified line.
            -&gt; GetSpanStack(1) returns the spans at the start of the second line.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Highlighting.DocumentHighlighter.HighlightLine(ICSharpCode.AvalonEdit.Document.DocumentLine)">
      <summary>
            Highlights the specified document line.
            </summary>
      <param name="line">The line to highlight.</param>
      <returns>A <see cref="T:ICSharpCode.AvalonEdit.Highlighting.HighlightedLine" /> line object that represents the highlighted sections.</returns>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Highlighting.DocumentHighlighter.HighlightLine(System.Int32)">
      <summary>
            Highlights the specified document line.
            </summary>
      <param name="lineNumber">The line to highlight.</param>
      <returns>A <see cref="T:ICSharpCode.AvalonEdit.Highlighting.HighlightedLine" /> line object that represents the highlighted sections.</returns>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Highlighting.DocumentHighlighter.InitialSpanStack">
      <summary>
            Gets/sets the the initial span stack of the document. Default value is <see cref="F:ICSharpCode.AvalonEdit.Utils.ImmutableStack`1.Empty" />.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Highlighting.DocumentHighlighter.InvalidateHighlighting">
      <summary>
            Invalidates all stored highlighting info.
            When the document changes, the highlighting is invalidated automatically, this method
            needs to be called only when there are changes to the highlighting rule set.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Highlighting.DocumentHighlighter.OnHighlightStateChanged(ICSharpCode.AvalonEdit.Document.DocumentLine,System.Int32)">
      <summary>
            Is called when the highlighting state at the end of the specified line has changed.
            </summary>
    </member>
    <member name="T:ICSharpCode.AvalonEdit.Highlighting.HighlightedInlineBuilder">
      <summary>
            Takes a series of highlighting commands and stores them.
            Later, it can build inline objects (for use with WPF TextBlock) from the commands.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Highlighting.HighlightedInlineBuilder.#ctor(System.String)">
      <summary>
            Creates a new HighlightedInlineBuilder instance.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Highlighting.HighlightedInlineBuilder.Clone">
      <summary>
            Clones this HighlightedInlineBuilder.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Highlighting.HighlightedInlineBuilder.CreateRuns">
      <summary>
            Creates WPF Run instances that can be used for TextBlock.Inlines.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Highlighting.HighlightedInlineBuilder.SetBackground(System.Int32,System.Int32,System.Windows.Media.Brush)">
      <summary>
            Sets the background brush on the specified text segment.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Highlighting.HighlightedInlineBuilder.SetFontFamily(System.Int32,System.Int32,System.Windows.Media.FontFamily)">
      <summary>
            Sets the font family on the specified text segment.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Highlighting.HighlightedInlineBuilder.SetFontStyle(System.Int32,System.Int32,System.Windows.FontStyle)">
      <summary>
            Sets the font style on the specified text segment.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Highlighting.HighlightedInlineBuilder.SetFontWeight(System.Int32,System.Int32,System.Windows.FontWeight)">
      <summary>
            Sets the font weight on the specified text segment.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Highlighting.HighlightedInlineBuilder.SetForeground(System.Int32,System.Int32,System.Windows.Media.Brush)">
      <summary>
            Sets the foreground brush on the specified text segment.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Highlighting.HighlightedInlineBuilder.SetHighlighting(System.Int32,System.Int32,ICSharpCode.AvalonEdit.Highlighting.HighlightingColor)">
      <summary>
            Applies the properties from the HighlightingColor to the specified text segment.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Highlighting.HighlightedInlineBuilder.Text">
      <summary>
            Gets the text.
            </summary>
    </member>
    <member name="T:ICSharpCode.AvalonEdit.Highlighting.HighlightedLine">
      <summary>
            Represents a highlighted document line.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Highlighting.HighlightedLine.#ctor(ICSharpCode.AvalonEdit.Document.TextDocument,ICSharpCode.AvalonEdit.Document.DocumentLine)">
      <summary>
            Creates a new HighlightedLine instance.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Highlighting.HighlightedLine.DefaultTextColor">
      <summary>
            Gets the default color of all text outside a <see cref="T:ICSharpCode.AvalonEdit.Highlighting.HighlightedSection" />.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Highlighting.HighlightedLine.Document">
      <summary>
            Gets the document associated with this HighlightedLine.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Highlighting.HighlightedLine.DocumentLine">
      <summary>
            Gets the document line associated with this HighlightedLine.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Highlighting.HighlightedLine.Sections">
      <summary>
            Gets the highlighted sections.
            The sections are not overlapping, but they may be nested.
            In that case, outer sections come in the list before inner sections.
            The sections are sorted by start offset.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Highlighting.HighlightedLine.ToHtml(ICSharpCode.AvalonEdit.Highlighting.HtmlOptions)">
      <summary>
            Produces HTML code for the line, with &lt;span class="colorName"&gt; tags.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Highlighting.HighlightedLine.ToHtml(System.Int32,System.Int32,ICSharpCode.AvalonEdit.Highlighting.HtmlOptions)">
      <summary>
            Produces HTML code for a section of the line, with &lt;span class="colorName"&gt; tags.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Highlighting.HighlightedLine.ToString">
      <summary>Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.</summary>
      <returns>A <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.</returns>
    </member>
    <member name="T:ICSharpCode.AvalonEdit.Highlighting.HighlightedSection">
      <summary>
            A text section with syntax highlighting information.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Highlighting.HighlightedSection.#ctor">
      <summary>Initializes a new instance of the <see cref="T:ICSharpCode.AvalonEdit.Highlighting.HighlightedSection" /> class</summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Highlighting.HighlightedSection.Color">
      <summary>
            Gets the highlighting color associated with the highlighted section.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Highlighting.HighlightedSection.Length">
      <summary>
            Gets/sets the length of the section.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Highlighting.HighlightedSection.Offset">
      <summary>
            Gets/sets the document offset of the section.
            </summary>
    </member>
    <member name="T:ICSharpCode.AvalonEdit.Highlighting.HighlightingBrush">
      <summary>
            A brush used for syntax highlighting. Can retrieve a real brush on-demand.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Highlighting.HighlightingBrush.#ctor">
      <summary>Initializes a new instance of the <see cref="T:ICSharpCode.AvalonEdit.Highlighting.HighlightingBrush" /> class</summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Highlighting.HighlightingBrush.GetBrush(ICSharpCode.AvalonEdit.Rendering.ITextRunConstructionContext)">
      <summary>
            Gets the real brush.
            </summary>
      <param name="context">The construction context. context can be null!</param>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Highlighting.HighlightingBrush.GetColor(ICSharpCode.AvalonEdit.Rendering.ITextRunConstructionContext)">
      <summary>
            Gets the color of the brush.
            </summary>
      <param name="context">The construction context. context can be null!</param>
    </member>
    <member name="T:ICSharpCode.AvalonEdit.Highlighting.HighlightingColor">
      <summary>
            A highlighting color is a set of font properties and foreground and background color.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Highlighting.HighlightingColor.#ctor">
      <summary>
            Creates a new HighlightingColor instance.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Highlighting.HighlightingColor.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Deserializes a HighlightingColor.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Highlighting.HighlightingColor.Background">
      <summary>
            Gets/sets the background color applied by the highlighting.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Highlighting.HighlightingColor.FontStyle">
      <summary>
            Gets/sets the font style. Null if the highlighting color does not change the font style.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Highlighting.HighlightingColor.FontWeight">
      <summary>
            Gets/sets the font weight. Null if the highlighting color does not change the font weight.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Highlighting.HighlightingColor.Foreground">
      <summary>
            Gets/sets the foreground color applied by the highlighting.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Highlighting.HighlightingColor.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Serializes this HighlightingColor instance.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Highlighting.HighlightingColor.Name">
      <summary>
            Gets/Sets the name of the color.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Highlighting.HighlightingColor.ToCss">
      <summary>
            Gets CSS code for the color.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Highlighting.HighlightingColor.ToString">
      <summary>Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.</summary>
      <returns>A <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.</returns>
    </member>
    <member name="T:ICSharpCode.AvalonEdit.Highlighting.HighlightingColorizer">
      <summary>
            A colorizes that interprets a highlighting rule set and colors the document accordingly.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Highlighting.HighlightingColorizer.#ctor(ICSharpCode.AvalonEdit.Highlighting.HighlightingRuleSet)">
      <summary>
            Creates a new HighlightingColorizer instance.
            </summary>
      <param name="ruleSet">The root highlighting rule set.</param>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Highlighting.HighlightingColorizer.#ctor(ICSharpCode.AvalonEdit.Rendering.TextView,ICSharpCode.AvalonEdit.Highlighting.HighlightingRuleSet)">
      <summary>
            This constructor is obsolete - please use the other overload instead.
            </summary>
      <param name="textView">UNUSED</param>
      <param name="ruleSet">The root highlighting rule set.</param>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Highlighting.HighlightingColorizer.ApplyColorToElement(ICSharpCode.AvalonEdit.Rendering.VisualLineElement,ICSharpCode.AvalonEdit.Highlighting.HighlightingColor)">
      <summary>
            Applies a highlighting color to a visual line element.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Highlighting.HighlightingColorizer.Colorize(ICSharpCode.AvalonEdit.Rendering.ITextRunConstructionContext)">
      <summary>
            Performs the colorization.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Highlighting.HighlightingColorizer.ColorizeLine(ICSharpCode.AvalonEdit.Document.DocumentLine)">
      <summary>
            Override this method to colorize an individual document line.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Highlighting.HighlightingColorizer.CreateHighlighter(ICSharpCode.AvalonEdit.Rendering.TextView,ICSharpCode.AvalonEdit.Document.TextDocument)">
      <summary>
            Creates the IHighlighter instance for the specified text document.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Highlighting.HighlightingColorizer.OnAddToTextView(ICSharpCode.AvalonEdit.Rendering.TextView)">
      <summary>
            Called when added to a text view.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Highlighting.HighlightingColorizer.OnRemoveFromTextView(ICSharpCode.AvalonEdit.Rendering.TextView)">
      <summary>
            Called when removed from a text view.
            </summary>
    </member>
    <member name="T:ICSharpCode.AvalonEdit.Highlighting.HighlightingDefinitionInvalidException">
      <summary>
            Indicates that the highlighting definition that was tried to load was invalid.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Highlighting.HighlightingDefinitionInvalidException.#ctor">
      <summary>
            Creates a new HighlightingDefinitionInvalidException instance.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Highlighting.HighlightingDefinitionInvalidException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Creates a new HighlightingDefinitionInvalidException instance.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Highlighting.HighlightingDefinitionInvalidException.#ctor(System.String)">
      <summary>
            Creates a new HighlightingDefinitionInvalidException instance.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Highlighting.HighlightingDefinitionInvalidException.#ctor(System.String,System.Exception)">
      <summary>
            Creates a new HighlightingDefinitionInvalidException instance.
            </summary>
    </member>
    <member name="T:ICSharpCode.AvalonEdit.Highlighting.HighlightingDefinitionTypeConverter">
      <summary>
            Converts between strings and <see cref="T:ICSharpCode.AvalonEdit.Highlighting.IHighlightingDefinition" /> by treating the string as the definition name
            and calling <c>HighlightingManager.Instance.<see cref="M:ICSharpCode.AvalonEdit.Highlighting.HighlightingManager.GetDefinition(System.String)">GetDefinition</see>(name)</c>.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Highlighting.HighlightingDefinitionTypeConverter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:ICSharpCode.AvalonEdit.Highlighting.HighlightingDefinitionTypeConverter" /> class</summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Highlighting.HighlightingDefinitionTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Returns whether this converter can convert an object of the given type to the type of this converter, using the specified context.</summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context. </param>
      <param name="sourceType">A <see cref="T:System.Type" /> that represents the type you want to convert from. </param>
      <returns>true if this converter can perform the conversion; otherwise, false.</returns>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Highlighting.HighlightingDefinitionTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Returns whether this converter can convert the object to the specified type, using the specified context.</summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context. </param>
      <param name="destinationType">A <see cref="T:System.Type" /> that represents the type you want to convert to. </param>
      <returns>true if this converter can perform the conversion; otherwise, false.</returns>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Highlighting.HighlightingDefinitionTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>Converts the given object to the type of this converter, using the specified context and culture information.</summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context. </param>
      <param name="culture">The <see cref="T:System.Globalization.CultureInfo" /> to use as the current culture. </param>
      <param name="value">The <see cref="T:System.Object" /> to convert. </param>
      <returns>An <see cref="T:System.Object" /> that represents the converted value.</returns>
      <exception cref="T:System.NotSupportedException">The conversion cannot be performed. </exception>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Highlighting.HighlightingDefinitionTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>Converts the given value object to the specified type, using the specified context and culture information.</summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context. </param>
      <param name="culture">A <see cref="T:System.Globalization.CultureInfo" />. If null is passed, the current culture is assumed. </param>
      <param name="value">The <see cref="T:System.Object" /> to convert. </param>
      <param name="destinationType">The <see cref="T:System.Type" /> to convert the <paramref name="value" /> parameter to. </param>
      <returns>An <see cref="T:System.Object" /> that represents the converted value.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="destinationType" /> parameter is null. </exception>
      <exception cref="T:System.NotSupportedException">The conversion cannot be performed. </exception>
    </member>
    <member name="T:ICSharpCode.AvalonEdit.Highlighting.HighlightingManager">
      <summary>
            Manages a list of syntax highlighting definitions.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Highlighting.HighlightingManager.#ctor">
      <summary>Initializes a new instance of the <see cref="T:ICSharpCode.AvalonEdit.Highlighting.HighlightingManager" /> class</summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Highlighting.HighlightingManager.GetDefinition(System.String)">
      <summary>
            Gets a highlighting definition by name.
            Returns null if the definition is not found.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Highlighting.HighlightingManager.GetDefinitionByExtension(System.String)">
      <summary>
            Gets a highlighting definition by extension.
            Returns null if the definition is not found.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Highlighting.HighlightingManager.HighlightingDefinitions">
      <summary>
            Gets a copy of all highlightings.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Highlighting.HighlightingManager.HighlightingNames">
      <summary>
            Gets the names of the registered highlightings.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Highlighting.HighlightingManager.Instance">
      <summary>
            Gets the default HighlightingManager instance.
            The default HighlightingManager comes with built-in highlightings.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Highlighting.HighlightingManager.RegisterHighlighting(System.String,System.String[],ICSharpCode.AvalonEdit.Highlighting.IHighlightingDefinition)">
      <summary>
            Registers a highlighting definition.
            </summary>
      <param name="name">The name to register the definition with.</param>
      <param name="extensions">The file extensions to register the definition for.</param>
      <param name="highlighting">The highlighting definition.</param>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Highlighting.HighlightingManager.RegisterHighlighting(System.String,System.String[],System.Func{ICSharpCode.AvalonEdit.Highlighting.IHighlightingDefinition})">
      <summary>
            Registers a highlighting definition.
            </summary>
      <param name="name">The name to register the definition with.</param>
      <param name="extensions">The file extensions to register the definition for.</param>
      <param name="lazyLoadedHighlighting">A function that loads the highlighting definition.</param>
    </member>
    <member name="T:ICSharpCode.AvalonEdit.Highlighting.HighlightingRule">
      <summary>
            A highlighting rule.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Highlighting.HighlightingRule.#ctor">
      <summary>Initializes a new instance of the <see cref="T:ICSharpCode.AvalonEdit.Highlighting.HighlightingRule" /> class</summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Highlighting.HighlightingRule.Color">
      <summary>
            Gets/Sets the highlighting color.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Highlighting.HighlightingRule.Regex">
      <summary>
            Gets/Sets the regular expression for the rule.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Highlighting.HighlightingRule.ToString">
      <summary>Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.</summary>
      <returns>A <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.</returns>
    </member>
    <member name="T:ICSharpCode.AvalonEdit.Highlighting.HighlightingRuleSet">
      <summary>
            A highlighting rule set describes a set of spans that are valid at a given code location.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Highlighting.HighlightingRuleSet.#ctor">
      <summary>
            Creates a new RuleSet instance.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Highlighting.HighlightingRuleSet.Name">
      <summary>
            Gets/Sets the name of the rule set.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Highlighting.HighlightingRuleSet.Rules">
      <summary>
            Gets the list of rules.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Highlighting.HighlightingRuleSet.Spans">
      <summary>
            Gets the list of spans.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Highlighting.HighlightingRuleSet.ToString">
      <summary>Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.</summary>
      <returns>A <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.</returns>
    </member>
    <member name="T:ICSharpCode.AvalonEdit.Highlighting.HighlightingSpan">
      <summary>
            A highlighting span is a region with start+end expression that has a different RuleSet inside
            and colors the region.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Highlighting.HighlightingSpan.#ctor">
      <summary>Initializes a new instance of the <see cref="T:ICSharpCode.AvalonEdit.Highlighting.HighlightingSpan" /> class</summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Highlighting.HighlightingSpan.EndColor">
      <summary>
            Gets the color used for the text matching the end expression.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Highlighting.HighlightingSpan.EndExpression">
      <summary>
            Gets/Sets the end expression.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Highlighting.HighlightingSpan.RuleSet">
      <summary>
            Gets/Sets the rule set that applies inside this span.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Highlighting.HighlightingSpan.SpanColor">
      <summary>
            Gets the color used for the text between start and end.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Highlighting.HighlightingSpan.SpanColorIncludesEnd">
      <summary>
            Gets/Sets whether the span color includes the end.
            The default is <c>false</c>.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Highlighting.HighlightingSpan.SpanColorIncludesStart">
      <summary>
            Gets/Sets whether the span color includes the start.
            The default is <c>false</c>.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Highlighting.HighlightingSpan.StartColor">
      <summary>
            Gets the color used for the text matching the start expression.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Highlighting.HighlightingSpan.StartExpression">
      <summary>
            Gets/Sets the start expression.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Highlighting.HighlightingSpan.ToString">
      <summary>Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.</summary>
      <returns>A <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.</returns>
    </member>
    <member name="T:ICSharpCode.AvalonEdit.Highlighting.HtmlClipboard">
      <summary>
            Allows copying HTML text to the clipboard.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Highlighting.HtmlClipboard.CreateHtmlFragment(ICSharpCode.AvalonEdit.Document.TextDocument,ICSharpCode.AvalonEdit.Highlighting.IHighlighter,ICSharpCode.AvalonEdit.Document.ISegment,ICSharpCode.AvalonEdit.Highlighting.HtmlOptions)">
      <summary>
            Creates a HTML fragment from a part of a document.
            </summary>
      <param name="document">The document to create HTML from.</param>
      <param name="highlighter">The highlighter used to highlight the document. <c>null</c> is valid and will create HTML without any highlighting.</param>
      <param name="segment">The part of the document to create HTML for. You can pass <c>null</c> to create HTML for the whole document.</param>
      <param name="options">The options for the HTML creation.</param>
      <returns>HTML code for the document part.</returns>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Highlighting.HtmlClipboard.SetHtml(System.Windows.DataObject,System.String)">
      <summary>
            Sets the TextDataFormat.Html on the data object to the specified html fragment.
            This helper methods takes care of creating the necessary CF_HTML header.
            </summary>
    </member>
    <member name="T:ICSharpCode.AvalonEdit.Highlighting.HtmlOptions">
      <summary>
            Holds options for converting text to HTML.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Highlighting.HtmlOptions.#ctor">
      <summary>
            Creates a default HtmlOptions instance.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Highlighting.HtmlOptions.#ctor(ICSharpCode.AvalonEdit.TextEditorOptions)">
      <summary>
            Creates a new HtmlOptions instance that copies applicable options from the <see cref="T:ICSharpCode.AvalonEdit.TextEditorOptions" />.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Highlighting.HtmlOptions.ColorNeedsSpanForStyling(ICSharpCode.AvalonEdit.Highlighting.HighlightingColor)">
      <summary>
            Gets whether the color needs to be written out to HTML.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Highlighting.HtmlOptions.TabSize">
      <summary>
            The amount of spaces a tab gets converted to.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Highlighting.HtmlOptions.WriteStyleAttributeForColor(System.IO.TextWriter,ICSharpCode.AvalonEdit.Highlighting.HighlightingColor)">
      <summary>
            Writes the HTML attribute for the style to the text writer.
            </summary>
    </member>
    <member name="T:ICSharpCode.AvalonEdit.Highlighting.IHighlighter">
      <summary>
            Represents a highlighted document.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Highlighting.IHighlighter.Document">
      <summary>
            Gets the underlying text document.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Highlighting.IHighlighter.GetSpanStack(System.Int32)">
      <summary>
            Gets the span stack at the end of the specified line.
            -&gt; GetSpanStack(1) returns the spans at the start of the second line.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Highlighting.IHighlighter.HighlightLine(System.Int32)">
      <summary>
            Highlights the specified document line.
            </summary>
      <param name="lineNumber">The line to highlight.</param>
      <returns>A <see cref="T:ICSharpCode.AvalonEdit.Highlighting.HighlightedLine" /> line object that represents the highlighted sections.</returns>
    </member>
    <member name="T:ICSharpCode.AvalonEdit.Highlighting.IHighlightingDefinition">
      <summary>
            A highlighting definition.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Highlighting.IHighlightingDefinition.GetNamedColor(System.String)">
      <summary>
            Gets a named highlighting color.
            </summary>
      <returns>The highlighting color, or null if it is not found.</returns>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Highlighting.IHighlightingDefinition.GetNamedRuleSet(System.String)">
      <summary>
            Gets a rule set by name.
            </summary>
      <returns>The rule set, or null if it is not found.</returns>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Highlighting.IHighlightingDefinition.MainRuleSet">
      <summary>
            Gets the main rule set.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Highlighting.IHighlightingDefinition.Name">
      <summary>
            Gets the name of the highlighting definition.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Highlighting.IHighlightingDefinition.NamedHighlightingColors">
      <summary>
            Gets the list of named highlighting colors.
            </summary>
    </member>
    <member name="T:ICSharpCode.AvalonEdit.Highlighting.IHighlightingDefinition2">
      <summary>
            Extension of IHighlightingDefinition to avoid breaking changes in the API.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Highlighting.IHighlightingDefinition2.Properties">
      <summary>
            Gets the list of properties.
            </summary>
    </member>
    <member name="T:ICSharpCode.AvalonEdit.Highlighting.IHighlightingDefinitionReferenceResolver">
      <summary>
            Interface for resolvers that can solve cross-definition references.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Highlighting.IHighlightingDefinitionReferenceResolver.GetDefinition(System.String)">
      <summary>
            Gets the highlighting definition by name, or null if it is not found.
            </summary>
    </member>
    <member name="T:ICSharpCode.AvalonEdit.Highlighting.Xshd.HighlightingLoader">
      <summary>
            Static class with helper methods to load XSHD highlighting files.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Highlighting.Xshd.HighlightingLoader.Load(ICSharpCode.AvalonEdit.Highlighting.Xshd.XshdSyntaxDefinition,ICSharpCode.AvalonEdit.Highlighting.IHighlightingDefinitionReferenceResolver)">
      <summary>
            Creates a highlighting definition from the XSHD file.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Highlighting.Xshd.HighlightingLoader.Load(System.Xml.XmlReader,ICSharpCode.AvalonEdit.Highlighting.IHighlightingDefinitionReferenceResolver)">
      <summary>
            Creates a highlighting definition from the XSHD file.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Highlighting.Xshd.HighlightingLoader.LoadXshd(System.Xml.XmlReader)">
      <summary>
            Lodas a syntax definition from the xml reader.
            </summary>
    </member>
    <member name="T:ICSharpCode.AvalonEdit.Highlighting.Xshd.IXshdVisitor">
      <summary>
            A visitor over the XSHD element tree.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Highlighting.Xshd.IXshdVisitor.VisitColor(ICSharpCode.AvalonEdit.Highlighting.Xshd.XshdColor)">
      <summary>
        <p style="color: #dc143c; font-size: 8.5pt; font-weight: bold;">[Missing &lt;summary&gt; documentation for "M:ICSharpCode.AvalonEdit.Highlighting.Xshd.IXshdVisitor.VisitColor(ICSharpCode.AvalonEdit.Highlighting.Xshd.XshdColor)"]</p>
      </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Highlighting.Xshd.IXshdVisitor.VisitImport(ICSharpCode.AvalonEdit.Highlighting.Xshd.XshdImport)">
      <summary>
        <p style="color: #dc143c; font-size: 8.5pt; font-weight: bold;">[Missing &lt;summary&gt; documentation for "M:ICSharpCode.AvalonEdit.Highlighting.Xshd.IXshdVisitor.VisitImport(ICSharpCode.AvalonEdit.Highlighting.Xshd.XshdImport)"]</p>
      </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Highlighting.Xshd.IXshdVisitor.VisitKeywords(ICSharpCode.AvalonEdit.Highlighting.Xshd.XshdKeywords)">
      <summary>
        <p style="color: #dc143c; font-size: 8.5pt; font-weight: bold;">[Missing &lt;summary&gt; documentation for "M:ICSharpCode.AvalonEdit.Highlighting.Xshd.IXshdVisitor.VisitKeywords(ICSharpCode.AvalonEdit.Highlighting.Xshd.XshdKeywords)"]</p>
      </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Highlighting.Xshd.IXshdVisitor.VisitRule(ICSharpCode.AvalonEdit.Highlighting.Xshd.XshdRule)">
      <summary>
        <p style="color: #dc143c; font-size: 8.5pt; font-weight: bold;">[Missing &lt;summary&gt; documentation for "M:ICSharpCode.AvalonEdit.Highlighting.Xshd.IXshdVisitor.VisitRule(ICSharpCode.AvalonEdit.Highlighting.Xshd.XshdRule)"]</p>
      </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Highlighting.Xshd.IXshdVisitor.VisitRuleSet(ICSharpCode.AvalonEdit.Highlighting.Xshd.XshdRuleSet)">
      <summary>
        <p style="color: #dc143c; font-size: 8.5pt; font-weight: bold;">[Missing &lt;summary&gt; documentation for "M:ICSharpCode.AvalonEdit.Highlighting.Xshd.IXshdVisitor.VisitRuleSet(ICSharpCode.AvalonEdit.Highlighting.Xshd.XshdRuleSet)"]</p>
      </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Highlighting.Xshd.IXshdVisitor.VisitSpan(ICSharpCode.AvalonEdit.Highlighting.Xshd.XshdSpan)">
      <summary>
        <p style="color: #dc143c; font-size: 8.5pt; font-weight: bold;">[Missing &lt;summary&gt; documentation for "M:ICSharpCode.AvalonEdit.Highlighting.Xshd.IXshdVisitor.VisitSpan(ICSharpCode.AvalonEdit.Highlighting.Xshd.XshdSpan)"]</p>
      </summary>
    </member>
    <member name="T:ICSharpCode.AvalonEdit.Highlighting.Xshd.SaveXshdVisitor">
      <summary>
            Xshd visitor implementation that saves an .xshd file as XML.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Highlighting.Xshd.SaveXshdVisitor.#ctor(System.Xml.XmlWriter)">
      <summary>
            Creates a new SaveXshdVisitor instance.
            </summary>
    </member>
    <member name="F:ICSharpCode.AvalonEdit.Highlighting.Xshd.SaveXshdVisitor.Namespace">
      <summary>
            XML namespace for XSHD.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Highlighting.Xshd.SaveXshdVisitor.WriteDefinition(ICSharpCode.AvalonEdit.Highlighting.Xshd.XshdSyntaxDefinition)">
      <summary>
            Writes the specified syntax definition.
            </summary>
    </member>
    <member name="T:ICSharpCode.AvalonEdit.Highlighting.Xshd.XshdColor">
      <summary>
            A color in an Xshd file.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Highlighting.Xshd.XshdColor.#ctor">
      <summary>
            Creates a new XshdColor instance.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Highlighting.Xshd.XshdColor.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Deserializes an XshdColor.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Highlighting.Xshd.XshdColor.AcceptVisitor(ICSharpCode.AvalonEdit.Highlighting.Xshd.IXshdVisitor)">
      <summary>
            Applies the visitor to this element.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Highlighting.Xshd.XshdColor.Background">
      <summary>
            Gets/sets the background brush.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Highlighting.Xshd.XshdColor.ExampleText">
      <summary>
            Gets/Sets the example text that demonstrates where the color is used.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Highlighting.Xshd.XshdColor.FontStyle">
      <summary>
            Gets/sets the font style.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Highlighting.Xshd.XshdColor.FontWeight">
      <summary>
            Gets/sets the font weight.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Highlighting.Xshd.XshdColor.Foreground">
      <summary>
            Gets/sets the foreground brush.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Highlighting.Xshd.XshdColor.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Serializes this XshdColor instance.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Highlighting.Xshd.XshdColor.Name">
      <summary>
            Gets/sets the name.
            </summary>
    </member>
    <member name="T:ICSharpCode.AvalonEdit.Highlighting.Xshd.XshdElement">
      <summary>
            An element in a XSHD rule set.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Highlighting.Xshd.XshdElement.#ctor">
      <summary>Initializes a new instance of the <see cref="T:ICSharpCode.AvalonEdit.Highlighting.Xshd.XshdElement" /> class</summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Highlighting.Xshd.XshdElement.AcceptVisitor(ICSharpCode.AvalonEdit.Highlighting.Xshd.IXshdVisitor)">
      <summary>
            Applies the visitor to this element.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Highlighting.Xshd.XshdElement.ColumnNumber">
      <summary>
            Gets the column number in the .xshd file.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Highlighting.Xshd.XshdElement.LineNumber">
      <summary>
            Gets the line number in the .xshd file.
            </summary>
    </member>
    <member name="T:ICSharpCode.AvalonEdit.Highlighting.Xshd.XshdImport">
      <summary>
            &lt;Import&gt; element.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Highlighting.Xshd.XshdImport.#ctor">
      <summary>Initializes a new instance of the <see cref="T:ICSharpCode.AvalonEdit.Highlighting.Xshd.XshdImport" /> class</summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Highlighting.Xshd.XshdImport.AcceptVisitor(ICSharpCode.AvalonEdit.Highlighting.Xshd.IXshdVisitor)">
      <summary>
            Applies the visitor to this element.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Highlighting.Xshd.XshdImport.RuleSetReference">
      <summary>
            Gets/sets the referenced rule set.
            </summary>
    </member>
    <member name="T:ICSharpCode.AvalonEdit.Highlighting.Xshd.XshdKeywords">
      <summary>
            A list of keywords.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Highlighting.Xshd.XshdKeywords.#ctor">
      <summary>Initializes a new instance of the <see cref="T:ICSharpCode.AvalonEdit.Highlighting.Xshd.XshdKeywords" /> class</summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Highlighting.Xshd.XshdKeywords.AcceptVisitor(ICSharpCode.AvalonEdit.Highlighting.Xshd.IXshdVisitor)">
      <summary>
            Applies the visitor to this element.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Highlighting.Xshd.XshdKeywords.ColorReference">
      <summary>
            The color.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Highlighting.Xshd.XshdKeywords.Words">
      <summary>
            Gets the list of key words.
            </summary>
    </member>
    <member name="T:ICSharpCode.AvalonEdit.Highlighting.Xshd.XshdProperty">
      <summary>
            A property in an Xshd file.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Highlighting.Xshd.XshdProperty.#ctor">
      <summary>
            Creates a new XshdColor instance.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Highlighting.Xshd.XshdProperty.AcceptVisitor(ICSharpCode.AvalonEdit.Highlighting.Xshd.IXshdVisitor)">
      <summary>
            Applies the visitor to this element.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Highlighting.Xshd.XshdProperty.Name">
      <summary>
            Gets/sets the name.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Highlighting.Xshd.XshdProperty.Value">
      <summary>
            Gets/sets the value.
            </summary>
    </member>
    <member name="T:ICSharpCode.AvalonEdit.Highlighting.Xshd.XshdReference`1">
      <summary>
            A reference to an xshd color, or an inline xshd color.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Highlighting.Xshd.XshdReference`1.#ctor(System.String,System.String)">
      <summary>
            Creates a new XshdReference instance.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Highlighting.Xshd.XshdReference`1.#ctor(`0)">
      <summary>
            Creates a new XshdReference instance.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Highlighting.Xshd.XshdReference`1.AcceptVisitor(ICSharpCode.AvalonEdit.Highlighting.Xshd.IXshdVisitor)">
      <summary>
            Applies the visitor to the inline element, if there is any.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Highlighting.Xshd.XshdReference`1.Equals(ICSharpCode.AvalonEdit.Highlighting.Xshd.XshdReference{`0})">
      <summary>
            Equality operator.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Highlighting.Xshd.XshdReference`1.Equals(System.Object)">
      <summary>Indicates whether this instance and a specified object are equal.</summary>
      <param name="obj">Another object to compare to. </param>
      <returns>true if <paramref name="obj" /> and this instance are the same type and represent the same value; otherwise, false.</returns>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Highlighting.Xshd.XshdReference`1.GetHashCode">
      <summary>Returns the hash code for this instance.</summary>
      <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Highlighting.Xshd.XshdReference`1.InlineElement">
      <summary>
            Gets the inline element.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Highlighting.Xshd.XshdReference`1.op_Equality(ICSharpCode.AvalonEdit.Highlighting.Xshd.XshdReference{`0},ICSharpCode.AvalonEdit.Highlighting.Xshd.XshdReference{`0})">
      <summary>
            Equality operator.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Highlighting.Xshd.XshdReference`1.op_Inequality(ICSharpCode.AvalonEdit.Highlighting.Xshd.XshdReference{`0},ICSharpCode.AvalonEdit.Highlighting.Xshd.XshdReference{`0})">
      <summary>
            Inequality operator.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Highlighting.Xshd.XshdReference`1.ReferencedDefinition">
      <summary>
            Gets the reference.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Highlighting.Xshd.XshdReference`1.ReferencedElement">
      <summary>
            Gets the reference.
            </summary>
    </member>
    <member name="T:ICSharpCode.AvalonEdit.Highlighting.Xshd.XshdRegexType">
      <summary>
            Specifies the type of the regex.
            </summary>
    </member>
    <member name="F:ICSharpCode.AvalonEdit.Highlighting.Xshd.XshdRegexType.Default">
      <summary>
            Normal regex. Used when the regex was specified as attribute.
            </summary>
    </member>
    <member name="F:ICSharpCode.AvalonEdit.Highlighting.Xshd.XshdRegexType.IgnorePatternWhitespace">
      <summary>
            Ignore pattern whitespace / allow regex comments. Used when the regex was specified as text element.
            </summary>
    </member>
    <member name="T:ICSharpCode.AvalonEdit.Highlighting.Xshd.XshdRule">
      <summary>
            &lt;Rule&gt; element.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Highlighting.Xshd.XshdRule.#ctor">
      <summary>Initializes a new instance of the <see cref="T:ICSharpCode.AvalonEdit.Highlighting.Xshd.XshdRule" /> class</summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Highlighting.Xshd.XshdRule.AcceptVisitor(ICSharpCode.AvalonEdit.Highlighting.Xshd.IXshdVisitor)">
      <summary>
            Applies the visitor to this element.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Highlighting.Xshd.XshdRule.ColorReference">
      <summary>
            Gets/sets the color reference.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Highlighting.Xshd.XshdRule.Regex">
      <summary>
            Gets/sets the rule regex.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Highlighting.Xshd.XshdRule.RegexType">
      <summary>
            Gets/sets the rule regex type.
            </summary>
    </member>
    <member name="T:ICSharpCode.AvalonEdit.Highlighting.Xshd.XshdRuleSet">
      <summary>
            A rule set in a XSHD file.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Highlighting.Xshd.XshdRuleSet.#ctor">
      <summary>Initializes a new instance of the <see cref="T:ICSharpCode.AvalonEdit.Highlighting.Xshd.XshdRuleSet" /> class</summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Highlighting.Xshd.XshdRuleSet.AcceptElements(ICSharpCode.AvalonEdit.Highlighting.Xshd.IXshdVisitor)">
      <summary>
            Applies the visitor to all elements.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Highlighting.Xshd.XshdRuleSet.AcceptVisitor(ICSharpCode.AvalonEdit.Highlighting.Xshd.IXshdVisitor)">
      <summary>
            Applies the visitor to this element.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Highlighting.Xshd.XshdRuleSet.Elements">
      <summary>
            Gets the collection of elements.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Highlighting.Xshd.XshdRuleSet.IgnoreCase">
      <summary>
            Gets/sets whether the case is ignored in expressions inside this rule set.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Highlighting.Xshd.XshdRuleSet.Name">
      <summary>
            Gets/Sets the name of the rule set.
            </summary>
    </member>
    <member name="T:ICSharpCode.AvalonEdit.Highlighting.Xshd.XshdSpan">
      <summary>
            &lt;Span&gt; element.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Highlighting.Xshd.XshdSpan.#ctor">
      <summary>Initializes a new instance of the <see cref="T:ICSharpCode.AvalonEdit.Highlighting.Xshd.XshdSpan" /> class</summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Highlighting.Xshd.XshdSpan.AcceptVisitor(ICSharpCode.AvalonEdit.Highlighting.Xshd.IXshdVisitor)">
      <summary>
            Applies the visitor to this element.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Highlighting.Xshd.XshdSpan.BeginColorReference">
      <summary>
            Gets/sets the span begin color.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Highlighting.Xshd.XshdSpan.BeginRegex">
      <summary>
            Gets/sets the begin regex.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Highlighting.Xshd.XshdSpan.BeginRegexType">
      <summary>
            Gets/sets the begin regex type.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Highlighting.Xshd.XshdSpan.EndColorReference">
      <summary>
            Gets/sets the span end color.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Highlighting.Xshd.XshdSpan.EndRegex">
      <summary>
            Gets/sets the end regex.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Highlighting.Xshd.XshdSpan.EndRegexType">
      <summary>
            Gets/sets the end regex type.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Highlighting.Xshd.XshdSpan.Multiline">
      <summary>
            Gets/sets whether the span is multiline.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Highlighting.Xshd.XshdSpan.RuleSetReference">
      <summary>
            Gets/sets the rule set reference.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Highlighting.Xshd.XshdSpan.SpanColorReference">
      <summary>
            Gets/sets the span color.
            </summary>
    </member>
    <member name="T:ICSharpCode.AvalonEdit.Highlighting.Xshd.XshdSyntaxDefinition">
      <summary>
            A &lt;SyntaxDefinition&gt; element.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Highlighting.Xshd.XshdSyntaxDefinition.#ctor">
      <summary>
            Creates a new XshdSyntaxDefinition object.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Highlighting.Xshd.XshdSyntaxDefinition.AcceptElements(ICSharpCode.AvalonEdit.Highlighting.Xshd.IXshdVisitor)">
      <summary>
            Applies the visitor to all elements.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Highlighting.Xshd.XshdSyntaxDefinition.Elements">
      <summary>
            Gets the collection of elements.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Highlighting.Xshd.XshdSyntaxDefinition.Extensions">
      <summary>
            Gets the associated extensions.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Highlighting.Xshd.XshdSyntaxDefinition.Name">
      <summary>
            Gets/sets the definition name
            </summary>
    </member>
    <member name="T:ICSharpCode.AvalonEdit.Indentation.DefaultIndentationStrategy">
      <summary>
            Handles indentation by copying the indentation from the previous line.
            Does not support indenting multiple lines.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Indentation.DefaultIndentationStrategy.#ctor">
      <summary>Initializes a new instance of the <see cref="T:ICSharpCode.AvalonEdit.Indentation.DefaultIndentationStrategy" /> class</summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Indentation.DefaultIndentationStrategy.IndentLine(ICSharpCode.AvalonEdit.Document.TextDocument,ICSharpCode.AvalonEdit.Document.DocumentLine)">
      <summary>
            Sets the indentation for the specified line.
            Usually this is constructed from the indentation of the previous line.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Indentation.DefaultIndentationStrategy.IndentLines(ICSharpCode.AvalonEdit.Document.TextDocument,System.Int32,System.Int32)">
      <summary>
            Does nothing: indenting multiple lines is useless without a smart indentation strategy.
            </summary>
    </member>
    <member name="T:ICSharpCode.AvalonEdit.Indentation.IIndentationStrategy">
      <summary>
            Strategy how the text editor handles indentation when new lines are inserted.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Indentation.IIndentationStrategy.IndentLine(ICSharpCode.AvalonEdit.Document.TextDocument,ICSharpCode.AvalonEdit.Document.DocumentLine)">
      <summary>
            Sets the indentation for the specified line.
            Usually this is constructed from the indentation of the previous line.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Indentation.IIndentationStrategy.IndentLines(ICSharpCode.AvalonEdit.Document.TextDocument,System.Int32,System.Int32)">
      <summary>
            Reindents a set of lines.
            </summary>
    </member>
    <member name="T:ICSharpCode.AvalonEdit.Indentation.CSharp.CSharpIndentationStrategy">
      <summary>
            Smart indentation for C#.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Indentation.CSharp.CSharpIndentationStrategy.#ctor">
      <summary>
            Creates a new CSharpIndentationStrategy.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Indentation.CSharp.CSharpIndentationStrategy.#ctor(ICSharpCode.AvalonEdit.TextEditorOptions)">
      <summary>
            Creates a new CSharpIndentationStrategy and initializes the settings using the text editor options.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Indentation.CSharp.CSharpIndentationStrategy.Indent(ICSharpCode.AvalonEdit.Indentation.CSharp.IDocumentAccessor,System.Boolean)">
      <summary>
            Performs indentation using the specified document accessor.
            </summary>
      <param name="document">Object used for accessing the document line-by-line</param>
      <param name="keepEmptyLines">Specifies whether empty lines should be kept</param>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Indentation.CSharp.CSharpIndentationStrategy.IndentationString">
      <summary>
            Gets/Sets the indentation string.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Indentation.CSharp.CSharpIndentationStrategy.IndentLine(ICSharpCode.AvalonEdit.Document.TextDocument,ICSharpCode.AvalonEdit.Document.DocumentLine)">
      <summary>
            Sets the indentation for the specified line.
            Usually this is constructed from the indentation of the previous line.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Indentation.CSharp.CSharpIndentationStrategy.IndentLines(ICSharpCode.AvalonEdit.Document.TextDocument,System.Int32,System.Int32)">
      <summary>
            Reindents a set of lines.
            </summary>
    </member>
    <member name="T:ICSharpCode.AvalonEdit.Indentation.CSharp.IDocumentAccessor">
      <summary>
            Interface used for the indentation class to access the document.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Indentation.CSharp.IDocumentAccessor.IsReadOnly">
      <summary>Gets if the current line is read only (because it is not in the
            selected text region)</summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Indentation.CSharp.IDocumentAccessor.LineNumber">
      <summary>Gets the number of the current line.</summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Indentation.CSharp.IDocumentAccessor.MoveNext">
      <summary>Advances to the next line.</summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Indentation.CSharp.IDocumentAccessor.Text">
      <summary>Gets/Sets the text of the current line.</summary>
    </member>
    <member name="T:ICSharpCode.AvalonEdit.Indentation.CSharp.TextDocumentAccessor">
      <summary>
            Adapter IDocumentAccessor -&gt; TextDocument
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Indentation.CSharp.TextDocumentAccessor.#ctor(ICSharpCode.AvalonEdit.Document.TextDocument)">
      <summary>
            Creates a new TextDocumentAccessor.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Indentation.CSharp.TextDocumentAccessor.#ctor(ICSharpCode.AvalonEdit.Document.TextDocument,System.Int32,System.Int32)">
      <summary>
            Creates a new TextDocumentAccessor that indents only a part of the document.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Indentation.CSharp.TextDocumentAccessor.IsReadOnly">
      <summary>Gets if the current line is read only (because it is not in the
            selected text region)</summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Indentation.CSharp.TextDocumentAccessor.LineNumber">
      <summary>Gets the number of the current line.</summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Indentation.CSharp.TextDocumentAccessor.MoveNext">
      <summary>Advances to the next line.</summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Indentation.CSharp.TextDocumentAccessor.Text">
      <summary>Gets/Sets the text of the current line.</summary>
    </member>
    <member name="T:ICSharpCode.AvalonEdit.Rendering.BackgroundGeometryBuilder">
      <summary>
            Helper for creating a PathGeometry.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Rendering.BackgroundGeometryBuilder.#ctor">
      <summary>
            Creates a new BackgroundGeometryBuilder instance.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Rendering.BackgroundGeometryBuilder.AddRectangle(ICSharpCode.AvalonEdit.Rendering.TextView,System.Windows.Rect)">
      <summary>
            Adds a rectangle to the geometry.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Rendering.BackgroundGeometryBuilder.AddRectangle(System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Adds a rectangle to the geometry.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Rendering.BackgroundGeometryBuilder.AddSegment(ICSharpCode.AvalonEdit.Rendering.TextView,ICSharpCode.AvalonEdit.Document.ISegment)">
      <summary>
            Adds the specified segment to the geometry.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Rendering.BackgroundGeometryBuilder.AlignToMiddleOfPixels">
      <summary>
            Gets/Sets whether to align the geometry to the middle of pixels.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Rendering.BackgroundGeometryBuilder.AlignToWholePixels">
      <summary>
            Gets/Sets whether to align the geometry to whole pixels.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Rendering.BackgroundGeometryBuilder.CloseFigure">
      <summary>
            Closes the current figure.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Rendering.BackgroundGeometryBuilder.CornerRadius">
      <summary>
            Gets/sets the radius of the rounded corners.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Rendering.BackgroundGeometryBuilder.CreateGeometry">
      <summary>
            Creates the geometry.
            Returns null when the geometry is empty!
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Rendering.BackgroundGeometryBuilder.ExtendToFullWidthAtLineEnd">
      <summary>
            Gets/Sets whether to extend the rectangles to full width at line end.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Rendering.BackgroundGeometryBuilder.GetRectsForSegment(ICSharpCode.AvalonEdit.Rendering.TextView,ICSharpCode.AvalonEdit.Document.ISegment,System.Boolean)">
      <summary>
            Calculates the list of rectangle where the segment in shown.
            This method usually returns one rectangle for each line inside the segment
            (but potentially more, e.g. when bidirectional text is involved).
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Rendering.BackgroundGeometryBuilder.GetRectsFromVisualSegment(ICSharpCode.AvalonEdit.Rendering.TextView,ICSharpCode.AvalonEdit.Rendering.VisualLine,System.Int32,System.Int32)">
      <summary>
            Calculates the rectangles for the visual column segment.
            This returns one rectangle for each line inside the segment.
            </summary>
    </member>
    <member name="T:ICSharpCode.AvalonEdit.Rendering.CollapsedLineSection">
      <summary>
            Represents a collapsed line section.
            Use the Uncollapse() method to uncollapse the section.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Rendering.CollapsedLineSection.End">
      <summary>
            Gets the end line of the section.
            When the section is uncollapsed or the text containing it is deleted,
            this property returns null.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Rendering.CollapsedLineSection.IsCollapsed">
      <summary>
            Gets if the document line is collapsed.
            This property initially is true and turns to false when uncollapsing the section.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Rendering.CollapsedLineSection.Start">
      <summary>
            Gets the start line of the section.
            When the section is uncollapsed or the text containing it is deleted,
            this property returns null.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Rendering.CollapsedLineSection.ToString">
      <summary>
            Gets a string representation of the collapsed section.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Rendering.CollapsedLineSection.Uncollapse">
      <summary>
            Uncollapses the section.
            This causes the Start and End properties to be set to null!
            Does nothing if the section is already uncollapsed.
            </summary>
    </member>
    <member name="T:ICSharpCode.AvalonEdit.Rendering.ColorizingTransformer">
      <summary>
            Base class for <see cref="T:ICSharpCode.AvalonEdit.Rendering.IVisualLineTransformer" /> that helps
            splitting visual elements so that colors (and other text properties) can be easily assigned
            to individual words/characters.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Rendering.ColorizingTransformer.#ctor">
      <summary>Initializes a new instance of the <see cref="T:ICSharpCode.AvalonEdit.Rendering.ColorizingTransformer" /> class</summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Rendering.ColorizingTransformer.ChangeVisualElements(System.Int32,System.Int32,System.Action{ICSharpCode.AvalonEdit.Rendering.VisualLineElement})">
      <summary>
            Changes visual element properties.
            This method accesses <see cref="P:ICSharpCode.AvalonEdit.Rendering.ColorizingTransformer.CurrentElements" />, so it must be called only during
            a <see cref="M:ICSharpCode.AvalonEdit.Rendering.ColorizingTransformer.Transform(ICSharpCode.AvalonEdit.Rendering.ITextRunConstructionContext,System.Collections.Generic.IList{ICSharpCode.AvalonEdit.Rendering.VisualLineElement})" /> call.
            This method splits <see cref="T:ICSharpCode.AvalonEdit.Rendering.VisualLineElement" />s as necessary to ensure that the region
            can be colored by setting the <see cref="P:ICSharpCode.AvalonEdit.Rendering.VisualLineElement.TextRunProperties" /> of whole elements,
            and then calls the <paramref name="action" /> on all elements in the region.
            </summary>
      <param name="visualStartColumn">Start visual column of the region to change</param>
      <param name="visualEndColumn">End visual column of the region to change</param>
      <param name="action">Action that changes an individual <see cref="T:ICSharpCode.AvalonEdit.Rendering.VisualLineElement" />.</param>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Rendering.ColorizingTransformer.Colorize(ICSharpCode.AvalonEdit.Rendering.ITextRunConstructionContext)">
      <summary>
            Performs the colorization.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Rendering.ColorizingTransformer.CurrentElements">
      <summary>
            Gets the list of elements currently being transformed.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Rendering.ColorizingTransformer.OnAddToTextView(ICSharpCode.AvalonEdit.Rendering.TextView)">
      <summary>
            Called when added to a text view.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Rendering.ColorizingTransformer.OnRemoveFromTextView(ICSharpCode.AvalonEdit.Rendering.TextView)">
      <summary>
            Called when removed from a text view.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Rendering.ColorizingTransformer.Transform(ICSharpCode.AvalonEdit.Rendering.ITextRunConstructionContext,System.Collections.Generic.IList{ICSharpCode.AvalonEdit.Rendering.VisualLineElement})">
      <summary>
        <see cref="M:ICSharpCode.AvalonEdit.Rendering.IVisualLineTransformer.Transform(ICSharpCode.AvalonEdit.Rendering.ITextRunConstructionContext,System.Collections.Generic.IList{ICSharpCode.AvalonEdit.Rendering.VisualLineElement})" /> implementation.
            Sets <see cref="P:ICSharpCode.AvalonEdit.Rendering.ColorizingTransformer.CurrentElements" /> and calls <see cref="M:ICSharpCode.AvalonEdit.Rendering.ColorizingTransformer.Colorize(ICSharpCode.AvalonEdit.Rendering.ITextRunConstructionContext)" />.
            </summary>
    </member>
    <member name="T:ICSharpCode.AvalonEdit.Rendering.DefaultTextRunTypographyProperties">
      <summary>
            Default implementation for TextRunTypographyProperties.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Rendering.DefaultTextRunTypographyProperties.#ctor">
      <summary>Initializes a new instance of the <see cref="T:ICSharpCode.AvalonEdit.Rendering.DefaultTextRunTypographyProperties" /> class</summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Rendering.DefaultTextRunTypographyProperties.AnnotationAlternates">
      <summary>Gets the index of an alternate annotation form.</summary>
      <returns>The index of the alternate annotation form. The default is 0 (zero).</returns>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Rendering.DefaultTextRunTypographyProperties.Capitals">
      <summary>Gets a value that indicates the capital form of the selected font.</summary>
      <returns>One of the <see cref="T:System.Windows.FontCapitals" /> values. The default is <see cref="F:System.Windows.FontCapitals.Normal" />.</returns>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Rendering.DefaultTextRunTypographyProperties.CapitalSpacing">
      <summary>Gets a value that indicates whether inter-glyph spacing for all-capital text is globally adjusted to improve readability.</summary>
      <returns>true if spacing is adjusted; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Rendering.DefaultTextRunTypographyProperties.CaseSensitiveForms">
      <summary>Gets a value that indicates whether glyphs adjust their vertical position to better align with uppercase glyphs.</summary>
      <returns>true if the vertical position is adjusted; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Rendering.DefaultTextRunTypographyProperties.ContextualAlternates">
      <summary>Gets a value that indicates whether custom glyph forms can be used based upon the context of the text being rendered.</summary>
      <returns>true if custom glyph forms can be used; otherwise, false. The default is true.</returns>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Rendering.DefaultTextRunTypographyProperties.ContextualLigatures">
      <summary>Gets a value that indicates whether contextual ligatures are enabled.</summary>
      <returns>true if contextual ligatures are enabled; otherwise, false. The default is true.</returns>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Rendering.DefaultTextRunTypographyProperties.ContextualSwashes">
      <summary>Gets a value that specifies the index of a contextual swashes form.</summary>
      <returns>The index of the standard swashes form. The default is 0 (zero).</returns>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Rendering.DefaultTextRunTypographyProperties.DiscretionaryLigatures">
      <summary>Gets a value that indicates whether discretionary ligatures are enabled.</summary>
      <returns>true if discretionary ligatures are enabled; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Rendering.DefaultTextRunTypographyProperties.EastAsianExpertForms">
      <summary>Gets a value that indicates whether the standard Japanese font forms have been replaced with the corresponding preferred typographic forms.</summary>
      <returns>true if standard Japanese font forms have been replaced with the corresponding preferred typographic forms; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Rendering.DefaultTextRunTypographyProperties.EastAsianLanguage">
      <summary>Gets a value that indicates the version of glyphs to be used for a specific writing system or language.</summary>
      <returns>One of the <see cref="T:System.Windows.FontEastAsianLanguage" /> values. The default is <see cref="F:System.Windows.FontEastAsianLanguage.Normal" />.</returns>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Rendering.DefaultTextRunTypographyProperties.EastAsianWidths">
      <summary>Gets a value that indicates the proportional width to be used for Latin characters in an East Asian font.</summary>
      <returns>One of the <see cref="T:System.Windows.FontEastAsianWidths" /> values. The default is <see cref="F:System.Windows.FontEastAsianWidths.Normal" />.</returns>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Rendering.DefaultTextRunTypographyProperties.Fraction">
      <summary>Gets a value that indicates the fraction style.</summary>
      <returns>One of the <see cref="T:System.Windows.FontFraction" /> values. The default is <see cref="F:System.Windows.FontFraction.Normal" />.</returns>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Rendering.DefaultTextRunTypographyProperties.HistoricalForms">
      <summary>Gets a value that indicates whether historical forms are enabled.</summary>
      <returns>true if historical forms are enabled; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Rendering.DefaultTextRunTypographyProperties.HistoricalLigatures">
      <summary>Gets a value that indicates whether historical ligatures are enabled.</summary>
      <returns>true if historical ligatures are enabled; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Rendering.DefaultTextRunTypographyProperties.Kerning">
      <summary>Gets a value that indicates whether kerning is enabled.</summary>
      <returns>true if kerning is enabled; otherwise, false. The default is true.</returns>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Rendering.DefaultTextRunTypographyProperties.MathematicalGreek">
      <summary>Gets a value that indicates whether standard typographic font forms of Greek glyphs have been replaced with corresponding font forms commonly used in mathematical notation.</summary>
      <returns>true if mathematical Greek forms are enabled; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Rendering.DefaultTextRunTypographyProperties.NumeralAlignment">
      <summary>Gets the alignment of widths when using numerals.</summary>
      <returns>One of the <see cref="T:System.Windows.FontNumeralAlignment" /> values. The default is <see cref="F:System.Windows.FontNumeralAlignment.Normal" />.</returns>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Rendering.DefaultTextRunTypographyProperties.NumeralStyle">
      <summary>Gets a value that indicates the set of glyphs that are used to render numeric alternate font forms.</summary>
      <returns>One of the <see cref="T:System.Windows.FontNumeralStyle" /> values. The default is <see cref="F:System.Windows.FontNumeralStyle.Normal" />.</returns>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Rendering.DefaultTextRunTypographyProperties.SlashedZero">
      <summary>Gets a value that indicates whether a nominal zero font form should be replaced with a slashed zero.</summary>
      <returns>true if slashed zero forms are enabled; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Rendering.DefaultTextRunTypographyProperties.StandardLigatures">
      <summary>Gets a value that indicates whether standard ligatures are enabled.</summary>
      <returns>true if standard ligatures are enabled; otherwise, false. The default is true.</returns>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Rendering.DefaultTextRunTypographyProperties.StandardSwashes">
      <summary>Gets the index of a standard swashes form.</summary>
      <returns>The index of the standard swashes form. The default is 0 (zero).</returns>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Rendering.DefaultTextRunTypographyProperties.StylisticAlternates">
      <summary>Gets the index of a stylistic alternates form.</summary>
      <returns>The index of the stylistic alternates form. The default is 0 (zero).</returns>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Rendering.DefaultTextRunTypographyProperties.StylisticSet1">
      <summary>Gets a value that indicates whether a stylistic set of a font form is enabled.</summary>
      <returns>true if the stylistic set of the font form is enabled; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Rendering.DefaultTextRunTypographyProperties.StylisticSet10">
      <summary>Gets a value that indicates whether a stylistic set of a font form is enabled.</summary>
      <returns>true if the stylistic set of the font form is enabled; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Rendering.DefaultTextRunTypographyProperties.StylisticSet11">
      <summary>Gets a value that indicates whether a stylistic set of a font form is enabled.</summary>
      <returns>true if the stylistic set of the font form is enabled; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Rendering.DefaultTextRunTypographyProperties.StylisticSet12">
      <summary>Gets a value that indicates whether a stylistic set of a font form is enabled.</summary>
      <returns>true if the stylistic set of the font form is enabled; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Rendering.DefaultTextRunTypographyProperties.StylisticSet13">
      <summary>Gets a value that indicates whether a stylistic set of a font form is enabled.</summary>
      <returns>true if the stylistic set of the font form is enabled; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Rendering.DefaultTextRunTypographyProperties.StylisticSet14">
      <summary>Gets a value that indicates whether a stylistic set of a font form is enabled.</summary>
      <returns>true if the stylistic set of the font form is enabled; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Rendering.DefaultTextRunTypographyProperties.StylisticSet15">
      <summary>Gets a value that indicates whether a stylistic set of a font form is enabled.</summary>
      <returns>true if the stylistic set of the font form is enabled; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Rendering.DefaultTextRunTypographyProperties.StylisticSet16">
      <summary>Gets a value that indicates whether a stylistic set of a font form is enabled.</summary>
      <returns>true if the stylistic set of the font form is enabled; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Rendering.DefaultTextRunTypographyProperties.StylisticSet17">
      <summary>Gets a value that indicates whether a stylistic set of a font form is enabled.</summary>
      <returns>true if the stylistic set of the font form is enabled; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Rendering.DefaultTextRunTypographyProperties.StylisticSet18">
      <summary>Gets a value that indicates whether a stylistic set of a font form is enabled.</summary>
      <returns>true if the stylistic set of the font form is enabled; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Rendering.DefaultTextRunTypographyProperties.StylisticSet19">
      <summary>Gets a value that indicates whether a stylistic set of a font form is enabled.</summary>
      <returns>true if the stylistic set of the font form is enabled; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Rendering.DefaultTextRunTypographyProperties.StylisticSet2">
      <summary>Gets a value that indicates whether a stylistic set of a font form is enabled.</summary>
      <returns>true if the stylistic set of the font form is enabled; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Rendering.DefaultTextRunTypographyProperties.StylisticSet20">
      <summary>Gets a value that indicates whether a stylistic set of a font form is enabled.</summary>
      <returns>true if the stylistic set of the font form is enabled; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Rendering.DefaultTextRunTypographyProperties.StylisticSet3">
      <summary>Gets a value that indicates whether a stylistic set of a font form is enabled.</summary>
      <returns>true if the stylistic set of the font form is enabled; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Rendering.DefaultTextRunTypographyProperties.StylisticSet4">
      <summary>Gets a value that indicates whether a stylistic set of a font form is enabled.</summary>
      <returns>true if the stylistic set of the font form is enabled; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Rendering.DefaultTextRunTypographyProperties.StylisticSet5">
      <summary>Gets a value that indicates whether a stylistic set of a font form is enabled.</summary>
      <returns>true if the stylistic set of the font form is enabled; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Rendering.DefaultTextRunTypographyProperties.StylisticSet6">
      <summary>Gets a value that indicates whether a stylistic set of a font form is enabled.</summary>
      <returns>true if the stylistic set of the font form is enabled; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Rendering.DefaultTextRunTypographyProperties.StylisticSet7">
      <summary>Gets a value that indicates whether a stylistic set of a font form is enabled.</summary>
      <returns>true if the stylistic set of the font form is enabled; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Rendering.DefaultTextRunTypographyProperties.StylisticSet8">
      <summary>Gets a value that indicates whether a stylistic set of a font form is enabled.</summary>
      <returns>true if the stylistic set of the font form is enabled; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Rendering.DefaultTextRunTypographyProperties.StylisticSet9">
      <summary>Gets a value that indicates whether a stylistic set of a font form is enabled.</summary>
      <returns>true if the stylistic set of the font form is enabled; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Rendering.DefaultTextRunTypographyProperties.Variants">
      <summary>Gets a value that indicates a variation of the standard typographic form to be used.</summary>
      <returns>One of the <see cref="T:System.Windows.FontVariants" /> values. The default is <see cref="F:System.Windows.FontVariants.Normal" />.</returns>
    </member>
    <member name="T:ICSharpCode.AvalonEdit.Rendering.DocumentColorizingTransformer">
      <summary>
            Base class for <see cref="T:ICSharpCode.AvalonEdit.Rendering.IVisualLineTransformer" /> that helps
            colorizing the document. Derived classes can work with document lines
            and text offsets and this class takes care of the visual lines and visual columns.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Rendering.DocumentColorizingTransformer.#ctor">
      <summary>Initializes a new instance of the <see cref="T:ICSharpCode.AvalonEdit.Rendering.DocumentColorizingTransformer" /> class</summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Rendering.DocumentColorizingTransformer.ChangeLinePart(System.Int32,System.Int32,System.Action{ICSharpCode.AvalonEdit.Rendering.VisualLineElement})">
      <summary>
            Changes a part of the current document line.
            </summary>
      <param name="startOffset">Start offset of the region to change</param>
      <param name="endOffset">End offset of the region to change</param>
      <param name="action">Action that changes an individual <see cref="T:ICSharpCode.AvalonEdit.Rendering.VisualLineElement" />.</param>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Rendering.DocumentColorizingTransformer.Colorize(ICSharpCode.AvalonEdit.Rendering.ITextRunConstructionContext)">
      <summary>
            Performs the colorization.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Rendering.DocumentColorizingTransformer.ColorizeLine(ICSharpCode.AvalonEdit.Document.DocumentLine)">
      <summary>
            Override this method to colorize an individual document line.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Rendering.DocumentColorizingTransformer.CurrentContext">
      <summary>
            Gets the current ITextRunConstructionContext.
            </summary>
    </member>
    <member name="T:ICSharpCode.AvalonEdit.Rendering.FormattedTextElement">
      <summary>
            Formatted text (not normal document text).
            This is used as base class for various VisualLineElements that are displayed using a
            FormattedText, for example newline markers or collapsed folding sections.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Rendering.FormattedTextElement.#ctor(System.String,System.Int32)">
      <summary>
            Creates a new FormattedTextElement that displays the specified text
            and occupies the specified length in the document.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Rendering.FormattedTextElement.#ctor(System.Windows.Media.FormattedText,System.Int32)">
      <summary>
            Creates a new FormattedTextElement that displays the specified text
            and occupies the specified length in the document.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Rendering.FormattedTextElement.#ctor(System.Windows.Media.TextFormatting.TextLine,System.Int32)">
      <summary>
            Creates a new FormattedTextElement that displays the specified text
            and occupies the specified length in the document.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Rendering.FormattedTextElement.BreakAfter">
      <summary>
            Gets/sets the line break condition after the element.
            The default is 'BreakPossible'.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Rendering.FormattedTextElement.BreakBefore">
      <summary>
            Gets/sets the line break condition before the element.
            The default is 'BreakPossible'.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Rendering.FormattedTextElement.CreateTextRun(System.Int32,ICSharpCode.AvalonEdit.Rendering.ITextRunConstructionContext)">
      <summary>
            Creates the TextRun for this line element.
            </summary>
      <param name="startVisualColumn">
            The visual column from which the run should be constructed.
            Normally the same value as the <see cref="P:ICSharpCode.AvalonEdit.Rendering.VisualLineElement.VisualColumn" /> property is used to construct the full run;
            but when word-wrapping is active, partial runs might be created.
            </param>
      <param name="context">
            Context object that contains information relevant for text run creation.
            </param>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Rendering.FormattedTextElement.PrepareText(System.Windows.Media.TextFormatting.TextFormatter,System.String,System.Windows.Media.TextFormatting.TextRunProperties)">
      <summary>
            Constructs a TextLine from a simple text.
            </summary>
    </member>
    <member name="T:ICSharpCode.AvalonEdit.Rendering.FormattedTextRun">
      <summary>
            This is the TextRun implementation used by the <see cref="T:ICSharpCode.AvalonEdit.Rendering.FormattedTextElement" /> class.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Rendering.FormattedTextRun.#ctor(ICSharpCode.AvalonEdit.Rendering.FormattedTextElement,System.Windows.Media.TextFormatting.TextRunProperties)">
      <summary>
            Creates a new FormattedTextRun.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Rendering.FormattedTextRun.BreakAfter">
      <summary>Gets the line breaking condition after the text object.</summary>
      <returns>An enumerated value of <see cref="T:System.Windows.LineBreakCondition" />.</returns>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Rendering.FormattedTextRun.BreakBefore">
      <summary>Gets the line breaking condition before the text object.</summary>
      <returns>An enumerated value of <see cref="T:System.Windows.LineBreakCondition" />.</returns>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Rendering.FormattedTextRun.CharacterBufferReference">
      <summary>Gets a reference to the text run character buffer.</summary>
      <returns>A <see cref="T:System.Windows.Media.TextFormatting.CharacterBufferReference" /> value representing the characters in the text run.</returns>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Rendering.FormattedTextRun.ComputeBoundingBox(System.Boolean,System.Boolean)">
      <summary>Gets the computed bounding box of the text object.</summary>
      <param name="rightToLeft">A <see cref="T:System.Boolean" /> value that determines if the text object is drawn from right to left.</param>
      <param name="sideways">A <see cref="T:System.Boolean" /> value that determines if the text object is drawn with its side parallel to the baseline.</param>
      <returns>A <see cref="T:System.Windows.Rect" /> value that represents the bounding box size of the text object.</returns>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Rendering.FormattedTextRun.Draw(System.Windows.Media.DrawingContext,System.Windows.Point,System.Boolean,System.Boolean)">
      <summary>Draws the text object.</summary>
      <param name="drawingContext">The <see cref="T:System.Windows.Media.DrawingContext" /> to use for rendering the text object.</param>
      <param name="origin">The <see cref="T:System.Windows.Point" /> value that represents the origin where the text object is drawn.</param>
      <param name="rightToLeft">A <see cref="T:System.Boolean" /> value that determines if the text object is drawn from right to left.</param>
      <param name="sideways">A <see cref="T:System.Boolean" /> value that determines if the text object is drawn with its side parallel to the baseline.</param>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Rendering.FormattedTextRun.Element">
      <summary>
            Gets the element for which the FormattedTextRun was created.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Rendering.FormattedTextRun.Format(System.Double)">
      <summary>Get text object measurement metrics that will fit within the specified remaining width of the paragraph.</summary>
      <param name="remainingParagraphWidth">A <see cref="T:System.Double" /> that represents the remaining paragraph width.</param>
      <returns>A <see cref="T:System.Windows.Media.TextFormatting.TextEmbeddedObjectMetrics" /> value that represents the text object metrics.</returns>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Rendering.FormattedTextRun.HasFixedSize">
      <summary>Determines whether the text object has a fixed size regardless of where it is placed within a line.</summary>
      <returns>true if the text object has a fixed size; otherwise, false.</returns>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Rendering.FormattedTextRun.Length">
      <summary>Gets the number of characters in the text run.</summary>
      <returns>An <see cref="T:System.Int32" /> value that represents the number of characters.</returns>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Rendering.FormattedTextRun.Properties">
      <summary>Gets the set of text properties that are shared by every character in the text run, such as typeface or foreground brush.</summary>
      <returns>A <see cref="T:System.Windows.Media.TextFormatting.TextRunProperties" /> value that represents the set of shared text properties.</returns>
    </member>
    <member name="T:ICSharpCode.AvalonEdit.Rendering.IBackgroundRenderer">
      <summary>
            Background renderers draw in the background of a known layer.
            You can use background renderers to draw non-interactive elements on the TextView
            without introducing new UIElements.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Rendering.IBackgroundRenderer.Draw(ICSharpCode.AvalonEdit.Rendering.TextView,System.Windows.Media.DrawingContext)">
      <summary>
            Causes the background renderer to draw.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Rendering.IBackgroundRenderer.Layer">
      <summary>
            Gets the layer on which this background renderer should draw.
            </summary>
    </member>
    <member name="T:ICSharpCode.AvalonEdit.Rendering.InlineObjectElement">
      <summary>
            A inline UIElement in the document.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Rendering.InlineObjectElement.#ctor(System.Int32,System.Windows.UIElement)">
      <summary>
            Creates a new InlineObjectElement.
            </summary>
      <param name="documentLength">The length of the element in the document. Must be non-negative.</param>
      <param name="element">The element to display.</param>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Rendering.InlineObjectElement.CreateTextRun(System.Int32,ICSharpCode.AvalonEdit.Rendering.ITextRunConstructionContext)">
      <summary>
            Creates the TextRun for this line element.
            </summary>
      <param name="startVisualColumn">
            The visual column from which the run should be constructed.
            Normally the same value as the <see cref="P:ICSharpCode.AvalonEdit.Rendering.VisualLineElement.VisualColumn" /> property is used to construct the full run;
            but when word-wrapping is active, partial runs might be created.
            </param>
      <param name="context">
            Context object that contains information relevant for text run creation.
            </param>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Rendering.InlineObjectElement.Element">
      <summary>
            Gets the inline element that is displayed.
            </summary>
    </member>
    <member name="T:ICSharpCode.AvalonEdit.Rendering.InlineObjectRun">
      <summary>
            A text run with an embedded UIElement.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Rendering.InlineObjectRun.#ctor(System.Int32,System.Windows.Media.TextFormatting.TextRunProperties,System.Windows.UIElement)">
      <summary>
            Creates a new InlineObjectRun instance.
            </summary>
      <param name="length">The length of the TextRun.</param>
      <param name="properties">The <see cref="T:System.Windows.Media.TextFormatting.TextRunProperties" /> to use.</param>
      <param name="element">The <see cref="T:System.Windows.UIElement" /> to display.</param>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Rendering.InlineObjectRun.BreakAfter">
      <summary>Gets the line breaking condition after the text object.</summary>
      <returns>An enumerated value of <see cref="T:System.Windows.LineBreakCondition" />.</returns>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Rendering.InlineObjectRun.BreakBefore">
      <summary>Gets the line breaking condition before the text object.</summary>
      <returns>An enumerated value of <see cref="T:System.Windows.LineBreakCondition" />.</returns>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Rendering.InlineObjectRun.CharacterBufferReference">
      <summary>Gets a reference to the text run character buffer.</summary>
      <returns>A <see cref="T:System.Windows.Media.TextFormatting.CharacterBufferReference" /> value representing the characters in the text run.</returns>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Rendering.InlineObjectRun.ComputeBoundingBox(System.Boolean,System.Boolean)">
      <summary>Gets the computed bounding box of the text object.</summary>
      <param name="rightToLeft">A <see cref="T:System.Boolean" /> value that determines if the text object is drawn from right to left.</param>
      <param name="sideways">A <see cref="T:System.Boolean" /> value that determines if the text object is drawn with its side parallel to the baseline.</param>
      <returns>A <see cref="T:System.Windows.Rect" /> value that represents the bounding box size of the text object.</returns>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Rendering.InlineObjectRun.Draw(System.Windows.Media.DrawingContext,System.Windows.Point,System.Boolean,System.Boolean)">
      <summary>Draws the text object.</summary>
      <param name="drawingContext">The <see cref="T:System.Windows.Media.DrawingContext" /> to use for rendering the text object.</param>
      <param name="origin">The <see cref="T:System.Windows.Point" /> value that represents the origin where the text object is drawn.</param>
      <param name="rightToLeft">A <see cref="T:System.Boolean" /> value that determines if the text object is drawn from right to left.</param>
      <param name="sideways">A <see cref="T:System.Boolean" /> value that determines if the text object is drawn with its side parallel to the baseline.</param>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Rendering.InlineObjectRun.Element">
      <summary>
            Gets the element displayed by the InlineObjectRun.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Rendering.InlineObjectRun.Format(System.Double)">
      <summary>Get text object measurement metrics that will fit within the specified remaining width of the paragraph.</summary>
      <param name="remainingParagraphWidth">A <see cref="T:System.Double" /> that represents the remaining paragraph width.</param>
      <returns>A <see cref="T:System.Windows.Media.TextFormatting.TextEmbeddedObjectMetrics" /> value that represents the text object metrics.</returns>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Rendering.InlineObjectRun.HasFixedSize">
      <summary>Determines whether the text object has a fixed size regardless of where it is placed within a line.</summary>
      <returns>true if the text object has a fixed size; otherwise, false.</returns>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Rendering.InlineObjectRun.Length">
      <summary>Gets the number of characters in the text run.</summary>
      <returns>An <see cref="T:System.Int32" /> value that represents the number of characters.</returns>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Rendering.InlineObjectRun.Properties">
      <summary>Gets the set of text properties that are shared by every character in the text run, such as typeface or foreground brush.</summary>
      <returns>A <see cref="T:System.Windows.Media.TextFormatting.TextRunProperties" /> value that represents the set of shared text properties.</returns>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Rendering.InlineObjectRun.VisualLine">
      <summary>
            Gets the VisualLine that contains this object. This property is only available after the object
            was added to the text view.
            </summary>
    </member>
    <member name="T:ICSharpCode.AvalonEdit.Rendering.ITextRunConstructionContext">
      <summary>
            Contains information relevant for text run creation.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Rendering.ITextRunConstructionContext.Document">
      <summary>
            Gets the text document.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Rendering.ITextRunConstructionContext.GetText(System.Int32,System.Int32)">
      <summary>
            Gets a piece of text from the document.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Rendering.ITextRunConstructionContext.GlobalTextRunProperties">
      <summary>
            Gets the global text run properties.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Rendering.ITextRunConstructionContext.TextView">
      <summary>
            Gets the text view for which the construction runs.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Rendering.ITextRunConstructionContext.VisualLine">
      <summary>
            Gets the visual line that is currently being constructed.
            </summary>
    </member>
    <member name="T:ICSharpCode.AvalonEdit.Rendering.ITextViewConnect">
      <summary>
            Allows <see cref="T:ICSharpCode.AvalonEdit.Rendering.VisualLineElementGenerator" />s, <see cref="T:ICSharpCode.AvalonEdit.Rendering.IVisualLineTransformer" />s and
            <see cref="T:ICSharpCode.AvalonEdit.Rendering.IBackgroundRenderer" />s to be notified when they are added or removed from a text view.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Rendering.ITextViewConnect.AddToTextView(ICSharpCode.AvalonEdit.Rendering.TextView)">
      <summary>
            Called when added to a text view.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Rendering.ITextViewConnect.RemoveFromTextView(ICSharpCode.AvalonEdit.Rendering.TextView)">
      <summary>
            Called when removed from a text view.
            </summary>
    </member>
    <member name="T:ICSharpCode.AvalonEdit.Rendering.IVisualLineTransformer">
      <summary>
            Allows transforming visual line elements.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Rendering.IVisualLineTransformer.Transform(ICSharpCode.AvalonEdit.Rendering.ITextRunConstructionContext,System.Collections.Generic.IList{ICSharpCode.AvalonEdit.Rendering.VisualLineElement})">
      <summary>
            Applies the transformation to the specified list of visual line elements.
            </summary>
    </member>
    <member name="T:ICSharpCode.AvalonEdit.Rendering.KnownLayer">
      <summary>
            An enumeration of well-known layers.
            </summary>
    </member>
    <member name="F:ICSharpCode.AvalonEdit.Rendering.KnownLayer.Background">
      <summary>
            This layer is in the background.
            There is no UIElement to represent this layer, it is directly drawn in the TextView.
            It is not possible to replace the background layer or insert new layers below it.
            </summary>
    </member>
    <member name="F:ICSharpCode.AvalonEdit.Rendering.KnownLayer.Selection">
      <summary>
            This layer contains the selection rectangle.
            </summary>
    </member>
    <member name="F:ICSharpCode.AvalonEdit.Rendering.KnownLayer.Text">
      <summary>
            This layer contains the text and inline UI elements.
            </summary>
    </member>
    <member name="F:ICSharpCode.AvalonEdit.Rendering.KnownLayer.Caret">
      <summary>
            This layer contains the blinking caret.
            </summary>
    </member>
    <member name="T:ICSharpCode.AvalonEdit.Rendering.LayerInsertionPosition">
      <summary>
            Specifies where a new layer is inserted, in relation to an old layer.
            </summary>
    </member>
    <member name="F:ICSharpCode.AvalonEdit.Rendering.LayerInsertionPosition.Below">
      <summary>
            The new layer is inserted below the specified layer.
            </summary>
    </member>
    <member name="F:ICSharpCode.AvalonEdit.Rendering.LayerInsertionPosition.Replace">
      <summary>
            The new layer replaces the specified layer. The old layer is removed
            from the <see cref="P:ICSharpCode.AvalonEdit.Rendering.TextView.Layers" /> collection.
            </summary>
    </member>
    <member name="F:ICSharpCode.AvalonEdit.Rendering.LayerInsertionPosition.Above">
      <summary>
            The new layer is inserted above the specified layer.
            </summary>
    </member>
    <member name="T:ICSharpCode.AvalonEdit.Rendering.LinkElementGenerator">
      <summary>
            Detects hyperlinks and makes them clickable.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Rendering.LinkElementGenerator.#ctor">
      <summary>
            Creates a new LinkElementGenerator.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Rendering.LinkElementGenerator.#ctor(System.Text.RegularExpressions.Regex)">
      <summary>
            Creates a new LinkElementGenerator using the specified regex.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Rendering.LinkElementGenerator.ConstructElement(System.Int32)">
      <summary>
            Constructs an element at the specified offset.
            May return null if no element should be constructed.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Rendering.LinkElementGenerator.ConstructElementFromMatch(System.Text.RegularExpressions.Match)">
      <summary>
            Constructs a VisualLineElement that replaces the matched text.
            The default implementation will create a <see cref="T:ICSharpCode.AvalonEdit.Rendering.VisualLineLinkText" />
            based on the URI provided by <see cref="M:ICSharpCode.AvalonEdit.Rendering.LinkElementGenerator.GetUriFromMatch(System.Text.RegularExpressions.Match)" />.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Rendering.LinkElementGenerator.GetFirstInterestedOffset(System.Int32)">
      <summary>
            Gets the first offset &gt;= startOffset where the generator wants to construct an element.
            Return -1 to signal no interest.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Rendering.LinkElementGenerator.GetUriFromMatch(System.Text.RegularExpressions.Match)">
      <summary>
            Fetches the URI from the regex match. Returns null if the URI format is invalid.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Rendering.LinkElementGenerator.RequireControlModifierForClick">
      <summary>
            Gets/Sets whether the user needs to press Control to click the link.
            The default value is true.
            </summary>
    </member>
    <member name="T:ICSharpCode.AvalonEdit.Rendering.MouseHoverLogic">
      <summary>
            Encapsulates and adds MouseHover support to UIElements.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Rendering.MouseHoverLogic.#ctor(System.Windows.UIElement)">
      <summary>
            Creates a new instance and attaches itself to the <paramref name="target" /> UIElement.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Rendering.MouseHoverLogic.Dispose">
      <summary>
            Removes the MouseHover support from the target UIElement.
            </summary>
    </member>
    <member name="E:ICSharpCode.AvalonEdit.Rendering.MouseHoverLogic.MouseHover">
      <summary>
            Occurs when the mouse starts hovering over a certain location.
            </summary>
    </member>
    <member name="E:ICSharpCode.AvalonEdit.Rendering.MouseHoverLogic.MouseHoverStopped">
      <summary>
            Occurs when the mouse stops hovering over a certain location.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Rendering.MouseHoverLogic.OnMouseHover(System.Windows.Input.MouseEventArgs)">
      <summary>
            Raises the <see cref="E:ICSharpCode.AvalonEdit.Rendering.MouseHoverLogic.MouseHover" /> event.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Rendering.MouseHoverLogic.OnMouseHoverStopped(System.Windows.Input.MouseEventArgs)">
      <summary>
            Raises the <see cref="E:ICSharpCode.AvalonEdit.Rendering.MouseHoverLogic.MouseHoverStopped" /> event.
            </summary>
    </member>
    <member name="T:ICSharpCode.AvalonEdit.Rendering.TextView">
      <summary>
            A virtualizing panel producing+showing <see cref="T:ICSharpCode.AvalonEdit.Rendering.VisualLine" />s for a <see cref="T:ICSharpCode.AvalonEdit.Document.TextDocument" />.
            
            This is the heart of the text editor, this class controls the text rendering process.
            
            Taken as a standalone control, it's a text viewer without any editing capability.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Rendering.TextView.#ctor">
      <summary>
            Creates a new TextView instance.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Rendering.TextView.ArrangeOverride(System.Windows.Size)">
      <summary>
            Arrange implementation.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Rendering.TextView.BackgroundRenderers">
      <summary>
            Gets the list of background renderers.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Rendering.TextView.CollapseLines(ICSharpCode.AvalonEdit.Document.DocumentLine,ICSharpCode.AvalonEdit.Document.DocumentLine)">
      <summary>
            Collapses lines for the purpose of scrolling. <see cref="T:ICSharpCode.AvalonEdit.Document.DocumentLine" />s marked as collapsed will be hidden
            and not used to start the generation of a <see cref="T:ICSharpCode.AvalonEdit.Rendering.VisualLine" />.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Rendering.TextView.ColumnRulerPen">
      <summary>
            Gets/Sets the pen used to draw the column ruler.
            <seealso cref="P:ICSharpCode.AvalonEdit.TextEditorOptions.ShowColumnRuler" /></summary>
    </member>
    <member name="F:ICSharpCode.AvalonEdit.Rendering.TextView.ColumnRulerPenProperty">
      <summary>
            The pen used to draw the column ruler.
            <seealso cref="P:ICSharpCode.AvalonEdit.TextEditorOptions.ShowColumnRuler" /></summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Rendering.TextView.DefaultBaseline">
      <summary>
            Gets the default baseline position. This is the difference between <see cref="F:ICSharpCode.AvalonEdit.Rendering.VisualYPosition.TextTop" />
            and <see cref="F:ICSharpCode.AvalonEdit.Rendering.VisualYPosition.Baseline" /> for a line containing regular text.
            Lines that include formatted text or custom UI elements may have a different baseline.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Rendering.TextView.DefaultLineHeight">
      <summary>
            Gets the default line height. This is the height of an empty line or a line containing regular text.
            Lines that include formatted text or custom UI elements may have a different line height.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Rendering.TextView.Document">
      <summary>
            Gets/Sets the document displayed by the text editor.
            </summary>
    </member>
    <member name="E:ICSharpCode.AvalonEdit.Rendering.TextView.DocumentChanged">
      <summary>
            Occurs when the document property has changed.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Rendering.TextView.DocumentHeight">
      <summary>
            Gets the height of the document.
            </summary>
    </member>
    <member name="F:ICSharpCode.AvalonEdit.Rendering.TextView.DocumentProperty">
      <summary>
            Document property.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Rendering.TextView.ElementGenerators">
      <summary>
            Gets a collection where element generators can be registered.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Rendering.TextView.EnsureVisualLines">
      <summary>
            If the visual lines are invalid, creates new visual lines for the visible part
            of the document.
            If all visual lines are valid, this method does nothing.
            </summary>
      <exception cref="T:System.InvalidOperationException">The visual line build process is already running.
            It is not allowed to call this method during the construction of a visual line.</exception>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Rendering.TextView.GetDocumentLineByVisualTop(System.Double)">
      <summary>
            Gets the document line at the specified visual position.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Rendering.TextView.GetOrConstructVisualLine(ICSharpCode.AvalonEdit.Document.DocumentLine)">
      <summary>
            Gets the visual line that contains the document line with the specified number.
            If that line is outside the visible range, a new VisualLine for that document line is constructed.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Rendering.TextView.GetPosition(System.Windows.Point)">
      <summary>
            Gets the text view position from the specified visual position.
            If the position is within a character, it is rounded to the next character boundary.
            </summary>
      <param name="visualPosition">The position in WPF device-independent pixels relative
            to the top left corner of the document.</param>
      <returns>The logical position, or null if the position is outside the document.</returns>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Rendering.TextView.GetPositionFloor(System.Windows.Point)">
      <summary>
            Gets the text view position from the specified visual position.
            If the position is inside a character, the position in front of the character is returned.
            </summary>
      <param name="visualPosition">The position in WPF device-independent pixels relative
            to the top left corner of the document.</param>
      <returns>The logical position, or null if the position is outside the document.</returns>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Rendering.TextView.GetVisualChild(System.Int32)">
      <summary>Overrides <see cref="M:System.Windows.Media.Visual.GetVisualChild(System.Int32)" />, and returns a child at the specified index from a collection of child elements. </summary>
      <param name="index">The zero-based index of the requested child element in the collection.</param>
      <returns>The requested child element. This should not return null; if the provided index is out of range, an exception is thrown.</returns>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Rendering.TextView.GetVisualLine(System.Int32)">
      <summary>
            Gets the visual line that contains the document line with the specified number.
            Returns null if the document line is outside the visible range.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Rendering.TextView.GetVisualLineFromVisualTop(System.Double)">
      <summary>
            Gets the visual line at the specified document position (relative to start of document).
            Returns null if there is no visual line for the position (e.g. the position is outside the visible
            text area).
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Rendering.TextView.GetVisualPosition(ICSharpCode.AvalonEdit.TextViewPosition,ICSharpCode.AvalonEdit.Rendering.VisualYPosition)">
      <summary>
            Gets the visual position from a text view position.
            </summary>
      <param name="position">The text view position.</param>
      <param name="yPositionMode">The mode how to retrieve the Y position.</param>
      <returns>The position in WPF device-independent pixels relative
            to the top left corner of the document.</returns>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Rendering.TextView.GetVisualTopByDocumentLine(System.Int32)">
      <summary>
            Gets the visual top position (relative to start of document) from a document line number.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Rendering.TextView.HitTestCore(System.Windows.Media.PointHitTestParameters)">
      <summary> Implements <see cref="M:System.Windows.Media.Visual.HitTestCore(System.Windows.Media.PointHitTestParameters)" /> to supply base element hit testing behavior (returning <see cref="T:System.Windows.Media.HitTestResult" />). </summary>
      <param name="hitTestParameters">Describes the hit test to perform, including the initial hit point.</param>
      <returns>Results of the test, including the evaluated point.</returns>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Rendering.TextView.HorizontalOffset">
      <summary>
            Gets the horizontal scroll offset.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Rendering.TextView.InsertLayer(System.Windows.UIElement,ICSharpCode.AvalonEdit.Rendering.KnownLayer,ICSharpCode.AvalonEdit.Rendering.LayerInsertionPosition)">
      <summary>
            Inserts a new layer at a position specified relative to an existing layer.
            </summary>
      <param name="layer">The new layer to insert.</param>
      <param name="referencedLayer">The existing layer</param>
      <param name="position">Specifies whether the layer is inserted above,below, or replaces the referenced layer</param>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Rendering.TextView.InvalidateCursor">
      <summary>
            Updates the mouse cursor by calling <see cref="M:System.Windows.Input.Mouse.UpdateCursor" />, but with input priority.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Rendering.TextView.InvalidateLayer(ICSharpCode.AvalonEdit.Rendering.KnownLayer)">
      <summary>
            Causes a known layer to redraw.
            This method does not invalidate visual lines;
            use the <see cref="M:ICSharpCode.AvalonEdit.Rendering.TextView.Redraw" /> method to do that.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Rendering.TextView.InvalidateLayer(ICSharpCode.AvalonEdit.Rendering.KnownLayer,System.Windows.Threading.DispatcherPriority)">
      <summary>
            Causes a known layer to redraw.
            This method does not invalidate visual lines;
            use the <see cref="M:ICSharpCode.AvalonEdit.Rendering.TextView.Redraw" /> method to do that.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Rendering.TextView.Layers">
      <summary>
            Gets the list of layers displayed in the text view.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Rendering.TextView.LineTransformers">
      <summary>
            Gets a collection where line transformers can be registered.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Rendering.TextView.LinkTextBackgroundBrush">
      <summary>
            Gets/sets the Brush used for the background of link texts.
            </summary>
    </member>
    <member name="F:ICSharpCode.AvalonEdit.Rendering.TextView.LinkTextBackgroundBrushProperty">
      <summary>
            LinkTextBackgroundBrush dependency property.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Rendering.TextView.LinkTextForegroundBrush">
      <summary>
            Gets/sets the Brush used for displaying link texts.
            </summary>
    </member>
    <member name="F:ICSharpCode.AvalonEdit.Rendering.TextView.LinkTextForegroundBrushProperty">
      <summary>
            LinkTextForegroundBrush dependency property.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Rendering.TextView.LogicalChildren">
      <summary> Gets an enumerator for logical child elements of this element. </summary>
      <returns>An enumerator for logical child elements of this element.</returns>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Rendering.TextView.MakeVisible(System.Windows.Rect)">
      <summary>
            Scrolls the text view so that the specified rectangle gets visible.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Rendering.TextView.MeasureOverride(System.Windows.Size)">
      <summary>When overridden in a derived class, measures the size in layout required for child elements and determines a size for the <see cref="T:System.Windows.FrameworkElement" />-derived class. </summary>
      <param name="availableSize">The available size that this element can give to child elements. Infinity can be specified as a value to indicate that the element will size to whatever content is available.</param>
      <returns>The size that this element determines it needs during layout, based on its calculations of child element sizes.</returns>
    </member>
    <member name="E:ICSharpCode.AvalonEdit.Rendering.TextView.MouseHover">
      <summary>
            Occurs when the mouse has hovered over a fixed location for some time.
            </summary>
    </member>
    <member name="F:ICSharpCode.AvalonEdit.Rendering.TextView.MouseHoverEvent">
      <summary>
            The MouseHover event.
            </summary>
    </member>
    <member name="E:ICSharpCode.AvalonEdit.Rendering.TextView.MouseHoverStopped">
      <summary>
            Occurs when the mouse had previously hovered but now started moving again.
            </summary>
    </member>
    <member name="F:ICSharpCode.AvalonEdit.Rendering.TextView.MouseHoverStoppedEvent">
      <summary>
            The MouseHoverStopped event.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Rendering.TextView.NonPrintableCharacterBrush">
      <summary>
            Gets/sets the Brush used for displaying non-printable characters.
            </summary>
    </member>
    <member name="F:ICSharpCode.AvalonEdit.Rendering.TextView.NonPrintableCharacterBrushProperty">
      <summary>
            NonPrintableCharacterBrush dependency property.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Rendering.TextView.OnMouseDown(System.Windows.Input.MouseButtonEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.MouseDown" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> that contains the event data. This event data reports details about the mouse button that was pressed and the handled state.</param>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Rendering.TextView.OnMouseUp(System.Windows.Input.MouseButtonEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.MouseUp" /> routed event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> that contains the event data. The event data reports that the mouse button was released.</param>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Rendering.TextView.OnOptionChanged(System.ComponentModel.PropertyChangedEventArgs)">
      <summary>
            Raises the <see cref="E:ICSharpCode.AvalonEdit.Rendering.TextView.OptionChanged" /> event.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Rendering.TextView.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
      <summary>Invoked whenever the effective value of any dependency property on this <see cref="T:System.Windows.FrameworkElement" /> has been updated. The specific dependency property that changed is reported in the arguments parameter. Overrides <see cref="M:System.Windows.DependencyObject.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)" />.</summary>
      <param name="e">The event data that describes the property that changed, as well as old and new values.</param>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Rendering.TextView.OnQueryCursor(System.Windows.Input.QueryCursorEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.QueryCursor" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.QueryCursorEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Rendering.TextView.OnRender(System.Windows.Media.DrawingContext)">
      <summary>When overridden in a derived class, participates in rendering operations that are directed by the layout system. The rendering instructions for this element are not used directly when this method is invoked, and are instead preserved for later asynchronous use by layout and drawing. </summary>
      <param name="drawingContext">The drawing instructions for a specific element. This context is provided to the layout system.</param>
    </member>
    <member name="E:ICSharpCode.AvalonEdit.Rendering.TextView.OptionChanged">
      <summary>
            Occurs when a text editor option has changed.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Rendering.TextView.Options">
      <summary>
            Gets/Sets the options used by the text editor.
            </summary>
    </member>
    <member name="F:ICSharpCode.AvalonEdit.Rendering.TextView.OptionsProperty">
      <summary>
            Options property.
            </summary>
    </member>
    <member name="E:ICSharpCode.AvalonEdit.Rendering.TextView.PreviewMouseHover">
      <summary>
            Occurs when the mouse has hovered over a fixed location for some time.
            </summary>
    </member>
    <member name="F:ICSharpCode.AvalonEdit.Rendering.TextView.PreviewMouseHoverEvent">
      <summary>
            The PreviewMouseHover event.
            </summary>
    </member>
    <member name="E:ICSharpCode.AvalonEdit.Rendering.TextView.PreviewMouseHoverStopped">
      <summary>
            Occurs when the mouse had previously hovered but now started moving again.
            </summary>
    </member>
    <member name="F:ICSharpCode.AvalonEdit.Rendering.TextView.PreviewMouseHoverStoppedEvent">
      <summary>
            The PreviewMouseHoverStopped event.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Rendering.TextView.ReceiveWeakEvent(System.Type,System.Object,System.EventArgs)">
      <summary>Receives events from the centralized event manager.</summary>
      <param name="managerType">The type of the <see cref="T:System.Windows.WeakEventManager" /> calling this method.</param>
      <param name="sender">Object that originated the event.</param>
      <param name="e">Event data.</param>
      <returns>true if the listener handled the event. It is considered an error by the <see cref="T:System.Windows.WeakEventManager" /> handling in WPF to register a listener for an event that the listener does not handle. Regardless, the method should return false if it receives an event that it does not recognize or handle.</returns>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Rendering.TextView.Redraw">
      <summary>
            Causes the text editor to regenerate all visual lines.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Rendering.TextView.Redraw(ICSharpCode.AvalonEdit.Document.ISegment,System.Windows.Threading.DispatcherPriority)">
      <summary>
            Causes the text editor to redraw all lines overlapping with the specified segment.
            Does nothing if segment is null.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Rendering.TextView.Redraw(ICSharpCode.AvalonEdit.Rendering.VisualLine,System.Windows.Threading.DispatcherPriority)">
      <summary>
            Causes the text editor to regenerate the specified visual line.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Rendering.TextView.Redraw(System.Int32,System.Int32,System.Windows.Threading.DispatcherPriority)">
      <summary>
            Causes the text editor to redraw all lines overlapping with the specified segment.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Rendering.TextView.Redraw(System.Windows.Threading.DispatcherPriority)">
      <summary>
            Causes the text editor to regenerate all visual lines.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Rendering.TextView.ScrollOffset">
      <summary>
            Gets the scroll offset;
            </summary>
    </member>
    <member name="E:ICSharpCode.AvalonEdit.Rendering.TextView.ScrollOffsetChanged">
      <summary>
            Occurs when the scroll offset has changed.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Rendering.TextView.Services">
      <summary>
            Gets a service container used to associate services with the text view.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Rendering.TextView.VerticalOffset">
      <summary>
            Gets the vertical scroll offset.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Rendering.TextView.VisualChildrenCount">
      <summary>Gets the number of visual child elements within this element.</summary>
      <returns>The number of visual child elements for this element.</returns>
    </member>
    <member name="E:ICSharpCode.AvalonEdit.Rendering.TextView.VisualLineConstructionStarting">
      <summary>
            Occurs when the TextView is about to be measured and will regenerate its visual lines.
            This event may be used to mark visual lines as invalid that would otherwise be reused.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Rendering.TextView.VisualLines">
      <summary>
            Gets the currently visible visual lines.
            </summary>
      <exception cref="T:ICSharpCode.AvalonEdit.Rendering.VisualLinesInvalidException">
            Gets thrown if there are invalid visual lines when this property is accessed.
            You can use the <see cref="P:ICSharpCode.AvalonEdit.Rendering.TextView.VisualLinesValid" /> property to check for this case,
            or use the <see cref="M:ICSharpCode.AvalonEdit.Rendering.TextView.EnsureVisualLines" /> method to force creating the visual lines
            when they are invalid.
            </exception>
    </member>
    <member name="E:ICSharpCode.AvalonEdit.Rendering.TextView.VisualLinesChanged">
      <summary>
            Occurs when the TextView was measured and changed its visual lines.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Rendering.TextView.VisualLinesValid">
      <summary>
            Gets whether the visual lines are valid.
            Will return false after a call to Redraw().
            Accessing the visual lines property will cause a <see cref="T:ICSharpCode.AvalonEdit.Rendering.VisualLinesInvalidException" />
            if this property is <c>false</c>.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Rendering.TextView.WideSpaceWidth">
      <summary>
            Gets the width of a 'wide space' (the space width used for calculating the tab size).
            </summary>
    </member>
    <member name="T:ICSharpCode.AvalonEdit.Rendering.TextViewWeakEventManager">
      <summary>
            Contains weak event managers for the TextView events.
            </summary>
    </member>
    <member name="T:ICSharpCode.AvalonEdit.Rendering.TextViewWeakEventManager.DocumentChanged">
      <summary>
            Weak event manager for the <see cref="E:ICSharpCode.AvalonEdit.Rendering.TextView.DocumentChanged" /> event.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Rendering.TextViewWeakEventManager.DocumentChanged.#ctor">
      <summary>Initializes a new instance of the <see cref="T:ICSharpCode.AvalonEdit.Rendering.TextViewWeakEventManager.DocumentChanged" /> class</summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Rendering.TextViewWeakEventManager.DocumentChanged.StartListening(ICSharpCode.AvalonEdit.Rendering.TextView)">
      <summary>
            Attaches the event handler.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Rendering.TextViewWeakEventManager.DocumentChanged.StopListening(ICSharpCode.AvalonEdit.Rendering.TextView)">
      <summary>
            Detaches the event handler.
            </summary>
    </member>
    <member name="T:ICSharpCode.AvalonEdit.Rendering.TextViewWeakEventManager.ScrollOffsetChanged">
      <summary>
            Weak event manager for the <see cref="E:ICSharpCode.AvalonEdit.Rendering.TextView.ScrollOffsetChanged" /> event.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Rendering.TextViewWeakEventManager.ScrollOffsetChanged.#ctor">
      <summary>Initializes a new instance of the <see cref="T:ICSharpCode.AvalonEdit.Rendering.TextViewWeakEventManager.ScrollOffsetChanged" /> class</summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Rendering.TextViewWeakEventManager.ScrollOffsetChanged.StartListening(ICSharpCode.AvalonEdit.Rendering.TextView)">
      <summary>
            Attaches the event handler.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Rendering.TextViewWeakEventManager.ScrollOffsetChanged.StopListening(ICSharpCode.AvalonEdit.Rendering.TextView)">
      <summary>
            Detaches the event handler.
            </summary>
    </member>
    <member name="T:ICSharpCode.AvalonEdit.Rendering.TextViewWeakEventManager.VisualLinesChanged">
      <summary>
            Weak event manager for the <see cref="E:ICSharpCode.AvalonEdit.Rendering.TextView.VisualLinesChanged" /> event.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Rendering.TextViewWeakEventManager.VisualLinesChanged.#ctor">
      <summary>Initializes a new instance of the <see cref="T:ICSharpCode.AvalonEdit.Rendering.TextViewWeakEventManager.VisualLinesChanged" /> class</summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Rendering.TextViewWeakEventManager.VisualLinesChanged.StartListening(ICSharpCode.AvalonEdit.Rendering.TextView)">
      <summary>
            Attaches the event handler.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Rendering.TextViewWeakEventManager.VisualLinesChanged.StopListening(ICSharpCode.AvalonEdit.Rendering.TextView)">
      <summary>
            Detaches the event handler.
            </summary>
    </member>
    <member name="T:ICSharpCode.AvalonEdit.Rendering.VisualLine">
      <summary>
            Represents a visual line in the document.
            A visual line usually corresponds to one DocumentLine, but it can span multiple lines if
            all but the first are collapsed.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Rendering.VisualLine.Document">
      <summary>
            Gets the document to which this VisualLine belongs.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Rendering.VisualLine.Elements">
      <summary>
            Gets a read-only collection of line elements.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Rendering.VisualLine.FirstDocumentLine">
      <summary>
            Gets the first document line displayed by this visual line.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Rendering.VisualLine.GetNextCaretPosition(System.Int32,System.Windows.Documents.LogicalDirection,ICSharpCode.AvalonEdit.Document.CaretPositioningMode,System.Boolean)">
      <summary>
            Gets the next possible caret position after visualColumn, or -1 if there is no caret position.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Rendering.VisualLine.GetRelativeOffset(System.Int32)">
      <summary>
            Gets the document offset (relative to the first line start) from a visual column.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Rendering.VisualLine.GetTextLine(System.Int32)">
      <summary>
            Gets the text line containing the specified visual column.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Rendering.VisualLine.GetTextLineByVisualYPosition(System.Double)">
      <summary>
            Gets a TextLine by the visual position.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Rendering.VisualLine.GetTextLineVisualStartColumn(System.Windows.Media.TextFormatting.TextLine)">
      <summary>
            Gets the start visual column from the specified text line.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Rendering.VisualLine.GetTextLineVisualXPosition(System.Windows.Media.TextFormatting.TextLine,System.Int32)">
      <summary>
            Gets the distance to the left border of the text area of the specified visual column.
            The visual column must belong to the specified text line.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Rendering.VisualLine.GetTextLineVisualYPosition(System.Windows.Media.TextFormatting.TextLine,ICSharpCode.AvalonEdit.Rendering.VisualYPosition)">
      <summary>
            Gets the visual top from the specified text line.
            </summary>
      <returns>Distance in device-independent pixels
            from the top of the document to the top of the specified text line.</returns>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Rendering.VisualLine.GetVisualColumn(System.Int32)">
      <summary>
            Gets the visual column from a document offset relative to the first line start.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Rendering.VisualLine.GetVisualColumn(System.Windows.Media.TextFormatting.TextLine,System.Double,System.Boolean)">
      <summary>
            Gets the visual column from a document position (relative to top left of the document).
            If the user clicks between two visual columns, rounds to the nearest column.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Rendering.VisualLine.GetVisualColumn(System.Windows.Point)">
      <summary>
            Gets the visual column from a document position (relative to top left of the document).
            If the user clicks between two visual columns, rounds to the nearest column.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Rendering.VisualLine.GetVisualColumn(System.Windows.Point,System.Boolean)">
      <summary>
            Gets the visual column from a document position (relative to top left of the document).
            If the user clicks between two visual columns, rounds to the nearest column.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Rendering.VisualLine.GetVisualColumnFloor(System.Windows.Point)">
      <summary>
            Gets the visual column from a document position (relative to top left of the document).
            If the user clicks between two visual columns, returns the first of those columns.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Rendering.VisualLine.GetVisualColumnFloor(System.Windows.Point,System.Boolean)">
      <summary>
            Gets the visual column from a document position (relative to top left of the document).
            If the user clicks between two visual columns, returns the first of those columns.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Rendering.VisualLine.GetVisualPosition(System.Int32,ICSharpCode.AvalonEdit.Rendering.VisualYPosition)">
      <summary>
            Gets the visual position from the specified visualColumn.
            </summary>
      <returns>Position in device-independent pixels
            relative to the top left of the document.</returns>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Rendering.VisualLine.Height">
      <summary>
            Gets the height of the visual line in device-independent pixels.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Rendering.VisualLine.IsDisposed">
      <summary>
            Gets whether the visual line was disposed.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Rendering.VisualLine.LastDocumentLine">
      <summary>
            Gets the last document line displayed by this visual line.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Rendering.VisualLine.ReplaceElement(System.Int32,ICSharpCode.AvalonEdit.Rendering.VisualLineElement[])">
      <summary>
            Replaces the single element at <paramref name="elementIndex" /> with the specified elements.
            The replacement operation must preserve the document length, but may change the visual length.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Rendering.VisualLine.ReplaceElement(System.Int32,System.Int32,ICSharpCode.AvalonEdit.Rendering.VisualLineElement[])">
      <summary>
            Replaces <paramref name="count" /> elements starting at <paramref name="elementIndex" /> with the specified elements.
            The replacement operation must preserve the document length, but may change the visual length.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Rendering.VisualLine.StartOffset">
      <summary>
            Gets the start offset of the VisualLine inside the document.
            This is equivalent to <c>FirstDocumentLine.Offset</c>.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Rendering.VisualLine.TextLines">
      <summary>
            Gets a read-only collection of text lines.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Rendering.VisualLine.ValidateVisualColumn(ICSharpCode.AvalonEdit.TextViewPosition,System.Boolean)">
      <summary>
            Validates the visual column and returns the correct one.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Rendering.VisualLine.ValidateVisualColumn(System.Int32,System.Int32,System.Boolean)">
      <summary>
            Validates the visual column and returns the correct one.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Rendering.VisualLine.VisualLength">
      <summary>
            Length in visual line coordinates.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Rendering.VisualLine.VisualLengthWithEndOfLineMarker">
      <summary>
            Length in visual line coordinates including the end of line marker, if TextEditorOptions.ShowEndOfLine is enabled.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Rendering.VisualLine.VisualTop">
      <summary>
            Gets the Y position of the line. This is measured in device-independent pixels relative to the start of the document.
            </summary>
    </member>
    <member name="T:ICSharpCode.AvalonEdit.Rendering.VisualLineConstructionStartEventArgs">
      <summary>
            EventArgs for the <see cref="E:ICSharpCode.AvalonEdit.Rendering.TextView.VisualLineConstructionStarting" /> event.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Rendering.VisualLineConstructionStartEventArgs.#ctor(ICSharpCode.AvalonEdit.Document.DocumentLine)">
      <summary>
            Creates a new VisualLineConstructionStartEventArgs instance.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Rendering.VisualLineConstructionStartEventArgs.FirstLineInView">
      <summary>
            Gets/Sets the first line that is visible in the TextView.
            </summary>
    </member>
    <member name="T:ICSharpCode.AvalonEdit.Rendering.VisualLineElement">
      <summary>
            Represents a visual element in the document.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Rendering.VisualLineElement.#ctor(System.Int32,System.Int32)">
      <summary>
            Creates a new VisualLineElement.
            </summary>
      <param name="visualLength">The length of the element in VisualLine coordinates. Must be positive.</param>
      <param name="documentLength">The length of the element in the document. Must be non-negative.</param>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Rendering.VisualLineElement.BackgroundBrush">
      <summary>
            Gets/sets the brush used for the background of this <see cref="T:ICSharpCode.AvalonEdit.Rendering.VisualLineElement" />.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Rendering.VisualLineElement.CanSplit">
      <summary>
            Gets if this VisualLineElement can be split.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Rendering.VisualLineElement.CreateTextRun(System.Int32,ICSharpCode.AvalonEdit.Rendering.ITextRunConstructionContext)">
      <summary>
            Creates the TextRun for this line element.
            </summary>
      <param name="startVisualColumn">
            The visual column from which the run should be constructed.
            Normally the same value as the <see cref="P:ICSharpCode.AvalonEdit.Rendering.VisualLineElement.VisualColumn" /> property is used to construct the full run;
            but when word-wrapping is active, partial runs might be created.
            </param>
      <param name="context">
            Context object that contains information relevant for text run creation.
            </param>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Rendering.VisualLineElement.DocumentLength">
      <summary>
            Gets the length of this element in the text document.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Rendering.VisualLineElement.GetNextCaretPosition(System.Int32,System.Windows.Documents.LogicalDirection,ICSharpCode.AvalonEdit.Document.CaretPositioningMode)">
      <summary>
            Gets the next caret position inside this element.
            </summary>
      <param name="visualColumn">The visual column from which the search should be started.</param>
      <param name="direction">The search direction (forwards or backwards).</param>
      <param name="mode">Whether to stop only at word borders.</param>
      <returns>The visual column of the next caret position, or -1 if there is no next caret position.</returns>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Rendering.VisualLineElement.GetPrecedingText(System.Int32,ICSharpCode.AvalonEdit.Rendering.ITextRunConstructionContext)">
      <summary>
            Retrieves the text span immediately before the visual column.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Rendering.VisualLineElement.GetRelativeOffset(System.Int32)">
      <summary>
            Gets the text offset of a visual column inside this element.
            </summary>
      <returns>A text offset relative to the visual line start.</returns>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Rendering.VisualLineElement.GetVisualColumn(System.Int32)">
      <summary>
            Gets the visual column of a text location inside this element.
            The text offset is given relative to the visual line start.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Rendering.VisualLineElement.HandlesLineBorders">
      <summary>
            Gets whether the <see cref="M:ICSharpCode.AvalonEdit.Rendering.VisualLineElement.GetNextCaretPosition(System.Int32,System.Windows.Documents.LogicalDirection,ICSharpCode.AvalonEdit.Document.CaretPositioningMode)" /> implementation handles line borders.
            If this property returns false, the caller of GetNextCaretPosition should handle the line
            borders (i.e. place caret stops at the start and end of the line).
            This property has an effect only for VisualLineElements that are at the start or end of a
            <see cref="T:ICSharpCode.AvalonEdit.Rendering.VisualLine" />.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Rendering.VisualLineElement.IsWhitespace(System.Int32)">
      <summary>
            Gets whether the specified offset in this element is considered whitespace.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Rendering.VisualLineElement.OnMouseDown(System.Windows.Input.MouseButtonEventArgs)">
      <summary>
            Allows the visual line element to handle a mouse event.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Rendering.VisualLineElement.OnMouseUp(System.Windows.Input.MouseButtonEventArgs)">
      <summary>
            Allows the visual line element to handle a mouse event.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Rendering.VisualLineElement.OnQueryCursor(System.Windows.Input.QueryCursorEventArgs)">
      <summary>
            Queries the cursor over the visual line element.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Rendering.VisualLineElement.RelativeTextOffset">
      <summary>
            Gets the text offset where this element starts, relative to the start text offset of the visual line.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Rendering.VisualLineElement.Split(System.Int32,System.Collections.Generic.IList{ICSharpCode.AvalonEdit.Rendering.VisualLineElement},System.Int32)">
      <summary>
            Splits the element.
            </summary>
      <param name="splitVisualColumn">Position inside this element at which it should be broken</param>
      <param name="elements">The collection of line elements</param>
      <param name="elementIndex">The index at which this element is in the elements list.</param>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Rendering.VisualLineElement.SplitHelper(ICSharpCode.AvalonEdit.Rendering.VisualLineElement,ICSharpCode.AvalonEdit.Rendering.VisualLineElement,System.Int32,System.Int32)">
      <summary>
            Helper method for splitting this line element into two, correctly updating the
            <see cref="P:ICSharpCode.AvalonEdit.Rendering.VisualLineElement.VisualLength" />, <see cref="P:ICSharpCode.AvalonEdit.Rendering.VisualLineElement.DocumentLength" />, <see cref="P:ICSharpCode.AvalonEdit.Rendering.VisualLineElement.VisualColumn" />
            and <see cref="P:ICSharpCode.AvalonEdit.Rendering.VisualLineElement.RelativeTextOffset" /> properties.
            </summary>
      <param name="firstPart">The element before the split position.</param>
      <param name="secondPart">The element after the split position.</param>
      <param name="splitVisualColumn">The split position as visual column.</param>
      <param name="splitRelativeTextOffset">The split position as text offset.</param>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Rendering.VisualLineElement.TextRunProperties">
      <summary>
            Gets the text run properties.
            A unique <see cref="T:ICSharpCode.AvalonEdit.Rendering.VisualLineElementTextRunProperties" /> instance is used for each
            <see cref="T:ICSharpCode.AvalonEdit.Rendering.VisualLineElement" />; colorizing code may assume that modifying the
            <see cref="T:ICSharpCode.AvalonEdit.Rendering.VisualLineElementTextRunProperties" /> will affect only this
            <see cref="T:ICSharpCode.AvalonEdit.Rendering.VisualLineElement" />.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Rendering.VisualLineElement.VisualColumn">
      <summary>
            Gets the visual column where this element starts.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Rendering.VisualLineElement.VisualLength">
      <summary>
            Gets the length of this element in visual columns.
            </summary>
    </member>
    <member name="T:ICSharpCode.AvalonEdit.Rendering.VisualLineElementGenerator">
      <summary>
            Abstract base class for generators that produce new visual line elements.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Rendering.VisualLineElementGenerator.#ctor">
      <summary>Initializes a new instance of the <see cref="T:ICSharpCode.AvalonEdit.Rendering.VisualLineElementGenerator" /> class</summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Rendering.VisualLineElementGenerator.ConstructElement(System.Int32)">
      <summary>
            Constructs an element at the specified offset.
            May return null if no element should be constructed.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Rendering.VisualLineElementGenerator.CurrentContext">
      <summary>
            Gets the text run construction context.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Rendering.VisualLineElementGenerator.FinishGeneration">
      <summary>
            De-initializes the generator.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Rendering.VisualLineElementGenerator.GetFirstInterestedOffset(System.Int32)">
      <summary>
            Gets the first offset &gt;= startOffset where the generator wants to construct an element.
            Return -1 to signal no interest.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Rendering.VisualLineElementGenerator.StartGeneration(ICSharpCode.AvalonEdit.Rendering.ITextRunConstructionContext)">
      <summary>
            Initializes the generator for the <see cref="T:ICSharpCode.AvalonEdit.Rendering.ITextRunConstructionContext" /></summary>
    </member>
    <member name="T:ICSharpCode.AvalonEdit.Rendering.VisualLineElementTextRunProperties">
      <summary>
        <see cref="T:System.Windows.Media.TextFormatting.TextRunProperties" /> implementation that allows changing the properties.
            A <see cref="T:ICSharpCode.AvalonEdit.Rendering.VisualLineElementTextRunProperties" /> instance usually is assigned to a single
            <see cref="T:ICSharpCode.AvalonEdit.Rendering.VisualLineElement" />.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Rendering.VisualLineElementTextRunProperties.#ctor(System.Windows.Media.TextFormatting.TextRunProperties)">
      <summary>
            Creates a new VisualLineElementTextRunProperties instance that copies its values
            from the specified <paramref name="textRunProperties" />.
            For the <see cref="P:ICSharpCode.AvalonEdit.Rendering.VisualLineElementTextRunProperties.TextDecorations" /> and <see cref="P:ICSharpCode.AvalonEdit.Rendering.VisualLineElementTextRunProperties.TextEffects" /> collections, deep copies
            are created if those collections are not frozen.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Rendering.VisualLineElementTextRunProperties.BackgroundBrush">
      <summary>Gets the brush that is used to paint the background color of the text run.</summary>
      <returns>A <see cref="T:System.Windows.Media.Brush" /> value that represents the background color.</returns>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Rendering.VisualLineElementTextRunProperties.BaselineAlignment">
      <summary>Gets the baseline style for a text that is positioned on the vertical axis.</summary>
      <returns>An enumerated value of <see cref="T:System.Windows.BaselineAlignment" />.</returns>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Rendering.VisualLineElementTextRunProperties.Clone">
      <summary>
            Creates a copy of this instance.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Rendering.VisualLineElementTextRunProperties.CultureInfo">
      <summary>Gets the culture information for the text run.</summary>
      <returns>A value of <see cref="T:System.Globalization.CultureInfo" /> that represents the culture of the text run.</returns>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Rendering.VisualLineElementTextRunProperties.FontHintingEmSize">
      <summary>Gets the text size in points, which is then used for font hinting.</summary>
      <returns>A <see cref="T:System.Double" /> that represents the text size in points. The default is 12 pt.</returns>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Rendering.VisualLineElementTextRunProperties.FontRenderingEmSize">
      <summary>Gets the text size in points for the text run.</summary>
      <returns>A <see cref="T:System.Double" /> that represents the text size in DIPs (Device Independent Pixels). The default is 12 DIP.</returns>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Rendering.VisualLineElementTextRunProperties.ForegroundBrush">
      <summary>Gets the brush that is used to paint the foreground color of the text run.</summary>
      <returns>A <see cref="T:System.Windows.Media.Brush" /> value that represents the foreground color.</returns>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Rendering.VisualLineElementTextRunProperties.NumberSubstitution">
      <summary>
            Gets the number substitution settings for the text run.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Rendering.VisualLineElementTextRunProperties.SetBackgroundBrush(System.Windows.Media.Brush)">
      <summary>
            Sets the <see cref="P:ICSharpCode.AvalonEdit.Rendering.VisualLineElementTextRunProperties.BackgroundBrush" />.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Rendering.VisualLineElementTextRunProperties.SetBaselineAlignment(System.Windows.BaselineAlignment)">
      <summary>
            Sets the <see cref="P:ICSharpCode.AvalonEdit.Rendering.VisualLineElementTextRunProperties.BaselineAlignment" />.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Rendering.VisualLineElementTextRunProperties.SetCultureInfo(System.Globalization.CultureInfo)">
      <summary>
            Sets the <see cref="P:ICSharpCode.AvalonEdit.Rendering.VisualLineElementTextRunProperties.CultureInfo" />.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Rendering.VisualLineElementTextRunProperties.SetFontHintingEmSize(System.Double)">
      <summary>
            Sets the <see cref="P:ICSharpCode.AvalonEdit.Rendering.VisualLineElementTextRunProperties.FontHintingEmSize" />.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Rendering.VisualLineElementTextRunProperties.SetFontRenderingEmSize(System.Double)">
      <summary>
            Sets the <see cref="P:ICSharpCode.AvalonEdit.Rendering.VisualLineElementTextRunProperties.FontRenderingEmSize" />.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Rendering.VisualLineElementTextRunProperties.SetForegroundBrush(System.Windows.Media.Brush)">
      <summary>
            Sets the <see cref="P:ICSharpCode.AvalonEdit.Rendering.VisualLineElementTextRunProperties.ForegroundBrush" />.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Rendering.VisualLineElementTextRunProperties.SetNumberSubstitution(System.Windows.Media.NumberSubstitution)">
      <summary>
            Sets the <see cref="P:ICSharpCode.AvalonEdit.Rendering.VisualLineElementTextRunProperties.NumberSubstitution" />.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Rendering.VisualLineElementTextRunProperties.SetTextDecorations(System.Windows.TextDecorationCollection)">
      <summary>
            Sets the <see cref="P:ICSharpCode.AvalonEdit.Rendering.VisualLineElementTextRunProperties.TextDecorations" />.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Rendering.VisualLineElementTextRunProperties.SetTextEffects(System.Windows.Media.TextEffectCollection)">
      <summary>
            Sets the <see cref="P:ICSharpCode.AvalonEdit.Rendering.VisualLineElementTextRunProperties.TextEffects" />.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Rendering.VisualLineElementTextRunProperties.SetTypeface(System.Windows.Media.Typeface)">
      <summary>
            Sets the <see cref="P:ICSharpCode.AvalonEdit.Rendering.VisualLineElementTextRunProperties.Typeface" />.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Rendering.VisualLineElementTextRunProperties.SetTypographyProperties(System.Windows.Media.TextFormatting.TextRunTypographyProperties)">
      <summary>
            Sets the <see cref="P:ICSharpCode.AvalonEdit.Rendering.VisualLineElementTextRunProperties.TypographyProperties" />.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Rendering.VisualLineElementTextRunProperties.TextDecorations">
      <summary>
            Gets the text decorations. The value may be null, a frozen <see cref="T:System.Windows.TextDecorationCollection" />
            or an unfrozen <see cref="T:System.Windows.TextDecorationCollection" />.
            If the value is an unfrozen <see cref="T:System.Windows.TextDecorationCollection" />, you may assume that the
            collection instance is only used for this <see cref="T:System.Windows.Media.TextFormatting.TextRunProperties" /> instance and it is safe
            to add <see cref="T:System.Windows.TextDecoration" />s.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Rendering.VisualLineElementTextRunProperties.TextEffects">
      <summary>
            Gets the text effects. The value may be null, a frozen <see cref="T:System.Windows.Media.TextEffectCollection" />
            or an unfrozen <see cref="T:System.Windows.Media.TextEffectCollection" />.
            If the value is an unfrozen <see cref="T:System.Windows.Media.TextEffectCollection" />, you may assume that the
            collection instance is only used for this <see cref="T:System.Windows.Media.TextFormatting.TextRunProperties" /> instance and it is safe
            to add <see cref="T:System.Windows.Media.TextEffect" />s.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Rendering.VisualLineElementTextRunProperties.Typeface">
      <summary>Gets the typeface for the text run.</summary>
      <returns>A value of <see cref="T:System.Windows.Media.Typeface" />.</returns>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Rendering.VisualLineElementTextRunProperties.TypographyProperties">
      <summary>
            Gets the typography properties for the text run.
            </summary>
    </member>
    <member name="T:ICSharpCode.AvalonEdit.Rendering.VisualLineLinkText">
      <summary>
            VisualLineElement that represents a piece of text and is a clickable link.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Rendering.VisualLineLinkText.#ctor(ICSharpCode.AvalonEdit.Rendering.VisualLine,System.Int32)">
      <summary>
            Creates a visual line text element with the specified length.
            It uses the <see cref="P:ICSharpCode.AvalonEdit.Rendering.ITextRunConstructionContext.VisualLine" /> and its
            <see cref="P:ICSharpCode.AvalonEdit.Rendering.VisualLineElement.RelativeTextOffset" /> to find the actual text string.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Rendering.VisualLineLinkText.CreateInstance(System.Int32)">
      <summary>
            Override this method to control the type of new VisualLineText instances when
            the visual line is split due to syntax highlighting.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Rendering.VisualLineLinkText.CreateTextRun(System.Int32,ICSharpCode.AvalonEdit.Rendering.ITextRunConstructionContext)">
      <summary>
            Creates the TextRun for this line element.
            </summary>
      <param name="startVisualColumn">
            The visual column from which the run should be constructed.
            Normally the same value as the <see cref="P:ICSharpCode.AvalonEdit.Rendering.VisualLineElement.VisualColumn" /> property is used to construct the full run;
            but when word-wrapping is active, partial runs might be created.
            </param>
      <param name="context">
            Context object that contains information relevant for text run creation.
            </param>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Rendering.VisualLineLinkText.LinkIsClickable">
      <summary>
            Gets whether the link is currently clickable.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Rendering.VisualLineLinkText.NavigateUri">
      <summary>
            Gets/Sets the URL that is navigated to when the link is clicked.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Rendering.VisualLineLinkText.OnMouseDown(System.Windows.Input.MouseButtonEventArgs)">
      <summary>
            Allows the visual line element to handle a mouse event.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Rendering.VisualLineLinkText.OnQueryCursor(System.Windows.Input.QueryCursorEventArgs)">
      <summary>
            Queries the cursor over the visual line element.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Rendering.VisualLineLinkText.RequireControlModifierForClick">
      <summary>
            Gets/Sets whether the user needs to press Control to click the link.
            The default value is true.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Rendering.VisualLineLinkText.TargetName">
      <summary>
            Gets/Sets the window name where the URL will be opened.
            </summary>
    </member>
    <member name="T:ICSharpCode.AvalonEdit.Rendering.VisualLinesInvalidException">
      <summary>
            A VisualLinesInvalidException indicates that you accessed the <see cref="P:ICSharpCode.AvalonEdit.Rendering.TextView.VisualLines" /> property
            of the <see cref="T:ICSharpCode.AvalonEdit.Rendering.TextView" /> while the visual lines were invalid.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Rendering.VisualLinesInvalidException.#ctor">
      <summary>
            Creates a new VisualLinesInvalidException instance.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Rendering.VisualLinesInvalidException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Creates a new VisualLinesInvalidException instance.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Rendering.VisualLinesInvalidException.#ctor(System.String)">
      <summary>
            Creates a new VisualLinesInvalidException instance.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Rendering.VisualLinesInvalidException.#ctor(System.String,System.Exception)">
      <summary>
            Creates a new VisualLinesInvalidException instance.
            </summary>
    </member>
    <member name="T:ICSharpCode.AvalonEdit.Rendering.VisualLineText">
      <summary>
            VisualLineElement that represents a piece of text.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Rendering.VisualLineText.#ctor(ICSharpCode.AvalonEdit.Rendering.VisualLine,System.Int32)">
      <summary>
            Creates a visual line text element with the specified length.
            It uses the <see cref="P:ICSharpCode.AvalonEdit.Rendering.ITextRunConstructionContext.VisualLine" /> and its
            <see cref="P:ICSharpCode.AvalonEdit.Rendering.VisualLineElement.RelativeTextOffset" /> to find the actual text string.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Rendering.VisualLineText.CanSplit">
      <summary>
            Gets if this VisualLineElement can be split.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Rendering.VisualLineText.CreateInstance(System.Int32)">
      <summary>
            Override this method to control the type of new VisualLineText instances when
            the visual line is split due to syntax highlighting.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Rendering.VisualLineText.CreateTextRun(System.Int32,ICSharpCode.AvalonEdit.Rendering.ITextRunConstructionContext)">
      <summary>
            Creates the TextRun for this line element.
            </summary>
      <param name="startVisualColumn">
            The visual column from which the run should be constructed.
            Normally the same value as the <see cref="P:ICSharpCode.AvalonEdit.Rendering.VisualLineElement.VisualColumn" /> property is used to construct the full run;
            but when word-wrapping is active, partial runs might be created.
            </param>
      <param name="context">
            Context object that contains information relevant for text run creation.
            </param>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Rendering.VisualLineText.GetNextCaretPosition(System.Int32,System.Windows.Documents.LogicalDirection,ICSharpCode.AvalonEdit.Document.CaretPositioningMode)">
      <summary>
            Gets the next caret position inside this element.
            </summary>
      <param name="visualColumn">The visual column from which the search should be started.</param>
      <param name="direction">The search direction (forwards or backwards).</param>
      <param name="mode">Whether to stop only at word borders.</param>
      <returns>The visual column of the next caret position, or -1 if there is no next caret position.</returns>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Rendering.VisualLineText.GetPrecedingText(System.Int32,ICSharpCode.AvalonEdit.Rendering.ITextRunConstructionContext)">
      <summary>
            Retrieves the text span immediately before the visual column.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Rendering.VisualLineText.GetRelativeOffset(System.Int32)">
      <summary>
            Gets the text offset of a visual column inside this element.
            </summary>
      <returns>A text offset relative to the visual line start.</returns>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Rendering.VisualLineText.GetVisualColumn(System.Int32)">
      <summary>
            Gets the visual column of a text location inside this element.
            The text offset is given relative to the visual line start.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Rendering.VisualLineText.IsWhitespace(System.Int32)">
      <summary>
            Gets whether the specified offset in this element is considered whitespace.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Rendering.VisualLineText.ParentVisualLine">
      <summary>
            Gets the parent visual line.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Rendering.VisualLineText.Split(System.Int32,System.Collections.Generic.IList{ICSharpCode.AvalonEdit.Rendering.VisualLineElement},System.Int32)">
      <summary>
            Splits the element.
            </summary>
      <param name="splitVisualColumn">Position inside this element at which it should be broken</param>
      <param name="elements">The collection of line elements</param>
      <param name="elementIndex">The index at which this element is in the elements list.</param>
    </member>
    <member name="T:ICSharpCode.AvalonEdit.Rendering.VisualYPosition">
      <summary>
            An enum that specifies the possible Y positions that can be returned by VisualLine.GetVisualPosition.
            </summary>
    </member>
    <member name="F:ICSharpCode.AvalonEdit.Rendering.VisualYPosition.LineTop">
      <summary>
            Returns the top of the TextLine.
            </summary>
    </member>
    <member name="F:ICSharpCode.AvalonEdit.Rendering.VisualYPosition.TextTop">
      <summary>
            Returns the top of the text.
            If the line contains inline UI elements larger than the text, TextTop may be below LineTop.
            For a line containing regular text (all in the editor's main font), this will be equal to LineTop.
            </summary>
    </member>
    <member name="F:ICSharpCode.AvalonEdit.Rendering.VisualYPosition.LineBottom">
      <summary>
            Returns the bottom of the TextLine.
            </summary>
    </member>
    <member name="F:ICSharpCode.AvalonEdit.Rendering.VisualYPosition.LineMiddle">
      <summary>
            The middle between LineTop and LineBottom.
            </summary>
    </member>
    <member name="F:ICSharpCode.AvalonEdit.Rendering.VisualYPosition.TextBottom">
      <summary>
            Returns the bottom of the text. 
            If the line contains inline UI elements larger than the text, TextBottom might be above LineBottom.
            For a line containing regular text (all in the editor's main font), this will be equal to LineBottom.
            </summary>
    </member>
    <member name="F:ICSharpCode.AvalonEdit.Rendering.VisualYPosition.TextMiddle">
      <summary>
            The middle between TextTop and TextBottom.
            </summary>
    </member>
    <member name="F:ICSharpCode.AvalonEdit.Rendering.VisualYPosition.Baseline">
      <summary>
            Returns the baseline of the text.
            </summary>
    </member>
    <member name="T:ICSharpCode.AvalonEdit.Search.ISearchResult">
      <summary>
            Represents a search result.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Search.ISearchResult.ReplaceWith(System.String)">
      <summary>
            Replaces parts of the replacement string with parts from the match. (e.g. $1)
            </summary>
    </member>
    <member name="T:ICSharpCode.AvalonEdit.Search.ISearchStrategy">
      <summary>
            Basic interface for search algorithms.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Search.ISearchStrategy.FindAll(ICSharpCode.AvalonEdit.Document.ITextSource,System.Int32,System.Int32)">
      <summary>
            Finds all matches in the given ITextSource and the given range.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Search.ISearchStrategy.FindNext(ICSharpCode.AvalonEdit.Document.ITextSource,System.Int32,System.Int32)">
      <summary>
            Finds the next match in the given ITextSource and the given range.
            </summary>
    </member>
    <member name="T:ICSharpCode.AvalonEdit.Search.Localization">
      <summary>
            Holds default texts for buttons and labels in the SearchPanel. Override properties to add other languages.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Search.Localization.#ctor">
      <summary>Initializes a new instance of the <see cref="T:ICSharpCode.AvalonEdit.Search.Localization" /> class</summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Search.Localization.ErrorText">
      <summary>
            Default: 'Error: '
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Search.Localization.FindNextText">
      <summary>
            Default: 'Find next (F3)'
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Search.Localization.FindPreviousText">
      <summary>
            Default: 'Find previous (Shift+F3)'
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Search.Localization.MatchCaseText">
      <summary>
            Default: 'Match case'
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Search.Localization.MatchWholeWordsText">
      <summary>
            Default: 'Match whole words'
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Search.Localization.NoMatchesFoundText">
      <summary>
            Default: 'No matches found!'
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Search.Localization.UseRegexText">
      <summary>
            Default: 'Use regular expressions'
            </summary>
    </member>
    <member name="T:ICSharpCode.AvalonEdit.Search.SearchCommands">
      <summary>
            Search commands for AvalonEdit.
            </summary>
    </member>
    <member name="F:ICSharpCode.AvalonEdit.Search.SearchCommands.CloseSearchPanel">
      <summary>
            Closes the SearchPanel.
            </summary>
    </member>
    <member name="F:ICSharpCode.AvalonEdit.Search.SearchCommands.FindNext">
      <summary>
            Finds the next occurrence in the file.
            </summary>
    </member>
    <member name="F:ICSharpCode.AvalonEdit.Search.SearchCommands.FindPrevious">
      <summary>
            Finds the previous occurrence in the file.
            </summary>
    </member>
    <member name="T:ICSharpCode.AvalonEdit.Search.SearchInputHandler">
      <summary>
            TextAreaInputHandler that registers all search-related commands.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Search.SearchInputHandler.#ctor(ICSharpCode.AvalonEdit.Editing.TextArea)">
      <summary>
            Creates a new SearchInputHandler and registers the search-related commands.
            </summary>
    </member>
    <member name="E:ICSharpCode.AvalonEdit.Search.SearchInputHandler.SearchOptionsChanged">
      <summary>
            Fired when SearchOptions are modified inside the SearchPanel.
            </summary>
    </member>
    <member name="T:ICSharpCode.AvalonEdit.Search.SearchMode">
      <summary>
            Defines supported search modes.
            </summary>
    </member>
    <member name="F:ICSharpCode.AvalonEdit.Search.SearchMode.Normal">
      <summary>
            Standard search
            </summary>
    </member>
    <member name="F:ICSharpCode.AvalonEdit.Search.SearchMode.RegEx">
      <summary>
            RegEx search
            </summary>
    </member>
    <member name="F:ICSharpCode.AvalonEdit.Search.SearchMode.Wildcard">
      <summary>
            Wildcard search
            </summary>
    </member>
    <member name="T:ICSharpCode.AvalonEdit.Search.SearchOptionsChangedEventArgs">
      <summary>
            EventArgs for <see cref="E:ICSharpCode.AvalonEdit.Search.SearchPanel.SearchOptionsChanged" /> event.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Search.SearchOptionsChangedEventArgs.#ctor(System.String,System.Boolean,System.Boolean,System.Boolean)">
      <summary>
            Creates a new SearchOptionsChangedEventArgs instance.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Search.SearchOptionsChangedEventArgs.MatchCase">
      <summary>
            Gets whether the search pattern should be interpreted case-sensitive.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Search.SearchOptionsChangedEventArgs.SearchPattern">
      <summary>
            Gets the search pattern.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Search.SearchOptionsChangedEventArgs.UseRegex">
      <summary>
            Gets whether the search pattern should be interpreted as regular expression.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Search.SearchOptionsChangedEventArgs.WholeWords">
      <summary>
            Gets whether the search pattern should only match whole words.
            </summary>
    </member>
    <member name="T:ICSharpCode.AvalonEdit.Search.SearchPanel">
      <summary>
            Provides search functionality for AvalonEdit. It is displayed in the top-right corner of the TextArea.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Search.SearchPanel.#ctor">
      <summary>
            Creates a new SearchPanel.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Search.SearchPanel.Attach(ICSharpCode.AvalonEdit.Editing.TextArea)">
      <summary>
            Attaches this SearchPanel to a TextArea instance.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Search.SearchPanel.Close">
      <summary>
            Closes the SearchPanel.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Search.SearchPanel.CloseAndRemove">
      <summary>
            Closes the SearchPanel and removes it.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Search.SearchPanel.FindNext">
      <summary>
            Moves to the next occurrence in the file.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Search.SearchPanel.FindPrevious">
      <summary>
            Moves to the previous occurrence in the file.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Search.SearchPanel.IsClosed">
      <summary>
            Gets whether the Panel is already closed.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Search.SearchPanel.Localization">
      <summary>
            Gets/sets the localization for the SearchPanel.
            </summary>
    </member>
    <member name="F:ICSharpCode.AvalonEdit.Search.SearchPanel.LocalizationProperty">
      <summary>
            Dependency property for <see cref="P:ICSharpCode.AvalonEdit.Search.SearchPanel.Localization" />.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Search.SearchPanel.MarkerBrush">
      <summary>
            Gets/sets the Brush used for marking search results in the TextView.
            </summary>
    </member>
    <member name="F:ICSharpCode.AvalonEdit.Search.SearchPanel.MarkerBrushProperty">
      <summary>
            Dependency property for <see cref="P:ICSharpCode.AvalonEdit.Search.SearchPanel.MarkerBrush" />.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Search.SearchPanel.MatchCase">
      <summary>
            Gets/sets whether the search pattern should be interpreted case-sensitive.
            </summary>
    </member>
    <member name="F:ICSharpCode.AvalonEdit.Search.SearchPanel.MatchCaseProperty">
      <summary>
            Dependency property for <see cref="P:ICSharpCode.AvalonEdit.Search.SearchPanel.MatchCase" />.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Search.SearchPanel.OnApplyTemplate">
      <summary>When overridden in a derived class, is invoked whenever application code or internal processes call <see cref="M:System.Windows.FrameworkElement.ApplyTemplate" />.</summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Search.SearchPanel.OnSearchOptionsChanged(ICSharpCode.AvalonEdit.Search.SearchOptionsChangedEventArgs)">
      <summary>
            Raises the <see cref="E:ICSharpCode.AvalonEdit.Search.SearchPanel.SearchOptionsChanged" /> event.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Search.SearchPanel.Open">
      <summary>
            Opens the an existing search panel.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Search.SearchPanel.Reactivate">
      <summary>
            Reactivates the SearchPanel by setting the focus on the search box and selecting all text.
            </summary>
    </member>
    <member name="E:ICSharpCode.AvalonEdit.Search.SearchPanel.SearchOptionsChanged">
      <summary>
            Fired when SearchOptions are changed inside the SearchPanel.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Search.SearchPanel.SearchPattern">
      <summary>
            Gets/sets the search pattern.
            </summary>
    </member>
    <member name="F:ICSharpCode.AvalonEdit.Search.SearchPanel.SearchPatternProperty">
      <summary>
            Dependency property for <see cref="P:ICSharpCode.AvalonEdit.Search.SearchPanel.SearchPattern" />.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Search.SearchPanel.UseRegex">
      <summary>
            Gets/sets whether the search pattern should be interpreted as regular expression.
            </summary>
    </member>
    <member name="F:ICSharpCode.AvalonEdit.Search.SearchPanel.UseRegexProperty">
      <summary>
            Dependency property for <see cref="P:ICSharpCode.AvalonEdit.Search.SearchPanel.UseRegex" />.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Search.SearchPanel.WholeWords">
      <summary>
            Gets/sets whether the search pattern should only match whole words.
            </summary>
    </member>
    <member name="F:ICSharpCode.AvalonEdit.Search.SearchPanel.WholeWordsProperty">
      <summary>
            Dependency property for <see cref="P:ICSharpCode.AvalonEdit.Search.SearchPanel.WholeWords" />.
            </summary>
    </member>
    <member name="T:ICSharpCode.AvalonEdit.Search.SearchPatternException">
      <summary>Represents errors that occur during application execution.</summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Search.SearchPatternException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Exception" /> class.</summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Search.SearchPatternException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Exception" /> class with serialized data.</summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown. </param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination. </param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is null. </exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult" /> is zero (0). </exception>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Search.SearchPatternException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Exception" /> class with a specified error message.</summary>
      <param name="message">The message that describes the error. </param>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Search.SearchPatternException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Exception" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception. </param>
      <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified. </param>
    </member>
    <member name="T:ICSharpCode.AvalonEdit.Search.SearchStrategyFactory">
      <summary>
            Provides factory methods for ISearchStrategies.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Search.SearchStrategyFactory.#ctor">
      <summary>Initializes a new instance of the <see cref="T:ICSharpCode.AvalonEdit.Search.SearchStrategyFactory" /> class</summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Search.SearchStrategyFactory.Create(System.String,System.Boolean,System.Boolean,ICSharpCode.AvalonEdit.Search.SearchMode)">
      <summary>
            Creates a default ISearchStrategy with the given parameters.
            </summary>
    </member>
    <member name="T:ICSharpCode.AvalonEdit.Snippets.AnchorElement">
      <summary>
            AnchorElement created by SnippetAnchorElement.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Snippets.AnchorElement.#ctor(ICSharpCode.AvalonEdit.Document.AnchorSegment,System.String,ICSharpCode.AvalonEdit.Snippets.InsertionContext)">
      <summary>
            Creates a new AnchorElement.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Snippets.AnchorElement.Deactivate(ICSharpCode.AvalonEdit.Snippets.SnippetEventArgs)">
      <summary>
            Called when the interactive mode is deactivated.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Snippets.AnchorElement.IsEditable">
      <summary>
            Gets whether this element is editable (the user will be able to select it with Tab).
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Snippets.AnchorElement.Name">
      <summary>
            Gets or sets the name of the anchor.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Snippets.AnchorElement.OnInsertionCompleted">
      <summary>
            Called when the all snippet elements have been inserted.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Snippets.AnchorElement.Segment">
      <summary>
            Gets the segment associated with this element. May be null.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Snippets.AnchorElement.Text">
      <summary>
            Gets or sets the text at the anchor.
            </summary>
    </member>
    <member name="T:ICSharpCode.AvalonEdit.Snippets.DeactivateReason">
      <summary>
            Describes the reason for deactivation of a <see cref="T:ICSharpCode.AvalonEdit.Snippets.SnippetElement" />.
            </summary>
    </member>
    <member name="F:ICSharpCode.AvalonEdit.Snippets.DeactivateReason.Unknown">
      <summary>
            Unknown reason.
            </summary>
    </member>
    <member name="F:ICSharpCode.AvalonEdit.Snippets.DeactivateReason.Deleted">
      <summary>
            Snippet was deleted.
            </summary>
    </member>
    <member name="F:ICSharpCode.AvalonEdit.Snippets.DeactivateReason.NoActiveElements">
      <summary>
            There are no active elements in the snippet.
            </summary>
    </member>
    <member name="F:ICSharpCode.AvalonEdit.Snippets.DeactivateReason.InputHandlerDetached">
      <summary>
            The SnippetInputHandler was detached.
            </summary>
    </member>
    <member name="F:ICSharpCode.AvalonEdit.Snippets.DeactivateReason.ReturnPressed">
      <summary>
            Return was pressed by the user.
            </summary>
    </member>
    <member name="F:ICSharpCode.AvalonEdit.Snippets.DeactivateReason.EscapePressed">
      <summary>
            Escape was pressed by the user.
            </summary>
    </member>
    <member name="T:ICSharpCode.AvalonEdit.Snippets.IActiveElement">
      <summary>
            Represents an active element that allows the snippet to stay interactive after insertion.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Snippets.IActiveElement.Deactivate(ICSharpCode.AvalonEdit.Snippets.SnippetEventArgs)">
      <summary>
            Called when the interactive mode is deactivated.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Snippets.IActiveElement.IsEditable">
      <summary>
            Gets whether this element is editable (the user will be able to select it with Tab).
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Snippets.IActiveElement.OnInsertionCompleted">
      <summary>
            Called when the all snippet elements have been inserted.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Snippets.IActiveElement.Segment">
      <summary>
            Gets the segment associated with this element. May be null.
            </summary>
    </member>
    <member name="T:ICSharpCode.AvalonEdit.Snippets.InsertionContext">
      <summary>
            Represents the context of a snippet insertion.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Snippets.InsertionContext.#ctor(ICSharpCode.AvalonEdit.Editing.TextArea,System.Int32)">
      <summary>
            Creates a new InsertionContext instance.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Snippets.InsertionContext.ActiveElements">
      <summary>
            Gets the list of active elements.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Snippets.InsertionContext.Deactivate(ICSharpCode.AvalonEdit.Snippets.SnippetEventArgs)">
      <summary>
            Calls the <see cref="M:ICSharpCode.AvalonEdit.Snippets.IActiveElement.Deactivate(ICSharpCode.AvalonEdit.Snippets.SnippetEventArgs)" /> method on all registered active elements.
            </summary>
      <param name="e">The EventArgs to use</param>
    </member>
    <member name="E:ICSharpCode.AvalonEdit.Snippets.InsertionContext.Deactivated">
      <summary>
            Occurs when the interactive mode is deactivated.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Snippets.InsertionContext.Document">
      <summary>
            Gets the text document.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Snippets.InsertionContext.GetActiveElement(ICSharpCode.AvalonEdit.Snippets.SnippetElement)">
      <summary>
            Returns the active element belonging to the specified snippet element, or null if no such active element is found.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Snippets.InsertionContext.Indentation">
      <summary>
            Gets the indentation at the insertion position.
            </summary>
    </member>
    <member name="E:ICSharpCode.AvalonEdit.Snippets.InsertionContext.InsertionCompleted">
      <summary>
            Occurs when the all snippet elements have been inserted.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Snippets.InsertionContext.InsertionPosition">
      <summary>
            Gets/Sets the insertion position.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Snippets.InsertionContext.InsertText(System.String)">
      <summary>
            Inserts text at the insertion position and advances the insertion position.
            This method will add the current indentation to every line in <paramref name="text" /> and will
            replace newlines with the expected newline for the document.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Snippets.InsertionContext.LineTerminator">
      <summary>
            Gets the line terminator at the insertion position.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Snippets.InsertionContext.RaiseInsertionCompleted(System.EventArgs)">
      <summary>
            Calls the <see cref="M:ICSharpCode.AvalonEdit.Snippets.IActiveElement.OnInsertionCompleted" /> method on all registered active elements
            and raises the <see cref="E:ICSharpCode.AvalonEdit.Snippets.InsertionContext.InsertionCompleted" /> event.
            </summary>
      <param name="e">The EventArgs to use</param>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Snippets.InsertionContext.ReceiveWeakEvent(System.Type,System.Object,System.EventArgs)">
      <summary>Receives events from the centralized event manager.</summary>
      <param name="managerType">The type of the <see cref="T:System.Windows.WeakEventManager" /> calling this method.</param>
      <param name="sender">Object that originated the event.</param>
      <param name="e">Event data.</param>
      <returns>true if the listener handled the event. It is considered an error by the <see cref="T:System.Windows.WeakEventManager" /> handling in WPF to register a listener for an event that the listener does not handle. Regardless, the method should return false if it receives an event that it does not recognize or handle.</returns>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Snippets.InsertionContext.RegisterActiveElement(ICSharpCode.AvalonEdit.Snippets.SnippetElement,ICSharpCode.AvalonEdit.Snippets.IActiveElement)">
      <summary>
            Registers an active element. Elements should be registered during insertion and will be called back
            when insertion has completed.
            </summary>
      <param name="owner">The snippet element that created the active element.</param>
      <param name="element">The active element.</param>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Snippets.InsertionContext.SelectedText">
      <summary>
            Gets the text that was selected before the insertion of the snippet.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Snippets.InsertionContext.StartPosition">
      <summary>
            Gets the start position of the snippet insertion.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Snippets.InsertionContext.Tab">
      <summary>
            Gets the indentation string for a single indentation level.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Snippets.InsertionContext.TextArea">
      <summary>
            Gets the text area.
            </summary>
    </member>
    <member name="T:ICSharpCode.AvalonEdit.Snippets.IReplaceableActiveElement">
      <summary>
            Interface for active element registered by <see cref="T:ICSharpCode.AvalonEdit.Snippets.SnippetReplaceableTextElement" />.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Snippets.IReplaceableActiveElement.Text">
      <summary>
            Gets the current text inside the element.
            </summary>
    </member>
    <member name="E:ICSharpCode.AvalonEdit.Snippets.IReplaceableActiveElement.TextChanged">
      <summary>
            Occurs when the text inside the element changes.
            </summary>
    </member>
    <member name="T:ICSharpCode.AvalonEdit.Snippets.Snippet">
      <summary>
            A code snippet that can be inserted into the text editor.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Snippets.Snippet.#ctor">
      <summary>Initializes a new instance of the <see cref="T:ICSharpCode.AvalonEdit.Snippets.Snippet" /> class</summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Snippets.Snippet.Insert(ICSharpCode.AvalonEdit.Editing.TextArea)">
      <summary>
            Inserts the snippet into the text area.
            </summary>
    </member>
    <member name="T:ICSharpCode.AvalonEdit.Snippets.SnippetAnchorElement">
      <summary>
            Creates a named anchor that can be accessed by other SnippetElements.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Snippets.SnippetAnchorElement.#ctor(System.String)">
      <summary>
            Creates a SnippetAnchorElement with the supplied name.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Snippets.SnippetAnchorElement.Insert(ICSharpCode.AvalonEdit.Snippets.InsertionContext)">
      <summary>
            Performs insertion of the snippet.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Snippets.SnippetAnchorElement.Name">
      <summary>
            Gets or sets the name of the anchor.
            </summary>
    </member>
    <member name="T:ICSharpCode.AvalonEdit.Snippets.SnippetBoundElement">
      <summary>
            An element that binds to a <see cref="T:ICSharpCode.AvalonEdit.Snippets.SnippetReplaceableTextElement" /> and displays the same text.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Snippets.SnippetBoundElement.#ctor">
      <summary>Initializes a new instance of the <see cref="T:ICSharpCode.AvalonEdit.Snippets.SnippetBoundElement" /> class</summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Snippets.SnippetBoundElement.ConvertText(System.String)">
      <summary>
            Converts the text before copying it.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Snippets.SnippetBoundElement.Insert(ICSharpCode.AvalonEdit.Snippets.InsertionContext)">
      <summary>
            Performs insertion of the snippet.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Snippets.SnippetBoundElement.TargetElement">
      <summary>
            Gets/Sets the target element.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Snippets.SnippetBoundElement.ToTextRun">
      <summary>
            Converts the snippet to text, with replaceable fields in italic.
            </summary>
    </member>
    <member name="T:ICSharpCode.AvalonEdit.Snippets.SnippetCaretElement">
      <summary>
            Sets the caret position after interactive mode has finished.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Snippets.SnippetCaretElement.#ctor">
      <summary>
            Creates a new SnippetCaretElement.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Snippets.SnippetCaretElement.#ctor(System.Boolean)">
      <summary>
            Creates a new SnippetCaretElement.
            </summary>
      <param name="setCaretOnlyIfTextIsSelected">
            If set to true, the caret is set only when some text was selected.
            This is useful when both SnippetCaretElement and SnippetSelectionElement are used in the same snippet.
            </param>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Snippets.SnippetCaretElement.Insert(ICSharpCode.AvalonEdit.Snippets.InsertionContext)">
      <summary>
            Performs insertion of the snippet.
            </summary>
    </member>
    <member name="T:ICSharpCode.AvalonEdit.Snippets.SnippetContainerElement">
      <summary>
            A snippet element that has sub-elements.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Snippets.SnippetContainerElement.#ctor">
      <summary>Initializes a new instance of the <see cref="T:ICSharpCode.AvalonEdit.Snippets.SnippetContainerElement" /> class</summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Snippets.SnippetContainerElement.Elements">
      <summary>
            Gets the list of child elements.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Snippets.SnippetContainerElement.Insert(ICSharpCode.AvalonEdit.Snippets.InsertionContext)">
      <summary>
            Performs insertion of the snippet.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Snippets.SnippetContainerElement.ToTextRun">
      <summary>
            Converts the snippet to text, with replaceable fields in italic.
            </summary>
    </member>
    <member name="T:ICSharpCode.AvalonEdit.Snippets.SnippetElement">
      <summary>
            An element inside a snippet.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Snippets.SnippetElement.#ctor">
      <summary>Initializes a new instance of the <see cref="T:ICSharpCode.AvalonEdit.Snippets.SnippetElement" /> class</summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Snippets.SnippetElement.Insert(ICSharpCode.AvalonEdit.Snippets.InsertionContext)">
      <summary>
            Performs insertion of the snippet.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Snippets.SnippetElement.ToTextRun">
      <summary>
            Converts the snippet to text, with replaceable fields in italic.
            </summary>
    </member>
    <member name="T:ICSharpCode.AvalonEdit.Snippets.SnippetEventArgs">
      <summary>
            Provides information about the event that occured during use of snippets.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Snippets.SnippetEventArgs.#ctor(ICSharpCode.AvalonEdit.Snippets.DeactivateReason)">
      <summary>
            Creates a new SnippetEventArgs object, with a DeactivateReason.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Snippets.SnippetEventArgs.Reason">
      <summary>
            Gets the reason for deactivation.
            </summary>
    </member>
    <member name="T:ICSharpCode.AvalonEdit.Snippets.SnippetReplaceableTextElement">
      <summary>
            Text element that is supposed to be replaced by the user.
            Will register an <see cref="T:ICSharpCode.AvalonEdit.Snippets.IReplaceableActiveElement" />.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Snippets.SnippetReplaceableTextElement.#ctor">
      <summary>Initializes a new instance of the <see cref="T:ICSharpCode.AvalonEdit.Snippets.SnippetReplaceableTextElement" /> class</summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Snippets.SnippetReplaceableTextElement.Insert(ICSharpCode.AvalonEdit.Snippets.InsertionContext)">
      <summary>
            Performs insertion of the snippet.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Snippets.SnippetReplaceableTextElement.ToTextRun">
      <summary>
            Converts the snippet to text, with replaceable fields in italic.
            </summary>
    </member>
    <member name="T:ICSharpCode.AvalonEdit.Snippets.SnippetSelectionElement">
      <summary>
            Inserts the previously selected text at the selection marker.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Snippets.SnippetSelectionElement.#ctor">
      <summary>Initializes a new instance of the <see cref="T:ICSharpCode.AvalonEdit.Snippets.SnippetSelectionElement" /> class</summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Snippets.SnippetSelectionElement.Indentation">
      <summary>
            Gets/Sets the new indentation of the selected text.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Snippets.SnippetSelectionElement.Insert(ICSharpCode.AvalonEdit.Snippets.InsertionContext)">
      <summary>
            Performs insertion of the snippet.
            </summary>
    </member>
    <member name="T:ICSharpCode.AvalonEdit.Snippets.SnippetTextElement">
      <summary>
            Represents a text element in a snippet.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Snippets.SnippetTextElement.#ctor">
      <summary>Initializes a new instance of the <see cref="T:ICSharpCode.AvalonEdit.Snippets.SnippetTextElement" /> class</summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Snippets.SnippetTextElement.Insert(ICSharpCode.AvalonEdit.Snippets.InsertionContext)">
      <summary>
            Performs insertion of the snippet.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Snippets.SnippetTextElement.Text">
      <summary>
            The text to be inserted.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Snippets.SnippetTextElement.ToTextRun">
      <summary>
            Converts the snippet to text, with replaceable fields in italic.
            </summary>
    </member>
    <member name="T:ICSharpCode.AvalonEdit.Utils.CharRope">
      <summary>
            Poor man's template specialization: extension methods for Rope&lt;char&gt;.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Utils.CharRope.AddText(ICSharpCode.AvalonEdit.Utils.Rope{System.Char},System.String)">
      <summary>
            Appends text to this rope.
            Runs in O(lg N + M).
            </summary>
      <exception cref="T:System.ArgumentNullException">newElements is null.</exception>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Utils.CharRope.Create(System.String)">
      <summary>
            Creates a new rope from the specified text.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Utils.CharRope.IndexOfAny(ICSharpCode.AvalonEdit.Utils.Rope{System.Char},System.Char[],System.Int32,System.Int32)">
      <summary>
            Gets the index of the first occurrence of any element in the specified array.
            </summary>
      <param name="rope">The target rope.</param>
      <param name="anyOf">Array of characters being searched.</param>
      <param name="startIndex">Start index of the search.</param>
      <param name="length">Length of the area to search.</param>
      <returns>The first index where any character was found; or -1 if no occurrence was found.</returns>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Utils.CharRope.InsertText(ICSharpCode.AvalonEdit.Utils.Rope{System.Char},System.Int32,System.String)">
      <summary>
            Inserts text into this rope.
            Runs in O(lg N + M).
            </summary>
      <exception cref="T:System.ArgumentNullException">newElements is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">index or length is outside the valid range.</exception>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Utils.CharRope.ToString(ICSharpCode.AvalonEdit.Utils.Rope{System.Char},System.Int32,System.Int32)">
      <summary>
            Retrieves the text for a portion of the rope.
            Runs in O(lg N + M), where M=<paramref name="length" />.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">offset or length is outside the valid range.</exception>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Utils.CharRope.WriteTo(ICSharpCode.AvalonEdit.Utils.Rope{System.Char},System.Text.StringBuilder,System.Int32,System.Int32)">
      <summary>
            Retrieves the text for a portion of the rope and writes it to the specified string builder.
            Runs in O(lg N + M), where M=<paramref name="length" />.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">offset or length is outside the valid range.</exception>
    </member>
    <member name="T:ICSharpCode.AvalonEdit.Utils.CompressingTreeList`1">
      <summary>
            A IList{T} implementation that has efficient insertion and removal (in O(lg n) time)
            and that saves memory by allocating only one node when a value is repeated in adjacent indices.
            Based on this "compression", it also supports efficient InsertRange/SetRange/RemoveRange operations.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Utils.CompressingTreeList`1.#ctor(System.Func{`0,`0,System.Boolean})">
      <summary>
            Creates a new CompressingTreeList instance.
            </summary>
      <param name="comparisonFunc">A function that checks two values for equality. If this
            function returns true, a single node may be used to store the two values.</param>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Utils.CompressingTreeList`1.Add(`0)">
      <summary>
            Adds the specified <paramref name="item" /> to the end of the list.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Utils.CompressingTreeList`1.Clear">
      <summary>
            Removes all items from this list.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Utils.CompressingTreeList`1.Contains(`0)">
      <summary>
            Gets whether this list contains the specified item.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Utils.CompressingTreeList`1.CopyTo(`0[],System.Int32)">
      <summary>
            Copies all items in this list to the specified array.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Utils.CompressingTreeList`1.Count">
      <summary>
            Gets the number of items in the list.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Utils.CompressingTreeList`1.GetEndOfRun(System.Int32)">
      <summary>
            Gets the first index after <paramref name="index" /> so that the value at the result index is not
            equal to the value at <paramref name="index" />.
            That is, this method returns the exclusive end index of the run of equal values.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Utils.CompressingTreeList`1.GetEnumerator">
      <summary>
            Gets an enumerator for this list.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Utils.CompressingTreeList`1.GetRunLength(System.Int32)">
      <summary>
            Gets the number of elements after <paramref name="index" /> that have the same value as each other.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Utils.CompressingTreeList`1.GetStartOfRun(System.Int32)">
      <summary>
            Gets the the first index so that all values from the result index to <paramref name="index" />
            are equal.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Utils.CompressingTreeList`1.IndexOf(`0)">
      <summary>
            Gets the index of the specified <paramref name="item" />.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Utils.CompressingTreeList`1.Insert(System.Int32,`0)">
      <summary>
            Inserts the specified <paramref name="item" /> at <paramref name="index" /></summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Utils.CompressingTreeList`1.InsertRange(System.Int32,System.Int32,`0)">
      <summary>
            Inserts <paramref name="item" /><paramref name="count" /> times at position
            <paramref name="index" />.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Utils.CompressingTreeList`1.Item(System.Int32)">
      <summary>
            Gets or sets an item by index.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Utils.CompressingTreeList`1.Remove(`0)">
      <summary>
            Removes the specified item from this list.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Utils.CompressingTreeList`1.RemoveAt(System.Int32)">
      <summary>
            Removes one item at <paramref name="index" /></summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Utils.CompressingTreeList`1.RemoveRange(System.Int32,System.Int32)">
      <summary>
            Removes <paramref name="count" /> items starting at position
            <paramref name="index" />.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Utils.CompressingTreeList`1.SetRange(System.Int32,System.Int32,`0)">
      <summary>
            Sets <paramref name="count" /> indices starting at <paramref name="index" /> to
            <paramref name="item" /></summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Utils.CompressingTreeList`1.Transform(System.Func{`0,`0})">
      <summary>
            Applies the conversion function to all elements in this CompressingTreeList.
            </summary>
    </member>
    <member name="T:ICSharpCode.AvalonEdit.Utils.Deque`1">
      <summary>
            Double-ended queue.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Utils.Deque`1.#ctor">
      <summary>Initializes a new instance of the <see cref="T:ICSharpCode.AvalonEdit.Utils.Deque`1" /> class</summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Utils.Deque`1.Clear">
      <summary>Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1" />.</summary>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only. </exception>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Utils.Deque`1.Contains(`0)">
      <summary>Determines whether the <see cref="T:System.Collections.Generic.ICollection`1" /> contains a specific value.</summary>
      <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
      <returns>true if <paramref name="item" /> is found in the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false.</returns>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Utils.Deque`1.CopyTo(`0[],System.Int32)">
      <summary>Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1" /> to an <see cref="T:System.Array" />, starting at a particular <see cref="T:System.Array" /> index.</summary>
      <param name="array">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1" />. The <see cref="T:System.Array" /> must have zero-based indexing.</param>
      <param name="arrayIndex">The zero-based index in <paramref name="array" /> at which copying begins.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="arrayIndex" /> is less than 0.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> is multidimensional.-or-The number of elements in the source <see cref="T:System.Collections.Generic.ICollection`1" /> is greater than the available space from <paramref name="arrayIndex" /> to the end of the destination <paramref name="array" />.-or-Type <paramref name="T" /> cannot be cast automatically to the type of the destination <paramref name="array" />.</exception>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Utils.Deque`1.Count">
      <summary>Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1" />.</summary>
      <returns>The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1" />.</returns>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Utils.Deque`1.GetEnumerator">
      <summary>Returns an enumerator that iterates through the collection.</summary>
      <returns>A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.</returns>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Utils.Deque`1.Item(System.Int32)">
      <summary>
            Gets/Sets an element inside the deque.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Utils.Deque`1.PopBack">
      <summary>
            Pops an element from the end of the deque.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Utils.Deque`1.PopFront">
      <summary>
            Pops an element from the end of the deque.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Utils.Deque`1.PushBack(`0)">
      <summary>
            Adds an element to the end of the deque.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Utils.Deque`1.PushFront(`0)">
      <summary>
            Adds an element to the front of the deque.
            </summary>
    </member>
    <member name="T:ICSharpCode.AvalonEdit.Utils.FileReader">
      <summary>
            Class that can open text files with auto-detection of the encoding.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Utils.FileReader.IsUnicode(System.Text.Encoding)">
      <summary>
            Gets if the given encoding is a Unicode encoding (UTF).
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Utils.FileReader.OpenFile(System.String,System.Text.Encoding)">
      <summary>
            Opens the specified file for reading.
            </summary>
      <param name="fileName">The file to open.</param>
      <param name="defaultEncoding">The encoding to use if the encoding cannot be auto-detected.</param>
      <returns>Returns a StreamReader that reads from the stream. Use
            <see cref="P:System.IO.StreamReader.CurrentEncoding" /> to get the encoding that was used.</returns>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Utils.FileReader.OpenStream(System.IO.Stream,System.Text.Encoding)">
      <summary>
            Opens the specified stream for reading.
            </summary>
      <param name="stream">The stream to open.</param>
      <param name="defaultEncoding">The encoding to use if the encoding cannot be auto-detected.</param>
      <returns>Returns a StreamReader that reads from the stream. Use
            <see cref="P:System.IO.StreamReader.CurrentEncoding" /> to get the encoding that was used.</returns>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Utils.FileReader.ReadFileContent(System.IO.Stream,System.Text.Encoding)">
      <summary>
            Reads the content of the given stream.
            </summary>
      <param name="stream">The stream to read.
            The stream must support seeking and must be positioned at its beginning.</param>
      <param name="defaultEncoding">The encoding to use if the encoding cannot be auto-detected.</param>
      <returns>The file content as string.</returns>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Utils.FileReader.ReadFileContent(System.String,System.Text.Encoding)">
      <summary>
            Reads the content of the file.
            </summary>
      <param name="fileName">The file name.</param>
      <param name="defaultEncoding">The encoding to use if the encoding cannot be auto-detected.</param>
      <returns>The file content as string.</returns>
    </member>
    <member name="T:ICSharpCode.AvalonEdit.Utils.ImmutableStack`1">
      <summary>
            An immutable stack.
            
            Using 'foreach' on the stack will return the items from top to bottom (in the order they would be popped).
            </summary>
    </member>
    <member name="F:ICSharpCode.AvalonEdit.Utils.ImmutableStack`1.Empty">
      <summary>
            Gets the empty stack instance.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Utils.ImmutableStack`1.GetEnumerator">
      <summary>
            Gets an enumerator that iterates through the stack top-to-bottom.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Utils.ImmutableStack`1.IsEmpty">
      <summary>
            Gets if this stack is empty.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Utils.ImmutableStack`1.Peek">
      <summary>
            Gets the item on the top of the stack.
            </summary>
      <exception cref="T:System.InvalidOperationException">The stack is empty.</exception>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Utils.ImmutableStack`1.Pop">
      <summary>
            Gets the stack with the top item removed.
            </summary>
      <exception cref="T:System.InvalidOperationException">The stack is empty.</exception>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Utils.ImmutableStack`1.Push(`0)">
      <summary>
            Pushes an item on the stack. This does not modify the stack itself, but returns a new
            one with the value pushed.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Utils.ImmutableStack`1.ToString">
      <summary>Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.</summary>
      <returns>A <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.</returns>
    </member>
    <member name="T:ICSharpCode.AvalonEdit.Utils.NullSafeCollection`1">
      <summary>
            A collection that cannot contain null values.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Utils.NullSafeCollection`1.#ctor">
      <summary>Initializes a new instance of the <see cref="T:ICSharpCode.AvalonEdit.Utils.NullSafeCollection`1" /> class</summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Utils.NullSafeCollection`1.InsertItem(System.Int32,`0)">
      <summary>Inserts an element into the <see cref="T:System.Collections.ObjectModel.Collection`1" /> at the specified index.</summary>
      <param name="index">The zero-based index at which <paramref name="item" /> should be inserted.</param>
      <param name="item">The object to insert. The value can be null for reference types.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero.-or-<paramref name="index" /> is greater than <see cref="P:System.Collections.ObjectModel.Collection`1.Count" />.</exception>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Utils.NullSafeCollection`1.SetItem(System.Int32,`0)">
      <summary>Replaces the element at the specified index.</summary>
      <param name="index">The zero-based index of the element to replace.</param>
      <param name="item">The new value for the element at the specified index. The value can be null for reference types.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero.-or-<paramref name="index" /> is greater than <see cref="P:System.Collections.ObjectModel.Collection`1.Count" />.</exception>
    </member>
    <member name="T:ICSharpCode.AvalonEdit.Utils.PixelSnapHelpers">
      <summary>
            Contains static helper methods for aligning stuff on a whole number of pixels.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Utils.PixelSnapHelpers.GetPixelSize(System.Windows.Media.Visual)">
      <summary>
            Gets the pixel size on the screen containing visual.
            This method does not take transforms on visual into account.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Utils.PixelSnapHelpers.PixelAlign(System.Double,System.Double)">
      <summary>
            Aligns <paramref name="value" /> on the next middle of a pixel.
            </summary>
      <param name="value">The value that should be aligned</param>
      <param name="pixelSize">The size of one pixel</param>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Utils.PixelSnapHelpers.PixelAlign(System.Windows.Rect,System.Windows.Size)">
      <summary>
            Aligns the borders of rect on the middles of pixels.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Utils.PixelSnapHelpers.Round(System.Double,System.Double)">
      <summary>
            Rounds <paramref name="value" /> to a whole number of pixels.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Utils.PixelSnapHelpers.Round(System.Windows.Point,System.Windows.Size)">
      <summary>
            Rounds <paramref name="point" /> to whole number of pixels.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Utils.PixelSnapHelpers.Round(System.Windows.Rect,System.Windows.Size)">
      <summary>
            Rounds val to whole number of pixels.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Utils.PixelSnapHelpers.RoundToOdd(System.Double,System.Double)">
      <summary>
            Rounds <paramref name="value" /> to an whole odd number of pixels.
            </summary>
    </member>
    <member name="T:ICSharpCode.AvalonEdit.Utils.PropertyChangedWeakEventManager">
      <summary>
            WeakEventManager for INotifyPropertyChanged.PropertyChanged.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Utils.PropertyChangedWeakEventManager.#ctor">
      <summary>Initializes a new instance of the <see cref="T:ICSharpCode.AvalonEdit.Utils.PropertyChangedWeakEventManager" /> class</summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Utils.PropertyChangedWeakEventManager.StartListening(System.ComponentModel.INotifyPropertyChanged)">
      <summary>
            Attaches the event handler.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Utils.PropertyChangedWeakEventManager.StopListening(System.ComponentModel.INotifyPropertyChanged)">
      <summary>
            Detaches the event handler.
            </summary>
    </member>
    <member name="T:ICSharpCode.AvalonEdit.Utils.Rope`1">
      <summary>
            A kind of List&lt;T&gt;, but more efficient for random insertions/removal.
            Also has cheap Clone() and SubRope() implementations.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Utils.Rope`1.#ctor">
      <summary>
            Creates a new rope representing the empty string.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Utils.Rope`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
      <summary>
            Creates a rope from the specified input.
            This operation runs in O(N).
            </summary>
      <exception cref="T:System.ArgumentNullException">input is null.</exception>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Utils.Rope`1.#ctor(System.Int32,System.Func{ICSharpCode.AvalonEdit.Utils.Rope{`0}})">
      <summary>
            Creates a new rope that lazily initalizes its content.
            </summary>
      <param name="length">The length of the rope that will be lazily loaded.</param>
      <param name="initializer">
            The callback that provides the content for this rope.
            <paramref name="initializer" /> will be called exactly once when the content of this rope is first requested.
            It must return a rope with the specified length.
            Because the initializer function is not called when a rope is cloned, and such clones may be used on another threads,
            it is possible for the initializer callback to occur on any thread.
            </param>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Utils.Rope`1.#ctor(`0[],System.Int32,System.Int32)">
      <summary>
            Creates a rope from a part of the array.
            This operation runs in O(N).
            </summary>
      <exception cref="T:System.ArgumentNullException">input is null.</exception>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Utils.Rope`1.Add(`0)">
      <summary>
            Appends the item at the end of the rope.
            Runs in O(lg N).
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Utils.Rope`1.AddRange(ICSharpCode.AvalonEdit.Utils.Rope{`0})">
      <summary>
            Appends another rope to the end of this rope.
            Runs in O(lg N + lg M), plus a per-node cost as if <c>newElements.Clone()</c> was called.
            </summary>
      <exception cref="T:System.ArgumentNullException">newElements is null.</exception>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Utils.Rope`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
      <summary>
            Appends multiple elements to the end of this rope.
            Runs in O(lg N + M), where N is the length of this rope and M is the number of new elements.
            </summary>
      <exception cref="T:System.ArgumentNullException">newElements is null.</exception>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Utils.Rope`1.AddRange(`0[],System.Int32,System.Int32)">
      <summary>
            Appends new elements to the end of this rope.
            Runs in O(lg N + M), where N is the length of this rope and M is the number of new elements.
            </summary>
      <exception cref="T:System.ArgumentNullException">array is null.</exception>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Utils.Rope`1.Clear">
      <summary>
            Resets the rope to an empty list.
            Runs in O(1).
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Utils.Rope`1.Clone">
      <summary>
            Clones the rope.
            This operation runs in linear time to the number of rope nodes touched since the last clone was created.
            If you count the per-node cost to the operation modifying the rope (doing this doesn't increase the complexity of the modification operations);
            the remainder of Clone() runs in O(1).
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Utils.Rope`1.Concat(ICSharpCode.AvalonEdit.Utils.Rope{`0},ICSharpCode.AvalonEdit.Utils.Rope{`0})">
      <summary>
            Concatenates two ropes. The input ropes are not modified.
            Runs in O(lg N + lg M).
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Utils.Rope`1.Concat(ICSharpCode.AvalonEdit.Utils.Rope{`0}[])">
      <summary>
            Concatenates multiple ropes. The input ropes are not modified.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Utils.Rope`1.Contains(`0)">
      <summary>
            Searches the item in the rope.
            Runs in O(N).
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Utils.Rope`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)">
      <summary>
            Copies the a part of the rope into the specified array.
            Runs in O(lg N + M).
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Utils.Rope`1.CopyTo(`0[],System.Int32)">
      <summary>
            Copies the whole content of the rope into the specified array.
            Runs in O(N).
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Utils.Rope`1.Count">
      <summary>
            Gets the length of the rope.
            Runs in O(1).
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Utils.Rope`1.GetEnumerator">
      <summary>
            Retrieves an enumerator to iterate through the rope.
            The enumerator will reflect the state of the rope from the GetEnumerator() call, further modifications
            to the rope will not be visible to the enumerator.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Utils.Rope`1.GetRange(System.Int32,System.Int32)">
      <summary>
            Creates a new rope and initializes it with a part of this rope.
            Runs in O(lg N) plus a per-node cost as if <c>this.Clone()</c> was called.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">offset or length is outside the valid range.</exception>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Utils.Rope`1.IndexOf(`0)">
      <summary>
            Finds the first occurance of item.
            Runs in O(N).
            </summary>
      <returns>The index of the first occurance of item, or -1 if it cannot be found.</returns>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Utils.Rope`1.Insert(System.Int32,`0)">
      <summary>
            Inserts the item at the specified index in the rope.
            Runs in O(lg N).
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Utils.Rope`1.InsertRange(System.Int32,ICSharpCode.AvalonEdit.Utils.Rope{`0})">
      <summary>
            Inserts another rope into this rope.
            Runs in O(lg N + lg M), plus a per-node cost as if <c>newElements.Clone()</c> was called.
            </summary>
      <exception cref="T:System.ArgumentNullException">newElements is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">index or length is outside the valid range.</exception>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Utils.Rope`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
      <summary>
            Inserts new elemetns into this rope.
            Runs in O(lg N + M), where N is the length of this rope and M is the number of new elements.
            </summary>
      <exception cref="T:System.ArgumentNullException">newElements is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">index or length is outside the valid range.</exception>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Utils.Rope`1.InsertRange(System.Int32,`0[],System.Int32,System.Int32)">
      <summary>
            Inserts new elements into this rope.
            Runs in O(lg N + M), where N is the length of this rope and M is the number of new elements.
            </summary>
      <exception cref="T:System.ArgumentNullException">newElements is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">index or length is outside the valid range.</exception>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Utils.Rope`1.Item(System.Int32)">
      <summary>
            Gets/Sets a single character.
            Runs in O(lg N) for random access. Sequential read-only access benefits from a special optimization and runs in amortized O(1).
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">Offset is outside the valid range (0 to Length-1).</exception>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Utils.Rope`1.Length">
      <summary>
            Gets the length of the rope.
            Runs in O(1).
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Utils.Rope`1.Remove(`0)">
      <summary>
            Removes the first occurance of an item from the rope.
            Runs in O(N).
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Utils.Rope`1.RemoveAt(System.Int32)">
      <summary>
            Removes a single item from the rope.
            Runs in O(lg N).
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Utils.Rope`1.RemoveRange(System.Int32,System.Int32)">
      <summary>
            Removes a range of elements from the rope.
            Runs in O(lg N).
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">offset or length is outside the valid range.</exception>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Utils.Rope`1.SetRange(System.Int32,`0[],System.Int32,System.Int32)">
      <summary>
            Copies a range of the specified array into the rope, overwriting existing elements.
            Runs in O(lg N + M).
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Utils.Rope`1.ToArray">
      <summary>
            Creates an array and copies the contents of the rope into it.
            Runs in O(N).
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Utils.Rope`1.ToArray(System.Int32,System.Int32)">
      <summary>
            Creates an array and copies the contents of the rope into it.
            Runs in O(N).
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Utils.Rope`1.ToString">
      <summary>
            Creates a string from the rope. Runs in O(N).
            </summary>
      <returns>A string consisting of all elements in the rope as comma-separated list in {}.
            As a special case, Rope&lt;char&gt; will return its contents as string without any additional separators or braces,
            so it can be used like StringBuilder.ToString().</returns>
    </member>
    <member name="T:ICSharpCode.AvalonEdit.Utils.RopeTextReader">
      <summary>
            TextReader implementation that reads text from a rope.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Utils.RopeTextReader.#ctor(ICSharpCode.AvalonEdit.Utils.Rope{System.Char})">
      <summary>
            Creates a new RopeTextReader.
            Internally, this method creates a Clone of the rope; so the text reader will always read through the old
            version of the rope if it is modified. <seealso cref="M:ICSharpCode.AvalonEdit.Utils.Rope`1.Clone" /></summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Utils.RopeTextReader.Peek">
      <summary>Reads the next character without changing the state of the reader or the character source. Returns the next available character without actually reading it from the input stream.</summary>
      <returns>An integer representing the next character to be read, or -1 if no more characters are available or the stream does not support seeking.</returns>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.IO.TextReader" /> is closed. </exception>
      <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Utils.RopeTextReader.Read">
      <summary>Reads the next character from the input stream and advances the character position by one character.</summary>
      <returns>The next character from the input stream, or -1 if no more characters are available. The default implementation returns -1.</returns>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.IO.TextReader" /> is closed. </exception>
      <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Utils.RopeTextReader.Read(System.Char[],System.Int32,System.Int32)">
      <summary>Reads a maximum of <paramref name="count" /> characters from the current stream and writes the data to <paramref name="buffer" />, beginning at <paramref name="index" />.</summary>
      <param name="buffer">When this method returns, contains the specified character array with the values between <paramref name="index" /> and (<paramref name="index" /> + <paramref name="count" /> - 1) replaced by the characters read from the current source. </param>
      <param name="index">The place in <paramref name="buffer" /> at which to begin writing. </param>
      <param name="count">The maximum number of characters to read. If the end of the stream is reached before <paramref name="count" /> of characters is read into <paramref name="buffer" />, the current method returns. </param>
      <returns>The number of characters that have been read. The number will be less than or equal to <paramref name="count" />, depending on whether the data is available within the stream. This method returns zero if called when no more characters are left to read.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> is null. </exception>
      <exception cref="T:System.ArgumentException">The buffer length minus <paramref name="index" /> is less than <paramref name="count" />. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> or <paramref name="count" /> is negative. </exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.IO.TextReader" /> is closed. </exception>
      <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
    </member>
    <member name="T:ICSharpCode.AvalonEdit.Utils.StringSegment">
      <summary>
            Represents a string with a segment.
            Similar to System.ArraySegment&lt;T&gt;, but for strings instead of arrays.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Utils.StringSegment.#ctor(System.String)">
      <summary>
            Creates a new StringSegment.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Utils.StringSegment.#ctor(System.String,System.Int32,System.Int32)">
      <summary>
            Creates a new StringSegment.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Utils.StringSegment.Count">
      <summary>
            Gets the length of the segment.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Utils.StringSegment.Equals(ICSharpCode.AvalonEdit.Utils.StringSegment)">
      <summary>Indicates whether the current object is equal to another object of the same type.</summary>
      <param name="other">An object to compare with this object.</param>
      <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.</returns>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Utils.StringSegment.Equals(System.Object)">
      <summary>Indicates whether this instance and a specified object are equal.</summary>
      <param name="obj">Another object to compare to. </param>
      <returns>true if <paramref name="obj" /> and this instance are the same type and represent the same value; otherwise, false.</returns>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Utils.StringSegment.GetHashCode">
      <summary>Returns the hash code for this instance.</summary>
      <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Utils.StringSegment.Offset">
      <summary>
            Gets the start offset of the segment with the text.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Utils.StringSegment.op_Equality(ICSharpCode.AvalonEdit.Utils.StringSegment,ICSharpCode.AvalonEdit.Utils.StringSegment)">
      <summary>
            Equality operator.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Utils.StringSegment.op_Inequality(ICSharpCode.AvalonEdit.Utils.StringSegment,ICSharpCode.AvalonEdit.Utils.StringSegment)">
      <summary>
            Inequality operator.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Utils.StringSegment.Text">
      <summary>
            Gets the string used for this segment.
            </summary>
    </member>
    <member name="T:ICSharpCode.AvalonEdit.Utils.WeakEventManagerBase`2">
      <summary>
            WeakEventManager with AddListener/RemoveListener and CurrentManager implementation.
            Helps implementing the WeakEventManager pattern with less code.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Utils.WeakEventManagerBase`2.#ctor">
      <summary>
            Creates a new WeakEventManagerBase instance.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Utils.WeakEventManagerBase`2.AddListener(`1,System.Windows.IWeakEventListener)">
      <summary>
            Adds a weak event listener.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Utils.WeakEventManagerBase`2.CurrentManager">
      <summary>
            Gets the current manager.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Utils.WeakEventManagerBase`2.RemoveListener(`1,System.Windows.IWeakEventListener)">
      <summary>
            Removes a weak event listener.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Utils.WeakEventManagerBase`2.StartListening(System.Object)">
      <summary>When overridden in a derived class, starts listening for the event being managed. After <see cref="M:System.Windows.WeakEventManager.StartListening(System.Object)" />  is first called, the manager should be in the state of calling <see cref="M:System.Windows.WeakEventManager.DeliverEvent(System.Object,System.EventArgs)" /> or <see cref="M:System.Windows.WeakEventManager.DeliverEventToList(System.Object,System.EventArgs,System.Windows.WeakEventManager.ListenerList)" /> whenever the relevant event from the provided source is handled.</summary>
      <param name="source">The source to begin listening on.</param>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Utils.WeakEventManagerBase`2.StartListening(`1)">
      <summary>
            Attaches the event handler.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Utils.WeakEventManagerBase`2.StopListening(System.Object)">
      <summary>When overridden in a derived class, stops listening on the provided source for the event being managed.</summary>
      <param name="source">The source to stop listening on.</param>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Utils.WeakEventManagerBase`2.StopListening(`1)">
      <summary>
            Detaches the event handler.
            </summary>
    </member>
    <member name="T:ICSharpCode.AvalonEdit.Xml.AbstractAXmlVisitor">
      <summary>
            Derive from this class to create visitor for the XML tree
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Xml.AbstractAXmlVisitor.#ctor">
      <summary>Initializes a new instance of the <see cref="T:ICSharpCode.AvalonEdit.Xml.AbstractAXmlVisitor" /> class</summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Xml.AbstractAXmlVisitor.VisitAttribute(ICSharpCode.AvalonEdit.Xml.AXmlAttribute)">
      <summary> Visit RawAttribute </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Xml.AbstractAXmlVisitor.VisitDocument(ICSharpCode.AvalonEdit.Xml.AXmlDocument)">
      <summary> Visit RawDocument </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Xml.AbstractAXmlVisitor.VisitElement(ICSharpCode.AvalonEdit.Xml.AXmlElement)">
      <summary> Visit RawElement </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Xml.AbstractAXmlVisitor.VisitTag(ICSharpCode.AvalonEdit.Xml.AXmlTag)">
      <summary> Visit RawTag </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Xml.AbstractAXmlVisitor.VisitText(ICSharpCode.AvalonEdit.Xml.AXmlText)">
      <summary> Visit RawText </summary>
    </member>
    <member name="T:ICSharpCode.AvalonEdit.Xml.AXmlAttribute">
      <summary>
            Name-value pair in a tag
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Xml.AXmlAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:ICSharpCode.AvalonEdit.Xml.AXmlAttribute" /> class</summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Xml.AXmlAttribute.AcceptVisitor(ICSharpCode.AvalonEdit.Xml.IAXmlVisitor)">
      <summary> Call appropriate visit method on the given visitor </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Xml.AXmlAttribute.EqualsSign">
      <summary> Equals sign and surrounding whitespace </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Xml.AXmlAttribute.IsNamespaceDeclaration">
      <summary> Attribute is declaring namespace ("xmlns" or "xmlns:*") </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Xml.AXmlAttribute.LocalName">
      <summary> The part of name after ":" </summary>
      <returns> Whole name if ":" not found </returns>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Xml.AXmlAttribute.Name">
      <summary> Name with namespace prefix - exactly as in source file </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Xml.AXmlAttribute.Namespace">
      <summary>
            Resolved namespace of the name.  Empty string if not found
            From the specification: "The namespace name for an unprefixed attribute name always has no value."
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Xml.AXmlAttribute.ParentElement">
      <summary> The element containing this attribute </summary>
      <returns> Null if orphaned </returns>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Xml.AXmlAttribute.Prefix">
      <summary> The part of name before ":"</summary>
      <returns> Empty string if not found </returns>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Xml.AXmlAttribute.QuotedValue">
      <summary> The raw value - exactly as in source file (*probably* quoted and escaped) </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Xml.AXmlAttribute.ToString">
      <summary>Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.</summary>
      <returns>A <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.</returns>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Xml.AXmlAttribute.Value">
      <summary> Unquoted and dereferenced value of the attribute </summary>
    </member>
    <member name="T:ICSharpCode.AvalonEdit.Xml.AXmlAttributeCollection">
      <summary>
            Specailized attribute collection with attribute name caching
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Xml.AXmlAttributeCollection.#ctor">
      <summary> Create unbound collection </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Xml.AXmlAttributeCollection.#ctor(ICSharpCode.AvalonEdit.Xml.AXmlObjectCollection{ICSharpCode.AvalonEdit.Xml.AXmlObject})">
      <summary> Wrap the given collection.  Non-attributes are filtered </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Xml.AXmlAttributeCollection.#ctor(ICSharpCode.AvalonEdit.Xml.AXmlObjectCollection{ICSharpCode.AvalonEdit.Xml.AXmlObject},System.Predicate{System.Object})">
      <summary> Wrap the given collection.  Non-attributes are filtered.  Items not matching the condition are filtered. </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Xml.AXmlAttributeCollection.ClearItems">
      <summary>Removes all items from the collection.</summary>
    </member>
    <member name="F:ICSharpCode.AvalonEdit.Xml.AXmlAttributeCollection.Empty">
      <summary> Empty unbound collection </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Xml.AXmlAttributeCollection.GetByLocalName(System.String)">
      <summary>
            Get all attributes with given local name.
            Hash table is used for lookup so this is cheap.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Xml.AXmlAttributeCollection.InsertItem(System.Int32,ICSharpCode.AvalonEdit.Xml.AXmlAttribute)">
      <summary>Inserts an item into the collection at the specified index.</summary>
      <param name="index">The zero-based index at which <paramref name="item" /> should be inserted.</param>
      <param name="item">The object to insert.</param>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Xml.AXmlAttributeCollection.RemoveItem(System.Int32)">
      <summary>Removes the item at the specified index of the collection.</summary>
      <param name="index">The zero-based index of the element to remove.</param>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Xml.AXmlAttributeCollection.SetItem(System.Int32,ICSharpCode.AvalonEdit.Xml.AXmlAttribute)">
      <summary>Replaces the element at the specified index.</summary>
      <param name="index">The zero-based index of the element to replace.</param>
      <param name="item">The new value for the element at the specified index.</param>
    </member>
    <member name="T:ICSharpCode.AvalonEdit.Xml.AXmlContainer">
      <summary>
            Abstact base class for all types that can contain child nodes
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Xml.AXmlContainer.#ctor">
      <summary> Create new container </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Xml.AXmlContainer.Children">
      <summary>
            Children of the node.  It is read-only.
            Note that is has CollectionChanged event.
            </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Xml.AXmlContainer.Elements">
      <summary> Gets direcly nested elements (non-recursive) </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Xml.AXmlContainer.GetChildAtOffset(System.Int32)">
      <summary>
            Gets a child fully containg the given offset.
            Goes recursively down the tree.
            Specail case if at the end of attribute or text
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Xml.AXmlContainer.GetSelfAndAllChildren">
      <summary> Recursively gets self and all nested nodes. </summary>
    </member>
    <member name="T:ICSharpCode.AvalonEdit.Xml.AXmlDocument">
      <summary>
            The root object of the XML document
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Xml.AXmlDocument.#ctor">
      <summary>Initializes a new instance of the <see cref="T:ICSharpCode.AvalonEdit.Xml.AXmlDocument" /> class</summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Xml.AXmlDocument.AcceptVisitor(ICSharpCode.AvalonEdit.Xml.IAXmlVisitor)">
      <summary> Call appropriate visit method on the given visitor </summary>
    </member>
    <member name="E:ICSharpCode.AvalonEdit.Xml.AXmlDocument.ObjectChanged">
      <summary> Occurs after local data of any object in the document changed </summary>
    </member>
    <member name="E:ICSharpCode.AvalonEdit.Xml.AXmlDocument.ObjectChanging">
      <summary> Occurs before local data of any object in the document changes </summary>
    </member>
    <member name="E:ICSharpCode.AvalonEdit.Xml.AXmlDocument.ObjectInserted">
      <summary> Occurs when object is added to any part of the document </summary>
    </member>
    <member name="E:ICSharpCode.AvalonEdit.Xml.AXmlDocument.ObjectRemoved">
      <summary> Occurs when object is removed from any part of the document </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Xml.AXmlDocument.ToString">
      <summary>Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.</summary>
      <returns>A <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.</returns>
    </member>
    <member name="T:ICSharpCode.AvalonEdit.Xml.AXmlElement">
      <summary>
            Logical grouping of other nodes together.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Xml.AXmlElement.#ctor">
      <summary>Initializes a new instance of the <see cref="T:ICSharpCode.AvalonEdit.Xml.AXmlElement" /> class</summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Xml.AXmlElement.AcceptVisitor(ICSharpCode.AvalonEdit.Xml.IAXmlVisitor)">
      <summary> Call appropriate visit method on the given visitor </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Xml.AXmlElement.Attributes">
      <summary> Gets attributes of the element </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Xml.AXmlElement.AttributesAndElements">
      <summary> Gets both attributes and elements.  Expensive, avoid use. </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Xml.AXmlElement.FindDefaultNamespace">
      <summary> Find the defualt namespace for this context </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Xml.AXmlElement.GetAttributeValue(System.String)">
      <summary>
            Get unquoted value of attribute.
            It looks in the no namespace (empty string).
            </summary>
      <returns>Null if not found</returns>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Xml.AXmlElement.GetAttributeValue(System.String,System.String)">
      <summary>
            Get unquoted value of attribute
            </summary>
      <param name="namespace">Namespace.  Can be no namepace (empty string), which is the default for attributes.</param>
      <param name="localName">Local name - text after ":"</param>
      <returns>Null if not found</returns>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Xml.AXmlElement.HasEndTag">
      <summary>
        <p style="color: #dc143c; font-size: 8.5pt; font-weight: bold;">[Missing &lt;summary&gt; documentation for "P:ICSharpCode.AvalonEdit.Xml.AXmlElement.HasEndTag"]</p>
      </summary>
      <returns> True in wellformed XML </returns>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Xml.AXmlElement.HasStartOrEmptyTag">
      <summary>
        <p style="color: #dc143c; font-size: 8.5pt; font-weight: bold;">[Missing &lt;summary&gt; documentation for "P:ICSharpCode.AvalonEdit.Xml.AXmlElement.HasStartOrEmptyTag"]</p>
      </summary>
      <returns> True in wellformed XML </returns>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Xml.AXmlElement.IsProperlyNested">
      <summary> No tags are missing anywhere within this element (recursive) </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Xml.AXmlElement.LocalName">
      <summary> The part of name after ":" </summary>
      <returns> Empty string if not found </returns>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Xml.AXmlElement.Name">
      <summary> Name with namespace prefix - exactly as in source </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Xml.AXmlElement.Namespace">
      <summary> Resolved namespace of the name </summary>
      <returns> Empty string if prefix is not found </returns>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Xml.AXmlElement.Prefix">
      <summary> The part of name before ":" </summary>
      <returns> Empty string if not found </returns>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Xml.AXmlElement.ResolvePrefix(System.String)">
      <summary>
            Recursively resolve given prefix in this context.  Prefix must have some value.
            </summary>
      <returns> Empty string if prefix is not found </returns>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Xml.AXmlElement.ToString">
      <summary>Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.</summary>
      <returns>A <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.</returns>
    </member>
    <member name="T:ICSharpCode.AvalonEdit.Xml.AXmlObject">
      <summary>
            Abstact base class for all types
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Xml.AXmlObject.#ctor">
      <summary> Creates new object </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Xml.AXmlObject.AcceptVisitor(ICSharpCode.AvalonEdit.Xml.IAXmlVisitor)">
      <summary> Call appropriate visit method on the given visitor </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Xml.AXmlObject.Assert(System.Boolean,System.String)">
      <summary> Throws exception if condition is false </summary>
    </member>
    <member name="E:ICSharpCode.AvalonEdit.Xml.AXmlObject.Changed">
      <summary> Occurs after the value of any local properties changed.  Nested changes do not cause the event to occur </summary>
    </member>
    <member name="E:ICSharpCode.AvalonEdit.Xml.AXmlObject.Changing">
      <summary> Occurs before the value of any local properties changes.  Nested changes do not cause the event to occur </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Xml.AXmlObject.DebugAssert(System.Boolean,System.String)">
      <summary> Throws exception if condition is false </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Xml.AXmlObject.GetAncestors">
      <summary> Get all ancestors of this node </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Xml.AXmlObject.GetLocalName(System.String)">
      <summary> The part of name after ":" </summary>
      <returns> Whole name if ":" not found </returns>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Xml.AXmlObject.GetNamespacePrefix(System.String)">
      <summary> The part of name before ":" </summary>
      <returns> Empty string if not found </returns>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Xml.AXmlObject.GetSelfAndAllChildren">
      <summary> Recursively gets self and all nested nodes. </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Xml.AXmlObject.MySyntaxErrors">
      <summary>
            The error that occured in the context of this node (excluding nested nodes)
            </summary>
    </member>
    <member name="F:ICSharpCode.AvalonEdit.Xml.AXmlObject.NoNamespace">
      <summary> Empty string.  The namespace used if there is no "xmlns" specified </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Xml.AXmlObject.OnChanged">
      <summary> Raises Changed event </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Xml.AXmlObject.OnChanging">
      <summary> Raises Changing event </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Xml.AXmlObject.Parent">
      <summary> Parent node. </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Xml.AXmlObject.SyntaxErrors">
      <summary>
            The error that occured in the context of this node and all nested nodes.
            It has O(n) cost.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Xml.AXmlObject.ToString">
      <summary>Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.</summary>
      <returns>A <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.</returns>
    </member>
    <member name="F:ICSharpCode.AvalonEdit.Xml.AXmlObject.XmlNamespace">
      <summary> Namespace for "xml:" prefix: "http://www.w3.org/XML/1998/namespace" </summary>
    </member>
    <member name="F:ICSharpCode.AvalonEdit.Xml.AXmlObject.XmlnsNamespace">
      <summary> Namesapce for "xmlns:" prefix: "http://www.w3.org/2000/xmlns/" </summary>
    </member>
    <member name="T:ICSharpCode.AvalonEdit.Xml.AXmlObjectCollection`1">
      <summary>
            Collection that is publicly read-only and has support 
            for adding/removing multiple items at a time.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Xml.AXmlObjectCollection`1.#ctor">
      <summary>Initializes a new instance of the <see cref="T:ICSharpCode.AvalonEdit.Xml.AXmlObjectCollection`1" /> class</summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Xml.AXmlObjectCollection`1.ClearItems">
      <summary>Removes all elements from the <see cref="T:System.Collections.ObjectModel.Collection`1" />.</summary>
    </member>
    <member name="E:ICSharpCode.AvalonEdit.Xml.AXmlObjectCollection`1.CollectionChanged">
      <summary> Occurs when the collection is changed </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Xml.AXmlObjectCollection`1.InsertItem(System.Int32,`0)">
      <summary>Inserts an element into the <see cref="T:System.Collections.ObjectModel.Collection`1" /> at the specified index.</summary>
      <param name="index">The zero-based index at which <paramref name="item" /> should be inserted.</param>
      <param name="item">The object to insert. The value can be null for reference types.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero.-or-<paramref name="index" /> is greater than <see cref="P:System.Collections.ObjectModel.Collection`1.Count" />.</exception>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Xml.AXmlObjectCollection`1.RemoveItem(System.Int32)">
      <summary>Removes the element at the specified index of the <see cref="T:System.Collections.ObjectModel.Collection`1" />.</summary>
      <param name="index">The zero-based index of the element to remove.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero.-or-<paramref name="index" /> is equal to or greater than <see cref="P:System.Collections.ObjectModel.Collection`1.Count" />.</exception>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Xml.AXmlObjectCollection`1.SetItem(System.Int32,`0)">
      <summary>Replaces the element at the specified index.</summary>
      <param name="index">The zero-based index of the element to replace.</param>
      <param name="item">The new value for the element at the specified index. The value can be null for reference types.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero.-or-<paramref name="index" /> is greater than <see cref="P:System.Collections.ObjectModel.Collection`1.Count" />.</exception>
    </member>
    <member name="T:ICSharpCode.AvalonEdit.Xml.AXmlObjectEventArgs">
      <summary> Holds event args for event caused by <see cref="T:ICSharpCode.AvalonEdit.Xml.AXmlObject" /></summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Xml.AXmlObjectEventArgs.#ctor">
      <summary>Initializes a new instance of the <see cref="T:ICSharpCode.AvalonEdit.Xml.AXmlObjectEventArgs" /> class</summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Xml.AXmlObjectEventArgs.Object">
      <summary> The object that caused the event </summary>
    </member>
    <member name="T:ICSharpCode.AvalonEdit.Xml.AXmlParser">
      <summary>
            Creates object tree from XML document.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Xml.AXmlParser.#ctor">
      <summary> Create new parser </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Xml.AXmlParser.Clear">
      <summary>
            Clears the parser data.
            </summary>
      <exception cref="T:System.InvalidOperationException">No write lock is held by the current thread.</exception>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Xml.AXmlParser.LastDocument">
      <summary>
            Returns the last cached version of the document.
            </summary>
      <exception cref="T:System.InvalidOperationException">No read lock is held by the current thread.</exception>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Xml.AXmlParser.Lock">
      <summary>
            Makes calls to Parse() thread-safe. Use Lock everywhere Parse() is called.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Xml.AXmlParser.Parse(System.String,System.Collections.Generic.IEnumerable{ICSharpCode.AvalonEdit.Document.DocumentChangeEventArgs})">
      <summary>
            Incrementaly parse the given text.
            You have to hold the write lock.
            </summary>
      <param name="input">
            The full XML text of the new document.
            </param>
      <param name="changesSinceLastParse">
            Changes since last parse.  Null will cause full reparse.
            </param>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Xml.AXmlParser.UnknownEntityReferenceIsError">
      <summary>
            Generate syntax error when seeing enity reference other then the build-in ones
            </summary>
    </member>
    <member name="T:ICSharpCode.AvalonEdit.Xml.AXmlTag">
      <summary>
            Represents any markup starting with "&lt;" and (hopefully) ending with "&gt;"
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Xml.AXmlTag.#ctor">
      <summary>Initializes a new instance of the <see cref="T:ICSharpCode.AvalonEdit.Xml.AXmlTag" /> class</summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Xml.AXmlTag.AcceptVisitor(ICSharpCode.AvalonEdit.Xml.IAXmlVisitor)">
      <summary> Call appropriate visit method on the given visitor </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Xml.AXmlTag.Attributes">
      <summary> Gets attributes of the tag (if applicable) </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Xml.AXmlTag.ClosingBracket">
      <summary> Opening bracket - usually "&gt;" </summary>
    </member>
    <member name="F:ICSharpCode.AvalonEdit.Xml.AXmlTag.DtdNames">
      <summary> These identify the start of DTD elements </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Xml.AXmlTag.IsCData">
      <summary> True if tag starts with "&lt;![CDATA[" </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Xml.AXmlTag.IsComment">
      <summary> True if tag starts with "&lt;!--" </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Xml.AXmlTag.IsDocumentType">
      <summary> True if tag starts with one of the DTD starts </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Xml.AXmlTag.IsEmptyTag">
      <summary> True if tag starts with "&lt;" and does not end with "&gt;" </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Xml.AXmlTag.IsEndTag">
      <summary> True if tag starts with "&lt;/" </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Xml.AXmlTag.IsProcessingInstruction">
      <summary> True if tag starts with "&lt;?" </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Xml.AXmlTag.IsStartOrEmptyTag">
      <summary> True if tag starts with "&lt;" </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Xml.AXmlTag.IsStartTag">
      <summary> True if tag starts with "&lt;" and ends with "&gt;" </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Xml.AXmlTag.IsUnknownBang">
      <summary> True if tag starts with "&lt;!" </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Xml.AXmlTag.Name">
      <summary> Name following the opening bracket </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Xml.AXmlTag.OpeningBracket">
      <summary> Opening bracket - usually "&lt;" </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Xml.AXmlTag.ToString">
      <summary>Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.</summary>
      <returns>A <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.</returns>
    </member>
    <member name="T:ICSharpCode.AvalonEdit.Xml.AXmlText">
      <summary>
            Whitespace or character data
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Xml.AXmlText.#ctor">
      <summary>Initializes a new instance of the <see cref="T:ICSharpCode.AvalonEdit.Xml.AXmlText" /> class</summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Xml.AXmlText.AcceptVisitor(ICSharpCode.AvalonEdit.Xml.IAXmlVisitor)">
      <summary> Call appropriate visit method on the given visitor </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Xml.AXmlText.ContainsOnlyWhitespace">
      <summary> True if the text contains only whitespace characters </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Xml.AXmlText.EscapedValue">
      <summary> The text exactly as in source </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Xml.AXmlText.ToString">
      <summary>Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.</summary>
      <returns>A <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.</returns>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Xml.AXmlText.Value">
      <summary> The text with all entity references resloved </summary>
    </member>
    <member name="T:ICSharpCode.AvalonEdit.Xml.CanonicalPrintAXmlVisitor">
      <summary>
            Converts the XML tree back to text in canonical form.
            See http://www.w3.org/TR/xml-c14n
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Xml.CanonicalPrintAXmlVisitor.#ctor">
      <summary>Initializes a new instance of the <see cref="T:ICSharpCode.AvalonEdit.Xml.CanonicalPrintAXmlVisitor" /> class</summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Xml.CanonicalPrintAXmlVisitor.Output">
      <summary>
            Gets the pretty printed text
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Xml.CanonicalPrintAXmlVisitor.Print(ICSharpCode.AvalonEdit.Xml.AXmlDocument)">
      <summary> Create canonical text from a document </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Xml.CanonicalPrintAXmlVisitor.VisitAttribute(ICSharpCode.AvalonEdit.Xml.AXmlAttribute)">
      <summary> Visit RawAttribute </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Xml.CanonicalPrintAXmlVisitor.VisitDocument(ICSharpCode.AvalonEdit.Xml.AXmlDocument)">
      <summary> Visit RawDocument </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Xml.CanonicalPrintAXmlVisitor.VisitElement(ICSharpCode.AvalonEdit.Xml.AXmlElement)">
      <summary> Visit RawElement </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Xml.CanonicalPrintAXmlVisitor.VisitTag(ICSharpCode.AvalonEdit.Xml.AXmlTag)">
      <summary> Visit RawTag </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Xml.CanonicalPrintAXmlVisitor.VisitText(ICSharpCode.AvalonEdit.Xml.AXmlText)">
      <summary> Visit RawText </summary>
    </member>
    <member name="T:ICSharpCode.AvalonEdit.Xml.FilteredCollection`2">
      <summary>
            Collection that presents only some items from the wrapped collection.
            It implicitely filters object that are not of type T (or derived).
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Xml.FilteredCollection`2.#ctor">
      <summary> Create unbound collection </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Xml.FilteredCollection`2.#ctor(`1)">
      <summary> Wrap the given collection.  Items of type other then T are filtered </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Xml.FilteredCollection`2.#ctor(`1,System.Predicate{System.Object})">
      <summary> Wrap the given collection.  Items of type other then T are filtered.  Items not matching the condition are filtered. </summary>
    </member>
    <member name="T:ICSharpCode.AvalonEdit.Xml.IAXmlVisitor">
      <summary>
            Visitor for the XML tree
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Xml.IAXmlVisitor.VisitAttribute(ICSharpCode.AvalonEdit.Xml.AXmlAttribute)">
      <summary> Visit RawAttribute </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Xml.IAXmlVisitor.VisitDocument(ICSharpCode.AvalonEdit.Xml.AXmlDocument)">
      <summary> Visit RawDocument </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Xml.IAXmlVisitor.VisitElement(ICSharpCode.AvalonEdit.Xml.AXmlElement)">
      <summary> Visit RawElement </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Xml.IAXmlVisitor.VisitTag(ICSharpCode.AvalonEdit.Xml.AXmlTag)">
      <summary> Visit RawTag </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Xml.IAXmlVisitor.VisitText(ICSharpCode.AvalonEdit.Xml.AXmlText)">
      <summary> Visit RawText </summary>
    </member>
    <member name="T:ICSharpCode.AvalonEdit.Xml.MergedCollection`2">
      <summary>
            Two collections in sequence
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Xml.MergedCollection`2.#ctor(`1,`1)">
      <summary> Create a wrapper containing elements of 'a' and then 'b' </summary>
    </member>
    <member name="T:ICSharpCode.AvalonEdit.Xml.PrettyPrintAXmlVisitor">
      <summary>
            Converts the XML tree back to text.
            The text should exactly match the original.
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Xml.PrettyPrintAXmlVisitor.#ctor">
      <summary>Initializes a new instance of the <see cref="T:ICSharpCode.AvalonEdit.Xml.PrettyPrintAXmlVisitor" /> class</summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Xml.PrettyPrintAXmlVisitor.Output">
      <summary>
            Gets the pretty printed text
            </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Xml.PrettyPrintAXmlVisitor.PrettyPrint(ICSharpCode.AvalonEdit.Xml.AXmlDocument)">
      <summary> Create XML text from a document </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Xml.PrettyPrintAXmlVisitor.VisitAttribute(ICSharpCode.AvalonEdit.Xml.AXmlAttribute)">
      <summary> Visit RawAttribute </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Xml.PrettyPrintAXmlVisitor.VisitDocument(ICSharpCode.AvalonEdit.Xml.AXmlDocument)">
      <summary> Visit RawDocument </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Xml.PrettyPrintAXmlVisitor.VisitElement(ICSharpCode.AvalonEdit.Xml.AXmlElement)">
      <summary> Visit RawElement </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Xml.PrettyPrintAXmlVisitor.VisitTag(ICSharpCode.AvalonEdit.Xml.AXmlTag)">
      <summary> Visit RawTag </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Xml.PrettyPrintAXmlVisitor.VisitText(ICSharpCode.AvalonEdit.Xml.AXmlText)">
      <summary> Visit RawText </summary>
    </member>
    <member name="T:ICSharpCode.AvalonEdit.Xml.SyntaxError">
      <summary> Information about syntax error that occured during parsing </summary>
    </member>
    <member name="M:ICSharpCode.AvalonEdit.Xml.SyntaxError.#ctor">
      <summary>Initializes a new instance of the <see cref="T:ICSharpCode.AvalonEdit.Xml.SyntaxError" /> class</summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Xml.SyntaxError.Message">
      <summary> Textual description of the error </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Xml.SyntaxError.Object">
      <summary> Object for which the error occured </summary>
    </member>
    <member name="P:ICSharpCode.AvalonEdit.Xml.SyntaxError.Tag">
      <summary> Any user data </summary>
    </member>
  </members>
</doc>