<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Python.Runtime</name>
    </assembly>
    <members>
        <member name="T:Python.Runtime.ArrayObject">
            <summary>
            Implements a Python type for managed arrays. This type is essentially
            the same as a ClassObject, except that it provides sequence semantics
            to support natural array usage (indexing) from Python.
            </summary>
        </member>
        <member name="M:Python.Runtime.ArrayObject.mp_subscript(System.IntPtr,System.IntPtr)">
            <summary>
            Implements __getitem__ for array types.
            </summary>
        </member>
        <member name="M:Python.Runtime.ArrayObject.mp_ass_subscript(System.IntPtr,System.IntPtr,System.IntPtr)">
            <summary>
            Implements __setitem__ for array types.
            </summary>
        </member>
        <member name="M:Python.Runtime.ArrayObject.sq_contains(System.IntPtr,System.IntPtr)">
            <summary>
            Implements __contains__ for array types.
            </summary>
        </member>
        <member name="T:Python.Runtime.AssemblyManager">
            <summary>
            The AssemblyManager maintains information about loaded assemblies
            namespaces and provides an interface for name-based type lookup.
            </summary>
        </member>
        <member name="M:Python.Runtime.AssemblyManager.Initialize">
            <summary>
            Initialization performed on startup of the Python runtime. Here we
            scan all of the currently loaded assemblies to determine exported
            names, and register to be notified of new assembly loads.
            </summary>
        </member>
        <member name="M:Python.Runtime.AssemblyManager.Shutdown">
            <summary>
            Cleanup resources upon shutdown of the Python runtime.
            </summary>
        </member>
        <member name="M:Python.Runtime.AssemblyManager.AssemblyLoadHandler(System.Object,System.AssemblyLoadEventArgs)">
            <summary>
            Event handler for assembly load events. At the time the Python
            runtime loads, we scan the app domain to map the assemblies that
            are loaded at the time. We also have to register this event handler
            so that we can know about assemblies that get loaded after the
            Python runtime is initialized.
            </summary>
        </member>
        <member name="M:Python.Runtime.AssemblyManager.ResolveHandler(System.Object,System.ResolveEventArgs)">
            <summary>
            Event handler for assembly resolve events. This is needed because
            we augment the assembly search path with the PYTHONPATH when we
            load an assembly from Python. Because of that, we need to listen
            for failed loads, because they might be dependencies of something
            we loaded from Python which also needs to be found on PYTHONPATH.
            </summary>
        </member>
        <member name="M:Python.Runtime.AssemblyManager.UpdatePath">
            <summary>
            We __really__ want to avoid using Python objects or APIs when
            probing for assemblies to load, since our ResolveHandler may be
            called in contexts where we don't have the Python GIL and can't
            even safely try to get it without risking a deadlock ;(
            To work around that, we update a managed copy of sys.path (which
            is the main thing we care about) when UpdatePath is called. The
            import hook calls this whenever it knows its about to use the
            assembly manager, which lets us keep up with changes to sys.path
            in a relatively lightweight and low-overhead way.
            </summary>
        </member>
        <member name="M:Python.Runtime.AssemblyManager.FindAssembly(System.String)">
            <summary>
            Given an assembly name, try to find this assembly file using the
            PYTHONPATH. If not found, return null to indicate implicit load
            using standard load semantics (app base directory then GAC, etc.)
            </summary>
        </member>
        <member name="M:Python.Runtime.AssemblyManager.LoadAssembly(System.String)">
            <summary>
            Loads an assembly from the application directory or the GAC
            given a simple assembly name. Returns the assembly if loaded.
            </summary>
        </member>
        <member name="M:Python.Runtime.AssemblyManager.LoadAssemblyPath(System.String)">
            <summary>
            Loads an assembly using an augmented search path (the python path).
            </summary>
        </member>
        <member name="M:Python.Runtime.AssemblyManager.LoadAssemblyFullPath(System.String)">
            <summary>
            Loads an assembly using full path.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Python.Runtime.AssemblyManager.FindLoadedAssembly(System.String)">
            <summary>
            Returns an assembly that's already been loaded
            </summary>
        </member>
        <member name="M:Python.Runtime.AssemblyManager.LoadImplicit(System.String,System.Boolean)">
            <summary>
            Given a qualified name of the form A.B.C.D, attempt to load
            an assembly named after each of A.B.C.D, A.B.C, A.B, A. This
            will only actually probe for the assembly once for each unique
            namespace. Returns true if any assemblies were loaded.
            </summary>
            <remarks>
            TODO item 3 "* Deprecate implicit loading of assemblies":
            Set the fromFile flag if the name of the loaded assembly matches
            the fully qualified name that was requested if the framework
            actually loads an assembly.
            Call ONLY for namespaces that HAVE NOT been cached yet.
            </remarks>
        </member>
        <member name="M:Python.Runtime.AssemblyManager.ScanAssembly(System.Reflection.Assembly)">
            <summary>
            Scans an assembly for exported namespaces, adding them to the
            mapping of valid namespaces. Note that for a given namespace
            a.b.c.d, each of a, a.b, a.b.c and a.b.c.d are considered to
            be valid namespaces (to better match Python import semantics).
            </summary>
        </member>
        <member name="M:Python.Runtime.AssemblyManager.IsValidNamespace(System.String)">
            <summary>
            Returns true if the given qualified name matches a namespace
            exported by an assembly loaded in the current app domain.
            </summary>
        </member>
        <member name="M:Python.Runtime.AssemblyManager.GetAssemblies(System.String)">
            <summary>
            Returns list of assemblies that declare types in a given namespace
            </summary>
        </member>
        <member name="M:Python.Runtime.AssemblyManager.GetNames(System.String)">
            <summary>
            Returns the current list of valid names for the input namespace.
            </summary>
        </member>
        <member name="M:Python.Runtime.AssemblyManager.LookupType(System.String)">
            <summary>
            Returns the System.Type object for a given qualified name,
            looking in the currently loaded assemblies for the named
            type. Returns null if the named type cannot be found.
            </summary>
        </member>
        <member name="M:Python.Runtime.AssemblyManager.LookupTypes(System.String)">
            <summary>
            Returns the <see cref="T:System.Type"/> objects for the given qualified name,
            looking in the currently loaded assemblies for the named
            type.
            </summary>
        </member>
        <member name="T:Python.Runtime.BorrowedReference">
            <summary>
            Represents a reference to a Python object, that is being lent, and
            can only be safely used until execution returns to the caller.
            </summary>
        </member>
        <member name="M:Python.Runtime.BorrowedReference.DangerousGetAddress">
            <summary>Gets a raw pointer to the Python object</summary>
        </member>
        <member name="M:Python.Runtime.BorrowedReference.#ctor(System.IntPtr)">
            <summary>
            Creates new instance of <see cref="T:Python.Runtime.BorrowedReference"/> from raw pointer. Unsafe.
            </summary>
        </member>
        <member name="T:Python.Runtime.ClassBase">
            <summary>
            Base class for Python types that reflect managed types / classes.
            Concrete subclasses include ClassObject and DelegateObject. This
            class provides common attributes and common machinery for doing
            class initialization (initialization of the class __dict__). The
            concrete subclasses provide slot implementations appropriate for
            each variety of reflected type.
            </summary>
        </member>
        <member name="M:Python.Runtime.ClassBase.tp_init(System.IntPtr,System.IntPtr,System.IntPtr)">
            <summary>
            Implements __init__ for reflected classes and value types.
            </summary>
        </member>
        <member name="M:Python.Runtime.ClassBase.type_subscript(System.IntPtr)">
            <summary>
            Default implementation of [] semantics for reflected types.
            </summary>
        </member>
        <member name="M:Python.Runtime.ClassBase.tp_richcompare(System.IntPtr,System.IntPtr,System.Int32)">
            <summary>
            Standard comparison implementation for instances of reflected types.
            </summary>
        </member>
        <member name="M:Python.Runtime.ClassBase.tp_iter(System.IntPtr)">
            <summary>
            Standard iteration support for instances of reflected types. This
            allows natural iteration over objects that either are IEnumerable
            or themselves support IEnumerator directly.
            </summary>
        </member>
        <member name="M:Python.Runtime.ClassBase.tp_hash(System.IntPtr)">
            <summary>
            Standard __hash__ implementation for instances of reflected types.
            </summary>
        </member>
        <member name="M:Python.Runtime.ClassBase.tp_str(System.IntPtr)">
            <summary>
            Standard __str__ implementation for instances of reflected types.
            </summary>
        </member>
        <member name="M:Python.Runtime.ClassBase.tp_dealloc(System.IntPtr)">
            <summary>
            Standard dealloc implementation for instances of reflected types.
            </summary>
        </member>
        <member name="T:Python.Runtime.IPythonDerivedType">
            <summary>
            Managed class that provides the implementation for reflected types.
            Managed classes and value types are represented in Python by actual
            Python type objects. Each of those type objects is associated with
            an instance of ClassObject, which provides its implementation.
            </summary>
            <remarks>
            interface used to identify which C# types were dynamically created as python subclasses
            </remarks>
        </member>
        <member name="M:Python.Runtime.ClassDerivedObject.tp_new(System.IntPtr,System.IntPtr,System.IntPtr)">
            <summary>
            Implements __new__ for derived classes of reflected classes.
            </summary>
        </member>
        <member name="M:Python.Runtime.ClassDerivedObject.ToPython(Python.Runtime.IPythonDerivedType)">
            <summary>
            Called from Converter.ToPython for types that are python subclasses of managed types.
            The referenced python object is returned instead of a new wrapper.
            </summary>
        </member>
        <member name="M:Python.Runtime.ClassDerivedObject.CreateDerivedType(System.String,System.Type,System.IntPtr,System.String,System.String,System.String)">
            <summary>
            Creates a new managed type derived from a base type with any virtual
            methods overridden to call out to python if the associated python
            object has overridden the method.
            </summary>
        </member>
        <member name="M:Python.Runtime.ClassDerivedObject.AddConstructor(System.Reflection.ConstructorInfo,System.Type,System.Reflection.Emit.TypeBuilder)">
            <summary>
            Add a constructor override that calls the python ctor after calling the base type constructor.
            </summary>
            <param name="ctor">constructor to be called before calling the python ctor</param>
            <param name="baseType">Python callable object</param>
            <param name="typeBuilder">TypeBuilder for the new type the ctor is to be added to</param>
        </member>
        <member name="M:Python.Runtime.ClassDerivedObject.AddVirtualMethod(System.Reflection.MethodInfo,System.Type,System.Reflection.Emit.TypeBuilder)">
            <summary>
            Add a virtual method override that checks for an override on the python instance
            and calls it, otherwise fall back to the base class method.
            </summary>
            <param name="method">virtual method to be overridden</param>
            <param name="baseType">Python callable object</param>
            <param name="typeBuilder">TypeBuilder for the new type the method is to be added to</param>
        </member>
        <member name="M:Python.Runtime.ClassDerivedObject.AddPythonMethod(System.String,Python.Runtime.PyObject,System.Reflection.Emit.TypeBuilder)">
            <summary>
            Python method may have the following function attributes set to control how they're exposed:
            - _clr_return_type_    - method return type (required)
            - _clr_arg_types_      - list of method argument types (required)
            - _clr_method_name_    - method name, if different from the python method name (optional)
            </summary>
            <param name="methodName">Method name to add to the type</param>
            <param name="func">Python callable object</param>
            <param name="typeBuilder">TypeBuilder for the new type the method/property is to be added to</param>
        </member>
        <member name="M:Python.Runtime.ClassDerivedObject.AddPythonProperty(System.String,Python.Runtime.PyObject,System.Reflection.Emit.TypeBuilder)">
            <summary>
            Python properties may have the following function attributes set to control how they're exposed:
            - _clr_property_type_     - property type (required)
            </summary>
            <param name="propertyName">Property name to add to the type</param>
            <param name="func">Python property object</param>
            <param name="typeBuilder">TypeBuilder for the new type the method/property is to be added to</param>
        </member>
        <member name="T:Python.Runtime.PythonDerivedType">
            <summary>
            PythonDerivedType contains static methods used by the dynamically created
            derived type that allow it to call back into python from overridden virtual
            methods, and also handle the construction and destruction of the python
            object.
            </summary>
            <remarks>
            This has to be public as it's called from methods on dynamically built classes
            potentially in other assemblies.
            </remarks>
        </member>
        <member name="M:Python.Runtime.PythonDerivedType.InvokeMethod``1(Python.Runtime.IPythonDerivedType,System.String,System.String,System.Object[])">
            <summary>
            This is the implementation of the overridden methods in the derived
            type. It looks for a python method with the same name as the method
            on the managed base class and if it exists and isn't the managed
            method binding (i.e. it has been overridden in the derived python
            class) it calls it, otherwise it calls the base method.
            </summary>
        </member>
        <member name="T:Python.Runtime.ClassManager">
            <summary>
            The ClassManager is responsible for creating and managing instances
            that implement the Python type objects that reflect managed classes.
            Each managed type reflected to Python is represented by an instance
            of a concrete subclass of ClassBase. Each instance is associated with
            a generated Python type object, whose slots point to static methods
            of the managed instance's class.
            </summary>
        </member>
        <member name="M:Python.Runtime.ClassManager.GetClass(System.Type)">
            <summary>
            Return the ClassBase-derived instance that implements a particular
            reflected managed type, creating it if it doesn't yet exist.
            </summary>
        </member>
        <member name="M:Python.Runtime.ClassManager.CreateClass(System.Type)">
            <summary>
            Create a new ClassBase-derived instance that implements a reflected
            managed type. The new object will be associated with a generated
            Python type object.
            </summary>
        </member>
        <member name="T:Python.Runtime.ClassObject">
            <summary>
            Managed class that provides the implementation for reflected types.
            Managed classes and value types are represented in Python by actual
            Python type objects. Each of those type objects is associated with
            an instance of ClassObject, which provides its implementation.
            </summary>
        </member>
        <member name="M:Python.Runtime.ClassObject.GetDocString">
            <summary>
            Helper to get docstring from reflected constructor info.
            </summary>
        </member>
        <member name="M:Python.Runtime.ClassObject.tp_new(System.IntPtr,System.IntPtr,System.IntPtr)">
            <summary>
            Implements __new__ for reflected classes and value types.
            </summary>
        </member>
        <member name="M:Python.Runtime.ClassObject.type_subscript(System.IntPtr)">
            <summary>
            Implementation of [] semantics for reflected types. This exists
            both to implement the Array[int] syntax for creating arrays and
            to support generic name overload resolution using [].
            </summary>
        </member>
        <member name="M:Python.Runtime.ClassObject.mp_subscript(System.IntPtr,System.IntPtr)">
            <summary>
            Implements __getitem__ for reflected classes and value types.
            </summary>
        </member>
        <member name="M:Python.Runtime.ClassObject.mp_ass_subscript(System.IntPtr,System.IntPtr,System.IntPtr)">
            <summary>
            Implements __setitem__ for reflected classes and value types.
            </summary>
        </member>
        <member name="M:Python.Runtime.ClassObject.tp_call(System.IntPtr,System.IntPtr,System.IntPtr)">
            <summary>
            This is a hack. Generally, no managed class is considered callable
            from Python - with the exception of System.Delegate. It is useful
            to be able to call a System.Delegate instance directly, especially
            when working with multicast delegates.
            </summary>
        </member>
        <member name="M:Python.Runtime.ClassObject.tp_getattro(System.IntPtr,System.IntPtr)">
            <summary>
            ClassObject __getattribute__ implementation. Since extension methods are not attributes
            they need to be returned dynamically.
            </summary>
        </member>
        <member name="T:Python.Runtime.Codecs.DecoderGroup">
            <summary>
            Represents a group of <see cref="T:Python.Runtime.IPyObjectDecoder"/>s. Useful to group them by priority.
            </summary>
        </member>
        <member name="M:Python.Runtime.Codecs.DecoderGroup.Add(Python.Runtime.IPyObjectDecoder)">
            <summary>
            Add specified decoder to the group
            </summary>
        </member>
        <member name="M:Python.Runtime.Codecs.DecoderGroup.Clear">
            <summary>
            Remove all decoders from the group
            </summary>
        </member>
        <member name="M:Python.Runtime.Codecs.DecoderGroup.CanDecode(Python.Runtime.PyObject,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Python.Runtime.Codecs.DecoderGroup.TryDecode``1(Python.Runtime.PyObject,``0@)">
            <inheritdoc />
        </member>
        <member name="M:Python.Runtime.Codecs.DecoderGroup.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:Python.Runtime.Codecs.DecoderGroupExtensions.GetDecoder(Python.Runtime.IPyObjectDecoder,Python.Runtime.PyObject,System.Type)">
            <summary>
            Gets a concrete instance of <see cref="T:Python.Runtime.IPyObjectDecoder"/>
            (potentially selecting one from a collection),
            that can decode from <paramref name="objectType"/> to <paramref name="targetType"/>,
            or <c>null</c> if a matching decoder can not be found.
            </summary>
        </member>
        <member name="T:Python.Runtime.Codecs.EncoderGroup">
            <summary>
            Represents a group of <see cref="T:Python.Runtime.IPyObjectDecoder"/>s. Useful to group them by priority.
            </summary>
        </member>
        <member name="M:Python.Runtime.Codecs.EncoderGroup.Add(Python.Runtime.IPyObjectEncoder)">
            <summary>
            Add specified encoder to the group
            </summary>
        </member>
        <member name="M:Python.Runtime.Codecs.EncoderGroup.Clear">
            <summary>
            Remove all encoders from the group
            </summary>
        </member>
        <member name="M:Python.Runtime.Codecs.EncoderGroup.CanEncode(System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Python.Runtime.Codecs.EncoderGroup.TryEncode(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Python.Runtime.Codecs.EncoderGroup.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:Python.Runtime.Codecs.EncoderGroupExtensions.GetEncoders(Python.Runtime.IPyObjectEncoder,System.Type)">
            <summary>
            Gets specific instances of <see cref="T:Python.Runtime.IPyObjectEncoder"/>
            (potentially selecting one from a collection),
            that can encode the specified <paramref name="type"/>.
            </summary>
        </member>
        <member name="T:Python.Runtime.Codecs.RawProxyEncoder">
            <summary>
            A .NET object encoder, that returns raw proxies (e.g. no conversion to Python types).
            <para>You must inherit from this class and override <see cref="M:Python.Runtime.Codecs.RawProxyEncoder.CanEncode(System.Type)"/>.</para>
            </summary>
        </member>
        <member name="T:Python.Runtime.CodeGenerator">
            <summary>
            Several places in the runtime generate code on the fly to support
            dynamic functionality. The CodeGenerator class manages the dynamic
            assembly used for code generation and provides utility methods for
            certain repetitive tasks.
            </summary>
        </member>
        <member name="M:Python.Runtime.CodeGenerator.DefineType(System.String)">
            <summary>
            DefineType is a shortcut utility to get a new TypeBuilder.
            </summary>
        </member>
        <member name="M:Python.Runtime.CodeGenerator.DefineType(System.String,System.Type)">
            <summary>
            DefineType is a shortcut utility to get a new TypeBuilder.
            </summary>
        </member>
        <member name="T:Python.Runtime.ConstructorBinder">
            <summary>
            A ConstructorBinder encapsulates information about one or more managed
            constructors, and is responsible for selecting the right constructor
            given a set of Python arguments. This is slightly different than the
            standard MethodBinder because of a difference in invoking constructors
            using reflection (which is seems to be a CLR bug).
            </summary>
        </member>
        <member name="M:Python.Runtime.ConstructorBinder.InvokeRaw(System.IntPtr,System.IntPtr,System.IntPtr)">
            <summary>
            Constructors get invoked when an instance of a wrapped managed
            class or a subclass of a managed class is created. This differs
            from the MethodBinder implementation in that we return the raw
            result of the constructor rather than wrapping it as a Python
            object - the reason is that only the caller knows the correct
            Python type to use when wrapping the result (may be a subclass).
            </summary>
        </member>
        <member name="M:Python.Runtime.ConstructorBinder.InvokeRaw(System.IntPtr,System.IntPtr,System.IntPtr,System.Reflection.MethodBase)">
            <summary>
            Allows ctor selection to be limited to a single attempt at a
            match by providing the MethodBase to use instead of searching
            the entire MethodBinder.list (generic ArrayList)
            </summary>
            <param name="inst"> (possibly null) instance </param>
            <param name="args"> PyObject* to the arg tuple </param>
            <param name="kw"> PyObject* to the keyword args dict </param>
            <param name="info"> The sole ContructorInfo to use or null </param>
            <returns> The result of the constructor call with converted params </returns>
            <remarks>
            2010-07-24 BC: I added the info parameter to the call to Bind()
            Binding binding = this.Bind(inst, args, kw, info);
            to take advantage of Bind()'s ability to use a single MethodBase (CI or MI).
            </remarks>
        </member>
        <member name="T:Python.Runtime.ConstructorBinding">
            <summary>
            Implements a Python type that wraps a CLR ctor call. Constructor objects
            support a .Overloads[] syntax to allow explicit ctor overload selection.
            </summary>
            <remarks>
            ClassManager stores a ConstructorBinding instance in the class's __dict__['Overloads']
            SomeType.Overloads[Type, ...] works like this:
            1) Python retrieves the Overloads attribute from this ClassObject's dictionary normally
            and finds a non-null tp_descr_get slot which is called by the interpreter
            and returns an IncRef()ed pyHandle to itself.
            2) The ConstructorBinding object handles the [] syntax in its mp_subscript by matching
            the Type object parameters to a constructor overload using Type.GetConstructor()
            [NOTE: I don't know why method overloads are not searched the same way.]
            and creating the BoundContructor object which contains ContructorInfo object.
            3) In tp_call, if ctorInfo is not null, ctorBinder.InvokeRaw() is called.
            </remarks>
        </member>
        <member name="M:Python.Runtime.ConstructorBinding.tp_descr_get(System.IntPtr,System.IntPtr,System.IntPtr)">
            <summary>
            Descriptor __get__ implementation.
            Implements a Python type that wraps a CLR ctor call that requires the use
            of a .Overloads[pyTypeOrType...] syntax to allow explicit ctor overload
            selection.
            </summary>
            <param name="op"> PyObject* to a Constructors wrapper </param>
            <param name="instance">
            the instance that the attribute was accessed through,
            or None when the attribute is accessed through the owner
            </param>
            <param name="owner"> always the owner class </param>
            <returns>
            a CtorMapper (that borrows a reference to this python type and the
            ClassObject's ConstructorBinder) wrapper.
            </returns>
            <remarks>
            Python 2.6.5 docs:
            object.__get__(self, instance, owner)
            Called to get the attribute of the owner class (class attribute access)
            or of an instance of that class (instance attribute access).
            owner is always the owner class, while instance is the instance that
            the attribute was accessed through, or None when the attribute is accessed through the owner.
            This method should return the (computed) attribute value or raise an AttributeError exception.
            </remarks>
        </member>
        <member name="M:Python.Runtime.ConstructorBinding.mp_subscript(System.IntPtr,System.IntPtr)">
            <summary>
            Implement explicit overload selection using subscript syntax ([]).
            </summary>
            <remarks>
            ConstructorBinding.GetItem(PyObject *o, PyObject *key)
            Return element of o corresponding to the object key or NULL on failure.
            This is the equivalent of the Python expression o[key].
            </remarks>
        </member>
        <member name="M:Python.Runtime.ConstructorBinding.tp_repr(System.IntPtr)">
            <summary>
            ConstructorBinding  __repr__ implementation [borrowed from MethodObject].
            </summary>
        </member>
        <member name="M:Python.Runtime.ConstructorBinding.tp_dealloc(System.IntPtr)">
            <summary>
            ConstructorBinding dealloc implementation.
            </summary>
        </member>
        <member name="T:Python.Runtime.BoundContructor">
            <summary>
            Implements a Python type that constructs the given Type given a particular ContructorInfo.
            </summary>
            <remarks>
            Here mostly because I wanted a new __repr__ function for the selected constructor.
            An earlier implementation hung the __call__ on the ContructorBinding class and
            returned an Incref()ed self.pyHandle from the __get__ function.
            </remarks>
        </member>
        <member name="M:Python.Runtime.BoundContructor.tp_call(System.IntPtr,System.IntPtr,System.IntPtr)">
            <summary>
            BoundContructor.__call__(PyObject *callable_object, PyObject *args, PyObject *kw)
            </summary>
            <param name="op"> PyObject *callable_object </param>
            <param name="args"> PyObject *args </param>
            <param name="kw"> PyObject *kw </param>
            <returns> A reference to a new instance of the class by invoking the selected ctor(). </returns>
        </member>
        <member name="M:Python.Runtime.BoundContructor.tp_repr(System.IntPtr)">
            <summary>
            BoundContructor  __repr__ implementation [borrowed from MethodObject].
            </summary>
        </member>
        <member name="M:Python.Runtime.BoundContructor.tp_dealloc(System.IntPtr)">
            <summary>
            ConstructorBinding dealloc implementation.
            </summary>
        </member>
        <member name="T:Python.Runtime.Converter">
            <summary>
            Performs data conversions between managed types and Python types.
            </summary>
        </member>
        <member name="M:Python.Runtime.Converter.GetTypeByAlias(System.IntPtr)">
            <summary>
            Given a builtin Python type, return the corresponding CLR type.
            </summary>
        </member>
        <member name="M:Python.Runtime.Converter.ToPython``1(``0)">
            <summary>
            Return a Python object for the given native object, converting
            basic types (string, int, etc.) into equivalent Python objects.
            This always returns a new reference. Note that the System.Decimal
            type has no Python equivalent and converts to a managed instance.
            </summary>
        </member>
        <member name="M:Python.Runtime.Converter.ToPythonImplicit(System.Object)">
            <summary>
            In a few situations, we don't have any advisory type information
            when we want to convert an object to Python.
            </summary>
        </member>
        <member name="M:Python.Runtime.Converter.ToManaged(System.IntPtr,System.Type,System.Object@,System.Boolean)">
            <summary>
            Return a managed object for the given Python object, taking funny
            byref types into account.
            </summary>
        </member>
        <member name="M:Python.Runtime.Converter.ToPrimitive(System.IntPtr,System.Type,System.Object@,System.Boolean)">
            <summary>
            Convert a Python value to an instance of a primitive managed type.
            </summary>
        </member>
        <member name="M:Python.Runtime.Converter.ToList(System.IntPtr,System.Type,System.Collections.IList@,System.Boolean)">
            <summary>
            Constructs a managed IList from a Python sequence 
            </summary>
        </member>
        <member name="M:Python.Runtime.Converter.ToArray(System.IntPtr,System.Type,System.Object@,System.Boolean)">
            <summary>
            Convert a Python value to a correctly typed managed array instance.
            The Python value must support the Python iterator protocol or and the
            items in the sequence must be convertible to the target array type.
            </summary>
        </member>
        <member name="M:Python.Runtime.Converter.ToEnum(System.IntPtr,System.Type,System.Object@,System.Boolean)">
            <summary>
            Convert a Python value to a correctly typed managed enum instance.
            </summary>
        </member>
        <member name="T:Python.Runtime.IPyObjectDecoder">
            <summary>
            Defines <see cref="T:Python.Runtime.PyObject"/> conversion to CLR types (unmarshalling)
            </summary>
        </member>
        <member name="M:Python.Runtime.IPyObjectDecoder.CanDecode(Python.Runtime.PyObject,System.Type)">
            <summary>
            Checks if this decoder can decode from <paramref name="objectType"/> to <paramref name="targetType"/>
            </summary>
        </member>
        <member name="M:Python.Runtime.IPyObjectDecoder.TryDecode``1(Python.Runtime.PyObject,``0@)">
            <summary>
            Attempts do decode <paramref name="pyObj"/> into a variable of specified type
            </summary>
            <typeparam name="T">CLR type to decode into</typeparam>
            <param name="pyObj">Object to decode</param>
            <param name="value">The variable, that will receive decoding result</param>
            <returns></returns>
        </member>
        <member name="T:Python.Runtime.IPyObjectEncoder">
            <summary>
            Defines conversion from CLR objects into Python objects (e.g. <see cref="T:Python.Runtime.PyObject"/>) (marshalling)
            </summary>
        </member>
        <member name="M:Python.Runtime.IPyObjectEncoder.CanEncode(System.Type)">
            <summary>
            Checks if encoder can encode CLR objects of specified type
            </summary>
        </member>
        <member name="M:Python.Runtime.IPyObjectEncoder.TryEncode(System.Object)">
            <summary>
            Attempts to encode CLR object <paramref name="value"/> into Python object
            </summary>
        </member>
        <member name="T:Python.Runtime.PyObjectConversions">
            <summary>
            This class allows to register additional marshalling codecs.
            <para>Python.NET will pick suitable encoder/decoder registered first</para>
            </summary>
        </member>
        <member name="M:Python.Runtime.PyObjectConversions.RegisterEncoder(Python.Runtime.IPyObjectEncoder)">
            <summary>
            Registers specified encoder (marshaller)
            <para>Python.NET will pick suitable encoder/decoder registered first</para>
            </summary>
        </member>
        <member name="M:Python.Runtime.PyObjectConversions.RegisterDecoder(Python.Runtime.IPyObjectDecoder)">
            <summary>
            Registers specified decoder (unmarshaller)
            <para>Python.NET will pick suitable encoder/decoder registered first</para>
            </summary>
        </member>
        <member name="T:Python.Runtime.MarshalerBase">
            <summary>
            Abstract class defining boiler plate methods that
            Custom Marshalers will use.
            </summary>
        </member>
        <member name="T:Python.Runtime.UcsMarshaler">
            <summary>
            Custom Marshaler to deal with Managed String to Native
            conversion differences on UCS2/UCS4.
            </summary>
        </member>
        <member name="M:Python.Runtime.UcsMarshaler.Py3UnicodePy2StringtoPtr(System.String)">
            <summary>
            Utility function for Marshaling Unicode on PY3 and AnsiStr on PY2.
            Use on functions whose Input signatures changed between PY2/PY3.
            Ex. Py_SetPythonHome
            </summary>
            <param name="s">Managed String</param>
            <returns>
            Ptr to Native String ANSI(PY2)/Unicode(PY3/UCS2)/UTF32(PY3/UCS4.
            </returns>
            <remarks>
            You MUST deallocate the IntPtr of the Return when done with it.
            </remarks>
        </member>
        <member name="M:Python.Runtime.UcsMarshaler.PtrToPy3UnicodePy2String(System.IntPtr)">
            <summary>
            Utility function for Marshaling Unicode IntPtr on PY3 and
            AnsiStr IntPtr on PY2 to Managed Strings. Use on Python functions
            whose return type changed between PY2/PY3.
            Ex. Py_GetPythonHome
            </summary>
            <param name="p">Native Ansi/Unicode/UTF32 String</param>
            <returns>
            Managed String
            </returns>
        </member>
        <member name="T:Python.Runtime.StrArrayMarshaler">
            <summary>
            Custom Marshaler to deal with Managed String Arrays to Native
            conversion differences on UCS2/UCS4.
            </summary>
        </member>
        <member name="T:Python.Runtime.Utf8Marshaler">
            <summary>
            Custom Marshaler to deal with Managed String to Native
            conversion on UTF-8. Use on functions that expect UTF-8 encoded
            strings like `PyUnicode_FromStringAndSize`
            </summary>
            <remarks>
            If instead we used `MarshalAs(UnmanagedType.LPWStr)` the output to
            `foo` would be `f\x00o\x00o\x00`.
            </remarks>
        </member>
        <member name="T:Python.Runtime.DebugUtil">
            <summary>
            Debugging helper utilities.
            The methods are only executed when the DEBUG flag is set. Otherwise
            they are automagically hidden by the compiler and silently suppressed.
            </summary>
        </member>
        <member name="M:Python.Runtime.DebugUtil.PrintHexBytes(System.Byte[])">
            <summary>
            Helper function to inspect/compare managed to native conversions.
            Especially useful when debugging CustomMarshaler.
            </summary>
            <param name="bytes"></param>
        </member>
        <member name="T:Python.Runtime.DelegateManager">
            <summary>
            The DelegateManager class manages the creation of true managed
            delegate instances that dispatch calls to Python methods.
            </summary>
        </member>
        <member name="M:Python.Runtime.DelegateManager.GetPythonHandle(System.Delegate)">
            <summary>
            Given a true delegate instance, return the PyObject handle of the
            Python object implementing the delegate (or IntPtr.Zero if the
            delegate is not implemented in Python code.
            </summary>
        </member>
        <member name="M:Python.Runtime.DelegateManager.GetDispatcher(System.Type)">
            <summary>
            GetDispatcher is responsible for creating a class that provides
            an appropriate managed callback method for a given delegate type.
            </summary>
        </member>
        <member name="M:Python.Runtime.DelegateManager.GetDelegate(System.Type,System.IntPtr)">
            <summary>
            Given a delegate type and a callable Python object, GetDelegate
            returns an instance of the delegate type. The delegate instance
            returned will dispatch calls to the given Python object.
            </summary>
        </member>
        <member name="T:Python.Runtime.DelegateObject">
            <summary>
            Managed class that provides the implementation for reflected delegate
            types. Delegates are represented in Python by generated type objects.
            Each of those type objects is associated an instance of this class,
            which provides its implementation.
            </summary>
        </member>
        <member name="M:Python.Runtime.DelegateObject.GetTrueDelegate(System.IntPtr)">
            <summary>
            Given a PyObject pointer to an instance of a delegate type, return
            the true managed delegate the Python object represents (or null).
            </summary>
        </member>
        <member name="M:Python.Runtime.DelegateObject.tp_new(System.IntPtr,System.IntPtr,System.IntPtr)">
            <summary>
            DelegateObject __new__ implementation. The result of this is a new
            PyObject whose type is DelegateObject and whose ob_data is a handle
            to an actual delegate instance. The method wrapped by the actual
            delegate instance belongs to an object generated to relay the call
            to the Python callable passed in.
            </summary>
        </member>
        <member name="M:Python.Runtime.DelegateObject.tp_call(System.IntPtr,System.IntPtr,System.IntPtr)">
            <summary>
            Implements __call__ for reflected delegate types.
            </summary>
        </member>
        <member name="M:Python.Runtime.DelegateObject.tp_richcompare(System.IntPtr,System.IntPtr,System.Int32)">
            <summary>
            Implements __cmp__ for reflected delegate types.
            </summary>
        </member>
        <member name="T:Python.Runtime.EventBinding">
            <summary>
            Implements a Python event binding type, similar to a method binding.
            </summary>
        </member>
        <member name="M:Python.Runtime.EventBinding.nb_inplace_add(System.IntPtr,System.IntPtr)">
            <summary>
            EventBinding += operator implementation.
            </summary>
        </member>
        <member name="M:Python.Runtime.EventBinding.nb_inplace_subtract(System.IntPtr,System.IntPtr)">
            <summary>
            EventBinding -= operator implementation.
            </summary>
        </member>
        <member name="M:Python.Runtime.EventBinding.tp_hash(System.IntPtr)">
            <summary>
            EventBinding  __hash__ implementation.
            </summary>
        </member>
        <member name="M:Python.Runtime.EventBinding.tp_repr(System.IntPtr)">
            <summary>
            EventBinding __repr__ implementation.
            </summary>
        </member>
        <member name="M:Python.Runtime.EventBinding.tp_dealloc(System.IntPtr)">
            <summary>
            EventBinding dealloc implementation.
            </summary>
        </member>
        <member name="T:Python.Runtime.EventObject">
            <summary>
            Implements a Python descriptor type that provides access to CLR events.
            </summary>
        </member>
        <member name="M:Python.Runtime.EventObject.AddEventHandler(System.IntPtr,System.IntPtr)">
            <summary>
            Register a new Python object event handler with the event.
            </summary>
        </member>
        <member name="M:Python.Runtime.EventObject.RemoveEventHandler(System.IntPtr,System.IntPtr)">
            <summary>
            Remove the given Python object event handler.
            </summary>
        </member>
        <member name="M:Python.Runtime.EventObject.tp_descr_get(System.IntPtr,System.IntPtr,System.IntPtr)">
            <summary>
            Descriptor __get__ implementation. A getattr on an event returns
            a "bound" event that keeps a reference to the object instance.
            </summary>
        </member>
        <member name="M:Python.Runtime.EventObject.tp_descr_set(System.IntPtr,System.IntPtr,System.IntPtr)">
            <summary>
            Descriptor __set__ implementation. This actually never allows you
            to set anything; it exists solely to support the '+=' spelling of
            event handler registration. The reason is that given code like:
            'ob.SomeEvent += method', Python will attempt to set the attribute
            SomeEvent on ob to the result of the '+=' operation.
            </summary>
        </member>
        <member name="M:Python.Runtime.EventObject.tp_repr(System.IntPtr)">
            <summary>
            Descriptor __repr__ implementation.
            </summary>
        </member>
        <member name="M:Python.Runtime.EventObject.tp_dealloc(System.IntPtr)">
            <summary>
            Descriptor dealloc implementation.
            </summary>
        </member>
        <member name="T:Python.Runtime.ExceptionClassObject">
            <summary>
            Base class for Python types that reflect managed exceptions based on
            System.Exception
            </summary>
            <remarks>
            The Python wrapper for managed exceptions LIES about its inheritance
            tree. Although the real System.Exception is a subclass of
            System.Object the Python type for System.Exception does NOT claim that
            it subclasses System.Object. Instead TypeManager.CreateType() uses
            Python's exception.Exception class as base class for System.Exception.
            </remarks>
        </member>
        <member name="M:Python.Runtime.ExceptionClassObject.tp_repr(System.IntPtr)">
            <summary>
            Exception __repr__ implementation
            </summary>
        </member>
        <member name="M:Python.Runtime.ExceptionClassObject.tp_str(System.IntPtr)">
            <summary>
            Exception __str__ implementation
            </summary>
        </member>
        <member name="T:Python.Runtime.Exceptions">
            <summary>
            Encapsulates the Python exception APIs.
            </summary>
            <remarks>
            Readability of the Exceptions class improvements as we look toward version 2.7 ...
            </remarks>
        </member>
        <member name="M:Python.Runtime.Exceptions.Initialize">
            <summary>
            Initialization performed on startup of the Python runtime.
            </summary>
        </member>
        <member name="M:Python.Runtime.Exceptions.Shutdown">
            <summary>
            Cleanup resources upon shutdown of the Python runtime.
            </summary>
        </member>
        <member name="M:Python.Runtime.Exceptions.SetArgsAndCause(System.IntPtr)">
            <summary>
            Set the 'args' slot on a python exception object that wraps
            a CLR exception. This is needed for pickling CLR exceptions as
            BaseException_reduce will only check the slots, bypassing the
            __getattr__ implementation, and thus dereferencing a NULL
            pointer.
            </summary>
            <param name="ob">The python object wrapping </param>
        </member>
        <member name="M:Python.Runtime.Exceptions.ErrorCheck(System.IntPtr)">
            <summary>
            Shortcut for (pointer == NULL) -&gt; throw PythonException
            </summary>
            <param name="pointer">Pointer to a Python object</param>
        </member>
        <member name="M:Python.Runtime.Exceptions.ErrorOccurredCheck(System.IntPtr)">
            <summary>
            Shortcut for (pointer == NULL or ErrorOccurred()) -&gt; throw PythonException
            </summary>
        </member>
        <member name="M:Python.Runtime.Exceptions.ExceptionMatches(System.IntPtr)">
            <summary>
            ExceptionMatches Method
            </summary>
            <remarks>
            Returns true if the current Python exception matches the given
            Python object. This is a wrapper for PyErr_ExceptionMatches.
            </remarks>
        </member>
        <member name="M:Python.Runtime.Exceptions.ExceptionMatches(System.IntPtr,System.IntPtr)">
            <summary>
            ExceptionMatches Method
            </summary>
            <remarks>
            Returns true if the given Python exception matches the given
            Python object. This is a wrapper for PyErr_GivenExceptionMatches.
            </remarks>
        </member>
        <member name="M:Python.Runtime.Exceptions.SetError(System.IntPtr,System.String)">
            <summary>
            SetError Method
            </summary>
            <remarks>
            Sets the current Python exception given a native string.
            This is a wrapper for the Python PyErr_SetString call.
            </remarks>
        </member>
        <member name="M:Python.Runtime.Exceptions.SetError(System.IntPtr,System.IntPtr)">
            <summary>
            SetError Method
            </summary>
            <remarks>
            Sets the current Python exception given a Python object.
            This is a wrapper for the Python PyErr_SetObject call.
            </remarks>
        </member>
        <member name="M:Python.Runtime.Exceptions.SetError(System.Exception)">
            <summary>
            SetError Method
            </summary>
            <remarks>
            Sets the current Python exception given a CLR exception
            object. The CLR exception instance is wrapped as a Python
            object, allowing it to be handled naturally from Python.
            </remarks>
        </member>
        <member name="M:Python.Runtime.Exceptions.ErrorOccurred">
            <summary>
            ErrorOccurred Method
            </summary>
            <remarks>
            Returns true if an exception occurred in the Python runtime.
            This is a wrapper for the Python PyErr_Occurred call.
            </remarks>
        </member>
        <member name="M:Python.Runtime.Exceptions.Clear">
            <summary>
            Clear Method
            </summary>
            <remarks>
            Clear any exception that has been set in the Python runtime.
            </remarks>
        </member>
        <member name="M:Python.Runtime.Exceptions.warn(System.String,System.IntPtr,System.Int32)">
            <summary>
            Alias for Python's warnings.warn() function.
            </summary>
        </member>
        <member name="T:Python.Runtime.ExtensionManager">
            <summary>
            Provides extension method related functionality
            </summary>
        </member>
        <member name="F:Python.Runtime.ExtensionManager.extensionTypes">
            <summary>
            Keeps track of currently imported extension types
            </summary>
        </member>
        <member name="F:Python.Runtime.ExtensionManager.cache">
            <summary>
            Caches method objects by name and concrete instance type
            </summary>
        </member>
        <member name="M:Python.Runtime.ExtensionManager.RegisterExtensionType(Python.Runtime.ClassBase)">
            <summary>
            Registers an extension type, making its extension methods available.
            For this to happen the internal cache is purged.
            </summary>
            <param name="classBase">Class to be registered</param>
        </member>
        <member name="M:Python.Runtime.ExtensionManager.IsExtensionType(Python.Runtime.ClassBase)">
            <summary>
            Checks whether a class is an extension type.
            </summary>
            <param name="classBase">Class to check</param>
            <returns>True if it is an extension type, false if not</returns>
        </member>
        <member name="M:Python.Runtime.ExtensionManager.GetExtensionMethodObject(System.Type,System.String)">
            <summary>
            Gets an extension method object, given the type of the instance being called and the
            method name. The method object is obtained from cache if possible.
            </summary>
            <param name="type">Type of the instance being called</param>
            <param name="name">Name of the method being called</param>
            <returns>Method object for an extension or null if there isn't one</returns>
        </member>
        <member name="T:Python.Runtime.ExtensionType">
            <summary>
            Base class for extensions whose instances *share* a single Python
            type object, such as the types that represent CLR methods, fields,
            etc. Instances implemented by this class do not support sub-typing.
            </summary>
        </member>
        <member name="M:Python.Runtime.ExtensionType.FinalizeObject(Python.Runtime.ManagedType)">
            <summary>
            Common finalization code to support custom tp_deallocs.
            </summary>
        </member>
        <member name="M:Python.Runtime.ExtensionType.tp_setattro(System.IntPtr,System.IntPtr,System.IntPtr)">
            <summary>
            Type __setattr__ implementation.
            </summary>
        </member>
        <member name="M:Python.Runtime.ExtensionType.tp_descr_set(System.IntPtr,System.IntPtr,System.IntPtr)">
            <summary>
            Default __set__ implementation - this prevents descriptor instances
            being silently replaced in a type __dict__ by default __setattr__.
            </summary>
        </member>
        <member name="M:Python.Runtime.ExtensionType.tp_dealloc(System.IntPtr)">
            <summary>
            Default dealloc implementation.
            </summary>
        </member>
        <member name="T:Python.Runtime.FieldObject">
            <summary>
            Implements a Python descriptor type that provides access to CLR fields.
            </summary>
        </member>
        <member name="M:Python.Runtime.FieldObject.tp_descr_get(System.IntPtr,System.IntPtr,System.IntPtr)">
            <summary>
            Descriptor __get__ implementation. This method returns the
            value of the field on the given object. The returned value
            is converted to an appropriately typed Python object.
            </summary>
        </member>
        <member name="M:Python.Runtime.FieldObject.tp_descr_set(System.IntPtr,System.IntPtr,System.IntPtr)">
            <summary>
            Descriptor __set__ implementation. This method sets the value of
            a field based on the given Python value. The Python value must be
            convertible to the type of the field.
            </summary>
        </member>
        <member name="M:Python.Runtime.FieldObject.tp_repr(System.IntPtr)">
            <summary>
            Descriptor __repr__ implementation.
            </summary>
        </member>
        <member name="T:Python.Runtime.GenericType">
            <summary>
            Implements reflected generic types. Note that the Python behavior
            is the same for both generic type definitions and constructed open
            generic types. Both are essentially factories for creating closed
            types based on the required generic type parameters.
            </summary>
        </member>
        <member name="M:Python.Runtime.GenericType.tp_new(System.IntPtr,System.IntPtr,System.IntPtr)">
            <summary>
            Implements __new__ for reflected generic types.
            </summary>
        </member>
        <member name="M:Python.Runtime.GenericType.tp_call(System.IntPtr,System.IntPtr,System.IntPtr)">
            <summary>
            Implements __call__ for reflected generic types.
            </summary>
        </member>
        <member name="T:Python.Runtime.GenericUtil">
            <summary>
            This class is responsible for efficiently maintaining the bits
            of information we need to support aliases with 'nice names'.
            </summary>
        </member>
        <member name="M:Python.Runtime.GenericUtil.Register(System.Type)">
            <summary>
            Register a generic type that appears in a given namespace.
            </summary>
        </member>
        <member name="M:Python.Runtime.GenericUtil.GetGenericBaseNames(System.String)">
            <summary>
            xxx
            </summary>
        </member>
        <member name="M:Python.Runtime.GenericUtil.GenericForType(System.Type,System.Int32)">
            <summary>
            xxx
            </summary>
        </member>
        <member name="M:Python.Runtime.GenericUtil.GenericNameForBaseName(System.String,System.String)">
            <summary>
            xxx
            </summary>
        </member>
        <member name="T:Python.Runtime.ImportHook">
            <summary>
            Implements the "import hook" used to integrate Python with the CLR.
            </summary>
        </member>
        <member name="M:Python.Runtime.ImportHook.InitImport">
            <summary>
            Initialize just the __import__ hook itself.
            </summary>
        </member>
        <member name="M:Python.Runtime.ImportHook.RestoreImport">
            <summary>
            Restore the __import__ hook.
            </summary>
        </member>
        <member name="M:Python.Runtime.ImportHook.Initialize">
            <summary>
            Initialization performed on startup of the Python runtime.
            </summary>
        </member>
        <member name="M:Python.Runtime.ImportHook.Shutdown">
            <summary>
            Cleanup resources upon shutdown of the Python runtime.
            </summary>
        </member>
        <member name="M:Python.Runtime.ImportHook.GetCLRModule(System.Nullable{System.IntPtr})">
            <summary>
            Return the clr python module (new reference)
            </summary>
        </member>
        <member name="M:Python.Runtime.ImportHook.__import__(System.IntPtr,System.IntPtr,System.IntPtr)">
            <summary>
            The actual import hook that ties Python to the managed world.
            </summary>
        </member>
        <member name="T:Python.Runtime.Indexer">
            <summary>
            Bundles the information required to support an indexer property.
            </summary>
        </member>
        <member name="M:Python.Runtime.Indexer.GetDefaultArgs(System.IntPtr)">
            <summary>
            This will return default arguments a new instance of a tuple. The size
            of the tuple will indicate the number of default arguments.
            </summary>
            <param name="args">This is pointing to the tuple args passed in</param>
            <returns>a new instance of the tuple containing the default args</returns>
        </member>
        <member name="T:Python.Runtime.InterfaceObject">
            <summary>
            Provides the implementation for reflected interface types. Managed
            interfaces are represented in Python by actual Python type objects.
            Each of those type objects is associated with an instance of this
            class, which provides the implementation for the Python type.
            </summary>
        </member>
        <member name="M:Python.Runtime.InterfaceObject.tp_new(System.IntPtr,System.IntPtr,System.IntPtr)">
            <summary>
            Implements __new__ for reflected interface types.
            </summary>
        </member>
        <member name="T:Python.Runtime.IReflectedType">
            <summary>
            xxx
            </summary>
        </member>
        <member name="T:Python.Runtime.DocStringAttribute">
            <summary>
            This file defines objects to support binary interop with the Python
            runtime. Generally, the definitions here need to be kept up to date
            when moving to new Python versions.
            </summary>
        </member>
        <member name="T:Python.Runtime.TypeFlags">
            <summary>
            TypeFlags(): The actual bit values for the Type Flags stored
            in a class.
            Note that the two values reserved for stackless have been put
            to good use as PythonNet specific flags (Managed and Subclass)
            </summary>
        </member>
        <member name="T:Python.Runtime.Iterator">
            <summary>
            Implements a generic Python iterator for IEnumerable objects and
            managed array objects. This supports 'for i in object:' in Python.
            </summary>
        </member>
        <member name="M:Python.Runtime.Iterator.tp_iternext(System.IntPtr)">
            <summary>
            Implements support for the Python iteration protocol.
            </summary>
        </member>
        <member name="T:Python.Runtime.ManagedType">
            <summary>
            Common base class for all objects that are implemented in managed
            code. It defines the common fields that associate CLR and Python
            objects and common utilities to convert between those identities.
            </summary>
        </member>
        <member name="M:Python.Runtime.ManagedType.GetManagedObject(System.IntPtr)">
            <summary>
            Given a Python object, return the associated managed object or null.
            </summary>
        </member>
        <member name="T:Python.Runtime.MetaType">
            <summary>
            The managed metatype. This object implements the type of all reflected
            types. It also provides support for single-inheritance from reflected
            managed types.
            </summary>
        </member>
        <member name="M:Python.Runtime.MetaType.Initialize">
            <summary>
            Metatype initialization. This bootstraps the CLR metatype to life.
            </summary>
        </member>
        <member name="M:Python.Runtime.MetaType.tp_new(System.IntPtr,System.IntPtr,System.IntPtr)">
            <summary>
            Metatype __new__ implementation. This is called to create a new
            class / type when a reflected class is subclassed.
            </summary>
        </member>
        <member name="M:Python.Runtime.MetaType.tp_call(System.IntPtr,System.IntPtr,System.IntPtr)">
            <summary>
            Metatype __call__ implementation. This is needed to ensure correct
            initialization (__init__ support), because the tp_call we inherit
            from PyType_Type won't call __init__ for metatypes it doesn't know.
            </summary>
        </member>
        <member name="M:Python.Runtime.MetaType.tp_setattro(System.IntPtr,System.IntPtr,System.IntPtr)">
            <summary>
            Type __setattr__ implementation for reflected types. Note that this
            is slightly different than the standard setattr implementation for
            the normal Python metatype (PyTypeType). We need to look first in
            the type object of a reflected type for a descriptor in order to
            support the right setattr behavior for static fields and properties.
            </summary>
        </member>
        <member name="M:Python.Runtime.MetaType.mp_subscript(System.IntPtr,System.IntPtr)">
            <summary>
            The metatype has to implement [] semantics for generic types, so
            here we just delegate to the generic type def implementation. Its
            own mp_subscript
            </summary>
        </member>
        <member name="M:Python.Runtime.MetaType.tp_dealloc(System.IntPtr)">
            <summary>
            Dealloc implementation. This is called when a Python type generated
            by this metatype is no longer referenced from the Python runtime.
            </summary>
        </member>
        <member name="T:Python.Runtime.MethodBinder">
            <summary>
            A MethodBinder encapsulates information about a (possibly overloaded)
            managed method, and is responsible for selecting the right method given
            a set of Python arguments. This is also used as a base class for the
            ConstructorBinder, a minor variation used to invoke constructors.
            </summary>
        </member>
        <member name="M:Python.Runtime.MethodBinder.MatchSignature(System.Reflection.MethodInfo[],System.Type[])">
            <summary>
            Given a sequence of MethodInfo and a sequence of types, return the
            MethodInfo that matches the signature represented by those types.
            </summary>
        </member>
        <member name="M:Python.Runtime.MethodBinder.MatchParameters(System.Reflection.MethodInfo[],System.Type[])">
            <summary>
            Given a sequence of MethodInfo and a sequence of type parameters,
            return the MethodInfo that represents the matching closed generic.
            </summary>
        </member>
        <member name="M:Python.Runtime.MethodBinder.MatchSignatureAndParameters(System.Reflection.MethodInfo[],System.Type[],System.Type[])">
            <summary>
            Given a sequence of MethodInfo and two sequences of type parameters,
            return the MethodInfo that matches the signature and the closed generic.
            </summary>
        </member>
        <member name="M:Python.Runtime.MethodBinder.GetMethods">
            <summary>
            Return the array of MethodInfo for this method. The result array
            is arranged in order of precedence (done lazily to avoid doing it
            at all for methods that are never called).
            </summary>
        </member>
        <member name="M:Python.Runtime.MethodBinder.GetPrecedence(System.Reflection.MethodBase)">
            <summary>
            Precedence algorithm largely lifted from Jython - the concerns are
            generally the same so we'll start with this and tweak as necessary.
            </summary>
            <remarks>
            Based from Jython `org.python.core.ReflectedArgs.precedence`
            See: https://github.com/jythontools/jython/blob/master/src/org/python/core/ReflectedArgs.java#L192
            </remarks>
        </member>
        <member name="M:Python.Runtime.MethodBinder.ArgPrecedence(System.Type)">
            <summary>
            Return a precedence value for a particular Type object.
            </summary>
        </member>
        <member name="M:Python.Runtime.MethodBinder.Bind(System.IntPtr,System.IntPtr,System.IntPtr)">
            <summary>
            Bind the given Python instance and arguments to a particular method
            overload and return a structure that contains the converted Python
            instance, converted arguments and the correct method to call.
            </summary>
        </member>
        <member name="M:Python.Runtime.MethodBinder.SortByConversionProximity(System.Collections.Generic.List{Python.Runtime.MethodBindingData})">
            <summary>
            Sorts the method binding list based on a heuristic to calculate conversion proximity
            </summary>
            <param name="bindings">Method bindings to sort</param>
        </member>
        <member name="M:Python.Runtime.MethodBinder.FilterByExactTypeResolution(System.Collections.Generic.List{Python.Runtime.MethodBindingData},System.IntPtr,System.Int32,System.Collections.Generic.Dictionary{System.String,System.IntPtr})">
            <summary>
            Filters a list of method bindings to contain only those that have parameters with the
            same type as the provided arguments.
            </summary>
            <param name="bindings">Method binding list to be filtered</param>
            <param name="args">Actual arguments provided</param>
            <param name="pyArgCount">Number of arguments provided</param>
            <param name="kwargDict">Named parameters provided</param>
            <returns>Filtered out method bindings</returns>
        </member>
        <member name="M:Python.Runtime.MethodBinder.CreateParameterBinding(Python.Runtime.MethodBindingData,System.Int32,System.IntPtr,System.Int32,System.Collections.Generic.Dictionary{System.String,System.IntPtr})">
            <summary>
            Creates parameter binding information for a given argument of a method binding.
            </summary>
            <param name="binding">Method binding for which the parameter is created</param>
            <param name="paramIndex">Index of the parameter in method signature</param>
            <param name="args">Actual arguments provided</param>
            <param name="pyArgCount">Number of arguments provided</param>
            <param name="kwargDict">Named parameters provided</param>
            <returns>Parameter binding information</returns>
        </member>
        <member name="M:Python.Runtime.MethodBinder.ResolveArgumentType(Python.Runtime.ParameterBindingData)">
            <summary>
            Adds parameter binding information regarding the type of the actual argument, and resolves
            whether it matches the declared parameter or not, by comparing Python types.
            </summary>
            <param name="binding">Parameter binding information</param>
        </member>
        <member name="M:Python.Runtime.MethodBinder.FilterByArgumentCount(System.Reflection.MethodBase[],System.Int32,System.Collections.Generic.Dictionary{System.String,System.IntPtr})">
            <summary>
            Filter the provided methods by comparing the number of declared parameters with the number of
            provided arguments.
            </summary>
            <param name="methods">Method signatures to check</param>
            <param name="pynargs">Number of arguments provided</param>
            <param name="kwargDict">Named parameters provided</param>
            <returns>Method binding information for the methods with a matching parameter count</returns>
        </member>
        <member name="M:Python.Runtime.MethodBinder.GetBinding(System.Collections.Generic.List{Python.Runtime.MethodBindingData},System.IntPtr,System.IntPtr,System.Int32,System.Collections.Generic.Dictionary{System.String,System.IntPtr})">
            <summary>
            Creates an actual binding by trying to convert the arguments from the candidate bindings provided, ordered by priority.
            </summary>
            <param name="bindings">Candidate bindings to try</param>
            <param name="inst">Object instance provided</param>
            <param name="args">Actual arguments provided</param>
            <param name="pynargs">Number of arguments provided</param>
            <param name="kwargDict">Named parameters provided</param>
            <returns>Actual binding to perform the function call or null if not found</returns>
        </member>
        <member name="M:Python.Runtime.MethodBinder.TryConvertArguments(System.IntPtr,System.Int32,System.Collections.Generic.Dictionary{System.String,System.IntPtr},Python.Runtime.MethodBindingData,System.Int32@)">
            <summary>
            Attempts to convert Python positional argument tuple and keyword argument table
            into values for the provided binding parameters.
            </summary>
            <param name="args">A pointer to the Python argument tuple</param>
            <param name="pyArgCount">Number of arguments, passed by Python</param>
            <param name="kwargDict">Dictionary of keyword argument name to python object pointer</param>
            <param name="binding">A method binding with partially processed parameters</param>
            <param name="outs">Returns number of output parameters</param>
            <returns>Whether the required conversions could be done successfully.</returns>
        </member>
        <member name="M:Python.Runtime.MethodBinder.TryConvertArgument(Python.Runtime.ParameterBindingData,System.Boolean@)">
            <summary>
            Tries to produce a value for a parameter binding, performing a conversion of the
            given argument to the target type.
            </summary>
            <param name="binding">Parameter binding to fill with a value</param>
            <param name="isOut">Whether the type is a reference</param>
            <returns>Whether the conversion succeeded or not</returns>
        </member>
        <member name="T:Python.Runtime.MethodSorter">
            <summary>
            Utility class to sort method info by parameter type precedence.
            </summary>
        </member>
        <member name="T:Python.Runtime.Binding">
            <summary>
            A Binding is a utility instance that bundles together a MethodInfo
            representing a method to call, a (possibly null) target instance for
            the call, and the arguments for the call (all as managed values).
            </summary>
        </member>
        <member name="T:Python.Runtime.MethodBinding">
            <summary>
            Implements a Python binding type for CLR methods. These work much like
            standard Python method bindings, but the same type is used to bind
            both static and instance methods.
            </summary>
        </member>
        <member name="M:Python.Runtime.MethodBinding.mp_subscript(System.IntPtr,System.IntPtr)">
            <summary>
            Implement binding of generic methods using the subscript syntax [].
            </summary>
        </member>
        <member name="M:Python.Runtime.MethodBinding.tp_getattro(System.IntPtr,System.IntPtr)">
            <summary>
            MethodBinding __getattribute__ implementation.
            </summary>
        </member>
        <member name="M:Python.Runtime.MethodBinding.tp_call(System.IntPtr,System.IntPtr,System.IntPtr)">
            <summary>
            MethodBinding  __call__ implementation.
            </summary>
        </member>
        <member name="M:Python.Runtime.MethodBinding.tp_hash(System.IntPtr)">
            <summary>
            MethodBinding  __hash__ implementation.
            </summary>
        </member>
        <member name="M:Python.Runtime.MethodBinding.tp_repr(System.IntPtr)">
            <summary>
            MethodBinding  __repr__ implementation.
            </summary>
        </member>
        <member name="M:Python.Runtime.MethodBinding.tp_dealloc(System.IntPtr)">
            <summary>
            MethodBinding dealloc implementation.
            </summary>
        </member>
        <member name="T:Python.Runtime.MethodBindingData">
            <summary>
            Contains information regarding the binding of a .NET method to a function call in Python.
            </summary>
        </member>
        <member name="P:Python.Runtime.MethodBindingData.Method">
            <summary>
            .NET method associated to this binding
            </summary>
        </member>
        <member name="P:Python.Runtime.MethodBindingData.UsesParamsArray">
            <summary>
            Whether the call uses a params array
            </summary>
        </member>
        <member name="P:Python.Runtime.MethodBindingData.DefaultArgList">
            <summary>
            Defaults values for arguments
            </summary>
        </member>
        <member name="P:Python.Runtime.MethodBindingData.ParameterBindings">
            <summary>
            Binding information for each parameter of the method
            </summary>
        </member>
        <member name="T:Python.Runtime.MethodObject">
            <summary>
            Implements a Python type that represents a CLR method. Method objects
            support a subscript syntax [] to allow explicit overload selection.
            </summary>
            <remarks>
            TODO: ForbidPythonThreadsAttribute per method info
            </remarks>
        </member>
        <member name="M:Python.Runtime.MethodObject.GetDocString">
            <summary>
            Helper to get docstrings from reflected method / param info.
            </summary>
        </member>
        <member name="M:Python.Runtime.MethodObject.IsStatic">
            <summary>
            This is a little tricky: a class can actually have a static method
            and instance methods all with the same name. That makes it tough
            to support calling a method 'unbound' (passing the instance as the
            first argument), because in this case we can't know whether to call
            the instance method unbound or call the static method.
            </summary>
            <remarks>
            The rule we is that if there are both instance and static methods
            with the same name, then we always call the static method. So this
            method returns true if any of the methods that are represented by
            the descriptor are static methods (called by MethodBinding).
            </remarks>
        </member>
        <member name="M:Python.Runtime.MethodObject.tp_getattro(System.IntPtr,System.IntPtr)">
            <summary>
            Descriptor __getattribute__ implementation.
            </summary>
        </member>
        <member name="M:Python.Runtime.MethodObject.tp_descr_get(System.IntPtr,System.IntPtr,System.IntPtr)">
            <summary>
            Descriptor __get__ implementation. Accessing a CLR method returns
            a "bound" method similar to a Python bound method.
            </summary>
        </member>
        <member name="M:Python.Runtime.MethodObject.tp_repr(System.IntPtr)">
            <summary>
            Descriptor __repr__ implementation.
            </summary>
        </member>
        <member name="M:Python.Runtime.MethodObject.tp_dealloc(System.IntPtr)">
            <summary>
            Descriptor dealloc implementation.
            </summary>
        </member>
        <member name="T:Python.Runtime.MethodWrapper">
            <summary>
            A MethodWrapper wraps a static method of a managed type,
            making it callable by Python as a PyCFunction object. This is
            currently used mainly to implement special cases like the CLR
            import hook.
            </summary>
        </member>
        <member name="T:Python.Runtime.ModuleFunctionObject">
            <summary>
            Module level functions
            </summary>
        </member>
        <member name="M:Python.Runtime.ModuleFunctionObject.tp_call(System.IntPtr,System.IntPtr,System.IntPtr)">
            <summary>
            __call__ implementation.
            </summary>
        </member>
        <member name="M:Python.Runtime.ModuleFunctionObject.tp_repr(System.IntPtr)">
            <summary>
            __repr__ implementation.
            </summary>
        </member>
        <member name="T:Python.Runtime.ModuleObject">
            <summary>
            Implements a Python type that provides access to CLR namespaces. The
            type behaves like a Python module, and can contain other sub-modules.
            </summary>
        </member>
        <member name="M:Python.Runtime.ModuleObject.GetAttribute(System.String,System.Boolean)">
            <summary>
            Returns a ClassBase object representing a type that appears in
            this module's namespace or a ModuleObject representing a child
            namespace (or null if the name is not found). This method does
            not increment the Python refcount of the returned object.
            </summary>
        </member>
        <member name="M:Python.Runtime.ModuleObject.StoreAttribute(System.String,Python.Runtime.ManagedType)">
            <summary>
            Stores an attribute in the instance dict for future lookups.
            </summary>
        </member>
        <member name="M:Python.Runtime.ModuleObject.LoadNames">
            <summary>
            Preloads all currently-known names for the module namespace. This
            can be called multiple times, to add names from assemblies that
            may have been loaded since the last call to the method.
            </summary>
        </member>
        <member name="M:Python.Runtime.ModuleObject.SafeLoadNames">
            <summary>
            Preload all names with error handling
            </summary>
            <returns>returns true if successful</returns>
        </member>
        <member name="M:Python.Runtime.ModuleObject.InitializeModuleMembers">
            <summary>
            Initialize module level functions and attributes
            </summary>
        </member>
        <member name="M:Python.Runtime.ModuleObject.tp_getattro(System.IntPtr,System.IntPtr)">
            <summary>
            ModuleObject __getattribute__ implementation. Module attributes
            are always either classes or sub-modules representing subordinate
            namespaces. CLR modules implement a lazy pattern - the sub-modules
            and classes are created when accessed and cached for future use.
            </summary>
        </member>
        <member name="M:Python.Runtime.ModuleObject.tp_repr(System.IntPtr)">
            <summary>
            ModuleObject __repr__ implementation.
            </summary>
        </member>
        <member name="T:Python.Runtime.CLRModule">
            <summary>
            The CLR module is the root handler used by the magic import hook
            to import assemblies. It has a fixed module name "clr" and doesn't
            provide a namespace.
            </summary>
        </member>
        <member name="M:Python.Runtime.CLRModule.InitializePreload">
            <summary>
            The initializing of the preload hook has to happen as late as
            possible since sys.ps1 is created after the CLR module is
            created.
            </summary>
        </member>
        <member name="M:Python.Runtime.CLRModule.GetClrType(System.Type)">
            <summary>
            Get a Type instance for a class object.
            clr.GetClrType(IComparable) gives you the Type for IComparable,
            that you can e.g. perform reflection on. Similar to typeof(IComparable) in C#
            or clr.GetClrType(IComparable) in IronPython.
            
            </summary>
            <param name="type"></param>
            <returns>The Type object</returns>
        </member>
        <member name="T:Python.Runtime.ModulePropertyObject">
            <summary>
            Module level properties (attributes)
            </summary>
        </member>
        <member name="T:Python.Runtime.NativeCall">
            <summary>
            Provides support for calling native code indirectly through
            function pointers. Most of the important parts of the Python
            C API can just be wrapped with p/invoke, but there are some
            situations (specifically, calling functions through Python
            type structures) where we need to call functions indirectly.
            This class uses Reflection.Emit to generate IJW thunks that
            support indirect calls to native code using various common
            call signatures. This is mainly a workaround for the fact
            that you can't spell an indirect call in C# (but can in IL).
            Another approach that would work is for this to be turned
            into a separate utility program that could be run during the
            build process to generate the thunks as a separate assembly
            that could then be referenced by the main Python runtime.
            </summary>
        </member>
        <member name="T:Python.Runtime.INativeCall">
            <summary>
            Defines native call signatures to be generated by NativeCall.
            </summary>
        </member>
        <member name="T:Python.Runtime.NewReference">
            <summary>
            Represents a reference to a Python object, that is tracked by Python's reference counting.
            </summary>
        </member>
        <member name="M:Python.Runtime.NewReference.MoveToPyObject">
            <summary>
            Returns <see cref="T:Python.Runtime.PyObject"/> wrapper around this reference, which now owns
            the pointer. Sets the original reference to <c>null</c>, as it no longer owns it.
            </summary>
        </member>
        <member name="M:Python.Runtime.NewReference.Dispose">
            <summary>
            Removes this reference to a Python object, and sets it to <c>null</c>.
            </summary>
        </member>
        <member name="M:Python.Runtime.NewReference.DangerousFromPointer(System.IntPtr)">
            <summary>
            Creates <see cref="T:Python.Runtime.NewReference"/> from a raw pointer
            </summary>
        </member>
        <member name="T:Python.Runtime.NewReferenceExtensions">
            <summary>
            These members can not be directly in <see cref="T:Python.Runtime.NewReference"/> type,
            because <c>this</c> is always passed by value, which we need to avoid.
            (note <code>this in NewReference</code> vs the usual <code>this NewReference</code>)
            </summary>
        </member>
        <member name="M:Python.Runtime.NewReferenceExtensions.DangerousGetAddress(Python.Runtime.NewReference@)">
            <summary>Gets a raw pointer to the Python object</summary>
        </member>
        <member name="T:Python.Runtime.OverloadMapper">
            <summary>
            Implements the __overloads__ attribute of method objects. This object
            supports the [] syntax to explicitly select an overload by signature.
            </summary>
        </member>
        <member name="M:Python.Runtime.OverloadMapper.mp_subscript(System.IntPtr,System.IntPtr)">
            <summary>
            Implement explicit overload selection using subscript syntax ([]).
            </summary>
        </member>
        <member name="M:Python.Runtime.OverloadMapper.tp_repr(System.IntPtr)">
            <summary>
            OverloadMapper  __repr__ implementation.
            </summary>
        </member>
        <member name="M:Python.Runtime.OverloadMapper.tp_dealloc(System.IntPtr)">
            <summary>
            OverloadMapper dealloc implementation.
            </summary>
        </member>
        <member name="T:Python.Runtime.ParameterBindingData">
            <summary>
            Contains information regarding the binding of an argument to a method parameter.
            </summary>
        </member>
        <member name="P:Python.Runtime.ParameterBindingData.Value">
            <summary>
            Value resolved for this parameter binding
            </summary>
        </member>
        <member name="P:Python.Runtime.ParameterBindingData.IsDefaultValue">
            <summary>
            Whether the parameter binding is using a default value
            </summary>
        </member>
        <member name="P:Python.Runtime.ParameterBindingData.ArgPtr">
            <summary>
            Pointer to the actual argument
            </summary>
        </member>
        <member name="P:Python.Runtime.ParameterBindingData.ArgType">
            <summary>
            .NET type representing the type of the actual argument
            </summary>
        </member>
        <member name="P:Python.Runtime.ParameterBindingData.DeclaredType">
            <summary>
            Declared type of the bound argument
            </summary>
        </member>
        <member name="P:Python.Runtime.ParameterBindingData.DoTypesMatch">
            <summary>
            Whether the types of the declared and provided argument match, when compared as
            Python types.
            </summary>
        </member>
        <member name="P:Python.Runtime.ParameterBindingData.IsNewReference">
            <summary>
            Used to keep track of references to unmanaged resources that should be released
            </summary>
        </member>
        <member name="T:Python.Runtime.Platform.OperatingSystemType">
            <summary>
            Operating system type as reported by Python.
            </summary>
        </member>
        <member name="T:Python.Runtime.PropertyObject">
            <summary>
            Implements a Python descriptor type that manages CLR properties.
            </summary>
        </member>
        <member name="M:Python.Runtime.PropertyObject.tp_descr_get(System.IntPtr,System.IntPtr,System.IntPtr)">
            <summary>
            Descriptor __get__ implementation. This method returns the
            value of the property on the given object. The returned value
            is converted to an appropriately typed Python object.
            </summary>
        </member>
        <member name="M:Python.Runtime.PropertyObject.tp_descr_set(System.IntPtr,System.IntPtr,System.IntPtr)">
            <summary>
            Descriptor __set__ implementation. This method sets the value of
            a property based on the given Python value. The Python value must
            be convertible to the type of the property.
            </summary>
        </member>
        <member name="M:Python.Runtime.PropertyObject.tp_repr(System.IntPtr)">
            <summary>
            Descriptor __repr__ implementation.
            </summary>
        </member>
        <member name="M:Python.Runtime.PyAnsiString.#ctor(System.IntPtr)">
            <summary>
            PyAnsiString Constructor
            </summary>
            <remarks>
            Creates a new PyAnsiString from an existing object reference. Note
            that the instance assumes ownership of the object reference.
            The object reference is not checked for type-correctness.
            </remarks>
        </member>
        <member name="M:Python.Runtime.PyAnsiString.#ctor(Python.Runtime.PyObject)">
            <summary>
            PyString Constructor
            </summary>
            <remarks>
            Copy constructor - obtain a PyAnsiString from a generic PyObject.
            An ArgumentException will be thrown if the given object is not
            a Python string object.
            </remarks>
        </member>
        <member name="M:Python.Runtime.PyAnsiString.#ctor(System.String)">
            <summary>
            PyAnsiString Constructor
            </summary>
            <remarks>
            Creates a Python string from a managed string.
            </remarks>
        </member>
        <member name="M:Python.Runtime.PyAnsiString.IsStringType(Python.Runtime.PyObject)">
            <summary>
            IsStringType Method
            </summary>
            <remarks>
            Returns true if the given object is a Python string.
            </remarks>
        </member>
        <member name="T:Python.Runtime.PyDict">
            <summary>
            Represents a Python dictionary object. See the documentation at
            PY2: https://docs.python.org/2/c-api/dict.html
            PY3: https://docs.python.org/3/c-api/dict.html
            for details.
            </summary>
        </member>
        <member name="M:Python.Runtime.PyDict.#ctor(System.IntPtr)">
            <summary>
            PyDict Constructor
            </summary>
            <remarks>
            Creates a new PyDict from an existing object reference. Note
            that the instance assumes ownership of the object reference.
            The object reference is not checked for type-correctness.
            </remarks>
        </member>
        <member name="M:Python.Runtime.PyDict.#ctor">
            <summary>
            PyDict Constructor
            </summary>
            <remarks>
            Creates a new Python dictionary object.
            </remarks>
        </member>
        <member name="M:Python.Runtime.PyDict.#ctor(Python.Runtime.PyObject)">
            <summary>
            PyDict Constructor
            </summary>
            <remarks>
            Copy constructor - obtain a PyDict from a generic PyObject. An
            ArgumentException will be thrown if the given object is not a
            Python dictionary object.
            </remarks>
        </member>
        <member name="M:Python.Runtime.PyDict.IsDictType(Python.Runtime.PyObject)">
            <summary>
            IsDictType Method
            </summary>
            <remarks>
            Returns true if the given object is a Python dictionary.
            </remarks>
        </member>
        <member name="M:Python.Runtime.PyDict.HasKey(Python.Runtime.PyObject)">
            <summary>
            HasKey Method
            </summary>
            <remarks>
            Returns true if the object key appears in the dictionary.
            </remarks>
        </member>
        <member name="M:Python.Runtime.PyDict.HasKey(System.String)">
            <summary>
            HasKey Method
            </summary>
            <remarks>
            Returns true if the string key appears in the dictionary.
            </remarks>
        </member>
        <member name="M:Python.Runtime.PyDict.Keys">
            <summary>
            Keys Method
            </summary>
            <remarks>
            Returns a sequence containing the keys of the dictionary.
            </remarks>
        </member>
        <member name="M:Python.Runtime.PyDict.Values">
            <summary>
            Values Method
            </summary>
            <remarks>
            Returns a sequence containing the values of the dictionary.
            </remarks>
        </member>
        <member name="M:Python.Runtime.PyDict.Items">
            <summary>
            Items Method
            </summary>
            <remarks>
            Returns a sequence containing the items of the dictionary.
            </remarks>
        </member>
        <member name="M:Python.Runtime.PyDict.Copy">
            <summary>
            Copy Method
            </summary>
            <remarks>
            Returns a copy of the dictionary.
            </remarks>
        </member>
        <member name="M:Python.Runtime.PyDict.Update(Python.Runtime.PyObject)">
            <summary>
            Update Method
            </summary>
            <remarks>
            Update the dictionary from another dictionary.
            </remarks>
        </member>
        <member name="M:Python.Runtime.PyDict.Clear">
            <summary>
            Clear Method
            </summary>
            <remarks>
            Clears the dictionary.
            </remarks>
        </member>
        <member name="M:Python.Runtime.PyDict.ToDictionary">
            <summary>
            ToDictionary Method
            </summary>
            <remarks>
            Converts the Python dict into a non-generic .NET dictionary
            </remarks>
        </member>
        <member name="M:Python.Runtime.PyDict.ToDictionary``1">
            <summary>
            ToDictionary&lt;T&gt; Method
            </summary>
            <remarks>
            Converts the Python dict into a generic .NET dictionary
            </remarks>
            <typeparam name="T">Dictionary type with generic type arguments</typeparam>
        </member>
        <member name="T:Python.Runtime.PyExportAttribute">
            <summary>
            Controls visibility to Python for public .NET type or an entire assembly
            </summary>
        </member>
        <member name="T:Python.Runtime.PyFloat">
            <summary>
            Represents a Python float object. See the documentation at
            PY2: https://docs.python.org/2/c-api/float.html
            PY3: https://docs.python.org/3/c-api/float.html
            for details.
            </summary>
        </member>
        <member name="M:Python.Runtime.PyFloat.#ctor(System.IntPtr)">
            <summary>
            PyFloat Constructor
            </summary>
            <remarks>
            Creates a new PyFloat from an existing object reference. Note
            that the instance assumes ownership of the object reference.
            The object reference is not checked for type-correctness.
            </remarks>
        </member>
        <member name="M:Python.Runtime.PyFloat.#ctor(Python.Runtime.PyObject)">
            <summary>
            PyFloat Constructor
            </summary>
            <remarks>
            Copy constructor - obtain a PyFloat from a generic PyObject. An
            ArgumentException will be thrown if the given object is not a
            Python float object.
            </remarks>
        </member>
        <member name="M:Python.Runtime.PyFloat.#ctor(System.Double)">
            <summary>
            PyFloat Constructor
            </summary>
            <remarks>
            Creates a new Python float from a double value.
            </remarks>
        </member>
        <member name="M:Python.Runtime.PyFloat.#ctor(System.String)">
            <summary>
            PyFloat Constructor
            </summary>
            <remarks>
            Creates a new Python float from a string value.
            </remarks>
        </member>
        <member name="M:Python.Runtime.PyFloat.IsFloatType(Python.Runtime.PyObject)">
            <summary>
            IsFloatType Method
            </summary>
            <remarks>
            Returns true if the given object is a Python float.
            </remarks>
        </member>
        <member name="M:Python.Runtime.PyFloat.AsFloat(Python.Runtime.PyObject)">
            <summary>
            AsFloat Method
            </summary>
            <remarks>
            Convert a Python object to a Python float if possible, raising
            a PythonException if the conversion is not possible. This is
            equivalent to the Python expression "float(object)".
            </remarks>
        </member>
        <member name="T:Python.Runtime.PyInt">
            <summary>
            Represents a Python integer object. See the documentation at
            PY2: https://docs.python.org/2/c-api/int.html
            PY3: No equivalent
            for details.
            </summary>
        </member>
        <member name="M:Python.Runtime.PyInt.#ctor(System.IntPtr)">
            <summary>
            PyInt Constructor
            </summary>
            <remarks>
            Creates a new PyInt from an existing object reference. Note
            that the instance assumes ownership of the object reference.
            The object reference is not checked for type-correctness.
            </remarks>
        </member>
        <member name="M:Python.Runtime.PyInt.#ctor(Python.Runtime.PyObject)">
            <summary>
            PyInt Constructor
            </summary>
            <remarks>
            Copy constructor - obtain a PyInt from a generic PyObject. An
            ArgumentException will be thrown if the given object is not a
            Python int object.
            </remarks>
        </member>
        <member name="M:Python.Runtime.PyInt.#ctor(System.Int32)">
            <summary>
            PyInt Constructor
            </summary>
            <remarks>
            Creates a new Python int from an int32 value.
            </remarks>
        </member>
        <member name="M:Python.Runtime.PyInt.#ctor(System.UInt32)">
            <summary>
            PyInt Constructor
            </summary>
            <remarks>
            Creates a new Python int from a uint32 value.
            </remarks>
        </member>
        <member name="M:Python.Runtime.PyInt.#ctor(System.Int64)">
            <summary>
            PyInt Constructor
            </summary>
            <remarks>
            Creates a new Python int from an int64 value.
            </remarks>
        </member>
        <member name="M:Python.Runtime.PyInt.#ctor(System.UInt64)">
            <summary>
            PyInt Constructor
            </summary>
            <remarks>
            Creates a new Python int from a uint64 value.
            </remarks>
        </member>
        <member name="M:Python.Runtime.PyInt.#ctor(System.Int16)">
            <summary>
            PyInt Constructor
            </summary>
            <remarks>
            Creates a new Python int from an int16 value.
            </remarks>
        </member>
        <member name="M:Python.Runtime.PyInt.#ctor(System.UInt16)">
            <summary>
            PyInt Constructor
            </summary>
            <remarks>
            Creates a new Python int from a uint16 value.
            </remarks>
        </member>
        <member name="M:Python.Runtime.PyInt.#ctor(System.Byte)">
            <summary>
            PyInt Constructor
            </summary>
            <remarks>
            Creates a new Python int from a byte value.
            </remarks>
        </member>
        <member name="M:Python.Runtime.PyInt.#ctor(System.SByte)">
            <summary>
            PyInt Constructor
            </summary>
            <remarks>
            Creates a new Python int from an sbyte value.
            </remarks>
        </member>
        <member name="M:Python.Runtime.PyInt.#ctor(System.String)">
            <summary>
            PyInt Constructor
            </summary>
            <remarks>
            Creates a new Python int from a string value.
            </remarks>
        </member>
        <member name="M:Python.Runtime.PyInt.IsIntType(Python.Runtime.PyObject)">
            <summary>
            IsIntType Method
            </summary>
            <remarks>
            Returns true if the given object is a Python int.
            </remarks>
        </member>
        <member name="M:Python.Runtime.PyInt.AsInt(Python.Runtime.PyObject)">
            <summary>
            AsInt Method
            </summary>
            <remarks>
            Convert a Python object to a Python int if possible, raising
            a PythonException if the conversion is not possible. This is
            equivalent to the Python expression "int(object)".
            </remarks>
        </member>
        <member name="M:Python.Runtime.PyInt.ToInt16">
            <summary>
            ToInt16 Method
            </summary>
            <remarks>
            Return the value of the Python int object as an int16.
            </remarks>
        </member>
        <member name="M:Python.Runtime.PyInt.ToInt32">
            <summary>
            ToInt32 Method
            </summary>
            <remarks>
            Return the value of the Python int object as an int32.
            </remarks>
        </member>
        <member name="M:Python.Runtime.PyInt.ToInt64">
            <summary>
            ToInt64 Method
            </summary>
            <remarks>
            Return the value of the Python int object as an int64.
            </remarks>
        </member>
        <member name="T:Python.Runtime.PyIter">
            <summary>
            Represents a standard Python iterator object. See the documentation at
            PY2: https://docs.python.org/2/c-api/iterator.html
            PY3: https://docs.python.org/3/c-api/iterator.html
            for details.
            </summary>
        </member>
        <member name="M:Python.Runtime.PyIter.#ctor(System.IntPtr)">
            <summary>
            PyIter Constructor
            </summary>
            <remarks>
            Creates a new PyIter from an existing iterator reference. Note
            that the instance assumes ownership of the object reference.
            The object reference is not checked for type-correctness.
            </remarks>
        </member>
        <member name="M:Python.Runtime.PyIter.#ctor(Python.Runtime.PyObject)">
            <summary>
            PyIter Constructor
            </summary>
            <remarks>
            Creates a Python iterator from an iterable. Like doing "iter(iterable)" in python.
            </remarks>
        </member>
        <member name="M:Python.Runtime.PyIter.IsIterable(Python.Runtime.PyObject)">
            <summary>
            IsIterable Method
            </summary>
            <remarks>
            Returns true if the given object implements the iterator protocol.
            </remarks>
        </member>
        <member name="T:Python.Runtime.PyList">
            <summary>
            Represents a standard Python list object. See the documentation at
            PY2: https://docs.python.org/2/c-api/list.html
            PY3: https://docs.python.org/3/c-api/list.html
            for details.
            </summary>
        </member>
        <member name="M:Python.Runtime.PyList.#ctor(System.IntPtr)">
            <summary>
            PyList Constructor
            </summary>
            <remarks>
            Creates a new PyList from an existing object reference. Note
            that the instance assumes ownership of the object reference.
            The object reference is not checked for type-correctness.
            </remarks>
        </member>
        <member name="M:Python.Runtime.PyList.#ctor(Python.Runtime.PyObject)">
            <summary>
            PyList Constructor
            </summary>
            <remarks>
            Copy constructor - obtain a PyList from a generic PyObject. An
            ArgumentException will be thrown if the given object is not a
            Python list object.
            </remarks>
        </member>
        <member name="M:Python.Runtime.PyList.#ctor">
            <summary>
            PyList Constructor
            </summary>
            <remarks>
            Creates a new empty Python list object.
            </remarks>
        </member>
        <member name="M:Python.Runtime.PyList.#ctor(Python.Runtime.PyObject[])">
            <summary>
            PyList Constructor
            </summary>
            <remarks>
            Creates a new Python list object from an array of PyObjects.
            </remarks>
        </member>
        <member name="M:Python.Runtime.PyList.IsListType(Python.Runtime.PyObject)">
            <summary>
            IsListType Method
            </summary>
            <remarks>
            Returns true if the given object is a Python list.
            </remarks>
        </member>
        <member name="M:Python.Runtime.PyList.AsList(Python.Runtime.PyObject)">
            <summary>
            AsList Method
            </summary>
            <remarks>
            Converts a Python object to a Python list if possible, raising
            a PythonException if the conversion is not possible. This is
            equivalent to the Python expression "list(object)".
            </remarks>
        </member>
        <member name="M:Python.Runtime.PyList.Append(Python.Runtime.PyObject)">
            <summary>
            Append Method
            </summary>
            <remarks>
            Append an item to the list object.
            </remarks>
        </member>
        <member name="M:Python.Runtime.PyList.Insert(System.Int32,Python.Runtime.PyObject)">
            <summary>
            Insert Method
            </summary>
            <remarks>
            Insert an item in the list object at the given index.
            </remarks>
        </member>
        <member name="M:Python.Runtime.PyList.Reverse">
            <summary>
            Reverse Method
            </summary>
            <remarks>
            Reverse the order of the list object in place.
            </remarks>
        </member>
        <member name="M:Python.Runtime.PyList.Sort">
            <summary>
            Sort Method
            </summary>
            <remarks>
            Sort the list in place.
            </remarks>
        </member>
        <member name="T:Python.Runtime.PyLong">
            <summary>
            Represents a Python long int object. See the documentation at
            PY2: https://docs.python.org/2/c-api/long.html
            PY3: https://docs.python.org/3/c-api/long.html
            for details.
            </summary>
        </member>
        <member name="M:Python.Runtime.PyLong.#ctor(System.IntPtr)">
            <summary>
            PyLong Constructor
            </summary>
            <remarks>
            Creates a new PyLong from an existing object reference. Note
            that the instance assumes ownership of the object reference.
            The object reference is not checked for type-correctness.
            </remarks>
        </member>
        <member name="M:Python.Runtime.PyLong.#ctor(Python.Runtime.PyObject)">
            <summary>
            PyLong Constructor
            </summary>
            <remarks>
            Copy constructor - obtain a PyLong from a generic PyObject. An
            ArgumentException will be thrown if the given object is not a
            Python long object.
            </remarks>
        </member>
        <member name="M:Python.Runtime.PyLong.#ctor(System.Int32)">
            <summary>
            PyLong Constructor
            </summary>
            <remarks>
            Creates a new PyLong from an int32 value.
            </remarks>
        </member>
        <member name="M:Python.Runtime.PyLong.#ctor(System.UInt32)">
            <summary>
            PyLong Constructor
            </summary>
            <remarks>
            Creates a new PyLong from a uint32 value.
            </remarks>
        </member>
        <member name="M:Python.Runtime.PyLong.#ctor(System.Int64)">
            <summary>
            PyLong Constructor
            </summary>
            <remarks>
            Creates a new PyLong from an int64 value.
            </remarks>
        </member>
        <member name="M:Python.Runtime.PyLong.#ctor(System.UInt64)">
            <summary>
            PyLong Constructor
            </summary>
            <remarks>
            Creates a new PyLong from a uint64 value.
            </remarks>
        </member>
        <member name="M:Python.Runtime.PyLong.#ctor(System.Int16)">
            <summary>
            PyLong Constructor
            </summary>
            <remarks>
            Creates a new PyLong from an int16 value.
            </remarks>
        </member>
        <member name="M:Python.Runtime.PyLong.#ctor(System.UInt16)">
            <summary>
            PyLong Constructor
            </summary>
            <remarks>
            Creates a new PyLong from an uint16 value.
            </remarks>
        </member>
        <member name="M:Python.Runtime.PyLong.#ctor(System.Byte)">
            <summary>
            PyLong Constructor
            </summary>
            <remarks>
            Creates a new PyLong from a byte value.
            </remarks>
        </member>
        <member name="M:Python.Runtime.PyLong.#ctor(System.SByte)">
            <summary>
            PyLong Constructor
            </summary>
            <remarks>
            Creates a new PyLong from an sbyte value.
            </remarks>
        </member>
        <member name="M:Python.Runtime.PyLong.#ctor(System.Double)">
            <summary>
            PyLong Constructor
            </summary>
            <remarks>
            Creates a new PyLong from an double value.
            </remarks>
        </member>
        <member name="M:Python.Runtime.PyLong.#ctor(System.String)">
            <summary>
            PyLong Constructor
            </summary>
            <remarks>
            Creates a new PyLong from a string value.
            </remarks>
        </member>
        <member name="M:Python.Runtime.PyLong.IsLongType(Python.Runtime.PyObject)">
            <summary>
            IsLongType Method
            </summary>
            <remarks>
            Returns true if the given object is a Python long.
            </remarks>
        </member>
        <member name="M:Python.Runtime.PyLong.AsLong(Python.Runtime.PyObject)">
            <summary>
            AsLong Method
            </summary>
            <remarks>
            Convert a Python object to a Python long if possible, raising
            a PythonException if the conversion is not possible. This is
            equivalent to the Python expression "long(object)".
            </remarks>
        </member>
        <member name="M:Python.Runtime.PyLong.ToInt16">
            <summary>
            ToInt16 Method
            </summary>
            <remarks>
            Return the value of the Python long object as an int16.
            </remarks>
        </member>
        <member name="M:Python.Runtime.PyLong.ToInt32">
            <summary>
            ToInt32 Method
            </summary>
            <remarks>
            Return the value of the Python long object as an int32.
            </remarks>
        </member>
        <member name="M:Python.Runtime.PyLong.ToInt64">
            <summary>
            ToInt64 Method
            </summary>
            <remarks>
            Return the value of the Python long object as an int64.
            </remarks>
        </member>
        <member name="M:Python.Runtime.PyLong.ToBigInteger">
            <summary>
            ToInt64 Method
            </summary>
            <remarks>
            Return the value of the Python long object as an int64.
            </remarks>
        </member>
        <member name="T:Python.Runtime.PyNumber">
            <summary>
            Represents a generic Python number. The methods of this class are
            equivalent to the Python "abstract number API". See
            PY2: https://docs.python.org/2/c-api/number.html
            PY3: https://docs.python.org/3/c-api/number.html
            for details.
            </summary>
            <remarks>
            TODO: add all of the PyNumber_XXX methods.
            </remarks>
        </member>
        <member name="M:Python.Runtime.PyNumber.IsNumberType(Python.Runtime.PyObject)">
            <summary>
            IsNumberType Method
            </summary>
            <remarks>
            Returns true if the given object is a Python numeric type.
            </remarks>
        </member>
        <member name="T:Python.Runtime.PyObject">
            <summary>
            Represents a generic Python object. The methods of this class are
            generally equivalent to the Python "abstract object API". See
            PY2: https://docs.python.org/2/c-api/object.html
            PY3: https://docs.python.org/3/c-api/object.html
            for details.
            </summary>
        </member>
        <member name="M:Python.Runtime.PyObject.#ctor(System.IntPtr)">
            <summary>
            PyObject Constructor
            </summary>
            <remarks>
            Creates a new PyObject from an IntPtr object reference. Note that
            the PyObject instance assumes ownership of the object reference
            and the reference will be DECREFed when the PyObject is garbage
            collected or explicitly disposed.
            </remarks>
        </member>
        <member name="M:Python.Runtime.PyObject.#ctor(Python.Runtime.BorrowedReference)">
            <summary>
            Creates new <see cref="T:Python.Runtime.PyObject"/> pointing to the same object as
            the <paramref name="reference"/>. Increments refcount, allowing <see cref="T:Python.Runtime.PyObject"/>
            to have ownership over its own reference.
            </summary>
        </member>
        <member name="P:Python.Runtime.PyObject.Handle">
            <summary>
            Handle Property
            </summary>
            <remarks>
            Gets the native handle of the underlying Python object. This
            value is generally for internal use by the PythonNet runtime.
            </remarks>
        </member>
        <member name="M:Python.Runtime.PyObject.FromManagedObject(System.Object)">
            <summary>
            Gets raw Python proxy for this object (bypasses all conversions,
            except <c>null</c> &lt;==&gt; <c>None</c>)
            </summary>
            <remarks>
            Given an arbitrary managed object, return a Python instance that
            reflects the managed object.
            </remarks>
        </member>
        <member name="M:Python.Runtime.PyObject.AsManagedObject(System.Type)">
            <summary>
            AsManagedObject Method
            </summary>
            <remarks>
            Return a managed object of the given type, based on the
            value of the Python object.
            </remarks>
        </member>
        <member name="M:Python.Runtime.PyObject.As``1">
            <summary>
            As Method
            </summary>
            <remarks>
            Return a managed object of the given type, based on the
            value of the Python object.
            </remarks>
        </member>
        <member name="M:Python.Runtime.PyObject.Dispose(System.Boolean)">
            <summary>
            Dispose Method
            </summary>
            <remarks>
            The Dispose method provides a way to explicitly release the
            Python object represented by a PyObject instance. It is a good
            idea to call Dispose on PyObjects that wrap resources that are
            limited or need strict lifetime control. Otherwise, references
            to Python objects will not be released until a managed garbage
            collection occurs.
            </remarks>
        </member>
        <member name="M:Python.Runtime.PyObject.GetPythonType">
            <summary>
            GetPythonType Method
            </summary>
            <remarks>
            Returns the Python type of the object. This method is equivalent
            to the Python expression: type(object).
            </remarks>
        </member>
        <member name="M:Python.Runtime.PyObject.TypeCheck(Python.Runtime.PyObject)">
            <summary>
            TypeCheck Method
            </summary>
            <remarks>
            Returns true if the object o is of type typeOrClass or a subtype
            of typeOrClass.
            </remarks>
        </member>
        <member name="M:Python.Runtime.PyObject.HasAttr(System.String)">
            <summary>
            HasAttr Method
            </summary>
            <remarks>
            Returns true if the object has an attribute with the given name.
            </remarks>
        </member>
        <member name="M:Python.Runtime.PyObject.HasAttr(Python.Runtime.PyObject)">
            <summary>
            HasAttr Method
            </summary>
            <remarks>
            Returns true if the object has an attribute with the given name,
            where name is a PyObject wrapping a string or unicode object.
            </remarks>
        </member>
        <member name="M:Python.Runtime.PyObject.GetAttr(System.String)">
            <summary>
            GetAttr Method
            </summary>
            <remarks>
            Returns the named attribute of the Python object, or raises a
            PythonException if the attribute access fails.
            </remarks>
        </member>
        <member name="M:Python.Runtime.PyObject.GetAttr(System.String,Python.Runtime.PyObject)">
            <summary>
            GetAttr Method. Returns fallback value if getting attribute fails for any reason.
            </summary>
            <remarks>
            Returns the named attribute of the Python object, or the given
            default object if the attribute access fails.
            </remarks>
        </member>
        <member name="M:Python.Runtime.PyObject.GetAttr(Python.Runtime.PyObject)">
            <summary>
            GetAttr Method
            </summary>
            <remarks>
            Returns the named attribute of the Python object or raises a
            PythonException if the attribute access fails. The name argument
            is a PyObject wrapping a Python string or unicode object.
            </remarks>
        </member>
        <member name="M:Python.Runtime.PyObject.GetAttr(Python.Runtime.PyObject,Python.Runtime.PyObject)">
            <summary>
            GetAttr Method
            </summary>
            <remarks>
            Returns the named attribute of the Python object, or the given
            default object if the attribute access fails. The name argument
            is a PyObject wrapping a Python string or unicode object.
            </remarks>
        </member>
        <member name="M:Python.Runtime.PyObject.SetAttr(System.String,Python.Runtime.PyObject)">
            <summary>
            SetAttr Method
            </summary>
            <remarks>
            Set an attribute of the object with the given name and value. This
            method throws a PythonException if the attribute set fails.
            </remarks>
        </member>
        <member name="M:Python.Runtime.PyObject.SetAttr(Python.Runtime.PyObject,Python.Runtime.PyObject)">
            <summary>
            SetAttr Method
            </summary>
            <remarks>
            Set an attribute of the object with the given name and value,
            where the name is a Python string or unicode object. This method
            throws a PythonException if the attribute set fails.
            </remarks>
        </member>
        <member name="M:Python.Runtime.PyObject.DelAttr(System.String)">
            <summary>
            DelAttr Method
            </summary>
            <remarks>
            Delete the named attribute of the Python object. This method
            throws a PythonException if the attribute set fails.
            </remarks>
        </member>
        <member name="M:Python.Runtime.PyObject.DelAttr(Python.Runtime.PyObject)">
            <summary>
            DelAttr Method
            </summary>
            <remarks>
            Delete the named attribute of the Python object, where name is a
            PyObject wrapping a Python string or unicode object. This method
            throws a PythonException if the attribute set fails.
            </remarks>
        </member>
        <member name="M:Python.Runtime.PyObject.GetItem(Python.Runtime.PyObject)">
            <summary>
            GetItem Method
            </summary>
            <remarks>
            For objects that support the Python sequence or mapping protocols,
            return the item at the given object index. This method raises a
            PythonException if the indexing operation fails.
            </remarks>
        </member>
        <member name="M:Python.Runtime.PyObject.GetItem(System.String)">
            <summary>
            GetItem Method
            </summary>
            <remarks>
            For objects that support the Python sequence or mapping protocols,
            return the item at the given string index. This method raises a
            PythonException if the indexing operation fails.
            </remarks>
        </member>
        <member name="M:Python.Runtime.PyObject.GetItem(System.Int32)">
            <summary>
            GetItem Method
            </summary>
            <remarks>
            For objects that support the Python sequence or mapping protocols,
            return the item at the given numeric index. This method raises a
            PythonException if the indexing operation fails.
            </remarks>
        </member>
        <member name="M:Python.Runtime.PyObject.SetItem(Python.Runtime.PyObject,Python.Runtime.PyObject)">
            <summary>
            SetItem Method
            </summary>
            <remarks>
            For objects that support the Python sequence or mapping protocols,
            set the item at the given object index to the given value. This
            method raises a PythonException if the set operation fails.
            </remarks>
        </member>
        <member name="M:Python.Runtime.PyObject.SetItem(System.String,Python.Runtime.PyObject)">
            <summary>
            SetItem Method
            </summary>
            <remarks>
            For objects that support the Python sequence or mapping protocols,
            set the item at the given string index to the given value. This
            method raises a PythonException if the set operation fails.
            </remarks>
        </member>
        <member name="M:Python.Runtime.PyObject.SetItem(System.Int32,Python.Runtime.PyObject)">
            <summary>
            SetItem Method
            </summary>
            <remarks>
            For objects that support the Python sequence or mapping protocols,
            set the item at the given numeric index to the given value. This
            method raises a PythonException if the set operation fails.
            </remarks>
        </member>
        <member name="M:Python.Runtime.PyObject.DelItem(Python.Runtime.PyObject)">
            <summary>
            DelItem Method
            </summary>
            <remarks>
            For objects that support the Python sequence or mapping protocols,
            delete the item at the given object index. This method raises a
            PythonException if the delete operation fails.
            </remarks>
        </member>
        <member name="M:Python.Runtime.PyObject.DelItem(System.String)">
            <summary>
            DelItem Method
            </summary>
            <remarks>
            For objects that support the Python sequence or mapping protocols,
            delete the item at the given string index. This method raises a
            PythonException if the delete operation fails.
            </remarks>
        </member>
        <member name="M:Python.Runtime.PyObject.DelItem(System.Int32)">
            <summary>
            DelItem Method
            </summary>
            <remarks>
            For objects that support the Python sequence or mapping protocols,
            delete the item at the given numeric index. This method raises a
            PythonException if the delete operation fails.
            </remarks>
        </member>
        <member name="M:Python.Runtime.PyObject.Length">
            <summary>
            Length Method
            </summary>
            <remarks>
            Returns the length for objects that support the Python sequence
            protocol, or 0 if the object does not support the protocol.
            </remarks>
        </member>
        <member name="P:Python.Runtime.PyObject.Item(System.String)">
            <summary>
            String Indexer
            </summary>
            <remarks>
            Provides a shorthand for the string versions of the GetItem and
            SetItem methods.
            </remarks>
        </member>
        <member name="P:Python.Runtime.PyObject.Item(Python.Runtime.PyObject)">
            <summary>
            PyObject Indexer
            </summary>
            <remarks>
            Provides a shorthand for the object versions of the GetItem and
            SetItem methods.
            </remarks>
        </member>
        <member name="P:Python.Runtime.PyObject.Item(System.Int32)">
            <summary>
            Numeric Indexer
            </summary>
            <remarks>
            Provides a shorthand for the numeric versions of the GetItem and
            SetItem methods.
            </remarks>
        </member>
        <member name="M:Python.Runtime.PyObject.GetIterator">
            <summary>
            GetIterator Method
            </summary>
            <remarks>
            Return a new (Python) iterator for the object. This is equivalent
            to the Python expression "iter(object)". A PythonException will be
            raised if the object cannot be iterated.
            </remarks>
        </member>
        <member name="M:Python.Runtime.PyObject.GetEnumerator">
            <summary>
            GetEnumerator Method
            </summary>
            <remarks>
            Return a new PyIter object for the object. This allows any iterable
            python object to be iterated over in C#. A PythonException will be
            raised if the object is not iterable.
            </remarks>
        </member>
        <member name="M:Python.Runtime.PyObject.Invoke(Python.Runtime.PyObject[])">
            <summary>
            Invoke Method
            </summary>
            <remarks>
            Invoke the callable object with the given arguments, passed as a
            PyObject[]. A PythonException is raised if the invocation fails.
            </remarks>
        </member>
        <member name="M:Python.Runtime.PyObject.Invoke(Python.Runtime.PyTuple)">
            <summary>
            Invoke Method
            </summary>
            <remarks>
            Invoke the callable object with the given arguments, passed as a
            Python tuple. A PythonException is raised if the invocation fails.
            </remarks>
        </member>
        <member name="M:Python.Runtime.PyObject.Invoke(Python.Runtime.PyObject[],Python.Runtime.PyDict)">
            <summary>
            Invoke Method
            </summary>
            <remarks>
            Invoke the callable object with the given positional and keyword
            arguments. A PythonException is raised if the invocation fails.
            </remarks>
        </member>
        <member name="M:Python.Runtime.PyObject.Invoke(Python.Runtime.PyTuple,Python.Runtime.PyDict)">
            <summary>
            Invoke Method
            </summary>
            <remarks>
            Invoke the callable object with the given positional and keyword
            arguments. A PythonException is raised if the invocation fails.
            </remarks>
        </member>
        <member name="M:Python.Runtime.PyObject.InvokeMethod(System.String,Python.Runtime.PyObject[])">
            <summary>
            InvokeMethod Method
            </summary>
            <remarks>
            Invoke the named method of the object with the given arguments.
            A PythonException is raised if the invocation is unsuccessful.
            </remarks>
        </member>
        <member name="M:Python.Runtime.PyObject.InvokeMethod(System.String,Python.Runtime.PyTuple)">
            <summary>
            InvokeMethod Method
            </summary>
            <remarks>
            Invoke the named method of the object with the given arguments.
            A PythonException is raised if the invocation is unsuccessful.
            </remarks>
        </member>
        <member name="M:Python.Runtime.PyObject.InvokeMethod(Python.Runtime.PyObject,Python.Runtime.PyObject[])">
            <summary>
            InvokeMethod Method
            </summary>
            <remarks>
            Invoke the named method of the object with the given arguments.
            A PythonException is raised if the invocation is unsuccessful.
            </remarks>
        </member>
        <member name="M:Python.Runtime.PyObject.InvokeMethod(Python.Runtime.PyObject,Python.Runtime.PyTuple)">
            <summary>
            InvokeMethod Method
            </summary>
            <remarks>
            Invoke the named method of the object with the given arguments.
            A PythonException is raised if the invocation is unsuccessful.
            </remarks>
        </member>
        <member name="M:Python.Runtime.PyObject.InvokeMethod(System.String,Python.Runtime.PyObject[],Python.Runtime.PyDict)">
            <summary>
            InvokeMethod Method
            </summary>
            <remarks>
            Invoke the named method of the object with the given arguments
            and keyword arguments. Keyword args are passed as a PyDict object.
            A PythonException is raised if the invocation is unsuccessful.
            </remarks>
        </member>
        <member name="M:Python.Runtime.PyObject.InvokeMethod(System.String,Python.Runtime.PyTuple,Python.Runtime.PyDict)">
            <summary>
            InvokeMethod Method
            </summary>
            <remarks>
            Invoke the named method of the object with the given arguments
            and keyword arguments. Keyword args are passed as a PyDict object.
            A PythonException is raised if the invocation is unsuccessful.
            </remarks>
        </member>
        <member name="M:Python.Runtime.PyObject.IsInstance(Python.Runtime.PyObject)">
            <summary>
            IsInstance Method
            </summary>
            <remarks>
            Return true if the object is an instance of the given Python type
            or class. This method always succeeds.
            </remarks>
        </member>
        <member name="M:Python.Runtime.PyObject.IsSubclass(Python.Runtime.PyObject)">
            <summary>
            IsSubclass Method
            </summary>
            <remarks>
            Return true if the object is identical to or derived from the
            given Python type or class. This method always succeeds.
            </remarks>
        </member>
        <member name="M:Python.Runtime.PyObject.IsCallable">
            <summary>
            IsCallable Method
            </summary>
            <remarks>
            Returns true if the object is a callable object. This method
            always succeeds.
            </remarks>
        </member>
        <member name="M:Python.Runtime.PyObject.IsIterable">
            <summary>
            IsIterable Method
            </summary>
            <remarks>
            Returns true if the object is iterable object. This method
            always succeeds.
            </remarks>
        </member>
        <member name="M:Python.Runtime.PyObject.IsTrue">
            <summary>
            IsTrue Method
            </summary>
            <remarks>
            Return true if the object is true according to Python semantics.
            This method always succeeds.
            </remarks>
        </member>
        <member name="M:Python.Runtime.PyObject.IsNone">
            <summary>
            Return true if the object is None
            </summary>
        </member>
        <member name="M:Python.Runtime.PyObject.Dir">
            <summary>
            Dir Method
            </summary>
            <remarks>
            Return a list of the names of the attributes of the object. This
            is equivalent to the Python expression "dir(object)".
            </remarks>
        </member>
        <member name="M:Python.Runtime.PyObject.Repr">
            <summary>
            Repr Method
            </summary>
            <remarks>
            Return a string representation of the object. This method is
            the managed equivalent of the Python expression "repr(object)".
            </remarks>
        </member>
        <member name="M:Python.Runtime.PyObject.ToString">
            <summary>
            ToString Method
            </summary>
            <remarks>
            Return the string representation of the object. This method is
            the managed equivalent of the Python expression "str(object)".
            </remarks>
        </member>
        <member name="M:Python.Runtime.PyObject.Equals(System.Object)">
            <summary>
            Equals Method
            </summary>
            <remarks>
            Return true if this object is equal to the given object. This
            method is based on Python equality semantics.
            </remarks>
        </member>
        <member name="M:Python.Runtime.PyObject.GetHashCode">
            <summary>
            GetHashCode Method
            </summary>
            <remarks>
            Return a hashcode based on the Python object. This returns the
            hash as computed by Python, equivalent to the Python expression
            "hash(obj)".
            </remarks>
        </member>
        <member name="M:Python.Runtime.PyObject.GetDynamicMemberNames">
            <summary>
            Returns the enumeration of all dynamic member names.
            </summary>
            <remarks>
            This method exists for debugging purposes only.
            </remarks>
            <returns>A sequence that contains dynamic member names.</returns>
        </member>
        <member name="M:Python.Runtime.PyObject.GetManagedObject">
            <summary>
            GetManagedObject Method
            </summary>
            <remarks>
            Returns the underlying managed object wrapped by this or null
            if this is not a wrapper for a managed object
            </remarks>
        </member>
        <member name="T:Python.Runtime.PyGILAttribute">
            <summary>
            Classes/methods have this attribute must be used with GIL obtained.
            </summary>
        </member>
        <member name="F:Python.Runtime.PyScope.obj">
            <summary>
            the python Module object the scope associated with.
            </summary>
        </member>
        <member name="F:Python.Runtime.PyScope.variables">
            <summary>
            the variable dict of the scope.
            </summary>
        </member>
        <member name="F:Python.Runtime.PyScope.Manager">
            <summary>
            The Manager this scope associated with.
            It provides scopes this scope can import.
            </summary>
        </member>
        <member name="E:Python.Runtime.PyScope.OnDispose">
            <summary>
            event which will be triggered after the scope disposed.
            </summary>
        </member>
        <member name="M:Python.Runtime.PyScope.#ctor(System.IntPtr,Python.Runtime.PyScopeManager)">
            <summary>
            Constructor
            </summary>
            <remarks>
            Create a scope based on a Python Module.
            </remarks>
        </member>
        <member name="M:Python.Runtime.PyScope.Variables">
            <summary>
            return the variable dict of the scope.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Python.Runtime.PyScope.NewScope">
            <summary>
            Create a scope, and import all from this scope
            </summary>
            <returns></returns>
        </member>
        <member name="M:Python.Runtime.PyScope.Import(System.String,System.String)">
            <summary>
            Import method
            </summary>
            <remarks>
            Import a scope or a module of given name,
            scope will be looked up first.
            </remarks>
        </member>
        <member name="M:Python.Runtime.PyScope.Import(Python.Runtime.PyScope,System.String)">
            <summary>
            Import method
            </summary>
            <remarks>
            Import a scope as a variable of given name.
            </remarks>
        </member>
        <member name="M:Python.Runtime.PyScope.Import(Python.Runtime.PyObject,System.String)">
            <summary>
            Import Method
            </summary>
            <remarks>
            The 'import .. as ..' statement in Python.
            Import a module as a variable into the scope.
            </remarks>
        </member>
        <member name="M:Python.Runtime.PyScope.ImportAll(System.String)">
            <summary>
            ImportAll Method
            </summary>
            <remarks>
            The 'import * from ..' statement in Python.
            Import all content of a scope/module of given name into the scope, scope will be looked up first.
            </remarks>
        </member>
        <member name="M:Python.Runtime.PyScope.ImportAll(Python.Runtime.PyScope)">
            <summary>
            ImportAll Method
            </summary>
            <remarks>
            Import all variables of the scope into this scope.
            </remarks>
        </member>
        <member name="M:Python.Runtime.PyScope.ImportAll(Python.Runtime.PyObject)">
            <summary>
            ImportAll Method
            </summary>
            <remarks>
            Import all variables of the module into this scope.
            </remarks>
        </member>
        <member name="M:Python.Runtime.PyScope.ImportAll(Python.Runtime.PyDict)">
            <summary>
            ImportAll Method
            </summary>
            <remarks>
            Import all variables in the dictionary into this scope.
            </remarks>
        </member>
        <member name="M:Python.Runtime.PyScope.Execute(Python.Runtime.PyObject,Python.Runtime.PyDict)">
            <summary>
            Execute method
            </summary>
            <remarks>
            Execute a Python ast and return the result as a PyObject.
            The ast can be either an expression or stmts.
            </remarks>
        </member>
        <member name="M:Python.Runtime.PyScope.Execute``1(Python.Runtime.PyObject,Python.Runtime.PyDict)">
            <summary>
            Execute method
            </summary>
            <remarks>
            Execute a Python ast and return the result as a PyObject,
            and convert the result to a Managed Object of given type.
            The ast can be either an expression or stmts.
            </remarks>
        </member>
        <member name="M:Python.Runtime.PyScope.Eval(System.String,Python.Runtime.PyDict)">
            <summary>
            Eval method
            </summary>
            <remarks>
            Evaluate a Python expression and return the result as a PyObject
            or null if an exception is raised.
            </remarks>
        </member>
        <member name="M:Python.Runtime.PyScope.Eval``1(System.String,Python.Runtime.PyDict)">
            <summary>
            Evaluate a Python expression
            </summary>
            <remarks>
            Evaluate a Python expression
            and  convert the result to a Managed Object of given type.
            </remarks>
        </member>
        <member name="M:Python.Runtime.PyScope.Exec(System.String,Python.Runtime.PyDict)">
            <summary>
            Exec Method
            </summary>
            <remarks>
            Exec a Python script and save its local variables in the current local variable dict.
            </remarks>
        </member>
        <member name="M:Python.Runtime.PyScope.Set(System.String,System.Object)">
            <summary>
            Set Variable Method
            </summary>
            <remarks>
            Add a new variable to the variables dict if it not exist
            or update its value if the variable exists.
            </remarks>
        </member>
        <member name="M:Python.Runtime.PyScope.Remove(System.String)">
            <summary>
            Remove Method
            </summary>
            <remarks>
            Remove a variable from the variables dict.
            </remarks>
        </member>
        <member name="M:Python.Runtime.PyScope.Contains(System.String)">
            <summary>
            Contains Method
            </summary>
            <remarks>
            Returns true if the variable exists in the scope.
            </remarks>
        </member>
        <member name="M:Python.Runtime.PyScope.Get(System.String)">
            <summary>
            Get Method
            </summary>
            <remarks>
            Returns the value of the variable of given name.
            If the variable does not exist, throw an Exception.
            </remarks>
        </member>
        <member name="M:Python.Runtime.PyScope.TryGet(System.String,Python.Runtime.PyObject@)">
            <summary>
            TryGet Method
            </summary>
            <remarks>
            Returns the value of the variable, local variable first.
            If the variable does not exist, return null.
            </remarks>
        </member>
        <member name="M:Python.Runtime.PyScope.Get``1(System.String)">
            <summary>
            Get Method
            </summary>
            <remarks>
            Obtain the value of the variable of given name,
            and convert the result to a Managed Object of given type.
            If the variable does not exist, throw an Exception.
            </remarks>
        </member>
        <member name="M:Python.Runtime.PyScope.TryGet``1(System.String,``0@)">
            <summary>
            TryGet Method
            </summary>
            <remarks>
            Obtain the value of the variable of given name,
            and convert the result to a Managed Object of given type.
            If the variable does not exist, return false.
            </remarks>
        </member>
        <member name="M:Python.Runtime.PyScopeManager.Create">
            <summary>
            Create Method
            </summary>
            <remarks>
            Create an anonymous scope.
            </remarks>
        </member>
        <member name="M:Python.Runtime.PyScopeManager.Create(System.String)">
            <summary>
            Create Method
            </summary>
            <remarks>
            Create an named scope of given name.
            </remarks>
        </member>
        <member name="M:Python.Runtime.PyScopeManager.Contains(System.String)">
            <summary>
            Contains Method
            </summary>
            <remarks>
            return true if the scope exists in this manager.
            </remarks>
        </member>
        <member name="M:Python.Runtime.PyScopeManager.Get(System.String)">
            <summary>
            Get Method
            </summary>
            <remarks>
            Find the scope in this manager.
            If the scope not exist, an Exception will be thrown.
            </remarks>
        </member>
        <member name="M:Python.Runtime.PyScopeManager.TryGet(System.String,Python.Runtime.PyScope@)">
            <summary>
            Get Method
            </summary>
            <remarks>
            Try to find the scope in this manager.
            </remarks>
        </member>
        <member name="M:Python.Runtime.PyScopeManager.Remove(Python.Runtime.PyScope)">
            <summary>
            Remove Method
            </summary>
            <remarks>
            remove the scope from this manager.
            </remarks>
        </member>
        <member name="T:Python.Runtime.PySequence">
            <summary>
            Represents a generic Python sequence. The methods of this class are
            equivalent to the Python "abstract sequence API". See
            PY2: https://docs.python.org/2/c-api/sequence.html
            PY3: https://docs.python.org/3/c-api/sequence.html
            for details.
            </summary>
        </member>
        <member name="M:Python.Runtime.PySequence.IsSequenceType(Python.Runtime.PyObject)">
            <summary>
            IsSequenceType Method
            </summary>
            <remarks>
            Returns true if the given object implements the sequence protocol.
            </remarks>
        </member>
        <member name="M:Python.Runtime.PySequence.GetSlice(System.Int32,System.Int32)">
            <summary>
            GetSlice Method
            </summary>
            <remarks>
            Return the slice of the sequence with the given indices.
            </remarks>
        </member>
        <member name="M:Python.Runtime.PySequence.SetSlice(System.Int32,System.Int32,Python.Runtime.PyObject)">
            <summary>
            SetSlice Method
            </summary>
            <remarks>
            Sets the slice of the sequence with the given indices.
            </remarks>
        </member>
        <member name="M:Python.Runtime.PySequence.DelSlice(System.Int32,System.Int32)">
            <summary>
            DelSlice Method
            </summary>
            <remarks>
            Deletes the slice of the sequence with the given indices.
            </remarks>
        </member>
        <member name="M:Python.Runtime.PySequence.Index(Python.Runtime.PyObject)">
            <summary>
            Index Method
            </summary>
            <remarks>
            Return the index of the given item in the sequence, or -1 if
            the item does not appear in the sequence.
            </remarks>
        </member>
        <member name="M:Python.Runtime.PySequence.Contains(Python.Runtime.PyObject)">
            <summary>
            Contains Method
            </summary>
            <remarks>
            Return true if the sequence contains the given item. This method
            throws a PythonException if an error occurs during the check.
            </remarks>
        </member>
        <member name="M:Python.Runtime.PySequence.Concat(Python.Runtime.PyObject)">
            <summary>
            Concat Method
            </summary>
            <remarks>
            Return the concatenation of the sequence object with the passed in
            sequence object.
            </remarks>
        </member>
        <member name="M:Python.Runtime.PySequence.Repeat(System.Int32)">
            <summary>
            Repeat Method
            </summary>
            <remarks>
            Return the sequence object repeated N times. This is equivalent
            to the Python expression "object * count".
            </remarks>
        </member>
        <member name="M:Python.Runtime.PySequence.ToList">
            <summary>
            ToList Method
            </summary>
            <remarks>
            Returns a non-generic .NET list with the items found in the sequence
            </remarks>
        </member>
        <member name="M:Python.Runtime.PySequence.ToList``1">
            <summary>
            ToList&lt;T&gt; Method
            </summary>
            <remarks>
            Returns a generic .NET list with the items found in the sequence
            </remarks>
            <typeparam name="T">List type with a generic type argument</typeparam>
        </member>
        <member name="T:Python.Runtime.PyString">
            <summary>
            Represents a Python (ANSI) string object. See the documentation at
            PY2: https://docs.python.org/2/c-api/string.html
            PY3: No Equivalent
            for details.
            </summary>
            <remarks>
            2011-01-29: ...Then why does the string constructor call PyUnicode_FromUnicode()???
            </remarks>
        </member>
        <member name="M:Python.Runtime.PyString.#ctor(System.IntPtr)">
            <summary>
            PyString Constructor
            </summary>
            <remarks>
            Creates a new PyString from an existing object reference. Note
            that the instance assumes ownership of the object reference.
            The object reference is not checked for type-correctness.
            </remarks>
        </member>
        <member name="M:Python.Runtime.PyString.#ctor(Python.Runtime.PyObject)">
            <summary>
            PyString Constructor
            </summary>
            <remarks>
            Copy constructor - obtain a PyString from a generic PyObject.
            An ArgumentException will be thrown if the given object is not
            a Python string object.
            </remarks>
        </member>
        <member name="M:Python.Runtime.PyString.#ctor(System.String)">
            <summary>
            PyString Constructor
            </summary>
            <remarks>
            Creates a Python string from a managed string.
            </remarks>
        </member>
        <member name="M:Python.Runtime.PyString.IsStringType(Python.Runtime.PyObject)">
            <summary>
            IsStringType Method
            </summary>
            <remarks>
            Returns true if the given object is a Python string.
            </remarks>
        </member>
        <member name="T:Python.Runtime.PythonEngine">
            <summary>
            This class provides the public interface of the Python runtime.
            </summary>
        </member>
        <member name="M:Python.Runtime.PythonEngine.SetNoSiteFlag">
            <summary>
            Set the NoSiteFlag to disable loading the site module.
            Must be called before Initialize.
            https://docs.python.org/3/c-api/init.html#c.Py_NoSiteFlag
            </summary>
        </member>
        <member name="M:Python.Runtime.PythonEngine.Initialize(System.Collections.Generic.IEnumerable{System.String},System.Boolean,System.Boolean)">
            <summary>
            Initialize Method
            </summary>
            <remarks>
            Initialize the Python runtime. It is safe to call this method
            more than once, though initialization will only happen on the
            first call. It is *not* necessary to hold the Python global
            interpreter lock (GIL) to call this method.
            initSigs can be set to 1 to do default python signal configuration. This will override the way signals are handled by the application.
            </remarks>
        </member>
        <member name="M:Python.Runtime.PythonEngine.InitExt">
            <summary>
            A helper to perform initialization from the context of an active
            CPython interpreter process - this bootstraps the managed runtime
            when it is imported by the CLR extension module.
            </summary>
        </member>
        <member name="M:Python.Runtime.PythonEngine.Shutdown">
            <summary>
            Shutdown Method
            </summary>
            <remarks>
            Shutdown and release resources held by the Python runtime. The
            Python runtime can no longer be used in the current process
            after calling the Shutdown method.
            </remarks>
        </member>
        <member name="T:Python.Runtime.PythonEngine.ShutdownHandler">
             <summary>
             Called when the engine is shut down.
            
             Shutdown handlers are run in reverse order they were added, so that
             resources available when running a shutdown handler are the same as
             what was available when it was added.
             </summary>
        </member>
        <member name="M:Python.Runtime.PythonEngine.AddShutdownHandler(Python.Runtime.PythonEngine.ShutdownHandler)">
             <summary>
             Add a function to be called when the engine is shut down.
            
             Shutdown handlers are executed in the opposite order they were
             added, so that you can be sure that everything that was initialized
             when you added the handler is still initialized when you need to shut
             down.
            
             If the same shutdown handler is added several times, it will be run
             several times.
            
             Don't add shutdown handlers while running a shutdown handler.
             </summary>
        </member>
        <member name="M:Python.Runtime.PythonEngine.RemoveShutdownHandler(Python.Runtime.PythonEngine.ShutdownHandler)">
             <summary>
             Remove a shutdown handler.
            
             If the same shutdown handler is added several times, only the last
             one is removed.
            
             Don't remove shutdown handlers while running a shutdown handler.
             </summary>
        </member>
        <member name="M:Python.Runtime.PythonEngine.ExecuteShutdownHandlers">
             <summary>
             Run all the shutdown handlers.
            
             They're run in opposite order they were added.
             </summary>
        </member>
        <member name="M:Python.Runtime.PythonEngine.AcquireLock">
            <summary>
            AcquireLock Method
            </summary>
            <remarks>
            Acquire the Python global interpreter lock (GIL). Managed code
            *must* call this method before using any objects or calling any
            methods on objects in the Python.Runtime namespace. The only
            exception is PythonEngine.Initialize, which may be called without
            first calling AcquireLock.
            Each call to AcquireLock must be matched by a corresponding call
            to ReleaseLock, passing the token obtained from AcquireLock.
            For more information, see the "Extending and Embedding" section
            of the Python documentation on www.python.org.
            </remarks>
        </member>
        <member name="M:Python.Runtime.PythonEngine.ReleaseLock(System.IntPtr)">
            <summary>
            ReleaseLock Method
            </summary>
            <remarks>
            Release the Python global interpreter lock using a token obtained
            from a previous call to AcquireLock.
            For more information, see the "Extending and Embedding" section
            of the Python documentation on www.python.org.
            </remarks>
        </member>
        <member name="M:Python.Runtime.PythonEngine.BeginAllowThreads">
            <summary>
            BeginAllowThreads Method
            </summary>
            <remarks>
            Release the Python global interpreter lock to allow other threads
            to run. This is equivalent to the Py_BEGIN_ALLOW_THREADS macro
            provided by the C Python API.
            For more information, see the "Extending and Embedding" section
            of the Python documentation on www.python.org.
            </remarks>
        </member>
        <member name="M:Python.Runtime.PythonEngine.EndAllowThreads(System.IntPtr)">
            <summary>
            EndAllowThreads Method
            </summary>
            <remarks>
            Re-aquire the Python global interpreter lock for the current
            thread. This is equivalent to the Py_END_ALLOW_THREADS macro
            provided by the C Python API.
            For more information, see the "Extending and Embedding" section
            of the Python documentation on www.python.org.
            </remarks>
        </member>
        <member name="M:Python.Runtime.PythonEngine.ImportModule(System.String)">
            <summary>
            ImportModule Method
            </summary>
            <remarks>
            Given a fully-qualified module or package name, import the
            module and return the resulting module object as a PyObject
            or null if an exception is raised.
            </remarks>
        </member>
        <member name="M:Python.Runtime.PythonEngine.ReloadModule(Python.Runtime.PyObject)">
            <summary>
            ReloadModule Method
            </summary>
            <remarks>
            Given a PyObject representing a previously loaded module, reload
            the module.
            </remarks>
        </member>
        <member name="M:Python.Runtime.PythonEngine.ModuleFromString(System.String,System.String)">
            <summary>
            ModuleFromString Method
            </summary>
            <remarks>
            Given a string module name and a string containing Python code,
            execute the code in and return a module of the given name.
            </remarks>
        </member>
        <member name="M:Python.Runtime.PythonEngine.Eval(System.String,System.Nullable{System.IntPtr},System.Nullable{System.IntPtr})">
            <summary>
            Eval Method
            </summary>
            <remarks>
            Evaluate a Python expression and returns the result.
            It's a subset of Python eval function.
            </remarks>
        </member>
        <member name="M:Python.Runtime.PythonEngine.Exec(System.String,System.Nullable{System.IntPtr},System.Nullable{System.IntPtr})">
            <summary>
            Exec Method
            </summary>
            <remarks>
            Run a string containing Python code.
            It's a subset of Python exec function.
            </remarks>
        </member>
        <member name="M:Python.Runtime.PythonEngine.RunString(System.String,System.Nullable{System.IntPtr},System.Nullable{System.IntPtr})">
            <summary>
            RunString Method. Function has been deprecated and will be removed.
            Use Exec/Eval/RunSimpleString instead.
            </summary>
        </member>
        <member name="M:Python.Runtime.PythonEngine.RunString(System.String,System.Nullable{System.IntPtr},System.Nullable{System.IntPtr},Python.Runtime.RunFlagType)">
            <summary>
            Internal RunString Method.
            </summary>
            <remarks>
            Run a string containing Python code. Returns the result of
            executing the code string as a PyObject instance, or null if
            an exception was raised.
            </remarks>
        </member>
        <member name="T:Python.Runtime.PythonException">
            <summary>
            Provides a managed interface to exceptions thrown by the Python
            runtime.
            </summary>
        </member>
        <member name="M:Python.Runtime.PythonException.Restore">
            <summary>
            Restores python error.
            </summary>
        </member>
        <member name="P:Python.Runtime.PythonException.PyType">
            <summary>
            PyType Property
            </summary>
            <remarks>
            Returns the exception type as a Python object.
            </remarks>
        </member>
        <member name="P:Python.Runtime.PythonException.PyValue">
            <summary>
            PyValue Property
            </summary>
            <remarks>
            Returns the exception value as a Python object.
            </remarks>
        </member>
        <member name="P:Python.Runtime.PythonException.PyTB">
            <summary>
            PyTB Property
            </summary>
            <remarks>
            Returns the TraceBack as a Python object.
            </remarks>
        </member>
        <member name="P:Python.Runtime.PythonException.Message">
            <summary>
            Message Property
            </summary>
            <remarks>
            A string representing the python exception message.
            </remarks>
        </member>
        <member name="P:Python.Runtime.PythonException.StackTrace">
            <summary>
            StackTrace Property
            </summary>
            <remarks>
            A string representing the python exception stack trace.
            </remarks>
        </member>
        <member name="P:Python.Runtime.PythonException.PythonTypeName">
            <summary>
            Python error type name.
            </summary>
        </member>
        <member name="M:Python.Runtime.PythonException.Format">
            <summary>
            Formats this PythonException object into a message as would be printed
            out via the Python console. See traceback.format_exception
            </summary>
        </member>
        <member name="M:Python.Runtime.PythonException.Dispose">
            <summary>
            Dispose Method
            </summary>
            <remarks>
            The Dispose method provides a way to explicitly release the
            Python objects represented by a PythonException.
            If object not properly disposed can cause AppDomain unload issue.
            See GH#397 and GH#400.
            </remarks>
        </member>
        <member name="M:Python.Runtime.PythonException.Matches(System.IntPtr)">
            <summary>
            Matches Method
            </summary>
            <remarks>
            Returns true if the Python exception type represented by the
            PythonException instance matches the given exception type.
            </remarks>
        </member>
        <member name="T:Python.Runtime.PyTuple">
            <summary>
            Represents a Python tuple object. See the documentation at
            PY2: https://docs.python.org/2/c-api/tupleObjects.html
            PY3: https://docs.python.org/3/c-api/tupleObjects.html
            for details.
            </summary>
        </member>
        <member name="M:Python.Runtime.PyTuple.#ctor(System.IntPtr)">
            <summary>
            PyTuple Constructor
            </summary>
            <remarks>
            Creates a new PyTuple from an existing object reference. Note
            that the instance assumes ownership of the object reference.
            The object reference is not checked for type-correctness.
            </remarks>
        </member>
        <member name="M:Python.Runtime.PyTuple.#ctor(Python.Runtime.PyObject)">
            <summary>
            PyTuple Constructor
            </summary>
            <remarks>
            Copy constructor - obtain a PyTuple from a generic PyObject. An
            ArgumentException will be thrown if the given object is not a
            Python tuple object.
            </remarks>
        </member>
        <member name="M:Python.Runtime.PyTuple.#ctor">
            <summary>
            PyTuple Constructor
            </summary>
            <remarks>
            Creates a new empty PyTuple.
            </remarks>
        </member>
        <member name="M:Python.Runtime.PyTuple.#ctor(Python.Runtime.PyObject[])">
            <summary>
            PyTuple Constructor
            </summary>
            <remarks>
            Creates a new PyTuple from an array of PyObject instances.
            <para />
            See caveats about PyTuple_SetItem:
            https://www.coursehero.com/file/p4j2ogg/important-exceptions-to-this-rule-PyTupleSetItem-and-PyListSetItem-These/
            </remarks>
        </member>
        <member name="M:Python.Runtime.PyTuple.IsTupleType(Python.Runtime.PyObject)">
            <summary>
            IsTupleType Method
            </summary>
            <remarks>
            Returns true if the given object is a Python tuple.
            </remarks>
        </member>
        <member name="M:Python.Runtime.PyTuple.AsTuple(Python.Runtime.PyObject)">
            <summary>
            AsTuple Method
            </summary>
            <remarks>
            Convert a Python object to a Python tuple if possible, raising
            a PythonException if the conversion is not possible. This is
            equivalent to the Python expression "tuple(object)".
            </remarks>
        </member>
        <member name="M:Python.Runtime.ReferenceExtensions.IsNone(Python.Runtime.NewReference@)">
            <summary>
            Checks if the reference points to Python object <c>None</c>.
            </summary>
        </member>
        <member name="M:Python.Runtime.ReferenceExtensions.IsNone(Python.Runtime.BorrowedReference)">
            <summary>
            Checks if the reference points to Python object <c>None</c>.
            </summary>
        </member>
        <member name="T:Python.Runtime.Runtime">
            <summary>
            Encapsulates the low-level Python C API. Note that it is
            the responsibility of the caller to have acquired the GIL
            before calling any of these methods.
            </summary>
        </member>
        <member name="F:Python.Runtime.Runtime.PyUnicodeEntryPoint">
            <summary>
            EntryPoint to be used in DllImport to map to correct Unicode
            methods prior to PEP393. Only used for PY27.
            </summary>
        </member>
        <member name="P:Python.Runtime.Runtime.OperatingSystem">
            <summary>
            Gets the operating system as reported by python's platform.system().
            </summary>
        </member>
        <member name="F:Python.Runtime.Runtime.MachineTypeMapping">
            <summary>
            Map lower-case version of the python machine name to the processor
            type. There are aliases, e.g. x86_64 and amd64 are two names for
            the same thing. Make sure to lower-case the search string, because
            capitalization can differ.
            </summary>
        </member>
        <member name="P:Python.Runtime.Runtime.Machine">
            <summary>
            Gets the machine architecture as reported by python's platform.machine().
            </summary>
        </member>
        <member name="F:Python.Runtime.Runtime.PyEncoding">
            <summary>
            Encoding to use to convert Unicode to/from Managed to Native
            </summary>
        </member>
        <member name="M:Python.Runtime.Runtime.Initialize(System.Boolean)">
            <summary>
            Initialize the runtime...
            </summary>
        </member>
        <member name="M:Python.Runtime.Runtime.InitializePlatformData">
             <summary>
             Initializes the data about platforms.
            
             This must be the last step when initializing the runtime:
             GetManagedString needs to have the cached values for types.
             But it must run before initializing anything outside the runtime
             because those rely on the platform data.
             </summary>
        </member>
        <member name="M:Python.Runtime.Runtime.CheckExceptionOccurred">
            <summary>
            Check if any Python Exceptions occurred.
            If any exist throw new PythonException.
            </summary>
            <remarks>
            Can be used instead of `obj == IntPtr.Zero` for example.
            </remarks>
        </member>
        <member name="M:Python.Runtime.Runtime.XIncref(System.IntPtr)">
            <summary>
            Managed exports of the Python C API. Where appropriate, we do
            some optimization to avoid managed &lt;--&gt; unmanaged transitions
            (mostly for heavily used methods).
            </summary>
        </member>
        <member name="M:Python.Runtime.Runtime.SelfIncRef(System.IntPtr)">
            <summary>
            Increase Python's ref counter for the given object, and get the object back.
            </summary>
        </member>
        <member name="M:Python.Runtime.Runtime.Py_IncRef(System.IntPtr)">
            <summary>
            Export of Macro Py_XIncRef. Use XIncref instead.
            Limit this function usage for Testing and Py_Debug builds
            </summary>
            <param name="ob">PyObject Ptr</param>
        </member>
        <member name="M:Python.Runtime.Runtime.Py_DecRef(System.IntPtr)">
            <summary>
            Export of Macro Py_XDecRef. Use XDecref instead.
            Limit this function usage for Testing and Py_Debug builds
            </summary>
            <param name="ob">PyObject Ptr</param>
        </member>
        <member name="M:Python.Runtime.Runtime.Py_CompileString(System.String,System.String,System.Int32)">
            <summary>
            Return value: New reference.
            This is a simplified interface to Py_CompileStringFlags() below, leaving flags set to NULL.
            </summary>
        </member>
        <member name="M:Python.Runtime.Runtime.Py_CompileStringFlags(System.String,System.String,System.Int32,System.IntPtr)">
            <summary>
            Return value: New reference.
            This is a simplified interface to Py_CompileStringExFlags() below, with optimize set to -1.
            </summary>
        </member>
        <member name="M:Python.Runtime.Runtime.Py_CompileStringExFlags(System.String,System.String,System.Int32,System.IntPtr,System.Int32)">
            <summary>
            Return value: New reference.
            Like Py_CompileStringObject(), but filename is a byte string decoded from the filesystem encoding(os.fsdecode()).
            </summary>
            <returns></returns>
        </member>
        <member name="M:Python.Runtime.Runtime.PyObject_TYPE(System.IntPtr)">
            <summary>
            A macro-like method to get the type of a Python object. This is
            designed to be lean and mean in IL &amp; avoid managed &lt;-&gt; unmanaged
            transitions. Note that this does not incref the type object.
            </summary>
        </member>
        <member name="M:Python.Runtime.Runtime.PyObject_Type(System.IntPtr)">
            <summary>
            Managed version of the standard Python C API PyObject_Type call.
            This version avoids a managed  &lt;-&gt; unmanaged transition.
            This one does incref the returned type object.
            </summary>
        </member>
        <member name="M:Python.Runtime.Runtime.PyObject_IsIterable(System.IntPtr)">
            <summary>
            Test whether the Python object is an iterable.
            </summary>
        </member>
        <member name="M:Python.Runtime.Runtime.GetManagedString(System.IntPtr)">
            <summary>
            Function to access the internal PyUnicode/PyString object and
            convert it to a managed string with the correct encoding.
            </summary>
            <remarks>
            We can't easily do this through through the CustomMarshaler's on
            the returns because will have access to the IntPtr but not size.
            <para />
            For PyUnicodeType, we can't convert with Marshal.PtrToStringUni
            since it only works for UCS2.
            </remarks>
            <param name="op">PyStringType or PyUnicodeType object to convert</param>
            <returns>Managed String</returns>
        </member>
        <member name="M:Python.Runtime.Runtime.PyImport_ImportModule(System.String)">
            <summary>
            Return value: New reference.
            </summary>
        </member>
        <member name="M:Python.Runtime.Runtime.GetBuiltins">
            <summary>
            Return value: New reference.
            </summary>
        </member>
        <member name="M:Python.Runtime.PyReferenceCollection.Add(System.IntPtr,System.Action)">
            <summary>
            Record obj's address to release the obj in the future,
            obj must alive before calling Release.
            </summary>
        </member>
        <member name="M:Python.Runtime.Slots.mp_length_slot.mp_length(System.IntPtr)">
            <summary>
            Implements __len__ for classes that implement ICollection
            (this includes any IList implementer or Array subclass)
            </summary>
        </member>
        <member name="T:Python.Runtime.TypeManager">
            <summary>
            The TypeManager class is responsible for building binary-compatible
            Python type objects that are implemented in managed code.
            </summary>
        </member>
        <member name="M:Python.Runtime.TypeManager.GetTypeHandle(System.Type)">
            <summary>
            Given a managed Type derived from ExtensionType, get the handle to
            a Python type object that delegates its implementation to the Type
            object. These Python type instances are used to implement internal
            descriptor and utility types like ModuleObject, PropertyObject, etc.
            </summary>
        </member>
        <member name="M:Python.Runtime.TypeManager.GetTypeHandle(Python.Runtime.ManagedType,System.Type)">
            <summary>
            Get the handle of a Python type that reflects the given CLR type.
            The given ManagedType instance is a managed object that implements
            the appropriate semantics in Python for the reflected managed type.
            </summary>
        </member>
        <member name="M:Python.Runtime.TypeManager.CreateType(System.Type)">
            <summary>
            The following CreateType implementations do the necessary work to
            create Python types to represent managed extension types, reflected
            types, subclasses of reflected types and the managed metatype. The
            dance is slightly different for each kind of type due to different
            behavior needed and the desire to have the existing Python runtime
            do as much of the allocation and initialization work as possible.
            </summary>
        </member>
        <member name="M:Python.Runtime.TypeManager.AllocateTypeObject(System.String)">
            <summary>
            Utility method to allocate a type object &amp; do basic initialization.
            </summary>
        </member>
        <member name="F:Python.Runtime.TypeManager.NativeCodePage">
             <summary>
             Initialized by InitializeNativeCodePage.
            
             This points to a page of memory allocated using mmap or VirtualAlloc
             (depending on the system), and marked read and execute (not write).
             Very much on purpose, the page is *not* released on a shutdown and
             is instead leaked. See the TestDomainReload test case.
            
             The contents of the page are two native functions: one that returns 0,
             one that returns 1.
            
             If python didn't keep its gc list through a Py_Finalize we could remove
             this entire section.
             </summary>
        </member>
        <member name="T:Python.Runtime.TypeManager.NativeCode">
             <summary>
             Structure to describe native code.
            
             Use NativeCode.Active to get the native code for the current platform.
            
             Generate the code by creating the following C code:
             <code>
             int Return0() { return 0; }
             int Return1() { return 1; }
             </code>
             Then compiling on the target platform, e.g. with gcc or clang:
             <code>cc -c -fomit-frame-pointer -O2 foo.c</code>
             And then analyzing the resulting functions with a hex editor, e.g.:
             <code>objdump -disassemble foo.o</code>
             </summary>
        </member>
        <member name="P:Python.Runtime.TypeManager.NativeCode.Code">
            <summary>
            The code, as a string of bytes.
            </summary>
        </member>
        <member name="P:Python.Runtime.TypeManager.NativeCode.Return0">
            <summary>
            Where does the "return 0" function start?
            </summary>
        </member>
        <member name="P:Python.Runtime.TypeManager.NativeCode.Return1">
            <summary>
            Where does the "return 1" function start?
            </summary>
        </member>
        <member name="F:Python.Runtime.TypeManager.NativeCode.X86_64">
            <summary>
            Code for x86_64. See the class comment for how it was generated.
            </summary>
        </member>
        <member name="F:Python.Runtime.TypeManager.NativeCode.I386">
             <summary>
             Code for X86.
            
             It's bitwise identical to X86_64, so we just point to it.
             <see cref="F:Python.Runtime.TypeManager.NativeCode.X86_64"/>
             </summary>
        </member>
        <member name="T:Python.Runtime.TypeManager.IMemoryMapper">
            <summary>
            Platform-dependent mmap and mprotect.
            </summary>
        </member>
        <member name="M:Python.Runtime.TypeManager.IMemoryMapper.MapWriteable(System.Int32)">
            <summary>
            Map at least numBytes of memory. Mark the page read-write (but not exec).
            </summary>
        </member>
        <member name="M:Python.Runtime.TypeManager.IMemoryMapper.SetReadExec(System.IntPtr,System.Int32)">
            <summary>
            Sets the mapped memory to be read-exec (but not write).
            </summary>
        </member>
        <member name="M:Python.Runtime.TypeManager.InitializeNativeCodePage">
             <summary>
             Initializes the native code page.
            
             Safe to call if we already initialized (this function is idempotent).
             <see cref="F:Python.Runtime.TypeManager.NativeCodePage"/>
             </summary>
        </member>
        <member name="M:Python.Runtime.TypeManager.InitializeSlots(System.IntPtr,System.Type)">
            <summary>
            Given a newly allocated Python type object and a managed Type that
            provides the implementation for the type, connect the type slots of
            the Python object to the managed methods of the implementing Type.
            </summary>
        </member>
        <member name="M:Python.Runtime.TypeManager.InitializeSlot(System.IntPtr,System.IntPtr,System.String)">
             <summary>
             Helper for InitializeSlots.
            
             Initializes one slot to point to a function pointer.
             The function pointer might be a thunk for C#, or it may be
             an address in the NativeCodePage.
             </summary>
             <param name="type">Type being initialized.</param>
             <param name="slot">Function pointer.</param>
             <param name="name">Name of the method.</param>
        </member>
        <member name="M:Python.Runtime.TypeManager.InitMethods(System.IntPtr,System.Type)">
            <summary>
            Given a newly allocated Python type object and a managed Type that
            implements it, initialize any methods defined by the Type that need
            to appear in the Python type __dict__ (based on custom attribute).
            </summary>
        </member>
        <member name="M:Python.Runtime.TypeManager.CopySlot(System.IntPtr,System.IntPtr,System.Int32)">
            <summary>
            Utility method to copy slots from a given type to another type.
            </summary>
        </member>
        <member name="M:Python.Runtime.TypeManager.IsCastable(System.Type,System.Type)">
            <summary>
            Determines whether it's possible to implicitly or explictly convert from one type
            to another. Taken from here:
            https://stackoverflow.com/questions/2224266/how-to-tell-if-type-a-is-implicitly-convertible-to-type-b
            </summary>
            <param name="from">Source type</param>
            <param name="to">Target type</param>
            <returns>Whether it's possible to do the cast</returns>
        </member>
        <member name="T:Python.Runtime.TypeMethod">
            <summary>
            Implements a Python type that provides access to CLR object methods.
            </summary>
        </member>
        <member name="M:Python.Runtime.Util.Coalesce(System.IntPtr,System.IntPtr)">
            <summary>
            Null-coalesce: if <paramref name="primary"/> parameter is not
            <see cref="F:System.IntPtr.Zero"/>, return it. Otherwise return <paramref name="fallback"/>.
            </summary>
        </member>
    </members>
</doc>
