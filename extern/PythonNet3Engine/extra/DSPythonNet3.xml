<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DSPythonNet3</name>
    </assembly>
    <members>
        <member name="F:DSPythonNet3.DSPythonNet3CodeCompletionProviderCore.scope">
            <summary>
            The engine used for autocompletion.  This essentially keeps
            track of the state of the editor, allowing access to variable types and
            imported symbols.
            </summary>
        </member>
        <member name="P:DSPythonNet3.DSPythonNet3CodeCompletionProviderCore.Scope">
            <summary>
            The scope used by the engine.  This is where all the loaded symbols
            are stored.  It's essentially an environment dictionary.
            </summary>
        </member>
        <member name="M:DSPythonNet3.DSPythonNet3CodeCompletionProviderCore.EnumerateMembers(System.Object,System.String)">
            <summary>
            List all of the members in a PythonObject. 
            This method calls into Python objects and thus needs to be wrappd in a GIL block.
            </summary>
            <param name="pyObject">A reference to the module</param>
            <param name="name">The name of the module</param>
            <returns>A list of completion data for the module</returns>
        </member>
        <member name="M:DSPythonNet3.DSPythonNet3CodeCompletionProviderCore.LookupObject(System.String)">
            <summary>
            Lookup a variable in the python environment
            </summary>
            <param name="name">A name for a type, possibly delimited by periods.</param>
            <returns>The Python object</returns>
        </member>
        <member name="M:DSPythonNet3.DSPythonNet3CodeCompletionProviderCore.GetCompletionDataFromJedi(System.String)">
            <summary>
            Generate completion data for the specified text by relying on the autocomplete from Jedi package.
            </summary>
            <param name="code">The code to parse</param>
            <returns>Return a list of IExternalCodeCompletionData </returns>
        </member>
        <member name="M:DSPythonNet3.DSPythonNet3CodeCompletionProviderCore.GetCompletionData(System.String,System.Boolean)">
            <summary>
            Generate completion data for the specified text, while import the given types into the
            scope and discovering variable assignments.
            </summary>
            <param name="code">The code to parse</param>
            <param name="expand">Determines if the entire namespace should be used</param>
            <returns>Return a list of IExternalCodeCompletionData </returns>
        </member>
        <member name="M:DSPythonNet3.DSPythonNet3CodeCompletionProviderCore.IsSupportedEngine(System.String)">
            <summary>
            Used to determine if this IExternalCodeCompletionProviderCore can provide completions for the given engine.
            </summary>
            <param name="engineName"></param>
            <returns></returns>
        </member>
        <member name="M:DSPythonNet3.DSPythonNet3CodeCompletionProviderCore.Initialize(System.String)">
            <summary>
            Used to load initialize libraries and types that should be available by default.
            </summary>
            <param name="dynamoCorePath"></param>
        </member>
        <member name="E:DSPythonNet3.DSPythonNet3CodeCompletionProviderCore.MessageLogged">
            <summary>
            Raise this event to request loggers log this message.
            </summary>
        </member>
        <member name="T:DSPythonNet3.DynamoCPythonHandleComparer">
            <summary>
            Used to compare DynamoCPythonHandles by their PythonIDs.
            </summary>
        </member>
        <member name="T:DSPythonNet3.DynamoCPythonHandle">
            <summary>
            This class wraps a PythonNet.PyObj and performs
            disposal tasks to make sure the underlying object is removed from
            the shared global scope between all CPython scopes.
            If you construct an instance of this class manually or
            as a consequence of using the CPythonEvaluator.Evaluate method, an instance
            of this class is constructed, and is not returned to the DSVM (graph context)
            then make sure to call Dispose when you are done with the instance.
            </summary>
        </member>
        <member name="F:DSPythonNet3.DynamoCPythonHandle.HandleCountMap">
            <summary>
            A static map of DynamoCPythonHandle counts, is used to avoid removing the underlying python objects from the 
            global scope while there are still handles referencing them.
            </summary>
        </member>
        <member name="P:DSPythonNet3.DynamoCPythonHandle.PythonObjectID">
            <summary>
            A unique ID that identifies this python object. It's as a lookup
            symbol within the global scope to find this python object instance.
            </summary>
        </member>
        <member name="M:DSPythonNet3.DynamoCPythonHandle.Dispose">
            <summary>
            When this handle goes out of scope
            we should remove the pythonObject from the globalScope.
            In most cases the DSVM will call this.
            </summary>
        </member>
        <member name="T:DSPythonNet3.DSPythonNet3Evaluator">
            <summary>
                Evaluates a Python script in the Dynamo context.
            </summary>
        </member>
        <member name="F:DSPythonNet3.DSPythonNet3Evaluator.lazy">
            <summary>
            Use Lazy&lt;PythonEngineManager&gt; to make sure the Singleton class is only initialized once
            </summary>
        </member>
        <member name="P:DSPythonNet3.DSPythonNet3Evaluator.Instance">
            <summary>
            The actual instance stored in the Singleton class
            </summary>
        </member>
        <member name="M:DSPythonNet3.DSPythonNet3Evaluator.Evaluate(System.String,System.Collections.IList,System.Collections.IList)">
            <summary>
                Executes a Python script with custom variable names. Script may be a string
                read from a file, for example. Pass a list of names (matching the variable
                names in the script) to bindingNames and pass a corresponding list of values
                to bindingValues.
            </summary>
            <param name="code">Python script as a string.</param>
            <param name="bindingNames">Names of values referenced in Python script.</param>
            <param name="bindingValues">Values referenced in Python script.</param>
        </member>
        <member name="M:DSPythonNet3.DSPythonNet3Evaluator.InstallPythonAsync">
            <summary>
            Makes sure Python is installed on the system and its location added to the path.
            NOTE: Calling SetupPython multiple times will add the install location to the path many times,
            potentially causing the environment variable to overflow.
            </summary>
        </member>
        <member name="M:DSPythonNet3.DSPythonNet3Evaluator.InitializePython">
            <summary>
            Install, if necessary, and initialize, if necessary, Python.
            </summary>
            <returns>True if Python was not already initialized</returns>
        </member>
        <member name="M:DSPythonNet3.DSPythonNet3Evaluator.CreateGlobalScope">
            <summary>
            Creates and initializes the global Python scope.
            </summary>
        </member>
        <member name="M:DSPythonNet3.DSPythonNet3Evaluator.ProcessAdditionalBindings(Python.Runtime.PyModule,System.Collections.IList,System.Collections.IList)">
            <summary>
            Processes additional bindings that are not actual inputs.
            Currently, only the node name is received in this way.
            </summary>
            <param name="scope">Python scope where execution will occur</param>
            <param name="bindingNames">List of binding names received for evaluation</param>
            <param name="bindingValues">List of binding values received for evaluation</param>
        </member>
        <member name="M:DSPythonNet3.DSPythonNet3Evaluator.InitializeEncoders">
            <summary>
            Registers custom encoders and decoders with the Python.NET runtime
            </summary>
        </member>
        <member name="M:DSPythonNet3.DSPythonNet3Evaluator.GetTraceBack(System.Exception)">
            <summary>
            Gets the trace back message from the exception, if it is a PythonException.
            </summary>
            <param name="e">Exception to inspect</param>
            <returns>Trace back message</returns>
        </member>
        <member name="M:DSPythonNet3.DSPythonNet3Evaluator.RegisterHostDataMarshalers">
            <summary>
            Add additional data marshalers to handle host data.
            </summary>
        </member>
        <member name="P:DSPythonNet3.DSPythonNet3Evaluator.InputDataMarshaler">
            <summary>
                Data Marshaler for all data coming into a Python node.
            </summary>
        </member>
        <member name="P:DSPythonNet3.DSPythonNet3Evaluator.InputMarshaler">
            <summary>
                Data Marshaler for all data coming into a Python node.
            </summary>
        </member>
        <member name="P:DSPythonNet3.DSPythonNet3Evaluator.OutputDataMarshaler">
            <summary>
                Data Marshaler for all data coming out of a Python node.
            </summary>
        </member>
        <member name="P:DSPythonNet3.DSPythonNet3Evaluator.OutputMarshaler">
            <summary>
                Data Marshaler for all data coming out of a Python node.
            </summary>
        </member>
        <member name="E:DSPythonNet3.DSPythonNet3Evaluator.EvaluationStarted">
            <summary>
                Emitted immediately before execution begins
            </summary>
        </member>
        <member name="E:DSPythonNet3.DSPythonNet3Evaluator.EvaluationFinished">
            <summary>
                Emitted immediately after execution ends or fails
            </summary>
        </member>
        <member name="M:DSPythonNet3.DSPythonNet3Evaluator.OnEvaluationBegin(Python.Runtime.PyModule,System.String,System.Collections.IList)">
            <summary>
            Called immediately before evaluation starts
            </summary>
            <param name="scope">The scope in which the code is executed</param>
            <param name="code">The code to be evaluated</param>
            <param name="bindingValues">The binding values - these are already added to the scope when called</param>
        </member>
        <member name="M:DSPythonNet3.DSPythonNet3Evaluator.OnEvaluationEnd(System.Boolean,Python.Runtime.PyModule,System.String,System.Collections.IList)">
            <summary>
            Called when the evaluation has completed successfully or failed
            </summary>
            <param name="isSuccessful">Whether the evaluation succeeded or not</param>
            <param name="scope">The scope in which the code is executed</param>
            <param name="code">The code to that was evaluated</param>
            <param name="bindingValues">The binding values - these are already added to the scope when called</param>
        </member>
        <member name="T:DSPythonNet3.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:DSPythonNet3.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:DSPythonNet3.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:DSPythonNet3.Properties.Resources.FailedToUnmarshalOutput">
            <summary>
              Looks up a localized string similar to Output could not be converted to a .NET value.
            </summary>
        </member>
        <member name="P:DSPythonNet3.Properties.Resources.InternalErrorTraceBackInfo">
            <summary>
              Looks up a localized string similar to Internal error, please report: Trace back information could not be extracted.
            </summary>
        </member>
    </members>
</doc>
