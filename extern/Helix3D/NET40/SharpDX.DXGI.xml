<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SharpDX.DXGI</name>
    </assembly>
    <members>
        <member name="T:SharpDX.DXGI.Adapter">
            <summary>	
            <p>The  <strong><see cref="T:SharpDX.DXGI.Adapter"/></strong> interface represents a display sub-system (including one or more GPU's, DACs and video memory).</p>	
            </summary>	
            <remarks>	
            <p>A display sub-system is often referred to as a video card, however, on some machines the display sub-system is part of the mother board.</p><p>To enumerate the display sub-systems, use <strong><see cref="M:SharpDX.DXGI.Factory.GetAdapter(System.Int32)"/></strong>. To get an interface to the adapter for a particular device, use <strong><see cref="M:SharpDX.DXGI.Device.GetAdapter(SharpDX.DXGI.Adapter@)"/></strong>. To create a software adapter, use <strong><see cref="M:SharpDX.DXGI.Factory.CreateSoftwareAdapter(System.Reflection.Module)"/></strong>.</p><p><strong>Windows?Phone?8:</strong> This API is supported.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIAdapter']/*"/>	
            <msdn-id>bb174523</msdn-id>	
            <unmanaged>IDXGIAdapter</unmanaged>	
            <unmanaged-short>IDXGIAdapter</unmanaged-short>	
        </member>
        <member name="T:SharpDX.DXGI.DXGIObject">
            <summary>	
            <p>An <strong><see cref="T:SharpDX.DXGI.DXGIObject"/></strong> interface is a base interface for all DXGI objects; <strong><see cref="T:SharpDX.DXGI.DXGIObject"/></strong> supports associating caller-defined (private data) with an object and retrieval of an interface to the parent object.</p>	
            </summary>	
            <remarks>	
            <p><strong><see cref="T:SharpDX.DXGI.DXGIObject"/></strong> implements base class functionality for several other interfaces: <strong><see cref="T:SharpDX.DXGI.Adapter"/></strong>, <strong><see cref="T:SharpDX.DXGI.Device"/></strong>, <strong><see cref="T:SharpDX.DXGI.Factory"/></strong>, <strong><see cref="T:SharpDX.DXGI.Output"/></strong> </p><p><strong>Windows?Phone?8:</strong> This API is supported.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIObject']/*"/>	
            <msdn-id>bb174541</msdn-id>	
            <unmanaged>IDXGIObject</unmanaged>	
            <unmanaged-short>IDXGIObject</unmanaged-short>	
        </member>
        <member name="M:SharpDX.DXGI.DXGIObject.GetParent``1">
            <summary>
            Gets the parent of the object.
            </summary>
            <typeparam name="T">Type of the parent object</typeparam>
            <returns>Returns the parent object based on the GUID of the type of the parent object.</returns>
            <msdn-id>bb174542</msdn-id>
            <unmanaged>HRESULT IDXGIObject::GetParent([In] const GUID&amp; riid,[Out] void** ppParent)</unmanaged>
            <unmanaged-short>IDXGIObject::GetParent</unmanaged-short>
        </member>
        <member name="M:SharpDX.DXGI.DXGIObject.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.DXGI.DXGIObject"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.DXGI.DXGIObject.op_Explicit(System.IntPtr)~SharpDX.DXGI.DXGIObject">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:SharpDX.DXGI.DXGIObject"/>. (This method is a shortcut to <see cref="P:SharpDX.CppObject.NativePointer"/>) 
            </summary>
            <param name="nativePointer">The native pointer.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:SharpDX.DXGI.DXGIObject.SetPrivateData(System.Guid,System.Int32,System.IntPtr)">
            <summary>	
            <p>Sets application-defined data to the object and associates that data with a <see cref="T:System.Guid"/>.</p>	
            </summary>	
            <param name="name"><dd>  <p>A <see cref="T:System.Guid"/> that identifies the data. Use this <see cref="T:System.Guid"/> in a call to <strong>GetPrivateData</strong> to get the data.</p> </dd></param>	
            <param name="dataSize"><dd>  <p>The size of the object's data.</p> </dd></param>	
            <param name="dataRef"><dd>  <p>A reference to the object's data.</p> </dd></param>	
            <returns><p>Returns one of the DXGI_ERROR values.</p></returns>	
            <remarks>	
            <p><strong>SetPrivateData</strong> makes a copy of the specified data and stores it with the object.</p><p>Private data that <strong>SetPrivateData</strong> stores in the object occupies the same storage space as private data that is stored by associated Direct3D objects (for example, by a Microsoft Direct3D?11 device through <strong><see cref="!:SharpDX.Direct3D11.Device.SetPrivateData"/></strong> or by a Direct3D?11 child device through <strong><see cref="!:SharpDX.Direct3D11.DeviceChild.SetPrivateData"/></strong>).</p><p>The debug layer reports memory leaks by outputting a list of object interface references along with their friendly names. The default friendly name is "&lt;unnamed&gt;". You can set the friendly name so that you can determine if the corresponding object interface reference caused the leak. To set the friendly name, use the <strong>SetPrivateData</strong> method and the well-known private data <see cref="T:System.Guid"/> (<strong><see cref="F:SharpDX.Direct3D.CommonGuid.DebugObjectName"/></strong>) that is in D3Dcommon.h. For example, to give pContext a friendly name of <em>My name</em>, use the following code:</p><pre> static const char c_szName[] = "My name";	
            hr = pContext-&gt;SetPrivateData( <see cref="F:SharpDX.Direct3D.CommonGuid.DebugObjectName"/>, sizeof( c_szName ) - 1, c_szName );	
            </pre><p>You can use <strong><see cref="F:SharpDX.Direct3D.CommonGuid.DebugObjectName"/></strong> to track down memory leaks and understand performance characteristics of your applications. This information is reflected in the output of the debug layer that is related to memory leaks (<strong><see cref="!:SharpDX.Direct3D11.DeviceDebug.ReportLiveDeviceObjects"/></strong>) and with the event tracing for Windows events that we've added to Windows?8.	
            </p><p><strong>Windows?Phone?8:</strong> This API is supported.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIObject::SetPrivateData']/*"/>	
            <msdn-id>bb174544</msdn-id>	
            <unmanaged>HRESULT IDXGIObject::SetPrivateData([In] const GUID&amp; Name,[In] unsigned int DataSize,[In, Buffer] const void* pData)</unmanaged>	
            <unmanaged-short>IDXGIObject::SetPrivateData</unmanaged-short>	
        </member>
        <member name="M:SharpDX.DXGI.DXGIObject.SetPrivateDataInterface(System.Guid,SharpDX.ComObject)">
            <summary>	
            <p>Set an interface in the object's private data.</p>	
            </summary>	
            <param name="name"><dd>  <p>A <see cref="T:System.Guid"/> identifying the interface.</p> </dd></param>	
            <param name="unknownRef"><dd>  <p>The interface to set.</p> </dd></param>	
            <returns><p>Returns one of the following DXGI_ERROR.</p></returns>	
            <remarks>	
            <p>This API associates an interface reference with the object.</p><p>When the interface is set its reference count is incremented. When the data are overwritten (by calling SPD or SPDI with the same <see cref="T:System.Guid"/>) or the object is destroyed, ::Release() is called and the interface's reference count is decremented.</p><p><strong>Windows?Phone?8:</strong> This API is supported.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIObject::SetPrivateDataInterface']/*"/>	
            <msdn-id>bb174545</msdn-id>	
            <unmanaged>HRESULT IDXGIObject::SetPrivateDataInterface([In] const GUID&amp; Name,[In] const IUnknown* pUnknown)</unmanaged>	
            <unmanaged-short>IDXGIObject::SetPrivateDataInterface</unmanaged-short>	
        </member>
        <member name="M:SharpDX.DXGI.DXGIObject.GetPrivateData(System.Guid,System.Int32@,System.IntPtr)">
            <summary>	
            <p>Get a reference to the object's data.</p>	
            </summary>	
            <param name="name"><dd>  <p>A <see cref="T:System.Guid"/> identifying the data.</p> </dd></param>	
            <param name="dataSizeRef"><dd>  <p>The size of the data.</p> </dd></param>	
            <param name="dataRef"><dd>  <p>Pointer to the data.</p> </dd></param>	
            <returns><p>Returns one of the following DXGI_ERROR.</p></returns>	
            <remarks>	
            <p>If the data returned is a reference to an <strong><see cref="T:SharpDX.ComObject"/></strong>, or one of its derivative classes, previously set by <strong><see cref="M:SharpDX.DXGI.DXGIObject.SetPrivateDataInterface(System.Guid,SharpDX.ComObject)"/></strong>, you must call <strong>::Release()</strong> on the reference before the reference is freed to decrement the reference count.</p><p>You can pass <strong>GUID_DeviceType</strong> in the <em>Name</em> parameter of <strong>GetPrivateData</strong> to retrieve the device type from the display adapter object (<strong><see cref="T:SharpDX.DXGI.Adapter"/></strong>, <strong><see cref="T:SharpDX.DXGI.Adapter1"/></strong>, <strong>IDXGIAdapter2</strong>). </p><p><strong>To get the type of device on which the display adapter was created</strong></p><ol> <li>Call <strong>IUnknown::QueryInterface</strong> on the <strong><see cref="!:SharpDX.Direct3D11.Device"/></strong> or <strong><see cref="!:SharpDX.Direct3D10.Device"/></strong> object to retrieve the <strong><see cref="T:SharpDX.DXGI.Device"/></strong> object.</li> <li>Call <strong>GetParent</strong> on the <strong><see cref="T:SharpDX.DXGI.Device"/></strong> object to retrieve the <strong><see cref="T:SharpDX.DXGI.Adapter"/></strong> object.</li> <li>Call <strong>GetPrivateData</strong> on the <strong><see cref="T:SharpDX.DXGI.Adapter"/></strong> object with <strong>GUID_DeviceType</strong> to retrieve the type of device on which the display adapter was created. <em>pData</em> will point to a value from the driver-type enumeration (for example, a value from <strong><see cref="T:SharpDX.Direct3D.DriverType"/></strong>).</li> </ol><p>On Windows?7 or earlier, this type is either a value from <strong><see cref="!:SharpDX.Direct3D10.DriverType"/></strong> or <strong><see cref="T:SharpDX.Direct3D.DriverType"/></strong> depending on which kind of device was created. On Windows?8, this type is always a value from <strong><see cref="T:SharpDX.Direct3D.DriverType"/></strong>. Don't use <strong><see cref="M:SharpDX.DXGI.DXGIObject.SetPrivateData(System.Guid,System.Int32,System.IntPtr)"/></strong> with <strong>GUID_DeviceType</strong> because the behavior when doing so is undefined.</p><p><strong>Windows?Phone?8:</strong> This API is supported.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIObject::GetPrivateData']/*"/>	
            <msdn-id>bb174543</msdn-id>	
            <unmanaged>HRESULT IDXGIObject::GetPrivateData([In] const GUID&amp; Name,[InOut] unsigned int* pDataSize,[Out, Buffer] void* pData)</unmanaged>	
            <unmanaged-short>IDXGIObject::GetPrivateData</unmanaged-short>	
        </member>
        <member name="M:SharpDX.DXGI.DXGIObject.GetParent(System.Guid,System.IntPtr@)">
            <summary>	
            <p>Gets the parent of the object.</p>	
            </summary>	
            <param name="riid"><dd>  <p>The ID of the requested interface.</p> </dd></param>	
            <param name="parentOut"><dd>  <p>The address of a reference to the parent object.</p> </dd></param>	
            <returns><p>Returns one of the DXGI_ERROR values.</p></returns>	
            <remarks>	
            <p><strong>Windows?Phone?8:</strong> This API is supported.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIObject::GetParent']/*"/>	
            <msdn-id>bb174542</msdn-id>	
            <unmanaged>HRESULT IDXGIObject::GetParent([In] const GUID&amp; riid,[Out] void** ppParent)</unmanaged>	
            <unmanaged-short>IDXGIObject::GetParent</unmanaged-short>	
        </member>
        <member name="M:SharpDX.DXGI.Adapter.IsInterfaceSupported(System.Type)">
            <summary>
            Checks to see if a device interface for a graphics component is supported by the system.
            </summary>
            <param name="type">The GUID of the interface of the device version for which support is being checked. For example, typeof(ID3D10Device).GUID.</param>
            <returns>
              <c>true</c> if the interface is supported; otherwise, <c>false</c>.
            </returns>
            <msdn-id>Bb174524</msdn-id>	
            <unmanaged>HRESULT IDXGIAdapter::CheckInterfaceSupport([In] const GUID&amp; InterfaceName,[Out] LARGE_INTEGER* pUMDVersion)</unmanaged>	
            <unmanaged-short>IDXGIAdapter::CheckInterfaceSupport</unmanaged-short>	
        </member>
        <member name="M:SharpDX.DXGI.Adapter.IsInterfaceSupported``1">
            <summary>
            Checks to see if a device interface for a graphics component is supported by the system.
            </summary>
            <typeparam name="T">the interface of the device version for which support is being checked.</typeparam>
            <returns>
              <c>true</c> if the interface is supported; otherwise, <c>false</c>.
            </returns>
            <msdn-id>Bb174524</msdn-id>	
            <unmanaged>HRESULT IDXGIAdapter::CheckInterfaceSupport([In] const GUID&amp; InterfaceName,[Out] LARGE_INTEGER* pUMDVersion)</unmanaged>	
            <unmanaged-short>IDXGIAdapter::CheckInterfaceSupport</unmanaged-short>	
        </member>
        <member name="M:SharpDX.DXGI.Adapter.IsInterfaceSupported``1(System.Int64@)">
            <summary>
            Checks to see if a device interface for a graphics component is supported by the system.
            </summary>
            <typeparam name="T">the interface of the device version for which support is being checked.</typeparam>
            <param name="userModeVersion">The user mode driver version of InterfaceName. This is only returned if the interface is supported.</param>
            <returns>
              <c>true</c> if the interface is supported; otherwise, <c>false</c>.
            </returns>
            <msdn-id>Bb174524</msdn-id>	
            <unmanaged>HRESULT IDXGIAdapter::CheckInterfaceSupport([In] const GUID&amp; InterfaceName,[Out] LARGE_INTEGER* pUMDVersion)</unmanaged>	
            <unmanaged-short>IDXGIAdapter::CheckInterfaceSupport</unmanaged-short>	
        </member>
        <member name="M:SharpDX.DXGI.Adapter.IsInterfaceSupported(System.Type,System.Int64@)">
            <summary>
            Checks to see if a device interface for a graphics component is supported by the system.
            </summary>
            <param name="type">The GUID of the interface of the device version for which support is being checked. For example, typeof(ID3D10Device).GUID.</param>
            <param name="userModeVersion">The user mode driver version of InterfaceName. This is only returned if the interface is supported.</param>
            <returns>
              <c>true</c> if the interface is supported; otherwise, <c>false</c>.
            </returns>
            <msdn-id>Bb174524</msdn-id>	
            <unmanaged>HRESULT IDXGIAdapter::CheckInterfaceSupport([In] const GUID&amp; InterfaceName,[Out] LARGE_INTEGER* pUMDVersion)</unmanaged>	
            <unmanaged-short>IDXGIAdapter::CheckInterfaceSupport</unmanaged-short>	
        </member>
        <member name="M:SharpDX.DXGI.Adapter.GetOutput(System.Int32)">
            <summary>
            Gets an adapter (video card) outputs.
            </summary>
            <param name="outputIndex">The index of the output.</param>
            <returns>
            An instance of <see cref="T:SharpDX.DXGI.Output"/> 
            </returns>
            <unmanaged>HRESULT IDXGIAdapter::EnumOutputs([In] unsigned int Output,[Out] IDXGIOutput** ppOutput)</unmanaged>
            <remarks>
            When the EnumOutputs method succeeds and fills the ppOutput parameter with the address of the reference to the output interface, EnumOutputs increments the output interface's reference count. To avoid a memory leak, when you finish using the  output interface, call the Release method to decrement the reference count.EnumOutputs first returns the output on which the desktop primary is displayed. This adapter corresponds with an index of zero. EnumOutputs then returns other outputs.
            </remarks>
            <exception cref="T:SharpDX.SharpDXException">if the index is greater than the number of outputs, result code <see cref="F:SharpDX.DXGI.ResultCode.NotFound"/></exception>
            <msdn-id>bb174525</msdn-id>	
            <unmanaged>HRESULT IDXGIAdapter::EnumOutputs([In] unsigned int Output,[Out] IDXGIOutput** ppOutput)</unmanaged>	
            <unmanaged-short>IDXGIAdapter::EnumOutputs</unmanaged-short>	
        </member>
        <member name="M:SharpDX.DXGI.Adapter.GetOutputCount">
            <summary>
              Return the number of available outputs from this adapter.
            </summary>
            <returns>The number of outputs</returns>
            <msdn-id>bb174525</msdn-id>	
            <unmanaged>HRESULT IDXGIAdapter::EnumOutputs([In] unsigned int Output,[Out] IDXGIOutput** ppOutput)</unmanaged>	
            <unmanaged-short>IDXGIAdapter::EnumOutputs</unmanaged-short>	
        </member>
        <member name="M:SharpDX.DXGI.Adapter.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.DXGI.Adapter"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.DXGI.Adapter.op_Explicit(System.IntPtr)~SharpDX.DXGI.Adapter">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:SharpDX.DXGI.Adapter"/>. (This method is a shortcut to <see cref="P:SharpDX.CppObject.NativePointer"/>) 
            </summary>
            <param name="nativePointer">The native pointer.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:SharpDX.DXGI.Adapter.GetOutput(System.Int32,SharpDX.DXGI.Output@)">
            <summary>	
            <p>Enumerate adapter (video card) outputs.</p>	
            </summary>	
            <param name="output"><dd>  <p>The index of the output.</p> </dd></param>	
            <param name="outputOut"><dd>  <p>The address of a reference to an <strong><see cref="T:SharpDX.DXGI.Output"/></strong> interface at the position specified by the <em>Output</em> parameter.</p> </dd></param>	
            <returns><p>A code that indicates success or failure (see DXGI_ERROR). Will return <see cref="F:SharpDX.DXGI.ResultCode.NotFound"/> if the index is greater than the number of outputs.</p></returns>	
            <remarks>	
            <p><strong>Note</strong>??If you call this API in a Session 0 process, it returns <strong><see cref="F:SharpDX.DXGI.ResultCode.NotCurrentlyAvailable"/></strong>.</p><p>When the <strong>EnumOutputs</strong> method succeeds and fills the <em>ppOutput</em> parameter with the address of the reference to the output interface, <strong>EnumOutputs</strong> increments the output interface's reference count. To avoid a memory leak, when you finish using the  output interface, call the <strong>Release</strong> method to decrement the reference count.</p><p><strong>EnumOutputs</strong> first returns the output on which the desktop primary is displayed. This output corresponds with an index of zero. <strong>EnumOutputs</strong> then returns other outputs.</p><p><strong>Windows?Phone?8:</strong> This API is supported.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIAdapter::EnumOutputs']/*"/>	
            <msdn-id>bb174525</msdn-id>	
            <unmanaged>HRESULT IDXGIAdapter::EnumOutputs([In] unsigned int Output,[Out] IDXGIOutput** ppOutput)</unmanaged>	
            <unmanaged-short>IDXGIAdapter::EnumOutputs</unmanaged-short>	
        </member>
        <member name="M:SharpDX.DXGI.Adapter.GetDescription(SharpDX.DXGI.AdapterDescription@)">
            <summary>	
            <p>Gets a DXGI 1.0 description of an adapter (or video card).</p>	
            </summary>	
            <param name="descRef"><dd>  <p>A reference to a <strong><see cref="T:SharpDX.DXGI.AdapterDescription"/></strong> structure that describes the adapter. This parameter must not be <strong><c>null</c></strong>. On feature level 9 graphics hardware, <strong>GetDesc</strong> returns zeros for the PCI ID in the <strong>VendorId</strong>, <strong>DeviceId</strong>, <strong>SubSysId</strong>, and <strong>Revision</strong> members of <strong><see cref="T:SharpDX.DXGI.AdapterDescription"/></strong> and ?Software Adapter? for the description string in the <strong>Description</strong> member.</p> </dd></param>	
            <returns><p>Returns <see cref="F:SharpDX.Result.Ok"/> if successful; otherwise returns E_INVALIDARG if the <em>pDesc</em> parameter is <strong><c>null</c></strong>.   </p></returns>	
            <remarks>	
            <p>Graphics apps can use the DXGI API to retrieve an accurate set of graphics memory  values on systems that have Windows Display Driver Model (WDDM) drivers. The following are the critical steps involved.</p><ul> <li> Graphics driver model determination ? Because DXGI is only available on systems with WDDM drivers, the app must first confirm the driver model by using the following API.  <pre> HasWDDMDriver()	
            { LPDIRECT3DCREATE9EX pD3D9Create9Ex = <c>null</c>; HMODULE             hD3D9          = <c>null</c>; hD3D9 = LoadLibrary( L"d3d9.dll" ); if ( <c>null</c> == hD3D9 ) { return false; } // /*  Try to create <see cref="!:SharpDX.Direct3D9.Direct3DEx"/> interface (also known as a DX9L interface). This interface can only be created if the driver is a WDDM driver. */ // pD3D9Create9Ex = (LPDIRECT3DCREATE9EX) GetProcAddress( hD3D9, "Direct3DCreate9Ex" ); return pD3D9Create9Ex != <c>null</c>;	
            } </pre>  </li> <li> Retrieval of graphics memory values.? After the app determines the driver model to be WDDM, the app can use the Direct3D 10 or later API and DXGI to get the amount of graphics memory.  After you create a Direct3D device, use this code to obtain  a <strong><see cref="T:SharpDX.DXGI.AdapterDescription"/></strong> structure that contains the amount of available graphics memory.  <pre> <see cref="T:SharpDX.DXGI.Device"/> * pDXGIDevice;	
            hr = g_pd3dDevice-&gt;QueryInterface(__uuidof(<see cref="T:SharpDX.DXGI.Device"/>), (void **)&amp;pDXGIDevice);	
            <see cref="T:SharpDX.DXGI.Adapter"/> * pDXGIAdapter;	
            pDXGIDevice-&gt;GetAdapter(&amp;pDXGIAdapter);	
            <see cref="T:SharpDX.DXGI.AdapterDescription"/> adapterDesc;	
            pDXGIAdapter-&gt;GetDesc(&amp;adapterDesc); </pre>  </li> </ul><p><strong>Windows?Phone?8:</strong> This API is supported.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIAdapter::GetDesc']/*"/>	
            <msdn-id>bb174526</msdn-id>	
            <unmanaged>HRESULT IDXGIAdapter::GetDesc([Out] DXGI_ADAPTER_DESC* pDesc)</unmanaged>	
            <unmanaged-short>IDXGIAdapter::GetDesc</unmanaged-short>	
        </member>
        <member name="M:SharpDX.DXGI.Adapter.CheckInterfaceSupport(System.Guid,System.Int64@)">
            <summary>	
            <p>Checks whether the system supports a device interface for a graphics component.</p>	
            </summary>	
            <param name="interfaceName"><dd>  <p>The <see cref="T:System.Guid"/> of the interface of the device version for which support is being checked. For example, __uuidof(<see cref="!:SharpDX.Direct3D10.Device"/>).</p> </dd></param>	
            <param name="uMDVersionRef"><dd>  <p>The user mode driver version of InterfaceName. This is  returned only if the interface is supported. This parameter can be <strong><c>null</c></strong>.</p> </dd></param>	
            <returns><p><see cref="F:SharpDX.Result.Ok"/> indicates that the interface is supported, otherwise <see cref="F:SharpDX.DXGI.ResultCode.Unsupported"/> is returned (For more information, see DXGI_ERROR).</p></returns>	
            <remarks>	
            <p><strong>Note</strong>??You can  use <strong>CheckInterfaceSupport</strong> only to  check whether a Direct3D 10.x interface is supported, and only on Windows Vista SP1 and later versions of the operating system. If you try to use <strong>CheckInterfaceSupport</strong> to check whether a Direct3D 11.x and later version interface is supported, <strong>CheckInterfaceSupport</strong> returns <see cref="F:SharpDX.DXGI.ResultCode.Unsupported"/>. Therefore, do not use <strong>CheckInterfaceSupport</strong>. Instead, to verify whether the operating system supports a particular interface, try to create the interface. For example, if you call the <strong><see cref="!:SharpDX.Direct3D11.Device.CreateBlendState"/></strong> method and it fails, the operating system does not support the <strong><see cref="!:SharpDX.Direct3D11.BlendState"/></strong> interface.</p><p><strong>Windows?Phone?8:</strong> This API is supported.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIAdapter::CheckInterfaceSupport']/*"/>	
            <msdn-id>bb174524</msdn-id>	
            <unmanaged>HRESULT IDXGIAdapter::CheckInterfaceSupport([In] const GUID&amp; InterfaceName,[Out] LARGE_INTEGER* pUMDVersion)</unmanaged>	
            <unmanaged-short>IDXGIAdapter::CheckInterfaceSupport</unmanaged-short>	
        </member>
        <member name="P:SharpDX.DXGI.Adapter.Outputs">
            <summary>
            Gets all outputs from this adapter.
            </summary>
            <msdn-id>bb174525</msdn-id>	
            <unmanaged>HRESULT IDXGIAdapter::EnumOutputs([In] unsigned int Output,[Out] IDXGIOutput** ppOutput)</unmanaged>	
            <unmanaged-short>IDXGIAdapter::EnumOutputs</unmanaged-short>	
        </member>
        <member name="P:SharpDX.DXGI.Adapter.Description">
            <summary>	
            <p>Gets a DXGI 1.0 description of an adapter (or video card).</p>	
            </summary>	
            <remarks>	
            <p>Graphics apps can use the DXGI API to retrieve an accurate set of graphics memory  values on systems that have Windows Display Driver Model (WDDM) drivers. The following are the critical steps involved.</p><ul> <li> Graphics driver model determination ? Because DXGI is only available on systems with WDDM drivers, the app must first confirm the driver model by using the following API.  <pre> HasWDDMDriver()	
            { LPDIRECT3DCREATE9EX pD3D9Create9Ex = <c>null</c>; HMODULE             hD3D9          = <c>null</c>; hD3D9 = LoadLibrary( L"d3d9.dll" ); if ( <c>null</c> == hD3D9 ) { return false; } // /*  Try to create <see cref="!:SharpDX.Direct3D9.Direct3DEx"/> interface (also known as a DX9L interface). This interface can only be created if the driver is a WDDM driver. */ // pD3D9Create9Ex = (LPDIRECT3DCREATE9EX) GetProcAddress( hD3D9, "Direct3DCreate9Ex" ); return pD3D9Create9Ex != <c>null</c>;	
            } </pre>  </li> <li> Retrieval of graphics memory values.? After the app determines the driver model to be WDDM, the app can use the Direct3D 10 or later API and DXGI to get the amount of graphics memory.  After you create a Direct3D device, use this code to obtain  a <strong><see cref="T:SharpDX.DXGI.AdapterDescription"/></strong> structure that contains the amount of available graphics memory.  <pre> <see cref="T:SharpDX.DXGI.Device"/> * pDXGIDevice;	
            hr = g_pd3dDevice-&gt;QueryInterface(__uuidof(<see cref="T:SharpDX.DXGI.Device"/>), (void **)&amp;pDXGIDevice);	
            <see cref="T:SharpDX.DXGI.Adapter"/> * pDXGIAdapter;	
            pDXGIDevice-&gt;GetAdapter(&amp;pDXGIAdapter);	
            <see cref="T:SharpDX.DXGI.AdapterDescription"/> adapterDesc;	
            pDXGIAdapter-&gt;GetDesc(&amp;adapterDesc); </pre>  </li> </ul><p><strong>Windows?Phone?8:</strong> This API is supported.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIAdapter::GetDesc']/*"/>	
            <msdn-id>bb174526</msdn-id>	
            <unmanaged>GetDesc</unmanaged>	
            <unmanaged-short>GetDesc</unmanaged-short>	
            <unmanaged>HRESULT IDXGIAdapter::GetDesc([Out] DXGI_ADAPTER_DESC* pDesc)</unmanaged>
        </member>
        <member name="T:SharpDX.DXGI.AssemblyDoc">
            <summary>
            The <see cref="A:SharpDX.DXGI"/> assembly provides managed DXGI API.
            </summary>
            <msdn-id>hh404534</msdn-id>
            <unmanaged>DXGI</unmanaged>	
            <unmanaged-short>DXGI</unmanaged-short>	
        </member>
        <member name="T:SharpDX.DXGI.NamespaceDoc">
            <summary>
            The <see cref="N:SharpDX.DXGI"/> namespace provides a managed DXGI API.
            </summary>
            <msdn-id>hh404534</msdn-id>
            <unmanaged>DXGI</unmanaged>	
            <unmanaged-short>DXGI</unmanaged-short>	
        </member>
        <member name="T:SharpDX.DXGI.Device">
            <summary>	
            <p>An <strong><see cref="T:SharpDX.DXGI.Device"/></strong> interface implements a derived class for DXGI objects that produce image data.</p>	
            </summary>	
            <remarks>	
            <p>The <strong><see cref="T:SharpDX.DXGI.Device"/></strong> interface is designed for use by DXGI objects that need access to other DXGI objects. This interface is useful to  applications that do not use Direct3D to communicate with DXGI.</p><p>The Direct3D create device functions return a Direct3D device object. This Direct3D device object implements the <strong><see cref="T:SharpDX.ComObject"/></strong> interface. You can query this Direct3D device object for the device's corresponding <strong><see cref="T:SharpDX.DXGI.Device"/></strong> interface. To retrieve the <strong><see cref="T:SharpDX.DXGI.Device"/></strong> interface of a Direct3D device, use the following code:</p><pre><see cref="T:SharpDX.DXGI.Device"/> * pDXGIDevice;	
            hr = g_pd3dDevice-&gt;QueryInterface(__uuidof(<see cref="T:SharpDX.DXGI.Device"/>), (void **)&amp;pDXGIDevice);	
            </pre><p><strong>Windows?Phone?8:</strong> This API is supported.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIDevice']/*"/>	
            <msdn-id>bb174527</msdn-id>	
            <unmanaged>IDXGIDevice</unmanaged>	
            <unmanaged-short>IDXGIDevice</unmanaged-short>	
        </member>
        <member name="M:SharpDX.DXGI.Device.QueryResourceResidency(SharpDX.ComObject[])">
            <summary>	
            Gets the residency status of an array of resources.	
            </summary>	
            <remarks>	
            The information returned by the pResidencyStatus argument array describes the residency status at the time that the QueryResourceResidency method was called.   Note that the residency status will constantly change. If you call the QueryResourceResidency method during a device removed state, the pResidencyStatus argument will return the DXGI_RESIDENCY_EVICTED_TO_DISK flag. Note??This method should not be called every frame as it incurs a non-trivial amount of overhead. 	
            </remarks>	
            <param name="comObjects">An array of <see cref="T:SharpDX.DXGI.Resource"/> interfaces. </param>
            <returns>Returns an array of <see cref="T:SharpDX.DXGI.Residency"/> flags. Each element describes the residency status for corresponding element in  the ppResources argument array. </returns>
            <unmanaged>HRESULT IDXGIDevice::QueryResourceResidency([In, Buffer] const IUnknown** ppResources,[Out, Buffer] DXGI_RESIDENCY* pResidencyStatus,[None] int NumResources)</unmanaged>
        </member>
        <member name="M:SharpDX.DXGI.Device.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.DXGI.Device"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.DXGI.Device.op_Explicit(System.IntPtr)~SharpDX.DXGI.Device">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:SharpDX.DXGI.Device"/>. (This method is a shortcut to <see cref="P:SharpDX.CppObject.NativePointer"/>) 
            </summary>
            <param name="nativePointer">The native pointer.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:SharpDX.DXGI.Device.GetAdapter(SharpDX.DXGI.Adapter@)">
            <summary>	
            <p>Returns the adapter for the specified device.</p>	
            </summary>	
            <param name="adapterRef"><dd>  <p>The address of an <strong><see cref="T:SharpDX.DXGI.Adapter"/></strong> interface reference to the adapter.  This parameter must not be <strong><c>null</c></strong>.</p> </dd></param>	
            <returns><p>Returns <see cref="F:SharpDX.Result.Ok"/> if successful; otherwise, returns one of the DXGI_ERROR that indicates failure. If the <em>pAdapter</em> parameter is <strong><c>null</c></strong> this method returns E_INVALIDARG.</p></returns>	
            <remarks>	
            <p>If the <strong>GetAdapter</strong> method succeeds, the reference count on the adapter interface will be incremented. To avoid a memory leak, be sure to release the interface when you are finished using it.</p><p><strong>Windows?Phone?8:</strong> This API is supported.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIDevice::GetAdapter']/*"/>	
            <msdn-id>bb174531</msdn-id>	
            <unmanaged>HRESULT IDXGIDevice::GetAdapter([Out] IDXGIAdapter** pAdapter)</unmanaged>	
            <unmanaged-short>IDXGIDevice::GetAdapter</unmanaged-short>	
        </member>
        <member name="M:SharpDX.DXGI.Device.CreateSurface(SharpDX.DXGI.SurfaceDescription@,System.Int32,System.Int32,System.Nullable{SharpDX.DXGI.SharedResource},SharpDX.DXGI.Surface@)">
            <summary>	
            <p>Returns a surface. This method is used internally and you should not call it directly in your application.</p>	
            </summary>	
            <param name="descRef"><dd>  <p>A reference to a <strong><see cref="T:SharpDX.DXGI.SurfaceDescription"/></strong> structure that describes the surface.</p> </dd></param>	
            <param name="numSurfaces"><dd>  <p>The number of surfaces to create.</p> </dd></param>	
            <param name="usage"><dd>  <p>A DXGI_USAGE flag that specifies how the surface is expected to be used.</p> </dd></param>	
            <param name="sharedResourceRef"><dd>  <p>An optional reference to a <strong><see cref="T:SharpDX.DXGI.SharedResource"/></strong> structure that contains shared resource information for opening views of such resources.</p> </dd></param>	
            <param name="surfaceOut"><dd>  <p>The address of an <strong><see cref="T:SharpDX.DXGI.Surface"/></strong> interface reference to the first created surface.</p> </dd></param>	
            <returns><p>Returns <see cref="F:SharpDX.Result.Ok"/> if successful; an error code otherwise.  For a list of error codes, see DXGI_ERROR.</p></returns>	
            <remarks>	
            <p>The <strong>CreateSurface</strong> method creates a buffer to exchange data between one or more devices. It is used internally, and you should not directly call it.</p><p>The runtime automatically creates an <strong><see cref="T:SharpDX.DXGI.Surface"/></strong> interface when it creates a Direct3D resource object that represents a surface. For example, the runtime creates an <strong><see cref="T:SharpDX.DXGI.Surface"/></strong> interface when it calls <strong><see cref="!:SharpDX.Direct3D11.Device.CreateTexture2D"/></strong> or <strong><see cref="!:SharpDX.Direct3D10.Device.CreateTexture2D"/></strong> to create a 2D texture. To retrieve the <strong><see cref="T:SharpDX.DXGI.Surface"/></strong> interface that represents the 2D texture surface, call <strong>ID3D11Texture2D::QueryInterface</strong> or <strong>ID3D10Texture2D::QueryInterface</strong>. In this call, you must pass the identifier of <strong><see cref="T:SharpDX.DXGI.Surface"/></strong>. If the 2D texture has only a single MIP-map level and does not consist of an array of textures, <strong>QueryInterface</strong> succeeds and returns a reference to the <strong><see cref="T:SharpDX.DXGI.Surface"/></strong> interface reference. Otherwise, <strong>QueryInterface</strong> fails and does not return the reference to <strong><see cref="T:SharpDX.DXGI.Surface"/></strong>. 	
            </p><p><strong>Windows?Phone?8:</strong> This API is supported.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIDevice::CreateSurface']/*"/>	
            <msdn-id>bb174530</msdn-id>	
            <unmanaged>HRESULT IDXGIDevice::CreateSurface([In] const DXGI_SURFACE_DESC* pDesc,[In] unsigned int NumSurfaces,[In] unsigned int Usage,[In, Optional] const DXGI_SHARED_RESOURCE* pSharedResource,[Out] IDXGISurface** ppSurface)</unmanaged>	
            <unmanaged-short>IDXGIDevice::CreateSurface</unmanaged-short>	
        </member>
        <member name="M:SharpDX.DXGI.Device.QueryResourceResidency(SharpDX.ComObject[],SharpDX.DXGI.Residency[],System.Int32)">
            <summary>	
            <p>Gets the residency status of an array of resources.</p>	
            </summary>	
            <param name="resourcesOut"><dd>  <p>An array of <strong><see cref="T:SharpDX.DXGI.Resource"/></strong> interfaces.</p> </dd></param>	
            <param name="residencyStatusRef"><dd>  <p>An array of <strong><see cref="T:SharpDX.DXGI.Residency"/></strong> flags. Each element describes the residency status for corresponding element in  the <em>ppResources</em> argument array.</p> </dd></param>	
            <param name="numResources"><dd>  <p>The number of resources in the <em>ppResources</em> argument array and <em>pResidencyStatus</em> argument array.</p> </dd></param>	
            <returns><p>Returns <see cref="F:SharpDX.Result.Ok"/> if successful; otherwise, returns <see cref="F:SharpDX.DXGI.ResultCode.DeviceRemoved"/>, E_INVALIDARG, or  E_POINTER (see WinError.h for more information).</p></returns>	
            <remarks>	
            <p>The information returned by the <em>pResidencyStatus</em> argument array describes the residency status at the time that the <strong>QueryResourceResidency</strong> method was called.   </p><p><strong>Note</strong>??The residency status will constantly change.</p><p>If you call the <strong>QueryResourceResidency</strong> method during a device removed state, the <em>pResidencyStatus</em> argument will return the <strong><see cref="F:SharpDX.DXGI.Residency.ResidentInSharedMemory"/></strong> flag.</p><p><strong>Note</strong>??This method should not be called every frame as it incurs a non-trivial amount of overhead.</p><p><strong>Windows?Phone?8:</strong> This API is supported.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIDevice::QueryResourceResidency']/*"/>	
            <msdn-id>bb174533</msdn-id>	
            <unmanaged>HRESULT IDXGIDevice::QueryResourceResidency([In, Buffer] const IUnknown** ppResources,[Out, Buffer] DXGI_RESIDENCY* pResidencyStatus,[In] unsigned int NumResources)</unmanaged>	
            <unmanaged-short>IDXGIDevice::QueryResourceResidency</unmanaged-short>	
        </member>
        <member name="M:SharpDX.DXGI.Device.QueryResourceResidency(SharpDX.ComArray{SharpDX.ComObject},SharpDX.DXGI.Residency[],System.Int32)">
            <summary>	
            <p>Gets the residency status of an array of resources.</p>	
            </summary>	
            <param name="resourcesOut"><dd>  <p>An array of <strong><see cref="T:SharpDX.DXGI.Resource"/></strong> interfaces.</p> </dd></param>	
            <param name="residencyStatusRef"><dd>  <p>An array of <strong><see cref="T:SharpDX.DXGI.Residency"/></strong> flags. Each element describes the residency status for corresponding element in  the <em>ppResources</em> argument array.</p> </dd></param>	
            <param name="numResources"><dd>  <p>The number of resources in the <em>ppResources</em> argument array and <em>pResidencyStatus</em> argument array.</p> </dd></param>	
            <returns><p>Returns <see cref="F:SharpDX.Result.Ok"/> if successful; otherwise, returns <see cref="F:SharpDX.DXGI.ResultCode.DeviceRemoved"/>, E_INVALIDARG, or  E_POINTER (see WinError.h for more information).</p></returns>	
            <remarks>	
            <p>The information returned by the <em>pResidencyStatus</em> argument array describes the residency status at the time that the <strong>QueryResourceResidency</strong> method was called.   </p><p><strong>Note</strong>??The residency status will constantly change.</p><p>If you call the <strong>QueryResourceResidency</strong> method during a device removed state, the <em>pResidencyStatus</em> argument will return the <strong><see cref="F:SharpDX.DXGI.Residency.ResidentInSharedMemory"/></strong> flag.</p><p><strong>Note</strong>??This method should not be called every frame as it incurs a non-trivial amount of overhead.</p><p><strong>Windows?Phone?8:</strong> This API is supported.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIDevice::QueryResourceResidency']/*"/>	
            <msdn-id>bb174533</msdn-id>	
            <unmanaged>HRESULT IDXGIDevice::QueryResourceResidency([In, Buffer] const IUnknown** ppResources,[Out, Buffer] DXGI_RESIDENCY* pResidencyStatus,[In] unsigned int NumResources)</unmanaged>	
            <unmanaged-short>IDXGIDevice::QueryResourceResidency</unmanaged-short>	
        </member>
        <member name="M:SharpDX.DXGI.Device.SetGPUThreadPriority(System.Int32)">
            <summary>	
            <p>Sets the GPU thread priority.</p>	
            </summary>	
            <param name="priority"><dd>  <p>A value that specifies the required GPU thread priority. This value must be between -7 and 7, inclusive, where 0 represents normal priority.</p> </dd></param>	
            <returns><p>Return <see cref="F:SharpDX.Result.Ok"/> if successful; otherwise, returns E_INVALIDARG if the <em>Priority</em> parameter is invalid.</p></returns>	
            <remarks>	
            <p>The values for the <em>Priority</em> parameter function as follows:</p><ul> <li>Positive values increase the likelihood that the GPU scheduler will grant GPU execution cycles to the device when rendering.</li> <li>Negative values lessen the likelihood that the device will receive GPU execution cycles when devices compete for them.</li> <li>The device is guaranteed to receive some GPU execution cycles at all settings.</li> </ul><p>To use the <strong>SetGPUThreadPriority</strong> method, you should have a comprehensive understanding of GPU scheduling. You should profile your application to ensure that it behaves as intended. If used inappropriately, the <strong>SetGPUThreadPriority</strong> method can impede rendering speed and result in a poor user experience.</p><p><strong>Windows?Phone?8:</strong> This API is supported.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIDevice::SetGPUThreadPriority']/*"/>	
            <msdn-id>bb174534</msdn-id>	
            <unmanaged>HRESULT IDXGIDevice::SetGPUThreadPriority([In] int Priority)</unmanaged>	
            <unmanaged-short>IDXGIDevice::SetGPUThreadPriority</unmanaged-short>	
        </member>
        <member name="M:SharpDX.DXGI.Device.GetGPUThreadPriority(System.Int32@)">
            <summary>	
            <p>Gets the GPU thread priority.</p>	
            </summary>	
            <param name="priorityRef"><dd>  <p>A reference to a variable that receives a value that indicates the current GPU thread priority. The value will be between -7 and 7, inclusive, where 0 represents normal priority.</p> </dd></param>	
            <returns><p>Return <see cref="F:SharpDX.Result.Ok"/> if successful; otherwise, returns E_POINTER if the <em>pPriority</em> parameter is <strong><c>null</c></strong>.</p></returns>	
            <remarks>	
            <p><strong>Windows?Phone?8:</strong> This API is supported.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIDevice::GetGPUThreadPriority']/*"/>	
            <msdn-id>bb174532</msdn-id>	
            <unmanaged>HRESULT IDXGIDevice::GetGPUThreadPriority([Out] int* pPriority)</unmanaged>	
            <unmanaged-short>IDXGIDevice::GetGPUThreadPriority</unmanaged-short>	
        </member>
        <member name="P:SharpDX.DXGI.Device.Adapter">
            <summary>	
            <p>Returns the adapter for the specified device.</p>	
            </summary>	
            <remarks>	
            <p>If the <strong>GetAdapter</strong> method succeeds, the reference count on the adapter interface will be incremented. To avoid a memory leak, be sure to release the interface when you are finished using it.</p><p><strong>Windows?Phone?8:</strong> This API is supported.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIDevice::GetAdapter']/*"/>	
            <msdn-id>bb174531</msdn-id>	
            <unmanaged>GetAdapter</unmanaged>	
            <unmanaged-short>GetAdapter</unmanaged-short>	
            <unmanaged>HRESULT IDXGIDevice::GetAdapter([Out] IDXGIAdapter** pAdapter)</unmanaged>
        </member>
        <member name="P:SharpDX.DXGI.Device.GPUThreadPriority">
            <summary>	
            <p>Gets or sets the GPU thread priority.</p>	
            </summary>	
            <remarks>	
            <p><strong>Windows?Phone?8:</strong> This API is supported.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIDevice::GetGPUThreadPriority']/*"/>	
            <msdn-id>bb174532</msdn-id>	
            <unmanaged>GetGPUThreadPriority / SetGPUThreadPriority</unmanaged>	
            <unmanaged-short>GetGPUThreadPriority</unmanaged-short>	
            <unmanaged>HRESULT IDXGIDevice::GetGPUThreadPriority([Out] int* pPriority)</unmanaged>
        </member>
        <member name="T:SharpDX.DXGI.DeviceChild">
            <summary>	
            <p>Inherited from objects that are tied to the device so that they can retrieve a reference to it.</p>	
            </summary>	
            <remarks>	
            <p><strong>Windows?Phone?8:</strong> This API is supported.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIDeviceSubObject']/*"/>	
            <msdn-id>bb174528</msdn-id>	
            <unmanaged>IDXGIDeviceSubObject</unmanaged>	
            <unmanaged-short>IDXGIDeviceSubObject</unmanaged-short>	
        </member>
        <member name="M:SharpDX.DXGI.DeviceChild.GetDevice``1">
            <summary>
            Retrieves the device.
            </summary>
            <typeparam name="T">The interface that is returned can be any interface published by the device.</typeparam>
            <returns>The associated device. </returns>
            <unmanaged>HRESULT IDXGIDeviceSubObject::GetDevice([In] GUID* riid,[Out] void** ppDevice)</unmanaged>
        </member>
        <member name="M:SharpDX.DXGI.DeviceChild.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.DXGI.DeviceChild"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.DXGI.DeviceChild.op_Explicit(System.IntPtr)~SharpDX.DXGI.DeviceChild">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:SharpDX.DXGI.DeviceChild"/>. (This method is a shortcut to <see cref="P:SharpDX.CppObject.NativePointer"/>) 
            </summary>
            <param name="nativePointer">The native pointer.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:SharpDX.DXGI.DeviceChild.GetDevice(System.Guid,System.IntPtr@)">
            <summary>	
            <p>Retrieves the device.</p>	
            </summary>	
            <param name="riid"><dd>  <p>The reference id for the device.</p> </dd></param>	
            <param name="deviceOut"><dd>  <p>The address of a reference to the device.</p> </dd></param>	
            <returns><p>A code that indicates success or failure (see DXGI_ERROR).</p></returns>	
            <remarks>	
            <p>The type of interface that is returned can be any interface published by the device. For example, it could be an <see cref="T:SharpDX.DXGI.Device"/> * called pDevice, and therefore the REFIID would be obtained by calling __uuidof(pDevice).</p><p><strong>Windows?Phone?8:</strong> This API is supported.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIDeviceSubObject::GetDevice']/*"/>	
            <msdn-id>bb174529</msdn-id>	
            <unmanaged>HRESULT IDXGIDeviceSubObject::GetDevice([In] const GUID&amp; riid,[Out] void** ppDevice)</unmanaged>	
            <unmanaged-short>IDXGIDeviceSubObject::GetDevice</unmanaged-short>	
        </member>
        <member name="P:SharpDX.DXGI.DeviceChild.DebugName">
            <summary>
            Gets or sets the debug-name for this object.
            </summary>
            <value>
            The debug name.
            </value>
        </member>
        <member name="T:SharpDX.DXGI.Factory">
            <summary>	
            <p>An <strong><see cref="T:SharpDX.DXGI.Factory"/></strong> interface implements methods for generating DXGI objects (which handle full screen transitions).</p>	
            </summary>	
            <remarks>	
            <p>Create a factory by calling <strong>CreateDXGIFactory</strong>.</p><p>Because you can create a Direct3D device without creating a swap chain, you might need to retrieve the factory that is used to create the device in order to create a swap chain.	
            You can request the <strong><see cref="T:SharpDX.DXGI.Device"/></strong> interface from the Direct3D device and then use the <strong><see cref="M:SharpDX.DXGI.DXGIObject.GetParent(System.Guid,System.IntPtr@)"/></strong> method to locate 	
            the factory.  The following code shows how.</p><pre><see cref="T:SharpDX.DXGI.Device"/> * pDXGIDevice;	
            hr = g_pd3dDevice-&gt;QueryInterface(__uuidof(<see cref="T:SharpDX.DXGI.Device"/>), (void **)&amp;pDXGIDevice); <see cref="T:SharpDX.DXGI.Adapter"/> * pDXGIAdapter;	
            hr = pDXGIDevice-&gt;GetParent(__uuidof(<see cref="T:SharpDX.DXGI.Adapter"/>), (void **)&amp;pDXGIAdapter); <see cref="T:SharpDX.DXGI.Factory"/> * pIDXGIFactory;	
            pDXGIAdapter-&gt;GetParent(__uuidof(<see cref="T:SharpDX.DXGI.Factory"/>), (void **)&amp;pIDXGIFactory);	
            </pre><p><strong>Windows?Phone?8:</strong> This API is supported.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIFactory']/*"/>	
            <msdn-id>bb174535</msdn-id>	
            <unmanaged>IDXGIFactory</unmanaged>	
            <unmanaged-short>IDXGIFactory</unmanaged-short>	
        </member>
        <member name="M:SharpDX.DXGI.Factory.#ctor">
            <summary>
              Default Constructor for Factory
            </summary>
        </member>
        <member name="M:SharpDX.DXGI.Factory.CreateSoftwareAdapter(System.Reflection.Module)">
            <summary>	
            Create an adapter interface that represents a software adapter.	
            </summary>	
            <remarks>	
            A software adapter is a DLL that implements the entirety of a device driver interface, plus emulation, if necessary, of kernel-mode graphics components for Windows. Details on implementing a software adapter can be found in the Windows Vista Driver Development Kit. This is a very complex development task, and is not recommended for general readers. Calling this method will increment the module's reference count by one. The reference count can be decremented by calling {{FreeLibrary}}. The typical calling scenario is to call {{LoadLibrary}}, pass the handle to CreateSoftwareAdapter, then immediately call {{FreeLibrary}} on the DLL and forget the DLL's {{HMODULE}}. Since the software adapter calls FreeLibrary when it is destroyed, the lifetime of the DLL will now be owned by the adapter, and the application is free of any further consideration of its lifetime. 	
            </remarks>	
            <param name="module">Handle to the software adapter's DLL.</param>
            <returns>A reference to an adapter (see <see cref="T:SharpDX.DXGI.Adapter" />). </returns>
            <unmanaged>HRESULT IDXGIFactory::CreateSoftwareAdapter([None] void* Module,[Out] IDXGIAdapter** ppAdapter)</unmanaged>
        </member>
        <member name="M:SharpDX.DXGI.Factory.GetAdapter(System.Int32)">
            <summary>
            Gets both adapters (video cards) with or without outputs.
            </summary>
            <param name="index"><para>The index of the adapter to enumerate.</para></param>
            <returns>a reference to an <see cref="T:SharpDX.DXGI.Adapter"/> interface at the position specified by the Adapter parameter</returns>
            <remarks>
            When you create a factory, the factory enumerates the set of adapters that are available in the system. Therefore, if you change the adapters in a system, you must destroy  and recreate the <see cref="T:SharpDX.DXGI.Factory"/> object. The number of adapters in a system changes when you add or remove a display card, or dock or undock a laptop.When the EnumAdapters method succeeds and fills the ppAdapter parameter with the address of the reference to the adapter interface, EnumAdapters increments the adapter interface's reference count. When you finish using the  adapter interface, call the Release method to decrement the reference count before you destroy the reference.EnumAdapters first returns the local adapter with the output on which the desktop primary is displayed. This adapter corresponds with an index of zero. EnumAdapters then returns other adapters with outputs.	
            </remarks>
            <unmanaged>HRESULT IDXGIFactory::EnumAdapters([In] unsigned int Adapter,[Out] IDXGIAdapter** ppAdapter)</unmanaged>
        </member>
        <member name="M:SharpDX.DXGI.Factory.GetAdapterCount">
            <summary>
              Return the number of available adapters from this factory.
            </summary>
            <returns>The number of adapters</returns>
            <unmanaged>HRESULT IDXGIFactory::EnumAdapters([In] unsigned int Adapter,[Out] IDXGIAdapter** ppAdapter)</unmanaged>	
        </member>
        <member name="M:SharpDX.DXGI.Factory.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.DXGI.Factory"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.DXGI.Factory.op_Explicit(System.IntPtr)~SharpDX.DXGI.Factory">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:SharpDX.DXGI.Factory"/>. (This method is a shortcut to <see cref="P:SharpDX.CppObject.NativePointer"/>) 
            </summary>
            <param name="nativePointer">The native pointer.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:SharpDX.DXGI.Factory.GetAdapter(System.Int32,SharpDX.DXGI.Adapter@)">
            <summary>	
            <p>Enumerates the adapters (video cards).</p>	
            </summary>	
            <param name="adapter"><dd>  <p>The index of the adapter to enumerate.</p> </dd></param>	
            <param name="adapterOut"><dd>  <p>The address of a reference to an <strong><see cref="T:SharpDX.DXGI.Adapter"/></strong> interface at the position specified by the <em>Adapter</em> parameter.  This parameter must not be <strong><c>null</c></strong>.</p> </dd></param>	
            <returns><p>Returns <see cref="F:SharpDX.Result.Ok"/> if successful; otherwise, returns <see cref="F:SharpDX.DXGI.ResultCode.NotFound"/> if the index is greater than or equal to the number of adapters in the local system, or <see cref="F:SharpDX.DXGI.ResultCode.InvalidCall"/> if <em>ppAdapter</em> parameter is <strong><c>null</c></strong>.</p></returns>	
            <remarks>	
            <p>When you create a factory, the factory enumerates the set of adapters that are available in the system. Therefore, if you change the adapters in a system, you must destroy  and recreate the <strong><see cref="T:SharpDX.DXGI.Factory"/></strong> object. The number of adapters in a system changes when you add or remove a display card, or dock or undock a laptop. </p><p>When the <strong>EnumAdapters</strong> method succeeds and fills the <em>ppAdapter</em> parameter with the address of the reference to the adapter interface, <strong>EnumAdapters</strong> increments the adapter interface's reference count. When you finish using the  adapter interface, call the <strong>Release</strong> method to decrement the reference count before you destroy the reference.</p><p><strong>EnumAdapters</strong> first returns the adapter with the output on which the desktop primary is displayed. This adapter corresponds with an index of zero. <strong>EnumAdapters</strong> next returns other adapters with outputs. <strong>EnumAdapters</strong> finally returns adapters without outputs. </p><p><strong>Windows?Phone?8:</strong> This API is supported.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIFactory::EnumAdapters']/*"/>	
            <msdn-id>bb174538</msdn-id>	
            <unmanaged>HRESULT IDXGIFactory::EnumAdapters([In] unsigned int Adapter,[Out] IDXGIAdapter** ppAdapter)</unmanaged>	
            <unmanaged-short>IDXGIFactory::EnumAdapters</unmanaged-short>	
        </member>
        <member name="M:SharpDX.DXGI.Factory.MakeWindowAssociation(System.IntPtr,SharpDX.DXGI.WindowAssociationFlags)">
            <summary>	
            <p>Allows DXGI to monitor an application's message queue for the alt-enter key sequence (which causes the application to switch from windowed to full screen or vice versa).</p>	
            </summary>	
            <param name="windowHandle"><dd>  <p>The handle of the window that is to be monitored. This parameter can be <strong><c>null</c></strong>; but only if the flags are also 0. </p> </dd></param>	
            <param name="flags"><dd>  <p>One or more of the following values:</p> <ul> <li><see cref="F:SharpDX.DXGI.WindowAssociationFlags.IgnoreAll"/> - Prevent DXGI from monitoring an applications message queue; this makes DXGI unable to respond to mode changes.</li> <li><see cref="F:SharpDX.DXGI.WindowAssociationFlags.IgnoreAltEnter"/> - Prevent DXGI from responding to an alt-enter sequence.</li> <li><see cref="F:SharpDX.DXGI.WindowAssociationFlags.IgnorePrintScreen"/> - Prevent DXGI from responding to a print-screen key.</li> </ul> </dd></param>	
            <returns><p> <see cref="F:SharpDX.DXGI.ResultCode.InvalidCall"/> if <em>WindowHandle</em> is invalid, or E_OUTOFMEMORY.</p></returns>	
            <remarks>	
            <p><strong>Note</strong>??If you call this API in a Session 0 process, it returns <strong><see cref="F:SharpDX.DXGI.ResultCode.NotCurrentlyAvailable"/></strong>.</p><p>The combination of <em>WindowHandle</em> and <em>Flags</em> informs DXGI to stop monitoring window messages for the previously-associated window.</p><p>If the application switches to full-screen mode, DXGI will choose a full-screen resolution to be the smallest supported resolution that is larger or the same size as the current back buffer size.</p><p>Applications can make some changes to make the transition from windowed to full screen more efficient. For example, on a WM_SIZE message, the application should release any outstanding swap-chain back buffers, call <strong><see cref="M:SharpDX.DXGI.SwapChain.ResizeBuffers(System.Int32,System.Int32,System.Int32,SharpDX.DXGI.Format,SharpDX.DXGI.SwapChainFlags)"/></strong>, then re-acquire the back buffers from the swap chain(s). This gives the swap chain(s) an opportunity to resize the back buffers, and/or recreate them to enable full-screen flipping operation. If the application does not perform this sequence, DXGI will still make the full-screen/windowed transition, but may be forced to use a stretch operation (since the back buffers may not be the correct size), which may be less efficient. Even if a stretch is not required, presentation may not be optimal because the back buffers might not be directly interchangeable with the front buffer. Thus, a call to <strong>ResizeBuffers</strong> on WM_SIZE is always recommended, since WM_SIZE is always sent during a fullscreen transition.</p><p>While windowed, the application can, if it chooses, restrict the size of its window's client area to sizes to which it is comfortable rendering. A fully flexible application would make no such restriction, but UI elements or other design considerations can, of course, make this flexibility untenable. If the application further chooses to restrict its window's client area to just those that match supported full-screen resolutions, the application can field WM_SIZING, then check against <strong><see cref="M:SharpDX.DXGI.Output.FindClosestMatchingMode(SharpDX.DXGI.ModeDescription@,SharpDX.DXGI.ModeDescription@,SharpDX.ComObject)"/></strong>. If a matching mode is found, allow the resize. (The <see cref="T:SharpDX.DXGI.Output"/> can be retrieved from <strong><see cref="M:SharpDX.DXGI.SwapChain.GetContainingOutput(SharpDX.DXGI.Output@)"/></strong>. Absent subsequent changes to desktop topology, this will be the same output that will be chosen when alt-enter is fielded and fullscreen mode is begun for that swap chain.)</p><p>Applications that want to handle mode changes or Alt+Enter themselves should call <strong>MakeWindowAssociation</strong> with the <see cref="F:SharpDX.DXGI.WindowAssociationFlags.IgnoreAll"/> flag after swap chain creation. The <em>WindowHandle</em> argument, if non-<strong><c>null</c></strong>, specifies that the application message queues will not be handled by the DXGI runtime for all swap chains of a particular target <strong><see cref="T:System.IntPtr"/></strong>.  Calling <strong>MakeWindowAssociation</strong> with the <see cref="F:SharpDX.DXGI.WindowAssociationFlags.IgnoreAll"/> flag after swapchain creation ensures that DXGI will not interfere with application's handling of window mode changes or Alt+Enter.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIFactory::MakeWindowAssociation']/*"/>	
            <msdn-id>bb174540</msdn-id>	
            <unmanaged>HRESULT IDXGIFactory::MakeWindowAssociation([In] HWND WindowHandle,[In] DXGI_MWA_FLAGS Flags)</unmanaged>	
            <unmanaged-short>IDXGIFactory::MakeWindowAssociation</unmanaged-short>	
        </member>
        <member name="M:SharpDX.DXGI.Factory.GetWindowAssociation">
            <summary>	
            <p>Get the window through which the user controls the transition to and from full screen.</p>	
            </summary>	
            <returns><dd>  <p>A reference to a window handle.</p> </dd></returns>	
            <remarks>	
            <p><strong>Note</strong>??If you call this API in a Session 0 process, it returns <strong><see cref="F:SharpDX.DXGI.ResultCode.NotCurrentlyAvailable"/></strong>.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIFactory::GetWindowAssociation']/*"/>	
            <msdn-id>bb174539</msdn-id>	
            <unmanaged>HRESULT IDXGIFactory::GetWindowAssociation([Out] HWND* pWindowHandle)</unmanaged>	
            <unmanaged-short>IDXGIFactory::GetWindowAssociation</unmanaged-short>	
        </member>
        <member name="M:SharpDX.DXGI.Factory.CreateSwapChain(SharpDX.ComObject,SharpDX.DXGI.SwapChainDescription@,SharpDX.DXGI.SwapChain)">
            <summary>	
            <p>[Starting with Direct3D 11.1, we recommend not to use <strong>CreateSwapChain</strong> anymore to create a swap chain. Instead, use <strong>CreateSwapChainForHwnd</strong>, <strong>CreateSwapChainForCoreWindow</strong>, or <strong>CreateSwapChainForComposition</strong> depending on how you want to create the swap chain.]</p><p>Creates a swap chain.</p>	
            </summary>	
            <param name="deviceRef">No documentation.</param>	
            <param name="descRef">No documentation.</param>	
            <param name="swapChainOut">No documentation.</param>	
            <returns><p> <see cref="F:SharpDX.DXGI.ResultCode.InvalidCall"/> if <em>pDesc</em> or <em>ppSwapChain</em> is <strong><c>null</c></strong>, <see cref="F:SharpDX.DXGI.DXGIStatus.Occluded"/> if you request full-screen mode and it is unavailable, or E_OUTOFMEMORY. Other error codes defined by the type of device passed in may also be returned.</p></returns>	
            <remarks>	
            <p><strong>Note</strong>??If you call this API in a Session 0 process, it returns <strong><see cref="F:SharpDX.DXGI.ResultCode.NotCurrentlyAvailable"/></strong>.</p><p>If you attempt to create a swap chain in full-screen mode, and full-screen mode is unavailable, the swap chain will be created in windowed mode and <see cref="F:SharpDX.DXGI.DXGIStatus.Occluded"/> will be returned.</p><p>If the buffer width or the buffer height is zero, the sizes will be inferred from the output window size in the swap-chain description.</p><p>Because the target output can't be chosen explicitly when the swap chain is created, we recommend not to create a full-screen swap chain. This can reduce presentation performance if the swap chain size and the output window size do not match. Here are two ways to ensure that the sizes match:</p><ul> <li>Create a windowed swap chain and then set it full-screen using <strong><see cref="M:SharpDX.DXGI.SwapChain.SetFullscreenState(SharpDX.Bool,SharpDX.DXGI.Output)"/></strong>.</li> <li>Save a reference to the swap chain immediately after creation, and use it to get the output window size during a WM_SIZE event. Then resize the swap chain buffers (with <strong><see cref="M:SharpDX.DXGI.SwapChain.ResizeBuffers(System.Int32,System.Int32,System.Int32,SharpDX.DXGI.Format,SharpDX.DXGI.SwapChainFlags)"/></strong>) during the transition from windowed to full-screen.</li> </ul><p>If the swap chain is in full-screen mode, before you release it you must use <strong>SetFullscreenState</strong> to switch it to windowed mode. For more information about releasing a swap chain, see the "Destroying a Swap Chain" section of DXGI Overview.</p><p>After the runtime renders the initial frame in full screen, the runtime might unexpectedly exit full screen during a call to <strong><see cref="M:SharpDX.DXGI.SwapChain.Present(System.Int32,SharpDX.DXGI.PresentFlags)"/></strong>. To work around this issue, we recommend that you execute the following code right after you call <strong>CreateSwapChain</strong> to create a full-screen swap chain (<strong>Windowed</strong> member of <strong><see cref="T:SharpDX.DXGI.SwapChainDescription"/></strong> set to <strong><see cref="F:SharpDX.Result.False"/></strong>).	
            </p><pre> // Detect if newly created full-screen swap chain isn't actually full screen.	
            <see cref="T:SharpDX.DXGI.Output"/>* pTarget; <see cref="T:SharpDX.Bool"/> bFullscreen;	
            if (SUCCEEDED(pSwapChain-&gt;GetFullscreenState(&amp;bFullscreen, &amp;pTarget)))	
            { pTarget-&gt;Release();	
            }	
            else bFullscreen = <see cref="F:SharpDX.Result.False"/>;	
            // If not full screen, enable full screen again.	
            if (!bFullscreen)	
            { ShowWindow(hWnd, SW_MINIMIZE); ShowWindow(hWnd, SW_RESTORE); pSwapChain-&gt;SetFullscreenState(TRUE, <c>null</c>);	
            }	
            </pre><p>You can specify <strong><see cref="T:SharpDX.DXGI.SwapEffect"/></strong> and <strong><see cref="T:SharpDX.DXGI.SwapChainFlags"/></strong> values in the swap-chain description that <em>pDesc</em> points to. These values allow you to use features like flip-model presentation and content protection by using pre-Windows?8 APIs.</p><p>However, to use stereo presentation and to change resize behavior for the flip model, applications must use the <strong>IDXGIFactory2::CreateSwapChainForHwnd</strong> method. Otherwise, the back-buffer contents implicitly scale to fit the presentation target size; that is, you can't turn off scaling.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIFactory::CreateSwapChain']/*"/>	
            <msdn-id>bb174537</msdn-id>	
            <unmanaged>HRESULT IDXGIFactory::CreateSwapChain([In] IUnknown* pDevice,[In] DXGI_SWAP_CHAIN_DESC* pDesc,[Out, Fast] IDXGISwapChain** ppSwapChain)</unmanaged>	
            <unmanaged-short>IDXGIFactory::CreateSwapChain</unmanaged-short>	
        </member>
        <member name="M:SharpDX.DXGI.Factory.CreateSoftwareAdapter(System.IntPtr)">
            <summary>	
            <p>Create an adapter interface that represents a software adapter.</p>	
            </summary>	
            <param name="module"><dd>  <p>Handle to the software adapter's dll. HMODULE can be obtained with <strong>GetModuleHandle</strong> or <strong>LoadLibrary</strong>.</p> </dd></param>	
            <returns><dd>  <p>Address of a reference to an adapter (see <strong><see cref="T:SharpDX.DXGI.Adapter"/></strong>).</p> </dd></returns>	
            <remarks>	
            <p>A software adapter is a DLL that implements the entirety of a device driver interface, plus emulation, if necessary, of kernel-mode graphics components for Windows. Details on implementing a software adapter can be found in the Windows Vista Driver Development Kit. This is a very complex development task, and is not recommended for general readers.</p><p>Calling this method will increment the module's reference count by one. The reference count can be decremented by calling <strong>FreeLibrary</strong>.</p><p>The typical calling scenario is to call <strong>LoadLibrary</strong>, pass the handle to <strong>CreateSoftwareAdapter</strong>, then immediately call <strong>FreeLibrary</strong> on the DLL and forget the DLL's <strong>HMODULE</strong>. Since the software adapter calls <strong>FreeLibrary</strong> when it is destroyed, the lifetime of the DLL will now be owned by the adapter, and the application is free of any further consideration of its lifetime.</p><p><strong>Windows?Phone?8:</strong> This API is supported.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIFactory::CreateSoftwareAdapter']/*"/>	
            <msdn-id>bb174536</msdn-id>	
            <unmanaged>HRESULT IDXGIFactory::CreateSoftwareAdapter([In] HINSTANCE Module,[Out] IDXGIAdapter** ppAdapter)</unmanaged>	
            <unmanaged-short>IDXGIFactory::CreateSoftwareAdapter</unmanaged-short>	
        </member>
        <member name="P:SharpDX.DXGI.Factory.Adapters">
            <summary>
            Return an array of <see cref="T:SharpDX.DXGI.Adapter"/> available from this factory.
            </summary>
            <unmanaged>HRESULT IDXGIFactory::EnumAdapters([In] unsigned int Adapter,[Out] IDXGIAdapter** ppAdapter)</unmanaged>	
        </member>
        <member name="T:SharpDX.DXGI.Factory1">
            <summary>	
            <p>The <strong><see cref="T:SharpDX.DXGI.Factory1"/></strong> interface implements methods for generating DXGI objects.</p>	
            </summary>	
            <remarks>	
            <p>This interface is not supported by DXGI 1.0, which shipped in Windows?Vista and Windows Server?2008. DXGI 1.1 support is required, which is available on  Windows?7, Windows Server?2008?R2, and as an update to Windows?Vista with Service Pack?2 (SP2) (KB 971644) and Windows Server?2008 (KB 971512).</p><p>To create a factory, call the <strong>CreateDXGIFactory1</strong> function.</p><p>Because you can create a Direct3D device without creating a swap chain, you might need to retrieve the factory that is used to create the device in order to create a swap chain.	
            You can request the <strong><see cref="T:SharpDX.DXGI.Device"/></strong> or <strong><see cref="T:SharpDX.DXGI.Device1"/></strong> interface from the Direct3D device and then use the <strong><see cref="M:SharpDX.DXGI.DXGIObject.GetParent(System.Guid,System.IntPtr@)"/></strong> method to locate 	
            the factory.  The following code shows how.</p><pre><see cref="T:SharpDX.DXGI.Device1"/> * pDXGIDevice;	
            hr = g_pd3dDevice-&gt;QueryInterface(__uuidof(<see cref="T:SharpDX.DXGI.Device1"/>), (void **)&amp;pDXGIDevice); <see cref="T:SharpDX.DXGI.Adapter"/> * pDXGIAdapter;	
            hr = pDXGIDevice-&gt;GetParent(__uuidof(<see cref="T:SharpDX.DXGI.Adapter"/>), (void **)&amp;pDXGIAdapter); <see cref="T:SharpDX.DXGI.Factory1"/> * pIDXGIFactory;	
            pDXGIAdapter-&gt;GetParent(__uuidof(<see cref="T:SharpDX.DXGI.Factory1"/>), (void **)&amp;pIDXGIFactory);	
            </pre><p><strong>Windows?Phone?8:</strong> This API is supported.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIFactory1']/*"/>	
            <msdn-id>ff471335</msdn-id>	
            <unmanaged>IDXGIFactory1</unmanaged>	
            <unmanaged-short>IDXGIFactory1</unmanaged-short>	
        </member>
        <member name="M:SharpDX.DXGI.Factory1.#ctor">
            <summary>
              Default Constructor for Factory1.
            </summary>
        </member>
        <member name="M:SharpDX.DXGI.Factory1.GetAdapter1(System.Int32)">
            <summary>	
            Gets both adapters (video cards) with or without outputs.	
            </summary>	
            <param name="index"><para>The index of the adapter to enumerate.</para></param>	
            <returns>a reference to an <see cref="T:SharpDX.DXGI.Adapter1"/> interface at the position specified by the Adapter parameter</returns>	
            <remarks>	
            This method is not supported by DXGI 1.0, which shipped in Windows?Vista and Windows Server?2008. DXGI 1.1 support is required, which is available on  Windows?7, Windows Server?2008?R2, and as an update to Windows?Vista with Service Pack?2 (SP2) (KB 971644) and Windows Server?2008 (KB 971512).When you create a factory, the factory enumerates the set of adapters that are available in the system. Therefore, if you change the adapters in a system, you must destroy  and recreate the <see cref="T:SharpDX.DXGI.Factory1"/> object. The number of adapters in a system changes when you add or remove a display card, or dock or undock a laptop.When the EnumAdapters1 method succeeds and fills the ppAdapter parameter with the address of the reference to the adapter interface, EnumAdapters1 increments the adapter interface's reference count. When you finish using the  adapter interface, call the Release method to decrement the reference count before you destroy the reference.EnumAdapters1 first returns the local adapter with the output on which the desktop primary is displayed. This adapter corresponds with an index of zero. EnumAdapters1 next returns other adapters with outputs. EnumAdapters1 finally returns adapters without outputs.	
            </remarks>	
            <unmanaged>HRESULT IDXGIFactory1::EnumAdapters1([In] unsigned int Adapter,[Out] IDXGIAdapter1** ppAdapter)</unmanaged>	
        </member>
        <member name="M:SharpDX.DXGI.Factory1.GetAdapterCount1">
            <summary>
              Return the number of available adapters from this factory.
            </summary>
            <returns>The number of adapters</returns>
            <unmanaged>HRESULT IDXGIFactory1::EnumAdapters1([In] unsigned int Adapter,[Out] IDXGIAdapter1** ppAdapter)</unmanaged>	
        </member>
        <member name="M:SharpDX.DXGI.Factory1.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.DXGI.Factory1"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.DXGI.Factory1.op_Explicit(System.IntPtr)~SharpDX.DXGI.Factory1">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:SharpDX.DXGI.Factory1"/>. (This method is a shortcut to <see cref="P:SharpDX.CppObject.NativePointer"/>) 
            </summary>
            <param name="nativePointer">The native pointer.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:SharpDX.DXGI.Factory1.GetAdapter1(System.Int32,SharpDX.DXGI.Adapter1@)">
            <summary>	
            <p>Enumerates both adapters (video cards) with or without outputs.</p>	
            </summary>	
            <param name="adapter"><dd>  <p>The index of the adapter to enumerate.</p> </dd></param>	
            <param name="adapterOut"><dd>  <p>The address of a reference to an <strong><see cref="T:SharpDX.DXGI.Adapter1"/></strong> interface at the position specified by the <em>Adapter</em> parameter.   This parameter must not be <strong><c>null</c></strong>.</p> </dd></param>	
            <returns><p>Returns <see cref="F:SharpDX.Result.Ok"/> if successful; otherwise, returns <see cref="F:SharpDX.DXGI.ResultCode.NotFound"/> if the index is greater than or equal to the number of adapters in the local  system, or <see cref="F:SharpDX.DXGI.ResultCode.InvalidCall"/> if <em>ppAdapter</em> parameter is <strong><c>null</c></strong>.</p></returns>	
            <remarks>	
            <p>This method is not supported by DXGI 1.0, which shipped in Windows?Vista and Windows Server?2008. DXGI 1.1 support is required, which is available on  Windows?7, Windows Server?2008?R2, and as an update to Windows?Vista with Service Pack?2 (SP2) (KB 971644) and Windows Server?2008 (KB 971512).</p><p>When you create a factory, the factory enumerates the set of adapters that are available in the system. Therefore, if you change the adapters in a system, you must destroy  and recreate the <strong><see cref="T:SharpDX.DXGI.Factory1"/></strong> object. The number of adapters in a system changes when you add or remove a display card, or dock or undock a laptop. </p><p>When the <strong>EnumAdapters1</strong> method succeeds and fills the <em>ppAdapter</em> parameter with the address of the reference to the adapter interface, <strong>EnumAdapters1</strong> increments the adapter interface's reference count. When you finish using the  adapter interface, call the <strong>Release</strong> method to decrement the reference count before you destroy the reference.</p><p><strong>EnumAdapters1</strong> first returns the adapter with the output on which the desktop primary is displayed. This adapter corresponds with an index of zero. <strong>EnumAdapters1</strong> next returns other adapters with outputs. <strong>EnumAdapters1</strong> finally returns adapters without outputs.</p><p><strong>Windows?Phone?8:</strong> This API is supported.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIFactory1::EnumAdapters1']/*"/>	
            <msdn-id>ff471336</msdn-id>	
            <unmanaged>HRESULT IDXGIFactory1::EnumAdapters1([In] unsigned int Adapter,[Out] IDXGIAdapter1** ppAdapter)</unmanaged>	
            <unmanaged-short>IDXGIFactory1::EnumAdapters1</unmanaged-short>	
        </member>
        <member name="M:SharpDX.DXGI.Factory1.IsCurrent_">
            <summary>	
            <p>Informs an application of the possible need to re-enumerate adapters.</p>	
            </summary>	
            <returns><p><strong><see cref="F:SharpDX.Result.False"/></strong>, if a new adapter is becoming available or the current adapter is going away. <strong>TRUE</strong>, no adapter changes.</p><p><strong>IsCurrent</strong> returns <strong><see cref="F:SharpDX.Result.False"/></strong> to inform the calling application to re-enumerate adapters.</p></returns>	
            <remarks>	
            <p>This method is not supported by DXGI 1.0, which shipped in Windows?Vista and Windows Server?2008. DXGI 1.1 support is required, which is available on  Windows?7, Windows Server?2008?R2, and as an update to Windows?Vista with Service Pack?2 (SP2) (KB 971644) and Windows Server?2008 (KB 971512).</p><p><strong>Windows?Phone?8:</strong> This API is supported.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIFactory1::IsCurrent']/*"/>	
            <msdn-id>ff471337</msdn-id>	
            <unmanaged>BOOL IDXGIFactory1::IsCurrent()</unmanaged>	
            <unmanaged-short>IDXGIFactory1::IsCurrent</unmanaged-short>	
        </member>
        <member name="P:SharpDX.DXGI.Factory1.Adapters1">
            <summary>
            Return an array of <see cref="T:SharpDX.DXGI.Adapter1"/> available from this factory.
            </summary>
            <unmanaged>HRESULT IDXGIFactory1::EnumAdapters1([In] unsigned int Adapter,[Out] IDXGIAdapter1** ppAdapter)</unmanaged>	
        </member>
        <member name="P:SharpDX.DXGI.Factory1.IsCurrent">
            <summary>	
            <p>Informs an application of the possible need to re-enumerate adapters.</p>	
            </summary>	
            <remarks>	
            <p>This method is not supported by DXGI 1.0, which shipped in Windows?Vista and Windows Server?2008. DXGI 1.1 support is required, which is available on  Windows?7, Windows Server?2008?R2, and as an update to Windows?Vista with Service Pack?2 (SP2) (KB 971644) and Windows Server?2008 (KB 971512).</p><p><strong>Windows?Phone?8:</strong> This API is supported.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIFactory1::IsCurrent']/*"/>	
            <msdn-id>ff471337</msdn-id>	
            <unmanaged>IsCurrent</unmanaged>	
            <unmanaged-short>IsCurrent</unmanaged-short>	
            <unmanaged>BOOL IDXGIFactory1::IsCurrent()</unmanaged>
        </member>
        <member name="T:SharpDX.DXGI.FormatHelper">
            <summary>
            Helper to use with <see cref="T:SharpDX.DXGI.Format"/>.
            </summary>
        </member>
        <member name="M:SharpDX.DXGI.FormatHelper.SizeOfInBytes(SharpDX.DXGI.Format)">
            <summary>
            Calculates the size of a <see cref="T:SharpDX.DXGI.Format"/> in bytes. Can be 0 for compressed format (as they are less than 1 byte)
            </summary>
            <param name="format">The DXGI format.</param>
            <returns>size of in bytes</returns>
        </member>
        <member name="M:SharpDX.DXGI.FormatHelper.SizeOfInBits(SharpDX.DXGI.Format)">
            <summary>
            Calculates the size of a <see cref="T:SharpDX.DXGI.Format"/> in bits.
            </summary>
            <param name="format">The DXGI format.</param>
            <returns>size of in bits</returns>
        </member>
        <member name="M:SharpDX.DXGI.FormatHelper.IsValid(SharpDX.DXGI.Format)">
            <summary>
            Returns true if the <see cref="T:SharpDX.DXGI.Format"/> is valid.
            </summary>
            <param name="format">A format to validate</param>
            <returns>True if the <see cref="T:SharpDX.DXGI.Format"/> is valid.</returns>
        </member>
        <member name="M:SharpDX.DXGI.FormatHelper.IsCompressed(SharpDX.DXGI.Format)">
            <summary>
            Returns true if the <see cref="T:SharpDX.DXGI.Format"/> is a compressed format.
            </summary>
            <param name="fmt">The format to check for compressed.</param>
            <returns>True if the <see cref="T:SharpDX.DXGI.Format"/> is a compressed format</returns>
        </member>
        <member name="M:SharpDX.DXGI.FormatHelper.IsPacked(SharpDX.DXGI.Format)">
            <summary>
            Determines whether the specified <see cref="T:SharpDX.DXGI.Format"/> is packed.
            </summary>
            <param name="fmt">The DXGI Format.</param>
            <returns><c>true</c> if the specified <see cref="T:SharpDX.DXGI.Format"/> is packed; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:SharpDX.DXGI.FormatHelper.IsVideo(SharpDX.DXGI.Format)">
            <summary>
            Determines whether the specified <see cref="T:SharpDX.DXGI.Format"/> is video.
            </summary>
            <param name="fmt">The <see cref="T:SharpDX.DXGI.Format"/>.</param>
            <returns><c>true</c> if the specified <see cref="T:SharpDX.DXGI.Format"/> is video; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:SharpDX.DXGI.FormatHelper.IsSRgb(SharpDX.DXGI.Format)">
            <summary>
            Determines whether the specified <see cref="T:SharpDX.DXGI.Format"/> is a SRGB format.
            </summary>
            <param name="fmt">The <see cref="T:SharpDX.DXGI.Format"/>.</param>
            <returns><c>true</c> if the specified <see cref="T:SharpDX.DXGI.Format"/> is a SRGB format; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:SharpDX.DXGI.FormatHelper.IsTypeless(SharpDX.DXGI.Format)">
            <summary>
            Determines whether the specified <see cref="T:SharpDX.DXGI.Format"/> is typeless.
            </summary>
            <param name="fmt">The <see cref="T:SharpDX.DXGI.Format"/>.</param>
            <returns><c>true</c> if the specified <see cref="T:SharpDX.DXGI.Format"/> is typeless; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:SharpDX.DXGI.FormatHelper.ComputeScanlineCount(SharpDX.DXGI.Format,System.Int32)">
            <summary>
            Computes the scanline count (number of scanlines).
            </summary>
            <param name="fmt">The <see cref="T:SharpDX.DXGI.Format"/>.</param>
            <param name="height">The height.</param>
            <returns>The scanline count.</returns>
        </member>
        <member name="M:SharpDX.DXGI.FormatHelper.#cctor">
            <summary>
            Static initializer to speed up size calculation (not sure the JIT is enough "smart" for this kind of thing).
            </summary>
        </member>
        <member name="T:SharpDX.DXGI.AdapterFlags">
            <summary>	
            <p>Identifies the type of DXGI adapter.</p>	
            </summary>	
            <remarks>	
            <p>The <strong><see cref="T:SharpDX.DXGI.AdapterFlags"/></strong> enumerated type is used by the <strong>Flags</strong> member of the <strong><see cref="T:SharpDX.DXGI.AdapterDescription1"/></strong> or <strong>DXGI_ADAPTER_DESC2</strong> structure to  identify the type of DXGI adapter.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_ADAPTER_FLAG']/*"/>	
            <msdn-id>ff471327</msdn-id>	
            <unmanaged>DXGI_ADAPTER_FLAG</unmanaged>	
            <unmanaged-short>DXGI_ADAPTER_FLAG</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.AdapterFlags.None">
            <summary>	
            <dd> <p>Specifies no flags.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_ADAPTER_FLAG_NONE']/*"/>	
            <msdn-id>ff471327</msdn-id>	
            <unmanaged>DXGI_ADAPTER_FLAG_NONE</unmanaged>	
            <unmanaged-short>DXGI_ADAPTER_FLAG_NONE</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.AdapterFlags.Remote">
            <summary>	
            <dd> <p>Value always set to 0. This flag is reserved.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_ADAPTER_FLAG_REMOTE']/*"/>	
            <msdn-id>ff471327</msdn-id>	
            <unmanaged>DXGI_ADAPTER_FLAG_REMOTE</unmanaged>	
            <unmanaged-short>DXGI_ADAPTER_FLAG_REMOTE</unmanaged-short>	
        </member>
        <member name="T:SharpDX.DXGI.DisplayModeEnumerationFlags">
            <summary>	
            <p>Options for enumerating display modes.</p><p></p>	
            </summary>	
            <remarks>	
            <p>These flag options are used in <strong><see cref="M:SharpDX.DXGI.Output.GetDisplayModeList(SharpDX.DXGI.Format,System.Int32,System.Int32@,SharpDX.DXGI.ModeDescription[])"/></strong> to enumerate display modes.</p><p>These flag options are also used in <strong>IDXGIOutput1::GetDisplayModeList1</strong> to enumerate display modes.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_ENUM_MODES_FLAGS']/*"/>	
            <msdn-id>cc308060</msdn-id>	
            <unmanaged>DXGI_ENUM_MODES_FLAGS</unmanaged>	
            <unmanaged-short>DXGI_ENUM_MODES_FLAGS</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.DisplayModeEnumerationFlags.Interlaced">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_ENUM_MODES_INTERLACED']/*"/>	
            <msdn-id>cc308060</msdn-id>	
            <unmanaged>DXGI_ENUM_MODES_INTERLACED</unmanaged>	
            <unmanaged-short>DXGI_ENUM_MODES_INTERLACED</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.DisplayModeEnumerationFlags.Scaling">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_ENUM_MODES_SCALING']/*"/>	
            <msdn-id>cc308060</msdn-id>	
            <unmanaged>DXGI_ENUM_MODES_SCALING</unmanaged>	
            <unmanaged-short>DXGI_ENUM_MODES_SCALING</unmanaged-short>	
        </member>
        <member name="T:SharpDX.DXGI.DisplayModeRotation">
            <summary>	
            <p>Flags that indicate how the back buffers should be rotated to fit the physical rotation of a monitor.</p>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_MODE_ROTATION']/*"/>	
            <msdn-id>bb173065</msdn-id>	
            <unmanaged>DXGI_MODE_ROTATION</unmanaged>	
            <unmanaged-short>DXGI_MODE_ROTATION</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.DisplayModeRotation.Unspecified">
            <summary>	
            <dd> <p>Unspecified rotation.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_MODE_ROTATION_UNSPECIFIED']/*"/>	
            <msdn-id>bb173065</msdn-id>	
            <unmanaged>DXGI_MODE_ROTATION_UNSPECIFIED</unmanaged>	
            <unmanaged-short>DXGI_MODE_ROTATION_UNSPECIFIED</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.DisplayModeRotation.Identity">
            <summary>	
            <dd> <p>Specifies no rotation.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_MODE_ROTATION_IDENTITY']/*"/>	
            <msdn-id>bb173065</msdn-id>	
            <unmanaged>DXGI_MODE_ROTATION_IDENTITY</unmanaged>	
            <unmanaged-short>DXGI_MODE_ROTATION_IDENTITY</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.DisplayModeRotation.Rotate90">
            <summary>	
            <dd> <p>Specifies 90 degrees of rotation.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_MODE_ROTATION_ROTATE90']/*"/>	
            <msdn-id>bb173065</msdn-id>	
            <unmanaged>DXGI_MODE_ROTATION_ROTATE90</unmanaged>	
            <unmanaged-short>DXGI_MODE_ROTATION_ROTATE90</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.DisplayModeRotation.Rotate180">
            <summary>	
            <dd> <p>Specifies 180 degrees of rotation.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_MODE_ROTATION_ROTATE180']/*"/>	
            <msdn-id>bb173065</msdn-id>	
            <unmanaged>DXGI_MODE_ROTATION_ROTATE180</unmanaged>	
            <unmanaged-short>DXGI_MODE_ROTATION_ROTATE180</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.DisplayModeRotation.Rotate270">
            <summary>	
            <dd> <p>Specifies 270 degrees of rotation.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_MODE_ROTATION_ROTATE270']/*"/>	
            <msdn-id>bb173065</msdn-id>	
            <unmanaged>DXGI_MODE_ROTATION_ROTATE270</unmanaged>	
            <unmanaged-short>DXGI_MODE_ROTATION_ROTATE270</unmanaged-short>	
        </member>
        <member name="T:SharpDX.DXGI.DisplayModeScaling">
            <summary>	
            <p>Flags indicating how an image is stretched to fit a given monitor's resolution.</p>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_MODE_SCALING']/*"/>	
            <msdn-id>bb173066</msdn-id>	
            <unmanaged>DXGI_MODE_SCALING</unmanaged>	
            <unmanaged-short>DXGI_MODE_SCALING</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.DisplayModeScaling.Unspecified">
            <summary>	
            <dd> <p>Unspecified scaling.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_MODE_SCALING_UNSPECIFIED']/*"/>	
            <msdn-id>bb173066</msdn-id>	
            <unmanaged>DXGI_MODE_SCALING_UNSPECIFIED</unmanaged>	
            <unmanaged-short>DXGI_MODE_SCALING_UNSPECIFIED</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.DisplayModeScaling.Centered">
            <summary>	
            <dd> <p>Specifies no scaling. The image is centered on the display. This flag is typically used for a fixed-dot-pitch display (such as an LED display).</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_MODE_SCALING_CENTERED']/*"/>	
            <msdn-id>bb173066</msdn-id>	
            <unmanaged>DXGI_MODE_SCALING_CENTERED</unmanaged>	
            <unmanaged-short>DXGI_MODE_SCALING_CENTERED</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.DisplayModeScaling.Stretched">
            <summary>	
            <dd> <p>Specifies stretched scaling.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_MODE_SCALING_STRETCHED']/*"/>	
            <msdn-id>bb173066</msdn-id>	
            <unmanaged>DXGI_MODE_SCALING_STRETCHED</unmanaged>	
            <unmanaged-short>DXGI_MODE_SCALING_STRETCHED</unmanaged-short>	
        </member>
        <member name="T:SharpDX.DXGI.DisplayModeScanlineOrder">
            <summary>	
            <p>Flags indicating the method the raster uses to create an image on a surface.</p>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_MODE_SCANLINE_ORDER']/*"/>	
            <msdn-id>bb173067</msdn-id>	
            <unmanaged>DXGI_MODE_SCANLINE_ORDER</unmanaged>	
            <unmanaged-short>DXGI_MODE_SCANLINE_ORDER</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.DisplayModeScanlineOrder.Unspecified">
            <summary>	
            <dd> <p>Scanline order is unspecified.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_MODE_SCANLINE_ORDER_UNSPECIFIED']/*"/>	
            <msdn-id>bb173067</msdn-id>	
            <unmanaged>DXGI_MODE_SCANLINE_ORDER_UNSPECIFIED</unmanaged>	
            <unmanaged-short>DXGI_MODE_SCANLINE_ORDER_UNSPECIFIED</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.DisplayModeScanlineOrder.Progressive">
            <summary>	
            <dd> <p>The image is created from the first scanline to the last without skipping any.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_MODE_SCANLINE_ORDER_PROGRESSIVE']/*"/>	
            <msdn-id>bb173067</msdn-id>	
            <unmanaged>DXGI_MODE_SCANLINE_ORDER_PROGRESSIVE</unmanaged>	
            <unmanaged-short>DXGI_MODE_SCANLINE_ORDER_PROGRESSIVE</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.DisplayModeScanlineOrder.UpperFieldFirst">
            <summary>	
            <dd> <p>The image is created beginning with the upper field.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_MODE_SCANLINE_ORDER_UPPER_FIELD_FIRST']/*"/>	
            <msdn-id>bb173067</msdn-id>	
            <unmanaged>DXGI_MODE_SCANLINE_ORDER_UPPER_FIELD_FIRST</unmanaged>	
            <unmanaged-short>DXGI_MODE_SCANLINE_ORDER_UPPER_FIELD_FIRST</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.DisplayModeScanlineOrder.LowerFieldFirst">
            <summary>	
            <dd> <p>The image is created beginning with the lower field.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_MODE_SCANLINE_ORDER_LOWER_FIELD_FIRST']/*"/>	
            <msdn-id>bb173067</msdn-id>	
            <unmanaged>DXGI_MODE_SCANLINE_ORDER_LOWER_FIELD_FIRST</unmanaged>	
            <unmanaged-short>DXGI_MODE_SCANLINE_ORDER_LOWER_FIELD_FIRST</unmanaged-short>	
        </member>
        <member name="T:SharpDX.DXGI.DXGIStatus">
            <summary>	
            <p>Status codes that can be returned by DXGI functions.</p><p></p>	
            </summary>	
            <remarks>	
            <p>The <strong><see cref="T:SharpDX.Result"/></strong> value for each <strong><see cref="T:SharpDX.DXGI.DXGIStatus"/></strong> value is determined from this macro that is defined in DXGItype.h:</p><pre> #define _FACDXGI    0x87a	
            #define MAKE_DXGI_STATUS(code)  MAKE_HRESULT(0, _FACDXGI, code)	
            </pre><p>For example, <strong><see cref="F:SharpDX.DXGI.DXGIStatus.Occluded"/></strong> is defined as <strong>0x087A0001</strong>:</p><pre> #define <see cref="F:SharpDX.DXGI.DXGIStatus.Occluded"/>                    MAKE_DXGI_STATUS(1)	
            </pre>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_STATUS']/*"/>	
            <msdn-id>cc308061</msdn-id>	
            <unmanaged>DXGI_STATUS</unmanaged>	
            <unmanaged-short>DXGI_STATUS</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.DXGIStatus.Occluded">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_STATUS_OCCLUDED']/*"/>	
            <msdn-id>cc308061</msdn-id>	
            <unmanaged>DXGI_STATUS_OCCLUDED</unmanaged>	
            <unmanaged-short>DXGI_STATUS_OCCLUDED</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.DXGIStatus.Clipped">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_STATUS_CLIPPED']/*"/>	
            <msdn-id>cc308061</msdn-id>	
            <unmanaged>DXGI_STATUS_CLIPPED</unmanaged>	
            <unmanaged-short>DXGI_STATUS_CLIPPED</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.DXGIStatus.NoRedirection">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_STATUS_NO_REDIRECTION']/*"/>	
            <msdn-id>cc308061</msdn-id>	
            <unmanaged>DXGI_STATUS_NO_REDIRECTION</unmanaged>	
            <unmanaged-short>DXGI_STATUS_NO_REDIRECTION</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.DXGIStatus.NoDesktopAccess">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_STATUS_NO_DESKTOP_ACCESS']/*"/>	
            <msdn-id>cc308061</msdn-id>	
            <unmanaged>DXGI_STATUS_NO_DESKTOP_ACCESS</unmanaged>	
            <unmanaged-short>DXGI_STATUS_NO_DESKTOP_ACCESS</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.DXGIStatus.GraphicsVidpnSourceInUse">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_STATUS_GRAPHICS_VIDPN_SOURCE_IN_USE']/*"/>	
            <msdn-id>cc308061</msdn-id>	
            <unmanaged>DXGI_STATUS_GRAPHICS_VIDPN_SOURCE_IN_USE</unmanaged>	
            <unmanaged-short>DXGI_STATUS_GRAPHICS_VIDPN_SOURCE_IN_USE</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.DXGIStatus.ModeChanged">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_STATUS_MODE_CHANGED']/*"/>	
            <msdn-id>cc308061</msdn-id>	
            <unmanaged>DXGI_STATUS_MODE_CHANGED</unmanaged>	
            <unmanaged-short>DXGI_STATUS_MODE_CHANGED</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.DXGIStatus.ModeChangeInProgress">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_STATUS_MODE_CHANGE_IN_PROGRESS']/*"/>	
            <msdn-id>cc308061</msdn-id>	
            <unmanaged>DXGI_STATUS_MODE_CHANGE_IN_PROGRESS</unmanaged>	
            <unmanaged-short>DXGI_STATUS_MODE_CHANGE_IN_PROGRESS</unmanaged-short>	
        </member>
        <member name="T:SharpDX.DXGI.Format">
            <summary>	
            <p>Resource data formats which includes fully-typed and typeless formats. There is a list of format modifiers at the bottom of the page,  that more fully describes each format type.</p>	
            </summary>	
            <remarks>	
            <p>A few formats have additional restrictions.</p><ol> <li>A resource declared with the DXGI_FORMAT_R32G32B32 family of formats cannot be used simultaneously for vertex and texture data. That is, you may not create a buffer resource with the DXGI_FORMAT_R32G32B32 family of formats that uses any of the following bind flags: <see cref="!:SharpDX.Direct3D10.BindFlags.VertexBuffer"/>, <see cref="!:SharpDX.Direct3D10.BindFlags.IndexBuffer"/>, <see cref="!:SharpDX.Direct3D10.BindFlags.ConstantBuffer"/>, or <see cref="!:SharpDX.Direct3D10.BindFlags.StreamOutput"/> (see <strong><see cref="!:SharpDX.Direct3D10.BindFlags"/></strong>).</li> <li><see cref="F:SharpDX.DXGI.Format.R1_UNorm"/> is designed specifically for text filtering, and must be used with a format-specific, configurable 8x8 filter mode. When calling an HLSL sampling function using this format, the address offset parameter must be set to (0,0).</li> <li>A resource using a sub-sampled format (such as DXGI_FORMAT_R8G8_B8G8) must have a size that is a multiple of 2 in the x dimension.</li> <li>Format is not available in Direct3D 10 and Direct3D 10.1</li> </ol><p>The following topics provide lists of the formats that particular hardware feature levels support:</p><ul> <li> Hardware Support for Direct3D 11.1 Formats </li> <li> Hardware Support for Direct3D 11 Formats </li> <li> Hardware Support for Direct3D 10.1 Formats </li> <li> Hardware Support for Direct3D 10 Formats </li> <li> Hardware Support for Direct3D 10Level9 Formats </li> </ul><p>For a list of the <strong>DirectXMath</strong> types that map to <strong><see cref="T:SharpDX.DXGI.Format"/></strong> values, see DirectXMath Library Internals.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT']/*"/>	
            <msdn-id>bb173059</msdn-id>	
            <unmanaged>DXGI_FORMAT</unmanaged>	
            <unmanaged-short>DXGI_FORMAT</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.Format.Unknown">
            <summary>	
            <dd> <p>The format is not known.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_UNKNOWN']/*"/>	
            <msdn-id>bb173059</msdn-id>	
            <unmanaged>DXGI_FORMAT_UNKNOWN</unmanaged>	
            <unmanaged-short>DXGI_FORMAT_UNKNOWN</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.Format.R32G32B32A32_Typeless">
            <summary>	
            <dd> <p>A four-component, 128-bit typeless format that supports 32 bits per channel including alpha. 1</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_R32G32B32A32_TYPELESS']/*"/>	
            <msdn-id>bb173059</msdn-id>	
            <unmanaged>DXGI_FORMAT_R32G32B32A32_TYPELESS</unmanaged>	
            <unmanaged-short>DXGI_FORMAT_R32G32B32A32_TYPELESS</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.Format.R32G32B32A32_Float">
            <summary>	
            <dd> <p>A four-component, 128-bit floating-point format that supports 32 bits per channel including alpha. 1</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_R32G32B32A32_FLOAT']/*"/>	
            <msdn-id>bb173059</msdn-id>	
            <unmanaged>DXGI_FORMAT_R32G32B32A32_FLOAT</unmanaged>	
            <unmanaged-short>DXGI_FORMAT_R32G32B32A32_FLOAT</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.Format.R32G32B32A32_UInt">
            <summary>	
            <dd> <p>A four-component, 128-bit unsigned-integer format that supports 32 bits per channel including alpha. 1</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_R32G32B32A32_UINT']/*"/>	
            <msdn-id>bb173059</msdn-id>	
            <unmanaged>DXGI_FORMAT_R32G32B32A32_UINT</unmanaged>	
            <unmanaged-short>DXGI_FORMAT_R32G32B32A32_UINT</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.Format.R32G32B32A32_SInt">
            <summary>	
            <dd> <p>A four-component, 128-bit signed-integer format that supports 32 bits per channel including alpha. 1</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_R32G32B32A32_SINT']/*"/>	
            <msdn-id>bb173059</msdn-id>	
            <unmanaged>DXGI_FORMAT_R32G32B32A32_SINT</unmanaged>	
            <unmanaged-short>DXGI_FORMAT_R32G32B32A32_SINT</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.Format.R32G32B32_Typeless">
            <summary>	
            <dd> <p>A three-component, 96-bit typeless format that supports 32 bits per color channel.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_R32G32B32_TYPELESS']/*"/>	
            <msdn-id>bb173059</msdn-id>	
            <unmanaged>DXGI_FORMAT_R32G32B32_TYPELESS</unmanaged>	
            <unmanaged-short>DXGI_FORMAT_R32G32B32_TYPELESS</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.Format.R32G32B32_Float">
            <summary>	
            <dd> <p>A three-component, 96-bit floating-point format that supports 32 bits per color channel.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_R32G32B32_FLOAT']/*"/>	
            <msdn-id>bb173059</msdn-id>	
            <unmanaged>DXGI_FORMAT_R32G32B32_FLOAT</unmanaged>	
            <unmanaged-short>DXGI_FORMAT_R32G32B32_FLOAT</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.Format.R32G32B32_UInt">
            <summary>	
            <dd> <p>A three-component, 96-bit unsigned-integer format that supports 32 bits per color channel.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_R32G32B32_UINT']/*"/>	
            <msdn-id>bb173059</msdn-id>	
            <unmanaged>DXGI_FORMAT_R32G32B32_UINT</unmanaged>	
            <unmanaged-short>DXGI_FORMAT_R32G32B32_UINT</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.Format.R32G32B32_SInt">
            <summary>	
            <dd> <p>A three-component, 96-bit signed-integer format that supports 32 bits per color channel.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_R32G32B32_SINT']/*"/>	
            <msdn-id>bb173059</msdn-id>	
            <unmanaged>DXGI_FORMAT_R32G32B32_SINT</unmanaged>	
            <unmanaged-short>DXGI_FORMAT_R32G32B32_SINT</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.Format.R16G16B16A16_Typeless">
            <summary>	
            <dd> <p>A four-component, 64-bit typeless format that supports 16 bits per channel including alpha.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_R16G16B16A16_TYPELESS']/*"/>	
            <msdn-id>bb173059</msdn-id>	
            <unmanaged>DXGI_FORMAT_R16G16B16A16_TYPELESS</unmanaged>	
            <unmanaged-short>DXGI_FORMAT_R16G16B16A16_TYPELESS</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.Format.R16G16B16A16_Float">
            <summary>	
            <dd> <p>A four-component, 64-bit floating-point format that supports 16 bits per channel including alpha.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_R16G16B16A16_FLOAT']/*"/>	
            <msdn-id>bb173059</msdn-id>	
            <unmanaged>DXGI_FORMAT_R16G16B16A16_FLOAT</unmanaged>	
            <unmanaged-short>DXGI_FORMAT_R16G16B16A16_FLOAT</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.Format.R16G16B16A16_UNorm">
            <summary>	
            <dd> <p>A four-component, 64-bit unsigned-normalized-integer format that supports 16 bits per channel including alpha.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_R16G16B16A16_UNORM']/*"/>	
            <msdn-id>bb173059</msdn-id>	
            <unmanaged>DXGI_FORMAT_R16G16B16A16_UNORM</unmanaged>	
            <unmanaged-short>DXGI_FORMAT_R16G16B16A16_UNORM</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.Format.R16G16B16A16_UInt">
            <summary>	
            <dd> <p>A four-component, 64-bit unsigned-integer format that supports 16 bits per channel including alpha.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_R16G16B16A16_UINT']/*"/>	
            <msdn-id>bb173059</msdn-id>	
            <unmanaged>DXGI_FORMAT_R16G16B16A16_UINT</unmanaged>	
            <unmanaged-short>DXGI_FORMAT_R16G16B16A16_UINT</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.Format.R16G16B16A16_SNorm">
            <summary>	
            <dd> <p>A four-component, 64-bit signed-normalized-integer format that supports 16 bits per channel including alpha.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_R16G16B16A16_SNORM']/*"/>	
            <msdn-id>bb173059</msdn-id>	
            <unmanaged>DXGI_FORMAT_R16G16B16A16_SNORM</unmanaged>	
            <unmanaged-short>DXGI_FORMAT_R16G16B16A16_SNORM</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.Format.R16G16B16A16_SInt">
            <summary>	
            <dd> <p>A four-component, 64-bit signed-integer format that supports 16 bits per channel including alpha.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_R16G16B16A16_SINT']/*"/>	
            <msdn-id>bb173059</msdn-id>	
            <unmanaged>DXGI_FORMAT_R16G16B16A16_SINT</unmanaged>	
            <unmanaged-short>DXGI_FORMAT_R16G16B16A16_SINT</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.Format.R32G32_Typeless">
            <summary>	
            <dd> <p>A two-component, 64-bit typeless format that supports 32 bits for the red channel and 32 bits for the green channel.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_R32G32_TYPELESS']/*"/>	
            <msdn-id>bb173059</msdn-id>	
            <unmanaged>DXGI_FORMAT_R32G32_TYPELESS</unmanaged>	
            <unmanaged-short>DXGI_FORMAT_R32G32_TYPELESS</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.Format.R32G32_Float">
            <summary>	
            <dd> <p>A two-component, 64-bit floating-point format that supports 32 bits for the red channel and 32 bits for the green channel.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_R32G32_FLOAT']/*"/>	
            <msdn-id>bb173059</msdn-id>	
            <unmanaged>DXGI_FORMAT_R32G32_FLOAT</unmanaged>	
            <unmanaged-short>DXGI_FORMAT_R32G32_FLOAT</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.Format.R32G32_UInt">
            <summary>	
            <dd> <p>A two-component, 64-bit unsigned-integer format that supports 32 bits for the red channel and 32 bits for the green channel.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_R32G32_UINT']/*"/>	
            <msdn-id>bb173059</msdn-id>	
            <unmanaged>DXGI_FORMAT_R32G32_UINT</unmanaged>	
            <unmanaged-short>DXGI_FORMAT_R32G32_UINT</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.Format.R32G32_SInt">
            <summary>	
            <dd> <p>A two-component, 64-bit signed-integer format that supports 32 bits for the red channel and 32 bits for the green channel.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_R32G32_SINT']/*"/>	
            <msdn-id>bb173059</msdn-id>	
            <unmanaged>DXGI_FORMAT_R32G32_SINT</unmanaged>	
            <unmanaged-short>DXGI_FORMAT_R32G32_SINT</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.Format.R32G8X24_Typeless">
            <summary>	
            <dd> <p>A two-component, 64-bit typeless format that supports 32 bits for the red channel, 8 bits for the green channel, and 24 bits are unused.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_R32G8X24_TYPELESS']/*"/>	
            <msdn-id>bb173059</msdn-id>	
            <unmanaged>DXGI_FORMAT_R32G8X24_TYPELESS</unmanaged>	
            <unmanaged-short>DXGI_FORMAT_R32G8X24_TYPELESS</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.Format.D32_Float_S8X24_UInt">
            <summary>	
            <dd> <p>A 32-bit floating-point component, and two unsigned-integer components (with an additional 32 bits). This format supports 32-bit depth, 8-bit stencil, and 24 bits are unused.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_D32_FLOAT_S8X24_UINT']/*"/>	
            <msdn-id>bb173059</msdn-id>	
            <unmanaged>DXGI_FORMAT_D32_FLOAT_S8X24_UINT</unmanaged>	
            <unmanaged-short>DXGI_FORMAT_D32_FLOAT_S8X24_UINT</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.Format.R32_Float_X8X24_Typeless">
            <summary>	
            <dd> <p>A 32-bit floating-point component, and two typeless components (with an additional 32 bits). This format supports 32-bit red channel, 8 bits are unused, and 24 bits are unused.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_R32_FLOAT_X8X24_TYPELESS']/*"/>	
            <msdn-id>bb173059</msdn-id>	
            <unmanaged>DXGI_FORMAT_R32_FLOAT_X8X24_TYPELESS</unmanaged>	
            <unmanaged-short>DXGI_FORMAT_R32_FLOAT_X8X24_TYPELESS</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.Format.X32_Typeless_G8X24_UInt">
            <summary>	
            <dd> <p>A 32-bit typeless component, and two unsigned-integer components (with an additional 32 bits). This format has 32 bits unused, 8 bits for green channel, and 24 bits are unused.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_X32_TYPELESS_G8X24_UINT']/*"/>	
            <msdn-id>bb173059</msdn-id>	
            <unmanaged>DXGI_FORMAT_X32_TYPELESS_G8X24_UINT</unmanaged>	
            <unmanaged-short>DXGI_FORMAT_X32_TYPELESS_G8X24_UINT</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.Format.R10G10B10A2_Typeless">
            <summary>	
            <dd> <p>A four-component, 32-bit typeless format that supports 10 bits for each color and 2 bits for alpha.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_R10G10B10A2_TYPELESS']/*"/>	
            <msdn-id>bb173059</msdn-id>	
            <unmanaged>DXGI_FORMAT_R10G10B10A2_TYPELESS</unmanaged>	
            <unmanaged-short>DXGI_FORMAT_R10G10B10A2_TYPELESS</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.Format.R10G10B10A2_UNorm">
            <summary>	
            <dd> <p>A four-component, 32-bit unsigned-normalized-integer format that supports 10 bits for each color and 2 bits for alpha.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_R10G10B10A2_UNORM']/*"/>	
            <msdn-id>bb173059</msdn-id>	
            <unmanaged>DXGI_FORMAT_R10G10B10A2_UNORM</unmanaged>	
            <unmanaged-short>DXGI_FORMAT_R10G10B10A2_UNORM</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.Format.R10G10B10A2_UInt">
            <summary>	
            <dd> <p>A four-component, 32-bit unsigned-integer format that supports 10 bits for each color and 2 bits for alpha.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_R10G10B10A2_UINT']/*"/>	
            <msdn-id>bb173059</msdn-id>	
            <unmanaged>DXGI_FORMAT_R10G10B10A2_UINT</unmanaged>	
            <unmanaged-short>DXGI_FORMAT_R10G10B10A2_UINT</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.Format.R11G11B10_Float">
            <summary>	
            <dd> <p>Three partial-precision floating-point numbers encoded into a single 32-bit value (a variant of s10e5, which is sign bit, 10-bit mantissa, and 5-bit biased (15) exponent).  There are no sign bits, and there is a 5-bit biased (15) exponent for each channel, 6-bit mantissa  for R and G, and a 5-bit mantissa for B, as shown in the following illustration.</p> <p></p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_R11G11B10_FLOAT']/*"/>	
            <msdn-id>bb173059</msdn-id>	
            <unmanaged>DXGI_FORMAT_R11G11B10_FLOAT</unmanaged>	
            <unmanaged-short>DXGI_FORMAT_R11G11B10_FLOAT</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.Format.R8G8B8A8_Typeless">
            <summary>	
            <dd> <p>A four-component, 32-bit typeless format that supports 8 bits per channel including alpha.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_R8G8B8A8_TYPELESS']/*"/>	
            <msdn-id>bb173059</msdn-id>	
            <unmanaged>DXGI_FORMAT_R8G8B8A8_TYPELESS</unmanaged>	
            <unmanaged-short>DXGI_FORMAT_R8G8B8A8_TYPELESS</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.Format.R8G8B8A8_UNorm">
            <summary>	
            <dd> <p>A four-component, 32-bit unsigned-normalized-integer format that supports 8 bits per channel including alpha.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_R8G8B8A8_UNORM']/*"/>	
            <msdn-id>bb173059</msdn-id>	
            <unmanaged>DXGI_FORMAT_R8G8B8A8_UNORM</unmanaged>	
            <unmanaged-short>DXGI_FORMAT_R8G8B8A8_UNORM</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.Format.R8G8B8A8_UNorm_SRgb">
            <summary>	
            <dd> <p>A four-component, 32-bit unsigned-normalized integer sRGB format that supports 8 bits per channel including alpha.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_R8G8B8A8_UNORM_SRGB']/*"/>	
            <msdn-id>bb173059</msdn-id>	
            <unmanaged>DXGI_FORMAT_R8G8B8A8_UNORM_SRGB</unmanaged>	
            <unmanaged-short>DXGI_FORMAT_R8G8B8A8_UNORM_SRGB</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.Format.R8G8B8A8_UInt">
            <summary>	
            <dd> <p>A four-component, 32-bit unsigned-integer format that supports 8 bits per channel including alpha.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_R8G8B8A8_UINT']/*"/>	
            <msdn-id>bb173059</msdn-id>	
            <unmanaged>DXGI_FORMAT_R8G8B8A8_UINT</unmanaged>	
            <unmanaged-short>DXGI_FORMAT_R8G8B8A8_UINT</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.Format.R8G8B8A8_SNorm">
            <summary>	
            <dd> <p>A four-component, 32-bit signed-normalized-integer format that supports 8 bits per channel including alpha.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_R8G8B8A8_SNORM']/*"/>	
            <msdn-id>bb173059</msdn-id>	
            <unmanaged>DXGI_FORMAT_R8G8B8A8_SNORM</unmanaged>	
            <unmanaged-short>DXGI_FORMAT_R8G8B8A8_SNORM</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.Format.R8G8B8A8_SInt">
            <summary>	
            <dd> <p>A four-component, 32-bit signed-integer format that supports 8 bits per channel including alpha.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_R8G8B8A8_SINT']/*"/>	
            <msdn-id>bb173059</msdn-id>	
            <unmanaged>DXGI_FORMAT_R8G8B8A8_SINT</unmanaged>	
            <unmanaged-short>DXGI_FORMAT_R8G8B8A8_SINT</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.Format.R16G16_Typeless">
            <summary>	
            <dd> <p>A two-component, 32-bit typeless format that supports 16 bits for the red channel and 16 bits for the green channel.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_R16G16_TYPELESS']/*"/>	
            <msdn-id>bb173059</msdn-id>	
            <unmanaged>DXGI_FORMAT_R16G16_TYPELESS</unmanaged>	
            <unmanaged-short>DXGI_FORMAT_R16G16_TYPELESS</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.Format.R16G16_Float">
            <summary>	
            <dd> <p>A two-component, 32-bit floating-point format that supports 16 bits for the red channel and 16 bits for the green channel.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_R16G16_FLOAT']/*"/>	
            <msdn-id>bb173059</msdn-id>	
            <unmanaged>DXGI_FORMAT_R16G16_FLOAT</unmanaged>	
            <unmanaged-short>DXGI_FORMAT_R16G16_FLOAT</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.Format.R16G16_UNorm">
            <summary>	
            <dd> <p>A two-component, 32-bit unsigned-normalized-integer format that supports 16 bits each for the green and red channels.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_R16G16_UNORM']/*"/>	
            <msdn-id>bb173059</msdn-id>	
            <unmanaged>DXGI_FORMAT_R16G16_UNORM</unmanaged>	
            <unmanaged-short>DXGI_FORMAT_R16G16_UNORM</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.Format.R16G16_UInt">
            <summary>	
            <dd> <p>A two-component, 32-bit unsigned-integer format that supports 16 bits for the red channel and 16 bits for the green channel.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_R16G16_UINT']/*"/>	
            <msdn-id>bb173059</msdn-id>	
            <unmanaged>DXGI_FORMAT_R16G16_UINT</unmanaged>	
            <unmanaged-short>DXGI_FORMAT_R16G16_UINT</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.Format.R16G16_SNorm">
            <summary>	
            <dd> <p>A two-component, 32-bit signed-normalized-integer format that supports 16 bits for the red channel and 16 bits for the green channel.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_R16G16_SNORM']/*"/>	
            <msdn-id>bb173059</msdn-id>	
            <unmanaged>DXGI_FORMAT_R16G16_SNORM</unmanaged>	
            <unmanaged-short>DXGI_FORMAT_R16G16_SNORM</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.Format.R16G16_SInt">
            <summary>	
            <dd> <p>A two-component, 32-bit signed-integer format that supports 16 bits for the red channel and 16 bits for the green channel.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_R16G16_SINT']/*"/>	
            <msdn-id>bb173059</msdn-id>	
            <unmanaged>DXGI_FORMAT_R16G16_SINT</unmanaged>	
            <unmanaged-short>DXGI_FORMAT_R16G16_SINT</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.Format.R32_Typeless">
            <summary>	
            <dd> <p>A single-component, 32-bit typeless format that supports 32 bits for the red channel.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_R32_TYPELESS']/*"/>	
            <msdn-id>bb173059</msdn-id>	
            <unmanaged>DXGI_FORMAT_R32_TYPELESS</unmanaged>	
            <unmanaged-short>DXGI_FORMAT_R32_TYPELESS</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.Format.D32_Float">
            <summary>	
            <dd> <p>A single-component, 32-bit floating-point format that supports 32 bits for depth.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_D32_FLOAT']/*"/>	
            <msdn-id>bb173059</msdn-id>	
            <unmanaged>DXGI_FORMAT_D32_FLOAT</unmanaged>	
            <unmanaged-short>DXGI_FORMAT_D32_FLOAT</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.Format.R32_Float">
            <summary>	
            <dd> <p>A single-component, 32-bit floating-point format that supports 32 bits for the red channel.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_R32_FLOAT']/*"/>	
            <msdn-id>bb173059</msdn-id>	
            <unmanaged>DXGI_FORMAT_R32_FLOAT</unmanaged>	
            <unmanaged-short>DXGI_FORMAT_R32_FLOAT</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.Format.R32_UInt">
            <summary>	
            <dd> <p>A single-component, 32-bit unsigned-integer format that supports 32 bits for the red channel.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_R32_UINT']/*"/>	
            <msdn-id>bb173059</msdn-id>	
            <unmanaged>DXGI_FORMAT_R32_UINT</unmanaged>	
            <unmanaged-short>DXGI_FORMAT_R32_UINT</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.Format.R32_SInt">
            <summary>	
            <dd> <p>A single-component, 32-bit signed-integer format that supports 32 bits for the red channel.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_R32_SINT']/*"/>	
            <msdn-id>bb173059</msdn-id>	
            <unmanaged>DXGI_FORMAT_R32_SINT</unmanaged>	
            <unmanaged-short>DXGI_FORMAT_R32_SINT</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.Format.R24G8_Typeless">
            <summary>	
            <dd> <p>A two-component, 32-bit typeless format that supports 24 bits for the red channel and 8 bits for the green channel.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_R24G8_TYPELESS']/*"/>	
            <msdn-id>bb173059</msdn-id>	
            <unmanaged>DXGI_FORMAT_R24G8_TYPELESS</unmanaged>	
            <unmanaged-short>DXGI_FORMAT_R24G8_TYPELESS</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.Format.D24_UNorm_S8_UInt">
            <summary>	
            <dd> <p>A 32-bit z-buffer format that supports 24 bits for depth and 8 bits for stencil.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_D24_UNORM_S8_UINT']/*"/>	
            <msdn-id>bb173059</msdn-id>	
            <unmanaged>DXGI_FORMAT_D24_UNORM_S8_UINT</unmanaged>	
            <unmanaged-short>DXGI_FORMAT_D24_UNORM_S8_UINT</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.Format.R24_UNorm_X8_Typeless">
            <summary>	
            <dd> <p>A 32-bit format, that contains a 24 bit, single-component, unsigned-normalized integer, with an additional typeless 8 bits. This format has 24 bits red channel and 8 bits unused.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_R24_UNORM_X8_TYPELESS']/*"/>	
            <msdn-id>bb173059</msdn-id>	
            <unmanaged>DXGI_FORMAT_R24_UNORM_X8_TYPELESS</unmanaged>	
            <unmanaged-short>DXGI_FORMAT_R24_UNORM_X8_TYPELESS</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.Format.X24_Typeless_G8_UInt">
            <summary>	
            <dd> <p>A 32-bit format, that contains a 24 bit, single-component, typeless format,  with an additional 8 bit unsigned integer component. This format has 24 bits unused and 8 bits green channel.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_X24_TYPELESS_G8_UINT']/*"/>	
            <msdn-id>bb173059</msdn-id>	
            <unmanaged>DXGI_FORMAT_X24_TYPELESS_G8_UINT</unmanaged>	
            <unmanaged-short>DXGI_FORMAT_X24_TYPELESS_G8_UINT</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.Format.R8G8_Typeless">
            <summary>	
            <dd> <p>A two-component, 16-bit typeless format that supports 8 bits for the red channel and 8 bits for the green channel.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_R8G8_TYPELESS']/*"/>	
            <msdn-id>bb173059</msdn-id>	
            <unmanaged>DXGI_FORMAT_R8G8_TYPELESS</unmanaged>	
            <unmanaged-short>DXGI_FORMAT_R8G8_TYPELESS</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.Format.R8G8_UNorm">
            <summary>	
            <dd> <p>A two-component, 16-bit unsigned-normalized-integer format that supports 8 bits for the red channel and 8 bits for the green channel.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_R8G8_UNORM']/*"/>	
            <msdn-id>bb173059</msdn-id>	
            <unmanaged>DXGI_FORMAT_R8G8_UNORM</unmanaged>	
            <unmanaged-short>DXGI_FORMAT_R8G8_UNORM</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.Format.R8G8_UInt">
            <summary>	
            <dd> <p>A two-component, 16-bit unsigned-integer format that supports 8 bits for the red channel and 8 bits for the green channel.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_R8G8_UINT']/*"/>	
            <msdn-id>bb173059</msdn-id>	
            <unmanaged>DXGI_FORMAT_R8G8_UINT</unmanaged>	
            <unmanaged-short>DXGI_FORMAT_R8G8_UINT</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.Format.R8G8_SNorm">
            <summary>	
            <dd> <p>A two-component, 16-bit signed-normalized-integer format that supports 8 bits for the red channel and 8 bits for the green channel.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_R8G8_SNORM']/*"/>	
            <msdn-id>bb173059</msdn-id>	
            <unmanaged>DXGI_FORMAT_R8G8_SNORM</unmanaged>	
            <unmanaged-short>DXGI_FORMAT_R8G8_SNORM</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.Format.R8G8_SInt">
            <summary>	
            <dd> <p>A two-component, 16-bit signed-integer format that supports 8 bits for the red channel and 8 bits for the green channel.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_R8G8_SINT']/*"/>	
            <msdn-id>bb173059</msdn-id>	
            <unmanaged>DXGI_FORMAT_R8G8_SINT</unmanaged>	
            <unmanaged-short>DXGI_FORMAT_R8G8_SINT</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.Format.R16_Typeless">
            <summary>	
            <dd> <p>A single-component, 16-bit typeless format that supports 16 bits for the red channel.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_R16_TYPELESS']/*"/>	
            <msdn-id>bb173059</msdn-id>	
            <unmanaged>DXGI_FORMAT_R16_TYPELESS</unmanaged>	
            <unmanaged-short>DXGI_FORMAT_R16_TYPELESS</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.Format.R16_Float">
            <summary>	
            <dd> <p>A single-component, 16-bit floating-point format that supports 16 bits for the red channel.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_R16_FLOAT']/*"/>	
            <msdn-id>bb173059</msdn-id>	
            <unmanaged>DXGI_FORMAT_R16_FLOAT</unmanaged>	
            <unmanaged-short>DXGI_FORMAT_R16_FLOAT</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.Format.D16_UNorm">
            <summary>	
            <dd> <p>A single-component, 16-bit unsigned-normalized-integer format that supports 16 bits for depth.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_D16_UNORM']/*"/>	
            <msdn-id>bb173059</msdn-id>	
            <unmanaged>DXGI_FORMAT_D16_UNORM</unmanaged>	
            <unmanaged-short>DXGI_FORMAT_D16_UNORM</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.Format.R16_UNorm">
            <summary>	
            <dd> <p>A single-component, 16-bit unsigned-normalized-integer format that supports 16 bits for the red channel.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_R16_UNORM']/*"/>	
            <msdn-id>bb173059</msdn-id>	
            <unmanaged>DXGI_FORMAT_R16_UNORM</unmanaged>	
            <unmanaged-short>DXGI_FORMAT_R16_UNORM</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.Format.R16_UInt">
            <summary>	
            <dd> <p>A single-component, 16-bit unsigned-integer format that supports 16 bits for the red channel.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_R16_UINT']/*"/>	
            <msdn-id>bb173059</msdn-id>	
            <unmanaged>DXGI_FORMAT_R16_UINT</unmanaged>	
            <unmanaged-short>DXGI_FORMAT_R16_UINT</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.Format.R16_SNorm">
            <summary>	
            <dd> <p>A single-component, 16-bit signed-normalized-integer format that supports 16 bits for the red channel.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_R16_SNORM']/*"/>	
            <msdn-id>bb173059</msdn-id>	
            <unmanaged>DXGI_FORMAT_R16_SNORM</unmanaged>	
            <unmanaged-short>DXGI_FORMAT_R16_SNORM</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.Format.R16_SInt">
            <summary>	
            <dd> <p>A single-component, 16-bit signed-integer format that supports 16 bits for the red channel.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_R16_SINT']/*"/>	
            <msdn-id>bb173059</msdn-id>	
            <unmanaged>DXGI_FORMAT_R16_SINT</unmanaged>	
            <unmanaged-short>DXGI_FORMAT_R16_SINT</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.Format.R8_Typeless">
            <summary>	
            <dd> <p>A single-component, 8-bit typeless format that supports 8 bits for the red channel.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_R8_TYPELESS']/*"/>	
            <msdn-id>bb173059</msdn-id>	
            <unmanaged>DXGI_FORMAT_R8_TYPELESS</unmanaged>	
            <unmanaged-short>DXGI_FORMAT_R8_TYPELESS</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.Format.R8_UNorm">
            <summary>	
            <dd> <p>A single-component, 8-bit unsigned-normalized-integer format that supports 8 bits for the red channel.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_R8_UNORM']/*"/>	
            <msdn-id>bb173059</msdn-id>	
            <unmanaged>DXGI_FORMAT_R8_UNORM</unmanaged>	
            <unmanaged-short>DXGI_FORMAT_R8_UNORM</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.Format.R8_UInt">
            <summary>	
            <dd> <p>A single-component, 8-bit unsigned-integer format that supports 8 bits for the red channel.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_R8_UINT']/*"/>	
            <msdn-id>bb173059</msdn-id>	
            <unmanaged>DXGI_FORMAT_R8_UINT</unmanaged>	
            <unmanaged-short>DXGI_FORMAT_R8_UINT</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.Format.R8_SNorm">
            <summary>	
            <dd> <p>A single-component, 8-bit signed-normalized-integer format that supports 8 bits for the red channel.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_R8_SNORM']/*"/>	
            <msdn-id>bb173059</msdn-id>	
            <unmanaged>DXGI_FORMAT_R8_SNORM</unmanaged>	
            <unmanaged-short>DXGI_FORMAT_R8_SNORM</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.Format.R8_SInt">
            <summary>	
            <dd> <p>A single-component, 8-bit signed-integer format that supports 8 bits for the red channel.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_R8_SINT']/*"/>	
            <msdn-id>bb173059</msdn-id>	
            <unmanaged>DXGI_FORMAT_R8_SINT</unmanaged>	
            <unmanaged-short>DXGI_FORMAT_R8_SINT</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.Format.A8_UNorm">
            <summary>	
            <dd> <p>A single-component, 8-bit unsigned-normalized-integer format for alpha only.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_A8_UNORM']/*"/>	
            <msdn-id>bb173059</msdn-id>	
            <unmanaged>DXGI_FORMAT_A8_UNORM</unmanaged>	
            <unmanaged-short>DXGI_FORMAT_A8_UNORM</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.Format.R1_UNorm">
            <summary>	
            <dd> <p>A single-component, 1-bit unsigned-normalized integer format that supports 1 bit for the red channel. 2.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_R1_UNORM']/*"/>	
            <msdn-id>bb173059</msdn-id>	
            <unmanaged>DXGI_FORMAT_R1_UNORM</unmanaged>	
            <unmanaged-short>DXGI_FORMAT_R1_UNORM</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.Format.R9G9B9E5_Sharedexp">
            <summary>	
            <dd> <p>Three partial-precision floating-point numbers encoded into a single 32-bit value all sharing the same 5-bit exponent (variant of s10e5, which is sign bit, 10-bit mantissa, and 5-bit biased (15) exponent).  There is no sign bit, and there is a shared 5-bit biased (15) exponent and a 9-bit mantissa for each channel, as shown in the following illustration. 2.</p> <p></p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_R9G9B9E5_SHAREDEXP']/*"/>	
            <msdn-id>bb173059</msdn-id>	
            <unmanaged>DXGI_FORMAT_R9G9B9E5_SHAREDEXP</unmanaged>	
            <unmanaged-short>DXGI_FORMAT_R9G9B9E5_SHAREDEXP</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.Format.R8G8_B8G8_UNorm">
            <summary>	
            <dd> <p>A four-component, 32-bit unsigned-normalized-integer format. This packed RGB format is analogous to the UYVY format. Each 32-bit block describes a pair of pixels: (R8, G8, B8) and (R8, G8, B8) where the R8/B8 values are repeated, and the G8 values are unique to each pixel. 3</p> <p>Width must be even.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_R8G8_B8G8_UNORM']/*"/>	
            <msdn-id>bb173059</msdn-id>	
            <unmanaged>DXGI_FORMAT_R8G8_B8G8_UNORM</unmanaged>	
            <unmanaged-short>DXGI_FORMAT_R8G8_B8G8_UNORM</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.Format.G8R8_G8B8_UNorm">
            <summary>	
            <dd> <p>A four-component, 32-bit unsigned-normalized-integer format. This packed RGB format is analogous to the YUY2 format. Each 32-bit block describes a pair of pixels: (R8, G8, B8) and (R8, G8, B8) where the R8/B8 values are repeated, and the G8 values are unique to each pixel. 3</p> <p>Width must be even.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_G8R8_G8B8_UNORM']/*"/>	
            <msdn-id>bb173059</msdn-id>	
            <unmanaged>DXGI_FORMAT_G8R8_G8B8_UNORM</unmanaged>	
            <unmanaged-short>DXGI_FORMAT_G8R8_G8B8_UNORM</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.Format.BC1_Typeless">
            <summary>	
            <dd> <p>Four-component typeless block-compression format. For information about block-compression formats, see Texture Block Compression in Direct3D 11.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_BC1_TYPELESS']/*"/>	
            <msdn-id>bb173059</msdn-id>	
            <unmanaged>DXGI_FORMAT_BC1_TYPELESS</unmanaged>	
            <unmanaged-short>DXGI_FORMAT_BC1_TYPELESS</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.Format.BC1_UNorm">
            <summary>	
            <dd> <p>Four-component block-compression format. For information about block-compression formats, see Texture Block Compression in Direct3D 11.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_BC1_UNORM']/*"/>	
            <msdn-id>bb173059</msdn-id>	
            <unmanaged>DXGI_FORMAT_BC1_UNORM</unmanaged>	
            <unmanaged-short>DXGI_FORMAT_BC1_UNORM</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.Format.BC1_UNorm_SRgb">
            <summary>	
            <dd> <p>Four-component block-compression format for sRGB data. For information about block-compression formats, see Texture Block Compression in Direct3D 11.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_BC1_UNORM_SRGB']/*"/>	
            <msdn-id>bb173059</msdn-id>	
            <unmanaged>DXGI_FORMAT_BC1_UNORM_SRGB</unmanaged>	
            <unmanaged-short>DXGI_FORMAT_BC1_UNORM_SRGB</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.Format.BC2_Typeless">
            <summary>	
            <dd> <p>Four-component typeless block-compression format. For information about block-compression formats, see Texture Block Compression in Direct3D 11.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_BC2_TYPELESS']/*"/>	
            <msdn-id>bb173059</msdn-id>	
            <unmanaged>DXGI_FORMAT_BC2_TYPELESS</unmanaged>	
            <unmanaged-short>DXGI_FORMAT_BC2_TYPELESS</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.Format.BC2_UNorm">
            <summary>	
            <dd> <p>Four-component block-compression format. For information about block-compression formats, see Texture Block Compression in Direct3D 11.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_BC2_UNORM']/*"/>	
            <msdn-id>bb173059</msdn-id>	
            <unmanaged>DXGI_FORMAT_BC2_UNORM</unmanaged>	
            <unmanaged-short>DXGI_FORMAT_BC2_UNORM</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.Format.BC2_UNorm_SRgb">
            <summary>	
            <dd> <p>Four-component block-compression format for sRGB data. For information about block-compression formats, see Texture Block Compression in Direct3D 11.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_BC2_UNORM_SRGB']/*"/>	
            <msdn-id>bb173059</msdn-id>	
            <unmanaged>DXGI_FORMAT_BC2_UNORM_SRGB</unmanaged>	
            <unmanaged-short>DXGI_FORMAT_BC2_UNORM_SRGB</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.Format.BC3_Typeless">
            <summary>	
            <dd> <p>Four-component typeless block-compression format. For information about block-compression formats, see Texture Block Compression in Direct3D 11.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_BC3_TYPELESS']/*"/>	
            <msdn-id>bb173059</msdn-id>	
            <unmanaged>DXGI_FORMAT_BC3_TYPELESS</unmanaged>	
            <unmanaged-short>DXGI_FORMAT_BC3_TYPELESS</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.Format.BC3_UNorm">
            <summary>	
            <dd> <p>Four-component block-compression format. For information about block-compression formats, see Texture Block Compression in Direct3D 11.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_BC3_UNORM']/*"/>	
            <msdn-id>bb173059</msdn-id>	
            <unmanaged>DXGI_FORMAT_BC3_UNORM</unmanaged>	
            <unmanaged-short>DXGI_FORMAT_BC3_UNORM</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.Format.BC3_UNorm_SRgb">
            <summary>	
            <dd> <p>Four-component block-compression format for sRGB data. For information about block-compression formats, see Texture Block Compression in Direct3D 11.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_BC3_UNORM_SRGB']/*"/>	
            <msdn-id>bb173059</msdn-id>	
            <unmanaged>DXGI_FORMAT_BC3_UNORM_SRGB</unmanaged>	
            <unmanaged-short>DXGI_FORMAT_BC3_UNORM_SRGB</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.Format.BC4_Typeless">
            <summary>	
            <dd> <p>One-component typeless block-compression format. For information about block-compression formats, see Texture Block Compression in Direct3D 11.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_BC4_TYPELESS']/*"/>	
            <msdn-id>bb173059</msdn-id>	
            <unmanaged>DXGI_FORMAT_BC4_TYPELESS</unmanaged>	
            <unmanaged-short>DXGI_FORMAT_BC4_TYPELESS</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.Format.BC4_UNorm">
            <summary>	
            <dd> <p>One-component block-compression format. For information about block-compression formats, see Texture Block Compression in Direct3D 11.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_BC4_UNORM']/*"/>	
            <msdn-id>bb173059</msdn-id>	
            <unmanaged>DXGI_FORMAT_BC4_UNORM</unmanaged>	
            <unmanaged-short>DXGI_FORMAT_BC4_UNORM</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.Format.BC4_SNorm">
            <summary>	
            <dd> <p>One-component block-compression format. For information about block-compression formats, see Texture Block Compression in Direct3D 11.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_BC4_SNORM']/*"/>	
            <msdn-id>bb173059</msdn-id>	
            <unmanaged>DXGI_FORMAT_BC4_SNORM</unmanaged>	
            <unmanaged-short>DXGI_FORMAT_BC4_SNORM</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.Format.BC5_Typeless">
            <summary>	
            <dd> <p>Two-component typeless block-compression format. For information about block-compression formats, see Texture Block Compression in Direct3D 11.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_BC5_TYPELESS']/*"/>	
            <msdn-id>bb173059</msdn-id>	
            <unmanaged>DXGI_FORMAT_BC5_TYPELESS</unmanaged>	
            <unmanaged-short>DXGI_FORMAT_BC5_TYPELESS</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.Format.BC5_UNorm">
            <summary>	
            <dd> <p>Two-component block-compression format. For information about block-compression formats, see Texture Block Compression in Direct3D 11.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_BC5_UNORM']/*"/>	
            <msdn-id>bb173059</msdn-id>	
            <unmanaged>DXGI_FORMAT_BC5_UNORM</unmanaged>	
            <unmanaged-short>DXGI_FORMAT_BC5_UNORM</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.Format.BC5_SNorm">
            <summary>	
            <dd> <p>Two-component block-compression format. For information about block-compression formats, see Texture Block Compression in Direct3D 11.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_BC5_SNORM']/*"/>	
            <msdn-id>bb173059</msdn-id>	
            <unmanaged>DXGI_FORMAT_BC5_SNORM</unmanaged>	
            <unmanaged-short>DXGI_FORMAT_BC5_SNORM</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.Format.B5G6R5_UNorm">
            <summary>	
            <dd> <p>A three-component, 16-bit unsigned-normalized-integer format that supports 5 bits for blue, 6 bits for green, and 5 bits for red.</p> <p><strong>Direct3D 10 through Direct3D 11:??</strong>This value is defined for DXGI. However, Direct3D 10, 10.1, or 11 devices do not support this format.</p> <p><strong>Direct3D 11.1:??</strong>This value is not supported until Windows?8.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_B5G6R5_UNORM']/*"/>	
            <msdn-id>bb173059</msdn-id>	
            <unmanaged>DXGI_FORMAT_B5G6R5_UNORM</unmanaged>	
            <unmanaged-short>DXGI_FORMAT_B5G6R5_UNORM</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.Format.B5G5R5A1_UNorm">
            <summary>	
            <dd> <p>A four-component, 16-bit unsigned-normalized-integer format that supports 5 bits for each color channel and 1-bit alpha.</p> <p><strong>Direct3D 10 through Direct3D 11:??</strong>This value is defined for DXGI. However, Direct3D 10, 10.1, or 11 devices do not support this format.</p> <p><strong>Direct3D 11.1:??</strong>This value is not supported until Windows?8.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_B5G5R5A1_UNORM']/*"/>	
            <msdn-id>bb173059</msdn-id>	
            <unmanaged>DXGI_FORMAT_B5G5R5A1_UNORM</unmanaged>	
            <unmanaged-short>DXGI_FORMAT_B5G5R5A1_UNORM</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.Format.B8G8R8A8_UNorm">
            <summary>	
            <dd> <p>A four-component, 32-bit unsigned-normalized-integer format that supports 8 bits for each color channel and 8-bit alpha.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_B8G8R8A8_UNORM']/*"/>	
            <msdn-id>bb173059</msdn-id>	
            <unmanaged>DXGI_FORMAT_B8G8R8A8_UNORM</unmanaged>	
            <unmanaged-short>DXGI_FORMAT_B8G8R8A8_UNORM</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.Format.B8G8R8X8_UNorm">
            <summary>	
            <dd> <p>A four-component, 32-bit unsigned-normalized-integer format that supports 8 bits for each color channel and 8 bits unused.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_B8G8R8X8_UNORM']/*"/>	
            <msdn-id>bb173059</msdn-id>	
            <unmanaged>DXGI_FORMAT_B8G8R8X8_UNORM</unmanaged>	
            <unmanaged-short>DXGI_FORMAT_B8G8R8X8_UNORM</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.Format.R10G10B10_Xr_Bias_A2_UNorm">
            <summary>	
            <dd> <p>A four-component, 32-bit 2.8-biased fixed-point format that supports 10 bits for each color channel and 2-bit alpha.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_R10G10B10_XR_BIAS_A2_UNORM']/*"/>	
            <msdn-id>bb173059</msdn-id>	
            <unmanaged>DXGI_FORMAT_R10G10B10_XR_BIAS_A2_UNORM</unmanaged>	
            <unmanaged-short>DXGI_FORMAT_R10G10B10_XR_BIAS_A2_UNORM</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.Format.B8G8R8A8_Typeless">
            <summary>	
            <dd> <p>A four-component, 32-bit typeless format that supports 8 bits for each channel including alpha. 4</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_B8G8R8A8_TYPELESS']/*"/>	
            <msdn-id>bb173059</msdn-id>	
            <unmanaged>DXGI_FORMAT_B8G8R8A8_TYPELESS</unmanaged>	
            <unmanaged-short>DXGI_FORMAT_B8G8R8A8_TYPELESS</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.Format.B8G8R8A8_UNorm_SRgb">
            <summary>	
            <dd> <p>A four-component, 32-bit unsigned-normalized standard RGB format that supports 8 bits for each channel including alpha. 4</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_B8G8R8A8_UNORM_SRGB']/*"/>	
            <msdn-id>bb173059</msdn-id>	
            <unmanaged>DXGI_FORMAT_B8G8R8A8_UNORM_SRGB</unmanaged>	
            <unmanaged-short>DXGI_FORMAT_B8G8R8A8_UNORM_SRGB</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.Format.B8G8R8X8_Typeless">
            <summary>	
            <dd> <p>A four-component, 32-bit typeless format that supports 8 bits for each color channel, and 8 bits are unused. 4</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_B8G8R8X8_TYPELESS']/*"/>	
            <msdn-id>bb173059</msdn-id>	
            <unmanaged>DXGI_FORMAT_B8G8R8X8_TYPELESS</unmanaged>	
            <unmanaged-short>DXGI_FORMAT_B8G8R8X8_TYPELESS</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.Format.B8G8R8X8_UNorm_SRgb">
            <summary>	
            <dd> <p>A four-component, 32-bit unsigned-normalized standard RGB format that supports 8 bits for each color channel, and 8 bits are unused. 4</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_B8G8R8X8_UNORM_SRGB']/*"/>	
            <msdn-id>bb173059</msdn-id>	
            <unmanaged>DXGI_FORMAT_B8G8R8X8_UNORM_SRGB</unmanaged>	
            <unmanaged-short>DXGI_FORMAT_B8G8R8X8_UNORM_SRGB</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.Format.BC6H_Typeless">
            <summary>	
            <dd> <p>A typeless block-compression format. 4 For information about block-compression formats, see Texture Block Compression in Direct3D 11.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_BC6H_TYPELESS']/*"/>	
            <msdn-id>bb173059</msdn-id>	
            <unmanaged>DXGI_FORMAT_BC6H_TYPELESS</unmanaged>	
            <unmanaged-short>DXGI_FORMAT_BC6H_TYPELESS</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.Format.BC6H_Uf16">
            <summary>	
            <dd> <p>A block-compression format. 4 For information about block-compression formats, see Texture Block Compression in Direct3D 11.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_BC6H_UF16']/*"/>	
            <msdn-id>bb173059</msdn-id>	
            <unmanaged>DXGI_FORMAT_BC6H_UF16</unmanaged>	
            <unmanaged-short>DXGI_FORMAT_BC6H_UF16</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.Format.BC6H_Sf16">
            <summary>	
            <dd> <p>A block-compression format. 4 For information about block-compression formats, see Texture Block Compression in Direct3D 11.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_BC6H_SF16']/*"/>	
            <msdn-id>bb173059</msdn-id>	
            <unmanaged>DXGI_FORMAT_BC6H_SF16</unmanaged>	
            <unmanaged-short>DXGI_FORMAT_BC6H_SF16</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.Format.BC7_Typeless">
            <summary>	
            <dd> <p>A typeless block-compression format. 4 For information about block-compression formats, see Texture Block Compression in Direct3D 11.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_BC7_TYPELESS']/*"/>	
            <msdn-id>bb173059</msdn-id>	
            <unmanaged>DXGI_FORMAT_BC7_TYPELESS</unmanaged>	
            <unmanaged-short>DXGI_FORMAT_BC7_TYPELESS</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.Format.BC7_UNorm">
            <summary>	
            <dd> <p>A block-compression format. 4 For information about block-compression formats, see Texture Block Compression in Direct3D 11.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_BC7_UNORM']/*"/>	
            <msdn-id>bb173059</msdn-id>	
            <unmanaged>DXGI_FORMAT_BC7_UNORM</unmanaged>	
            <unmanaged-short>DXGI_FORMAT_BC7_UNORM</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.Format.BC7_UNorm_SRgb">
            <summary>	
            <dd> <p>A block-compression format. 4 For information about block-compression formats, see Texture Block Compression in Direct3D 11.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FORMAT_BC7_UNORM_SRGB']/*"/>	
            <msdn-id>bb173059</msdn-id>	
            <unmanaged>DXGI_FORMAT_BC7_UNORM_SRGB</unmanaged>	
            <unmanaged-short>DXGI_FORMAT_BC7_UNORM_SRGB</unmanaged-short>	
        </member>
        <member name="T:SharpDX.DXGI.MapFlags">
            <summary>	
            <p>Identifies how to perform a present operation.</p>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_MAP_FLAGS']/*"/>	
            <msdn-id>ff557509</msdn-id>	
            <unmanaged>DXGI_MAP_FLAGS</unmanaged>	
            <unmanaged-short>DXGI_MAP_FLAGS</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.MapFlags.Read">
            <summary>	
            <dd> <p>Specifies whether to perform a bit-block transfer (bitblt) data to the primary surface. </p> <p>Setting this member is equivalent to setting the first bit of the 32-bit <strong>Value</strong> member (0x00000001).</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_MAP_READ']/*"/>	
            <msdn-id>ff557509</msdn-id>	
            <unmanaged>DXGI_MAP_READ</unmanaged>	
            <unmanaged-short>DXGI_MAP_READ</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.MapFlags.Write">
            <summary>	
            <dd> <p>Specifies whether to flip to a new surface. </p> <p>Setting this member is equivalent to setting the second bit of the 32-bit <strong>Value</strong> member (0x00000002).</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_MAP_WRITE']/*"/>	
            <msdn-id>ff557509</msdn-id>	
            <unmanaged>DXGI_MAP_WRITE</unmanaged>	
            <unmanaged-short>DXGI_MAP_WRITE</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.MapFlags.Discard">
            <summary>	
            <dd> <p>Supported in Windows?8 and later versions.</p> <p>Specifies that, if a stereo present operation must be reduced to mono, the present operation should show the view from the right eye.</p> <p>If this member is not set, the default mono present operation shows the view from the left eye.</p> <p>Setting this member is equivalent to setting the third bit of the 32-bit <strong>Value</strong> member (0x00000004).</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_MAP_DISCARD']/*"/>	
            <msdn-id>ff557509</msdn-id>	
            <unmanaged>DXGI_MAP_DISCARD</unmanaged>	
            <unmanaged-short>DXGI_MAP_DISCARD</unmanaged-short>	
        </member>
        <member name="T:SharpDX.DXGI.PresentFlags">
            <summary>	
            <p>Identifies how to perform a present operation.</p>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_PRESENT_FLAGS']/*"/>	
            <msdn-id>ff557509</msdn-id>	
            <unmanaged>DXGI_PRESENT_FLAGS</unmanaged>	
            <unmanaged-short>DXGI_PRESENT_FLAGS</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.PresentFlags.Test">
            <summary>	
            <dd> <p>Specifies whether to perform a bit-block transfer (bitblt) data to the primary surface. </p> <p>Setting this member is equivalent to setting the first bit of the 32-bit <strong>Value</strong> member (0x00000001).</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_PRESENT_TEST']/*"/>	
            <msdn-id>ff557509</msdn-id>	
            <unmanaged>DXGI_PRESENT_TEST</unmanaged>	
            <unmanaged-short>DXGI_PRESENT_TEST</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.PresentFlags.DoNotSequence">
            <summary>	
            <dd> <p>Specifies whether to flip to a new surface. </p> <p>Setting this member is equivalent to setting the second bit of the 32-bit <strong>Value</strong> member (0x00000002).</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_PRESENT_DO_NOT_SEQUENCE']/*"/>	
            <msdn-id>ff557509</msdn-id>	
            <unmanaged>DXGI_PRESENT_DO_NOT_SEQUENCE</unmanaged>	
            <unmanaged-short>DXGI_PRESENT_DO_NOT_SEQUENCE</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.PresentFlags.Restart">
            <summary>	
            <dd> <p>Supported in Windows?8 and later versions.</p> <p>Specifies that, if a stereo present operation must be reduced to mono, the present operation should show the view from the right eye.</p> <p>If this member is not set, the default mono present operation shows the view from the left eye.</p> <p>Setting this member is equivalent to setting the third bit of the 32-bit <strong>Value</strong> member (0x00000004).</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_PRESENT_RESTART']/*"/>	
            <msdn-id>ff557509</msdn-id>	
            <unmanaged>DXGI_PRESENT_RESTART</unmanaged>	
            <unmanaged-short>DXGI_PRESENT_RESTART</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.PresentFlags.None">
            <summary>	
            None.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='']/*"/>	
            <unmanaged>None</unmanaged>	
            <unmanaged-short>None</unmanaged-short>	
        </member>
        <member name="T:SharpDX.DXGI.Residency">
            <summary>	
            <p>Flags indicating the memory location of a resource.</p>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_RESIDENCY']/*"/>	
            <msdn-id>bb173070</msdn-id>	
            <unmanaged>DXGI_RESIDENCY</unmanaged>	
            <unmanaged-short>DXGI_RESIDENCY</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.Residency.FullyResident">
            <summary>	
            <dd> <p>The resource is located in video memory.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_RESIDENCY_FULLY_RESIDENT']/*"/>	
            <msdn-id>bb173070</msdn-id>	
            <unmanaged>DXGI_RESIDENCY_FULLY_RESIDENT</unmanaged>	
            <unmanaged-short>DXGI_RESIDENCY_FULLY_RESIDENT</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.Residency.ResidentInSharedMemory">
            <summary>	
            <dd> <p>At least some of the resource is located in CPU memory.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_RESIDENCY_RESIDENT_IN_SHARED_MEMORY']/*"/>	
            <msdn-id>bb173070</msdn-id>	
            <unmanaged>DXGI_RESIDENCY_RESIDENT_IN_SHARED_MEMORY</unmanaged>	
            <unmanaged-short>DXGI_RESIDENCY_RESIDENT_IN_SHARED_MEMORY</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.Residency.EvictedToDisk">
            <summary>	
            <dd> <p>At least some of the resource has been paged out to the hard drive.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_RESIDENCY_EVICTED_TO_DISK']/*"/>	
            <msdn-id>bb173070</msdn-id>	
            <unmanaged>DXGI_RESIDENCY_EVICTED_TO_DISK</unmanaged>	
            <unmanaged-short>DXGI_RESIDENCY_EVICTED_TO_DISK</unmanaged-short>	
        </member>
        <member name="T:SharpDX.DXGI.ResourcePriority">
            <summary>	
            <p>Identifies the importance of a resource?s content when you call the  <strong>IDXGIDevice2::OfferResources</strong> method to offer the resource.</p>	
            </summary>	
            <remarks>	
            <p>Priority determines how likely the operating system is to discard an offered resource.  Resources offered with lower priority are discarded first.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_RESOURCE_PRIORITY']/*"/>	
            <msdn-id>hh404509</msdn-id>	
            <unmanaged>DXGI_RESOURCE_PRIORITY</unmanaged>	
            <unmanaged-short>DXGI_RESOURCE_PRIORITY</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.ResourcePriority.Minimum">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_RESOURCE_PRIORITY_MINIMUM']/*"/>	
            <msdn-id>hh404509</msdn-id>	
            <unmanaged>DXGI_RESOURCE_PRIORITY_MINIMUM</unmanaged>	
            <unmanaged-short>DXGI_RESOURCE_PRIORITY_MINIMUM</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.ResourcePriority.Low">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_RESOURCE_PRIORITY_LOW']/*"/>	
            <msdn-id>hh404509</msdn-id>	
            <unmanaged>DXGI_RESOURCE_PRIORITY_LOW</unmanaged>	
            <unmanaged-short>DXGI_RESOURCE_PRIORITY_LOW</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.ResourcePriority.Normal">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_RESOURCE_PRIORITY_NORMAL']/*"/>	
            <msdn-id>hh404509</msdn-id>	
            <unmanaged>DXGI_RESOURCE_PRIORITY_NORMAL</unmanaged>	
            <unmanaged-short>DXGI_RESOURCE_PRIORITY_NORMAL</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.ResourcePriority.High">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_RESOURCE_PRIORITY_HIGH']/*"/>	
            <msdn-id>hh404509</msdn-id>	
            <unmanaged>DXGI_RESOURCE_PRIORITY_HIGH</unmanaged>	
            <unmanaged-short>DXGI_RESOURCE_PRIORITY_HIGH</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.ResourcePriority.Maximum">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_RESOURCE_PRIORITY_MAXIMUM']/*"/>	
            <msdn-id>hh404509</msdn-id>	
            <unmanaged>DXGI_RESOURCE_PRIORITY_MAXIMUM</unmanaged>	
            <unmanaged-short>DXGI_RESOURCE_PRIORITY_MAXIMUM</unmanaged-short>	
        </member>
        <member name="T:SharpDX.DXGI.SharedResourceFlags">
            <summary>	
            <p>Options for swap-chain behavior.</p>	
            </summary>	
            <remarks>	
            <p>This enumeration is used by the <strong><see cref="T:SharpDX.DXGI.SwapChainDescription"/></strong> structure and the <strong><see cref="M:SharpDX.DXGI.SwapChain.ResizeTarget(SharpDX.DXGI.ModeDescription@)"/></strong> method.</p><p>This enumeration is also used by the  <strong>DXGI_SWAP_CHAIN_DESC1</strong> structure.</p><p>You don't need to set <strong>DXGI_SWAP_CHAIN_FLAG_DISPLAY_ONLY</strong> for swap chains that you create in full-screen mode  with the <strong><see cref="M:SharpDX.DXGI.Factory.CreateSwapChain(SharpDX.ComObject,SharpDX.DXGI.SwapChainDescription@,SharpDX.DXGI.SwapChain)"/></strong> method because those swap chains already behave as if <strong>DXGI_SWAP_CHAIN_FLAG_DISPLAY_ONLY</strong> is set. That is, presented content is not accessible by remote access or through the <strong>desktop duplication APIs</strong>.</p><p>Swap chains that you create with the <strong>IDXGIFactory2::CreateSwapChainForHwnd</strong>, <strong>IDXGIFactory2::CreateSwapChainForCoreWindow</strong>, and  <strong>IDXGIFactory2::CreateSwapChainForComposition</strong> methods are not protected if <strong>DXGI_SWAP_CHAIN_FLAG_DISPLAY_ONLY</strong> is not set and are protected if <strong>DXGI_SWAP_CHAIN_FLAG_DISPLAY_ONLY</strong> is set. When swap chains are protected, screen scraping is prevented and, in full-screen mode, presented content is not accessible through the <strong>desktop duplication APIs</strong>.</p><p>When you call <strong><see cref="M:SharpDX.DXGI.SwapChain.ResizeBuffers(System.Int32,System.Int32,System.Int32,SharpDX.DXGI.Format,SharpDX.DXGI.SwapChainFlags)"/></strong> to change the swap chain's back buffer, you can reset or change all <strong><see cref="T:SharpDX.DXGI.SwapChainFlags"/></strong> flags.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_SHARED_RESOURCE_FLAGS']/*"/>	
            <msdn-id>bb173076</msdn-id>	
            <unmanaged>DXGI_SHARED_RESOURCE_FLAGS</unmanaged>	
            <unmanaged-short>DXGI_SHARED_RESOURCE_FLAGS</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.SharedResourceFlags.None">
            <summary>	
            None.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='']/*"/>	
            <unmanaged>None</unmanaged>	
            <unmanaged-short>None</unmanaged-short>	
        </member>
        <member name="T:SharpDX.DXGI.SwapChainFlags">
            <summary>	
            <p>Options for swap-chain behavior.</p>	
            </summary>	
            <remarks>	
            <p>This enumeration is used by the <strong><see cref="T:SharpDX.DXGI.SwapChainDescription"/></strong> structure and the <strong><see cref="M:SharpDX.DXGI.SwapChain.ResizeTarget(SharpDX.DXGI.ModeDescription@)"/></strong> method.</p><p>This enumeration is also used by the  <strong>DXGI_SWAP_CHAIN_DESC1</strong> structure.</p><p>You don't need to set <strong>DXGI_SWAP_CHAIN_FLAG_DISPLAY_ONLY</strong> for swap chains that you create in full-screen mode  with the <strong><see cref="M:SharpDX.DXGI.Factory.CreateSwapChain(SharpDX.ComObject,SharpDX.DXGI.SwapChainDescription@,SharpDX.DXGI.SwapChain)"/></strong> method because those swap chains already behave as if <strong>DXGI_SWAP_CHAIN_FLAG_DISPLAY_ONLY</strong> is set. That is, presented content is not accessible by remote access or through the <strong>desktop duplication APIs</strong>.</p><p>Swap chains that you create with the <strong>IDXGIFactory2::CreateSwapChainForHwnd</strong>, <strong>IDXGIFactory2::CreateSwapChainForCoreWindow</strong>, and  <strong>IDXGIFactory2::CreateSwapChainForComposition</strong> methods are not protected if <strong>DXGI_SWAP_CHAIN_FLAG_DISPLAY_ONLY</strong> is not set and are protected if <strong>DXGI_SWAP_CHAIN_FLAG_DISPLAY_ONLY</strong> is set. When swap chains are protected, screen scraping is prevented and, in full-screen mode, presented content is not accessible through the <strong>desktop duplication APIs</strong>.</p><p>When you call <strong><see cref="M:SharpDX.DXGI.SwapChain.ResizeBuffers(System.Int32,System.Int32,System.Int32,SharpDX.DXGI.Format,SharpDX.DXGI.SwapChainFlags)"/></strong> to change the swap chain's back buffer, you can reset or change all <strong><see cref="T:SharpDX.DXGI.SwapChainFlags"/></strong> flags.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_SWAP_CHAIN_FLAG']/*"/>	
            <msdn-id>bb173076</msdn-id>	
            <unmanaged>DXGI_SWAP_CHAIN_FLAG</unmanaged>	
            <unmanaged-short>DXGI_SWAP_CHAIN_FLAG</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.SwapChainFlags.Nonprerotated">
            <summary>	
            <dd> <p>Set this flag to turn off automatic image rotation; that is, do not perform a rotation when transferring the contents of the front buffer to the monitor.  Use this flag to avoid a bandwidth penalty when an application expects to handle rotation. This option is valid only during full-screen mode. </p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_SWAP_CHAIN_FLAG_NONPREROTATED']/*"/>	
            <msdn-id>bb173076</msdn-id>	
            <unmanaged>DXGI_SWAP_CHAIN_FLAG_NONPREROTATED</unmanaged>	
            <unmanaged-short>DXGI_SWAP_CHAIN_FLAG_NONPREROTATED</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.SwapChainFlags.AllowModeSwitch">
            <summary>	
            <dd> <p>Set this flag to enable an application to switch modes by calling <strong><see cref="M:SharpDX.DXGI.SwapChain.ResizeTarget(SharpDX.DXGI.ModeDescription@)"/></strong>.  When switching from windowed to full-screen mode, the display mode (or monitor resolution) will be changed to match the dimensions of the application window.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_SWAP_CHAIN_FLAG_ALLOW_MODE_SWITCH']/*"/>	
            <msdn-id>bb173076</msdn-id>	
            <unmanaged>DXGI_SWAP_CHAIN_FLAG_ALLOW_MODE_SWITCH</unmanaged>	
            <unmanaged-short>DXGI_SWAP_CHAIN_FLAG_ALLOW_MODE_SWITCH</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.SwapChainFlags.GdiCompatible">
            <summary>	
            <dd> <p>Set this flag to enable an application to render using GDI on a swap chain or a surface.  This will allow the application to call <strong><see cref="M:SharpDX.DXGI.Surface1.GetDC(SharpDX.Bool)"/></strong> on the 0th back buffer or a surface.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_SWAP_CHAIN_FLAG_GDI_COMPATIBLE']/*"/>	
            <msdn-id>bb173076</msdn-id>	
            <unmanaged>DXGI_SWAP_CHAIN_FLAG_GDI_COMPATIBLE</unmanaged>	
            <unmanaged-short>DXGI_SWAP_CHAIN_FLAG_GDI_COMPATIBLE</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.SwapChainFlags.None">
            <summary>	
            None.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='']/*"/>	
            <unmanaged>None</unmanaged>	
            <unmanaged-short>None</unmanaged-short>	
        </member>
        <member name="T:SharpDX.DXGI.SwapEffect">
            <summary>	
            <p>Options for handling pixels in a display surface after calling <strong>IDXGISwapChain1::Present1</strong>.</p>	
            </summary>	
            <remarks>	
            <p>This enumeration is used by the <strong><see cref="T:SharpDX.DXGI.SwapChainDescription"/></strong> structure.</p><p>This enumeration is also used by the  <strong>DXGI_SWAP_CHAIN_DESC1</strong> structure.</p><p>To use multisampling with <strong><see cref="F:SharpDX.DXGI.SwapEffect.Sequential"/></strong> or <strong>DXGI_SWAP_EFFECT_FLIP_SEQUENTIAL</strong>, you must perform the multisampling in a separate render target. For example, create a multisampled texture by calling <strong><see cref="!:SharpDX.Direct3D11.Device.CreateTexture2D"/></strong> with a filled <strong><see cref="!:SharpDX.Direct3D11.Texture2DDescription"/></strong> structure (<strong>BindFlags</strong> member set to <strong><see cref="!:SharpDX.Direct3D11.BindFlags.RenderTarget"/></strong> and <strong>SampleDesc</strong> member with multisampling parameters). Next call <strong><see cref="!:SharpDX.Direct3D11.Device.CreateRenderTargetView"/></strong> to create a render-target view for the texture, and render your scene into the texture. Finally call <strong><see cref="!:SharpDX.Direct3D11.DeviceContext.ResolveSubresource_"/></strong> to resolve the multisampled texture into your non-multisampled swap chain.</p><p>The primary difference between presentation models is how back-buffer contents get to the Desktop Window Manager (DWM) for composition. In the bitblt model, which is used with the <strong><see cref="F:SharpDX.DXGI.SwapEffect.Discard"/></strong> and <strong><see cref="F:SharpDX.DXGI.SwapEffect.Sequential"/></strong> values, contents of the back buffer get copied into the redirection surface on each call to <strong>IDXGISwapChain1::Present1</strong>. In the flip model, which is used with the <strong>DXGI_SWAP_EFFECT_FLIP_SEQUENTIAL</strong> value, all back buffers are shared with the DWM. Therefore, the DWM can compose straight from those back buffers without any additional copy operations.	
            In general, the flip model is the more efficient model. The flip model also provides more features, such as enhanced present statistics.	
            </p><p>When you call <strong>IDXGISwapChain1::Present1</strong> on a flip model swap chain (<strong>DXGI_SWAP_EFFECT_FLIP_SEQUENTIAL</strong>) with 0 specified in the <em>SyncInterval</em> parameter, <strong>IDXGISwapChain1::Present1</strong>'s behavior is the same as the behavior of Direct3D 9Ex's <strong><see cref="!:SharpDX.Direct3D9.DeviceEx.PresentEx"/></strong> with <strong><see cref="!:SharpDX.Direct3D9.SwapEffect.FlipEx"/></strong> and <see cref="!:SharpDX.Direct3D9.Present.ForceImmediate"/>. That is, the runtime not only presents the next frame instead of any previously queued frames, it also terminates any remaining time left on the previously queued frames.</p><p>Regardless of whether the flip model is more efficient, an application still might choose the bitblt model because the bitblt model is the only way to mix GDI and DirectX presentation. In the flip model, the application must create the swap chain with <strong><see cref="F:SharpDX.DXGI.SwapChainFlags.GdiCompatible"/></strong>, and then must use <strong>GetDC</strong> on the back buffer explicitly. After the first successful call to <strong>IDXGISwapChain1::Present1</strong> on a flip-model swap chain, GDI no longer works with the <strong><see cref="T:System.IntPtr"/></strong> that is associated with that swap chain, even after the destruction of the swap chain. This restriction even extends to methods like <strong>ScrollWindowEx</strong>.</p><p>For more info about the flip-model swap chain and optimizing presentation, see Enhancing presentation with the flip model, dirty rectangles, and scrolled areas.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_SWAP_EFFECT']/*"/>	
            <msdn-id>bb173077</msdn-id>	
            <unmanaged>DXGI_SWAP_EFFECT</unmanaged>	
            <unmanaged-short>DXGI_SWAP_EFFECT</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.SwapEffect.Discard">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_SWAP_EFFECT_DISCARD']/*"/>	
            <msdn-id>bb173077</msdn-id>	
            <unmanaged>DXGI_SWAP_EFFECT_DISCARD</unmanaged>	
            <unmanaged-short>DXGI_SWAP_EFFECT_DISCARD</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.SwapEffect.Sequential">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_SWAP_EFFECT_SEQUENTIAL']/*"/>	
            <msdn-id>bb173077</msdn-id>	
            <unmanaged>DXGI_SWAP_EFFECT_SEQUENTIAL</unmanaged>	
            <unmanaged-short>DXGI_SWAP_EFFECT_SEQUENTIAL</unmanaged-short>	
        </member>
        <member name="T:SharpDX.DXGI.Usage">
            <summary>	
            <p>Flags for surface and resource creation options.</p><p></p>	
            </summary>	
            <remarks>	
            <p>Each flag is defined as an unsigned integer.</p><code> #define DXGI_CPU_ACCESS_NONE    ( 0 )	
            #define DXGI_CPU_ACCESS_DYNAMIC    ( 1 )	
            #define DXGI_CPU_ACCESS_READ_WRITE    ( 2 )	
            #define DXGI_CPU_ACCESS_SCRATCH    ( 3 )	
            #define DXGI_CPU_ACCESS_FIELD        15	
            #define <see cref="F:SharpDX.DXGI.Usage.ShaderInput"/>             ( 1L &lt;&lt; (0 + 4) )	
            #define <see cref="F:SharpDX.DXGI.Usage.RenderTargetOutput"/>     ( 1L &lt;&lt; (1 + 4) )	
            #define <see cref="F:SharpDX.DXGI.Usage.BackBuffer"/>              ( 1L &lt;&lt; (2 + 4) )	
            #define <see cref="F:SharpDX.DXGI.Usage.Shared"/>                   ( 1L &lt;&lt; (3 + 4) )	
            #define <see cref="F:SharpDX.DXGI.Usage.ReadOnly"/>                ( 1L &lt;&lt; (4 + 4) )	
            #define <see cref="F:SharpDX.DXGI.Usage.DiscardOnPresent"/>       ( 1L &lt;&lt; (5 + 4) )	
            #define <see cref="F:SharpDX.DXGI.Usage.UnorderedAccess"/>         ( 1L &lt;&lt; (6 + 4) )	
            typedef UINT DXGI_USAGE;</code><p>These flag options are used in a call to the <strong><see cref="M:SharpDX.DXGI.Factory.CreateSwapChain(SharpDX.ComObject,SharpDX.DXGI.SwapChainDescription@,SharpDX.DXGI.SwapChain)"/></strong>, <strong>IDXGIFactory2::CreateSwapChainForHwnd</strong>, <strong>IDXGIFactory2::CreateSwapChainForCoreWindow</strong>, or  <strong>IDXGIFactory2::CreateSwapChainForComposition</strong> method to describe the surface usage and CPU access options for the back buffer of a swap chain. You can't use the <strong><see cref="F:SharpDX.DXGI.Usage.Shared"/></strong>, <strong><see cref="F:SharpDX.DXGI.Usage.DiscardOnPresent"/></strong>, and <strong><see cref="F:SharpDX.DXGI.Usage.ReadOnly"/></strong> values as input to create a swap chain. However, DXGI can set <strong><see cref="F:SharpDX.DXGI.Usage.DiscardOnPresent"/></strong> and <strong><see cref="F:SharpDX.DXGI.Usage.ReadOnly"/></strong> for some of the swap chain's back buffers on the application's behalf. You can call the <strong><see cref="M:SharpDX.DXGI.Resource.GetUsage(System.Int32@)"/></strong> method to retrieve the usage of these back buffers.	
            Swap chain's only support the <strong>DXGI_CPU_ACCESS_NONE</strong> value in the <strong>DXGI_CPU_ACCESS_FIELD</strong> part of <strong>DXGI_USAGE</strong>.</p><p>These flag options are also used by the <strong><see cref="M:SharpDX.DXGI.Device.CreateSurface(SharpDX.DXGI.SurfaceDescription@,System.Int32,System.Int32,System.Nullable{SharpDX.DXGI.SharedResource},SharpDX.DXGI.Surface@)"/></strong> method.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_USAGE_ENUM']/*"/>	
            <msdn-id>bb173078</msdn-id>	
            <unmanaged>DXGI_USAGE_ENUM</unmanaged>	
            <unmanaged-short>DXGI_USAGE_ENUM</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.Usage.ShaderInput">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_USAGE_SHADER_INPUT']/*"/>	
            <msdn-id>bb173078</msdn-id>	
            <unmanaged>DXGI_USAGE_SHADER_INPUT</unmanaged>	
            <unmanaged-short>DXGI_USAGE_SHADER_INPUT</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.Usage.RenderTargetOutput">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_USAGE_RENDER_TARGET_OUTPUT']/*"/>	
            <msdn-id>bb173078</msdn-id>	
            <unmanaged>DXGI_USAGE_RENDER_TARGET_OUTPUT</unmanaged>	
            <unmanaged-short>DXGI_USAGE_RENDER_TARGET_OUTPUT</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.Usage.BackBuffer">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_USAGE_BACK_BUFFER']/*"/>	
            <msdn-id>bb173078</msdn-id>	
            <unmanaged>DXGI_USAGE_BACK_BUFFER</unmanaged>	
            <unmanaged-short>DXGI_USAGE_BACK_BUFFER</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.Usage.Shared">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_USAGE_SHARED']/*"/>	
            <msdn-id>bb173078</msdn-id>	
            <unmanaged>DXGI_USAGE_SHARED</unmanaged>	
            <unmanaged-short>DXGI_USAGE_SHARED</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.Usage.ReadOnly">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_USAGE_READ_ONLY']/*"/>	
            <msdn-id>bb173078</msdn-id>	
            <unmanaged>DXGI_USAGE_READ_ONLY</unmanaged>	
            <unmanaged-short>DXGI_USAGE_READ_ONLY</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.Usage.DiscardOnPresent">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_USAGE_DISCARD_ON_PRESENT']/*"/>	
            <msdn-id>bb173078</msdn-id>	
            <unmanaged>DXGI_USAGE_DISCARD_ON_PRESENT</unmanaged>	
            <unmanaged-short>DXGI_USAGE_DISCARD_ON_PRESENT</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.Usage.UnorderedAccess">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_USAGE_UNORDERED_ACCESS']/*"/>	
            <msdn-id>bb173078</msdn-id>	
            <unmanaged>DXGI_USAGE_UNORDERED_ACCESS</unmanaged>	
            <unmanaged-short>DXGI_USAGE_UNORDERED_ACCESS</unmanaged-short>	
        </member>
        <member name="T:SharpDX.DXGI.WindowAssociationFlags">
            <summary>	
            <p>Allows DXGI to monitor an application's message queue for the alt-enter key sequence (which causes the application to switch from windowed to full screen or vice versa).</p>	
            </summary>	
            <remarks>	
            <p><strong>Note</strong>??If you call this API in a Session 0 process, it returns <strong><see cref="F:SharpDX.DXGI.ResultCode.NotCurrentlyAvailable"/></strong>.</p><p>The combination of <em>WindowHandle</em> and <em>Flags</em> informs DXGI to stop monitoring window messages for the previously-associated window.</p><p>If the application switches to full-screen mode, DXGI will choose a full-screen resolution to be the smallest supported resolution that is larger or the same size as the current back buffer size.</p><p>Applications can make some changes to make the transition from windowed to full screen more efficient. For example, on a WM_SIZE message, the application should release any outstanding swap-chain back buffers, call <strong><see cref="M:SharpDX.DXGI.SwapChain.ResizeBuffers(System.Int32,System.Int32,System.Int32,SharpDX.DXGI.Format,SharpDX.DXGI.SwapChainFlags)"/></strong>, then re-acquire the back buffers from the swap chain(s). This gives the swap chain(s) an opportunity to resize the back buffers, and/or recreate them to enable full-screen flipping operation. If the application does not perform this sequence, DXGI will still make the full-screen/windowed transition, but may be forced to use a stretch operation (since the back buffers may not be the correct size), which may be less efficient. Even if a stretch is not required, presentation may not be optimal because the back buffers might not be directly interchangeable with the front buffer. Thus, a call to <strong>ResizeBuffers</strong> on WM_SIZE is always recommended, since WM_SIZE is always sent during a fullscreen transition.</p><p>While windowed, the application can, if it chooses, restrict the size of its window's client area to sizes to which it is comfortable rendering. A fully flexible application would make no such restriction, but UI elements or other design considerations can, of course, make this flexibility untenable. If the application further chooses to restrict its window's client area to just those that match supported full-screen resolutions, the application can field WM_SIZING, then check against <strong><see cref="M:SharpDX.DXGI.Output.FindClosestMatchingMode(SharpDX.DXGI.ModeDescription@,SharpDX.DXGI.ModeDescription@,SharpDX.ComObject)"/></strong>. If a matching mode is found, allow the resize. (The <see cref="T:SharpDX.DXGI.Output"/> can be retrieved from <strong><see cref="M:SharpDX.DXGI.SwapChain.GetContainingOutput(SharpDX.DXGI.Output@)"/></strong>. Absent subsequent changes to desktop topology, this will be the same output that will be chosen when alt-enter is fielded and fullscreen mode is begun for that swap chain.)</p><p>Applications that want to handle mode changes or Alt+Enter themselves should call <strong>MakeWindowAssociation</strong> with the <see cref="F:SharpDX.DXGI.WindowAssociationFlags.IgnoreAll"/> flag after swap chain creation. The <em>WindowHandle</em> argument, if non-<strong><c>null</c></strong>, specifies that the application message queues will not be handled by the DXGI runtime for all swap chains of a particular target <strong><see cref="T:System.IntPtr"/></strong>.  Calling <strong>MakeWindowAssociation</strong> with the <see cref="F:SharpDX.DXGI.WindowAssociationFlags.IgnoreAll"/> flag after swapchain creation ensures that DXGI will not interfere with application's handling of window mode changes or Alt+Enter.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_MWA_FLAGS']/*"/>	
            <msdn-id>bb174540</msdn-id>	
            <unmanaged>DXGI_MWA_FLAGS</unmanaged>	
            <unmanaged-short>DXGI_MWA_FLAGS</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.WindowAssociationFlags.IgnoreAll">
            <summary>	
            <dd>  <p>The handle of the window that is to be monitored. This parameter can be <strong><c>null</c></strong>; but only if the flags are also 0. </p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_MWA_NO_WINDOW_CHANGES']/*"/>	
            <msdn-id>bb174540</msdn-id>	
            <unmanaged>DXGI_MWA_NO_WINDOW_CHANGES</unmanaged>	
            <unmanaged-short>DXGI_MWA_NO_WINDOW_CHANGES</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.WindowAssociationFlags.IgnoreAltEnter">
            <summary>	
            <dd>  <p>One or more of the following values:	
            </p> <ul> <li><see cref="F:SharpDX.DXGI.WindowAssociationFlags.IgnoreAll"/> - Prevent DXGI from monitoring an applications message queue; this makes DXGI unable to respond to mode changes.</li> <li><see cref="F:SharpDX.DXGI.WindowAssociationFlags.IgnoreAltEnter"/> - Prevent DXGI from responding to an alt-enter sequence.</li> <li><see cref="F:SharpDX.DXGI.WindowAssociationFlags.IgnorePrintScreen"/> - Prevent DXGI from responding to a print-screen key.</li> </ul> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_MWA_NO_ALT_ENTER']/*"/>	
            <msdn-id>bb174540</msdn-id>	
            <unmanaged>DXGI_MWA_NO_ALT_ENTER</unmanaged>	
            <unmanaged-short>DXGI_MWA_NO_ALT_ENTER</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.WindowAssociationFlags.IgnorePrintScreen">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_MWA_NO_PRINT_SCREEN']/*"/>	
            <msdn-id>bb174540</msdn-id>	
            <unmanaged>DXGI_MWA_NO_PRINT_SCREEN</unmanaged>	
            <unmanaged-short>DXGI_MWA_NO_PRINT_SCREEN</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.WindowAssociationFlags.Valid">
            <summary>	
            No documentation.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_MWA_VALID']/*"/>	
            <msdn-id>bb174540</msdn-id>	
            <unmanaged>DXGI_MWA_VALID</unmanaged>	
            <unmanaged-short>DXGI_MWA_VALID</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.WindowAssociationFlags.None">
            <summary>	
            None.	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='']/*"/>	
            <unmanaged>None</unmanaged>	
            <unmanaged-short>None</unmanaged-short>	
        </member>
        <member name="T:SharpDX.DXGI.DXGI">
            <summary>	
            Functions	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='SharpDX.DXGI.DXGI']/*"/>	
        </member>
        <member name="M:SharpDX.DXGI.DXGI.CreateDXGIFactory1(System.Guid,System.IntPtr@)">
            <summary>	
            <p>Creates a DXGI 1.1 factory that you can use to generate other  DXGI objects.</p>	
            </summary>	
            <param name="riid"><dd>  <p>The globally unique identifier (<see cref="T:System.Guid"/>) of the <strong><see cref="T:SharpDX.DXGI.Factory1"/></strong> object referenced by  the <em>ppFactory</em> parameter.</p> </dd></param>	
            <param name="factoryOut"><dd>  <p>Address of a reference to an <strong><see cref="T:SharpDX.DXGI.Factory1"/></strong> object.</p> </dd></param>	
            <returns><p>Returns <see cref="F:SharpDX.Result.Ok"/> if successful; an error code otherwise. For a list of error codes, see DXGI_ERROR.</p></returns>	
            <remarks>	
            <p>Use a DXGI 1.1 factory to generate objects that <strong>enumerate adapters</strong>,  <strong>create swap chains</strong>, and <strong>associate a window</strong> with  the alt+enter key sequence for toggling to and from the full-screen display mode.  </p><p>If the <strong>CreateDXGIFactory1</strong> function succeeds, the reference count on the <strong><see cref="T:SharpDX.DXGI.Factory1"/></strong> interface is incremented. To avoid a memory leak, when you finish using the interface, call the <strong>IDXGIFactory1::Release</strong> method to release the interface.</p><p>This entry point is not supported by DXGI 1.0, which shipped in Windows?Vista and Windows Server?2008. DXGI 1.1 support is required, which is available on  Windows?7, Windows Server?2008?R2, and as an update to Windows?Vista with Service Pack?2 (SP2) (KB 971644) and Windows Server?2008 (KB 971512).</p><p><strong>Note</strong>??Do not mix the use of DXGI 1.0 (<strong><see cref="T:SharpDX.DXGI.Factory"/></strong>) and DXGI 1.1 (<strong><see cref="T:SharpDX.DXGI.Factory1"/></strong>) in an application. Use <strong><see cref="T:SharpDX.DXGI.Factory"/></strong> or <strong><see cref="T:SharpDX.DXGI.Factory1"/></strong>, but not both in an application.</p><p><strong>Note</strong>??<strong>CreateDXGIFactory1</strong> fails if your app's <strong>DllMain</strong> function calls it. For more info about how DXGI responds from <strong>DllMain</strong>, see DXGI Responses from DLLMain.</p><p><strong>Note</strong>??Starting with Windows?8, all DXGI factories (regardless if they were created with <strong>CreateDXGIFactory</strong> or <strong>CreateDXGIFactory1</strong>) enumerate adapters identically. The enumeration order of adapters, which you retrieve with <strong><see cref="M:SharpDX.DXGI.Factory.GetAdapter(System.Int32)"/></strong> or <strong><see cref="M:SharpDX.DXGI.Factory1.GetAdapter1(System.Int32)"/></strong>, is as follows: </p><ul> <li>Adapter with the output on which the desktop primary is displayed. This adapter corresponds with an index of zero.</li> <li>Adapters with outputs.</li> <li>Adapters without outputs.</li> </ul><p><strong>Windows?Phone?8:</strong> This API is supported.</p><p><strong>Windows Phone 8.1:</strong> This API is supported.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='CreateDXGIFactory1']/*"/>	
            <msdn-id>ff471318</msdn-id>	
            <unmanaged>HRESULT CreateDXGIFactory1([In] const GUID&amp; riid,[Out] void** ppFactory)</unmanaged>	
            <unmanaged-short>CreateDXGIFactory1</unmanaged-short>	
        </member>
        <member name="M:SharpDX.DXGI.DXGI.CreateDXGIFactory(System.Guid,System.IntPtr@)">
            <summary>	
            <p>Creates a DXGI 1.0 factory that you can use to generate other  DXGI objects.</p>	
            </summary>	
            <param name="riid"><dd>  <p>The globally unique identifier (<see cref="T:System.Guid"/>) of the <strong><see cref="T:SharpDX.DXGI.Factory"/></strong> object referenced by the <em>ppFactory</em> parameter.</p> </dd></param>	
            <param name="factoryOut"><dd>  <p>Address of a reference to an <strong><see cref="T:SharpDX.DXGI.Factory"/></strong> object.</p> </dd></param>	
            <returns><p>Returns <strong><see cref="F:SharpDX.Result.Ok"/></strong> if successful; otherwise, returns one of the following DXGI_ERROR.</p></returns>	
            <remarks>	
            <p>Use a DXGI factory to generate objects that <strong>enumerate adapters</strong>, <strong>create swap chains</strong>, and <strong>associate a window</strong> with the alt+enter key sequence for toggling to and from the fullscreen display mode.</p><p>If the <strong>CreateDXGIFactory</strong> function succeeds, the reference count on the <strong><see cref="T:SharpDX.DXGI.Factory"/></strong> interface is incremented. To avoid a memory leak, when you finish using the interface, call the <strong>IDXGIFactory::Release</strong> method to release the interface.</p><p><strong>Note</strong>??Do not mix the use of DXGI 1.0 (<strong><see cref="T:SharpDX.DXGI.Factory"/></strong>) and DXGI 1.1 (<strong><see cref="T:SharpDX.DXGI.Factory1"/></strong>) in an application. Use <strong><see cref="T:SharpDX.DXGI.Factory"/></strong> or <strong><see cref="T:SharpDX.DXGI.Factory1"/></strong>, but not both in an application.</p><p><strong>Note</strong>??<strong>CreateDXGIFactory</strong> fails if your app's <strong>DllMain</strong> function calls it. For more info about how DXGI responds from <strong>DllMain</strong>, see DXGI Responses from DLLMain.</p><p><strong>Note</strong>??Starting with Windows?8, all DXGI factories (regardless if they were created with <strong>CreateDXGIFactory</strong> or <strong>CreateDXGIFactory1</strong>) enumerate adapters identically. The enumeration order of adapters, which you retrieve with <strong><see cref="M:SharpDX.DXGI.Factory.GetAdapter(System.Int32)"/></strong> or <strong><see cref="M:SharpDX.DXGI.Factory1.GetAdapter1(System.Int32)"/></strong>, is as follows: </p><ul> <li>Adapter with the output on which the desktop primary is displayed. This adapter corresponds with an index of zero.</li> <li>Adapters with outputs.</li> <li>Adapters without outputs.</li> </ul><p>The <strong>CreateDXGIFactory</strong> function does not exist for Windows Store apps. Instead, Windows Store apps use the  <strong>CreateDXGIFactory1</strong> function.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='CreateDXGIFactory']/*"/>	
            <msdn-id>bb204862</msdn-id>	
            <unmanaged>HRESULT CreateDXGIFactory([In] const GUID&amp; riid,[Out] void** ppFactory)</unmanaged>	
            <unmanaged-short>CreateDXGIFactory</unmanaged-short>	
        </member>
        <member name="T:SharpDX.DXGI.ResultCode">
            <summary>	
            Functions	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='SharpDX.DXGI.ResultCode']/*"/>	
        </member>
        <member name="F:SharpDX.DXGI.ResultCode.FrameStatisticsDisjoint">
            <summary>Constant FrameStatisticsDisjoint.</summary>
            <unmanaged>DXGI_ERROR_FRAME_STATISTICS_DISJOINT</unmanaged>
        </member>
        <member name="F:SharpDX.DXGI.ResultCode.DeviceReset">
            <summary>Constant DeviceReset.</summary>
            <unmanaged>DXGI_ERROR_DEVICE_RESET</unmanaged>
        </member>
        <member name="F:SharpDX.DXGI.ResultCode.DriverInternalError">
            <summary>Constant DriverInternalError.</summary>
            <unmanaged>DXGI_ERROR_DRIVER_INTERNAL_ERROR</unmanaged>
        </member>
        <member name="F:SharpDX.DXGI.ResultCode.InvalidCall">
            <summary>Constant InvalidCall.</summary>
            <unmanaged>DXGI_ERROR_INVALID_CALL</unmanaged>
        </member>
        <member name="F:SharpDX.DXGI.ResultCode.NotFound">
            <summary>Constant NotFound.</summary>
            <unmanaged>DXGI_ERROR_NOT_FOUND</unmanaged>
        </member>
        <member name="F:SharpDX.DXGI.ResultCode.WasStillDrawing">
            <summary>Constant WasStillDrawing.</summary>
            <unmanaged>DXGI_ERROR_WAS_STILL_DRAWING</unmanaged>
        </member>
        <member name="F:SharpDX.DXGI.ResultCode.Unsupported">
            <summary>Constant Unsupported.</summary>
            <unmanaged>DXGI_ERROR_UNSUPPORTED</unmanaged>
        </member>
        <member name="F:SharpDX.DXGI.ResultCode.RemoteClientDisconnected">
            <summary>Constant RemoteClientDisconnected.</summary>
            <unmanaged>DXGI_ERROR_REMOTE_CLIENT_DISCONNECTED</unmanaged>
        </member>
        <member name="F:SharpDX.DXGI.ResultCode.DeviceRemoved">
            <summary>Constant DeviceRemoved.</summary>
            <unmanaged>DXGI_ERROR_DEVICE_REMOVED</unmanaged>
        </member>
        <member name="F:SharpDX.DXGI.ResultCode.DeviceHung">
            <summary>Constant DeviceHung.</summary>
            <unmanaged>DXGI_ERROR_DEVICE_HUNG</unmanaged>
        </member>
        <member name="F:SharpDX.DXGI.ResultCode.RemoteOufOfMemory">
            <summary>Constant RemoteOufOfMemory.</summary>
            <unmanaged>DXGI_ERROR_REMOTE_OUTOFMEMORY</unmanaged>
        </member>
        <member name="F:SharpDX.DXGI.ResultCode.MoreData">
            <summary>Constant MoreData.</summary>
            <unmanaged>DXGI_ERROR_MORE_DATA</unmanaged>
        </member>
        <member name="F:SharpDX.DXGI.ResultCode.Nonexclusive">
            <summary>Constant Nonexclusive.</summary>
            <unmanaged>DXGI_ERROR_NONEXCLUSIVE</unmanaged>
        </member>
        <member name="F:SharpDX.DXGI.ResultCode.GraphicsVidpnSourceInUse">
            <summary>Constant GraphicsVidpnSourceInUse.</summary>
            <unmanaged>DXGI_ERROR_GRAPHICS_VIDPN_SOURCE_IN_USE</unmanaged>
        </member>
        <member name="F:SharpDX.DXGI.ResultCode.NotCurrentlyAvailable">
            <summary>Constant NotCurrentlyAvailable.</summary>
            <unmanaged>DXGI_ERROR_NOT_CURRENTLY_AVAILABLE</unmanaged>
        </member>
        <member name="T:SharpDX.DXGI.Adapter1">
            <summary>	
            <p>The <strong><see cref="T:SharpDX.DXGI.Adapter1"/></strong> interface represents a display sub-system (including one or more GPU's, DACs and video memory).</p>	
            </summary>	
            <remarks>	
            <p>This interface is not supported by DXGI 1.0, which shipped in Windows?Vista and Windows Server?2008. DXGI 1.1 support is required, which is available on  Windows?7, Windows Server?2008?R2, and as an update to Windows?Vista with Service Pack?2 (SP2) (KB 971644) and Windows Server?2008 (KB 971512).</p><p>A display sub-system is often referred to as a video card, however, on some machines the display sub-system is part of the mother board.</p><p>To enumerate the display sub-systems, use <strong><see cref="M:SharpDX.DXGI.Factory1.GetAdapter1(System.Int32)"/></strong>. To get an interface to the adapter for a  particular device, use <strong><see cref="M:SharpDX.DXGI.Device.GetAdapter(SharpDX.DXGI.Adapter@)"/></strong>. To create a software adapter, use <strong><see cref="M:SharpDX.DXGI.Factory.CreateSoftwareAdapter(System.Reflection.Module)"/></strong>.</p><p><strong>Windows?Phone?8:</strong> This API is supported.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIAdapter1']/*"/>	
            <msdn-id>ff471329</msdn-id>	
            <unmanaged>IDXGIAdapter1</unmanaged>	
            <unmanaged-short>IDXGIAdapter1</unmanaged-short>	
        </member>
        <member name="M:SharpDX.DXGI.Adapter1.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.DXGI.Adapter1"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.DXGI.Adapter1.op_Explicit(System.IntPtr)~SharpDX.DXGI.Adapter1">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:SharpDX.DXGI.Adapter1"/>. (This method is a shortcut to <see cref="P:SharpDX.CppObject.NativePointer"/>) 
            </summary>
            <param name="nativePointer">The native pointer.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:SharpDX.DXGI.Adapter1.GetDescription1(SharpDX.DXGI.AdapterDescription1@)">
            <summary>	
            <p>Gets a DXGI 1.1 description of an adapter (or video card).</p>	
            </summary>	
            <param name="descRef"><dd>  <p>A reference to a <strong><see cref="T:SharpDX.DXGI.AdapterDescription1"/></strong> structure that describes the adapter.   This parameter must not be <strong><c>null</c></strong>. On feature level 9 graphics hardware, <strong>GetDesc1</strong> returns zeros for the PCI ID in the <strong>VendorId</strong>, <strong>DeviceId</strong>, <strong>SubSysId</strong>, and <strong>Revision</strong> members of <strong><see cref="T:SharpDX.DXGI.AdapterDescription1"/></strong> and ?Software Adapter? for the description string in the <strong>Description</strong> member.</p> </dd></param>	
            <returns><p>Returns <see cref="F:SharpDX.Result.Ok"/> if successful; otherwise, returns E_INVALIDARG if the <em>pDesc</em> parameter is <strong><c>null</c></strong>.   </p></returns>	
            <remarks>	
            <p>This method is not supported by DXGI 1.0, which shipped in Windows?Vista and Windows Server?2008. DXGI 1.1 support is required, which is available on  Windows?7, Windows Server?2008?R2, and as an update to Windows?Vista with Service Pack?2 (SP2) (KB 971644) and Windows Server?2008 (KB 971512).</p><p>Use the <strong>GetDesc1</strong> method to get a DXGI 1.1 description of an adapter.  To get a DXGI 1.0 description, use the <strong><see cref="T:SharpDX.DXGI.Adapter"/></strong> method.</p><p><strong>Windows?Phone?8:</strong> This API is supported.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIAdapter1::GetDesc1']/*"/>	
            <msdn-id>ff471330</msdn-id>	
            <unmanaged>HRESULT IDXGIAdapter1::GetDesc1([Out] DXGI_ADAPTER_DESC1* pDesc)</unmanaged>	
            <unmanaged-short>IDXGIAdapter1::GetDesc1</unmanaged-short>	
        </member>
        <member name="P:SharpDX.DXGI.Adapter1.Description1">
            <summary>	
            <p>Gets a DXGI 1.1 description of an adapter (or video card).</p>	
            </summary>	
            <remarks>	
            <p>This method is not supported by DXGI 1.0, which shipped in Windows?Vista and Windows Server?2008. DXGI 1.1 support is required, which is available on  Windows?7, Windows Server?2008?R2, and as an update to Windows?Vista with Service Pack?2 (SP2) (KB 971644) and Windows Server?2008 (KB 971512).</p><p>Use the <strong>GetDesc1</strong> method to get a DXGI 1.1 description of an adapter.  To get a DXGI 1.0 description, use the <strong><see cref="T:SharpDX.DXGI.Adapter"/></strong> method.</p><p><strong>Windows?Phone?8:</strong> This API is supported.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIAdapter1::GetDesc1']/*"/>	
            <msdn-id>ff471330</msdn-id>	
            <unmanaged>GetDesc1</unmanaged>	
            <unmanaged-short>GetDesc1</unmanaged-short>	
            <unmanaged>HRESULT IDXGIAdapter1::GetDesc1([Out] DXGI_ADAPTER_DESC1* pDesc)</unmanaged>
        </member>
        <member name="T:SharpDX.DXGI.Device1">
            <summary>	
            <p>An <strong><see cref="T:SharpDX.DXGI.Device1"/></strong> interface implements a derived class for DXGI objects that produce image data.</p>	
            </summary>	
            <remarks>	
            <p>This interface is not supported by DXGI 1.0, which shipped in Windows?Vista and Windows Server?2008. DXGI 1.1 support is required, which is available on  Windows?7, Windows Server?2008?R2, and as an update to Windows?Vista with Service Pack?2 (SP2) (KB 971644) and Windows Server?2008 (KB 971512).</p><p>The <strong><see cref="T:SharpDX.DXGI.Device1"/></strong> interface is designed for use by DXGI objects that need access to other DXGI objects. This interface is useful to  applications that do not use Direct3D to communicate with DXGI.</p><p>The Direct3D create device functions return a Direct3D device object. This Direct3D device object implements the <strong><see cref="T:SharpDX.ComObject"/></strong> interface. You can query this Direct3D device object for the device's corresponding <strong><see cref="T:SharpDX.DXGI.Device1"/></strong> interface. To retrieve the <strong><see cref="T:SharpDX.DXGI.Device1"/></strong> interface of a Direct3D device, use the following code:</p><pre><see cref="T:SharpDX.DXGI.Device1"/> * pDXGIDevice;	
            hr = g_pd3dDevice-&gt;QueryInterface(__uuidof(<see cref="T:SharpDX.DXGI.Device1"/>), (void **)&amp;pDXGIDevice);	
            </pre><p><strong>Windows?Phone?8:</strong> This API is supported.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIDevice1']/*"/>	
            <msdn-id>ff471331</msdn-id>	
            <unmanaged>IDXGIDevice1</unmanaged>	
            <unmanaged-short>IDXGIDevice1</unmanaged-short>	
        </member>
        <member name="M:SharpDX.DXGI.Device1.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.DXGI.Device1"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.DXGI.Device1.op_Explicit(System.IntPtr)~SharpDX.DXGI.Device1">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:SharpDX.DXGI.Device1"/>. (This method is a shortcut to <see cref="P:SharpDX.CppObject.NativePointer"/>) 
            </summary>
            <param name="nativePointer">The native pointer.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:SharpDX.DXGI.Device1.SetMaximumFrameLatency(System.Int32)">
            <summary>	
            <p>Sets the number of frames that the system is allowed to queue for rendering.</p>	
            </summary>	
            <param name="maxLatency"><dd>  <p>The maximum number of back buffer frames that a driver can queue. The value defaults to 3, but  can range from 1 to 16. A value of 0 will reset latency to the default.  For multi-head devices, this value is specified per-head.</p> </dd></param>	
            <returns><p>Returns <see cref="F:SharpDX.Result.Ok"/> if successful; otherwise, <see cref="F:SharpDX.DXGI.ResultCode.DeviceRemoved"/> if the device was removed.</p></returns>	
            <remarks>	
            <p>This method is not supported by DXGI 1.0, which shipped in Windows?Vista and Windows Server?2008. DXGI 1.1 support is required, which is available on  Windows?7, Windows Server?2008?R2, and as an update to Windows?Vista with Service Pack?2 (SP2) (KB 971644) and Windows Server?2008 (KB 971512).</p><p>Frame latency is the number of frames that are allowed to be stored in a queue before submission for rendering.  Latency is often used to  control how the CPU chooses between responding to user input and frames that are in the render queue.  It is often beneficial for applications that  have no user input (for example, video playback) to queue more than 3 frames of data.</p><p><strong>Windows?Phone?8:</strong> This API is supported.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIDevice1::SetMaximumFrameLatency']/*"/>	
            <msdn-id>ff471334</msdn-id>	
            <unmanaged>HRESULT IDXGIDevice1::SetMaximumFrameLatency([In] unsigned int MaxLatency)</unmanaged>	
            <unmanaged-short>IDXGIDevice1::SetMaximumFrameLatency</unmanaged-short>	
        </member>
        <member name="M:SharpDX.DXGI.Device1.GetMaximumFrameLatency(System.Int32@)">
            <summary>	
            <p>Gets the number of frames that the system is allowed to queue for rendering.</p>	
            </summary>	
            <param name="maxLatencyRef"><dd>  <p>This value is set to the number of frames that can be queued for render.   This value defaults to 3, but can range from 1 to 16.</p> </dd></param>	
            <returns><p>Returns <see cref="F:SharpDX.Result.Ok"/> if successful; otherwise, returns one of the following members of the D3DERR enumerated type:</p><ul> <li><strong><see cref="!:SharpDX.Direct3D9.ResultCode.DeviceLost"/></strong></li> <li><strong><see cref="!:SharpDX.Direct3D9.ResultCode.DeviceRemoved"/></strong></li> <li><strong><see cref="!:SharpDX.Direct3D9.ResultCode.DriverInternalError"/></strong></li> <li><strong><see cref="!:SharpDX.Direct3D9.ResultCode.InvalidCall"/></strong></li> <li><strong><see cref="!:SharpDX.Direct3D9.ResultCode.OutOfVideoMemory"/></strong></li> </ul></returns>	
            <remarks>	
            <p>This method is not supported by DXGI 1.0, which shipped in Windows?Vista and Windows Server?2008. DXGI 1.1 support is required, which is available on  Windows?7, Windows Server?2008?R2, and as an update to Windows?Vista with Service Pack?2 (SP2) (KB 971644) and Windows Server?2008 (KB 971512).</p><p>Frame latency is the number of frames that are allowed to be stored in a queue before submission for rendering.  Latency is often  used to control how the CPU chooses between responding to user input and frames that are in the render queue.  It is often beneficial for applications  that have no user input (for example, video playback) to queue more than 3 frames of data.</p><p><strong>Windows?Phone?8:</strong> This API is supported.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIDevice1::GetMaximumFrameLatency']/*"/>	
            <msdn-id>ff471332</msdn-id>	
            <unmanaged>HRESULT IDXGIDevice1::GetMaximumFrameLatency([Out] unsigned int* pMaxLatency)</unmanaged>	
            <unmanaged-short>IDXGIDevice1::GetMaximumFrameLatency</unmanaged-short>	
        </member>
        <member name="P:SharpDX.DXGI.Device1.MaximumFrameLatency">
            <summary>	
            <p>Gets or sets the number of frames that the system is allowed to queue for rendering.</p>	
            </summary>	
            <remarks>	
            <p>This method is not supported by DXGI 1.0, which shipped in Windows?Vista and Windows Server?2008. DXGI 1.1 support is required, which is available on  Windows?7, Windows Server?2008?R2, and as an update to Windows?Vista with Service Pack?2 (SP2) (KB 971644) and Windows Server?2008 (KB 971512).</p><p>Frame latency is the number of frames that are allowed to be stored in a queue before submission for rendering.  Latency is often  used to control how the CPU chooses between responding to user input and frames that are in the render queue.  It is often beneficial for applications  that have no user input (for example, video playback) to queue more than 3 frames of data.</p><p><strong>Windows?Phone?8:</strong> This API is supported.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIDevice1::GetMaximumFrameLatency']/*"/>	
            <msdn-id>ff471332</msdn-id>	
            <unmanaged>GetMaximumFrameLatency / SetMaximumFrameLatency</unmanaged>	
            <unmanaged-short>GetMaximumFrameLatency</unmanaged-short>	
            <unmanaged>HRESULT IDXGIDevice1::GetMaximumFrameLatency([Out] unsigned int* pMaxLatency)</unmanaged>
        </member>
        <member name="T:SharpDX.DXGI.KeyedMutex">
            <summary>	
            <p>Represents a keyed mutex, which allows exclusive access to a shared resource that is used by multiple devices.</p>	
            </summary>	
            <remarks>	
            <p>The <strong><see cref="T:SharpDX.DXGI.Factory1"/></strong> is required to create a resource capable of supporting the <strong><see cref="T:SharpDX.DXGI.KeyedMutex"/></strong> interface.</p><p>An <strong><see cref="T:SharpDX.DXGI.KeyedMutex"/></strong> should be retrieved for each device sharing a resource. In Direct3D 10.1, such a resource that is shared between two or more devices is created with the <strong><see cref="!:SharpDX.Direct3D10.ResourceOptionFlags.SharedKeyedmutex"/></strong> flag. In Direct3D 11, such a resource that is shared between two or more devices is created with the <strong><see cref="!:SharpDX.Direct3D11.ResourceOptionFlags.SharedKeyedmutex"/></strong> flag.</p><p>For information about creating a keyed mutex, see the <strong><see cref="M:SharpDX.DXGI.KeyedMutex.Acquire(System.Int64,System.Int32)"/></strong> method.</p><p><strong>Windows?Phone?8:</strong> This API is supported.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIKeyedMutex']/*"/>	
            <msdn-id>ff471338</msdn-id>	
            <unmanaged>IDXGIKeyedMutex</unmanaged>	
            <unmanaged-short>IDXGIKeyedMutex</unmanaged-short>	
        </member>
        <member name="M:SharpDX.DXGI.KeyedMutex.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.DXGI.KeyedMutex"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.DXGI.KeyedMutex.op_Explicit(System.IntPtr)~SharpDX.DXGI.KeyedMutex">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:SharpDX.DXGI.KeyedMutex"/>. (This method is a shortcut to <see cref="P:SharpDX.CppObject.NativePointer"/>) 
            </summary>
            <param name="nativePointer">The native pointer.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:SharpDX.DXGI.KeyedMutex.Acquire(System.Int64,System.Int32)">
            <summary>	
            <p>Using a key, acquires exclusive rendering access to a shared resource.</p>	
            </summary>	
            <param name="key"><dd>  <p>A value that indicates which device to give access to. This method will succeed when the device that currently owns the surface calls  the <strong><see cref="M:SharpDX.DXGI.KeyedMutex.Release(System.Int64)"/></strong> method using the same value. This value can be any UINT64 value.</p> </dd></param>	
            <param name="dwMilliseconds"><dd>  <p>The time-out interval, in milliseconds. This method will return if the interval elapses, and the keyed mutex has not been released  using the specified <em>Key</em>.  If this value is set to zero, the <strong>AcquireSync</strong> method will test to see if the keyed mutex has been released and returns immediately.  If this value is set to INFINITE, the time-out interval will never elapse.</p> </dd></param>	
            <returns><p>Return <see cref="F:SharpDX.Result.Ok"/> if successful.</p><p>If the owning device attempted to create another keyed mutex on the same shared resource, <strong>AcquireSync</strong> returns E_FAIL.</p><p><strong>AcquireSync</strong> can also return the following <strong>DWORD</strong> constants. Therefore, you should explicitly check for these constants. If you only use the <strong>SUCCEEDED</strong> macro on the return value to determine if  <strong>AcquireSync</strong> succeeded, you will not catch these constants.</p><ul> <li>WAIT_ABANDONED - The shared surface and keyed mutex are no longer in a consistent state.  If <strong>AcquireSync</strong> returns this value, you should release and recreate both the keyed mutex and the shared surface.</li> <li>WAIT_TIMEOUT - The time-out interval elapsed before the specified key was released.</li> </ul></returns>	
            <remarks>	
            <p>The <strong>AcquireSync</strong> method creates a lock to a surface that is shared between multiple devices, allowing only one device to render to a surface at a time.   This method uses a key to determine which device currently has exclusive access to the surface.</p><p>When a surface is created using the <strong><see cref="!:SharpDX.Direct3D10.ResourceOptionFlags.SharedKeyedmutex"/></strong> value of the <strong><see cref="!:SharpDX.Direct3D10.ResourceOptionFlags"/></strong> enumeration,  you must call the <strong>AcquireSync</strong> method before rendering to the surface.  You must call the <strong>ReleaseSync</strong> method when you are done  rendering to a surface.</p><p>To acquire a reference to the keyed mutex object of a shared resource, call the <strong>QueryInterface</strong> method of the resource and pass in  the <strong>UUID</strong> of the <strong><see cref="T:SharpDX.DXGI.KeyedMutex"/></strong> interface.  For more information about acquiring this reference, see the following code example.</p><p>The <strong>AcquireSync</strong> method uses the key as follows, depending on the state of the surface:</p><ul> <li>On initial creation, the surface is unowned and any device can call the <strong>AcquireSync</strong> method to gain access.  For an unowned device, only a key of 0 will succeed. Calling the <strong>AcquireSync</strong> method for any other key will stall the  calling CPU thread.</li> <li>If the surface is owned by a device when you call the <strong>AcquireSync</strong> method, the CPU thread that called  the <strong>AcquireSync</strong> method will stall until the owning device calls the <strong>ReleaseSync</strong> method  using the same Key.</li> <li>If the surface is unowned when you call the <strong>AcquireSync</strong> method (for example, the last owning device has already called  the <strong>ReleaseSync</strong> method), the <strong>AcquireSync</strong> method will succeed if you specify the same key  that was specified when the <strong>ReleaseSync</strong> method was last called. Calling the <strong>AcquireSync</strong> method using  any other key will cause a stall.</li> <li>When the owning device calls the <strong>ReleaseSync</strong> method with a particular key, and more than one device is waiting after  calling the  <strong>AcquireSync</strong> method using the same key, any one of the waiting devices could be woken up first.  The order in which devices are woken up is undefined.</li> <li>A keyed mutex does not support recursive calls to the <strong>AcquireSync</strong> method.</li> </ul><p><strong>Windows?Phone?8:</strong> This API is supported.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIKeyedMutex::AcquireSync']/*"/>	
            <msdn-id>ff471339</msdn-id>	
            <unmanaged>HRESULT IDXGIKeyedMutex::AcquireSync([In] unsigned longlong Key,[In] unsigned int dwMilliseconds)</unmanaged>	
            <unmanaged-short>IDXGIKeyedMutex::AcquireSync</unmanaged-short>	
        </member>
        <member name="M:SharpDX.DXGI.KeyedMutex.Release(System.Int64)">
            <summary>	
            <p>Using a key, releases exclusive rendering access to a shared resource.</p>	
            </summary>	
            <param name="key"><dd>  <p>A value that indicates which device to give access to. This method succeeds when the device that currently owns the surface calls the <strong>ReleaseSync</strong> method using the same value. This value can be any UINT64 value.</p> </dd></param>	
            <returns><p>Returns <see cref="F:SharpDX.Result.Ok"/> if successful.</p><p>If the device attempted to release a keyed mutex that is not valid or owned by the device, <strong>ReleaseSync</strong> returns E_FAIL.</p></returns>	
            <remarks>	
            <p>The <strong>ReleaseSync</strong> method releases a lock to a surface that is shared between multiple devices.  This method uses a key to determine which device currently has exclusive access to the surface.</p><p>When a surface is created using the <strong><see cref="!:SharpDX.Direct3D10.ResourceOptionFlags.SharedKeyedmutex"/></strong> value of the <strong><see cref="!:SharpDX.Direct3D10.ResourceOptionFlags"/></strong> enumeration,  you must call the <strong><see cref="M:SharpDX.DXGI.KeyedMutex.Acquire(System.Int64,System.Int32)"/></strong> method before rendering to the surface.  You must call the <strong>ReleaseSync</strong> method when you are done  rendering to a surface.</p><p>After you call the <strong>ReleaseSync</strong> method, the shared resource is unset from the rendering pipeline. </p><p>To acquire a reference to the keyed mutex object of a shared resource, call the <strong>QueryInterface</strong> method of the resource and pass in  the <strong>UUID</strong> of the <strong><see cref="T:SharpDX.DXGI.KeyedMutex"/></strong> interface.  For more information about acquiring this reference, see the following code example.</p><p><strong>Windows?Phone?8:</strong> This API is supported.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIKeyedMutex::ReleaseSync']/*"/>	
            <msdn-id>ff471340</msdn-id>	
            <unmanaged>HRESULT IDXGIKeyedMutex::ReleaseSync([In] unsigned longlong Key)</unmanaged>	
            <unmanaged-short>IDXGIKeyedMutex::ReleaseSync</unmanaged-short>	
        </member>
        <member name="T:SharpDX.DXGI.Output">
            <summary>	
            <p>An <strong><see cref="T:SharpDX.DXGI.Output"/></strong> interface represents an adapter output (such as a monitor).</p>	
            </summary>	
            <remarks>	
            <p>To see the outputs available, use <strong><see cref="M:SharpDX.DXGI.Adapter.GetOutput(System.Int32)"/></strong>. To see the specific output that the swap chain will update, use <strong><see cref="M:SharpDX.DXGI.SwapChain.GetContainingOutput(SharpDX.DXGI.Output@)"/></strong>.</p><p><strong>Windows?Phone?8:</strong> This API is supported.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIOutput']/*"/>	
            <msdn-id>bb174546</msdn-id>	
            <unmanaged>IDXGIOutput</unmanaged>	
            <unmanaged-short>IDXGIOutput</unmanaged-short>	
        </member>
        <member name="M:SharpDX.DXGI.Output.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.DXGI.Output"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.DXGI.Output.op_Explicit(System.IntPtr)~SharpDX.DXGI.Output">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:SharpDX.DXGI.Output"/>. (This method is a shortcut to <see cref="P:SharpDX.CppObject.NativePointer"/>) 
            </summary>
            <param name="nativePointer">The native pointer.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:SharpDX.DXGI.Output.GetDescription(SharpDX.DXGI.OutputDescription@)">
            <summary>	
            <p>Get a description of the output.</p>	
            </summary>	
            <param name="descRef"><dd>  <p>A reference to the output description (see <strong><see cref="T:SharpDX.DXGI.OutputDescription"/></strong>).</p> </dd></param>	
            <returns><p>Returns a code that indicates success or failure. <see cref="F:SharpDX.Result.Ok"/> if successful, <see cref="F:SharpDX.DXGI.ResultCode.InvalidCall"/> if <em>pDesc</em> is passed in as <strong><c>null</c></strong>.</p></returns>	
            <remarks>	
            <p> On a high DPI desktop, <strong>GetDesc</strong> returns the visualized screen size unless the app is marked high DPI aware. For info about writing DPI-aware Win32 apps, see High DPI.</p><p><strong>Windows?Phone?8:</strong> This API is supported.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIOutput::GetDesc']/*"/>	
            <msdn-id>bb174548</msdn-id>	
            <unmanaged>HRESULT IDXGIOutput::GetDesc([Out] DXGI_OUTPUT_DESC* pDesc)</unmanaged>	
            <unmanaged-short>IDXGIOutput::GetDesc</unmanaged-short>	
        </member>
        <member name="M:SharpDX.DXGI.Output.GetDisplayModeList(SharpDX.DXGI.Format,System.Int32,System.Int32@,SharpDX.DXGI.ModeDescription[])">
            <summary>	
            <p>[Starting with Direct3D 11.1, we recommend not to use <strong>GetDisplayModeList</strong> anymore to retrieve the matching display mode. Instead, use <strong>IDXGIOutput1::GetDisplayModeList1</strong>, which supports stereo display mode.]</p><p>Gets the display modes that match the requested format and other input options.</p>	
            </summary>	
            <param name="enumFormat">No documentation.</param>	
            <param name="flags">No documentation.</param>	
            <param name="numModesRef">No documentation.</param>	
            <param name="descRef">No documentation.</param>	
            <returns><p>Returns one of the following DXGI_ERROR. It is rare, but possible, that the display modes available can change immediately after calling  this method, in which case <see cref="F:SharpDX.DXGI.ResultCode.MoreData"/> is returned (if there is not enough room for all the display modes).   If <strong>GetDisplayModeList</strong> is called from a Remote Desktop Services session (formerly Terminal Services session), <see cref="F:SharpDX.DXGI.ResultCode.NotCurrentlyAvailable"/> is returned.</p></returns>	
            <remarks>	
            <p>In general, when switching from windowed to full-screen mode, a swap chain automatically chooses a display mode that meets (or exceeds) the resolution, color  depth and refresh rate of the swap chain. To exercise more control over the display mode, use this API to poll the set of display modes that are validated  against monitor capabilities, or all modes that match the desktop (if the desktop settings are not validated against the monitor).</p><p>As shown, this API is designed to be called twice. First to get the number of modes available, and second to return a description of the modes.</p><pre> UINT num = 0;	
            <see cref="T:SharpDX.DXGI.Format"/> format = <see cref="F:SharpDX.DXGI.Format.R32G32B32A32_Float"/>;	
            UINT flags         = <see cref="F:SharpDX.DXGI.DisplayModeEnumerationFlags.Interlaced"/>; pOutput-&gt;GetDisplayModeList( format, flags, &amp;num, 0); ... <see cref="T:SharpDX.DXGI.ModeDescription"/> * pDescs = new <see cref="T:SharpDX.DXGI.ModeDescription"/>[num];	
            pOutput-&gt;GetDisplayModeList( format, flags, &amp;num, pDescs); </pre><p><strong>Windows?Phone?8:</strong> This API is supported.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIOutput::GetDisplayModeList']/*"/>	
            <msdn-id>bb174549</msdn-id>	
            <unmanaged>HRESULT IDXGIOutput::GetDisplayModeList([In] DXGI_FORMAT EnumFormat,[In] unsigned int Flags,[InOut] unsigned int* pNumModes,[Out, Buffer, Optional] DXGI_MODE_DESC* pDesc)</unmanaged>	
            <unmanaged-short>IDXGIOutput::GetDisplayModeList</unmanaged-short>	
        </member>
        <member name="M:SharpDX.DXGI.Output.FindClosestMatchingMode(SharpDX.DXGI.ModeDescription@,SharpDX.DXGI.ModeDescription@,SharpDX.ComObject)">
            <summary>	
            <p>[Starting with Direct3D 11.1, we recommend not to use <strong>FindClosestMatchingMode</strong> anymore to find the display mode that most closely matches the requested display mode. Instead, use <strong>IDXGIOutput1::FindClosestMatchingMode1</strong>, which supports stereo display mode.]</p><p>Finds the display mode that most closely matches the requested display mode.</p>	
            </summary>	
            <param name="modeToMatchRef">No documentation.</param>	
            <param name="closestMatchRef">No documentation.</param>	
            <param name="concernedDeviceRef">No documentation.</param>	
            <returns><p>Returns one of the following DXGI_ERROR.</p></returns>	
            <remarks>	
            <p><strong>FindClosestMatchingMode</strong> behaves similarly to the <strong>IDXGIOutput1::FindClosestMatchingMode1</strong> except <strong>FindClosestMatchingMode</strong> considers only the mono display modes. <strong>IDXGIOutput1::FindClosestMatchingMode1</strong> considers only stereo modes if you set the <strong>Stereo</strong> member in the <strong>DXGI_MODE_DESC1</strong> structure that <em>pModeToMatch</em> points to, and considers only mono modes if <strong>Stereo</strong> is not set.</p><p> <strong>IDXGIOutput1::FindClosestMatchingMode1</strong> returns a matched display-mode set with only stereo modes or only mono modes.	
            <strong>FindClosestMatchingMode</strong> behaves as though you specified the input mode as mono.</p><p><strong>Windows?Phone?8:</strong> This API is supported.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIOutput::FindClosestMatchingMode']/*"/>	
            <msdn-id>bb174547</msdn-id>	
            <unmanaged>HRESULT IDXGIOutput::FindClosestMatchingMode([In] const DXGI_MODE_DESC* pModeToMatch,[Out] DXGI_MODE_DESC* pClosestMatch,[In, Optional] IUnknown* pConcernedDevice)</unmanaged>	
            <unmanaged-short>IDXGIOutput::FindClosestMatchingMode</unmanaged-short>	
        </member>
        <member name="M:SharpDX.DXGI.Output.WaitForVerticalBlank">
            <summary>	
            <p>Halt a thread until the next vertical blank occurs.</p>	
            </summary>	
            <returns><p>Returns one of the following DXGI_ERROR.</p></returns>	
            <remarks>	
            <p>A vertical blank occurs when the raster moves from the lower right corner to the upper left corner to begin drawing the next frame.</p><p><strong>Windows?Phone?8:</strong> This API is supported.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIOutput::WaitForVBlank']/*"/>	
            <msdn-id>bb174559</msdn-id>	
            <unmanaged>HRESULT IDXGIOutput::WaitForVBlank()</unmanaged>	
            <unmanaged-short>IDXGIOutput::WaitForVBlank</unmanaged-short>	
        </member>
        <member name="M:SharpDX.DXGI.Output.TakeOwnership(SharpDX.ComObject,SharpDX.Bool)">
            <summary>	
            <p>Takes ownership of an output.</p>	
            </summary>	
            <param name="deviceRef"><dd>  <p>A reference to the <strong><see cref="T:SharpDX.ComObject"/></strong> interface of a device (such as an <strong><see cref="!:SharpDX.Direct3D10.Device"/></strong>).</p> </dd></param>	
            <param name="exclusive"><dd>  <p>Set to <strong>TRUE</strong> to enable other threads or applications to take ownership of the device; otherwise, set to <strong><see cref="F:SharpDX.Result.False"/></strong>.</p> </dd></param>	
            <returns><p>Returns one of the DXGI_ERROR values.</p></returns>	
            <remarks>	
            <p>When you are finished with the output, call <strong><see cref="M:SharpDX.DXGI.Output.ReleaseOwnership"/></strong>.</p><p><strong>TakeOwnership</strong> should not be called directly by applications, since results will be unpredictable. It is called implicitly by the DXGI swap chain object during full-screen transitions, and should not be used as a substitute for swap-chain methods.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIOutput::TakeOwnership']/*"/>	
            <msdn-id>bb174558</msdn-id>	
            <unmanaged>HRESULT IDXGIOutput::TakeOwnership([In] IUnknown* pDevice,[In] BOOL Exclusive)</unmanaged>	
            <unmanaged-short>IDXGIOutput::TakeOwnership</unmanaged-short>	
        </member>
        <member name="M:SharpDX.DXGI.Output.ReleaseOwnership">
            <summary>	
            <p>Releases ownership of the output.</p>	
            </summary>	
            <remarks>	
            <p>If you are not using a swap chain, get access to an output by calling <strong><see cref="M:SharpDX.DXGI.Output.TakeOwnership(SharpDX.ComObject,SharpDX.Bool)"/></strong> and release it when you are finished by calling <strong><see cref="M:SharpDX.DXGI.Output.ReleaseOwnership"/></strong>. An application that uses a swap chain will typically not call either of these methods.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIOutput::ReleaseOwnership']/*"/>	
            <msdn-id>bb174554</msdn-id>	
            <unmanaged>void IDXGIOutput::ReleaseOwnership()</unmanaged>	
            <unmanaged-short>IDXGIOutput::ReleaseOwnership</unmanaged-short>	
        </member>
        <member name="M:SharpDX.DXGI.Output.GetGammaControlCapabilities(SharpDX.DXGI.GammaControlCapabilities@)">
            <summary>	
            <p>Gets a description of the gamma-control capabilities.</p>	
            </summary>	
            <param name="gammaCapsRef"><dd>  <p>A reference to a  description of the gamma-control capabilities (see <strong><see cref="T:SharpDX.DXGI.GammaControlCapabilities"/></strong>).</p> </dd></param>	
            <returns><p>Returns one of the DXGI_ERROR values.</p></returns>	
            <remarks>	
            <p> </p><p><strong>Note</strong>??Calling this method is only supported while in full-screen mode.</p><p>For info about using gamma correction, see Using gamma correction. </p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIOutput::GetGammaControlCapabilities']/*"/>	
            <msdn-id>bb174553</msdn-id>	
            <unmanaged>HRESULT IDXGIOutput::GetGammaControlCapabilities([Out] DXGI_GAMMA_CONTROL_CAPABILITIES* pGammaCaps)</unmanaged>	
            <unmanaged-short>IDXGIOutput::GetGammaControlCapabilities</unmanaged-short>	
        </member>
        <member name="M:SharpDX.DXGI.Output.SetGammaControl(SharpDX.DXGI.GammaControl@)">
            <summary>	
            <p>Sets the gamma controls.</p>	
            </summary>	
            <param name="arrayRef"><dd>  <p>A reference to a <strong><see cref="T:SharpDX.DXGI.GammaControl"/></strong> structure that describes the gamma curve to set.</p> </dd></param>	
            <returns><p>Returns one of the DXGI_ERROR values.</p></returns>	
            <remarks>	
            <p> </p><p><strong>Note</strong>??Calling this method is only supported while in full-screen mode.</p><p>For info about using gamma correction, see Using gamma correction. </p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIOutput::SetGammaControl']/*"/>	
            <msdn-id>bb174557</msdn-id>	
            <unmanaged>HRESULT IDXGIOutput::SetGammaControl([In] const DXGI_GAMMA_CONTROL* pArray)</unmanaged>	
            <unmanaged-short>IDXGIOutput::SetGammaControl</unmanaged-short>	
        </member>
        <member name="M:SharpDX.DXGI.Output.GetGammaControl(SharpDX.DXGI.GammaControl@)">
            <summary>	
            <p>Gets the gamma control settings.</p>	
            </summary>	
            <param name="arrayRef"><dd>  <p>An array of gamma control settings (see <strong><see cref="T:SharpDX.DXGI.GammaControl"/></strong>).</p> </dd></param>	
            <returns><p>Returns one of the DXGI_ERROR values.</p></returns>	
            <remarks>	
            <p> </p><p><strong>Note</strong>??Calling this method is only supported while in full-screen mode.</p><p>For info about using gamma correction, see Using gamma correction. </p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIOutput::GetGammaControl']/*"/>	
            <msdn-id>bb174552</msdn-id>	
            <unmanaged>HRESULT IDXGIOutput::GetGammaControl([Out] DXGI_GAMMA_CONTROL* pArray)</unmanaged>	
            <unmanaged-short>IDXGIOutput::GetGammaControl</unmanaged-short>	
        </member>
        <member name="M:SharpDX.DXGI.Output.SetDisplaySurface(SharpDX.DXGI.Surface)">
            <summary>	
            <p>Changes the display mode.</p>	
            </summary>	
            <param name="scanoutSurfaceRef"><dd>  <p>A reference to a surface (see <strong><see cref="T:SharpDX.DXGI.Surface"/></strong>) used for rendering an image to the screen. The surface must have been created as a back buffer (DXGI_USAGE_BACKBUFFER).</p> </dd></param>	
            <returns><p>Returns one of the DXGI_ERROR values.</p></returns>	
            <remarks>	
            <p><strong><see cref="M:SharpDX.DXGI.Output.SetDisplaySurface(SharpDX.DXGI.Surface)"/></strong> should not be called directly by applications, since results will be unpredictable. It is called implicitly by the DXGI swap chain object during full-screen transitions, and should not be used as a substitute for swap-chain methods.</p><p>This method should only be called between <strong><see cref="M:SharpDX.DXGI.Output.TakeOwnership(SharpDX.ComObject,SharpDX.Bool)"/></strong> and <strong><see cref="M:SharpDX.DXGI.Output.ReleaseOwnership"/></strong> calls.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIOutput::SetDisplaySurface']/*"/>	
            <msdn-id>bb174556</msdn-id>	
            <unmanaged>HRESULT IDXGIOutput::SetDisplaySurface([In] IDXGISurface* pScanoutSurface)</unmanaged>	
            <unmanaged-short>IDXGIOutput::SetDisplaySurface</unmanaged-short>	
        </member>
        <member name="M:SharpDX.DXGI.Output.CopyDisplaySurfaceTo(SharpDX.DXGI.Surface)">
            <summary>	
            <p>[Starting with Direct3D 11.1, we recommend not to use <strong>GetDisplaySurfaceData</strong> anymore to retrieve the current display surface. Instead, use <strong>IDXGIOutput1::GetDisplaySurfaceData1</strong>, which supports stereo display mode.]</p><p>Gets a copy of the current display surface.</p>	
            </summary>	
            <param name="destinationRef">No documentation.</param>	
            <returns><p>Returns one of the DXGI_ERROR values.</p></returns>	
            <remarks>	
            <p><strong><see cref="M:SharpDX.DXGI.Output.CopyDisplaySurfaceTo(SharpDX.DXGI.Surface)"/></strong> can only be called when an output is in full-screen mode. If the method succeeds, DXGI fills the destination surface.</p><p>Use <strong><see cref="M:SharpDX.DXGI.Output.GetDescription(SharpDX.DXGI.OutputDescription@)"/></strong> to determine the size (width and height) of the output when you want to allocate space for the destination surface. This is true regardless of target monitor rotation. A destination surface created by a graphics component (such as Direct3D 10) must be created with CPU-write permission (see <see cref="!:SharpDX.Direct3D10.CpuAccessFlags.Write"/>). Other surfaces should be created with CPU read-write permission (see D3D10_CPU_ACCESS_READ_WRITE). This method will modify the surface data to fit the destination surface (stretch, shrink, convert format, rotate). The stretch and shrink is performed with point-sampling.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIOutput::GetDisplaySurfaceData']/*"/>	
            <msdn-id>bb174550</msdn-id>	
            <unmanaged>HRESULT IDXGIOutput::GetDisplaySurfaceData([In] IDXGISurface* pDestination)</unmanaged>	
            <unmanaged-short>IDXGIOutput::GetDisplaySurfaceData</unmanaged-short>	
        </member>
        <member name="M:SharpDX.DXGI.Output.GetFrameStatistics(SharpDX.DXGI.FrameStatistics@)">
            <summary>	
            <p>Gets statistics about recently rendered frames.</p>	
            </summary>	
            <param name="statsRef"><dd>  <p>A reference to frame statistics (see <strong><see cref="T:SharpDX.DXGI.FrameStatistics"/></strong>).</p> </dd></param>	
            <returns><p>If this function succeeds, it returns <see cref="F:SharpDX.Result.Ok"/>. Otherwise, it might return <see cref="F:SharpDX.DXGI.ResultCode.InvalidCall"/>.</p></returns>	
            <remarks>	
            <p>This API is similar to <strong><see cref="M:SharpDX.DXGI.SwapChain.GetFrameStatistics(SharpDX.DXGI.FrameStatistics@)"/></strong>.</p><p> </p><p><strong>Note</strong>??Calling this method is only supported while in full-screen mode.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIOutput::GetFrameStatistics']/*"/>	
            <msdn-id>bb174551</msdn-id>	
            <unmanaged>HRESULT IDXGIOutput::GetFrameStatistics([Out] DXGI_FRAME_STATISTICS* pStats)</unmanaged>	
            <unmanaged-short>IDXGIOutput::GetFrameStatistics</unmanaged-short>	
        </member>
        <member name="M:SharpDX.DXGI.Output.GetClosestMatchingMode(SharpDX.ComObject,SharpDX.DXGI.ModeDescription,SharpDX.DXGI.ModeDescription@)">
            <summary>	
            Find the display mode that most closely matches the requested display mode.	
            </summary>	
            <remarks>	
            Direct3D devices require UNORM formats. This method finds the closest matching available display mode to the mode specified in pModeToMatch. Similarly ranked fields (i.e. all specified, or all unspecified, etc) are resolved in the following order.  ScanlineOrdering Scaling Format Resolution RefreshRate  When determining the closest value for a particular field, previously matched fields are used to filter the display mode list choices, and  other fields are ignored. For example, when matching Resolution, the display mode list will have already been filtered by a certain ScanlineOrdering,  Scaling, and Format, while RefreshRate is ignored. This ordering doesn't define the absolute ordering for every usage scenario of FindClosestMatchingMode, because  the application can choose some values initially, effectively changing the order that fields are chosen. Fields of the display mode are matched one at a time, generally in a specified order. If a field is unspecified, FindClosestMatchingMode gravitates toward the values for the desktop related to this output.  If this output is not part of the desktop, then the default desktop output is used to find values. If an application uses a fully unspecified  display mode, FindClosestMatchingMode will typically return a display mode that matches the desktop settings for this output.   Unspecified fields are lower priority than specified fields and will be resolved later than specified fields. 	
            </remarks>	
            <param name="device">A reference to the Direct3D device interface. If this parameter is NULL, only modes whose format matches that of pModeToMatch will  be returned; otherwise, only those formats that are supported for scan-out by the device are returned. </param>
            <param name="modeToMatch">The desired display mode (see <see cref="T:SharpDX.DXGI.ModeDescription"/>). Members of DXGI_MODE_DESC can be unspecified indicating no preference for  that member.  A value of 0 for Width or Height indicates the value is unspecified.  If either Width or  Height are 0 both must be 0.  A numerator and denominator of 0 in RefreshRate indicate it is unspecified. Other members  of DXGI_MODE_DESC have enumeration values indicating the member is unspecified.  If pConnectedDevice is NULL Format cannot be DXGI_FORMAT_UNKNOWN. </param>
            <param name="closestMatch">The mode that most closely matches pModeToMatch. </param>
            <returns>Returns one of the following <see cref="!:SharpDX.DXGI.DXGIError"/>. </returns>
            <unmanaged>HRESULT IDXGIOutput::FindClosestMatchingMode([In] const DXGI_MODE_DESC* pModeToMatch,[Out] DXGI_MODE_DESC* pClosestMatch,[In, Optional] IUnknown* pConcernedDevice)</unmanaged>
        </member>
        <member name="M:SharpDX.DXGI.Output.GetDisplayModeList(SharpDX.DXGI.Format,SharpDX.DXGI.DisplayModeEnumerationFlags)">
            <summary>	
            Gets the display modes that match the requested format and other input options.	
            </summary>	
            <remarks>	
            In general, when switching from windowed to full-screen mode, a swap chain automatically chooses a display mode that meets (or exceeds) the resolution, color  depth and refresh rate of the swap chain. To exercise more control over the display mode, use this API to poll the set of display modes that are validated  against monitor capabilities, or all modes that match the desktop (if the desktop settings are not validated against the monitor). As shown, this API is designed to be called twice. First to get the number of modes available, and second to return a description of the modes. 	
            <code> UINT num = 0;	
            DXGI_FORMAT format = DXGI_FORMAT_R32G32B32A32_FLOAT;	
            UINT flags         = DXGI_ENUM_MODES_INTERLACED; pOutput-&gt;GetDisplayModeList( format, flags, &amp;num, 0); ... DXGI_MODE_DESC * pDescs = new DXGI_MODE_DESC[num];	
            pOutput-&gt;GetDisplayModeList( format, flags, &amp;num, pDescs); </code>	
            	
             	
            </remarks>	
            <param name="format">The color format (see <see cref="T:SharpDX.DXGI.Format"/>). </param>
            <param name="flags">format for modes to include (see {{DXGI_ENUM_MODES}}). DXGI_ENUM_MODES_SCALING needs to be specified to expose the display modes that require scaling.  Centered modes, requiring no  scaling and corresponding directly to the display output, are enumerated by default. </param>
            <returns>Returns a list of display modes (see <see cref="T:SharpDX.DXGI.ModeDescription"/>); </returns>
            <unmanaged>HRESULT IDXGIOutput::GetDisplayModeList([None] DXGI_FORMAT EnumFormat,[None] int Flags,[InOut] int* pNumModes,[Out, Buffer, Optional] DXGI_MODE_DESC* pDesc)</unmanaged>
        </member>
        <member name="P:SharpDX.DXGI.Output.Description">
            <summary>	
            <p>Get a description of the output.</p>	
            </summary>	
            <remarks>	
            <p> On a high DPI desktop, <strong>GetDesc</strong> returns the visualized screen size unless the app is marked high DPI aware. For info about writing DPI-aware Win32 apps, see High DPI.</p><p><strong>Windows?Phone?8:</strong> This API is supported.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIOutput::GetDesc']/*"/>	
            <msdn-id>bb174548</msdn-id>	
            <unmanaged>GetDesc</unmanaged>	
            <unmanaged-short>GetDesc</unmanaged-short>	
            <unmanaged>HRESULT IDXGIOutput::GetDesc([Out] DXGI_OUTPUT_DESC* pDesc)</unmanaged>
        </member>
        <member name="P:SharpDX.DXGI.Output.GammaControlCapabilities">
            <summary>	
            <p>Gets a description of the gamma-control capabilities.</p>	
            </summary>	
            <remarks>	
            <p> </p><p><strong>Note</strong>??Calling this method is only supported while in full-screen mode.</p><p>For info about using gamma correction, see Using gamma correction. </p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIOutput::GetGammaControlCapabilities']/*"/>	
            <msdn-id>bb174553</msdn-id>	
            <unmanaged>GetGammaControlCapabilities</unmanaged>	
            <unmanaged-short>GetGammaControlCapabilities</unmanaged-short>	
            <unmanaged>HRESULT IDXGIOutput::GetGammaControlCapabilities([Out] DXGI_GAMMA_CONTROL_CAPABILITIES* pGammaCaps)</unmanaged>
        </member>
        <member name="P:SharpDX.DXGI.Output.GammaControl">
            <summary>	
            <p>Gets or sets the gamma control settings.</p>	
            </summary>	
            <remarks>	
            <p> </p><p><strong>Note</strong>??Calling this method is only supported while in full-screen mode.</p><p>For info about using gamma correction, see Using gamma correction. </p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIOutput::GetGammaControl']/*"/>	
            <msdn-id>bb174552</msdn-id>	
            <unmanaged>GetGammaControl / SetGammaControl</unmanaged>	
            <unmanaged-short>GetGammaControl</unmanaged-short>	
            <unmanaged>HRESULT IDXGIOutput::GetGammaControl([Out] DXGI_GAMMA_CONTROL* pArray)</unmanaged>
        </member>
        <member name="P:SharpDX.DXGI.Output.FrameStatistics">
            <summary>	
            <p>Gets statistics about recently rendered frames.</p>	
            </summary>	
            <remarks>	
            <p>This API is similar to <strong><see cref="M:SharpDX.DXGI.SwapChain.GetFrameStatistics(SharpDX.DXGI.FrameStatistics@)"/></strong>.</p><p> </p><p><strong>Note</strong>??Calling this method is only supported while in full-screen mode.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIOutput::GetFrameStatistics']/*"/>	
            <msdn-id>bb174551</msdn-id>	
            <unmanaged>GetFrameStatistics</unmanaged>	
            <unmanaged-short>GetFrameStatistics</unmanaged-short>	
            <unmanaged>HRESULT IDXGIOutput::GetFrameStatistics([Out] DXGI_FRAME_STATISTICS* pStats)</unmanaged>
        </member>
        <member name="T:SharpDX.DXGI.Resource">
            <summary>	
            <p>An <strong><see cref="T:SharpDX.DXGI.Resource"/></strong> interface allows resource sharing and identifies the memory that a resource resides in.</p>	
            </summary>	
            <remarks>	
            <p>To find out what type of memory a resource is currently located in, use <strong><see cref="M:SharpDX.DXGI.Device.QueryResourceResidency(SharpDX.ComObject[])"/></strong>. To share resources between processes, use <strong><see cref="!:SharpDX.Direct3D10.Device.OpenSharedResource"/></strong>. For information about how to share resources between multiple Windows graphics APIs, including Direct3D 11, Direct2D, Direct3D 10, and Direct3D 9Ex, see Surface Sharing Between Windows Graphics APIs.</p><p>You can retrieve the <strong><see cref="T:SharpDX.DXGI.Resource"/></strong> interface from any video memory resource that you create from a Direct3D 10 and later function. Any Direct3D object that supports <strong><see cref="!:SharpDX.Direct3D10.Resource"/></strong> or <strong><see cref="!:SharpDX.Direct3D11.Resource"/></strong> also supports <strong><see cref="T:SharpDX.DXGI.Resource"/></strong>. For example, the Direct3D 2D texture object that you create from <strong><see cref="!:SharpDX.Direct3D11.Device.CreateTexture2D"/></strong> supports <strong><see cref="T:SharpDX.DXGI.Resource"/></strong>. You can call <strong>QueryInterface</strong> on the 2D texture object (<strong><see cref="!:SharpDX.Direct3D11.Texture2D"/></strong>) to retrieve the <strong><see cref="T:SharpDX.DXGI.Resource"/></strong> interface. For example, to retrieve the <strong><see cref="T:SharpDX.DXGI.Resource"/></strong> interface from  the 2D texture object, use the following code.</p><pre><see cref="T:SharpDX.DXGI.Resource"/> * pDXGIResource;	
            hr = g_pd3dTexture2D-&gt;QueryInterface(__uuidof(<see cref="T:SharpDX.DXGI.Resource"/>), (void **)&amp;pDXGIResource);	
            </pre><p><strong>Windows?Phone?8:</strong> This API is supported.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIResource']/*"/>	
            <msdn-id>bb174560</msdn-id>	
            <unmanaged>IDXGIResource</unmanaged>	
            <unmanaged-short>IDXGIResource</unmanaged-short>	
        </member>
        <member name="M:SharpDX.DXGI.Resource.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.DXGI.Resource"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.DXGI.Resource.op_Explicit(System.IntPtr)~SharpDX.DXGI.Resource">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:SharpDX.DXGI.Resource"/>. (This method is a shortcut to <see cref="P:SharpDX.CppObject.NativePointer"/>) 
            </summary>
            <param name="nativePointer">The native pointer.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:SharpDX.DXGI.Resource.GetSharedHandle(System.IntPtr@)">
            <summary>	
            <p>[Starting with Direct3D 11.1, we recommend not to use <strong>GetSharedHandle</strong> anymore to retrieve the handle to a shared resource. Instead, use <strong>IDXGIResource1::CreateSharedHandle</strong> to get a handle for sharing. To use <strong>IDXGIResource1::CreateSharedHandle</strong>, you  must create the resource as shared and specify that it uses NT handles (that is, you set the <strong>D3D11_RESOURCE_MISC_SHARED_NTHANDLE</strong> flag). We also recommend that you create shared resources that use NT handles so you can use <strong>CloseHandle</strong>, <strong>DuplicateHandle</strong>, and so on on those shared resources.]</p><p>Gets the handle to a shared resource.</p>	
            </summary>	
            <param name="sharedHandleRef">No documentation.</param>	
            <returns><p>Returns one of the DXGI_ERROR values.</p></returns>	
            <remarks>	
            <p><strong>GetSharedHandle</strong> returns a handle for the resource that you created as shared (that is, you set the <strong><see cref="!:SharpDX.Direct3D11.ResourceOptionFlags.Shared"/></strong> with or without the <strong><see cref="!:SharpDX.Direct3D11.ResourceOptionFlags.SharedKeyedmutex"/></strong> flag). You can pass this handle to the <strong><see cref="!:SharpDX.Direct3D11.Device.OpenSharedResource"/></strong> method to give another device access to the shared resource. You can also marshal this handle to another process to share a resource with a device in another process. However, this handle is not an NT handle. Therefore, don't use the handle with <strong>CloseHandle</strong>, <strong>DuplicateHandle</strong>, and so on.</p><p>The creator of a shared resource must not destroy the resource until all intended entities have opened the resource. The validity of the handle is tied to the lifetime of the underlying video memory. If no resource objects exist on any devices that refer to this resource, the handle is no longer valid. To extend the lifetime of the handle and video memory, you must open the shared resource on a device.</p><p><strong>GetSharedHandle</strong> can also return handles for resources that were passed into <strong><see cref="!:SharpDX.Direct3D11.Device.OpenSharedResource"/></strong> to open those resources.</p><p><strong>GetSharedHandle</strong> fails if the resource to which it wants to get a handle is not shared.</p><p><strong>Windows?Phone?8:</strong> This API is supported.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIResource::GetSharedHandle']/*"/>	
            <msdn-id>bb174562</msdn-id>	
            <unmanaged>HRESULT IDXGIResource::GetSharedHandle([Out] void** pSharedHandle)</unmanaged>	
            <unmanaged-short>IDXGIResource::GetSharedHandle</unmanaged-short>	
        </member>
        <member name="M:SharpDX.DXGI.Resource.GetUsage(System.Int32@)">
            <summary>	
            <p>Get the expected resource usage.</p>	
            </summary>	
            <param name="usageRef"><dd>  <p>A reference to a usage flag (see DXGI_USAGE). For Direct3D 10, a surface can be used as a shader input or a render-target output.</p> </dd></param>	
            <returns><p>Returns one of the following DXGI_ERROR.</p></returns>	
            <remarks>	
            <p><strong>Windows?Phone?8:</strong> This API is supported.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIResource::GetUsage']/*"/>	
            <msdn-id>bb174563</msdn-id>	
            <unmanaged>HRESULT IDXGIResource::GetUsage([Out] unsigned int* pUsage)</unmanaged>	
            <unmanaged-short>IDXGIResource::GetUsage</unmanaged-short>	
        </member>
        <member name="M:SharpDX.DXGI.Resource.SetEvictionPriority(System.Int32)">
            <summary>	
            <p>Set the priority for evicting the resource from memory.</p>	
            </summary>	
            <param name="evictionPriority"><dd>  <p>The priority is one of the following values: </p> <table> <tr><th>Value</th><th>Meaning</th></tr> <tr><td><dl> <dt><strong><see cref="F:SharpDX.DXGI.ResourcePriority.Minimum"/> (0x28000000)</strong></dt> </dl> </td><td> <p>The resource is unused and can be evicted as soon as another resource requires the memory that the resource occupies.</p> </td></tr> <tr><td><dl> <dt><strong><see cref="F:SharpDX.DXGI.ResourcePriority.Low"/> (0x50000000)</strong></dt> </dl> </td><td> <p>The eviction priority of the resource is low. The placement of the resource is not critical, and minimal work is performed to find a location for the resource. For example, if a GPU can render with a vertex buffer from either local or non-local memory with little difference in performance, that vertex buffer is low priority. Other more critical resources (for example, a render target or texture) can then occupy the faster memory.</p> </td></tr> <tr><td><dl> <dt><strong><see cref="F:SharpDX.DXGI.ResourcePriority.Normal"/> (0x78000000)</strong></dt> </dl> </td><td> <p>The eviction priority of the resource is normal. The placement of the resource is important, but not critical, for performance. The resource is placed in its preferred location instead of a low-priority resource. </p> </td></tr> <tr><td><dl> <dt><strong><see cref="F:SharpDX.DXGI.ResourcePriority.High"/> (0xa0000000)</strong></dt> </dl> </td><td> <p>The eviction priority of the resource is high. The resource is placed in its preferred location instead of a low-priority or normal-priority resource.</p> </td></tr> <tr><td><dl> <dt><strong><see cref="F:SharpDX.DXGI.ResourcePriority.Maximum"/> (0xc8000000)</strong></dt> </dl> </td><td> <p>The resource is evicted from memory only if there is no other way of resolving the memory requirement.</p> </td></tr> </table> <p>?</p> </dd></param>	
            <returns><p>Returns one of the following DXGI_ERROR.</p></returns>	
            <remarks>	
            <p>The eviction priority is a memory-management variable that is used by DXGI for determining how to populate overcommitted memory.</p><p>You can set priority levels other than the defined values when appropriate. For example, you can set a resource with a priority level of 0x78000001 to indicate that the resource is slightly above normal.</p><p><strong>Windows?Phone?8:</strong> This API is supported.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIResource::SetEvictionPriority']/*"/>	
            <msdn-id>bb174564</msdn-id>	
            <unmanaged>HRESULT IDXGIResource::SetEvictionPriority([In] unsigned int EvictionPriority)</unmanaged>	
            <unmanaged-short>IDXGIResource::SetEvictionPriority</unmanaged-short>	
        </member>
        <member name="M:SharpDX.DXGI.Resource.GetEvictionPriority(System.Int32@)">
            <summary>	
            <p>Get the eviction priority.</p>	
            </summary>	
            <param name="evictionPriorityRef"><dd>  <p>A reference to the eviction priority, which determines when a resource can be evicted from memory.  </p> <p>The following defined values are possible.</p> <table> <tr><th>Value</th><th>Meaning</th></tr> <tr><td><dl> <dt><strong><see cref="F:SharpDX.DXGI.ResourcePriority.Minimum"/> (0x28000000)</strong></dt> </dl> </td><td> <p>The resource is unused and can be evicted as soon as another resource requires the memory that the resource occupies.</p> </td></tr> <tr><td><dl> <dt><strong><see cref="F:SharpDX.DXGI.ResourcePriority.Low"/> (0x50000000)</strong></dt> </dl> </td><td> <p>The eviction priority of the resource is low. The placement of the resource is not critical, and minimal work is performed to find a location for the resource. For example, if a GPU can render with a vertex buffer from either local or non-local memory with little difference in performance, that vertex buffer is low priority. Other more critical resources (for example, a render target or texture) can then occupy the faster memory.</p> </td></tr> <tr><td><dl> <dt><strong><see cref="F:SharpDX.DXGI.ResourcePriority.Normal"/> (0x78000000)</strong></dt> </dl> </td><td> <p>The eviction priority of the resource is normal. The placement of the resource is important, but not critical, for performance. The resource is placed in its preferred location instead of a low-priority resource. </p> </td></tr> <tr><td><dl> <dt><strong><see cref="F:SharpDX.DXGI.ResourcePriority.High"/> (0xa0000000)</strong></dt> </dl> </td><td> <p>The eviction priority of the resource is high. The resource is placed in its preferred location instead of a low-priority or normal-priority resource.</p> </td></tr> <tr><td><dl> <dt><strong><see cref="F:SharpDX.DXGI.ResourcePriority.Maximum"/> (0xc8000000)</strong></dt> </dl> </td><td> <p>The resource is evicted from memory only if there is no other way of resolving the memory requirement.</p> </td></tr> </table> <p>?</p> </dd></param>	
            <returns><p>Returns one of the following DXGI_ERROR.</p></returns>	
            <remarks>	
            <p>The eviction priority is a memory-management variable that is used by DXGI to determine how to manage overcommitted memory.</p><p>Priority levels other than the defined values are used when appropriate. For example, a resource with a priority level of 0x78000001 indicates that the resource is slightly above normal.</p><p><strong>Windows?Phone?8:</strong> This API is supported.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIResource::GetEvictionPriority']/*"/>	
            <msdn-id>bb174561</msdn-id>	
            <unmanaged>HRESULT IDXGIResource::GetEvictionPriority([Out] unsigned int* pEvictionPriority)</unmanaged>	
            <unmanaged-short>IDXGIResource::GetEvictionPriority</unmanaged-short>	
        </member>
        <member name="P:SharpDX.DXGI.Resource.SharedHandle">
            <summary>	
            <p>[Starting with Direct3D 11.1, we recommend not to use <strong>GetSharedHandle</strong> anymore to retrieve the handle to a shared resource. Instead, use <strong>IDXGIResource1::CreateSharedHandle</strong> to get a handle for sharing. To use <strong>IDXGIResource1::CreateSharedHandle</strong>, you  must create the resource as shared and specify that it uses NT handles (that is, you set the <strong>D3D11_RESOURCE_MISC_SHARED_NTHANDLE</strong> flag). We also recommend that you create shared resources that use NT handles so you can use <strong>CloseHandle</strong>, <strong>DuplicateHandle</strong>, and so on on those shared resources.]</p><p>Gets the handle to a shared resource.</p>	
            </summary>	
            <remarks>	
            <p><strong>GetSharedHandle</strong> returns a handle for the resource that you created as shared (that is, you set the <strong><see cref="!:SharpDX.Direct3D11.ResourceOptionFlags.Shared"/></strong> with or without the <strong><see cref="!:SharpDX.Direct3D11.ResourceOptionFlags.SharedKeyedmutex"/></strong> flag). You can pass this handle to the <strong><see cref="!:SharpDX.Direct3D11.Device.OpenSharedResource"/></strong> method to give another device access to the shared resource. You can also marshal this handle to another process to share a resource with a device in another process. However, this handle is not an NT handle. Therefore, don't use the handle with <strong>CloseHandle</strong>, <strong>DuplicateHandle</strong>, and so on.</p><p>The creator of a shared resource must not destroy the resource until all intended entities have opened the resource. The validity of the handle is tied to the lifetime of the underlying video memory. If no resource objects exist on any devices that refer to this resource, the handle is no longer valid. To extend the lifetime of the handle and video memory, you must open the shared resource on a device.</p><p><strong>GetSharedHandle</strong> can also return handles for resources that were passed into <strong><see cref="!:SharpDX.Direct3D11.Device.OpenSharedResource"/></strong> to open those resources.</p><p><strong>GetSharedHandle</strong> fails if the resource to which it wants to get a handle is not shared.</p><p><strong>Windows?Phone?8:</strong> This API is supported.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIResource::GetSharedHandle']/*"/>	
            <msdn-id>bb174562</msdn-id>	
            <unmanaged>GetSharedHandle</unmanaged>	
            <unmanaged-short>GetSharedHandle</unmanaged-short>	
            <unmanaged>HRESULT IDXGIResource::GetSharedHandle([Out] void** pSharedHandle)</unmanaged>
        </member>
        <member name="P:SharpDX.DXGI.Resource.Usage">
            <summary>	
            <p>Get the expected resource usage.</p>	
            </summary>	
            <remarks>	
            <p><strong>Windows?Phone?8:</strong> This API is supported.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIResource::GetUsage']/*"/>	
            <msdn-id>bb174563</msdn-id>	
            <unmanaged>GetUsage</unmanaged>	
            <unmanaged-short>GetUsage</unmanaged-short>	
            <unmanaged>HRESULT IDXGIResource::GetUsage([Out] unsigned int* pUsage)</unmanaged>
        </member>
        <member name="P:SharpDX.DXGI.Resource.EvictionPriority">
            <summary>	
            <p>Get or sets the eviction priority.</p>	
            </summary>	
            <remarks>	
            <p>The eviction priority is a memory-management variable that is used by DXGI to determine how to manage overcommitted memory.</p><p>Priority levels other than the defined values are used when appropriate. For example, a resource with a priority level of 0x78000001 indicates that the resource is slightly above normal.</p><p><strong>Windows?Phone?8:</strong> This API is supported.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGIResource::GetEvictionPriority']/*"/>	
            <msdn-id>bb174561</msdn-id>	
            <unmanaged>GetEvictionPriority / SetEvictionPriority</unmanaged>	
            <unmanaged-short>GetEvictionPriority</unmanaged-short>	
            <unmanaged>HRESULT IDXGIResource::GetEvictionPriority([Out] unsigned int* pEvictionPriority)</unmanaged>
        </member>
        <member name="T:SharpDX.DXGI.Surface">
            <summary>	
            <p>The  <strong><see cref="T:SharpDX.DXGI.Surface"/></strong> interface implements methods for image-data objects.</p>	
            </summary>	
            <remarks>	
            <p>An image-data object is a 2D section of memory, commonly called a surface. To get the surface from an output, call <strong><see cref="M:SharpDX.DXGI.Output.CopyDisplaySurfaceTo(SharpDX.DXGI.Surface)"/></strong>. </p><p>The runtime automatically creates an <strong><see cref="T:SharpDX.DXGI.Surface"/></strong> interface when it creates a Direct3D resource object that represents a surface. For example, the runtime creates an <strong><see cref="T:SharpDX.DXGI.Surface"/></strong> interface when you call <strong><see cref="!:SharpDX.Direct3D11.Device.CreateTexture2D"/></strong> or <strong><see cref="!:SharpDX.Direct3D10.Device.CreateTexture2D"/></strong> to create a 2D texture. To retrieve the <strong><see cref="T:SharpDX.DXGI.Surface"/></strong> interface that represents the 2D texture surface, call <strong>ID3D11Texture2D::QueryInterface</strong> or <strong>ID3D10Texture2D::QueryInterface</strong>. In this call, you must pass the identifier of <strong><see cref="T:SharpDX.DXGI.Surface"/></strong>. If the 2D texture has only a single MIP-map level and does not consist of an array of textures, <strong>QueryInterface</strong> succeeds and returns a reference to the <strong><see cref="T:SharpDX.DXGI.Surface"/></strong> interface reference. Otherwise, <strong>QueryInterface</strong> fails and does not return the reference to <strong><see cref="T:SharpDX.DXGI.Surface"/></strong>.</p><p><strong>Windows?Phone?8:</strong> This API is supported.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGISurface']/*"/>	
            <msdn-id>bb174565</msdn-id>	
            <unmanaged>IDXGISurface</unmanaged>	
            <unmanaged-short>IDXGISurface</unmanaged-short>	
        </member>
        <member name="M:SharpDX.DXGI.Surface.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.DXGI.Surface"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.DXGI.Surface.op_Explicit(System.IntPtr)~SharpDX.DXGI.Surface">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:SharpDX.DXGI.Surface"/>. (This method is a shortcut to <see cref="P:SharpDX.CppObject.NativePointer"/>) 
            </summary>
            <param name="nativePointer">The native pointer.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:SharpDX.DXGI.Surface.GetDescription(SharpDX.DXGI.SurfaceDescription@)">
            <summary>	
            <p>Get a description of the surface.</p>	
            </summary>	
            <param name="descRef"><dd>  <p>A reference to the surface description (see <strong><see cref="T:SharpDX.DXGI.SurfaceDescription"/></strong>).</p> </dd></param>	
            <returns><p>Returns <see cref="F:SharpDX.Result.Ok"/> if successful; otherwise, returns one of the error codes that are described in the DXGI_ERROR topic.</p></returns>	
            <remarks>	
            <p><strong>Windows?Phone?8:</strong> This API is supported.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGISurface::GetDesc']/*"/>	
            <msdn-id>bb174566</msdn-id>	
            <unmanaged>HRESULT IDXGISurface::GetDesc([Out] DXGI_SURFACE_DESC* pDesc)</unmanaged>	
            <unmanaged-short>IDXGISurface::GetDesc</unmanaged-short>	
        </member>
        <member name="M:SharpDX.DXGI.Surface.Map(SharpDX.DXGI.MappedRectangle@,System.Int32)">
            <summary>	
            <p>Get a reference to the data contained in the surface, and deny GPU access to the surface.</p>	
            </summary>	
            <param name="lockedRectRef"><dd>  <p>A reference to the surface data (see <strong><see cref="T:SharpDX.DXGI.MappedRectangle"/></strong>).</p> </dd></param>	
            <param name="mapFlags"><dd>  <p>CPU read-write flags. These flags can be combined with a logical OR. </p> <ul> <li><see cref="F:SharpDX.DXGI.MapFlags.Read"/> - Allow CPU read access.</li> <li><see cref="F:SharpDX.DXGI.MapFlags.Write"/> - Allow CPU write access.</li> <li><see cref="F:SharpDX.DXGI.MapFlags.Discard"/> - Discard the previous contents of a resource when it is mapped.</li> </ul> </dd></param>	
            <returns><p>Returns <see cref="F:SharpDX.Result.Ok"/> if successful; otherwise, returns one of the error codes that are described in the DXGI_ERROR topic.</p></returns>	
            <remarks>	
            <p>Use <strong><see cref="M:SharpDX.DXGI.Surface.Map(SharpDX.DXGI.MappedRectangle@,System.Int32)"/></strong> to access a surface from the CPU. To release a mapped surface (and allow GPU access) call <strong><see cref="M:SharpDX.DXGI.Surface.Unmap"/></strong>.</p><p><strong>Windows?Phone?8:</strong> This API is supported.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGISurface::Map']/*"/>	
            <msdn-id>bb174567</msdn-id>	
            <unmanaged>HRESULT IDXGISurface::Map([Out] DXGI_MAPPED_RECT* pLockedRect,[In] unsigned int MapFlags)</unmanaged>	
            <unmanaged-short>IDXGISurface::Map</unmanaged-short>	
        </member>
        <member name="M:SharpDX.DXGI.Surface.Unmap">
            <summary>	
            <p>Invalidate the reference to the surface retrieved by <strong><see cref="M:SharpDX.DXGI.Surface.Map(SharpDX.DXGI.MappedRectangle@,System.Int32)"/></strong> and re-enable GPU access to the resource.</p>	
            </summary>	
            <returns><p>Returns <see cref="F:SharpDX.Result.Ok"/> if successful; otherwise, returns one of the error codes that are described in the DXGI_ERROR topic.</p></returns>	
            <remarks>	
            <p><strong>Windows?Phone?8:</strong> This API is supported.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGISurface::Unmap']/*"/>	
            <msdn-id>bb174568</msdn-id>	
            <unmanaged>HRESULT IDXGISurface::Unmap()</unmanaged>	
            <unmanaged-short>IDXGISurface::Unmap</unmanaged-short>	
        </member>
        <member name="M:SharpDX.DXGI.Surface.Map(SharpDX.DXGI.MapFlags)">
            <summary>
            Acquires access to the surface data.
            </summary>
            <param name="flags">Flags specifying CPU access permissions.</param>
            <returns>A <see cref="T:SharpDX.DataRectangle" /> for accessing the mapped data, or <c>null</c> on failure.</returns>.
        </member>
        <member name="M:SharpDX.DXGI.Surface.Map(SharpDX.DXGI.MapFlags,SharpDX.DataStream@)">
            <summary>
            Acquires access to the surface data.
            </summary>
            <param name="flags">Flags specifying CPU access permissions.</param>
            <param name="dataStream">Stream to contain the surface data.</param>
            <returns>A <see cref="T:SharpDX.DataRectangle" /> for accessing the mapped data, or <c>null</c> on failure.</returns>.
        </member>
        <member name="M:SharpDX.DXGI.Surface.FromSwapChain(SharpDX.DXGI.SwapChain,System.Int32)">
            <summary>
            Gets a swap chain back buffer.
            </summary>
            <param name="swapChain">The swap chain to get the buffer from.</param>
            <param name="index">The index of the desired buffer.</param>
            <returns>The buffer interface, or <c>null</c> on failure.</returns>
        </member>
        <member name="P:SharpDX.DXGI.Surface.Description">
            <summary>	
            <p>Get a description of the surface.</p>	
            </summary>	
            <remarks>	
            <p><strong>Windows?Phone?8:</strong> This API is supported.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGISurface::GetDesc']/*"/>	
            <msdn-id>bb174566</msdn-id>	
            <unmanaged>GetDesc</unmanaged>	
            <unmanaged-short>GetDesc</unmanaged-short>	
            <unmanaged>HRESULT IDXGISurface::GetDesc([Out] DXGI_SURFACE_DESC* pDesc)</unmanaged>
        </member>
        <member name="T:SharpDX.DXGI.Surface1">
            <summary>	
            <p>The <strong><see cref="T:SharpDX.DXGI.Surface1"/></strong> interface extends the <strong><see cref="T:SharpDX.DXGI.Surface"/></strong> by adding support for using Windows Graphics Device Interface (GDI) to render to a Microsoft DirectX Graphics Infrastructure (DXGI) surface.</p>	
            </summary>	
            <remarks>	
            <p>This interface is not supported by DXGI 1.0, which shipped in Windows?Vista and Windows Server?2008. DXGI 1.1 support is required, which is available on  Windows?7, Windows Server?2008?R2, and as an update to Windows?Vista with Service Pack?2 (SP2) (KB 971644) and Windows Server?2008 (KB 971512).</p><p>An image-data object is a 2D section of memory, commonly called a surface. To get the surface from an output, call <strong><see cref="M:SharpDX.DXGI.Output.CopyDisplaySurfaceTo(SharpDX.DXGI.Surface)"/></strong>. Then, call <strong>QueryInterface</strong> on the <strong><see cref="T:SharpDX.DXGI.Surface"/></strong> object that <strong><see cref="M:SharpDX.DXGI.Output.CopyDisplaySurfaceTo(SharpDX.DXGI.Surface)"/></strong> returns to retrieve the <strong><see cref="T:SharpDX.DXGI.Surface1"/></strong> interface.</p><p>Any object that supports <strong><see cref="T:SharpDX.DXGI.Surface"/></strong> also supports <strong><see cref="T:SharpDX.DXGI.Surface1"/></strong>.</p><p>The runtime automatically creates an <strong><see cref="T:SharpDX.DXGI.Surface1"/></strong> interface when it creates a Direct3D resource object that represents a surface. For example, the runtime creates an <strong><see cref="T:SharpDX.DXGI.Surface1"/></strong> interface when you call <strong><see cref="!:SharpDX.Direct3D11.Device.CreateTexture2D"/></strong> or <strong><see cref="!:SharpDX.Direct3D10.Device.CreateTexture2D"/></strong> to create a 2D texture. To retrieve the <strong><see cref="T:SharpDX.DXGI.Surface1"/></strong> interface that represents the 2D texture surface, call <strong>ID3D11Texture2D::QueryInterface</strong> or <strong>ID3D10Texture2D::QueryInterface</strong>. In this call, you must pass the identifier of <strong><see cref="T:SharpDX.DXGI.Surface1"/></strong>. If the 2D texture has only a single MIP-map level and does not consist of an array of textures, <strong>QueryInterface</strong> succeeds and returns a reference to the <strong><see cref="T:SharpDX.DXGI.Surface1"/></strong> interface reference. Otherwise, <strong>QueryInterface</strong> fails and does not return the reference to <strong><see cref="T:SharpDX.DXGI.Surface1"/></strong>.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGISurface1']/*"/>	
            <msdn-id>ff471343</msdn-id>	
            <unmanaged>IDXGISurface1</unmanaged>	
            <unmanaged-short>IDXGISurface1</unmanaged-short>	
        </member>
        <member name="M:SharpDX.DXGI.Surface1.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.DXGI.Surface1"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.DXGI.Surface1.op_Explicit(System.IntPtr)~SharpDX.DXGI.Surface1">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:SharpDX.DXGI.Surface1"/>. (This method is a shortcut to <see cref="P:SharpDX.CppObject.NativePointer"/>) 
            </summary>
            <param name="nativePointer">The native pointer.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:SharpDX.DXGI.Surface1.GetDC(SharpDX.Bool)">
            <summary>	
            <p>Returns a device context (DC) that allows you to render to a Microsoft DirectX Graphics Infrastructure (DXGI) surface using Windows Graphics Device Interface (GDI).</p>	
            </summary>	
            <param name="discard"><dd>  <p>A Boolean value that specifies whether to preserve Direct3D contents in the GDI DC. <strong>TRUE</strong> directs the runtime not to preserve Direct3D contents in the GDI DC; that is, the runtime discards the Direct3D contents. <strong><see cref="F:SharpDX.Result.False"/></strong> guarantees that Direct3D contents are available in the GDI DC.</p> </dd></param>	
            <returns><dd>  <p>A reference to an <strong><see cref="T:System.IntPtr"/></strong> handle that represents the current device context for GDI rendering.</p> </dd></returns>	
            <remarks>	
            <p>This method is not supported by DXGI 1.0, which shipped in Windows?Vista and Windows Server?2008. DXGI 1.1 support is required, which is available on  Windows?7, Windows Server?2008?R2, and as an update to Windows?Vista with Service Pack?2 (SP2) (KB 971644) and Windows Server?2008 (KB 971512).</p><p>After you use the <strong>GetDC</strong> method to retrieve a DC, you can render to the DXGI surface by using GDI.   The <strong>GetDC</strong> method readies the surface for GDI rendering and allows inter-operation between DXGI and GDI technologies.  </p><p>Keep the following in mind when using this method:</p><ul> <li>You must create the surface by using the <strong><see cref="!:SharpDX.Direct3D11.ResourceOptionFlags.GdiCompatible"/></strong> flag for a surface or by using the <strong><see cref="F:SharpDX.DXGI.SwapChainFlags.GdiCompatible"/></strong> flag for swap chains,  otherwise this method fails.</li> <li>You must release the device and call the <strong><see cref="M:SharpDX.DXGI.Surface1.ReleaseDC_(System.Nullable{SharpDX.Rectangle})"/></strong> method before you issue any new Direct3D commands.</li> <li>This method fails if an outstanding DC has already been created by this method.</li> <li>The format for the surface or swap chain must be <strong><see cref="F:SharpDX.DXGI.Format.B8G8R8A8_UNorm_SRgb"/></strong> or <strong><see cref="F:SharpDX.DXGI.Format.B8G8R8A8_UNorm"/></strong>.</li> <li>On <strong>GetDC</strong>, the render target in the output merger of the Direct3D pipeline is unbound from the surface.   You must call the <strong><see cref="!:SharpDX.Direct3D11.OutputMergerStage.SetRenderTargets"/></strong> method on the device prior to Direct3D rendering after GDI rendering.</li> <li>Prior to resizing buffers you must release all outstanding DCs.</li> </ul><p> You can also call <strong>GetDC</strong> on the back buffer at index 0 of a swap chain by obtaining an <strong><see cref="T:SharpDX.DXGI.Surface1"/></strong> from the swap chain.   The following code illustrates the process.</p><pre> <see cref="T:SharpDX.DXGI.SwapChain"/>* g_pSwapChain = <c>null</c>;	
            <see cref="T:SharpDX.DXGI.Surface1"/>* g_pSurface1 = <c>null</c>;	
            ...	
            //Setup the device and and swapchain	
            g_pSwapChain-&gt;GetBuffer(0, __uuidof(<see cref="T:SharpDX.DXGI.Surface1"/>), (void**) &amp;g_pSurface1);	
            g_pSurface1-&gt;GetDC( <see cref="F:SharpDX.Result.False"/>, &amp;g_hDC );	
            ...      	
            //Draw on the DC using GDI	
            ...	
            //When finish drawing release the DC	
            g_pSurface1-&gt;ReleaseDC( <c>null</c> ); </pre>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGISurface1::GetDC']/*"/>	
            <msdn-id>ff471345</msdn-id>	
            <unmanaged>HRESULT IDXGISurface1::GetDC([In] BOOL Discard,[Out] HDC* phdc)</unmanaged>	
            <unmanaged-short>IDXGISurface1::GetDC</unmanaged-short>	
        </member>
        <member name="M:SharpDX.DXGI.Surface1.ReleaseDC_(System.Nullable{SharpDX.Rectangle})">
            <summary>	
            <p>Releases the GDI device context (DC) that is associated with the current surface and allows you to use Direct3D to render.</p>	
            </summary>	
            <param name="dirtyRectRef"><dd>  <p>A reference to a <strong><see cref="T:SharpDX.Rectangle"/></strong> structure that identifies the dirty region of the surface.   A dirty region is any part of the surface that you used for GDI rendering and that you want to preserve.  This area is used as a performance hint to graphics subsystem in certain scenarios.  Do not use this parameter to restrict rendering to the specified rectangular region.  If you pass in <strong><c>null</c></strong>, <strong>ReleaseDC</strong> considers the whole surface as dirty.  Otherwise, <strong>ReleaseDC</strong> uses the area specified by the <see cref="T:SharpDX.Rectangle"/> as a performance hint to indicate what areas have been manipulated by GDI rendering.</p> <p>You can pass a reference to an empty <strong><see cref="T:SharpDX.Rectangle"/></strong> structure (a rectangle with no position or area) if you didn't change any content.</p> </dd></param>	
            <returns><p>If this method succeeds, it returns <strong><see cref="F:SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref="T:SharpDX.Result"/></strong> error code.</p></returns>	
            <remarks>	
            <p>This method is not supported by DXGI 1.0, which shipped in Windows?Vista and Windows Server?2008. DXGI 1.1 support is required, which is available on  Windows?7, Windows Server?2008?R2, and as an update to Windows?Vista with Service Pack?2 (SP2) (KB 971644) and Windows Server?2008 (KB 971512).</p><p>Use the <strong>ReleaseDC</strong> method to release the DC and indicate that your application finished all GDI rendering to this surface.   You must call the <strong>ReleaseDC</strong> method before you can use Direct3D to perform additional rendering.</p><p>Prior to resizing buffers you must release all outstanding DCs.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGISurface1::ReleaseDC']/*"/>	
            <msdn-id>ff471346</msdn-id>	
            <unmanaged>HRESULT IDXGISurface1::ReleaseDC([In, Optional] RECT* pDirtyRect)</unmanaged>	
            <unmanaged-short>IDXGISurface1::ReleaseDC</unmanaged-short>	
        </member>
        <member name="M:SharpDX.DXGI.Surface1.ReleaseDC">
            <summary>	
            Releases the GDI device context (DC) associated with the current surface and allows rendering using Direct3D. The whole surface to be considered dirty.
            </summary>	
            <remarks>	
            Use the ReleaseDC method to release the DC and indicate that your application has finished all GDI rendering to this surface.   You must call the ReleaseDC method before you perform addition rendering using Direct3D. Prior to resizing buffers all outstanding DCs must be released. 	
            </remarks>	
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. </returns>
            <unmanaged>HRESULT IDXGISurface1::ReleaseDC([In, Optional] RECT* pDirtyRect)</unmanaged>
        </member>
        <member name="M:SharpDX.DXGI.Surface1.ReleaseDC(SharpDX.Rectangle)">
            <summary>	
            Releases the GDI device context (DC) associated with the current surface and allows rendering using Direct3D.	
            </summary>	
            <remarks>	
            Use the ReleaseDC method to release the DC and indicate that your application has finished all GDI rendering to this surface.   You must call the ReleaseDC method before you perform addition rendering using Direct3D. Prior to resizing buffers all outstanding DCs must be released. 	
            </remarks>	
            <param name="dirtyRect">A reference to a <see cref="T:SharpDX.Rectangle"/> structure that identifies the dirty region of the surface.   A dirty region is any part of the surface that you have used for GDI rendering and that you want to preserve.  This is used as a performance hint to graphics subsystem in certain scenarios.  Do not use this parameter to restrict rendering to the specified rectangular region. The area specified by the <see cref="T:SharpDX.Rectangle"/> will be used as a performance hint to indicate what areas have been manipulated by GDI rendering. </param>
            <returns>If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. </returns>
            <unmanaged>HRESULT IDXGISurface1::ReleaseDC([In, Optional] RECT* pDirtyRect)</unmanaged>
        </member>
        <member name="T:SharpDX.DXGI.SwapChain">
            <summary>	
            <p>An <strong><see cref="T:SharpDX.DXGI.SwapChain"/></strong> interface implements one or more <strong>surfaces</strong> for storing rendered data before presenting it to an output.</p>	
            </summary>	
            <remarks>	
            <p>You can create a swap chain by 	
            calling <strong>IDXGIFactory2::CreateSwapChainForHwnd</strong>, <strong>IDXGIFactory2::CreateSwapChainForCoreWindow</strong>, or <strong>IDXGIFactory2::CreateSwapChainForComposition</strong>. You can also create a swap chain when you call <strong><see cref="!:SharpDX.Direct3D11.D3D11.CreateDeviceAndSwapChain"/></strong>; however, you can then only access the sub-set of swap-chain functionality that the <strong><see cref="T:SharpDX.DXGI.SwapChain"/></strong> interface provides.</p><p><strong>Windows?Phone?8:</strong> This API is supported.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGISwapChain']/*"/>	
            <msdn-id>bb174569</msdn-id>	
            <unmanaged>IDXGISwapChain</unmanaged>	
            <unmanaged-short>IDXGISwapChain</unmanaged-short>	
        </member>
        <member name="M:SharpDX.DXGI.SwapChain.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.DXGI.SwapChain"/> class.
            </summary>
            <param name="nativePtr">The native pointer.</param>	
        </member>
        <member name="M:SharpDX.DXGI.SwapChain.op_Explicit(System.IntPtr)~SharpDX.DXGI.SwapChain">
            <summary>
            Performs an explicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:SharpDX.DXGI.SwapChain"/>. (This method is a shortcut to <see cref="P:SharpDX.CppObject.NativePointer"/>) 
            </summary>
            <param name="nativePointer">The native pointer.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:SharpDX.DXGI.SwapChain.Present(System.Int32,SharpDX.DXGI.PresentFlags)">
            <summary>	
            <p>[Starting with Direct3D 11.1, we recommend not to use <strong>Present</strong> anymore to present a rendered image. Instead, use <strong>IDXGISwapChain1::Present1</strong>. For more info, see Remarks.]</p><p>Presents a rendered image to the user.</p>	
            </summary>	
            <param name="syncInterval">No documentation.</param>	
            <param name="flags">No documentation.</param>	
            <returns><p>Possible return values include: <see cref="F:SharpDX.Result.Ok"/>, <see cref="F:SharpDX.DXGI.ResultCode.DeviceReset"/> or <see cref="F:SharpDX.DXGI.ResultCode.DeviceRemoved"/> (see DXGI_ERROR), <see cref="F:SharpDX.DXGI.DXGIStatus.Occluded"/> (see <see cref="T:SharpDX.DXGI.DXGIStatus"/>), or D3DDDIERR_DEVICEREMOVED.  </p><p><strong>Note</strong>??The <strong>Present</strong> method can return either <see cref="F:SharpDX.DXGI.ResultCode.DeviceRemoved"/> or D3DDDIERR_DEVICEREMOVED if a video card has been physically removed from the computer, or a driver upgrade for the video card has occurred.</p></returns>	
            <remarks>	
            <p>Starting with Direct3D 11.1, we recommend to instead use <strong>IDXGISwapChain1::Present1</strong> because you can then use dirty rectangles and the scroll rectangle in the swap chain presentation and as such use less memory bandwidth and as a result less system power. For more info about using dirty rectangles and the scroll rectangle in swap chain presentation, see Using dirty rectangles and the scroll rectangle in swap chain presentation.</p><p>For the best performance when flipping swap-chain buffers in a full-screen application, see Full-Screen Application Performance Hints.</p><p>Because calling <strong>Present</strong> might cause the render thread to wait on the message-pump thread, be careful when calling this method in an application that uses multiple threads. For more details, see Multithreading Considerations.</p><table> <tr><td> <p>Differences between Direct3D 9 and Direct3D 10:</p> <p>Specifying <strong><see cref="F:SharpDX.DXGI.PresentFlags.Test"/></strong> in the <em>Flags</em> parameter is analogous to <strong><see cref="!:SharpDX.Direct3D9.Device.TestCooperativeLevel"/></strong> in Direct3D 9.</p> </td></tr> </table><p>?</p><p>For flip presentation model swap chains that you create with the <strong>DXGI_SWAP_EFFECT_FLIP_SEQUENTIAL</strong> value set, a successful presentation unbinds back buffer 0 from the graphics pipeline, except for when you pass the <strong><see cref="F:SharpDX.DXGI.PresentFlags.DoNotSequence"/></strong> flag in the <em>Flags</em> parameter.</p><p>For info about how data values change when you present content to the screen, see Converting data for the color space.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGISwapChain::Present']/*"/>	
            <msdn-id>bb174576</msdn-id>	
            <unmanaged>HRESULT IDXGISwapChain::Present([In] unsigned int SyncInterval,[In] DXGI_PRESENT_FLAGS Flags)</unmanaged>	
            <unmanaged-short>IDXGISwapChain::Present</unmanaged-short>	
        </member>
        <member name="M:SharpDX.DXGI.SwapChain.GetBuffer(System.Int32,System.Guid,System.IntPtr@)">
            <summary>	
            <p>Accesses one of the swap-chain's back buffers.</p>	
            </summary>	
            <param name="buffer"><dd>  <p>A zero-based buffer index. </p> <p>If the swap chain's swap effect is <strong><see cref="F:SharpDX.DXGI.SwapEffect.Discard"/></strong>, this method can only access the first buffer; for this situation, set the index to zero.</p> <p>If the swap chain's swap effect is either <strong><see cref="F:SharpDX.DXGI.SwapEffect.Sequential"/></strong> or <strong>DXGI_SWAP_EFFECT_FLIP_SEQUENTIAL</strong>, only the swap chain's zero-index buffer can be read from and written to. The swap chain's buffers with indexes greater than zero can only be read from; so if you call the <strong><see cref="M:SharpDX.DXGI.Resource.GetUsage(System.Int32@)"/></strong> method for such buffers, they have the <strong><see cref="F:SharpDX.DXGI.Usage.ReadOnly"/></strong> flag set.</p> </dd></param>	
            <param name="riid"><dd>  <p>The type of interface used to manipulate the buffer.</p> </dd></param>	
            <param name="surfaceOut"><dd>  <p>A reference to a back-buffer interface.</p> </dd></param>	
            <returns><p>Returns one of the following DXGI_ERROR.</p></returns>	
            <remarks>	
            <p><strong>Windows?Phone?8:</strong> This API is supported.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGISwapChain::GetBuffer']/*"/>	
            <msdn-id>bb174570</msdn-id>	
            <unmanaged>HRESULT IDXGISwapChain::GetBuffer([In] unsigned int Buffer,[In] const GUID&amp; riid,[Out] void** ppSurface)</unmanaged>	
            <unmanaged-short>IDXGISwapChain::GetBuffer</unmanaged-short>	
        </member>
        <member name="M:SharpDX.DXGI.SwapChain.SetFullscreenState(SharpDX.Bool,SharpDX.DXGI.Output)">
            <summary>	
            <p>Sets the display state to windowed or full screen.</p>	
            </summary>	
            <param name="fullscreen"><dd>  <p>A Boolean value that specifies whether to set the display state to windowed or full screen. <strong>TRUE</strong> for full screen, and <strong><see cref="F:SharpDX.Result.False"/></strong> for windowed.</p> </dd></param>	
            <param name="targetRef"><dd>  <p>If you pass <strong>TRUE</strong> to the <em>Fullscreen</em> parameter to set the display state to full screen, you can optionally set this parameter to a reference to an <strong><see cref="T:SharpDX.DXGI.Output"/></strong> interface for the output target that contains the swap chain. If you set this parameter to <strong><c>null</c></strong>, DXGI will choose the output based on the swap-chain's device and the output window's  placement. If you pass <strong><see cref="F:SharpDX.Result.False"/></strong> to <em>Fullscreen</em>, you must set this parameter to <strong><c>null</c></strong>.</p> </dd></param>	
            <returns><p>This methods returns: </p><ul> <li><see cref="F:SharpDX.Result.Ok"/> if the action succeeded and the swap chain was placed in the requested state.</li> <li><see cref="F:SharpDX.DXGI.ResultCode.NotCurrentlyAvailable"/> if the action failed. There are many reasons why a windowed-mode swap chain cannot switch to full-screen mode. For instance: <ul> <li>The application is running over Terminal Server.</li> <li>The output window is occluded.</li> <li>The output window does not have keyboard focus.</li> <li>Another application is already in full-screen mode.</li> </ul> <p>When this error is returned, an application can continue to run in windowed mode and try to switch to full-screen mode later.</p> </li> <li><see cref="F:SharpDX.DXGI.DXGIStatus.ModeChangeInProgress"/> is returned if a fullscreen/windowed mode transition is occurring when this API is called.</li> <li>Other error codes if you run out of memory or encounter another unexpected fault; these codes may be treated as hard, non-continuable errors.</li> </ul></returns>	
            <remarks>	
            <p>DXGI may change the display state of a swap chain in response to end user or system requests.</p><p>We recommend that you create a windowed swap chain and allow the end user to change the swap chain to full screen through <strong>SetFullscreenState</strong>; that is, do not set the <strong>Windowed</strong> member of <strong><see cref="T:SharpDX.DXGI.SwapChainDescription"/></strong> to <see cref="F:SharpDX.Result.False"/> to force the swap chain to be full screen. However, if you create the swap chain as full screen, also provide the end user with a list of supported display modes because a swap chain that is created with an unsupported display mode might cause the display to go black and prevent the end user from seeing anything. Also, we recommend that you have a time-out confirmation screen or other fallback mechanism when you allow the end user to change display modes.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGISwapChain::SetFullscreenState']/*"/>	
            <msdn-id>bb174579</msdn-id>	
            <unmanaged>HRESULT IDXGISwapChain::SetFullscreenState([In] BOOL Fullscreen,[In, Optional] IDXGIOutput* pTarget)</unmanaged>	
            <unmanaged-short>IDXGISwapChain::SetFullscreenState</unmanaged-short>	
        </member>
        <member name="M:SharpDX.DXGI.SwapChain.GetFullscreenState(SharpDX.Bool@,SharpDX.DXGI.Output@)">
            <summary>	
            <p>Get the state associated with full-screen mode.</p>	
            </summary>	
            <param name="fullscreenRef"><dd>  <p>A reference to a boolean whose value is either:</p> <ul> <li><strong>TRUE</strong> if the swap chain is in full-screen mode</li> <li><strong><see cref="F:SharpDX.Result.False"/></strong> if the swap chain is in windowed mode</li> </ul> </dd></param>	
            <param name="targetOut"><dd>  <p>A reference to the output target (see <strong><see cref="T:SharpDX.DXGI.Output"/></strong>) when the mode is full screen; otherwise <strong><c>null</c></strong>.</p> </dd></param>	
            <returns><p>Returns one of the following DXGI_ERROR.</p></returns>	
            <remarks>	
            <p>When the swap chain is in full-screen mode, a reference to the  target output will be returned and its reference count will be incremented.</p><p><strong>Windows?Phone?8:</strong> This API is supported.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGISwapChain::GetFullscreenState']/*"/>	
            <msdn-id>bb174574</msdn-id>	
            <unmanaged>HRESULT IDXGISwapChain::GetFullscreenState([Out] BOOL* pFullscreen,[Out] IDXGIOutput** ppTarget)</unmanaged>	
            <unmanaged-short>IDXGISwapChain::GetFullscreenState</unmanaged-short>	
        </member>
        <member name="M:SharpDX.DXGI.SwapChain.GetDescription(SharpDX.DXGI.SwapChainDescription@)">
            <summary>	
            <p>[Starting with Direct3D 11.1, we recommend not to use <strong>GetDesc</strong> anymore to get a description of the swap chain. Instead, use <strong>IDXGISwapChain1::GetDesc1</strong>.]</p><p>Get a description of the swap chain.</p>	
            </summary>	
            <param name="descRef">No documentation.</param>	
            <returns><p>Returns one of the following DXGI_ERROR.</p></returns>	
            <remarks>	
            <p><strong>Windows?Phone?8:</strong> This API is supported.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGISwapChain::GetDesc']/*"/>	
            <msdn-id>bb174572</msdn-id>	
            <unmanaged>HRESULT IDXGISwapChain::GetDesc([Out] DXGI_SWAP_CHAIN_DESC* pDesc)</unmanaged>	
            <unmanaged-short>IDXGISwapChain::GetDesc</unmanaged-short>	
        </member>
        <member name="M:SharpDX.DXGI.SwapChain.ResizeBuffers(System.Int32,System.Int32,System.Int32,SharpDX.DXGI.Format,SharpDX.DXGI.SwapChainFlags)">
            <summary>	
            <p>Changes the swap chain's back buffer size, format, and number of buffers. This should be called when the application window is resized.</p>	
            </summary>	
            <param name="bufferCount"><dd>  <p>The number of buffers in the swap chain (including all back and front buffers). This number can be different from the number of buffers with which you created the swap chain. This number can't be greater than <strong>DXGI_MAX_SWAP_CHAIN_BUFFERS</strong>. Set this number to zero to preserve the existing number of buffers in the swap chain. You can't specify less than two buffers for the flip presentation model.</p> </dd></param>	
            <param name="width"><dd>  <p>New width of the back buffer. If you specify zero, DXGI will use the width of the client area of the target window. You can't specify the width as zero if you called the <strong>IDXGIFactory2::CreateSwapChainForComposition</strong> method to create the swap chain for a composition surface.</p> </dd></param>	
            <param name="height"><dd>  <p>New height of the back buffer. If you specify zero, DXGI will use the height of the client area of the target window. You can't specify the height as zero if you called the <strong>IDXGIFactory2::CreateSwapChainForComposition</strong> method to create the swap chain for a composition surface.</p> </dd></param>	
            <param name="newFormat"><dd>  <p>A <strong><see cref="T:SharpDX.DXGI.Format"/></strong>-typed value for the new format of the back buffer. Set this value to <strong><see cref="F:SharpDX.DXGI.Format.Unknown"/></strong> to preserve the existing format of the back buffer. The flip presentation model supports a more restricted set of formats than the bit-block transfer (bitblt) model.</p> </dd></param>	
            <param name="swapChainFlags"><dd>  <p>A combination of <strong><see cref="T:SharpDX.DXGI.SwapChainFlags"/></strong>-typed values that are combined by using a bitwise OR operation. The resulting value specifies options for swap-chain behavior.</p> </dd></param>	
            <returns><p>Returns <see cref="F:SharpDX.Result.Ok"/> if successful; an error code otherwise. For a list of error codes, see DXGI_ERROR.</p></returns>	
            <remarks>	
            <p>You can't resize a swap chain unless you release all outstanding references to its back buffers. You must release all of its direct and indirect references on the back buffers in order for <strong>ResizeBuffers</strong> to succeed.</p><p>Direct references are held by the application after it calls <strong>AddRef</strong> on a resource.</p><p>Indirect references are held by views to a resource, binding a view of the resource to a device context,  a command list that used the resource, a command list that used a view to that resource, a command list that executed another command list that used the  resource, and so on.</p><p>Before you call <strong>ResizeBuffers</strong>, ensure that the application releases all references (by calling the appropriate number of <strong>Release</strong> invocations)  on the resources, any views to the resource, and any command lists that use either the resources or views, and ensure that neither the resource nor a view is  still bound to a device context.  You can use <strong><see cref="!:SharpDX.Direct3D11.DeviceContext.ClearState"/></strong> to ensure that all references are released. If a view is bound to a deferred context, you must discard the partially built command list as well (by calling <strong>ClearState</strong>, <strong><see cref="!:SharpDX.Direct3D11.DeviceContext.FinishCommandListInternal"/></strong>, then <strong>Release</strong> on the command list).   After you call <strong>ResizeBuffers</strong>, you can re-query interfaces via <strong><see cref="M:SharpDX.DXGI.SwapChain.GetBuffer(System.Int32,System.Guid,System.IntPtr@)"/></strong>.</p><p>For swap chains that you created with <strong><see cref="F:SharpDX.DXGI.SwapChainFlags.GdiCompatible"/></strong>, before you call <strong>ResizeBuffers</strong>, also call <strong><see cref="M:SharpDX.DXGI.Surface1.ReleaseDC_(System.Nullable{SharpDX.Rectangle})"/></strong> on the swap chain's back-buffer surface to ensure that you have no outstanding GDI device contexts (DCs) open.</p><p>We recommend that you call <strong>ResizeBuffers</strong> when a client window is resized (that is, when an application receives a WM_SIZE message).</p><p>The only difference between <strong>ResizeBuffers</strong> in Windows?8 and <strong>ResizeBuffers</strong> in Windows?7 is with flip presentation model swap chains that you create with the <strong>DXGI_SWAP_EFFECT_FLIP_SEQUENTIAL</strong> value set. In Windows?8, you must call <strong>ResizeBuffers</strong> to realize a transition between full-screen mode and windowed mode; otherwise, your next call to the <strong>Present</strong> method fails.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGISwapChain::ResizeBuffers']/*"/>	
            <msdn-id>bb174577</msdn-id>	
            <unmanaged>HRESULT IDXGISwapChain::ResizeBuffers([In] unsigned int BufferCount,[In] unsigned int Width,[In] unsigned int Height,[In] DXGI_FORMAT NewFormat,[In] DXGI_SWAP_CHAIN_FLAG SwapChainFlags)</unmanaged>	
            <unmanaged-short>IDXGISwapChain::ResizeBuffers</unmanaged-short>	
        </member>
        <member name="M:SharpDX.DXGI.SwapChain.ResizeTarget(SharpDX.DXGI.ModeDescription@)">
            <summary>	
            <p>Resizes the output target.</p>	
            </summary>	
            <param name="newTargetParametersRef"><dd>  <p>A reference to a <strong><see cref="T:SharpDX.DXGI.ModeDescription"/></strong> structure that describes the mode, which specifies the new width, height, format, and refresh rate of the target.  If the format is <strong><see cref="F:SharpDX.DXGI.Format.Unknown"/></strong>, <strong>ResizeTarget</strong> uses the existing format. We only recommend that you use <strong><see cref="F:SharpDX.DXGI.Format.Unknown"/></strong> when the swap chain is in full-screen  mode as this method is not thread safe.</p> </dd></param>	
            <returns><p>Returns a code that indicates success or failure. <strong><see cref="F:SharpDX.DXGI.DXGIStatus.ModeChangeInProgress"/></strong> is returned if a full-screen/windowed mode transition is occurring  when this API is called. See DXGI_ERROR for additional DXGI error codes.</p></returns>	
            <remarks>	
            <p><strong>ResizeTarget</strong> resizes the target window when the swap chain is in windowed mode, and changes the display mode on the target output when the swap  chain is in full-screen mode. Therefore, apps can call <strong>ResizeTarget</strong> to resize the target window (rather than a Microsoft Win32API such as <strong>SetWindowPos</strong>)  without knowledge of the swap chain display mode.</p><p>If a Windows Store app calls <strong>ResizeTarget</strong>, it fails with <see cref="F:SharpDX.DXGI.ResultCode.NotCurrentlyAvailable"/>.</p><p>You cannot call <strong>ResizeTarget</strong> on a windowless swap chain that you created with <strong>IDXGIFactory2::CreateSwapChainForComposition</strong>.</p><p>Apps must still call <strong><see cref="M:SharpDX.DXGI.SwapChain.ResizeBuffers(System.Int32,System.Int32,System.Int32,SharpDX.DXGI.Format,SharpDX.DXGI.SwapChainFlags)"/></strong> after they call <strong>ResizeTarget</strong> because only <strong>ResizeBuffers</strong> can change the back buffers. But, if those apps have implemented window resize processing to call <strong>ResizeBuffers</strong>, they don't need to explicitly call <strong>ResizeBuffers</strong> after they call <strong>ResizeTarget</strong> because the window resize processing will achieve what the app requires.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGISwapChain::ResizeTarget']/*"/>	
            <msdn-id>bb174578</msdn-id>	
            <unmanaged>HRESULT IDXGISwapChain::ResizeTarget([In] const DXGI_MODE_DESC* pNewTargetParameters)</unmanaged>	
            <unmanaged-short>IDXGISwapChain::ResizeTarget</unmanaged-short>	
        </member>
        <member name="M:SharpDX.DXGI.SwapChain.GetContainingOutput(SharpDX.DXGI.Output@)">
            <summary>	
            <p>Get the output (the display monitor) that contains the majority of the client area of the target window.</p>	
            </summary>	
            <param name="outputOut"><dd>  <p>A reference to the output interface (see <strong><see cref="T:SharpDX.DXGI.Output"/></strong>).</p> </dd></param>	
            <returns><p>Returns one of the following DXGI_ERROR.</p></returns>	
            <remarks>	
            <p>If the method succeeds, the output interface will be filled and its reference count incremented. When you are finished with it, be sure to release the interface to avoid a memory leak.</p><p>The output is also owned by the adapter on which the swap chain's device was created.</p><p>You cannot call <strong>GetContainingOutput</strong> on a windowless swap chain that you created with <strong>IDXGIFactory2::CreateSwapChainForComposition</strong>.</p><p><strong>Windows?Phone?8:</strong> This API is supported.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGISwapChain::GetContainingOutput']/*"/>	
            <msdn-id>bb174571</msdn-id>	
            <unmanaged>HRESULT IDXGISwapChain::GetContainingOutput([Out] IDXGIOutput** ppOutput)</unmanaged>	
            <unmanaged-short>IDXGISwapChain::GetContainingOutput</unmanaged-short>	
        </member>
        <member name="M:SharpDX.DXGI.SwapChain.GetFrameStatistics(SharpDX.DXGI.FrameStatistics@)">
            <summary>	
            <p>Gets performance statistics about the last render frame.</p>	
            </summary>	
            <param name="statsRef"><dd>  <p>A reference to a <strong><see cref="T:SharpDX.DXGI.FrameStatistics"/></strong> structure for the frame statistics.</p> </dd></param>	
            <returns><p>Returns one of the DXGI_ERROR values.</p></returns>	
            <remarks>	
            <p>You cannot use <strong>GetFrameStatistics</strong> for swap chains that both use the bit-block transfer (bitblt) presentation model and draw in windowed mode.</p><p>You can only use <strong>GetFrameStatistics</strong> for swap chains that either use the flip presentation model or draw in full-screen mode. You set the <strong>DXGI_SWAP_EFFECT_FLIP_SEQUENTIAL</strong> value in the <strong>SwapEffect</strong> member of the <strong>DXGI_SWAP_CHAIN_DESC1</strong> structure to specify that the swap chain uses the flip presentation model.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGISwapChain::GetFrameStatistics']/*"/>	
            <msdn-id>bb174573</msdn-id>	
            <unmanaged>HRESULT IDXGISwapChain::GetFrameStatistics([Out] DXGI_FRAME_STATISTICS* pStats)</unmanaged>	
            <unmanaged-short>IDXGISwapChain::GetFrameStatistics</unmanaged-short>	
        </member>
        <member name="M:SharpDX.DXGI.SwapChain.GetLastPresentCount(System.Int32@)">
            <summary>	
            <p>Gets the number of times  that <strong><see cref="M:SharpDX.DXGI.SwapChain.Present(System.Int32,SharpDX.DXGI.PresentFlags)"/></strong> or <strong>IDXGISwapChain1::Present1</strong> has been called.</p>	
            </summary>	
            <param name="lastPresentCountRef">No documentation.</param>	
            <returns><p>Returns one of the DXGI_ERROR values.</p></returns>	
            <remarks>	
            <p>For info about presentation statistics for a frame, see <strong><see cref="T:SharpDX.DXGI.FrameStatistics"/></strong>.</p><p><strong>Windows?Phone?8:</strong> This API is supported.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGISwapChain::GetLastPresentCount']/*"/>	
            <msdn-id>bb174575</msdn-id>	
            <unmanaged>HRESULT IDXGISwapChain::GetLastPresentCount([Out] unsigned int* pLastPresentCount)</unmanaged>	
            <unmanaged-short>IDXGISwapChain::GetLastPresentCount</unmanaged-short>	
        </member>
        <member name="M:SharpDX.DXGI.SwapChain.#ctor(SharpDX.DXGI.Factory,SharpDX.ComObject,SharpDX.DXGI.SwapChainDescription)">
            <summary>	
            Creates a swap chain.	
            </summary>	
            <remarks>	
            If you attempt to create a swap chain in full-screen mode, and full-screen mode is unavailable, the swap chain will be created in windowed mode and DXGI_STATUS_OCCLUDED will be returned. If the buffer width or the buffer height are zero, the sizes will be inferred from the output window size in the swap-chain description. Since the target output cannot be chosen explicitly when the swap-chain is created, you should not create a full-screen swap chain. This can reduce presentation performance if the swap chain size and the output window size do not match. Here are two ways to ensure the sizes match:  Create a windowed swap chain and then set it full-screen using <see cref="M:SharpDX.DXGI.SwapChain.SetFullscreenState(SharpDX.Bool,SharpDX.DXGI.Output)"/>. Save a reference to the swap-chain immediately after creation, and use it to get the output window size during a WM_SIZE event. Then resize the swap chain buffers (with <see cref="M:SharpDX.DXGI.SwapChain.ResizeBuffers(System.Int32,System.Int32,System.Int32,SharpDX.DXGI.Format,SharpDX.DXGI.SwapChainFlags)"/>) during the transition from windowed to full-screen.  If the swap chain is in full-screen mode, before you release it, you must use {{SetFullscreenState}} to switch it to windowed mode. For more information about releasing a swap chain, see the Destroying a Swap Chain section of {{DXGI Overview}}. 	
            </remarks>	
            <param name="factory">a reference to a <see cref="T:SharpDX.DXGI.Factory"/>.</param>
            <param name="device">A reference to the device that will write 2D images to the swap chain. </param>
            <param name="description">A reference to the swap-chain description (see <see cref="T:SharpDX.DXGI.SwapChainDescription"/>).</param>
            <unmanaged>HRESULT IDXGIFactory::CreateSwapChain([In] IUnknown* pDevice,[In] DXGI_SWAP_CHAIN_DESC* pDesc,[Out] IDXGISwapChain** ppSwapChain)</unmanaged>
            <msdn-id>bb174537</msdn-id>	
            <unmanaged>HRESULT IDXGIFactory::CreateSwapChain([In] IUnknown* pDevice,[In] DXGI_SWAP_CHAIN_DESC* pDesc,[Out, Fast] IDXGISwapChain** ppSwapChain)</unmanaged>	
            <unmanaged-short>IDXGIFactory::CreateSwapChain</unmanaged-short>	
        </member>
        <member name="M:SharpDX.DXGI.SwapChain.GetBackBuffer``1(System.Int32)">
            <summary>
            Access one of the swap-chain back buffers.
            </summary>
            <typeparam name="T">The interface of the surface to resolve from the back buffer</typeparam>
            <param name="index">A zero-based buffer index. If the swap effect is not DXGI_SWAP_EFFECT_SEQUENTIAL, this method only has access to the first buffer; for this case, set the index to zero.</param>
            <returns>
            Returns a reference to a back-buffer interface.
            </returns>
            <msdn-id>bb174570</msdn-id>	
            <unmanaged>HRESULT IDXGISwapChain::GetBuffer([In] unsigned int Buffer,[In] const GUID&amp; riid,[Out] void** ppSurface)</unmanaged>	
            <unmanaged-short>IDXGISwapChain::GetBuffer</unmanaged-short>	
        </member>
        <member name="P:SharpDX.DXGI.SwapChain.Description">
            <summary>	
            <p>[Starting with Direct3D 11.1, we recommend not to use <strong>GetDesc</strong> anymore to get a description of the swap chain. Instead, use <strong>IDXGISwapChain1::GetDesc1</strong>.]</p><p>Get a description of the swap chain.</p>	
            </summary>	
            <remarks>	
            <p><strong>Windows?Phone?8:</strong> This API is supported.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGISwapChain::GetDesc']/*"/>	
            <msdn-id>bb174572</msdn-id>	
            <unmanaged>GetDesc</unmanaged>	
            <unmanaged-short>GetDesc</unmanaged-short>	
            <unmanaged>HRESULT IDXGISwapChain::GetDesc([Out] DXGI_SWAP_CHAIN_DESC* pDesc)</unmanaged>
        </member>
        <member name="P:SharpDX.DXGI.SwapChain.ContainingOutput">
            <summary>	
            <p>Get the output (the display monitor) that contains the majority of the client area of the target window.</p>	
            </summary>	
            <remarks>	
            <p>If the method succeeds, the output interface will be filled and its reference count incremented. When you are finished with it, be sure to release the interface to avoid a memory leak.</p><p>The output is also owned by the adapter on which the swap chain's device was created.</p><p>You cannot call <strong>GetContainingOutput</strong> on a windowless swap chain that you created with <strong>IDXGIFactory2::CreateSwapChainForComposition</strong>.</p><p><strong>Windows?Phone?8:</strong> This API is supported.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGISwapChain::GetContainingOutput']/*"/>	
            <msdn-id>bb174571</msdn-id>	
            <unmanaged>GetContainingOutput</unmanaged>	
            <unmanaged-short>GetContainingOutput</unmanaged-short>	
            <unmanaged>HRESULT IDXGISwapChain::GetContainingOutput([Out] IDXGIOutput** ppOutput)</unmanaged>
        </member>
        <member name="P:SharpDX.DXGI.SwapChain.FrameStatistics">
            <summary>	
            <p>Gets performance statistics about the last render frame.</p>	
            </summary>	
            <remarks>	
            <p>You cannot use <strong>GetFrameStatistics</strong> for swap chains that both use the bit-block transfer (bitblt) presentation model and draw in windowed mode.</p><p>You can only use <strong>GetFrameStatistics</strong> for swap chains that either use the flip presentation model or draw in full-screen mode. You set the <strong>DXGI_SWAP_EFFECT_FLIP_SEQUENTIAL</strong> value in the <strong>SwapEffect</strong> member of the <strong>DXGI_SWAP_CHAIN_DESC1</strong> structure to specify that the swap chain uses the flip presentation model.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGISwapChain::GetFrameStatistics']/*"/>	
            <msdn-id>bb174573</msdn-id>	
            <unmanaged>GetFrameStatistics</unmanaged>	
            <unmanaged-short>GetFrameStatistics</unmanaged-short>	
            <unmanaged>HRESULT IDXGISwapChain::GetFrameStatistics([Out] DXGI_FRAME_STATISTICS* pStats)</unmanaged>
        </member>
        <member name="P:SharpDX.DXGI.SwapChain.LastPresentCount">
            <summary>	
            <p>Gets the number of times  that <strong><see cref="M:SharpDX.DXGI.SwapChain.Present(System.Int32,SharpDX.DXGI.PresentFlags)"/></strong> or <strong>IDXGISwapChain1::Present1</strong> has been called.</p>	
            </summary>	
            <remarks>	
            <p>For info about presentation statistics for a frame, see <strong><see cref="T:SharpDX.DXGI.FrameStatistics"/></strong>.</p><p><strong>Windows?Phone?8:</strong> This API is supported.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='IDXGISwapChain::GetLastPresentCount']/*"/>	
            <msdn-id>bb174575</msdn-id>	
            <unmanaged>GetLastPresentCount</unmanaged>	
            <unmanaged-short>GetLastPresentCount</unmanaged-short>	
            <unmanaged>HRESULT IDXGISwapChain::GetLastPresentCount([Out] unsigned int* pLastPresentCount)</unmanaged>
        </member>
        <member name="P:SharpDX.DXGI.SwapChain.IsFullScreen">
            <summary>
            Gets or sets a value indicating whether the swapchain is in fullscreen.
            </summary>
            <value>
            	<c>true</c> if this swapchain is in fullscreen; otherwise, <c>false</c>.
            </value>
            <msdn-id>bb174574</msdn-id>	
            <unmanaged>HRESULT IDXGISwapChain::GetFullscreenState([Out] BOOL* pFullscreen,[Out] IDXGIOutput** ppTarget)</unmanaged>	
            <unmanaged-short>IDXGISwapChain::GetFullscreenState</unmanaged-short>	
        </member>
        <member name="T:SharpDX.DXGI.AdapterDescription">
            <summary>	
            <p>Describes an adapter (or video card) by using DXGI 1.0.</p>	
            </summary>	
            <remarks>	
            <p>The <strong><see cref="T:SharpDX.DXGI.AdapterDescription"/></strong> structure provides a description of an adapter.  This structure is initialized by using the <strong><see cref="M:SharpDX.DXGI.Adapter.GetDescription(SharpDX.DXGI.AdapterDescription@)"/></strong> method.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_ADAPTER_DESC']/*"/>	
            <msdn-id>bb173058</msdn-id>	
            <unmanaged>DXGI_ADAPTER_DESC</unmanaged>	
            <unmanaged-short>DXGI_ADAPTER_DESC</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.AdapterDescription.Description">
            <summary>	
            <dd> <p>A string that contains the adapter description. On feature level 9 graphics hardware, <strong>GetDesc</strong> returns ?Software Adapter? for the description string.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_ADAPTER_DESC::Description']/*"/>	
            <msdn-id>bb173058</msdn-id>	
            <unmanaged>wchar_t Description[128]</unmanaged>	
            <unmanaged-short>wchar_t Description</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.AdapterDescription.VendorId">
            <summary>	
            <dd> <p>The PCI ID of the hardware vendor. On feature level 9 graphics hardware, <strong>GetDesc</strong> returns zeros for the PCI ID of the hardware vendor.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_ADAPTER_DESC::VendorId']/*"/>	
            <msdn-id>bb173058</msdn-id>	
            <unmanaged>unsigned int VendorId</unmanaged>	
            <unmanaged-short>unsigned int VendorId</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.AdapterDescription.DeviceId">
            <summary>	
            <dd> <p>The PCI ID of the hardware device. On feature level 9 graphics hardware, <strong>GetDesc</strong> returns zeros for the PCI ID of the hardware device.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_ADAPTER_DESC::DeviceId']/*"/>	
            <msdn-id>bb173058</msdn-id>	
            <unmanaged>unsigned int DeviceId</unmanaged>	
            <unmanaged-short>unsigned int DeviceId</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.AdapterDescription.SubsystemId">
            <summary>	
            <dd> <p>The PCI ID of the sub system. On feature level 9 graphics hardware, <strong>GetDesc</strong> returns zeros for the PCI ID of the sub system.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_ADAPTER_DESC::SubSysId']/*"/>	
            <msdn-id>bb173058</msdn-id>	
            <unmanaged>unsigned int SubSysId</unmanaged>	
            <unmanaged-short>unsigned int SubSysId</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.AdapterDescription.Revision">
            <summary>	
            <dd> <p>The PCI ID of the revision number of the adapter. On feature level 9 graphics hardware, <strong>GetDesc</strong> returns zeros for the PCI ID of the revision number of the adapter.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_ADAPTER_DESC::Revision']/*"/>	
            <msdn-id>bb173058</msdn-id>	
            <unmanaged>unsigned int Revision</unmanaged>	
            <unmanaged-short>unsigned int Revision</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.AdapterDescription.DedicatedVideoMemory">
            <summary>	
            <dd> <p>The number of bytes of dedicated video memory that are not shared with the CPU.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_ADAPTER_DESC::DedicatedVideoMemory']/*"/>	
            <msdn-id>bb173058</msdn-id>	
            <unmanaged>SIZE_T DedicatedVideoMemory</unmanaged>	
            <unmanaged-short>SIZE_T DedicatedVideoMemory</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.AdapterDescription.DedicatedSystemMemory">
            <summary>	
            <dd> <p>The number of bytes of dedicated system memory that are not shared with the CPU. This memory is allocated from available system memory at boot time.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_ADAPTER_DESC::DedicatedSystemMemory']/*"/>	
            <msdn-id>bb173058</msdn-id>	
            <unmanaged>SIZE_T DedicatedSystemMemory</unmanaged>	
            <unmanaged-short>SIZE_T DedicatedSystemMemory</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.AdapterDescription.SharedSystemMemory">
            <summary>	
            <dd> <p>The number of bytes of shared system memory. This is the maximum value of system memory that may be consumed by the adapter during operation. Any incidental memory consumed by the driver as it manages and uses video memory is additional.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_ADAPTER_DESC::SharedSystemMemory']/*"/>	
            <msdn-id>bb173058</msdn-id>	
            <unmanaged>SIZE_T SharedSystemMemory</unmanaged>	
            <unmanaged-short>SIZE_T SharedSystemMemory</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.AdapterDescription.Luid">
            <summary>	
            <dd> <p>A unique value that identifies the adapter. See <strong><see cref="T:System.Int64"/></strong> for a definition of the structure. <strong><see cref="T:System.Int64"/></strong> is defined in dxgi.h.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_ADAPTER_DESC::AdapterLuid']/*"/>	
            <msdn-id>bb173058</msdn-id>	
            <unmanaged>LUID AdapterLuid</unmanaged>	
            <unmanaged-short>LUID AdapterLuid</unmanaged-short>	
        </member>
        <member name="T:SharpDX.DXGI.AdapterDescription1">
            <summary>	
            <p>Describes an adapter (or video card) using DXGI 1.1.</p>	
            </summary>	
            <remarks>	
            <p>The <strong><see cref="T:SharpDX.DXGI.AdapterDescription1"/></strong> structure provides a DXGI 1.1 description of an adapter.  This structure is initialized by using the <strong><see cref="M:SharpDX.DXGI.Adapter1.GetDescription1(SharpDX.DXGI.AdapterDescription1@)"/></strong> method.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_ADAPTER_DESC1']/*"/>	
            <msdn-id>ff471326</msdn-id>	
            <unmanaged>DXGI_ADAPTER_DESC1</unmanaged>	
            <unmanaged-short>DXGI_ADAPTER_DESC1</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.AdapterDescription1.Description">
            <summary>	
            <dd> <p>A string that contains the adapter description. On feature level 9 graphics hardware, <strong>GetDesc1</strong> returns ?Software Adapter? for the description string.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_ADAPTER_DESC1::Description']/*"/>	
            <msdn-id>ff471326</msdn-id>	
            <unmanaged>wchar_t Description[128]</unmanaged>	
            <unmanaged-short>wchar_t Description</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.AdapterDescription1.VendorId">
            <summary>	
            <dd> <p>The PCI ID of the hardware vendor. On feature level 9 graphics hardware, <strong>GetDesc1</strong> returns zeros for the PCI ID of the hardware vendor.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_ADAPTER_DESC1::VendorId']/*"/>	
            <msdn-id>ff471326</msdn-id>	
            <unmanaged>unsigned int VendorId</unmanaged>	
            <unmanaged-short>unsigned int VendorId</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.AdapterDescription1.DeviceId">
            <summary>	
            <dd> <p>The PCI ID of the hardware device. On feature level 9 graphics hardware, <strong>GetDesc1</strong> returns zeros for the PCI ID of the hardware device.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_ADAPTER_DESC1::DeviceId']/*"/>	
            <msdn-id>ff471326</msdn-id>	
            <unmanaged>unsigned int DeviceId</unmanaged>	
            <unmanaged-short>unsigned int DeviceId</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.AdapterDescription1.SubsystemId">
            <summary>	
            <dd> <p>The PCI ID of the sub system. On feature level 9 graphics hardware, <strong>GetDesc1</strong> returns zeros for the PCI ID of the sub system.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_ADAPTER_DESC1::SubSysId']/*"/>	
            <msdn-id>ff471326</msdn-id>	
            <unmanaged>unsigned int SubSysId</unmanaged>	
            <unmanaged-short>unsigned int SubSysId</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.AdapterDescription1.Revision">
            <summary>	
            <dd> <p>The PCI ID of the revision number of the adapter. On feature level 9 graphics hardware, <strong>GetDesc1</strong> returns zeros for the PCI ID of the revision number of the adapter.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_ADAPTER_DESC1::Revision']/*"/>	
            <msdn-id>ff471326</msdn-id>	
            <unmanaged>unsigned int Revision</unmanaged>	
            <unmanaged-short>unsigned int Revision</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.AdapterDescription1.DedicatedVideoMemory">
            <summary>	
            <dd> <p>The number of bytes of dedicated video memory that are not shared with the CPU.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_ADAPTER_DESC1::DedicatedVideoMemory']/*"/>	
            <msdn-id>ff471326</msdn-id>	
            <unmanaged>SIZE_T DedicatedVideoMemory</unmanaged>	
            <unmanaged-short>SIZE_T DedicatedVideoMemory</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.AdapterDescription1.DedicatedSystemMemory">
            <summary>	
            <dd> <p>The number of bytes of dedicated system memory that are not shared with the CPU. This memory is allocated from available system memory at boot time.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_ADAPTER_DESC1::DedicatedSystemMemory']/*"/>	
            <msdn-id>ff471326</msdn-id>	
            <unmanaged>SIZE_T DedicatedSystemMemory</unmanaged>	
            <unmanaged-short>SIZE_T DedicatedSystemMemory</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.AdapterDescription1.SharedSystemMemory">
            <summary>	
            <dd> <p>The number of bytes of shared system memory. This is the maximum value of system memory that may be consumed by the adapter during operation. Any incidental memory consumed by the driver as it manages and uses video memory is additional.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_ADAPTER_DESC1::SharedSystemMemory']/*"/>	
            <msdn-id>ff471326</msdn-id>	
            <unmanaged>SIZE_T SharedSystemMemory</unmanaged>	
            <unmanaged-short>SIZE_T SharedSystemMemory</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.AdapterDescription1.Luid">
            <summary>	
            <dd> <p>A unique value that identifies the adapter. See <strong><see cref="T:System.Int64"/></strong> for a definition of the structure. <strong><see cref="T:System.Int64"/></strong> is defined in dxgi.h.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_ADAPTER_DESC1::AdapterLuid']/*"/>	
            <msdn-id>ff471326</msdn-id>	
            <unmanaged>LUID AdapterLuid</unmanaged>	
            <unmanaged-short>LUID AdapterLuid</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.AdapterDescription1.Flags">
            <summary>	
            <dd> <p>A value of the <strong><see cref="T:SharpDX.DXGI.AdapterFlags"/></strong> enumerated type that describes the adapter type.  The <strong><see cref="F:SharpDX.DXGI.AdapterFlags.Remote"/></strong> flag is reserved.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_ADAPTER_DESC1::Flags']/*"/>	
            <msdn-id>ff471326</msdn-id>	
            <unmanaged>DXGI_ADAPTER_FLAG Flags</unmanaged>	
            <unmanaged-short>DXGI_ADAPTER_FLAG Flags</unmanaged-short>	
        </member>
        <member name="T:SharpDX.DXGI.FrameStatistics">
            <summary>	
            <p>Describes timing and presentation statistics for a frame.</p>	
            </summary>	
            <remarks>	
            <p>You initialize the <strong><see cref="T:SharpDX.DXGI.FrameStatistics"/></strong> structure with the <strong><see cref="M:SharpDX.DXGI.Output.GetFrameStatistics(SharpDX.DXGI.FrameStatistics@)"/></strong> or <strong><see cref="M:SharpDX.DXGI.SwapChain.GetFrameStatistics(SharpDX.DXGI.FrameStatistics@)"/></strong> method.</p><p>You can only use <strong><see cref="M:SharpDX.DXGI.SwapChain.GetFrameStatistics(SharpDX.DXGI.FrameStatistics@)"/></strong> for swap chains that either use the flip presentation model or draw in full-screen mode. You set the <strong>DXGI_SWAP_EFFECT_FLIP_SEQUENTIAL</strong> value in the <strong>SwapEffect</strong> member of the <strong>DXGI_SWAP_CHAIN_DESC1</strong> structure to specify that the swap chain uses the flip presentation model.</p><p>The values in the <strong>PresentCount</strong> and <strong>PresentRefreshCount</strong> members indicate information about when a frame was presented on the display screen. You can use these values to determine whether a glitch occurred. The values in the <strong>SyncRefreshCount</strong> and <strong>SyncQPCTime</strong> members indicate timing information that you can use for audio and video synchronization or very precise animation. If the swap chain draws in full-screen mode, these values are based on when the computer booted. 	
            If the swap chain draws in windowed mode, these values are based on when the swap chain is created.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FRAME_STATISTICS']/*"/>	
            <msdn-id>bb173060</msdn-id>	
            <unmanaged>DXGI_FRAME_STATISTICS</unmanaged>	
            <unmanaged-short>DXGI_FRAME_STATISTICS</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.FrameStatistics.PresentCount">
            <summary>	
            <dd> <p>A value that represents the running total count of times that an image was presented to the monitor since the computer booted.</p> <p><strong>Note</strong>??The number of times that an image was presented to the monitor is not necessarily the same as the number of times  that you called <strong><see cref="M:SharpDX.DXGI.SwapChain.Present(System.Int32,SharpDX.DXGI.PresentFlags)"/></strong> or <strong>IDXGISwapChain1::Present1</strong>.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FRAME_STATISTICS::PresentCount']/*"/>	
            <msdn-id>bb173060</msdn-id>	
            <unmanaged>unsigned int PresentCount</unmanaged>	
            <unmanaged-short>unsigned int PresentCount</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.FrameStatistics.PresentRefreshCount">
            <summary>	
            <dd> <p>A value that represents  the running total count of v-blanks at which the last image was presented to the monitor and that have happened since the computer booted (for windowed mode, since the swap chain was created).</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FRAME_STATISTICS::PresentRefreshCount']/*"/>	
            <msdn-id>bb173060</msdn-id>	
            <unmanaged>unsigned int PresentRefreshCount</unmanaged>	
            <unmanaged-short>unsigned int PresentRefreshCount</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.FrameStatistics.SyncRefreshCount">
            <summary>	
            <dd> <p>A value that represents  the running total count of v-blanks when the scheduler last sampled the machine time by calling <strong>QueryPerformanceCounter</strong> and that have happened since the computer booted (for windowed mode, since the swap chain was created).</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FRAME_STATISTICS::SyncRefreshCount']/*"/>	
            <msdn-id>bb173060</msdn-id>	
            <unmanaged>unsigned int SyncRefreshCount</unmanaged>	
            <unmanaged-short>unsigned int SyncRefreshCount</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.FrameStatistics.SyncQPCTime">
            <summary>	
            <dd> <p>A value that represents the high-resolution performance counter timer.  This value is the same as the value returned by the <strong>QueryPerformanceCounter</strong> function.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FRAME_STATISTICS::SyncQPCTime']/*"/>	
            <msdn-id>bb173060</msdn-id>	
            <unmanaged>LARGE_INTEGER SyncQPCTime</unmanaged>	
            <unmanaged-short>LARGE_INTEGER SyncQPCTime</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.FrameStatistics.SyncGPUTime">
            <summary>	
            <dd> <p>Reserved. Always returns 0.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_FRAME_STATISTICS::SyncGPUTime']/*"/>	
            <msdn-id>bb173060</msdn-id>	
            <unmanaged>LARGE_INTEGER SyncGPUTime</unmanaged>	
            <unmanaged-short>LARGE_INTEGER SyncGPUTime</unmanaged-short>	
        </member>
        <member name="T:SharpDX.DXGI.GammaControl">
            <summary>	
            <p>Controls the settings of a gamma curve.</p>	
            </summary>	
            <remarks>	
            <p>The <strong><see cref="T:SharpDX.DXGI.GammaControl"/></strong> structure is used by the <strong><see cref="M:SharpDX.DXGI.Output.SetGammaControl(SharpDX.DXGI.GammaControl@)"/></strong> method.</p><p>For info about using gamma correction, see Using gamma correction. </p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_GAMMA_CONTROL']/*"/>	
            <msdn-id>bb173061</msdn-id>	
            <unmanaged>DXGI_GAMMA_CONTROL</unmanaged>	
            <unmanaged-short>DXGI_GAMMA_CONTROL</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.GammaControl.Scale">
            <summary>	
            <dd> <p>A <strong><see cref="T:SharpDX.Color4"/></strong> structure with scalar values that are applied to rgb values before being sent to the gamma look up table.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_GAMMA_CONTROL::Scale']/*"/>	
            <msdn-id>bb173061</msdn-id>	
            <unmanaged>DXGI_RGB Scale</unmanaged>	
            <unmanaged-short>DXGI_RGB Scale</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.GammaControl.Offset">
            <summary>	
            <dd> <p>A <strong><see cref="T:SharpDX.Color4"/></strong> structure with offset values that are applied to the rgb values before being sent to the gamma look up table.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_GAMMA_CONTROL::Offset']/*"/>	
            <msdn-id>bb173061</msdn-id>	
            <unmanaged>DXGI_RGB Offset</unmanaged>	
            <unmanaged-short>DXGI_RGB Offset</unmanaged-short>	
        </member>
        <member name="P:SharpDX.DXGI.GammaControl.GammaCurve">
            <summary>	
            <dd> <p>An array of <strong><see cref="T:SharpDX.Color4"/></strong> structures that control the points of a gamma curve.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_GAMMA_CONTROL::GammaCurve']/*"/>	
            <msdn-id>bb173061</msdn-id>	
            <unmanaged>DXGI_RGB GammaCurve[1025]</unmanaged>	
            <unmanaged-short>DXGI_RGB GammaCurve</unmanaged-short>	
        </member>
        <member name="T:SharpDX.DXGI.GammaControlCapabilities">
            <summary>	
            <p>Controls the gamma capabilities of an adapter.</p>	
            </summary>	
            <remarks>	
            <p>To get a list of the capabilities for controlling gamma correction, call <strong><see cref="M:SharpDX.DXGI.Output.GetGammaControlCapabilities(SharpDX.DXGI.GammaControlCapabilities@)"/></strong>.</p><p>For info about using gamma correction, see Using gamma correction. </p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_GAMMA_CONTROL_CAPABILITIES']/*"/>	
            <msdn-id>bb173062</msdn-id>	
            <unmanaged>DXGI_GAMMA_CONTROL_CAPABILITIES</unmanaged>	
            <unmanaged-short>DXGI_GAMMA_CONTROL_CAPABILITIES</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.GammaControlCapabilities.IsScaleAndOffsetSupported">
            <summary>	
            <dd> <p>True if scaling and offset operations are supported during gamma correction; otherwise, false.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_GAMMA_CONTROL_CAPABILITIES::ScaleAndOffsetSupported']/*"/>	
            <msdn-id>bb173062</msdn-id>	
            <unmanaged>BOOL ScaleAndOffsetSupported</unmanaged>	
            <unmanaged-short>BOOL ScaleAndOffsetSupported</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.GammaControlCapabilities.MaximumConvertedValue">
            <summary>	
            <dd> <p>A value describing the maximum range of the control-point positions.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_GAMMA_CONTROL_CAPABILITIES::MaxConvertedValue']/*"/>	
            <msdn-id>bb173062</msdn-id>	
            <unmanaged>float MaxConvertedValue</unmanaged>	
            <unmanaged-short>float MaxConvertedValue</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.GammaControlCapabilities.MinimumConvertedValue">
            <summary>	
            <dd> <p>A value describing the minimum range of the control-point positions.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_GAMMA_CONTROL_CAPABILITIES::MinConvertedValue']/*"/>	
            <msdn-id>bb173062</msdn-id>	
            <unmanaged>float MinConvertedValue</unmanaged>	
            <unmanaged-short>float MinConvertedValue</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.GammaControlCapabilities.ControlPointsCount">
            <summary>	
            <dd> <p>A value describing the number of control points in the array.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_GAMMA_CONTROL_CAPABILITIES::NumGammaControlPoints']/*"/>	
            <msdn-id>bb173062</msdn-id>	
            <unmanaged>unsigned int NumGammaControlPoints</unmanaged>	
            <unmanaged-short>unsigned int NumGammaControlPoints</unmanaged-short>	
        </member>
        <member name="P:SharpDX.DXGI.GammaControlCapabilities.ControlPoints">
            <summary>	
            <dd> <p>An array of values describing control points; the maximum length of control points is 1025.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_GAMMA_CONTROL_CAPABILITIES::ControlPointPositions']/*"/>	
            <msdn-id>bb173062</msdn-id>	
            <unmanaged>float ControlPointPositions[1025]</unmanaged>	
            <unmanaged-short>float ControlPointPositions</unmanaged-short>	
        </member>
        <member name="T:SharpDX.DXGI.MappedRectangle">
            <summary>	
            <p>Describes a mapped rectangle that is used to access a surface.</p>	
            </summary>	
            <remarks>	
            <p>The <strong><see cref="T:SharpDX.DXGI.MappedRectangle"/></strong> structure is initialized by the <strong><see cref="M:SharpDX.DXGI.Surface.Map(SharpDX.DXGI.MappedRectangle@,System.Int32)"/></strong> method.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_MAPPED_RECT']/*"/>	
            <msdn-id>bb173063</msdn-id>	
            <unmanaged>DXGI_MAPPED_RECT</unmanaged>	
            <unmanaged-short>DXGI_MAPPED_RECT</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.MappedRectangle.Pitch">
            <summary>	
            <dd> <p>A value that describes the width, in bytes, of the surface.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_MAPPED_RECT::Pitch']/*"/>	
            <msdn-id>bb173063</msdn-id>	
            <unmanaged>int Pitch</unmanaged>	
            <unmanaged-short>int Pitch</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.MappedRectangle.PBits">
            <summary>	
            <dd> <p>A reference to the image buffer of the surface.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_MAPPED_RECT::pBits']/*"/>	
            <msdn-id>bb173063</msdn-id>	
            <unmanaged>unsigned char* pBits</unmanaged>	
            <unmanaged-short>unsigned char pBits</unmanaged-short>	
        </member>
        <member name="T:SharpDX.DXGI.ModeDescription">
            <summary>	
            <p>Describes a display mode.</p>	
            </summary>	
            <remarks>	
            <p>The following format values are valid for display modes and when you create a bit-block transfer (bitblt) model swap chain. The valid values depend on the feature level that you are working with.</p><ul> <li> <p>Feature level &gt;= 9.1</p> <ul> <li> <strong><see cref="F:SharpDX.DXGI.Format.R8G8B8A8_UNorm"/></strong> </li> <li><strong><see cref="F:SharpDX.DXGI.Format.R8G8B8A8_UNorm_SRgb"/></strong></li> <li> <strong><see cref="F:SharpDX.DXGI.Format.B8G8R8A8_UNorm"/></strong> (except 10.x on Windows?Vista)</li> <li><strong><see cref="F:SharpDX.DXGI.Format.B8G8R8A8_UNorm_SRgb"/></strong> (except 10.x on Windows?Vista)</li> </ul> </li> <li> <p>Feature level &gt;= 10.0</p> <ul> <li> <strong><see cref="F:SharpDX.DXGI.Format.R16G16B16A16_Float"/></strong> </li> <li><strong><see cref="F:SharpDX.DXGI.Format.R10G10B10A2_UNorm"/></strong></li> </ul> </li> <li> <p>Feature level &gt;= 11.0</p> <ul> <li><strong><see cref="F:SharpDX.DXGI.Format.R10G10B10_Xr_Bias_A2_UNorm"/></strong></li> </ul> </li> </ul><p>You can pass one of these format values to <strong><see cref="!:SharpDX.Direct3D11.Device.CheckFormatSupport"/></strong> to determine if it is a valid format for displaying on screen. If <strong><see cref="!:SharpDX.Direct3D11.Device.CheckFormatSupport"/></strong> returns <strong><see cref="!:SharpDX.Direct3D11.FormatSupport.Display"/></strong> in the bit field to which the <em>pFormatSupport</em> parameter points, the format is valid for displaying on screen.</p><p>Starting with Windows?8 for a flip model swap chain (that is, a swap chain that has the <strong>DXGI_SWAP_EFFECT_FLIP_SEQUENTIAL</strong> value set in the <strong>SwapEffect</strong> member of <strong><see cref="T:SharpDX.DXGI.SwapChainDescription"/></strong>), you must set the <strong>Format</strong> member of <strong><see cref="T:SharpDX.DXGI.ModeDescription"/></strong> to <strong><see cref="F:SharpDX.DXGI.Format.R16G16B16A16_Float"/></strong>, <strong><see cref="F:SharpDX.DXGI.Format.B8G8R8A8_UNorm"/></strong>, or <strong><see cref="F:SharpDX.DXGI.Format.R8G8B8A8_UNorm"/></strong>.</p><p>Because of the relaxed render target creation rules that Direct3D 11 has for back buffers, applications can create a <strong><see cref="F:SharpDX.DXGI.Format.B8G8R8A8_UNorm_SRgb"/></strong> render target view from a <strong><see cref="F:SharpDX.DXGI.Format.B8G8R8A8_UNorm"/></strong> swap chain so they can use automatic color space conversion when they render the swap chain.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_MODE_DESC']/*"/>	
            <msdn-id>bb173064</msdn-id>	
            <unmanaged>DXGI_MODE_DESC</unmanaged>	
            <unmanaged-short>DXGI_MODE_DESC</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.ModeDescription.Width">
            <summary>	
            <dd> <p>A value that describes the resolution width. If you specify the width as zero when you call the  <strong><see cref="M:SharpDX.DXGI.Factory.CreateSwapChain(SharpDX.ComObject,SharpDX.DXGI.SwapChainDescription@,SharpDX.DXGI.SwapChain)"/></strong> method to create a swap chain, the runtime obtains the width from the output window and assigns this width value to the swap-chain description. You can subsequently call the <strong><see cref="M:SharpDX.DXGI.SwapChain.GetDescription(SharpDX.DXGI.SwapChainDescription@)"/></strong> method to retrieve the assigned width value.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_MODE_DESC::Width']/*"/>	
            <msdn-id>bb173064</msdn-id>	
            <unmanaged>unsigned int Width</unmanaged>	
            <unmanaged-short>unsigned int Width</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.ModeDescription.Height">
            <summary>	
            <dd> <p>A value describing the resolution height. If you specify the height as zero when you call the  <strong><see cref="M:SharpDX.DXGI.Factory.CreateSwapChain(SharpDX.ComObject,SharpDX.DXGI.SwapChainDescription@,SharpDX.DXGI.SwapChain)"/></strong> method to create a swap chain, the runtime obtains the height from the output window and assigns this height value to the swap-chain description. You can subsequently call the <strong><see cref="M:SharpDX.DXGI.SwapChain.GetDescription(SharpDX.DXGI.SwapChainDescription@)"/></strong> method to retrieve the assigned height value.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_MODE_DESC::Height']/*"/>	
            <msdn-id>bb173064</msdn-id>	
            <unmanaged>unsigned int Height</unmanaged>	
            <unmanaged-short>unsigned int Height</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.ModeDescription.RefreshRate">
            <summary>	
            <dd> <p>A <strong><see cref="T:SharpDX.DXGI.Rational"/></strong> structure describing the refresh rate in hertz</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_MODE_DESC::RefreshRate']/*"/>	
            <msdn-id>bb173064</msdn-id>	
            <unmanaged>DXGI_RATIONAL RefreshRate</unmanaged>	
            <unmanaged-short>DXGI_RATIONAL RefreshRate</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.ModeDescription.Format">
            <summary>	
            <dd> <p>A <strong><see cref="T:SharpDX.DXGI.Format"/></strong> structure describing the display format.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_MODE_DESC::Format']/*"/>	
            <msdn-id>bb173064</msdn-id>	
            <unmanaged>DXGI_FORMAT Format</unmanaged>	
            <unmanaged-short>DXGI_FORMAT Format</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.ModeDescription.ScanlineOrdering">
            <summary>	
            <dd> <p>A member of the <strong><see cref="T:SharpDX.DXGI.DisplayModeScanlineOrder"/></strong> enumerated type describing the scanline drawing mode.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_MODE_DESC::ScanlineOrdering']/*"/>	
            <msdn-id>bb173064</msdn-id>	
            <unmanaged>DXGI_MODE_SCANLINE_ORDER ScanlineOrdering</unmanaged>	
            <unmanaged-short>DXGI_MODE_SCANLINE_ORDER ScanlineOrdering</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.ModeDescription.Scaling">
            <summary>	
            <dd> <p>A member of the <strong><see cref="T:SharpDX.DXGI.DisplayModeScaling"/></strong> enumerated type describing the scaling mode.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_MODE_DESC::Scaling']/*"/>	
            <msdn-id>bb173064</msdn-id>	
            <unmanaged>DXGI_MODE_SCALING Scaling</unmanaged>	
            <unmanaged-short>DXGI_MODE_SCALING Scaling</unmanaged-short>	
        </member>
        <member name="M:SharpDX.DXGI.ModeDescription.#ctor(System.Int32,System.Int32,SharpDX.DXGI.Rational,SharpDX.DXGI.Format)">
            <summary>
              Initializes a new instance of the <see cref = "T:SharpDX.DXGI.ModeDescription" /> structure.
            </summary>
            <param name = "width">The width.</param>
            <param name = "height">The height.</param>
            <param name = "refreshRate">The refresh rate.</param>
            <param name = "format">The format.</param>
        </member>
        <member name="T:SharpDX.DXGI.OutputDescription">
            <summary>	
            <p>Describes an output or physical connection between the adapter (video card) and a device.</p>	
            </summary>	
            <remarks>	
            <p>The <strong><see cref="T:SharpDX.DXGI.OutputDescription"/></strong> structure is initialized by the <strong><see cref="M:SharpDX.DXGI.Output.GetDescription(SharpDX.DXGI.OutputDescription@)"/></strong> method.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_OUTPUT_DESC']/*"/>	
            <msdn-id>bb173068</msdn-id>	
            <unmanaged>DXGI_OUTPUT_DESC</unmanaged>	
            <unmanaged-short>DXGI_OUTPUT_DESC</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.OutputDescription.DeviceName">
            <summary>	
            <dd> <p>A string that contains the name of the output device.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_OUTPUT_DESC::DeviceName']/*"/>	
            <msdn-id>bb173068</msdn-id>	
            <unmanaged>wchar_t DeviceName[32]</unmanaged>	
            <unmanaged-short>wchar_t DeviceName</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.OutputDescription.DesktopBounds">
            <summary>	
            <dd> <p>A <strong><see cref="T:SharpDX.Rectangle"/></strong> structure containing the bounds of the output in desktop coordinates. Desktop coordinates depend on the dots per inch (DPI) of the desktop.	
            For info about writing DPI-aware Win32 apps, see High DPI.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_OUTPUT_DESC::DesktopCoordinates']/*"/>	
            <msdn-id>bb173068</msdn-id>	
            <unmanaged>RECT DesktopCoordinates</unmanaged>	
            <unmanaged-short>RECT DesktopCoordinates</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.OutputDescription.IsAttachedToDesktop">
            <summary>	
            <dd> <p>True if the output is attached to the desktop; otherwise, false.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_OUTPUT_DESC::AttachedToDesktop']/*"/>	
            <msdn-id>bb173068</msdn-id>	
            <unmanaged>BOOL AttachedToDesktop</unmanaged>	
            <unmanaged-short>BOOL AttachedToDesktop</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.OutputDescription.Rotation">
            <summary>	
            <dd> <p>A member of the <strong><see cref="T:SharpDX.DXGI.DisplayModeRotation"/></strong> enumerated type describing on how an image is rotated by the output.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_OUTPUT_DESC::Rotation']/*"/>	
            <msdn-id>bb173068</msdn-id>	
            <unmanaged>DXGI_MODE_ROTATION Rotation</unmanaged>	
            <unmanaged-short>DXGI_MODE_ROTATION Rotation</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.OutputDescription.MonitorHandle">
            <summary>	
            <dd> <p>An <strong><see cref="T:System.IntPtr"/></strong> handle that represents the display monitor. For more information, see <see cref="T:System.IntPtr"/> and the Device Context.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_OUTPUT_DESC::Monitor']/*"/>	
            <msdn-id>bb173068</msdn-id>	
            <unmanaged>HMONITOR Monitor</unmanaged>	
            <unmanaged-short>HMONITOR Monitor</unmanaged-short>	
        </member>
        <member name="T:SharpDX.DXGI.Rational">
            <summary>	
            <p>Represents a rational number.</p>	
            </summary>	
            <remarks>	
            <p>The <strong><see cref="T:SharpDX.DXGI.Rational"/></strong> structure operates under the following rules:</p><ul> <li>0/0 is legal and will be interpreted as 0/1.</li> <li>0/anything is interpreted as zero.</li> <li>If you are representing a whole number, the denominator should be 1.</li> </ul>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_RATIONAL']/*"/>	
            <msdn-id>bb173069</msdn-id>	
            <unmanaged>DXGI_RATIONAL</unmanaged>	
            <unmanaged-short>DXGI_RATIONAL</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.Rational.Numerator">
            <summary>	
            <dd> <p>An unsigned integer value representing the top of the rational number.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_RATIONAL::Numerator']/*"/>	
            <msdn-id>bb173069</msdn-id>	
            <unmanaged>unsigned int Numerator</unmanaged>	
            <unmanaged-short>unsigned int Numerator</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.Rational.Denominator">
            <summary>	
            <dd> <p>An unsigned integer value representing the bottom of the rational number.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_RATIONAL::Denominator']/*"/>	
            <msdn-id>bb173069</msdn-id>	
            <unmanaged>unsigned int Denominator</unmanaged>	
            <unmanaged-short>unsigned int Denominator</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.Rational.Empty">
            <summary>
            An empty rational that can be used for comparisons. 
            </summary>
        </member>
        <member name="M:SharpDX.DXGI.Rational.#ctor(System.Int32,System.Int32)">
            <summary>
              Initializes a new instance of the <see cref = "T:SharpDX.DXGI.Rational" /> structure.
            </summary>
            <param name = "numerator">The numerator of the rational pair.</param>
            <param name = "denominator">The denominator of the rational pair.</param>
        </member>
        <member name="T:SharpDX.DXGI.SampleDescription">
            <summary>	
            <p>Describes multi-sampling parameters for a resource.</p>	
            </summary>	
            <remarks>	
            <p>The default sampler mode, with no anti-aliasing, has a count of 1 and a quality level of 0.</p><p>If multi-sample antialiasing is being used, all bound render targets and depth buffers must have the same sample counts and quality levels.</p><table> <tr><td> <p>Differences between Direct3D 10.0 and Direct3D 10.1 and between Direct3D 10.0 and Direct3D 11:</p> <p>Direct3D 10.1 has defined two standard quality levels:   <strong><see cref="!:SharpDX.Direct3D10.StandardMultisampleQualityLevels.StandardMultisamplePattern"/></strong> and <strong><see cref="!:SharpDX.Direct3D10.StandardMultisampleQualityLevels.CenterMultisamplePattern"/></strong> in the <strong><see cref="!:SharpDX.Direct3D10.StandardMultisampleQualityLevels"/></strong> enumeration in D3D10_1.h.</p> <p>Direct3D 11 has defined two standard quality levels:   <strong><see cref="!:SharpDX.Direct3D11.StandardMultisampleQualityLevels.StandardMultisamplePattern"/></strong> and <strong><see cref="!:SharpDX.Direct3D11.StandardMultisampleQualityLevels.CenterMultisamplePattern"/></strong> in the <strong><see cref="!:SharpDX.Direct3D11.StandardMultisampleQualityLevels"/></strong> enumeration in D3D11.h.</p> </td></tr> </table><p>?</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_SAMPLE_DESC']/*"/>	
            <msdn-id>bb173072</msdn-id>	
            <unmanaged>DXGI_SAMPLE_DESC</unmanaged>	
            <unmanaged-short>DXGI_SAMPLE_DESC</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.SampleDescription.Count">
            <summary>	
            <dd> <p>The number of multisamples per pixel.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_SAMPLE_DESC::Count']/*"/>	
            <msdn-id>bb173072</msdn-id>	
            <unmanaged>unsigned int Count</unmanaged>	
            <unmanaged-short>unsigned int Count</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.SampleDescription.Quality">
            <summary>	
            <dd> <p>The image quality level. The higher the quality, the lower the performance. The valid range is between zero and one less than the level returned  by <strong><see cref="!:SharpDX.Direct3D10.Device.CheckMultisampleQualityLevels"/></strong> for Direct3D 10 or <strong><see cref="!:SharpDX.Direct3D11.Device.CheckMultisampleQualityLevels"/></strong> for Direct3D 11.</p> <p>For Direct3D 10.1 and Direct3D 11, you can use two special quality level values. For more information about these quality level values, see Remarks.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_SAMPLE_DESC::Quality']/*"/>	
            <msdn-id>bb173072</msdn-id>	
            <unmanaged>unsigned int Quality</unmanaged>	
            <unmanaged-short>unsigned int Quality</unmanaged-short>	
        </member>
        <member name="M:SharpDX.DXGI.SampleDescription.#ctor(System.Int32,System.Int32)">
            <summary>
              Initializes a new instance of the <see cref = "T:SharpDX.DXGI.SampleDescription" /> structure.
            </summary>
            <param name = "count">The sample count.</param>
            <param name = "quality">The sample quality.</param>
        </member>
        <member name="T:SharpDX.DXGI.SharedResource">
            <summary>	
            <p>Represents a handle to a shared resource.</p>	
            </summary>	
            <remarks>	
            <p>To create a shared surface, pass a shared-resource handle into the <strong><see cref="M:SharpDX.DXGI.Device.CreateSurface(SharpDX.DXGI.SurfaceDescription@,System.Int32,System.Int32,System.Nullable{SharpDX.DXGI.SharedResource},SharpDX.DXGI.Surface@)"/></strong> method.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_SHARED_RESOURCE']/*"/>	
            <msdn-id>bb173073</msdn-id>	
            <unmanaged>DXGI_SHARED_RESOURCE</unmanaged>	
            <unmanaged-short>DXGI_SHARED_RESOURCE</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.SharedResource.Handle">
            <summary>	
            <dd> <p>A handle to a shared resource.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_SHARED_RESOURCE::Handle']/*"/>	
            <msdn-id>bb173073</msdn-id>	
            <unmanaged>void* Handle</unmanaged>	
            <unmanaged-short>void Handle</unmanaged-short>	
        </member>
        <member name="T:SharpDX.DXGI.SurfaceDescription">
            <summary>	
            <p>Describes a surface.</p>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_SURFACE_DESC']/*"/>	
            <msdn-id>bb173074</msdn-id>	
            <unmanaged>DXGI_SURFACE_DESC</unmanaged>	
            <unmanaged-short>DXGI_SURFACE_DESC</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.SurfaceDescription.Width">
            <summary>	
            <dd> <p>A value describing the surface width.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_SURFACE_DESC::Width']/*"/>	
            <msdn-id>bb173074</msdn-id>	
            <unmanaged>unsigned int Width</unmanaged>	
            <unmanaged-short>unsigned int Width</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.SurfaceDescription.Height">
            <summary>	
            <dd> <p>A value describing the surface height.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_SURFACE_DESC::Height']/*"/>	
            <msdn-id>bb173074</msdn-id>	
            <unmanaged>unsigned int Height</unmanaged>	
            <unmanaged-short>unsigned int Height</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.SurfaceDescription.Format">
            <summary>	
            <dd> <p>A member of the <strong><see cref="T:SharpDX.DXGI.Format"/></strong> enumerated type that describes the surface format.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_SURFACE_DESC::Format']/*"/>	
            <msdn-id>bb173074</msdn-id>	
            <unmanaged>DXGI_FORMAT Format</unmanaged>	
            <unmanaged-short>DXGI_FORMAT Format</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.SurfaceDescription.SampleDescription">
            <summary>	
            <dd> <p>A member of the <strong><see cref="T:SharpDX.DXGI.SampleDescription"/></strong> structure that describes multi-sampling parameters for the surface.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_SURFACE_DESC::SampleDesc']/*"/>	
            <msdn-id>bb173074</msdn-id>	
            <unmanaged>DXGI_SAMPLE_DESC SampleDesc</unmanaged>	
            <unmanaged-short>DXGI_SAMPLE_DESC SampleDesc</unmanaged-short>	
        </member>
        <member name="T:SharpDX.DXGI.SwapChainDescription">
            <summary>	
            <p>Describes a swap chain.</p>	
            </summary>	
            <remarks>	
            <p>In full-screen mode, there is a dedicated front buffer; in windowed mode, the desktop is the front buffer.</p><p>If you create a swap chain with one buffer, specifying <strong><see cref="F:SharpDX.DXGI.SwapEffect.Sequential"/></strong> does not cause the contents of the single  buffer to be swapped with the front buffer.</p><p>For performance information about flipping swap-chain buffers in full-screen application,  see Full-Screen Application Performance Hints.</p>	
            </remarks>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_SWAP_CHAIN_DESC']/*"/>	
            <msdn-id>bb173075</msdn-id>	
            <unmanaged>DXGI_SWAP_CHAIN_DESC</unmanaged>	
            <unmanaged-short>DXGI_SWAP_CHAIN_DESC</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.SwapChainDescription.ModeDescription">
            <summary>	
            <dd> <p>A <strong><see cref="T:SharpDX.DXGI.ModeDescription"/></strong> structure that describes the backbuffer display mode.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_SWAP_CHAIN_DESC::BufferDesc']/*"/>	
            <msdn-id>bb173075</msdn-id>	
            <unmanaged>DXGI_MODE_DESC BufferDesc</unmanaged>	
            <unmanaged-short>DXGI_MODE_DESC BufferDesc</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.SwapChainDescription.SampleDescription">
            <summary>	
            <dd> <p>A <strong><see cref="T:SharpDX.DXGI.SampleDescription"/></strong> structure that describes multi-sampling parameters.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_SWAP_CHAIN_DESC::SampleDesc']/*"/>	
            <msdn-id>bb173075</msdn-id>	
            <unmanaged>DXGI_SAMPLE_DESC SampleDesc</unmanaged>	
            <unmanaged-short>DXGI_SAMPLE_DESC SampleDesc</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.SwapChainDescription.Usage">
            <summary>	
            <dd> <p>A member of the <strong>DXGI_USAGE</strong> enumerated type that describes the surface usage and CPU access options for the back buffer. The back buffer can  be used for shader input or render-target output.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_SWAP_CHAIN_DESC::BufferUsage']/*"/>	
            <msdn-id>bb173075</msdn-id>	
            <unmanaged>DXGI_USAGE_ENUM BufferUsage</unmanaged>	
            <unmanaged-short>DXGI_USAGE_ENUM BufferUsage</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.SwapChainDescription.BufferCount">
            <summary>	
            <dd> <p>A value that describes the number of buffers in the swap chain. When you call  <strong><see cref="M:SharpDX.DXGI.Factory.CreateSwapChain(SharpDX.ComObject,SharpDX.DXGI.SwapChainDescription@,SharpDX.DXGI.SwapChain)"/></strong> to create a full-screen swap chain, you typically include the front buffer in this value. For more information about swap-chain buffers, see Remarks.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_SWAP_CHAIN_DESC::BufferCount']/*"/>	
            <msdn-id>bb173075</msdn-id>	
            <unmanaged>unsigned int BufferCount</unmanaged>	
            <unmanaged-short>unsigned int BufferCount</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.SwapChainDescription.OutputHandle">
            <summary>	
            <dd> <p>An <strong><see cref="T:System.IntPtr"/></strong> handle to the output window. This member must not be <strong><c>null</c></strong>.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_SWAP_CHAIN_DESC::OutputWindow']/*"/>	
            <msdn-id>bb173075</msdn-id>	
            <unmanaged>HWND OutputWindow</unmanaged>	
            <unmanaged-short>HWND OutputWindow</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.SwapChainDescription.IsWindowed">
            <summary>	
            <dd> <p>A Boolean value that specifies whether the output is in windowed mode. <strong>TRUE</strong> if the output is in windowed mode; otherwise, <strong><see cref="F:SharpDX.Result.False"/></strong>. </p> <p>We recommend that you create a windowed swap chain and allow the end user to change the swap chain to full screen through <strong><see cref="M:SharpDX.DXGI.SwapChain.SetFullscreenState(SharpDX.Bool,SharpDX.DXGI.Output)"/></strong>; that is, do not set this member to <see cref="F:SharpDX.Result.False"/> to force the swap chain to be full screen. However, if you create the swap chain as full screen, also provide the end user with a list of supported display modes through the <strong>BufferDesc</strong> member because a swap chain that is created with an unsupported display mode might cause the display to go black and prevent the end user from seeing anything. </p> <p>For more information about choosing windowed verses full screen, see <strong><see cref="M:SharpDX.DXGI.Factory.CreateSwapChain(SharpDX.ComObject,SharpDX.DXGI.SwapChainDescription@,SharpDX.DXGI.SwapChain)"/></strong>.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_SWAP_CHAIN_DESC::Windowed']/*"/>	
            <msdn-id>bb173075</msdn-id>	
            <unmanaged>BOOL Windowed</unmanaged>	
            <unmanaged-short>BOOL Windowed</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.SwapChainDescription.SwapEffect">
            <summary>	
            <dd> <p>A member of the <strong><see cref="T:SharpDX.DXGI.SwapEffect"/></strong> enumerated type that describes options for handling the contents of the presentation buffer after  presenting a surface.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_SWAP_CHAIN_DESC::SwapEffect']/*"/>	
            <msdn-id>bb173075</msdn-id>	
            <unmanaged>DXGI_SWAP_EFFECT SwapEffect</unmanaged>	
            <unmanaged-short>DXGI_SWAP_EFFECT SwapEffect</unmanaged-short>	
        </member>
        <member name="F:SharpDX.DXGI.SwapChainDescription.Flags">
            <summary>	
            <dd> <p>A member of the <strong><see cref="T:SharpDX.DXGI.SwapChainFlags"/></strong> enumerated type that describes options for swap-chain behavior.</p> </dd>	
            </summary>	
            <!-- No matching elements were found for the following include tag --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='DXGI_SWAP_CHAIN_DESC::Flags']/*"/>	
            <msdn-id>bb173075</msdn-id>	
            <unmanaged>DXGI_SWAP_CHAIN_FLAG Flags</unmanaged>	
            <unmanaged-short>DXGI_SWAP_CHAIN_FLAG Flags</unmanaged-short>	
        </member>
        <member name="T:SharpDX.DXGI.ModuleInit">
            <summary>
            Internal class used to initialize this assembly.
            </summary>
        </member>
        <member name="M:SharpDX.DXGI.ModuleInit.Setup">
            <summary>
            Initializes this assembly.
            </summary>
            <remarks>
            This method is called when the assembly is loaded.
            </remarks>
        </member>
    </members>
</doc>
