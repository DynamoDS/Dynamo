<?xml version="1.0"?>
<doc>
  <assembly>
    <name>BuiltIn</name>
  </assembly>
  <members>
    <member name="List.Rank">
      <summary>Returns the deepest depth of the list</summary>
      <param name="list">List from which to query rank</param>
      <returns name="int">Deepest depth of the list</returns>
      <search>rank,depth,nesting,ranks</search>
    </member>
    <member name="List.RemoveIfNot">
      <summary>
        Removes the members of the list which are not members of the specified type.
      </summary>
      <param name="list">List to remove items from</param>
      <param name="type">Type of element</param>
      <returns name="list">List with everything removed except a specified type</returns>
      <search>remove,not,ofType,filtertype</search>
    </member>
    <member name="List.Equals">
      <summary>Determines whether two object instances are equal.</summary>
      <param name="object">First object</param>
      <param name="otherObject">Other object</param>
      <returns name="bool">Returns true if object instances are equal, false if they are different</returns>
      <search>equals</search>
    </member>
    <member name="List.SortByFunction">
      <summary>Use a function to determine how list items should be sorted.</summary>
      <param name="list">list of values</param>
      <param name="sortFunction">function used to sort list</param>
      <returns name="sortedList">type: var[]..[]</returns>
      <search>sort,order</search>
    </member>
    <member name="ToString">
      <param name="object">some object</param>
      <search>string</search>
    </member>
    <member name="__ToStringFromObject">
      <param name="object">some object</param>
      <search>string,from,object</search>
    </member>
    <member name="__ToStringFromArray">
      <param name="list">some list</param>
      <search>string,from,array</search>
    </member>
    <member name="__Apply">
      <param name="functionObject"></param>
      <param name="param"></param>
      <search>apply</search>
    </member>
    <member name="__ApplyList">
      <param name="functionObject"></param>
      <param name="param"></param>
      <search>apply,list</search>
    </member>
    <member name="__GetOutput">
      <param name="outputs"></param>
      <param name="key"></param>
      <search>output</search>
    </member>
    <member name="__Compose">
      <param name="funcs"></param>
      <search>compose,functionchain</search>
    </member>
    <member name="__ComposeBuffered">
      <param name="funcs"></param>
      <param name="amt"></param>
      <param name="arg"></param>
      <search>compose,buffered</search>
    </member>
    <member name="List.MinimumItemByKey">
      <summary>Returns the items from the list that generate the minimum values for the function supplied as the key projector</summary>
      <param name="list">list of values</param>
      <param name="keyFunction">function applied to the list items</param>
      <returns name="minimumItem">Minimum item in list using keyFunction (type: var[]..[])</returns>
      <search>min,item,key</search>
    </member>
    <member name="List.MaximumItemByKey">
      <summary>Returns the items from the list that generate the maximum values for the function supplied as the key projector</summary>
      <param name="list">list of values</param>
      <param name="keyFunction">function applied to the list items</param>
      <returns name="maximumItem">Maximum item in list using keyFunction (type: var[]..[])</returns>
      <search>max,item,key</search>
    </member>
    <member name="__Replace">
      <param name="list">list of values</param>
      <param name="with"></param>
      <param name="predicate"></param>
      <search>replace</search>
    </member>
    <member name="__Filter">
      <param name="list">list of values</param>
      <param name="predicate"></param>
      <search>filter</search>
    </member>
    <member name="__Combine">
      <param name="func">function</param>
      <param name="lists"></param>
      <search>combine</search>
    </member>
    <member name="__Map">
      <param name="func">function</param>
      <param name="arg"></param>
      <search>map</search>
    </member>
    <member name="__LaceShortest">
      <param name="func">function</param>
      <param name="lists"></param>
      <search>lace,shortest</search>
    </member>
    <member name="__LaceLongest">
      <param name="func">function</param>
      <param name="lists"></param>
      <search>lace,longest</search>
    </member>
    <member name="__ApplyNested">
      <param name="fs">function</param>
      <param name="xs"></param>
      <param name="amt"></param>
      <search>apply,nested</search>
    </member>
    <member name="__CartesianProduct">
      <param name="func">function</param>
      <param name="lists"></param>
      <search>cartesian,product</search>
    </member>
    <member name="__Scan">
      <param name="accumulator"></param>
      <param name="seed"></param>
      <param name="lists"></param>
      <search>scan</search>
    </member>
    <member name="__Reduce">
      <param name="accumulator"></param>
      <param name="seed"></param>
      <param name="lists"></param>
      <search>reduce</search>
    </member>
    <member name="List.GroupByFunction">
      <summary>Use a function to determine how list items should be grouped.</summary>
      <param name="list">list of values</param>
      <param name="groupFunction">Function to group list</param>
      <returns name="groupedList">List of arbitrary rank/levels (type: var[]..[])</returns>
      <search>group,function</search>
    </member>
    <member name="List.TrueForAll">
      <summary>Returns true if all items in the list evaluate to true with the given query function</summary>
      <param name="list">List from which to evaluate items by query function</param>
      <param name="queryFunction">Function to evaluate list</param>
      <returns name="bool">Returns true if all items in the list evaluate to true with the given query function</returns>
      <search>true,all</search>
    </member>
    <member name="List.TrueForAny">
      <summary>Returns true if one or more items in the list evaluate to true with the given query function</summary>
      <param name="list">List from which to evaluate items by query function</param>
      <param name="queryFunction">Function to evaluate list</param>
      <returns name="bool">Returns true if any of the items in the list evaluate to true with the query function</returns>
      <search>true,any</search>
    </member>
    <member name="__ForEach">
      <param name="functionObject"></param>
      <param name="lists"></param>
      <search>foreach</search>
    </member>
    <member name="LoopWhile">
      <summary>Constructs a while loop node given an initial value, a condition and a loop body.</summary>
      <param name="initialValue">initial value for loop</param>
      <param name="continueWhile">while loop condition</param>
      <param name="loopBody">while loop body</param>
      <returns name="result"> Result from loop (type: var[]..[])</returns>
      <search>loop,while,repeat</search>
    </member>
  </members>
</doc>