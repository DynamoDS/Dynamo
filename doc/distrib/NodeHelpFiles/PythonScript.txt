import clr
clr.AddReference('ProtoGeometry')
from Autodesk.DesignScript.Geometry import *
from System.Reflection import *
import System
from System import Array
from System.Collections.Generic import *

#The inputs to this node will be stored as a list in the IN variables.
solid = IN[0]
seed = IN[1]
xCount = IN[2]
yCount = IN[3]

solids = []
crvs = []

edges = solid.Edges
for edge in edges:
    crvs.append(edge.CurveGeometry)

bbox = BoundingBox.ByGeometry(crvs)
yDist = bbox.MaxPoint.Y-bbox.MinPoint.Y
xDist = bbox.MaxPoint.X-bbox.MinPoint.X

xRange = list(range(xCount))
yRange = list(range(yCount))

fromCoord = solid.ContextCoordinateSystem

#Loop through X and Y
for i in xRange:
    for j in yRange:
        #Rotate and translate the coordinate system
        toCoord = fromCoord.Rotate(solid.ContextCoordinateSystem.Origin,Vector.ByCoordinates(0,0,1),(90*(i+j%seed)))
        #Creating an Array type in .NET
        arrayObj = Array[System.Object]
        #Instantiating an object of that type with Length 1 
        array1 = arrayObj.CreateInstance(System.Object, 1)
        #Creating our Vector to put into the array
        vec = Vector.ByCoordinates((xDist*i),(yDist*j),0)
        #Adding our vector to the array at index zero
        array1[0] = vec
        #Letting .NET figure out what function to call instead of PythonNET - Note: Problems exist today in PythonNET 2
        toCoord = toCoord.GetType().InvokeMember("Translate", BindingFlags.InvokeMethod, None, toCoord, array1)
        #Transform the solid from the source coordinate system to the target coordinate system and append to the list
        solids.append(solid.Transform(fromCoord,toCoord))


#Assign your output to the OUT variable.
OUT = solids