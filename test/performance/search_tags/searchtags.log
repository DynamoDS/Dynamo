core.input.code block
dynamo.nodes.codeblocknodemodel
code block
codeblock

allows for designscript code to be authored directly
core.input.input
dynamo.nodes.symbol
input
variable
argument
parameter
a function parameter, use with custom nodes.

you can specify the type and default value for parameter. e.g.,

input : var[]..[]
value : bool = false
core.input.output
dynamo.nodes.output
output
a function output, use with custom nodes
core.units.convert between units
dscorenodesui.dynamoconvert
convert between units
convert
units
length
area
volume
convertbetweenunits
convert between units of measure.
core.color.color range
dscorenodesui.colorrange
color range
colorrange
get a color given a color range.
core.list.list create
dscorenodesui.createlist
list.create
list create
entwine
listcreate,newlist
makelist
list
makes a new list out of the given inputs
core.scripting.formula
dscorenodesui.formula
formula
evaluates mathematical formulas. uses ncalc: http://ncalc.codeplex.com/
core.list.range
dscorenodesui.range
range
numberrange
numbersequence
creates a sequence of numbers or letters in the specified range.
core.list.sequence
dscorenodesui.sequence
sequence
creates a sequence of numbers.
core.view.watch
dynamo.nodes.watch
dscorenodesui.watch
watch
print
disply
panel
inspect
debug
visualize the output of node.
core.view.watch image
dynamo.nodes.watchimagecore
dscorenodesui.watchimagecore
watch image
image
inspect image
pixels
display
watchimage
previews an image
core.string.string from object
dscorenodesui.stringnodes.fromobject
dscorenodesui.fromobject
string from object
string.fromobject
tostring
2string
number2string
numbertostring
convert an object to a string representation.
core.string.string from array
dscorenodesui.stringnodes.fromarray
dscorenodesui.fromarray
string from array
string.fromarray
list2string
listtostring
array2string
arraytostring
convert an array to a string representation.
core.web.web request
dscorenodesui.webrequest
web request
make a web request given a url.
core.math.and
dscore.logic.and
dscorenodesui.logic.and
and
boolean and: returns true only if both of the inputs are true. if either is false, returns false.
core.math.or
dscore.logic.or
dscorenodesui.logic.or
or
boolean or: returns true if either of the inputs are true. if neither are true, returns false.
core.logic.if
dscorenodesui.logic.if
if
conditional statement
core.logic.scopeif
dscorenodesui.logic.scopedif
scopeif
scoped if statement
core.evaluate.function apply
dscorenodesui.higherorder.applyfunction
function.apply
function apply
applies a function to arguments.
core.evaluate.function compose
dscorenodesui.higherorder.composefunctions
function.compose
function compose
compose multiple functions.
core.list.list.map
dscore.map
dscorenodesui.higherorder.map
list.map
function
applied
over list
do to each
applies a function over all elements of a list, generating a new list from the results.
core.list.list.combine
dscore.combine
dscorenodesui.higherorder.combine
list.combine
map multiple
apply over lists
multiple inputs
applies a combinator to each element in two sequences
core.list.list.laceshortest
dscore.laceshortest
dscorenodesui.higherorder.laceshortest
list.laceshortest
mix
trim end
applies a combinator to each pair resulting from a shortest lacing of the input lists. all lists are truncated to the length of the shortest input.
core.list.list.lacelongest
dscore.lacelongest
dscorenodesui.higherorder.lacelongest
list.lacelongest
repeat last
applies a combinator to each pair resulting from a longest lacing of the input lists. all lists have their last element repeated to match the length of the longest input.
core.list.list.cartesianproduct
dscore.cartesianproduct
dscorenodesui.higherorder.cartesianproduct
list.cartesianproduct
cross product
crossreference
cross ref
applies a combinator to each pair in the cartesian product of two sequences
core.list.list.reduce
dscore.reduce
dscorenodesui.higherorder.reduce
list.reduce
accumulate
aggregate
fold
reduces a list into a new value by combining each element with an accumulated result.
core.list.list.scan
dscore.scanlist
dscorenodesui.higherorder.scanlist
list.scan
intermediate
maps
folds
reduces a list into a new value by combining each element with an accumulated result, produces a list of successive reduced values.
core.list.list.filter
dscore.filter
dscorenodesui.higherorder.filter
list.filter
screen
dispatch
filters a sequence by a given condition such that for an arbitrary element "x," condition(x) = true or false.
core.list.replacebycondition
dscore.replace
dscorenodesui.higherorder.replace
replacebycondition
predicate
override
replace if,
replaces an object with a given substitute if the original object satisfies a given condition.
core.color.color palette
color palette
coloruisearchtags
select a color from the palette
core.input.date time
dscorenodesui.datetime
dscorenodesui.input.datetime
date time
create a datetime object from a formatted date and time string. date and time must be of the format "april 12, 1977 12:00 pm"
core.input.string
dynamo.nodes.stringinput
dynamo.nodes.dynstringinput
dscorenodesui.input.stringinput
string
creates a string.
core.input.number
dynamo.nodes.doubleinput
dynamo.nodes.dyndoubleinput
dscorenodesui.input.doubleinput
number
creates a number.
core.input.number slider
dscorenodesui.input.doubleslider
number slider
double
float
integer
slider
numberslider
a slider that produces numeric values.
core.input.file path
dscore.file.filename
dscorenodesui.input.filename
file path
filepath
allows you to select a file on the system to get its filename
core.input.directory path
dscore.file.directory
dscorenodesui.input.directory
directory path
directorypath
allows you to select a directory on the system to get its path
core.file.file from path
dscore.file.fileobject
dscorenodesui.input.fileobject
file from path
creates a file object from a path.
core.file.directory from path
dscore.file.directoryobject
dscorenodesui.input.directoryobject
directory.frompath
directory from path
creates a directory object from a path
core.input.boolean
dscorenodesui.boolselector
dscorenodesui.input.boolselector
dynamo.nodes.boolselector
boolean
true
truth
false
selection between a true and false.
core.input.integer slider
dscorenodesui.input.integerslider
integer slider
integerslider
a slider that produces integer values.
geometry.geometry.exporttosat
exporttosat
export
sat
exports the specified geometry to the given sat  file path.
core.scripting.python script
python script
runs an embedded ironpython script.
core.scripting.python script from string
python script from string
runs a ironpython script from a string.
core.units.number from feet and inches
number from feet and inches
imperial
metric
project
enter a length.
core.units.unit types
unit types
unittypes
select a unit of measurement.
core.view.watch 3d
dynamo.nodes.dyn3dpreview
dynamo.nodes.3dpreview
dynamo.nodes.watch3d
dynamowatch3d.watch3d
watch 3d
shows a dynamic preview of geometry.
revit.selection.select model element
select model element
select a model element from the document.
revit.selection.select face
select face
select a face.
revit.selection.select edge
select edge
select an edge.
revit.selection.select point on face
select point on face
select a point on a face.
revit.selection.select uv on face
select uv on face
select a uv on a face.
revit.selection.select divided surface families
select divided surface families
select a divided surface and get its family instances.
revit.selection.select model elements
select model elements
select multiple elements from the revit document.
revit.selection.select faces
select faces
select multiple faces from the revit document.
revit.selection.select edges
select edges
select multiple edges.
revit.selection.all elements of family type
all elements of family type
get all elements of the specified family type from the model.
revit.selection.all elements of type
all elements of type
all elements in the active document of a given type.
revit.selection.all elements of category
all elements of category
get all elements of the specified category from the model.
revit.selection.all elements of category in view
all elements of category in view
get all elements of the specified category in the specified view from the model.
revit.selection.all elements at level
all elements at level
get all the elements at the specified level from the model.
revit.view.all elements in active view
all elements in active view
get all the elements which are visible in the active view.
revit.elements.phase.select phase
select phase
select an existing revit phase from the active document.
revit.elements.revision.select revision
select revision
select an existing revit revision from the active document.
revit.elements.filledregiontype.select filled region type
select filled region type
select an existing filled region type from the active document.
revit.filter.ruletype.select rule type
select rule type
filter types for revit filters
revit.elements.revision.select revision numbering
select revision numbering
select an way to number the revisions.
revit.elements.revision.select revision number type
select revision number type
select a revision number type.
revit.elements.parameter.select parameter type
select parameter type
select a parameter type.
revit.elements.parameter.select builtin parameter group
select builtin parameter group
select a built-in parameter group.
revit.elements.revision.select revision visibility
select revision visibility
select the revision visilibity type.
revit.elements.directshape.select direct shape room bounding option
select direct shape room bounding option
select a direct shape room bounding option.
revit.filter.overridegraphicsettings.detail level
detail level
view detail level
revit.elements.text.select horizontal text alignment
select horizontal text alignment
select the horizontal text alignment style.
revit.elements.text.select vertical text alignment
select vertical text alignment
select the vertical text alignment style.
revit.elements.wall.wall location
wall location
wall locations.
revit.views.scheduleview.schedule type
schedule type
select a schedule type.
revit.views.scheduleview.export column headers
export column headers
how to export column headers. default is multiplerows.
revit.views.scheduleview.export text qualifier
export text qualifier
how to qualify text fields. default is doublequote.
revit.elements.fillpatternelement.fill patterns
fill patterns
all available fill patterns.
revit.elements.fillpatternelement.fill pattern targets
fill pattern targets
the type of the fill pattern.
revit.elements.linepatternelement.line patterns
line patterns
all available line patterns.
revit.views.scheduleview.schedule filter type
schedule filter type
a view schedule filter type.
analyze.sitelocation
sitelocation
returns the current revit site location.
revit.selection.family types
family types
all family types available in the document.
revit.selection.get family parameter
get family parameter
given a family instance or type allows the user to select a parameter as a string.
revit.selection.floor types
floor types
all floor types available in the document.
revit.selection.wall types
wall types
all wall types available in the document.
revit.elements.performanceadviserrule.performance adviser rules
performance adviser rules
all performance adviser rules.
revit.selection.categories
categories
all built-in categories.
revit.selection.levels
levels
select a level in the active document
revit.selection.structural framing types
structural framing types
select a structural framing type in the active document
revit.selection.structural column types
structural column types
select a structural column type in the active document
revit.elements.dividedpath.spacing rule layout
spacing rule layout
a spacing rule layout for calculating divided paths.
revit.selection.element types
element types
all element subtypes.
revit.selection.views
views
all views available in the current document.
revit.view.sunsettings.current
sunsettings.current
returns the sunsettings of the current view.
builtin.loopwhile
loop
while
repeat
constructs a while loop node given an initial value, a condition and a loop body.
operators.+
add
plus
addition
+
adds x to y.
operators.-
sub
subtract
difference
-
x subtract y.
operators.*
mul
multiply
product
times
*
x
multiplies x by y.
operators./
div
divide
divides x by y.
operators.==
eq
equal
=
equal x to y?
operators.>=
greater
x greater or equals y?
operators.>
x greater y?
operators.%
mod
modulo
remainder
finds the remainder of x/y
operators.<=
less
x less or equals y?
operators.<
x less y?
operators.&&
x and y?
operators.||
x || y?
operators.!=
x doesn't equal y.
operators.not
not
!x
geometry.arc.bythreepoints
arc
arcs
create an arc by providing three sequential points along its circumference.
geometry.arc.bycenterpointradiusangle
center
create an arc by providing it's center point, radius, angle sweep, and normal vector
geometry.arc.bycenterpointstartpointsweepangle
create an arc by providing it's center point, start point, sweep point, and normal
geometry.arc.bycenterpointstartpointendpoint
create an arc by providing it's center point, start point, and end point
geometry.arc.byfillet
fillet
round
smooth
create an arc by filleting two curves with given radius
geometry.arc.byfillettangenttocurve
create an arc by filleting two curves tangent to given curve at internal point
geometry.arc.bybestfitthroughpoints
approximate
create an arc that best approximates a collection of points
geometry.arc.bystartendandtangencies
tangent
create an arc or tangent bi arc by start and end points and tangencies at start and end
geometry.arc.bystartpointendpointstarttangent
create an arc from start point to end point with start tangent to vector
geometry.arc.centerpoint
midpoint
the center point of the arc
geometry.arc.radius
the radius of the arc
geometry.arc.startangle
the start angle in degrees
geometry.arc.sweepangle
the total sweep angle in degrees
geometry.curve.byparameterlineonsurface
isocurve
curvebyuv
lines
uvs
create a curve by line of surface in uv space
geometry.curve.byblendbetweencurves
blend
make continuous
connect
create a curve that blends between two curves
geometry.curve.byisocurveonsurface
curvebydir
create a curve by isoline of surface
geometry.curve.length
distance
the total arc length of the curve
geometry.curve.isplanar
flat
liesinplane
determine whether a curve is planar or not
geometry.curve.isclosed
determine if the curve is closed or not
geometry.curve.startpoint
begin
curvestart
startpt
get the start point along the curve
geometry.curve.endpoint
end
curveend
endpt
get the end point along the curve
geometry.curve.normal
perpendicular
the normal to the plane where the curve is contained. only valid for planar curves.
geometry.curve.pointatparameter
pointoncurve
curvepoint
get a point on the curve at a specified parameter between startparameter() and endparameter()
geometry.curve.tangentatparameter
tangentoncurve
curvetan
get a vector tangent to the curve at a specified parameter between startparameter() and endparameter()
geometry.curve.normalatparameter
normaloncurve
curvenorm
get a vector perpendicular to the curve at a specified parameter between startparameter() and endparameter()
geometry.curve.coordinatesystematparameter
coordoncurve
curvecoord
derivatives
get a coordinatesystem with origin at the point at the given parameter. the xaxis is aligned with the curve normal, the yaxis is aligned with the curve tangent at this point, and the zaxis is aligned with the up-vector or binormal at this point
geometry.curve.horizontalframeatparameter
frame
axisaligned
aa
coordcurve
framecurve
curveframe
get a coordinatesystem with origin at the point at the given parameter
geometry.curve.planeatparameter
planeoncurve
planecurve
tangentplane
returns a plane whose normal aligns with the tangent of the curve. parameters are adjusted such that 0 is always the start point and 1 is always the end point.
geometry.curve.pointatsegmentlength
pointalongcurve
distanceoncurve
distancepoint
distpoint
arclength
get a point at a particular arc length along the curve
geometry.curve.pointsatequalsegmentlength
returns points spaced equally along the curve length based on the input number of divisions
geometry.curve.pointsatequalchordlength
returns points spaced along curve at equal chord length based on the input number of divisions
geometry.curve.pointatchordlength
measure from
measure to
parameteratdist
get the point at a particular chord length of the curve from given parameter location.
geometry.curve.pointsatsegmentlengthfrompoint
returns points spaced equally along the curve at given segment length and starting from the given point
geometry.curve.pointsatchordlengthfrompoint
returns points spaced on the curve at given chord length starting from the given point
geometry.curve.coordinatesystematsegmentlength
returns a coordinatesystem at specified distance from curve start point. y axis lies tangent to the curve, x axis is the curvature.
geometry.curve.planeatsegmentlength
returns a plane at the specified distance along the curve from the start point. the normal of the plane aligns with the tangent of the curve.
geometry.curve.segmentlengthatparameter
lengthatparameter
dist along
lengthatpoint
get the arc length along the curve at the particular parameter.
geometry.curve.parameteratsegmentlength
parameteratlen
param along
paramatlen
get the parameter at a particular arc length along the curve.
geometry.curve.parameteratchordlength
get the parameter at a particular chord length along the curve from given location.
geometry.curve.startparameter
start domain
get the start of the domain in which the curve can be evaluated
geometry.curve.endparameter
end domain
get the end of the domain in which the curve can be evaluated
geometry.curve.segmentlengthbetweenparameters
measure
get the arc length between two parameter points on the curve
geometry.curve.parameteratpoint
projectpoint
closestparam
curveparam
get the parameter at a particular point along the curve
geometry.curve.reverse
flip
reverse the direction of the curve
geometry.curve.offset
thicken
offset a curve by a specified amount. curve must be planar, and, if a bsplinecurve/nurbscurve, must have degree > 1.
geometry.curve.pullontoplane
projectcurve
toplane
create a curve by pulling onto plane
geometry.curve.pullontosurface
tosurf
pull this curve onto the input surface, in the direction of the surface normals.
geometry.curve.trimbystartparameter
rem
remstart
removestart
trimcurve
removes the start of the curve at the specified parameter
geometry.curve.trimbyendparameter
remend
removeend
removes the end of the curve at the specified parameter
geometry.curve.trimbyparameter
remove
removeends
removes the beginning and end of the curve at the specified parameters.
geometry.curve.triminteriorbyparameter
removemiddle
middle
remmiddle
cutout
removes the interior portion of a curve at the specified parameters
geometry.curve.trimsegmentsbyparameter
removeparts
remparts
trimcurv
interior
odd
removes several segments of the curve, discarding the 1st, 3rd, 5th ... segments
geometry.curve.splitbyparameter
cutinto
curve2curves
cut
split a curve into two pieces at the given parameter
geometry.curve.splitbypoints
cut multiple
splitmultiple
split a curve into multiple pieces at the given points
geometry.curve.join
convertcurve
curve2polycurve
joincurve
concat
join this curve and the input curve into a new polycurve, maintaining the original curves exactly.
geometry.curve.extrude
pushcurve
pullcurve
curve2surf
curveextrude
extrudecurve
extrudes a curve in the normal vector direction
extrudes a curve in the specified direction, by the length of the input vector
extrudes a curve in the specified direction, by the specified distance
geometry.curve.extrudeassolid
profileextrude
extrudeprofile
curve2solid
extrudes a curve in the normal direction by the specified distance. curve must be closed.
extrudes a curve in the specified direction, by the length of the input vector. curve must be closed.
extrudes a curve in the specified direction, by the specified distance. curve must be closed.
geometry.curve.extend
makelonger
stretch
extendside
extend a curve by a given distance at a particular end determined by a pick point. the picked side will be extended. closed curves like circles and ellipses cannot be extended.
geometry.curve.extendstart
extend a curve by a given distance on its start side. closed curves like circles and ellipses cannot be extended.
geometry.curve.extendend
extend a curve by a given distance on its end. closed curves like circles and ellipses cannot be extended.
geometry.curve.approximatewitharcandlinesegments
rationalizecurve
fitarcs
fitlines
approximate a curve with a collection of arcs and lines
geometry.curve.tonurbscurve
curve2spline
tospline
converts the curve to a nurbscurve approximation
geometry.curve.patch
fill
profiletosurf
loop2surf
edgesurf
patch a closed curve
geometry.curve.project
project another piece of geometry onto this along a given direction vector
geometry.curve.sweepassurface
sweep1
sweeps this curve along the path curve, creating a surface
geometry.curve.sweepassolid
loop2solid
profile2solid
curvetosolid
looptosolid
profiletosolid
sweeps this closed curve along the path curve, creating a solid
geometry.curve.simplify
fitcurve
reducecurve
simplecurve
returns a new curve approximated with the supplied tolerance
geometry.geometry.translate
move
by amount
translates any given geometry by the given displacements in the x, y, and z directions defined in wcs respectively.
along vector
translate geometry in the given direction by the vector length
translates any geometry type by the given distance in the given direction.
geometry.geometry.transform
transforms geometry by the given coordinatesystem's transform
from
to
transforms this geometry from source coordinatesystem to a new context coordinatesystem.
geometry.geometry.rotate
around
axis
degrees
rotates an object around an origin and an axis by a specified degree
normal
rotates an object around the plane origin and normal by a specified degree
geometry.geometry.mirror
reflect
flip over
mirror the object across the input plane
geometry.geometry.scale
resize
size
scale uniformly around the origin
scalenu
scale non-uniformly around the origin
scale non-uniformly around a given plane
scale uniformly around a given point, using two pick points as scalars
geometry.geometry.scale1d
scale1d
1d
scale in one dimension by base and 2 pick points. the scaling axis is defined by the line between base and pick0.
geometry.geometry.scale2d
scale2d
2d
scale in two dimension by base and 2 pick points the two pick points are projected onto the base plane in order to determine the 2d scale factors
geometry.geometry.distanceto
between
obtain the distance from this geometry to another
geometry.geometry.closestpointto
nearestpoint
getclosestpoint
obtain the closest point on this geometry to the other
geometry.geometry.doesintersect
intersects?
check intersection
test intersection
determine if another geometry object intersects with this one
geometry.geometry.intersect
get overlap
get the intersection geometry for this object and another
geometry.geometry.intersectall
multi intersect
intersect many
get the intersection of geometry for this object and a collection of other geometries. finds common geometry of all participants.
geometry.geometry.split
split this geometry using another geometry as a cutting "tool"
geometry.geometry.trim
removes elements of the entity closest to the pick point
geometry.geometry.explode
separates compound or non-separated elements into their component parts.
geometry.geometry.isalmostequalto
near
close
check if the two objects have the same representational geometry or numerical values
geometry.geometry.boundingbox
bounds
get the boundingbox containing the given piece of geometry
geometry.geometry.tosoliddef
convert geometry to solid def json
geometry.geometry.importfromsat
imports a sat file and returns an array of imported geometries
geometry.geometry.fromsoliddef
imports a json string and returns an array of imported geometries
exports the specified geometry to the given sat file path
geometry.geometry.serializeassab
serializes the specified geometry into standard acis binary(sab) format and returns serialized binary stream data
geometry.geometry.deserializefromsab
deserializes the specified standard acis binary(sab) format data and returns a list of geometry
geometry.geometry.contextcoordinatesystem
get the context/reference coordinate system that was used to create this geometry.
geometry.boundingbox.bygeometry
bounding
bound
create an axis-aligned boundingbox around input geometry.
geometry.boundingbox.bycorners
bymaxmin
max
min
bypoints
creates the an axis-aligned boundingbox spanning between the minimum point and the maximum point.
geometry.boundingbox.minpoint
the minimum point
geometry.boundingbox.maxpoint
the maximum point
geometry.boundingbox.intersection
get the intersection of two boundingboxes
geometry.boundingbox.intersects
determine whether two boundingboxes intersect
geometry.boundingbox.isempty
determine if the boundingbox is empty
geometry.boundingbox.contains
point inside
testpoint
determine if a point is inside of the boundingbox
geometry.boundingbox.tocuboid
converttosolid
bb2cube
bb2cub
bounding tosolid
cubes
get the boundingbox as a solid cuboid
geometry.boundingbox.topolysurface
converttosurfaces
convert2surfaces
bbtosrfs
bounding to surfaces
bound to poly
convert2poly
get the boundingbox as a collection of surfaces
geometry.coordinatesystem.identity
zero
wcs
creates a coordinatesystem as the world coordinate system: origin at 0, 0, 0; x axis at 1, 0, 0; y axis at 0, 1, 0; z axis at 0, 0, 1
geometry.coordinatesystem.bymatrix
deprecated -- do not use
geometry.coordinatesystem.byorigin
create a coordinatesystem with origin at x and y locations, with x and y axes set as wcs x and y axes. z defaults to 0.
translate
create a coordinatesystem with origin at x, y, and z locations, with x and y axes set as wcs x and y axes.
bypoint
create a coordinatesystem with origin at input point, with x and y axes set as wcs x and y axes.
geometry.coordinatesystem.byplane
create a coordinatesystem with origin equal to input plane origin, and x and y axes lying in the plane, aligned with plane x and y axes.
geometry.coordinatesystem.byoriginvectors
create a coordinatesystem at the origin with x and y axis. input vectors are normalized before creating the coordinatesystem.
byxy
coord by2axis
create a coordinatesystem at the origin with x and y axis, with z axis ignored completely. input vectors are normalized before creating the coordinatesystem.
geometry.coordinatesystem.bycylindricalcoordinates
creates a coordinatesystem at the specified cylindrical coordinate parameters with respect to the specified coordinate system
geometry.coordinatesystem.bysphericalcoordinates
creates a coordinatesystem at the specified spherical coordinate parameters with respect to the specified coordinate system
geometry.coordinatesystem.issingular
inverse
testinverse
determine whether it is possible to get the inverse of this coordinatesystem
geometry.coordinatesystem.isscaledortho
uniform
tests if the scaling orthogonal, i.e. does it have a shear component.
geometry.coordinatesystem.isuniscaledortho
samelength
tests if the scaling orthogonal and are all the vectors normalized.
geometry.coordinatesystem.determinant
obtain the determinant of this coordinatesystem
geometry.coordinatesystem.origin
position
creates a point representing the coordinatesystem origin.
geometry.coordinatesystem.xaxis
left
right
returns x axis of coordinatesystem.
geometry.coordinatesystem.yaxis
forward
back
returns y axis of coordinatesystem.
geometry.coordinatesystem.zaxis
up
down
returns z axis of coordinatesystem.
geometry.coordinatesystem.xscalefactor
returns the x axis scaling of the coordinatesystem: the length of the x axis vector.
geometry.coordinatesystem.yscalefactor
returns the y axis scaling of the coordinatesystem: the length of the y axis vector.
geometry.coordinatesystem.zscalefactor
returns the z axis scaling of the coordinatesystem: the length of the z axis vector.
geometry.coordinatesystem.xyplane
returns the plane the x and y axes lie in, with root at the origin.
geometry.coordinatesystem.yzplane
returns the plane the y and z axes lie in, with root at the origin.
geometry.coordinatesystem.zxplane
returns the plane the z and x axes lie in, with root at the origin.
geometry.coordinatesystem.inverse
get the inverse of this coordinatesystem - applying this coordinatesystem to a piece of geometry reverses the original.
geometry.coordinatesystem.mirror
geometry.coordinatesystem.postmultiplyby
apply the argument coordinatesystem after this one - result = this * other
geometry.coordinatesystem.premultiplyby
apply the argument coordinatesystem before this one - result = other * this
geometry.coordinatesystem.scalefactor
get size
scalecomponents
scalevector
returns a vector containing the x, y, and z scale factors
geometry.coordinatesystem.isequalto
determine if two coordinatesystems are equal
geometry.coordinatesystem.translate
translates any given coordinatesystem by the given displacements in the x, y, and z directions defined in wcs respectively.
translate the object in the direction and magnitude of input vector.
translates any coordinatesystem type by the given distance in the given direction.
geometry.coordinatesystem.transform
transform the object by the input coordinatesystem matrix.
transforms this coordinatesystem from source coordinatesystem to a new context coordinatesystem.
geometry.coordinatesystem.rotate
///
geometry.coordinatesystem.scale
scale uniformly around a given point, using
geometry.coordinatesystem.scale1d
geometry.coordinatesystem.scale2d
geometry.vector.bycoordinates
vector
xyz
vector3
form a vector by 3 euclidean coordinates
normalize
form a vector by 3 euclidean coordinates and normalize the vector
geometry.vector.bytwopoints
vector2
form a vector by two end points. the result is a vector from the start to the end point.
geometry.vector.xaxis
basis
get the canonical x axis vector (1,0,0)
geometry.vector.yaxis
y
get the canonical y axis vector (0,1,0)
geometry.vector.zaxis
z
get the canonical z axis vector (0,0,1)
geometry.vector.x
get the x component of a vector
geometry.vector.y
get the y component of a vector
geometry.vector.z
get the z component of a vector
geometry.vector.length
magnitude
get the length of the vector - otherwise known as the euclidean norm
geometry.vector.aspoint
convertopoint
vector2point
get the point with the same x, y, and z component
geometry.vector.reverse
backwards
vectorflip
get the reverse of the vector. essentially this negates the x, y, and z components of the vector.
geometry.vector.add
sum
sumvectors
add a vector
geometry.vector.subtract
substact
diff vectors
subtract a vector
geometry.vector.cross
form the cross product of two vectors
geometry.vector.dot
projectvector
vectorproject
onto
form the dot product of two vectors
geometry.vector.normalized
get the normalized version of a vector
geometry.vector.isparallel
determine whether two vectors are parallel or not
geometry.vector.isalmostequalto
vector approximate
same
determine whether two vectors ae almost equal
geometry.vector.transform
transform this vector by input coordinatesystem matrix.
geometry.vector.rotate
rotates a vector around an axis by a specified number of degrees
rotates a vector around the plane origin and normal by a specified degree
geometry.vector.scale
scale vector uniformly around the origin
scale vector non-uniformly around the origin
geometry.vector.anglewithvector
rotation angle
returns the angle between the two vectors, in the range [0, 180] degrees.
geometry.vector.angleaboutaxis
returns the angle between the two vectors, in the range [0, 360] degrees. it uses axis of rotation to determine the direction of the angle.
geometry.point.bycoordinates
xy
form a point in the xy plane given two 2 cartesian coordinates. the z component is 0.
point
form a point given 3 cartesian coordinates
geometry.point.origin
origin
get the origin point (0,0,0)
geometry.point.bycartesiancoordinates
localposition
form a point in the given coordinate system with 3 cartesian coordinates
geometry.point.bycylindricalcoordinates
form a point in the given coordinate system given its position in cylindrical coordinates.
geometry.point.bysphericalcoordinates
form a point in the given coordinate system given its position in spherical coordinates.
geometry.point.pruneduplicates
unique
duplicates
remove duplicates
distinct
prune points to exclude duplicates within tolerance of included points
geometry.point.x
get the x component of a point
geometry.point.y
get the y component of a point
geometry.point.z
get the z component of a point
geometry.point.asvector
convertovector
point2vector
get the vector with the same x, y, and z component
geometry.point.add
movepoint
move along
add a vector to a point. the same as translate(vector).
geometry.point.subtract
subtract a vector from a point. the same as translate(-vector).
geometry.point.project
geometry.plane.byoriginnormal
plane
tonormal
create a plane centered at root point, with input normal vector.
geometry.plane.byoriginnormalxaxis
create an "oriented" plane, positioned at point origin with vector normal, but with a specific x axis orientation. this has no impact to splitting, intersect, project, etc oporations, it only specifies the orientation of the input coordinatesystem.
geometry.plane.byoriginxaxisyaxis
the x and y axis lie in the plane. the z axis is the cross product of the two vectors.
geometry.plane.bybestfitthroughpoints
fit
bestfit
fits a plane to the input points; basically a 3d scatterplot fit.
geometry.plane.bylineandpoint
create the plane containing the input line and external point. point cannot lie on the line or in the line axis.
geometry.plane.bythreepoints
create a the plane containing the three input points.
geometry.plane.xy
creates a plane in the world xy
geometry.plane.xz
creates a plane in the world xz plane
geometry.plane.yz
creates a plane in the world yz
geometry.plane.origin
planecenter
returns the origin of the plane.
geometry.plane.normal
returns the normal direction of the plane.
geometry.plane.xaxis
the x basis of the plane
geometry.plane.yaxis
the y basis of the plane
geometry.plane.tocoordinatesystem
converttocs
convert2cs
produces a new coordinatesystem representing this plane. it is based on the origin, and x and y axis basis.
geometry.plane.offset
alongnormal
moveplane
create a new plane offset by this plane in the normal direction by the specified distance.
geometry.surface.byunion
merge
join
union a collection of surfaces into one surface. this method might return a polysurface if the resulting union is non-manifold or multi-faced.
geometry.surface.byloft
loft
create a surface by lofting between input cross section curves.
geometry.surface.byruledloft
ruledsurface
create a surface by lofting between input cross section lines. this is slightly faster and produces a less smooth result than surface.byloft.
geometry.surface.bysweep
sweep
rail
guide
create a surface by sweeping a cross section curve along a path.
geometry.surface.byperimeterpoints
patch
surfacebypolygon
create a polygon surface connecting input points in a closed polygon and patching it.
geometry.surface.bysweep2rails
sweep2
guides
sweep the cross section curve along a path guided by a two rails
geometry.surface.byrevolve
lathe
create a surface by sweeping the profile curve around the axis ray formed by origin point in the direction of the axis vector, starting at start_angle in degrees, sweeping sweep_angle in degrees.
geometry.surface.bypatch
edgesrf
edgesurface
create a surface by filling in the interior of a closed boundary defined by input curves.
geometry.surface.area
returns the total surface area.
geometry.surface.perimeter
circumference
returns the sum of all edges of the surface.
geometry.surface.closedinu
returns true if the surface is closed in u direction.
geometry.surface.closedinv
returns true if the surface is closed in v direction
geometry.surface.closed
returns true if the surface is closed in u or v directions
geometry.surface.subtractfrom
trim
removefrom
subtract the input tools from this surface.
geometry.surface.difference
differencemany
diffall
diff multi
the boolean difference of this surface and the union of input surfaces. this method might return a polysurface if the resulting boolean is non-manifold or multi-faced.
geometry.surface.uvparameteratpoint
evaluateatpoint
surfaceatpoint
uvatpoint
return the uv parameter pair at the input point. this is the inverse of point at parameter.
geometry.surface.trimwithedgeloops
trim multiple
removeloops
cutloops
trim the surface with a collection of loops within the surface
geometry.surface.normalatpoint
return the surface normal at the input point on the surface.
geometry.surface.tonurbssurface
gets a nurbs representation of the surface. this method may approximate surface in certain circumstances.
geometry.surface.approximatewithtolerance
tonurbs
gets a nurbs representation of the surface within a specified tolerance. this method may approximate surface in certain circumstances.
geometry.surface.thicken
offset
tosolid
thicken surface into a solid, extruding in the direction of surface normals on both sides of the surface.
bothsides
thicken surface into a solid, extruding in the direction of surface normals. if both_sides parameter is true, surface is thickened on both sides.
geometry.surface.offset
offset surface in direction of surface normal by specified distance.
geometry.surface.curvatureatparameter
the returned coordination system use xaxis, yaxis and zaxis to represent the udir, vdir and normal. the length of xaxis, yaxis represents the curvatures.
geometry.surface.coordinatesystematparameter
return a coordinatesystem aligned with principal curvature directions.
geometry.surface.tangentatuparameter
return the u tangent vector at specified u and v parameters.
geometry.surface.tangentatvparameter
return the v tangent vector at specified u and v parameters.
geometry.surface.normalatparameter
return the normal vector at specified u and v parameters.
geometry.surface.derivativesatparameter
return the derivatives at input u and v coordinates.
geometry.surface.gaussiancurvatureatparameter
developable
returns the gaussian curvature at u and v parameters.
geometry.surface.principalcurvaturesatparameter
returns the principal curvatures at the u and v parameters.
geometry.surface.principaldirectionsatparameter
returns principal direction vectors at u and v parameters.
geometry.surface.pointatparameter
surfacepoint
return the point at specified u and v parameters.
geometry.surface.perimetercurves
edges
return all the boundary curves of the surface.
geometry.surface.getisoline
create a parameter line curve on the given surface. create a curve that represents a u or v parameter line on the surface. a parameter line runs in the direction of increasing u or v parameter at a constant opposite u or v parameter. the resulting curve will match the surface parameterisation and its range will be bounded by the surface parameter range. the type of curve returned will depend on the surface type.
geometry.surface.flipnormaldirection
returns a new surface with the normal flipped. leaves this surface unchanged.
geometry.surface.projectinputonto
projecttosurface
projectonto
projects the input geometry onto this surface in the input vector direction
geometry.uv.bycoordinates
surfaceparam
parameters
uv
create a uv from two doubles.
geometry.uv.u
get the u component of a uv
geometry.uv.v
get the v component of a v
geometry.polycurve.byjoinedcurves
segments
joincurves
make polycurve by joining curves. flips curve as needed for connectivity. choose a preferred join tolerance between 1e-6 and 1e-3 units.
geometry.polycurve.bypoints
make polycurve by connecting points. set the 'connectlasttofirst' input to true to close the polycurve.
geometry.polycurve.bythickeningcurve
make polycurve by thickening a curve.
geometry.polycurve.numberofcurves
curvecount
subcurvecount
numbersubcurves
number of curves of the polycurve
geometry.polycurve.curves
subcurves
polycurvesplit
returns curves of the polycurve
geometry.polycurve.curveatindex
subcurveatindex
getsubcurve
getcurvebyindex
returns curve of the polycurve by index
geometry.polycurve.baseplane
returns plane of planar polycurve
geometry.polycurve.extendwithellipse
extends polycurve by tangent ellipse
geometry.polycurve.extendwitharc
extends polycurve by tangent arc
geometry.polycurve.closewithline
close polycurve by line connecting start and end points
geometry.polycurve.closewithlineandtangentarcs
close polycurve by tangent chain of arc, line, and arc
geometry.polycurve.offset
offset polycurve in its plane.
geometry.polycurve.fillet
radius
fillet polycurve in its plane.
geometry.solid.byjoinedsurfaces
brep
create a solid by specifying it's component faces as surfaces.
geometry.solid.byloft
create a solid by lofting between input cross section closed curves.
geometry.solid.bysweep
sweep a closed curve along a path.
geometry.solid.bysweep2rails
sweepprofile
sweep a closed profile curve along two rail curves.
geometry.solid.byrevolve
revolveprofile
create a solid of revolution, sweeping the profile curve around the axis ray formed by the origin and the axis vector, from the start angle in degrees to the sweep angle in degrees.
geometry.solid.byunion
union a collection of solids into one solid
geometry.solid.area
returns the surface area -- sum of all the areas of all faces
geometry.solid.volume
the total volume of the solid
geometry.solid.centroid
average
the centroid of the solid
geometry.solid.union
combine
the boolean union of this solid and another.
geometry.solid.difference
the boolean difference of this solid with another
geometry.solid.differenceall
the boolean difference of this solid and the union of input solids
geometry.solid.thinshell
extract shell
offset and extract
obtain a solid shell from the faces of this solid
geometry.solid.projectinputonto
projectonsolid
projecttosolid
projects the input geometry onto this solid, in the direction of the input vector
geometry.solid.fillet
smoothedge
roundedges
fillets a solid along input edges with a given radius.
geometry.solid.chamfer
bevel
flattenedges
chamfers a solid along input edges with a given offset from the edge corner.
geometry.nurbscurve.bycontrolpoints
nurbscurve
spline
create a bsplinecurve by using explicit control points. note 1: bsplinecurves with deg=1 have g1 discontinuities, which cause problems for extrusion, sweep, and other operations. they should be avoided. use a polycurve instead. note 2: if the curve is periodic (closed), then the first and last points must be the same.
geometry.nurbscurve.bycontrolpointsweightsknots
explicit
degree
spline byarray
create a bsplinecurve by from control vertices, weights, and knots. from asm docs: degree: should be greater than 1 (piecewise-linear spline) and less than 26 (the maximum b-spline basis degree supported by asm). weights: all weight values (if supplied) should be strictly positive. weights smaller than 1e-11 will be rejected and the function will fail. knots: the knot vector should be a non-decreasing sequence. interior knot multiplicity should be no larger than degree + 1 at the start/end knot and degree at an internal knot (this allows curves with g1 discontinuities to be represented). note that non-clamped knot vectors are supported, but will be converted to clamped ones, with the corresponding changes applied to the control point/weight data. knot array: the array size must be num_control_points + degree + 1
geometry.nurbscurve.bypoints
create a bsplinecurve by interpolating between points.
geometry.nurbscurve.bypointstangents
spline by tangent
tangents
returns a bsplinecurve through the points, with tangent directions.
geometry.nurbscurve.degree
smoothness
interpolation
continuity
the degree of the curve
geometry.nurbscurve.isperiodic
isclosed
whether the nurbscurve is periodic or not
geometry.nurbscurve.isrational
whether the nurbscurve is rational or not. this defines whether any of the weights are not 1.0.
geometry.nurbscurve.controlpoints
get the control points of the nurbscurve. these are the points that the curve interpolates.
geometry.nurbscurve.knots
the knots of the curve. these, along with the degree, define the domain of the curve where a particular control vertex acts.
geometry.nurbscurve.weights
ptweight
the weights of the control vertices of the curve. these define the magnitude of influence of the control vertices.
geometry.cuboid.bylengths
box
cube
create a cuboid centered at wcs origin, with width, length, and height.
cubebysize
bycenter
create a cuboid centered at input point, with specified width, length, and height.
bycoord
create a cuboid centered and oriented to input coordinatesystem, with specified width, length, and height.
geometry.cuboid.bycorners
byminmax
by corners
by points
create an cuboid spanning from low point to high point.
geometry.cuboid.length
returns length distance. note: this return the input dimensions of the cuboid, not the actual world space dimensions. in other words, if you create a cuboid width (x-axis) length 10, and transform it to a coordinatesystem with 2 times scaling in x, the width will still be 10. asm does not allow you to extract the vertices of a body in any predictable order, so it impossible to determine the dimensions after a transform.
geometry.cuboid.width
returns width distance. note: this return the input dimensions of the cuboid, not the actual world space dimensions. in other words, if you create a cuboid width (x-axis) length 10, and transform it to a coordinatesystem with 2 times scaling in x, the width will still be 10. asm does not allow you to extract the vertices of a body in any predictable order, so it impossible to determine the dimensions after a transform.
geometry.cuboid.height
returns height distance. note: this return the input dimensions of the cuboid, not the actual world space dimensions. in other words, if you create a cuboid width (x-axis) length 10, and transform it to a coordinatesystem with 2 times scaling in x, the width will still be 10. asm does not allow you to extract the vertices of a body in any predictable order, so it impossible to determine the dimensions after a transform.
geometry.polysurface.byloft
makes polysurface by loft through curves.
geometry.polysurface.byloftguides
loftbyrails
loft rails
makes polysurface by loft through polycurves.
geometry.polysurface.byjoinedsurfaces
joinsurfaces
joinsrf
make polysurface by joining surfaces.
geometry.polysurface.bysolid
solid2poly
solidtopoly
convertsolid
make polysurface by surfaces of solid.
geometry.polysurface.bysweep
make polysurface by sweeping curves along rail.
geometry.polysurface.surfaces
subsurfaces
getsurfaces
explode
return new surfaces representing the underlying surfaces.
geometry.polysurface.locatesurfacesbypoint
surfacesatpoint
findsurfaces
extractsurfaces
locate surfaces by point. takes first intersection in forward direction. returns one surface if hit surface interior, two if hit edge interior, and many if hit vertex
geometry.polysurface.locatesurfacesbyline
surfacesonline
locate surfaces by line. takes all surfaces hit by line.
geometry.polysurface.unconnectedboundaries
compute 2d cell boundaries which are not connected to other surfaces
geometry.polysurface.extractsolids
extract solids from polysurface defined by subset of surfaces
geometry.polysurface.surfacecount
number of surfaces of polysurface
geometry.polysurface.edgecount
number of edges of polysurface
geometry.polysurface.vertexcount
number of vertices of polysurface
geometry.polysurface.fillet
fillets a polysurface along input edges with a given radius.
geometry.polysurface.chamfer
chamfers a polysurface along input edges with a given offset from the edge corner.
geometry.circle.bycenterpointradius
circle
creates a circle with input center point and radius in the world xy plane, with world z as normal.
geometry.circle.bycenterpointradiusnormal
alignedcircle
creates a circle with specified center point, radius, and normal direction.
geometry.circle.byplaneradius
create a circle centered at the input plane origin (root), lying in the input plane, with given radius.
geometry.circle.bythreepoints
create a circle passing through three input points.
geometry.circle.bybestfitthroughpoints
best fit circle through points
geometry.circle.centerpoint
the center of the circle
geometry.circle.radius
the radius of the circle
geometry.edge.curvegeometry
the underlying curve making up the edge
geometry.edge.adjacentfaces
the faces adjacent to this edge
geometry.edge.startvertex
the vertex at which this edge starts
geometry.edge.endvertex
the vertex at which this edge ends
geometry.vertex.pointgeometry
the point where this vertex is located
geometry.vertex.adjacentedges
the edges emanating from this vertex
geometry.vertex.adjacentfaces
the faces adjacent to this vertex
geometry.cone.bypointsradius
cone
cones
create a cone with given base radius at start point, extending to a apex at end point.
geometry.cone.bypointsradii
trimmed cone
create a cone with axis from start point to end point, with given radiuses at start and end. this object does not have an apex, and can be thought of as a trimmed cone.
geometry.cone.bycoordinatesystemheightradius
creates a cone with base point at coordinatesystem origin, extending in the coordinatesystem z axis deriction length amount, with a circular base in the coordinatesystem xy plane.
geometry.cone.bycoordinatesystemheightradii
cone by height
creates a cone with base point at coordinatesystem origin, extending in the coordinatesystem z axis deriction length amount, with a circular bases in the coordinatesystem xy plane.
geometry.cone.startpoint
the start point
geometry.cone.endpoint
the end point
geometry.cone.radiusratio
ratio between the top and bottom radius
geometry.cone.startradius
the radius at the base
geometry.cone.endradius
the radius at the bottom
geometry.cone.height
the total height
geometry.topology.vertices
the vertices of the topology
geometry.topology.edges
the edges of the topology
geometry.topology.faces
the faces of the topology
geometry.face.edges
faces
all of the edges around this face in counterclockwise order
geometry.face.vertices
all of the vertices around this face in counterclockwise order
geometry.face.surfacegeometry
the underlying surface making up the face
geometry.cylinder.byradiusheight
cylinder
tube
construct a solid cylinder defined by a parent coordinatesystem, the radius, and the height of the cylinder
geometry.cylinder.bypointsradius
by center points
construct a solid cylinder given the bottom and top center point of the cylinder.
geometry.cylinder.radius
the radius of the cylinder
geometry.cylinder.height
geometry.cylinder.axis
axis of the cylinder
geometry.ellipse.byoriginradii
ellipse
create an ellipse centered at input point, aligned with wcs xy plane, with specified x and y axis radii.
geometry.ellipse.byoriginvectors
ellipsebylengths
ellipsebyvectors
create an ellipse centered at input point, with two specified axes. axes should be be at 90 degrees to each other.
geometry.ellipse.bycoordinatesystemradii
aligned ellipse
create an ellipse centered and aligned with input coordinatesystem, with a x_radius radius in the cs x direction, and y_radius radius in the cs y direction.
geometry.ellipse.byplaneradii
create an ellipse centered and aligned with input plane, with a x_radius radius in the plane x axis direction, and y_radius radius in the plane y axis direction.
geometry.ellipse.centerpoint
the center of the ellipse
geometry.ellipse.majoraxis
the major axis of the ellipse. this is the longer axis. the length of the vector is the major radius.
geometry.ellipse.minoraxis
the minor axis of the ellipse. this is the shorter axis. the length of the vector is the minor radius.
geometry.ellipsearc.byplaneradiiangles
ellipsearc
create an ellipsearc in a plane with the given the radii along the x and y axes and the angles to sweep through
geometry.ellipsearc.centerpoint
geometry.ellipsearc.majoraxis
geometry.ellipsearc.minoraxis
geometry.ellipsearc.startangle
geometry.ellipsearc.sweepangle
geometry.ellipsearc.plane
the plane in which the ellipse lies
geometry.helix.byaxis
helix
screw
corkscrew
thread
create a helix. the helix always rotates clockwise about the supplied axis direction. if viewing along the axis direction, the viewer will see the point turning clockwise around the axis as it moves along the curve in the direction of increasing parameter. pitch is distance the helix moves in the axis direction per turn. this can be positive or negative.
geometry.helix.angle
the angle in degrees through which the helix turns over its length
geometry.helix.pitch
the pitch of the helix
geometry.helix.radius
geometry.helix.axisdirection
the direction of the axis of the helix
geometry.helix.axispoint
helixstart
the base point of the helix axis
geometry.indexgroup.byindices
quad
polygon
mesh
meshes
create an indexgroup storing four indices
geometry.indexgroup.count
either 3 or 4, depending if it represents a triangle or a quad
geometry.indexgroup.a
the first index
geometry.indexgroup.b
the second index
geometry.indexgroup.c
the third index
geometry.indexgroup.d
the fourth index
geometry.line.bystartpointendpoint
line
linebypoints
creates a straight line between two input points.
geometry.line.bybestfitthroughpoints
creates a line best approximating a scatter plot of points.
geometry.line.bytangency
tangentline
tangentto
create a line tangent to the input curve, positioned at the parameter point of the input curve.
geometry.line.bystartpointdirectionlength
linebyvector
create a straight line starting at start point, extending in vector direction by specified length.
geometry.line.direction
the direction of the curve
geometry.mesh.bypointsfaceindices
create a mesh from a collection of points and a collection of indexgroups referencing the point collection
geometry.mesh.faceindices
the vertex indices that make up each face in a counterclockwise fashion
geometry.mesh.vertexnormals
the normal vector at this vertex
geometry.mesh.vertexpositions
the positions of the vertices
geometry.nurbssurface.bypoints
topoints
creates a nurbssurface with specified interpolated points and u and v degrees. the resultant surface will pass through all of the points.
geometry.nurbssurface.bypointstangents
totangents
creates a nurbssurface with specified interpolated points and u and v degrees. the resultant surface will pass through all of the points. the number of tangents must match the number of points in the corresponding direction. the resultant surface will be degree 3 in both the u and v direction.
geometry.nurbssurface.bypointstangentsknotsderivatives
fit corners
complex fit
creates a nurbssurface satisfying a collection of different surface characteristics. this is the most advanced surface fitting method. the resultant surface will pass through all of the points. the number of tangents must match the number of points in the corresponding direction. the resultant surface will be degree 3 in both the u and v direction. the corner derivatives should be second order (dp/dudv) and should be supplied in this order [ lowu, lowv ], [ highu, lowv ], [ lowu, highv ], [ highu, highv ].
geometry.nurbssurface.bycontrolpoints
create a nurbssurface by using explicit control points, with specified u and v degrees.
geometry.nurbssurface.bycontrolpointsweightsknots
creates a nurbssurface with specified control vertices, knots, weights, and u v degrees. there are several restrictions on the data which, if broken, will cause the function to fail and will throw an exception. degree: both u- and v- degree should be >= 1 (piecewise-linear spline) and less than 26 (the maximum b-spline basis degree supported by asm). weights: all weight values (if supplied) should be strictly positive. weights smaller than 1e-11 will be rejected and the function will fail. knots: both knot vectors should be non-decreasing sequences. interior knot multiplicity should be no larger than degree + 1 at the start/end knot and degree at an internal knot (this allows surfaces with g1 discontinuities to be represented). note that non-clamped knot vectors are supported, but will be converted to clamped ones, with the corresponding changes applied to the control point/weight data.
geometry.nurbssurface.degreeu
surface smoothness
surface degree in the u direction.
geometry.nurbssurface.degreev
surface degree in the v direction.
geometry.nurbssurface.numcontrolpointsu
number of control points in the u direction.
geometry.nurbssurface.numcontrolpointsv
number of control points in the v direction.
geometry.nurbssurface.isperiodicinu
closedinu
returns true if the surface is periodic in the u direction.
geometry.nurbssurface.isperiodicinv
closedinv
returns true if the surface is periodic in the v direction.
geometry.nurbssurface.isrational
returns true if the surface is rational.
geometry.nurbssurface.controlpoints
returns nurbssurface control points (poles).
geometry.nurbssurface.weights
ptweights
returns nurbssurface control point weights.
geometry.nurbssurface.uknots
surface knots in u direction.
geometry.nurbssurface.vknots
surface knots in v direction.
geometry.polygon.bypoints
construct a polygon curve by connecting points.
geometry.polygon.regularpolygon
construct an inscribed polygon curve within a circle.
geometry.polygon.points
returns all the segment start / end points.
geometry.polygon.planedeviation
returns maximum deviation from average plane of polygon.
geometry.polygon.corners
returns corners of polygon
geometry.polygon.center
centroid
returns average point of corners of polygon
geometry.polygon.selfintersections
returns self intersections between sides of the polygon.
geometry.polygon.containmenttest
checks if point is inside planar polygon without self intersections.
geometry.rectangle.bycornerpoints
rectbypointarray
create a rectangle by four corner points.
rectbypoints
geometry.rectangle.bywidthlength
rectbylengths
create a rectangle centered at the wcs origin in the wcs xy plane, with specified width (x axis length), and length (y axis length).
rectangle
create a rectangle centered at input plane root, with input width (plane x axis length), and length (plane y axis length).
create a rectangle centered at the input origin in the coordinatesystem xy plane, with specified width (x axis length), and length (y axis length).
geometry.rectangle.width
rectx
the width of the rectangle
geometry.rectangle.height
recty
the height of the rectangle
geometry.sphere.bycenterpointradius
create a solid sphere cetered at the input point, with given radius.
geometry.sphere.byfourpoints
create a solid sphere containing four input points on the surface.
geometry.sphere.bybestfit
fit a sphere as close as possible to the input points.
geometry.sphere.centerpoint
return the center point of the sphere.
geometry.sphere.radius
return the radius of the sphere.
geometry.tspline.tsplineedge.uvnframe
return uvn frame of the tsedge (point on the hull, u vector, v vector and normal)
geometry.tspline.tsplineedge.index
index of the tsedge
geometry.tspline.tsplineedge.isborder
whether the tsedge is on border
geometry.tspline.tsplineedge.ismanifold
whether the tsedge is manifold
geometry.tspline.tsplineedge.info
a bunch of tsedge properties: uvnframe and index, whether tsedge is on border, is manifold or not
geometry.tspline.tsplineuvnframe.position
point of the topologyitem on the hull
geometry.tspline.tsplineuvnframe.u
u vector of the topologyitem
geometry.tspline.tsplineuvnframe.v
v vector of the topologyitem
geometry.tspline.tsplineuvnframe.normal
normal of the topologyitem
geometry.tspline.tsplineface.uvnframe
return uvn frame of the tsplineface (point on the hull, u vector, v vector and normal)
geometry.tspline.tsplineface.index
index of the tsface
geometry.tspline.tsplineface.valence
number of edges or vertices on the tsface
geometry.tspline.tsplineface.sides
number of parametric sides on the tsface
geometry.tspline.tsplineface.info
a bunch of tsplineface properties: uvnframe, index, valence and number of sides
geometry.tspline.tsplinevertex.uvnframe
return uvn frame of the tsvertex (point on the hull, u vector, v vector and normal)
geometry.tspline.tsplinevertex.index
index of the tsvertex
geometry.tspline.tsplinevertex.isstarpoint
whether the tsvertex is a star point
geometry.tspline.tsplinevertex.istpoint
whether the tsvertex is a t-point
geometry.tspline.tsplinevertex.ismanifold
whether the tsvertex is manifold
geometry.tspline.tsplinevertex.valence
number of edges or faces on the tsvertex
geometry.tspline.tsplinevertex.functionalvalence
functional valence of the tsvertex, taking t-points into account
geometry.tspline.tsplinevertex.info
a bunch of tsvertex properties: uvnframe, index, valence and functionalvalence, whether tsvertex is a starpoint, tpoint, manifold or not
geometry.tspline.tsplineinitialsymmetry.byradial
tspline
symmetry
create a radial tsplineinitialsymmetry with given amount of spans per symmetric segment.
geometry.tspline.tsplineinitialsymmetry.byaxial
create an axial tsplineinitialsymmetry with given symmetry axes.
geometry.tspline.tsplineinitialsymmetry.isradial
whether newly created t-spline has radial symmetry.
geometry.tspline.tsplineinitialsymmetry.xaxis
whether newly created t-spline has symmetry on x axis.
geometry.tspline.tsplineinitialsymmetry.yaxis
whether newly created t-spline has symmetry on y axis.
geometry.tspline.tsplineinitialsymmetry.zaxis
whether newly created t-spline has symmetry on z axis.
geometry.tspline.tsplineinitialsymmetry.radialsymmetryfaces
number of faces in symmetry segment. only available if t-spline has radial symmetry.
geometry.tspline.tsplinereflection.byaxial
reflection
axial
create axial reflection for t-spline symmetry by given plane.
geometry.tspline.tsplinereflection.byradial
radial
create radial reflection for t-spline symmetry by given plane with given segments count and given angle (in degrees) between each pair of segments.
geometry.tspline.tsplinereflection.isradial
whether the reflection is radial
geometry.tspline.tsplinereflection.segmentscount
number of segments of radial reflection
geometry.tspline.tsplinereflection.segmentangle
angle between each pair of symmetric segments of radial reflection
geometry.tspline.tsplinereflection.plane
plane of the reflection
geometry.tspline.tsplinereflection.axis
axis of the reflection
geometry.tspline.tsplinetopology.regularvertices
regular vertices contained in the t-spline surface
geometry.tspline.tsplinetopology.starpointvertices
star-point vertices contained in the t-spline surface
geometry.tspline.tsplinetopology.tpointvertices
t-point vertices contained in the t-spline surface
geometry.tspline.tsplinetopology.nonmanifoldvertices
non-manifold vertices contained in the t-spline surface
geometry.tspline.tsplinetopology.bordervertices
border vertices contained in the t-spline surface
geometry.tspline.tsplinetopology.innervertices
inner vertices contained in the t-spline surface
geometry.tspline.tsplinetopology.nonmanifoldedges
non-manifold edges contained in the t-spline surface
geometry.tspline.tsplinetopology.borderedges
border edges contained in the t-spline surface
geometry.tspline.tsplinetopology.inneredges
inner edges contained in the t-spline surface
geometry.tspline.tsplinetopology.regularfaces
regular faces contained in the t-spline surface
geometry.tspline.tsplinetopology.ngonfaces
n-gon faces contained in the t-spline surface
geometry.tspline.tsplinetopology.borderfaces
border faces contained in the t-spline surface
geometry.tspline.tsplinetopology.innerfaces
inner faces contained in the t-spline surface
geometry.tspline.tsplinetopology.verticescount
return number of vertices in the t-spline surface
geometry.tspline.tsplinetopology.edgescount
return number of edges in the t-spline surface
geometry.tspline.tsplinetopology.facescount
return number of faces in the t-spline surface
geometry.tspline.tsplinetopology.decomposedvertices
decomposed vertices differed by type
geometry.tspline.tsplinetopology.decomposededges
decomposed edges differed by type
geometry.tspline.tsplinetopology.decomposedfaces
decomposed faces differed by type
geometry.tspline.tsplinetopology.vertexbyindex
face
byindex
return vertex at given index
geometry.tspline.tsplinetopology.edgebyindex
return edge at given index
geometry.tspline.tsplinetopology.facebyindex
return face at given index
geometry.tspline.tsplinesurface.byplaneoriginnormal
create a t-spline plane centered at root point, with input normal vector.
geometry.tspline.tsplinesurface.byplaneoriginnormalxaxis
create an "oriented" t-spline plane, positioned at point origin with vector normal, but with a specific x-axis orientation. this has no impact to splitting, intersect, project, etc. operations, it only specifies the orientation of the input coordinatesystem.
geometry.tspline.tsplinesurface.byplaneoriginxaxisyaxis
create a plane by origin and x, y axis. the z axis is the cross product of the two vectors.
geometry.tspline.tsplinesurface.byplanebestfitthroughpoints
points
fit a t-spline plane to the input points; basically a 3d scatterplot fit.
geometry.tspline.tsplinesurface.byplanelineandpoint
create the t-spline plane containing the input line and external point. point cannot lie on the line or anywhere on the axis of the line.
geometry.tspline.tsplinesurface.byplanethreepoints
create a t-spline plane containing the three input points. the points cannot lie on a straight line
geometry.tspline.tsplinesurface.bycylinderradiusheight
height
construct a t-spline cylinder defined by a parent coordinatesystem, the radius, and the height of the cylinder
geometry.tspline.tsplinesurface.bycylinderpointsradius
construct a t-splines cylinder given the bottom and top center point of the cylinder.
geometry.tspline.tsplinesurface.byconepointsradius
create a t-splines cone with given base radius at start point, extending to an apex at end point.
geometry.tspline.tsplinesurface.byconepointsradii
radii
truncated
create a t-splines cone with axis from start point to end point, with given radii at start and end. this object does not have an apex, and is in the shape of a frustum.
geometry.tspline.tsplinesurface.byconecoordinatesystemheightradius
cs
create a t-splines cone with base point at coordinatesystem origin, extending in the direction of coordinatesystem's z-axis, with a circular base in the coordinatesystem xy plane.
geometry.tspline.tsplinesurface.byconecoordinatesystemheightradii
create a t-splines cone with base point at coordinatesystem origin, extending in the direction of coordinatesystem z-axis, with its circular base in the coordinatesystem xy plane.
geometry.tspline.tsplinesurface.byspherecenterpointradius
sphere
create a t-spline sphere cetered at the input point, with given radius.
geometry.tspline.tsplinesurface.byspherefourpoints
create a t-spline sphere containing four input points on the surface.
geometry.tspline.tsplinesurface.byspherebestfit
fit a t-spline sphere as close as possible to the input points.
geometry.tspline.tsplinesurface.bytoruscoordinatesystemradii
torus
create a t-splines torus with center at coordinatesystem origin and given radii
geometry.tspline.tsplinesurface.bytoruscenterradii
create a t-splines torus with given center and radii, aligned with default world xy plane
geometry.tspline.tsplinesurface.byboxlengths
cuboid
create a t-spline box centered at wcs origin, with width, length, and height.
create a t-spline box centered at input point, with specified width, length, and height.
coord
create a t-spline box centered and oriented to input coordinatesystem, with specified width, length, and height.
geometry.tspline.tsplinesurface.byboxcorners
create an t-spline box spanning from low point to high point.
geometry.tspline.tsplinesurface.byquadballcoordinatesystemradius
quadball
coordinate system
raduis
create a t-splines quadball with center at coordinatesystem origin and given radius
geometry.tspline.tsplinesurface.byquadballcenterradius
tsplines
create a t-splines quadball with given center and radius, aligned with default world xy plane
geometry.tspline.tsplinesurface.bynurbssurfaceuniform
nurbs surface
construct t-spline surface from nurbs surface using uniform strategy. input nurbs surface is rebuilt with uniform knots placed at equal parametric or arc length intervals depending on corresponding usearclen flag, and approximated by degree 3 nurbs surface. output t-spline is divided by given span counts in u and v directions.
geometry.tspline.tsplinesurface.bynurbssurfacecurvature
curvature
construct t-spline surface from nurbs surface using curvature subdivision strategy. input nurbs surface is rebuilt to degree 3. output t-spline has span counts and positions in each direction detected automatically depending on curvature.
geometry.tspline.tsplinesurface.byextrude
extrude
curve
construct a t-spline by extruding a curve along the given vector.
geometry.tspline.tsplinesurface.bysweep
construct a t-spline by sweeping a cross section curve along a path.
geometry.tspline.tsplinesurface.byrevolve
revolve
create a t-spline surface by sweeping the profile curve around the axis formed by the axis origin and axis direction, starting at start_angle in degrees, and sweeping by sweep_angle in degrees.
geometry.tspline.tsplinesurface.buildfromlines
build
create a t-spline surface from the list of lines. accepts curves, but takes only start and end points from them.
geometry.tspline.tsplinesurface.buildpipes
create
pipe
make a piped surface out of a network of curves or lines. a smooth joint is created at each curve intersection. some parameter take single value or list - two valies per curve.
geometry.tspline.tsplinesurface.bycombinedtsplinesurfaces
combine given t-spline surfaces into single one. surface can be not connected to each other. if at least one surface is in box mode - output surface will be in box mode as well.
geometry.tspline.tsplinesurface.reflections
reflections
a list of reflections applied to the t-spline
geometry.tspline.tsplinesurface.isinboxmode
boxmode
whether t-spline in box or smooth mode
geometry.tspline.tsplinesurface.isextractable
extractable
whether t-spline is extractable (could be displayed in smooth mode)
geometry.tspline.tsplinesurface.isclosed
closed
whether t-spline is is open.
geometry.tspline.tsplinesurface.iswatertight
watertight
all closed surfaces are watertight, but some watertight surfaces are open.
geometry.tspline.tsplinesurface.isstandard
standard
check all guarantees required for standardization to determine if the t-spline is standard
geometry.tspline.tsplinesurface.tobrep
solid
surface
convert tspline surface to solid or surface depending on shape
geometry.tspline.tsplinesurface.tomesh
convert t-spline surface to mesh. mesh can have both triangles and quads.
geometry.tspline.tsplinesurface.thicken
thicken tspline surface by given distance in the direction of its face normals
thicken tspline surface by given vector.
geometry.tspline.tsplinesurface.creaseedges
edge
crease
perform crease on given set of edges
geometry.tspline.tsplinesurface.uncreaseedges
uncrease
perform uncrease on given set of edges
geometry.tspline.tsplinesurface.creasevertices
perform crease on given set of vertices
geometry.tspline.tsplinesurface.uncreasevertices
perform uncrease on given set of vertices
geometry.tspline.tsplinesurface.weldvertices
weld
vertex
weld given list of vertices into a single vertex.
geometry.tspline.tsplinesurface.weldcoincidentvertices
coincident
find all coincident vertices and weld them together.
geometry.tspline.tsplinesurface.unweldedges
unweld
unweld all the given edges, it will unweld each vertex on all the edges.
geometry.tspline.tsplinesurface.unweldvertices
unweld all the specified vertices. all edges on every vertex will be unwelded.
geometry.tspline.tsplinesurface.creatematch
match
create match with t-spline and closed loop of curves
geometry.tspline.tsplinesurface.deletevertices
vertices
delete
remove vertices from t-spline topology
geometry.tspline.tsplinesurface.deleteedges
remove edges from t-spline topology
geometry.tspline.tsplinesurface.deletefaces
remove faces from t-spline topology
geometry.tspline.tsplinesurface.enablesmoothmode
visulization
mode
change visualization style of t-spline. smooth visualization if true passed, box otherwise.
geometry.tspline.tsplinesurface.extrudeedges
direction
perform a single or multiple symmetric extrudes on a set of edges and move new edges by given vector.
geometry.tspline.tsplinesurface.extrudefaces
perform a single or multiple symmetric extrudes on a set of faces and move new edges by given vector.
geometry.tspline.tsplinesurface.extrudeedgesalongcurve
perform a single or multiple symmetric extrudes on a set of edges and move new edges by the path of given curve.
geometry.tspline.tsplinesurface.extrudefacesalongcurve
perform a single or multiple symmetric extrudes on a set of faces and move new edges by the path of given curve.
geometry.tspline.tsplinesurface.beveledges
replace given edges with a channel of faces.
geometry.tspline.tsplinesurface.slideedges
slide
slide given edges along neighboring edges
geometry.tspline.tsplinesurface.mergeedges
merge given edges. edges in each groups should create equal counts of continuous sets. edges from the first group are considered as edges of this surface. edges from the second group can be either from this surface or any other surface. in case of different surfaces, combine is performed before merge
geometry.tspline.tsplinesurface.bridgefacestofaces
bridge
build bridge between two sets of faces. items of the first group are considered as children of this surface. items of the second group can be either children of this surface or belong to a different surface. topology within each group might not be adjacent, but should create the same count of distinct loops.
geometry.tspline.tsplinesurface.bridgefacestoedges
build bridge between set of faces and set of edges. items of the first group are considered as children of this surface. items of the second group can be either children of this surface or belong to a different surface. topology within each group might not be adjacent, but should create the same count of distinct loops.
geometry.tspline.tsplinesurface.bridgeedgestofaces
build bridge between set of edges and set of faces. items of the first group are considered as children of this surface. items of the second group can be either children of this surface or belong to a different surface. topology within each group might not be adjacent, but should create the same count of distinct loops.
geometry.tspline.tsplinesurface.bridgeedgestoedges
build bridge between two sets of edges. items of the first group are considered as children of this surface. items of the second group can either be children of this surface or belong to a different surface. topology within each group might not be adjacent but should create the same count of distinct loops.
geometry.tspline.tsplinesurface.fillhole
hole
fill holes in a t-spline
geometry.tspline.tsplinesurface.addreflections
append given list of reflections to the t-spline
geometry.tspline.tsplinesurface.removereflections
remove all reflections from the t-spline
geometry.tspline.tsplinesurface.compressindexes
index
compress
compress all topology on the surface and make the indices contiguous. this function maintains the relative order of the indices.
geometry.tspline.tsplinesurface.subdividefaces
subdivide
simple
subdivide given faces into four faces each in exact or simple mode depending on given flag value.
geometry.tspline.tsplinesurface.interpolate
interpolate
reverse
forward interpolation moves control points to their parametric locations on the surface. reverse interpolation generates a point on the surface for each original control point and moves this control point to its corresponding surface point.
geometry.tspline.tsplinesurface.pullvertices
pull
take every given t-spline vertex and pull it towards the closest point on the target geometries. if surfacepoints is true then surface point of the vertex is pulled, control grip otherwise
geometry.tspline.tsplinesurface.flattenvertices
flatten
flatten control points of given vertices to a single plane. this command requires an input of at least four vertices
geometry.tspline.tsplinesurface.duplicatefaces
duplicate
copy chosen faces to the new surface. new surface has no symmetry
geometry.tspline.tsplinesurface.flipnormals
inverts the normals of all faces in the mesh.
geometry.tspline.tsplinesurface.makeuniform
knot
set all knot intervals uniform.
geometry.tspline.tsplinesurface.standardize
standardize
standardize the t-spline to the point where exact insertion can be performed. if it cannot be standardized, exception is thrown with the reason
geometry.tspline.tsplinesurface.movevertices
move given vertices along given vector
geometry.tspline.tsplinesurface.exporttotss
save
tss
path
export given set of t-spline surfaces to t-spline scene file
geometry.tspline.tsplinesurface.exporttotsm
tsm
export given t-spline surface to t-spline mesh file
geometry.tspline.tsplinesurface.serializeastsm
import
serialize
write t-spline surface into a string in t-spline mesh format.
geometry.tspline.tsplinesurface.deserializefromtsm
no description available
geometry.tspline.tsplinesurface.importfromtsm
load
load a t-spline surface from given t-spline mesh file
geometry.tspline.tsplinesurface.importfromtss
load set of a t-spline surfaces from given t-spline scene file
designscriptbuiltin.designscript.builtin.dictionary.bykeysvalues
map
{}
table
produces a dictionary with the supplied keys and values. the number of entries is the shorter of keys or values.
designscriptbuiltin.designscript.builtin.dictionary.components
produces the components of a dictionary. the reverse of dictionary.bykeysvalues.
designscriptbuiltin.designscript.builtin.dictionary.keys
produces the keys in a dictionary.
designscriptbuiltin.designscript.builtin.dictionary.values
produces the values in a dictionary.
designscriptbuiltin.designscript.builtin.dictionary.count
the number of key value pairs in a dictionary.
designscriptbuiltin.designscript.builtin.dictionary.setvalueatkeys
insert
produce a new dictionary with a list of keys set to the new values, possibly overwriting existing key-value pairs. these two lists are expected to be of the same length. if not, the shorter of the two bounds the number of insertions.
designscriptbuiltin.designscript.builtin.dictionary.removekeys
drop
produce a new dictionary with the given keys removed.
designscriptbuiltin.designscript.builtin.dictionary.valueatkey
lookup
valueatkey
find
obtain the value at a specified key
designscriptbuiltin.designscript.builtin.keynotfoundexception.keynotfoundexception
designscriptbuiltin.system.exception.exception
designscriptbuiltin.system.exception.data
designscriptbuiltin.system.exception.getbaseexception
designscriptbuiltin.system.exception.innerexception
designscriptbuiltin.system.exception.targetsite
designscriptbuiltin.system.exception.stacktrace
designscriptbuiltin.system.exception.helplink
designscriptbuiltin.system.exception.source
designscriptbuiltin.system.exception.hresult
designscriptbuiltin.system.exception.gettype
designscriptbuiltin.system.exception.message
designscriptbuiltin.system.exception.getobjectdata
designscriptbuiltin.designscript.builtin.indexoutofrangeexception.indexoutofrangeexception
designscriptbuiltin.designscript.builtin.stringoverindexingexception.stringoverindexingexception
core.color.red
find the red component of a color, 0 to 255.
core.color.green
find the green component of a color, 0 to 255.
core.color.blue
find the blue component of a color, 0 to 255.
core.color.alpha
find the alpha component of a color, 0 to 255.
core.color.byargb
color
construct a color by alpha, red, green, and blue components.
core.color.brightness
returns the brightness value for this color.
core.color.saturation
returns the saturation value for this color.
core.color.hue
hues
returns the hue value for this color.
core.color.components
alpha
red
green
blue
lists the components for the color in the order: alpha, red, green, blue.
core.color.add
construct a color by combining two input colors.
core.color.multiply
multiply an input color with a number multiplier to produce a darker color. input color must have an alpha less than 255.
core.color.divide
divide an input color with a number divider to produce a brighter color and remove color tint
core.colorrange.bycolorsandparameters
create a colorrange by supplying lists of colors and uvs.
core.colorrange.getcoloratparameter
returns the color in this color range at the specified parameter.
core.datetime.minvalue
the earliest date and time that can be represented.
core.datetime.maxvalue
the latest date and time that can be represented.
core.datetime.now
the current system date and time.
core.datetime.today
the current system date, with time set at midnight.
core.datetime.format
return a specified date and time as a string, in the specified format.
core.datetime.bydate
creates a new datetime at an exact date.
core.datetime.bydateandtime
creates a new datetime at an exact date and time.
core.datetime.subtracttimespan
subtracts a timespan from a datetime, yielding a new datetime.
core.datetime.addtimespan
adds a timespan to a datetime, yielding a new datetime.
core.datetime.daysinmonth
calculates how many days are in the given month of the given year.
core.datetime.isdaylightsavingstime
determines if it is daylight savings time at the given datetime.
core.datetime.isleapyear
determines if the given year is a leap year.
core.datetime.fromstring
attempts to parse a datetime from a string.
core.datetime.date
extracts only the date from a datetime. time components are set to 0.
core.datetime.components
extracts the individual components of a datetime.
core.datetime.dayofweek
returns the day of the week from a given datetime.
core.datetime.dayofyear
returns the day of the year (0-366)
core.datetime.timeofday
yields a new timespan representing the amount of time passed since midnight of the given datetime.
core.timespan.bydatedifference
yields a new timespan calculated from the time difference between two datetimes.
core.timespan.zero
a timespan representing an elapsed time of zero.
core.timespan.maxvalue
the largest timespan that can be represented.
core.timespan.minvalue
the smallest timespan that can be represented.
core.timespan.create
creates a new timespan from a span of time.
core.timespan.scale
multiplies a timespan by a scaling factor.
core.timespan.negate
negates a timespan.
core.timespan.add
adds two timespans.
core.timespan.subtract
subtracts two timespans.
core.timespan.fromstring
attempts to parse a timespan from a string.
core.timespan.components
extracts the individual components of a timespan.
core.timespan.totaldays
converts the total amount of time represented by a timespan to an inexact number of days.
core.timespan.totalhours
converts the total amount of time represented by a timespan to an inexact number of hours.
core.timespan.totalminutes
converts the total amount of time represented by a timespan to an inexact number of minutes.
core.timespan.totalseconds
converts the total amount of time represented by a timespan to an inexact number of seconds.
core.timespan.totalmilliseconds
converts the total amount of time represented by a timespan to an inexact number of milliseconds.
core.data.parsejson
parse converts an arbitrary json string to a value. it is the opposite of json.stringify.
core.data.stringifyjson
stringify converts an arbitrary value or a list of arbitrary values to json. replication can be used to apply the operation over a list, producing a list of json strings.
core.list.empty
empty list
emptylist
[]
returns an empty list.
core.list.uniqueitems
removes
cull duplicates
listcontains
creates a new list containing all unique items in the given list.
core.list.contains
item
search
in
determines if the given list contains the given item. this function searches through the sublists contained in it.
core.list.ishomogeneous
homogeneous
allequal
type
check if the items in the list are of the same type.
core.list.isrectangular
rectangular
isrectangular
sublist
row
check if the number of items in all rows of the list are the same.
core.list.isuniformdepth
depth
isuniformdepth
jagged
check if the items in the list have the same depth.
core.list.setdifference
setdifference
set
returns a new list that includes objects in list1 but excludes objects in list2.
core.list.setintersection
intersection
setintersection
overlap
returns a new list that includes objects that are present in both list1 and list2.
core.list.setunion
union
setunion
returns a new list that includes objects that are present in either list1 or list2.
core.list.indexof
indexof
returns the index of the element in the given list.
core.list.countfalse
count
returns the number of false boolean values in the given list.
core.list.counttrue
returns the number of true boolean values in the given list.
core.list.insert
inserts an element into a list at specified index.
core.list.reorder
reorder
indices
reorders the input list based on the given list of indices.
core.list.sortindexbyvalue
sort
value
sorts a list by the items and return their indices.
core.list.normalizedepth
returns multidimensional list according the rank given.
core.list.reverse
creates a new list containing the items of the given list but in reverse order.
core.list.sublists
sublists
build sublists
subset
build sublists from a list using designscript range syntax.
core.list.sort
core.list.minimumitem
least
smallest
find min
returns the minimum value from a list.
core.list.maximumitem
greatest
largest
biggest
find max
returns the maximum value from a list.
core.list.filterbyboolmask
filter
out
mask
bool filter
boolfilter
filters a sequence by looking up corresponding indices in a separate list of booleans.
core.list.deconstruct
first
rest
list split
given a list, produces the first item in the list, and a new list containing all items except the first.
core.list.sortbykey
sort;key
sort list based on its keys
core.list.groupbykey
list;group;groupbykey;
group items into sub-lists based on their like key values
core.list.additemtofront
front
start
adds an item to the beginning of a list.
core.list.additemtoend
adds an item to the end of a list.
core.list.takeitems
get
extract
fetches an amount of items from the start of the list.
core.list.dropitems
shorten
removes an amount of items from the start of the list. if the amount is a negative value, items are removed from the end of the list.
core.list.shiftindices
shift
shifts indices in the list to the right by the given amount.
core.list.getitematindex
fetch
at
getfrom
get from
returns an item from the given list that's located at the specified index.
core.list.replaceitematindex
replace
switch
replace an item from the given list that's located at the specified index.
core.list.slice
subrange
get sublist
returns a single sub-list from the given list, based on starting index, ending index, and a step amount.
core.list.removeitematindex
cull
removes an item from the given list at the specified index.
core.list.dropeverynthitem
nth
every
removes items from the given list at indices that are multiples of the given value, after the given offset.
core.list.takeeverynthitem
take
fetches items from the given list at indices that are multiples of the given value, after the given offset.
core.list.isempty
test
is
empty
null
determines if the given list is empty.
core.list.alltrue
all
istrue
determines if all items in the given list is a boolean and has a true value.
core.list.allfalse
isfalse
determines if all items in the given list is a boolean and has a false value.
core.list.count
listlength
list length
sizeof
returns the number of items stored in the given list.
core.list.join
join lists
concatenate
concatenates all given lists into a single list.
core.list.firstitem
returns the first item in a list.
core.list.restofitems
rest of list
removes the first item from the given list.
core.list.chop
slices
partitions
chop
chop a list into a set of consecutive sublists with the specified lengths. list division begins at the top of the list.
core.list.diagonalright
diagonal
matrix
get diagonals
diagonal sublists
list elements along each diagonal in the matrix from the top left to the lower right.
core.list.diagonalleft
list elements along each diagonal in the matrix from the top right to the lower left.
core.list.transpose
transpose
flip matrix
swap
rows
columns
swaps rows and columns in a list of lists. if there are some rows that are shorter than others, null values are inserted as place holders in the resultant array such that it is always rectangular.
core.list.clean
cleans data of nulls and empty lists from a given list of arbitrary dimension
core.list.ofrepeateditem
repeated
list of item
fill list
copies
creates a list containing the given item the given number of times.
core.list.cycle
repeated list
concat list
creates a new list by concatenining copies of a given list.
core.list.lastitem
last
end of list
retrieves the last item in a list.
core.list.shuffle
random
randomize
shuffle
jitter
randomness
shuffles a list, randomizing the order of its items.
core.list.permutations
permutation
permutations
produces all permutations of the given length of a given list.
core.list.combinations
combo
produces all combinations of the given length of a given list.
core.list.firstindexof
given an item, returns the zero-based index of its first occurrence in the list. if the item cannot be found in the list, -1 is returned.
core.list.allindicesof
given an item, returns the zero-based indices of all its occurrences in the list. if the item cannot be found, an empty list is returned.
core.list.flatten
completely
flattens a nested list of lists by a certain amount.
core.math.random
seed
generates a random double in the range of [0, 1).
produce a random number in the range [lower_number, higher_number).
core.math.randomlist
produces a list containing the given amount of random doubles in the range of [0, 1).
core.math.pitimes2
2pi
2*pi
twopi
two*pi
pi constant multiplied by 2
core.math.average
avg
mean
averages a list of numbers.
core.math.map
minimum
maximum
scale
remap
maps the input value to a number between 0 and 1 based on the input range.
core.math.mapto
mapto
maps the input value to a number between targetrangemin and targetrangemax.
core.math.remaprange
remap range
adjusts the range of a list of numbers while preserving the distribution ratio.
core.math.pi
3.141592653589793
the mathematical constant pi, 3.14159...
core.math.e
exp
2.718281828459045
the mathematical constant e, 2.71828...
core.math.goldenratio
golden
ratio
divine
phi
tau
1.61803398875
the golden ratio, (1 + sqrt(5))/2 = 1.61803...
core.math.radianstodegrees
radians
angle
converts an angle in radians to an angle in degrees.
core.math.degreestoradians
converts an angle in degrees to an angle in radians.
core.math.abs
absolute value
finds the absolute value of a number.
core.math.acos
acosine
arccosine
finds the inverse cosine, the angle whose cosine is the given ratio.
core.math.asin
asine
arcsin
finds the inverse sine, the angle whose sine is the given ratio.
core.math.atan
atangent
arctangent
finds the inverse tangent, the angle whose tangent is the given ratio.
core.math.atan2
finds the inverse tangent of quotient of two numbers. returns the angle whose tangent is the ratio: numerator/denominator.
core.math.ceiling
ceiling
returns the first integer greater than the number
core.math.cos
cosine
finds the cosine of an angle.
core.math.cosh
hyperbolic cosine
finds the hyperbolic cosine of an angle (radians).
core.math.divrem
finds the remainder of dividend/divisor.
core.math.evaluateformula
evaluates an ncalc formula with given parameter mappings.
core.math.exp
exponential
returns the exponential of the number, the constant e raised to the value number.
core.math.floor
returns the first integer smaller than the number.
core.math.log
natural
logarithm
ln
finds the natural logarithm of a number in the range (0, ∞).
ld
lg
finds the logarithm of a number with the specified base.
core.math.log10
finds the base-10 logarithm of a number.
core.math.max
larger
returns the greater of two numbers.
core.math.min
lesser
smaller
returns the lesser of two numbers.
core.math.pow
^
power
raise
exponent
raises a number to the specified power.
core.math.rand
produce a random number in the range [0, 1).
core.math.round
rounds a number to the closest integral value. note that this method returns a double-precision floating-point number instead of an integral type.
rounds a number to a specified number of fractional digits.
core.math.sign
returns the sign of the number: -1, 0, or 1.
core.math.sin
sine
finds the sine of an angle.
core.math.sinh
hyperbolic
finds the hyperbolic sine of an angle (radians).
core.math.sqrt
square
root
radical
finds the positive square root of a number in the range [0, ∞).
core.math.tan
finds the tangent of an angle.
core.math.tanh
tanh
finds the hyperbolic tangent of an angle (radians).
core.math.sum
mass addition
massadd
find the sum of a series of numbers
core.math.factorial
!
finds the factorial result of a positive integer.
core.math.xor
xor
exclusive
boolean xor: returns true if and only if exactly one of the inputs is true.
core.object.isnull
is null
determines the if the given object is null.
core.object.identity
returns what is passed in, doing nothing.
core.object.type
returns the type of object represented as string.
core.string.tonumber
2number
str2number
strtonumber
string2number
stringtonumber
int
cast
converts a string to an integer or a double.
core.string.concat
combine strings
concatenates multiple strings into a single string.
core.string.length
characters
chars
returns the number of characters contained in the given string.
core.string.split
separator
delimiter
csv
comma
divides a single string into a list of strings, with divisions determined by the given separator strings.
core.string.join
build csv
construct
concatenates multiple strings into a single string, inserting the given separator between each joined string.
core.string.toupper
2uppercase
to uppercase
touppercase
uppercase
converts the given string to all uppercase characters.
core.string.tolower
2lowercase
to lowercase
tolowercase
lowercase
converts the given string to all lowercase characters.
core.string.changecase
converts the given string to all uppercase characters or all lowercase characters based on a boolean parameter.
core.string.substring
get string
part
smaller string
retrieves a substring from the given string. the substring starts at the given character position and has the given length.
core.string.contains
within
is in
part of
determines if the given string contains the given substring.
core.string.countoccurrences
substring
count occurrences
numberof
counts the number of non-overlapping occurrences of a substring inside a given string.
core.string.replace
overwrite
find and replace
replaces all occurrences of text in a string with other text.
core.string.endswith
does end
str end
terminated
determines if the given string ends with the given substring.
core.string.startswith
beginswith
string start
determines if the given string starts with the given substring.
core.string.trimwhitespace
trimstring
cleanstring
whitespace
blanks
spaces
string trim
removes all whitespace from the start and end of the given string.
core.string.trimleadingwhitespace
trim string
clean string
trim leading whitespaces
removes all whitespace from the start of the given string.
core.string.trimtrailingwhitespace
trim trailing whitespaces
removes all whitespace from the end of the given string.
core.string.indexof
index of
find substring
where
finds the zero-based index of the first occurrence of a sub-string inside a string. returns -1 if no index could be found.
core.string.allindicesof
core.string.lastindexof
last index of
finds the zero-based index of the last occurrence of a sub-string inside a string. returns -1 if no index could be found.
core.string.padleft
pad left
right align
right-align
pad
string space
right-aligns the characters in the given string by padding them with spaces on the left, for a specified total length.
core.string.padright
pad right
left align
left-align
pad string space
left-aligns the characters in the given string by padding them with spaces on the right, for a specified total length.
core.string.center
center align
center-align
centered
expand string
surround
increases the width of a string by encasing the original characters with spaces on either side.
core.string.insert
insertstring
insert string
inserts a string into another string at a given index.
core.string.remove
removes characters from a string.
core.thread.pause
pauses the current evaluation thread for a given amount of time.
core.file.filesystem.readtext
read file
text
file
reads a text file and returns the contents as a string.
core.file.filesystem.movefile
moves a specified file to a new location
core.file.filesystem.deletefile
deletes the specified file.
core.file.filesystem.copyfile
copies a file.
core.file.filesystem.fileexists
determines if a file exists at the given path.
core.file.filesystem.writetext
write file
write the text content to a file specified by the path
core.file.filesystem.appendtext
append file
append the text content to a file specified by the path
core.file.filesystem.combinepath
combines multiple strings into a single file path.
core.file.filesystem.fileextension
returns the extension from a file path.
core.file.filesystem.changepathextension
changes the extension of a file path.
core.file.filesystem.directoryname
returns the directory name of a file path.
core.file.filesystem.filename
returns the file name of a file path.
core.file.filesystem.filehasextension
determines whether or not a file path contains an extension.
core.file.filesystem.getdirectorycontents
core.file.filesystem.copydirectory
copies a directory to a destination location.
core.file.filesystem.deletedirectory
deletes a directory.
core.file.filesystem.directoryexists
determines if a directory exists at the given path.
core.file.filesystem.movedirectory
moves a directory to a new location.
core.file.image.readfromfile
loads the file as a bitmap.
core.file.image.pixels
read
bitmap
png
jpg
jpeg
reads an image file and returns the color values at the specified grid locations.
core.file.image.frompixels
constructs an image from a 2d list of pixels.
constructs an image from a flat list of pixels, a width, and a height.
core.file.image.dimensions
returns the width and height of an image.
core.file.image.writetofile
write image
write the image to a path, given the specified file name.
office.data.exportcsv
write
write a list of lists into a file using a comma-separated values format. outer list represents rows, inner lists represent columns.
office.data.importcsv
separate
imports data from a csv (comma separated values) file, put the items into a list and transpose it if needed.
office.data.importexcel
office
excel
spreadsheet
ifequalreturnindex
read data from a microsoft excel spreadsheet. data is read by row and returned in a series of lists by row. rows and columns are zero-indexed; for example, the value in cell a1 will appear in the data list at [0,0]. this node requires microsoft excel to be installed.
office.data.exportexcel
write data to a microsoft excel spreadsheet. data is written by row with sublists to be written in successive rows. rows and columns are zero-indexed; for example, the value in the data list at [0,0] will be written to cell a1. null values and empty lists are written to excel as empty cells. this node requires microsoft excel to be installed.
builtin.list.removeifnot
oftype
filtertype
removes the members of the list which are not members of the specified type.
builtin.list.equals
equals
determines whether two object instances are equal.
builtin.list.groupbyfunction
group
use a function to determine how list items should be grouped.
builtin.list.sortbyfunction
order
use a function to determine how list items should be sorted.
builtin.list.maximumitembykey
key
returns the items from the list that generate the maximum values for the function supplied as the key projector
builtin.list.minimumitembykey
returns the items from the list that generate the minimum values for the function supplied as the key projector
builtin.list.trueforall
returns true if all items in the list evaluate to true with the given predicate.
builtin.list.trueforany
any
returns true if one or more items in the list evaluate to true with the given predicate.
builtin.list.rank
rank
nesting
ranks
returns the deepest depth of the list
core.location.name
core.location.latitude
core.location.longitude
core.location.bylatitudeandlongitude
geometry.tessellation.convexhull.bypoints
creates a convex hull of a set of points.
geometry.tessellation.delaunay.byparametersonsurface
creates a delaunay triangulation of a surface with a given set of uv parameters.
geometry.tessellation.delaunay.bypoints
creates a delaunay triangulation of a set of points.
geometry.tessellation.voronoi.byparametersonsurface
creates a voronoi tessellation of a surface with a given set of uv parameters.
modifiers.geometrycolor.bygeometrycolor
display geometry using a color.
modifiers.geometrycolor.bysurfacecolors
display color values on a surface. the colors provided are converted internally to an image texture which is mapped to the surface.
revit.transaction.transaction.start
start a transaction if neccesssary, returning whatever was passed in.
revit.transaction.transaction.end
ends the current dynamo transaction, returning whatever was passed in.
revit.views.scheduleview.schedulablefield.name
name
revit.views.scheduleview.scheduleexportoptions.byproperties
creates view schedule export options element.
revit.views.scheduleview.schedulefield.name
revit.views.scheduleview.schedulefilter.byfieldtypeandvalue
creates schedule filter by schedule field, filter type and value.
revit.views.scheduleview.schedulefilter.filtertype
filter type
revit.views.scheduleview.schedulefilter.filedid
related schedule field id
revit.views.scheduleview.schedulefilter.value
value assigned to schedule filter
revit.references.raybounce.byorigindirection
returns positions and elements hit by ray bounce from the specified origin point and direction
revit.views.view3d.createuniqueviewname
determines whether a view with the provided name already exists. if a view exists with the provided name, and new view is created with a unique name. otherwise, the original view name is returned.
revit.filter.filterrule.byruletype
create a new filter rule
revit.elements.parameter.name
the name of the parameter.
revit.elements.parameter.value
get the value of the parameter
revit.elements.parameter.hasvalue
check if the parameter has a value
revit.elements.parameter.isreadonly
check if the parameter is read only
revit.elements.parameter.isshared
check if the parameter is shared
revit.elements.parameter.group
get the parameter's group
revit.elements.parameter.parametertype
get the parameter type
revit.elements.parameter.id
get the parameter's element id
revit.elements.parameter.unittype
get the parameter's unit type
revit.elements.parameter.parameterbyname
get element's parameter by name
revit.elements.parameter.setvalue
set the value of the parameter
revit.elements.parameter.storagetype
get parameter storage type
revit.elements.parameter.sharedparameterfile
gets the path to the shared parameter file of this document
revit.elements.parameter.createsharedparameterforallcategories
create a new shared parameter in the current revit document for all applicable categories
revit.elements.parameter.createsharedparameter
revit.elements.parameter.createprojectparameterforallcategories
create a new project parameter in this current revit document for all applicable categories
revit.elements.parameter.createprojectparameter
revit.filter.overridegraphicsettings.byproperties
create a overridegraphicsettings element.
revit.elements.fillpatternelement.getbyname
fill pattern element by name and target type.
revit.elements.linepatternelement.getbyname
line pattern element by name.
revit.filter.parameterfilterelement.byrules
create a revit parameter filter element
revit.elements.element.parameters
obtain all of the parameters from an element, sorted by name.
revit.elements.element.name
get the name of the element
revit.elements.element.boundingbox
get an axis-aligned boundingbox of the element
revit.elements.element.id
get the element id for this element
revit.elements.element.uniqueid
get the element unique id for this element
revit.elements.element.getcategory
get element category
revit.elements.element.elementtype
returns the familytype for this element. returns null if the element cannot have a familytype assigned.
revit.elements.element.tostring
a basic implementation of tostring for elements
revit.elements.element.delete
delete the element and any elements that are totally dependent upon the element.
revit.elements.element.getparametervaluebyname
get the value of one of the element's parameters.
revit.elements.element.overridecolorinview
override the element's color in the active view.
revit.elements.element.overrideinview
override elements graphics settings in active view.
revit.elements.element.setparameterbyname
set one of the element's parameters.
revit.elements.element.geometry
get all of the geometry associated with this object
revit.elements.element.solids
the solids in this element
revit.elements.element.curves
the curves in this element
revit.elements.element.faces
the faces in this element
revit.elements.element.elementcurvereferences
the elementcurvereference's in this element. useful for downstream element creation.
revit.elements.element.elementfacereferences
the elementfacereference's in this element. useful for downstream element creation.
revit.elements.element.setlocation
update an existing element's location
revit.elements.element.getlocation
get an existing element's location
revit.elements.element.movebyvector
move revit element by vector
revit.elements.element.getmaterials
get material names from a revit element
revit.elements.category.name
the name of the category.
revit.elements.category.id
the id of the category.
revit.elements.category.byname
gets a revit category by the built-in category name.
revit.elements.material.byname
select a material from the current document by the name
revit.elements.material.name
get material name
revit.elements.material.shininess
get shininess
revit.elements.material.smoothness
get smoothness
revit.elements.material.transparency
get transparency
revit.elements.material.surfacepatterncolor
get surfacepatterncolor
revit.elements.material.materialclass
get material class
revit.elements.material.materialcategory
get material category
revit.elements.material.cutpatterncolor
get cut pattern color
revit.elements.material.color
get color
revit.elements.material.cutpatternid
get cut pattern id
revit.elements.material.appearanceparameters
get all apperance parameters
revit.elements.material.thermalparameters
get all thermal parameters
revit.elements.material.structuralparameters
get all structural parameters
revit.elements.coordinates.projectrotation
get project rotation
revit.elements.coordinates.basepoint
get project base point
revit.elements.coordinates.surveypoint
get survey point
revit.elements.curtainpanel.boundaries
gets curtain panel boundaries
revit.elements.curtainpanel.hasplane
checks if the specific curtain panel is planar
revit.elements.curtainpanel.panelplane
gets a plane of the given curtain panel, if it is planar
revit.elements.curtainpanel.length
gets the length of the specific curtain panel boundaries
revit.elements.curtainpanel.isrectangular
checks whether the specific curtain panel is rectangular. returns true if the curtain panel is rectangular. otherwise returns false
revit.elements.curtainpanel.width
gets the width of the specific curtain panel, if it's rectangular
revit.elements.curtainpanel.height
gets the height of the specific curtain panel, if it's rectangular
revit.elements.curtainpanel.byelement
get all panels of curtain wall, system or slope glazing roof
revit.elements.curtainpanel.supportingmullions
gets mullions hosting the specified curtain panel
revit.elements.curtainpanel.asfamilyinstance
gets family instance from curtain panel
revit.elements.familytype.name
get the name of this family type
revit.elements.familytype.family
get the parent family of this familytype
revit.elements.familytype.byfamilyandname
symbol
select a familytype given its parent family and the familytype's name.
revit.elements.familytype.byfamilynameandtypename
select a familytype give it's family name and type name.
revit.elements.familytype.byname
select a familytype given it's name. this method will return the first familytype it finds if there are two or more familytypes with the same name.
revit.elements.familytype.bygeometry
create new family type from a solid geometry. this method exports the geometry to sat and imports it into a new family document.
revit.elements.familytype.voidbygeometry
create a void family type from a solid geometry. this method exports the solid to sat and imports it into a new family document.
revit.elements.mullion.locationcurve
gets curve geometry from the specified mullion element
revit.elements.mullion.byelement
get all mullions of curtain wall, system or slope glazing roof
revit.elements.mullion.supportedpanels
returns curtain panels supported by the specified mullion element
revit.elements.mullion.asfamilyinstance
returns familyinstance object as represented by the specified mullion
revit.elements.familyinstance.location
gets the location of the specific family instance
revit.elements.familyinstance.facingorientation
gets the facingorientation of the family instance
revit.elements.familyinstance.bypoint
place a revit familyinstance given the familytype (also known as the familysymbol in the revit api) and its coordinates in world space
revit.elements.familyinstance.byface
place a revit family instance of the given the familytype (also known as the familysymbol in the revit api) on a surface derived from a backing revit face as reference and a line as reference for its position. note: the familyplacementtype must be curvebased and the input surface must be created from a revit face
place a revit family instance given the familytype (also known as the familysymbol in the revit api) on a surface derived from a backing revit face as reference, a reference direction and a point location where to place the family. note: the familytype should be workplane based and the input surface must be created from a revit face. the reference direction defines the rotation of the instance on the reference, and thus cannot be perpendicular to the face.
revit.elements.familyinstance.bycoordinates
revit.elements.familyinstance.bypointandlevel
place a revit familyinstance given the familytype (also known as the familysymbol in the revit api), it's coordinates in world space, and the level
revit.elements.familyinstance.byfamilytype
byfamilysymbol
obtain a collection of familyinstances from the revit document and use them in the dynamo graph
revit.elements.familyinstance.gethost
gets the host of this fmaily instance (if any). eg. returns the wall of a window or door family instance.
revit.elements.familyinstance.getfamily
gets the family of this family instance
revit.elements.familyinstance.setrotation
set the euler angle of the family instance around its local z-axis.
revit.elements.dimension.byelements
construct a revit dimension from at least two elements
revit.elements.dimension.value
get dimension value
revit.elements.dimension.prefix
get prefix
revit.elements.dimension.setprefix
set prefix
revit.elements.dimension.suffix
get suffix
revit.elements.dimension.setsuffix
set suffix
revit.elements.dimension.valueoverride
get value override
revit.elements.dimension.setvalueoverride
set value override
revit.views.view.exportasimage
export the view as an image to the given path - defaults to png, but you can override the file type but supplying a path with the appropriate extension.
revit.views.view.addfilter
add a filter to a view. the filter will be added even if view has a view template applied, which normally would prevent user from adding filters without first disabling or modifying the view template.
revit.views.view.filters
get view filters
revit.views.view.setfilteroverrides
set filter overrides. if view doesn't have specified filter, it will be first added to the view and then its settings will be overriden. this behavior will persist even if view has a view template applied which normally would prevent user from adding filters without first disabling or modifying the view template.
revit.views.view.filteroverrides
get filter overrides
revit.views.view.isviewtemplate
checks if view is a view template.
revit.views.view.setcategoryoverrides
set category overrides.
revit.views.view.setscale
set view scale
revit.elements.detailcurve.bycurve
construct a revit detailcurve element from a curve
revit.elements.detailcurve.curve
get geometry curve
revit.elements.detailcurve.setcurve
set geometry curve
revit.elements.curveelement.elementcurvereference
obtain the reference curve for this modelcurve
revit.elements.curveelement.curve
obtain the geometry curve for this geometry curve
revit.elements.dimensiontype.fromexisting
creates new dimension type by duplicating an existing.
revit.elements.dimensiontype.styletype
returns dimension style for a givent type.
revit.elements.directshape.bygeometry
create a revit directshape given some geometry, a name for the shape, a category, and material. the geometry will be tessellated before being placed in the revit model the category of a directshape cannot be changed after creation, so a new directshape will be generated if the category input is changed.
revit.elements.directshape.bymesh
revit.elements.curvebypoints.byreferencepoints
construct a revit curvebypoints element (a curveelement) from a collection of referencepoint's
revit.elements.referencepoint.x
gets 'x' coordinate of the specified referencepoint
revit.elements.referencepoint.y
gets 'y' coordinate of the specified referencepoint
revit.elements.referencepoint.z
gets 'z' coordinate of the specified referencepoint
revit.elements.referencepoint.point
gets point geometry from the specified referencepoint
revit.elements.referencepoint.xyplane
gets xy plane of the specified referencepoint
revit.elements.referencepoint.yzplane
gets yz plane of the specified referencepoint
revit.elements.referencepoint.xzplane
gets xz plane of the specified referencepoint
revit.elements.referencepoint.bycoordinates
create a reference point by x, y, and z coordinates.
revit.elements.referencepoint.bypoint
create a reference point from a point.
revit.elements.referencepoint.bypointvectordistance
create a reference point element offset from a point along a vector
revit.elements.referencepoint.bylengthoncurvereference
create a reference point at a particular length along a curve
revit.elements.referencepoint.byparameteroncurvereference
create a reference point at a parameter on an curve. this introduces a persistent relationship between elements in the revit document.
revit.elements.referencepoint.byparametersonfacereference
create a reference point by uv coordinates on a face. this introduces a persistent relationship between elements in the revit document.
revit.elements.filledregion.bycurves
construct a revit filledregion element by curves
revit.elements.filledregiontype.byname
select a filledregiontype from the current document by name
revit.elements.filledregiontype.name
get name
revit.elements.filledregiontype.color
revit.elements.filledregiontype.fillpatternid
get fillpatternid
revit.elements.globalparameter.findbyname
find global parameter by name
revit.elements.globalparameter.name
revit.elements.globalparameter.value
get global parameter value
revit.elements.globalparameter.setvalue
set global parameter value
revit.elements.globalparameter.setvaluetoelementid
set global parameter value to an element id from integer
revit.elements.globalparameter.parametergroup
get parameter group
revit.elements.globalparameter.visible
get parameter visibility
revit.elements.globalparameter.parametertype
get parameter type
revit.elements.globalparameter.byname
create a new global parameter by name and type
revit.elements.pathoftravel.byfloorplanpoints
construct a list of path of travel elements in a floor plan view between the specified start points and end points
revit.elements.pathoftravel.update
updates existing pathoftravel
revit.views.floorplanview.bylevel
create a revit floor plan at a given level
revit.elements.rooftype.name
the name of the rooftype
revit.elements.rooftype.byname
select a rooftype from the document given
revit.elements.roof.byoutlinetypeandlevel
create a revit roof given its curve outline and level
revit.elements.roof.byoutlineextrusiontypeandlevel
extrude roof by outline, referenceplane
revit.elements.roof.points
get slab shape points
revit.elements.roof.addpoint
add point to slab shape
revit.elements.roof.movepoint
move existing point by offset
revit.elements.level.elevation
the elevation of the level above ground level
revit.elements.level.projectelevation
elevation relative to the project origin
revit.elements.level.name
the name of the level
revit.elements.level.byelevationandname
create a revit level given it's elevation and name in the project
revit.elements.level.byelevation
create a revit level given it's elevation. the name will be whatever revit gives it.
revit.elements.level.bylevelandoffset
create a revit level given it's length offset from an existing level
revit.elements.level.byleveloffsetandname
create a revit level given a distance offset from an existing level and a name for the new level
revit.elements.referenceplane.plane
get the internal geometric plane
revit.elements.referenceplane.elementplanereference
get a reference to this plane for downstream elements requiring it
revit.elements.referenceplane.byline
form a referenceplane from a line in the active view. the cut vector is the z axis.
revit.elements.referenceplane.bystartpointendpoint
form a refernece plane from two end points in the active view. the cut vector is the z axis.
revit.elements.curtainsystemtype.name
the name of the curtainsystemtype
revit.elements.curtainsystemtype.byname
select a curtainsystemtype from the document given
revit.elements.curtainsystem.byface
create curtain system from face references
revit.elements.curtainsystem.addcurtaingrid
add curtain grid
revit.elements.curtainsystem.removecurtaingrid
remove curtain grid
revit.elements.curtainsystem.curtainsystemtype
get curtainsystemtype
revit.elements.room.bylocation
create a revit room element
revit.elements.room.name
get room name
revit.elements.room.number
get room number
revit.elements.room.area
get room area
revit.elements.room.height
get room height
revit.elements.room.volume
get room volume
revit.elements.room.centerboundary
centerline boundary
revit.elements.room.coreboundary
core boundary
revit.elements.room.finishboundary
finish boundary
revit.elements.room.corecenterboundary
core center boundary
revit.elements.room.location
get room location
revit.elements.room.isinsideroom
check if a point is inside of a room
revit.elements.room.setname
set name
revit.elements.room.setnumber
set number
revit.elements.revision.byname
construct a new revit revision by name
revit.elements.revision.revisiondate
get revision date
revit.elements.revision.setrevisiondate
set revision date
revit.elements.revision.issuedto
get issuedto
revit.elements.revision.setissuedto
set issuedto
revit.elements.revision.issuedby
get issuedby
revit.elements.revision.setissuedby
set issuedby
revit.elements.revision.issued
get issued
revit.elements.revision.setissued
set issued
revit.elements.revisioncloud.bycurve
construct a revit revisioncloud element by curves
revit.elements.revisioncloud.revision
get revision cloud's revision
revit.elements.revisioncloud.curves
get revision cloud's curves
revit.elements.failuremessage.description
the description of the message.
revit.elements.failuremessage.failingelements
the failing elements of the message.
revit.elements.failuremessage.severity
get the failure severity.
revit.elements.performanceadviserrule.name
the name of the rule.
revit.elements.performanceadviserrule.description
the description of the rule.
revit.elements.performanceadviserrule.enabled
a boolean indicating if the rule is activated.
revit.elements.performanceadviserrule.ruleid
the id of the rule.
revit.elements.performanceadviserrule.execute
execute rules
revit.elements.performanceadviserrule.byid
create performance adviser rule by id
revit.elements.sunsettings.sundirection
calculates the direction of the sun.
revit.elements.sunsettings.altitude
extracts the altitude.
revit.elements.sunsettings.azimuth
extracts the azimuth.
revit.elements.sunsettings.startdatetime
gets the start date and time of the solar study given in the local time of the solar study location.
revit.elements.sunsettings.enddatetime
gets the end date and time of the solar study given in the local time of the solar study location.
revit.elements.sunsettings.currentdatetime
gets the date and time for the current frame of the solar study given in the local time of the solar study location.
revit.elements.tag.byelement
tagelement
annotate
documentation
create a revit tag for a revit element
revit.elements.tag.byelementandlocation
taglocation
create a revit tag for a revit element at a specified location point
revit.elements.tag.byelementandoffset
tagoffset
movetag
create a revit tag for a revit element at an offset location from the element's view extents
revit.elements.tag.tagtext
get tag's text
revit.elements.tag.taggedelement
get tagged element
revit.elements.textnote.bylocation
construct a new revit textnote by location
revit.elements.textnote.text
get text
revit.elements.textnote.settext
set text
revit.elements.textnote.setkeeprotatedtextreadable
set keep rotated text readable
revit.elements.textnote.sethorizontalalignment
set horizontal text alignment
revit.elements.textnote.horizontalalignment
get horizontal alignment
revit.elements.textnote.verticalalignment
get vertical alignment
revit.elements.textnote.height
get height
revit.elements.textnote.typename
get typename
revit.elements.textnotetype.byname
select a modeltexttype from the current document by name
revit.elements.textnotetype.default
return a default textnotetype
revit.elements.floortype.name
the name of the floortype
revit.elements.floortype.byname
select a floortype from the document given
revit.elements.importinstance.path
gets file path of the sat file that represents the geometry of the specified importinstance element
revit.elements.importinstance.bysatfile
import geometry from a sat file. the sat file is assumed to be in feet.
revit.elements.importinstance.bygeometries
import a collection of geometry (solid, curve, surface, etc) into revit as an importinstance. this variant is much faster than importinstance.bygeometry as it uses a batch method.
revit.elements.importinstance.bygeometriesandview
import a collection of geometry (solid, curve, surface, etc) into revit views as an importinstance. this variant is much faster than importinstance.bygeometry as it uses a batch method.
revit.elements.importinstance.bygeometry
import a collection of geometry (solid, curve, surface, etc) into revit as an importinstance.
revit.elements.importinstance.bygeometryandview
import a collection of geometry (solid, curve, surface, etc) into revit views as an importinstance.
revit.elements.modeltext.text
the text of the modeltext element
revit.elements.modeltext.depth
the depth of the modeltext element
revit.elements.modeltext.position
the position of the modeltext element
revit.elements.modeltext.bytextsketchplaneandposition
create a modeltext element in the family document by providing the text, sketchplane element host, coordinates (within the plane of the sketchplane), the depth of the text, and the text type name
revit.elements.sketchplane.elementplanereference
get an element plane reference from a specified sketch plane
revit.elements.sketchplane.plane
gets the plane geometry of the specified sketch plane
revit.elements.sketchplane.byplane
make a revit sketchplane given a plane
revit.elements.modeltexttype.byname
revit.elements.structuraltype.beam
revit.elements.structuraltype.brace
revit.elements.structuraltype.column
revit.elements.structuraltype.footing
revit.elements.structuraltype.nonstructural
revit.elements.topography.points
the set of points from which this topographysurface is constructed.
revit.elements.topography.mesh
get the underlying triangular mesh from the topography
revit.elements.topography.bypoints
create a topography surface from a list of points.
revit.elements.form.byloftcrosssections
creates a form by lofting a nested list of curves
revit.elements.walltype.name
gets the name of the specified wall type
revit.elements.walltype.byname
select a walltype from the current document by name
revit.elements.family.types
symbols
obtain the familytypes from this family
revit.elements.family.name
the name of this family
revit.elements.family.byname
obtain a family from the current document given it's name
revit.elements.adaptivecomponent.type
revit.elements.adaptivecomponent.locations
revit.elements.adaptivecomponent.byparametersonface
create an adaptive component by uv points on a face.
revit.elements.adaptivecomponent.byparametersoncurvereference
create an adaptive component referencing the parameters on a curve reference
revit.elements.adaptivecomponent.bypoints
create a list of adaptive components from two-dimensional array of points
revit.elements.dividedpath.points
all points along the dividedpath.
revit.elements.dividedpath.bycurveanddivisions
creates a revit divided path on the given curve with specified amount of division
revit.elements.dividedpath.bycurvesanddivisions
creates a revit divided path on the given collection of curves with specified amount of division
revit.elements.dividedsurface.udivisions
number of divisions in u direction
revit.elements.dividedsurface.vdivisions
number of divisions in v direction
revit.elements.dividedsurface.rotation
rotation of the grid lines with respect to the uv parameterization of the face
revit.elements.dividedsurface.byfaceanduvdivisions
create a revit dividedsurface on a face given the face and number of divisions in u and v directon
revit.elements.dividedsurface.byfaceuvdivisionsandrotation
create a revit dividedsurface on a face given the face and number of divisions in u and v directon and the rotation of the grid lines with respect to the natural uv parameterization of the face
revit.elements.modelcurve.bycurve
construct a revit modelcurve element from a curve
revit.elements.modelcurve.referencecurvebycurve
revit.elements.floor.byoutlinetypeandlevel
create a revit floor given its curve outline and level
revit.elements.floor.points
revit.elements.floor.addpoint
revit.elements.floor.movepoint
move an existing point in the slab shape editor by an offset. behaves as moving a point manually in the slab shape editor.
revit.elements.grid.curve
get the underlying curve geometry from this element
revit.elements.grid.elementcurvereference
get a reference to the underlying curve geometry of this element
revit.elements.grid.byline
create a revit grid element in a project along a line.
revit.elements.grid.bystartpointendpoint
create a revit grid element in a project between two end points
revit.elements.grid.byarc
create a revit grid element in a project along an arc
revit.elements.structuralframing.location
gets curve geometry from location of the specified structural element
revit.elements.structuralframing.beambycurve
create a beam.
revit.elements.structuralframing.bracebycurve
create a brace.
revit.elements.structuralframing.columnbycurve
create a column.
revit.elements.wall.bycurveandheight
create a revit wall from a guiding curve, height, level, and walltype
revit.elements.wall.bycurveandlevels
create a revit wall from a guiding curve, start level, end level, and walltype
revit.elements.wall.byface
creates a wall following the geometry of a surface. walls by faces cannot be updated, any geometry change will create a new wall and delete the old one.
revit.views.areaplanview.bylevelandareascheme
create an area plan view at the given level.
revit.views.scheduleview.createschedule
create schedule by category, type and name.
revit.views.scheduleview.createareaschedule
create area schedule by area scheme and name.
revit.views.scheduleview.removefields
remove schedule field from schedule view.
revit.views.scheduleview.addfields
add field (column) to schedule view.
revit.views.scheduleview.export
export view schedule to csv, tsv etc.
revit.views.scheduleview.addfilters
add schedule filters to schedule view.
revit.views.scheduleview.clearallfilters
clear all schedule filters from schedule view.
revit.views.scheduleview.schedulefilters
schedule filters.
revit.views.scheduleview.fields
schedule fields.
revit.views.scheduleview.schedulablefields
schedulable fields.
revit.views.axonometricview.byeyepointandtarget
create a revit axonometric (isometric) view from an eye position and a target position.
revit.views.axonometricview.byeyepointtargetandelement
create a revit axonometric (isometric) view from an eye position and target position and element
revit.views.axonometricview.byeyepointtargetandboundingbox
create a revit axonometric (isometric) view from an eye position and target position and bounding box
revit.views.ceilingplanview.bylevel
revit.views.structuralplanview.bylevel
create a structural plan view at the given level.
revit.views.perspectiveview.byeyepointandtarget
create a revit perspective view from an eye position, a target position, and either an element or boundingbox.
revit.views.perspectiveview.byeyepointtargetandelement
create a revit perspective view from an eye position and target position and element
revit.views.perspectiveview.byeyepointtargetandboundingbox
create a revit perspective view from an eye position and target position and bounding box
revit.views.draftingview.byname
create a revit draftingview given it's name
revit.views.sheet.sheetname
get the sheetname of the sheet
revit.views.sheet.sheetnumber
get the sheetnumber of the sheet
revit.views.sheet.views
get the views on a sheet
revit.views.sheet.bynamenumbertitleblockandviews
create a revit sheet by the sheet name, number, a title block familytype, and a collection of views. this method will automatically pack the views onto the sheet.
revit.views.sheet.bynamenumbertitleblockandview
create a revit sheet by the sheet name, number, a title block familytype, and a collection of views. this method will automatically pack the view onto the sheet.
revit.views.sectionview.byboundingbox
create a revit viewsection by a bounding box
revit.views.sectionview.bycoordinatesystemminpointmaxpoint
creates a revit viewsection by a specified corrdinate system, minpoint and maxpoint
revit.application.document.activeview
get the active view for the document
revit.application.document.isfamilydocument
is the document a family?
revit.application.document.filepath
the full path of the document.
revit.application.document.current
get the current document
revit.application.document.location
latitude
longitude
extracts latitude and longitude from revit
revit.analysis.faceanalysisdisplay.byviewfacepointsandvalues
show a colored face analysis display in the revit view.
revit.analysis.pointanalysisdisplay.byviewpointsandvalues
show a colored point analysis display in the revit view.
revit.analysis.vectoranalysisdisplay.byviewpointsandvectorvalues
show a vector analysis display in the revit view.
archilab.revit.views.box placement types
box placement types
retrieve all available box placement types
archilab.revit.parameter.parameter groups
parameter groups
retrieve all available parameter groups.
archilab.revit.select.fill pattern target
fill pattern target
retrieve fillpatterntarget types.
archilab.revit.parameter.parameter types
parameter types
retrieve all available parameter types from revit project.
archilab.revit.printing.print range
print range
retrieve all available print ranges from revit project.
archilab.revit.schedule.fit direction type
fit direction type
retrieve all available fit direction types from revit project.
archilab.revit.views.image resolution
image resolution
retrieve all available image resolutions from revit project.
archilab.revit.views.zoom fit type
zoom fit type
retrieve all available zoom fit types from revit project.
archilab.revit.views.image file type
image file type
retrieve all available image file types from revit project.
archilab.revit.views.export range
export range
retrieve all available export ranges from revit project.
archilab.revit.printing.print settings
print settings
retrieve all available print settings from revit project.
archilab.revit.printing.view sets
view sets
retrieve all available view sets from revit project.
archilab.revit.schedule.schedule heading orientations
schedule heading orientations
retrieve all available heading orientation values from revit project.
archilab.revit.schedule.schedule horizontal alignment
schedule horizontal alignment
retrieve all available horizontal alignment types from revit project.
archilab.revit.schedule.horizontal alignment style
horizontal alignment style
retrieve all available horizontal alignment styles from revit project.
archilab.revit.schedule.vertical alignment style
vertical alignment style
retrieve all available vertical alignment styles from revit project.
archilab.revit.schedule.schedule sort order
schedule sort order
retrieve all available schedule sort order types from revit project.
archilab.revit.select.numeric rule evaluators
numeric rule evaluators
retrieve all available numeric rule evaluators.
archilab.revit.select.string rule evaluators
string rule evaluators
retrieve all available string rule evaluators.
archilab.maps.googlemaps.google map types
google map types
archilab.maps.googlemaps.google image formats
google image formats
archilab.revit.viewtemplates.view template parameters
view template parameters
retrieve all available built in view template parameters.
archilab.revit.select.filter numeric value rules
filter numeric value rules
retrieve all available filter numeric value rules.
archilab.revit.views.line styles
line styles
retrieve all available line styles.
archilab.revit.viewtemplates.view templates
view templates
retrieve all available view templates (except 3d view based due to dynamo limitation).
archilab.revit.workset.worksets
worksets
retrieve all available worksets.
archilab.revit.views.view type
view type
retrieve all available view types.
archilab.revit.views.phase filters
phase filters
retrieve all available phase filters.
archilab.revit.workset.workset kind
workset kind
retrieve all available workset kinds.
archilab.revit.workset.workset visibility
workset visibility
retrieve all available workset visibility settings.
archilab.revit.views.duplicate options
duplicate options
retrieve all available view duplication options.
archilab.http.http.method types
method types
retrieve all available http request types.
archilab.revit.units.unit systems
unit systems
retrieve all available unit systems.
archilab.revit.units.forge units
forge units
retrieve all available forge units.
archilab.revit.units.forge specs
forge specs
retrieve all available forge specs.
archilab.revit.revisions.revision number type
revision number type
retrieve all available revision number types.
archilab.revit.revisions.revision visibility
revision visibility
retrieve all available revision visibility.
archilab.revit.room.spatial element boundary locations
spatial element boundary locations
retrieve all available spatial element boundary locations.
archilab.core.maths.midpoint rounding types
midpoint rounding types
retrieve all available midpoint rounding types.
archilab.revit.grids.grid extent type
grid extent type
retrieve all available grid extent types.
archilab.core.strings.regex options
regex options
retrieve all available regex options.
archilab.revit.views.display styles
display styles
retrieve all available display styles.
archilab.revit.tags.tag modes
tag modes
retrieve all available tag modes.
archilab.revit.tags.tag orientations
tag orientations
retrieve all available tag orientations.
archilab.revit.tags.leader end conditions
leader end conditions
retrieve all available leader end conditions.
archilab.core.lists.dropdown > list
dropdown > list
do something.
archilab.core.lists.list selector
list selector
use this node to select multiple items from a list.
archilab.core.utilities.input toggle
input toggle
use this node to toggle the isinput for all nodes in the definition on/off.
archilab.core.lists.dropdown list selector
dropdown list selector
archilab.revit.parameter.get bipparameter name
get bipparameter name
allows you to select a builtinparameter name for use with getbuiltinparameter node.
archilab.revit.revisions.add revisions to sheet
this node will add specified revisions to a sheet. 
archilab.revit.parameter.add shared parameter to project
this node will add a parameter to shared parameter file and then add it to the project. 
archilab.revit.schedule.cell style settings
this node will generate a cell style settings that can be used to override cell properties. 
archilab.revit.parameter.change family type
changes family type of a family by passing in an element and type id of the type we want to change it to. 
archilab.core.lists.clear list
this node will remove all null and empty lists from any list. 
archilab.revit.analysis.color settings
this node creates color settings for the analysis visualization framework. 
archilab.revit.analysis.colored surface display style
this node will generate a colored surface display style from inputs of points, values, and instance surface for analysis to be aplied to. also, use color and legend settings (part of archi-lab package) to create style colors and visibility.
archilab.revit.analysis.colored surface settings
this node creates settings for the colored surface display style of the analysis visualization framework.
archilab.core.strings.contains
this node takes a list of strings and checks if any string contains a matching string from filter input. 
archilab.revit.tags.create annotation tag
this node will create an annotation tag at a given location, of given type and in a supplied view. if only single view is supplied then all tags will be created in that view. 
archilab.revit.select.current document
retrieves current document
archilab.revit.geometry.curve.level
this node will return a level that a given curve is located on. 
archilab.revit.tags.delete linked model keynote tags
deletes all keynote tags that are tagging elements in the linked model. if element in the linked model has a keynote assigned thus a keynote tag reads a proper value it will not be deleted. 
archilab.revit.geometry.delete unnamed reference planes
does just what the name says. 
archilab.core.lists.dispatch
works exactly like the dispatch component in grasshopper. input a list and a matching pattern of true/false to split list into two lists one containing all true arguments while other all false arguments. 
archilab.revit.doors.door set handing
determines door set handing (whether its a left or right handed door). input takes doors, and output will split them into two lists (right and left).
archilab.revit.elements.element ids
this node will query an element id that can be used with revit nodes. dynamo element id node returns integer value. 
archilab.revit.elements.element.isoftype
this nodes yields true or false, checking if input elements are of given element type.
archilab.revit.room.elements fom linked file in room
this node will check what elements from a linked model are inside of any of the rooms in the current model. 
archilab.revit.room.elements in room
this node will check if any of the elements are inside any of the supplied rooms. 
archilab.revit.room.elements in space
this node will take an input of spaces and elements and attempt to group all elements by room that it is located in. for elements that are placed by line and not a point, a mid point of line will be used to determine location. 
archilab.revit.sheets.elements on sheet
this node will return elements on sheet.
archilab.revit.views.export image by view
this node will export a list of views and save them as images (jpg, bmp etc).
archilab.revit.familyinstances.familyinstance.familytype
this node will return a  family type of a given family instance. if no family type can be assigned to a family then it will return null. 
archilab.revit.familyinstances.familyinstance.totaltransform
this node returns a total transform of a family instance.
archilab.revit.select.fill pattern
get fill pattern by name
archilab.revit.filledregions.filled region area
this node will query an area from the filled region
archilab.revit.filledregions.filled region boundary curves
this node will get the boundary curves for a filled region.
archilab.core.lists.filterbykeysandvalues
creates a dictionary from keys and values, then filters that dictionary by specified list of keys. 
archilab.revit.floors.floor.area
this node return floor area. 
archilab.revit.views.floorplan.byroom
this node takes input of a room and creates a floor plan view with crop box set around that room. 
archilab.revit.select.get all detail groups
this node will retrieve all instances of detail groups in the model.
archilab.revit.select.get all dimension styles
this node will query all of the available dimension styles (this includes linear as well as arc, circle etc). 
archilab.revit.select.get all elements from linked model
this node is based on code posted by julien benoit. big thanks to julien for sharing his work. this node will retrieve all elements of a given category from a given linked model. 
archilab.revit.select.get all keynote tags
selects all keynote tags instances in the model. 
archilab.revit.select.get all line styles
this node will return all available line styles.
archilab.revit.revisions.get all revisions
this node will return all revisions currently defined in the mode.
archilab.revit.viewports.get all viewport types
this node will retrieve all viewport types currently in the model. 
archilab.revit.parameter.get built in parameter
this node will take an input of a built in parameter name and element to return that parameters value. 
archilab.revit.select.get design options
queries all of the design options currently in the project.
archilab.revit.select.get filled regions
this node will query up all filled regions in the project as well as those in the active view only. 
archilab.revit.elements.get host element
this node will retrieve a host element from hosted element. ex. feed in door, get wall.
archilab.revit.select.get line style by name
this node will return a line style object by its name. line styles can be either drafting or model line property. 
archilab.revit.room.get rooms by level
filters rooms by level.
archilab.revit.tags.get tagged element id
retrives an element id from input of element tags. for example if wall tags are inputted it will return tagged wall ids.
archilab.revit.parameter.get type parameter
this node will retrieve a type parameter by its name.
archilab.revit.select.get unplaced groups
this node will retrieve all unplaced groups in the model.
archilab.revit.printing.get views from view set
this node will take a name of a view set and return views/sheet elements contained in it. 
archilab.core.geometry.group curves
this node will take any input of flat list of curves and group them into sublists containing "joinable" curves that is continous curves. they might form closed curves or open curves. use polycurve.byjoinedcurves to convert output groups of curves into single polycurves
archilab.revit.geometry.indexbydistance
this was stolen from dimitar. please see his description. 
archilab.revit.views.isolate in view
this node will take input of elements and a view to isolate selected elements in a view.
archilab.revit.schedule.key schedule
this node will take a key schedule, data and a list of parameters and populate it with infomation from data parameter. visit www.archi-lab.net for more information on how to prep this node for take off. 
archilab.revit.analysis.legend settings
this node sets all settings for the legend display with analysis visualization framework of revit. 
archilab.revit.levels.level.levelabove
this node takes an input of level and returns level above it. 
archilab.revit.printing.local printers names
this node will query all locally installed printers and return their names.
archilab.revit.analysis.marker settings
this node will generate analysisdisplaymarkerandtextsettings to be used with a marker analysis display style. inputs are: marker shape(circle, triangle, rectangle), marker size, show text (boolean), rounding, textdisplaymethod (show all, show none, show predefined). 
archilab.revit.analysis.marker&text display style
this node will take an input of points and a matching input of values to create analysis display style in revit. use legend, marker and color settings nodes to fully customize your display style. 
archilab.core.lists.mass addition
this node will attempt to sum all elements contained within it. 
archilab.revit.materials.material.importallfromproject
this node will import (copy) all materials from specified project into current model. by default it will not override existing materials. 
archilab.revit.materials.material.materialassetelement
this node retrieves a material asset element from material. if such is not defined it will return an invalid element id (-1)
archilab.revit.materials.material.setmaterialassetbyassetid
this node will set the material asset by asset id. please make sure that the two input lists match in length. 
archilab.revit.materials.material.setmaterialassetbymaterial
this node will copy a material asset element from source material to a list of target materials. it esentially makes all materials inherit its rendering appearance. useful for "clay" renderings. 
archilab.revit.views.new section box view by elements
this node will create new section box around specified elements and apply it to a new 3d view with a specified name. section box will be offset from the elements by a supplied offset values. 
archilab.revit.familyinstances.override fill pattern in view
overrides fill pattern of any element in an active view to specified fill pattern and color
archilab.core.lists.passthrough
ripped this off from clockwork. sorry andy.
archilab.revit.geometry.polycurve by profile family type
it takes an input of a profile family type and extract curves from it converting them to polycurves and curve segments for use in dynamo (sweeps).
archilab.revit.printing.print pdf
this node will allow you to initiate a printing routine in revit from a set of views/sheets, printer name, print settings and print range. 
archilab.core.geometry.remap uv domain
this node takes an input of a reference face and a list of uvs that get remapped into that face's uv domain. the output is a list of uv coordinates in that surface's domain. 
archilab.revit.revisions.remove revision from sheet
this node will remove specified revisions from a sheet.
archilab.revit.printing.rename files
this node will use an "identifier" to pick out files from a supplied directory to rename files to a new name supplied. please make sure to match list lengths of identifier and new name inputs.
archilab.revit.revisions.revision properties
this node will return some most common revision properties like description or issue date.
archilab.revit.room.room.boundaries
this node returns all room bounding curves and elements that generated them (walls, separation lines etc).
archilab.revit.room.roomboundaries.cleannulls
this node will take a set of room boundary curves and elements and remove nulls from element list while joining curves to mainatain matching list structure. 
archilab.revit.familyinstances.rotate family
this node will rotate a family in revit around a given axis by supplied angle (in radians). please remember that every time you run your definition it will rotate family by given angle every time. 
archilab.revit.schedule.schedule appearance
this node allows you to control the appearance of the schedule. for now it supports only title, header and body text type. 
archilab.revit.schedule.schedule formatting
this node will allow you to control schedule formatiing options like column width, whether a column is hidden, column heading etc. 
archilab.revit.schedule.schedule sorting grouping
this node will allow you to specify sorting/grouping parameters in schedule as well parameters like sorting order, whether its a footer or header. visit archi-lab.net for more information. 
archilab.revit.schedule.schedule title appearance
this node will override the appearance of the title. 
archilab.revit.select.select model lines by style
this node will select all model lines in the revit project by a line style name. 
archilab.revit.parameter.set builtin parameter
this node will take an input of a built in parameter name and set that parameter to given value for given elements. 
archilab.revit.parameter.set type parameter
this node will set a type parameter for an element.
archilab.core.strings.slice string
slices x number of leading or trailing characters from string (boolean true will slice from left while boolean set to false from right)
archilab.core.lists.split
this was stolen from dimitar's spring nodes package. sorry dimitar. i needed just one like it. 
archilab.core.strings.string from list
this node will take an input of a list or nested list and then join each element in a list with a given seperator while adding a suffix.
archilab.revit.structuralframing.structuralframing.beambycurve
this node will take an input of curves and attempt to make a structural framing member by type and level. 
archilab.revit.tags.tag host element
this node will retrieve an element that is hosting a given tag. 
archilab.revit.tags.tag text
this node will retireve a text content of a tag. 
archilab.revit.textnotes.textnote.byviewpointandtype
this node creates a unwrapped (single line) text note in a given view, at a given location with a given text note type style assigned. 
archilab.revit.geometry.transform origin
this node will query an element for its transform (coordinate system) and then return its origin point. 
archilab.revit.geometry.transform.topoint
this node takes a transform and an input point that will be translated by the transform. 
archilab.revit.viewports.viewport properties
this node will return certain properties from a viewport input. 
archilab.revit.walls.wall.exteriordirection
this node returns exterior direction of the wall as a vector.
clockwork.math.functions.+1
increments a value by 1
clockwork.math.functions.-1
decrements a value by 1
clockwork.revit.selection.collectors.all elements of category+
gets all placed elements of a given category in the model.
clockwork.revit.selection.collectors.all elements of family type+
unlike the built-in  node, this node retrieves all placed instances of a given loadable *or* system family type
clockwork.revit.selection.collectors.all families of category
gets all famiies of a given category in the model  (does *not *work for system families)
clockwork.revit.selection.collectors.all family types of category
gets all family types/symbols of a given category in the model.
clockwork.revit.selection.collectors.all intersecting elements of category by boundingbox
finds all elements that intersect the bounding box of a given element
clockwork.revit.selection.collectors.all intersecting elements of category by vector
finds all elements of a specified category that intersect with a list of vectors
clockwork.revit.selection.collectors.all placed family types of category
retrieves all family types of a given category that have *placed* instances
clockwork.revit.selection.collectors.all view-dependent family instances of category
gets all view-dependent family instances in a given view for a given list of categories - useful for finding annotation elements
clockwork.math.functions.almostzero
returns a feasable computational tolerance to zero (1.0e-9 or a billionth of 1) for use in calculations. more background info: https://github.com/dynamods/dynamo/issues/879
clockwork.list.generate.alphabeticalsequence.bynumber
creates a list of the first n letters of the alphabet  (where 1 = a, 2 = b, ... , 27 = aa, 28 = ab etc.).
clockwork.math.formulas.angle.byanglesum
computes the missing interior angle of a *planar* polygon based on a given list of all other interior angles. 
clockwork.math.formulas.angle.bylawofcosines
computes an angle of a triangle using the law of cosines. a is the opposite side of the triangle while b and c are the sides forming the angle.
clockwork.math.formulas.angle.bylawofsines
determines the angle of a triangle based on the law of sines. (alpha is the angle opposite side a and beta is the angle opposite side b...)
clockwork.math.formulas.angle.exteriorangle
computes the exterior angle of a given angle.
clockwork.geometry.abstract.vector.anglebisector.bypoints
retrieves the vector of an angle bisector at point b based on three points (a, b, c) that define the angle. 
clockwork.revit.elements.angulardimension.byelements
creates angular dimensions between elements. only works in project environment. attention: do not use in automatic mode.
clockwork.revit.application.application.basicfileinfo
retrieves basic information about a given revit file. 
please note: the savedinlaterversion property is only available when running the node in revit 2017 or later, it will return null in previous versions of revit.
clockwork.revit.application.application.version
retrieves the name, version and build of the current revit application.
clockwork.revit.elements.modelcurve.areaseparator.fromcurve
creates area separation lines from geometry curves. 
clockwork.revit.elements.array.associatedfamilyparameter
returns the associated family parameter of an array label (if any). please note: this node will only work in a family document!
clockwork.revit.elements.array.grouptype
returns the group type of a given array
clockwork.revit.elements.assembly.addmembers
adds any given elements to a given assembly.
clockwork.revit.elements.assembly.disassemble
disassembles an assembly and returns its members
clockwork.revit.elements.assembly.fromelements
creates an assembly from a list of elements
clockwork.revit.elements.assembly.members
retrieves the members of an assembly
clockwork.revit.elements.assembly.removemembers
removes any given elements to a given assembly.
clockwork.string.generate.binary.frombooleans
creates a binary string from a list of booleans
clockwork.string.generate.binary.fromdecimal
converts a number to a string of its binary value
clockwork.string.generate.binary.tobooleans
converts a binary string to a list of booleans
clockwork.string.generate.binary.todecimal
converts a string of a binary number into a decimal value
clockwork.list.inspect.booleans.anyfalse
returns true if any item in a list of booleans is false.
clockwork.list.inspect.booleans.anytrue
returns true if any item in a list of booleans is true.
clockwork.list.inspect.booleans.countblocks
retrieves the lengths of uninterrupted sequences of booleans (true or false) in a given list.
clockwork.geometry.abstract.boundingbox.fromboundingboxes
merges a list of bounding boxes into a single bounding box
clockwork.revit.conversion.boundingbox.fromdynamoboundingbox
turns a dynamo bounding box into a revit bounding box.
clockwork.geometry.abstract.boundingbox.perimetercurvesbynormal
returns the perimeter curve of a bounding box on a plane determined by a given normal and the centroid of the bounding box
clockwork.geometry.abstract.boundingbox.perimetercurvesonplane
returns the perimeter curve of a bounding box on a given plane (assuming that the bounding box and plane intersect)
clockwork.geometry.abstract.boundingbox.properties
retrieves the centroid, width, depth and height of a given bounding box
clockwork.geometry.shapes.buckyball.byoriginandradius
returns all the data necessary for modeling a truncated icosahedron (vertices and struts) as well as the surface area and volume. 
clockwork.revit.selection.miscellaneous.builtincategory.byname
looks up all the built-in categories based on a given name (or part of a name) of the category. search is case-insensitive.
clockwork.revit.selection.miscellaneous.builtinparameter.byname
looks up all the built-in parameters based on a given name (or part of a name) of the parameters. search is case-insensitive.
clockwork.revit.elements.category.material
retrieves the material assigned to the given category in the object styles
clockwork.revit.elements.category.subcategories
retrieves all the subcategories for a given category
clockwork.revit.elements.category.type
returns the type of the category
clockwork.string.generate.character.fromnumber
converts a number into a character (where 1 = a, 2 = b, ... , 27 = aa, 28 = ab etc.).
clockwork.string.generate.character.tonumber
converts an excel-style character to a number (e.g. a = 1, aa = 27 etc.).
clockwork.importexport.clipboard.getfrom
gets the content of the clipboard. attention: will only work with strings.
clockwork.importexport.clipboard.sendto
copies a string to the clipboard. 
clockwork.display.color.aqua
returns the colour aqua.
clockwork.display.color.black
returns the colour black.
clockwork.display.color.blue
returns the colour blue.
clockwork.display.color.byname
returns the color that corresponds to the given name (look here for a list of defined colors: https://docs.microsoft.com/en-us/dotnet/api/system.drawing.knowncolor?view=netframework-4.7.2).
clockwork.display.color.bywebcolor
creates a color from a given web color (a hex triplet like #ff9900)
clockwork.revit.conversion.color.fromdynamocolor
creates a revit color from a dynamo color
clockwork.display.color.fuchsia
returns the colour fuchsia a.k.a. magenta.
clockwork.display.color.green
returns the colour green.
clockwork.display.color.grey
returns the colour grey.
clockwork.display.color.greyscalebynormalizedvalue
creates a greyscale color based on a normalized value (0 = black, 1 = white)
clockwork.display.color.lime
returns the colour lime.
clockwork.display.color.maroon
returns the colour maroon.
clockwork.display.color.name
retrieves the name of a color (if it has a name).
clockwork.display.color.navy
returns the colour navy.
clockwork.display.color.olive
returns the colour olive.
clockwork.display.color.purple
returns the colour purple.
clockwork.display.color.red
returns the colour red.
clockwork.display.color.silver
returns the colour silver.
clockwork.display.color.teal
returns the colour teal.
clockwork.revit.conversion.color.todynamocolor
converts revit colors into dynamo colors
clockwork.display.color.white
returns the colour white.
clockwork.display.color.yellow
returns the colour yellow.
clockwork.geometry.tesselation.convexhull.2dbyuv
computes the convex hull of a given set of uv coordinates based on the monotone chain algorithm
clockwork.revit.elements.curtainpanel.hostpanel
retrieves the host panel of a given curtain panel. this is typcially needed when wanting to access wall elements used as curtain panels. if no host panel is found, the node will return the input panel instead.
clockwork.revit.elements.curtainpanel.isphantompanel
checks whether a given curtain panel is not an actual model element. (these types of objects get generated when curtain grid segments are deleted or in other words when multiple cells of the curtain grid are merged into one panel)
clockwork.geometry.curves.curve.closedloopthroughpoints
creates a *closed* loop of curves based on a given list of points
clockwork.importexport.customnode.properties
extracts information from a custom node.
clockwork.importexport.data.exportcsv+
writes data to a csv file with a custom delimiter. data inputs needs to contain strings only!
clockwork.importexport.data.importcsv+
converts the content of a given csv file to a list
clockwork.input.datetime.calendarweek
retrieves the calendar week for the given date
clockwork.input.datetime.isearlier
determines if a given date and time are earlier than another given date and time.
clockwork.input.datetime.islater
determines if a given date and time are later than another given date and time.
clockwork.revit.elements.designoption.designoptionset
returns the design option set of a given design option
clockwork.revit.elements.designoption.isprimary
determines whether a given design option is the primary option in its set
clockwork.revit.elements.detailcomponent.bycurve
places a line-based detail component in a given view
clockwork.revit.elements.detailcurve.bycurve+
creates a detail line based on a given curve. unlike the ootb node it can also draw circles.
clockwork.revit.elements.dimension.associatedfamilyparameter
returns the associated family parameter of a dimension label (if any). please note: this node will only work in a family document!
clockwork.revit.elements.dimension.referencedelements
returns all elements that are referenced by a given dimension
clockwork.revit.elements.dimension.settype
changes the dimension type of a given dimension instance to the specified type
clockwork.revit.elements.directshape.fromrevitgeometry
creates a directshape from native revit geometry objects
clockwork.revit.units.displayunit.tointernalunit
converts a value from a given display unit to revit's internal unit
clockwork.revit.elements.dividedsurface.addintersect
adds an intersect to a divided surface
clockwork.revit.elements.dividedsurface.evaluategridnodes
returns uv and xyz coordinates as well as surface normals for all grid nodes of a given divided surface. also returns the underlying face.
clockwork.revit.elements.dividedsurface.horizontalintersectsbyendpoints
creates a number of equally spaced horizontal intersects for a divided surface based on the path between between two points. 
clockwork.revit.elements.dividedsurface.horizontalintersectsbyendpointsandfunction
creates a number of horizontal intersects (levels)for a divided surface based on the path between two points. the spacing of the intersects can be controlled by a function.
clockwork.revit.elements.dividedsurface.verticalintersectsbyendpoints
creates a number of equally spaced vertical intersects for a divided surface based on the path between between two points. you may need to switch start point and end point.
clockwork.revit.elements.dividedsurface.verticalintersectsbyendpointsandfunction
creates a number of vertical intersects (reference planes) for a divided surface based on the path between between two points. the spacing can be controlled by a function. you may need to switch start point and end point.
clockwork.revit.application.document.activeviewfromcurrentdocument
gets the active view of the current document
clockwork.revit.application.document.addlink
adds a link to a model to the current document
clockwork.revit.application.document.builtincategories
list all the available builtincategories
clockwork.revit.application.document.builtinparameters
list all the available builtinparameters
clockwork.revit.application.document.containselementsofcategory
checks if family instances of specified categories are present in the model.
clockwork.revit.application.document.default3dview
returns the default 3d view of the current model (if there is such a view)
clockwork.revit.application.document.designoptions
returns all design options in the model, grouped by design option set
clockwork.revit.application.document.elementtypes
retrieves a list of all revit element types
clockwork.revit.application.document.enums
retrieves all enums from the revit api
clockwork.revit.application.document.isworkshared
returns true if the current project is workshared
clockwork.revit.application.document.loadfamily
a very crude implementation of family loading. will *not* reload an already loaded family of the same name.
clockwork.revit.application.document.performanceadviserrules
retrieves all performance adviser rules from the current document
clockwork.revit.application.document.phases
retrieves all phases in the active document in *chronological* order
clockwork.revit.application.document.projectinfo
gets the project information.
clockwork.revit.application.document.projectparameters
retrieves all project parameters and the categories they have been assigned to
clockwork.revit.application.document.projectparametersbycategory
retrieves all project parameters for a given category
clockwork.revit.application.document.projectposition
gets the project's position data relative to the origin. output coordinates may diverge from the project base point coordinates once the project base point has been moved in an unclipped state. use the built-in nodes location.latitude & location.longitude to retrieve latitude and longitude.
clockwork.revit.application.document.saveas
saves the active revit document under the given name.
clockwork.revit.application.document.startingview
retrieves the starting view of a project file. returns null if no starting view is set.
clockwork.revit.application.document.synchronizewithcentral
synchronizes a workshared model with the central model.
clockwork.revit.application.document.unittypes
retrieves all available unit types of a given document
clockwork.revit.application.document.views
gets all views in the document - except for 3d view templates (as long as this bug is not fixed: https://github.com/dynamods/dynamo/issues/2970)
clockwork.revit.application.document.worksets
returns all worksets in the current document
clockwork.revit.elements.door.rooms
gets the rooms that are connected by a given door
clockwork.environment.dynamo.version
retrieves the version of the active dynamo application
clockwork.revit.elements.element.allinstances
retrieves all instances of a given element
clockwork.revit.elements.element.allinstancesatlevel
retrieves all instances of an element on a given level
clockwork.revit.elements.element.allviewdependentinstances
retrieves all instances of a view-dependent element in a given view
clockwork.revit.elements.element.area
returns the area property of a given element (if that element has such a property)
clockwork.revit.elements.element.associatedfamilyparameters
returns the associated family parameters of an element in a family (and the respective element parameters). please note: this node will only work in a family document!
clockwork.revit.selection.miscellaneous.element.byid
gets the revit element(s) for a list of ids (or a single id). optionally retrieves elements from linked documents as well.
clockwork.revit.elements.element.category+
returns the category of a given element. unlike the ootb node element.getcategory, it will work for subcategories, families, family documents, schedules, subcategories and graphics styles as well.
clockwork.revit.elements.element.containstransparentmaterials
checks if a given element contains transparent materials.
clockwork.revit.elements.element.copybyvector
copies an element or a list of elements by a given vector.
clockwork.revit.elements.element.copytolevel
copies an element or a list of elements to a given level. preserves the element's transform. please note: this node only works for levels that have at least one view (e.g. floor plan) associated with them.
clockwork.revit.elements.element.curtaingridlines
retrieves the grid lines of curtain walls, curtain systems or glazed roofs. 
clockwork.revit.elements.element.cutgeometry
adds a solid-solid cut for two model elements (if possible). 
clockwork.revit.elements.element.dependentelements
returns all elements that, from a logical point of view, are the children of this element. 
clockwork.revit.elements.element.elementtype+
gets the family type of a given element (if applicable). unlike the ootb node, it also works for elements in linked models.
clockwork.revit.elements.element.elevationofhostlevel
returns the elevation of the level a given element is associated with
clockwork.revit.elements.element.externalfilereferencepath
returns the full path of an element's external file reference as as string
clockwork.revit.selection.byface.element.fromdynamosurface
returns the underlying revit element of a given face
clockwork.revit.elements.element.geometry+
returns dynamo and native revit geometry of a given element
clockwork.revit.elements.element.group
retrieves the group an element belongs to (if any)
clockwork.revit.elements.element.host+
gets an element's host. unlike the ootb node familyinstance.gethost it not only works for family instances but also for elements like wall sweeps, foundations, railings, builing pads and topo subregions.
clockwork.revit.elements.element.id+
gets the id of a given revit elements. unlike the ootb element.id node, this node also works on mixed lists of revit elements and categories.
clockwork.revit.elements.element.inserts
gets all the objects inserted into a given element.
clockwork.revit.elements.element.isofcategory
checks whether an element is of a specified category
clockwork.revit.elements.element.isrelatedtomass
returns true if an object (wall, roof, floor or curtain system) has been modelled by face and the underlying mass still exists in the project.
clockwork.revit.elements.element.joingeometry
joins two model elements (if possible). only works inside the project environment.
clockwork.revit.elements.element.level
gets an element's level
clockwork.revit.elements.element.location+
returns the location of an element as point, curve or curve loop, along with some booleans to help filtering the results. unlike the ootb element.getlocation node, it also retunrs sketch lines of sketch-based elements like floor slabs as well as the element's rotation property.
clockwork.revit.elements.element.materials+
retrieves all materials from a given element. unlike the ootb node element.getmaterials, it also retrieves qto information.
clockwork.revit.elements.element.mirror
mirrors an element about a given plane.
clockwork.revit.elements.element.name+
gets an element's name. unlike the ootb node, this node should work for all revit elements that have names and will also return the localized names of system parameters, parameter groups, display unit types, parameter types, unit symbol types and unit types.
clockwork.revit.elements.element.ownerview
gets the owner view of a given revit element (if possible)
clockwork.revit.elements.element.panels
retrieves the panels nested in a curtain wall, curtain system or glazed roof. 
differences to ootb node curtainpanel.byelement:
- returns embedded walls
- panels of curtain systems and glazed roofs are returned in a nested list, with one sublist for each face of the curtain system. 
please note: will not work for glazed roofs created by roofbyface method.
clockwork.revit.elements.element.parameterexists
checks if an element contains a parameter of a given name
clockwork.revit.elements.element.phases
gets the created and demolished phases of an element
clockwork.revit.elements.element.setmaterialparameterbycategory
sets a material parameter of a given element to <by category>
clockwork.revit.elements.element.setname
gets the name of a given revit element
clockwork.revit.elements.element.setsubcategory
assigns the given element(s) to the specified subcategory. the node should work for all geometry and curve elements. in some cases the graphicsstyletype (cut = true, projection = false) needs to be specified.
clockwork.revit.elements.element.setworkset
sets the workset of a given element
clockwork.revit.elements.element.subcomponents
retrieves all subcomponents of a given family instance
clockwork.revit.elements.element.supercomponent
retrieves the supercomponent of a given family instance, hand rail, top rail, stair component or beam in a beam system.
clockwork.revit.elements.element.workset
retrieves the workset of a given element
clockwork.revit.selection.filters.elements.filterbyname
retrieves those elements from a collection whose names match the search string
clockwork.revit.selection.filters.elements.filterbyparametervalueandcondition
retrieves those elements from a collection whose parameter value matches the defined condition
clockwork.revit.selection.miscellaneous.elementtype.byname
retrieves an element type by its name  - to be used with the ootb node "all elements of type".
clockwork.revit.elements.elevationmarker.views
retrieves all views referenced by a given elevation marker
clockwork.revit.elements.enum.values
returns the keys and values of a given revit enum
clockwork.revit.elements.family.hasroomcalculationpoint
determines whether the given family has the room calculation point activated.
clockwork.revit.elements.family.hostingbehavior
returns the expected host class of a family (if any)
clockwork.revit.elements.family.isinplace
determines if a family is an in-place family
clockwork.revit.elements.family.placementtype
clockwork.revit.application.familydocument.currentfamilytype
retrieves the current family type from the active family document. please note: this node will only work in a family document!
clockwork.revit.application.familydocument.familyparameters
retrieves all family parameters from the active family document. please note: this node will only work in a family document!
clockwork.revit.application.familydocument.familytypes
retrieves all family types from the active family document. please note: this node will only work in a family document!
clockwork.revit.elements.familyinstance.addcoping
adds a coping (cut) to a steel beam
clockwork.revit.elements.familyinstance.bycurve
places a line-based family instance on a given level
clockwork.revit.elements.familyinstance.bypointinview
places a family instance at a given point in a given view (e.g. a detail component).
clockwork.revit.elements.familyinstance.copingelements
returns all elements used as coping cutters for a given element.
clockwork.revit.elements.familyinstance.flipfacingorientation
flips the facing orientation of a given family instance
clockwork.revit.elements.familyinstance.flipfromtoroom
flips the settings of "from room" and "to room" for any given door or window instance. please note: will not work on door or window families with an activated room calculation point.
clockwork.revit.elements.familyinstance.fliphandorientation
flips the hand orientation of a given family instance
clockwork.revit.elements.familyinstance.handorientation
gets the hand orientation of a hosted object (e.g. a window or a door)
clockwork.revit.elements.familyinstance.ismirrored
checks if a family instance is mirrored
clockwork.revit.elements.familyinstance.removecoping
removes a coping (cut) from a steel beam
clockwork.revit.elements.familyinstance.setlevel
sets the level property of a family instance. family instance will move accordingly.
clockwork.revit.elements.familyinstance.settype
changes the family type of a given family instance to the specified type
clockwork.revit.elements.familyparameter.makeinstance
converts a type parameter to an instance parameter. attention: only works in a family document.
clockwork.revit.elements.familyparameter.maketype
converts an instance parameter to a type parameter. attention: only works in a family document.
clockwork.revit.elements.familyparameter.properties
retrieves all properties of a given family parameter. please note: this node will only work in a family document!
clockwork.revit.elements.familyparameter.setformula
sets the formula for a given family parameter. attention: will only work if family contains at least one family type.
clockwork.revit.elements.familytype.compoundstructurehasvariablelayer
checks if the compound structure of a given floor or roof type contains a variable layer.
clockwork.revit.elements.familytype.compoundstructurelayers
retrieves the compound layers of any layered family type (wall types, roof types, floor types etc.)
clockwork.revit.elements.familytype.duplicate
duplicates a family type
clockwork.revit.elements.familytype.familyname
returns the *family* name of a given family *type*
clockwork.revit.elements.familytype.function
retrieves the function property of a given family type (if it has that property)
clockwork.revit.elements.familytype.setcompoundlayermaterial
sets the material of a specified compound layer of a given family type (only applies to family types that have a compound structure, e.g. walls, floors etc.).
clockwork.revit.elements.familytype.setcompoundlayerwidth
sets the width of a specified compound layer of a given family type (only applies to family types that have a compound structure, e.g. walls, floors etc.).
clockwork.list.generate.fibonaccisequence.fromlist
creates a fibonacci row from a starting list (last two values) of a given length (starting values do *not* count toward length).
clockwork.list.generate.fibonaccisequence.fromvalues
creates a fibonacci row from two starting values of a given length (starting values do *not* count toward length).
clockwork.importexport.filesystem.filecreated
returns the date and time a given file was created
clockwork.importexport.filesystem.filelastaccessed
returns the date and time a given file was last accessed
clockwork.importexport.filesystem.filelastmodified
returns the date and time a given file was last modified
clockwork.importexport.filesystem.filesize
returns the file size of a given file.
clockwork.revit.elements.filledregiontype.fillpatterns
returns the fill pattern(s) of a given filled region type. in revit versions prior to 2019 the background fill pattern will always return null.
clockwork.revit.elements.fillpatternelement.issolidfill
checks if the given fillpatternelement is a solid fill
clockwork.revit.elements.floor.resetslabshape
resets the slabshape of a floor
clockwork.revit.elements.floor.slabshapebypoints
transform a slab shape based on a list of points
clockwork.revit.elements.floor.slabshapehasbeenmodified
checks if the shape of a floor slab has been modified with the shape editing tools
clockwork.revit.elements.footingtype.breaksatinserts
determines whether a list of wall footing types break at inserts in their attached walls
clockwork.geometry.modifiers.geometry.closestto
finds the closest entity in a list of geometric entities from another given entity
clockwork.geometry.modifiers.geometry.furthestfrom
finds the furthest entity in a list of geometric entities from another given entity
clockwork.geometry.tesselation.paneling.grid.fromface
returns uv coordinates, xyz coordinates and normals for a face with uv subdivision
clockwork.geometry.tesselation.paneling.grid.invertandmirrornormalizedvalues
inverts and mirrors (horizontally & vertically) a nested list of normalized values.
clockwork.revit.elements.grid.plane
retrieves the plane of a grid. returns null for curved grid lines.
clockwork.revit.elements.group.fromelements
creates a group from a list of revit elements
clockwork.revit.elements.group.ismirrored
checks if a list of group instances have been mirrored. the reference group should usually be the first placed instance of the group (since that one has likely not been mirrored).  the node will return null for group instances of other group types than the reference group as well as for group instances with excluded members. furthermore, it will return null for *all* groups if the reference group itself has excluded members or if it doesn't contain any loadable families (since they are the only way of determining if the group instance has been mirrored). the node will likely report null for group instances where members have been excluded but subsequently been restored.
clockwork.revit.elements.group.members
retrieves the members of a group
clockwork.revit.elements.group.ungroup
ungroups a group and returns a boolean  and the ungrouped elements. returning the ungrouped elements can be turned off for two reasons: 1.) better performance when dealing with large numbers of groups. 2.) circumventing a bug where dynamorevit will fail to instantiate textnote elements contained in detail groups when run on top of non-english revit.
clockwork.revit.elements.grouptype.groups
returns all group instances of a given group type
clockwork.string.generate.hex.fromdecimal
converts a number to a string of its hexadecimal value
clockwork.string.generate.hex.todecimal
converts a string of a hexadecimal value to a number
clockwork.revit.elements.importinstance.islinked
determines whether an importinstance is linked or not
clockwork.revit.units.internalunit.todisplayunit
converts a value from revit's internal unit to a given display unit
clockwork.math.tests.isevennumber
checks if a number is even.
clockwork.math.tests.ismultipleof
checks if a is a multiple of b.
clockwork.math.tests.isoddnumber
checks if a number is odd.
clockwork.math.tests.issimilar
computes the difference between two values and whether that difference is within a given tolerance factor
clockwork.revit.elements.level.plane
retrieves the plane of a given level
clockwork.revit.elements.level.views
returns all views associated with a given level
clockwork.list.modify.list.chop+
turns a list into a list of lists with sublists of varying lengths. unlike the ootb node, it can generate empty sublists as well.
clockwork.list.inspect.list.countoccurences
counts the number of occurences of each unique element in a given list
clockwork.list.modify.list.droplastitem
drops the last item from a given list.
clockwork.list.match.list.equalsublistlengths
trims all given lists to the length of the shortest list
clockwork.list.modify.list.filterbysublistlength
filters out all sublists that do not have the specified length
clockwork.list.organize.list.grouplistoflistsbykey
groups a list of lists by one of its keys
clockwork.list.inspect.list.isnotempty
just the inversion of the built-in is empty list node.
clockwork.list.organize.list.joinbykey
joins two lists by common keys.
clockwork.list.organize.list.matchwithkeyvalues
matches a list with a given set of keys and returns the values corresponding to the keys
clockwork.list.modify.list.replaceemptylists
replaces all empty lists within a given list with a substitute
clockwork.list.modify.list.replaceitematindex+
replaces the item at a given index of a list by another item. unlike the ootb node, it can replace items at multiple indeces.
clockwork.list.modify.list.replacenull
replaces all null values within a given list with a substitute
clockwork.list.organize.list.sortlistoflists
sorts a list of lists by one of its sublists
clockwork.list.generate.list.withleadingzeroes
adds leading zeros to a sequence of numbers
clockwork.revit.elements.massfloor.mass
gets the mass a given mass floor belongs to
clockwork.revit.elements.material.assets
retreives all assets from a given material
clockwork.revit.elements.material.duplicate
duplicates a material
clockwork.geometry.meshes.mesh.facevertices
gets the vertices of each face of a given mesh
clockwork.geometry.meshes.mesh.intersectwithplane
calculates the intersection of a mesh and a plane
clockwork.revit.elements.modelcurve.type
gets the type of a given model curve
clockwork.string.generate.morse.fromalphanumeric
converts an alphanumeric string to morse code
clockwork.string.generate.morse.toalphanumeric
converts a string in morse code to alphanumeric
clockwork.math.functions.normalization.invertnormalized
inverts a value between 0 and 1 to its opposite (1-x)
clockwork.math.functions.normalization.normalize
converts a value into a normalized value according to a value range
clockwork.math.functions.normalization.normalizerange
normalizes a range of numbers
clockwork.math.functions.normalization.scalenormalized
scales a normalized value according to a given minimum and maximum
clockwork.list.generate.normalizedsequence.byfunction
creates a sequence of n values between 0 and 1 driven by a function
clockwork.list.generate.normalizedsequence.bynumber
creates a sequence of n values between 0 and 1
clockwork.input.object.members
gets a list of all members (properties and methods) of a selected element
clockwork.input.object.membersbyname
looks up all the members of a given element based on a given name (or part of a name) of the property or method. search is case-insensitive.
clockwork.revit.elements.parameterelement.setallowvarybetweengroups
lets you define whether or not the values of a given project parameter can vary across group members. 
clockwork.revit.elements.part.sourceelement
retrieves the element a given part was made from
clockwork.script.controlflow.passthrough
forces a sequential order of execution. the node wired into the output of the passthrough node will be executed *after* the node wired into the waitfor input (e.g. important for some revit operations). the value of the passthrough input will be passed on to the node wired into the output port of the passthrough node.
clockwork.math.graphs.pathgraph.allpaths
finds all possible paths between two nodes.  the connections input expects a list of value pairs.
clockwork.math.graphs.pathgraph.bypairs
builds a path graph (python dictionary) from a list of value pairs.
clockwork.math.graphs.pathgraph.shortestpath
finds the shortest path (fewest steps) between two nodes. the connections input expects a list of value pairs.
clockwork.geometry.tesselation.paneling.pattern.hexagonal
creates groups of points from a list of uvs or xyzs for the placement of hexagonal panels. the placement pattern can be reversed (boolean) and shifted (integer).
clockwork.geometry.tesselation.paneling.pattern.quadrilateral
creates groups of points from a list of uvs or xyzs for the placement of quadrilateral panels. the placement pattern can be reversed (boolean) and shifted (integer).
clockwork.geometry.tesselation.paneling.pattern.quadrilateral2byx
creates groups of points from a list of uvs or xyzs for the placement of quadrilateral panels that have more than 4 placement points (e.g. bent panels). the placement pattern can be reversed (boolean), rotated (boolean) and shifted (integer).
clockwork.geometry.tesselation.paneling.pattern.quadrilateralalternatingrows
creates groups of points from a list of uvs or xyzs for the placement of quadrilateral panels in alternating rows. the placement pattern can be reversed (boolean) and shifted (integer).
clockwork.geometry.tesselation.paneling.pattern.quadrilateralcheckerboard
creates groups of points from a list of uvs or xyzs for the placement of quadrilateral panels in a checkerboard pattern. the placement pattern can be reversed (boolean) and shifted (integer).
clockwork.geometry.tesselation.paneling.pattern.triangularflatdiagonal
creates groups of points from a list of uvs or xyzs for the placement of triangular panels. the placement pattern can be reversed (boolean) and shifted (integer).
clockwork.geometry.tesselation.paneling.pattern.triangularflatmirrored
creates groups of points from a list of uvs or xyzs for the placement of triangular (diagrid) panels. the placement pattern can be reversed (boolean) and shifted (integer).
clockwork.revit.views.perspectiveview.orienttoeyeandtargetposition
sets the orientation of a given perspective view based on a given eye and target position. view needs to be in an unlocked state.
clockwork.geometry.abstract.plane.bybestfitfromface
creates a plane from face
clockwork.geometry.abstract.plane.byfirst3points
returns a plane, its origin and its normal based on the first three xyzs in a given list
clockwork.geometry.abstract.plane.iscoplanarwithplane
checks if a given plane is coplanar with another plane
clockwork.revit.views.planview.underlay
returns the underlay(s) of a given plan view
clockwork.geometry.points.point.average
determines the average of a list of points
clockwork.geometry.points.point.centralprojectiononface
projects a list of points onto a given face
clockwork.geometry.points.point.centralprojectiononplane
projects a list of points onto a given plane
clockwork.geometry.points.point.isoutofplane
checks a list for xyzs that are not located on a given plane
clockwork.geometry.points.point.rounddowntoprecision
rounds a point coordinate *down* to a specified precision
clockwork.geometry.points.point.roundtoprecision
rounds a point coordinate to a specified precision
clockwork.geometry.points.point.rounduptoprecision
rounds a point coordinate *up* to a specified precision
clockwork.geometry.points.pointsequence.accumulateddistance
retrieves the accumulated distances of a sequence of points
clockwork.geometry.points.pointsequence.containsoutofplanepoints
clockwork.geometry.points.pointsequence.greatestdistancetopoint
retrieves the furthest point in a sequence of points
clockwork.geometry.points.pointsequences.shortestpath
retrieves the shortest path from a number of point sequences
clockwork.list.generate.randomlist.aselements
creates a list of random elements based on a given list of elements
clockwork.list.generate.randomlist.asintegers
creates a list of random integers between 0 and a given maximum value
clockwork.string.inspect.regex.compileregularexpression
this is a helper node for setting certain flags for the regular expresssion nodes.
http://ironpython-test.readthedocs.org/en/latest/howto/regex.html
clockwork.string.inspect.regex.containsregularexpression
determines if a regular expression matches a string (or a list of strings), i.e. occurs anywhere in the string, and returns a boolean value (or a list, depending on the input). the syntax for regular expressions is explained at
http://ironpython-test.readthedocs.org/en/latest/howto/regex.html
clockwork.string.inspect.regex.findregularexpression
returns all occurences of a regular expression within a string (or list of strings). the syntax for regular expressions is explained at
http://ironpython-test.readthedocs.org/en/latest/howto/regex.html
clockwork.string.modify.regex.replaceregularexpression
replaces all occurences of a regular expression within a given string (or list of strings) with another string. the syntax for regular expressions is explained at
http://ironpython-test.readthedocs.org/en/latest/howto/regex.html
clockwork.string.modify.regex.splitbyregularexpression
splits a given string by a regular expression. the syntax for regular expressions is explained at
http://ironpython-test.readthedocs.org/en/latest/howto/regex.html
clockwork.string.inspect.regex.startswithregularexpression
determines if a string starts with the regular expression and returns a boolean value (or a list, depending on the input). the syntax for regular expressions is explained at
http://ironpython-test.readthedocs.org/en/latest/howto/regex.html
clockwork.script.controlflow.returnlistorsinglevalue
if the unknown item is not a list but rather a single item, only the first item of the list (input "seq") will be returned.
clockwork.revit.elements.revisioncloud.fromelements
create a revision cloud for a list of revit elements
clockwork.revit.selection.byface.revitface.fromdynamosurface
returns the underlying revit face of a given surface
clockwork.revit.selection.byface.revitfacereference.fromdynamosurface
returns the underlying revit face reference of a given surface
clockwork.revit.elements.revitlinktype.attachmenttype
returns the attachment type of a revitlinktype
clockwork.revit.elements.revitlinktype.pathtype
returns the path type of a revitlinktype
clockwork.revit.elements.revitlinktype.reload
reloads a revit or ifc link.
clockwork.revit.elements.revitlinktype.unload
unloads a revit or ifc link
clockwork.revit.elements.roof.creationmethod
retrieves the creation method of a given roof
clockwork.revit.elements.roof.kind
retrieves the roof kind (basic, glazed, other). please note: roofs that were created by face will be identified as 'other'
clockwork.revit.elements.roof.resetslabshape
resets the slabshape of a roof
clockwork.revit.elements.roof.slabshapebypoints
transform a slab shape based on a list of points.
clockwork.revit.elements.roof.slabshapehasbeenmodified
checks if the shape of a roof slab has been modified with the shape editing tools
clockwork.revit.selection.miscellaneous.room.atpointinphase
tries to retrieve a room element at the given location for the given phase.
clockwork.revit.elements.room.boundaries
gets a list of all boundaries of a given room or area and a corresponding list of the elements that are generating those boundaries.
clockwork.revit.elements.room.doors
retrieves all doors that are associated with a room (hosted in walls and roofs).
clockwork.revit.elements.room.finishes
returns all room bounding faces and their materials
clockwork.revit.elements.room.insertsofboundaries
retrieves the inserts of the bounding elements of a given room.
clockwork.revit.elements.room.insertsofboundariesbycategory
retrieves the inserts of the bounding elements of a given room - filtered by a given category.
clockwork.revit.elements.room.state
returns the state of a room, i.e. is it placed, unplaced, redundant or not enclosed.
clockwork.revit.elements.room.unplacedbynameandnumber
creates an unplaced room
clockwork.revit.elements.room.windows
retrieves all windows that are associated with a room (hosted in walls and roofs).
clockwork.revit.elements.modelcurve.roomseparator.fromcurve
creates room separation lines from geometry curves. 
clockwork.revit.elements.roomsequence.todoorsequence
retrieves a sequence of doors connecting a given sequence of rooms (if possible)
clockwork.revit.elements.roomtag.room
returns the room of a given room tag
clockwork.revit.elements.roomtag.settype
changes the family type of a given room tag to the specified type
clockwork.math.functions.rounding.ceiling+
rounds a number *up* to a specified precision
clockwork.math.functions.rounding.floor+
rounds a number *down* to a specified precision
clockwork.math.functions.rounding.round+
rounds a number to a specified precision
clockwork.revit.views.schedule.keyscheduleparametername
if the schedule is a key schedule, the node returns the name of the key schedule parameter. 
clockwork.script.controlflow.scopeif+
a (hopefully) more robust implementation of scopeif. tests a single boolean and returns a value accordingly.
clockwork.revit.selection.selectionset.byelements
creates a selection set of the given elements. note that if a selection set of the given name already exists in the model, its contents will be replaced. also, if the selection set is already applied as a view filter, the view filter will have to be manually updated in the visibility / graphic overrides. do ***not*** use in automatic mode!
clockwork.revit.selection.selectionset.elements
retrieves all elements stored in a selection set
clockwork.revit.application.sharedparameterfile.parse
returns all parameters from a shared parameter file.
clockwork.revit.views.sheet.placeholderbynumberandname
creates placeholder sheets
clockwork.revit.views.sheet.scale
returns the scale of a given sheet
clockwork.revit.views.sheet.schedules
returns all schedules placed on a specified sheet 
clockwork.geometry.solids.solid.byunion+
the ootb node solid.byunion occasionally fails when trying to merge solids with almost adjacent faces. this node will return the minimum amount of joined solids possible in such cases instead of returning null.
clockwork.revit.elements.modelcurve.spaceseparator.fromcurve
creates space separation lines from geometry curves. 
clockwork.revit.elements.spotcoordinate.bypoint
places a spot coordinate at a given point in a given view. may not work in all view types.
clockwork.revit.elements.spotelevation.bypoint
places a spot elevation at a given point in a given view. may not work in all view types.
clockwork.string.modify.string.explode
chops up a string into a list of characters
clockwork.string.modify.string.replace+
replaces multiple items in a given string. items in the string have to be denoted as {0], {1}, ..., {n} - corresponding to the respective list index of the replacement string.
clockwork.string.modify.string.replaceillegalfilenamecharacters
replaces all characters in a string that are illegal characters for filenames
clockwork.string.modify.string.replaceillegalrevitcharacters
replaces all characters in a string that are illegal characters for revit view names etc.
clockwork.string.modify.string.replacemultiple
replaces multiple search terms in a given string with multiple replacements
clockwork.revit.elements.structuralfoundation.kind
retrieves the kind of a given structural foundation (isolated, wall, slab).
clockwork.revit.elements.subcategory.byname
creates a new subcategory for a given element category (unless a subcategory of that name already exists - in that case it returns the existing subcategory).
clockwork.geometry.surfaces.surface.filterbyorientation
sorts surfaces in three lists based on their orientation (vertical, horizontal up & horizontal down) and also returns three corresponding lists of booleans.
clockwork.geometry.surfaces.surface.isplanar
checks whether a face is planar
clockwork.script.controlflow.switch
emulates the switch/case statement that is  available in multiple programming languages.
clockwork.environment.system.cpus
returns information on number of processors and cpu speed (ghz).
clockwork.environment.system.machinename
returns the netbios name of the computer the script is executed on.
clockwork.environment.system.memory
returns information on total system memory, free memory and amount of memory used by the application.
clockwork.environment.system.username
returns the user name of the person who is currently logged on to windows on the machine the script is executed on.
clockwork.environment.system.version
returns the windows version
clockwork.revit.elements.textelement.settext
sets the text of a given text element. unlike the ootb node textnote.settext, this one works on modeltext as well.
clockwork.revit.elements.textelement.text
gets the text stored in a text element. unlike the ootb node textnote.text, this one works on modeltext as well.
clockwork.input.timespan.evaluatelaptimes
evaluates a list of lap times and returns the overall time
clockwork.input.timespan.laptime
records a timestamp and adds it to a given list of lap times. also passes through an arbitrary variable for integration into a graph.
clockwork.revit.elements.topography.intersectionwithplane
calculates the intersection of a toposurface and a plane
clockwork.revit.elements.topography.issubregion
filters out everything that is *not* a topo subregion. needs revit 2014 or newer to work.
clockwork.math.formulas.triangle.cathetusbypythagoras
computes the length of one of the catheti / legs of a right triangle using the pythagorean theorem. b is the other leg / cathetus of the triangle while c is the hypotenuse.
clockwork.math.formulas.triangle.hypotenusebypythagoras
computes the length of the hypotenuse of a right triangle using the pythagorean theorem. a and b are the legs / catheti of the triangle.
clockwork.math.formulas.triangle.oppositesidebylawofcosines
computes the length of the missing side of a triangle using the law of cosines. gamma is the angle between sides a and b.
clockwork.math.formulas.triangle.sidebylawofsines
determines the length of a side based on the law of sines. (alpha is the angle opposite side a and beta is the angle opposite side b...)
clockwork.math.formulas.triangle.solvebypoints
solves a triangle based on the xyz coordinates of its vertices.
clockwork.list.generate.turnintolist
turns an element (or a nested list) into a flat list
clockwork.revit.units.unittype.displayunittype
retrieves the display unit type for a given unit type. 
clockwork.geometry.points.uv.average
determines the average of a list of uvs
clockwork.geometry.points.uv.byxy
creates uvs from the xy components of point coordinates
clockwork.geometry.points.uv.pruneduplicates
prune uvs to exclude duplicates within a given tolerance
clockwork.geometry.points.uv.rounddowntoprecision
rounds a uv coordinate *down* to a specified precision
clockwork.geometry.points.uv.roundtoprecision
rounds a uv coordinate to a specified precision
clockwork.geometry.points.uv.rounduptoprecision
rounds a uv coordinate *up* to a specified precision
clockwork.geometry.points.uv.swap
swaps u and v coordinates
clockwork.revit.conversion.uv.todynamouv
converts revit uv coordinates to dynamo uv coordinates
clockwork.geometry.abstract.vector.altitudeandazimuth
computes the altitude and azimuth of a given vector
clockwork.geometry.abstract.vector.average
determines the average vector of a list of vectors
clockwork.geometry.abstract.vector.correctorientation
inverts vector a if its inversion is closer to vector b
clockwork.geometry.abstract.vector.intersectwithplane
finds the intersection point between a plane and a vector
clockwork.geometry.abstract.vector.intersectwithvector
determines if two vectors intersect and returns the closest points of intersection on both vectors.
clockwork.geometry.abstract.vector.isinplane
checks if a given vector is located on a given plane
clockwork.geometry.abstract.vector.isorthogonaltovector
checks if two vectors are orthogonal to each other
clockwork.geometry.abstract.vector.isparalleltoplane
checks if a given vector is parallel to a given plane
clockwork.geometry.abstract.vector.pruneduplicates
prune vectors to exclude duplicates within a given tolerance
clockwork.geometry.abstract.vector.xaxisnegative
returns an xyz of -1,0,0
clockwork.geometry.abstract.vector.yaxisnegative
returns an xyz of 0,-1,0
clockwork.geometry.abstract.vector.zaxisnegative
returns an xyz of 0,0,-1
clockwork.string.generate.versionnumber.tointeger
converts a version number (e.g. a dynamo version number) to an integer.
clockwork.revit.views.view.categoryisvisible
checks if a given category is visible in a given view
clockwork.revit.views.view.converttemporaryhideisolatetopermanent
convert all temporary hidden elements or categories to permanently hidden in the given view.
clockwork.revit.views.view.converttoindependent
converts a given dependent view to an independent view
clockwork.revit.views.view.dependentviews
returns all dependent views of a given view
clockwork.revit.views.view.detaillevel
retrieves the detail level of a given view
clockwork.revit.views.view.direction
returns the direction of a view
clockwork.revit.views.view.disabletemporaryhideisolate
disables the temporary hide/isolate for the given view (if set)
clockwork.revit.views.view.duplicate
duplicates a given view
clockwork.revit.views.view.duplicateasdependent
duplicates a given view as a dependent view
clockwork.revit.views.view.duplicatewithdetailing
duplicates a given view with detailing
clockwork.revit.views.view.isperspective
checks whether a given view is a perspective view.
clockwork.revit.views.view.isviewtemplate+
checks if a given view is a view template. unlike the ootb node it works for all view types.
clockwork.revit.views.view.overrideelementtransparency
overrides the transparency of an element in a given view
clockwork.revit.views.view.permanentlyisolatecategory
permanently isolates categories in the given view
clockwork.revit.views.view.permanentlyisolateelement
permanently isolates elements in the given view
clockwork.revit.views.view.phase
returns the phase of a given view
clockwork.revit.views.view.plane
retrieves the plane of a given view
clockwork.revit.views.view.primaryview
returns the primary view of a given view (i.e. the master view of a dependent view)
clockwork.revit.views.view.resetelementoverrides
resets all overrides for an element in a given view
clockwork.revit.views.view.resizecropbox
resizes the bounding box of a given revit element by the specified amount in x, y and z direction. may need to be used in conjunction with a transaction node.
clockwork.revit.views.view.scale
returns the scale of a given view
clockwork.revit.views.view.setdesignoption
sets the view to a given design option. please note: this node is kind of hacky. it does not use the design option settings in the visibility / graphic overrides. instead it sets the view property "visible in option" to *one* specific design option - which also means that the symbolic representation of this view is only visible in views that display the given design options.
clockwork.revit.views.view.setdetaillevel
sets the detail level of a given view
clockwork.revit.views.view.setphase
sets the phase of a given view
clockwork.revit.views.view.setsolarstudyactiveframenumber
sets the active frame number of the solar study in a given view
clockwork.revit.views.view.solarstudytotalframes
retrieves the number of frames of a solar study for a given view (if the view's sun and shadow settings are indeed set to single or multi day study)
clockwork.revit.views.view.temporarilyisolatecategory
temporarily isolates categories in the given view
clockwork.revit.views.view.temporarilyisolateelement
temporarily isolates elements in the given view
clockwork.revit.views.view.type
returns the type of a given view
clockwork.revit.views.view.usesviewfilters
checks if a given view has any view filters applied to it.
clockwork.revit.views.view.viewtemplate
returns the view template assigned to a given view (if one is assigned)
clockwork.revit.views.view3d.islocked
checks if a given 3d view is locked. 
clockwork.revit.views.viewsheetset.views
retrieves all the views/sheets in a given view/sheet set.
clockwork.revit.elements.wall.creationmethod
retrieves the creation method of a given wall
clockwork.revit.elements.wall.flip
flips the  orientation of a given wall - do ***not*** use in automatic mode
clockwork.revit.elements.wall.orientation
gets the orientation of a given wall instance (normal of the exterior face of the wall). will *not* work for walls hosted on mass faces or in-place walls.
clockwork.revit.elements.walltype.kind
retrieves the wall kind of a given wall type
clockwork.revit.elements.window.rooms
gets the rooms that are connected by a given window
clockwork.revit.elements.workset.kind
retrieves the kind of a given workset
clockwork.geometry.abstract.vector.xyzaxis.bytwovectors
given two main xyz axes (or vectors pointing more or less in their general direction), this node will find the third axis.
clockwork.geometry.abstract.vector.xyzaxis.fromvector
returns whichever main axis (x, y or z) is closest to a given vector
geometry.solid.curve pipe
creates a solid pipe around a curve
data-shapes.geometry.preview.geompreview
geompreview
ui node to customize geometry previews.
data-shapes.ui.color.byargbui
ui.color.byargbui
ui node create dscore colors.
data-shapes.revit.document.activedocument.filesize
gets the file size of the ative document, even if it is a bim360 design workshared project.
data-shapes.revit.sharedparameters.add shared parameter(s) from txt
add shared parameters to project from sharedparameter .txt file
data-shapes.revit.elements.all elements in view(s)
retrieves all visible element in a view or a set of views
data-shapes.revit.elements.all elements of categories in view
retrieves all elements of the given categories in the given view
data-shapes.revit.lines.all lines of linestyle
gets all lines in a project with a giver linestyle
data-shapes.ui.charts.barchart
barchart
data-shapes.ui.input.boolean input
creates a boolean input for ui.multipleinputform ++ . check out www.data-shapes.net for more infos!
data-shapes.revit.document.categorie(s) by enu name(s)
gets categorie(s) in the current ui language by it's english name
data-shapes.revit.lists.categories list
gives list of all revit categories and a matching list of their names
data-shapes.ui.input.colorinput data
create a color selection input for ui.multiinputform++ . check out www.data-shapes.net for more infos! warning : only works with revit 2017
data-shapes.ui.input.conditionalinput data
allows to create inputs that are enabled/disabled by a condition dor ui.multipleinputform++. 
data-shapes.ui.input.datatable input
create a datatable view input for ui.multipleinputform ++
data-shapes.ui.input.directorypath data
creates a directorypath input for ui.multipleinputform ++ . check out www.data-shapes.net for more infos!
data-shapes.revit.document.document.lengthdisplayunit
returns diplay units for lengths in current document.
data-shapes.ui.input.dropdown data
create data for dropdown input in ui.multiinputform ++ . check out www.data-shapes.net for more infos.
data-shapes.revit.elements.duplicate element
duplicates all types of elements including view templates
data-shapes.revit.elements.element(s) cut
cutting element(s) with element
data-shapes.interop.excel.excel.worksheets
gets worksheet names from specified excel workbook.
data-shapes.export.export to fbx
exports 3d views to fbx format
data-shapes.export.export views to navisworks
exports 3d views to navisworks
data-shapes.ui.input.filepath data
create filepath input for ui.multipleinputform ++ . check out www.data-shapes.net for more infos !
data-shapes.revit.elements.filter.isapplied
returns a boolean values indicating wether a parameterfilterelement is applied to any view in the project or not. 
data-shapes.geometry.geometry.pruneduplicates
removes all duplicate geometries from list.
data-shapes.revit.document.get all linked docs infos
get all linked documents names and paths
data-shapes.revit.document.getallelementsfromlinks++
get all elements of category or type from given documents 
data-shapes.revit.elements.getlinkedelement.inhostview
gets linked elements in host view(s).
data-shapes.revit.elements.getlinkedelement.inhostviewandcategory
gets linked elements in host view, filtered by category.
data-shapes.revit.grids.grid.setverticalextents
set the vertical extents of all project grids
data-shapes.ui.input.image data
places an image on ui.multipleinutform ++ .
data-shapes.revit.elements.importinstance.islinked
returns boolean info indicating wether an importinstance is linked or not (meaning it's imported).
data-shapes.ui.input.inputgroup data
creates a group of inputs for ui.multipleinputform ++ . check out www.data-shapes.net for more infos !
data-shapes.revit.lines.line linestyle
gives linestyle name and element of lines
data-shapes.ui.charts.linechart
linechart
data-shapes.ui.input.listview data
create data for listview input in ui.multiinputform ++ . check out www.data-shapes.net for more infos.
data-shapes.modificationtracker.modificationtracker.allchanges
takes existingelements data as input and outputs lists with all geometry/parameter values change combinations . check out www.data-shapes.net for more informations .
data-shapes.modificationtracker.modificationtracker.geometrychanges
takes existingelements data as input and outputs elements with same geometry and elements with changed geometry . check out www.data-shapes.net for more infos
data-shapes.modificationtracker.modificationtracker.modelcomparison
compares elements from documents a and b (a is the current document by default) and returns existing elements data, new elements, deleted elements and a report. check out www.data-shapes.net for more infos. 
data-shapes.modificationtracker.modificationtracker.parameterchanges
takes existingelements data as input and outputs elements with same parameter values and elements with changed parameter values. check out www.data-shapes.net for more infos.
data-shapes.language.multilanguage io
takes inputs in different languages and returns the version that corresponds to the active revit application language settings.
data-shapes.ui.input.multilinetextbox data
creates a multi line textbox input for ui.multipleinputform ++
data-shapes.ui.multipleinputform ++
create a form with multiple inputs. 
see www.data-shapes.net for tutorials and infos!
data-shapes.utilities.number to rounded string 
returns rounded number to specified number of decimals as string
data-shapes.revit.sharedparameters.parametergroup list
list of all parameter groups
data-shapes.revit.elements.performanceadviserrule elements
gets all elements relative to a performance adviser rule. 
data-shapes.revit.view.perspectiveview.byeyepositiontarget
create perspective view 
data-shapes.ui.charts.piechart
piechart
data-shapes.ui.charts.pointchart
pointchart
data-shapes.ui.input.radiobuttons data
create radio buttons input for ui.multipleinputform ++ . 
data-shapes.revit.raybounce.raybounce on link category
same functionality as raybounce but takes linked model elements into account
data-shapes.revit.raybounce.raybounce on linked model
data-shapes.revit.sheets.replace viewports by center
replaces vieports on sheets according to list of points. (0,0) is bottom left of sheets
data-shapes.revit.rooms.room status
sorts a list of room into three categories: unplaced, placedandbounded and  unbounded
data-shapes.revit.rooms.room.height
returns room height.
data-shapes.revit.rooms.room_group_outline
returns the outline of the inpu rooms, grouped by the value of the "grouping parameter"
data-shapes.revit.selection.select face (s) (pickobject)
same as ootb select faces, but can be used through dynamo player
data-shapes.revit.selection.select model elements of category
allows to perform a manual selection with a category filter.
data-shapes.ui.autocadcivil3d.selectautocadobjects_data
this input can be used in civil 3d or in autocad for object selection! 
data-shapes.ui.selection.selectedges data
creates a revit edge selection input for ui.multipleinputform++ . check out www.data-shapes.net for more infos! 
data-shapes.ui.selection.selectfaces data
creates a revit face selection input for ui.multipleinputform++. check out www.data-shapes.net for more infos!
data-shapes.ui.selection.selectlinkedelement(s) data
create a button input for ui.multipleinputform++ that allows to select elements in à linked document. see www.data-shapes.net for more infos!
data-shapes.ui.selection.selectmodelelements data (ordered)
creates a revit element selection input for ui.multipleinputform++ . check out www.data-shapes.net for more infos!
data-shapes.ui.selection.selectmodelelements data
data-shapes.ui.selection.selectpointsonface data
creates a ui.multipleinputform++ input that allows point on face selection 
data-shapes.revit.family.set active family parameter by name
set a parameter inside an active family document
data-shapes.revit.view.setcropregion
sets the crop region of a view to a closed polycurve.
data-shapes.revit.sharedparameters.sharedparameters from txt file
gets parameters from sharedparameter .txt file
data-shapes.revit.sheets.sheettitleblock
get the titleblock family type from a sheet
data-shapes.revit.sheets.sheet_titleblock
gets the titleblock used in a sheet
data-shapes.revit.floors.slabshape.addpoints
add points to slab shape
data-shapes.revit.floors.slabshape.addsplitline
adds split lines to revit floors
data-shapes.ui.input.slider
creates slider input for ui.multipleinputform ++ . set the step to decimal value if you want a double slider, or to a integer value if you want an integer slider. 
data-shapes.ui.charts.splinechart
splinechart
data-shapes.ui.input.textbox data
create data for textbox input in ui.multipleinputform ++ . check out www.data-shapes.net for more informations
data-shapes.ui.input.textnote data
create data for textnote input in ui.multipleinputform ++ . check out www.data-shapes.net for more informations
data-shapes.revit.transform.transform.originandvectors
gets origin and vetorx of autodesk.revit.db.transform objects
data-shapes.ui.input.treeview input
create a treeview input for ui.multipleinputform ++ . check out www.data-shapes.net for more infos and tips!
data-shapes.revit.view.view.viewrange
returns the view range data of a view
data-shapes.revit.view.viewlevel
gets the level that a view is associated to
data-shapes.revit.sheets.viewportlocation++
gets the location point of a viewport or a schedulesheetinstance
data-shapes.revit.view.viewsection.byline
create viewsections in current document from ds lines. 
data-shapes.revit.elements.viewtemplate.isapplied
returns a boolean value indicating wether a viewtemplate is applied to any view in the project or not. this won't work for 3d templates. 
data-shapes.revit.walls.wallsweeponwall
creates a wallsweep or reveal on a wall
mepover.revit.elements.all categories in document
retrieves all categories from the current document and splits them up in model, annotation, analytic and internal categories
mepover.revit.elements.all elements at level
the same as the out of the box node, but this one also returns more type of families (e.g. system families)
mepover.revit.elements.cabletray curvenormal
returns the curve normal of the cable tray (the direction that always point to the upward open part of the cable tray)
mepover.revit.elements.cabletray setcurvenormal
sets the curve normal of the cable tray, allowing you to rotate the cable tray along its own axis.
mepover.revit.elements.cabletray.bylines
creates cabletray by lines, cabletraytype, level, width and height
mepover.revit.parameters.collector.filterstringbeginswith linkdoc
returns the most common elements (host objects and family instances) from a linked model by supplying a parameter and the value to search for. of course the parameter needs to be of type 'string' to work.
mepover.revit.parameters.collector.filterstringbeginswith
returns the most common elements (host objects and family instances) by supplying a parameter and the value to search for. of course the parameter needs to be of type 'string' to work.
mepover.revit.parameters.collector.filterstringcontains linkdoc
mepover.revit.parameters.collector.filterstringcontains
mepover.revit.parameters.collector.filterstringdoesnotequal linkdoc
mepover.revit.parameters.collector.filterstringdoesnotequal
mepover.revit.parameters.collector.filterstringendswith linkdoc
mepover.revit.parameters.collector.filterstringendswith
mepover.revit.parameters.collector.filterstringequals linkdoc
mepover.revit.parameters.collector.filterstringequals
mepover.revit.elements.conduit.bylines
creates conduits by line, conduittype, level and diameter
mepover.revit.connectors.connector.addtosystem
adds a connector to a mechanical or piping system
mepover.revit.connectors.connector.connectedconnectors
returns the connector from the element that is connected to this connector 
mepover.revit.connectors.connector.connectedelements
returns the elements that are connected to this connector (does not return the host element)
mepover.revit.connectors.connector.connectorsystemtype
returns the connector system type of the connector
mepover.revit.connectors.connector.connectortype
returns the connectortype of a connector
mepover.revit.connectors.connector.connectto
connects a connector to another connector. returns true if connection succeeded
mepover.revit.connectors.connector.description
returns the description of the connector
mepover.revit.connectors.connector.direction
returns the direction of the coordinatesystem of the connector
mepover.revit.connectors.connector.direction_basisx
returns the direction (x value) of the coordinatesystem of the connector
mepover.revit.connectors.connector.direction_basisy
returns the direction (y value) of the coordinatesystem of the connector
mepover.revit.connectors.connector.disconnectfrom
disconnects a connector from another connector. returns true if succeeded
mepover.revit.connectors.connector.flowdirection
returns the direction of the flow on the connector
mepover.revit.connectors.connector.hostelement
returns the element that hosts the connector
mepover.revit.connectors.connector.isconnected
returns a boolean indicating whether the connector is connected to a connector on different element
mepover.revit.connectors.connector.isprimary
returns a boolean indicating whether the connector is the primary connector
mepover.revit.connectors.connector.linkedconnector
returns the linked connector
mepover.revit.connectors.connector.location
returns the location of a connector
mepover.revit.connectors.connector.removefromsystem
removes a connector from a mechanical or piping system
mepover.revit.connectors.connector.shape
returns the shape of the connector
mepover.revit.connectors.connector.sizerectangular
returns the height and the width of the connector (in feet)
mepover.revit.connectors.connector.sizeround
returns the radius of the connector (in feet)
mepover.revit.connectors.connector.system
returns the system that's connected to the connector
mepover.revit.connectors.connector.systemtype
returns the system type of the connected system
mepover.revit.elements.copy element to location
this node will copy level-hosted elements to the given locations and rehost to the nearest level.(does not work for curve based elements) 
mepover.revit.systems.duct or pipe systems all terminal elements
returns all the terminal elements in the provided systems
mepover.revit.systems.duct upstream components by category
this node will try to return the connected elements in the upstream network. it will stop once it encounters an element twice or encounters a different system classification or cannot find a connector with an opposing direction. the output can be filtered by input categories
mepover.revit.systems.duct upstream components
this node will try to return the connected elements in the upstream network. it will stop once it encounters an element twice or encounters a different system classification or cannot find a connector with an opposing direction.
mepover.revit.elements.duct.connectairterminalonduct
this node will attempt to connect an air terminal onto a duct directly without creating a tee or tap.
mepover.revit.elements.ductrectangular.bylines
create ducts by lines, ducttype, mechanicalfittingtype, level, width and height
mepover.revit.elements.ductround.bylines
create round ducts by lines, ducttype, systemtype, level and diameter
mepover.revit.systems.ductsystem all elements in network
returns every element in the duct network, inlcuding ducts, fittings etc.
mepover.revit.systems.ductsystem network size
returns the number of elements in the duct network
mepover.revit.elements.elbow.bymepcurves
takes in a list of mepcurves (pipe, duct, cable tray, conduit)  and will attempt to create elbows where possible. a margin can be entered for max distance between connectors
mepover.revit.systems.electricalcircuit get panels and elements
returns the panels and elements belonging to the given electrical circuits
mepover.revit.elements.electricalfitting connector count
returns the number of connectors on the cable tray or conduit fitting
mepover.revit.systems.electricalsystem.addtocircuit
adds elements to circuit if possible
mepover.revit.systems.electricalsystem.addtopanel
adds the circuits to the panel
mepover.revit.systems.electricalsystem.disconnectpanel
disconnects the panel the circuit
mepover.revit.systems.electricalsystem.removefromcircuit
removes the elements from the circuit
mepover.revit.elements.element.addinsulation
adds insulation to pipe or duct networks
mepover.revit.elements.element.connectinto
connects terminal elements into pipes or ducts. an optional margin value can be given to define the curve offset length from the terminal if applicable.
mepover.revit.connectors.element.connectors
returns every connector on an element (also return connectors of a system)
mepover.revit.systems.element.connectorsystemtype
returns the mep system type of the connectors of the element
mepover.revit.elements.element.domain
returns the domain of connectors on the element i.e. (domainhvac, domainpiping etc.)
mepover.revit.systems.element.electricalcircuit
returns the electrical circuit of the element
mepover.revit.elements.element.getinsulation
will return the insulation of a pipe or duct
mepover.revit.systems.element.system
returns the mechanical or plumbing system of the element
mepover.revit.systems.element.systemtype
returns the mechanical or plumbing system type
mepover.revit.parameters.elements change level
change the elements to the selected level without moving the elements. only works for non-hosted (level-hosted) mep elements.
mepover.revit.elements.elements in connected network
returns all elements that are physically connected to the input element
mepover.revit.elements.elements in view by category
returns all the elements in the selected view(s) by the selected categor(y)(ies)
mepover.revit.elements.family types of family
returns every family type of the given family
mepover.revit.family.familymanager.createnewtype
creates a new family type with the given name (only works in family editor)
mepover.revit.family.familymanager.removeparameter
searches every family parameter for the given (sub)string and removes that parameter (only works in family editor)
mepover.revit.family.familymanager.renamefamilytype
searches every family type for the given (sub)string and replace that the (sub)string with the replace string (only works in family editor)
mepover.revit.family.familymanager.renameparameter
searches every family parameter for the given (sub)string and replaces that the (sub)string with the replace string
mepover.revit.elements.flexcurve.byelements
creates a flex duct or flex pipe between 2 elements. input in[2] expects a flexducttype or flexpipetype
mepover.revit.elements.flexcurve.bypoints
create a flex pipe or duct by a list of points, system type, flex duct type or flex pipe type, level and diameter.
mepover.revit.parameters.getparameterasprojectunits
returns the parameter value in the same unit type as the project settings
mepover.revit.parameters.getparameterasvaluestring
returns the parameter values without conversion to the revit internal unit system. the suffix boolean toggles the project units on or off
mepover.revit.links.linked file change paths
this node will allow you to change the path of a linked file without opening the file. all you need is a file path of the host model and the linked file
mepover.revit.links.linked file info by filepath
returns linked file info: filepath, link type and link status
mepover.revit.systems.mechanical system graphic override set linecolor
sets the linecolor of the mechanical system graphic override
mepover.revit.systems.mechanical system graphic override set linepattern
sets the line pattern in the mechanical system type's graphic override
mepover.revit.systems.mechanical system graphic override set lineweight
this will change the lineweight override of the mechanical system type
mepover.revit.elements.mechanicalfitting info
gets the fitting part type and number of connectors
mepover.revit.connectors.mep connector info+
this node will return the connectors and a lot of information about those connectors of the input elements
mepover.revit.elements.mep connector info
returns location, connector info and connected elements
mepover.revit.elements.mep curve connected fittings
returns the fittings, ducts accessories and terminals connected to the given duct, cable tray, pipe or conduit. also return air terminals on ducts
mepover.revit.elements.mep fitting connected mepcurves
returns the pipes, ducts, conduits or cable trays that are connected to the given fittings
mepover.revit.elements.mepcurvetype.junctiontype
returns the preferred junctiontype (tap or tee) of a ducttype or pipetype
mepover.revit.elements.mepfitting.bymepcurves
creates a unionfitting or elbowfitting by 2 mepcurves (ducts, cable trays, pipes or conduits). the output may not always be all the fittings created as revit sometimes creates extra transition fittings outside of the node transactions.
mepover.revit.elements.mepfitting.bypointsandcurve
places accessories or fittings in a pipe or duct
mepover.revit.systems.mepsystem number of networks
returns the number of physical networks in the system
mepover.revit.systems.mepsystem.addtosystem
add elements to a duct or pipe system
mepover.revit.systems.mepsystem.createsystem
creates a duct or piping system by providing a mechanical- or pipingsystemtype. optional names can be provided for the systems
mepover.revit.systems.mepsystem.dividesystem
divide a duct or piping system into separate systems if possible
mepover.revit.systems.mepsystem.isdividable
returns a boolean indicating if the system can be divided into multiple systems
mepover.revit.systems.mepsystem.removefromsystem
remove elements from a duct or pipe system
mepover.math.nearest value from list of values
finds the nearest values from a given list of values
mepover.revit.roomsandspaces.zone.newzone
creates a new zone by level and phase
mepover.revit.panelschedule.panelscheduleview.electricalcircuits
returns the circuits that are listed in the panelschedule, this includes spare circuits.
mepover.revit.panelschedule.panelscheduleview.numberofassignedcircuits
this will return the number of assigned circuits on a panelschedule. spares and spaces also count as an assigned circuit.
mepover.revit.panelschedule.panelscheduleview.numberofslots
returns the number of available slots in a panelschedule
mepover.revit.systems.pipe upstream components
mepover.revit.elements.pipe.addcapontoopenend
this node will attempt to add a cap onto an open pipe. the cap type needs to be set in the pipe's routing preferences.
mepover.revit.elements.pipe.byconnectorendpoint
creates a pipe from the connector to the given point.
mepover.revit.elements.pipe.byconnectors
creates a new pipe between 2 connectors
mepover.revit.elements.pipe.bylines
creates a pipe by line, pipetype, systemtype, level and diameter
mepover.revit.parameters.pipesegment.setname
changes the name of the pipe segment (found under mep settings)
mepover.revit.systems.pipingsystem all elements in network
returns every element in the piping network, inlcuding pipes, fittings etc.
mepover.revit.systems.pipingsystem network size
returns the number of elements in the piping network
mepover.revit.roomsandspaces.room or space reset center location
this node will attempt to reset the location of the room or space to its default center location
mepover.revit.roomsandspaces.roomatpoint
returns the room at the location of the point. returns null if no room is there
mepover.revit.roomsandspaces.rooms place automatically for all levels
this node will attempt to create rooms automatically for every level
mepover.revit.parameters.setparameterasprojectunits
sets the parameters by project unit inputs, no need to convert to revit internal units first.
mepover.revit.parameters.setparametersetvaluestring
sets the parameters by strings. useful for setting numerical values that are affected by revit's internal  unit conversion. does not work for parameters that are stored as elementid
mepover.revit.roomsandspaces.space number to duct network concatenate
this node will attempt to write the space numbers to connected duct objects in the network. input airterminals need to be placed in spaces. parametername is the parameter to write the space number to. numbers will be concatenated if they serve multiple spaces. multiple categories supported
mepover.revit.roomsandspaces.space number to duct network
this node will attempt to write the space number to connected duct objects in the network. input airterminals need to be placed in spaces. parametername is the parameter to write the space number to. numbering stops when it encounters an element from another space. multiple categories supported
mepover.revit.roomsandspaces.spaceatpoint
returns the space at the location of the point. returns null if no space is there
mepover.revit.roomsandspaces.spaceatroom
input a (linked) room and this node will create a space in the selected phase at the same place and level as the room.
mepover.revit.roomsandspaces.spacecoordination create new spaces
creates a new space for every room with a new room number from the linked document
mepover.revit.roomsandspaces.spacecoordination delete redundant spaces
will delete spaces for which no matching room number can be found in the given linked document
mepover.revit.roomsandspaces.spacecoordination manager
this node will align all spaces in the model to the rooms from a linked model. it will delete spaces that can't find a corresponding room number, move spaces to rooms with the same number and create new spaces for rooms with new room numbers.
mepover.revit.roomsandspaces.spacecoordination move to associated room
will move the space to the room with the same space/room number (if a room with the same number exists)
mepover.revit.roomsandspaces.spaces place automatically for all levels
this node will attempt to create spaces automatically for every level
mepover.revit.tags.tag get location
returns the location of the tags
mepover.revit.tags.tag get view
return the view on which the tag is placed
mepover.revit.elements.tap.by2mepcurves
create a new takeofffitting or tap by takeoff pipe and through pipe
mepover.revit.elements.tee.by2mepcurves
creates a tee by a main curve and a branch mep curve (duct, pipe, conduit, cable tray). only works with perpendicular brand curves
mepover.revit.elements.tee.by3mepcurves
creates a new tee fitting for the 3 input mep curves (conduit, cable tray, duct or pipe). only works with a perpendicular branch mepcurve
mepover.revit.view.view.getcropboxcurves
returns the curves of a view crop box, even irregular shapes. returns an empty list if the crop view is not active for a given view
mepover.revit.view.view.setcategoryvisibility
will set the category visibility for the view. does not work if a view template dictates the category visibility
mepover.revit.view.view.setcropboxcurves
input views and lists of curves to set the view crop regions
mepover.revit.view.view.viewrange absolute
returns the 4 view range values relative in absolute z values
mepover.revit.view.view.viewrange relative
returns the 4 view range values relative to the view's level
mepover.revit.roomsandspaces.zone.addspaces
will add the spaces to zone
mepover.revit.roomsandspaces.zone.spaces
returns the spaces that are assigned to the zone
rhythm.revit.selection.selection.design options
design options
displays design options with option set for your use.
rhythm.revit.selection.selection.isolated select model elements
isolated select model elements
this allows you to select elements of a specific category. this is super-ultra beta and may not always work..
rhythm.revit.selection.selection.all elements of model category
all elements of model category
this allows you to collect all elements of a selected category. this also removes the subcategories from the selection.
rhythm.revit.selection.selection.model categories
model categories
provides all model categories to select from.
rhythm.revit.selection.selection.titleblock types
titleblock types
allows you to select a titleblock type from your revit file.
rhythm.revit.selection.selection.views++
views++
allows you to select a view from the instances in your project. with sorting and exclusion of view templates.
rhythm.revit.selection.selection.schedule views
schedule views
allows you to select a schedule view from the instances in your project. with sorting and exclusion of view templates.
rhythm.revit.selection.selection.scope boxes
scope boxes
allows you to select a scope box from all of the scope boxes in your project.
rhythm.revit.selection.selection.viewfamilytypes
viewfamilytypes
allows you to select a view family type from your file
rhythm.revit.selection.selection.links
links
allows you to select a link instance from all of the revit links in your file.
rhythm.revit.selection.selection.sheets
sheets
allows you to select a sheet from all of the sheets in your project.
rhythm.revit.selection.selection.roof types
roof types
allows you to select a roof type from the types in your project.
rhythm.tools.arrowhead assigner
this node assings the arrowhead type for all text and keynote tags. there is an input for ones you want to exclude.
rhythm.revit.collector.collector.modelgroupbyname
this will collect all instances of a model group by given name.
rhythm.revit.collector.collector.ofexteriorwalls
this node will collect all exterior (function) walls.
rhythm.revit.collector.collector.ofinteriorwalls
this node collects interior (function) walls,
rhythm.revit.collector.collector.ofstructuralwalls
this will collect only structural walls.
rhythm.revit.collector.collector.placedrooms
this will collect placed rooms in current file.
rhythm.revit.selection.selection.isolated pick model elements(ordered)
pick model elements in desired order of a desired category.
rhythm.revit.selection.selection.isolated pick model elements
this allows a multiple selection of elements of specified category.
rhythm.tools.rhythm.3droomtags
this node will generate 3d room tags for all rooms in the model. (rfa in extra folder in dynamo download)
rhythm.tools.rhythm.renumberroomsbycurve
complete revamp of the previous proposed workflows that break on rooms whose solids were irregular.
rhythm.tools.rhythm.whatthenode
this node will let you search dynamonodes.com for the most likely package a node is from. helps fix "red" nodes when users do not have package installed.
rhythm.revit.ui.ui.colorpicker
this node allows the user to choose a color via the revit api color selection dialog. for revit 2017 +
speckle.projects.add streams to project
add streams to project
add a list of streams to a speckle project.
speckle.projects.speckle projects
speckle projects
lists projects owned or accessed by an account.
speckle.i/o.speckle streams
speckle streams
lists your existing speckle streams for a specified account.
speckle.i/o.speckle receiver
speckle receiver
receives data from speckle.
speckle.i/o.speckle sender
speckle sender
specklesender
sends data to speckle.
springs.revit.ꟿ application.openviews
lists all views currently open inside the revit ui
springs.revit.ꟿ areaplan.bylevelname
creates an area plan at the designated levels. each new view needs a name. an area scheme must first be activated before it can be used. to activate a scheme, place one view of that type in the project(you can then delete it).  if a view with the same scheme and name exists, you'll get a null instead.
springs.revit.utility.ꟿ beams.fixextents
detects all beams from the input list with broken extents(actual length - cut length <  margin) and attemts to correct them.
springs.geometry.ꟿ boundingbox.2drectangle
returns a 2d rectangle from a bounding box
springs.geometry.ꟿ boundingbox.midpoint
fetches the mid point of the bounding box.
springs.geometry.ꟿ boundingbox.scale
scales the bounding box in three dimensions according to it's center.
springs.geometry.ꟿ boundingbox.scalebydistance
scales the bounding box by a fixed distance.
springs.revit.ꟿ brepshape.bygeometry
convert the input geometry to directshape element inside the revit document.  works only in revit 2017 and later. usies the more advanced brepbuilder. it supports solids or surfaces, however periodic faces like spheres, cylinders and cones are not supported. each created ds will have a unique type. make sure that each input geometry has a unique name. you can either feed a single category and material for all geometries or a unique one for each geometry - the node's lacing is set to longest by default. the default category is generic model.
springs.geometry.ꟿ closedcurve.offset+
offsets a curve both ways and correctly differenciates the external and internal offset. if an offset goes beyond the curve's bounds, the result will fail and a null value will be appended instead. also works for convex curves like arcs.
springs.revit.selection.ꟿ collect.allelementsof
works with either categories or types and uses multi-filters to get multiple groups with a single query. can be applied as a function. no ties to the document.changed event.
springs.revit.selection.ꟿ collect.alltypesof
works with either categories, element types or revit classes and uses multi-filters to get multiple groups with a single query. can be applied as a function. no ties to the document.changed event.
springs.revit.selection.ꟿ collect.currentselection
gets the currently selected elements. connect a boolean switch to refresh the selection.
springs.revit.selection.ꟿ collect.elementsinview
selects all elements visible in the input view.
springs.revit.selection.ꟿ collect.elementsketch
get the actual sketch lines of a sketch based element (floor, ceiling, modified wall, etc.) . you can optionally fetch the matching model curves, however this might prove comptationally heavy on larger data sets. does not work with elements from linked files.
springs.revit.selection.ꟿ collect.linkedinstanceelements
extract elements by category from the selected linked instances. the transform cs can be used to get the exact location of the elements in the host file. if an error occurs or the linked document is unloaded, an error will be returned in the elements output and the appropriate transform will be a null. you can use those nulls to filter out the errors.
springs.revit.selection.ꟿ collect.revisions
collects all revision clouds from a specific date.
springs.revit.selection.ꟿ collect.sheets
search for sheets by either their name or their number. use a false boolean switch to search by number.
springs.revit.selection.ꟿ collect.view3dtemplates
gets all 3d view templates and returns them to dynamo as generic elements
springs.revit.selection.ꟿ collect.views
search for views based on naming. you can choose to either include or exclude schedules. use the sheet collector for sheets.
springs.revit.ꟿ color.todecimal
converts a dynamo colour its revit equivalent  decimal value.
springs.geometry.ꟿ curve.offset+
offsets a curve towards the specified point
springs.geometry.ꟿ curveloop.simplify
attempts to simplify an open or a closed curve loop by connecting straight separate line segments into a single line.
springs.revit.ꟿ decimal.tocolor
converts a revit colour decimal value to its dynamo equivalent.
springs.geometry.ꟿ delaunay2d.bypoints
create a delaunay triangulation of a set of planar points. you can get the result as points or as lines.
springs.ꟿ dictionary.bykeysvalues
dictionaries are an incredibly powerful tool for making associative sets between two equal length lists. the first list must be of unique strings (or numbers) and will be the key and the second list will be the matching values (it can be made up of geometry, elements, even other lists)
the search keys list will provide the corresponding value to the input key.
springs.revit.ꟿ directshape.bygeometry
convert the input geometry to directshape element inside the revit document.  it supports solids or surfaces. it is based on an alternative process that uses a sat import and can produce smooth surfaces. each created ds will have a unique type. make sure that each input geometry has a unique name. you can either feed a single category for all geometries or a unique category for each geometry - the node's lacing is set to longest by default. the default category is 
generic models.
springs.revit.ꟿ directshape.transform
transforms the typed directshape element from the identity coordinate system to the input coordinate system(s), in a manner similar to dynamo's geometry.transform node.
springs.revit.ꟿ directshape.translate
copy the input directshape element with the help of a translation vector, similarly to the geometry.translate node. this method should prove more efficient than element.copy
springs.revit.ꟿ document.activeview
selects the current document's active view. supports more view types than the built-in option.
will be depreciated once the bult in node works with all plan types.
springs.revit.ꟿ document.centralpath
if the document is workshared, the node returns the path to the central document as a string. otherwise a null value will be returned.
springs.revit.ꟿ document.copyfromlinkinstance
the node will use the total transformation of the link instance to copy the input elements into the local document.
springs.revit.ꟿ document.copyfromviewtoview
the node will copy the input (view based) elements from the source view into the destination view.
springs.revit.ꟿ document.deleteelements
attempts to delete the input list of elements from the active revit document.the node returns the number of successfully deleted elements and their ids as a string. carefully observe the deleted elements count. it may be greater than the input list because hosted elements or tags will be deleted as well. if an element in the list can not be deleted (for example last revision or last view), the whole list will fail to be deleted.
springs.revit.ꟿ element.getparameterunitvalue
converts from internal units to the currently set revit display units. useful only for parameters with numeric values. if no value is found, will return a blank string.
springs.revit.ꟿ element.iscut
tests if the element is being cut by any void instances. if any cuts exist all cutting elements will be provided.
springs.revit.ꟿ element.iscutting
tests if the input element (or elements) is a void cut and if it is cutting any elements. in such cases, the cut elements will be provided.
springs.revit.ꟿ element.meshgeometry
reads an element's geometry and converts it to either a dynamo mesh or a toolkit mesh representation.  the node will return dynamo meshes by default.

the lod input represents the triangulation factor. its range is from 0 to 1. 0 is the lowest level of detail and 1 is the highest. it's set to 0 by default.
springs.revit.ꟿ element.removevoidcut
removes the void cut between the input elements, if such exists.
springs.revit.ꟿ element.setlocation
attempts to modify the location of the input element. this can effectively add as a move comand in revit. works for both line based and point based elements.
springs.revit.ꟿ element.setparametertonone
used to set parameters such as view template, phase demolished or top constraint to none / unconstrained.
springs.revit.ꟿ element.unjoin
unjoins the element(s) in the second list from the primary input element.
springs.revit.utility.ꟿ elements.groupbydistance
you'll need two equal length lists of geometry objects and elements. splits the list of elements into groups if the distance between the coresponding geometry is less than the provided margin.
springs.revit.ꟿ elementtype.adaptivebysimplegeometry
genearate a new eight point adaptive component family type from any solid or polysurface consisting of planar faces. faces with openigs are not supported.
springs.revit.ꟿ elementtype.duplicate
create duplicate element types. if the type exists, it will be appended instead.
springs.revit.ꟿ elementtype.instances
fetches all instances of the input element type
springs.revit.ꟿ familyinstance.byfaceandpoint
places instances on the input face oriented to the face's u tangent and the global z axis.
springs.revit.ꟿ familyinstance.bygeometry
you must provide a valid family template path that will be used for all input geometry objects. the project units(and not the templates) will be used to determine the size of the output geometry.
the provided category will be used only if the family template supports it. if not, the default template category will be used instead.
likewise, the family material(provided as a string) will be set only if a material with that name exists in the template. if not, the default material will be used instead ("by category").
for void cuts, the material settings will be ignored.
the subcategory name is an optional input. if you'd like to skip assigning a subcategory to any new instance, simply use null.
the node expects a unique family name for each geometry object. the rest of the input lists will be processed as if the node lacing is set to longest.
springs.revit.ꟿ familyinstance.byhostandpoint
creates hosted family instances(doors/windows) at the specified points. you can feed either a single family type or a unique type for each instance.
springs.revit.ꟿ familyinstance.bypointslevelsbatch
this node batch ceates level hosted family instances. you can feed either a single type/level that will be used for all instances or a unique type/level for each instance. set track to false if you'd like to place instances on every run.
springs.revit.ꟿ familyinstance.byviewandpoint
places a view hosted family instance at a given point in the view (e.g. a detail component, 2d annotation).
set track to false if you'd like to place instances on every run.
springs.revit.utility.ꟿ familytemplatepaths.commonpaths
fetches the default family template paths
springs.units.ꟿ feet.tofraction
converts a decimal foot value to a fractional foot/inch string.
springs.filesystem.ꟿ filepath.canwriteto
checks if the user and application has write access to the specified path's directory
springs.filesystem.ꟿ filepath.size
outputs the the file size in kilobytes or megabytes. provide a file path as a string. set kbonly to true for a consistent output.
springs.revit.ꟿ filledregion.bycurves+
fully utilizes the filledregion.create api method, unlike the ootb node. you must provide a list with sublist of curve loops.
springs.revit.ꟿ form.bygeometry
convert the input geometry to a revit form object. forms can exist only in the family environment. you can convert complicated solids or surfaces directly into forms. a form can act as a void. provide either one true boolean value to convert a form into a void. the node's lacing is set to longest by default.
springs.units.ꟿ fraction.tofeet
converts a fractioned feet /inch string value into a decimal foot value.
springs.geometry.ꟿ geometry.boxeddistanceto
computes the minimal distance between the axis-aligned bounding boxes of two geometry elements. works directly with a bounding box input.
springs.geometrycolor.ꟿ geometry.differentiatedisplay
paints the input geometry using the default color range. also works well with lists of geometry.
springs.geometry.ꟿ geometry.extents
gets the dimensions of the geometry's bounding box.
springs.geometry.ꟿ geometry.groupbydistance
splits the list of geometry elements into groups if the distance between them is less than the provided margin.
springs.geometry.ꟿ geometry.indexbydistance
provides the index of the closest or farthest geometry. should prove faster than getting the geometry and finding its index in two separate operations.
springs.geometry.ꟿ geometry.readtag
design script geometry can store a <string, object> dictionary for the duration of the active graph. if no parameter with the active name is found, a null value will be returned instead.
springs.geometry.ꟿ geometry.splitrecursively
splits a surface or a solid recursively, using the resulting reduced geometry for every consecutive split. select a point or another geometry to control the direction of the split.
springs.geometry.ꟿ geometry.writetag
design script geometry can store a <string, object> dictionary for the duration of the active graph. you can store a name/value pair and retrieve it further down the graph.
springs.geometry.ꟿ line.isinplane
checks if a line lies in a given plane
springs.geometry.ꟿ line.straightenxy
checks a line's end points for irregularities and corrects them if they are at or below the specified margin. the default margin is 1/5000 of the curve length, which is conservative.
springs.geometry.ꟿ line.straightenz
checks a line's end points for irregularities in  the z axis and corrects them if they are at or below the specified margin. the default margin is 1/5000 of the curve length, which is conservative.
springs.geometry.serialization.ꟿ line.tostring
serilize a line to a string. you can use a custom delimier  between the coordinates and apply an optional rounding. works great with revit text based parameters or excel.
springs.geometry.ꟿ line.xyoffset
offsets a line in the xy plane toards the specified point
springs.geometry.ꟿ lineloop.merge
attempts to join lines into a single chain of joined curves. the node returns the new lines as a chain and with the original order. the success outputs returns the success of the execution as a true/false boolean.
springs.ꟿ list.dragdropreorder
press and hold on an item to move it up or down the list. to confirm and close the window, select "save order". the optional names input will override the object representation.
springs.ꟿ list.dropdown
selects one list item by a drop-down combo box. the optional names input will override the object representation.
springs.ꟿ list.dropfirstlast
removes the first and last items from the list
springs.ꟿ list.everyother
useful for when you want to combine an item on the list with every other item on the list. for example in list {1,2,3} , "2" will be paired up only with "1" and "3" and will not be paired up with itself.
springs.ꟿ list.filterbycategoryname
filters the input elements by their category name. you can input multiple category names.
springs.ꟿ list.filterbyclassname
filters a list of objects by the object's class name. note that dynamo elements belong to different classes than their revit counterparts. use the object.class node to check an object's class.
springs.ꟿ list.filterbyselection
check the items that you'd like to filter in.  unchecked items will be sent to the out list. the optional names input will override the object representation.
springs.ꟿ list.firstlast
simple utility node to get both the first and last items of a list as separate outputs. this avoids the unnecessary sublist when using the list.deconstruct node.
springs.ꟿ list.getevenodd
gets the even and odd indices from the list.
springs.ꟿ list.itematindex+
identical to the built in node but works with negative indices
springs.ꟿ list.maxindex
gets the maximum index of a list. good for use with floating point values
springs.ꟿ list.mergebyboolmask
merge two lists by a boolean mask list. the true count in the mask should be the same as the length of the true list and vice versa for the false list.
springs.ꟿ list.minindex
gets the minimum index of a list. good for use with floating point values
springs.ꟿ list.nullallindicesof
list all of the indices of a list that match the specified value. capable of handling null values, part of the smartcopymonitor workflow.
springs.ꟿ list.nullindexof
similar to the bult-in node but provides a null value instead of -1 of failure. part of the smartcopymonitor workflow.
springs.ꟿ list.nullreorder
simiar to the built-in function with the difference that it can handle null indices. part of the smartcopymonitor workflow.
springs.ꟿ list.nullsetdifference
similar to the built in node, with a built-in safety for null values. part of the smartcopymonitor workflow.
springs.ꟿ list.randomisedivide
shiffles the input list and divides it into sub-lists based on ratios(1/4 + 1/2 + 1/4 will give you three lists split accordingly) the smalest ratio will always be 1 / the list length and the largest ratio will be 1. a seed input can shuffle the list further.
springs.ꟿ list.split
splits a list at the desired length
springs.ꟿ list.subpairs
pair up each list item with the next one.
springs.ꟿ list.subpairswrapped
wrap the list and pair up each list item with the next one.
springs.ꟿ list.tostring
serializes a (nested) list or dictionary of basic objects into a valid design script syntax string.
springs.ꟿ math.median
calculate a median value from a list of numbers
springs.geometry.ꟿ mesh.boundingbox
get the bounding box of a mesh. works with both built-in meshes and toolkit meshes
springs.geometry.ꟿ mesh.topolysurface
converts a dynamo mesh to a polysurface. by default the node is single threaded, but if you specify a higher number of threads in the `numthread` input, the node will run multi-threaded to speed up the conversion.

*warning* using multi-threaded code with dynamo's geometry kernel may crash revit in some cases.
springs.geometry.ꟿ mesh.totkmesh
converts a dynamo mesh to a toolkit mesh. you obviously need to have the appropriate version of the mesh toolkit package downloaded first.
springs.geometry.ꟿ mesh.volumearea
gets the volume and the area of a mesh. works with both built in meshes and toolkit meshes. based on math from geometry3sharp.

note that if triangles don't define closed region, volume is probably nonsense.
springs.geometry.ꟿ n-hedron.byoriginvector
creates a multi-sided poyhedron with defined side length and total height.
springs.ꟿ number.almostequal
checks if a number is almost equal to a value with a specified tollerance.
springs.ꟿ number.tostring
converts the input number(s) to string. you can optionally limit the number of digits.
springs.revit.ꟿ opening.infloorbycurves
create hosted floor opeinngs through the input floors. the second input is a list of sub-lists of the boundary curves.
springs.revit.ꟿ opening.shaftbycurves
creates a shaft opening. the top level must be higher than the base level for a successful execution. you can either provide one base and top level for all shafts or have unique levels for each shaft instance.
springs.revit.utility.ꟿ parse.errorreport
process a revit error report (html file) and extract the error types, all affected elements and the total number of errors. if you are executing from a document different than the one the error report belongs to, be sure to set "fetch_elements" to false.
springs.revit.utility.ꟿ parse.interferencecheck
process a revit interference check (html file) and extract the interference categories, all affected elements and the total number of clashes. if you are executing from a document different than the one the error report belongs to, be sure to set "fetch_elements" to false.
springs.geometry.ꟿ planarface.fixdomain
corrects the surface domain of a 3 or 4 point planar face extracted from revit.
springs.geometry.ꟿ point.boxeddistanceto
computes the minimal distance between a point and the axis-aligned bounding boxe of a geometry element. works directly with a bounding box input for the geometry.
springs.geometry.ꟿ point.pullontoplane
pulls (projects) the point onto the input plane, following the plane normal.
springs.geometry.serialization.ꟿ point.tostring
serilize a point to a string. you can use a custom delimier  between the coordinates and apply an optional rounding. works great with revit text based parameters or excel.
springs.geometry.ꟿ points.convexhull2d
computes the xy convex hull of a given set of points based on the monotone chain algorithm.
springs.geometry.ꟿ points.minarearectangle
computes the minimum area rectangle in xy space for a set of points using a linear time algorithm
springs.geometry.ꟿ points.pruneduplicates+
an alternative to the built in node, that performs faster at the price of loosing the order of the points. all floating point valies are rounded to the nearest 4 decimal points. you can optionally remove duplicate z values by setting "keepduplicatez" to false.
springs.geometry.ꟿ polycurve.arcchamfer
symmetrically chamfers the corners of the polycurve by the designated distance and close with tangent arcs.
springs.geometry.ꟿ polycurve.chamfer
symmetrically chamfers the corners of the polycurve by the designated distance
springs.geometry.ꟿ polycurve.fillet+
fillet a polycurve in its plane. unlike the built in node, this works in both in the cw and the ccw direction.
springs.geometry.ꟿ polycurve.points
gets all the unique start and end points of the underlying curves in a sorted list.
springs.geometry.ꟿ polygon.2darea
returns the planar area of the input polygon(s). not accurate for self-intersecting polys.
springs.geometry.ꟿ polygon.3darea
returns the planar area of the input polygon(s) in euclidean space. not accurate for self-intersecting polys.
springs.geometry.ꟿ polygon.containmenttest+
a less accurate method that should perform faster than the built-in node for large data sets.
springs.geometry.ꟿ polygon.isrectangular
determines if a polygon (or a polycurve) is rectangular or square. if you want to differenciate between square and rectangular polys, use the xor output.
springs.revit.utility.ꟿ process.emptyworkingset
use at your own risk! removes as many pages as possible from the working set of the active revit session.
springs.geometry.ꟿ quads.bypointmatrix
creates a ccw or cw list of quad pairs from a rectangular nested list of points.
springs.revit.utility.ꟿ relativelevel.atheight
select the level closest to the input height from the list of input levels
springs.revit.ꟿ revitlinktype.isloaded
checks if a rvt link is loaded
springs.revit.ꟿ scopebox.geometry
fetches the base curve and solid representation of a scope box element.
springs.revit.selection.ꟿ selectelementsinorder
select multiple elements from the revit document in the desired order. hit esc to stop picking. to refresh the node, connect a boolean switch node.
springs.revit.selection.ꟿ selectfaces+
select multiple faces from inside the revit ui. be sure to press "finish" once done. unlike the built-in node, face references of instances will be added sucessfully and you'l get the pick points. you can use a boolean toggle to refresh your selection.
springs.revit.selection.ꟿ selectinrevit
selects the input elements inside the revit ui.
springs.revit.selection.ꟿ selectlinkedelement
select the linked instance first, followed by the element. if your selection fails, just press escape.
to refresh the node, connect a boolean switch node.
springs.revit.selection.ꟿ selectlinkedelementsinorder
select the linked instance first. then select multiple elements from the revit document in the desired order. hit esc to stop picking. to refresh the node, connect a boolean switch node.
springs.revit.selection.ꟿ selectlinkedelements
select the linked instance first, followed by the elements. to finish the selection, press finish. if your selection fails, just press escape or cancel.
to refresh the node, connect a boolean switch node.
springs.revit.selection.ꟿ selectlinkedface
select the linked instance first, followed by the face. the face will be transformed to the host file's coordinate system. if your selection fails, just press escape.
to refresh the node, connect a boolean switch node.
springs.revit.ꟿ sheet.views+
extracts all views and schedules (minus the revision schedule) placed on the input sheet (or sheets).
will be depreciated once the bult in node works with all plan types.
springs.geometry.ꟿ star.bycenterradiusrays
fun little node to create star shapes.
springs.ꟿ string.replaceillegalchars
replaces all characters in a string that are found in a commonly known list of illegal characters
springs.ꟿ string.rightsplitonce
gets the tail of a string
springs.geometry.serialization.ꟿ string.toline
de-serilize a revit parameter string into a geometric line.
springs.geometry.serialization.ꟿ string.topoint
de-serilize a revit parameter string into a geometric point.
springs.geometry.ꟿ surface.outerperimetercurves
get only the outer perimeter of a surface, dropping  the inner openings.
springs.geometry.ꟿ surface.trimwithloopsfix
a temporary replacement for the broken built-in node. for best results, make sure the loops are convex.
springs.revit.ꟿ textnote.bypoint
places a text note at a given point in the view. view, text type and content can either be a single item for all points or the same length as the number of points.
set track to false if you'd like to place notes on every run.
springs.geometry.tkmesh.bypolygon
converts a closed polygon into a toolkit mesh using an ear-clipping division
springs.geometry.tkmesh.differentiatedisplay
paints the input toolkit meshes using the default color range. works well with lists of meshes.
springs.geometry.ꟿ tkmesh.flatten
sets the z coordinate of each vertex of the mesh to the desired value.
springs.geometry.ꟿ tkmesh.merge
creates a single mesh entity from a list of toolkit meshes.
springs.geometry.ꟿ tkmesh.thicken
thickens a surface mesh in the provided direction and by the supplied distance.
springs.geometry.ꟿ tkmesh.tomesh
attempts to convert a toolkit mesh to a dynamo mesh. you obviously need to have the appropriate version of the mesh toolkit package downloaded first.
springs.ꟿ utility.announce
uses the standard windows speech synthesiser to make an announcement when the note gets executed. useful when placed after a long running task.
springs.ꟿ utility.getdata
using the application's app domain, this node will try to fetch any data stored under the specified name. you'll need to first store the data with the `utility.setdata` node.
springs.ꟿ utility.setdata
using the application's app domain, this node will store a reference to the input data under the specified name. use the `utility.getdata` node to retrieve the data somewhere else.

try not to store large ammounts of data, because you risk creating a memory leak that will persist till you close down the aplication.
springs.revit.ꟿ viewset.byviewsname
creates a set of views(or sheets) for printing. if the set exists, set overwrite to true to replace it.
springs.geometry.ꟿ voronoi2d.bypoints
create a voronoi tessellation of a set of planar points. the cell lines will be culled to the bounding extent of the points.
springs.revit.ꟿ wall.iscurtainwall
returns true if the wall is a curtain wall.
springs.display.ꟿ watchdialog
this node that serializes the input information and presents it in a resizable text window.
archilab.core.utilities.offset.top
top offset.
archilab.core.utilities.offset.right
right offset.
archilab.core.utilities.offset.bottom
bottom offset.
archilab.core.utilities.offset.left
left offset.
archilab.core.utilities.offset.create
creates offset object that has default values set to 0 for all four sides.
archilab.revit.workset.byname
create workset by name.
archilab.revit.workset.rename
archilab.revit.workset.getall
retrieves all user created worksets.
archilab.revit.workset.name
workset name
archilab.revit.workset.id
workset id
archilab.revit.workset.guid
workset guid
archilab.spellcheck.speller.speller
archilab.spellcheck.speller.checkspelling
archilab.revit.ceilingplanviews.bylevelandtype
create a floor plan view by level and view family type.
archilab.revit.ceilingplanviews.byroom
archilab.revit.floorplanviews.bylevelandtype
archilab.revit.floorplanviews.byroom
archilab.revit.imageviews.savetoproject
archilab.revit.imageexportoptions.create
archilab.revit.imageexportoptions.setviewsandsheets
archilab.revit.imageexportoptions.getviews
archilab.revit.imageexportoptions.getfilename
archilab.revit.imageexportoptions.isvalidfilename
archilab.revit.imageexportoptions.isvalidforsavetoprojectasimage
archilab.revit.sheets.createplaceholder
create placeholder sheet.
archilab.revit.sheets.revisions
revisions on sheet.
archilab.revit.sheets.getrevisionnumberonsheet
retrieves revision number that given revision has on a sheet. this comes handy when revision numbers are set to vary per sheet.
archilab.revit.sheets.viewports
viewports on sheet.
archilab.revit.sheets.isplaceholder
returns true if sheet is placeholder.
archilab.revit.threed.byname
creates a three dimensional isometric view by a name.
archilab.revit.viewports.getboxcenter
archilab.revit.viewports.setboxcenter
archilab.revit.views.removefilter
view
remove view filter from view.
archilab.revit.views.setviewtemplate
template
set view template for a view.
archilab.revit.views.removeviewtemplate
removes view template from given view.
archilab.revit.views.getallviewtypes
archilab.revit.views.getbytype
get all views
get all views by type.
archilab.revit.views.setworksetvisibility
workset
visibility
sets workset visibility for a view.
archilab.revit.views.duplicate
duplicates an existing view.
archilab.revit.views.createcallout
callout
creates a new view callout.
archilab.revit.views.createreferencecallout
reference
archilab.revit.views.changereferencedview
change
changes the referenced view for a callout.
archilab.revit.views.setcropbox
crop box
sets view's crop box to size matching supplied bounding box.
archilab.revit.views.cropboxvisible
archilab.revit.views.setcropboxbycurves
archilab.revit.views.setname
changes view's name to a new one.
archilab.revit.views.setdetaillevel
archilab.revit.views.setdisplaystyle
archilab.revit.views.cropview
archilab.revit.views.annotationcrop
archilab.revit.views.setimportsinfamiliesvisibility
archilab.revit.views.setimportedcategoriesvisibility
archilab.revit.views.hideelements
archilab.revit.views.unhideelements
archilab.revit.views.setcategoryoverrides
archilab.revit.views.lowerleftcorner
archilab.revit.views.getimportedcategories
archilab.revit.views.viewtemplate
get view template applied to view.
archilab.revit.views.istitleblockschedule
titleblock
schedule
check if schedule is titleblock schedule.
archilab.revit.views.isonsheet
isonsheet
is on sheet
check if view is placed on a sheet.
archilab.revit.views.referencecallouts
retrieves reference callouts from a view.
archilab.revit.views.outline
outline
get view's outline ie. rectangle.
archilab.revit.views.cropbox
retrieves crop box of the view as bounding box object.
archilab.revit.views.viewtype
archilab.revit.views.detaillevel
archilab.revit.views.partsvisibility
archilab.revit.views.discipline
archilab.revit.views.filteroverrides
archilab.revit.views.categoryoverrides
archilab.revit.views.filtervisibility
archilab.revit.views.isfilterapplied
archilab.revit.views.modeldisplay
archilab.revit.views.sketchylines
archilab.revit.views.lighting
archilab.revit.views.displaystyle
archilab.revit.views.background
archilab.revit.views.depthcueing
archilab.revit.views.renderingsettings
archilab.revit.overridegraphicssettings.properties
archilab.revit.overridegraphicssettings.halftone
archilab.revit.overridegraphicssettings.transparency
archilab.revit.overridegraphicssettings.projectionlinepattern
archilab.revit.overridegraphicssettings.projectionlinecolor
archilab.revit.overridegraphicssettings.projectionlineweight
archilab.revit.overridegraphicssettings.issurfaceforegroundpatternvisible
archilab.revit.overridegraphicssettings.surfaceforegroundpattern
archilab.revit.overridegraphicssettings.surfaceforegroundcolor
archilab.revit.overridegraphicssettings.issurfacebackgroundpatternvisible
archilab.revit.overridegraphicssettings.surfacebackgroundpattern
archilab.revit.overridegraphicssettings.surfacebackgroundcolor
archilab.revit.overridegraphicssettings.cutlinepattern
archilab.revit.overridegraphicssettings.cutlinecolor
archilab.revit.overridegraphicssettings.cutlineweight
archilab.revit.overridegraphicssettings.iscutforegroundpatternvisible
archilab.revit.overridegraphicssettings.cutforegroundpattern
archilab.revit.overridegraphicssettings.cutforegroundcolor
archilab.revit.overridegraphicssettings.iscutbackgroundpatternvisible
archilab.revit.overridegraphicssettings.cutbackgroundpattern
archilab.revit.overridegraphicssettings.cutbackgroundcolor
archilab.revit.viewdisplaybackgrounds.type
archilab.revit.viewdisplaybackgrounds.properties
archilab.revit.viewdisplaydepthcueing.properties
archilab.revit.renderingsettings.settings
archilab.revit.renderingsettings.usesregionrendering
archilab.revit.renderingsettings.regionoutline
archilab.revit.renderingsettings.qualitysettings
archilab.revit.renderingsettings.imageexposuresettings
archilab.revit.renderingsettings.backgroundsettings
archilab.revit.scheduleviews.isitemized
archilab.revit.viewsets.getall
retrieves all of the view sets from the model.
archilab.revit.viewsets.byviewsname
creates new view set by name and list of views.
archilab.revit.viewsets.views
retrieves all of the views from a view set.
archilab.revit.viewtemplates.duplicate
creates a copy of view template.
archilab.revit.viewtemplates.gettemplateparameterids
retrieves template parameter ids.
archilab.revit.viewtemplates.include
sets the view template parameter's "include" property.
archilab.revit.viewtemplates.isincluded
retrieves current status of the "include" parameter for a view template.
archilab.revit.viewtemplates.noncontrolledtemplateparameters
retrieves a list of non-controlled template parameters. these are parameters that have the "include" parameter unchecked.
archilab.revit.viewtemplates.getparametername
retrieves view template parameter name from its id.
archilab.revit.formatoptions.create
archilab.revit.units.create
archilab.revit.units.setformatoptions
archilab.revit.units.getinternal
archilab.revit.unitutils.convertfrominternalunits
archilab.revit.unitutils.format
archilab.revit.select.getdocuments
retrieves all link documents and their names/paths.
archilab.revit.select.getroomatpoint
retrieves a room at given point.
archilab.revit.select.getsurveypoint
retrieves survey point from the model.
archilab.revit.select.getlevelbyname
retrieve level by its name.
archilab.revit.select.gettextnotetypebyname
retrieve a textnotetype by its name.
archilab.revit.select.getallworksetsbykind
select all worksets in the model.
archilab.revit.select.byworkset
returns all elements at a given workset.
archilab.revit.select.byelementid
select element by id
archilab.revit.select.bycategoryandlevel
select elements by level and category.
archilab.revit.select.bycategoryanddesignoption
select all elements by design option and category.
archilab.revit.select.bytypeanddocument
selects all elements of given type from given document (linked models).
archilab.revit.select.bytypenameanddocument
archilab.revit.select.bycategory
archilab.revit.select.bycategoryandview
select elements by category and view.
archilab.revit.select.byparametervalue
parameter value filter.
archilab.revit.points.pullontoplane
archilab.revit.points.roundtoprecision
archilab.revit.surfaces.getwall
archilab.revit.appearanceassets.createviaduplicate
creates a new appearance asset element via duplicating of default material's appearance asset element.
archilab.revit.appearanceassets.setgenericproperties
sets the generic properties of an appearance asset element.
archilab.revit.appearanceassets.settransparencyproperties
sets the transparency properties of an appearance asset element.
archilab.revit.appearanceassets.setreflectivityproperties
sets the reflectivity properties of an appearance asset element.
archilab.revit.appearanceassets.gettransparencyproperties
archilab.revit.appearanceassets.getreflectivityproperties
archilab.revit.appearanceassets.getschema
archilab.revit.appearanceassets.getgenericproperties
archilab.revit.appearanceassets.getwallpaintproperties
archilab.revit.applications.versionnumber
archilab.revit.assemblies.addmembers
archilab.revit.assemblies.members
archilab.revit.compoundstructure.layers
retrieves a list of layers that make up the wall type.
archilab.revit.connectors.connect
archilab.revit.connectors.point
archilab.revit.documents.regenerate
archilab.revit.ducts.insertdamper
archilab.revit.ducts.split
archilab.revit.ducts.location
archilab.revit.ducts.connectors
archilab.revit.grids.settoviewcropbox
archilab.revit.renderingbackgroundsettings.settings
archilab.revit.categories.getall
archilab.revit.curtaingridlines.getreference
archilab.revit.curtaingrids.ugrids
archilab.revit.curtaingrids.vgrids
archilab.revit.curtaingrids.numulines
archilab.revit.curtaingrids.numvlines
archilab.revit.dimensions.create
archilab.revit.elements.delete
element
delete element from revit db.
archilab.revit.elements.moveelements
archilab.revit.elements.filterbyname
archilab.revit.elements.getcategory
archilab.revit.elements.getworksharingtooltipinfo
returns worksharing information about element.
archilab.revit.elements.phasedemolished
demolished phase assigned to element.
archilab.revit.elements.assembly
archilab.revit.elements.type
get element type.
archilab.revit.elements.isvisible
checks whether an element is visible in given view.
archilab.revit.elements.ishidden
archilab.revit.elements.ownerview
archilab.revit.elements.boundingbox
archilab.revit.elements.allviewsvisiblein
returns all views of given type that an element is visible in.
archilab.revit.elements.isvisibleinview
checks if element is visible in a view.
archilab.revit.elements.location
archilab.revit.elementtypes.duplicate
duplicates element type given a name doesn't exist. if it does it will return element type with that name.
archilab.revit.faces.reference
archilab.revit.familyinstances.byline
new family instance by curve
archilab.revit.familyinstances.byview
archilab.revit.familyinstances.byhostandpoint
archilab.revit.familyinstances.byfaceandpoint
archilab.revit.familyinstances.flipfacingorientation
archilab.revit.familyinstances.fliphandorientation
archilab.revit.familyinstances.connectors
archilab.revit.familyinstances.subcomponents
archilab.revit.fillpatterns.getbyname
archilab.revit.fillpatterns.setname
archilab.revit.fillpatterns.target
archilab.revit.fillpatterns.orientation
archilab.revit.fillpatterns.name
archilab.revit.fillpatterns.iscrosshatch
archilab.revit.fillpatterns.angle
archilab.revit.fillpatterns.linespacing1
archilab.revit.fillpatterns.linespacing2
archilab.revit.fillpatterns.issolidfill
archilab.revit.fillpatterns.exists
archilab.revit.imageinstances.create
archilab.revit.imagetypes.create
creates a new image type import object.
archilab.revit.imagetypes.pagenumber
retrieves page number that import was created from.
archilab.revit.imagetypes.filepath
retrieves file path that import was created from.
archilab.revit.imageplacementoptions.create
archilab.revit.imagetypeoptions.create
creates image type options for image import.
creates image type options for image/pdf import.
archilab.revit.imagetypeoptions.pagenumber
retrieves page number that options are set to.
archilab.revit.imagetypeoptions.resolution
retrieves resolution that options are set to.
archilab.revit.imagetypeoptions.filepath
retrieves file path that options are set to.
archilab.revit.linestyles.setcolor
archilab.revit.materials.create
creates new material by name.
archilab.revit.materials.setappearanceasset
sets the appearance asset element for the material.
archilab.revit.materials.setmaterialcategory
sets materialcategory property for the material.
archilab.revit.materials.setmaterialclass
archilab.revit.materials.getmaterialclass
archilab.revit.materials.setsurfacepattern
sets surface pattern properties for a material.
archilab.revit.materials.getsurfacepatterns
archilab.revit.materials.setcutpattern
sets cut pattern properties for a material.
archilab.revit.materials.getcutpatterns
archilab.revit.materials.userenderappearanceforshading
sets the checkbox property on the material that would force the appearance color to be used for shading display in revit.
archilab.revit.materials.usesrenderappearanceforshading
archilab.revit.materials.setcolor
sets the color of the material.
archilab.revit.materials.getcolor
archilab.revit.materials.assets
retrieves default assets that material can have.
archilab.revit.outline.minimumpoint
archilab.revit.outline.maximumpoint
archilab.revit.parameter.setbuiltinparameter
archilab.revit.parameter.getbuiltinparameter
archilab.revit.parameter.getbuiltinparametername
returns name of the builtinparameter if such exists.
archilab.revit.renderingimageexposuresettings.settings
archilab.revit.renderingqualitysettings.settings
archilab.revit.revisions.setsequence
sets revisions in a sequence that they are supplied.
archilab.revit.revisions.create
create a new revision.
archilab.revit.room.name
room name
archilab.revit.room.boundaries
archilab.revit.room.faces
archilab.revit.room.height
archilab.revit.room.glazinginfo
archilab.revit.room.pointsonsurface
archilab.revit.schema.findbyguid
retrieves a schema from current document by its guid.
archilab.revit.schema.findbyname
retrieves a schema from current document by its name.
archilab.revit.schema.getall
retrieves all schemas from the model.
archilab.revit.schema.eraseschemaandallentities
deletes schema and all its entities from document.
archilab.revit.schema.writeaccessgranted
checks if current addins has write access for this schema.
archilab.revit.schema.readaccessgranted
checks if current addins has read access for this schema.
archilab.revit.schema.name
schema name.
archilab.revit.schema.guid
schema guid.
archilab.revit.schema.documentation
schema documentation/description.
archilab.revit.sunandshadowsettings.settings
archilab.revit.sunandshadowsettings.solarstudy
archilab.revit.tags.setheadposition
archilab.revit.tags.setleader
archilab.revit.tags.byelement
archilab.revit.tags.byelements
archilab.revit.tags.isorphaned
archilab.revit.tags.tagtext
archilab.revit.tags.tagheadposition
archilab.revit.tags.ismaterialtag
archilab.revit.tags.ownerview
archilab.revit.tags.istagginglinkdoc
archilab.revit.textnotes.textnotes
archilab.revit.textnotes.width
archilab.revit.thinlinesoptions.showthinlines
archilab.revit.viewfilter.ownerviews
owner
returns views that view filter is applied to.
archilab.revit.walls.walltype
archilab.revit.walls.islinebased
archilab.revit.walls.getalignedboundingbox
archilab.revit.walls.curtaingrid
archilab.revit.walls.getfaces
archilab.revit.walls.getdimensionline
archilab.revit.walls.iswalljoinallowed
archilab.revit.walls.jointype
archilab.revit.walltypes.duplicate
archilab.revit.walltypes.setmaterial
archilab.revit.walltypes.kind
archilab.revit.walltypes.compoundstructure
get the compound structure of the wall type. this holds information about the layers and materials making up the wall type.
archilab.revit.warninglibrary.ratings
dictionary of stored warning - rating relationships.
archilab.revit.warninglibrary.warninglibraryfromcsv
creates a custom warning library that stores all ratings for warnings.
archilab.revit.warning.assignederrormessage
custom error message
archilab.revit.warning.errormessage
error message
archilab.revit.warning.elements
list of elements
archilab.revit.warning.rating
rating of severity of warning where 1 is ignorable and 3 is severe.
archilab.revit.warning.getwarnings
archilab.revit.warning.assignrating
assigns a rating to warning based on custom library of ratings.
archilab.revit.warning.assignerrormessage
assign a custom error message to warning.
archilab.revit.warning.parsehtml
parse html warning report.
archilab.revit.warningelement.workset
archilab.revit.warningelement.category
category name
archilab.revit.warningelement.family
family name
archilab.revit.warningelement.type
type name
archilab.revit.warningelement.id
revit id
archilab.revit.warningelement.designoptionset
design option set name
archilab.revit.warningelement.designoption
design option name
archilab.revit.warningelement.rating
warning rating on scale from 1-3 where 1 is ignorable and 3 is severe.
archilab.pdf.pdf.pagecount
returns page count of a pdf document.
archilab.maps.googlemaps.googlemaps
archilab.maps.googlemaps.downloadmap
archilab.maps.mapsettings.mapsettings
archilab.maps.mapsettings.maptype
archilab.maps.mapsettings.imageformat
archilab.maps.mapsettings.scale
archilab.maps.mapsettings.latitude
archilab.maps.mapsettings.longitude
archilab.maps.mapsettings.zoom
archilab.maps.mapsettings.width
archilab.maps.mapsettings.height
archilab.core.lists.removeitem
archilab.core.lists.weave
archilab.core.lists.duplicateitemindicies
returns a list of duplicate item indices as well as unique item indices.
archilab.core.lists.replaceitematindex
replace items in a list based on list of index numbers.
archilab.core.lists.sortlistbyanother
sort list by another list.
archilab.core.lists.booleangate
archilab.core.lists.clean
archilab.core.lists.minindex
archilab.http.request.bystringandtype
archilab.github.github.createclient
archilab.github.github.getstatistics
get contributors list with additions, deletions, and commit counts.
archilab.github.github.getcommitactivity
returns the last year of commit activity grouped by week. the days array is a group of commits per day, starting on sunday.
archilab.github.github.getcodefrequency
get the number of additions and deletions per week.
archilab.github.github.getpunchcard
get the number of commits per hour in each day.
archilab.github.github.getparticipation
get the weekly commit count for the repository owner and everyone else. returns the total commit counts for the owner and total commit counts in all. all is everyone combined, including the owner in the last 52 weeks. if you'd like to get the commit counts for non-owners, you can subtract owner from all. the array order is oldest week (index 0) to most recent week.
archilab.github.github.timestamptodate
converts unix epoch timestamp to human readable date/time.
archilab.github.author.author
archilab.github.author.login
archilab.github.author.id
archilab.github.author.avatarurl
archilab.github.author.gravatarid
archilab.github.author.url
archilab.github.author.htmlurl
archilab.github.author.followersurl
archilab.github.author.followingurl
archilab.github.author.gistsurl
archilab.github.author.starredurl
archilab.github.author.subscriptionsurl
archilab.github.author.organizationsurl
archilab.github.author.reposurl
archilab.github.author.eventsurl
archilab.github.author.receivedeventsurl
archilab.github.author.type
archilab.github.author.siteadmin
archilab.github.week.week
archilab.github.week.w
archilab.github.week.a
archilab.github.week.d
archilab.github.week.c
archilab.excel.epplus.writebyarray
archilab.excel.namedrange.name
archilab.excel.workbook.byfilepath
archilab.excel.workbook.getnamedrangevalues
archilab.excel.workbook.namedranges
archilab.excel.workbook.worksheets
archilab.excel.worksheet.worksheet
archilab.excel.worksheet.name
archilab.csv.csv.valuesbyheadername
get values by header name. use headers component to get all the names.
archilab.csv.csv.valuesbyheadernumber
get values by header index. you can use columncount to see how many are available or simply grab one row and inspect it.
archilab.csv.csv.valuesbyrownumber
get values by row index. you can use rowcount to see how many are available or simply grab one column and inspect it.
archilab.csv.csv.valuebyrowandcolumn
get single value by its row and column index.
archilab.csv.csv.rownumberbyheaderandstring
get row number based on column and matching string.
archilab.csv.csv.byfilepath
create csv file to be parsed.
archilab.csv.csv.headers
get headers.
archilab.csv.csv.columncount
get column count.
archilab.csv.csv.rowcount
get row count.
archilab.core.datetimes.fromunixtime
returns a datetime from unix time.
archilab.core.datetimes.parseexact
parses a date time string into a datetime object.
archilab.core.datetimes.totalmilliseconds
converts a date time object into number of total milliseconds that passed since epoch.
archilab.core.datetimes.totalseconds
converts a date time object into number of total seconds that passed since epoch.
archilab.core.datetimes.totalminutes
converts a date time object into number of total minutes that passed since epoch.
archilab.core.datetimes.totalhours
converts a date time object into number of total hours that passed since epoch.
archilab.core.datetimes.totaldays
converts a date time object into number of total days that passed since epoch.
archilab.core.maths.round
archilab.core.strings.replace
archilab.core.strings.regexmatch
archilab.core.strings.tostring
archilab.core.types.getassemblyqualifiedname
rhythm.string.modify.totitle
converts the input string to a title case.
rhythm.string.modify.tosentence
rhythm.string.modify.toquantity
this will attempt to return a quantity, given a string and count. made possible with humanizer (https://github.com/humanizr/humanizer)
rhythm.string.modify.truncate
this will truncate the given string, byt the given length. (eg."long text to truncate", with 10, becomes long text…") made possible with humanizer (https://github.com/humanizr/humanizer)
rhythm.string.modify.pluralize
this will attempt to return a plural version of a word. made possible with humanizer (https://github.com/humanizr/humanizer)
rhythm.string.modify.singularize
this will attempt to return a singular version of a word. made possible with humanizer (https://github.com/humanizr/humanizer)
rhythm.string.modify.titleize
titleize converts the input words to title casing made possible with humanizer (https://github.com/humanizr/humanizer)
rhythm.string.modify.pascalize
pascalize converts the input words to uppercamelcase, also removing underscores and spaces. (eg. sometitleforsomething) made possible with humanizer (https://github.com/humanizr/humanizer)
rhythm.string.modify.camelize
camelize behaves identically to pascalize, except that the first character is lower case. (eg. sometitleforsomething) made possible with humanizer (https://github.com/humanizr/humanizer)
rhythm.string.modify.underscore
underscore separates the input words with underscore. (eg. some_title) made possible with humanizer (https://github.com/humanizr/humanizer)
rhythm.string.modify.dasherize
underscore separates the input words with a dash. (eg. some-title) made possible with humanizer (https://github.com/humanizr/humanizer)
rhythm.string.modify.humanize
humanize string extensions allow you turn an otherwise computerized string into a more readable human-friendly one. "underscored_input_string_is_turned_into_sentence." becomes "underscored input string is turned into sentence" made possible with humanizer (https://github.com/humanizr/humanizer)
rhythm.string.modify.formatwith
format input string with arguments. made possible with humanizer (https://github.com/humanizr/humanizer)
rhythm.string.modify.mocktext
this generates a "mocking text" case. just for fun. 😀
rhythm.numbers.numbers.towords
convert the input numbers into words. only considers whole numbers (integers). made possible with humanizer (https://github.com/humanizr/humanizer)
rhythm.numbers.numbers.toordinalwords
convert the input numbers into ordinal words. only considers whole numbers (integers) (eg. 1 becomes 1st). made possible with humanizer (https://github.com/humanizr/humanizer)
rhythm.numbers.numbers.toroman
rhythm.numbers.numbers.toheading
convert the input numbers into headings: n,s,e,w or north, east, south or west. made possible with humanizer (https://github.com/humanizr/humanizer)
rhythm.numbers.numbers.toheadingarrow
convert the input numbers into headings: ↑, →, ↓, ←. made possible with humanizer (https://github.com/humanizr/humanizer)
rhythm.math.markovchain.predictnext
rhythm.helpers.helpers.toggle
this provides a toggle based on boolean input. replacement for rhythm.toggle.
rhythm.helpers.helpers.thisorthat
this provides a toggle input to select between 2 inputs.
rhythm.helpers.importexport.screenshotmainwindow
creates a full screenshot of the main window.
rhythm.helpers.system.currentusertempfolder
this returns the temporary path for the current user.
rhythm.helpers.system.currentuserappdata
this returns the appdata path for the current user.
rhythm.helpers.system.currentuserdomainname
returns the domain name of the current user.
rhythm.helpers.system.sendtoclipboard
send the given string to the clipboard
rhythm.helpers.system.currentusername
returns the current windows user.
rhythm.helpers.system.jigglemouse
this will move your mouse back and forth slowly while periodic run is on.
rhythm.generativedesign.generativedesign.packviewports
rhythm.system.system.compress
rhythm.about.about.aboutrhythm
this is mostly to show the icon in the dynamo 2.0 library.
rhythm.revit.worksharing.element.creator
this node will output the username of the creator of the element if it is available. keep in mind this only works with workshared documents!
rhythm.revit.worksharing.element.lastchangedby
this node will output the username of the person who last changed the element if it is available. keep in mind this only works with workshared documents!
rhythm.revit.views.view.viewport
retrieve the view's viewport(s) if there is one.
rhythm.revit.views.view.converttoindependent
dependent
rhythm
this node will convert a dependent view to an independent.
rhythm.revit.views.view.getcropregionelement
crop region
this node will obtain the crop region element from the view.
rhythm.revit.views.view.setelementprojectionlineweight
this node will override the given element's projection lineweight in given view.
rhythm.revit.views.view.getfiltervisibility
this node will supply the visibility of the given filter in given view.
rhythm.revit.views.view.parentview
parent
retrieve the input dependent view's parent, (if available).
rhythm.revit.views.view.origin
retrieve the input view's origin, (if available).
rhythm.revit.views.view.getworksetvisibility
workset.visible
this node will supply the visibility of the given workset in given view.
rhythm.revit.views.view.setcropregion
cropregion
crop
this will attempt to set the view's crop region given a bounding box.
rhythm.revit.views.view.isfilterenabled
revit 2021 - checks if a view filter is enabled in the given view.
rhythm.revit.views.view.togglefilterinview
revit 2021 - this attempts to enable or disable a filter for a given view.
rhythm.revit.views.view.getorderedfilters
revit 2021 - returns the filters in order for the given view.
rhythm.revit.views.view3d.setsectionbox
this node will set the given 3d view's section box.
rhythm.revit.views.viewsection.overridecrop
overridecrop
this node will override the crop region of the given section view based on the pen weight provided. slower but more reliable version that uses transaction rollback to isolated the crop region element.
rhythm.revit.views.viewsection.overridecropversion2
this node will override the crop region of the given section view based on the pen weight provided. this is the faster version that works with interior elevations.
rhythm.revit.views.viewsection.locationpoint
viewsection.locationpoint
rhythm.revit.views.viewsection.createreferencesection
creates a reference section.
rhythm.revit.views.viewplan.getoutline
this node will get the bounds of the view in paper space (in feet).
rhythm.revit.views.viewplan.getcropbox
rhythm.revit.views.viewplan.rotate
this node will attempt to rotate a plan view into a 3d view. use at your own risk!
rhythm.revit.helpers.helpers.simpleusermessage
this provides a simple user message.
rhythm.revit.helpers.helpers.usermessage
this provides a user message with the option to cancel the process downstream. if no is selected the node will return null.
rhythm.revit.helpers.helpers.toggleelementbinder
this allows you to turn off element binding in the dyn.
rhythm.revit.helpers.helpers.purgebindings
rhythm.revit.helpers.helpers.currentrevitversion
returns the current revit version
rhythm.revit.application.applications.opendocumentfile
application.opendocumentfile
this node will open the given file in the background.
rhythm.revit.application.applications.closedocument
application.closedocument
this node will close the given document with the option to save.
rhythm.revit.application.applications.upgradefile
this will try to open a file in the current version with various options.
rhythm.revit.application.applications.getopendocuments
this node provides access to all of the open documents in revit.
rhythm.revit.application.applications.unloadrevitlinks
unload revit links for given file path.
rhythm.revit.application.documents.copyelementsfromlinkeddocument
copy
this node will copy the given elements from the given linked document into the active document.
rhythm.revit.application.documents.copyelementsfromdocument
this node will copy the given elements from the given document into the active document.
rhythm.revit.application.documents.setstartingview
startingview
this node will set the starting view of the document, given the view element.
rhythm.revit.application.documents.copydraftingviewsfromdocument
this node will copy the given drafting views and their contents from the given document into the active document.
rhythm.revit.application.documents.saveas
this node will save the revit document to another path.
rhythm.revit.application.documents.orchiddocumenttodbdocument
this converts orchid documents to revit db documents
rhythm.revit.application.documents.dbdocumenttoorchiddocument
this converts revit db documents to orchid documents.
rhythm.revit.tools.batch.upgradefamilies
this tool with batch upgrade all the revit families in a directory and delete the backup files that are generated.
rhythm.revit.tools.element.animatenumericparameter
animate a numeric parameter of an element. this will export images of the parameter, then revert the element back to where it was. also adds text to comments to prevent infinite loops.clear this comment for subsequent runs. inspired by the bad monkeys team.
rhythm.revit.tools.element.animatecolor
animate the color of an element. this will export images of the element, then revert the element back to where it was. inspired by the bad monkeys team.
rhythm.revit.tools.element.animatetransparency
animate the transparency of an element. this will export images of the element, then revert the element back to where it was. inspired by the bad monkeys team.
rhythm.revit.selection.collector.elementsoftypeindocument
all elements of type in document
this node will collect all elements of type from given document.
rhythm.revit.selection.collector.elementsofcategoryindocument
all elements of category in document
this node will collect all elements of the given category from given document.
rhythm.revit.selection.selection.intersectinggridsbymodelcurve
this node will select grids along a model curve element ordered based on the start of the model curve. this works in the active view. so whatever plan representation your grids have, that is what is used.
rhythm.revit.selection.selection.pick
sometimes a pick selection is nicer. 😁
rhythm.revit.ribbon.ribbontab.setname
ribbon.renametab
this will rename a tab given a new name.
rhythm.revit.ribbon.ribbontab.setvisibility
this will hide or show the given tab.
rhythm.revit.ribbon.ribbontab.setenabled
this will enable or disable the given tab.
rhythm.revit.ribbon.ribbontab.gettabs
this will give you access to all tabs.
rhythm.revit.ribbon.ribbontab.name
this will get the tab's name.
rhythm.revit.ribbon.ribbontab.visibility
this will get the tab's visibility status.
rhythm.revit.ribbon.modifiers.rotate
this will rotate your ribbon. seriously.
rhythm.revit.ribbon.modifiers.setfont
this will set the font on your ribbon.
rhythm.revit.ribbon.modifiers.setcolor
this will set the color of your ribbon.
rhythm.revit.elements.areas.areascheme
get the input area's scheme.
rhythm.revit.elements.areas.containspoint
this will report whether or not the area contains the given point.
rhythm.revit.elements.areas.areaatpoint
this will return the area at the given point.
rhythm.revit.elements.areas.boundaries
area.boundaries
this node will retrieve the area's boundaries. the first list is typically the outermost boundaries.
rhythm.revit.elements.areas.solid
this node will retrieve the area's solid geometry.
rhythm.revit.elements.areas.getareaatpoint
area.getareaatpoint
*beta* this node will retrieve the area(s) at the given point. this is a very slow method using solid intersection tests. you have been warned....
rhythm.revit.elements.areas.outerboundary
area.outerboundary
this node will retrieve the area's outermost boundary.
rhythm.revit.elements.areatag.taggedarea
retrieves the area that is tagged by the given area tag.
rhythm.revit.elements.filledregions.bymultipleloops
this will create a filled region with multiple loops. based on code from https://forum.dynamobim.com/t/filled-region-with-hole-in-the-middle-like-a-donut/22838/3
rhythm.revit.elements.ceiling.defaultceilingtype
collect the first ceiling type available.
rhythm.revit.elements.ceiling.bycurveloops
create a ceiling by multiple curve loops.
rhythm.revit.elements.floor.defaultfloortype
collect the first floor type available.
rhythm.revit.elements.floor.bycurveloops
create a floor with multiple loops.
rhythm.revit.elements.group.byelementsandorigin
this node is a pretty neat group creator, that allows for you to pick an origin at creation time.
rhythm.revit.elements.hostobject.exteriorsurface
this node will return the exterior face or faces for the input host object. this particular method works for walls.
rhythm.revit.elements.hostobject.interiorsurface
this node will return the interior face or faces for the input host object. this particular method works for walls.
rhythm.revit.elements.hostobject.topsurface
this node will return the bottom face or faces for the input host object. this particular method works for ceilings, roofs, or floors.
rhythm.revit.elements.hostobject.bottomsurface
rhythm.revit.elements.leaders.getleaderelbow
this will get the position of the leader's elbow. note: obtain the leader element from the text note with textnote.getleaders
rhythm.revit.elements.leaders.getleaderend
this will get the position of the leader's end. note: obtain the leader element from the text note with textnote.getleaders
rhythm.revit.elements.leaders.setleaderendposition
this will set a leader's end position. note: obtain the leader element from the text note with textnote.getleaders
rhythm.revit.elements.leaders.setleaderelbowposition
this will set a leader's elbow position. note: obtain the leader element from the text note with textnote.getleaders
rhythm.revit.elements.levels.hasview
level.hasview
check to see if the level has a view created for it.😎
rhythm.revit.elements.mullions.bydirection
this node will retrieve the mullions from the curtain wall grouped by direction.
rhythm.revit.elements.revitlinktype.reloadfrom
reload link from another path.
rhythm.revit.elements.categories.projectionlineweight
categories.projectionlineweight
get the category projection lineweight.
rhythm.revit.elements.categories.cutlineweight
categories.cutlineweight
get the category cut lineweight.
rhythm.revit.elements.categories.linecolor
categories.linecolor
get the category line color as rgb string..
rhythm.revit.elements.categories.linepattern
categories.linepattern
get the category line pattern.
rhythm.revit.elements.categories.material
categories.materialname
get the category material and name.
rhythm.revit.elements.walls.haseditedprofile
profile
wall
this node will try to check if the walls profile has been modified using the dependent elements method available in revit 2018.1+
rhythm.revit.elements.walls.editedprofile
rhythm.revit.elements.walls.direction
this will estimate the wall's facing direction. credit for the logic in this node goes to case. without the open source tools provided by don and the case team, this node would probably not exist. https://github.com/rudderdon/case-apps/blob/master/2017/case.directionality/case.directionality/data/clsexternalwalls.vb
rhythm.revit.elements.tags.getheadposition
tag
tag.location
the position of the head of tag in model coordinates (if available).
rhythm.revit.elements.tags.getleaderend
the position of the leader end for a tag using free end leader behavior.
rhythm.revit.elements.tags.getleaderelbow
the position of the elbow of the tag's leader.
rhythm.revit.elements.tags.setleaderendposition
this will attempt to set the leader end position of the tag.
rhythm.revit.elements.tags.setheadposition
this will attempt to set the head position of the tag.
rhythm.revit.elements.tags.setleaderelbowposition
this will attempt to set the leader elbow position of the tag.
rhythm.revit.elements.tags.tagtext
this will return the tag's text value
rhythm.revit.elements.roofs.addsplitlinewithelevation
element.createparts
this node will add a split line to the given roof with supplied line and elevation.
rhythm.revit.elements.roofs.addpoint
roof.addpoint
this node will add a point to the given roof.
rhythm.revit.elements.roofs.footprint
retrieve the footprint of any roof element
rhythm.revit.elements.curtaingridline.fullcurve
curtaingridline.fullcurve
this node will retrieve the geometric curve from the curtain wall.
rhythm.revit.elements.curtaingridline.allsegmentcurves
this node will retrieve the geometric curve segments from the curtain wall.
rhythm.revit.elements.curtaingridline.removesegment
curtaingridline.removesegment
this node will remove the given curve segments from the curtain grid line.
rhythm.revit.elements.curtaingridline.existingsegmentcurves
curtaingridline.existingsegmentcurves
this node will retrieve the geometric existing curve segments from the curtain wall.
rhythm.revit.elements.curtaingridline.skippedsegmentcurves
curtaingridline.skippedsegmentcurves
this node will retrieve the geometric skipped curve segments from the curtain wall.
rhythm.revit.elements.curtaingridline.setlocation
this node will attempt to set the location of the given grid line to the given point. note: this will "translate" the grid line parallel to where it is initially. we cannot move a u grid to a v grid and so forth.
rhythm.revit.elements.dimensions.getcurve
dimension.getcurve
this node will get the dimension's line.
rhythm.revit.elements.dimensions.segments
dimension.segments
this node will return the segments comprising the multi segment dimension.
rhythm.revit.elements.dimensions.isoverriden
dimension.isoverriden
this node will check if the dimension has any overrides in it of text.
rhythm.revit.elements.dimensions.displayunits
dimension.properties
dimension.displayunits
this node will return the display unit type for the given dimension.
rhythm.revit.elements.dimensions.accuracy
this node will return the accuracy for the given dimension.
rhythm.revit.elements.dimensions.color
dimension.color
this node will return the color for the given dimension.
rhythm.revit.elements.dimensions.setabovevalue
dimension.setabovevalue
this node will try to set the above value for the dimensions. this will work for either single segment dimensions or all segments of a multi-segment dimension.
rhythm.revit.elements.dimensions.setbelowvalue
dimension.setbelowvalue
this node will try to set the below value for the dimensions. this will work for either single segment dimensions or all segments of a multi-segment dimension.
rhythm.revit.elements.dimensions.getreferenceelements
dimension.getreferenceelements
this node will retrieve the reference elements of the dimension. will not work with multi segment dimensions.
rhythm.revit.elements.dimensions.centertextonline
dimension.centertextonline
*beta* this node will center the dimension's text on the line.
rhythm.revit.elements.dimensions.settextlocation
dimension.settextlocation
this node will try to set the text location for the given dimensions. this will work for either single segment dimensions or all segments of a multi-segment dimension.
rhythm.revit.elements.dimensions.numberofsegments
this node will return the number of segments comprising the multi segment dimension.
rhythm.revit.elements.dimensions.origin
dimension.origin
this node will return the origin of the dimension. if it is a multi-segment dimension it will output all of the pieces.
rhythm.revit.elements.dimensions.textposition
dimension.textposition
this node will return the text position of the dimension. if it is a multi-segment dimension it will output all of the pieces.
rhythm.revit.elements.dimensions.valuestring
this node will return the value (string) of the dimension. if the dimension is a multi-segment dimension, this will find all of the above values. this method returns what the dimension would be in it's non-rounded form. if you want the actual displayed string use dimension.displayvaluestring in rhythm.
rhythm.revit.elements.dimensions.abovevalue
retrieve the dimension above value. if the dimension is a multi-segment dimension, this will find all of the above values.
rhythm.revit.elements.dimensions.belowvalue
retrieve the dimension below value. if the dimension is a multi-segment dimension, this will find all of the below values.
rhythm.revit.elements.dimensions.displayvaluestring
retrieve the actual dimension display value. the built in revitapi method returns the string per the project setting. this returns it per the dimension setting.
rhythm.revit.elements.curtainpanels.isolateinview
this node will isolate the given curtain wall panels in the active view.
rhythm.revit.elements.elevationmarker.createelevationmarker
viewport
addview
this node will create an empty elevation marker at the given points.
rhythm.revit.elements.elevationmarker.createelevationbymarkerindex
this node will add elevations on each side of the marker chosen. typically 0-3.
rhythm.revit.elements.revitlink.getdocument
this node will obtain the selected link's document.
rhythm.revit.elements.rooms.centerroom
roomtag
this node will center the room.
rhythm.revit.elements.rooms.centerroom2
rhythm.revit.elements.rooms.intersectingelementsinroom
rhythm.revit.elements.rooms.intersectwithcurve
provides a more stable method of intersecting a curve with a room element for room renumbering workflows.
rhythm.revit.elements.rooms.approximatedimensions
this will return the approximate room dimensions. this is achieved by taking the longest edge and using that to derive the estimated shorter edge.
rhythm.revit.elements.dimensiontypes.usesprojectsettings
dimensiontype
determine if the given dimension type uses project (default) settings.
rhythm.revit.elements.referenceplanes.getcurvesinview
referenceplane
referenceplane.getcurvesinview
this node will get the underlying curve of the reference plane in a given view.
rhythm.revit.elements.referenceplanes.byline
this will create a reference plane by the given curve and the selected direction. true for plan view and false for a section parallel to the line.
rhythm.revit.elements.parts.divideparts
parts.divideparts
this node will divide the given parts by reference planes.
rhythm.revit.elements.parts.getsourceelement
parts.getsourceelement
gets the collection of elements from which the parts were created.
rhythm.revit.elements.elements.createparts
this node will convert the given elements to parts.
rhythm.revit.elements.elements.getparametervaluebynametypeorinstance
typeorinstance
this node will get the parameter as instance or type.
rhythm.revit.elements.elements.setparameterbynametypeorinstance
set one of the element's parameters. instance if it is instance or type if type.
rhythm.revit.elements.elements.getintersectingelementsofcategory
intersectingelements
this will take a given element and category and grab the intersecting elements of that category.
rhythm.revit.elements.elements.getparametervaluebynamecaseinsensitive
caseinsensitive
this node will get a parameter value by search string, regardless of case of the search string. also accounts for misspellings. note: if the parameter name appears multiple times it will retrieve the first one that it finds.
rhythm.revit.elements.elements.setparametervaluebynamecaseinsensitive
this node will set a parameter value by search string, regardless of case of the search string. also accounts for misspellings. note: if the parameter name appears multiple times it will retrieve the first one that it finds.
rhythm.revit.elements.elements.getintersectingelementsofcategorylinkoption
rhythm.revit.elements.elements.ishiddeninview
isvisible
this node will report whether or not the given element is hidden in given views.
rhythm.revit.elements.elements.dependentelements
dependentelements
this node will report what elements depend on the input element. useful for determining safe deletion.(available revit 2018.1+).
rhythm.revit.elements.elements.dependentelementsofcategory
rhythm.revit.elements.elements.joinedelements
element.getjoinedelements
joinedelements
this node will report what elements are joined to the input element.
rhythm.revit.elements.elements.setpinnedstatus
works with background docs
this node will change the pinned status of an element.
rhythm.revit.elements.elements.arealocation
element.arealocation
*beta* - this node will retrieve the closest area that an element resides in. this uses bounding boxes which encompass the whole geometry, so we take the closest one. this means that there is potential that we grab the wrong one..
rhythm.revit.elements.elements.viewfinder
this finds all the views an element appears in. note: "appears in" means that if it appears when you do a category collector, that counts.
rhythm.revit.elements.familyinstances.room
room
element.room
this node will report the room the family instance resides in, (if available).
rhythm.revit.elements.familyinstances.space
space
element.space
this node will report the space the family instance resides in, (if available).
rhythm.revit.elements.familyinstances.spaceinphase
rhythm.revit.elements.familyinstances.retrievenestedcomponents
nested
this node will find all deeply nested components in the given family instance.
rhythm.revit.elements.familyinstances.byroom
this node will create and place a generic model family instance at all the room locations given the room element. this will close all family documents so keep that in mind!
rhythm.revit.elements.curtaingrid.bywallelement
curtaingrid
this node will retrieve the curtain grid and u/v gridlines from the given wall
rhythm.revit.elements.curtaingrid.bycurtainsystem
this node will retrieve the curtain grid per face from the curtain system.
rhythm.revit.elements.curtaingrid.ugrids
this node will retrieve the u gridlines from the curtain grid
rhythm.revit.elements.curtaingrid.vgrids
this node will retrieve the v gridlines from the curtain grid
rhythm.revit.elements.curtaingrid.addgridlinebypoint
curtainwall
this node will add a gridline at the specified place on the curtain wall grid.
rhythm.revit.elements.beamsystem.members
structural
beamsystem
obtains the individual beams within a beam system.
rhythm.revit.elements.beamsystem.dropbeamsystem
drops the beam system.
rhythm.revit.elements.roomtag.taggedroom
this node will retrieve the room that a tag is tagging.
rhythm.revit.elements.roomtag.centeronroomlocation
this node will set the room tag to the same as the room location.
rhythm.revit.elements.textnotes.toupper
textnote
toupper
this node will convert the text note to upper with formatting.
rhythm.revit.elements.textnotes.tolower
tolower
this node will convert the text note to lower with formatting.
rhythm.revit.elements.textnotes.getleaders
getleaders
this node will return all of the leaders associated with the text note.
rhythm.revit.elements.sheet.getviewportsandviews
schedules
this node will obtain viewports, views and schedules from a given sheet.
rhythm.revit.elements.sheet.create
sheet
creates a new sheet.
rhythm.revit.elements.sheet.titleblock
this node will grab the titleblock from the given sheet.
rhythm.revit.elements.viewport.create
this node will place the given view on the given sheet, if possible. for floor plan views: they cannot be on any other sheets. now supports schedules!
rhythm.revit.elements.viewport.locationdata
viewport.locationdata
this node will obtain the box location data from the provided viewport.
rhythm.revit.elements.viewport.labeloutline
viewport.labeloutline
this node will obtain the outline of the viewport title if one is used. this is the label outline.
rhythm.revit.elements.viewport.getview
location
this node will obtain the view from the given viewport.
rhythm.revit.elements.viewport.setlocationbasedonother
this node will set the child viewports box center given the parent viewport.
rhythm.revit.elements.viewport.setboxcenter
this node will set the viewport's box center given the point.
rhythm.revit.elements.viewport.boxcenter
this node will retrieve the viewport's box center.
rhythm.revit.elements.viewport.setviewtitlelength
set a viewport's title length.
rhythm.revit.elements.viewport.setviewtitlelocation
set a viewport's title location (relative to the boundary of the view).
rhythm.revit.elements.viewport.getviewtitlelocation
get a viewport's title location (relative to the boundary of the view).
rhythm.revit.elementfilter.elementfilter.byname
elementfilter
filter.byname
provides element filtering options by name. for the filter method, we are using something called "levenshteindistance". this was introduced to me here, http://dynamobim.org/fuzzy-string-matching/.
rhythm.revit.elementfilter.elementfilter.byparameterstringvalue
provides element filtering options by parameter string value. for the filter method, we are using something called "levenshteindistance". this was introduced to me here, http://dynamobim.org/fuzzy-string-matching/.
rhythm.revit.elementfilter.elementfilter.byparameternumericvalue
provides element filtering options by parameter numeric value. for the filter method, we are using something called "levenshteindistance". this was introduced to me here, http://dynamobim.org/fuzzy-string-matching/.
rhythm.revit.elementfilter.elementfilter.bycategory
provides element filtering options by category. for the filter method, we are using something called "levenshteindistance". this was introduced to me here, http://dynamobim.org/fuzzy-string-matching/.
rhythm.geometry.tessellation.convexhull.frompoints
generates a convex hull from given points.
speckle.userdata.set
speckle.userdata.get
