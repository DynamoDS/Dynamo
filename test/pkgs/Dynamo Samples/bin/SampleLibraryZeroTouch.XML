<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SampleLibraryZeroTouch</name>
    </assembly>
    <members>
        <member name="M:Examples.CustomRenderExample.Create">
            <summary>
            Create an object which renders custom geometry.
            </summary>
        </member>
        <member name="T:Examples.NEWBasicExample">
            <summary>
            The HelloDynamoZeroTouch class demonstrates
            how to create a class in a zero touch library
            which creates geometry, and exposes public 
            methods and properties as nodes.
            </summary>
        </member>
        <member name="P:Examples.NEWBasicExample.Awesome">
            <summary>
            Properties marked as public will show up as 
            nodes in the Query section of the dynamo library.
            </summary>
        </member>
        <member name="P:Examples.NEWBasicExample.Point">
            <summary>
            The Point stored on the object.
            </summary>
        </member>
        <member name="P:Examples.NEWBasicExample.InvisibleProperty">
            <summary>
            Properties and methods marked as internal will not
            be visible in the Dynamo UI.
            </summary>
        </member>
        <member name="M:Examples.NEWBasicExample.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Private methods, such as this constructor,
            will not be visible in the Dynamo library.
            </summary>
            <param name="x">The x coordinate.</param>
            <param name="y">The y coordinate.</param>
            <param name="z">The z coordinate.</param>
        </member>
        <member name="M:Examples.NEWBasicExample.Create(System.Double,System.Double,System.Double)">
            <summary>
            Dynamo uses the pattern of static constructors.
            Don't forget to fill in the xml comments so that
            you will get help tips in the UI. You can also use
            default parameters, as we have here. With default
            parameters defined, you will not be required to attach
            any inputs to these ports in Dynamo.
            </summary>
            <param name="x">The x coordinate of the point.</param>
            <param name="y">The y coordinate of the point.</param>
            <param name="z">The z coordinate of the point.</param>
            <returns>A HelloDynamoZeroTouch object.</returns>
        </member>
        <member name="M:Examples.NEWBasicExample.Create(Autodesk.DesignScript.Geometry.Point)">
            <summary>
            Another example of a static constructor which
            uses a parameter with a default value. The default value
            is provided as a design script expression.
            </summary>
            <param name="point">A point.</param>
            <returns>A BasicExample object.</returns>
        </member>
        <member name="M:Examples.NEWBasicExample.MultiReturnExample">
            <summary>
            The MultiReturn attribute can be used to specify
            the names of multiple output ports on a node that 
            returns a dictionary. The node must return a dictionary
            to be recognized as a multi-out node.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Examples.NEWBasicExample.ToString">
            <summary>
            OPTIONAL:
            Overriding ToString allows you to control what is
            displayed whenever the object's string representation
            is used. For example, ToString is called when the 
            object is displayed in a Watch node.
            </summary>
            <returns>The string representation of our object.</returns>
        </member>
        <member name="M:Examples.NEWBasicExample.Tessellate(Autodesk.DesignScript.Interfaces.IRenderPackage,Autodesk.DesignScript.Interfaces.TessellationParameters)">
            <summary>
            The Tessellate method in the IGraphicItem interface allows
            you to specify what is drawn when dynamo's visualization is
            updated.
            </summary>
        </member>
        <member name="T:Examples.DoesNotImportClass">
             <summary>
             By decorating a class with the 
             IsVisibleInDynamoLibrary attribute, and setting
             it to false, you are saying that you want this member
             to be available to the VM, but not be visible in the
             library view or search.
            
             By decorating a class with the SupressImportIntoVM
             attribute, you are saying that you do not want to import
             this class into Dynamo. BE CAREFUL! This class will then
             be unavailable to others that might reference it. In most
             cases, adding IsVisibleInDynamoLibrary(false) will suffice 
             to hide your method from view without needing to disable
             its import completely.
             </summary>
        </member>
        <member name="M:Examples.DoesNotImportClass.#ctor">
            <summary>
            DoesNotImportClass constructor.
            </summary>
        </member>
        <member name="T:Examples.TransformableExample">
            <summary>
            An object which knows how to draw itself in the background preview and uses a transform to take 
            advantage of the GPU to alter that background visualization. The original geometry remains unaltered,
            only the visualization is transformed.
            </summary>
        </member>
        <member name="M:Examples.TransformableExample.ByGeometry(Autodesk.DesignScript.Geometry.Geometry)">
            <summary>
            Create a TranformableExample class which stores a Geometry object and a Transform.
            </summary>
            <param name="geometry"> a geometry object</param>
            <returns></returns>
        </member>
        <member name="M:Examples.TransformableExample.TransformObject(Autodesk.DesignScript.Geometry.CoordinateSystem)">
            <summary>
            This method sets the transform on the object and returns a reference to the object so
            the tessellate method is called and the new visualization shows in the background preview.
            </summary>
            <param name="transform"></param>
            <returns></returns>
        </member>
        <member name="M:Examples.TransformableExample.Tessellate(Autodesk.DesignScript.Interfaces.IRenderPackage,Autodesk.DesignScript.Interfaces.TessellationParameters)">
            <summary>
            This method is actually called by Dynamo when it attempts to render the TransformableExample. 
            class.
            </summary>
            <param name="package"></param>
            <param name="parameters"></param>
        </member>
        <member name="M:Examples.PeriodicUpdateExample.PointField">
            <summary>
            Create a field of waving points that periodically updates.
            </summary>
            <returns>A PeriodicUpdateExample object.</returns>
        </member>
        <member name="T:Examples.TraceExampleItem">
            <summary>
            This is the item that we will store in our data store.
            </summary>
        </member>
        <member name="T:Examples.TraceExampleWrapper">
            <summary>
            A class which contains methods to construct TraceExampleItem objects.
            </summary>
        </member>
        <member name="M:Examples.TraceExampleWrapper.ByString(System.String)">
            <summary>
            Create a TraceExampleItem and store it in a static dictionary.
            </summary>
        </member>
        <member name="T:Examples.TraceableObjectManager">
            <summary>
            A class which maintains a static dictionary for storing
            objects, keyed by their trace id.
            </summary>
        </member>
        <member name="M:Examples.TraceableId.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Ctor used by the serialisation engine
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:SampleLibraryZeroTouch.SampleUtilities">
            <summary>
            A utility library containing methods that can be called 
            from NodeModel nodes, or used as nodes in Dynamo.
            </summary>
        </member>
    </members>
</doc>
