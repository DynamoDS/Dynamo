<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SampleLibraryUI</name>
    </assembly>
    <members>
        <member name="T:SampleLibraryUI.Controls.ButtonControl">
            <summary>
            Interaction logic for ButtonDynamoControl.xaml
            </summary>
            <summary>
            ButtonControl
            </summary>
        </member>
        <member name="M:SampleLibraryUI.Controls.ButtonControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:SampleLibraryUI.Controls.SliderControl">
            <summary>
            Interaction logic for SliderControl.xaml
            </summary>
            <summary>
            SliderControl
            </summary>
        </member>
        <member name="M:SampleLibraryUI.Controls.SliderControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="P:SampleLibraryUI.Examples.ButtonCustomNodeModel.ButtonText">
            <summary>
            Text that will appear on the button
            on our node.
            </summary>
        </member>
        <member name="P:SampleLibraryUI.Examples.ButtonCustomNodeModel.WindowText">
            <summary>
            Text that will appear in the message
            box when button is pressed.
            </summary>
        </member>
        <member name="P:SampleLibraryUI.Examples.ButtonCustomNodeModel.ButtonCommand">
            <summary>
            DelegateCommand objects allow you to bind
            UI interaction to methods on your data context.
            </summary>
        </member>
        <member name="M:SampleLibraryUI.Examples.ButtonCustomNodeModel.#ctor">
            <summary>
            The constructor for a NodeModel is used to create
            the input and output ports and specify the argument
            lacing. It gets invoked when the node is added to 
            the graph from the library or through copy/paste.
            </summary>
        </member>
        <member name="M:SampleLibraryUI.Examples.ButtonCustomNodeModel.OnBuilt">
            <summary>
            Register the data bridge callback.
            </summary>
        </member>
        <member name="M:SampleLibraryUI.Examples.ButtonCustomNodeModel.Dispose">
            <summary>
            Unregister the data bridge callback.
            </summary>
        </member>
        <member name="M:SampleLibraryUI.Examples.ButtonCustomNodeModel.DataBridgeCallback(System.Object)">
            <summary>
            Callback method for DataBridge mechanism.
            This callback only gets called when 
                - The AST is executed
                - After the BuildOutputAST function is executed 
                - The AST is fully built
            </summary>
            <param name="data">The data passed through the data bridge.</param>
        </member>
        <member name="M:SampleLibraryUI.Examples.ButtonCustomNodeModel.BuildOutputAst(System.Collections.Generic.List{ProtoCore.AST.AssociativeAST.AssociativeNode})">
            <summary>
            BuildOutputAst is where the outputs of this node are calculated.
            This method is used to do the work that a compiler usually does 
            by parsing the inputs List inputAstNodes into an abstract syntax tree.
            </summary>
            <param name="inputAstNodes"></param>
            <returns></returns>
        </member>
        <member name="T:SampleLibraryUI.Examples.ButtonCustomNodeModelNodeViewCustomization">
            <summary>
                View customizer for CustomNodeModel Node Model.
            </summary>
        </member>
        <member name="M:SampleLibraryUI.Examples.ButtonCustomNodeModelNodeViewCustomization.CustomizeView(SampleLibraryUI.Examples.ButtonCustomNodeModel,Dynamo.Controls.NodeView)">
            <summary>
            At run-time, this method is called during the node 
            creation. Here you can create custom UI elements and
            add them to the node view, but we recommend designing
            your UI declaratively using xaml, and binding it to
            properties on this node as the DataContext.
            </summary>
            <param name="model">The NodeModel representing the node's core logic.</param>
            <param name="nodeView">The NodeView representing the node in the graph.</param>
        </member>
        <member name="M:SampleLibraryUI.Examples.ButtonCustomNodeModelNodeViewCustomization.Dispose">
            <summary>
            Here you can do any cleanup you require if you've assigned callbacks for particular 
            UI events on your node.
            </summary>
        </member>
        <member name="T:SampleLibraryUI.Examples.LocalizedCustomNodeModel">
            <summary>
            This example node uses .net .resx files and generated sattelite assemblies to perform runtime lookup of localized content
            depending on the culture of the system Dynamo is running on.
            Read more: https://docs.microsoft.com/en-us/dotnet/framework/resources/creating-resource-files-for-desktop-apps
            You can use the -l "es-ES" flag when starting DynamoSandbox.exe to replace the English strings with Spanish ones.
            </summary>
        </member>
        <member name="P:SampleLibraryUI.Examples.SliderCustomNodeModel.SliderValue">
            <summary>
            A value that will be bound to our
            custom UI's slider.
            </summary>
        </member>
        <member name="M:SampleLibraryUI.Examples.SliderCustomNodeModel.#ctor">
            <summary>
            The constructor for a NodeModel is used to create
            the input and output ports and specify the argument
            lacing. It gets invoked when the node is added to 
            the graph from the library or through copy/paste.
            </summary>
        </member>
        <member name="M:SampleLibraryUI.Examples.SliderCustomNodeModel.BuildOutputAst(System.Collections.Generic.List{ProtoCore.AST.AssociativeAST.AssociativeNode})">
            <summary>
            BuildOutputAst is where the outputs of this node are calculated.
            This method is used to do the work that a compiler usually does 
            by parsing the inputs List inputAstNodes into an abstract syntax tree.
            </summary>
            <param name="inputAstNodes"></param>
            <returns></returns>
        </member>
        <member name="T:SampleLibraryUI.Examples.SliderCustomNodeModelNodeViewCustomization">
            <summary>
                View customizer for CustomNodeModel Node Model.
            </summary>
        </member>
        <member name="M:SampleLibraryUI.Examples.SliderCustomNodeModelNodeViewCustomization.CustomizeView(SampleLibraryUI.Examples.SliderCustomNodeModel,Dynamo.Controls.NodeView)">
            <summary>
            At run-time, this method is called during the node 
            creation. Here you can create custom UI elements and
            add them to the node view, but we recommend designing
            your UI declaratively using xaml, and binding it to
            properties on this node as the DataContext.
            </summary>
            <param name="model">The NodeModel representing the node's core logic.</param>
            <param name="nodeView">The NodeView representing the node in the graph.</param>
        </member>
        <member name="M:SampleLibraryUI.Examples.SliderCustomNodeModelNodeViewCustomization.Dispose">
            <summary>
            Here you can do any cleanup you require if you've assigned callbacks for particular 
            UI events on your node.
            </summary>
        </member>
        <member name="T:SampleLibraryUI.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:SampleLibraryUI.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:SampleLibraryUI.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:SampleLibraryUI.Properties.Resources.CustomNodeModelDescription">
            <summary>
              Looks up a localized string similar to A sample UI node which displays custom UI..
            </summary>
        </member>
        <member name="P:SampleLibraryUI.Properties.Resources.CustomNodeModelPortDataInputToolTip">
            <summary>
              Looks up a localized string similar to Input a string..
            </summary>
        </member>
        <member name="P:SampleLibraryUI.Properties.Resources.CustomNodeModelPortDataOutputToolTip">
            <summary>
              Looks up a localized string similar to A result..
            </summary>
        </member>
        <member name="P:SampleLibraryUI.Properties.Resources.LocalStringResult">
            <summary>
              Looks up a localized string similar to I am a localized string..
            </summary>
        </member>
    </members>
</doc>
