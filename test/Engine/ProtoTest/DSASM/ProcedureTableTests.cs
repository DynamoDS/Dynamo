using NUnit.Framework;
using ProtoCore;
using ProtoCore.DSASM;
using ProtoTestFx.TD;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ProtoTest.DSASM
{
    [TestFixture]
    public class ProcedureTableTests
    {
        private class TestExecutive : ProtoCore.DSASM.Executive
        {
            public TestExecutive(RuntimeCore runtimeCore) : base(runtimeCore)
            {
            }
        }

        private readonly TestFrameWork thisTest = new TestFrameWork();
        private Core testCore;
        private RuntimeCore testRuntimeCore;
        private TestExecutive testExecutive;
        private ProcedureTable procedureTable;

        [SetUp]
        public void SetUp()
        {
            testCore = thisTest.SetupTestCore();

            testRuntimeCore = new RuntimeCore(testCore.Heap, testCore.Options);
            testExecutive = new TestExecutive(testRuntimeCore);

            var procNodes = new List<ProcedureNode>() {
                new ProcedureNode()
                {
                    ID = 0,
                    ClassID = 20,
                    Name = "Test0",
                    ArgumentTypes = new List<ProtoCore.Type>()
                    {
                    },
                    IsConstructor = true,
                    IsStatic = false,
                    IsAutoGeneratedThisProc = false
                },
                new ProcedureNode()
                {
                    ID = 1,
                    ClassID = 20,
                    Name = "Test1",
                    ArgumentTypes = new List<ProtoCore.Type>()
                    {
                        new ProtoCore.Type()
                        {
                            Name = "int",
                            UID = 10
                        }
                    },
                    IsConstructor = false,
                    IsStatic = true,
                    IsAutoGeneratedThisProc = false
                },
                new ProcedureNode()
                {
                    ID = 2,
                    ClassID = 20,
                    Name = "Test1",
                    ArgumentTypes = new List<ProtoCore.Type>()
                    {
                    },
                    IsConstructor = false,
                    IsStatic = false,
                    IsAutoGeneratedThisProc = false
                },
                new ProcedureNode()
                {
                    ID = 3,
                    ClassID = 20,
                    Name = "Test2",
                    ArgumentTypes = new List<ProtoCore.Type>()
                    {
                    },
                    IsConstructor = false,
                    IsStatic = false,
                    IsAutoGeneratedThisProc = true
                },
                new ProcedureNode()
                {
                    ID = 4,
                    ClassID = 20,
                    Name = "Test3",
                    ArgumentTypes = new List<ProtoCore.Type>()
                    {
                    },
                    IsConstructor = false,
                    IsStatic = false,
                    IsAutoGeneratedThisProc = false
                },
                new ProcedureNode()
                {
                    ID = 5,
                    ClassID = 20,
                    Name = "Test4",
                    ArgumentTypes = new List<ProtoCore.Type>()
                    {
                    },
                    IsConstructor = false,
                    IsStatic = true,
                    IsAutoGeneratedThisProc = true
                }
            };
            foreach (var proc in procNodes)
            {
                procedureTable.Append(proc);
            }
        }

        [TearDown]
        public void CleanUp()
        {
            testRuntimeCore.Cleanup();
        }

        /// <summary>
        /// Test basic mark and sweep for pointer and string.
        /// </summary>
        [Test]
        public void TestBasic()
        {
            int index = procedureTable.GetFunctionBySignature(new ProcedureMatchOptions() { }, out ProcedureNode procNode);



        }
    }
}
