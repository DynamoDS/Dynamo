using System;
using System.IO;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using NUnit.Framework;
using ProtoTestFx;
namespace ProtoTest.DebugTests
{
    [TestFixture]
    public class RunWatchTests
    {

        string importpath = "..\\..\\..\\test\\Engine\\ProtoTest\\ImportFiles\\";

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch0_array()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"
[Associative]
{
/*
	a = {1001,1002};
	a[0] = 1234;
	a[1] = 5678;
	x = a[1];
	y = a[0];
	
	
	b = {101, 102, {103, 104}, 105};
	b[2][1] = 100001;
	
	c = {
			101,    
			102, 
			{103, 104}, 
			{{1001, 2002}, 1},
			5
		};
	c[2][1]		= 111111;
	c[3][0][1]	= 222222;
	c[3][0][0]	= 333333;
	
	d = {
			{1, 0, 0, 0}, 
			{0, 1, 0, 0}, 
			{0, 0, 1, 0},
			{0, 0, 0, 1}
		};
	d[0][0] = c[2][1];
	d[1][1] = 2;
	d[2][2] = 2;
	d[3][3] = x;
	*/
	e = {10,{20,30}};
	e[1][1] = 40;
	dd = e[0];
	dd = e[1][0];
	dd = e[1][1];
	
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);

            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1_arrayargs()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"
[Associative]
{
	//def inc : int( s : int )	
	//{
	//	return = s + 1;
	//}
	def scale2 : int( s : int )	
	{
		i = 2;
		return = s * i;
	}
	a = scale2(20);
	//b = scale2(20) + inc(2);
	//c = scale2(20) + inc(inc(2));
	//d = scale2(20) + inc(inc(inc(inc(inc(inc(inc(inc(inc(inc(inc(inc(2))))))))))));
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch2_blockassign_associative()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"
[Associative]
{
    def DoSomthing : int(p : int)
    {
        ret = p;       
        d = [Imperative]
        {
            local = 20;
            return = local;
        }
        return = ret * 100 + d;
    }
    a = DoSomthing(10);   
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch3_blockassign_imperative()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"[Imperative]
{ 
    d = [Associative]
    {
        aa = 20;
        return = aa;
    }
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch4_class()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"
    class Vector
    {
        m_length : var;
        def GetLength : double()
        {
            return = m_length;
        }
  
        m_x : var;
        def GetX : double ()
        {
            return = m_x;
        }
  
        m_y : var;
        def GetY : double ()
        {
            return = m_y;
        }
  
        m_z : var;
        def GetZ : double ()
        {
            return = m_z;
        }
  
        m_isNormalized : var;
        def GetIsNormalized : bool ()
        {
            return = m_isNormalized;
        }
  
        constructor Vector(x : double, y : double, z : double)
        {
            m_x = x;
            m_y = y;
            m_z = z;
            m_isNormalized = false;
        }
  
        constructor Vector(x : double, y : double, z : double, normalize : bool)
        {
            m_x = x;
            m_y = y;
            m_z = m_y;
            m_isNormalized = normalize;
        }
    }
    vec1 = Vector.Vector(1.0, 2.0, 3.0);
    vec2 = Vector.Vector(10.0, 20.0, 30.0, true);
    x1 = vec1.m_x;
    y1 = vec1.m_y;
    z1 = vec1.m_z;
    norm1 = vec1.m_isNormalized;
    
    x2 = vec2.m_x;
    y2 = vec2.m_y;
    z2 = vec2.m_z;
    norm2 = vec2.m_isNormalized;
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch5_class10()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @" 
    def sum : double (p : double)
    {
           return = p + 10.0;
    }
    class Obj
    {
        val : var;
		mx : var;
		my : var;
		mz : var;
        constructor Obj(xx : double, yy : double, zz : double)
        {
            mx = xx;
            my = yy;
            mz = zz;
            val = sum(zz);
        }
    }
    p = Obj.Obj(0.0, 1.0, 2.0);
    x = p.val;
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch6_class2()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"    class f
	{
		fx : var;
		fy : var;
		constructor f()
		{
			fx = 123;
			fy = 345;
		}
	}
	
	class g
	{
		gx : var;
		gy : var;
		constructor g()
		{
			// Construct a class within a class
			gx = f();
			gy = 678;
		}
	}
	// Construct class 'g'
	cg = g.g();
	// Resolution assignment
	cg.gx.fx = 10001;
	somevar = cg.gx.fx;
	
	// Construct class 'f'
	cf = f.f();
	cf.fx = 888888;
	cf.fy = 999999;
	// Re-assign an instance of class 'gx' in class 'cg' with new class 'cf'
	cg.gx = cf;
	another = cg.gx.fx;
	cf2 = cg.gx;
	xx = cf2.fx;
	yy = cf2.fy;
	
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch7_class3()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"
	class vector2D
	{
		mx : var;
		my : var;
		
		constructor vector2D(px : int, py : int)
		{
			mx = px; 
			// Copy mx to my with px's value
			my = mx; 
		}
	}
	v1 = vector2D.vector2D(100,20);
	x = v1.mx;
	y = v1.my;
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch8_class4()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"    class vector
	{
		mx : var;
		my : var;
		constructor vector(px : int, py : int)
		{
			// 3 locals variables being assigned array elements
			//locA = px[0];
			//locB = px[1];
			//locC = px[2];
			// Computing the value of a member variable
			mx = 202020;// locA + locB + locC + px[3];
			my = py;
		}	
	}
	arr = {10,11,12,13};
	// Pass an array to the vector constructor
	// This is the point where it should replicate. 
	// At its current state, you can directly use the array as illustrated in the vector contructor
	v = vector.vector(arr, 15);
	// Check the values that the contructor produced
	x = v.mx;
	x = v.my;
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch9_class5()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"
	class vector3D
	{
		mx : var;
		my : var;
		mz : var;
		constructor vector3D(px : int, py : int, pz : int, mtx : int[]..[] )
		{
			mx = px * mtx[0][0];
			my = py * mtx[1][1];
			mz = pz * mtx[2][2];
		}	
	}
	// Create a scale matrix
	scale = 2;
	scalematrix = {
					{scale, 0, 0},
					{0, scale, 0},
					{0, 0, scale}
				  };
	// Pass a 2D array to the vector3D constructor where the intention is to use the array directly
	v3d = vector3D.vector3D(10, 20, 30, scalematrix);
	// Check the values that the contructor produced
	x = v3d.mx;
	y = v3d.my;
	z = v3d.mz;
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch10_class6()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"	class vec
	{
		mx : var;
		my : var;
		
		constructor vec(px : int, py : int)
		{
			mx = px; 
			my = py; 
			
			loc1 = mx * 2;
			loc2 = my * 2;
			
			mx = loc1; 
			my = loc2; 
		}
	}
	v1 = vec.vec(10,20);
	x = v1.mx;
	y = v1.my;
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch11_class7()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"
	class complex
	{
		mx : var;
		my : var;
		constructor complex(px : int, py : int)
		{
			mx = px; 
			my = py; 
		}
		def scale : int(s : int)
		{
			mx = mx * s; 
			my = my * s; 
			return = 0;
		}
	}
	p = complex.complex(8,16);
	i = p.mx;
	j = p.my;
	// Calling a member function of class complex that mutates its properties 
	k1 = p.scale(2); 
	l1 = p.mx;
	m1 = p.my;
	// Scale 'p' further
	k2 = p.scale(10); 
	l2 = p.mx;
	m2 = p.my;
}
/*
	class complex
	{
		mx : var;
		constructor complex(px : int)
		{
			mx = px; 
		}
		def scale : int(s : int)
		{
			mx = mx * s; 
			return = 0;
		}
	}
	p = complex(8);
	i = p.mx;
	// Calling a member function of class complex that mutates its properties 
	k = p.scale(2); 
	l = p.mx;
*/
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch12_class8()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"
    class v
	{
		mx : var;
		constructor v()
		{
			mx = 10;
		}
	}
	p = v.v();
	i = p.mx;
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch13_class9()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"
   class Obj
    {
        val : var;
	    def sum : int (p : int)
        {
            return = p + 10;
        }
        constructor Obj()
        {
            val = sum(2);
        }
    }
    p = Obj.Obj();
    x = p.val;
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch14_classfunctionoverload()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"
	class vector2D
	{
		mx : var;
		my : var;
		
		constructor vector2D(px : int, py : int)
		{
			mx = px; 
			my = py; 
		}
        def scale : int()
		{
			mx = mx * 2; 
			my = my * 2; 
            return = 0;
		}
        def scale : int(s: int)
		{
			mx = mx * s; 
			my = my * s; 
            return = 0;
		}
	}
	v2 = vector2D.vector2D(10,40);
	x1 = v2.mx;
	y1 = v2.my;
    
	n = v2.scale();
	x2 = v2.mx;
	y2 = v2.my;
	n = v2.scale(10);
	x3 = v2.mx;
	y3 = v2.my;
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch16_demo()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"[Imperative]
{
    a = 10;
    b = 20;
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch18_forloop()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"
[Imperative]
{
    a = {10,20,30,40};
    x = 0;
    for (val in a)
    {
        x = x + val;
    }
    x = 0;
    for (val in {100,200,300,400})
    {
        x = x + val;
    }
    x = 0;
    for (val in {{100,101},{200,201},{300,301},{400,401}})
    {
        x = x + val[1];
    }
    x = 0;
    for (val in 10)
    {
        x = x + val;
    }
    
    y = 0;
    b = 11;
    for (val in b)
    {
        y = y + val;
    }
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch19_functionoverload()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"
[Associative]
{
    def f : int( p1 : int )
    {
	    x = p1 * 10;
	    return = x;
    }
    def f : int( p1 : int, p2 : int )
    {
	    return = p1 + p2;
    }
    a = 2;
    b = 20;
    i = f(a + 10);
    j = f(a, b);
}   ";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch20_fusionarray()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"[Imperative]
{
	x = 0;
	y = 0;
	xSize = 2;
	ySize = 3;
	result = 0;
    
	somelist = {11,102,1003,1004};
	somelist2 = {x, y, xSize * 4, 1004 * ySize};
	// Populate a multi-dimensional array
	list2d = {{10,20,30},{40,50,60}};
	// do somthing with those values
	while( x < xSize )
	{
		while( y < ySize )
		{
			result = result + list2d[x][y];
			y = y + 1;
		}
		x = x + 1;
		y = 0;
	}
	result = result * 10;
    
	// Populate an array of ints
	list = {10, 20, 30, 40, 50};
    
	// Declare counters and result storage
	n = 0;
	size = 5;
	result = 0;
    
    
	// Summation of elements in 'list' and storing them in 'result'
	while( n < size )
	{
		result = result + list[n];
		n = n + 1;
	}
	// Get the average
	result = result / size;
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch21_header1()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"// import other module
import (""./include/header2.ds"");
x = 100;
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch22_importtest()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"import (""./header1.ds"");
import (""./include/header2.ds"");
a = 1;
b = 2;
[Associative]
{
    c = 3;
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch23_inheritance()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"
    class A
    {
        x : var;
        constructor A()
        {
            x = 1;
        }
	    def Get : int()
        {
            return = 10;
        }
    }
    
    class B extends A
    {
        constructor B()
        {
            x = 2;
        }
    }
    ptrA = A.A();
    ax = ptrA.x;
    ptrB = B.B();
    bx = ptrB.x;
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch24_inheritance2()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"
	class RigidBody
	{
        id : var;
        velocity : var;
        constructor RigidBody(objID : int, vel : int)
        {
            id = objID;
            velocity = vel;
        }
        def GetVelocity : int(drag : int)
        {
            return = velocity * drag;
        }
    }
    class Particle extends RigidBody
	{
        lifetime : var;
        constructor Particle(objID : int, vel : int, life : int)
        {
            id = objID;
            velocity = vel;
            lifetime = life;
        }
    }
 
 
    // TODO Jun: Fix defect, allow statements (or maybe just preprocs?) before a class decl
    // Define some constants
    kRigidBodyID    = 0; 
    kParticleID     = 1;
    kGravityCoeff   = 9.8;
       
    //================================
    // Simulate physical object 1
    //================================
    // Construct a base rigid body
    rb = RigidBody.RigidBody(kRigidBodyID, kGravityCoeff);
    rbVelocity = rb.GetVelocity(2);
    
    //================================
    // Simulate physical object 2
    //================================
    
    // Construct a particle that inherits from a rigid body
    kLifetime = 0.25;
    p = Particle.Particle(kParticleID, kGravityCoeff, kLifetime);
    lt = p.lifetime;
    particleVelocity = rb.GetVelocity(4);
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch25_libmath()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"
[Language = ""Associative"", compile = ""-noReplicate"" ]
{
	def add : int(p1 : int, p2 : int)
	{
		return = p1 + p2;
        /*
        [Language = ""dsasm""]
        {
            push p1;
            push p2;
            pop _bx;
            pop _ax;
            add _ax, _bx;
            push _ax;
            pop _rx;
            ret;
        }
        */
	}	
    
    def sub : int(p1 : int, p2 : int)
	{
		return = p1 - p2;
	}    
    
    def mul : int(p1 : int, p2 : int)
	{
		return = p1 * p2;
	}
    def div : int(p1 : int, p2 : int)
	{
		return = p1 / p2;
	}
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch26_nesting()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"
[Imperative]
{
	a = 10;
	if(a >= 10)
	{
		x = a * 2;
		[Associative]
		{
			local = x * a;
		}
	}
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch27_null()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"
[Associative]
{
	x = 1;
    a1 = null;
    b1 = a1 + 2;
    c1 = 2 + a1 * x;
    [Imperative]
    {
        a = 2;
        b = null + 2;
        c = b * 3; 
    }
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch28_replication()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"[Associative]
{
	def sum : int(p1 : int, p2 : int)
	{
		return = p1 + p2;
	}
	//a = {1,2,3};
	//b = {4,5,6};
	//c = sum(a<1>, b<2>);
    c = sum(5, 2);
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch29_simple()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"
[Imperative]
{
    b = 2 + 10.12345;
	c = 2 + 10;
	d = 2.12 + 10.12345 * 2;
    
	e = 2.000001 == 2;
	f = 2 == 2.000001;
	g = 2.000001 == 2.000001;
	h = 2.000001 != 2;
	i = 2 != 2.000001;
	j = 2.000001 != 2.000001;
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch30_simple2()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"
[Imperative]
{
	a = 2.12 + 100;
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch31_test()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"
class C
{
    x : var;
    constructor C()
    {
        x = 10;
    }
}
p = C.C();
a = p.get_x();
////////////////////////////////////////////
class C
{
    mx : var;
    constructor C(x : int)
    {
        mx = x;
    }
    def somemethod()
    {
        return = mx;
    }
}
p = C.C({10,20});
a = p.somemethod();
/////////////////////////////////////////////
class C
{
    mx : var;
    my : var;
    constructor C(x : int, y : int)
    {
        mx = x;
        my = y;
    }
    def somemethod()
    {
        return = mx;
    }
}
list = {10,20};
p = C.C(list, 100);
a = p.somemethod();
/////////////////////////////////////////////
class C
{
    y : var;
    constructor C()
    {
        y = 10;
    }
}
class D
{
    x : var;
    constructor D()
    {
        x = C.C();
    }
}
p = D.D();
a = p.get_x().get_y();
////////////////////////////////////////////
class C
{
    y : var;
    constructor C(i : int)
    {
        y = i;
    }
}
class D
{
    x : var;
    constructor D()
    {
        x = C.C({101,102});
    }
}
p = D.D();
a = p.get_x().get_y();
///////////////////////////////////////////////////////
class C
{
    x : var;
    constructor C()
    {
        x = 101;
    }
    
    def f(b:bool)
    {
        return = b;
    }
    def f(i:int)
    {
        x = i;
        return = x;
    }
}
p = C.C();
a = p.f(102);
a = p.f(true);
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch32_update()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"
/*
a = 1;
b = a;
a = 10;
*/
/*
a = 1;
a = a + 1;
a = 10;
*/
/*
a = 1;
a = 10 + 20 * a;
a = 10;
*/
/*
a = 2;
x = 20;
y = 30;
a = x + y * a;
*/
/*
a = 2;
x = 20;
y = 30;
a = x * y + a;
*/
/*
def f : int(p : int)
{
    return = p + 1;
}
a = 10;
b = f(a);
*/
/*
def doo : int()
{
    d = 12;
    return = d;
}
def f : int(p : int)
{
    a = 10;
    b = a;
    a = p;
    return = b;
}
x = 20;
y = f(x);
x = 40;
*/
/*
a = 10;
b = 20;
c = a < b ? a : b;
*/
/*
a = 5;
b = ++a;
*/";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch33_Vector()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"
	class Vector
	{
		
		//
		//
		//		guaranteed properties
		//
		//
		
		_length : var;
		def  GetLength : double()
		{
			return = _length;
		}
		
		_x : var;
		def GetX : double ()
		{
			return = _x;
		}
		
		_y : var;
		def GetY : double ()
		{
			return = _y;
		}
		
		_z : var;
		def GetZ : double ()
		{
			return = _z;
		}
		
		_isNormalized : var;
		def GetIsNormalized : bool ()
		{
			return = _isNormalized;
		}
		
		
		
		
		
		//
		//
		//		on-demand properties
		//
		//
		
		_contextCoordinateSystem : var;
		/*def GetContextCoordinateSystem : CoordinateSystem ()
		{	
			return = _contextCoordinateSystem;
		}*/
		
		_xLocal : var;
		def GetXLocal : double ()
		{
			return = _xLocal;
		}
		
		_yLocal : var;
		def GetYLocal : double ()
		{
			return = _yLocal;
		}
		
		_zLocal : var;	
		def GetZLocal : double ()
		{
			return = _zLocal;
		}
		
		def GetLength2 : double ()
		{
			return = 1.0;
		}
		
		
		
		//
		//
		//	constructors
		//
		//
		
		def init : bool ()
		{
			_contextCoordinateSystem = null;
			_xLocal = null;
			_yLocal = null;
			_zLocal = null;
            return = 0;
		}
		
		constructor Vector(x : double, y : double, z : double)
		{
			dummy = init();
			
			_x = x;
			_y = y;
			_z = z;
			_isNormalized = false;
			
		}
		
		def normalize : bool ()
		{
			return = false;
		}
		
		constructor Vector(x : double, y : double, z : double, normalize : bool)
		{
			dummy = init();
		
			_x = x;
			_y = y;
			_z = z;
			_isNormalized = normalize;
			
			dummy = normalize();
			
		}
		
		
		def evaluateXYZ : bool ()
		{
			_x = _xLocal;
			_y = _yLocal;
			_z = _zLocal;
			
			return = true;
		}
		
		/*constructor Vector(ctxCoordSys : CoordinateSystem, xLocal : double,
							yLocal : double, zLocal : double)
		{
			dummy = init();
			
			_xLocal = xLocal;
			_yLocal = yLocal;
			_zLocal = zLocal;
			_contextCoordinateSystem = ctxCoordSys;
			
			_isNormalized = ctxCoordSys.GetIsNormalized();
			
			dummy = evaluateXYZ();
		}*/
	}
	
	a = 4;
	b = Vector.Vector(1,0,0);
    
	c = b._x;
	d = b._x;
	e = b._x;
	f = b._xLocal;
	g = b._yLocal;
	h = b._zLocal;
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch34_LineTest()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"	
	external (""ProtoAcDcGeometry"") def getProtoGeometryLibrary : int ();
    class Point
    {
		
        mx : var;
        my : var;
        mz : var;
        id : var;
        external native (""ProtoGeometryHost"") def DC_Point : int (x : double, y : double, z : double);
        
        constructor Point(xx : double, yy : double, zz : double)
        {
            mx = xx;
            my = yy;
            mz = zz;
            id = DC_Point(xx, yy, zz);
        }
    }
	hostid1 = getProtoGeometryLibrary();
	point1 = Point.Point(43.0314374592,94.2314010018,0.0550158535042);
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch35_LineTest1()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"[Associative]
{	
	external (""ProtoAcDcGeometry"") def getProtoGeometryLibrary : int ();
    external native (""ProtoGeometryHost"") def DC_Line : int (y : int, z : int);
	hostid1 = getProtoGeometryLibrary();
	lineid = DC_Line(2,3);
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch36_LineTest2()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"	
	external (""ProtoAcDcGeometry"") def getProtoGeometryLibrary : int ();
    external native (""ProtoGeometryHost"") def DC_Line : int (y : int, z : int);
    //id1 : int;
    //id2 : int;
    class Point
    {
		
        mx : var;
        my : var;
        mz : var;
        id : var;
        external native (""ProtoGeometryHost"") def DC_Point : int (x : double, y : double, z : double);
        
        constructor Point(xx : double, yy : double, zz : double)
        {
            mx = xx;
            my = yy;
            mz = zz;
            id = DC_Point(xx, yy, zz);
        }
    }
	hostid1 = getProtoGeometryLibrary();
    point1 = Point.Point(43.0314374592,94.2314010018,0.0550158535042);
    point2 = Point.Point(43.0314374592,9.5,0.0550158535042);
    id1 = point1.id;
    id2 = point2.id;
    lineid2 = DC_Line(id1, id2);
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch37_LineTest3()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"	
	external (""ProtoAcDcGeometry"") def getProtoGeometryLibrary : int ();
    class Point
    {
		
        mx : var;
        my : var;
        mz : var;
        id : var;
        external native (""ProtoGeometryHost"") def DC_Point : int (x : double, y : double, z : double);
        
        constructor Point(xx : double, yy : double, zz : double)
        {
            mx = xx;
            my = yy;
            mz = zz;
            id = DC_Point(xx, yy, zz);
        }
    }
    class Line
    {
		
        start : var;
        end : var;
        id : var;
        external native (""ProtoGeometryHost"") def DC_Line : int (y : int, z : int);
        
        constructor Line(sp : int, ep : int)
        {
            start = sp;
            end = ep;
            id = DC_Line(sp, ep);
        }
    }
	hostid1 = getProtoGeometryLibrary();
    point1 = Point.Point.Point(43.0314374592,94.2314010018,0.0550158535042);
    point2 = PointPoint.Point(43.0314374592,9.5,0.0550158535042);
    line1 = Line.Line(point1.id, point2.id);
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch39_newLineClassTestSingle()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"
	external (""ProtoAcDcGeometry"") def getProtoGeometryLibrary : int ();
    class Point
    {
		
        mx : var;
        my : var;
        mz : var;
        id : var;
        external native (""ProtoGeometryHost"") def DC_Point : int (x : double, y : double, z : double);
        
        constructor Point(xx : double, yy : double, zz : double)
        {
            mx = xx;
            my = yy;
            mz = zz;
            id = DC_Point(xx, yy, zz);
        }
    }
    class Line
    {
		
        start : var;
        end : var;
        id : var;
        external native (""ProtoGeometryHost"") def DC_Line : int (y : int, z : int);
        
        constructor Line(sp : int, ep : int)
        {
            start = sp;
            end = ep;
            id = DC_Line(sp, ep);
        }
    }
	hostid1 = getProtoGeometryLibrary();
    point0 = Point.Point(0.0314374592,0.2314010018,0.0550158535042);
	point1 = Point.Point(66.7746785566,49.9286050947,0.65122450328);
	line1 = Line.Line(point0.id, point1.id);
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch42_newPointClassTest()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"
	external (""ProtoAcDcGeometry"") def getProtoGeometryLibrary : int ();
class Point
    {
		
        mx : var;
        my : var;
        mz : var;
        id : var;
        external native (""ProtoGeometryHost"") def DC_Point : int (x : double, y : double, z : double);
        
        constructor Point(xx : double, yy : double, zz : double)
        {
            mx = xx;
            my = yy;
            mz = zz;
            id = DC_Point(xx, yy, zz);
        }
    }
	hostid1 = getProtoGeometryLibrary();
	point1 = Point.Point(87.7330642581,96.9263392438,0.127903119591);
	point2 = Point.Point(27.5098648071,0.977950358811,0.988901707437);
	point3 = Point.Point(56.6476818467,79.5600279549,0.950950498212);
	point4 = Point.Point(6.57958778634,26.7226447828,0.095547944259);
	point5 = Point.Point(28.3289884103,76.4031169313,0.0910636457483);
	point6 = Point.Point(48.9912040653,29.4356627405,0.66970004287);
	point7 = Point.Point(54.2208509015,76.6472360388,0.397536552849);
	point8 = Point.Point(47.5535789348,0.492374660552,0.0906052272415);
	point9 = Point.Point(2.76958114282,42.3533594801,0.620625344585);
	point10 = Point.Point(79.2753946557,18.0020727476,0.0386241440091);
	point11 = Point.Point(54.3881658075,98.9092797402,0.400457778497);
	point12 = Point.Point(76.5275551048,7.45566092917,0.532798048563);
	point13 = Point.Point(61.6286147831,23.1065282116,0.788738852187);
	point14 = Point.Point(79.2618389185,76.2330453014,0.829492395603);
	point15 = Point.Point(37.4370163991,57.0155410153,0.78172116277);
	point16 = Point.Point(17.5817401813,9.34612731409,0.895716377491);
	point17 = Point.Point(24.109088822,80.9232051949,0.683372067718);
	point18 = Point.Point(59.3298856931,43.1286260986,0.857656981087);
	point19 = Point.Point(79.2237677214,90.2545787368,0.906296875168);
	point20 = Point.Point(40.9616472177,38.2540428577,0.916991754172);
	point21 = Point.Point(26.1084585569,56.5291984422,0.730404551213);
	point22 = Point.Point(63.8808542817,43.674285216,0.0253001223661);
	point23 = Point.Point(28.7733781057,78.3700024792,0.538033772119);
	point24 = Point.Point(53.9521126219,1.24721467868,0.0738397581784);
	point25 = Point.Point(16.1550761273,29.1629550439,0.333221471116);
	point26 = Point.Point(34.4794097358,87.4566399055,0.554225182441);
	point27 = Point.Point(66.7169914814,30.9851406072,0.570743326968);
	point28 = Point.Point(82.1087413506,47.9598389631,0.830890827242);
	point29 = Point.Point(17.5604464815,31.3785025221,0.109371343469);
	point30 = Point.Point(92.3019747591,56.8902806111,0.773720967882);
	point31 = Point.Point(7.45154058356,91.7889980283,0.396811568546);
	point32 = Point.Point(92.476098953,70.1274690467,0.330652525567);
	point33 = Point.Point(18.0210935407,31.7404848547,0.747865483619);
	point34 = Point.Point(12.5521388251,28.7905335283,0.937838090007);
	point35 = Point.Point(25.7269645785,85.9110806054,0.114225684032);
	point36 = Point.Point(74.6034189982,47.7659568946,0.502397951665);
	point37 = Point.Point(10.7981826272,40.853813126,0.191216938495);
	point38 = Point.Point(32.046744139,23.7555125257,0.484203817516);
	point39 = Point.Point(62.2495359166,59.3156175946,0.678951394221);
	point40 = Point.Point(71.3701065154,82.0261074085,0.580987076149);
	point41 = Point.Point(12.7032754006,52.8792202276,0.735176898529);
	point42 = Point.Point(49.7108126111,9.2327106364,0.830589837857);
	point43 = Point.Point(40.7738777691,27.057509958,0.394436268041);
	point44 = Point.Point(35.6664271763,92.8107006063,0.11514736052);
	point45 = Point.Point(77.0877455979,90.4013524422,0.943073896942);
	point46 = Point.Point(95.6988704696,52.3648887771,0.979945264076);
	point47 = Point.Point(77.5763435168,53.9574632802,0.739259619882);
	point48 = Point.Point(75.6924214026,27.9100018308,0.358012888635);
	point49 = Point.Point(30.6807825916,58.2436465641,0.346579438237);
	point50 = Point.Point(58.1000561108,97.0266611136,0.481508418426);
	point51 = Point.Point(34.9444163542,74.9106206498,0.730157603063);
	point52 = Point.Point(61.8214460984,56.9168108947,0.0433940981761);
	point53 = Point.Point(82.1496530721,66.0857296272,0.489442731439);
	point54 = Point.Point(4.41969995115,31.1978790571,0.160253711254);
	point55 = Point.Point(47.7217608232,14.1693039344,0.658143115412);
	point56 = Point.Point(90.956349021,4.17120010065,0.381935536949);
	point57 = Point.Point(83.6475553038,97.8604655922,0.699114053391);
	point58 = Point.Point(17.876910986,92.5463908224,0.768914431095);
	point59 = Point.Point(3.6929219979,74.4118680988,0.291342526347);
	point60 = Point.Point(78.9796284549,8.247720941,0.73672010902);
	point61 = Point.Point(41.9775997718,89.0183785446,0.00882543001859);
	point62 = Point.Point(57.4627954428,39.8411424467,0.0976840834413);
	point63 = Point.Point(66.3048565199,92.3925371991,0.213485328731);
	point64 = Point.Point(27.4232886894,24.2044491793,0.400442513583);
	point65 = Point.Point(81.3025527066,58.7996945779,0.943083501668);
	point66 = Point.Point(43.0993000851,14.4614855841,0.713094743061);
	point67 = Point.Point(33.6896951533,48.2750087461,0.820134641103);
	point68 = Point.Point(87.9812909925,40.7628811118,0.111323503738);
	point69 = Point.Point(84.3259462791,50.8779305426,0.14880233526);
	point70 = Point.Point(83.5331739579,63.4686157002,0.275751685123);
	point71 = Point.Point(53.086915328,84.2912789524,0.69140294293);
	point72 = Point.Point(56.1808148995,29.2629112854,0.261446991911);
	point73 = Point.Point(23.9436911528,20.0076670356,0.0802866020553);
	point74 = Point.Point(42.2661999365,56.5496645167,0.38681454823);
	point75 = Point.Point(37.1723341635,8.73216254095,0.980160031021);
	point76 = Point.Point(46.0507099036,9.80652768253,0.619787195397);
	point77 = Point.Point(86.3497210261,31.7545691049,0.068962410966);
	point78 = Point.Point(82.4934628627,82.5250435541,0.394811797054);
	point79 = Point.Point(80.466616597,99.2548128018,0.644237958428);
	point80 = Point.Point(28.7266076341,59.4533790971,0.117757058539);
	point81 = Point.Point(21.2573740835,73.1534583692,0.245993064992);
	point82 = Point.Point(50.7252916747,68.5614587387,0.26851999599);
	point83 = Point.Point(66.2008300224,76.9019006508,0.849610724182);
	point84 = Point.Point(6.83982487824,73.3103145213,0.29058265825);
	point85 = Point.Point(0.935241608737,58.7375403244,0.264032705629);
	point86 = Point.Point(43.9543678774,53.9959272297,0.955947675826);
	point87 = Point.Point(81.7092241187,87.0164551487,0.99466135978);
	point88 = Point.Point(98.845793934,54.7466430717,0.195200348189);
	point89 = Point.Point(41.951622724,50.6318735131,0.285822926712);
	point90 = Point.Point(59.09370939,27.0080133896,0.653278196197);
	point91 = Point.Point(18.6715895281,13.3246579376,0.0799976994325);
	point92 = Point.Point(70.9101859205,66.1416176007,0.0394394019387);
	point93 = Point.Point(13.3315872249,51.8448016003,0.196333251504);
	point94 = Point.Point(20.6371010085,12.2226888221,0.0100836891688);
	point95 = Point.Point(17.6808196724,97.0467037944,0.709146294811);
	point96 = Point.Point(99.7231084084,58.010427633,0.339129183173);
	point97 = Point.Point(55.6755627825,27.8541264644,0.766741260914);
	point98 = Point.Point(61.9578862869,78.8064225788,0.644535269113);
	point99 = Point.Point(63.4585408981,38.6968939658,0.686969283052);
	point100 = Point.Point(73.452038599,43.5755999535,0.386244013073);
	point101 = Point.Point(16.8042086811,81.6883218817,0.477748705666);
	point102 = Point.Point(89.7754185695,1.71485128051,0.460320699403);
	point103 = Point.Point(16.29689301,77.0695558012,0.110855865857);
	point104 = Point.Point(85.4230090027,0.00372974996604,0.61411422926);
	point105 = Point.Point(47.4656984799,87.1704703958,0.767790277265);
	point106 = Point.Point(80.8746594739,44.4671085036,0.394732342219);
	point107 = Point.Point(54.8639065498,49.4706979091,0.070154671402);
	point108 = Point.Point(9.09534110257,64.9984981967,0.812249821799);
	point109 = Point.Point(68.7537348763,40.4601275975,0.927506624418);
	point110 = Point.Point(21.3675285404,45.0981155028,0.953199970893);
	point111 = Point.Point(44.3011441903,43.6149568667,0.484492488262);
	point112 = Point.Point(36.2137156535,92.2351936892,0.765439428677);
	point113 = Point.Point(8.85629388695,72.5442274391,0.115534007346);
	point114 = Point.Point(61.8954028861,42.665279773,0.839694787975);
	point115 = Point.Point(70.616470494,53.0784123611,0.833375400572);
	point116 = Point.Point(6.42030948703,78.0727418839,0.540838769201);
	point117 = Point.Point(37.8378436017,50.821024188,0.32472503672);
	point118 = Point.Point(52.0073702352,56.3131306863,0.671355017346);
	point119 = Point.Point(1.42974768244,92.2681278087,0.510607860856);
	point120 = Point.Point(42.1578202684,82.2920971315,0.525844682592);
	point121 = Point.Point(31.8561960891,32.0067529588,0.89008235209);
	point122 = Point.Point(94.0158005067,77.3686698478,0.893019826853);
	point123 = Point.Point(52.0194579479,96.9034015726,0.475660209538);
	point124 = Point.Point(57.2620045483,81.0624946406,0.347300753758);
	point125 = Point.Point(50.4160102022,67.9878083093,0.0309202725659);
	point126 = Point.Point(26.6650945559,20.9908275716,0.989372260024);
	point127 = Point.Point(39.6077143181,65.9502240414,0.874512014866);
	point128 = Point.Point(47.1986228359,28.2175465729,0.0431928375689);
	point129 = Point.Point(39.2828417188,54.9129470511,0.53955998869);
	point130 = Point.Point(60.3214047586,26.0025179093,0.548202637181);
	point131 = Point.Point(15.8222316445,57.8372074953,0.303490925286);
	point132 = Point.Point(46.0908439094,83.0534320578,0.559880632405);
	point133 = Point.Point(60.1168216448,59.8418928299,0.121415488503);
	point134 = Point.Point(54.8969507542,57.6837113417,0.741479328665);
	point135 = Point.Point(40.0628753993,1.09316774908,0.894326861438);
	point136 = Point.Point(30.0096640912,30.5166242473,0.428469096651);
	point137 = Point.Point(27.9670603452,15.358226341,0.331951715309);
	point138 = Point.Point(38.4813859801,98.8251474763,0.20211956447);
	point139 = Point.Point(12.2788066053,59.460289289,0.419302895722);
	point140 = Point.Point(86.2852253834,94.8994910875,0.677859362132);
	point141 = Point.Point(48.6161985425,41.0971983076,0.277259629287);
	point142 = Point.Point(63.7336695655,99.4474770291,0.493785723141);
	point143 = Point.Point(93.980447854,29.0756616468,0.74962290216);
	point144 = Point.Point(76.5402316214,72.2516149663,0.851462359978);
	point145 = Point.Point(85.6268272748,33.2887010013,0.64436094332);
	point146 = Point.Point(28.1883264681,0.362513834336,0.343209383121);
	point147 = Point.Point(62.5153031113,44.9346087596,0.183941738295);
	point148 = Point.Point(55.6075096379,30.2604647823,0.290145751843);
	point149 = Point.Point(4.83452629341,29.7873734022,0.261021768013);
	point150 = Point.Point(10.6906494537,12.8327613,0.479274855734);
	point151 = Point.Point(69.0186292971,89.8215157857,0.393882299982);
	point152 = Point.Point(62.2091434574,98.1628146994,0.676501926983);
	point153 = Point.Point(43.5708290848,89.8201325102,0.321049584659);
	point154 = Point.Point(68.9922027955,96.3016291013,0.00499405409719);
	point155 = Point.Point(80.9298178602,32.1493562409,0.2212073804);
	point156 = Point.Point(13.9824912592,90.9121613383,0.481964865341);
	point157 = Point.Point(48.9119551441,74.9061107905,0.36532969466);
	point158 = Point.Point(43.6148460813,4.77051820076,0.451085867197);
	point159 = Point.Point(93.0537320857,90.4178502493,0.489684415568);
	point160 = Point.Point(15.1504025315,27.9123975497,0.75502559457);
	point161 = Point.Point(64.1641594308,49.5701941075,0.236498996077);
	point162 = Point.Point(25.8002275996,34.6842803554,0.451932988148);
	point163 = Point.Point(83.2901992639,67.2633682423,0.387829831701);
	point164 = Point.Point(14.8862538103,69.8816845527,0.852929394075);
	point165 = Point.Point(52.1063805926,56.1514684928,0.699831099317);
	point166 = Point.Point(51.5379935406,94.296499337,0.484784221765);
	point167 = Point.Point(24.030680917,9.7913275114,0.795986455227);
	point168 = Point.Point(23.3565295105,83.9699840249,0.141846291332);
	point169 = Point.Point(74.619059276,85.3823947233,0.387721684096);
	point170 = Point.Point(6.89173441398,51.7998210244,0.160297870594);
	point171 = Point.Point(11.8746204634,55.5623883766,0.956202868236);
	point172 = Point.Point(76.3351879619,56.3498633073,0.855943057503);
	point173 = Point.Point(78.2878250093,21.2115839002,0.455358550707);
	point174 = Point.Point(34.4153682971,73.0324844111,0.16956166603);
	point175 = Point.Point(13.3893194403,12.5424679872,0.585275060702);
	point176 = Point.Point(64.6057266215,72.4547481604,0.121140666963);
	point177 = Point.Point(11.8208934784,23.7533738808,0.0959733670355);
	point178 = Point.Point(86.3561710826,6.12598252245,0.579197184102);
	point179 = Point.Point(6.67803506919,39.8471530992,0.180677808144);
	point180 = Point.Point(40.9996436209,90.7981648568,0.276565692827);
	point181 = Point.Point(14.2313663754,24.7595878918,0.741457986191);
	point182 = Point.Point(95.9809583144,60.0082479442,0.425901937842);
	point183 = Point.Point(13.6335535525,87.0851244368,0.638001595965);
	point184 = Point.Point(61.7198018869,99.1166061244,0.215418155536);
	point185 = Point.Point(79.8385977433,36.4575408908,0.589418130332);
	point186 = Point.Point(88.7595122435,70.6021312399,0.572685796164);
	point187 = Point.Point(46.4034646395,64.9345185666,0.079119381638);
	point188 = Point.Point(30.1773342382,56.2489311469,0.767811984666);
	point189 = Point.Point(20.0905490374,4.00773856089,0.183090164246);
	point190 = Point.Point(74.1270336497,0.84504351951,0.389831870566);
	point191 = Point.Point(72.0502293023,11.8424551048,0.81595059014);
	point192 = Point.Point(63.9323998941,0.108678627553,0.161772456733);
	point193 = Point.Point(44.8228735148,11.1928213168,0.476997490439);
	point194 = Point.Point(30.2942323932,8.25812520073,0.0309787998101);
	point195 = Point.Point(68.0602784836,84.9411355229,0.156043747646);
	point196 = Point.Point(18.1831547669,43.1698773019,0.215668597717);
	point197 = Point.Point(15.1883177399,1.96810675013,0.000833145287778);
	point198 = Point.Point(45.0264226037,80.8957969676,0.996729857845);
	point199 = Point.Point(84.9320713467,92.6445685808,0.111645404708);
	point200 = Point.Point(16.1457753595,31.0494143541,0.43534049195);
	point201 = Point.Point(95.8006703231,11.1454792055,0.517780608869);
	point202 = Point.Point(87.9589400371,8.86222278526,0.814222757879);
	point203 = Point.Point(72.1778110968,66.8540377452,0.357872393618);
	point204 = Point.Point(40.0166952003,75.5743965048,0.378258601496);
	point205 = Point.Point(88.5813700968,44.8108940232,0.397844355155);
	point206 = Point.Point(30.5080061799,21.1215893963,0.328877856393);
	point207 = Point.Point(82.6726562133,28.7202840789,0.834734237652);
	point208 = Point.Point(84.3266780754,34.3236242514,0.997941075287);
	point209 = Point.Point(23.8288515003,25.271723821,0.906424294204);
	point210 = Point.Point(69.8355295149,87.1199186651,0.293704847208);
	point211 = Point.Point(32.8356711094,2.74454193359,0.229875126365);
	point212 = Point.Point(81.2387462135,83.5052259492,0.66327972528);
	point213 = Point.Point(48.4089332949,56.0113368798,0.688413699275);
	point214 = Point.Point(5.7091103511,37.756483308,0.530542467767);
	point215 = Point.Point(58.062930125,73.601033235,0.576371017736);
	point216 = Point.Point(51.4562683573,69.6209883654,0.180936229213);
	point217 = Point.Point(92.6329695016,58.2333271371,0.284656380887);
	point218 = Point.Point(33.8176278839,51.1993721811,0.468060754512);
	point219 = Point.Point(10.4416631311,72.2085714163,0.450481510092);
	point220 = Point.Point(17.3670348903,70.8617567082,0.48569098282);
	point221 = Point.Point(15.7104552602,74.3201197277,0.162660197196);
	point222 = Point.Point(94.007725914,75.8187415284,0.954700169781);
	point223 = Point.Point(63.6330044237,13.5867757281,0.0116205909274);
	point224 = Point.Point(5.70206196008,29.1298134112,0.601420220758);
	point225 = Point.Point(64.6967176761,36.2294595468,0.171812410995);
	point226 = Point.Point(21.3514671673,18.211078334,0.76197523568);
	point227 = Point.Point(51.034128223,27.0071831586,0.817093557714);
	point228 = Point.Point(43.3941997027,18.9143072316,0.322544930983);
	point229 = Point.Point(64.8379715201,82.2911688147,0.1402357972);
	point230 = Point.Point(26.1009296278,4.09901412542,0.604127292176);
	point231 = Point.Point(82.4270347662,95.7482452969,0.0624165683558);
	point232 = Point.Point(2.30223157121,71.6635473803,0.472273852523);
	point233 = Point.Point(57.3496723116,65.360703651,0.104089792231);
	point234 = Point.Point(63.0987547703,69.3188412517,0.90125070599);
	point235 = Point.Point(89.5937805546,17.7618716427,0.621004725048);
	point236 = Point.Point(0.354779057763,74.9898554922,0.769329370301);
	point237 = Point.Point(81.6878473108,4.02046690028,0.488940219847);
	point238 = Point.Point(80.1942914313,80.4922771599,0.954445551505);
	point239 = Point.Point(18.9863483592,57.2683561002,0.536437679266);
	point240 = Point.Point(35.375918012,17.9551140757,0.708827666747);
	point241 = Point.Point(70.4665060944,40.6143398023,0.766006353059);
	point242 = Point.Point(67.3747837081,64.9230708631,0.96815177777);
	point243 = Point.Point(44.8313148273,84.5797355711,0.121481516133);
	point244 = Point.Point(87.5612435868,85.5200718762,0.181221412783);
	point245 = Point.Point(77.8187916846,24.0407214575,0.346943655256);
	point246 = Point.Point(72.44577431,81.1433776389,0.305676383155);
	point247 = Point.Point(22.3495308567,59.5314039408,0.428390228662);
	point248 = Point.Point(85.7777049974,96.0581415688,0.696448365562);
	point249 = Point.Point(24.0616877938,77.0179565508,0.303378878977);
	point250 = Point.Point(39.5218216324,85.158813056,0.0949096302709);
	point251 = Point.Point(85.9010756258,7.27729814214,0.430131934473);
	point252 = Point.Point(59.586983478,15.5117796517,0.80377240056);
	point253 = Point.Point(8.06775076903,42.5395330076,0.565723205749);
	point254 = Point.Point(97.4192398058,59.865177002,0.635706335819);
	point255 = Point.Point(84.8529500983,86.3053635598,0.119059188862);
	point256 = Point.Point(11.9905013917,22.7325177305,0.234326168376);
	point257 = Point.Point(88.7510530888,48.6779966621,0.4181579122);
	point258 = Point.Point(77.4778055421,77.3151425562,0.141814759222);
	point259 = Point.Point(50.9663771305,91.4419362713,0.319303097585);
	point260 = Point.Point(93.3353468927,4.23555975443,0.495263458457);
	point261 = Point.Point(76.6423186209,29.4162336202,0.578417020082);
	point262 = Point.Point(96.1679925824,79.9698152482,0.150871527759);
	point263 = Point.Point(29.6384941822,25.4786693853,0.655020483609);
	point264 = Point.Point(54.6839322623,12.3581709083,0.692522083426);
	point265 = Point.Point(2.01640603049,23.0196755672,0.0739655343745);
	point266 = Point.Point(71.4228595966,90.3881218344,0.910515557997);
	point267 = Point.Point(68.328938217,34.6586226914,0.840853758757);
	point268 = Point.Point(4.18467330847,31.5518610797,0.973013501584);
	point269 = Point.Point(28.1716208771,60.8230289216,0.721869365752);
	point270 = Point.Point(92.9866340173,49.0997813603,0.544044548238);
	point271 = Point.Point(75.6123405305,98.4667070068,0.251820971997);
	point272 = Point.Point(4.91930600029,54.1374100464,0.228010073181);
	point273 = Point.Point(22.9282297492,63.7383620132,0.100245743025);
	point274 = Point.Point(37.3679920339,67.8117845611,0.94329719316);
	point275 = Point.Point(15.3477804004,83.6112641145,0.351140022206);
	point276 = Point.Point(67.2404555187,14.0171302434,0.801823612644);
	point277 = Point.Point(69.6113201077,70.695875823,0.938985021624);
	point278 = Point.Point(35.6622107084,97.5202026606,0.345723827692);
	point279 = Point.Point(97.0320874664,18.3707661927,0.728669721744);
	point280 = Point.Point(5.86046538623,16.1694890745,0.408733033591);
	point281 = Point.Point(82.7250848248,46.2228429412,0.442639974113);
	point282 = Point.Point(25.1455696319,83.5559521032,0.694447343735);
	point283 = Point.Point(21.7244189773,59.6127019373,0.719779383238);
	point284 = Point.Point(9.47285892044,53.6549588653,0.693291751914);
	point285 = Point.Point(36.7221273446,15.1358279738,0.626695105266);
	point286 = Point.Point(32.123009164,28.1431407423,0.635409717386);
	point287 = Point.Point(17.6842872744,24.7595028683,0.224898242855);
	point288 = Point.Point(54.7808554732,30.5223450593,0.992644045703);
	point289 = Point.Point(19.8345892958,68.4900854772,0.215005506009);
	point290 = Point.Point(89.0585059527,10.0737467157,0.318212868872);
	point291 = Point.Point(64.5838337609,14.8626743039,0.721424232847);
	point292 = Point.Point(3.74770352118,44.532591512,0.519814532926);
	point293 = Point.Point(9.78718305308,68.3500782997,0.393239760866);
	point294 = Point.Point(6.58011390846,83.213899035,0.562546481206);
	point295 = Point.Point(51.0875995061,50.1535564651,0.79998330341);
	point296 = Point.Point(76.6788823662,12.4249824115,0.531802751999);
	point297 = Point.Point(12.7214363375,47.630169039,0.123331610519);
	point298 = Point.Point(64.11080147,57.109431639,0.687770611108);
	point299 = Point.Point(32.5602424993,2.18886824921,0.34620445933);
	point300 = Point.Point(0.568305007052,19.4018508664,0.381930383368);
	point301 = Point.Point(52.2062639171,73.6998854916,0.440303932791);
	point302 = Point.Point(66.580831491,3.23076934886,0.248105249333);
	point303 = Point.Point(32.0157937592,12.0735282414,0.379843141057);
	point304 = Point.Point(42.2836674242,51.3143673722,0.420104348858);
	point305 = Point.Point(37.0990052738,84.3446562426,0.481162136567);
	point306 = Point.Point(97.5415682254,19.9808583094,0.779238592984);
	point307 = Point.Point(83.7922910643,49.128002488,0.644033217593);
	point308 = Point.Point(88.6400171736,56.7988804573,0.494936523647);
	point309 = Point.Point(95.4883649658,97.8433874741,0.319173240425);
	point310 = Point.Point(59.8841443523,50.79256257,0.0584766907863);
	point311 = Point.Point(14.9631247104,28.7900769692,0.553567339531);
	point312 = Point.Point(74.0708502597,18.3128701254,0.553522659137);
	point313 = Point.Point(37.670973152,78.2790625497,0.90411216829);
	point314 = Point.Point(42.077960611,61.7966346843,0.260575800106);
	point315 = Point.Point(25.8374743434,22.5436292787,0.685100407225);
	point316 = Point.Point(55.958029993,51.7468468818,0.831462545085);
	point317 = Point.Point(4.42226833347,67.7180173944,0.330975835959);
	point318 = Point.Point(82.6760184028,34.2305043428,0.295648651853);
	point319 = Point.Point(17.2136217988,94.1667725955,0.355287526777);
	point320 = Point.Point(6.60484156908,83.2391467491,0.787166925785);
	point321 = Point.Point(21.407566408,85.4394145552,0.0326732361244);
	point322 = Point.Point(15.0680385819,95.9325909667,0.982471778585);
	point323 = Point.Point(10.164234716,29.9899464167,0.199224213912);
	point324 = Point.Point(37.2824007774,37.4942933827,0.0376099321816);
	point325 = Point.Point(88.1419423638,54.4487863503,0.786413122174);
	point326 = Point.Point(84.3786489587,17.0658920604,0.807195227428);
	point327 = Point.Point(62.127689178,92.1692499394,0.209544499271);
	point328 = Point.Point(59.1111267899,66.851790331,0.739192609657);
	point329 = Point.Point(68.3195601623,48.5120721274,0.091821201063);
	point330 = Point.Point(72.6695492993,12.5655641666,0.102025126722);
	point331 = Point.Point(1.55008038969,67.5356743287,0.897146358124);
	point332 = Point.Point(90.1059229496,84.8405625533,0.737469572525);
	point333 = Point.Point(49.4351068426,70.9413351713,0.388467853597);
	point334 = Point.Point(49.9642174809,5.27386784485,0.390665607885);
	point335 = Point.Point(73.4431830066,69.037967506,0.512017887059);
	point336 = Point.Point(61.4518083935,88.5075980545,0.559560531196);
	point337 = Point.Point(97.2270864498,56.1596485396,0.0662856679617);
	point338 = Point.Point(18.7484496328,62.2121998815,0.587876377187);
	point339 = Point.Point(22.4733755167,5.59753528403,0.366215126478);
	point340 = Point.Point(61.8672142573,0.739788016259,0.671727278965);
	point341 = Point.Point(19.6666788466,19.6360176074,0.582491315037);
	point342 = Point.Point(11.654081659,45.7886187778,0.757033961287);
	point343 = Point.Point(2.68940916995,9.44015873197,0.0884117547365);
	point344 = Point.Point(24.3973567554,96.8626734076,0.33710973466);
	point345 = Point.Point(5.1796701997,68.7810300193,0.00692369125444);
	point346 = Point.Point(66.0162645458,22.8407378115,0.0425451949979);
	point347 = Point.Point(64.9090758046,33.860173032,0.81797777816);
	point348 = Point.Point(57.263132855,63.3169685632,0.800370548089);
	point349 = Point.Point(1.41025600844,40.3570851046,0.416395617269);
	point350 = Point.Point(28.8737174558,53.5626702328,0.998587034398);
	point351 = Point.Point(32.330441025,96.9081142468,0.0333650697333);
	point352 = Point.Point(12.1153593829,52.3826896104,0.461347422715);
	point353 = Point.Point(97.2308786674,29.3023723818,0.973659738965);
	point354 = Point.Point(3.48103326075,88.3737018304,0.132516249552);
	point355 = Point.Point(64.7018975737,1.77312561506,0.414697306767);
	point356 = Point.Point(72.6187942288,82.411527428,0.495080911867);
	point357 = Point.Point(74.9590229935,87.3689733776,0.667009260525);
	point358 = Point.Point(77.9070012328,52.9062454709,0.391675390206);
	point359 = Point.Point(67.4344088171,5.8425960343,0.165769886873);
	point360 = Point.Point(44.9560084023,15.3968014459,0.65105275905);
	point361 = Point.Point(72.3959174233,89.2762968049,0.95726281138);
	point362 = Point.Point(72.1519719191,8.02667928221,0.345936156038);
	point363 = Point.Point(15.602303204,84.6318795314,0.59111787335);
	point364 = Point.Point(25.1637156225,95.2533365665,0.0652188523486);
	point365 = Point.Point(75.1712765071,29.0895042691,0.600053886918);
	point366 = Point.Point(3.5769695841,72.885218341,0.462977564895);
	point367 = Point.Point(69.9967801834,99.0042748553,0.674043076977);
	point368 = Point.Point(91.4946023769,32.7040869993,0.898188150073);
	point369 = Point.Point(9.92369006718,97.6199736966,0.830993179547);
	point370 = Point.Point(23.5738038416,40.6820290137,0.821988523397);
	point371 = Point.Point(24.480809425,42.6680868343,0.203968284584);
	point372 = Point.Point(36.3074348312,12.9690260123,0.387467325951);
	point373 = Point.Point(73.2126061412,88.716200435,0.373762305342);
	point374 = Point.Point(8.95425992935,93.8122058931,0.4915477818);
	point375 = Point.Point(81.3425489391,11.4011791183,0.141713051249);
	point376 = Point.Point(69.2092238748,8.38567624182,0.380650452006);
	point377 = Point.Point(47.1882133889,22.6480607714,0.377181202253);
	point378 = Point.Point(27.9554983327,34.2481114139,0.441239504763);
	point379 = Point.Point(27.3208862415,89.1299976381,0.409531784425);
	point380 = Point.Point(43.3835340444,83.4404434866,0.800589118623);
	point381 = Point.Point(61.936207159,41.3073172521,0.756359161038);
	point382 = Point.Point(15.5579861094,36.840995594,0.245140656266);
	point383 = Point.Point(55.7454043009,87.0799411631,0.927940510269);
	point384 = Point.Point(47.0728024141,42.1808494031,0.870715005384);
	point385 = Point.Point(66.9559418874,80.4439808677,0.53282381347);
	point386 = Point.Point(21.4381941595,34.2008243978,0.930643341689);
	point387 = Point.Point(49.672458171,32.8389147555,0.742904418078);
	point388 = Point.Point(47.8376002995,65.1049346662,0.209147072653);
	point389 = Point.Point(41.4498963155,16.5314224365,0.135225529072);
	point390 = Point.Point(98.1847312549,44.164946903,0.510567400952);
	point391 = Point.Point(63.3324686104,95.2311137748,0.727771974253);
	point392 = Point.Point(40.6646522073,23.6121246274,0.404406882143);
	point393 = Point.Point(6.043822649,64.3820142768,0.206873008372);
	point394 = Point.Point(78.4238160789,20.3439222096,0.703370773945);
	point395 = Point.Point(97.0975972775,6.85622147094,0.699884444706);
	point396 = Point.Point(38.6098907794,99.4327815752,0.273843059411);
	point397 = Point.Point(87.049475794,35.4624030156,0.598952800133);
	point398 = Point.Point(36.7701356353,99.0544717027,0.0143600217221);
	point399 = Point.Point(15.3667321546,58.403984682,0.675406606757);
	point400 = Point.Point(11.4682252719,6.24496998026,0.0978893718091);
	point401 = Point.Point(43.5667800402,20.73611545,0.839203929448);
	point402 = Point.Point(63.6836454383,92.1560181046,0.726351465479);
	point403 = Point.Point(82.9330899585,64.0592018129,0.311417768192);
	point404 = Point.Point(42.1321385798,88.7500260186,0.604355437593);
	point405 = Point.Point(37.050562017,38.9361811904,0.178960973914);
	point406 = Point.Point(29.2877213669,3.34427840326,0.413758166834);
	point407 = Point.Point(25.9485279644,62.6106348053,0.252394031226);
	point408 = Point.Point(86.5533863949,76.5789676761,0.959141116557);
	point409 = Point.Point(88.8103529976,80.0415438164,0.0236157607414);
	point410 = Point.Point(43.7045704045,86.8475614615,0.493156879303);
	point411 = Point.Point(94.9283435797,62.9240241478,0.599766940268);
	point412 = Point.Point(99.2860036103,27.5243417375,0.0244356107103);
	point413 = Point.Point(55.1609445918,45.8526805976,0.324387877137);
	point414 = Point.Point(0.649322892404,40.4142868397,0.0591490623403);
	point415 = Point.Point(67.3729096969,52.5641263247,0.649327836433);
	point416 = Point.Point(64.6608599556,79.2701912894,0.934059127837);
	point417 = Point.Point(44.5414399043,83.1072688028,0.115925671559);
	point418 = Point.Point(1.02070254674,37.6607647583,0.713911493118);
	point419 = Point.Point(41.1218487671,15.369731707,0.0103828198131);
	point420 = Point.Point(60.8417549993,10.7623142836,0.911986734873);
	point421 = Point.Point(85.6527524519,79.6426319113,0.173476416597);
	point422 = Point.Point(89.3894595325,47.8185160113,0.702289881477);
	point423 = Point.Point(87.5792748472,76.2409193998,0.594904277375);
	point424 = Point.Point(92.2181789247,77.3031330308,0.661871116628);
	point425 = Point.Point(33.4749182745,76.7670331396,0.225140442392);
	point426 = Point.Point(57.6202562782,58.510329155,0.693052660289);
	point427 = Point.Point(11.9665860828,24.9922122734,0.034046981358);
	point428 = Point.Point(26.90480405,89.7039688342,0.131421442269);
	point429 = Point.Point(35.2796280771,57.3959778953,0.382480314635);
	point430 = Point.Point(57.0761608511,7.06265084321,0.726592251237);
	point431 = Point.Point(55.7818156954,86.0966409458,0.318316165638);
	point432 = Point.Point(69.8219934575,64.3667172819,0.628078556741);
	point433 = Point.Point(2.97091750799,87.1089559164,0.669789912397);
	point434 = Point.Point(79.4809092073,14.4626123955,0.474678056568);
	point435 = Point.Point(14.2232654588,6.53715864762,0.316115404763);
	point436 = Point.Point(67.5047852896,18.7626771524,0.533218239047);
	point437 = Point.Point(1.23092834338,19.8213038866,0.246038026143);
	point438 = Point.Point(30.6049944432,10.1200969239,0.865333989368);
	point439 = Point.Point(48.1828447025,22.3779571539,0.0108703409286);
	point440 = Point.Point(92.4609506871,77.9792505154,0.348147699931);
	point441 = Point.Point(97.7769573216,49.2648349613,0.433085377955);
	point442 = Point.Point(70.9288561264,11.1372700764,0.443969286131);
	point443 = Point.Point(82.9375905517,28.4774231541,0.637807367275);
	point444 = Point.Point(24.7939042645,35.9216804581,0.843587268663);
	point445 = Point.Point(56.2108235993,14.9022247314,0.634348577997);
	point446 = Point.Point(70.294040251,18.3304957393,0.61170845677);
	point447 = Point.Point(42.0328466534,22.9114220062,0.975409914083);
	point448 = Point.Point(35.2378134493,54.7279890764,0.262844616418);
	point449 = Point.Point(11.8983854772,90.7717001821,0.24512377093);
	point450 = Point.Point(28.9577761832,50.8702341933,0.852406004898);
	point451 = Point.Point(57.2735200444,89.3630873679,0.125817542028);
	point452 = Point.Point(65.4590618969,22.0953923444,0.231084202945);
	point453 = Point.Point(81.7266006681,50.2042535554,0.652513321991);
	point454 = Point.Point(33.611088257,31.0759302568,0.911980343211);
	point455 = Point.Point(23.2856313547,8.93544814304,0.0440035548708);
	point456 = Point.Point(21.7881519246,69.8169069244,0.863176106193);
	point457 = Point.Point(49.2999307245,73.0283034808,0.0156531153753);
	point458 = Point.Point(6.64817305927,79.4027196878,0.023580830845);
	point459 = Point.Point(34.9274841777,78.2132873325,0.177422592754);
	point460 = Point.Point(68.8783861006,93.7853348881,0.449163023766);
	point461 = Point.Point(37.3459422737,67.9412607398,0.79406222599);
	point462 = Point.Point(36.0189304142,62.542418694,0.737818407311);
	point463 = Point.Point(15.3645492913,1.50665533819,0.407147273119);
	point464 = Point.Point(66.7611411878,96.0337757096,0.567234532074);
	point465 = Point.Point(45.5996055265,21.4442033236,0.00157575249062);
	point466 = Point.Point(7.52904362289,32.9232026498,0.544415069242);
	point467 = Point.Point(57.3200062149,86.6774203623,0.527295495699);
	point468 = Point.Point(42.2707146944,21.7099030617,0.986244340703);
	point469 = Point.Point(40.5217916576,30.1851959022,0.508829297848);
	point470 = Point.Point(33.8333856562,40.1867787869,0.215463756998);
	point471 = Point.Point(74.0154529547,30.4199335323,0.783794269698);
	point472 = Point.Point(88.0666256795,29.2859379904,0.990091592736);
	point473 = Point.Point(17.3338841209,28.9894335216,0.563589389693);
	point474 = Point.Point(10.356695893,55.7835931881,0.540349227041);
	point475 = Point.Point(47.2567172227,35.0594891861,0.973406578678);
	point476 = Point.Point(5.93889368923,86.0240483045,0.961714647666);
	point477 = Point.Point(46.026421364,75.1556701446,0.930180177858);
	point478 = Point.Point(92.2738031945,73.5318478621,0.438028669333);
	point479 = Point.Point(30.9530763339,90.1075797628,0.678492208245);
	point480 = Point.Point(52.2276720077,64.8745263656,0.28058459504);
	point481 = Point.Point(89.6376948853,45.6059361983,0.238724187291);
	point482 = Point.Point(88.9171668083,84.4986031189,0.246119024728);
	point483 = Point.Point(34.2340642936,79.7989196087,0.0731003678509);
	point484 = Point.Point(52.6269746575,34.5056803566,0.113593269485);
	point485 = Point.Point(17.3701133815,97.9241077456,0.163598254509);
	point486 = Point.Point(68.4663451607,3.85596141014,0.220725999633);
	point487 = Point.Point(13.6936548367,25.5403875409,0.859496447752);
	point488 = Point.Point(30.9337217042,11.3827071176,0.115654132015);
	point489 = Point.Point(43.0312912411,80.9686156407,0.0366173120043);
	point490 = Point.Point(94.9669658965,81.0829987398,0.1105488953);
	point491 = Point.Point(89.8320905331,77.003552127,0.333053854857);
	point492 = Point.Point(2.48287739764,65.9397249124,0.584144943874);
	point493 = Point.Point(75.5655531104,29.9275299711,0.168688123442);
	point494 = Point.Point(10.7291896186,34.8775182359,0.621545622772);
	point495 = Point.Point(44.5899473414,44.0282570649,0.667130446609);
	point496 = Point.Point(55.2411326386,60.8918208173,0.437319176667);
	point497 = Point.Point(0.754957306872,20.8023595216,0.036117421284);
	point498 = Point.Point(31.1713117736,3.59983338629,0.574253611349);
	point499 = Point.Point(52.3273137373,2.95158780682,0.850533715195);
	point500 = Point.Point(5.53304876918,47.2914497664,0.731574397667);
	point501 = Point.Point(78.0058831996,99.3154644807,0.41823943627);
	point502 = Point.Point(66.1446518562,46.7972808913,0.0931942204299);
	point503 = Point.Point(26.0982593714,80.9513406069,0.184827707159);
	point504 = Point.Point(42.4654483443,75.3431605198,0.967616737749);
	point505 = Point.Point(99.8545542728,46.6018832822,0.103830447501);
	point506 = Point.Point(18.1687392784,0.120737639586,0.215194530572);
	point507 = Point.Point(80.7656490201,80.7727625774,0.745774761952);
	point508 = Point.Point(23.842179385,69.9121192612,0.828511569369);
	point509 = Point.Point(40.9193085952,45.9912960547,0.880330376647);
	point510 = Point.Point(75.3994827332,25.5930795774,0.662578852378);
	point511 = Point.Point(35.1749432519,81.8229749506,0.267685935186);
	point512 = Point.Point(3.88721435238,81.9920029069,0.711934516436);
	point513 = Point.Point(45.1443536724,99.1301116288,0.419093801421);
	point514 = Point.Point(18.730386426,35.5567633595,0.105893316089);
	point515 = Point.Point(8.21111639676,25.3222474948,0.556803785137);
	point516 = Point.Point(96.3402298147,97.9332225225,0.325881621789);
	point517 = Point.Point(54.9371981705,78.3993612533,0.171015962773);
	point518 = Point.Point(42.2853804031,43.16367417,0.687353457457);
	point519 = Point.Point(94.9561866273,63.0099087393,0.119383382413);
	point520 = Point.Point(84.6862460929,58.7858558948,0.814014585501);
	point521 = Point.Point(1.28400393373,82.2094834232,0.21304032467);
	point522 = Point.Point(88.2105285972,53.8908303626,0.19309690275);
	point523 = Point.Point(45.1412002849,70.841692932,0.648092913671);
	point524 = Point.Point(13.7247042514,50.3049544612,0.723527272946);
	point525 = Point.Point(55.124317179,95.1999275313,0.299463644453);
	point526 = Point.Point(38.8067701746,5.50391224107,0.865635212105);
	point527 = Point.Point(46.4769188388,77.5157601796,0.00868655968528);
	point528 = Point.Point(60.8741108664,33.2895879272,0.934973742449);
	point529 = Point.Point(8.75475791434,3.70547226414,0.954876566396);
	point530 = Point.Point(56.3115310284,77.0809861032,0.157110744067);
	point531 = Point.Point(19.6616679116,82.0448421279,0.123413130475);
	point532 = Point.Point(16.4776090553,34.9447143694,0.485864517246);
	point533 = Point.Point(42.3772052468,32.9784482232,0.0989218122238);
	point534 = Point.Point(52.737605589,18.2939656747,0.418126414879);
	point535 = Point.Point(64.7282644231,75.6483017228,0.797392304135);
	point536 = Point.Point(90.7509726854,74.9825420083,0.522790300837);
	point537 = Point.Point(14.5205333686,34.2604351228,0.268835649526);
	point538 = Point.Point(13.2462511011,55.3454019114,0.870137255359);
	point539 = Point.Point(86.4704730809,18.2714324256,0.270256120216);
	point540 = Point.Point(52.1276860694,34.5643414573,0.368954443328);
	point541 = Point.Point(19.6589837571,13.0267494395,0.814734458747);
	point542 = Point.Point(69.5371966333,34.6912654665,0.198932610017);
	point543 = Point.Point(62.501187211,8.1848416619,0.740485190728);
	point544 = Point.Point(26.1392413784,26.0440610256,0.0468355497893);
	point545 = Point.Point(77.6808389988,33.4168147521,0.0747776872799);
	point546 = Point.Point(0.103784900407,67.4191697176,0.810230917996);
	point547 = Point.Point(93.6103736939,3.42725656719,0.0523938253921);
	point548 = Point.Point(22.8339957663,60.1263247842,0.847712496445);
	point549 = Point.Point(1.29468323012,20.7681250247,0.0251807725213);
	point550 = Point.Point(6.25338533886,96.3095116823,0.0689016990437);
	point551 = Point.Point(57.0729455783,49.7529158884,0.278142300904);
	point552 = Point.Point(42.1016333001,80.6366652186,0.891104400605);
	point553 = Point.Point(17.728708391,86.0560947047,0.841286886259);
	point554 = Point.Point(60.1295238894,25.6968119913,0.84168559162);
	point555 = Point.Point(31.4596637151,88.2886689372,0.373255614902);
	point556 = Point.Point(17.8514217224,85.8944265467,0.276646196669);
	point557 = Point.Point(43.528067874,97.3843107729,0.480934402273);
	point558 = Point.Point(37.3470903,28.56326843,0.167804676699);
	point559 = Point.Point(84.5205515369,88.8654827763,0.5771479512);
	point560 = Point.Point(87.0967371996,26.8380710004,0.364916223598);
	point561 = Point.Point(94.3312650968,3.16683642073,0.804718084905);
	point562 = Point.Point(40.3166006929,89.3637633051,0.251320038667);
	point563 = Point.Point(81.401218821,62.3020544698,0.12225999228);
	point564 = Point.Point(59.9658064162,40.9689417676,0.431895346855);
	point565 = Point.Point(0.383579548746,32.5509682199,0.202116884361);
	point566 = Point.Point(60.0921385452,24.3900521578,0.35723974515);
	point567 = Point.Point(28.6497874363,0.421905249004,0.88389691586);
	point568 = Point.Point(72.0697103285,38.3567757989,0.556533030534);
	point569 = Point.Point(98.292153014,18.3066898594,0.17404285339);
	point570 = Point.Point(91.0186138792,85.2883763934,0.366351508459);
	point571 = Point.Point(47.321826463,20.1428767786,0.398890387032);
	point572 = Point.Point(54.4194714655,69.0507485585,0.709593273095);
	point573 = Point.Point(58.7492705408,10.1958187831,0.43514248313);
	point574 = Point.Point(41.7666479418,51.7386648133,0.588580332198);
	point575 = Point.Point(34.1251803131,82.5519845794,0.89621695827);
	point576 = Point.Point(67.7660756783,58.9092399641,0.790607830367);
	point577 = Point.Point(26.804485834,28.8929313935,0.0193320741053);
	point578 = Point.Point(43.2778458019,47.3730361493,0.0556860967953);
	point579 = Point.Point(85.9454612577,46.8247732635,0.112712488827);
	point580 = Point.Point(46.1865547176,58.4140692936,0.937351832394);
	point581 = Point.Point(59.2691656444,25.8323976046,0.176941656998);
	point582 = Point.Point(94.9649144124,70.0298592774,0.473793063696);
	point583 = Point.Point(53.7205981742,19.0070894775,0.925235074697);
	point584 = Point.Point(79.9056022507,7.83293521799,0.458641031853);
	point585 = Point.Point(45.9986693194,79.538204641,0.555499787163);
	point586 = Point.Point(43.9549101804,70.4029975103,0.646426826815);
	point587 = Point.Point(36.6046519568,93.1788772419,0.204375196002);
	point588 = Point.Point(40.5465939415,27.3661025147,0.138076729413);
	point589 = Point.Point(53.8545664219,30.9171178215,0.781452300316);
	point590 = Point.Point(68.4612659465,39.9734058342,0.170741925381);
	point591 = Point.Point(73.3508502382,74.8913239775,0.206879545844);
	point592 = Point.Point(84.8281231649,47.3532995037,0.181542038194);
	point593 = Point.Point(1.27487269522,85.5583352863,0.432964729853);
	point594 = Point.Point(98.7697589788,89.4810105067,0.176185838899);
	point595 = Point.Point(24.800296464,74.3478995846,0.947350354718);
	point596 = Point.Point(81.7416893956,4.02075813906,0.0789961435182);
	point597 = Point.Point(12.1017279335,13.7562724065,0.865191084586);
	point598 = Point.Point(95.2603635937,77.7359234153,0.587191205506);
	point599 = Point.Point(43.8680228901,78.6283918691,0.653089404168);
	point600 = Point.Point(89.2357270031,94.3116153657,0.847990715661);
	point601 = Point.Point(66.3875517265,44.0514425277,0.159684162458);
	point602 = Point.Point(11.2467422588,7.30344895154,0.160418174879);
	point603 = Point.Point(72.5793946134,50.2019859069,0.73781157157);
	point604 = Point.Point(45.3146942102,18.2437242374,0.874340849416);
	point605 = Point.Point(28.0274155346,47.9237259796,0.746001117897);
	point606 = Point.Point(33.0123222145,39.180353379,0.228383649948);
	point607 = Point.Point(43.1558890173,6.12299867973,0.056316071872);
	point608 = Point.Point(95.2790214553,95.8326369381,0.225695589178);
	point609 = Point.Point(3.22531010376,15.8117332983,0.270004609687);
	point610 = Point.Point(49.4338653013,81.1877991479,0.171500208274);
	point611 = Point.Point(0.968668074178,52.1899062447,0.660323108279);
	point612 = Point.Point(55.519239804,24.3669903229,0.970947427251);
	point613 = Point.Point(34.8941275405,17.2247567692,0.770678381474);
	point614 = Point.Point(86.5400170514,76.2895372803,0.189552695066);
	point615 = Point.Point(31.908407493,72.3889264303,0.909238446504);
	point616 = Point.Point(62.996045484,2.28511073689,0.311931674251);
	point617 = Point.Point(95.0608136087,19.1821836318,0.413201995765);
	point618 = Point.Point(31.7193130884,70.0128601497,0.000403862993687);
	point619 = Point.Point(47.8919277116,67.7213896359,0.680727209729);
	point620 = Point.Point(37.2900271047,77.3571213398,0.978636247113);
	point621 = Point.Point(14.44593168,88.0482253142,0.000694234245552);
	point622 = Point.Point(54.7529724754,86.6829732715,0.987691733406);
	point623 = Point.Point(34.1206267218,45.8560696108,0.031915985611);
	point624 = Point.Point(47.7774396175,35.7411424249,0.0215051020978);
	point625 = Point.Point(30.5589064636,25.5781482801,0.191013880639);
	point626 = Point.Point(86.7225474332,98.7323906383,0.626650327583);
	point627 = Point.Point(23.1479374417,95.1570797176,0.835423400242);
	point628 = Point.Point(50.8248893156,89.1616930201,0.560242850012);
	point629 = Point.Point(69.4713982056,51.8718250161,0.970153283585);
	point630 = Point.Point(47.2774050453,22.6911001418,0.626390710256);
	point631 = Point.Point(61.0825870451,84.9852531448,0.0858287573673);
	point632 = Point.Point(2.00066813912,68.3069288215,0.0366676469053);
	point633 = Point.Point(62.3635408439,91.0283089917,0.665832334162);
	point634 = Point.Point(98.0264482859,76.6897395241,0.93057195891);
	point635 = Point.Point(31.3148213623,74.5352594392,0.80400789081);
	point636 = Point.Point(95.4828345235,32.1853916262,0.875799046507);
	point637 = Point.Point(28.4987583155,64.9510046412,0.499599113552);
	point638 = Point.Point(24.7535669849,36.2749489023,0.543286702481);
	point639 = Point.Point(35.4780475743,18.1850117462,0.835972872569);
	point640 = Point.Point(72.6048942948,53.2390533893,0.979656497536);
	point641 = Point.Point(5.48582033754,37.1431924795,0.107374504309);
	point642 = Point.Point(62.0361263175,85.7026721255,0.000388354338376);
	point643 = Point.Point(27.5732058333,12.7003937095,0.197243408902);
	point644 = Point.Point(84.9473430642,81.7440577531,0.516414789362);
	point645 = Point.Point(4.65183428207,82.8788461507,0.0920454775348);
	point646 = Point.Point(82.543617456,94.3258646985,0.720636793409);
	point647 = Point.Point(85.5321750262,70.1141466595,0.404105854995);
	point648 = Point.Point(1.42470599818,42.8032698253,0.484971937288);
	point649 = Point.Point(61.6417891463,6.1986082323,0.49645673371);
	point650 = Point.Point(30.6762282763,22.2708650212,0.380332676114);
	point651 = Point.Point(0.71307122823,79.3054680478,0.21140903978);
	point652 = Point.Point(52.0160506086,47.9109051408,0.576938539885);
	point653 = Point.Point(34.4960633117,95.085340486,0.967816482149);
	point654 = Point.Point(22.7446736786,4.73983485157,0.600442104759);
	point655 = Point.Point(30.0617950935,36.1949675169,0.811092329354);
	point656 = Point.Point(35.1530401638,99.0706323756,0.685661403964);
	point657 = Point.Point(81.8782602741,11.5075505363,0.956460681907);
	point658 = Point.Point(84.2294095191,63.5740621933,0.525385719499);
	point659 = Point.Point(44.5279944247,20.0580517702,0.941012225894);
	point660 = Point.Point(56.623493462,46.0300278257,0.738080435937);
	point661 = Point.Point(8.10922833889,7.15377023072,0.942622669173);
	point662 = Point.Point(86.2543433021,83.4111336976,0.501862091517);
	point663 = Point.Point(45.1135989839,41.2674120126,0.102726270249);
	point664 = Point.Point(63.2126002534,53.01518399,0.432645709814);
	point665 = Point.Point(53.0487230513,4.0547446675,0.273419249446);
	point666 = Point.Point(80.0480844294,64.1343165782,0.691188290421);
	point667 = Point.Point(12.9552345995,2.95012299184,0.474591444251);
	point668 = Point.Point(59.7879173376,69.51101676,0.180474526555);
	point669 = Point.Point(53.7524770776,86.4026500613,0.101941721512);
	point670 = Point.Point(83.75350017,91.3723283227,0.599178178704);
	point671 = Point.Point(64.7617273146,90.0184415403,0.572117305428);
	point672 = Point.Point(54.2438917778,7.66424741711,0.624740860144);
	point673 = Point.Point(98.0415840042,61.0179129324,0.0591108858078);
	point674 = Point.Point(42.3677149674,91.1851641083,0.520236287616);
	point675 = Point.Point(38.6111950761,5.9704268647,0.678641400279);
	point676 = Point.Point(55.4660206658,8.68894856627,0.57120712215);
	point677 = Point.Point(2.44768316019,57.8072493891,0.987960995566);
	point678 = Point.Point(57.2924942749,94.4315702196,0.735794227352);
	point679 = Point.Point(11.0277850399,53.3828896224,0.779584773468);
	point680 = Point.Point(43.1103528457,89.9711443563,0.796910956777);
	point681 = Point.Point(57.8441662804,50.6868620786,0.146487275042);
	point682 = Point.Point(75.1554457328,65.5826158576,0.711675603323);
	point683 = Point.Point(4.24868060122,96.3620693531,0.730249155635);
	point684 = Point.Point(39.0888096721,18.1535637062,0.807035985848);
	point685 = Point.Point(75.6989761289,24.8948831192,0.302121100997);
	point686 = Point.Point(58.2830114379,89.3752807512,0.933200136344);
	point687 = Point.Point(70.907665422,18.2430004151,0.089719089152);
	point688 = Point.Point(13.3414644714,30.8447397934,0.0921337916982);
	point689 = Point.Point(11.04269212,78.3328307867,0.398948824621);
	point690 = Point.Point(33.4199992948,46.8257875487,0.815432722452);
	point691 = Point.Point(59.6062172417,66.8676802166,0.29278722523);
	point692 = Point.Point(10.3682822247,4.81949001003,0.34796158935);
	point693 = Point.Point(66.1070014277,14.667343573,0.763828009128);
	point694 = Point.Point(13.6213089256,52.6913360397,0.624618769862);
	point695 = Point.Point(95.0438780853,50.126669928,0.161474099683);
	point696 = Point.Point(32.8770956924,20.6052971587,0.52010089531);
	point697 = Point.Point(94.4918303611,81.5118975304,0.990502257963);
	point698 = Point.Point(16.136725039,72.9784820349,0.112243680525);
	point699 = Point.Point(5.95662826917,89.1499998992,0.305723467203);
	point700 = Point.Point(92.6927998553,17.9523214658,0.97740613553);
	point701 = Point.Point(8.18176212307,90.1759123614,0.690897801324);
	point702 = Point.Point(54.0566354299,88.4328320991,0.285483456131);
	point703 = Point.Point(36.8050627604,83.6437541532,0.965769625002);
	point704 = Point.Point(32.1300097663,57.2330637591,0.80862644715);
	point705 = Point.Point(75.9638217153,5.61175863764,0.920579458246);
	point706 = Point.Point(47.6551287584,37.3177926629,0.462523212946);
	point707 = Point.Point(18.7942741776,23.4909041172,0.844944145054);
	point708 = Point.Point(79.4979523039,23.183573838,0.58917478237);
	point709 = Point.Point(66.4331190385,89.4498035441,0.00276222852066);
	point710 = Point.Point(46.0107198387,76.7654540508,0.0466474410401);
	point711 = Point.Point(84.9249157097,35.8400845972,0.0562343165065);
	point712 = Point.Point(39.895089311,44.7839437001,0.794436848631);
	point713 = Point.Point(2.88031584146,6.76921519222,0.813787137453);
	point714 = Point.Point(41.9276110245,9.67950070324,0.464035575302);
	point715 = Point.Point(42.0535891612,90.0705289929,0.391035237952);
	point716 = Point.Point(78.5549990311,24.7301179208,0.710536753839);
	point717 = Point.Point(1.73844635883,64.545870267,0.371134517862);
	point718 = Point.Point(44.069340412,22.8973984911,0.113944583638);
	point719 = Point.Point(50.6935540976,7.00997941506,0.418267670332);
	point720 = Point.Point(66.1560763534,67.2631038793,0.499357007035);
	point721 = Point.Point(49.6164570487,82.640117245,0.567247240186);
	point722 = Point.Point(21.9761013732,16.5481234774,0.469233841015);
	point723 = Point.Point(38.6164847813,92.7340027617,0.846755789473);
	point724 = Point.Point(36.5951026021,88.7146721748,0.0691798079786);
	point725 = Point.Point(75.6092611864,70.0115312746,0.689072840667);
	point726 = Point.Point(34.1325000868,24.07095466,0.607341704325);
	point727 = Point.Point(4.37665731525,98.0608176239,0.523088175542);
	point728 = Point.Point(61.0526477224,9.97098638888,0.969783351015);
	point729 = Point.Point(22.297597803,39.4879360029,0.746809216476);
	point730 = Point.Point(55.8148476612,3.71608165019,0.188453404972);
	point731 = Point.Point(73.8555409847,76.1786455947,0.649222421868);
	point732 = Point.Point(77.8465779859,96.7015833133,0.225625820304);
	point733 = Point.Point(91.7151566299,16.2300880636,0.815685805743);
	point734 = Point.Point(30.8683211241,12.1273931219,0.993926886047);
	point735 = Point.Point(21.1720016109,74.9304752286,0.960785592131);
	point736 = Point.Point(98.6358469981,18.3795246377,0.150559272283);
	point737 = Point.Point(70.9773039671,26.3514242494,0.0343258605794);
	point738 = Point.Point(53.4014673579,62.9039986424,0.0246154555761);
	point739 = Point.Point(85.3058775054,51.6474489122,0.408509541862);
	point740 = Point.Point(64.6732880589,49.8991857143,0.0504569741951);
	point741 = Point.Point(13.552363619,79.2675369015,0.0808746361523);
	point742 = Point.Point(69.8117299635,45.2744411497,0.736003565631);
	point743 = Point.Point(85.3770473724,61.0596817193,0.0608063815868);
	point744 = Point.Point(50.9800723329,20.0385332056,0.648199135052);
	point745 = Point.Point(15.4423962718,86.1258969328,0.863486941303);
	point746 = Point.Point(67.3875485599,2.58066469735,0.659464058129);
	point747 = Point.Point(80.6041038921,83.6748680436,0.585625700002);
	point748 = Point.Point(6.38237506381,18.3788621969,0.253307898937);
	point749 = Point.Point(76.0108181212,95.3991783481,0.873612631177);
	point750 = Point.Point(6.58263990705,9.03135377867,0.814592445698);
	point751 = Point.Point(80.1909776722,26.0514681897,0.305559778739);
	point752 = Point.Point(85.8959206551,98.6491048307,0.622552440822);
	point753 = Point.Point(80.3722946714,68.1372844037,0.855421462041);
	point754 = Point.Point(56.0327187737,33.0580756586,0.779610941171);
	point755 = Point.Point(17.7415870772,75.3321923601,0.315213412071);
	point756 = Point.Point(17.8268697463,82.2069373933,0.185747824367);
	point757 = Point.Point(38.3234798902,48.4832591418,0.902432211508);
	point758 = Point.Point(35.1605447552,10.4680008532,0.686112021712);
	point759 = Point.Point(48.4113713159,0.455690410879,0.470212783507);
	point760 = Point.Point(61.2270250357,58.5882863431,0.733127164356);
	point761 = Point.Point(67.3627523445,60.0347392519,0.295652590636);
	point762 = Point.Point(87.7164169977,43.1373331512,0.577214538723);
	point763 = Point.Point(26.297009935,86.4277366987,0.202608997493);
	point764 = Point.Point(96.5342853849,42.7303770967,0.744598349294);
	point765 = Point.Point(67.0865255978,53.0697316971,0.153465583421);
	point766 = Point.Point(7.22116680731,76.0226697169,0.682526746919);
	point767 = Point.Point(22.3895369322,77.5399684979,0.404103491508);
	point768 = Point.Point(64.8031067113,96.1012191233,0.953575715267);
	point769 = Point.Point(69.9322754746,27.3449111253,0.854294515708);
	point770 = Point.Point(56.1561909792,34.8835575724,0.334073668839);
	point771 = Point.Point(31.9777873231,87.0002413113,0.93249508531);
	point772 = Point.Point(81.8051074065,13.76891518,0.467896674954);
	point773 = Point.Point(40.9103145917,53.2386659128,0.906037127738);
	point774 = Point.Point(10.4119077373,7.34681411766,0.205787869095);
	point775 = Point.Point(48.1615197231,38.6317970841,0.44018450165);
	point776 = Point.Point(55.9200931096,16.341192164,0.189946793879);
	point777 = Point.Point(86.0300756548,21.6858507733,0.815493816334);
	point778 = Point.Point(3.60304966151,71.7901028244,0.625245905023);
	point779 = Point.Point(3.37374534663,97.6807564981,0.0748394228528);
	point780 = Point.Point(69.8044289934,54.1405098767,0.971432494934);
	point781 = Point.Point(64.4046550862,83.1074689788,0.894418757986);
	point782 = Point.Point(23.7339205424,30.4984721033,0.51008188478);
	point783 = Point.Point(24.1839192933,19.8889163367,0.587505901666);
	point784 = Point.Point(18.0529727385,75.0487909633,0.173223116167);
	point785 = Point.Point(56.7317992603,49.5326885665,0.485906685415);
	point786 = Point.Point(72.9721250392,86.8094590425,0.85025657395);
	point787 = Point.Point(20.4660912527,56.9169742751,0.441876558895);
	point788 = Point.Point(1.77429967001,78.2656115997,0.354734402698);
	point789 = Point.Point(65.7456264542,52.4155433363,0.668458190212);
	point790 = Point.Point(34.2383023865,28.1226001622,0.546078484942);
	point791 = Point.Point(38.051924825,0.997063557368,0.12803340061);
	point792 = Point.Point(79.2527952007,92.7401111384,0.130503961784);
	point793 = Point.Point(8.91144302185,50.4384325922,0.738616243402);
	point794 = Point.Point(21.608381732,99.0647521324,0.448776124761);
	point795 = Point.Point(19.505236091,99.761613769,0.722785247499);
	point796 = Point.Point(29.6273014926,43.8287756537,0.289202812872);
	point797 = Point.Point(31.3538477539,13.465824672,0.198974253081);
	point798 = Point.Point(76.5097973965,38.5537368606,0.805497391881);
	point799 = Point.Point(3.14963779714,4.96143544917,0.0852090058845);
	point800 = Point.Point(58.1642492327,74.4072100185,0.434560226967);
	point801 = Point.Point(68.3792031668,6.82114333523,0.794545553866);
	point802 = Point.Point(84.350606432,56.8638856647,0.848830143477);
	point803 = Point.Point(17.0737253076,21.6103547501,0.27978212391);
	point804 = Point.Point(5.7774626274,27.0769036504,0.22506054025);
	point805 = Point.Point(62.85895977,32.986947059,0.115537022207);
	point806 = Point.Point(51.4471431838,1.7848659573,0.620145851316);
	point807 = Point.Point(21.9068905972,49.7481230036,0.133278510006);
	point808 = Point.Point(5.87983035822,33.7886755262,0.762314109277);
	point809 = Point.Point(76.7212926759,87.8021719073,0.16455289428);
	point810 = Point.Point(54.4020139776,32.2519073506,0.283980181062);
	point811 = Point.Point(94.5888156814,5.46073370451,0.192074642589);
	point812 = Point.Point(25.3653798555,32.524438727,0.855062861234);
	point813 = Point.Point(43.9943858373,67.5118372793,0.017222876051);
	point814 = Point.Point(55.2864252455,67.2378610934,0.064096244705);
	point815 = Point.Point(19.760774023,74.1455273325,0.486750633156);
	point816 = Point.Point(32.7408086616,11.3622951364,0.451908145463);
	point817 = Point.Point(90.1390891474,43.3638204856,0.957254515733);
	point818 = Point.Point(9.95345225672,38.965275335,0.084529376147);
	point819 = Point.Point(32.9794645397,87.1739502778,0.456298775571);
	point820 = Point.Point(75.2771175359,48.4219899123,0.0690501703904);
	point821 = Point.Point(42.189798374,8.8211271485,0.0770692762108);
	point822 = Point.Point(4.89544082227,7.11629218609,0.315519140107);
	point823 = Point.Point(80.6474173644,89.6461046861,0.975092886054);
	point824 = Point.Point(82.2175241163,33.3774126391,0.0308204628666);
	point825 = Point.Point(47.7393655411,36.3132993439,0.414773500731);
	point826 = Point.Point(40.7016178323,31.093219924,0.42911713423);
	point827 = Point.Point(49.3056355393,39.1542549378,0.641590990943);
	point828 = Point.Point(7.84441130199,69.5215523629,0.772492233355);
	point829 = Point.Point(21.5965927688,83.3152067735,0.713919852989);
	point830 = Point.Point(72.600467826,4.53908761539,0.751268025114);
	point831 = Point.Point(85.0351484264,78.6328473083,0.340828327894);
	point832 = Point.Point(94.3347252858,69.9974062012,0.843190780136);
	point833 = Point.Point(76.3270243799,11.0049015056,0.0212753528991);
	point834 = Point.Point(94.5349031703,53.7018743149,0.646600468223);
	point835 = Point.Point(30.4904153955,69.2503313621,0.41386243825);
	point836 = Point.Point(78.8050268222,47.2320865146,0.758235656305);
	point837 = Point.Point(38.2442934794,12.7595758622,0.794188324479);
	point838 = Point.Point(83.7993284719,91.664695109,0.363820987969);
	point839 = Point.Point(88.1754161756,54.4500415651,0.880473636128);
	point840 = Point.Point(85.0083014892,39.4642438074,0.302621641455);
	point841 = Point.Point(22.4986232997,65.6259407444,0.401493271816);
	point842 = Point.Point(88.3116099746,44.7663073964,0.224551141873);
	point843 = Point.Point(60.0618269588,99.8144612012,0.377865949737);
	point844 = Point.Point(19.09716584,42.7499830082,0.682570261177);
	point845 = Point.Point(60.2637765784,82.8872359447,0.34459502284);
	point846 = Point.Point(9.36852303816,7.05395120096,0.716738175892);
	point847 = Point.Point(12.834040815,53.5940873754,0.525849264836);
	point848 = Point.Point(66.8488140339,37.212626029,0.543270594907);
	point849 = Point.Point(0.86649805795,36.1829053764,0.351676731072);
	point850 = Point.Point(1.72134430632,80.4992271458,0.354190560821);
	point851 = Point.Point(72.9039981022,24.3717550505,0.719373294106);
	point852 = Point.Point(79.4423084696,17.4173961204,0.506479011503);
	point853 = Point.Point(84.8910123124,67.3330870567,0.640634306725);
	point854 = Point.Point(97.969191306,24.8788278912,0.921389684791);
	point855 = Point.Point(17.2960849558,3.72954150561,0.00430728410088);
	point856 = Point.Point(71.127605128,0.63804693102,0.398092999871);
	point857 = Point.Point(32.7258490657,95.1233250295,0.0115268783783);
	point858 = Point.Point(4.59082681906,72.7339011774,0.377349438108);
	point859 = Point.Point(76.9548684596,49.4825343449,0.834579911208);
	point860 = Point.Point(59.0466597423,76.5669436307,0.381277101125);
	point861 = Point.Point(80.6554138806,58.5474065883,0.357689331709);
	point862 = Point.Point(34.003589251,44.2629579991,0.592823161819);
	point863 = Point.Point(56.1538045478,81.1237646228,0.952684009479);
	point864 = Point.Point(61.4465631675,59.6509891009,0.177793132392);
	point865 = Point.Point(39.9567328285,63.3433642381,0.508826530891);
	point866 = Point.Point(98.8146433935,83.3399047949,0.832922306707);
	point867 = Point.Point(0.339099492663,68.7059649927,0.651835579817);
	point868 = Point.Point(42.1150344262,84.5801225428,0.461241948488);
	point869 = Point.Point(42.4811594458,86.2973098081,0.196700414534);
	point870 = Point.Point(90.6533170826,42.0410046844,0.612334733201);
	point871 = Point.Point(11.1289596031,40.6900305377,0.0958223406186);
	point872 = Point.Point(84.7882674671,30.0621082956,0.654029336063);
	point873 = Point.Point(83.5396093563,10.6354468232,0.511515662126);
	point874 = Point.Point(69.9339949686,65.1270143206,0.758622448888);
	point875 = Point.Point(90.8464786824,0.0174350644679,0.0148327950715);
	point876 = Point.Point(58.9212452639,91.5738189776,0.193829737152);
	point877 = Point.Point(45.3924937558,42.3092250808,0.624560551445);
	point878 = Point.Point(68.9627730116,35.519709275,0.137972995831);
	point879 = Point.Point(36.2243920095,35.0819263336,0.574164838309);
	point880 = Point.Point(74.6815450226,89.3606329169,0.610058077495);
	point881 = Point.Point(23.2515404857,57.5829758423,0.592891255408);
	point882 = Point.Point(6.74648626756,97.1319820953,0.186080010869);
	point883 = Point.Point(71.7818930758,73.3657569645,0.265032920323);
	point884 = Point.Point(91.4606025407,67.3320645902,0.37702399509);
	point885 = Point.Point(65.9930963016,46.160776234,0.189918658211);
	point886 = Point.Point(35.7905740087,70.4065068418,0.676154217817);
	point887 = Point.Point(82.2784594715,12.2461762196,0.160871225811);
	point888 = Point.Point(42.7973871915,28.7732644789,0.379525691661);
	point889 = Point.Point(70.3732065364,85.5020130111,0.294153085018);
	point890 = Point.Point(54.5810782109,7.7983914248,0.109015265162);
	point891 = Point.Point(94.3163583659,53.3918494777,0.862566841464);
	point892 = Point.Point(7.16738243844,45.4916211993,0.720102290837);
	point893 = Point.Point(43.1887905492,14.7174386846,0.111160935922);
	point894 = Point.Point(74.5835278282,41.603012484,0.639092756406);
	point895 = Point.Point(19.8830040602,81.9540900527,0.646137334158);
	point896 = Point.Point(65.5002541264,17.3134042017,0.844766550904);
	point897 = Point.Point(70.5432139013,56.2409225649,0.463638507386);
	point898 = Point.Point(10.877018751,45.6628106724,0.0879483269918);
	point899 = Point.Point(32.7798817061,20.5303459256,0.712337186229);
	point900 = Point.Point(34.5899228472,64.3596402112,0.765081836406);
	point901 = Point.Point(41.017332532,28.2810669701,0.360901054865);
	point902 = Point.Point(96.006798043,55.9867225423,0.869204214887);
	point903 = Point.Point(3.42597192866,24.1630445017,0.648300973651);
	point904 = Point.Point(73.1758520477,49.9899435283,0.674925259763);
	point905 = Point.Point(81.08575208,39.4033719749,0.810550287099);
	point906 = Point.Point(18.231142409,73.0129720815,0.68633697759);
	point907 = Point.Point(38.9362008638,55.0244181471,0.405876928696);
	point908 = Point.Point(56.5091223364,0.689534918587,0.520581810192);
	point909 = Point.Point(70.3734693709,64.6519298755,0.268272132734);
	point910 = Point.Point(38.0774482907,92.7670095158,0.107048467579);
	point911 = Point.Point(51.5157373028,9.83132070829,0.473063402383);
	point912 = Point.Point(3.77937704187,49.6742524251,0.491179082007);
	point913 = Point.Point(57.3959863438,20.1222416993,0.832942647108);
	point914 = Point.Point(94.6280468756,63.8867086324,0.797227981654);
	point915 = Point.Point(2.79565008412,39.6584092469,0.462086150753);
	point916 = Point.Point(76.3577678451,90.042381239,0.0785956137527);
	point917 = Point.Point(84.4180380314,15.4468824478,0.477420471439);
	point918 = Point.Point(26.4947254423,71.7834713559,0.69137662915);
	point919 = Point.Point(15.28217787,86.0929791468,0.945152489202);
	point920 = Point.Point(41.9469219816,18.9656427515,0.171436273489);
	point921 = Point.Point(86.1856718137,91.877868707,0.263370128242);
	point922 = Point.Point(69.293890738,2.01889144246,0.949871799504);
	point923 = Point.Point(99.5644002996,79.6740965884,0.449096885644);
	point924 = Point.Point(56.2465865761,32.7966287994,0.0429994050926);
	point925 = Point.Point(42.6223115402,22.2714099555,0.613497100515);
	point926 = Point.Point(39.7748788179,98.1578862857,0.656119442207);
	point927 = Point.Point(30.5413211934,17.6606899194,0.0378362025242);
	point928 = Point.Point(88.0332087259,29.7592255706,0.685669190806);
	point929 = Point.Point(57.5857440683,9.10451716592,0.269198094272);
	point930 = Point.Point(88.9984446153,98.4228088882,0.844134499273);
	point931 = Point.Point(21.7451238897,20.051097796,0.352750986543);
	point932 = Point.Point(15.6271837982,19.5009079346,0.594494684594);
	point933 = Point.Point(15.0323742409,60.5392767184,0.119836869645);
	point934 = Point.Point(41.2808490224,15.5269638483,0.241173289507);
	point935 = Point.Point(86.360430164,30.1142997836,0.88255473345);
	point936 = Point.Point(35.5235231957,44.4962601839,0.286289572445);
	point937 = Point.Point(91.6165198578,26.9510924838,0.2391921674);
	point938 = Point.Point(83.9272040073,82.7556815074,0.982274830873);
	point939 = Point.Point(31.337706237,69.5653137941,0.13181329275);
	point940 = Point.Point(94.1732181016,87.5226562831,0.0785639344155);
	point941 = Point.Point(39.7779845651,54.2461700854,0.457762717613);
	point942 = Point.Point(3.42818815406,80.2639963792,0.465403444773);
	point943 = Point.Point(1.7167293547,89.600265646,0.582841376271);
	point944 = Point.Point(28.0870271037,39.034166265,0.914507972593);
	point945 = Point.Point(31.1742709304,1.35242487954,0.0176037712591);
	point946 = Point.Point(54.055403113,63.0624908428,0.523111232433);
	point947 = Point.Point(8.22782494449,11.2747870697,0.26227058506);
	point948 = Point.Point(59.3076652245,74.6846312854,0.638784927353);
	point949 = Point.Point(31.0431855307,93.4787002075,0.635087757018);
	point950 = Point.Point(36.4507080459,53.7906405243,0.303072869015);
	point951 = Point.Point(55.9952629191,71.3988889166,0.0954444615679);
	point952 = Point.Point(87.6973649474,87.0605158099,0.81200937517);
	point953 = Point.Point(61.6404686164,6.67129336621,0.464261500103);
	point954 = Point.Point(53.3444203343,93.6984729557,0.125490273784);
	point955 = Point.Point(63.8598508898,0.80793993284,0.963866716233);
	point956 = Point.Point(41.3088313818,78.7814161229,0.245150087615);
	point957 = Point.Point(78.1790250768,67.1778687774,0.72255917659);
	point958 = Point.Point(8.0405045233,10.4017458255,0.709515118986);
	point959 = Point.Point(22.7818830346,68.6063601719,0.635114970665);
	point960 = Point.Point(78.7621811712,32.1964855141,0.967873877998);
	point961 = Point.Point(48.4965961962,21.7258045875,0.126008093944);
	point962 = Point.Point(59.9295241729,41.0896189335,0.606580191925);
	point963 = Point.Point(57.4854425582,1.11562872365,0.0989285929963);
	point964 = Point.Point(95.9461138649,21.3338651075,0.751872321234);
	point965 = Point.Point(30.3032903229,62.9044371524,0.57587257216);
	point966 = Point.Point(81.4344427748,61.8065896023,0.454719272967);
	point967 = Point.Point(34.8844904894,53.1334574578,0.761633305177);
	point968 = Point.Point(81.1536785165,15.2601669026,0.208000863246);
	point969 = Point.Point(65.8643607548,7.68499065212,0.812308012346);
	point970 = Point.Point(71.9018806677,51.9940209698,0.893306175876);
	point971 = Point.Point(77.310538219,4.69925541997,0.0592339644659);
	point972 = Point.Point(1.09885511508,2.95377592434,0.626606464547);
	point973 = Point.Point(24.802105535,42.0313248647,0.793382654023);
	point974 = Point.Point(13.5953480188,0.66079582059,0.147415226421);
	point975 = Point.Point(27.4131609288,14.6584832271,0.822813644591);
	point976 = Point.Point(87.4073413389,89.454038636,0.328287906);
	point977 = Point.Point(36.5432149901,70.1121853612,0.302537094565);
	point978 = Point.Point(91.3371695158,37.3270072094,0.531401316232);
	point979 = Point.Point(75.5974848081,68.5347114761,0.455263002211);
	point980 = Point.Point(24.3321114878,96.6876925131,0.58445556595);
	point981 = Point.Point(4.69840593494,38.3888925541,0.768020079375);
	point982 = Point.Point(96.7688741436,6.28070058445,0.350757241593);
	point983 = Point.Point(4.26641277128,27.0774144002,0.327771790777);
	point984 = Point.Point(37.1176364105,85.0331952527,0.00980287068327);
	point985 = Point.Point(62.3108980623,70.9564458983,0.819123322497);
	point986 = Point.Point(53.7716792081,42.4168879093,0.513195896517);
	point987 = Point.Point(54.1350550026,19.3959634254,0.241524249909);
	point988 = Point.Point(92.6903112422,41.7668507789,0.946057727777);
	point989 = Point.Point(82.32827931,98.433424673,0.249866678494);
	point990 = Point.Point(86.2653493016,11.8967544021,0.607468653036);
	point991 = Point.Point(27.9572869358,0.949835729218,0.0516505904799);
	point992 = Point.Point(27.7980344574,90.5329382512,0.383887936243);
	point993 = Point.Point(4.94560844567,17.6398278228,0.323396017794);
	point994 = Point.Point(12.6567675025,66.3621065735,0.764362379517);
	point995 = Point.Point(42.7765955974,10.4424006475,0.228560149256);
	point996 = Point.Point(50.0236199955,47.7627700169,0.274602160856);
	point997 = Point.Point(23.1295110075,80.5368073326,0.915301151306);
	point998 = Point.Point(76.4281077162,40.581171094,0.527445405997);
	point999 = Point.Point(94.3362675608,82.5866756226,0.754399983834);
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch44_newPointClassTestSingle()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"
	external (""ProtoAcDcGeometry"") def getProtoGeometryLibrary : int ();
    class Point
    {
		
        mx : var;
        my : var;
        mz : var;
        id : var;
        external native (""ProtoGeometryHost"") def DC_Point : int (x : double, y : double, z : double);
        
        constructor Point(xx : double, yy : double, zz : double)
        {
            mx = xx;
            my = yy;
            mz = zz;
            id = DC_Point(xx, yy, zz);
        }
    }
	hostid1 = getProtoGeometryLibrary();
	point1 = Point.Point(43.0314374592,94.2314010018,0.0550158535042);
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch45_simpleClass()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"
    class Obj
    {
        val : var;
		mx : var;
		my : var;
		mz : var;
        ff   : var;
	    def sum : double (p : double)
        {
            return = p + 10.0;
        }
        external (""factorial"") def factorial : int (num4 : int);
        constructor Obj(xx : double, yy : double, zz : double)
        {
            mx = xx;
            my = yy;
            mz = zz;
            val = sum(zz);
            ff = factorial(4);
        }
    }
    p = Obj.Obj(1.0, 2.0, 3.0);
    x = p.val;
    z = p.mz;
    f = p.ff;
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch46_DNITest()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"
	class DNI
	{
		startx : int;
		constructor DNI( p1 : int)
		{
			startx = p1;
        }
	}
    external (""ProtoAcDcGeometry"") def getProtoGeometryLibrary : int ();	
    external native (""ProtoGeometryHost"") def DC_DNI_Test : double (id : int);
    hostid1 = getProtoGeometryLibrary();
	x = DNI.DNI(12);
    y = DC_DNI_Test(x);
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch47_newPointTest()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"[Associative]
{
    external native (""ProtoGeometryHost"") def DC_Point : int (x : double, y : double, z : double);
	
    external native (""ProtoGeometryHost"") def DC_Point_X : double (id : int);	
    external native (""ProtoGeometryHost"") def DC_Point_Offset : int (id : int, xx : double, yy : double, zz : double);
	external native (""ProtoGeometryHost"") def DC_Entity_tag : int (id : int, text : int);
	external native (""ProtoGeometryHost"") def DC_Entity_delete : int (id : int);
	
	external (""ProtoAcDcGeometry"") def getProtoGeometryLibrary : int ();	
	hostid1 = getProtoGeometryLibrary();
	p = DC_Point(1.0, 1.0, 1.0);
	
	
	px = DC_Point_X(p);
    q = DC_Point_Offset(p, 4.0, 5.0, 6.0);
	w = DC_Entity_delete(p);
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch49_points_5()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"[Associative]
{
	external (""ProtoAcDcGeometry"") def getProtoGeometryLibrary : int ();
	external native (""ProtoHostAccess"") def DC_getHostEntityID : hostentityid ();
	external native (""ProtoGeometryHost"") def DC_Point_update : int ( id : hostentityid, hostid : int, x : double, y : double, z : double);
	hostid1 = getProtoGeometryLibrary();
	id1 = DC_getHostEntityID();
	p1 = DC_Point_update(id1, hostid1, 1, 10, 10);
	id2 = DC_getHostEntityID();
	p2 = DC_Point_update(id2, hostid1, 2, 10, 10);
	id3 = DC_getHostEntityID();
	p3 = DC_Point_update(id3, hostid1, 3, 10, 10);
	id4 = DC_getHostEntityID();
	p4 = DC_Point_update(id4, hostid1, 4, 10, 10);
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch50_TestAttributeOnClass()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class TestAttribute
{
	constructor TestAttribute()
	{}
}
class VisibilityAttribute
{
	x : var;
	constructor VisibilityAttribute(_x : var)
	{
		x = _x;
	}
}
[Test, Visibility(1)]
class Point
{
	
[Test]
	public x : var;
	[Visibility(2)]
	public y : var;
	
	[Test, Visibility(1)]
	constructor Point()
	{
		x = 10; y = 10;
	}
	
[Test]
	public static def foo : int()
	{
		return = 10;
	}
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch51_TestAttributeOnGlobalFunction()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class TestAttribute
{
	constructor TestAttribute()
	{}
}
class VisibilityAttribute
{
	x : var;
	constructor VisibilityAttribute(_x : var)
	{
		x = _x;
	}
}
[Test, Visibility(1)]
def foo : int()
{
	return = 10;
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch52_TestAttributeOnLanguageBlock()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class TestAttribute
{
	constructor TestAttribute()
	{}
}
class VisibilityAttribute
{
	x : var;
	constructor VisibilityAttribute(_x : var)
	{
		x = _x;
	}
}
[Imperative, version=""###"", Visibility(11), fingerprint=""FS54"", Test] 
{
	a = 19;
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch53_TestAttributeWithLanguageBlockAndArrayExpression()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class TestAttribute
{
	constructor TestAttribute()
	{}
}
class VisibilityAttribute
{
	x : var;
	constructor VisibilityAttribute(_x : var)
	{
		x = _x;
	}
}
def foo : int[]..[](p : var[]..[])
{
	a = { 1, { 2, 3 }, 4 };
	return = a[1];
}
[Associative, version=""###"", Visibility(11), fingerprint=""FS54"", Test] 
{
	a = {1, 2, 3};
	b = a[1];
	c = a[0];
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch54_TestBasicArrayMethods()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"a = { 1, 2, { 3, 4, 5, { 6, 7, { 8, 9, { { 11 } } } } }, { 12, 13 } };
c = Count(a);
r = Rank(a);
a2 = Flatten(a);";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch55_TestStringConcatenation01()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"s1='a';
s2=""bcd"";
s3=s1+s2;
s4=""abc"";
s5='d';
s6=s4+s5;
s7=""ab"";
s8=""cd"";
s9=s7+s8;";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch57_TestStringTypeConversion()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"def foo:bool(x:bool)
{
    return=x;
}
r1 = foo('h');
r2 = 'h' && true;
r3 = 'h' + 1;";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch58_import001()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"def add : int(i : int, j : int)
{
	return = i + j;
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch59_import002()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"def mul : int(i : int, j : int)
{
	return = i * j;
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch60_ImportTest001()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"import(""import001.ds"");
import(""import002.ds"");
a = 10;
b = 20;
c = add(a, b);
d = mul(a, b);";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch61_arrayTesting()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"external (""ffi_library"") def add_to_array : double[] (arr1 : double[], addend : double);
arr = {1.0, 2, 5, 8};
s = add_to_array(arr, 5);
s2 = add_to_array(arr, 5.0);
external (""ffi_library"") def mul_to_array : double[] (arr1 : double[], multiplier : double);
p = mul_to_array(arr, 2);
p2 = mul_to_array(arr, 2.0);
external (""ffi_library"") def array_square : double[] (arr : double[]);
sq = array_square(arr); // if pass a single number, assertion failed...........
sq2 = array_square({2.0,4,5});
external (""ffi_library"") def array_sqrt: double[] (arr : double[]);
sqrt = array_sqrt(arr);
sqrt2 = array_sqrt({2.0,4,5});
external (""ffi_library"") def array_pow : double[](arr : double[], power : double);
pow = array_pow(arr, 4);
pow2 = array_pow(arr, 4.0);
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch62_ffibasic()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"
[Associative]
{
	external (""factorial"") def factorial : int (num4 : int);
	external (""factorial"") def factorial2 : int (num5 : int, num6 : double);	
	a = factorial(4);
	c = factorial2(5, 2.0);
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch63_ffifunc()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"
[Associative]
{
    //what about same module name but diff tyep
    //e.g. a.dll and a.py? namespacing about dlls etc
    //what about same name and type but diff path?
	//def factorial (a : int)
    //{
    //    return = 2;
    //}
    //try overload
    //def factorial(b : int) = 11;
	
	external (""factorial"") def factorial : int (num4 : int);
	//external (""factorial"") def factorial : double (num3 : int);
	external (""factorial"") def factorial2 : int (num5 : int, num6 : double);
	
	//language defect : //""num"" functionindex conflict	
	//external (""factorial"") def factorial2(num1 : int, num2 : double);
	a = factorial(4);
	c = factorial2(5, 2.0);
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch64_ffisimplearray()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"[Associative]
{
	external (""factorial"") def arrayFactorialSum : int (myArray : int[], myArraySize : int);
	a = {1,2,3};
	dummy = 3;
	b = arrayFactorialSum(a, dummy); //todo: get length of the array when the method is available
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch65_file_1467252()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"
WCS = CoordinateSystem.Identity();";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch66_file_1467252_master()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @" import(""ProtoGeometry.dll"");
 import(""file_1467252.ds"");
 WCS = CoordinateSystem.Identity();
 newCS = WCS.Translate(Vector.ByCoordinates(0, 1, 0));";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch67_T025_disposeinimperative_1464937()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class point{
    a;
constructor point(x:double)
{
a = 1;
}
}
class polygon{
constructor polygon(pt:point[])
{
poly= pt;
}
}
pt0=point.point(1.0);
pt1=point.point(2.0);
pt2=point.point(3.0);
pt3=point.point(4.0);
pointGroup = {pt0,pt1};
z=[Imperative]
{
def buildarray(test:int[],collect:point[])
{
b= { } ;
j=0;
for (k in test)
{
b[j] = collect[k];
j=j+1;
}
return =b;
}
controlPoly={};
c={0,1};
a=buildarray(c,pointGroup);
c={pt0,pt1};
controlPoly = polygon.polygon(a);
controlPoly2 = polygon.polygon(c);
return=a;
}
z1 = z.a;";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch68_testHostAccess()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"[Associative]
{
	external native (""ProtoHostAccess"") def testProtoHostAccess : int ();
	x = testProtoHostAccess();
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch69_testHostAccessGetID()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"[Associative]
{
	external native (""ProtoHostAccess"") def DC_getHostEntityID : hostentityid ();
	xxx = DC_getHostEntityID();
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch70_TestHostentityType()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"[Associative]
{
	def factorial_local : hostentityid()
    {
        return = 11;
    }	
	x = factorial_local();
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch71_TestProtoGeometryHost()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"[Associative]
{
	external native (""ProtoGeometryHost"") def DC_GeometryHost_Test : int (xid1 : hostentityid, xx1 : double, yy1 : double, zz1 : double);
	xxx1 = DC_GeometryHost_Test(1, 1.5, 1.5, 1.5);
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch72_TestProtoGeometryHostUpdate()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"[Associative]
{
    external (""ProtoAcDcGeometry"") def getProtoGeometryLibrary : int ();
    external native (""ProtoHostAccess"") def DC_getHostEntityID : hostentityid ();
    external native (""ProtoGeometryHost"") def DC_Point_update : int (xid1 : hostentityid, xx1 : double, yy1 : double, zz1 : double);
	
    hostid1 = getProtoGeometryLibrary();
    id1 = DC_getHostEntityID();
    xxx1 = DC_Point_update(1, 1.5, 1.5, 1.5);
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch73_fusionscript()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"
[Imperative] // Imperative rules enforced
{
    // An imperative function
    // Clamps 'i' between min and max ranges
    defproc int clampRange(int i, int rangeMin, int rangeMax)
    {
        int clampedValue;
	    if(i < rangeMin) 
        {
            clampedValue = rangeMin;
        }
        elseif( i > rangeMax ) 
        {
           clampedValue = rangeMax; 
        } 
        else 
        {
            clampedValue = i;
        }
        return = clampedValue;
    }
    // Variables must be declared before usage
    // Immediate instantiation is not yet supported i.e. int i = 2;
	int xCoord;
	int yCoord;
	int zCoord;
	xCoord = clampRange(1, 10, 100);
	yCoord = clampRange(101, 10, 100);
	zCoord = clampRange(55, 10, 100);
    
    int index;
    index = 0;
    int max;
    max = 5
    int result;
    result = 0;
    /*
    int vector[5];
    vector[0] = 10;
    vector[1] = 20;
    vector[2] = 30;
    vector[3] = 40;
    vector[4] = 50;
    */
    // A loop construct in the for of a while loop
    while( index < max )
	{
        index = index + 1;
		//result = vector[index];
	}
    // Enter an associative block
	[Associative]
	{
        // Associative rules enforced
        // Attempting to use imperative construct (if/else/while) will result in a compile error
        assocVar = 0;
        /*
        if( assocVar ) {
            assocVar = 1
        }
        */
        // These variables need no declaration they are auto allocated if the lhs of the expression does not exist in the symbol list
        // Do some random calculation
		x = 10;
		y = (x + assocVar * (4 - x)) * x + 1;
		z = x + y * zCoord;
	} 
}
/*
// This block illustrates multi-language nesting
// Execution flows from top to bottom
[Associative]
{
	a = 80;
	b = 160;
	
	[Imperative] 
	{
		int length;
		int width;
		length = 320;
		width = 640;
		if(length < width)
		{
			length = 1; 		
		}
		[Associative]
		{
			someValue = 1010;
			anotherValue = someValue + 2;
			[Imperative] 
			{
				int f;
				int g;
				f = 3200;
				g = 6400;
				if( f < g )
				{
					g = 1000000; 		
				}
				[Associative]
				{
					x = 100;
					y = 200;
					z = x + y * 2;
				}
				g = 12345;
			} 
		}
	} 
	b = b + 2;
} 
*/
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch74_fusionscriptarrays()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"
[Imperative] 
{
    defproc int arrayMethod()
    {
        int x = 0;
        int y = 0;
        int xSize = 2;
        int ySize = 3;
        int result = 0;
        // Populate a multi-dimensional array
        int list2d[2][3];
        list2d[0][0] = 10;
        list2d[0][1] = 20;
        list2d[0][2] = 30;
        list2d[1][0] = 40;
        list2d[1][1] = 50;
        list2d[1][2] = 60;
        // do somthing with those values
        while( x < xSize )
        {
            while( y < ySize )
            {
                result = result + list2d[x][y];
                y = y + 1;
            }
            x = x + 1;
            y = 0;
        }
        result = result * 10;
        return = result;
    } 
    int index = 0;
    int size = 8;
    int result = 0;
    int vector[8];
    vector[0] = 10;
    vector[1] = 20;
    vector[2] = 30;
    vector[3] = 40;
    vector[4] = vector[0];
    vector[5] = vector[1];
    vector[6] = vector[2];
    vector[7] = vector[3];
    // A loop construct in the for of a while loop
    while( index < size )
	{
		result = result + vector[index];
        index = index + 1;
	}
    
    int arrayresult;
    arrayresult = arrayMethod();
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch75_multilang()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"
[Associative]
{
	a = 100;
	b = 200;
	[Imperative] 
	{
		n = 300;
		n = n + 2;
	} 
	c = b + b;
}
[Imperative]
{
	n = 32;
	b = 64;
	if( n < b )
	{
		n = 1; 		
	}
	n = n + b;
} 
[Associative]
{
	a = 80;
	b = 160;
	
	[Imperative] 
	{
		n = 320;
		z = 640;
		if( n < z )
		{
			n = 1; 		
		}
		[Associative]
		{
			x = 10;
			y = 20;
			z = x + y * 2;
		}
		n = 20000;
	} 
	c = b + 2;
} 
[Associative]
{
	a = 80;
	b = 160;
	
	[Imperative] 
	{
		n = 320;
		z = 640;
		if( n < z )
		{
			n = 1; 		
		}
		[Associative]
		{
			xx = 1010;
			yy = xx + 2;
			[Imperative] 
			{
				n = 3200;
				z = 6400;
				if( n < z )
				{
					n = 1000000; 		
				}
				[Associative]
				{
					x = 1111;
					y = 2222;
					z = x + y * 2;
				}
				n = 12345;
			} 
		}
		n = n + 1;
	} 
	c = b + 2;
} 
/*
[Associative]
{
	int n;
    x = v;
} 
[Imperative]
{
	int n;
    x = v;
} 
*/
/*
// TODO Jun: Debug this - double update issue
[Associative]
{
	a = 80;
	b = 160;
	
	[Imperative] 
	{
		n = 320;
		z = 640;
		if( n < z )
		{
			n = 1; 		
		}
		[Associative]
		{
			x = 10;
			y = 20;
			z = x + y * 2;
		}	
		
		[Associative]
		{
			xx = 1000;
			yy = 2000;
			zz = xx + yy * 2000;
		}
		n = 20000;
	} 
	c = b + 2;
} 
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch76_simplepointer()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"[Imperative]
{
    // declare a ds pointer 
    __heap int px = 1234321;
    int size = 16;
    int a[size];
    a[5] = 20000;
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch77_array()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"
int x = 0;
int y = 0;
int xSize = 2;
int ySize = 3;
int result = 0;
int somelist[] = {11,102,1003,1004};
int somelist2[] = {x, y, xSize * 4, 1004 * ySize};
// Populate a multi-dimensional array
int list2d[2][3];
list2d[0][0] = 10;
list2d[0][1] = 20;
list2d[0][2] = 30;
list2d[1][0] = 40;
list2d[1][1] = 50;
list2d[1][2] = 60;
// do somthing with those values
while( x < xSize )
{
    while( y < ySize )
    {
        result = result + list2d[x][y];
        y = y + 1;
    }
    x = x + 1;
    y = 0;
}
result = result * 10;
// Populate an array of integers and compute its average
// Populate an array of ints
int list[5];
list[0] = 10;
list[1] = 20;
list[2] = 30;
list[3] = 40;
list[4] = 50;
// Declare counters and result storage
int n = 0;
int size = 5;
result = 0;
// Summation of elements in 'list' and storing them in 'result'
while( n < size )
{
    result = result + list[n];
    n = n + 1;
}
// Get the average
result = result / size;
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch78_branching()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"
defproc void branchw()
{
    int y;
	y = 0;
	while( y < 10 )
	{
		y = y + 2;	
	}
}
defproc int branch1()
{
	int x;
    int y;
	x = 2;
	y = 20;
	if( x > y )
	{
		y = 2;	
	}
    return = y;
}
defproc void branch2()
{
	int x;
    int y;
	x = 1600;
	y = 201;
	if( x > 2 )
	{
		y = 2;	
        if( y > 200 )
	    {
		    y = 200;
	    }
	}
}
defproc void branch3()
{
	int x;
    int y;
	x = 64;
	y = 20;
	if( x == 4 )
	{
		y = 2;	
        if( y > 200 )
	    {
		    y = 200;
	    }
	}
    elseif( x > 20 )
    {
        x = 20000;
    }
}
defproc void branch4()
{
	int x;
    int y;
	x = 2;
	if( x > 2 )
	{
		y = 2;
	}
    else
    {
        x = 100;
    }
    y = 2000;
    if( x > 2 )
	{
		y = 2;
	}
}
defproc void branch5( int p )
{
	int x;
    int a;
    a = 4000;
	x = a;
	if( x > p )
	{
		x = 0;
	}
    elseif( x > a )
    {
        x = p;
    }
    else
    {
        x = 20;
    }
    x = a;
}
defproc void branch6()
{
	int x;
    int y;
	x = 100;
	y = 200;
	if( y > 0 )
	{
		y = 0;
	}
    elseif( y > x )
    {
        y = 10;
    }
    elseif( y > 20 )
    {
        y = 20;
    }
    else
    {
        y = 3000;
        if( x > y )
	    {
		    y = 2000;
	    }
        else
        {
            x = 2000;
        }
    }
    y = 40;
}
defproc void branch7(int p)
{
	int x;
    int y;
	x = 100;
	y = 200;
	if( y > 0 )
	{
		y = 0;
	}
    elseif( y > x )
    {
        if( x > y )
	    {
		    y = 2000;
	    }
        elseif( y > p )
        {
            y = 20;
            if( p == y * x )
	        {
		        y = 2000 * 3 / p + 2;
	        }
        }
    }
    elseif( y > 20 )
    {
        y = 20;
    }
    else
    {
        y = 3000;
        if( x > y )
	    {
		    y = 2000;
	    }
        else
        {
            x = 2000;
        }
    }
    y = 40;
}
defproc void branch55( int p )
{
	int x;
    int a;
    a = 16;
	x = a;
	if( x > 64 )
	{
		x = 64;
	}
	
    elseif( x > 32 )
    {
        x = 32;
    }
    elseif( x > 16 )
    {
        x = 16;
    }
    else
    {
        x = 12345;
    }
    a = x + p;
}
int n;
n = branch1();
branch2();
branch3();
branch4();
branch5(100);
branch6();
branch7(10);
branch55(100);
int count;
count = 10;
while(count > 2)
{
    count = count - 1;
    branchw();
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch79_expr()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"
defproc int sum( int x, int y )
{
	int s;
	s = x + y;
	return s;
}
////////////////////////////////////////
defproc void test3()
{
	int x;
	int y;
	x = 10;
	y = 20;
	sum(x,y);
}
/*
////////////////////////////////////////
defproc void f() 
{
	int x;
	x = 20;
}
////////////////////////////////////////
defproc void print( int p )
{
	p = 0;
}
////////////////////////////////////////
defproc int sum( int x, int y )
{
	int s;
	s = x + y;
	return s;
}
////////////////////////////////////////
defproc void test1()
{
	f(); 
}
////////////////////////////////////////
defproc void test2()
{
	int s;
	print(s);
}
////////////////////////////////////////
defproc void test3()
{
	int x;
	int y;
	x = 10;
	y = 20;
	sum(x,y);
}
////////////////////////////////////////
defproc void test4()
{
	int x;
	int y;
	x = 10;
	y = sum(1,x);
}
////////////////////////////////////////
defproc void test5()
{
	int x;
	int y;
	int z;
	x = 10;
	y = 20;
	z = x + sum(1,y); 
} 
/*
defproc int BranchReturn1( int p )
{
	int x;
    x = p;
    int y;
    y = 0;
	if( p > x )
	{
		y = 1 * 2000;
        return y;
		y = x; 
	}
    x = 2 * p / x;
    return x;
}
defproc void BranchReturn2( int p )
{
	int x;
    int y;
    x = p;
    y = 2 + x * 10;
	branch5
}
defproc int branch1()
{
	int x;
    int y;
	x = 2;
	y = 20;
	if( x > y )
	{
		y = 2;	
	}
    return y;
}
defproc void branch2()
{
	int x;
    int y;
	x = 2;
	y = 20;
	if( x > 2 )
	{
		y = 2;	
        if( y > 200 )
	    {
		    y = 200;
	    }
	}
}
defproc void branch3()
{
	int x;
    int y;
	x = 2;
	y = 20;
	if( x > 2 )
	{
		y = 2;	
        if( y > 200 )
	    {
		    y = 200;
	    }
	}
    elseif( x > 20 )
    {
        x = 20000;
    }
}
defproc void branch4()
{
	int x;
    int y;
	x = 2;
	if( x > 2 )
	{
		y = 2;
	}
    else
    {
        x = 100;
    }
    y = 2000;
    if( x > 2 )
	{
		y = 2;
	}
}
defproc void branch5( int p )
{
	int x;
    int a;
    a = 4000;
	x = a;
	if( x > p )
	{
		x = 0;
	}
    elseif( x > a )
    {
        x = p;
    }
    elseif( x > a )
    {
        x = 20;
    }
    x = a;
}
defproc void branch6()
{
	int x;
    int y;
	x = 100;
	y = 200;
	if( y > 0 )
	{
		y = 0;
	}
    elseif( y > x )
    {
        y = 10;
    }
    elseif( y > 20 )
    {
        y = 20;
    }
    else
    {
        y = 3000;
        if( x > y )
	    {
		    y = 2000;
	    }
        else
        {
            x = 2000;
        }
    }
    y = 40;
}
defproc void branch7(int p)
{
	int x;
    int y;
	x = 100;
	y = 200;
	if( y > 0 )
	{
		y = 0;
	}
    elseif( y > x )
    {
        if( x > y )
	    {
		    y = 2000;
	    }
        elseif( y > p )
        {
            y = 20;
            if( p == y * x )
	        {
		        y = 2000 * 3 / p + 2;
	        }
        }
    }
    elseif( y > 20 )
    {
        y = 20;
    }
    else
    {
        y = 3000;
        if( x > y )
	    {
		    y = 2000;
	    }
        else
        {
            x = 2000;
        }
    }
    y = 40;
}
*/
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch80_imperative()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"
defproc int sum( int x, int y )
{
	int s;
	s = x + y;
	return = s;
}
defproc int f( int p )
{
	int s;
	s = p + 200;
	return = s;
}
int p;
int n;
int x;
x = 2000;
p = sum(x, f(x));
p = 10 + n;
p = f(10);
p = 1 + 10;
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch81_pointer()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"
// declare a ds pointer 
__heap int px = 1234321;
int size = 16;
int a[size];
a[5] = 20000;
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch82_relational()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"
int n;
n = 100 > 10;  	// 1
n = 100 < 10;	// 0
n = 100 == 10;	// 0
n = 100 != 10;	// 1
n = 100 >= 10;	// 1
n = 100 <= 10;	// 0
int a;
int b;
int i;
a = 1000;
b = 1000;
i = a > b;  	// 0
i = a < b;		// 0
i = a == b;		// 1
i = a != b;		// 0
i = a >= b;		// 1
i = a <= b;		// 1
int j;
j = n > 100 + 1;
j = n < 100 + 1;
j = n == 100 + 1;
j = n != 100 + 1;
j = n >= 100 + 1;
j = n <= 100 + 1;
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch83_TestAttributeOnGlobalFunction()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class TestAttribute
{
	constructor TestAttribute()
	{}
}
class VisibilityAttribute
{
	x : var;
	constructor VisibilityAttribute(_x : var)
	{
		x = _x;
	}
}
[Imperative]
{
	[Test, Visibility(1)]
	def foo : int()
	{
		return = 10;
	}
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch84_TestAttributeOnLanguageBlock()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class TestAttribute
{
	constructor TestAttribute()
	{}
}
class VisibilityAttribute
{
	x : var;
	constructor VisibilityAttribute(_x : var)
	{
		x = _x;
	}
}
[Imperative]
{
	[Associative, version=""###"", Visibility(10 + 1), fingerprint=""FS54"", Test] 
	{
		a = 19;
	}
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch85_TestAttributeWithLanguageBlockAndArrayExpression()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class TestAttribute
{
	constructor TestAttribute()
	{}
}
class VisibilityAttribute
{
	x : var;
	constructor VisibilityAttribute(_x : var)
	{
		x = _x;
	}
}
[Imperative]
{
	def foo : int[]..[](p : var[]..[])
	{
		a = { 1, { 2, 3 }, 4 };
		return = a[1];
	}
	[Associative, version=""###"", Visibility(10 + 1), fingerprint=""FS54"", Test] 
	{
		a = {1, 2, 3};
		b = a[1];
		c = a[0];
	}
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch86_TestStringConcatenation01()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"s3;s6;s9;
[Imperative]
{
	s1='a';
	s2=""bcd"";
	s3=s1+s2;
	s4=""abc"";
	s5='d';
	s6=s4+s5;
	s7=""ab"";
	s8=""cd"";
	s9=s7+s8;
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch87_TestStringOperations()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"[Imperative]
{
	s = ""ab"";
	r1 = s + 3;
	r2 = s + false;
	r3 = s + null;
	r4 = !s;
	r5 = s == ""ab"";
	r6 = s == s;
	r7 = ""ab"" == ""ab"";
	ns = s;
	ns[0] = 1;
	r8 = ns == {1, 'b'};
	//r9 = """" == """";
	//r10 = ("""" == null);
    r9 = s != ""ab"";
    ss = ""abc"";
    ss[0] = 'x';
    r10 = """" == null;
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch88_TestStringTypeConversion()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"[Imperative]
{
	def foo:bool(x:bool)
	{
	    return=x;
	}
	r1 = foo('h');
	r2 = 'h' && true;
	r3 = 'h' + 1;
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch89_TestTryCatchGetExceptionValue01()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"y = 0;
[Imperative]
{
    try
    {
        throw 1+2;
    }
    catch (e:int)
    {
        y = e;
    }
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch90_TestTryCatchGetExceptionValue02()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"y = 0;
[Imperative]
{
    try
    {
        [Associative]
        {
            [Imperative]
            {
                throw 1+2;
            }
        }
    }
    catch (e:int)
    {
        y = e;
    }
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch91_TestTryCatchGetExceptionValue03()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"y = 0;
[Imperative]
{
    def foo()
    {
        [Associative]
        {
            [Imperative]
            {
                throw 3;
            }
        }
    }
    try
    {
        foo();
    }
    catch (e:int)
    {
        y = e;
    }
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch92_TestTryCatchStackUnwinding01()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"    y0 = 0;
    y1 = 0;
    y2 = 0;
    y3 = 0;
    y4 = 0;
    y5 = 0;
    y6 = 0;
    y7 = 0;
    y8 = 0;
    y9 = 0;
    y10 = 0;
    y11 = 0;
    y12 = 0;
    y13 = 0;
[Imperative]
{
    y1 = 1;
    try
    {
        y2 = 2;
        [Associative]
        {
            [Imperative]
            {
                y3 = 3;
                def foo()
                {
                    try
                    {
                        y4 = 4;
                        throw 3;
                        y5 = 5;
                    }
                    catch (e:bool)
                    {
                        y6 = 6;
                    }
                    y7 = 7;
                }
                y8 = 8;
                try
                {
                    r = foo();
                    y9 = 9;
                }
                catch (e:char)
                {
                    y10 = 10;
                }
                y11 = 11;
            }
        }
    }
    catch (e:double)
    {
        y12 = 12;
    }
    catch (e:int)
    {
        y13 = 13;
    }
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch93_header2()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"z = 200;
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch94_basic_1()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"[Associative]
{
a = 
    {
        2 => a@init;
        +4;
        -3;
        *2;
    }
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch95_T01_BasicGlobalFunction()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"def foo:int(x:int)
{
	return = x;
}
a = foo;
b = foo(3); //b=3;";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch96_T02_GlobalFunctionWithDefaultArg()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"def foo:double(x:int, y:double = 2.0)
{
	return = x + y;
}
a = foo;
b = foo(3); //b=5.0;
c = foo(2, 4.0); //c = 6.0";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch97_T03_GlobalFunctionInAssocBlk()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"a;
b;
c;
[Associative]
{
	def foo:double(x:int, y:double = 2.0)
	{
		return = x + y;
	}
	a = foo;
	b = foo(3); //b=5.0;
	c = foo(2, 4.0); //c = 6.0
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch98_T04_GlobalFunctionInImperBlk()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"a;
b;
c;
[Imperative]
{
	def foo:double(x:int, y:double = 2.0)
	{
		return = x + y;
	}
	a = foo;
	b = foo(3); //b=5.0;
	c = foo(2, 4.0); //c = 6.0
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch99_T05_ClassMemerVarAsFunctionPointer()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class A
{
	x:var;
	constructor A()
	{
		x = foo;
	}
}
def foo:double(x:int, y:double = 2.0)
{
	return = x + y;
}
a = A.A();
b = a.x(3,2.0);	//b=5.0;
c = a.x(2, 4.0);	//c = 6.0";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch100_T05_ClassMemerVarAsFunctionPointerDefaultArg()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class A
{
	x:var;
	constructor A()
	{
		x = foo;
	}
}
def foo:double(x:int, y:double = 2.0)
{
	return = x + y;
}
a = A.A();
b = a.x(3);	//b=5.0;";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch101_T06_ClassMemerVarAsFunctionPointerAssocBlk()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class A
{
	x:var;
	constructor A()
	{
		x = foo;
	}
}
def foo:double(x:int, y:double = 2.0)
{
	return = x + y;
}
a;
b;
c;
[Associative]
{
	a = A.A();
	b = a.x(3,2.0);	//b=5.0;
	c = a.x(2, 4.0);	//c = 6.0
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch102_T07_ClassMemerVarAsFunctionPointerImperBlk()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class A
{
	x:var;
	constructor A()
	{
		x = foo;
	}
}
def foo:double(x:int, y:double = 2.0)
{
	return = x + y;
}
a;
b;
c;
[Imperative]
{
	a = A.A();
	b = a.x(3);	//b=5.0;
	c = a.x(2, 4.0);	//c = 6.0
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch103_T08_FunctionPointerUpdateTest()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"def foo1:int(x:int)
{
	return = x;
}
def foo2:double(x:int, y:double = 2.0)
{
	return = x + y;
}
a = foo1;
b = a(3);
a = foo2;";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch104_T09_NegativeTest_Non_FunctionPointer()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"def foo:int(x:int)
{
	return = x;
}
a = 2;
b = a();";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch105_T10_NegativeTest_UsingFunctionNameAsVarName_Global()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"def foo:int(x:int)
{
	return = x;
}
foo = 3;";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch106_T11_NegativeTest_UsingFunctionNameAsVarName_Global_ImperBlk()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"[Imperative]
{
	def foo:int(x:int)
	{
		return = x;
	}
	foo = 3;
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch107_T12_NegativeTest_UsingGlobalFunctionNameAsMemVarName_Class()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"def foo:int(x:int)
{
	return = x;
}
class A
{
	foo : var;
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch108_T13_NegativeTest_UsingMemFunctionNameAsMemVarName_Class()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"def foo:int(x:int)
{
	return = x;
}
class A
{
	memFoo : var;
	def memFoo()
	{
		return = 2;
	}
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch109_T14_NegativeTest_UsingFunctionNameInNonAssignBinaryExpr()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"def foo:int(x:int)
{
	return = x;
}
a = foo + 2;";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch110_T15_NegativeTest_UsingFunctionNameInNonAssignBinaryExpr_Global_ImperBlk()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"[Imperative]
{
	def foo:int(x:int)
	{
		return = x;
	}
	a = foo + 2;
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch111_T16_NegativeTest_UsingMemFunctionAsFunctionPtr()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"def foo:int(x:int)
{
	return = x;
}
class A
{
	x : function; 
	y: function;
	constructor A()
	{
		x = foo;
		y = memFoo;
	}
	def memFoo(xx:int)
	{
		return = xx;
	}
}
a = A.A();
x = a.x(2);
y = a.y(2);";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch112_T17_PassFunctionPointerAsArg()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"def foo:int(x:int)
{
	return = x;
}
def foo1:int(f:function, x:int)
{
	return = f(x);
}
a = foo1(foo, 2);
b = foo;
c = foo1(b, 3);";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch113_T18_FunctionPointerAsReturnVal()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"def foo:int(x:int)
{
	return = x;
}
def foo1:int(f : function, x:int)
{
	return = f(x);
}
def foo2:function()
{
	return = foo;
}
a = foo2();
b = a(2);
c = foo1(a, 3);";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch114_T19_NegativeTest_PassingFunctionPtrAsArg_CSFFI()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"import (""ProtoGeometry.dll"");
def foo : CoordinateSystem()
{
	return = CoordinateSystem.Identity();
}
a = Point.ByCartesianCoordinates(foo, 1.0, 2.0, 3.0);";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch115_T20_FunctionPtrUpdateOnMemVar_1()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"def foo1:int(x:int)
{
	return = x;
}
class A
{
	x:function;
	constructor A(xx:function)
	{
		x = xx;
	}
}
a = A.A(foo1);
b = a.x(3);    //b = 3";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch116_T21_FunctionPtrUpdateOnMemVar_2()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"def foo1:int(x:int)
{
	return = x;
}
def foo2:double(x:int, y:double = 2.0)
{
	return = x + y;
}
class A
{
	x:var;
}
a = A.A();
a.x = foo1;
b = a.x(2); //b = 3;
a.x = foo2; //b = 5.0";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch117_DisposeVerify()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"// GC TEST CASE
class DisposeVerify
{
	public static x : int;
}
class A
{
    public x : int;
    constructor A()
    {
        this.x = 10;
    }
	public def _Dispose : int()
    {
        DisposeVerify.x = DisposeVerify.x + 1;
		return = 10;
    }
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch118_T01_TestGCArray()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"import(""DisposeVerify.ds"");
v1;
v2;
v3;
[Imperative]
{
DisposeVerify.x = 1;
arr = { A.A(), A.A(), A.A() };
arr = 3;
v1 = DisposeVerify.x; // 4
a1 = A.A();
arr = { a1, A.A() };
arr = 3;
v2 = DisposeVerify.x; // 5
def foo : int(a : A[])
{
    return = 10;
}
a2 = A.A();
a = foo( { a1, a2 });
a2 = A.A();
v3 = DisposeVerify.x; // 6
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(importpath, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch119_T02_TestGCEndofIfBlk()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"import(""DisposeVerify.ds"");
DisposeVerify.x = 1;
a1 = A.A();
[Imperative]
{
    m = 10;
    if (m > 10)
        a2 = A.A();
    else
        a3 = A.A();
    a4 = A.A();
}
v = DisposeVerify.x; // 3";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(importpath, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch120_T03_TestGCEndofLangBlk()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"import(""DisposeVerify.ds"");
DisposeVerify.x = 1;
a1 = A.A();
v1;
[Imperative]
{
    a2 = A.A();
    [Associative]
    {
        a3 = a2;
        a4 = A.A();
    }
	a5 = a1;
	v1 = DisposeVerify.x; // 2
}
v2 = DisposeVerify.x; // 3";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(importpath, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch121_T04_TestGCReturnFromLangBlk()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"import(""DisposeVerify.ds"");
DisposeVerify.x = 1;
v1;
[Imperative]
{
	// %tempLangBlk = 
    [Associative]
    {
        a1 = A.A();
        return = a1; // a1 is not gced here because it is been returned
    }
	v1 = DisposeVerify.x; // 1
	// %tempLangBlk, same value as a1, is gcced here, this is also to test after assign the return value from the language 
	// block, the ref count of that value is still 1
}
v2 = DisposeVerify.x; // 2";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(importpath, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch122_T05_TestGCReturnFromFunction()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"import(""DisposeVerify.ds"");
DisposeVerify.x = 1;
v1;
v2;
def foo : A()
{
	arr = { A.A(), A.A(), A.A() };
	return = arr[1]; // only the second element in arr is not gced, ref count of arr[1] is incremented
}
[Imperative]
{
  
m = foo();
v1 = DisposeVerify.x; // 3
m = 10;
// test after assign the return value from foo, the ref count of that value is 1
v2 = DisposeVerify.x; // 4
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(importpath, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch123_T06_TestGCEndofWhileBlk()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"import(""DisposeVerify.ds"");
v1;
v2;
v3;
[Imperative]
{
  
DisposeVerify.x = 1;
arr = { A.A(), A.A(), A.A() };
[Associative]
{
    [Imperative]
    {
        a = 3;
        while (a > 0)
        {
            mm = A.A();
            a = a - 1;
        }
        v1 = DisposeVerify.x; // 3
    }
}
v2 = DisposeVerify.x; // 4
arr = null;
v3 = DisposeVerify.x; // 7
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(importpath, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch124_T07_TestGCEndofForBlk()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"import(""DisposeVerify.ds"");
v1;
v2;
v3;
[Imperative]
{
  
DisposeVerify.x = 1;
arr = { A.A(), A.A(), A.A() };
[Associative]
{
    [Imperative]
    {
        for(i in arr)
        {
            mm = i;
            mm2 = A.A();
        }
        v1 = DisposeVerify.x; // 3
    }
}
v2 = DisposeVerify.x; // 4
arr = null;
v3 = DisposeVerify.x; // 7
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(importpath, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch125_T08_TestGCArray02()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"import(""DisposeVerify.ds"");
v1;
v2;
v3;
v4;
v5;
v6;
v7;
[Imperative]
{
  
DisposeVerify.x = 1;
arr = { A.A(), A.A(), A.A() };
b = arr;
b = null;
v1 = DisposeVerify.x; // 1
arr = null;
v2 = DisposeVerify.x; // 4
a1 = A.A();
a2 = A.A();
a3 = A.A();
arr2 = { a1, a2, a3 };
b2 = arr2;
b2 = null;
v3 = DisposeVerify.x; // 4
arr2 = null; 
v4 = DisposeVerify.x; // 4
a1 = null; 
v5 = DisposeVerify.x; // 5
a2 = null;
v6 = DisposeVerify.x; // 6
a3 = null; 
v7 = DisposeVerify.x; // 7
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(importpath, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch126_T09_TestGCPassingArguments()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"import(""DisposeVerify.ds"");
DisposeVerify.x = 1;
def foo : int(p : A[])
{
	return = 10;
}
def foo2 : int(p : A)
{
	return = 10;
}
a1 = A.A();
a2 = { A.A(), A.A(), A.A() };
x = foo2(a1);
y = foo(a2);
v1 = DisposeVerify.x; // 1
v2 = DisposeVerify.x; // 1
a1 = null;
v3 = DisposeVerify.x; // 2
a2 = null;
v4 = DisposeVerify.x; // 5
b = foo2(A.A());
v5 = DisposeVerify.x; // 6
c = foo( { A.A(), A.A(), A.A() } );
v6 = DisposeVerify.x; // 9";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(importpath, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch127_T10_TestGCReturnArguments()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"import(""DisposeVerify.ds"");
DisposeVerify.x = 1;
def foo : A(p : A[])
{
	return = p[0];
}
v1;
v2;
[Imperative]
{
  
m = foo( { A.A(), A.A(), A.A() } );
v1 = DisposeVerify.x; // 3
m = null; 
v2 = DisposeVerify.x; // 4
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(importpath, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch128_T11_TestGCLangBlkInFunction()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"import(""DisposeVerify.ds"");
def foo : A(a : A)
{
	aaa = A.A();
	[Imperative]
	{
		aaaa = aaa;
		c = a;
	}
	return = aaa;
}
DisposeVerify.x = 1;
aa = A.A();
bb = foo(aa);
v1 = DisposeVerify.x; // 2
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(importpath, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch129_T12_TestGCIfElseInFunction()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"import(""DisposeVerify.ds"");
v1;
[Imperative]
{
	def foo : int(a : A)
	{
		a1 = A.A();
		if (1 == 1)
		{
			a2 = A.A();
		}
		
		return = 10;
	}
	DisposeVerify.x = 1;
	aaaa = [Associative]
	{
		aaaaaaa = A.A();
		return = A.A();
	}
	if (1 == 1)
		aaaaa = A.A();
	aa = A.A();
	cc = foo(aa);
	v1 = DisposeVerify.x;
}
v2 = DisposeVerify.x; // 4";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(importpath, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch130_T13_GCTestComplexCase()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"import(""DisposeVerify.ds"");
def flatten(arr : A[][])
{
	solids = {};
	i = 0;
	[Imperative]
	{
		for(obj in arr)
		{
			for(solid in obj)
			{
				solids[i] = solid;
				i = i + 1;
			}
		}
	}
	return = solids;
}
DisposeVerify.x = 1;
arrr = { { A.A(), A.A(), A.A() }, { A.A(), A.A(), A.A() }, { A.A(), A.A(), A.A() } };
arrr2 = flatten(arrr);
v1 = DisposeVerify.x; // 1
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(importpath, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch131_T001_Language_specifier_invalid_1467065_1()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"[associative]
{    a= 1;
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch132_T001_Language_specifier_invalid_1467065_2()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"[imperative]
{    a= 1;
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch133_T02_SampleTestUsingCodeFromExternalFile()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"variable;
[Associative]
{
    variable = 5;
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch134_T033_Wrong_Spelling_Of_Language_Block()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"[associative]
{
    a= 1;
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch135_T03_TestAssignmentToUndefinedVariables_negative()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"a;
[Associative]
{
    a = b;
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch136_T04_TestAssignmentStmtInExpression_negative()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"[Associative]
{
    b = if (2==2) { a = 0; }
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch137_T05_TestRepeatedAssignment()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"a;
b;
[Associative]
{
    b = a = 2;
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch138_T05_TestRepeatedAssignment_negative()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"[Associative]
{
    b = a = 2;
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch139_T06_TestInUnnamedBlock_negative()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"{
    b = 2;
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch140_T07_TestOutsideBlock()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"b = 2;
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch141_T08_TestCyclicReference()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"a;
b;
[Associative]
{
	a = 2;
        b = a *3;
        a = 6.5;
        a = b / 3; 
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch142_T09_TestInNestedBlock()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"a;
b;
f;
g1;
g3;
d;
c;
e;
[Associative]
{
	a = 4;
	b = a + 2;
	[Imperative]
	{
		b = 0;
		c = 0;
		if ( a == 4 )
		{
			b = 4;
		}			
		else
		{
			c = 5;
		}
		d = b;
		e = c;	
                g2 = g1;	
	}
	f = a * 2;
        g1 = 3;
        g3 = g2;
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch143_T10_TestInFunctionScope()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"test;
[Associative]
{
	 def add:double( n1:int, n2:double )
	 {
		  
		  return = n1 + n2;
	 }
	 test = add(2,2.5);
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch144_T11_TestInClassScope()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"
                                 class A 
                                 {
                                      
                                      P1:int;
                                      constructor A(p1:int)
                                      {
                                          P1 = p1;
                                      }
          
                                 }
                                 a1 = A.A(2);
                                 b1 = a1.P1;
                            
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch145_T12_TestUsingMathAndLogicalExpr()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"[Associative]
{
  e = 0;
  a = 1 + 2;
  b = 0.1 + 1.9;
  b = a + b;
  c = b - a - 1;
  d = a + b -c;
  if( c < a )
  {
     e = 1;
  }
  else
  {
    e = 2;
  }
  if( c < a || b > d)
  {
     e = 3;
  }
  else
  {
    e = 4;
  }
  if( c < a && b > d)
  {
     e = 3;
  }
  else
  {
    e = 4;
  }
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch146_T13_TestUsingMathAndLogicalExpr()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"a;
f;
[Associative]
{
  a = 3.5;
  b = 1.5;
  c = a + b; 
  d = a - c;
  e = a * d;
  f = a / e; 
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch147_T14_TestUsingMathAndLogicalExpr()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"a;
f;
c1;
c2;
c3;
[Associative]
{
  a = 3;
  b = -4;
  c = a + b; 
  d = a - c;
  e = a * d;
  f = a / e; 
  
  c1 = 1 && 2;
  c2 = 1 && 0;
  c3 = null && true;
  
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch148_T15_TestInRecursiveFunctionScope()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"val;
[Imperative]
{
	
	def fac : int ( n : int )
    {
        if(n == 0 )
        {
			return = 1;
        }
		//return = 2;
		return = n * fac (n-1 );
	}
    val = fac(5);				
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch149_T16_TestInvalidSyntax()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"[Associative]
{
	x = ;
        y = x;
        z == 4;
       			
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch150_T17_TestInvalidSyntax()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"[Associative]
{
	_rt = 3;
       ""dg"" = 4;
       w = 2
       f = 3;
       v = v;
       			
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch151_T18_TestMethodCallInExpr()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"test0;
test1;
test2;
test3;
test4;
test5;
[Associative]
{
	def mul : double ( n1 : int, n2 : int )
    {
      	return = n1 * n2;
    }
    def add : double( n1 : int, n2 : double )
    {
       	return = n1 + n2;
    }
    test0 = add (-1 , 7.5 ) ;
    test1 = add (mul(1,2), 4.5 ) ;  
    test2 = add (mul(1,2.5), 4 ) ; 
    test3 = add (add(1.5,0.5), 4.5 ) ;  
    test4 = add (1+1, 4.5 ) ;
    test5 = add ( add(1,1) + add(1,0.5), 3.0 ) ;
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch152_T19_TestAssignmentToCollection()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"a;
b;
[Associative]
{
	a = {{1,2},3.5};
	c = a[1];
	d = a[0][1];
        a[0][1] = 5;
       	b = a[0][1] + a[1];	
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch153_T20_TestInvalidSyntax()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"a;
b;
[Associative]
{
	a = 2;;;;;
    b = 3;
       			
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch154_T21_TestAssignmentToBool()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"a;
b;
[Associative]
{
	a = true;
    b = false;      			
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch155_T22_TestAssignmentToNegativeNumbers()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"a;
b;
c;
d;
e;
[Associative]
{
	a = -1;
	b = -111;
	c = -0.1;
	d = -1.99;
	e = 1.99;
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch156_T23_TestUsingMathAndLogicalExpr()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"c1;
c2;
c3;
c4;
[Associative]
{
  a = -3.5;
  b = -4;
  c1 = a + b; 
  c2 = a - b;
  c3 = a * b;
  c4 = a / b; 
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch157_T24_TestUsingMathematicalExpr()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"c1;
c2;
c3;
c4;
[Associative]
{
  a = 3;
  b = 2;
  c1 = a + b; 
  c2 = a - b;
  c3 = a * b;
  c4 = a / b; 
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch158_T25_TestUsingMathematicalExpr()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"c1;
c2;
c3;
c4;
[Associative]
{
  a = 3.0;
  b = 2;
  c1 = a + b; 
  c2 = a - b;
  c3 = a * b;
  c4 = a / b; 
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch159_T26_Defect_1450854()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"[Associative]
{
    a = 1;
    b = 2;
    c = 0;
	
    if (3 == a ^ b )
    {
        c = 3;
    }
    else
    {
        c = 0;
    }	
		
} 
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch160_T26_Negative_TestPropertyAccessOnPrimitive()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"x = 1;
y = x.a;
x1;
y1;
[Imperative]
{
    x1 = 1;
    y1 = x1.a;
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch161_T27_Defect_1450847()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"[Associative]
{
	 a = 2;
	 b = 0;
	 c = -1;
	 d = null;
	 
	 a1 = ~a; 
	 b1 = ~b;
	 c1 = ~c;
	 d1 = ~d;
	 
	 e = -0.5;
	 e1 = ~e1;
	 
	 f1 = ~e + ~a;
 
 }
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch162_T29_Defect_1449887()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"[Associative]
{  
	a = 14;  
	b = 7;  
	c = a & b; 
	d = a|b;
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch163_T30_Defect_1449887_2()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"[Associative]
{   
 def ANDfunc:int(a:int,b:int)
 { 
  
  return = a & b; 
 
 }
 def ORfunc:int(a:int,b:int)
 {
   
   return = a|b;
 
 }
 
 e = 14;
 
 f = 7;
 
 c = ANDfunc(e,f); 
 
 d = ORfunc(e,f);
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch164_T31_Defect_1449877()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"c;
d;
e;
[Associative]
{
	a = -1;
	b = -2;
	c = -3;
	c = a * b * c;
	d = c * b - a;
	e = b + c / a;
	f = a * b + c;
} ";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch165_T32_Defect_1449877_2()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"d;
[Associative]
{
	def func:int(a:int,b:int)
	{
	return = b + a;
	}
	a = 3;
	b = -1;
	d = func(a,b);
} ";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch166_T33_Defect_1450003()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"_a_test;
_b;
_c;
[Associative]
{
	def check:double( _a:double, _b:int )
	{
	_c = _a * _b;
	return = _c;
	} 
	_a_test = check(2.5,5);
	_b = 4.5;
	_c = true;
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch167_T34_Defect_1450727()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"z;
[Associative]
{
	x = -5.5;
	y = -4.2;
 
	z = x + y;
 
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch168_T35_Defect_1450727_2()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"z;
[Associative]
{
	def neg_float:double(x:double,y:double)
	{
	a = x;
	b = y;
	return = a + b;
	}
	z = neg_float(-2.3,-5.8);
 
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch169_T36_Defect_1450555()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"[Associative]
{
	a = true;
	b = 2;
	c = 2;
 
	if( a )
	b = false;
 
	if( b==0 )
	c = 1;
 }";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch170_T37_TestOperationOnNullAndBool()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"b;
[Associative]
{
	a = true;
	b = a + 1;
	c = null + 2;
 }";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch171_T38_Defect_1449928()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"c;
[Associative]
{
 a = 2.3;
 b = -6.9;
 c = a / b;
} 
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch172_T39_Defect_1449704()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"a;
[Associative]
{
 a = b;
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch173_T40_Defect_1450552()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"a;
[Associative]
{
 a = b;
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch174_T41__Defect_1452423()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"d;
[Associative]
{
	b = true;
	c = 4.5;
	d = c * b;
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch175_T42__Defect_1452423_2()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"[Associative]
{
	a = { -2,3,4.5,true };
	x = 1;
	for ( y in a )
	{
		x = x *y;       //incorrect result
    }
	
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch176_T43__Defect_1452423_3()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"[Associative]
{
	a = 0;
	while ( a == false )
	{
		a = 1;
	}
	
	b = a;
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch177_T44__Defect_1452423_4()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"x;
[Associative]
{
	y = true;
	x = 1 + y;
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch178_T45__Defect_1452423_5()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"a;
[Associative]
{
	a = 4 + true;
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch179_T46_TestBooleanOperationOnNull()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"a;
b;
c;
d;
[Imperative]
{
	a = null;
	b = a * 2;
	c = a && 2;	
	d = 0;
	if ( a && 2 == 0)
	{
        d = 1;
	}
	else
	{
	    d = 2;
	}
	
	if( !a )
	{
	    d = d + 2;
	}
	else
	{
	    d = d + 1;
	}
	if( a )
	{
	    d = d + 3;
	}
	
	
	
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch180_T47_TestBooleanOperationOnNull()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"[Associative]
{
	a = false;
        b = 0;
	d = 0;
	if( a == null)
	{
	    d = d + 1;
	}
    if( b == null)
	{
	    d = d + 1;
	}	
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch181_T48_MultipleAssignments()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class A
{
    i : int;
	constructor A ( a : int)
	{
	     t1 = t2 = 2;
		 i = t1 + t2 + a ;
	}
	
	def foo : int ( )
	{
	    t1 = t2 = 2;
		t3 = t1 + t2 + i;
        return  = t3;		
	}
	
}
def foo : int ( a : int )
{
    t1 = t2 = 2;
	return = t1 + t2 + a ;
}
a;
b;
x;
y;
a1;
b1;
[Associative]
{
    
	a = b = 4;
    x = y = foo(1);
	a1 = A.A(1);
	b1 = a1.foo();
	
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch182_T49_Defect_1455264()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"[associative]
{
	a = 1;
	
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch183_T50_Defect_1456713()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"a = 2.3;
b = a * 3;
//Expected : b = 6.9;
//Recieved : b = 6.8999999999999995;
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch184_T51_Using_Special_Characters_In_Identifiers()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"@a = 1;
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch185_T52_Negative_Associative_Syntax()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"[Imperative]
{
	x = 1;
	y = {Associative]
	{
	   return = x + 1;
	}
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch186_T53_Collection_Indexing_On_LHS_Using_Function_Call()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"def foo()
{
    return = 0;
}
x = { 1, 2 };
x[foo()] = 3;
y = x;
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch187_T54_Associative_Nested_deffect_1467063()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"
[Associative]
{        a = 4;
         b = 2;
     [Associative]
	 {
       b = a + 4;
     }
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch188_T55_Associative_assign_If_condition_1467002()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"[Associative]
{
	x = {} == null;
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch189_T001_Associative_Class_Property_Int()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"
	class Point
	{
        _x : int;
        _y : int;
        _z : int;
                                
        constructor Point(xx : int, yy : int, zz : int)
        {
			_x = xx;
            _y = yy;
            _z = zz;
        }
                                
        def get_X : int () 
        {
            return = _x;
        }
    }
	
	newPoint = Point.Point(1,2,3);
	
	xPoint = newPoint._x;
    yPoint = newPoint._y;            
    zPoint = newPoint._z;               
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch190_T002_Associative_Class_Property_Double()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"
	class Point
	{
        _x : double;
        _y : int;
        _z : int;
                                
        constructor Point(xx : double, yy : double, zz : double)
        {
			_x = xx;
            _y = yy;
            _z = zz;
        }
                                
        def get_X : double () 
        {
            return = _x;
        }
    }
	
	newPoint = Point.Point(1.1,2.2,3.3);
	
	xPoint = newPoint._x;
    yPoint = newPoint._y;            
    zPoint = newPoint._z;               
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch191_T003_Associative_Class_Property_Bool()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"
	class Point
	{
        _x : bool;
                                
        constructor Point(xx : bool)
        {
			_x = xx;
        }
                                
    }
	newPoint1 = Point.Point(true);
	newPoint2 = Point.Point(false);
	propPoint1 = newPoint1._x;
    propPoint2 = newPoint2._x;            
              
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch192_T004_Associative_Class_Property_DefaultInitialization()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"
	class TestClass
	{
        _var : var;
		_int : int;
		_double : double;
		_bool : bool;
                                
        constructor TestClass ()
        {
        }       
    }
	newClass = TestClass.TestClass();
	defaultVar = newClass._var;
	defaultInt = newClass._int;
	defaultDouble = newClass._double;
	defaultBool = newClass._bool;
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch193_T005_Associative_Class_Property_Get_InternalClassFunction()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"
	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;	
		}
		
		def Get_Z : double ()
		{
			return = Z;
		}
		
		def Sum : double ()
		{
			return = Get_X() + Get_Y() + Get_Z();
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch194_T006_Associative_Class_Property_UseInsideInternalClassFunction()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"
	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Sum : double ()
		{
			return = X + Y + Z;
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch195_T007_Associative_Class_Property_CallFromFunctionOutsideClass()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"
	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        }
		
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;
		}
		def Get_Z : double()
		{
			return = Z;
		}
    }
	
	def GetPointValue : double (pt : MyPoint)
	{
		return = pt.Get_X() + pt.Get_Y() + pt.Get_Z(); 
	}
	
	myNewPoint = MyPoint.MyPoint (1.0, 10.1, 200.2);
	myPointValue = GetPointValue(myNewPoint);
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch196_T008_Associative_Class_Property_CallFromAnotherExternalClass()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class MyVector
{
	X : double;
	Y : double;
						
	constructor MyVector (x : double, y : double)
	{
		X = x;
		Y = y;
	}
}
class MyPoint
{
	X : double;
	Y : double;
	Z : double;
	
	constructor MyPoint (direction : MyVector, z : double)
	{
		X = direction.X;
		Y = direction.Y;
		Z = z;
	}
}
XYDirection = MyVector.MyVector (1.3,20.5);
myPoint = MyPoint.MyPoint(XYDirection, 300.8);
xPosition = myPoint.X;
yPosition = myPoint.Y;
zPosition = myPoint.Z;
	
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch197_T009_Associative_Class_Property_AssignInDifferentNamedConstructors()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"
	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXY (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.0;
        }
		
		constructor ByXZ (x : double, z : double)
        {
			X = x;
			Y = 0.0;
			Z = z;
        }
		
		constructor ByYZ (y : double, z : double)
        {
			X = 0.0;
			Y = y;
			Z = z;
        }
    }
    pt1 = MyPoint.ByXY (10.1, 200.2);
	pt2 = MyPoint.ByXZ (10.1, 3000.3);	
	pt3 = MyPoint.ByYZ (200.2,3000.3);
	
	xPt1 = pt1.X;
	yPt1 = pt1.Y;	
	zPt1 = pt1.Z;
	
	xPt2 = pt2.X;	
	yPt2 = pt2.Y;	
	zPt2 = pt2.Z;
	
	xPt3 = pt3.X;	
	yPt3 = pt3.Y;	
	zPt3 = pt3.Z;		
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch198_T010_Associative_Class_Constructor_Overloads()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"
	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor Create (x : double, y : double, flag: bool)
        {
			X = x;
			Y = y;
			Z = 3000.1;
        }
		
		constructor Create (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.1;
        }
		
    }
    pt1 = MyPoint.Create (10.0,200.0);
	pt2 = MyPoint.Create (10.0,200.0, true);
	pt3 = MyPoint.Create (10.0,200.0, false);
	zPt1 = pt1.Z;
	zPt2 = pt2.Z;
	zPt3 = pt3.Z;
	
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch199_T011_Associative_Class_Property_ExtendedClass()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXYZ (x : double, y : double, z: double)
        {
			X = x;
			Y = y;
			Z = z;
        }
	
    }
	
	class MyExtendedPoint extends MyPoint
	{
		constructor ByX (x : double)	
		{
			X = x;
			Y = 20.2;
			Z = 300.3;
		}
	}
xPt1;
yPt1;
zPt1;
[Associative]
{
   
    pt1 = MyExtendedPoint.ByX (10.1);
	xPt1 = pt1.X;
	yPt1 = pt1.Y;
	zPt1 = pt1.Z;
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch200_T012_Associative_Class_Property_Var()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"
	class Point
	{
        _x : var;
        _y : var;
        _z : var;
                                
        constructor Create(xx : int, yy : double, zz : bool)
        {
			_x = xx;
            _y = yy;
            _z = zz;
        }
                                
	}
	newPoint = Point.Create(1, 2.0, true);
	
	xPoint = newPoint._x;
    yPoint = newPoint._y;            
    zPoint = newPoint._z;               
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch201_T013_Associative_Class_Property_GetFromAnotherConstructorInSameClass()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"
	class TestPoint
	{
        _x : var;
        _y : var;
        _z : var;
                                
        constructor Create(xx : int, yy : int, zz : int)
        {
			_x = xx; 
            _y = yy;
            _z = zz;
        }
		
		constructor Modify(oldPoint : TestPoint)
		
		{
		
		    _x = oldPoint._x +1;
			_y = oldPoint._y +1;
			_z = oldPoint._z +1;
		
		
		}
                                
	}
	oldPoint = TestPoint.Create(1, 2, 3);
	newPoint = TestPoint.Modify(oldPoint);
	xPoint = newPoint._x;
    yPoint = newPoint._y;            
    zPoint = newPoint._z;               
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch202_T014_Associative_Class_Property_GetUsingMultipleReferencingWithSameName()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"
	class TestPoint
	{
        X : var;
        Y : var;
             
        constructor Create(xx : int, yy : int)
        {
			X = xx; 
            Y = yy;
        }                            
	}
	
	class TestLine
	{
        X : TestPoint;
        Y : TestPoint;
             
        constructor Create(startPt : TestPoint, endPoint : TestPoint)
        {
			X = startPt; 
            Y = endPoint;
        }                            
	}
	
	
	
	pt1 = TestPoint.Create(1, 2);
	pt2 = TestPoint.Create(3, 4);
	line1 = TestLine.Create(pt1,pt2);
    test1 = line1.X.X;
    test2 = line1.X.Y;    
    test3 = line1.Y.X;
    test4 = line1.Y.Y; 
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch203_T015_Associative_Class_Property_SetInExternalFunction()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"	class TestPoint
	{
        X : var;
        Y : var;
             
        constructor Create(xx : int, yy : int)
        {
			X = xx; 
            Y = yy;
        }            
       
	}
	
    def Modify : TestPoint(old : TestPoint)
    {
            old.X = 10;
            old.Y = 20;
            return = old;
    }     
	
	pt1 = TestPoint.Create(1, 2);
	pt2 = Modify(pt1);
	
	testX1 = pt1.X;
	testY1 = pt1.Y;
	
	
	
	
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch204_T016_Associative_Class_Property_SetInClassMethod()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"	class TestPoint
	{
        X : var;
        Y : var;
             
        constructor Create(xx : int, yy : int)
        {
			X = xx; 
            Y = yy;
        }       
    def Modify : int()
    {
            X = 10;
            Y = 20;
			return = 10;
    }    		
       
	}
	pt1 = TestPoint.Create(1, 2);
	pt2 = pt1.Modify();
	
	testX1 = pt1.X;
	testY1 = pt1.Y;
	
	
	
	
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch205_T017_Associative_Class_Property_SetInExternalClassMethod()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"	class TestPoint
	{
        X : var;
        Y : var;
             
        constructor Create(xx : int, yy : int)
        {
			X = xx; 
            Y = yy;
        }       
    def Modify : int()
    {
            X = 10;
            Y = 20;
			return = 10;
    }    		
       
	}
	
	class ExternalClass
	{
	
		constructor Create()
		
		{
			test = 1;
		}
		
		def Modify : int (origin : TestPoint)
		{
		
		origin.X = 10;
		origin.Y = 20;
		return = 5;
		
		}
	}
	pt1 = TestPoint.Create(1, 2);
	dummy = ExternalClass.Create();
	
	result = dummy.Modify(pt1);
	
	testX1 = pt1.X;
	testY1 = pt1.Y;
	
	
	
	
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch206_T018_Associative_Class_Constructor_WithSameNameAndArgument_Negative()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class TestClass
    {
    X: var;
    Y: var;
    constructor Create(x : double, y : double)
        {
        X = x;
        Y = y;
        }
    constructor Create(x : double, y : double)
        {
        X = x;
        Y = y;
        }
    }
    test = TestClass.Create (10.0, 11.0);
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch207_T019_Associative_Class_Constructor_Overloads_WithSameNameAndDifferentArgumentNumber()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class TestClass
    {
    X: var;
    Y: var;
    constructor Create(x : double, y : double)
        {
        X = x + 10;
        Y = y + 10;
        }
    constructor Create(x : double, y : double, z: double)
        {
        X = x + 100;
        Y = y + 100;
        }
    }
    test1 = TestClass.Create (1.0, 2.0);
	test2 = TestClass.Create (1.0, 2.0,3.0);
	
	
	x1 = test1.X;
	y1 = test1.Y;
	x2 = test2.X;
	y2 = test2.Y;
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch208_T020_Associative_Class_Constructor_Overloads_WithSameNameAndDifferentArgumenType()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class TestClass
    {
    X: var;
    Y: var;
    constructor Create(x : double, y : double)
        {
        X = x + 10;
        Y = y + 10;
        }
    constructor Create(x : bool, y : bool)
        {
        X = 100;
        Y = 100;
        }
    }
    test1 = TestClass.Create (1.0, 2.0);
	test2 = TestClass.Create (true, false);
	
	
	x1 = test1.X;
	y1 = test1.Y;
	x2 = test2.X;
	y2 = test2.Y;
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch209_T021_Associative_Class_Constructor_UsingUserDefinedClassAsArgument()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class MyClass
    
{     
    X: var;
    Y: var;
    constructor Create(x : double, y : double)
        {
        X = x + 10;
        Y = y + 10;
        }  
}
class TestClass
    {
    X: var;
    Y: var;
    constructor Create(test : MyClass)
        {
        X = test.X + 10;
        Y = test.Y + 10;
        }
    }
    test1 = MyClass.Create (1.0, 2.0);
	test2 = TestClass.Create (test1);
	
	
	x2 = test2.X;
	y2 = test2.Y;
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch210_T022_Associative_Class_Constructor_AssignUserDefineProperties()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class MyPoint
    
{     
    X: var;
    Y: var;
    constructor Create(x : double, y : double)
        {
        X = x;
        Y = y;
        }  
}
class MyLine
    {
    Start: MyPoint;
    End: MyPoint;
    constructor Create(start : MyPoint, end : MyPoint)
        {
        Start = start;
        End = end;
        }
    }
    p1 = MyPoint.Create(10.2,10.1);
	p2 = MyPoint.Create(-10.2, -10.1);
	l = MyLine.Create(p1,p2);
	
	lsX = l.Start.X;
	lsY = l.Start.Y;
	leX = l.End.X;
	leY = l.End.Y;
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch211_T023_Associative_Class_Constructor_CallingAFunction()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"
def Divide : double (a : double, b : double)
{
	return = (a+b)/2;
}
class MyPoint
    
{     
    X: var;
    Y: var;
    constructor Create(x : double, y : double)
        {
        X = Divide(x+y, x+y);
        Y = Divide(x-y, x-y);
        }  
}
    p = MyPoint.Create(10.2,10.1);
	pX = p.X;
	pY = p.Y;
	
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch212_T024_Associative_Class_Constructor_CallingAnImperativeFunction()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"[Imperative]
{
	def Greater : double (a : double, b : double)
	{
		if (a > b)
			return = a;
		//else
			return = b;
	}
}
class MyPoint    
{     
    X: var;
    Y: var;
    constructor Create(x : double, y : double)
    {
        X = Greater(x,y);
        Y = Greater(x,y);
    }  
}
p1 = MyPoint.Create(20.0,30.0);
p2 = MyPoint.Create(-20.0,-30.0);
p1X = p1.X;
p1Y = p1.Y;
p2X = p2.X;
p2Y = p2.Y;
	
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch213_T025_Associative_Class_Constructor_CallingAnotherConstructor()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class MyPoint
    
{     
    X: var;
    Y: var;
    constructor Create(x : double, y : double)
        {
        X = x;
        Y = y;
        }  
}
class MyLine
    {
    Start: MyPoint;
    End: MyPoint;
    constructor Create(x1: double, y1 : double, x2: double, y2: double)
        {
		p1 = MyPoint.Create(x1,y1);
		p2 = MyPoint.Create(x2,y2);
        Start = p1;
        End = p2;
        }
    }
	l = MyLine.Create(1.0, 2.0, -1.0, -2.0);
	
	lsX = l.Start.X;
	lsY = l.Start.Y;
	leX = l.End.X;
	leY = l.End.Y;
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch214_T026_Associative_Class_Constructor_BaseConstructorAssignProperties()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class MyPoint
    
    {
    
    X: double;
    Y: double;
    
    constructor CreateByXY(x : double, y : double)
        
        
        {
        X = x;
        Y = y;
        
        }   
    }
    
class MyNewPoint extends MyPoint
    {
    
    Z : double;
    
    constructor Create (x: double, y: double, z : double) : base.CreateByXY(x, y)
        {
         Z = z;
        }
    }
   
test = MyNewPoint.Create (10, 20, 30);
x = test.X;
y = test.Y;
z = test.Z;
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch215_T027_Associative_Class_Constructor_BaseConstructorWithSameName()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class MyPoint
    
    {
    
    X: double;
    Y: double;
    
    constructor Create(x : double, y : double)
        
        
        {
        X = x;
        Y = y;
        
        }   
    }
    
class MyNewPoint extends MyPoint
    {
    
    Z : double;
    
    constructor Create (x: double, y: double, z : double) : base.Create(x, y)
        {
         Z = z;
        }
    }
   
test = MyNewPoint.Create (10.1, 20.2, 30.3);
z = test.Z;
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch216_T028_Associative_Class_Property_DefaultAssignment()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"
	class MyPoint
	{
		X : double = 0;
		Y : double = 0;
		Z : double = 0;
                            
        constructor ByXY (x : double, y : double)
        {
			X = x;
			Y = y;
        }
	
    }
	
    pt1 = MyPoint.ByXY (1,2);
	xPt1 = pt1.X;
	yPt1 = pt1.Y;
	zPt1 = pt1.Z;";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch217_T029_Associative_Class_Property_AccessModifier()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class A
{
    private x:int;
    constructor A()
    {
        x = 3;
    }
}
a = A.A();
// compile error!
t = a.x;
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch218_T030_Associative_Class_Property_AccessModifier()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class A
{
    private x:int;
    constructor A()
    {
        x = 3;
    }
}
class B extends A
{
    def foo()
    {
        return = x;
    }
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch219_T031_Associative_Class_Property_AccessModifier()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class A
{
    protected x:int;
    constructor A()
    {
        x = 3;
    }
}
class B extends A
{
    constructor B()
    {
        x = 4;
    }
    def foo:int()
    {
        return = x;
    }
}
b = B.B();
x = b.foo();
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch220_T051_Inherit_defaultconstructor()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"// default constructor
class baseClass
{ 
	val1 : int =2 ;
}
class derivedClass extends  baseClass
{ 
	val2 : int =1;
	val3 : double=1;
	
	
}
instance = derivedClass.derivedClass();
result1 = instance.val2;//1
result2 = instance.val3;//1
result3 = instance.val1;//2";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch221_T052_Inherit_defaultproperty()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"// access  property from inherited class and test default values are retained
class A
{ 
	x : var ;
	y : int;
	z : bool;
	u : double;
	v : B;
	w1 : int[];
	w2 : double[];
	w3 : bool[];
	w4 : B[][];
	
	constructor A ()
	{
		      	
	}	
}
class B extends A
{
	
}
a1 = B.B();
x1 = a1.x; // null
x2 = a1.y;//0
x3 = a1.z;//false
x4 = a1.u;//0.0
x5 = a1.v;//null
x6 = a1.w1;//0
x7 = a1.w2;//0.0
x8 = a1.w3;//false
x9 = a1.w4;//null
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch222_T053_Inherit_changevalue()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"// set variablse in abse class to default value and modify them in inherited class 
class A
{ 
	x : var ;
	y : int;
	z : bool;
	u : double;
	v : B;
	w1 : int[];
	w2 : double[];
	w3 : bool[];
	w4 : B[][];
	
	constructor A ()
	{
		      	
	}	
}
class B extends A
{
	constructor B()
	{
	y=1;
	z=true;
	u=0.5;
	w1={2,2};
	w2 ={0.5,0.5};
	w3 ={true,false};
	w4 ={this.x,this.x};
	}
}
a1 = B.B();
x1 = a1.x;//null
x2 = a1.y;//1
x3 = a1.z;//true
x4 = a1.u;//0.5
x5 = a1.v;//null
x6 = a1.w1;//{2,2}
x7 = a1.w2;//{0.5,0.5}
x8 = a1.w3;//{true,false}
x9 = a1.w4;//{null,null}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch223_T054_Inherit_nested()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class A
{ 
	x : var ;
	y : int;
	z : bool;
	u : double;
	v : B;
	w1 : int[];
	w2 : double[];
	w3 : bool[];
	w4 : B[][];
	
	constructor A ()
	{
		      	
	}	
}
class B extends A
{
	constructor B()
	{
	x=this.B();
	y=1;
	z=true;
	u=0.5;
	w1={2,2};
	w2 ={0.5,0.5};
	w3 ={true,false};
	w4 ={this.B(),this.B()};
	}
}
a1 = B.B();
x1 = a1.x;
x2 = a1.y;
x3 = a1.z;
x4 = a1.u;
x5 = a1.v;
x6 = a1.w1;
x7 = a1.w2;
x8 = a1.w3;
x9 = a1.w4;";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch224_T055_Inherit_donotchangevalue()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class A
{ 
	public x : var ;	
	private y : var ;
	//protected z : var = 0 ;
	constructor A ()
	{
		   	
	}
	public def foo1 (a)
	{
	    x = a;
		y = a + 1;
		return = x + y;
	} 
	private def foo2 (a)
	{
	    x = a;
		y = a + 1;
		return = x + y;
	}	
}
class B extends A
{
	
}
a = B.B();
a1 = a.foo1(1);
a2 = a.foo2(1);
a.x = 4;
//a.y = 5;
a3 = a.x;
//a4 = a.y;";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch225_T056_Inherit_private()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"// do not modify in extended class
class A
{ 
	public x : var ;	
	private y : var ;
	//protected z : var = 0 ;
	constructor A ()
	{
		   	
	}
	public def foo1 (a)
	{
	    x = a;
		y = a + 1;
		return = x + y;
	} 
	private def foo2 (a)
	{
	    x = a;
		y = a + 1;
		return = x + y;
	}	
	def testprivate ()
       {
          return=foo2(1);
       }
}
class B extends A
{
   
	
}
a = B.B();
a1 = a.foo1(1);
a2 = a.foo2(1);//not accessible
a3=a.testprivate();//3
a.x = 4;
//a.y = 5;
a4 = a.x;//1
a5 = a.y;";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch226_T057_Inherit_private_modify()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"//modify in extended class 
class A
{ 
	public x : var ;	
	private y : var ;
	//protected z : var = 0 ;
	constructor A ()
	{
		   	
	}
	public def foo1 (a)
	{
	    x = a;
		y = a + 1;
		return = x + y;
	} 
	private def foo2 (a)
	{
	    x = a;
		y = a + 1;
		return = x + y;
	}	
	def testprivate ()
        {
          return=foo2(1);
        }
}
class B extends A
{
        private def foo2 (a)
	{
	    x = a;
	    return = x ; 
        }
	def testextended ()
        {
          return=foo2(10);
        }
		
}
b = B.B();
b1 = b.foo1(1);
b2 = b.foo2(1);//private
b3=b.testprivate();//3
b4=b.testextended();//10  from the extended class 
b.x = 4;
//a.y = 5;
b5 = b.x;
b6 = b.y;";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch227_T058_Inherit_private_notmodify()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"// do not modify private member
class A
{ 
	public x : var ;	
	private y : var ;
	//protected z : var = 0 ;
	constructor A ()
	{
		   	
	}
	public def foo1 (a)
	{
	    x = a;
		y = a + 1;
		return = x + y;
	} 
	private def foo2 (a)
	{
	    x = a;
		y = a + 1;
		return = x + y;
	}	
	def testprivate ()
        {
          return=foo2(1);
        }
}
class B extends A
{
	def testextended ()
        {
          return=foo2(10);
        }
		
}
a = B.B();
a1 = a.foo1(1);
a2 = a.foo2(1);//private function
a3=a.testprivate();//3
a4=a.testextended();// private function null
a.x = 4;
//a.y = 5;
a5 = a.x;
a6 = a.y;";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch228_T059_Inherit_access_privatemember()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"//access (in extended class) the private property created in base class 
class A
{ 
	public x : var ;	
	private y : var ;
	//protected z : var = 0 ;
	constructor A ()
	{
		   	
	}
	public def foo1 (a)
	{
	    x = a;
		y = a + 1;
		return = x + y;
	} 
	private def foo2 (a)
	{
	    x = a;
		y = a + 1;
		return = x + y;
	}	
	def testprivate ()
        {
          return=foo2(1);
        }
}
class B extends A
{
        private def foo2 (a)
	{
	    x = y;
	    return = x ; 
        }
	def testextended ()
        {
          return=foo2(10);
        }
		
}
a = B.B();
a1 = a.foo1(1);
a2 = a.foo2(1);// access private property from base class 
a3=a.testprivate();//3
a4=a.testextended();//10  from the extended class 
a.x = 4;
//a.y = 5;
a5 = a.x;
a6 = a.y;";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch229_T061_Inherit_Property()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class TestPoint
{
    A : var;
           
    constructor Create( xx : int )
    {
	    A = xx;          
    }
	
	def Modify( )		
	{	
	    A = A + 1;
	    return = A;
	}
                                
}
class derived extends TestPoint
{
	D : var;
           
    constructor Create( xx : int ): base.Create( xx )
    {
	    D = xx; 
    }
	
	def Modify( val:int )
	{
	    D = A + val;
	    return = D;
	}   
}
oldPoint = TestPoint.Create(1);
derivedpoint=derived.Create(7);
basePoint=oldPoint.Modify();
callbase=derivedpoint.Modify();
derivedPoint2 = derivedpoint.Modify(2);
xPoint1 = oldPoint.A;
xPoint2 = derivedpoint.A;
xPoint3 = derivedpoint.D;
    
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch230_T062_Inherit_classAsArgument()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"
class TestPoint
{
            A : var;
            B : var;
            C : var;
                                
        constructor Create(xx : int, yy : int, zz : int)
        {
	    A = xx; 
            B = yy;
            C = zz;
        }
	def Modify(oldPoint : TestPoint)
	{
	    return=TestPoint.Create(oldPoint.A + 1, oldPoint.B + 1, oldPoint.C + 1);	
	}
                                
}
class derived extends TestPoint
{
     constructor Create(xx : int, yy : int, zz : int)
        {
	    A = xx; 
            B = yy;
            C = zz;
     }
	def Modify(oldPoint : TestPoint, val:int)
		
	{
        return = derived.Create(oldPoint.A + val, oldPoint.B + val, oldPoint.C + val);
		
	}   
}
	oldPoint = TestPoint.Create(1, 2, 3);
        derivedpoint=derived.Create(7,8,9);
	basePoint=oldPoint.Modify(derivedpoint);
	derivedPoint2 =derivedpoint.Modify(derivedpoint, 2);
	xPoint1 = oldPoint.A; //1
        yPoint1 = oldPoint.B;    //2        
        zPoint1 = oldPoint.C;       //3        
        xPoint2 = derivedpoint.A; //9
        yPoint2 = derivedpoint.B;    //10 
        zPoint2 = derivedpoint.C;//11
        xPoint3 = basePoint.A;//8
        yPoint3 = basePoint.B;   //9         
        zPoint3 = basePoint.C;//10
        xPoint4 = derivedPoint2.A;//9
        yPoint4 = derivedPoint2.B;//10            
        zPoint4 = derivedPoint2.C; //11            
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch231_T063_Inherit_classAsArgument_callinfunction()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"
class TestPoint
{
            A : var;
            B : var;
            C : var;
                                
        constructor Create(xx : int, yy : int, zz : int)
        {
	    A = xx; 
            B = yy;
            C = zz;
        }
                                
}
class derived extends TestPoint
{
    
           
     constructor Create(xx : int, yy : int, zz : int)
        {
	        A = xx; 
            B = yy;
            C = zz;
     }
	   
}
def modify(oldPoint : TestPoint)
		
        {
	
	    A1 = oldPoint.A +1;
	  
	    return=A1;
		
        }
        oldPoint = TestPoint.Create(1, 2, 3);
        derivedpoint=derived.Create(7,8,9);
	basePoint=modify(oldPoint);//2
	derivedPoint2 = modify(derivedpoint);//8
	xPoint1 =  oldPoint.A; //1
        yPoint1 =  oldPoint.B;    //2        
        zPoint1 =  oldPoint.C;       //3        
        xPoint2 = derivedpoint.A; //7
        yPoint2 = derivedpoint.B;    //8        
        zPoint2 = derivedpoint.C;//9           
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch232_T064_Inherit_classAsArgument_callinfunction_negative()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"// do not extend and try calling
class TestPoint
{
            A : var;
            B : var;
            C : var;
                                
        constructor Create(xx : int, yy : int, zz : int)
        {
	    A = xx; 
            B = yy;
            C = zz;
        }
                                
}
class derived 
{
            A : var;
            B : var;
            C : var;
           
     constructor Create(xx : int, yy : int, zz : int)
        {
	        A = xx; 
            B = yy;
            C = zz;
     }
	   
}
def modify(oldPoint : TestPoint)
		
        {
	
	    A1 = oldPoint.A +1;
	  
	    return=A1;
		
        }
        oldPoint = TestPoint.Create(1, 2, 3);
        derivedpoint=derived.Create(7,8,9);
	basePoint=modify(oldPoint);//2
	derivedPoint2 = modify(derivedpoint);//8
	xPoint1 =  oldPoint.A; //1
        yPoint1 =  oldPoint.B;    //2        
        zPoint1 =  oldPoint.C;       //3        
        xPoint2 = derivedpoint.A; //7
        yPoint2 = derivedpoint.B;    //8        
        zPoint2 = derivedpoint.C;//9           
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch233_T065_Inherit_constructor_withoutbase()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class TestPoint
{
    A : var;
           
    constructor Create(xx : int)
    {
	    A = xx; 
    }
	
	def Modify()
	{
	    A = A +1;
	    return = A;
	}
                                
}
class derived extends TestPoint
{
	    D : var;
           
        constructor Create(xx : int)
        {
	        D = xx;           
        }
	
	def Modify(val:int)		
	{
	    D = A +val;
	    return = D;		
	}   
}
	
oldPoint = TestPoint.Create(1);
derivedpoint=derived.Create(7);
basePoint=oldPoint.Modify();
xPoint1 = oldPoint.A;//2
xPoint2 = derivedpoint.A;//1
xPoint3 = derivedpoint.D;//7";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch234_T066_Inherit_constructor_failing_witbase()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"// failing constructor in base
class A
{ 
	x : var ;	
	
	constructor A ()
	{
		 x = w;     	
	}	
}
class B extends A
{ 
	y : var ;	
	
	constructor B ():base.A()
	{
		 y = 10;     	
	}	
}
a1 = A.A();
b1=B.B();
a2 = a1.x;//null
b2 = b1.y;//10
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch235_T067_Inherit_propertynotassignedinbase()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"// no value in base
class A
{ 
	x : var ;	
	
	constructor A ()
	{
		     	
	}	
}
class B extends A
{ 
	y : var ;	
	
	constructor B ():base.A()
	{
		 y = 10;     	
	}	
}
a1 = A.A();
b1=B.B();
a2 = a1.x;//null
b2 = b1.y;//10
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch236_T068_Inherit_propertyassignedinherited()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"// failing constructor in base reassigned in inherited
class A
{ 
	x : var ;	
	
	constructor A ()
	{
		x=w;     	
	}	
}
class B extends A
{ 
	y : var ;	
	
	constructor B ():base.A()
	{
		 x = 10;     	
	}	
}
a1 = A.A();
b1=B.B();
a2 = a1.x;//null
b2 = b1.y;//null
b3 = b1.x;//10
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch237_T069_Inherit_constructor_failing_both()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"// failing constructor in both
class A
{ 
	x : var ;	
	
	constructor A ()
	{
		 x = w;     	
	}	
}
class B extends A
{ 
	y : var ;	
	
	constructor B ():base.A()
	{
		 y = w;     	
	}	
}
a1 = A.A();
b1=B.B();
a2 = a1.x;//null
b2 = b1.y;//null
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch238_T070_Inherit_constructor_failing_inherited()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"// failing constructor in inherited
class A
{ 
	x : var ;	
	
	constructor A ()
	{
		 x = 10;     	
	}	
}
class B extends A
{ 
	y : var ;	
	
	constructor B ():base.A()
	{
		 y = w;     	
	}	
}
a1 = A.A();
b1=B.B();
a2 = a1.x;//10
b2 = b1.y;//null
b3=b1.x;
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch239_T071_Inherit_constructor_failing_inherited_sameproperty()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"// failing constructor in inherited same property failing in inherited
class A
{ 
	x : var ;	
	
	constructor A ()
	{
		 x = 10;     	
	}	
}
class B extends A
{ 
	y : var ;	
	
	constructor B ():base.A()
	{
		 x = w;     	
	}	
}
a1 = A.A();
b1=B.B();
a2 = a1.x;//10
b2 = b1.y;//null
b3=b1.x;
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch240_T072_inherit_Class_Constructor_CallingAFunction()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"def Divide : double (a : double, b : double)
{
	return = (a+b)/2;
}
class MyPoint
    
{     
    X: var;
    Y: var;
    constructor Create(x : double, y : double)
    {
        X = Divide(x+y, x+y);
        Y = Divide(x-y, x-y);
    }  
}
class testPoint extends MyPoint
    
{     
    
    constructor Create(x : double, y : double)
    {
        X = Divide(x*y, x/y);
        Y = Divide(x/y, x*y);
    }  
}
p = testPoint.Create(10,10);
pX = p.X;
pY = p.Y;
	
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch241_T073inherit_Constructor_WithSameNameAndDifferentArgumenType()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class TestClass
    {
    X: var;
    Y: var;
    public constructor Create(x : double, y : double)
        {
        X =  x;
        Y =  y;
        }
    constructor Create(x : bool, y : bool)
        {
        X = x;
        Y = y;
        }
    }
class myClass extends TestClass
{
 public constructor Create(x : double, y : double):base.Create(x,y)
        {
        X =  x;
        Y =  y;
        }
    constructor Create(x : bool, y : bool):base.Create(x,y)
        {
        X = x;
        Y = y;
        }
}
test1 = myClass.Create(1.0,2.0);
test2 = myClass.Create (true, false);
	
	x1 = test1.X;
	y1 = test1.Y;
	
	x2 = test2.X;
	y2 = test2.Y;
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch242_T074_Inherit_property_array()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"// array assign value in inherited 
class A
{ 
	y : int[];
	
	
	constructor A ()
	{
		      	
	}	
}
class B extends A
{
	constructor B()
	{
	y={1,2};
	}
}
a1 = B.B();
x1 = a1.y;//null
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch243_T075_Inherit_property_array_modify()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"// array assign value in inherited 
class A
{ 
	y : int[];
	
	
	constructor A ()
	{
	y={1,2};	      	
	}	
}
class B extends A
{
	constructor B()
	{
	y={3,4};	
	}
}
a1 = B.B();
x1 = a1.y;//null
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch244_T076_Inherit_property_array_modifyanitem()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"// array assign value in inherited 
class A
{ 
	y : int[];
	
	
	constructor A ()
	{
	y={1,2};	      	
	}	
}
class B extends A
{
	constructor B()
	{
	
         y[0]=-1; 
	}
}
a1 = B.B();
x1 = a1.y;//null
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch245_T077_Inherit_property_thatdoesnotexist()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"// array assign value in inherited 
class A
{ 
	y : int[];
	
	
	constructor A ()
	{
	y={1,2};	      	
	}	
}
class B extends A
{
	constructor B()
	{
	
         y[0]=-1; 
	}
}
a1 = B.B();
x1 = a1.z;//null
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch246_T078_Inherit_property_singletonconvertedtoarray()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class A
{ 
	y : int;
	
	
	constructor A ()
	{
    	y=1;	      	
	}	
}
class B extends A
{
	constructor B()
	{
	y={3,4};	
	}
}
a1 = B.B();
x1 = a1.y;//null
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch247_Z001_Associative_Class_Property_Regress001()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class Point
    {
        id : var;
        x : var;
        y : var;
        z : var;
        
        constructor ByCoordinates(xx : double, yy : double, zz : double)
        {
            id = 0;
            
            x = xx;
            y = yy;
            z = zz;
        }
    }
    
    class Line
    {
        id : var;
        startPoint : var;
        endPoint : var;
        
        constructor ByStartPointEndPoint(sp : Point, ep : Point)
        {
            id = 2;
            
            startPoint = sp;
            endPoint = ep;
        }
    }
sp_x;  
[Associative]
{   
    sp = Point.ByCoordinates(1,2,3);
    ep = Point.ByCoordinates(11,12,13);
    
    l = Line.ByStartPointEndPoint(sp, ep);
    
    sp_x = l.startPoint.x; // this line causes failure
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch248_Z002_Associative_Class_Property_Regress_1454056()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class MyPoint
{
	X : double;
	Y : double;
	Z : double;
							
	constructor MyPoint (x : double, y : double, z : double)
	{
		X = x;
		Y = y;
		Z = z;
	} 
	
	def Sum : double ()	{ return = X + Y + Z; }
}
val;
[Associative]
{	
	myNewPoint = MyPoint.MyPoint(0.0, 1.2, 3.5);
	val = myNewPoint.Sum();
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch249_Z003_Associative_Class_Property_Regress_1454164()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class Sample
    {
        constructor Create(val : int)
        {
            
        }
    }
[Associative]
{
 
    s = Sample.Create(20);
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch250_Z004_Associative_Class_Property_Regress_1454138()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class Sample
    {
		X : var;
		
        constructor Create()
        { X = 0.1;        }
        
        constructor Create(intval : int)
        { X = 1.1;   }
        
        constructor Create(doubleval : double)
        { X = 2.1;   }
        
        constructor Create(intval : int, doubleval : double)
        { X = 3.1;  }
        
        def GetX : double () {return = X;}
    }
test1;
test2;
test3;
test4;
[Associative]
{
    
    
    //    default ctor
    s1 = Sample.Create();
    test1 = s1.GetX();
    
    //    ctor with int
    s2 = Sample.Create(1);
    test2 = s2.GetX();
    
    //    ctor with double
    s3 = Sample.Create(1.0);
    test3 = s3.GetX();
    //    ctor with int and double
    s4 = Sample.Create(1, 1.0);
    test4 = s4.GetX();
    
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch251_Z005_Associative_Class_Property_Regress_1454178()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @" class Tuple4
    {
        X : var;
        Y : var;
        Z : var;
        H : var;
        
        constructor XYZH(xValue : double, yValue : double, zValue : double, hValue : double)
        {
            X = xValue;
            Y = yValue;
            Z = zValue;
            H = hValue;        
        }
        
        constructor XYZ(xValue : double, yValue : double, zValue : double)
        {
            X = xValue;
            Y = yValue;
            Z = zValue;
            H = 1.0;        
        }
        
        def Multiply : double (other : Tuple4)
        {
            return = X * other.X + Y * other.Y + Z * other.Z + H * other.H;
        }
        
        
    }
sum;
[Associative]
{
   
    
    
    t1 = Tuple4.XYZH(1,1,1,1);
 
    
    t2 = Tuple4.XYZ(1,1,1);
    
    
    sum = t1.Multiply(t2);
    
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch252_Z006_Associative_Class_Property_Regress_1453886()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @" class Sample
    {
        _val : var;
        
        constructor Sample()
        {
            _val = 1.1;
        }
        def get_Val : double ()
        {
            return = _val;
        }
    }
    
    class Sample2
    {
        constructor Sample2()
        {}
        
        def function1 : double (s : Sample )
        {
            return = s.get_Val();
            //return = 1;
        }
    }
one;
[Associative]
{
   
    
     s1 = Sample.Sample();
     s = Sample2.Sample2();
     one = s.function1(s1);
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch253_Z007_Associative_Class_Property_Regress_1454172()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @" class Tuple4
    {
        X : var;
        Y : var;
        Z : var;
        H : var;
        
        constructor XYZH(xValue : double, yValue : double, zValue : double, hValue : double)
        {
            X = xValue;
            Y = yValue;
            Z = zValue;
            H = hValue;        
        }
        
        
        def Coordinates3 : double[] ()
        {
            return = { X, Y, Z };
        }
        
    }
sum;
[Associative]
{
   
    
    
    t1 = Tuple4.XYZH(1,1,1,1);
    sum = t1.Coordinates3();
    
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch254_Z008_Associative_Class_Property_Regress_1454161()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"
    class Tuple4
    {
        X : var;
        Y : var;
        Z : var;
        H : var;
        
        constructor ByCoordinates3(coordinates : double[] )
        {
            X = coordinates[0];
            Y = coordinates[1];
            Z = coordinates[2];
            H = 1.0;        
        }
        
    }
x3;
y3;
z3;
h3;
    [Associative]
    {
    t3 = Tuple4.ByCoordinates3({1.0,1.0,1.0});
    x3 = t3.X;
    y3 = t3.Y;
    z3 = t3.Z;
    h3 = t3.H;
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch255_Z009_Associative_Class_Property_Regress_1453891()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class Point
{
    _x : var;
    _y : var;
    _z : var;
                                
    constructor Point(xx : double, yy : double, zz : double)
    {
        _x = xx;
        _y = yy;
        _z = zz;
    }
                                
    def get_X : double () 
    {
        return = _x;
    }
    def get_Y : double () 
    {
        return = _y;
    }
    def get_Z : double () 
    {
        return = _z;
    }
}            
    
class Line        
{
    _sp : var;
    _ep : var;
                    
    constructor Line(startPoint : Point, endPoint : Point)
    {
        _sp = startPoint; 
        _ep = endPoint;
                    
    }
    def get_StartPoint : Point ()
    {                              
        return = _sp;
    }
                                                
    def get_EndPoint : Point () 
    {
        return = _ep;
    }         
}
                
pt1 = Point.Point(3.1,2.1,1.1);
pt2 = Point.Point(31.1,21.1,11.1);
l = Line.Line(pt1, pt2);               
l_startPoint_X = l.get_StartPoint().get_X();
  ";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch256_Z010_Associative_Class_Property_Regress_1454658()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class Tuple4
{
	X : var;
	Y : var;
	Z : var;
	H : var;
	constructor XYZH(xValue : double, yValue : double, zValue : double, hValue : double)
	{
		X = xValue;
		Y = yValue;
		Z = zValue;
		H = hValue;		
	}
	
}
class Transform
{
	C0 : var;
    C1 : var; 
    C2 : var; 
    C3 : var; 
    
    constructor ByTuples(C0Value : Tuple4, C1Value : Tuple4, 
                         C2Value : Tuple4, C3Value : Tuple4)
    {
    	C0 = C0Value;
        C1 = C1Value;
        C2 = C2Value;
        C3 = C3Value;
    }
    
    def ApplyTransform : Tuple4 (t : Tuple4)
    {
        tx = Tuple4.XYZH(C0.X, C1.X, C2.X, C3.X); // This is what causes the problem
        return = t; 
    }
    
}
[Associative]
{
	t1 = Tuple4.XYZH(1.0,0.0,0.0,0.0);
	t2 = Tuple4.XYZH(0.0,1.0,0.0,0.0);
	t3 = Tuple4.XYZH(0.0,0.0,1.0,0.0);
	t4 = Tuple4.XYZH(0.0,0.0,0.0,1.0);
	
	xform = Transform.ByTuples(t1, t2, t3, t4);
	
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch257_Z011_Associative_Class_Property_Regress_1454162()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"
    class Tuple4
    {
        X : var;
        Y : var;
        Z : var;
        H : var;
        
        constructor XYZH(xValue : double, yValue : double, zValue : double, hValue : double)
        {
            X = xValue;
            Y = yValue;
            Z = zValue;
            H = hValue;        
        }
        
        constructor ByCoordinates3(coordinates : double[] )
        {
            X = coordinates[0];
            Y = coordinates[1];
            Z = coordinates[2];
            H = 1.0;        
        }
        
    }
    
    
    t1 = Tuple4.XYZH(1.0,1.0,1.0,1.0);
    x1 = t1.X;
    y1 = t1.Y;
    z1 = t1.Z;
    h1 = t1.H;
    result1 = {x1, y1, z1, h1};
    
    
    
    t2 = Tuple4.ByCoordinates3({1.0,1.0,1.0});
    x2 = t2.X;
    y2 = t2.Y;
    z2 = t2.Z;
    h2 = t2.H;
    result2 = {x2, y2, z2, h2};
    
   ";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch258_Z012_Access_Class_Property_From_If_Block_In_Class_Method_Regress_1456397()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class A
{
	a : var;
	constructor CreateA ( a1 : int )
	{
		a = a1 ;
	}
	
	def CreateNewVal ( ) 
    {
		y = [Imperative]
		{
			if ( a  < 10 )
			{
				return = a + 10;
			}
			return = a; 
		}
		
		return = y + a;     
    }
	
	
}
b1;
[Associative]
{
    a1 = A.CreateA(1);
	b1 = a1.CreateNewVal();
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch259_Z013_Defect_1457038()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class collection{
                                
	a : int[];                                
	constructor create( b : int[])                
	{
		a = b;                
	}                                
	def ret_col ( )                
	{
		return = a[0];                
	}
}
class A {
    a: int[];
    constructor create() 
    {
        a= {1, 2, 3};
    }
    def foo:int()
    {
         b = { 1, 2, 3 };
		 //a[2] = a[0] + a[1];
		 return = b[2];
    }
}
x = A.create();
y = x.foo();
d;
[Associative]
{                
    //c = { 3, 3 };
	c1 = collection.create( { 4, 3 } );                
	d = c1.ret_col();
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch260_Z014_Defect_1457057()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class Point
{
    X : var;
    Y : var;
    Z : var;
    id : var;
    
    constructor ByCoordinates(x : double, y : double, z : double, i : int)
    {
        X = x;
        Y = y;
        Z = z;
		id = i;
    }
}
def length  (pts : Point[])
{
    numPts = [Imperative]
    {
        counter = 0;
        for(pt in pts)
        {
            counter = counter + 1;
        }        
        return = counter;
    }
    return = numPts;
}
class BSplineCurve
{
    //id : var;
    numPts : var;
    ids : var;
        
    private def getIds : int[] (pts : Point[])
    {
        ids = [Imperative]
        {
            len = length(pts);
            arr = 0.0..len;
            
            // problem with this for loop!
            
            counter = 0;
            for(pt in pts)
            {
                arr[counter] = pt.id;
                counter = counter + 1;
            }
            
            return = arr;
        }
        
        return = ids;
    }
    
    constructor ByPoints(ptsOnCurve : Point[])
    {
        numPts = length(ptsOnCurve);
        ids = null;
		//ids = getIds(ptsOnCurve);
    }
}
pt1 = Point.ByCoordinates(0,0,0,0);
pt2 = Point.ByCoordinates(5,0,0,1);
pts = {pt1, pt2};
bcurve = BSplineCurve.ByPoints(pts);
numpts = bcurve.numPts;
//ids = bcurve.ids;
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch261_Z015_Defect_1457029()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class A
{
	Pt : double;
	constructor A (pt : double)
	{
		Pt = pt;
	}
	
	
}
	
c1 = { 1.0, 2.0, 3.0 };
c1 = A.A( c1[0] );
x = c1.Pt;
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch262_Z015_Defect_1457029_2()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class A
{
	Pt : double[];
	constructor A (pt : double[])
	{
		Pt = pt;
	}
	
	
}
	
c = { {1.0, 2.0}, {3.0} };
c = A.A( c[0] );
x = c.Pt;
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch263_Z016_Defect_1456771()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class A
{
    a : int;
	constructor A ( i : int)
	{
	    a = i ;
	}
	
	def foo1 ( y )
	{
		
		return = a + y;
	}
	
}
class B extends A
{
    b : int;
	constructor B ( i : int)
	{
	    a = i;
		b = i;
	}
	
	def foo2 ( x )
	{
		
		return = foo1 ( x ) + b + a;
	}
	
}
b1 = B.B(2);
t1 = b1.foo2(1);
t2 = b1.foo1(1);
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch264_Z017_Defect_1456898()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class A
{
                a : var;
                
                constructor CreateA ( a1 : int )
                {              
                                a = a1 ;
                }                              
                
                def CreateNewVal ( )
                {
                                y = [Associative]
                                {
                                                
                                    return = a + 1;
                               }
                                return = y + a;
                }
}
b1;
[Imperative]
{
    a1 = A.CreateA(1);
    b1 = a1.CreateNewVal();
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch265_Z017_Defect_1456898_2()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"def foo ( a : int[] )
{
	y = [Associative]
    {
		return = a[0];
    }
	x = [Imperative]
    {
		if ( a[0] == 0 ) 
		{
		    return = 0;
		}
		else
		{
			return = a[0];
		}
    }
    return = x + y;
}
a1;
b1;
[Imperative]
{
    a1 = foo( { 0, 1 } );
    b1 = foo( { 1, 2 } );
	
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch266_Z018_Defect_1456798()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class A
{    
	a : var[];    
	constructor ByPoints(ptsOnCurve : int[])    
	{        
		a = ptsOnCurve;    
	}		
	
	def add()    
	{        
		return = a[0] + a[1] + a[2];    
	}
}
x = { 0, 1, 2 };
a1 = A.ByPoints(x);
b1 = a1.a[0] + a1.a[1] + a1.a[2];
b2 = a1.add();
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch267_Z018_Defect_1456798_2()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class B
{    
	a : var;    
	constructor B ( b : double )    
	{        
		a = b;    
	}		
	
}
class A
{    
	a : var[];    
	constructor A ( b : B[] )    
	{        
		a = b;    
	}		
	
}
a2;
[Imperative]
{
	x = { 0.5, 1.0, 2.0 };
	b1 = B.B( x );
	a1 = A.A(b1);
	a2 = a1.a[0].a + a1.a[1].a +a1.a[2].a ;
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch268_Z018_Defect_1456798_3()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class A
{    
	a : var[];    
	constructor A ( b : int )    
	{        
		a = { b, b, b };    
	}		
	
}
a2;
[Imperative]
{
	x = { 1, 2, 3 };
	a1 = A.A( x );
	t1 = a1[0];
	t2 = a1[1];
	t3 = a1[2];
	a2 = t1.a[0] + t2.a[1] + t3.a[2];
	//a2 = a1[0].a[0] + a1[1].a[1] +a1[2].a[2];
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch269_Z019_Defect_1457053()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class A
{
    a : int[];
    constructor A1(ptsOnCurve : int[])
    {
        a = ptsOnCurve;
    }
	
	constructor A2()
    {
        a = { 1, 2, 3.5};
    }
	
	constructor A3(i : int)
    {
        a = {i, i ,i};
    }
	
	def add()
    {
        return = a[0] + a[1] + a[2];
    }
}
x = { 1, 2, 3 };
a1 = A.A1(x);
b1 = a1.a[0] + a1.a[1] + a1.a[2];
b2 = a1.add();
a2 = A.A2 ( );
b3 = a2.a[0] + a2.a[1] + a2.a[2];
b4 = a2.add();
a3 = A.A3 ( 3 );
b5 = a3.a[0] + a3.a[1] + a3.a[2];
b6 = a3.add();
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch270_Z020_Defect_1457290()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class A {
    a: int[][];
    constructor create(b : int[][]) 
    {
        a=b;
		a[0][0] = 20;
    }
    def foo:int[]()
    {
         
		 a[0][1] = a[0][0];
		 return = a[0];
    }
}
b = { { 1, 2 },  { 3, 4 } };
a1 = A.create(b);
a2 = a1.foo();";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch271_Z020_Defect_1457290_2()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class A {
    a: int[][];
    constructor create(b : int[][]) 
    {
        a=b;
		a[0][0] = 20;
    }
    def foo:int[]()
    {
         
		 a[0][1] = a[0][0];
		 return = a[0];
    }
}
a2;
[Imperative]
{
	b = { { 1, 2 },  { 3, 4 } };
	a1 = A.create(b);
	a2 = a1.foo();
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch272_Z021_Defect_1458785()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class A
{
        x : var;
	constructor A ()
	{
	    x = 1;
	}
	constructor A2 (x1 : int)
	{
	    x = x1;
	    y = 3;
	}
	
	def foo ( i )
	{
		return = i;
	}
}
	
a1 = A.A();
a2 = a1.foo();
a3 = 2;
a4;
a5;
[Imperative]
{
	def foo ( a:A )
	{
	    return = a.x;
	}
		
	a4 = foo(x);
	a5 = 2;
}
	
a11 = A.A2(2);
x11 = a11.x;
y11 = a11.y;
z11 = 2;
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch273_Z021_Defect_1458785_2()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class A
{
        x : var;
	constructor A ()
	{
	    x = 1;
	}
	
}
	
a1 = A.A(1);
a2 = a1.foo();
a3 = a1.x();
a4 = 2;
a5 = foo();
a6 = 3;
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch274_Z021_Defect_1458785_4()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class A
{
    private x:int;
    constructor A()
    {
        x = 3;
    }
    def testPublic() 
    {
        x=x+2; // x= 5 
        return= x;
    }
     private def testprivate()
    {
        x=x-1;  
        return =x;
    }
    def testmethod() // to test calling private methods
    {
        a=testprivate();
        return=a;
    }
    
}
test1=A.A();
test2=z.x; 
test3=test1.testPublic();
test4=test1.testprivate();
test5= test1.testmethod(); 
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch275_Z021_Defect_1458785_5()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class A
{ 
    public x : var ;    
    private y : var ;
    //protected z : var = 0 ;
    constructor A ()
    {
               
    }
    public def foo1 (a)
    {
        x = a;
        y = a + 1;
        return = x + y;
    } 
    private def foo2 (a)
    {
        x = a;
        y = a + 1;
        return = x + y;
    }    
}
class B extends A
{
    
}
a = B.B();
a1 = a.foo1(1);
a2 = a.foo2(1);
a.x = 4;
//a.y = 5;
a3 = a.x;
a4 = a.y;
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch276_Z021_Defect_1458785_6()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class A
{
    x : var;
	constructor A ()
	{
	    x = foo();
	}
	
	
	def foo ( i )
	{
		x = foo2();
		return = x + i;
	}
}
	
a1 = A.A();
a2 = a1.x;
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch277_Z022_Defect_1455292()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class Geometry
{
    public constructor Create()
    {}
    
    public def Intersect : Geometry (other : Geometry)
    {
        return = null;
    }
}
class Point extends Geometry
{
    x : var;
    
    public constructor Create()
    {
        x = 100;
    }
}
class Line 
{
    public constructor Create()
    {}
    
    def Intersect : Geometry (other : Line) //This is the issue, if return a Point here, it is working
    {
        return = Point.Create();
    }
}
test = Point.Create();
a = test.x;
l1 = Line.Create();
l2 = Line.Create();
intpt = l1.Intersect(l2);
dummy = intpt.x;    // i was expecting 100 here
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch278_Z022_Defect_1455292_2()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class f 
{ 
	x : var; 
	constructor f() 
	{ 
		x = 100; 
	} 
} 
class d extends f 
{ 
	y : var; 
	constructor d() 
	{ 
		y = 100; 
		x = 10;
	} 
} 
def foo : f() 
{ 
	return = d.d(); 
} 
p = foo(); 
xx = p.x;
yy = p.y;
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch279_Z022_Defect_1455292_3()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class A 
{ 
	x : var; 
	constructor A() 
	{ 
		x = 1; 
	} 
} 
class B extends A 
{ 
	y : var; 
	constructor B1() 
	{ 
		y = 3; 
		x = 2;
	} 
	constructor B2() : base.A()
	{ 
		y = 4;		
	} 
} 
def foo1 : A() 
{ 
	return = B.B1(); 
} 
def foo2 : B() 
{ 
	return = B.B2(); 
}
def foo3 () 
{ 
	return = B.B2(); 
}
p1 = foo1();
p2 = foo2();
p3 = foo3();
t = [Imperative]
{
	x1 = p1.x;
	y1 = p1.y;
	x2 = p2.x;
	y2 = p2.y;
	x3 = p3.x;
	y3 = p3.y;
	return = { x1, y1, x2, y2, x3, y3 };
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch280_Z023_Defect_1455131()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class TestClass
    
    {
    
    X: var;
    Y: var;
    
    constructor Create(x : double, y : double)
        
        
        {
			this.X = x;
			this.Y = y;
        
        }
    
    
        def foo : double ()
        
        {
        
        return = this.X + this.Y;
        
        
        }
		
		def foo2 : double (this2: TestClass)
        
        {
        
            return = this2.X + this2.Y;        
        
        }
    
    
    }
    
    
    test = TestClass.Create (10.0, 11.0);
    test2 = TestClass.Create (1.0, 2.0);
	 
    result = test.foo();
	
	result2 = test.foo2();
	
	result3 = test.foo2(test2);";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch281_Z023_Defect_1455131_2()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class TestClass
    
    {
    
    X: var;
    Y: var;
    
    constructor Create(x : double, y : double)
        
        
        {
			this.X = x;
			this.Y = y;
        
        }
    
    
        def foo : double ()
        
        {
        
            t = [Imperative]
			{
			    if(this.X > 1 )
				    return = this.X ;
				else
				    return = this.Y;
			}
             return = t;
        
        }
		
		def foo2 : double (this2: TestClass)
        
        {
            
            t = [Imperative]
			{
			    if(this2.X > 1 )
				    return = this2.X ;
				else
				    return = this2.Y;
			}
             return = t;       
        
        }
    
    
    }
    
t = [Imperative]
{
    test = TestClass.Create (10.0, 11.0);
    test2 = TestClass.Create (1.0, 2.0);
	 
    result = test.foo();
	
	result2 = test.foo2();
	
	result3 = test.foo2(test2);
	
	return = { result, result2, result3 };
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch282_Z024_Defect_1461133()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class A
{ 
    public x : int ;    
    constructor A ( a)
    {
        x = a;
    }
    public def foo ( this : A)
    {
        return = this.x;       
    } 
	
}
a = 2;
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch283_Z024_Defect_1461133_2()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class A
{ 
    public x : int ;    
    constructor A ( a)
    {
        x = a;
    }    
	
	public def foo ( thiss : A)
    {
        return = thiss.x;       
    } 
}
a1 = A.A ( 1 );
a2 = A.A ( 2 );
test = a1.foo( a2 );
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch284_Z025_Defect_1459626()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class A
{
    X : int;	
	
	constructor A( x : int )
	{
	    X = x;			
	}
}
class B
{
    Y : A;	
	
	constructor B( y : A )
	{
	    Y = y;
	}
	
}
a = { 10, 20 };
//a1 = { A.A( 1 ), A.A( 2) } ; // If I create the array a1 like this, then the scripts works fine
a1 = [Imperative]
{    
	b2 = { 0, 0 };
	c2 = 0;
	for (i in a )
	{
	    b2[c2] = A.A( i );
		c2 = c2 + 1;		
	}
	return = b2;
}
t1 = a1[0].X;
b1 = [Imperative]
{    
	b2 = { 0, 0 };
	c2 = 0;
	for (i in a1 )
	{
	    b2[c2] = B.B( i );
		c2 = c2 + 1;		
	}
	return = b2;
}
t = b1[1].Y;
t2 = t.X;
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch285_Z026_Defect_1458563()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class A
{ 
	x1 : int ;
	
	constructor A () 
	{	
		x1  = { true, 2.5 };  
		
	}
}
a = A.A();
t1 = a.x1;
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch286_Z026_Defect_1458563_2()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class B
{ 
	b1: var;
    constructor B (a : var)
	{
	    b1 = a;
	}
}
class A
{ 
	x1 : int = 1 ;
	x2 : bool = true;
	x3 : double = 1.0;
	x4 : B = B.B(1);	
	x5 : int[] = { 1, 2 };
	x6 : B[] = { B.B(1), B.B(2) };
	x7 : bool = false;
	
	def change()
	{
	    x4 = 1 ;
		x3 = { B.B(1), B.B(2) };
		x2 = 1.0;
		x1 = B.B(1);
		x5  = false;
		x6  = true;
		x7  = { 1, 2 };
		return = true;
	}
}
a = A.A();
t1 = a.x1;
t2 = a.x2;
t3 = a.x3;
t4 = a.x4.b1;
t5 = a.x5[1];
t6 = a.x6[1].b1;
t7 = a.x7;
test = [Imperative]
{
    return = a.change();
}
	
p1 = t1;//a1.x1;
p2 = t2;//a.x2;
p3 = t3;//a.x3;
p4 = t4;//a.x4.b1;
p5 = t5;//a.x5[1];
p6 = t6;//a.x6[1].b1;
p7 = t7;//a.x7;
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch287_Z027_Defect_1461365()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class A
{
    a : int;	
}
class B extends B // negative case
{
    b : int;
}
b1 = B.B();
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch288_Z028_Same_Name_Constructor_And_Method_Negative()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class A
{
    a : int;	
	constructor A ()
	{
	}
	def A ( )
	{
	    return = 1;
	}
}
a = A.A();
b = a.A();
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch289_Z029_Calling_Class_Constructor_From_Instance_Negative()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class A
{
    a : int;	
	constructor A ()
	{
	    a = 1;
	}	
}
a1 = A.A();
b1 = a1.A();
c1 = b1.a;";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch290_Z030_Class_Instance_Name_Same_As_Class_Negative()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class A
{
    a : var;
	constructor A ()
	{
	    a = 1;
	}
}
A = A.A();
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch291_Z030_Class_Instance_Name_Same_As_Class_Negative_2()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class A
{
    a : var;
	constructor A ()
	{
	    a = 1;
	}
}
A = A.A();
t = A.a;
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch292_T001_Associative_Function_DeclareAfterAssignment()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"[Associative]
{
	a = 1;
	b = 10;
	
	sum = Sum (a, b);
	
	def Sum : int(a : int, b : int)
	{
	
	return = a + b;
	}
	
	
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch293_T001_Associative_Function_Simple()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"a;
b;
sum;
[Associative]
{
	def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	}
	
	a = 1;
	b = 10;
	
	sum = Sum (a, b);
	
	
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch294_T002_Associative_Function_SinglelineFunction()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"d;
[Associative]
{
	def singleLine : int(a:int, b:int) = 10;
	d = singleLine(1,3);
	
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch295_T003_Associative_Function_MultilineFunction()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"[Associative]
{
	def Divide : int(a:int, b:int)
	{
		return = a/b;
	}
	d = Divide (1,3);
	
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch296_T004_Associative_Function_SpecifyReturnType()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"d;
[Associative]
{
	def Divide : double (a:int, b:int)
	{
		return = a/b;
	}
	d = Divide (1,3);
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch297_T005_Associative_Function_SpecifyArgumentType()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"result;
[Associative]
{
	def myFunction : int (a:int, b:int)
	{
		return = a + b;
	}
	d1 = 1.12;
	d2 = 0.5;
	
	result = myFunction (d1, d2);
	
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch298_T006_Associative_Function_PassingNullAsArgument()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"[Associative]
{
	def myFunction : double (a: double, b: double)
	{
		return = a + b;
	}
	d1 = null;
	d2 = 0.5;
	
	result = myFunction (d1, d2);
	
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch299_T007_Associative_Function_NestedFunction()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"result;
[Associative]
{
	def ChildFunction : double (r1 : double)
	{
	return = r1;
	
	}
	def ParentFunction : double (r1 : double)
	{
		return = ChildFunction (r1)*2;
	}
	d1 = 1.05;
	
	result = ParentFunction (d1);
	
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch300_T008_Associative_Function_DeclareVariableBeforeFunctionDeclaration()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"sum;
[Associative]
{
    a = 1;
	b = 10;
	def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	}
	
	sum = Sum (a, b);
	
	
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch301_T009_Associative_Function_DeclareVariableInsideFunction()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"[Associative]
{
	def Foo : int(input : int)
	{
		multiply = 5;
		divide = 10;
	
		return = {input*multiply, input/divide};
	}
	
	input = 20;
	sum = Foo (input);
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch302_T010_Associative_Function_PassAndReturnBooleanValue()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"result1;
result2;
[Associative]
{
	def Foo : bool (input : bool)
	{
		return = input;
	}
	
	input = false;
	result1 = Foo (input);
	result2 = Foo (true);
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch303_T011_Associative_Function_FunctionWithoutArgument()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"result1;
[Associative]
{
	def Foo1 : int ()
	{
		return = 5;
	}
	
	result1 = Foo1 ();
	
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch304_T012_Associative_Function_MultipleFunctions()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"result1;
result2;
[Associative]
{
	def Foo1 : int ()
	{
		return = 5;
	}
	
	
	def Foo2 : int ()
	{
		return = 6;
	}
	
	
	result1 = Foo1 ();
	result2 = Foo2 ();
	
	
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch305_T013_Associative_Function_FunctionWithSameName_Negative()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"[Associative]
{
	def Foo1 : int ()
	{
		return = 5;
	}
	
	
	
	def Foo1 : int ()
	{
		return = 6;
	}
	
	
	
	result2 = Foo2 ();
	
	
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch306_T014_Associative_Function_DuplicateVariableAndFunctionName_Negative()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"[Associative]
{
	def Foo : int ()
	{
		return = 4;
	}
	Foo = 5;
	
	
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch307_T015_Associative_Function_UnmatchFunctionArgument_Negative()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"[Associative]
{
	def Foo : int (a : int)
	{
		return = 5;
	}
	
	result = Foo(1,2); 
	
	
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch308_T016_Associative_Function_ModifyArgumentInsideFunctionDoesNotAffectItsValue()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"input;
result;
originalInput;
[Associative]
{
	def Foo : int (a : int)
	{
		a = a + 1;
		return = a;
	}
	input = 3;
	result = Foo(input); 
	originalInput = input;
	
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch309_T017_Associative_Function_CallingAFunctionBeforeItsDeclaration()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"input;
result;
[Associative]
{
	def Level1 : int (a : int)
	{
		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{
		return = a + 1;
	}
	input = 3;
	result = Level1(input);
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch310_temp()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"[Associative]
{
	def Level1 : int (a : int)
	{
		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{
		return = a + 1;
	}
	input = 3;
	result = Level1(input); 
	
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch311_Z001_Associative_Function_Regress_1454696()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"    def Twice : double(array : double[])
    {
        return = array[0];
    }
    
    arr = {1.0,2.0,3.0};
    arr2 = Twice(arr);";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch312_Z002_Defect_1461399()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class Arc
{
	constructor Arc()
	{
		
	}
	def get_StartPoint()
	{
         return = 1;
	}
}
def CurveProperties(curve : Arc)
{
 return = {
	curve.get_StartPoint(),
	curve.get_StartPoint(),
	curve.get_StartPoint()	
 };
}
test=CurveProperties(null);
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch313_Z002_Defect_1461399_2()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class Arc
{
	constructor Arc()
	{
		
	}
	def get_StartPoint()
	{
         return = 1;
	}
}
def CurveProperties(curve : Arc)
{
 return = {
	curve[0].get_StartPoint(),
	curve[0].get_StartPoint(),
	curve[0].get_StartPoint()	
 };
}
test=CurveProperties(null);
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch314_Z003_Defect_1456728()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"def function1 (arr :  double[] )
{
    return = { arr[0], arr [1] };
}
a = function1({null,null});
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch315_T001_Inline_Using_Function_Call()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"
	def fo1 : int(a1 : int)
	{
		return = a1 * a1;
	}
	a	=	10;				
	b	=	20;
				
	smallest1   =   a	<   b   ?   a	:	b;
	largest1	=   a	>   b   ?   a	:	b;
	d = fo1(a);
	smallest2   =   (fo1(a))	<   (fo1(b))  ?   (fo1(a))	:	(fo1(a));	//100
	largest2	=   (fo1(a)) >   (fo1(b))  ?   (fo1(a))	:	(fo1(b)); //400
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch316_T002_Inline_Using_Math_Lib_Functions()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"    class Math
	{
	    static def Sqrt ( a : var ) 
		{
		    return = a/2.0;
		}
	}
	
	def fo1 :int(a1 : int)
	{
		return = a1 * a1;
	}
	a	=	10;				
	b	=	20;
				
	smallest1   =   a	<   b   ?   a	:	b; //10
	largest1	=   a	>   b   ?   a	:	b; //20
	smallest2   =   Math.Sqrt(fo1(a))	<   Math.Sqrt(fo1(b))  ?   Math.Sqrt(fo1(a))	:	Math.Sqrt(fo1(a));	//50.0
	largest2	=   Math.Sqrt(fo1(a)) >   Math.Sqrt(fo1(b))  ?   Math.Sqrt(fo1(a))	:	Math.Sqrt(fo1(b)); //200.0
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch317_T003_Inline_Using_Collection()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"
	Passed = 1;
	Failed = 0;
	Einstein = 56;
	BenBarnes = 90;
	BenGoh = 5;
	Rameshwar = 80;
	Jun = 68;
	Roham = 50;
	Smartness = { BenBarnes, BenGoh, Jun, Rameshwar, Roham }; // { 1, 0, 1, 1, 0 }
	Results = Smartness > Einstein ? Passed : Failed;
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch318_T004_Inline_Inside_Class_Constructor_and_replication()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class MyClass
{
    positive : var;
    constructor ByValue(value : int)
    {
        positive = value >= 0 ? true : false;
    }
}
number = 2;
sample = MyClass.ByValue(number);
values = sample.positive; // { true, false } 
number = { 3, -3 };
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch319_T005_Inline_Using_2_Collections_In_Condition()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"
	a1 	=  1..3..1; 
	b1 	=  4..6..1; 
	a2 	=  1..3..1; 
	b2 	=  4..7..1; 
	a3 	=  1..4..1; 
	b3 	=  4..6..1; 
	c1 = a1 > b1 ? true : false; // { false, false, false }
	c2 = a2 > b2 ? true : false; // { false, false, false }
	c3 = a3 > b3 ? true : false; // { false, false, false, null }
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch320_T006_Inline_Using_Different_Sized_1_Dim_Collections()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"
	a = 10 ;
	b = ((a - a / 2 * 2) > 0)? a : a+1 ; //11
	c = 5; 
	d = ((c - c / 2 * 2) > 0)? c : c+1 ; //5 
	e1 = ((b>(d-b+d))) ? d : (d+1); //5
	//inline conditional, returning different sized collections
	c1 = {1,2,3};
	c2 = {1,2};
	a1 = {1, 2, 3, 4};
	b1 = a1>3?true:a1; // expected : {1, 2, 3, true}
	b2 = a1>3?true:c1; // expected : {1, 2, 3}
	b3 = a1>3?c1:c2;   // expected : {1, 2}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch321_T007_Inline_Using_Collections_And_ReplicationCollectionFunctionCall()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"
	def even : int(a : int)
	{
		return = a * 2;
	}
	a =1..10..1 ; //{1,2,3,4,5,6,7,8,9,10}
	i = 1..5; 
	b = ((a[i] % 2) > 0)? even(a[i]) : a ;  // { 1, 6, 3, 10, 5 }	
	c = ((a[0] % 2) > 0)? even(a[i]) : a ; // { 4, 6, 8, 10, 12 }
	d = ((a[-2] % 2) == 0)? even(a[i]) : a ; // { 1, 2,..10}
	e1 = (a[-2] == d[9])? 9 : a[1..2]; // { 2, 3 }
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch322_T008_Inline_Returing_Different_Ranks()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"
	a = { 0, 1, 2, 4};
	x = a > 1 ? 0 : {1,1}; // { 1, 1} ? 
	x_0 = x[0];
	x_1 = x[1];
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch323_T009_Inline_Using_Function_Call_And_Collection_And_Replication()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"
	def even(a : int)
	{
		return = a * 2;
	}
	def odd(a : int ) 
	{
	return = a* 2 + 1;
	}
	x = 1..3;
	a = ((even(5) > odd(3)))? even(5) : even(3); //10
	b = ((even(x) > odd(x+1)))?odd(x+1):even(x) ; // {2,4,6}
	c = odd(even(3)); // 13
	d = ((a > c))?even(odd(c)) : odd(even(c)); //53
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch324_T010_Defect_1456751_execution_on_both_true_and_false_path_issue()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"
a = 0;
def foo ( )
{
    a = a + 1;
    return = a;
}
x = 1 > 2 ? foo() + 1 : foo() + 2;
	
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch325_T010_Defect_1456751_replication_issue()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"xx;
x1;
x2;
x3;
x4;
[Imperative]
{
	a = { 0, 1, 2};
	b = { 3, 11 };
	c = 5;
	d = { 6, 7, 8, 9};
	e = { 10 };
	xx = 1 < a ? a : 5; // expected:5 
        yy = 0;
	if( 1 < a )
	    yy = a;
	else
	    yy = 5;
	x1 = a < 5 ? b : 5; // expected:5 
	t1 = x1[0];
	t2 = x1[1];
	c1 = 0;
	for (i in x1)
	{
		c1 = c1 + 1;
	}
	x2 = 5 > b ? b : 5; // expected:f
	t3 = x2[0];
	t4 = x2[1];
	c2 = 0;
	for (i in x2)
	{
		c2 = c2 + 1;
	}
	x3 = b < d ? b : e; // expected: {10}
	t5 = x3[0];
	c3 = 0;
	for (i in x3)
	{
		c3 = c3 + 1;
	}
	x4 = b > e ? d : { 0, 1}; // expected {0,1}
	t7 = x4[0]; 
	c4 = 0;
	for (i in x4)
	{
		c4 = c4 + 1;
	}
}
/*
Expected : 
result1 = { 5, 5, 2 };
thisTest.Verification(mirror, ""xx"", result1, 1);
thisTest.Verification(mirror, ""t1"", 3, 1);
thisTest.Verification(mirror, ""t2"", 11, 1);
thisTest.Verification(mirror, ""c1"", 2, 1);
thisTest.Verification(mirror, ""t3"", 3, 1);
thisTest.Verification(mirror, ""t4"", 5, 1);
thisTest.Verification(mirror, ""c2"", 2, 1);
thisTest.Verification(mirror, ""t5"", 3, 1); 
thisTest.Verification(mirror, ""c3"", 1, 1);
thisTest.Verification(mirror, ""t7"", 0, 1);
thisTest.Verification(mirror, ""c4"", 1, 1);*/";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch326_T011_Defect_1467281_conditionals()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @" x = 2 == { }; 
 y = {}==null;
 z = {{1}}=={1};
 z2 = {{1}}==1;
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch327_Defect_Geo_Replication()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"import(""ProtoGeometry.dll"");
WCS = CoordinateSystem.Identity();
// create initialPoints
diafac1 = 1;
h1 = 15;
hL1=10;
pt0 = Point.ByCartesianCoordinates(WCS,-5*diafac1,-5*diafac1,0);
pt1 = Point.ByCartesianCoordinates(WCS,5*diafac1,-5*diafac1,0);
pt2 = Point.ByCartesianCoordinates(WCS,5*diafac1,5*diafac1,0);
pt3 = Point.ByCartesianCoordinates(WCS,-5*diafac1,5*diafac1,0);
pt4 = Point.ByCartesianCoordinates(WCS,-5*diafac1,-5*diafac1,hL1);
pt5 = Point.ByCartesianCoordinates(WCS,5*diafac1,-5*diafac1,hL1);
pt6 = Point.ByCartesianCoordinates(WCS,5*diafac1,5*diafac1,hL1);
pt7 = Point.ByCartesianCoordinates(WCS,-5*diafac1,5*diafac1,hL1);
pt8 = Point.ByCartesianCoordinates(WCS,-15,-15,h1);
pt9 = Point.ByCartesianCoordinates(WCS,15,-15,h1);
pt10= Point.ByCartesianCoordinates(WCS,15,15,h1);
pt11 = Point.ByCartesianCoordinates(WCS,-15,15,h1);
pointGroup = {pt0,pt1,pt2,pt3,pt4,pt5,pt6,pt7,pt8,pt9,pt10,pt11};
facesIndices = {{0,1,5,4},{1,2,6,5},{2,3,7,6},{3,0,4,7},{4,5,9,8},{5,6,10,9},{6,7,11,10},{7,4,8,11}};
groupOfPointGroups =  { { pt0, pt1, pt2 }, { pt3, pt4, pt5 }, { pt6, pt7, pt8 }, { pt9, pt10, pt11 } };
simplePointGroup = {pt5, pt6, pt10, pt9};
// note: Polygon.ByVertices expects a 1D array of points.. so let`s test this 
controlPolyA = Polygon.ByVertices({pt0, pt1, pt5, pt4}); // OK with 1D collection
controlPolyB = Polygon.ByVertices(simplePointGroup); // OK with 1D collection
	controlPolyC = Polygon.ByVertices({{pt1, pt2, pt6, pt5},{pt2, pt3, pt7, pt6}}); // not OK with literal 2D collection
														// get compiler error `unable to locate mamaged object for given dsObject`
	controlPolyD = Polygon.ByVertices(pointGroup[3]);    // not OK with a 1D subcollection a a member indexed from a 2D collection
														// controlPolyD = null
	controlPolyE = Polygon.ByVertices(pointGroup[facesIndices]); // not OK with an array of indices
																// controlPolyE = null
controlPolyF = Polygon.ByVertices(groupOfPointGroups);
// result = foo({ controlPolyA, controlPolyB, controlPolyC, controlPolyD, controlPolyE });
/*def foo(x:Polygon)
{
	if (x!= null)
	{
	    return = true;
	}
	else return = false;
}*/
//a simple case
c=2 * {{1},{2}};";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch328_T01_Arithmatic_List_And_List_Different_Length()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"list1 = { 1, 4, 7, 2};
list2 = { 5, 8, 3, 6, 7, 9 };
list3 = list1 + list2; // { 6, 12, 10, 8 }
list4 = list1 - list2; // { -4, -4, 4, -4}
list5 = list1 * list2; // { 5, 32, 21, 12 }
list6 = list2 / list1; // { 5, 2, 0, 3 }";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch329_T02_Arithmatic_List_And_List_Same_Length()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"list1 = { 1, 4, 7, 2};
list2 = { 5, 8, 3, 6 };
list3 = list1 + list2; // { 6, 12, 10, 8 }
list4 = list1 - list2; // { -4, -4, 4, -4}
list5 = list1 * list2; // { 5, 32, 21, 12 }
list6 = list2 / list1; // { 5, 2, 0, 3 }
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch330_T03_Arithmatic_Mixed()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"list1 = { 13, 23, 42, 65, 23 };
list2 = { 12, 8, 45, 64 };
list3 = 3 * 6 + 3 * (list1 + 10) - list2 + list1 * list2 / 3 + list1 / list2; // { 128, 172, 759, 1566 }";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch331_T04_Arithmatic_Single_List_And_Integer()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"list1 = { 1, 2, 3, 4, 5 };
a = 5;
list2 = a + list1; // { 6, 7, 8, 9, 10 }
list3 = list1 + a; // { 6, 7, 8, 9, 10 }
list4 = a - list1; // { 4, 3, 2, 1, 0 }
list5 = list1 - a; // { -4, -3, -2, -1, 0 }
list6 = a * list1; // { 5, 10, 15, 20, 25 }
list7 = list1 * a; // { 5, 10, 15, 20, 25 }
list8 = a / list1; 
list9 = list1 / a; ";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch332_T05_Logic_List_And_List_Different_Value()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"list1 = { 1, 8, 10, 4, 7 };
list2 = { 2, 6, 10, 3, 5, 20 };
list3 = list1 > list2; // { false, true, false, true, true }
list4 = list1 < list2;	// { true, false, false, false, false }
list5 = list1 >= list2; // { false, true, true, true, true }
list6 = list1 <= list2; // { true, false, true, false, false }
list9 = { true, false, true };
list7 = list9 && list5; // { false, false, true }
list8 = list9 || list6; // { true, false, true }";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch333_T06_Logic_List_And_List_Same_Length()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"list1 = { 1, 8, 10, 4, 7 };
list2 = { 2, 6, 10, 3, 5 };
list3 = list1 > list2; // { false, true, false, true, true }
list4 = list1 < list2;	// { true, false, false, false, false }
list5 = list1 >= list2; // { false, true, true, true, true }
list6 = list1 <= list2; // { true, false, true, false, false }
list7 = list3 && list5; // { false, true, false, true, true }
list8 = list4 || list6; // { true, false, true, false, false }
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch334_T07_Logic_Mixed()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"list1 = { 1, 5, 8, 3, 6 };
list2 = { 4, 1, 6, 3 };
list3 = (list1 > 1) && (list2 > list1) || (list2 < 5); // { true, true, false , true }";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch335_T08_Logic_Single_List_And_Value()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"list1 = { 1, 2, 3, 4, 5 };
a = 3;
list2 = a > list1; // { true, true, false, false, false }
list3 = list1 > a; // { false, false, false, true, true }
list4 = a >= list1; // { true, true, true, false, false }
list5 = list1 >= a; // { false, false, true, true, true }
list6 = a < list1; // { false, false, false, true, true }
list7 = list1 < a; // { true, true, false, false, false }
list8 = a <= list1; // { false, false, true, true, true }
list9 = list1 <= a; // { true, true, true, false, false }
list10 = list2 && true; // { true, true, false, false, false }
list11 = false && list2; // { false, false, false, false, false }
list12 = list2 || true; // { true, true, true, true, true }
list13 = false || list2; // { true, true, false, false, false }";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch336_T09_Replication_On_Operators_In_Range_Expr()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"[Imperative]
{
	z5 = 4..1; // { 4, 3, 2, 1 }
	z2 = 1..8; // { 1, 2, 3, ... , 6, 7, 8 }
	z6 = z5 - z2 + 0.3;  // { 3.3, 1.3, -1.7, -2.7 }
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch337_T09_Pass_1_single_list_of_class_type()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class Point_OnX
{
	x : int;
	
	constructor Point_3DCtor(p : Point_3D)
	{
		x = p.x;
	}
}
class Point_3D
{
	x : int;
	y : int;
	z : int;
	
	constructor ValueCtor(_x : int, _y : int, _z : int)
	{
		x = _x;
		y = _y;
		z = _z;
	}
}
list =  {
			Point_3D.ValueCtor(1, 2, 3), 
			Point_3D.ValueCtor(4, 5, 6),
			Point_3D.ValueCtor(7, 8, 9)
		};
		
list2 = Point_OnX.Point_3DCtor(list);
list2_0_x = list2[0].x; // 1
list2_1_x = list2[1].x; // 4
list2_2_x = list2[2].x; // 7";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch338_T10_Pass_2_Lists_Different_Length_2_Integers()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class Point_4D
{
	x : var;
	y : var;
	z : var;
	w : var;
	
	constructor ValueCtor(_x : int, _y : int, _z : int, _w : int)
	{
		x = _x;
		y = _y;
		z = _z;
		w = _w;
	}
	
	def GetValue : int()
	{
		return = x + y + z + w;
	}
}
list1 = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };
list2 = { 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24 };
pointList = Point_4D.ValueCtor(list1, list2, 66, 88);
pointList_0_x = pointList[0].GetValue(); // 166
pointList_5_x = pointList[5].GetValue(); // 176
pointList_9_x = pointList[9].GetValue(); // 184";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch339_T11_Pass_2_lists_of_class_type_same_length_and_1_variable_of_class_type()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class Point_1D
{
	x : int;
	
	constructor ValueCtor(_x : int)
	{
		x = _x;
	}
}
class Point_3D
{
	x : int;
	y : int;
	z : int;
	
	constructor Point_1DCtor(px : Point_1D, py : Point_1D, pz : Point_1D)
	{
		x = px.x;
		y = py.x;
		z = pz.x;
	}
}
p1 = {
		Point_1D.ValueCtor(1),
		Point_1D.ValueCtor(2),
		Point_1D.ValueCtor(3)
	 };
list = Point_3D.Point_1DCtor(p1, p1, Point_1D.ValueCtor(4)); 
list_0_x = list[0].x; // 1
list_1_y = list[1].y; // 2
list_2_z = list[2].z; // 4
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch340_T12_Pass_2_Lists_Same_Length_1_Integer()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class Point_3D
{
	x : var;
	y : var;
	z : var;
	constructor ValueCtor(_x : int, _y : int, _z : int)
	{
		x = _x;
		y = _y;
		z = _z;
	}
	def GetValue : int()
	{
		return = x + y + z;
	}
}
list1 = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };
list2 = { 11, 12, 13, 14, 15, 16, 17, 18, 19, 20 };
pointList = Point_3D.ValueCtor(list1, list2, 99);
pointList_0_x = pointList[0].GetValue(); // 111
pointList_5_x = pointList[5].GetValue(); // 121 
pointList_9_x = pointList[9].GetValue(); // 129";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch341_T13_Pass_3_Lists_Different_Length()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class Point_3D
{
	x : var;
	y : var;
	z : var;
	constructor ValueCtor(_x : int, _y : int, _z : int)
	{
		x = _x;
		y = _y;
		z = _z;
	}
	def GetValue : int()
	{
		return = x + y + z;
	}
}
list1 = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };
list2 = { 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24 };
list3 = { 25, 26, 27, 28, 29, 30 };
pointList = Point_3D.ValueCtor(list1, list2, list3);
pointList_0_x = pointList[0].GetValue(); // 37
pointList_3_x = pointList[3].GetValue(); // 46
pointList_5_x = pointList[5].GetValue(); // 52";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch342_T14_Pass_3_Lists_Same_Length()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class Point_3D
{
	x : var;
	y : var;
	z : var;
	constructor ValueCtor(_x : int, _y : int, _z : int)
	{
		x = _x;
		y = _y;
		z = _z;
	}
	def GetValue : int()
	{
		return = x + y + z;
	}
}
list1 = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };
list2 = { 11, 12, 13, 14, 15, 16, 17, 18, 19, 20 };
list3 = { 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 };
pointList = Point_3D.ValueCtor(list1, list2, list3);
pointList_0_x = pointList[0].GetValue(); // 33
pointList_5_x = pointList[5].GetValue(); // 48
pointList_9_x = pointList[9].GetValue(); // 60";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch343_T15_Pass_a_3x3_and_2x4_lists()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class Point_2D
{
	x : int;
	y : int;
	
	constructor ValueCtor(x1 : int, y1 : int)
	{
		x = x1;
		y = y1;
	}
	
	def GetValue()
	{
		return = x * y;
	}
}
list1 = { { 1, 2, 3 }, { 1, 2, 3 }, { 1, 2, 3 } };
list2 = { { 1, 2, 3, 4 }, { 1, 2, 3, 4 } };
list3 = Point_2D.ValueCtor(list1, list2);
list2_0_0 = list3[0][0].GetValue(); // 1
list2_0_1 = list3[0][1].GetValue(); // 4
list2_0_2 = list3[0][2].GetValue(); // 9
list2_1_0 = list3[1][0].GetValue(); // 1
list2_1_1 = list3[1][1].GetValue(); // 4
list2_1_2 = list3[1][2].GetValue(); // 9
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch344_T16_Pass_a_3x3_List()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class Point_1D
{
	x : int;
	
	constructor ValueCtor(_x : int)
	{
		x = _x;
	}
	
	def GetValue()
	{
		return = x * x;
	}
}
list1 = { { 1, 2, 3 }, { 1, 2, 3 }, { 1, 2, 3 } };
list2 = Point_1D.ValueCtor(list1);
list2_0_0 = list2[0][0].GetValue(); // 1
list2_1_1 = list2[1][1].GetValue(); // 4
list2_2_2 = list2[2][2].GetValue(); // 9
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch345_T17_Pass_ConstructorCall_Return_List()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class Point_1D
{
	x : int;
	
	constructor ValueCtor(_x : int)
	{
		x = _x;
	}
}
class Point_3D
{
	x : int;
	y : int;
	z : int;
	
	constructor PointOnXCtor(p : Point_1D)
	{
		x = p.x;
		y = 0;
		z = 0;
	}
	
	def GetIndexX()
	{
		return = x * x;
	}
}
list1 = { 1, 2, 3, 4, 5 };
list2 = Point_3D.PointOnXCtor(Point_1D.ValueCtor(list1));
list2_0 = list2[0].GetIndexX(); // 1
list2_3 = list2[3].GetIndexX(); // 16
list2_4 = list2[4].GetIndexX(); // 25
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch346_T18_Pass_ConstructorCall_Return_List_to_Function()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class Point_1D
{
	x : var;
	
	constructor ValueCtor(_x : int)
	{
		x = _x;
	}
}
def GetPointIndex : int(p : Point_1D)
{
	return = p.x;
}
list1 = { 1, 2, 3, 4, 5, 6 };
list2 = GetPointIndex(Point_1D.ValueCtor(list1)); // { 1, 2, 3, 4, 5, 6 }
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch347_T19_Pass_FunctionCall_Return_List()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"def foo : int(a : int)
{
	return = a * a;
}
class Point_1D
{
	x : int;
	
	constructor ValueCtor(_x : int)
	{
		x = _x;
	}
	
	def GetIndex()
	{
		return = x * x;
	}
}
list1 = { 1, 2, 3, 4, 5 };
list2 = Point_1D.ValueCtor(foo(foo(list1)));
list2_0 = list2[0].GetIndex(); // 1
list2_3 = list2[3].GetIndex(); // 65536
list2_4 = list2[4].GetIndex(); // 390625";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch348_T20_Pass_Single_List()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class Point_1D
{
	x : var;
	constructor ValueCtor(_x : int)
	{
		x = _x;
	}
	def GetValue : int()
	{
		return = x * x;
	}
}
list1 = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };
pointList = Point_1D.ValueCtor(list1);
pointList_0_x = pointList[0].GetValue(); // 1
pointList_5_x = pointList[5].GetValue(); // 36
pointList_9_x = pointList[9].GetValue(); // 100";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch349_T21_Pass_Single_List_2_Integer()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class Point_3D
{
	x : var;
	y : var;
	z : var;
	constructor ValueCtor(_x : int, _y : int, _z : int)
	{
		x = _x;
		y = _y;
		z = _z;
	}
	def GetValue : int()
	{
		return = x + y + z;
	}
}
list1 = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };
pointList = Point_3D.ValueCtor(list1, 66, 88);
pointList_0_x = pointList[0].GetValue(); // 155
pointList_5_x = pointList[5].GetValue(); // 160
pointList_9_x = pointList[9].GetValue(); // 164";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch350_T22_Pass_1_single_list_of_class_type_and_1_variable_of_class_type()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class Integer
{
	value : int;
	
	constructor ValueCtor(_value : int)
	{
		value = _value;
	}
	
	def Mul : int(i1 : Integer, i2 : Integer)
	{
		return = i1.value * value * i2.value;
	}
}
list = {
			Integer.ValueCtor(4),
			Integer.ValueCtor(5),
			Integer.ValueCtor(7)
		};
i = Integer.ValueCtor(2);
m = i.Mul(list, i); // { 16, 20, 28 }";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch351_T23_Pass_2_lists_of_class_type_with_different_length()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class Integer
{
	value : int;
	
	constructor ValueCtor(_value : int)
	{
		value = _value;
	}
	
	def Mul : int(i1 : Integer, i2 : Integer)
	{
		return = i1.value * value * i2.value;
	}
}
list1 = {
			Integer.ValueCtor(4),
			Integer.ValueCtor(5),
			Integer.ValueCtor(7)
		};
list2 = { 
			Integer.ValueCtor(1),
			Integer.ValueCtor(2)
		};
		
i = Integer.ValueCtor(2);
m = i.Mul(list1, list2); // { 8, 20 }";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch352_T24_Pass_3x3_List_And_2x4_List()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class Math
{
	a : int;
	
	constructor ValueCtor(_a : int)
	{	
		a = _a;
	}
	
	def Div : int(num1 : int, num2 : int)
	{
		return = (num1 + num2) / a;
	}
}
list1 = { { 1, 2, 3 }, { 4, 5, 6 }, { 7, 8, 9 } };
list2 = { { 1, 2, 3, 4 }, { 5, 6, 7, 8 } };
m = Math.ValueCtor(2);
list3 = m.Div(list1, list2);  // { { 1, 2, 3 }, { 4, 5, 6 } }
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch353_T25_Pass_3_List_Different_Length()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class Math
{
	a : int;
	
	constructor ValueCtor(_a : int)
	{	
		a = _a;
	}
	
	def Div : int(num1 : int, num2 : int, num3 : int)
	{
		return = (num1 + num2 + num3) / a;
	}
}
list1 = { 1, 2, 3, 4, 5, 6, 7 };
list2 = { 1, 2, 3, 4, 5 };
list3 = { 1, 2, 3, 4, 5, 6, 7, 8, 9 };
m = Math.ValueCtor( 2 ); 
list4 = m.Div(list1, list2, list3); // { 1.5,3.0,4.5,6.0,7.5} }";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch354_T26_Pass_3_List_Different_Length_2_Integers()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class Math
{
	a : int;
	
	constructor ValueCtor(_a : int)
	{	
		a = _a;
	}
	
	def Div : int(num1 : int, num2 : int, num3 : int, num4 : int, num5 : int)
	{
		return = (num1 + num2 + num3 + num4 + num5) / a;
	}
}
list1 = { 10, 11, 12, 13, 14, 15, 16 };
list2 = { 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 };
list3 = { 30, 31, 32, 33, 34 };
m = Math.ValueCtor(4); 
listX2 = m.Div(list1, list2, list3, 15, 25); // { 25, 25, 26, 27, 28 }";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch355_T27_Pass_3_List_Same_Length()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class Math
{
	a : int;
	
	constructor ValueCtor(_a : int)
	{	
		a = _a;
	}
	
	def Mul : int(num1 : int, num2 : int, num3 : int)
	{
		return = (num1 + num2 + num3) * a;
	}
}
list1 = { 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 };
list2 = { 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 };
list3 = { 11, 12, 13, 14, 15, 16, 17, 18, 19, 20 };
m = Math.ValueCtor(4); 
list4 = m.Mul(list1, list2, list3); // { 252, 264, 276, 288, 300, 312, 324, 336, 348, 360 }";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch356_T28_Pass_3_List_Same_Length_2_Integers()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class Math
{
	a : int;
	
	constructor ValueCtor(_a : int)
	{	
		a = _a;
	}
	
	def Div : int(num1 : int, num2 : int, num3 : int, num4 : int, num5 : int)
	{
		return = (num1 + num2 + num3 + num4 + num5) / a;
	}
}
list1 = { 10, 11, 12, 13, 14 };
list2 = { 20, 21, 22, 23, 24 };
list3 = { 30, 31, 32, 33, 34 };
m = Math.ValueCtor(4); 
list2 = m.Div(list1, list2, list3, 15, 25);";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch357_T29_Pass_FunctionCall_Reutrn_List001()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class Math
{
	a : int;
	
	constructor ValueCtor(_a : int)
	{	
		a = _a;
	}
	
	def Mul : int(num : int)
	{
		return = num * a;
	}
}
list1 = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };
m = Math.ValueCtor(10);
list2 = m.Mul(m.Mul(list1));  // { 100, 200, 300, 400, 500, 600, 700, 800, 900, 1000 }";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch358_T30_Pass_FunctionCall_Reutrn_List002()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class Math
{
	a : int;
	
	constructor ValueCtor(_a : int)
	{	
		a = _a;
	}
	
	def Mul : int(num : int)
	{
		return = num * a;
	}
}
def foo : int (a : int)
{
	return = a * a;
}
list1 = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };
m = Math.ValueCtor(10);
list2 = m.Mul(foo(list1));  // { 10, 40, 90, 160, 250, 360, 490, 640, 810, 1000 }";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch359_T31_Pass_FunctionCall_Reutrn_List003()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class Math
{
	a : int;
	
	constructor ValueCtor(_a : int)
	{	
		a = _a;
	}
	
	def Mul : int(num : int)
	{
		return = num * a;
	}
}
def foo : int (a : int)
{
	return = a * a;
}
list1 = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };
m = Math.ValueCtor(10);
list2 = foo(m.Mul(list1));  // { 100, 400, 900, 1600, 2500, 3600, 4900, 6400, 8100, 10000 }";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch360_T32_Pass_Single_3x3_List()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class Math
{
	a : int;
	
	constructor ValueCtor(_a : int)
	{	
		a = _a;
	}
	
	def Mul : int(num : int)
	{
		return = num * a;
	}
}
list1 = { { 1, 2, 3 }, { 4, 5, 6 }, { 7, 8, 9 } };
m = Math.ValueCtor(10);
list2 = m.Mul(list1);  // { { 10, 20, 30 }, { 40, 50, 60 }, { 70, 80, 90 } }";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch361_T33_Pass_Single_List()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class Math
{
	a : double;
	
	constructor ValueCtor(_a : double)
	{	
		a = _a;
	}
	
	def Mul : double(num : double)
	{
		return = num * a;
	}
}
list1 = { 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0 };
m = Math.ValueCtor(10.0);
list2 = m.Mul(list1);  // { 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 }";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch362_T34_Pass_Single_List_2_Integers()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class Math
{
	a : int;
	
	constructor ValueCtor(_a : int)
	{	
		a = _a;
	}
	
	def Mul : int(num1 : int, num2 : int, num3 : int)
	{
		return = (num1 + num2 + num3) * a;
	}
}
list1 = { 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 };
m = Math.ValueCtor(5);
list2 = m.Mul(list1, 12, 17); // {300,305,310,315,320,325,330,335,340,345}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch363_T35_Pass_1_list_of_class_type_and_1_variable_of_class_type()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class Point_3D
{
	x : int;
	y : int;
	z : int;
	
	constructor ValueCtor(_x : int, _y : int, _z : int)
	{
		x = _x;
		y = _y;
		z = _z;
	}
	
	def GetCoor(type : int)
	{
		return = type == 1 ? x : type == 2 ? y : z;
	}
}
def GetMidPoint : Point_3D(p1 : Point_3D, p2 : Point_3D)
{
	return = Point_3D.ValueCtor(	
									(p1.GetCoor(1) + p2.GetCoor(1)), 
									(p1.GetCoor(2) + p2.GetCoor(2)), 
									(p1.GetCoor(3) + p2.GetCoor(3)) 
								);
}
list1 = { 
			Point_3D.ValueCtor(1, 2, 3),
			Point_3D.ValueCtor(4, 5, 6),
			Point_3D.ValueCtor(7, 8, 9)
		};
var2 = Point_3D.ValueCtor(10, 10, 10);
list3 = GetMidPoint(list1, var2);
list3_0_x = list3[0].GetCoor(1); // 11
list3_1_y = list3[1].GetCoor(2); // 15
list3_2_z = list3[2].GetCoor(3); // 19
			";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch364_T36_Pass_1_single_list_of_class_type()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class Integer
{
	value : int;
	
	constructor ValueCtor(_value : int)
	{
		value = _value;
	}
}
def Square : int(i : Integer)
{
	return = i.value * i.value;
}
list = 	{
			Integer.ValueCtor(2),
			Integer.ValueCtor(3),
			Integer.ValueCtor(4),
			Integer.ValueCtor(5)
		};
		
list2 = Square(list); // { 4, 9, 16, 25 }";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch365_T37_Pass_2_lists_of_class_type_different_length()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class Point_3D
{
	x : int;
	y : int;
	z : int;
	
	constructor ValueCtor(_x : int, _y : int, _z : int)
	{
		x = _x;
		y = _y;
		z = _z;
	}
	
	def GetCoor(type : int)
	{
		return = type == 1 ? x : type == 2 ? y : z;
	}
}
def GetMidPoint : Point_3D(p1 : Point_3D, p2 : Point_3D)
{
	return = Point_3D.ValueCtor(	
									(p1.GetCoor(1) + p2.GetCoor(1)), 
									(p1.GetCoor(2) + p2.GetCoor(2)), 
									(p1.GetCoor(3) + p2.GetCoor(3)) 
								);
}
list1 = { 
			Point_3D.ValueCtor(1, 2, 3),
			Point_3D.ValueCtor(4, 5, 6),
			Point_3D.ValueCtor(7, 8, 9)
		};
list2 = {
			Point_3D.ValueCtor(10, 10, 10),
			Point_3D.ValueCtor(20, 20, 20)
		};
list3 = GetMidPoint(list1, list2);
list3_0_x = list3[0].GetCoor(1); // 11
list3_1_y = list3[1].GetCoor(2); // 25
			";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch366_T38_Pass_2_lists_of_class_type_different_length_and_1_integer()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class Integer
{
	value : int;
	constructor ValueCtor(_value : int)
	{
		value =  _value;
	}
}
def Sum : int(i1 : Integer, i2 : Integer, i3 : int)
{
	return = i1.value + i2.value + i3;
}
list1 = {
			Integer.ValueCtor(2),
			Integer.ValueCtor(5),
			Integer.ValueCtor(8)
		};
list2 = {
			Integer.ValueCtor(3),
			Integer.ValueCtor(6),
			Integer.ValueCtor(9),
			Integer.ValueCtor(12)
		};
list3 = Sum(list1, list2, 10); // { 15, 21, 27 }";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch367_T39_Pass_2_lists_of_class_type_same_length_and_1_variable_of_class_type()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class Integer
{
	value : int;
	constructor ValueCtor(_value : int)
	{
		value =  _value;
	}
}
def Sum : int(i1 : Integer, i2 : Integer, i3 : Integer)
{
	return = i1.value + i2.value + i3.value;
}
list1 = {
			Integer.ValueCtor(2),
			Integer.ValueCtor(5),
			Integer.ValueCtor(8)
		};
list2 = {
			Integer.ValueCtor(3),
			Integer.ValueCtor(6),
			Integer.ValueCtor(9)
		};
list3 = Sum(list1, list2, Integer.ValueCtor(10)); // { 15, 21, 27 }";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch368_T40_Pass_2_List_of_class_type_Same_Length()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class Point_3D
{
	x : var;
	y : var;
	z : var;
	
	constructor ValueCtor(_x : int, _y : int, _z : int)
	{
		x = _x;
		y = _y;
		z = _z;
	}
	
	def GetCoor(type : int)
	{
		return = type == 1 ? x : type == 2 ? y : z;
	}
}
def GetMidPoint : Point_3D(p1 : Point_3D, p2 : Point_3D)
{
	return = Point_3D.ValueCtor(	
									(p1.GetCoor(1) + p2.GetCoor(1)), 
									(p1.GetCoor(2) + p2.GetCoor(2)), 
									(p1.GetCoor(3) + p2.GetCoor(3)) 
								);
}
list1 = { 
			Point_3D.ValueCtor(1, 2, 3),
			Point_3D.ValueCtor(4, 5, 6),
			Point_3D.ValueCtor(7, 8, 9)
		};
list2 = { 
			Point_3D.ValueCtor(10, 11, 12),
			Point_3D.ValueCtor(13, 14, 15),
			Point_3D.ValueCtor(16, 17, 18)
		};
list3 = GetMidPoint(list1, list2);
list3_0_x = list3[0].GetCoor(1); // 11
list3_1_y = list3[1].GetCoor(2); // 19
list3_2_z = list3[2].GetCoor(3); // 27
			";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch369_T41_Pass_3x3_List_And_2x4_List()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"def foo : int(a : int, b : int)
{
	return = a * b;
}
list1 = { { 1, 2, 3 }, { 4, 5, 6 }, { 7, 8, 9 } };
list2 = { { 1, 2, 3, 4 }, { 5, 6, 7, 8 } };
list3 = foo(list1, list2); // { { 1, 4, 9 }, { 20, 30, 42 } }
x = list3[0];
y = list3[1];";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch370_T42_Pass_3_List_Different_Length()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"def foo : int(a : int, b : int, c : int)
{
	return = a * b - c;
}
list1 = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };
list2 = { 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, -1, -2, -3 };
list3 = {1, 4, 7, 2, 5, 8, 3 };
list4 = foo(list1, list2, list3); // { 9, 14, 17, 26, 25, 22, 25 }";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch371_T43_Pass_3_List_Different_Length_2_Integers()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"def foo : int(a : int, b : int, c : int, d : int, e : int)
{
	return = a * b - c / d + e;
}
list1 = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };
list2 = { 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, -1, -2, -3 };
list3 = {1, 4, 7, 2, 5, 8, 3 };
list4 = foo(list1, list2, list3, 4, 23);";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch372_T44_Pass_3_List_Same_Length()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"def foo : int(a : int, b : int, c : int)
{
	return = a * b - c;
}
list1 = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };
list2 = { 10, 9, 8, 7, 6, 5, 4, 3, 2, 1 };
list3 = {1, 4, 7, 2, 5, 8, 3, 6, 9, 0 };
list4 = foo(list1, list2, list3); // { 9, 14, 17, 26, 25, 22, 25, 18, 9, 10 }";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch373_T45_Pass_3_List_Same_Length_2_Integers()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"def foo : int(a : int, b : int, c : int, d : int, e : int)
{
	return = a * b - c * d + e;
}
list1 = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };
list2 = { 10, 9, 8, 7, 6, 5, 4, 3, 2, 1 };
list3 = {1, 4, 7, 2, 5, 8, 3, 6, 9, 0 };
list4 = foo(list1, list2, list3, 26, 43); // { 27, -43, -115, 19, -57, -135, -7, -89, -173, 53 }  ";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch374_T46_Pass_FunctionCall_Reutrn_List()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"def foo : int(a : int)
{
	return = a * a;
}
list1 = { 1, 2, 3, 4, 5 };
list3 = foo(foo(foo(list1))); // { 1, 256, 6561, 65536, 390625 }";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch375_T47_Pass_Single_3x3_List()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"def foo : int(a : int)
{
	return = a * a;
}
list1 = { { 1, 2, 3 }, { 4, 5, 6 }, { 7, 8, 9 } };
list2 = foo(list1); // { { 1, 4, 9 }, { 16, 25, 36 }, { 49, 64, 81 } }
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch376_T48_Pass_Single_List()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"def foo : int(num : int)
{
	return = num * num;
}
list1 = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };
list2 = foo(list1);  // { 1, 4, 9, 16, 25, 36, 49, 64, 81, 100 }";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch377_T49_Pass_Single_List_2_Integers()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"def foo : int(num : int, num2 : int, num3 : int)
{
	return = num * num2 - num3;
}
list1 = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };
list2 = foo(list1, 34, 18); // { 16, 50, 84, 118, 152, 186, 220, 254, 288, 322 }";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch378_T50_Defect_1456738_Replication_Race_Condition()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"//import ( ""Math.dll"");
class Math
{
   static def Sin ( x1 : double)
   {
       return = x1;
   }
}
// dimensions of the roof in each direction
//
xSize = 10;
ySize = 20;
// number of Waves in each direction
//
xWaves = 1;
yWaves = 3;
// number of points per Wave in each direction\
//
xPointsPerWave = 10;
yPointsPerWave = 10;
// amplitudes of the frequencies (z dimension)
//
lowFrequencyAmpitude = 1.0; // only ever a single low frequency wave
highFrequencyAmpitude = 0.75; // user controls the number and amplitude of high frequency waves 
// dimensions of the beams
//
radius = 0.1;
roofWallHeight = 0.3; // not used
roofWallThickness = 0.1; // not used
// calculate how many 180 degree cycles we need for the Waves
//
x180ToUse = xWaves==1?xWaves:(xWaves*2)-1;
y180ToUse = yWaves==1?yWaves:(yWaves*2)-1;
// count of total number of points in each direction
//
xCount = xPointsPerWave*xWaves;
yCount = yPointsPerWave*yWaves;
xHighFrequency = Math.Sin(0..(180*x180ToUse)..#xCount)*highFrequencyAmpitude;
xLowFrequency = Math.Sin(-5..185..#xCount)*lowFrequencyAmpitude;
yHighFrequency = Math.Sin(0..(180*y180ToUse)..#yCount)*highFrequencyAmpitude;
yLowFrequency = Math.Sin(-5..185..#yCount)*lowFrequencyAmpitude;
sinRange = {0.0, 10, 20, 30, 40 ,50, 60 ,70 ,80 , 90 ,100, 110 ,120, 130, 140, 150, 160, 170};
xHighFrequency = Math.Sin(sinRange) * highFrequencyAmpitude;
y = Count(xHighFrequency);";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch379_T50_Replication_Imperative_Scope()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"c;
[Imperative]
{
	def even : int (a : int) 
	{	
		if(( a % 2 ) > 0 )
			return = a + 1;		
		else 
			return = a;
		
		return = 0;
	}
    x = { 1, 2, 3 };
	c = even(x);
	
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch380_T50_1_of_3_Exprs_is_List()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"list1 = { true, false, true, false, true };
list2 = list1 ? 1 : 0; // { 1, 0, 1, 0, 1 }
list3 = true ? 10 : list2; // { 10, 10, 10, 10, 10 }
list4 = false ? 10 : list2; // { 1, 0, 1, 0, 1 }
a = { 1, 2, 3, 4, 5 };
b = {5, 4, 3, 2, 1 };
c = { 4, 3, 2, 1 };
list5 = a > b ? 1 : 0; // { 0, 0, 0, 1, 1 }
list6 = c > a ? 1 : 0; // { 1, 1, 0, 0 }";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch381_T51_2_of_3_Exprs_are_Lists_Different_Length()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"list1 = { 1, 2, 3, 4, 5 };
list2 = { true, false, true, false };
list3 = list2 ? list1 : 0; // { 1, 0, 3, 0 }
list4 = list2 ? 0 : list1; // { 0, 2, 0, 4 }
list5 = { -1, -2, -3, -4, -5, -6 };
list6 = true ? list1 : list5; // { 1, 2, 3, 4, 5 }
list7 = false ? list1 : list5; // { -1, -2, -3, -4, -5 }  
a = { 1, 2, 3, 4 };
b = { 5, 4, 3, 2, 1 };
c = { 1, 4, 7 };
list8 = a >= b ? a + c : 10; // { 10, 10, 10 }
list9 = a < b ? 10 : a + c; // { 10, 10, 10 }";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch382_T52_2_of_3_Exprs_are_Lists_Same_Length()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"list1 = { 1, 2, 3, 4, 5 };
list2 = { true, false, true, false, true };
list3 = list2 ? list1 : 0; // { 1, 0, 3, 0, 5 }
list4 = list2 ? 0 : list1; // { 0, 2, 0, 4, 0 }
list5 = true ? list3 : list4; // { 1, 0, 3, 0, 5 }
list6 = true ? list4 : list3; // {0, 2, 0, 4, 0 }
a = { 1, 2, 3, 4, 5 };
b = { 5, 4, 3, 2 };
list7 = a > b ? a + b : 10; // { 10, 10, 10, 6 }
list8 = a <= b ? 10 : a + b; // { 10, 10, 10, 6 }";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch383_T53_3_of_3_Exprs_are_different_dimension_list()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"a = { { 1, 2, 3 }, { 4, 5, 6 } };
b = { { 1, 2 },  { 3, 4 }, { 5, 6 } };
c = { { 1, 2, 3, 4 }, { 5, 6, 7, 8 }, { 9, 10, 11, 12 } };
list = a > b ? b + c : a + c; // { { 2, 4, }, { 8, 10 } } ";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch384_T54_3_of_3_Exprs_are_Lists_Different_Length()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"list1 = { true, false, true, true, false };
list2 = { 1, 2, 3, 4 };
list3 = { -1, -2, -3, -4, -5, -6 };
list4 = list1 ? list2 : list3; // { 1, -2, 3, 4 }
list5 = !list1 ? list2 : list4; // { 1, 2, 3, 4 }
list6 = { -1, -2, -3, -4, -5 };
list7 = list1 ? list2 : list6; // { 1, -2, 3, 4 }
a = { 3, 0, -1 };
b = { 2, 1, 0, 3 };
c = { -2, 4, 1, 2, 0 };
list8 = a < c ? b + c : a + c; // { 1, 4, 1 }";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch385_T55_3_of_3_Exprs_are_Lists_Same_Length()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"list1 = { true, false, false, true };
list2 = { 1, 2, 3, 4 };
list3 = { -1, -2, -3, -4 };
list4 = list1 ? list2 : list3; // { 1, -2, -3, 4 }
list5 = !list1 ? list2 : list3; // { -1, 2, 3, -4 }
a = { 1, 4, 7 };
b = { 2, 8, 5 };
c = { 6, 9, 3 };
list6 = a > b ? b + c : b - c; // { -4, -1, 8 }";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch386_T56_UnaryOperator()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"list1 = { true, true, false, false, true, false };
list2 = !list1; // { false, false, true, true, false, true }
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch387_T001_Simple_Update()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"a = 1;
b = a + 1;
a = 2;";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch388_T002_Update_Collection()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"a = 0..4..1;
b = a;
c = b[2];
a = 10..14..1;
b[2] = b[2] + 1;
a[2] = a[2] + 1;";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch389_T003_Update_In_Function_Call()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"def foo1 ( a : int ) 
{
    return = a + 1;
}
def foo2 ( a : int[] ) 
{
    a[0] = a[1] + 1;
	return = a;
}
def foo3 ( a : int[] ) 
{
    b = a;
	b[0] = b[1] + 1;
	return = b;
}
a = 0..4..1;
b = a[0];
c = foo1(b);
d = foo2(a);
e1 = foo3(a);
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch390_T004_Update_In_Function_Call_2()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"def foo1 ( a : int ) 
{
    return = a + 1;
}
def foo3 ( a : int[] ) 
{
    b = a;
	b[0] = b[1] + 1;
	return = b;
}
a = 0..4..1;
b = a[0];
c = foo1(b);
e1 = foo3(a);
a = 10..14..1;
a[1] = a[1] + 1;";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch391_T005_Update_In_collection()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"a=1;
b=2;
c=4;
collection = {a,b,c};
collection[1] = collection[1] + 0.5;
d = collection[1];
d = d + 0.1; // updates the result of accessing the collection
b = b + 0.1; // updates the source member of the collection";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch392_T006_Update_In_Class()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class Point
{
    X : double;
	Y : double;
	Z : double;
	
	constructor ByCoordinates( x : double, y : double, z : double )
	{
	    X = x;
		Y = y;
		Z = z;		
	}
}
class Line
{
    P1 : Point;
	P2 : Point;
	
	constructor ByStartPointEndPoint( p1 : Point, p2 : Point )
	{
	    P1 = p1;
		P2 = p2;
	}
	
	def PointAtParameter (p : double )
	{
	
	    t1 = P1.X + ( p * (P2.X - P1.X) );
		return = Point.ByCoordinates( t1, P1.Y, P1.Z);
	    
	}
	
}
startPt = Point.ByCoordinates(1, 1, 0);
endPt   = Point.ByCoordinates(1, 5, 0);
line_0  = Line.ByStartPointEndPoint(startPt, endPt); 	// create line_0
//startPt = Point.ByCartesianCoordinates((1..5..1), 1, 0); // with range expression
//endPt   = Point.ByCartesianCoordinates((1..5..1), 5, 0); // with range expression.. but line does not replicate
//line_0  = Line.ByStartPointEndPoint(startPt<1>, endPt<2>); 	// add replication guides <1> <2>
startPt2 = [Imperative]
{
    x2 = 1..5..1;
	p2 = 0..0..#5;
	c2 = 0;
	for (i in x2 )
	{
	    p2[c2] = Point.ByCoordinates(i, 1, 0);		
		c2 = c2 + 1;
	}
	return = p2;
}
endPt2 = [Imperative]
{
    x2 = 11..15..1;
	p2 = 0..0..#5;
	c2 = 0;
	for (i in x2 )
	{
	    p2[c2] = Point.ByCoordinates(i, 5, 0);		
		c2 = c2 + 1;
	}
	return = p2;
}
line_0 = [Imperative]
{    
	p2 = 0..0..#25;
	c2 = 0;
	for (i in startPt2 )
	{
	    for ( j in endPt2 )
		{
		    p2[c2] = Line.ByStartPointEndPoint(i, j);
			c2 = c2 + 1;
		}
			
	}
	return = p2;
}
x1_start = line_0[0].P1.X;
x1_end = line_0[0].P2.X;
x5_start = line_0[4].P1.X;
x5_end = line_0[4].P2.X;
//line_0  = Line.ByStartPointEndPoint(startPt, endPt); 		// remove replication guides
line_0 = [Imperative]
{    
	p2 = 0..0..#5;
	c2 = 0;
	for (i in startPt2 )
	{
	    p2[c2] = Line.ByStartPointEndPoint(startPt2[c2], endPt2[c2]);
		c2 = c2 + 1;
			
	}
	return = p2;
}
//startPt = Point.ByCoordinates(1, 1, 0); // go back to single line
//endPt   = Point.ByCoordinates(1, 5, 0);
//line_0  = Line.ByStartPointEndPoint(startPt, endPt); 	// create line_0 as a singleton again
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch393_T007_Update_In_Class()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"def sin ( a : double ) = 0.5 * a;
def cos ( a : double ) = 0.5 * a;
def atan ( a : double ) = 0.5 * a;
def sqrt ( a : double ) = 0.5 * a;
class Point
{
    X : double;
	Y : double;
	Z : double;
	
	public constructor ByCartesianCoordinates( xValue : double , yValue : double, zValue : double )
    {
		X = xValue; 			
		Y = yValue;
		Z = zValue;
	}
}
class MyPoint 
{
	// define general system of dependencies
	
	x : double = radius * cos(theta*180/180); // x dependent on theta and radius
	y : double = radius * sin(theta*180/180); // y dependent on theta and radius
	z : double = 0.0;
											
	theta :double = 3.0;//atan(y/x) * 180 / 180;		 	 // theta  dependent on x and y
	radius :double = 4.0;//sqrt(x*x + y*y);				 // radius dependent on x and y
	
	inner  : Point = Point.ByCartesianCoordinates(x,y,z);	 // create inner point dependent on x and y
	
    public constructor ByXYcoordinates(xValue : double , yValue : double)
    {
		x = xValue; 			// assigning argument values to specific properties
		y = yValue; 			// overrides defaut graph and triggers remianing depenencies
								// we don't need to add in the statemenst to recompute theta and radius
								// this will happen 'automatically', because of the dependencies
								// defined in the body of the class
	}
	
	public constructor ByAngleRadius(thetaValue : double , radiusValue : double)
    {
		theta  = thetaValue;	// assigning argument values to specific properties
		radius = radiusValue; 	// overrides defaut graph and triggers remaining depenencies								// we don't need to add in the statemenst to recompute theta and radius
								// we don't need to add in the statemenst to recompute x and y
								// this will happen 'automatically', because of the dependencies
								// defined in the body of the class
	}
	
	// add 'incremental' modifiers
	
	def incrementX(this : MyPoint, xValue : double) = ByXYcoordinates(this.x + xValue, this.y);
	def incrementY(this : MyPoint, yValue : double) = ByXYcoordinates(this.x,this.y + yValue);
	def incrementTheta(this : MyPoint, thetaValue : double)  = ByAngleRadius(this.theta + thetaValue, this.radius );
	def incrementRadius(this : MyPoint, radiusValue : double)= ByAngleRadius(this.theta, this.radius + radiusValue );
}
a 		= MyPoint.ByXYcoordinates(1.0, 1.0);			// create an instance 'a' using one constructor
origin  = Point.ByCartesianCoordinates(WCS, 0,0,0);  				// create a reference point
testLine= Line.ByStartPointEndPoint(origin, a.inner);	// create a testLine (to see some results)
aX 		= a.x;											// report the properties of 'a'
aY 		= a.y;
aTheta 	= a.theta;
aRadius = a.radius;
a 		= MyPoint.ByAngleRadius(60.0, 1.0);				// switch to a different constructor [POINT updates]
//a		= a.visible(false); 
a 		= a.incrementX(0.2);							// apply different modifiers [POINT does not updates]
//a		= a.visible(false);
a 		= a.incrementY(-0.2);							// apply different modifiers [POINT does not updates]
a 		= MyPoint.ByAngleRadius(45.0, 0.75);			// redefine a (by using a constructor) [POINT updates]
//a		= a.visible(false);
a 		= a.incrementTheta(10.0);						// apply different modifiers [POINT does not updates]
//a		= a.visible(false);
a 		= a.incrementRadius(0.2); 						// [POINT does not updates]
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch394_T008_Update_Of_Variables()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class A 
{
    a : var;
	constructor A ( )
	{
	    a = 5;
	}
}
a = 1;
b = a + 1;
a = 2;
t1 = { 1, 2 };
t2 = t1 [0] + 1;
t1 = 5.5;
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch395_T009_Update_Of_Undefined_Variables()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"u1 = u2;
u2 = 3;
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch396_T010_Update_Of_Singleton_To_Collection()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"s1 = 3;
s2 = s1 -1;
s1 = { 3, 4 } ;";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch397_T011_Update_Of_Variable_To_Null()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"x = 1;
y = 2/x;
x = 0;
v1 = 2;
v2 = v1 * 3;
v1 = null;";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch398_T012_Update_Of_Variables_To_Bool()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"p1 = 1;
p2 = p1 * 2;
p1 = false;
q1 = -3.5;
q2 = q1 * 2;
q1 = true;
s1 = 1.0;
s2 = s1 * 2;
s1 = false;
t1 = -1;
t2 = t1 * 2;
t1 = true;
r1 = 1;
r2 = r1 * 2;
r1 = true;
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch399_T013_Update_Of_Variables_To_User_Defined_Class()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class A 
{
    a : var;
	constructor A ( )
	{
	    a = 5;
	}
}
r1 = 2.0;
r2 = r1+1;
r1 = A.A();
t1 = { 1, 2 };
t2 = t1 [0] + 1;
t1 = A.A();
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch400_T014_Update_Of_Class_Properties()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class A 
{
    a : var;
	constructor A ( x)
	{
	    a = x;
	}
}
x = 3;
a1 = A.A(x);
b1 = a1.a;
x = 4;
c1 = b1;
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch401_T015_Update_Of_Class_Properties()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class A 
{
    a : int[];
	constructor A ( x : int[])
	{
	    a = x;
	}
}
x = { 3, 4 } ;
a1 = A.A(x);
b1 = a1.a;
x[0] = x [0] + 1;
c1 = b1;
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch402_T016_Update_Of_Variable_Types()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class A 
{
    a : int;
	constructor A ( x : int)
	{
	    a = x;
	}
}
x = { 3, 4 } ;
y = x[0] + 1;
x =  { 3.5, 4.5 } ;
x =  { A.A(1).a, A.A(2).a } ;";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch403_T017_Update_Of_Class_Instances()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class Point
{
    X : double;
		
    public constructor ByCoordinates( xValue : double  )
    {
	X = xValue; 			
    }
}
class Line
{
    P1 : Point;
    P2 : Point;
		
    public constructor ByStartPointEndPoint( p1 : Point, p2:Point  )
    {
	P1 = p1;
	P2 = p2;		
    }
}
class MyPoint 
{
    // define general system of dependencies
    x : double = 1; 
    y : double = 2;	
    inner  : Point = Point.ByCoordinates(0);	 // create inner point dependent on x and y
	
    public constructor ByXYcoordinates(xValue : double )
    {
	x = xValue; 			
	inner = Point.ByCoordinates(x);
    }
	
    public constructor ByAngleRadius(y1 : double)
    {
	y = y1;	
	inner = Point.ByCoordinates(y);
    }
	
    // add 'incremental' modifiers
    def incrementX(xValue : double) = ByXYcoordinates(x + xValue);
    def incrementY(yValue : double) = ByAngleRadius(y + yValue);	
}
a 	 = MyPoint.ByXYcoordinates(1.0);                // create an instance 'a' using one constructor
origin   = Point.ByCoordinates(0);  	                // create a reference point
testLine = Line.ByStartPointEndPoint(origin, a.inner);	// create a testLine (to see some results)
aX 	 = a.x;						// report the properties of 'a'
aY 	 = a.y;
aP 	 = a.inner;
// test update
a 	 = MyPoint.ByAngleRadius(2.5);		      	    
a 	 = a.incrementX(3.0);							   
a 	 = MyPoint.ByAngleRadius(5.0);					        
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch404_T018_Update_Inside_Class_Constructor()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class Point
{
    X : double;
    Y : double;
    
    public constructor ByXCoordinates( xValue : double  )
    {
	X = xValue;
	Y = X + 1;
	X = X + 1;        	
    }
    
    def addandIncr()
    {
        X = X + 1;
	Y = X + 1;
	X = X + 1;
	return = X + Y;
    }
}
p1 = Point.ByXCoordinates( 1 );
x1 = p1.X;
y1 = p1.Y;
z = p1.addandIncr();
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch405_T018_Update_Inside_Class_Constructor_2()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class Point
{
    X : double;
    Y  =  X + 1;
    
    public constructor ByXCoordinates( xValue : double  )
    {
	X = xValue;
	X = X + 1;        	
    }
    
    def addandIncr()
    {
        X = X + 1;
	X = X + 1;
	return = X + Y;
    }
}
p1 = Point.ByXCoordinates( 1 );
x1 = p1.X;
y1 = p1.Y;
z = p1.addandIncr();
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch406_T019_Update_General()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"X = 1;
Y = X + 1;
X = X + 1;
X = X + 1;
//Y = X + 1;
//X  = X + 1;
test = X + Y;
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch407_T020_Update_Inside_Class_Constructor()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class Point
{
    X : double;
    Y : double;
    
    public constructor ByXCoordinates( xValue : double  )
    {
	X = xValue;
	Y = X + 1;
	X = X + 1;        	
    }
    
    def addandIncr()
    {
        X = X + 1;
	Y = X + 1;
	X = X + 1;
	return = X + Y;
    }
}
a = 0;
p1 = Point.ByXCoordinates( a );
x1 = p1.X;
y1 = p1.Y;
z = p1.addandIncr();
a = a + 1;
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch408_T021_Update_Inside_Class_Constructor()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"def foo ( x )
{
    return = x + 1;
}
class Point
{
    X : double;
    Y : double;
    
    public constructor ByXCoordinates( xValue : double  )
    {
	X = xValue;
	Y = foo (X );
	X = X + 1;        	
    }
    
    def addandIncr()
    {
        X = X + 1;
	Y = foo ( X );
	X = X + 1;
	return = X + Y;
    }
}
a = 0;
p1 = Point.ByXCoordinates( a );
x1 = p1.X;
y1 = p1.Y;
z = p1.addandIncr();
a = a + 1;
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch409_T022_Defect_1459905()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class A
{
    X : int;
	constructor A(x : int)
	{
	    X = x; 
	}
}
a = A.A(1);
a = a.X;
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch410_T022_Defect_1459905_2()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class B
{ 
	x3 : int ;
		
	constructor B(a) 
	{	
		x3 = a;
	}
	def foo ( )
	{
		return = x3;
	}
	
}
class A extends B
{ 
	x1 : int ;
	
	
	constructor A(a1,a2) : base.B(a2)
	{	
		x1 = a1; 				
	}
	def foo1 ( )
	{
		return = x1;
	}	
}
a1 = A.A( 1, 2 );
a1 = a1.foo(); //works fine
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch411_T022_Defect_1459905_3()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class B
{ 
	x3 : int ;
		
	constructor B(a) 
	{	
		x3 = a;
	}
	
}
def foo ( b1 : B )
{
    return = b1.x3;
}
b1 = B.B( 1 );
b1 = foo(b1); 
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch412_T022_Defect_1459905_4()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class B
{ 
	x3 : int ;
		
	constructor B(a) 
	{	
		x3 = a;
	}
	
}
class B2
{ 
	x3 : int ;
		
	constructor B2(a) 
	{	
		x3 = a;
	}
	
}
def foo ( b1 : B )
{
    return = b1.x3;
}
b1 = B.B( 1 );
x = b1.x3;
b1 = B2.B2( 2 );
y = x;
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch413_T023_Defect_1459789()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class MyPoint 
{
	// define general system of dependencies	
	x : double = 1; 
    y : double = 2;
    public constructor ByXYcoordinates(xValue : double )
    {
		x = xValue; 			
		y = x;
	}	
	// add 'incremental' modifiers	
	def incrementX(xValue : double) 
	{
	    return = ByXYcoordinates(x + xValue);
	}
	
}
a 		 = MyPoint.ByXYcoordinates(1.0);			        
aY 		  = a.y;
aX 	          = a.x;
// test update
a 		  = MyPoint.ByXYcoordinates(2.0);
// expected : aY = 2.0 and aX = 2.0
// recieved : aY = 1.0 and aX = 1.0
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch414_T023_Defect_1459789_10()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class A 
{    
    a1: var;    
    a2 : double[];    
    constructor A ( ax: int, b : double[] )    
    {        
        a1 = ax;    
	a2 = b;    
    }
    def create ()
    {
        temp1 = [Imperative]
	{
	    return = A.A ( 2, { 0.0, 0.0 } );
	}
	return = temp1;
    }
}
class B extends A
{    
    b1  :bool;    
    b2: int;    
    constructor B ( ax: int, b : double[], c : bool, d : int ) : base.A ( ax, b )    
    {        
        b1 = c;    
	b2 = d;    
    }
}
a = { 1.0, 2.0 };
b1 = B.B ( 1, a, true, 1 );
test1 = b1.a2[0];
a = { { 2.0, 2.0 } => a1;
      a1[0] + 1 => a2;
      { a2, a2 } ;
    }
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch415_T023_Defect_1459789_2()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class MyPoint 
{
    // define general system of dependencies	
    x : double = 1; 
    y : double = 2;
    public constructor ByXYcoordinates(xValue : double )
    {
	x = xValue; 			
	y = x;
    }	
    // add 'incremental' modifiers	
    def incrementX(xValue : double) 
    {
	return = ByXYcoordinates(x + xValue);
    }	
}
a 		  = MyPoint.ByXYcoordinates(1.0);			        
aY 		  = a.y;
aX 	          = a.x;
// test update     	    
a		  = a.incrementX(3.0);
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch416_T023_Defect_1459789_3()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class A 
{    
    a1: var;    
    a2 : double[];    
    constructor A ( a: int, b : double[] )    
    {        
        a1 = a;    
	a2 = b;    
    }
}
class B extends A
{    
    b1  :bool;    
    b2: int;    
    constructor B ( a: int, b : double[], c : bool, d : int ) : base.A ( a, b )    
    {        
        b1 = c;    
	b2 = d;    
    }
}
b1 = B.B ( 1, {1.0, 2.0}, true, 1 );
test1 = b1.a2[0];
b1.a2[0] = b1.a2[1];
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch417_T023_Defect_1459789_4()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class A 
{    
    a1: var;    
    a2 : double[]..[];    
    constructor A ( a: int, b : double[]..[] )    
    {        
        a1 = a;    
	a2 = b;    
    }
}
class B extends A
{    
    b1  :bool;    
    b2: int;    
    constructor B ( a: int, b : double[]..[], c : bool, d : int ) : base.A ( a, b )    
    {        
        b1 = c;    
	b2 = d;    
    }
}
a = { 1.0, 2.0 };
b1 = B.B ( 1, a, true, 1 );
test1 = b1.a2[0];
a = { { 1.0, 2} , 3 };
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch418_T023_Defect_1459789_5()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class A 
{    
    a1: var;    
    a2 : double[]..[];    
    constructor A ( a: int, b : double[]..[] )    
    {        
        a1 = a;    
	a2 = b;    
    }
    def create ()
    {
        temp1 = A.A ( 2, { 0.0, 0.0 } );
	return = temp1;
    }
}
class B extends A
{    
    b1  :bool;    
    b2: int;    
    constructor B ( a: int, b : double[]..[], c : bool, d : int ) : base.A ( a, b )    
    {        
        b1 = c;    
	b2 = d;    
    }
}
a = { 1.0, 2.0 };
b1 = B.B ( 1, a, true, 1 );
test1 = b1.a2[0];
a = { { 1.0, 2} , 3 };
b1 = b1.create();
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch419_T023_Defect_1459789_6()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class A 
{    
    a1: var;    
    a2 : double[]..[];    
    constructor A ( a: int, b : double[]..[] )    
    {        
        a1 = a;    
	a2 = b;    
    }
    def create ()
    {
        temp1 = [Imperative]
	{
	    return = A.A ( 2, { 0.0, 0.0 } );
	}
	return = temp1;
    }
}
class B extends A
{    
    b1  :bool;    
    b2: int;    
    constructor B ( a: int, b : double[]..[], c : bool, d : int ) : base.A ( a, b )    
    {        
        b1 = c;    
	b2 = d;    
    }
}
a = { 1.0, 2.0 };
b1 = B.B ( 1, a, true, 1 );
test1 = b1.a2[0];
a = { { 1.0, 2} , 3 };
b1 = b1.create();
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch420_T023_Defect_1459789_7()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class A 
{    
    a1: var;    
    a2 : double[];    
    constructor A ( ax: int, b : double[] )    
    {        
        a1 = ax;    
	a2 = b;    
    }
    def create ()
    {
        temp1 = [Imperative]
	{
	    return = A.A ( 2, { 0.0, 0.0 } );
	}
	return = temp1;
    }
}
class B extends A
{    
    b1  :bool;    
    b2: int;    
    constructor B ( ax: int, b : double[], c : bool, d : int ) : base.A ( ax, b )    
    {        
        b1 = c;    
	b2 = d;    
    }
}
a = { 1.0, 2.0 };
b1 = B.B ( 1, a, true, 1 );
test1 = b1.a2[0];
[Imperative]
{
        a = {  3.0, 2 };
	b1 = b1.create();
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch421_T023_Defect_1459789_8()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class A 
{    
    a1: var;    
    a2 : double[];    
    constructor A ( ax: int, b : double[] )    
    {        
        a1 = ax;    
	a2 = b;    
    }
    def create ()
    {
        temp1 = [Imperative]
	{
	    return = A.A ( 2, { 0.0, 0.0 } );
	}
	return = temp1;
    }
}
class B extends A
{    
    b1  :bool;    
    b2: int;    
    constructor B ( ax: int, b : double[], c : bool, d : int ) : base.A ( ax, b )    
    {        
        b1 = c;    
	b2 = d;    
    }
}
def foo ( x : B )
{
    return = x.create();
}
a = { 1.0, 2.0 };
b1 = B.B ( 1, a, true, 1 );
test1 = b1.a2[0];
[Imperative]
{
	a = { { 1.0, 2} , 3 };
        b1 = foo ( b1 );
	
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch422_T023_Defect_1459789_9()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class A 
{    
    a1: var;    
    a2 : double[];    
    constructor A ( ax: int, b : double[] )    
    {        
        a1 = ax;    
	a2 = b;    
    }
    def create ()
    {
        temp1 = [Imperative]
	{
	    return = A.A ( 2, { 0.0, 0.0 } );
	}
	return = temp1;
    }
}
class B extends A
{    
    b1  :bool;    
    b2: int;    
    constructor B ( ax: int, b : double[], c : bool, d : int ) : base.A ( ax, b )    
    {        
        b1 = c;    
	b2 = d;    
    }
}
def foo (  )
{
    b1 = b1.create();
    return = null;
}
a = { 1.0, 2.0 };
b1 = B.B ( 1, a, true, 1 );
test1 = b1.a2[0];
dummy = foo (  );
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch423_T024_Defect_1459470()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"a = 0..4..1;
b = a;
c = b[2];
a = 10..14..1;
b[2] = b[2] + 1;
a[2] = a[2] + 1;
x = a;
					        
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch424_T024_Defect_1459470_2()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class A
{
	a : var;
	b : var;
	c : var;
	constructor A ()
	{
		a = 0;
		b = a;
		c = b + 1;
		a = 1;	
	}
}
x = A.A();
a1 = x.a;
b1 = x.b;
c1 = x.c;
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch425_T024_Defect_1459470_3()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"def foo ()
{
	a = 0..4..1;
	b = a;
	c = b[2];
	a = 10..14..1;
	b[2] = b[2] + 1;
	a[2] = a[2] + 1;
	return = true;
	
}
a :int[];
b : int[];
c : int;
test = foo();
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch426_T024_Defect_1459470_4()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"a = {1,2,3,4};
b = a;
c = b[2];
d = a[2];
a[0..1] = {1, 2};
b[2..3] = 5;
	
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch427_T025_Defect_1459704()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"a = b;
b = 3;
c = a;
					        
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch428_T025_Defect_1459704_2()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class A 
{
    a : int;
    b : int;
    constructor A ( a1:int)
    {
        a = b + 1;
	b = a1;
    }
}
def foo ( a1 : int)
{
    b = 0;	
    a = b + 1;
    b = a1;
    return  = a ;
}
p = A.A(1);
a1 = p.a;
a2 = foo(10);
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch429_T026_Defect_1459631()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class A
{
    x : int = 1;
	y : int = x + 1;	
	constructor A ()
	{
	    x = 2;		
	}
}
a1 = A.A();
t1 = a1.x;
t2 = a1.y;
					        
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch430_T026_Defect_1459631_2()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"def foo (a ) = a * 2;
class A
{
        x : int = foo ( 1 ) ;
	y : int = x + foo ( x) ;
        z : int = x + y;	
	w :int = 1;
	constructor A ()
	{
	    w = 4;		
	}
}
a1 = A.A();
t1 = a1.x;
t2 = a1.y;
t3 = a1.z;
t4 = a1.w;
					        
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch431_T026_Defect_1459631_3()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"def foo (a ) = a * 2;
def foo2 (a ) 
{
    b = { a, a, a};
    return = b;
        
}
class A
{
        x : int   = foo ( 1 ) ;
	y : int   = x + foo ( x ) ;
        z : int[] = foo2 ( x + y );	
	w : int   = z[0];
	constructor A ()
	{
	    //w = 4;		
	}
}
a1 = A.A();
t1 = a1.x;
t2 = a1.y;
t3 = a1.z;
t4 = a1.w;
					        
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch432_T027_Defect_1460741()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class A
{ 
	y : int[];
	
	
	constructor A ()
	{
	y={1,2};	      	
	}	
}
class B extends A
{
	constructor B()
	{
	y={3,4};	
	}
}
a1 = B.B();
x1 = a1.y;//null
x2;
x3 = [Imperative]
{
    a2 = B.B();
    x2 = a2.y;
    return = x2;
}
					        
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch433_T027_Defect_1460741_2()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class C
{ 
	c1 : double[];
	
	constructor C ()
	{
	    c1 = {1.0,2.0};            	    
	}	
}
class A
{ 
	y : int[];
	x : C;
	
	constructor A ()
	{
	    y={1,2};
            x = false;   
	}	
}
class B extends A
{
	constructor B()
	{
	    y={3,4};   
	    x = C.C();	    
	}
}
a1 = B.B();
x1 = a1.y;
x2 = a1.x.c1;
x4;
x3 = [Imperative]
{
    x4 = a1.x.c1;
    return = x4;
}
					        
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch434_T028_Modifier_Stack_Simple()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"a = {
     2 ;
    +4;
    +3;                                
} //expected : a = 9; received : 13
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch435_T029_Defect_1460139_Update_In_Class()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"X = 1;
Y = X + 1;
X = X + 1;
X = X + 1; // this line causing the problem
test = X + Y;
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch436_T030_Defect_1467236_Update_In_Class()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class Parent
{
A : var;
B : var;
C : var;
constructor Create( x:int, y:int, z:int )
{
A = x;
B = y;
C = z;
}
}
class Child extends Parent
{
constructor Create( x:int, y:int, z:int )
{
A = x;
B = y;
C = z;
}
}
def modify(tmp : Child) // definition with inherited class
{
tmp.A = tmp.A +1;
tmp.B = tmp.B +1;
tmp.C = tmp.C +1;
return=true;
}
oldPoint = Parent.Create( 1, 2, 3 );
derivedpoint = Child.Create( 7,8,9 );
test1 = modify( oldPoint ); // call function with object of parent class
test2 = modify( derivedpoint );
x1 = oldPoint.A;
x2 = derivedpoint.B;
//expected : x2 = 9
//received : cyclic dependency 
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch437_T030_Defect_1467236_Update_In_Class_2()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class Parent
{
A : var;
B : var;
C : var;
	constructor Create( x:int, y:int, z:int )
	{
		A = x;
		B = y;
		C = z;
	}
}
class Child extends Parent
{
	constructor Create( x:int, y:int, z:int )
	{
		[Imperative]
		{
			A = x;
			B = y;
			C = z;
		}
	}
}
def modify(tmp : Child) // definition with inherited class
{
	[Imperative]
	{
		tmp.A = tmp.A +1;
		tmp.B = tmp.B +1;
		tmp.C = tmp.C +1;
		return=true;
	}
	return = true;
}
x1;
x2;
[Imperative]
{
	oldPoint = Parent.Create( 1, 2, 3 );
	derivedpoint = Child.Create( 7,8,9 );
	test1 = modify( oldPoint ); // call function with object of parent class
	test2 = modify( derivedpoint );
	x1 = oldPoint.A;
	x2 = derivedpoint.B;
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch438_T031_Defect_1467491_ImportUpdate_Main()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"import(""T031_Defect_1467491_ImportUpdate_Sub.ds"");
t = 5;
z = a.x;
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch439_T031_Defect_1467491_ImportUpdate_Sub()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class A
{
    x : int;
    
    constructor (X:int)
    {
        x = X;
    }
    
    def New()
    {
        return = A(x + 1);
    }
   
}
t = 2;
a = A(t);
a = a.New();
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch440_T001_SampleTest()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class Point
{
    x : var;
    y : var;
    z : var;
    constructor Point()
    {
        x = 10; y = 20; z = 30;
    }
}
[Imperative]
{
    p = Point.Point();
    y = p.x;
    arr = { 1, 2, 3, { 4, 5 }, 6.0, 7, { 8.0, 9 } };
    p.x = 20;
    arr = { arr, y };
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch441_T001_FFI_MathLibrary_Sqrt_Trigonomatry()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class Math
{
                external (""ffi_library"") def dc_sqrt : double (val : double );
                external (""ffi_library"") def dc_sin  : double (val : double );
                external (""ffi_library"") def dc_cos  : double (val : double );
                external (""ffi_library"") def dc_tan  : double (val : double );
                external (""ffi_library"") def dc_asin : double (val : double );
                external (""ffi_library"") def dc_acos : double (val : double );
                external (""ffi_library"") def dc_atan : double (val : double );
                external (""ffi_library"") def dc_log  : double (val : double );
           
                constructor GetInstance()
                {}
                
                def Sqrt : double ( val : double )
                {
                                return = dc_sqrt(val);
                }
                def Sin : double ( val : double )
                {
                                return = dc_sin(val);
                }
                
                def Cos : double ( val : double )
                {
                                return = dc_cos(val);
                }
                
                def Tan : double ( val : double )
                {
                                return = dc_tan(val);
                }
                
                def ArcSin : double ( val : double )
                {
                                return = dc_asin(val);
                }
                
                def ArcCos : double ( val : double )
                {
                                return = dc_acos(val);
                }
                
                def ArcTan : double ( val : double )
                {
                                return = dc_atan(val);
                }
                
                def Log : double ( val : double )
                {
                                return = dc_log(val);
                }
}
[Associative]
{
                math = Math.GetInstance();
                
                sqrt_10 = math.Sqrt(10.0);
                log_100 = math.Log(100.0);
                
                angle = 30.0;
                sin_30 = math.Sin(angle);
                cos_30 = math.Cos(angle);
                tan_30 = math.Tan(angle);
                
                //            answer of each of these should be 30, 
                //            off course within tolerance of 1e-6
                asin_30 = math.ArcSin(sin_30);
                acos_30 = math.ArcCos(cos_30);
                atan_30 = math.ArcTan(tan_30);
                
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch442_T002_FFI_Matrix_Simple()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class Matrix
{
    id : var;
    rows : var;
    cols : var;
    
    external (""ffi_library"") def dc_create_matrix : int (rows : int, cols : int);
    external (""ffi_library"") def dc_delete_matrix : int (id : int);
    external (""ffi_library"") def dc_set_matrix_element : double( ptr : int, row : int, col : int, value : double);
    external (""ffi_library"") def dc_get_matrix_element : double( ptr : int, row : int, col : int);
    
    constructor Create(row : int, col : int)
    {
        rows = row;
        cols = col;
        id = dc_create_matrix(rows, cols);
    }
    def SetAt : double ( row: int, col : int, value : double)
    {
        dummy = dc_set_matrix_element(id, row, col, value);
        return = dummy;
    }
    
    def GetAt : double ( row : int, col : int )
    {
        //return = dc_get_matrix_element(id, row, col);
        return = 1.0;
    }
    
        def Delete : bool ()
    {
        id = dc_delete_matrix(id);
        return = false;
    }
    
}
[Associative]
{
    mat1 = Matrix.Create(4,4);
    
    val = 1.0;
    dummy1 = mat1.SetAt(0,0,val);
    dummy2 = mat1.SetAt(1,1,val);
    dummy3 = mat1.SetAt(2,2,val);
    dummy4 = mat1.SetAt(3,3,val);
    
    val_00 = mat1.GetAt(0,0);
    val_11 = mat1.GetAt(1,1);
    val_22 = mat1.GetAt(2,2);
    val_33 = mat1.GetAt(3,3);
    
    mat2 = mat1.Delete();
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch443_T003_FFI_Tuple4_XYZH_Simple()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class Tuple4
{
    X : var;
    Y : var;
    Z : var;
    H : var;
    
    constructor XYZH(xValue : double, yValue : double, zValue : double, hValue : double)
    {
        X = xValue;
        Y = yValue;
        Z = zValue;
        H = hValue;        
    }
    
    constructor XYZ(xValue : double, yValue : double, zValue : double)
    {
        X = xValue;
        Y = yValue;
        Z = zValue;
        H = 1.0;        
    }
    constructor ByCoordinates3(coordinates : double[] )
    {
        X = coordinates[0];
        Y = coordinates[1];
        Z = coordinates[2];
        H = 1.0;        
    }
    constructor ByCoordinates4(coordinates : double[] )
    {
        X = coordinates[0];
        Y = coordinates[1];
        Z = coordinates[2];
        H = coordinates[3];    
    }
    
    def get_X : double () 
    {
        return = X;
    }
    
    def get_Y : double () 
    {
        return = Y;
    }
    
    def get_Z : double () 
    {
        return = Z;
    }
    
    def get_H : double () 
    {
        return = H;
    }
    
    public def Multiply : double(other : Tuple4)
    {
        return = X * other.X + Y * other.Y + Z * other.Z + H * other.H;
    }
    
    public def Coordinates3 : double[] ()
    { 
        return = {X, Y, Z };
    }
    
    public def Coordinates4 :double[] () 
    { 
        return = {X, Y, Z, H };
    }
    
    
}
tuple1 = Tuple4.XYZH (-10.0, -20.0, -30.0, -40);
resultX = tuple1.X;
resultY = tuple1.Y;
resultZ = tuple1.Z;
resultH = tuple1.H;
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch444_T004_FFI_Tuple4_XYZ_Simple_WithGetMethods()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class Tuple4
{
    X : var;
    Y : var;
    Z : var;
    H : var;
    
    constructor XYZH(xValue : double, yValue : double, zValue : double, hValue : double)
    {
        X = xValue;
        Y = yValue;
        Z = zValue;
        H = hValue;        
    }
    
    constructor XYZ(xValue : double, yValue : double, zValue : double)
    {
        X = xValue;
        Y = yValue;
        Z = zValue;
        H = 1.0;        
    }
    constructor ByCoordinates3(coordinates : double[] )
    {
        X = coordinates[0];
        Y = coordinates[1];
        Z = coordinates[2];
        H = 1.0;        
    }
    constructor ByCoordinates4(coordinates : double[] )
    {
        X = coordinates[0];
        Y = coordinates[1];
        Z = coordinates[2];
        H = coordinates[3];    
    }
    
    def get_X : double () 
    {
        return = X;
    }
    
    def get_Y : double () 
    {
        return = Y;
    }
    
    def get_Z : double () 
    {
        return = Z;
    }
    
    def get_H : double () 
    {
        return = H;
    }
    
    public def Multiply : double(other : Tuple4)
    {
        return = X * other.X + Y * other.Y + Z * other.Z + H * other.H;
    }
    
    public def Coordinates3 : double[] ()
    { 
        return = {X, Y, Z };
    }
    
    public def Coordinates4 :double[] () 
    { 
        return = {X, Y, Z, H };
    }
    
    
}
tuple1 = Tuple4.XYZ (-10.0, -20.0, -30.0);
resultX = tuple1.get_X();
resultY = tuple1.get_Y();
resultZ = tuple1.get_Z();
resultH = tuple1.get_H();
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch445_T005_FFI_Tuple4_ByCoordinate3_Simple()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class Tuple4
{
    X : var;
    Y : var;
    Z : var;
    H : var;
    
    constructor XYZH(xValue : double, yValue : double, zValue : double, hValue : double)
    {
        X = xValue;
        Y = yValue;
        Z = zValue;
        H = hValue;        
    }
    
    constructor XYZ(xValue : double, yValue : double, zValue : double)
    {
        X = xValue;
        Y = yValue;
        Z = zValue;
        H = 1.0;        
    }
    constructor ByCoordinates3(coordinates : double[] )
    {
        X = coordinates[0];
        Y = coordinates[1];
        Z = coordinates[2];
        H = 1.0;        
    }
    constructor ByCoordinates4(coordinates : double[] )
    {
        X = coordinates[0];
        Y = coordinates[1];
        Z = coordinates[2];
        H = coordinates[3];    
    }
    
    def get_X : double () 
    {
        return = X;
    }
    
    def get_Y : double () 
    {
        return = Y;
    }
    
    def get_Z : double () 
    {
        return = Z;
    }
    
    def get_H : double () 
    {
        return = H;
    }
    
    public def Multiply : double(other : Tuple4)
    {
        return = X * other.X + Y * other.Y + Z * other.Z + H * other.H;
    }
    
    public def Coordinates3 : double[] ()
    { 
        return = {X, Y, Z };
    }
    
    public def Coordinates4 :double[] () 
    { 
        return = {X, Y, Z, H };
    }
    
    
}
cor1 = {10.0, 11.0, 12.0, 13.0};
tuple1 = Tuple4.ByCoordinates3 (cor1);
result3 = tuple1.Coordinates3();
result4 = tuple1.Coordinates4();
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch446_T006_FFI_Tuple4_ByCoordinate4_Simple()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class Tuple4
{
    X : var;
    Y : var;
    Z : var;
    H : var;
    
    constructor XYZH(xValue : double, yValue : double, zValue : double, hValue : double)
    {
        X = xValue;
        Y = yValue;
        Z = zValue;
        H = hValue;        
    }
    
    constructor XYZ(xValue : double, yValue : double, zValue : double)
    {
        X = xValue;
        Y = yValue;
        Z = zValue;
        H = 1.0;        
    }
    constructor ByCoordinates3(coordinates : double[] )
    {
        X = coordinates[0];
        Y = coordinates[1];
        Z = coordinates[2];
        H = 1.0;        
    }
    constructor ByCoordinates4(coordinates : double[] )
    {
        X = coordinates[0];
        Y = coordinates[1];
        Z = coordinates[2];
        H = coordinates[3];    
    }
    
    def get_X : double () 
    {
        return = X;
    }
    
    def get_Y : double () 
    {
        return = Y;
    }
    
    def get_Z : double () 
    {
        return = Z;
    }
    
    def get_H : double () 
    {
        return = H;
    }
    
    public def Multiply : double(other : Tuple4)
    {
        return = X * other.X + Y * other.Y + Z * other.Z + H * other.H;
    }
    
    public def Coordinates3 : double[] ()
    { 
        return = {X, Y, Z };
    }
    
    public def Coordinates4 :double[] () 
    { 
        return = {X, Y, Z, H };
    }
    
    
}
cor1 = {10.0, 11.0, 12.0, 13.0};
tuple1 = Tuple4.ByCoordinates4 (cor1);
result3 = tuple1.Coordinates3();
result4 = tuple1.Coordinates4();
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch447_T007_FFI_Tuple4_Multiply_Simple()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class Tuple4
{
    X : var;
    Y : var;
    Z : var;
    H : var;
    
    constructor XYZH(xValue : double, yValue : double, zValue : double, hValue : double)
    {
        X = xValue;
        Y = yValue;
        Z = zValue;
        H = hValue;        
    }
    
    constructor XYZ(xValue : double, yValue : double, zValue : double)
    {
        X = xValue;
        Y = yValue;
        Z = zValue;
        H = 1.0;        
    }
    constructor ByCoordinates3(coordinates : double[] )
    {
        X = coordinates[0];
        Y = coordinates[1];
        Z = coordinates[2];
        H = 1.0;        
    }
    constructor ByCoordinates4(coordinates : double[] )
    {
        X = coordinates[0];
        Y = coordinates[1];
        Z = coordinates[2];
        H = coordinates[3];    
    }
    
    def get_X : double () 
    {
        return = X;
    }
    
    def get_Y : double () 
    {
        return = Y;
    }
    
    def get_Z : double () 
    {
        return = Z;
    }
    
    def get_H : double () 
    {
        return = H;
    }
    
    public def Multiply : double(other : Tuple4)
    {
        return = X * other.X + Y * other.Y + Z * other.Z + H * other.H;
    }
    
    public def Coordinates3 : double[] ()
    { 
        return = {X, Y, Z };
    }
    
    public def Coordinates4 :double[] () 
    { 
        return = {X, Y, Z, H };
    }
    
    
}
cor1 = {10.0, 10.0, 10.0, 10.0};
cor2 = {10.0, 10.0, 10.0, 10.0};
tuple1 = Tuple4.ByCoordinates4 (cor1);
tuple2 = Tuple4.ByCoordinates4 (cor2);
result1 = tuple1.Coordinates4();
result2 = tuple2.Coordinates4();
multiply = tuple1.Multiply(tuple2);
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch448_T008_FFI_Transform_ByDate_Simple()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class Tuple4
{
    X : var;
    Y : var;
    Z : var;
    H : var;
    
    constructor XYZH(xValue : double, yValue : double, zValue : double, hValue : double)
    {
        X = xValue;
        Y = yValue;
        Z = zValue;
        H = hValue;        
    }
    
    constructor XYZ(xValue : double, yValue : double, zValue : double)
    {
        X = xValue;
        Y = yValue;
        Z = zValue;
        H = 1.0;        
    }
    constructor ByCoordinates3(coordinates : double[] )
    {
        X = coordinates[0];
        Y = coordinates[1];
        Z = coordinates[2];
        H = 1.0;        
    }
    constructor ByCoordinates4(coordinates : double[] )
    {
        X = coordinates[0];
        Y = coordinates[1];
        Z = coordinates[2];
        H = coordinates[3];    
    }
    
    def get_X : double () 
    {
        return = X;
    }
    
    def get_Y : double () 
    {
        return = Y;
    }
    
    def get_Z : double () 
    {
        return = Z;
    }
    
    def get_H : double () 
    {
        return = H;
    }
    
    public def Multiply : double (other : Tuple4)
    {
        return = X * other.X + Y * other.Y + Z * other.Z + H * other.H;
    }
    
    public def Coordinates3 : double[] ()
    { 
        return = {X, Y, Z };
    }
    
    public def Coordinates4 : double[] () 
    { 
        return = {X, Y, Z, H };
    }
}
class Vector
{
    X : var;
    Y : var;
    Z : var;
    
    public constructor ByCoordinates(xx : double, yy : double, zz : double)
    {
        X = xx;
        Y = yy;
        Z = zz;
    }
}
class Transform
{
    public C0 : Tuple4; 
    public C1 : Tuple4; 
    public C2 : Tuple4; 
    public C3 : Tuple4;     
    
    public constructor ByTuples(C0Value : Tuple4, C1Value : Tuple4, C2Value : Tuple4, C3Value : Tuple4)
    {
        C0 = C0Value;
        C1 = C1Value;
        C2 = C2Value;
        C3 = C3Value;
    }
    public constructor ByData(data : double[][])
    {
        C0 = Tuple4.ByCoordinates4(data[0]);
        C1 = Tuple4.ByCoordinates4(data[1]);
        C2 = Tuple4.ByCoordinates4(data[2]);
        C3 = Tuple4.ByCoordinates4(data[3]);
    }
    
    public def ApplyTransform : Tuple4 (t : Tuple4)
    {
        tx = Tuple4.XYZH(C0.X, C1.X, C2.X, C3.X);
        RX = tx.Multiply(t);
        ty = Tuple4.XYZH(C0.Y, C1.Y, C2.Y, C3.Y);
        RY = ty.Multiply(t);
        tz = Tuple4.XYZH(C0.Z, C1.Z, C2.Z, C3.Z);
        RZ = tz.Multiply(t);
        th = Tuple4.XYZH(C0.H, C1.H, C2.H, C3.H);
        RH = th.Multiply(t);
        
        return = Tuple4.XYZH(RX, RY, RZ, RH);
    }
    
    public def TransformVector : Vector (p: Vector)
    {    
        tpa = Tuple4.XYZH(p.X, p.Y, p.Z, 0.0);
        tpcv = ApplyTransform(tpa);
        return = Vector.ByCoordinates(tpcv.X, tpcv.Y, tpcv.Z);    
    }
}
data = {    {1.0,0.0,0.0,0.0},
            {0.0,1.0,0.0,0.0},
            {0.0,0.0,1.0,0.0},
            {0.0,0.0,0.0,1.0}
        };
        
xform = Transform.ByData(data);
c0 = xform.C0;
c1 = xform.C1;
c2 = xform.C2;
c3 = xform.C3;
c0_X = c0.X;
c0_Y = c0.Y;
c0_Z = c0.Z;
c0_H = c0.H;
c1_X = c1.X;
c1_Y = c1.Y;
c1_Z = c1.Z;
c1_H = c1.H;
c2_X = c2.X;
c2_Y = c2.Y;
c2_Z = c2.Z;
c2_H = c2.H;
c3_X = c3.X;
c3_Y = c3.Y;
c3_Z = c3.Z;
c3_H = c3.H;";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch449_T009_FFI_Transform_ByTuples_Simple()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class Tuple4
{
    X : var;
    Y : var;
    Z : var;
    H : var;
    
    constructor XYZH(xValue : double, yValue : double, zValue : double, hValue : double)
    {
        X = xValue;
        Y = yValue;
        Z = zValue;
        H = hValue;        
    }
    
    constructor XYZ(xValue : double, yValue : double, zValue : double)
    {
        X = xValue;
        Y = yValue;
        Z = zValue;
        H = 1.0;        
    }
    constructor ByCoordinates3(coordinates : double[] )
    {
        X = coordinates[0];
        Y = coordinates[1];
        Z = coordinates[2];
        H = 1.0;        
    }
    constructor ByCoordinates4(coordinates : double[] )
    {
        X = coordinates[0];
        Y = coordinates[1];
        Z = coordinates[2];
        H = coordinates[3];    
    }
    
    def get_X : double () 
    {
        return = X;
    }
    
    def get_Y : double () 
    {
        return = Y;
    }
    
    def get_Z : double () 
    {
        return = Z;
    }
    
    def get_H : double () 
    {
        return = H;
    }
    
    public def Multiply : double (other : Tuple4)
    {
        return = X * other.X + Y * other.Y + Z * other.Z + H * other.H;
    }
    
    public def Coordinates3 : double[] ()
    { 
        return = {X, Y, Z };
    }
    
    public def Coordinates4 : double[] () 
    { 
        return = {X, Y, Z, H };
    }
}
class Vector
{
    X : var;
    Y : var;
    Z : var;
    
    public constructor ByCoordinates(xx : double, yy : double, zz : double)
    {
        X = xx;
        Y = yy;
        Z = zz;
    }
}
class Transform
{
    public C0 : Tuple4; 
    public C1 : Tuple4; 
    public C2 : Tuple4; 
    public C3 : Tuple4;     
    
    public constructor ByTuples(C0Value : Tuple4, C1Value : Tuple4, C2Value : Tuple4, C3Value : Tuple4)
    {
        C0 = C0Value;
        C1 = C1Value;
        C2 = C2Value;
        C3 = C3Value;
    }
    public constructor ByData(data : double[][])
    {
        C0 = Tuple4.ByCoordinates4(data[0]);
        C1 = Tuple4.ByCoordinates4(data[1]);
        C2 = Tuple4.ByCoordinates4(data[2]);
        C3 = Tuple4.ByCoordinates4(data[3]);
    }
    
    public def ApplyTransform : Tuple4 (t : Tuple4)
    {
        tx = Tuple4.XYZH(C0.X, C1.X, C2.X, C3.X);
        RX = tx.Multiply(t);
        ty = Tuple4.XYZH(C0.Y, C1.Y, C2.Y, C3.Y);
        RY = ty.Multiply(t);
        tz = Tuple4.XYZH(C0.Z, C1.Z, C2.Z, C3.Z);
        RZ = tz.Multiply(t);
        th = Tuple4.XYZH(C0.H, C1.H, C2.H, C3.H);
        RH = th.Multiply(t);
        
        return = Tuple4.XYZH(RX, RY, RZ, RH);
    }
    
    public def TransformVector : Vector (p: Vector)
    {    
        tpa = Tuple4.XYZH(p.X, p.Y, p.Z, 0.0);
        tpcv = ApplyTransform(tpa);
        return = Vector.ByCoordinates(tpcv.X, tpcv.Y, tpcv.Z);    
    }
}
data = {    {1.0,0.0,0.0,0.0},
            {0.0,1.0,0.0,0.0},
            {0.0,0.0,1.0,0.0},
            {0.0,0.0,0.0,1.0}
        };
        
t0 = Tuple4.ByCoordinates4(data[0]);
t1 = Tuple4.ByCoordinates4(data[1]);
t2 = Tuple4.ByCoordinates4(data[2]);
t3 = Tuple4.ByCoordinates4(data[3]);
xform = Transform.ByTuples(t0, t1, t2, t3);
c0 = xform.C0;
c1 = xform.C1;
c2 = xform.C2;
c3 = xform.C3;
c0_X = c0.X;
c0_Y = c0.Y;
c0_Z = c0.Z;
c0_H = c0.H;
c1_X = c1.X;
c1_Y = c1.Y;
c1_Z = c1.Z;
c1_H = c1.H;
c2_X = c2.X;
c2_Y = c2.Y;
c2_Z = c2.Z;
c2_H = c2.H;
c3_X = c3.X;
c3_Y = c3.Y;
c3_Z = c3.Z;
c3_H = c3.H;";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch450_T010_FFI_Transform_ApplyTransform()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class Tuple4
{
    X : var;
    Y : var;
    Z : var;
    H : var;
    
    constructor XYZH(xValue : double, yValue : double, zValue : double, hValue : double)
    {
        X = xValue;
        Y = yValue;
        Z = zValue;
        H = hValue;        
    }
    
    constructor XYZ(xValue : double, yValue : double, zValue : double)
    {
        X = xValue;
        Y = yValue;
        Z = zValue;
        H = 1.0;        
    }
    constructor ByCoordinates3(coordinates : double[] )
    {
        X = coordinates[0];
        Y = coordinates[1];
        Z = coordinates[2];
        H = 1.0;        
    }
    constructor ByCoordinates4(coordinates : double[] )
    {
        X = coordinates[0];
        Y = coordinates[1];
        Z = coordinates[2];
        H = coordinates[3];    
    }
    
    def get_X : double () 
    {
        return = X;
    }
    
    def get_Y : double () 
    {
        return = Y;
    }
    
    def get_Z : double () 
    {
        return = Z;
    }
    
    def get_H : double () 
    {
        return = H;
    }
    
    public def Multiply : double (other : Tuple4)
    {
        return = X * other.X + Y * other.Y + Z * other.Z + H * other.H;
    }
    
    public def Coordinates3 : double[] ()
    { 
        return = {X, Y, Z };
    }
    
    public def Coordinates4 : double[] () 
    { 
        return = {X, Y, Z, H };
    }
}
/*
t1 = Tuple4.XYZH(0,0,0,0);
t2 = Tuple4.XYZ(0,0,0);
t3 = Tuple4.ByCoordinates3({0.0,0,0});
t4 = Tuple4.ByCoordinates4({0.0,0,0,0});
mult = t1.Multiply(t2);
c3 = t3.Coordinates3();
c4 = t3.Coordinates4();
*/
class Vector
{
    X : var;
    Y : var;
    Z : var;
    
    public constructor ByCoordinates(xx : double, yy : double, zz : double)
    {
        X = xx;
        Y = yy;
        Z = zz;
    }
}
class Transform
{
    public C0 : Tuple4; 
    public C1 : Tuple4; 
    public C2 : Tuple4; 
    public C3 : Tuple4;     
    
    public constructor ByTuples(C0Value : Tuple4, C1Value : Tuple4, C2Value : Tuple4, C3Value : Tuple4)
    {
        C0 = C0Value;
        C1 = C1Value;
        C2 = C2Value;
        C3 = C3Value;
    }
    public constructor ByData(data : double[][])
    {
        C0 = Tuple4.ByCoordinates4(data[0]);
        C1 = Tuple4.ByCoordinates4(data[1]);
        C2 = Tuple4.ByCoordinates4(data[2]);
        C3 = Tuple4.ByCoordinates4(data[3]);
    }
    
    public def ApplyTransform : Tuple4 (t : Tuple4)
    {
        tx = Tuple4.XYZH(C0.X, C1.X, C2.X, C3.X);
        RX = tx.Multiply(t);
        ty = Tuple4.XYZH(C0.Y, C1.Y, C2.Y, C3.Y);
        RY = ty.Multiply(t);
        tz = Tuple4.XYZH(C0.Z, C1.Z, C2.Z, C3.Z);
        RZ = tz.Multiply(t);
        th = Tuple4.XYZH(C0.H, C1.H, C2.H, C3.H);
        RH = th.Multiply(t);
        
        return = Tuple4.XYZH(RX, RY, RZ, RH);
    }
	
    public def NativeMultiply : Transform(other : Transform)
    {              
        tc0 = ApplyTransform(other.C0);
        tc1 = ApplyTransform(other.C1);
        tc2 = ApplyTransform(other.C2);
        tc3 = ApplyTransform(other.C3);
        return = Transform.ByTuples(tc0, tc1, tc2, tc3);
    }
    
    public def NativePreMultiply : Transform (other : Transform)
    {     
        //  as we don't have this now let's do it longer way!        
        //return = other.NativeMultiply(this);
        //
        tc0 = other.ApplyTransform(C0);
        tc1 = other.ApplyTransform(C1);
        tc2 = other.ApplyTransform(C2);
        tc3 = other.ApplyTransform(C3);
        return = Transform.ByTuples(tc0, tc1, tc2, tc3);
    }
    
}
data = {    {2.0,0.0,0.0,0.0},
            {0.0,2.0,0.0,0.0},
            {0.0,0.0,2.0,0.0},
            {0.0,0.0,0.0,2.0}
        };
        
  
        
xform = Transform.ByData(data);
tuple = Tuple4.XYZH(0.1,2,4,1);
result = xform.ApplyTransform(tuple);
x = result.X;
y = result.Y;
z = result.Z;
h = result.H;
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch451_T011_FFI_Transform_NativeMultiply()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"
class Tuple4
{
    X : var;
    Y : var;
    Z : var;
    H : var;
    
    constructor XYZH(xValue : double, yValue : double, zValue : double, hValue : double)
    {
        X = xValue;
        Y = yValue;
        Z = zValue;
        H = hValue;        
    }
    
    constructor XYZ(xValue : double, yValue : double, zValue : double)
    {
        X = xValue;
        Y = yValue;
        Z = zValue;
        H = 1.0;        
    }
    constructor ByCoordinates3(coordinates : double[] )
    {
        X = coordinates[0];
        Y = coordinates[1];
        Z = coordinates[2];
        H = 1.0;        
    }
    constructor ByCoordinates4(coordinates : double[] )
    {
        X = coordinates[0];
        Y = coordinates[1];
        Z = coordinates[2];
        H = coordinates[3];    
    }
    
    def get_X : double () 
    {
        return = X;
    }
    
    def get_Y : double () 
    {
        return = Y;
    }
    
    def get_Z : double () 
    {
        return = Z;
    }
    
    def get_H : double () 
    {
        return = H;
    }
    
    public def Multiply : double (other : Tuple4)
    {
        return = X * other.X + Y * other.Y + Z * other.Z + H * other.H;
    }
    
    public def Coordinates3 : double[] ()
    { 
        return = {X, Y, Z };
    }
    
    public def Coordinates4 : double[] () 
    { 
        return = {X, Y, Z, H };
    }
}
class Vector
{
    X : var;
    Y : var;
    Z : var;
    
    public constructor ByCoordinates(xx : double, yy : double, zz : double)
    {
        X = xx;
        Y = yy;
        Z = zz;
    }
}
class Transform
{
    public C0 : Tuple4; 
    public C1 : Tuple4; 
    public C2 : Tuple4; 
    public C3 : Tuple4;     
    
    public constructor ByTuples(C0Value : Tuple4, C1Value : Tuple4, C2Value : Tuple4, C3Value : Tuple4)
    {
        C0 = C0Value;
        C1 = C1Value;
        C2 = C2Value;
        C3 = C3Value;
    }
    public constructor ByData(data : double[][])
    {
        C0 = Tuple4.ByCoordinates4(data[0]);
        C1 = Tuple4.ByCoordinates4(data[1]);
        C2 = Tuple4.ByCoordinates4(data[2]);
        C3 = Tuple4.ByCoordinates4(data[3]);
    }
    
    public def ApplyTransform : Tuple4 (t : Tuple4)
    {
        tx = Tuple4.XYZH(C0.X, C1.X, C2.X, C3.X);
        RX = tx.Multiply(t);
        ty = Tuple4.XYZH(C0.Y, C1.Y, C2.Y, C3.Y);
        RY = ty.Multiply(t);
        tz = Tuple4.XYZH(C0.Z, C1.Z, C2.Z, C3.Z);
        RZ = tz.Multiply(t);
        th = Tuple4.XYZH(C0.H, C1.H, C2.H, C3.H);
        RH = th.Multiply(t);
        
        return = Tuple4.XYZH(RX, RY, RZ, RH);
    }
	
    public def NativeMultiply : Transform(other : Transform)
    {              
        tc0 = ApplyTransform(other.C0);
        tc1 = ApplyTransform(other.C1);
        tc2 = ApplyTransform(other.C2);
        tc3 = ApplyTransform(other.C3);
        return = Transform.ByTuples(tc0, tc1, tc2, tc3);
    }
    
    public def NativePreMultiply : Transform (other : Transform)
    {     
        //  as we don't have this now let's do it longer way!        
        //return = other.NativeMultiply(this);
        //
        tc0 = other.ApplyTransform(C0);
        tc1 = other.ApplyTransform(C1);
        tc2 = other.ApplyTransform(C2);
        tc3 = other.ApplyTransform(C3);
        return = Transform.ByTuples(tc0, tc1, tc2, tc3);
    }
    
}
data1 = {    {2.0,0.0,0.0,0.0},
            {0.0,2.0,0.0,0.0},
            {0.0,0.0,2.0,0.0},
            {0.0,0.0,0.0,2.0}
        };
data2 = {    {0.0,3.0,0.0,0.0},
            {0.0,2.0,0.0,0.0},
            {1.0,0.0,2.0,0.0},
            {0.5,0.0,0.0,2.0}
        };        
  
        
xform1 = Transform.ByData(data1);
xform2 = Transform.ByData(data2);
result = xform1.NativeMultiply(xform2);
r0 = result.C0;
r1 = result.C1;
r2 = result.C2;
r3 = result.C3;
r0X = r0.X;
r0Y = r0.Y;
r0Z = r0.Z;
r0H = r0.H;
r1X = r1.X;
r1Y = r1.Y;
r1Z = r1.Z;
r1H = r1.H;
r2X = r2.X;
r2Y = r2.Y;
r2Z = r2.Z;
r2H = r2.H;
r3X = r3.X;
r3Y = r3.Y;
r3Z = r3.Z;
r3H = r3.H;
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch452_T012_FFI_Transform_NativePreMultiply()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"
class Tuple4
{
    X : var;
    Y : var;
    Z : var;
    H : var;
    
    constructor XYZH(xValue : double, yValue : double, zValue : double, hValue : double)
    {
        X = xValue;
        Y = yValue;
        Z = zValue;
        H = hValue;        
    }
    
    constructor XYZ(xValue : double, yValue : double, zValue : double)
    {
        X = xValue;
        Y = yValue;
        Z = zValue;
        H = 1.0;        
    }
    constructor ByCoordinates3(coordinates : double[] )
    {
        X = coordinates[0];
        Y = coordinates[1];
        Z = coordinates[2];
        H = 1.0;        
    }
    constructor ByCoordinates4(coordinates : double[] )
    {
        X = coordinates[0];
        Y = coordinates[1];
        Z = coordinates[2];
        H = coordinates[3];    
    }
    
    def get_X : double () 
    {
        return = X;
    }
    
    def get_Y : double () 
    {
        return = Y;
    }
    
    def get_Z : double () 
    {
        return = Z;
    }
    
    def get_H : double () 
    {
        return = H;
    }
    
    public def Multiply : double (other : Tuple4)
    {
        return = X * other.X + Y * other.Y + Z * other.Z + H * other.H;
    }
    
    public def Coordinates3 : double[] ()
    { 
        return = {X, Y, Z };
    }
    
    public def Coordinates4 : double[] () 
    { 
        return = {X, Y, Z, H };
    }
}
class Vector
{
    X : var;
    Y : var;
    Z : var;
    
    public constructor ByCoordinates(xx : double, yy : double, zz : double)
    {
        X = xx;
        Y = yy;
        Z = zz;
    }
}
class Transform
{
    public C0 : Tuple4; 
    public C1 : Tuple4; 
    public C2 : Tuple4; 
    public C3 : Tuple4;     
    
    public constructor ByTuples(C0Value : Tuple4, C1Value : Tuple4, C2Value : Tuple4, C3Value : Tuple4)
    {
        C0 = C0Value;
        C1 = C1Value;
        C2 = C2Value;
        C3 = C3Value;
    }
    public constructor ByData(data : double[][])
    {
        C0 = Tuple4.ByCoordinates4(data[0]);
        C1 = Tuple4.ByCoordinates4(data[1]);
        C2 = Tuple4.ByCoordinates4(data[2]);
        C3 = Tuple4.ByCoordinates4(data[3]);
    }
    
    public def ApplyTransform : Tuple4 (t : Tuple4)
    {
        tx = Tuple4.XYZH(C0.X, C1.X, C2.X, C3.X);
        RX = tx.Multiply(t);
        ty = Tuple4.XYZH(C0.Y, C1.Y, C2.Y, C3.Y);
        RY = ty.Multiply(t);
        tz = Tuple4.XYZH(C0.Z, C1.Z, C2.Z, C3.Z);
        RZ = tz.Multiply(t);
        th = Tuple4.XYZH(C0.H, C1.H, C2.H, C3.H);
        RH = th.Multiply(t);
        
        return = Tuple4.XYZH(RX, RY, RZ, RH);
    }
	
    public def NativeMultiply : Transform(other : Transform)
    {              
        tc0 = ApplyTransform(other.C0);
        tc1 = ApplyTransform(other.C1);
        tc2 = ApplyTransform(other.C2);
        tc3 = ApplyTransform(other.C3);
        return = Transform.ByTuples(tc0, tc1, tc2, tc3);
    }
    
    public def NativePreMultiply : Transform (other : Transform)
    {     
        //  as we don't have this now let's do it longer way!        
        //return = other.NativeMultiply(this);
        //
        tc0 = other.ApplyTransform(C0);
        tc1 = other.ApplyTransform(C1);
        tc2 = other.ApplyTransform(C2);
        tc3 = other.ApplyTransform(C3);
        return = Transform.ByTuples(tc0, tc1, tc2, tc3);
    }
    
}
data1 = {    {2.0,0.0,0.0,0.0},
            {0.0,2.0,0.0,0.0},
            {0.0,0.0,2.0,0.0},
            {0.0,0.0,3.0,3.0}
        };
data2 = {    {0.0,3.0,0.0,0.0},
            {0.0,2.0,0.0,0.0},
            {1.0,0.0,2.0,0.0},
            {0.5,0.0,0.0,2.0}
        };        
  
        
xform1 = Transform.ByData(data1);
xform2 = Transform.ByData(data2);
result = xform1.NativePreMultiply(xform2);
r0 = result.C0;
r1 = result.C1;
r2 = result.C2;
r3 = result.C3;
r0X = r0.X;
r0Y = r0.Y;
r0Z = r0.Z;
r0H = r0.H;
r1X = r1.X;
r1Y = r1.Y;
r1Z = r1.Z;
r1H = r1.H;
r2X = r2.X;
r2Y = r2.Y;
r2Z = r2.Z;
r2H = r2.H;
r3X = r3.X;
r3Y = r3.Y;
r3Z = r3.Z;
r3H = r3.H;
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch453_T013_FFI_Transform_TransformVector()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"
class Tuple4
{
    X : var;
    Y : var;
    Z : var;
    H : var;
    
    constructor XYZH(xValue : double, yValue : double, zValue : double, hValue : double)
    {
        X = xValue;
        Y = yValue;
        Z = zValue;
        H = hValue;        
    }
    
    constructor XYZ(xValue : double, yValue : double, zValue : double)
    {
        X = xValue;
        Y = yValue;
        Z = zValue;
        H = 1.0;        
    }
    constructor ByCoordinates3(coordinates : double[] )
    {
        X = coordinates[0];
        Y = coordinates[1];
        Z = coordinates[2];
        H = 1.0;        
    }
    constructor ByCoordinates4(coordinates : double[] )
    {
        X = coordinates[0];
        Y = coordinates[1];
        Z = coordinates[2];
        H = coordinates[3];    
    }
    
    def get_X : double () 
    {
        return = X;
    }
    
    def get_Y : double () 
    {
        return = Y;
    }
    
    def get_Z : double () 
    {
        return = Z;
    }
    
    def get_H : double () 
    {
        return = H;
    }
    
    public def Multiply : double (other : Tuple4)
    {
        return = X * other.X + Y * other.Y + Z * other.Z + H * other.H;
    }
    
    public def Coordinates3 : double[] ()
    { 
        return = {X, Y, Z };
    }
    
    public def Coordinates4 : double[] () 
    { 
        return = {X, Y, Z, H };
    }
}
/*
t1 = Tuple4.XYZH(0,0,0,0);
t2 = Tuple4.XYZ(0,0,0);
t3 = Tuple4.ByCoordinates3({0.0,0,0});
t4 = Tuple4.ByCoordinates4({0.0,0,0,0});
mult = t1.Multiply(t2);
c3 = t3.Coordinates3();
c4 = t3.Coordinates4();
*/
class Vector
{
    X : var;
    Y : var;
    Z : var;
    
    public constructor ByCoordinates(xx : double, yy : double, zz : double)
    {
        X = xx;
        Y = yy;
        Z = zz;
    }
}
class Transform
{
    public C0 : Tuple4; 
    public C1 : Tuple4; 
    public C2 : Tuple4; 
    public C3 : Tuple4;     
    
    public constructor ByTuples(C0Value : Tuple4, C1Value : Tuple4, C2Value : Tuple4, C3Value : Tuple4)
    {
        C0 = C0Value;
        C1 = C1Value;
        C2 = C2Value;
        C3 = C3Value;
    }
    public constructor ByData(data : double[][])
    {
        C0 = Tuple4.ByCoordinates4(data[0]);
        C1 = Tuple4.ByCoordinates4(data[1]);
        C2 = Tuple4.ByCoordinates4(data[2]);
        C3 = Tuple4.ByCoordinates4(data[3]);
    }
    
    public def ApplyTransform : Tuple4 (t : Tuple4)
    {
        tx = Tuple4.XYZH(C0.X, C1.X, C2.X, C3.X);
        RX = tx.Multiply(t);
        ty = Tuple4.XYZH(C0.Y, C1.Y, C2.Y, C3.Y);
        RY = ty.Multiply(t);
        tz = Tuple4.XYZH(C0.Z, C1.Z, C2.Z, C3.Z);
        RZ = tz.Multiply(t);
        th = Tuple4.XYZH(C0.H, C1.H, C2.H, C3.H);
        RH = th.Multiply(t);
        
        return = Tuple4.XYZH(RX, RY, RZ, RH);
    }
    
    public def TransformVector : Vector (p: Vector)
    {    
        tpa = Tuple4.XYZH(p.X, p.Y, p.Z, 0.0);
        tpcv = ApplyTransform(tpa);
        return = Vector.ByCoordinates(tpcv.X, tpcv.Y, tpcv.Z);    
    }
    
    public def NativeMultiply : Transform(other : Transform)
    {              
        tc0 = ApplyTransform(other.C0);
        tc1 = ApplyTransform(other.C1);
        tc2 = ApplyTransform(other.C2);
        tc3 = ApplyTransform(other.C3);
        return = Transform.ByTuples(tc0, tc1, tc2, tc3);
    }
    
    public def NativePreMultiply : Transform (other : Transform)
    {     
        //  as we don't have this now let's do it longer way!        
        //return = other.NativeMultiply(this);
        //
        tc0 = other.ApplyTransform(C0);
        tc1 = other.ApplyTransform(C1);
        tc2 = other.ApplyTransform(C2);
        tc3 = other.ApplyTransform(C3);
        return = Transform.ByTuples(tc0, tc1, tc2, tc3);
    }
    
}
data = {    {1.0,0.0,0.0,0.0},
            {0.0,2.0,0.0,0.0},
            {0.0,0.0,3.0,0.0},
            {0.0,0.0,0.0,4.0}
        };
   
xform = Transform.ByData(data);
testVector = Vector.ByCoordinates (10, 20, 30);
resultVector = xform.TransformVector (testVector);
x = testVector.X;
y = testVector.Y;
z = testVector.Z;
resultx = resultVector.X;
resulty = resultVector.Y;
resultz = resultVector.Z;
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch454_T014_FFI_Transform_TransformPoint()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"
class Geometry
{
    private hostEntityID : var;
}
class Point extends Geometry
{
   
    public X                        : var; //double = GlobalCoordinates[0];
    public Y                        : var; //double = GlobalCoordinates[1];
    public Z                        : var; //double = GlobalCoordinates[2];
    private def init : bool ()
    {
       
        X                      =  0.0;
        Y                      =  0.0;
        Z                      =  0.0;
   
        return = true;
    }
    
   
	
	public constructor ByCoordinates(xTranslation : double, yTranslation : double, zTranslation : double)
    {
        neglect = init();
        X = xTranslation;
        Y = yTranslation;
        Z = zTranslation;
    }
}
class Tuple4
{
    X : var;
    Y : var;
    Z : var;
    H : var;
    
    constructor XYZH(xValue : double, yValue : double, zValue : double, hValue : double)
    {
        X = xValue;
        Y = yValue;
        Z = zValue;
        H = hValue;        
    }
    
    constructor XYZ(xValue : double, yValue : double, zValue : double)
    {
        X = xValue;
        Y = yValue;
        Z = zValue;
        H = 1.0;        
    }
    constructor ByCoordinates3(coordinates : double[] )
    {
        X = coordinates[0];
        Y = coordinates[1];
        Z = coordinates[2];
        H = 1.0;        
    }
    constructor ByCoordinates4(coordinates : double[] )
    {
        X = coordinates[0];
        Y = coordinates[1];
        Z = coordinates[2];
        H = coordinates[3];    
    }
    
    def get_X : double () 
    {
        return = X;
    }
    
    def get_Y : double () 
    {
        return = Y;
    }
    
    def get_Z : double () 
    {
        return = Z;
    }
    
    def get_H : double () 
    {
        return = H;
    }
    
    public def Multiply : double (other : Tuple4)
    {
        return = X * other.X + Y * other.Y + Z * other.Z + H * other.H;
    }
    
    public def Coordinates3 : double[] ()
    { 
        return = {X, Y, Z };
    }
    
    public def Coordinates4 : double[] () 
    { 
        return = {X, Y, Z, H };
    }
}
class Vector
{
    X : var;
    Y : var;
    Z : var;
    
    public constructor ByCoordinates(xx : double, yy : double, zz : double)
    {
        X = xx;
        Y = yy;
        Z = zz;
    }
}
class Transform
{
    public C0 : Tuple4; 
    public C1 : Tuple4; 
    public C2 : Tuple4; 
    public C3 : Tuple4;     
    
    public constructor ByTuples(C0Value : Tuple4, C1Value : Tuple4, C2Value : Tuple4, C3Value : Tuple4)
    {
        C0 = C0Value;
        C1 = C1Value;
        C2 = C2Value;
        C3 = C3Value;
    }
    public constructor ByData(data : double[][])
    {
        C0 = Tuple4.ByCoordinates4(data[0]);
        C1 = Tuple4.ByCoordinates4(data[1]);
        C2 = Tuple4.ByCoordinates4(data[2]);
        C3 = Tuple4.ByCoordinates4(data[3]);
    }
    
    public def ApplyTransform : Tuple4 (t : Tuple4)
    {
        tx = Tuple4.XYZH(C0.X, C1.X, C2.X, C3.X);
        RX = tx.Multiply(t);
        ty = Tuple4.XYZH(C0.Y, C1.Y, C2.Y, C3.Y);
        RY = ty.Multiply(t);
        tz = Tuple4.XYZH(C0.Z, C1.Z, C2.Z, C3.Z);
        RZ = tz.Multiply(t);
        th = Tuple4.XYZH(C0.H, C1.H, C2.H, C3.H);
        RH = th.Multiply(t);
        
        return = Tuple4.XYZH(RX, RY, RZ, RH);
    }
    public def TransformPoint : Point (p: Point)
    {
        tpa = Tuple4.XYZH(p.X, p.Y, p.Z, 1.0);
        tpcv = ApplyTransform(tpa);
        return = Point.ByCoordinates(tpcv.X, tpcv.Y, tpcv.Z);	
    }
    public def NativeMultiply : Transform(other : Transform)
    {              
        tc0 = ApplyTransform(other.C0);
        tc1 = ApplyTransform(other.C1);
        tc2 = ApplyTransform(other.C2);
        tc3 = ApplyTransform(other.C3);
        return = Transform.ByTuples(tc0, tc1, tc2, tc3);
    }
    
    public def NativePreMultiply : Transform (other : Transform)
    {     
        //  as we don't have this now let's do it longer way!        
        //return = other.NativeMultiply(this);
        //
        tc0 = other.ApplyTransform(C0);
        tc1 = other.ApplyTransform(C1);
        tc2 = other.ApplyTransform(C2);
        tc3 = other.ApplyTransform(C3);
        return = Transform.ByTuples(tc0, tc1, tc2, tc3);
    }
    
  
}
data = {    {1.0,0.0,0.0,0.0},
            {0.0,2.0,0.0,0.0},
            {0.0,0.0,3.0,0.0},
            {0.0,0.0,0.0,4.0}
        };
        
xform = Transform.ByData(data);
testPoint = Point.ByCoordinates(10,20,30);
x = testPoint.X;
y = testPoint.Y;
z = testPoint.Z;
resultPoint = xform.TransformPoint(testPoint);
resultx = resultPoint.X;
resulty = resultPoint.Y;
resultz = resultPoint.Z;
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch455_T015_FFI_Transform_Identity()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"
class Geometry
{
    private hostEntityID : var;
}
class Point extends Geometry
{
   
    public X                        : var; //double = GlobalCoordinates[0];
    public Y                        : var; //double = GlobalCoordinates[1];
    public Z                        : var; //double = GlobalCoordinates[2];
    private def init : bool ()
    {
       
        X                      =  0.0;
        Y                      =  0.0;
        Z                      =  0.0;
   
        return = true;
    }
    
   
	
	public constructor ByCoordinates(xTranslation : double, yTranslation : double, zTranslation : double)
    {
        neglect = init();
        X = xTranslation;
        Y = yTranslation;
        Z = zTranslation;
    }
	
   
   
   
}
class Tuple4
{
    X : var;
    Y : var;
    Z : var;
    H : var;
    
    constructor XYZH(xValue : double, yValue : double, zValue : double, hValue : double)
    {
        X = xValue;
        Y = yValue;
        Z = zValue;
        H = hValue;        
    }
    
    constructor XYZ(xValue : double, yValue : double, zValue : double)
    {
        X = xValue;
        Y = yValue;
        Z = zValue;
        H = 1.0;        
    }
    constructor ByCoordinates3(coordinates : double[] )
    {
        X = coordinates[0];
        Y = coordinates[1];
        Z = coordinates[2];
        H = 1.0;        
    }
    constructor ByCoordinates4(coordinates : double[] )
    {
        X = coordinates[0];
        Y = coordinates[1];
        Z = coordinates[2];
        H = coordinates[3];    
    }
    
    def get_X : double () 
    {
        return = X;
    }
    
    def get_Y : double () 
    {
        return = Y;
    }
    
    def get_Z : double () 
    {
        return = Z;
    }
    
    def get_H : double () 
    {
        return = H;
    }
    
    public def Multiply : double (other : Tuple4)
    {
        return = X * other.X + Y * other.Y + Z * other.Z + H * other.H;
    }
    
    public def Coordinates3 : double[] ()
    { 
        return = {X, Y, Z };
    }
    
    public def Coordinates4 : double[] () 
    { 
        return = {X, Y, Z, H };
    }
}
class Vector
{
    X : var;
    Y : var;
    Z : var;
    
    public constructor ByCoordinates(xx : double, yy : double, zz : double)
    {
        X = xx;
        Y = yy;
        Z = zz;
    }
}
class Transform
{
    public C0 : Tuple4; 
    public C1 : Tuple4; 
    public C2 : Tuple4; 
    public C3 : Tuple4;     
    
    public constructor ByTuples(C0Value : Tuple4, C1Value : Tuple4, C2Value : Tuple4, C3Value : Tuple4)
    {
        C0 = C0Value;
        C1 = C1Value;
        C2 = C2Value;
        C3 = C3Value;
    }
    public constructor ByData(data : double[][])
    {
        C0 = Tuple4.ByCoordinates4(data[0]);
        C1 = Tuple4.ByCoordinates4(data[1]);
        C2 = Tuple4.ByCoordinates4(data[2]);
        C3 = Tuple4.ByCoordinates4(data[3]);
    }
    
   
    public constructor Identity()
	
	{  C0 = Tuple4.XYZH(1.0,0.0,0.0,0.0);
       C1 = Tuple4.XYZH(0.0,1.0,0.0,0.0);
       C2 = Tuple4.XYZH(0.0,0.0,1.0,0.0);
       C3 = Tuple4.XYZH(0.0,0.0,0.0,1.0);
     
     }
	
}
resultTransform = Transform.Identity();
r0 = resultTransform.C0;
r1 = resultTransform.C1;
r2 = resultTransform.C2;
r3 = resultTransform.C3;
r0X = r0.X;
r0Y = r0.Y;
r0Z = r0.Z;
r0H = r0.H;
r1X = r1.X;
r1Y = r1.Y;
r1Z = r1.Z;
r1H = r1.H;
r2X = r2.X;
r2Y = r2.Y;
r2Z = r2.Z;
r2H = r2.H;
r3X = r3.X;
r3Y = r3.Y;
r3Z = r3.Z;
r3H = r3.H;
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch456_T016_FFI_Transform_GetTuples()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"
class Geometry
{
    private hostEntityID : var;
}
class Point extends Geometry
{
   
    public X                        : var; //double = GlobalCoordinates[0];
    public Y                        : var; //double = GlobalCoordinates[1];
    public Z                        : var; //double = GlobalCoordinates[2];
    private def init : bool ()
    {
       
        X                      =  0.0;
        Y                      =  0.0;
        Z                      =  0.0;
   
        return = true;
    }
    
   
	
	public constructor ByCoordinates(xTranslation : double, yTranslation : double, zTranslation : double)
    {
        neglect = init();
        X = xTranslation;
        Y = yTranslation;
        Z = zTranslation;
    }
	
   
   
   
}
class Tuple4
{
    X : var;
    Y : var;
    Z : var;
    H : var;
    
    constructor XYZH(xValue : double, yValue : double, zValue : double, hValue : double)
    {
        X = xValue;
        Y = yValue;
        Z = zValue;
        H = hValue;        
    }
    
    constructor XYZ(xValue : double, yValue : double, zValue : double)
    {
        X = xValue;
        Y = yValue;
        Z = zValue;
        H = 1.0;        
    }
    constructor ByCoordinates3(coordinates : double[] )
    {
        X = coordinates[0];
        Y = coordinates[1];
        Z = coordinates[2];
        H = 1.0;        
    }
    constructor ByCoordinates4(coordinates : double[] )
    {
        X = coordinates[0];
        Y = coordinates[1];
        Z = coordinates[2];
        H = coordinates[3];    
    }
    
    def get_X : double () 
    {
        return = X;
    }
    
    def get_Y : double () 
    {
        return = Y;
    }
    
    def get_Z : double () 
    {
        return = Z;
    }
    
    def get_H : double () 
    {
        return = H;
    }
    
    public def Multiply : double (other : Tuple4)
    {
        return = X * other.X + Y * other.Y + Z * other.Z + H * other.H;
    }
    
    public def Coordinates3 : double[] ()
    { 
        return = {X, Y, Z };
    }
    
    public def Coordinates4 : double[] () 
    { 
        return = {X, Y, Z, H };
    }
}
class Vector
{
    X : var;
    Y : var;
    Z : var;
    
    public constructor ByCoordinates(xx : double, yy : double, zz : double)
    {
        X = xx;
        Y = yy;
        Z = zz;
    }
}
class Transform
{
    public C0 : Tuple4; 
    public C1 : Tuple4; 
    public C2 : Tuple4; 
    public C3 : Tuple4;     
    
    public constructor ByTuples(C0Value : Tuple4, C1Value : Tuple4, C2Value : Tuple4, C3Value : Tuple4)
    {
        C0 = C0Value;
        C1 = C1Value;
        C2 = C2Value;
        C3 = C3Value;
    }
    public constructor ByData(data : double[][])
    {
        C0 = Tuple4.ByCoordinates4(data[0]);
        C1 = Tuple4.ByCoordinates4(data[1]);
        C2 = Tuple4.ByCoordinates4(data[2]);
        C3 = Tuple4.ByCoordinates4(data[3]);
    }
    
   	
    public def GetTuples : Tuple4[]()
    {
        tupleDataC0 = C0;
        tupleDataC1 = C1;
        tupleDataC2 = C2;
        tupleDataC3 = C3;
        return = { tupleDataC0, tupleDataC1, tupleDataC2, tupleDataC3 };
    }
    public constructor Identity()
	
	{  C0 = Tuple4.XYZH(1.0,0.0,0.0,0.0);
       C1 = Tuple4.XYZH(0.0,1.0,0.0,0.0);
       C2 = Tuple4.XYZH(0.0,0.0,1.0,0.0);
       C3 = Tuple4.XYZH(0.0,0.0,0.0,1.0);
     
     }
	
}
resultTransform = Transform.Identity();
resultTuples = resultTransform.GetTuples();
r0 = resultTuples[0];
r1 = resultTuples[1];
r2 = resultTuples[2];
r3 = resultTuples[3];
r0X = r0.X;
r0Y = r0.Y;
r0Z = r0.Z;
r0H = r0.H;
r1X = r1.X;
r1Y = r1.Y;
r1Z = r1.Z;
r1H = r1.H;
r2X = r2.X;
r2Y = r2.Y;
r2Z = r2.Z;
r2H = r2.H;
r3X = r3.X;
r3Y = r3.Y;
r3Z = r3.Z;
r3H = r3.H;
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch457_T017_FFI_Transform_GetData()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"
class Geometry
{
    private hostEntityID : var;
}
class Point extends Geometry
{
   
    public X                        : var; //double = GlobalCoordinates[0];
    public Y                        : var; //double = GlobalCoordinates[1];
    public Z                        : var; //double = GlobalCoordinates[2];
    private def init : bool ()
    {
       
        X                      =  0.0;
        Y                      =  0.0;
        Z                      =  0.0;
   
        return = true;
    }
    
   
	
	public constructor ByCoordinates(xTranslation : double, yTranslation : double, zTranslation : double)
    {
        neglect = init();
        X = xTranslation;
        Y = yTranslation;
        Z = zTranslation;
    }
	
   
   
   
}
class Tuple4
{
    X : var;
    Y : var;
    Z : var;
    H : var;
    
    constructor XYZH(xValue : double, yValue : double, zValue : double, hValue : double)
    {
        X = xValue;
        Y = yValue;
        Z = zValue;
        H = hValue;        
    }
    
    constructor XYZ(xValue : double, yValue : double, zValue : double)
    {
        X = xValue;
        Y = yValue;
        Z = zValue;
        H = 1.0;        
    }
    constructor ByCoordinates3(coordinates : double[] )
    {
        X = coordinates[0];
        Y = coordinates[1];
        Z = coordinates[2];
        H = 1.0;        
    }
    constructor ByCoordinates4(coordinates : double[] )
    {
        X = coordinates[0];
        Y = coordinates[1];
        Z = coordinates[2];
        H = coordinates[3];    
    }
    
    def get_X : double () 
    {
        return = X;
    }
    
    def get_Y : double () 
    {
        return = Y;
    }
    
    def get_Z : double () 
    {
        return = Z;
    }
    
    def get_H : double () 
    {
        return = H;
    }
    
    public def Multiply : double (other : Tuple4)
    {
        return = X * other.X + Y * other.Y + Z * other.Z + H * other.H;
    }
    
    public def Coordinates3 : double[] ()
    { 
        return = {X, Y, Z };
    }
    
    public def Coordinates4 : double[] () 
    { 
        return = {X, Y, Z, H };
    }
}
class Vector
{
    X : var;
    Y : var;
    Z : var;
    
    public constructor ByCoordinates(xx : double, yy : double, zz : double)
    {
        X = xx;
        Y = yy;
        Z = zz;
    }
}
class Transform
{
    public C0 : Tuple4; 
    public C1 : Tuple4; 
    public C2 : Tuple4; 
    public C3 : Tuple4;     
    
    public constructor ByTuples(C0Value : Tuple4, C1Value : Tuple4, C2Value : Tuple4, C3Value : Tuple4)
    {
        C0 = C0Value;
        C1 = C1Value;
        C2 = C2Value;
        C3 = C3Value;
    }
    public constructor ByData(data : double[][])
    {
        C0 = Tuple4.ByCoordinates4(data[0]);
        C1 = Tuple4.ByCoordinates4(data[1]);
        C2 = Tuple4.ByCoordinates4(data[2]);
        C3 = Tuple4.ByCoordinates4(data[3]);
    }
    
   	
    public def GetData()
	{
		t0 = C0;
		t1 = C1;
		t2 = C2;
		t3 = C3;
		temp = 	{	{t0.X, t0.Y, t0.Z, t0.H},
					{t1.X, t1.Y, t1.Z, t1.H},
					{t2.X, t2.Y, t2.Z, t2.H},
					{t3.X, t3.Y, t3.Z, t3.H}
				};
		return = temp;
	}
    public constructor Identity()
	
	{  C0 = Tuple4.XYZH(1.0,0.0,0.0,0.0);
       C1 = Tuple4.XYZH(0.0,1.0,0.0,0.0);
       C2 = Tuple4.XYZH(0.0,0.0,1.0,0.0);
       C3 = Tuple4.XYZH(0.0,0.0,0.0,1.0);
     
     }
	
}
resultTransform = Transform.Identity();
resultData = resultTransform.GetData();
result0 = resultData[0];
result1 = resultData[1];
result2 = resultData[2];
result3 = resultData[3];
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch458_T018_FFI_Math_Trigonometric_Hyperbolic()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class Math
{
				external (""ffi_library"") def dc_sec:double(deg:double);
				external (""ffi_library"") def dc_csc:double(deg:double);
				external (""ffi_library"") def dc_cot:double(deg:double);
				external (""ffi_library"") def dc_asec:double(deg:double);
				external (""ffi_library"") def dc_acsc:double(deg:double);
				external (""ffi_library"") def dc_acot:double(deg:double);	
				external (""ffi_library"") def dc_cosh : double (val : double);
				external (""ffi_library"") def dc_sinh : double (val : double);
				external (""ffi_library"") def dc_tanh : double (val : double);			
				external (""ffi_library"") def dc_csch : double (val : double);
				external (""ffi_library"") def dc_sech : double (val : double);
				external (""ffi_library"") def dc_coth : double (val : double);					
           
                constructor GetInstance()
                {}              
                			
                def Sec : double ( val : double )
                {
                                return = dc_sec(val);
                }
                
                def Csc : double ( val : double )
                {
                                return = dc_csc(val);
                }
                
                def Cot : double ( val : double )
                {
                                return = dc_cot(val);
                }
				
                def ArcSec : double ( val : double )
                {
                                return = dc_asec(val);
                }
                
                def ArcCsc : double ( val : double )
                {
                                return = dc_acsc(val);
                }
                
                def ArcCot : double ( val : double )
                {
                                return = dc_acot(val);
                }
				
				def Sinh : double ( val : double )
                {
                                return = dc_sinh(val);
                }
                
                def Cosh : double ( val : double )
                {
                                return = dc_cosh(val);
                }
                
                def Tanh : double ( val : double )
                {
                                return = dc_tanh(val);
                }
				
				def Sech : double ( val : double )
                {
                                return = dc_sech(val);
                }
                
                def Csch : double ( val : double )
                {
                                return = dc_csch(val);
                }
                
                def Coth : double ( val : double )
                {
                                return = dc_coth(val);
                }
}
[Associative]
{
                math = Math.GetInstance();
				//trigonometric
                angle = 30.0;
                sec_30 = math.Sec(angle);
                csc_30 = math.Csc(angle);
                cot_30 = math.Cot(angle);
                asec_30 = math.ArcSec(sec_30);
                acsc_30 = math.ArcCsc(csc_30);
                acot_30 = math.ArcCot(cot_30);
				//hyperbolic
				sinh_1 = math.Sinh(1.0);
				cosh_1 = math.Cosh(1.0);
				tanh_1 = math.Tanh(1.0);				
				sech_1 = math.Sech(1.0);
				csch_1 = math.Csch(1.0);
				coth_1 = math.Coth(1.0);     
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch459_T019_FFI_Math_Others()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class Math
{
                external (""ffi_library"") def dc_ceil : double (val : double);
				external (""ffi_library"") def dc_floor : double (val : double);
				external (""ffi_library"") def dc_abs : double (val : double);
				external (""ffi_library"") def dc_pow : double (val1 : double, val2 : double);
				external (""ffi_library"") def dc_exp : double (val : double);
				external (""ffi_library"") def dc_factorial : int (val : int); //overflow problem. int is too small
				external (""ffi_library"") def dc_sum_range_step_size : double (val1 : double, val2 : double, step: double);
				external (""ffi_library"") def dc_sum_range_step_num : double (val1 : double, val2 : double, stepNum: int);
				external (""ffi_library"") def dc_sign : int (val : double);
				external (""ffi_library"") def dc_log10 : double (val : double);
				external (""ffi_library"") def dc_logbase: double (val : double, logbase : double);
				external (""ffi_library"") def dc_max : double (val1 : double, val2 : double);
				external (""ffi_library"") def dc_min : double (val1 : double, val2 : double);
				external (""ffi_library"") def dc_round : double (val : double, decimals: int);
				
                constructor GetInstance()
                {}
                
                def Ceil : double ( val : double )
                {
                                return = dc_ceil(val);
                }
                def Floor : double ( val : double )
                {
                                return = dc_floor(val);
                }
				
				def Abs : double ( val : double )
                {
                                return = dc_abs(val);
                }
                
                def Pow : double ( val1 : double, val2 : double )
                {
                                return = dc_pow(val1, val2);
                }
                
                def Exp : double ( val : double )
                {
                                return = dc_exp(val);
                }
				
				def Factorial : int ( val : int )
                {
                                return = dc_factorial(val);
                }
				
				def SumRangeStepSize : double (val1 : double, val2 : double, step: double)
                {
                                return = dc_sum_range_step_size(val1, val2, step);
                }
				
				def SumRangeStepNum : double (val1 : double, val2 : double, stepNum: int)
                {
                                return = dc_sum_range_step_num(val1, val2, stepNum);
                }
				
				def Sign : int ( val : double )
                {
                                return = dc_sign(val);
                }
                def Log10 : double ( val : double )
                {
                                return = dc_log10(val);
                }
				
				def LogBase : double (val : double, logbase : double)
                {
                                return = dc_logbase(val, logbase);
                }
                
                def Max : double ( val1 : double, val2 : double )
                {
                                return = dc_max(val1, val2);
                }
				
				def Min : double ( val1 : double, val2 : double )
                {
                                return = dc_min(val1, val2);
                }
                
                def Round : double (val : double, decimals: int)
                {
                                return = dc_round(val, decimals);
                }
}
[Associative]
{
                math = Math.GetInstance();
				ceil_5d5 = math.Ceil(5.5);
				floor_5d5 = math.Floor(5.5);
				abs_5 = math.Abs(5.0);
				abs_neg5 = math.Abs(-5.0);
				pow_3p4 = math.Pow(3.0, 4.0);	
				exp_3 = math.Exp(3.0);
				fact_10 = math.Factorial(10);
				sum_1t100s11 = math.SumRangeStepSize(1.0,100.0,11.0);
				sum_1t100sn11 = math.SumRangeStepNum(1.0,100.0,11);
				val = 8.8234893405;
				sign_pos = math.Sign(val);
				//sign_neg = math.Sign(-val); //wrong answer, sign_neg = 4294967295, should be -1
				sign_zero = math.Sign(0.0);
				log10_val = math.Log10(val);
				logbase_val_5 = math.LogBase(val, 5.0);
				max_10 = math.Max(val, 10.0);
				min_Neg2 = math.Min(val, -2.0);
				round_val_5 = math.Round(val, 5);
				round_negval_5 = math.Round(-val, 5); 
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch460_T020_Vector_ByCoordinates()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"import (Vector from ""ProtoGeometry.dll"");
	vec =  Vector.ByCoordinates(3.0,4.0,0.0); 
	vec_X = vec.get_X(); 
	vec_Y = vec.get_Y();
	vec_Z = vec.get_Z();
	
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch461_T021_Vector_ByCoordinates()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"import (Vector from ""ProtoGeometry.dll"");
	vec =  Vector.ByCoordinates(3.0,4.0,0.0,true); 
	vec_X = vec.get_X();
	vec_Y = vec.get_Y();
	vec_Z = vec.get_Z();
	vec_Normalised=vec.Normalize();
	vec2 =  Vector.ByCoordinates(3.0,4.0,0.0,false);
	
	vec2 =  Vector.ByCoordinates(3.0,4.0,0.0,false);
	vec2_X = vec2.get_X();
	vec2_Y = vec2.get_Y();
	vec2_Z = vec2.get_Z();
	vec_len = vec2.GetLength();
	vec1 =  Vector.ByCoordinates(3.0,4.0,0.0,null); 
	vec4 =  Vector.ByCoordinateArrayN({3.0,4.0,0.0});
	vec4_coord={vec4.get_X(),vec4.get_Y(),vec4.get_Z()};
	vec5 =  Vector.ByCoordinateArrayN({3.0,4.0,0.0},true); 
	vec5_coord={vec5.get_X(),vec5.get_Y(),vec5.get_Z()};
	
	is_same = vec.Equals(vec);// same vec
	vec2=  Vector.ByCoordinates(1.0,2.0,0.0);
	is_same2 = vec.Equals(vec2);// different vec
	
	
	vec3 =  Vector.ByCoordinates(1.0,0.0,0.0,true); 
	is_parallel1 = vec.IsParallel(vec); //same vec
	vec4=  Vector.ByCoordinates(3.0,0.0,0.0);	
	is_parallel2 = vec3.IsParallel(vec4);//parallel
	vec5 =  Vector.ByCoordinates(3.0,4.0,5.0); //non parallel
	is_parallel3 = vec.IsParallel(vec5);
	vec6 =  Vector.ByCoordinates(0.0,1.0,0.0);
	vec7 =  Vector.ByCoordinates(1.0,0.0,0.0);
	is_perp1 = vec6.IsPerpendicular(vec7);//same vec
	is_perp2 = vec6.IsPerpendicular(vec5);//diff vec
	dotProduct=vec2.Dot(vec2);
	vec8 =  Vector.ByCoordinates(1.0,0.0,0.0,false);
	vec9 =  Vector.ByCoordinates(0.0,1.0,0.0,false);
	crossProduct=vec8.Cross(vec9);
	cross_X=crossProduct.get_X();
	cross_Y=crossProduct.get_Y();
	cross_Z=crossProduct.get_Z();
	newVec=vec5.Scale(2.0);//single
	newVec_X=newVec.get_X();
	newVec_Y=newVec.get_Y();
	newVec_Z=newVec.get_Z();
	coord_Vec=    vec.ComputeGlobalCoords(1,2,3);
	
	";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch462_T022_Array_Marshal()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"import (Dummy from ""ProtoTest.dll"");
dummy = Dummy.Dummy();
arr = {0.0,1.0,2.0,3.0,4.0,5.0,6.0,7.0,8.0,9.0,10.0};
sum_1_10 = dummy.SumAll(arr);
twice_arr = dummy.Twice(arr);
	";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch463_vector1()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class Vector
{
	external (""libmath"") def dc_sqrt : double (val : double);
	
	private def abs(val : double)
	{
		return = val < 0.0 ? -1 * val : val;
	}
	
	private tol : var;
	public GlobalCoordinates        : var;
	public X                        : var;
	public Y                        : var;
	public Z                        : var;
    public Length                   : var;
    public Normalized               : var; //= false;
    public ParentCoordinateSystem   : var; //=  CoordinateSystem.BaseCoordinateSystem;
    public XLocal                   : var; // = 0;
    public YLocal                   : var; // = 0;
    public ZLocal                   : var; //= 0;
    
    private def init : bool ()
    {
        tol =  1.0/1000000;
        
        
        GlobalCoordinates = null;
        X                 = 0.0;
        Y                 = 0.0;
        Z                 = 0.0;
        Length                 = null;
        Normalized             = false;
        ParentCoordinateSystem = null;
        XLocal                 = 0.0;
        YLocal                 = 0.0;
        ZLocal                 = 0.0;
        
        return = true;        
    }
    public constructor ByCoordinates(x : double, y : double, z : double)
    {
        neglect = init();
        
        X = x;
        Y = y;
        Z = z;
    }
	public constructor ByCoordinates(x : double, y : double, z : double, normalized : bool)
    {
	    neglect = init();
		
        normFactor = dc_sqrt(x*x + y*y+ z*z);
        normFactor = null;
		normFactor2 = normFactor > 0 ? normFactor : 1;
        
        X = normalized ? x / normFactor2 : x;
        Y = normalized ? y / normFactor2 : y;
        Z = normalized ? z / normFactor2 : z;
		
		X = x;
		Y = y;
		Z = z;
        Normalized = normalized;
    }
    public constructor ByCoordinateArray(coordinates : double[])
    {
        neglect = init();
        
        X = coordinates[0];
        Y = coordinates[1];
        Z = coordinates[2];    
    }
	
	public constructor ByCoordinateArrayN(coordinates : double[])
    {
       // normFactor = dc_sqrt(coordinates[0]*coordinates[0] + coordinates[1]*coordinates[1] + coordinates[2]*coordinates[2]);
        normFactor=null;
		normFactor2 = normFactor > 0 ? normFactor : 1;
        X = coordinates[0] / normFactor2;
        Y = coordinates[1] / normFactor2;
        Z = coordinates[2] / normFactor2;
        
        Normalized = true;
    }
	
	
	
	//	no inline conditional
	public def Normalize : Vector () 
	{
	    normFactor = dc_sqrt(X*X + Y*Y + Z*Z);
	    normFactor = null;
        X = X / normFactor;
        Y = Y / normFactor;
        Z = Z / normFactor;
		return = Vector.ByCoordinates(X, Y, Z, true);
	}
    
	public def Dot : double (otherVector : Vector)
	{
		return = X * otherVector.X + Y * otherVector.Y + Z * otherVector.Z;
	}
	public def Cross : Vector (otherVector : Vector)
    {
        return = Vector.ByCoordinates(
            Y*otherVector.Z - Z*otherVector.Y,
            Z*otherVector.X - X*otherVector.Z,
            X*otherVector.Y - Y*otherVector.X);
    }
	public def Scale : Vector (scaleFactor : double)
	{
		return = Vector.ByCoordinates(scaleFactor*X,
									  scaleFactor*Y,
									  scaleFactor*Z);
	}
	public def ComputeGlobalCoords( x : double, y : double, z : double)
    {
        //localCoordsTuple = Tuple4.XYZH(x, y, z, 0.0);
        //globalCoordsTuple = cs.Matrix.ApplyTransform(localCoordsTuple);
        //return = {globalCoordsTuple.X, globalCoordsTuple.Y, globalCoordsTuple.Z};
        return = {x, y, z};
    }
    public def IsParallel : bool (otherVector: Vector)
    {
        vec1 = Normalize();
        vec2 = otherVector.Normalize();
        dp = vec1.Dot(vec2);
		
		// checking if Dot product is 1 or -1
        return = ( (abs(dp - 1.0) < tol) || (abs(dp + 1.0) < tol) );
    }
	
	public def IsPerpendicular : bool (otherVector : Vector) 
	{
		return = (abs(Dot(otherVector)) < tol) ? true : false;
	}
	
    public def Equals : bool (otherVector : Vector)
	{
		return = (X == otherVector.X) && (Y == otherVector.Y) && (Z == otherVector.Z);
	}
    
 /*   public def GetLength ()
    {
        return = [Imperative]
        {
            if( Length == null )
            {
                Length = dc_sqrt(X*X + Y*Y + Z*Z);
            }
            return = Length;
        }
    }*/
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch464_Z001_FFI_Regress_1455587()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"external (""ffi_library"") def sum_all : double (arr : double[], numElems : int);
arr = {1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0};
sum_1_to_10 = sum_all(arr, 10);";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch465_T02_SampleTestUsingCodeFromExternalFile()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"variable;
[Imperative]
{
    variable = 5;
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch466_T03_TestAssignmentToUndefinedVariables_negative()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"a;
[Imperative]
{
    a = b;
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch467_T04_TestAssignmentStmtInExpression_negative()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"[Imperative]
{
    b = if (2==2) { a = 0; }
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch468_T05_TestRepeatedAssignment_negative()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"a;
b;
[Imperative]
{
    b = a = 2;
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch469_T06_TestInUnnamedBlock_negative()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"{
    b = 2;
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch470_T07_TestOutsideBlock()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"b = 2;
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch471_T08_TestCyclicReference()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"a;
b;
[Imperative]
{
	a = 2;
        b = a *3;
        a = 6.5;
        a = b / 3; 
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch472_T09_TestInNestedBlock()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"a;
b;
f;
g1;
g3;
d;
c;
e;
[Imperative]
{
	a = 4;
	b = a + 2;
    [Associative]
    {
        [Imperative]
        {
            b = 0;
            c = 0;
            if ( a == 4 )
            {
                b = 4;
            }			
            else
            {
                c = 5;
            }
            d = b;
            e = c;	
            g2 = g1;	
        }
    }
	f = a * 2;
    g1 = 3;
    g3 = g2;
      
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch473_T10_TestInFunctionScope()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"test;
[Imperative]
{
	 def add:double( n1:int, n2:double )
	 {
		  
		  return = n1 + n2;
	 }
	 test = add(2,2.5);
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch474_T11_TestInClassScope()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"
                                 class A 
                                 {
                                      
                                      P1:int;
                                      constructor A(p1:int)
                                      {
                                          P1 = p1;
                                      }
          
                                 }
                                 a1 = A.A(2);
                                 b1 = a1.P1;
                            
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch475_T12_TestUsingMathAndLogicalExpr()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"a;
b;
c;
d;
e;
[Imperative]
{
  e = 0;
  a = 1 + 2;
  b = 0.1 + 1.9;
  b = a + b;
  c = b - a - 1;
  d = a + b -c;
  if( c < a )
  {
     e = 1;
  }
  else
  {
    e = 2;
  }
  if( c < a || b > d)
  {
     e = 3;
  }
  else
  {
    e = 4;
  }
  if( c < a && b > d)
  {
     e = 3;
  }
  else
  {
    e = 4;
  }
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch476_T13_TestUsingMathAndLogicalExpr()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"a;
b;
[Imperative]
{
  a = 3.5;
  b = 1.5;
  b = a + b; 
  b = a - b;
  b = a * b;
  b = a / b; 
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch477_T14_TestUsingMathAndLogicalExpr()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"a;
f;
c1;
c2;
c3;
[Imperative]
{
  a = 3;
  b = -4;
  b = a + b; 
  b = a - b;
  b = a * b;
  b = a / b; 
  
  c1 = 1 && 2;
  c2 = 1 && 0;
  c3 = null && true;
  
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch478_T15_TestInRecursiveFunctionScope()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"val;
[Imperative]
{
	
	def fac : int ( n : int )
	{
	    if(n == 0 )
        {
		    return = 1;
        }
		return = n * fac (n-1 );
	}
    val = fac(5);				
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch479_T16_TestInvalidSyntax()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"[Imperative]
{
	x = ;
        y = x;
        z == 4;
       			
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch480_T17_TestInvalidSyntax()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"[Imperative]
{
	_rt = 3;
       ""dg"" = 4;
       w = 2
       f = 3;
       v = v;
       			
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch481_T18_TestMethodCallInExpr()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"test0;
test1;
test2;
test3;
test4;
test5;
[Imperative]
{
	   def  mul : double ( n1 : double, n2 : double )
        {
        	return = n1 * n2;
        }
        def add : double ( n1 : double, n2 : double )
        {
        	return = n1 + n2;
        }
        test0 = add (-1 , 7.5 ) ;
        test1 = add ( mul(1,2), 4.5 ) ;  
        test2 = add (mul(1,2.5), 4 ) ; 
        test3 = add (add(1.5,0.5), 4.5 ) ;  
        test4 = add (1+1, 4.5 ) ;
        test5 = add (add(1,1)+add(1,0.5), 3.0 ) ;
       
       			
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch482_T19_TestAssignmentToCollection()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"a;
b;
[Imperative]
{
	a = {{1,2},3.5};
	c = a[1];
	d = a[0][1];
        a[0][1] = 5;
       	b = a[0][1] + a[1];
        a = 2;		
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch483_T20_TestInvalidSyntax()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"a;
b;
[Imperative]
{
	a = 2;;;;;
    b = 3;
       			
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch484_T21_TestAssignmentToBool()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"a;
b;
[Imperative]
{
	a = true;
    b = false;      			
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch485_T22_TestAssignmentToNegativeNumbers()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"a;
b;
c;
d;
e;
[Imperative]
{
	a = -1;
	b = -111;
	c = -0.1;
	d = -1.99;
	e = 1.99;
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch486_T23_TestUsingMathAndLogicalExpr()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"c1;
c2;
c3;
c4;
[Imperative]
{
  a = -3.5;
  b = -4;
  c1 = a + b; 
  c2 = a - b;
  c3 = a * b;
  c4 = a / b; 
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch487_T24_TestUsingMathematicalExpr()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"c1;
c2;
c3;
c4;
[Imperative]
{
  a = 3;
  b = 2;
  c1 = a + b; 
  c2 = a - b;
  c3 = a * b;
  c4 = a / b; 
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch488_T25_TestUsingMathematicalExpr()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"c1;
c2;
c3;
c4;
[Imperative]
{
  a = 3.0;
  b = 2;
  c1 = a + b; 
  c2 = a - b;
  c3 = a * b;
  c4 = a / b; 
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch489_T26_Defect_1450854()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"[Imperative]
{
    a = 1;
    b = 2;
    c = 0;
	
    if (3 == a ^ b )
    {
        c = 3;
    }
    else
    {
        c = 0;
    }	
		
} 
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch490_T27_Defect_1450847()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"[Imperative]
{
	 a = 2;
	 b = 0;
	 c = -1;
	 d = null;
	 
	 a1 = ~a; 
	 b1 = ~b;
	 c1 = ~c;
	 d1 = ~d;
	 
	 e = -0.5;
	 e1 = ~e1;
	 
	 f1 = ~e + ~a;
 
 }
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch491_T29_Defect_1449887()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"[Imperative]
{  
	a = 14;  
	b = 7;  
	c = a & b; 
	d = a|b;
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch492_T30_Defect_1449887_2()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"[Imperative]
{   
 def ANDfunc:int(a:int,b:int)
 { 
  
  return = a & b; 
 
 }
 def ORfunc:int(a:int,b:int)
 {
   
   return = a|b;
 
 }
 
 e = 14;
 
 f = 7;
 
 c = ANDfunc(e,f); 
 
 d = ORfunc(e,f);
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch493_T31_Defect_1449877()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"c;
d;
e;
[Imperative]
{
	a = -1;
	b = -2;
	c = -3;
	c = a * b * c;
	d = c * b - a;
	e = b + c / a;
	f = a * b + c;
} ";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch494_T32_Defect_1449877_2()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"d;
[Imperative]
{
	def func:int(a:int,b:int)
	{
	return = b + a;
	}
	a = 3;
	b = -1;
	d = func(a,b);
} ";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch495_T33_Defect_1450003()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"_a_test;
_b;
_c;
[Imperative]
{
	def check:double( _a:double, _b:int )
	{
	_c = _a * _b;
	return = _c;
	} 
	_a_test = check(2.5,5);
	_b = 4.5;
	_c = true;
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch496_T34_Defect_1450727()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"z;
[Imperative]
{
	x = -5.5;
	y = -4.2;
 
	z = x + y;
 
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch497_T35_Defect_1450727_2()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"z;
[Imperative]
{
	def neg_float:double(x:double,y:double)
	{
	a = x;
	b = y;
	return = a + b;
	}
	z = neg_float(-2.3,-5.8);
 
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch498_T36_Defect_1450555()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"c;
[Imperative]
{
	a = true;
	b = 2;
	c = 2;
 
	if( a )
	b = false;
 
	if( b==0 )
	c = 1;
 }";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch499_T37_TestOperationOnNullAndBool()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"b;
[Imperative]
{
	a = true;
	b = a + 1;
	c = null + 2;
 }";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch500_T38_Defect_1449928()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"c;
[Imperative]
{
 a = 2.3;
 b = -6.9;
 c = a / b;
} 
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch501_T39_Defect_1449704()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"a;
[Imperative]
{
 a = b;
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch502_T40_Defect_1450552()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"a;
[Imperative]
{
 a = b;
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch503_T41__Defect_1452423()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"d;
[Imperative]
{
	b = true;
	c = 4.5;
	d = c * b;
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch504_T42__Defect_1452423_2()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"x;
[Imperative]
{
	a = { -2,3,4.5,true };
	x = 1;
	for ( y in a )
	{
		x = x *y;       //incorrect result
    }
	
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch505_T43__Defect_1452423_3()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"b;
[Imperative]
{
	a = 0;
	while ( a == false )
	{
		a = 1;
	}
	
	b = a;
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch506_T44__Defect_1452423_4()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"x;
[Imperative]
{
	y = true;
	x = 1 + y;
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch507_T45__Defect_1452423_5()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"a;
[Imperative]
{
	a = 4 + true;
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch508_T46_TestBooleanOperationOnNull()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"[Imperative]
{
	a = null;
	b = a * 2;
	c = a && 2;	
	d = 0;
	if ( a && 2 == 0)
	{
        d = 1;
	}
	else
	{
	    d = 2;
	}
	
	if( !a )
	{
	    d = d + 2;
	}
	if( a )
	{
	    d = d + 1;
	}
	
	
	
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch509_T47_TestBooleanOperationOnNull()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"d;
[Imperative]
{
	a = false;
        b = 0;
	d = 0;
	if( a == null)
	{
	    d = d + 1;
	}
    if( b == null)
	{
	    d = d + 1;
	}	
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch510_T48_MultipleAssignments()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class A
{
    i : int;
	constructor A ( a : int)
	{
	     t1 = t2 = 2;
		 i = t1 + t2 + a ;
	}
	
	def foo : int ( )
	{
	    t1 = t2 = 2;
		t3 = t1 + t2 + i;
        return  = t3;		
	}
	
}
a;
b;
x;
y;
b1;
[Imperative]
{
    def foo : int ( a : int )
	{
	    t1 = t2 = 2;
		return = t1 + t2 + a ;
	}
	a = b = 4;
    x = y = foo(1);
	a1 = A.A(1);
	b1 = a1.foo();
	
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch511_T49_TestForStringObjectType()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"b;
[Associative]
{
    def foo : string (x : string )
	{
	   return = x; 		
	}
    a = ""sarmistha"";
    b = foo ( a );	
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch512_T50_Defect_1449889()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"[Imperative]
{
	a = 3;
	b = 2;
	c = a & b;
	d = 5;
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch513_T51_Assignment_Using_Negative_Index()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"a = { 0, 1, 2, 3 };
c1 = a [-1];
c2 = a [-2];
c3 = a [-3];
c4 = a [-4];
c5 = a [-5];
c6 = a [-1.5];
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch514_T52_Defect_1449889()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"a;
c;
d;
[Imperative]
{
	a = b;
    c = foo();
	d = 1;
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch515_T53_Defect_1454691()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class A
{
	a : var;
	constructor CreateA ( a1 : int )
	{
		a = add_1(a1);
	}
	
	def add_1 ( x )
	{
	    return  = x + 1;
	}
	
}
[Imperative]
{
	A1 = A.CreateA(1);
	a = A1.a;
}
a;
x;
b;
[Associative]
{
    x = 3;
	A1 = A.CreateA(x);
	a = A1.a;
	b = [Imperative]
	{
	    if ( a < 10 )
		{
		    B1 = A.CreateA(a);
			return = B1.a;
		}
	}
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch516_T54_Defect_1454691()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class A
{
	a : var;
	constructor CreateA ( a1 : int )
	{
		a = add_1(a1);
	}
	
	def add_1 ( x )
	{
	    return  = x + 1;
	}
	
}
class B extends A
{
	b : var;
	constructor CreateB ( a1 : int )
	{
		b = a1 + 1;
		a = b + 1 ; //add_1(b);
	}
	
}
x;
a1;
a2;
b1;
b2;
[Imperative]
{
	A1 = A.CreateA(1);
	a1 = A1.a;
	B1 = B.CreateB(1);
	a2 = B1.a;
	b2 = B1.b;
}
def foo ( x ) 
{
    return = x;
}
c=[Associative]
{
    x = 3;
	A1 = A.CreateA(x);
	a1 = A1.a;
	B1 = B.CreateB(x);
	b1 = B1.b;
	a2 = B1.a;
	
	b = [Imperative]
	{
	    if ( a1 < 10 )
		{
		    B1 = B.CreateB(a1);
			return = { B1.a, B1.b };
		}
		return = 0;
	}
	return = b;
	
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch517_T55_Defect_1454691()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class A
{
	a : var;
	constructor CreateA ( a1 : int )
	{
		a = a1;
	}
	
	
}
y1;
y2;
y3;
y4;
[Imperative]
{
    y1 = 0;
	x = 1;
	while ( x != 2 )
	{
	    t1 = A.CreateA(x);
		y1 = y1 + t1.a;
		x = x + 1;	    
	}
	
	y2 = 0;
	c = { 3, 4 };
	for ( i in c )
	{
	    t1 = A.CreateA(i);
		y2 = y2 + t1.a;
	}
	
	y3 = 1;
	if( y3 < 2 )
	{
	    while ( y3 <= 2 )
		{
			t1 = A.CreateA(y3);
			y3 = y3 + t1.a;			    
		}
	}
	
	y4 = 1;
	if( y4 > 20 )
	{
	    y4 = -1;
	}
	else
	{
	    t1 = A.CreateA(y4);
		y4 = y4 + t1.a;
	}
	
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch518_T56_Defect_1454691()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class A
{
	a : var;
	constructor CreateA ( a1 : int )
	{
		a = add_1(a1);
	}
	
	def add_1 ( x )
	{
		return  = x + 1;
	}
}
b;
[Associative]
{
    x = 3;
	A1 = A.CreateA(x);
	a1 = A1.a;
	b = [Imperative]
	{
		if ( a1 < 10 )
		{
			return = A1.a;
		}
	return = A1.a + 1;
	}
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch519_T57_Defect_1454691_2()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class A
{
	a : var;
	constructor CreateA ( a1 : int )
	{
		a = a1 + 1;
	}
}
def foo ( )
{
    x = A.CreateA(1);
 	a1 = x.a; 
	
	y = [Imperative]
	{
		if ( a1  < 10 )
		{
			x1 = A.CreateA(2);
			a2 = x1.a; 
			return = a2;
		}
		return = a1; 
	}
	return = a1 + y; 
}
x2;
[Associative]
{  
	x2 = foo(); 	
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch520_T58_Defect_1454691_3()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class A
{
	a : var;
	constructor CreateA ( a1 : int )
	{
		a = a1;
	}
	
	def CreateNewVal ( )
	{
		y = [Imperative]
		{
			if ( a  < 10 )
			{
				x1 = A.CreateA(10);
				y1 = x1.a;
 				return = y1;
			}
			return = a;
		}
		return = a + y;
	}
}
    a1 = A.CreateA(1);
	b1 = a1.CreateNewVal(); 
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch521_T59_Defect_1455590()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"
	a = b = 2;
c;d;e;
	[Imperative]
	{
		c = d = e = 4+1;
	}
		";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch522_T60_Defect_1455590_2()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"def foo ( a )
{
	b = c = a ;
	return = a + b + c;
}
x = foo ( 3 );
y;
[Imperative]
{
	y = foo ( 4 );
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch523_T61_TestBooleanOperationOnNull()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"b1;
b2;
b3;
[Imperative]
{
    a = null;
	
	b1 = 0;
	b2 = 1;
	b3 = -1;
	
	if( a == b1 )
	{
	    b1 = 10;
	}
	if ( a < b2 )
	{
		b2 = 10;
	}
	if ( a > b3 )
	{
		b3 = 10;
	}
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch524_T62_Defect_1456721()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"b = true;
a = 2 * b;
c = 3;
b1 = null;
a1 = 2 * b1;
c1 = 3;
a2 = 1 + true;
b2 = 2 * true;
c2 = 3  - true;
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch525_T63_Defect_1452643()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"[Imperative]
{
    b = if (2==2) { a = 0; } // expected 'StatementUsedInAssignment' warning here
	a = 2;
	
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch526_T64_Defect_1450715()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"a;
[Imperative]
{
    a = { 1, 0.5, null, {2,3 } ,{{0.4, 5}, true } };
	
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch527_T01_TestImpInsideImp()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"[Imperative]
{
    x = 5;
    [Imperative]
    {
        y = 5;
    }
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch528_T02_TestAssocInsideImp()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"x;
y;
z;
w;
f;
[Imperative]
{
    x = 5.1;
    z = y;
    w = z * 2;
    [Associative]
    {
        y = 5;
        z = x;
        x = 35;
        i = 3;
    }
    f = i;
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch529_T03_TestImpInsideAssoc()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"x;
y;
z;
w;
f;
[Associative]
{
    x = 5.1;
    z = y;
    w = z * 2;
    [Imperative]
    {
        y = 5;
        z = x;
        x = 35;
        i = 3;
    }
    f = i;
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch530_T04_TestImperativeBlockWithMissingBracket_negative()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"[Imperative]
{
    x = 5.1;
    
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch531_T05_TestImperativeBlockWithMissingBracket_negative()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"[Imperative]
    x = 5.1;
    
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch532_T06_TestNestedImpBlockWithMissingBracket_negative()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"[Imperative]
{
    x = 5.1;
    [Associative]
    {
    
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch533_T07_TestBlockWithIncorrectBlockName_negative()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"[imperitive]
{
    x = 5.1;    
    
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch534_T08_TestBlockWithIncorrectBlockName_negative()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"[Imperative]
{
    x = 5.1; 
    [assoc]
    {
        y = 2;
    }
    
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch535_T09_Defect_1449829()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"b;
[Associative]
{ 
 a = 2;
[Imperative]
{   
	b = 1;
    if(a == 2 )
	{
	b = 2;
    }
    else 
    {
	b = 4;
    }
}
}
  ";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch536_T10_Defect_1449732()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"c;
[Imperative]
{
	def fn1:int(a:int,b:int)
	{
	return = a + b -1;
	}
 
	c = fn1(3,2);
} ";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch537_T11_Defect_1450174()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"c;
[Imperative]
{
	def function1:double(a:int,b:double)
	{ 
	return = a * b;
	}	
 
	c = function1(2 + 3,4.0 + 6.0 / 4.0);
}
  ";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch538_T12_Defect_1450599()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"[Imperative]
	x = 5;
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch539_T13_Defect_1450527()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"temp;
[Associative]
{
	a = 1;
	temp=0;
	[Imperative]
	{
	    i = 0;
	    if(i <= a)
	    {
	        temp = temp + 1;
	    }
	}
	a = 2;
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch540_T14_Defect_1450550()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"a;
[Associative]
{
	a = 4;
	b = a*2;
	x = [Imperative]
	{
		def fn:int(a:int)
		{
		    return = a;
		}
		
		_i = fn(0);
		
		return = _i; 
	}
	a = x;
	
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch541_T15_Defect_1452044()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"b;
[Associative]
{
	a = 2;
	[Imperative]
	{
		b = 2 * a;
	}
		
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch542_T16__Defect_1452588()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"x;
[Imperative]
{
	a = { 1,2,3,4,5 };
	for( y in a )
	{
		x = 5;
	}
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch543_T17__Defect_1452588_2()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"c;
[Imperative]
{
	a = 1;
	
	if( a == 1 )
	{
		if( a + 1 == 2)
			b = 2;
	}
	
	c = a;
	
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch544_T18__Negative_Block_Syntax()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"x = 1;
y = {Imperative]
{
   return = x + 1;
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch545_T19_Imperative_Nested_1467063()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"[Imperative]
{
   a=1;
   [Imperative]
    {
    b=a+1;
    }
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch546_T01_WhileBreakContinue()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"x;
y;
[Imperative]
{
    x = 0;
    y = 0;
    while (true) 
    {
        x = x + 1;
        if (x > 10)
            break;
        
        if ((x == 1) || (x == 3) || (x == 5) || (x == 7) || (x == 9))
            continue;
        
        y = y + 1;
    }
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch547_T02_WhileBreakContinue()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"sum;
[Imperative]
{
    x = 0;
    sum = 0;
    while (x <= 10) 
    {
        x = x + 1;
        if (x >= 5)
            break;
        
        y = 0;
        while (true) 
        {
            y = y + 1;
            if (y >= 10)
                break;
        }
        // y == 10 
        sum = sum + y;
    }
    // sum == 40 
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch548_T03_ForLoopBreakContinue()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"sum;
[Imperative]
{
    sum = 0;
    for (x in {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13})
    {
        if (x >= 11)
            break;
        sum = sum + x;
    }
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch549_T04_ForLoopBreakContinue()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"sum;
[Imperative]
{
    sum = 0;
    for (x in {1, 2, 3, 4, 5, 6, 7, 8, 9, 10})
    {
        sum = sum + x;
        if (x <= 5)
            continue;
        sum = sum + 1;
    }
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch550_T05_FunctionBreakContinue()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"a;
b;
c;
d;
[Imperative]
{
    def ding:int(x:int)
    {
        if (x >= 5)
            break;
        return = 2 * x;
    }
    def dong:int(x: int)
    {
        if (x >= 5)
            continue;
        return = 2 * x;
    }
    a = ding(1);
    b = ding(6);
    c = dong(2);
    d = dong(7);
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch551_T01_TestNegativeSyntax_Negative()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"[Imperative]
{
	a = { 4, 5, 3 };
	x = 0;
 
	for { y in a }
	{
	    x = x + 1;
    }
} ";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch552_T02_TestNegativeUsage_InAssociativeBlock_Negative()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"[Associative]
{
	a = { 2, 3 };
	x = 1;
	
	for( y in a )
	{
		x = x + 1;
	}
}
	";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch553_T03_TestNegativeUsage_InUnnamedBlock_Negative()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"{
	a = { 2,3 };
	x = 1;
	
	for( y in a )
	{
		x = x + 1;
	}
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch554_T04_TestNegativeUsage_OutsideBlock_Negative()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"
	a = { 2,3 };
	x = 1;
	
	for( y in a )
	{
		x = x + 1;
	}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch555_T05_TestForLoopInsideNestedBlocks()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"x;
[Associative]
{
	a = { 4, 5 };
	[Imperative]
	{
		x = 0;
		b = { 2,3 };
		for( y in b )
		{
			x = y + x;
		}
	}
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch556_T06_TestInsideNestedBlocksUsingCollectionFromAssociativeBlock()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"b;
[Associative]
{
	a = { 4,5 };
	b =[Imperative]
	{
	
		x = 0;
		for( y in a )
		{
			x = x + y;
		}
		return = x;
	}
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch557_T07_TestForLoopUsingLocalVariable()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"x;
[Imperative]
{
	a = { 1, 2, 3, 4, 5 };
	x = 0;
	for( y in a )
	{
		local_var = y + x;	
        x = local_var + y;		
	}
	z = local_var;
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch558_T08_TestForLoopInsideFunctionDeclaration()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"y;
z;
[Imperative]
{
	def sum : double ( a : double, b : double, c : double )
	{   
		x = 0;
	    z = {a, b, c};
		for(y in z)
		{
			x = x + y;
		}
		
		return = x;
	}
	
	
	
	y = sum ( 1.0, 2.5, -3.5 );
	
	z = sum ( -4.0, 5.0, 6.0 );
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch559_T09_TestForLoopWithBreakStatement()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"x;
[Imperative]
{
	a = { 1,2,3 };
	x = 0;
	for( i in a )
	{
		x = x + 1;
		break;
	}	
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch560_T10_TestNestedForLoops()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"x;
[Imperative]
{
	a = { 1,2,3 };
	x = 0;
	for ( i in a )
	{
		for ( j in a )
        {
			x = x + j;
		}
	}
}	";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch561_T11_TestForLoopWithSingleton()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"x;
[Imperative]
{
	a = {1};
	b = 1;
	x = 0;
 
	for ( y in a )
	{
		x = x + 1;
	}
 
	for ( y in b )
	{
		x = x + 1;
	}
} ";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch562_T12_TestForLoopWith2DCollection()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"x;
z;
[Imperative]
{
	a = {{1},{2,3},{4,5,6}};
	x = 0;
	i = 0;
    for (y in a)
	{
		x = x + y[i];
	    i = i + 1;	
	}
	z = 0;
    for (i1 in a)
	{
		for(j1 in i1)
		{
		    z = z + j1;
		}
	}
			
	
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch563_T13_TestForLoopWithNegativeAndDecimalCollection()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"x;
y;
[Imperative]
{
	a = { -1,-3,-5 };
	b = { 2.5,3.5,4.2 };
	x = 0;
	y = 0;
    for ( i in a )
	{
		x = x + i;
	}
	
	for ( i in b )
	{
		y = y + i;
	}
	
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch564_T14_TestForLoopWithBooleanCollection()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"x;
[Imperative]
{ 
	a = { true, false, true, true };
	x = false;
	
	for( i in a )
	{
	    x = x + i;
	}
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch565_T15_TestForLoopWithMixedCollection()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"x;
y;
[Imperative]
{
	a = { -2, 3, 4.5 };
	x = 1;
	for ( y in a )
	{
		x = x * y;       
    }
	
	a = { -2, 3, 4.5, true };
	y = 1;
	for ( i in a )
	{
		y = i * y;       
    }
	
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch566_T16_TestForLoopInsideIfElseStatement()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"a;
[Imperative]
{
	a = 1;
	b = { 2,3,4 };
	if( a == 1 )
	{
		for( y in b )
		{
			a = a + y;
		}
	}
	
	else if( a !=1)
	{
		for( y in b )
		{
			a = a + 1;
		}
	}
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch567_T17_TestForLoopInsideNestedIfElseStatement()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"a;
[Imperative]
{
	a = 1;
	b = { 2,3,4 };
	c = 1;
	if( a == 1 )
	{
		if(c ==1)
		{
			for( y in b )
			{
				a = a + y;
			}
		}	
	}
	
	else if( a !=1)
	{
		for( y in b )
		{
			a = a + 1;
		}
	}
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch568_T18_TestForLoopInsideWhileStatement()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"x;
[Imperative]
{
	a = 1;
	b = { 1,1,1 };
	x = 0;
	
	if( a == 1 )
	{
		while( a <= 5 )
		{
			for( i in b )
			{
				x = x + 1;
			}
			a = a + 1;
		}
	}
}
			";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch569_T19_TestForLoopInsideNestedWhileStatement()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"x;
[Imperative]
{
	i = 1;
	a = {1,2,3,4,5};
	x = 0;
	
	while( i <= 5 )
	{
		j = 1;
		while( j <= 5 )
		{
			for( y in a )
			{
			x = x + 1;
			}
			j = j + 1;
		}
		i = i + 1;
	}
}	
		
			";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch570_T20_TestForLoopWithoutBracket()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"x;
[Imperative]
{
	a = { 1, 2, 3 };
    x = 0;
	
	for( y in a )
	    x = y;
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch571_T21_TestIfElseStatementInsideForLoop()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"x;
[Imperative]
{
	a = { 1,2,3,4,5 };
	x = 0;
	
	for ( i in a )
	{
		if( i >=4 )
			x = x + 3;
			
		else if ( i ==1 )
			x = x + 2;
		
		else
			x = x + 1;
	}
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch572_T22_TestWhileStatementInsideForLoop()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"x;
[Imperative]
{
	a = { 1,2,3 };
	x = 0;
	
	for( y in a )
	{
		i = 1;
		while( i <= 5 )
		{
			j = 1;
			while( j <= 5 )
			{
				x = x + 1;
				j = j + 1;
			}
		i = i + 1;
		}
	}
}
	";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch573_T23_TestForLoopWithDummyCollection()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"a1;
a2;
a3;
a4;
a5;
a6;
[Imperative]
{
	a = {0, 0, 0, 0, 0, 0};
	b = {5, 4, 3, 2, 1, 0, -1, -2};
	i = 5;
	for( x in b )
	{
		if(i >= 0)
		{
			a[i] = x;
			i = i - 1;
		}
	}
	a1 = a[0];
	a2 = a[1];
	a3 = a[2];
	a4 = a[3];
	a5 = a[4];
	a6 = a[5];
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch574_T24_TestForLoopToModifyCollection()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"a6;
a7;
[Imperative]
{
	a = {1,2,3,4,5,6,7};
	i = 0;
	for( x in a )
	{
	
		a[i] = a[i] + 1;
		i = i + 1;
		
	}
	a1 = a[0];
	a2 = a[1];
	a3 = a[2];
	a4 = a[3];
	a5 = a[4];
	a6 = a[5];
	a7 = a[6];
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch575_T25_TestForLoopEmptyCollection()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"x;
[Imperative]
{
	a = {};
	x = 0;
	for( i in a )
	{
		x = x + 1;
	}
	
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch576_T26_TestForLoopOnNullObject()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"x;
[Imperative]
{
	x = 0;
	
	for ( i in b )
	{
		x = x + 1;
	}
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch577_T27_TestCallingFunctionInsideForLoop()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"x;
[Imperative]
{
	def function1 : double ( a : double )
	{		
		return = a + 0.7;
	}
	
	a = { 1.3, 2.3, 3.3, 4.3 };
	
	x = 3;
	
	for ( i in a )
	{	
		x = x + function1( i );
	}
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch578_T28_Defect_1452966()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"x;
[Imperative]
{
	a = { 1,2,3 };
	x = 0;
	for ( i in a )
	{
		for ( j in a )
        {
			x = x + j;
		}
	}
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch579_T29_Defect_1452966_2()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"x;
[Imperative]
{
	a = {{6},{5,4},{3,2,1}};
	x = 0;
	
    for ( i in a )
	{
		for ( j in i )
		{
			x = x + j;
		}
	}		
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch580_T30_ForLoopNull()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"x;
[Imperative]
{
	a = { 1,null,null };
	x = 1;
	
	for( i in a )
	{
		x = x + 1;
	}
}
	";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch581_T31_ForLoopSyntax01_Negative()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"[Imperative]
{
	a = { 1,2,3,4 };
	
	x = 0;
	
	for ( (i in a) )
	{
		x = x + i;
	}
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch582_T32_ForLoopSyntax02_Negative()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"[Imperative]
{
	a = { 1,2,3,4 };
	
	x = 0;
	
	for  (i in a) 
	{
	{
		x = x + i;
	}
	}
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch583_T33_ForLoopToReplaceReplicationGuides()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"a = { 1, 2 };
b = { 3, 4 };
//c = a<1> + b <2>;
dummyArray = { { 0, 0 }, { 0, 0 } };
counter1 = 0;
counter2 = 0;
[Imperative]
{
	for ( i in a )
	{
		counter2 = 0;
		
		for ( j in b )
		{	    
			dummyArray[ counter1 ][ counter2 ] = i + j;
			
			counter2 = counter2 + 1;
		}
		counter1 = counter1 + 1;
	}
	
}
a1 = dummyArray[0][0];
a2 = dummyArray[0][1];
a3 = dummyArray[1][0];
a4 = dummyArray[1][1];";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch584_T34_Defect_1452966()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"sum;
[Imperative]
{
	a = { 1, 2, 3, 4 };
	sum = 0;
	
	for(i in a )
	{
		for ( i in a )
		{
			sum = sum + i;
		}
	}
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch585_T35_Defect_1452966_2()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"sum;
[Imperative]
{
	a = { {1, 2, 3}, {4}, {5,6} };
	sum = 0;
	
	for(i in a )
	{
		for (  j in i )
		{
			sum = sum + j;
		}
	}
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch586_T36_Defect_1452966_3()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"b;
[Associative]
{
	a = { {1, 2, 3}, {4}, {5,6} };
	
	def forloop :int ( a: int[]..[] )
	{
		sum = 0;
		sum = [Imperative]
		{
			for(i in a )
			{
				for (  j in i )
				{
					sum = sum + j;
				}
			}
			return = sum;
		}
		return = sum;
	}
	
	b =forloop(a);
	
	
	
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch587_T37_Defect_1454517()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"	a = { 4,5 };
	
	b =[Imperative]
	{
		x = 0;
		for( y in a )
		{
			x = x + y;
		}
		
		return = x;
	}
	";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch588_T38_Defect_1454517_2()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"	a = { 4,5 };
	x = 0;
	
	[Imperative]
	{
		x = 0;
		for( y in a )
		{
			x = x + y;
		}
	}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch589_T38_Defect_1454517_3()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"def foo ( a : int [] )
{
    x = 0;
	x = [Imperative]
	{	
		for( y in a )
		{
			x = x + y;
		}
		return =x;
	}
	return = x;
}
a = { 4,5 };	
b;
[Imperative]
{
	b = foo(a);
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch590_T39_Defect_1452951()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"x;
[Associative]
{
	a = { 4,5 };
   
	[Imperative]
	{
	       //a = { 4,5 }; // works fine
		x = 0;
		for( y in a )
		{
			x = x + y;
		}
	}
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch591_T39_Defect_1452951_1()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"x;
[Imperative]
{
	def foo ( a : int[])
	{
	    a[1] = 4;
		return = a;
	}
	a = { 4,5 };
   
	[Associative]
	{
	   x = foo(a);
	}
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch592_T39_Defect_1452951_2()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class A
{
    a1 : var[];
	constructor A( x : int[])
	{
	    a1 = x;
		[Imperative]
		{
		    if(a1[0] < 10 ) 
			{
			    a1[0] = 10;
			}
		}
	}
	
	def foo :int[] ( )
	{
	    count = 0;
		[Imperative]
		{
			for ( i in a1 )
			{
				a1[count]  = i + 1;
				count = count + 1;
			}
		}
		return = a1;
	}
	
}
a = { 4, 4 };
a4;
[Imperative]
{
	a2 = A.A(a);
	a3 = a2.foo();
	a4 = a2.a1;
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch593_T39_Defect_1452951_3()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class A
{
    a1 : var[];
	constructor A( x : int[])
	{
	    a1 = x;
		[Imperative]
		{
		    if(a1[0] < 10 ) 
			{
			    a1[0] = 10;
			}
		}
	}
	
	def foo :int ( )
	{
	    count = 0;
		[Imperative]
		{
			for ( i in a1 )
			{
				count = count + 1;
			}
		}
		return = count;
	}
	
}
a = { 4, 4 };
a3;
a4;
[Imperative]
{
	a2 = A.A(a);
	a3 = a2.foo();
	a4 = a2.a1;
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch594_T40_Create_3_Dim_Collection_Using_For_Loop()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"x = { { { 0, 0} , { 0, 0} }, { { 0, 0 }, { 0, 0} }};
a = { 0, 1 };
b = { 2, 3};
c = { 4, 5 };
y = [Imperative]
{
	c1 = 0;
	for ( i in a)
	{
	    c2 = 0;
		for ( j in b )
		{
		    c3 = 0;
			for ( k in c )
			{
			    x[c1][c2][c3] = i + j + k;
				c3 = c3 + 1;
			}
			c2 = c2+ 1;
		}
		c1 = c1 + 1;
	}
	
	return = x;
			
}
p1 = y[0][0][0];
p2 = y[0][0][1];
p3 = y[0][1][0];
p4 = y[0][1][1];
p5 = y[1][0][0];
p6 = y[1][0][1];
p7 = y[1][1][0];
p8 = y[1][1][1];
p9 = x [1][1][1];";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch595_T41_Create_3_Dim_Collection_Using_For_Loop_In_Func_Call()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"
def foo :int[]..[]( a : int[], b:int[], c :int[])
{
	y = [Imperative]
	{
		x = { { { 0, 0} , { 0, 0} }, { { 0, 0 }, { 0, 0} }};
		c1 = 0;
		for ( i in a)
		{
			c2 = 0;
			for ( j in b )
			{
				c3 = 0;
				for ( k in c )
				{
					x[c1][c2][c3] = i + j + k;
					c3 = c3 + 1;
				}
				c2 = c2+ 1;
			}
			c1 = c1 + 1;
		}		
		return = x;				
	}
	return = y;
}
a = { 0, 1 };
b = { 2, 3};
c = { 4, 5 };
y = foo ( a, b, c );
p1 = y[0][0][0];
p2 = y[0][0][1];
p3 = y[0][1][0];
p4 = y[0][1][1];
p5 = y[1][0][0];
p6 = y[1][0][1];
p7 = y[1][1][0];
p8 = y[1][1][1];
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch596_T42_Create_3_Dim_Collection_Using_For_Loop_In_Class_Constructor()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class A
{
    a : var[][][];
	b : var[][][];
	c : var[][][];
	y : var[][][];
	
	constructor A( a1:int[], a2:int[], a3:int[])
	{
	    a = a1;
		b = a2;
		c = a3;
		y = [Imperative]
		{
			x = { { { 0, 0} , { 0, 0} }, { { 0, 0 }, { 0, 0} }};
			c1 = 0;
			for ( i in a)
			{
				c2 = 0;
				for ( j in b )
				{
					c3 = 0;
					for ( k in c )
					{
						x[c1][c2][c3] = i + j + k;
						c3 = c3 + 1;
					}
					c2 = c2+ 1;
				}
				c1 = c1 + 1;
			}		
			return = x;				
		}		
	}	
}
a = { 0, 1 };
b = { 2, 3};
c = { 4, 5 };
x = A.A( a, b , c);
y = x.y;
p1 = y[0][0][0];
p2 = y[0][0][1];
p3 = y[0][1][0];
p4 = y[0][1][1];
p5 = y[1][0][0];
p6 = y[1][0][1];
p7 = y[1][1][0];
p8 = y[1][1][1];
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch597_T43_Create_3_Dim_Collection_Using_For_Loop_In_Class_Method()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class A
{
    a : var[];
	b : var[];
	c : var[];
	
	constructor A( a1:int[], a2:int[], a3:int[])
	{
	    a = a1;
		b = a2;
		c = a3;
	}
	
	def foo :int[]..[]( )
	{
		y = [Imperative]
		{
			x = { { { 0, 0} , { 0, 0} }, { { 0, 0 }, { 0, 0} }};
			c1 = 0;
			for ( i in a)
			{
				c2 = 0;
				for ( j in b )
				{
					c3 = 0;
					for ( k in c )
					{
						x[c1][c2][c3] = i + j + k;
						c3 = c3 + 1;
					}
					c2 = c2+ 1;
				}
				c1 = c1 + 1;
			}		
			return = x;				
		}
		return = y;
	}
}
a = { 0, 1 };
b = { 2, 3};
c = { 4, 5 };
x = A.A( a, b , c);
y = x.foo ();
p1 = y[0][0][0];
p2 = y[0][0][1];
p3 = y[0][1][0];
p4 = y[0][1][1];
p5 = y[1][0][0];
p6 = y[1][0][1];
p7 = y[1][1][0];
p8 = y[1][1][1];
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch598_T43_Create_CollectioninForLoop_1457172()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class A
{
a : var;
b : var;
constructor A( a1:int[], a2:int[])
{
a = a1;
b = a2;
}
def foo :int[]..[]( a : int[], b:int[])
{
y = [Imperative]
{
x = { { 0,0,0 }, {0,0,0} , {0,0,0} };
c1 = 0;
for ( i in a)
{
c2 = 0;
for ( j in b )
{
x[c1][c2] = i + j ;
c2 = c2+ 1;
}
c1 = c1 + 1;
}
return = x;
}
return = y;
}
}
a = { 0, 1, 2 };
b = { 3, 4, 5 };
x = A.A( a, b);
y = x.foo ();
p1 = y[0][0];
p2 = y[0][0];
p3 = y[0][2];
p4 = y[1][0];
p5 = y[1][1];
p6 = y[1][2];
p7 = y[2][0];
p8 = y[2][1];
p8 = y[2][2];
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch599_T43_Create_CollectioninForLoop_1457172_2()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class A
{
a : var;
b : var;
c : var;
constructor A( a1:int[], a2:int[], a3:int[])
{
a = a1;
b = a2;
c = a3;
}
def foo :int[]..[]( a : int[], b:int[], c :int[])
{
y = [Imperative]
{
x = { { { 0, 0} , { 0, 0} }, { { 0, 0 }, { 0, 0} }};
c1 = 0;
for ( i in a)
{
c2 = 0;
for ( j in b )
{
c3 = 0;
for ( k in c )
{
x[c1][c2][c3] = i + j + k;
c3 = c3 + 1;
}
c2 = c2+ 1;
}
c1 = c1 + 1;
}
return = x;
}
return = y;
}
}
a = { 0, 1 };
b = { 2, 3};
c = { 4, 5 };
x = A.A( a, b , c);
y = x.foo (); // y expected : y={{{6,7},{7,8}},{{7,8},{8,9}}}
p1 = y[0][0][0]; //6
p2 = y[0][0][1];//7
p3 = y[0][1][0];//7
p4 = y[0][1][1];//8
p5 = y[1][0][0];//7
p6 = y[1][0][1];//8
p5 = y[1][1][0];//8
p6 = y[1][1][1];//9
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch600_T44_Use_Bracket_Around_Range_Expr_In_For_Loop()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"s;
[Imperative] {
s = 0;
for (i in (0..10)) {
	s = s + i;
}
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch601_T45_Defect_1458284()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class Point
{
    X : var;
    Y : var;
    Z : var;
    id : var;
    
    constructor ByCoordinates(x : double, y : double, z : double)
    {
        X = x;
        Y = y;
        Z = z;
        id = x;
    }
}
    def length (pts : Point[])
    {
        numberOfPoints = [Imperative]
        {
            counter = 0;
            for(pt in pts)
            {
                counter = counter + 1;
            }
            
            return = counter;
        }
        return = numberOfPoints;
    }
    
    def getIds (pts : Point[])
    {
        numPoints = length(pts);
        
        pt_ids = [Imperative]
        {
            tempArr = -1..-1..#numPoints; // = { -1, -1, -1, -1, -1 }           
            counter = 0;
            for(pt in pts)
            {
                tempArr[counter] = pt.id;
		counter = counter + 1;
            }
            
            return = tempArr;
        }
        
        return = pt_ids;
    }
class BSplineCurve
{
    id : var;
    numPts : var;
    ids : var[]..[];
    
    constructor ByPoints(ptsOnCurve : Point[])
    {
        id = null;
        numPts = length(ptsOnCurve);
        ids = getIds(ptsOnCurve);
    }
}
pt1 = Point.ByCoordinates(0,0,0);
pt2 = Point.ByCoordinates(5,0,0);
pt3 = Point.ByCoordinates(10,0,0);
pt4 = Point.ByCoordinates(15,0,0);
pt5 = Point.ByCoordinates(20,0,0);
pts = {pt1, pt2, pt3, pt4, pt5};
bcurve = BSplineCurve.ByPoints(pts);
numpts = bcurve.numPts;
ids = bcurve.ids;
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch602_T01_TestAllPassCondition()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"x;
y;
z;
[Imperative]
{
 a1 = 2 ;
 a2 = -1;
 a3 = 101;
 a4 = 0;
 
 b1 = 1.0;
 b2 = 0.0;
 b3 = 0.1;
 b4 = -101.99;
 b5 = 10.0009;
 
 c1 = { 0, 1, 2, 3};
 c2 = { 1, 0.2};
 c3 = { 0, 1.4, true };
 c4 = {{0,1}, {2,3 } };
 
 x = {0, 0, 0, 0};
 if(a1 == 2 ) // pass condition
 {
     x[0] = 1;
 }  
 if(a2 <= -1 )  // pass condition
 {
     x[1] = 1;
 }
 if(a3 >= 101 )  // pass condition
 {
     x[2] = 1;
 }
 if(a4 == 0 )  // pass condition
 {
     x[3] = 1;
 }
 
 
 y = {0, 0, 0, 0, 0};
 if(b1 == 1.0 ) // pass condition
 {
     y[0] = 1;
 }  
 if(b2 <= 0.0 )  // pass condition
 {
     y[1] = 1;
 }
 if(b3 >= 0.1 )  // pass condition
 {
     y[2] = 1;
 }
 if(b4 == -101.99 )  // pass condition
 {
     y[3] = 1;
 }
 if(b5 == 10.0009 )  // pass condition
 {
     y[4] = 1;
 }
 
 
 z = {0, 0, 0, 0};
 if(c1[0] == 0 ) // pass condition
 {
     z[0] = 1;
 }  
 if(c2[1] <= 0.2 )  // pass condition
 {
     z[1] = 1;
 }
 if(c3[2] == true )  // pass condition
 {
     z[2] = 1;
 }
  if(c4[0][0] == 0 )  // pass condition
 {
     z[3] = 1;
 }
 
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch603_T02_IfElseIf()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"temp1;
[Imperative]
{
 a1 = 7.5;
 
 temp1 = 10;
 
 if( a1>=10 )
 {
 temp1 = temp1 + 1;
 }
 
 elseif( a1<2 )
 {
 temp1 = temp1 + 2;
 }
 elseif(a1<10)
 {
 temp1 = temp1 + 3;
 }
 
  
 }";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch604_T03_MultipleIfStatement()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"temp;
[Imperative]
{
 a=1;
 b=2;
 temp=1;
 
 if(a==1)
 {temp=temp+1;}
 
 if(b==2)  //this if statement is ignored
 {temp=4;}
 
 }";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch605_T04_IfStatementExpressions()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"temp1;
[Imperative]
{
 a=1;
 b=2;
 temp1=1;
 if((a/b)==0)
 {
  temp1=0;
  if((a*b)==2)
  { temp1=2;
  }
 } 
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch606_T05_InsideFunction()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"temp;
temp2;
[Imperative]
{
	def fn1:int(a:int)
	{   
		if(a>=0)
			return = 1;
		else 
			return = 0;
	}
    def fn2:int(a:int)
	{   
	   
		if( a < 0 )
		{
			return = 0;
		}
		elseif	( a == 2 )
		{
			return = 2;
		}
		else
		{
			return = 1;
		}
	}
	
    temp = 0;
    temp2 = 0;
	 if(fn1(-1)==0)
		 temp=fn1(2);	 
		 
	
	if(fn2(2)==2)
	   temp2=fn2(1);
} ";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch607_T06_NestedIfElse()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"temp1;
[Imperative]
{
def fn1:int(a:int)
{   
     if( a >= 0 )
		return = 1;
	else
		return = 0;
}
 a = 1;
 b = 2;
 temp1 = 1;
 
 if( a/b == 0 )
 {
  temp1=0;
  if( a*b == 1 )
  { 
	temp1=2;
  }  
  else if( a*b == 4 )
  { 
	temp1=5;
  }  
  else
  {
	temp1=3;
	if( fn1(-1)>-1 )
	{
		temp1=4;
	}
  }
 } 
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch608_T07_ScopeVariableInBlocks()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"temp;
a;
[Imperative]
{
	a = 4;
	b = a*2;
	temp = 0;
	if(b==8)
	{
		i=0;
		temp=1;
		if(i<=a)
		{
		  temp=temp+1;
		}
    }
	a = temp;
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch609_T08_NestedBlocks()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"a;
b;
temp;
[Associative]
{
	a = 4;
	
	[Imperative]
	{
		i=10;
		temp=1;
		if(i>=-2)
		{
		  temp=2;
		}
    }
	b=2*a;
	a=2;
              
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch610_T09_NestedIfElseInsideWhileStatement()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"temp;
[Imperative]
{
		i=0;
		temp=0;
		while(i<=5)
		{ 
			i=i+1;
			if(i<=3)
			{
				temp=temp+1;
			}		  
			elseif(i==4)
			{
				temp = temp+1;
				if(temp==i) 
				{
					temp=temp+1;
				}			
			}
			else 
			{
				if (i==5)
				{ temp=temp+1;
				}
			}
		}
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch611_T10_TypeConversion()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"temp;
[Imperative]
{
    temp = 0;
    a=4.0;
    if(a==4)
        temp=1;
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch612_T11_TestIfElseUsingFunctionCall()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"a;
b;
[Imperative]
{
 def add : double (a :double, b:double)
 {
     return  = a + b;
 }
 
 a=4.0;
 b = 4.0;
 if(a<add(1.0,2.0))
 {
     a = 1;
 }
 else
 {
     a = 0;
 }
 
 if(add(1.5,2.0) >= a)
 {
     b = 1;
 }
 else
 {
     b = 0;
 }
 
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch613_T12_TestIfElseUsingClassProperty()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"x;
y;
	class A 
    {                                      
		P1:var;
        constructor A(p1:int)
        {
            P1 = p1;
        }
          
    }
    
	[Imperative]
	{
	    a1 = A.A(2);
        b1 = a1.P1; 
		x = 2;
		y = 2;
		if(a1.P1 == 2 )
		{
		    x = 1;
		}
		else
		{
			x = 0;
		}
		
		if(3 < a1.P1  )
		{
		    y = 1;
		}
		else
		{
			y = 0;
		}
	}
                              
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch614_T13_IfElseIf()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"temp1;
[Imperative]
{
 a1 = -7.5;
 
 temp1 = 10.5;
 
 if( a1>=10.5 )
 {
 temp1 = temp1 + 1;
 }
 
 elseif( a1<2 )
 {
 temp1 = temp1 + 2;
 }
 
  
 }";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch615_T14_IfElseStatementExpressions()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"temp1;
[Imperative]
{
 a=1;
 b=2;
 temp1=1;
 if((a/b)==1)
 {
  temp1=0;
 }
 elseif ((a*b)==2)
 { temp1=2;
 }
 
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch616_T15_TestEmptyIfStmt()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"a;
b;
[Imperative]
{
 a = 0;
 b = 1;
 if(a == b);
 else a = 1;
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch617_T16_TestIfConditionWithNegation_Negative()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"a;
b;
[Imperative]
{
    a = 3;
    b = -3;
	if ( a == !b )
	{
	    a = 4;
	}
	
}
 
 ";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch618_T17_WhileInsideElse()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"i;
[Imperative]
{
	i=1;
	a=3;
    temp=0;
	if(a==4)             
	{
		 i = 4;
	}
	else
	{
		while(i<=4)
		 {
			  if(i>10) 
				temp=4;			  
			  else 
				i=i+1;
		 }
	}
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch619_T18_WhileInsideIf()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"i;
[Imperative]
{
	i=1;
	a=3;
    temp=0;
	if(a==3)             //when the if statement is removed, while loop works fine, otherwise runs only once
	{
		 while(i<=4)
		 {
			  if(i>10) 
				temp=4;			  
			  else 
				i=i+1;
		 }
	}
}
 
 ";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch620_T19_BasicIfElseTestingWithNumbers()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"a;
b;
c;
d;
[Imperative]
{
    a = 0;
    b = 0;
    c = 0;
    d = 0;
    if(1)
	{
		a = 1;
	}
	else
	{
		a = 2;
	}
	
	
	if(0)
	{
		b = 1;
	}
	else
	{
		b = 2;
	}
	
	if(0)
	{
		c = 1;
	}
	elseif(1)
	{
		c = 3;
	}
	
	if(0)
	{
		d = 1;
	}
	elseif(0)
	{
		d = 2;
	}
	else
	{
		d = 4;
	}
		
} 
 
 ";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch621_T20_BasicIfElseTestingWithNumbers()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"a;
b;
c;
d;
e;
f;
[Imperative]
{
    a = 0;
    b = 0;
    c = 0;
    d = 0;
    e = 0;
    f = 0;
    if(1.5)
	{
		a = 1;
	}
	else
	{
		a = 2;
	}
	
	
	if(-1)
	{
		b = 1;
	}
	else
	{
		b = 2;
	}
	
	if(0)
	{
		c = 1;
	}
	elseif(20)
	{
		c = 3;
	}
	
	if(0)
	{
		d = 1;
	}
	elseif(0)
	{
		d = 2;
	}
	else
	{
		d = 4;
	}
	
	if(true)
	{
		e = 5;
	}
	
	if(false)
	{
		f = 1;
	}
	else
	{
		f = 6;
	}
		
} 
 
 ";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch622_T21_IfElseWithArray_negative()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"c;
[Imperative]
{
    a = { 0, 4, 2, 3 };
	b = 1;
    c = 0;
	if(a > b)
	{
		c = 0;
	}
	else
	{
		c = 1;
	}
} 
 
 ";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch623_T22_IfElseWithArrayElements()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"c;
[Imperative]
{
    a = { 0, 4, 2, 3 };
	b = 1;
    c = 0;
	if(a[0] > b)
	{
		c = 0;
	}
	elseif( b  < a[1] )
	{
		c = 1;
	}
} 
 
 ";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch624_T23_IfElseSyntax_negative()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"[Imperative]
{
    if(1.5
	{
		b = 1;
	}
		
}
 
 ";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch625_T24_IfElseSyntax_negative()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"[Imperative]
{
    if1.5
	{
		b = 1;
	}
		
}
 
 ";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch626_T25_IfElseSyntax_negative()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"[Imperative]
{
    if1.5)
	{
		b = 1;
	}
		
} 
 
 ";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch627_T26_IfElseWithNegatedCondition()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"c;
[Imperative]
{
    a = 1;
	b = 1;
    c = 0;
	if( !(a == b) )
	{
		c = 1;
	}
	else
	{
		c = 2;
	}
		
} 
 
 ";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch628_T27_IfElseSyntax_negative()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"[Imperative]
{
    if(1)
	
		b = 1;
	}
		
} 
 
 ";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch629_T28_IfElseSyntax_negative()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"[Imperative]
{
    if(1)
	{
		{
		    b = 1;
	
		
} 
 
 ";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch630_T29_IfElseSyntax_negative()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"[Imperative]
{
    b = 0;
    if(1)
	{
		b = 1
	}
	
		
} 
 
 ";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch631_T30_IfElseSyntax_negative()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"[Imperative]
{
    if(1)
	{
		b = 1;
	}
	else c = 2 } 
	
		
} 
 
 ";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch632_T31_IfElseSyntax_negative()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"[Imperative]
{
    if(1)
	{
		b = 1;
	}
	elsee  { c = 2 } 
	
		
} 
 
 ";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch633_T32_IfElseSyntax_negative()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"[Imperative]
{
    if(1)
	{
		b = 1;
	}
	elseif  { c = 2 ;
	
		
} 
 
 ";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch634_T33_IfElseSyntax_negative()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"[Imperative]
{
    if(0)
	{
		b = 1;
	}
	elseif (0) { c = 2; }
	else { c = 3;}
	else {c = 4};
	
		
} 
 
 ";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch635_T34_IfElseSyntax_negative()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"[Imperative]
{
    if(0)
	{
		b = 1;
	}
	elseif { c = 2; }
	else { c = 3;}
	else {c = 4};
	
		
} 
 
 ";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch636_T35_IfElseWithEmptyBody()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"c;
[Imperative]
{
    c = 0;
    if(0)
	{
		
	}
	elseif (1) { c = 2; }
	else { }
	
	
		
} 
 
 ";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch637_T36_IfElseInsideFunctionScope()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"temp;
[Imperative]
{ 
 def crushcode:int (a:int, b:int)
 {
  if(a<=b)
      return = a+b;  
  else 
     return = 0;           
 }                                
 temp=crushcode(2,3);  
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch638_T37_Defect_1450920()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"a;
b;
c;
[Imperative]
{
    a = 0;
    b = 0;
    c = 0;
    d = 0;
    if(true)
	{
		a = 1;
	}
	
	if(false)
	{
		b = 1;
	}
	elseif(true)
	{
		b = 2;
	}
	
	if(false)
	{
		c = 1;
	}
	elseif(false)
	{
		c = 2;
	}
	else
	{
		c =  3;
	}		
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch639_T38_Defect_1450939()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"c;
d;
[Imperative]
{
   	def test:int( a:int, b:int )
	{
		c = 0;
	    if( !(a == b) ) 
		{
			c = 0;
		}
		elseif ( !(a==b) )
		{
			c = 1;
		}
		else
		{
			c = 2;
		}
		
		return = c;
	}
	
	
	a = 1;
	b = 1;
    c = 0;
    d = 0;
	if( !(a == b) ) 
	{
		d = 0;
	}
	elseif ( !(a==b) )
	{
		d = 1;
	}
	else
	{
		d = 2;
	}
	
	
	if( ! (test ( a, b ) == 2 ) )
	{
		c = 3;
	}
	else
	{
		c = 2;
	}
		
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch640_T39_Defect_1450920_2()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"a;
b;
c;
d;
[Imperative]
{
a=0;
b=0;
c=0;
d=0;
    if(0.4)
	{
		d = 4;
	}
	
	if(1.4)
	{
		a = 1;
	}
	
	if(0)
	{
		b = 1;
	}
	elseif(-1)
	{
		b = 2;
	}
	
	if(0)
	{
		c = 1;
	}
	elseif(0)
	{
		c = 2;
	}
	else
	{
		c =  3;
	}		
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch641_T40_Defect_1450843()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"b2;
b3;
[Imperative]
{
 a = null;
 b1 = 0;
 b2 = 0;
 b3 = 0;
 if(a!=1); 
 else 
   b1 = 2; 
   
 if(a==1); 
 else 
   b2 = 2;
   
 if(a==1); 
 elseif(a ==3);
 else b3 = 2;
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch642_T41_Defect_1450778()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"c;
d;
[Imperative]
{
 a=1;
 b=2;
 c=2;
 d = 2;
 
 if(a==1)
 {
    c = 1;
 }
 
 if(b==2)  
 {
     d = 1;
 }
 
 }
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch643_T42_Defect_1449707()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"c;
[Imperative]
{
 a = 1;
 b = 1;
 c = 1;
 if( a < 1 )
	c = 6;
 
 else if( b >= 2 )
	c = 5;
 
 else
	c = 4;
} ";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch644_T43_Defect_1450706()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"temp1;
temp2;
[Imperative]
{
 a1 = 7.3;
 a2 = -6.5 ;
 
 temp1 = 10;
 temp2 = 10;
 
 if( a1 <= 7.5 )
	temp1 = temp1 + 2;
 
 if( a2 >= -9.5 )
	temp2 = temp2 + 2;
 }";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch645_T44_Defect_1450706_2()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"x;
[Imperative]
{
	def float_fn:int(a:int)
	{
		if( a < 2 )
			return = 0;
		else
			return = 1;
	}
	 
	x = float_fn(1);
 
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch646_T45_Defect_1450506()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"temp;
[Imperative]
{
    i1 = 2;
    i2 = 3;
	i3 = 4.5;
	
    temp = 2;
    
	while(( i2 == 3 ) && ( i1 == 2 )) 
	{
	temp = temp + 1;
	i2 = i2 - 1;
    }
	
	if(( i2 == 3 ) || ( i3 == 4.5 )) 
	{
	temp = temp + 1;
    }
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch647_T46_TestIfWithNull()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"a;
b;
c;
[Imperative]
{
    a = null;
    c = null;
	
    if(a == 0)
	{
		a = 1;	
	}
    if(null == c)
	{
		c = 1;	
	}
    if(a == b)
	{
		a = 2;	
	}	
	
	
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch648_T47_Defect_1450858()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"i;
[Imperative]
{	
	i = 1;
	a = 3;
	if( a==3 )             	
	{		 
		while( i <= 4 )
		{
		if( i > 10 )
		temp = 4;
		else
		i = i + 1;
		}
	}
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch649_T48_Defect_1450858_2()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"test;
[Imperative]
{	
	def factorial:int(a:int)
	{
		 fact = 1;
		 
		 if( a != 0)
		 {
			 while( a > 0 )
			 { 
				fact = fact * a;
				a = a - 1;
			 }
		}	 
		
		return = fact;
	}
	
	test = factorial(4);
}	";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch650_T49_Defect_1450783()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"a;
[Imperative]
{
	a = 4;
	if( a == 4 )
	{
	    i = 0;
	}
	a = i;
	b = i;
} 
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch651_T50_Defect_1450817()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"temp;
[Imperative]
{ 
	def fn:int(a:int)
	{
		if( a < 0 )
		if( a < -1 )
		return = 0;
		else
		return = -1;
		
		return = 1;
	}
	
	x = fn(-1);
	
	temp = 1;
	
	if (fn(2))
	{
		temp = fn(5);
	}
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch652_T51_Defect_1452588()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"a;
[Imperative]
{
    a = 0;
    
    if ( a == 0 )
    {
	    b = 2;
    }
    c = a;
} 
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch653_T52_Defect_1452588_2()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"g1;
[Associative]
{ 
	[Imperative]
	{
            g2 = g1;	
	}	
	g1 = 3;      
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch654_T53_Defect_1452575()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"x;
[Imperative]
{ 
	def float_fn:int(a:double)
	{
		if( a < 2.0 )
			return = 0;
		else
			return = 1;
	}
	 
	x = float_fn(-1.5);
     
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch655_T54_Defect_1451089()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"temp;
[Imperative]
{ 
 def foo:double (a:int, b:int, c : double)
 {
  if(a<=b && b > c)
      return = a+b+c;  
  else 
     return = 0;           
 }                                
 temp=foo(2,3,2.5);  
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch656_T55_Defect_1450506()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"temp;
[Imperative]
{
    i1 = 1.5;
    i2 = 3;
    temp = 2;
    while( ( i2==3 ) && ( i1 <= 2.5 )) 
    {
        temp = temp + 1;
	    i2 = i2 - 1;
    }     
 
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch657_T56_Defect_1460162()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class A
{
    X : int;
    
    
    constructor A(x : int)
    {
        X = x;        
    }
}
def length:int  (pts : A[])
{
    numPts = [Imperative]
    {
        counter = 0;
        for(pt in pts)
        {
            counter = counter + 1;
        }  
        if( counter > 1 )
        {
            return = counter;
        }			
    //return = null;
    }
   return = numPts;
}
pt1 = A.A( 0 );
pt2 = A.A( 10 );
pts1 = {pt1, pt2};
pts2 = {pt1};
numpts1 = length(pts1);
numpts2 = length(pts2);
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch658_T57_Function_With_If_Else_But_No_Default_Return_Statement()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"x;
y;
[Imperative]
{
	def even : int (a : int) 
	{	
		if(( a % 2 ) > 0 )
			return = a + 1;
		
		else 
			return = a;
	}
	x = even(1);
	y = even(2);
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch659_T58_Defect_1450932_comparing_collection_with_singleton_Associative()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"d2;
[Associative]
{
    a2 = { 0, 1 };
	b2 = 1;
	d2 = a2 > b2 ? true : { false, false};
    //f2 = a2 > b2;	
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch660_T58_Defect_1450932_comparing_collection_with_singleton_Associative_2()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"f2;
[Associative]
{
    a2 = { 0, 1 };
    b2 = 1;	
    f2 = a2 > b2;	
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch661_T58_Defect_1450932_comparing_collection_with_singleton_Associative_3()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"f2;
[Associative]
{
    a2 = { 0, 1 };
    b2 = 1;
    d2 = a2 > b2 ? true : { false, false};
    f2 = a2 > b2;	
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch662_T58_Defect_1450932_comparing_collection_with_singleton_Imperative()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"c;
d;
f;
[Imperative]
{
    a = { 0, 1 };
	b = 1;
	c = -1;
	if(a > b)
	{
		c = 0;
	}
	else
	{
		c = 1;
	}
    d = a > b ? true : { false, false};
    f = a > b;
	
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch663_T59_Defect_1453881()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"b;
d;
d2 = ( null == 0 ) ? 1 : 0; 
[Imperative]
{
	a = false;
    b = 0.5;
	d = 0;
	if( a == null)
	{
	    d = d + 1;
	}
	else
	{
	   d = d + 2;
	}
    if( b == null)
	{
	    b = b + 1;
	}
	else
	{
	   b = b + 2;
	}
	
	if( b != null)
	{
	    b = b + 3;
	}
	else
	{
	    b = b + 4;
	}
	
	
}	
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch664_T59_Defect_1453881_2()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"def foo ()
{
    c = 
	[Imperative]
	{
		a = false;
		b = 0.5;
		d = 0;
		if( a == null)
		{
			d = d + 1;
		}
		else
		{
		   d = d + 2;
		}
		if( b == null)
		{
			b = b + 1;
		}
		else
		{
		   b = b + 2;
		}
		
		if( b != null)
		{
			b = b + 3;
		}
		else
		{
			b = b + 4;
		}
        return = { b, d };		
	}	
	return = c;
}
test = foo();
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch665_T60_Comparing_Class_Properties()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class B
{
    b : var;
    constructor B ( y )
    {
        b = y;
    }
}
class A
{ 
    a : var;
    constructor A ( x : var )
    {
        a = x;
    }
}
a1 = A.A(10);
b1 = B.B(10);
x1 = a1.a == B.B(10).b ? true : false ;
x2 = [Imperative]
{
    b = 0;
    if ( a1.a == B.B(10).b ) 
        b = true;
    else
        b = false;
    return = b;
}
	
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch666_T60_Comparing_Class_Properties_With_Null()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class B
{
    b : var;
    constructor B ( y )
    {
        b = y;
    }
}
class A
{ 
    a : var;
    
}
a1 = A.A(10);
b1 = B.B(10);
x1 = a1.a == B.B(10).a ? true : false ;
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch667_T61_Accessing_non_existent_properties_of_array_elements()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class A  
{
    x : var;
    constructor A ( y : var )
    {
        x = y;
    }
}
c = { A.A(0), A.A(1) };
p = {};
d = [Imperative]
{
    if(c[0].x == 0 )
    {
        c[0] = 0;
	p[0] = 0;
    }
    if(c[0].x == 0 )
    {
        p[1] = 1;
    }
    return = 0;
}
t1 = c[0];
t2 = c[1].x;
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch668_T62_Condition_Not_Evaluate_ToBool()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"[Imperative]
{
    A = 1;
    if (0)       
 	   A = 2; 
    else 
	  A= 3;
}
//expected A=1;//Received A=3;";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch669_T63_return_in_if_1467073()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"c;
[Imperative]
{
def even : int (a : int)
 { 
   if( ( a % 2 ) > 0 )
        return = a + 1;
   else 
           return = a;
}
c = even(1);
 }
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch670_T001_Inline_Using_Function_Call()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"smallest2;
largest2;
[Imperative]
{
	def fo1 : int(a1 : int)
	{
		return = a1 * a1;
	}
	a	=	10;				
	b	=	20;
				
	smallest1   =   a	<   b   ?   a	:	b;
	largest1	=   a	>   b   ?   a	:	b;
	d = fo1(a);
	smallest2   =   (fo1(a))	<   (fo1(b))  ?   (fo1(a))	:	(fo1(a));	//100
	largest2	=   (fo1(a)) >   (fo1(b))  ?   (fo1(a))	:	(fo1(b)); //400
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch671_T002_Inline_Using_Math_Lib_Functions()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"[Imperative]
{
	external (""libmath"") def dc_sqrt : double (val : double);
def sqrt : double (val : double)
{
     return = dc_sqrt(val);
}
def fo1 (a1 : int)  = a1 * a1 ;
a    =    10;                
b    =    20;
                   
smallest1   =   a  <   b   ?   a :    b; //10
largest1  =   a     >   b   ?   a :    b; //20
d = fo1(a);
smallest2   =   sqrt(fo1(a)) <   sqrt(fo1(b))  ?   sqrt(fo1(a))    :     sqrt(fo1(a)); //10.0
largest2  =   sqrt(fo1(a)) >   sqrt(fo1(b))  ?   sqrt(fo1(a))  :     sqrt(fo1(b)); //20.0
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch672_T003_Inline_Using_Collection()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"[Imperative]
{
	Passed = 1;
	Failed = 0;
	Einstein = 56;
	BenBarnes = 90;
	BenGoh = 5;
	Rameshwar = 80;
	Jun = 68;
	Roham = 50;
	Smartness = { BenBarnes, BenGoh, Jun, Rameshwar, Roham }; // { 1, 0, 1, 1, 0 }
	Results = Smartness > Einstein ? Passed : Failed;
	
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch673_T005_Inline_Using_2_Collections_In_Condition()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"[Imperative]
{
	a1 	=  1..3..1; 
	b1 	=  4..6..1; 
	a2 	=  1..3..1; 
	b2 	=  4..7..1; 
	a3 	=  1..4..1; 
	b3 	=  4..6..1; 
	c1 = a1 > b1 ? true : false; // { false, false, false }
	c2 = a2 > b2 ? true : false; // { false, false, false }
	c3 = a3 > b3 ? true : false; // { false, false, false, null }
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch674_T006_Inline_Using_Different_Sized_1_Dim_Collections()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"[Imperative]
{
	a = 10 ;
	b = ((a - a / 2 * 2) > 0)? a : a+1 ; //11
	c = 5; 
	d = ((c - c / 2 * 2) > 0)? c : c+1 ; //5 
	e1 = ((b>(d-b+d))) ? d : (d+1); //5
	//inline conditional, returning different sized collections
	c1 = {1,2,3};
	c2 = {1,2};
	a1 = {1, 2, 3, 4};
	b1 = a1>3?true:a1; // expected : {1, 2, 3, true}
	b2 = a1>3?true:c1; // expected : {1, 2, 3}
	b3 = a1>3?c1:c2;   // expected : {1, 2}
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch675_T007_Inline_Using_Collections_And_ReplicationCollectionFunctionCall()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"[Imperative]
{
	def even : int(a : int)
	{
		return = a * 2;
	}
	a =1..10..1 ; //{1,2,3,4,5,6,7,8,9,10}
	i = 1..5; 
	b = ((a[i] % 2) > 0)? even(a[i]) : a ;  // { 1, 6, 3, 10, 5 }	
	c = ((a[0] % 2) > 0)? even(a[i]) : a ; // { 4, 6, 8, `0, `2 }
	d = ((a[-2] % 2) == 0)? even(a[i]) : a ; // { 1, 2,..10}
	e1 = (a[-2] == d[9])? 9 : a[1..2]; // { 2, 3 }
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch676_T008_Inline_Returing_Different_Ranks()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"x;
[Imperative]
{
	a = { 0, 1, 2, 4};
	x = a > 1 ? 0 : {1,1}; // { 1, 1} ? 
	x_0 = x[0];
	x_1 = x[1];
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch677_T009_Inline_Using_Function_Call_And_Collection_And_Replication()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"[Imperative]
{
	def even(a : int)
	{
		return = a * 2;
	}
	def odd(a : int ) 
	{
	return = a* 2 + 1;
	}
	x = 1..3;
	a = ((even(5) > odd(3)))? even(5) : even(3); //10
	b = ((even(x) > odd(x+1)))?odd(x+1):even(x) ; // {2,4,6}
	c = odd(even(3)); // 13
	d = ((a > c))?even(odd(c)) : odd(even(c)); //53
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch678_T010_Inline_Using_Literal_Values()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"a;
b;
c;
d;
e;
f;
g;
h;
[Imperative]
{
	a = 1 > 2.5 ? false: 1;
	b = 0.55 == 1 ? true : false;
	c = (( 1 + 0.5 ) / 2 ) <= (200/10) ? (8/2) : (6/3);
	d = true ? true : false;
	e = false ? true : false;
	f = true == true ? 1 : 0.5;
	g = (1/3.0) > 0 ? (1/3.0) : (4/3);
	h = (1/3.0) < 0 ? (1/3.0) : (4/3);
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch679_T011_Inline_Using_Variables()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class A
{
    a : var;
	constructor A ( i : int)
	{
	    a = i;
	}
}
x1;
x2;
x3;
x4;
x5;
temp;
[Imperative]
{
	a = 1;
	b = 0.5;
	c = -1;
	d = true;
	f = null;
	g = false;
	h = A.A(1);
	i = h.a;
	
	x1 = a > b ? c : d;
	x2 = a <= b ? c : d;
	
	x3 = f == g ? h : i;
	x4 = f != g ? h : i;
    x5 = f != g ? h : h.a;	
	
	temp = x3.a;
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch680_T012_Inline_Using_Fun_Calls()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class A
{
    a : var;
	constructor A ( i : int)
	{
	    a = i;
	}
}
def power ( a )
{
    return = a * a ;
}
a = power(1);
b = power(0.5);
c = -1;
d = true;
f = null;
g = false;
h = A.A(1);
i = h.a;
x1 = power(power(2)) > power(2) ? power(1) : power(0);
x2 = power(power(2)) < power(2) ? power(1) : power(0);
x3 = power(c) < b ? power(1) : power(0);
x4 = power(f) >= power(1) ? power(1) : power(0);
x5 = power(f) < power(1) ? power(1) : power(0);
x6 = power(i) >= power(h.a) ? power(1) : power(0);
x7 = power(f) >= power(i) ? power(1) : power(0);
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch681_T013_Inline_Using_Class()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class A
{
    a : var;
	constructor A ( i : int)
	{
	    a = i;
	}
	
	def foo ( b )
	{
		return = a * b ;
	}
	
}
def power ( a )
{
    return = a * a ;
}
a = A.A(-1);
b = A.A(0);
c = A.A(2);
x1 = a.a < a.foo(2) ? a.a : a.foo(2);
x2 = a.a >= a.foo(2) ? a.a : a.foo(2);
x3 = a.foo(power(3)) < power(b.foo(3)) ? a.foo(power(3)) : power(b.foo(3));
x4 = a.foo(power(3)) >= power(b.foo(3)) ? a.foo(power(3)) : power(b.foo(3));
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch682_T014_Inline_Using_Collections()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"t1;t2;t3;t4;t5;t7;
c1;c2;c3;c4;
[Imperative]
{
	a = { 0, 1, 2};
	b = { 3, 11 };
	c = 5;
	d = { 6, 7, 8, 9};
	e = { 10 };
	x1 = a < 5 ? b : 5;
	t1 = x1[0];
	t2 = x1[1];
	c1 = 0;
	for (i in x1)
	{
		c1 = c1 + 1;
	}
	
	x2 = 5 > b ? b : 5;
	t3 = x2[0];
	t4 = x2[1];
	c2 = 0;
	for (i in x2)
	{
		c2 = c2 + 1;
	}
	
	x3 = b < d ? b : e;
	t5 = x3[0];
	c3 = 0;
	for (i in x3)
	{
		c3 = c3 + 1;
	}
	
	x4 = b > e ? d : { 0, 1};
	t7 = x4[0];	
	c4 = 0;
	for (i in x4)
	{
		c4 = c4 + 1;
	}
	
	
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch683_T015_Inline_In_Class_Scope()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class A
{
    a : int;
	constructor A ( i : int)
	{
	    a = i < 0 ? i*i : i;
	}
	
	def foo1 ( b )
	{
		x = b == a ? b : b+a;
		return = x;
	}
	
}
class B extends A
{
    b : int;
	constructor B ( i : int)
	{
	    a = i < 0 ? i*i : i;
		b = i;
	}
	
	def foo2 ( x )
	{
		y = b == a ? x+b : x+b+a;
		return = y;
	}
	
}
b1 = B.B(1);
b2 = B.B(-1);
x1 = b1.foo2(3);
x2 = b2.foo2(-3);
a1 = A.A(-4);
x3 = a1.foo1(3);
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch684_T016_Inline_Using_Operators()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"def foo (a:int )
{
	 return = a;   
}
a = 1+2 > 3*4 ? 5-9 : 10/2;
b = a > -a ? 1 : 0;
c = 2> 1 && 4>3 ? 1 : 0;
d = 1 == 1 || (1 == 0) ? 1 : 0;
e1 = a > b && c > d ? 1 : 0;
f = a <= b || c <= d ? 1 : 0;
g = foo({ 1, 2 }) > 3+ foo({4,5,6}) ?  1 : 3+ foo({4,5,6});
i = {1,3} > 2 ? 1: 0;";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch685_T017_Inline_In_Function_Scope()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"def foo1 ( b )
{
	return = b == 0 ? b : b+1;
	
}
def foo2 ( x )
{
	y = [Imperative]
	{
	    if(x > 0)
		{
		   return = x >=foo1(x) ? x : foo1(x);
		}
		return = x >=2 ? x : 2;
	}
	x1 = y == 0 ? 0 : y;
	return = y + x1;
}
a1 = foo1(4);
a2 = foo2(3);
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test, Ignore]
        [Category("WatchFx Tests")]
        public void DebugWatch686_T018_Inline_Using_Recursion()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"def factorial : int (num : int)
{
    return = num < 2 ? 1 : num * factorial(num-1);
}
fac = factorial(10);";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch687_T019_Defect_1456758()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"b = true;
a1 = b && true ? -1 : 1;
a2;
[Imperative]
{
	a2 = b && true ? -1 : 1;
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch688_T020_Nested_And_With_Range_Expr()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"
a1 =  1 > 2 ? true : 2 > 1 ? 2 : 1;
a2 =  1 > 2 ? true : 0..3;
b = {0,1,2,3};
a3 = 1 > 2 ? true : b;";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch689_T021_Defect_1467166_array_comparison_issue()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"[Imperative] 
{
    a = { 0, 1, 2}; 
    xx = a < 1 ? 1 : 0;
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch690_T01_TestVariousTypes()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class A
{
    i : int;
	constructor A ( a : int)
	{
	     x : int  = 2;
		 i = x + a ;
	}
	
	def foo : int ( )
	{
	    x : int = 2;
		t3 = x + i;
        return  = t3;		
	}
	
}
def foo : int ( a : int )
{
    x : int = 2;
	return = x + a ;
}
i1;i2;
d1;d2;
isTrue1;isTrue2;
isFalse1;isFalse2;
x1;x2;
x11;x12;
b1;b2;
y1;y2;
[Imperative]
{
    i1 : int = 5;
    d1 : double = 5.2;
    isTrue1 : bool = true;
    isFalse1 :bool = false;
	x1 = foo(1);
	a1 = A.A(1);
	b1 = a1.foo();
	x11:int = 2.3;
	y1:double = 2;
    
}
[Associative]
{
    i2 : int = 5;
    d2 : double = 5.2;
    isTrue2 : bool = true;
    isFalse2 :bool = false;
	x2 = foo(1);
	a2 = A.A(1);
	b2 = a2.foo();
	x12:int = 2.3;
	y2:double = 2;
    
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch691_T01_NegativeSyntax_Negative()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"[Imperative]
{
    i = 0;
    temp = 1;
    while ( i < 5 ]
	{
	    temp=temp+1;
        i=i+1;
    }
}	";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch692_T02_AssociativeBlock_Negative()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"[Associative]
{
    i = 0;
    temp = 1;
    while ( i <= 5)
	{
	    temp = temp + 1;
         i = i + 1;
    }
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch693_T03_UnnamedBlock_Negative()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"{
    i = 0;
    temp = 1;
    while ( i < 5 )
	{
	    temp = temp + 1;
        i = i + 1;
    }
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch694_T04_OutsideBlock_Negative()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"i = 0;    
temp = 1;
while( i < 5 )
{
    temp = temp + 1;
    i = i + 1;
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch695_T05_WithinFunction()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"testvar;
[Imperative]
{
	def fn1 : int (a : int)
	{   
		i = 0;
		temp = 1;
		while ( i < a )
		{
		    temp = temp + 1;
		    i = i + 1;
		}
		return = temp;
	}
	testvar = fn1(5);
} 
	
	";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch696_T06_InsideNestedBlock()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"temp;
a;
b;
[Associative]
{
	a = 4;
	b = a*2;
	temp = 0;
	[Imperative]
	{
		i=0;
		temp=1;
		while(i<=5)
		{
	      i=i+1;
		  temp=temp+1;
		}
    }
	a = temp;
      
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch697_T07_BreakStatement()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"temp;
i;
[Imperative]
{
		i=0;
		temp=0;
		while( i <= 5 )
		{ 
	      i = i + 1;
		  if ( i == 3 )
		      break;
		  temp=temp+1;
		}
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch698_T08_ContinueStatement()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"temp;
i;
[Imperative]
{
		i = 0;
		temp = 0;
		while ( i <= 5 )
		{
		  i = i + 1;
		  if( i <= 3 )
		  {
		      continue;
	      }
		  temp=temp+1;
		 
		}
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch699_T09_NestedWhileStatement()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"temp;
i;
a;
p;
[Imperative]
{
	i = 1;
	a = 0;
	p = 0;
	
	temp = 0;
	
	while( i <= 5 )
	{
		a = 1;
		while( a <= 5 )
		{
			p = 1;
			while( p <= 5 )
			{
				temp = temp + 1;
				p = p + 1;
			}
			a = a + 1;
		}
		i = i + 1;
	}
}  ";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch700_T10_WhilewithAssgnmtStatement_Negative()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"[Imperative]
{
		i = 2;
		temp = 1;
		while( i = 2 )
		{ 
	        i = i + 1 ;
		    temp = temp + 1 ;
		}
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch701_T11_WhilewithLogicalOperators()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"temp1;temp2;temp3;temp4;
[Imperative]
{
		i1 = 5;
		temp1 = 1;
		while( i >= 2) 
		{ 
	        i1=i1-1;
		    temp1=temp1+1;
		}
		
		i2 = 5;
		temp2 = 1;
		while ( i2 != 1 )
		{
		    i2 = i2 - 1;
		    temp2 = temp2 + 1;
		}
         
		temp3 = 2;
        while( i2 == 1 )
		{
		     temp3 = temp3 + 1;
		     i2 = i2 - 1;
		} 
		while( ( i2 == 1 ) && ( i1 == 1 ) )  
        {
             temp3=temp3+1;
		     i2=i2-1;
        }
		temp4 = 3;
		while( ( i2 == 1 ) || ( i1 == 5 ) )
        {
            i1 = i1 - 1;		
            temp4 = 4;
        }       
 
}		
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch702_T12_WhileWithFunctionCall()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"testvar;
[Imperative]
{ 
	def fn1 :int ( a : int )
	{   
		i = 0;
		temp = 1;
		while ( i < a )
		{
			temp = temp + 1;
			i = i + 1;
		}
		return = temp;
	}
	testvar = 8;
	
	while ( testvar != fn1(6) )
	{ 
		testvar=testvar-1;
	}
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch703_T13_DoWhileStatment_negative()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"[Imperative]
{
	 a = 1;
	 temp = 1;
	 do
	 {  
	    temp = temp + 1;
	    a = a + 1;
	  
	 } while(a<3);
} 
  ";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch704_T14_TestFactorialUsingWhileStmt()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"a;
factorial_a;
[Imperative]
{
    a = 1;
	b = 1;
    while( a <= 5 )
	{
		a = a + 1;
		b = b * (a-1) ;		
	}
	factorial_a = b * a;
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch705_T15_TestWhileWithDecimalvalues()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"a;b;
[Imperative]
{
    a = 1.5;
	b = 1;
    while(a <= 5.5)
	{
		a = a + 1;
		b = b * (a-1) ;		
	}
	
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch706_T16_TestWhileWithLogicalOperators()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"a;b;
[Imperative]
{
    a = 1.5;
	b = 1;
    while(a <= 5.5 && b < 20)
	{
		a = a + 1;
		b = b * (a-1) ;		
	}	
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch707_T17_TestWhileWithBool()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"a;
[Imperative]
{
    a = 0;	
    while(a == false)
	{
		a = 1;	
	}	
	
	
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch708_T18_TestWhileWithNull()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"a;b;c;
[Imperative]
{
    a = null;
    c = null;
	
    while(a == 0)
	{
		a = 1;	
	}
    while(null == c)
	{
		c = 1;	
	}
    while(a == b)
	{
		a = 2;	
	}	
	
	
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch709_T19_TestWhileWithIf()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"a;b;
[Imperative]
{
    a = 2;
	b = a;
	while ( a <= 4)
	{
		if(a < 4)
		{
			b = b + a;
		}
		else
		{
			b = b + 2*a;
		}
		a = a + 1;
	}
	
	
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch710_T20_TestWhileToCreate2DimArray()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"def Create2DArray( col : int)
{
	result = [Imperative]
    {
		array = { 1, 2 };
		counter = 0;
		while( counter < col)
		{
			array[counter] = { 1, 2};
			counter = counter + 1;
		}
		return = array;
	}
    return = result;
}
x = Create2DArray( 2) ;
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch711_T21_TestWhileToCallFunctionWithNoReturnType()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"def foo ()
{
	return = 0;
}
def test ()
{
	temp = [Imperative]
	{
		t1 = foo();
		t2 = 2;
		while ( t2 > ( t1 + 1 ) )
		{
		    t1 = t1 + 1;
		}
		return = t1;		
	}
	return = temp;
}
x = test();
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch712_T22_Defect_1463683()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"def foo ()
{
	return = 1;
}
def test ()
{
	temp = [Imperative]
	{
		t1 = foo();
		t2 = 3;
		if ( t2 < ( t1 + 1 ) )
		{
		    t1 = t1 + 2;
		}
		else
		{
		    t1 = t1 ;
		}
		return = t1;		
	}
	return = temp;
}
x = test();";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch713_T22_Defect_1463683_2()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"def foo ()
{
	return = 1;
}
class A 
{
    t1 : int;
	t2 : int;
	
	def test ()
	{
		temp = [Imperative]
		{
			t1 = foo();
			t2 = 3;
			if ( t2 < ( t1 + 1 ) )
			{
				t1 = t1 + 2;
			}
			else
			{
				t1 = t1 ;
			}
			return = t1;		
		}
		return = temp;
	}
}
a = A.A();
x = a.test();
x1 = a.t1;
x2 = a.t2;
y;y1;y2;
[Imperative]
{
	y = a.test();
	y1 = a.t1;
	y2 = a.t2;
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch714_T22_Defect_1463683_3()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"def foo ()
{
	return = { 0, 1, 2 };
}
class A 
{
    t1;
	t2;	
	def test ()
	{
		c = 0;
		temp = [Imperative]
		{
			t1 = foo();
			t2 = 0;
			for ( i in t1 )
			{
				if (i < ( t2 + 1 ) )
				{
					t1[c] = i + 1;
				}
				else
				{
					t1[c] = i +2 ;
				}
				c = c + 1 ;
			}
			return = t1;		
		}
		return = temp;
	}
}
a = A.A();
x = a.test();
x1 = a.t1;
x2 = a.t2;
y;y1;y2;
[Imperative]
{
	y = a.test();
	y1 = a.t1;
	y2 = a.t2;
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch715_T22_Defect_1463683_4()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"def foo ()
{
	return = 1;
}
def test (t2)
{
	temp = [Imperative]
	{
		t1 = foo();
		if ( (t2 > ( t1 + 1 )) && (t2 >=3)  )
		{
		    t1 = t1 + 2;
		}
		else
		{
		    t1 = t1 ;
		}
		return = t1;		
	}
	return = temp;
}
x1 = test(3);
x2 = test(0);";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch716_test()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"a = 1;
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch717_T01_Simple_Assignment_Slicing()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"def foo ( a , b )
{
	return = { a , b };
}
[Imperative]
{
{a , b} = foo ( 1 , 2 );
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch718_T02_Assignment_Slicing_Modify_Arguments()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"def foo ( a , b )
{
	a = a + 1;
	b = b + 3;
	return = { a , b };
}
	{a , b} = foo ( 1 , 2 );
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch719_T03_Assignment_Slicing_With_Collection()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"def foo ( a:int[] )
{
	a[0] = 0;
	return = a;
}
	a = {1,2,3};
	c = foo ( a  );
	d = c[0];
	e = c[1];";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch720_T80580_BuiltinFunc_1()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class TestClass
{
	
	constructor TestClass()
	{
	}
        def testFlatten()
	{
		index = Flatten({1..4,0});
		return = index;
	}
	def testCount()
	{
		a = {true,{false,false},true};
		b = Count(a);
		return = b;
	}	
	def testContains()
	{
		a = {true,{false,false},true};
		b = Contains(a,{false,false});
		return = b;
	}
	def testCountFalse()
	{
		a = {true,{false,false},true};
		b = CountFalse(a);
		return = b;
	}
	def testCountTrue()
	{
		a = {true,{false,false},true};
		b = CountTrue(a);
		return = b;
	}
	def testSomeFalse()
	{
		a = {true,{false,false},true};
		b = SomeFalse(a);
		return = b;
	}
	def testSomeTrue()
	{
		a = {true,{false,false},true};
		b = SomeTrue(a);
		return = b;
	}
	def testToString()
	{
		a = {true,{false,false},true};
		b = ToString(a);
		return = b;
	}
	def testTranspose()
	{
		a = {{3,-4},{4,5}};
		b = Transpose(a);
		return = b;
	}
	def testFloor()
	{
		a = 3.5;
		b = Floor(a);
		return = b;
	}
	def testCeil()
	{
		a = 3.5;
		b = Ceil(a);
		return = b;
	}
	def testLog()
	{
		b = Log(10);
		return = b;
	}
	def testSqrt()
	{
		b = Sqrt(25);
		return = b;
	}
	def testTan()
	{
		a = 45;
		b = Tan(a);
		return = b;
	}
	def testNormalizeDepth()
	{
		index = NormalizeDepth({{1.1},{{2.3,3}},""5"",{{{{true}}}}},2);
		return = index;
	}
}
test = TestClass.TestClass();
t1 = test.testFlatten();
t2 = test.testCount();
t3 = test.testContains();
t4 = test.testCountFalse();
t5 = test.testCountTrue();
t6 = test.testSomeFalse();
t7 = test.testSomeTrue();
t8 = test.testToString();
t9 = test.testTranspose();
t10 = test.testFloor();
t11 = test.testCeil();
t12 = test.testLog();
t13 = test.testSqrt();
t14 = test.testTan();
t15 = test.testNormalizeDepth();
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch721_80574Transpose()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"//testing Transpose
x = {{1,2},{3,4}};
y = Transpose(x) ;
a={1,2};
b = Transpose(a);
a1 = {{{1,2}},{{3,4}}};
b1 = Transpose(a1);
x1 = {{1,2},{3,4,5}};
y1 = Transpose(x1);
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch722_80575acos()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"//testing acos()
x = 1; 
y  = {0,0.5,1/sqrt(2),1/(sqrt(3)),1,cos(60)};
a = acos(x); //0
b = acos(y); //{ 90, 60.000, 45.000, 54.736, 0,60.000 }
c = acos(sqrt(3)/2) ;//30
d = acos(-1); //180
e1 = acos(-1/sqrt(2));//135
//negative testing
a1 = ""s"";
b1 = acos(a1); //null
a2 = Point.ByCartesianCoordinates(CoordinateSystem(),0,0,0);
b2 = acos(a2); //null
b3 = acos(null); //null
a4 = {};
b4 = acos(a4); //null
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch723_80576allFalse()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"//testing allFalse
w = false ;
x = {1,2,3,false};
y = {-1,-2,3,4};
z = {w,w,w,w};
a = allFalse(a);//false 
b = allFalse(y); //false
c = allFalse(z) ; //true 
P1 = Point.ByCartesianCoordinates(CoordinateSystem(),0,0,0);
w1 = {P1, ""s"", {1,2,3},true,false};
a1 = allFalse(w1);
a2 = allFalse(3);
w2 = 5.0;
a3 = allFalse(w2);
a4 = allFalse(null);
w3 = {};
a5 = allFalse(w3);
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch724_80577asin()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"//testing asin()
x = 1; 
y  = {0,0.5,1/sqrt(2),1/(sqrt(3)),1};
a = asin(x); //90
b = asin(y); //{ 0, 30.000, 45.000, 35.264, 90.000 }
c = asin(sqrt(3)/2) ;//60
d = asin(-1); //-90
e1 = asin(-1/sqrt(2));//-45
//negative testing
a1 = ""s"";
b1 = asin(a1);
a2 = Point.ByCartesianCoordinates(CoordinateSystem(),0,0,0);
b2 = asin(a2);
b3 = asin(null);
a4 = {};
b4 = asin(a4);
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch725_80578atan()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"//testing atan()
x = -1 ; 
a = atan(x) ; //-45
b = atan(x ^ 2); //45
c = atan(sqrt(3) ^ -1); //30
d = atan(2) ;//63.43
e1 = atan(sqrt(3)); //60
j = atan({0.1,3,-45,0.000,tan(90)});//{ 5.711, 71.565, -88.727, 0, 90.000 }
y = {{1,2},{3,4}};
k = atan(y<2><1>); //{{45.000,71.565},{63.435,75.964}}
//negative testing
a1 = ""s"";
b1 = atan(a1); //null
a2 = Point.ByCartesianCoordinates(CoordinateSystem(),0,0,0);
b2 = atan(a2); //null
b3 = atan(null); //null
a4 = {};
b4 = atan(a4); //null
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch726_80579atan2()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"//testing atan2(y,x) {Returns the principal value of the arc tangent of y/x }
a = atan2(3,5);
b = atan2({0,60,90,120,90},2); // { 0, 88.091, 88.727, 89.045, 88.727 }
c = atan2(2*{tan(0),tan(30),tan(45),tan(60),tan(90)},2);//{ 0, 30.000, 45.000, 60.000, 90.000 }
d = atan2({1,2,3},{4,5,3});//{ 14.036, 21.801, 45.000 }
//negative testing
a1 = ""s"";
b1 = atan2(a1); //null
a2 = Point.ByCartesianCoordinates(CoordinateSystem(),0,0,0);
b2 = atan2(a2); //null
b3 = atan2(null); //null
a4 = {};
b4 = atan2(a4); //null
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch727_80580BuiltinFunc_1()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class TestClass
{
	
	constructor ()
	{
	}
        def testFlatten(this:testClass)
	{
		index = flatten({1..4,0});
		return = index;
	}
	def testCount(this:testClass)
	{
		a = {true,{false,false},true};
		b = count(a);
		return = b;
	}	
	def testContains(this:testClass)
	{
		a = {true,{false,false},true};
		b = contains(a,{false,false});
		return = b;
	}
	def testCountFalse(this:testClass)
	{
		a = {true,{false,false},true};
		b = countFalse(a);
		return = b;
	}
	def testCountTrue(this:testClass)
	{
		a = {true,{false,false},true};
		b = countTrue(a);
		return = b;
	}
	def testSomeFalse(this:testClass)
	{
		a = {true,{false,false},true};
		b = someFalse(a);
		return = b;
	}
	def testSomeTrue(this:testClass)
	{
		a = {true,{false,false},true};
		b = someTrue(a);
		return = b;
	}
	def testToString(this:testClass)
	{
		a = {true,{false,false},true};
		b = a.ToString();
		return = b;
	}
	def testTranspose(this:testClass)
	{
		a = {{3,-4},{4,5}};
		b = Transpose(a);
		return = b;
	}
	def testFloor(this:testClass)
	{
		a = 3.5;
		b = floor(a);
		return = b;
	}
	def testCeil(this:testClass)
	{
		a = 3.5;
		b = ceil(a);
		return = b;
	}
	def testLog(this:testClass)
	{
		b = log(10);
		return = b;
	}
	def testSqrt(this:testClass)
	{
		b = sqrt(25);
		return = b;
	}
	def testTan(this:testClass)
	{
		a = 45;
		b = tan(a);
		return = b;
	}
	def testNormalizeDepth(this:testClass)
	{
		index = normalizeDepth({{1.1},{{2.3,3}},""5"",{{{{true}}}}},2);
		return = index;
	}
}
test = TestClass();
t1 = test.testFlatten();
t2 = test.testCount();
t3 = test.testContains();
t4 = test.testCountFalse();
t5 = test.testCountTrue();
t6 = test.testSomeFalse();
t7 = test.testSomeTrue();
t8 = test.testToString();
t9 = test.testTranspose();
t10 = test.testFloor();
t11 = test.testCeil();
t12 = test.testLog();
t13 = test.testSqrt();
t14 = test.testTan();
t15 = test.testNormalizeDepth();
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch728_80581BuiltinFunc_2()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class TestClass
{
	b;
	b1;
	b2;
	b3;
	b4;
	b5;
	b6;
	b7;
	b8;
	b9;
	b10;
	b11;
	b12;
	b13;
	b14;
	constructor ()
	{
		b = flatten({1..4,0});
	
		a = {true,{false,false},true};
		b1 = count(a);
	
		b2 = contains(a,{false,false});
	
		b3 = countFalse(a);
		
		b4 = countTrue(a);
		
		b5 = someFalse(a);
		
		b6 = someTrue(a);
		
		b7 = a.ToString();
		
		a1 = {{3,-4},{4,5}};
		
		b8 = Transpose(a1);
		
		a2 = 3.5;
		
		b9 = floor(a2);
		
		b10 = ceil(a2);
		
		a3 = 10;
		b11 = log(a3);
		b12 = sqrt(25);
		b13 = tan(45);
		
		b14 = normalizeDepth({{1.1},{{2.3,3}},""5"",{{{{true}}}}},2);
		
	}
}
test = TestClass();
t0 = test.b;
t1 = test.b1;
t2 = test.b2;
t3 = test.b3;
t4 = test.b4;
t5 = test.b5;
t6 = test.b6;
t7 = test.b7;
t8 = test.b8;
t9 = test.b9;
t10 = test.b10;
t11 = test.b11;
t12 = test.b12;
t13 = test.b13;
t14 = test.b14;
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch729_80582ceil()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"//testing ceil()
x = 1.5 ; 
y = 0.01 ; 
z = -0.1 ; 
a = ceil(x) ;//2
b = ceil(y) ;//1 
c = ceil(z) ; //0
d = ceil(-1.5) ;//-1
e1 = ceil(-2);//-2
g = ceil(2.1);//3
h = ceil({0.2*0.2 , 1.2 , -1.2 , 3.4 , 3.6 , -3.6,0}); //{1,2,-1,4,4,-3,0}
w = {{1.2,-2.1},{0.3,(-4*2.3)}};
k = ceil(y<2><1>); //
//negative testing
a1 = ""s"";
b1 = ceil(a1); //null
a2 = Point.ByCartesianCoordinates(CoordinateSystem(),0,0,0);
b2 = ceil(a2); //null
b3 = ceil(null); //null
a4 = {};
b4 = ceil(a4); //null
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch730_80583contains()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"// testing contains()
a = {1,2,3,0};
b = contains(a,{0,2}); 
c = {1.1,-1.2,3,4};
d = contains(c,{1.1,{-1.2,3},4}) ; 
e1 = {{1,2},{3,4},{4,5}};
f = contains(e,{1,{1,2},{1,3}}); // f = {{true,true},{false,false},{false,false}}
g = contains(e,{{1,2},{1,3},{6,7}}); // g = {{true,true},{false,true},{false,false}}
a1 = {1,2};
b1 = contains(a1,1.0);
a2 = {1.0,2};
b2 = contains(a1,1);
d3 = 5;
a3 = 5.ToString();
c3 = {5,6};
b3 = contains(c3,a3);
b4 = contains(c3,5);
e1 = {{1,2},{3,4},{4,5}};
f1 = {1,3,5,7,9,11};
g1 = contains(f1,e1<2><1>);
h1 = contains(f1,e1[0..2][0..1]);
//negative testing
w1 = {};
x1 = 5;
z1 = contains(w1,5); //null
w2 = {5,6};
x2 = Point.ByCartesianCoordinates(CoordinateSystem(),0,0,0);
z2 = contains(w2,x2); // z2 = false
x2 = null; // z2 = false
x2 = {}; // z2 = false
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch731_80584cos()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"//testing cos()
a = 90 ; 
b = cos(a); //0
c = a * 3 ;
d = cos(c); //-0
e1 = {0,30,45,60,90};
f = cos(e); //{1,0.8.., 0.7.., 0.5.., 0.0} 
g = cos({180,360}); //{-1,1}
h = cos(-90); //0 
i = cos(10); //0.985
//negative testing
a1 = ""s"";
b1 = cos(a1); //null
a2 = Point.ByCartesianCoordinates(CoordinateSystem(),0,0,0);
b2 = cos(a2); //null
b3 = cos(null); //null
a4 = {};
b4 = cos(a4); //null
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch732_80586countFalse()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"//testing countFalse
w = false ;
x = {1,2,3,false};
y = {-1,-2,3,4};
z = {w,w,w,true};
a = countFalse(x);//1 
b = countFalse(y); //0
c = countFalse(z) ; //3
g = {false};
h = countFalse(g); //1 
x1 = {{true,false},true,false,{{{false}}},{false,false}};
y1 = countFalse(x1);
//negative testing
a1 = ""s"";
b1 = countFalse(a1); //0
a2 = Point.ByCartesianCoordinates(CoordinateSystem(),0,0,0);
b2 = countFalse(a2); //0
b3 = countFalse(null); //0
a4 = {};
b4 = countFalse(a4); //0";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch733_80587countTrue()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"//testing countTrue
w = true ;
x = {1,2,3,true};
y = {-1,-2,3,4};
z = {w,w,w,w};
a = countTrue(x);//1 
b = countTrue(y); //0
c = countTrue(z) ; //4 
x1 = {{true,false},true,false,{{{false}}},{false,false}};
y1 = countTrue(x1);
//negative testing
a1 = ""s"";
b1 = countTrue(a1); //0
a2 = Point.ByCartesianCoordinates(CoordinateSystem(),0,0,0);
b2 = countTrue(a2); //0
b3 = countTrue(null); //0
a4 = {};
b4 = countTrue(a4); //0";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch734_80588exp()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"//testing  ();
x = 2; 
y = 3;
z = {1,0,-0.1,0.2,3*2};
a =  (x^y); //8
b =  (y^x); //9
c =  (2^0); //1
d =  (1^1); //1
e1 =  (0.1^3);//0.001
f =  (1^0.3);//1
g =  (4^0.5);//2
h = (0.01^0.5);//0.1
i = (0.2 ^ 1.5);//0.089
j =  (x^y )^(h); //1.204
k = (z ^ 2); //{ 1.000, 0.000, 0.010, 0.040, 36.000 }
l = k ^ z;//{ 1.000, 1.000, 1.585, 0.525,2176782336.000 }
m = k<1> ^ z<2>;// m = { { 1.000, 1.000, 1.000, 1.000, 1.000 }, { 0.000, 1.000, 1.#IO, 0.000, 0.000 }, { 0.010, 1.000, 1.585, 0.398, 0.000 }, { 0.040, 1.000, 1.380, 0.525, 0.000 }, { 36.000, 1.000, 0.699, 2.048, 2176782336.000 } }
//negative testing
a1 = ""s"";
b1 = null;
c1 = a1^b1; //null
a2 = Point.ByCartesianCoordinates(CoordinateSystem(),0,0,0);
b2 = 2;
c2 = a2^b2;//null
a3 = 5;
b3 = null;
c3 = a3^b3;//null
a4 = null;
b4 =5;
c4 = a3^b3;//null
a5 = {};
b5 = 5;
c5 = a5^b5; //null
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch735_80589flatten()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"//testing flatten()
x = {{1.1},{2.3,3}};
y = {{{-1,2,-3}},6};
a = flatten(x);
b = flatten(y); 
c = flatten(y * 0.1);
d = flatten(2);
e1 = flatten(-0.2);
//negative testing
a1 = ""s"";
b1 = flatten(a1); //b1 = ""s""
a2 = Point.ByCartesianCoordinates(CoordinateSystem(),0,0,0);
b2 = flatten(a2); //b2 = Point.ByCartesianCoordinates(CoordinateSystem(),0,0,0);
b3 = flatten(null); // b3 = null
a4 = {};
b4 = flatten(a4); //b4 = null
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch736_80590floor()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"//testing floor()
x = 1.5 ; 
y = 0.01 ; 
z = -0.1 ; 
a = floor(x) ;//1
b = floor(y) ;//0 
c = floor(z) ; //-1
d = floor(-1.5) ;//-2
e1 = floor(-2);//-2
g = floor(2.1);//2
h = floor({0.2*0.2 , 1.2 , -1.2 , 3.4 , 3.6 , -3.6});//{0,1,-2,3,2,-4}
//negative testing
a1 = ""s"";
b1 = floor(a1); //null
a2 = Point.ByCartesianCoordinates(CoordinateSystem(),0,0,0);
b2 = floor(a2); //null
b3 = floor(null); //null
a4 = {};
b4 = floor(a4); //null";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch737_80591log()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"//testing log()
x =1 ; 
y = e^4;
a = log(x) ;//0
b = log(e) ; //1
c = log({0.1,-1,-0.9,0.9,y});//{ -2.303, -1.#IO, -1.#IO, -0.105, 4.000 }
d = log(a); // expected -1.#IO(invalid output) but then d = -2147483648
e1 = log(0);
//negative testing
a1 = ""s"";
b1 = log(a1); //null
a2 = Point.ByCartesianCoordinates(CoordinateSystem(),0,0,0);
b2 = log(a2); //null
b3 = log(null); //null
a4 = {};
b4 = log(a4); //null
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch738_80592log10()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"//testing log1010()
x =1 ; 
y = 10000;
a = log10(x) ;//0
b = log10(10) ; //1
c = log10({0.1,-1,-0.9,0.9,y});//{ -1, -1.#IO, -1.#IO, -0.105, 4.000 }
d = log10(a); // expected -1.#IO(invalid output) but then d = -2147483648
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch739_80593map()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"//testing map(rangeMin: double, rangeMax: double, inputValue: double)
a = map(3,8,12); //1 
b = map(4,5,12); //1
c = map(2.3,5,9); //1
d = map(2.3,5,0.2); //0
e1 = map(2.3,5.2,0.2);  //0 
f = map({1,2.2,3,4},{2,4.2,3.4,5},1.2);//{0.200, 0, 0, 0 }
g = map({1,2},{3.4,4.5},{0,1}); // {0,0}
g1 = map({1,2,3},{4,5},{0,1}); // 
g2 = map(4,4,2); // 
g3 = map(4,4,4); // 
//negative testing
g4 = map({{1,2},{2,3}},{1,2},3);
b1 = map(""s"",8,12); //1 
b2 = map(4,Point.ByCartesianCoordinates(CoordinateSystem(),0,0,0),5); //null
b3 = map(null,4,5); //null
b4 = map(null,null,null); //null
b5 = map(4,null,5); //null
b6 = map(5,4,null); //null
b7 = map({},5,4); //null
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch740_80594mapto()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"//testing mapTo( rangeMin: double, rangeMax: double,  inputValue: double,  targeRangeMin: double,  targetRangeMax: double)
a = mapTo(3,8,12,4,5); //5
b = mapTo(4,5,12,3,4); //4
c = mapTo(2.3,5,9,10,12); //12
d = mapTo(2.3,5,0.2,{1,2,3,4},5); //{1,2,3,4}
e1 = mapTo(-2.3,5.2,0.2,{-2.3,3.4},{4.5,5.6});  //{-0.033,4.133}
f = mapTo({1,2},{3.4,4.5},{0,1},2,3); // {2,2}
//negative testing
g4 = map({{1,2},{2,3}},{1,2},3,4,5);
b1 = map(""s"",8,12,14,15); //1 
b2 = map(4,Point.ByCartesianCoordinates(CoordinateSystem(),0,0,0),5,6,7); //null
b3 = map(null,4,5,5,6); //null
b4 = map(null,null,null,null,null); //null
b5 = map(4,null,5,6,7); //null
b6 = map(5,4,null,7,8); //null
b7 = map({},5,4,8,9); //null
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch741_80595max()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"//testing max()
a = max(4.5,6.5); //6.5
b = 10;
c = 3 ; 
d = max(b,c); //10
e1 = {a,b,c};//{ 6.5, 10, 3 }
f = max(e,{2,3.5,4}); //{ 6.5, 10, 4 }
g = max(e<2>,f<1>); //{ { 6.5, 10, 6.5 }, { 10, 10, 10 }, { 6.500, 10, 4 } }
e = max(-1,-2); //-1 , g = { { 2 }, { 3.5 }, { 4 } } and f = {2,3.5,4}
a1 = max(4/5,4.0/5.0);
//negative testing
a1 = ""s"";
b1 = max(a1,4); //null
a2 = Point.ByCartesianCoordinates(CoordinateSystem(),0,0,0);
b2 = max(a2,5); //null
b3 = max(null,5); //null
a4 = {};
b4 = max(a4,{1,2}); //null";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch742_80596min()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"//testing min()
a = min(5,6); //5
b = 10.5;
c = 3.5 ; 
d = min(b,c); //3.5
e1 = {a,b,c};//{ 5, 10.500, 3.500 }
f = min(e,{2,3.5,4}); //{ 2, 3.500, 3.500 }
g = min(e<2>,f<1>); //{ { 2, 2, 2 }, { 3.500, 3.500, 3.500 }, { 3.500, 3.500, 3.500 } }
e = min(-1,-2); //-2 , g = { { -2 }, { -2 }, { -2 } } and f = { -2, -2, -2 }
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch743_80597rand()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"//testing rand()
x = 1 ;
y = {1,3,5};
z = {8,7,6}; 
a = rand(x,10) ;
b = rand(2,10);
c = rand(9,9.5);//No method found matching the given argument(s) in global context
                 //Updated variable c = null*/
d = rand({1,2,3,4,5},10);
e1 = rand({1,2,3},{4,5,6});
f = rand(y<1> ,z<2>);
//negative testing
a1 = ""s"";
b1 = rand(a1,3); //null
a2 = Point.ByCartesianCoordinates(CoordinateSystem(),0,0,0);
b2 = rand(5,a2); //null
b3 = rand(3,null); //null
a4 = {};
b4 = rand(a4,6); //null
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch744_80598sin()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"// testing using sin()
a = 90 ; 
b = sin(a);
c = a * 3 ;
d = sin(c);
e1 = {0,30,45,60,90};
f = sin(e);
/*
testBSplineCurve = BSplineCurve.ByPoint(points);
tControlVertices = testBSplineCurve.ControlVertices;
update the parameter
Ondemand: property will not be shown unless we query it. 
Gurantee: should never be null
Super class should be included
    Updated variable a = 90
    Updated variable b = 0.894
*/
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch745_80599someFalse()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"//testing someFalse
w = false ;
x = {1,2,3,false};
y = {-1,-2,3,4};
z = {w,w,w,w};
a = someFalse(x);//true 
b = someFalse(y); //false
c = someFalse(z) ; //true ";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch746_80600someNulls()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"//testing someNulls 
w = null ;
x = {1,2,3,null};
y = {-1,-2,3,4};
z = {w,w,w,w};
a = someNulls(x);//false 
b = someNulls(y); //false
c = someNulls(z) ; //true ";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch747_80601someTrue()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"//testing someTrue
w = true ;
x = {1,2,3,true};
y = {-1,-2,3,4};
z = {w,w,w,w};
a = someTrue(x);//true 
b = someTrue(y); //false
c = someTrue(z) ; //true ";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch748_80602sqrt()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"//testing sqrt()
x = 1.21 ;
y = {1,0,-0.1,0.2,3*2);
a = sqrt(x); //1.1
b = sqrt(2 * 4.5);//3 
c = sqrt(3 * 3);//3
d = sqrt(0.1) ; //0.316
e = sqrt(0);//0
f = sqrt(0.01); //0.1
g = sqrt(-4); // g = -1.#IO 
h = sqrt(y);//ad = { 1, 0, -1.#IO, 0.447, 2.449 }
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch749_80603tan()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"//testing tan()
a = 90 ; 
b = tan(a);
c = a * 3 ;
d = tan(c);
e = {0,30,45,60,90};
f = tan(e);
g = tan({180,360}); //{-0,-0}
h = tan(-90);
i = tan(10);
j = tan(135); //-1
k = tan(-45); //-1
l = tan(0); //0";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch750_80604toString()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"//testing toString()
x = 5;
y = x.ToString() ;
z= -3.5;
z1 = z.ToString();
w = exp(4);
w1 = w.ToString();
a = {{1,2},{3,4}};
b = a.ToString();
p = Point.ByCartesianCoordinates(WCS,0,0,0);
p1 = p.ToString();
class myPoint extends Point
{
 reflectedPoint : Point;
 constructor(x,y,z) base.ByCartesianCoordinates(WCS,x,y,z)
 {
	reflectedPoint = Point.ByCartesianCoordinates(WCS,-x,-y,-z);
 }
}
p2 = myPoint(1,1,1);
p3 = p2.ToString();";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch751_80704NormalizeDepth()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"//testing normalizeDepth()
x = {{1.1},{{2.3,3}},5};
a1 = normalizeDepth(x,1);
a2 = normalizeDepth(x,2);
a4 = normalizeDepth(x,4);
a4_1 = normalizeDepth(x,-1);
a4_0 = normalizeDepth(x,0);
a4_5 = normalizeDepth(x,-5);
p1 = Point.ByCartesianCoordinates(WCS,0,0,0);
y = {{{{-1,2,-3}},6},{""4"",p1},p1};
b = normalizeDepth(y,5); 
c = normalizeDepth(y * 0.1,2);
z = 1;
d = normalizeDepth(y,z);
z = 0.4;
z = ""3"";
z = 1..2;
//negative testing
d1 = normalizeDepth(2,1);
e1 = normalizeDepth(-0.2,2);
a1 = ""s"";
b1 = normalizeDepth(a1,1); 
a2 = Point.ByCartesianCoordinates(CoordinateSystem(),0,0,0);
b2 = normalizeDepth(a2,2); 
b3 = normalizeDepth(null,4); 
b3 = normalizeDepth(y,null); 
a4 = {};
b4 = normalizeDepth(a4,2);
b5 = normalizeDepth(a4,null);
b6 = normalizeDepth(a4,-2);
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch752_80705NormalizeDepth()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"//testing normalizeDepth()
x = 5..15..#3;
y = 2..4;
z = 10..20..#4;
p1 = Point.ByCartesianCoordinates(WCS,x<1>,y<2>,z<3>);
a = 15..25..#4;
b = 12..14;
c = 5..7;
p2 = Point.ByCartesianCoordinates(WCS,a<1>,b<2>,c<3>);
//lines1 = Line.ByStartPointEndPoint(p1,p2);
//lines2 = Line.ByStartPointEndPoint(p1<1>,p2<2>);
i = 0..2;
j = 0..2;
lines3 = Line.ByStartPointEndPoint(p1[i],p2[j]);
p1 = p1.Hide();
p1 = normalizeDepth(p1,1);";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch753_language_functions_test_1()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"import(""ProtoGeometry.dll"");
import(""DSCoreNodes.dll"");
raggedCollection = { 1, { 2, 3 } };
isUniformDepthRagged = IsUniformDepth(raggedCollection);//false
average = Average(raggedCollection);
sum = Sum(raggedCollection); // works (=6), but complains that the ""Variable is over indexed""
ragged0  = raggedCollection[0]; // (=1)
ragged1  = raggedCollection[1]; // (={2,3})
ragged00 = raggedCollection[0][0]; // (=null) this should and does fail
ragged10 = raggedCollection[1][0]; // (=2)
ragged11 = raggedCollection[1][1]; // (=3) 
ragged2  = raggedCollection[2]; // (={null) // but reports ""Variable is over indexed"" for line 18
raggedminus1  = raggedCollection[-1]; // (={2,3})
raggedminus1minus1 = raggedCollection[-1][-1]; // (=3)
rankRagged = Rank(raggedCollection);
indexOf = IndexOf(raggedCollection, 1); // not sure what value should be returned here
transposeRagged = Transpose(raggedCollection); // (={{1,2},{3}} is this expected?
noramlisedDepthCollection = NormalizeDepth(raggedCollection);
isUniformDepthNormalize = IsUniformDepth(noramlisedDepthCollection);
transposeNormalize = Transpose(noramlisedDepthCollection);
noramlised00 = noramlisedDepthCollection[0][0];
rankNoramlised = Rank(noramlisedDepthCollection);
flattenedCollection = Flatten(raggedCollection);
rankFlattened = Rank(flattenedCollection);
reverseCollection = Reverse(flattenedCollection);
count = Count(reverseCollection);
contains = Contains(reverseCollection, 2);
indexOf = IndexOf(reverseCollection, 2);
reordedCollection = Reorder(flattenedCollection, { 2, 0, 1 }); // (={3,1,2}
indexByValue = SortIndexByValue(reordedCollection, true); // (={1,2,0}) not sure thsis is correct
def sorterFunction(a:double, b:double)
{
    return = a < b ? 1 : 0;
}
sort = Sort(sorterFunction, reordedCollection);  // (=null) something wrong here
newArray = noramlisedDepthCollection;
newArray[0][1] = 6; // directly add a member to a 2D array.. good
newArray[2] = { 7, 8, 9 }; // and good
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch754_set_operation_functions_test_1()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"import(""ProtoGeometry.dll"");
import(""DSCoreNodes.dll"");
set = { true, { false, true } };
allFalseSet = AllFalse(set);
someFalseSet = SomeFalse(set);
someTrueSet = SomeTrue(set);
someNullsSet = SomeNulls(set);
setInsert = Insert(set, null, -1);
allFalseSetInsert = AllFalse(setInsert);
someFalseSetInsert = SomeFalse(setInsert);
someTrueSetInsert = SomeTrue(setInsert); // (=true).. which is correct, but gives 'Argument Type Mismatch' error
someNullsSetInsert = SomeNulls(setInsert);
countFalse = CountFalse(setInsert);
countTrue = CountTrue(setInsert);
containsNull = Contains(setInsert, null);
removeSetInsert = Remove(setInsert, 2);
removeNullsSetInsert = RemoveNulls(setInsert);
removeDuplicatesSetInsert = RemoveDuplicates(setInsert);
flattenSetInsert = Flatten(setInsert);
removeDuplicatesSetInsertFalttened = RemoveDuplicates(flattenSetInsert);
removeIfNotSetInsert = RemoveIfNot(flattenSetInsert, ""bool""); // (={})... this looks incorrect
one1Dcollection = { 3, 1 };
other1Dcollection = { 0, 1, 2, 3, 4 };
setDifferenceA = SetDifference(one1Dcollection, other1Dcollection);
setDifferenceB = SetDifference(other1Dcollection, one1Dcollection);
setIntersection = SetIntersection(other1Dcollection, one1Dcollection);
setUnion = SetUnion(other1Dcollection, one1Dcollection); ";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch755_T80580_BuiltinFunc_1()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"import(""DSCoreNodes.dll"");
class TestClass
{
	
	constructor TestClass()
	{
	}
        def testFlatten()
	{
		index = Flatten({1..4,0});
		return = index;
	}
	def testCount()
	{
		a = {true,{false,false},true};
		b = Count(a);
		return = b;
	}	
	def testContains()
	{
		a = {true,{false,false},true};
		b = Contains(a,{false,false});
		return = b;
	}
	def testCountFalse()
	{
		a = {true,{false,false},true};
		b = CountFalse(a);
		return = b;
	}
	def testCountTrue()
	{
		a = {true,{false,false},true};
		b = CountTrue(a);
		return = b;
	}
	def testSomeFalse()
	{
		a = {true,{false,false},true};
		b = SomeFalse(a);
		return = b;
	}
	def testSomeTrue()
	{
		a = {true,{false,false},true};
		b = SomeTrue(a);
		return = b;
	}
	def testToString()
	{
		a = {true,{false,false},true};
		b = ToString(a);
		return = b;
	}
	def testTranspose()
	{
		a = {{3,-4},{4,5}};
		b = Transpose(a);
		return = b;
	}
	def testFloor()
	{
		a = 3.5;
		b = Math.Floor(a);
		return = b;
	}
	def testCeil()
	{
		a = 3.5;
		b = Math.Ceiling(a);
		return = b;
	}
	def testLog()
	{
		b = Math.Log(10);
		return = b;
	}
	def testSqrt()
	{
		b = Math.Sqrt(25);
		return = b;
	}
	def testTan()
	{
		a = 45;
		b = Math.Tan(a);
		return = b;
	}
	def testNormalizeDepth()
	{
		index = NormalizeDepth({{1.1},{{2.3,3}},""5"",{{{{true}}}}},2);
		return = index;
	}
}
test = TestClass.TestClass();
t1 = test.testFlatten();
t2 = test.testCount();
t3 = test.testContains();
t4 = test.testCountFalse();
t5 = test.testCountTrue();
t6 = test.testSomeFalse();
t7 = test.testSomeTrue();
t8 = test.testToString();
t9 = test.testTranspose();
t10 = test.testFloor();
t11 = test.testCeil();
t12 = test.testLog();
t13 = test.testSqrt();
t14 = test.testTan();
t15 = test.testNormalizeDepth();
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch756_T80581_BuiltinFunc_2()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"import(""DSCoreNodes.dll"");
class TestClass
{
	b;
	b1;
	b2;
	b3;
	b4;
	b5;
	b6;
	b7;
	b8;
	b9;
	b10;
	b11;
	b12;
	b13;
	b14;
	constructor TestClass()
	{
		b = Flatten({1..4,0});
	
		a = {true,{false,false},true};
		b1 = Count(a);
	
		b2 = Contains(a,{false,false});
	
		b3 = CountFalse(a);
		
		b4 = CountTrue(a);
		
		b5 = SomeFalse(a);
		
		b6 = SomeTrue(a);
		
		b7 = ToString(a);
		
		a1 = {{3,-4},{4,5}};
		
		b8 = Transpose(a1);
		
		a2 = 3.5;
		
		b9 = Math.Floor(a2);
		
		b10 = Math.Ceiling(a2);
		
		a3 = 10;
		b11 = Math.Log(a3);
		b12 = Math.Sqrt(25);
		b13 = Math.Tan(45);
		
		b14 = NormalizeDepth({{1.1},{{2.3,3}},""5"",{{{{true}}}}},2);
		
	}
}
test = TestClass.TestClass();
t0 = test.b;
t1 = test.b1;
t2 = test.b2;
t3 = test.b3;
t4 = test.b4;
t5 = test.b5;
t6 = test.b6;
t7 = test.b7;
t8 = test.b8;
t9 = test.b9;
t10 = test.b10;
t11 = test.b11;
t12 = test.b12;
t13 = test.b13;
t14 = test.b14;
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch757_T80582_ceil()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"//testing ceiling()
import(""DSCoreNodes.dll"");
x = 1.5 ; 
y = 0.01 ; 
z = -0.1 ; 
a = Math.Ceiling(x) ;//2
b = Math.Ceiling(y) ;//1 
c = Math.Ceiling(z) ; //0
d = Math.Ceiling(-1.5) ;//-1
e = Math.Ceiling(-2);//-2
g = Math.Ceiling(2.1);//3
h = Math.Ceiling({0.2*0.2 , 1.2 , -1.2 , 3.4 , 3.6 , -3.6,0}); //{1,2,-1,4,4,-3,0}
//w = {{1.2,-2.1},{0.3,(-4*2.3)}};
//k = Math.Ceiling(y<2><1>); //
//negative testing
a1 = ""s"";
b1 = Math.Ceiling(a1); //null
a2 = Point.ByCartesianCoordinates(CoordinateSystem(),0,0,0);
b2 = Math.Ceiling(a2); //null
b3 = Math.Ceiling(null); //null
a4 = {};
b4 = Math.Ceiling(a4); //null
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch758_T80585_Count()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"// testing Count()
import(""ProtoGeometry.dll"");
def ret_count(ee : int[]) 
{
return =  Count(ee[1..Count(ee)]);
}
a = {1,2,3,0};
b = Count(a); //4
c = {1.1,-1.2,3,4};
d = Count(c) ; //4
e1 = {{1,2},{3,4},{4,5}};
f = Count(e1);//3
g = ret_count(e1); //{2,2,2}
h = Count(e1[1..Count(e1)-1]);//3
i = Count(e1[0]); //2
j = Count({{{{1,3},2},{1}},{2,3}}); //2
//negative testing
a1 = ""s"";
b1 = Count(a1); //0
a2 = Point.ByCartesianCoordinates(CoordinateSystem(),0,0,0);
b2 = Count(a2); //0
b3 = Count(null); //null
a4 = {};
b4 = Count(a4); //0";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch759_T001_SomeNulls_IfElse_01()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"result =
[Imperative]
{
	arr1 = {1,null};
	arr2 = {1,2};
	if(SomeNulls(arr1))
	{
		arr2 = arr1;
	}
	return = SomeNulls(arr2);
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch760_T001_SomeNulls_IfElse_02()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"result =
[Imperative]
{
	arr1 = {};
	arr2 = {1,2};
	if(SomeNulls(arr1))
	{
		arr2 = arr1;
	}
	return = SomeNulls(arr2);
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch761_T002_SomeNulls_ForLoop()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"result = 
[Imperative]
{
	a = {1,3,5,7,{}};
	b = {null,null,true};
	c = {SomeNulls({1,null})};
	d = {a,b,c};
	j = 0;
	e = {};
	
	for(i in d)
	{
		
		e[j]= SomeNulls(i);
		j = j+1;
	}
	return  = e;
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch762_T003_SomeNulls_WhileLoop()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"result = 
[Imperative]
{
	a = {1,3,5,7,{}};
	b = {null,null,true};
	c = {{}};
	
	d = {a,b,c};
	
	i = 0;
	j = 0;
	e = {};
	
	while(i<Count(d))
	{
	
		e[j]= SomeNulls(d[i]);
		i = i+1;
		j = j+1;
	}
	return = e ;
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch763_T004_SomeNulls_Function()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"def foo(x:var[]..[])
{
	a = {};
	i = 0;
	[Imperative]
	{
		for(j in x)
		{
			if(SomeNulls(j))
			{
				a[i] = j;
				i = i+1;
			}
		}
	}
	return  = Count(a);
}
b = {
{null},
{1,2,3,{}},
{0}
};
result = foo(b);
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch764_T005_SomeNulls_Class()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class C
{
	a : var;
	constructor C(x:var[]..[])
	{
		a = SomeNulls(x);
	}
	
	def foo(y:var[]..[])
	{
		return = SomeNulls(y);
	}
}
l = {1, null, true,{}};
c = C.C(l);
m = c.a;
n = c.foo(l);
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch765_T006_SomeNulls_Inline()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"result;
[Imperative]
{
a = {null,1};
b = {};
c = {1,2,3};
result = SomeNulls(c)?SomeNulls(b):SomeNulls(a);
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch766_T007_SomeNulls_RangeExpression()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"result =
[Imperative]
{
i = 0;
arr = {{1,1.2} , {null,0}, {true, false} };
a1 = 0;
a2 = 2;
d = 1;
a = a1..a2..d;
for(i in a)
{
	if(SomeNulls(arr[i])) 
	return = i;
	
}
return = -1;
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch767_T008_SomeNulls_Replication()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"/*
[Imerative]
{
	a = 1..5;
	i = 0..3;
	x = a[i];
}
*/
a = {
{{null, 1},1},
{null},
{1,2,false}
};
i = 0..2;
j = 0;
[Imperative]
{
		if(SomeNulls(a[i]))
		{
			j = j+1;
		}
		
} 
//Note : the following works fine : 
/*
[Imperative]
{
	for ( x in  i) 
	{		
	    if(SomeNulls(a[x]))
	    {
                j = j+1;
	    }
	}
}
*/";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch768_T009_SomeNulls_DynamicArray()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"result = 
[Imperative]
{
	a1 = {
	{{null},{}},
	{1,2,4},
	{@a,@b,@null},//{null,null,null}
	{null}
	};
	a2 = {};
	i = 0;
	j = 0; 
	while(i < Count(a1))
	{
		if(SomeNulls(a1[i]))
		{
			a2[j] = a1[i];
			j = j+1;
			
		}
		i = i+1;
	}
	return = Count(a2);
} ";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch769_T010_SomeNulls_AssociativeImperative_01()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"m;
n;
[Imperative]
{
	a = {1,2,null};
	b = {null, null};
	
	[Associative]
	{
		a = {1};
		b = a;
		m = SomeNulls(b);
		a = {1,null,{}};
		n = m;
	}
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch770_T010_SomeNulls_AssociativeImperative_02()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"[Imperative]
{
	a = {false};
	if(!SomeNulls(a))
	{
	[Associative]
	{
		
		b = a;
		a = {null};
		
		m = SomeNulls(b);//true,false
		[Imperative]
		{
			c = a;
			a = {2};
			n = SomeNulls(c);//true
		}
		
	}
	}else
	{
	m = false;
	n = false;
	}
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch771_T010_SomeNulls_AssociativeImperative_03()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"
	
	a = {{}};
	b = a;
	
	m = SomeNulls(b);//false
	[Imperative]
	{
		c = a;
		a = {null,{}};
		m = SomeNulls(c);//false
	}
	a = {null};
	n = SomeNulls(b);//true;
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch772_T011_Defect_ModifierStack()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"a = 
{
	m =>a1;
	""n"" => a2;
	x + y =>a3;
	true => a4;
	&& 0 =>a5;	
}
result = {a1,a2,a3,a4,a5};
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch773_T011_SomeNulls_ModifierStack()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"arr = {1};
a = {
	arr => a1; //{1,null}
	SomeNulls(a1) => a2;//true
	!a2 => a3;//false
	
	m => a4;//{1,null}
	SomeNulls({a4}) => a5;//true
	}
	
	arr[1] = null ;
	m = arr;
	
	result = {a1,a2,a3,a4,a5};
	";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch774_T012_CountTrue_IfElse()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"result =
[Imperative]
{
	arr1 = {true,{{{{true}}}},null};
	arr2 = {{true},{false},null};
	if(CountTrue(arr1) > 1)
	{
		arr2 = arr1;
	}
	return = CountTrue(arr2);
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch775_T013_CountTrue_ForLoop()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"result = 
[Imperative]
{
	a = {1,3,5,7,{}};
	b = {null,null,{1,true}};
	c = {CountTrue({1,null})};
	
	d = {a,b,c};
	j = 0;
	e = {};
	
	for(i in d)
	{
		e[j]= CountTrue(i);
		j = j+1;
	}
	return  = e;
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch776_T014_CountTrue_WhileLoop()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"result = 
[Imperative]
{
	a = {1,3,5,7,{1}};//0
	b = {1,null,true};//1
	c = {{false}};//0
	
	d = {a,b,c};
	
	i = 0;
	j = 0;
	e = {};
	
	while(i<Count(d))
	{
		e[j]= CountTrue(d[i]);
		i = i+1;
		j = j+1;
	}
	return = e ;
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch777_T015_CountTrue_Function()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"def foo(x:var[]..[])
{
	a = {};
	i = 0;
	[Imperative]
	{
		for(j in x)
		{
			a[i] = CountTrue(j);
			i = i+1;
		}
	}
	return  = a;
}
b = {
{null},//0
{1,2,3,{true}},//1
{0},//0
{true, true,1,true, null},//3
{x, null}//0
};
result = foo(b);
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch778_T016_CountTrue_Class()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class C
{
	a : int;
	constructor C(x:var[]..[])
	{
		a = CountTrue(x);
	}
	
	def foo(y:var[]..[])
	{
		return = CountTrue(y)+ a;
	}
}
b = {1, null, true,{{true},false}};//2
c = C.C(b);
m = c.a;//2
n = c.foo(b);//4
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch779_T017_CountTrue_Inline()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"result;
[Imperative]
{
def foo(x:var[]..[])
{
	if(CountTrue(x) > 0)
		return = true;
	return = false;
}
a = {null,1};//0
b = {null,20,30,null,{10,0},true,{false,0,{true,{false},5,2,false}}};//2
c = {1,2,foo(b)};
result = CountTrue(c) > 0 ? CountTrue(a):CountTrue(b);
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch780_T018_CountTrue_RangeExpression_01()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"a;
result = 
[Imperative]
{
	a1 = {1,true, null};//1
	a2 = 8;
	a3 = {2,{true,{true,1}},{false,x, true}};//3
	a = CountTrue(a1)..a2..CountTrue(a3);//{1,4,7}
	
	return = CountTrue(a);
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch781_T018_CountTrue_RangeExpression_02()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"result = 
[Imperative]
{
	a1 = {1,true, null};//1
	a2 = 8;
	a3 = {2,{true,{true,1}},{false,x, true}};//3
	a = CountTrue(a1)..a2..~CountTrue(a3);//{}
	return = CountTrue(a);
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch782_T018_CountTrue_RangeExpression_03()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"a;
result = 
[Imperative]
{
	a1 = {1,true, null};//1
	a2 = 8;
	a3 = {2,{true,{true,1}},{false,x, true}};//3
	a = {1.0,4.0,7.0};
	//a = CountTrue(a1)..a2..#CountTrue(a3);//{}
	return = CountTrue(a);
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch783_T019_CountTrue_Replication()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"
def foo(x:int)
{
	return = x +1;
}
a = {true,{true},1};//2
b = {null};
c = {{{true}}};//1
d = {{true},{false,{true,true}}};//3
arr = {CountTrue(a),CountTrue(b),CountTrue(c),CountTrue(d)};
result = foo(arr);";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch784_T020_CountTrue_DynamicArray()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"a2;
result = 
[Imperative]
{
	a1 = {
	{{true},{}},
	{@a,2,{false}},
	{@a,@b,@null},//{null,null,null}
	{null}
	};
	a2 = {};
	i = 0;
	j = 0; 
	while(i < CountTrue(a1))
	{
		if(CountTrue(a1[i])>0)
		{
			a2[j] = a1[i];
			j = j+1;
			
		}
		i = i+1;
	}
	return = CountTrue(a2);
} ";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch785_T021_CountTrue_ModifierStack()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"x = {true, 0,{1},false,x,null,{true}};
m = 2.56;
a = {
	CountTrue(x) => a1; //2
	CountTrue(x[6]) => a2;//1
	CountTrue(x[CountTrue(x)]);//0
	m => a4;
	CountTrue({a4}) => a5;//0
	}
	x = {};
	result = {a1,a2,a3,a4,a5};
	";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch786_T022_CountTrue_ImperativeAssociative()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"b;
c;
[Imperative]
{
	a1 = {true,0,1,1.0,null};
	a2 = {false, CountTrue(a1),0.0};
	a3 = a1;
	[Associative]
	{
		a1 = {true,{true}};
		a4 = a2;
		a2 = {true};
		b = CountTrue(a4);//1
	}
	
	c = CountTrue(a3);//1
	
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch787_T023_CountFalse_IfElse()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"result =
[Imperative]
{
	arr1 = {false,{{{{false}}}},null,0};
	arr2 = {{true},{false},null,null};
	if(CountFalse(arr1) > 1)
	{
		arr2 = arr1;
	}
	return = CountFalse(arr2);//2
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch788_T024_CountFalse_ForLoop()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"result = 
[Imperative]
{
	a = {1,3,5,7,{}};
	b = {null,null,{0,false}};
	c = {CountFalse({{false},null})};
	
	d = {a,b,c};
	j = 0;
	e = {};
	
	for(i in d)
	{
		e[j]= CountFalse(i);
		j = j+1;
	}
	return  = e;
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch789_T025_CountFalse_WhileLoop()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"result = 
[Imperative]
{
	a = {1,3,5,7,{0}};//0
	b = {1,null,false};//1
	c = {{true}};//0
	
	d = {a,b,c};
	
	i = 0;
	j = 0;
	e = {};
	
	while(i<Count(d))
	{
		e[j]= CountFalse(d[i]);
		i = i+1;
		j = j+1;
	}
	return = e ;
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch790_T026_CountFalse_Function()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"def foo(x:var[]..[])
{
	a = {};
	i = 0;
	[Imperative]
	{
		for(j in x)
		{
			a[i] = CountFalse(j);
			i = i+1;
		}
	}
	return  = a;
}
b = {
{null},//0
{1,2,3,{false}},//1
{0},//0
{false, false,0,false, null},//3
{x, null}//0
};
result = foo(b);
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch791_T027_CountFalse_Class()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class C
{
	a : int;
	constructor C(x:var[]..[])
	{
		a = CountFalse(x);
	}
	
	def foo(y:var[]..[])
	{
		return = CountFalse(y)+ a;
	}
}
b = {0.000, null, false,{{false},v}};//2
c = C.C(b);
m = c.a;//2
n = c.foo(b);//4
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch792_T028_CountFalse_Inline()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"result;
[Imperative]
{
def foo(x:var[]..[])
{
	if(CountFalse(x) > 0)
		return = true;
	return = false;
}
a = {null,0};//0
b = {null,20,30,null,{10,0},false,{true,0,{true,{false},5,2,true}}};//2
c = {1,2,foo(b)};
result = CountFalse(c) > 0 ? CountFalse(a):CountFalse(b);
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch793_T029_CountFalse_RangeExpression_01()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"a;
result = 
[Imperative]
{
	a1 = {0,false, null};//1
	a2 = 8;
	a3 = {2,{false,{false,1}},{false,x, true}};//3
	a = CountFalse(a1)..a2..CountFalse(a3);//{1,4,7}
	
	return = CountFalse(a);
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch794_T029_CountFalse_RangeExpression_02()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"a;
result = 
[Imperative]
{
	a1 = {1,false, null};//1
	a2 = 8;
	a3 = {2,{false,{false,1}},{false,x, true}};//3
	a = {1.0,4.0,7.0};
	//a = CountFalse(a1)..a2..#CountFalse(a3);//{}
	return = CountFalse(a);
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch795_T030_CountFalse_Replication()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"
def foo(x:int)
{
	return = x +1;
}
a = {false,{false},0};//2
b = {CountFalse({a[2]})};
c = {{{false}}};//1
d = {{false},{false,{true,false,0}}};//3
arr = {CountFalse(a),CountFalse(b),CountFalse(c),CountFalse(d)};
result = foo(arr);";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch796_T031_CountFalse_DynamicArray()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"a2;
result = 
[Imperative]
{
	a1 = {
	{{false},{}},
	{@a,2,{true}},
	{@a,@b,@null},//{null,null,null}
	{null}
	};
	a2 = {};
	i = 0;
	j = 0; 
	while(i < CountFalse(a1))
	{
		if(CountFalse(a1[i])>0)
		{
			a2[j] = a1[i];
			j = j+1;
			
		}
		i = i+1;
	}
	return = CountFalse(a2);
} ";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch797_T032_CountFalse_ModifierStack()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"x = {true, 0,{1},false,x,null,{false}};
m = 2.56;
a = {
	CountFalse(x) => a1; //2
	CountFalse(x[6]) => a2;//1
	CountFalse(x[CountFalse(x)]);//0
	m => a4;
	CountFalse({a4}) => a5;//0
	}
	x = {};
	result = {a1,a2,a3,a4,a5};
	";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch798_T033_CountFalse_ImperativeAssociative()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"b;
c;
[Imperative]
{
	a1 = {false,0,1,1.0,null};
	a2 = {true, CountFalse(a1),0.0};
	a3 = a1;
	[Associative]
	{
		a1 = {false,{false}};
		a4 = a2;
		a2 = {false};
		b = CountFalse(a4);//1
	}
	
	c = CountFalse(a3);//1
	
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch799_T034_AllFalse_IfElse()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"a = {false, false};//true
b = {{false}};//true
c = {false, 0};//false
result = {};
[Imperative]
{
	if(AllFalse(a)){
		a[2] = 0;
		result[0] = AllFalse(a);//false
	} 
	if(!AllFalse(b)){
		
		result[1] = AllFalse(b);//false
	}else
	{result[1]= null;}
	if(!AllFalse(c)){
		result[2] = AllFalse(c);
	}
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch800_T035_AllFalse_ForLoop()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"
result = 
[Imperative]
{
	a = {false,false0,0,null,x};//false
	b = {false,false0,x};//false
	c = {};//false
	d = {{}};//false
	
	h = {
	{{0}},
	{false}
};
	e = {a,b ,c ,d,h};
	f = {};
	j = 0;
	for(i in e)
	{	
		if(AllFalse(i)!=true){
			f[j] = AllFalse(i);
			j = j+1;
		}
		
	}
return = f;
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch801_T036_1_Null_Check()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"result = null;";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch802_T036_AllFalse_WhileLoop()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"
result = 
[Imperative]
{
	a = {false,false0,0,null,x};//false
	b = {false,false0,x};//false
	c = {};//false
	d = {{}};//false
	e = {a,b ,c ,d};
	i = 0;
	f = {};
	j = 0;
	while(!AllFalse(e[i])&& i < Count(e))
	{	
		if(AllFalse(e[i])!=true){
			f[j] = AllFalse(e[i]);
			j = j+1;
		}
		i = i+1;
		
	}
return = f;
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch803_T037_AllFalse_Function()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"def foo( x : bool)
{	
	return = !x;
}
a1 = {0};
a2 = {null};
a3 = {!true};
b = {a1,a2,a3};
result = {foo(AllFalse(a1)),foo(AllFalse(a2)),foo(AllFalse(a3))};//true,true,false
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch804_T038_AllFalse_Class()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class C
{
	x: var;
	y :int;
	constructor C(b:bool)
	{
		x = b;
		y = 0.0;
	}
	
	def foo(z:var[]..[])
	{
	temp = 
	[Imperative]
		{
			if(AllFalse(z)== x )
			{
				
				return = true;
			}
			else{
		
			return = false;
			}
		}
	    return = temp;
	}
}
c = C.C(true);;
d = c.x;
e = c.y;
g = {false,{false}};
f = c.foo(g);//true
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch805_T039_AllFalse_Inline()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"a1 = {false,{false}};
a = AllFalse(a1);//true
b1 = {null,null};
b = AllFalse(b1);//false
c = AllFalse({b});//t
result = a? c:b;//t";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch806_T040_AllFalse_RangeExpression_01()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"s";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch807_T040_AllFalse_Replication()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"a = {
	{{0}},
	{false}
};
c = AllFalse(a);
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch808_T042_AllFalse_DynamicArray()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"b = {};
a = {{true},{false},{false},
	{false,{true,false}}};
	
	i = 0;
	result2 = 
	[Imperative]
	{
		while(i<Count(a))
		{
			b[i] = AllFalse(a[i]);
			i = i+1;
		}
		return = b;
	}
	result = AllFalse(a);
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch809_T043_AllFalse_ModifierStack()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"arr0 = {{false}};
arr1 = {1||0};
arr2 = {false&&0};
a = 
{
	AllFalse(arr0) => a1;//1
	AllFalse(arr1) => a2;//0
	AllFalse(arr2) => a3;//1
	&&a1 => a4;//1
	
}
result = {a1,a2,a3,a4};
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch810_T044_AllFalse_ImperativeAssociative()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"m;
n;
[Imperative]
{
	a = {false||true};
	b = {""false""};
	c = a;
	a = {false};
	[Associative]
	{
		
		d = b;
		
		b = {false};
		
		m = AllFalse(c);//f
		n = AllFalse(d);//t
	}
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch811_T045_Defect_CountArray_1()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"a = {0,1,null};
b = {m,{},a};
c={};
c[0] = 1;
c[1] = true;
c[2] = 0;
c[3] = 0;
a1 = Count(a);
b1 = Count(b);
c1 = Count(c);
result = {a1,b1,c1};";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch812_T045_Defect_CountArray_2()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"result=
[Imperative]
{
a = {};
b = a;
a[0] = b;
a[1] = ""true"";
c = Count(a);
a[2] = c;
return = Count(a);
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch813_T045_Defect_CountArray_3()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"a = {};
b = {null,1+2};
a[0] = b;
a[1] = b[1];
result = Count(a);";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch814_T046_Sum_IfElse()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"result = 
[Imperative]
{
	a = {1,2,3,4};
	b = {1.0,2.0,3.0,4.0};
	c = {1.0,2,3,4.0};
	d = {};
	e = {{1,2,3,4}};
	f = {true,1,2,3,4};
	g = {null};
	
	m= {-1,-1,-1,-1,-1,-1,-1};
	
	if(Sum(a)>=0) m[0] = Sum(a);	
	if(Sum(b)>=0) m[1] = Sum(b);
	if(Sum(c)>=0) m[2] = Sum(c);
	if(Sum(d)>=0) m[3] = Sum(d); 
	if(Sum(e)>=0) m[4] = Sum(e);
	if(Sum(f)>=0) m[5] = Sum(f);
	if(Sum(g)>=0) m[6] = Sum(g);
	
	return = m;
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch815_T047_Sum_ForLoop()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"result = 
[Imperative]
{
	a = {0,0.0};
	b = {{}};
	c = {m,Sum(a),b,10.0};
	
	d = {a,b,c};
	j = 0;
	
	for(i in d)
	{
		d[j] = Sum(i);
		j = j+1;
	}
	
	return = d; 
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch816_T048_Sum_WhileLoop()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"result = 
[Imperative]
{
	a = {-2,0.0};
	b = {{}};
	c = {m,Sum(a),b,10.0};
	
	d = {a,b,c};
	j = 0;
	k = 0;
	e = {};
	
	while(j<Count(d))
	{
		if(Sum(d[j])!=0)
		{
			e[k] = Sum(d[j]);
			k = k+1;
		}
		j = j+1;
	}
	
	return = e; 
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch817_T049_Sum_Function()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"def foo(x:var[])
{
	return =
	[Imperative]
	{
		return = Sum(x);
	}
}
a = {-0.1,true,{},null,1};
b = {m+n,{{{1}}}};
c = {Sum(a),Sum(b)};
result = foo(c);
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch818_T050_Sum_Class()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class C 
{
	x: int;
	y: bool;
	sum : var;
	
	constructor C(a:var[]..[])
	{
		x = 10.0;
		y = false;
		arr = {Sum(a),x,y};
		
		sum = Sum(arr);
	}
	
	def foo(b:var[]..[])
	{
		r = 
		[Imperative]
		{	
			c = {};
			i = 0;
			while(i<Count(b))
			{
				c[i] = Sum(b[i]);
				i = i+1;
			}
			if(Sum(c) == Sum(b)){
				return  = true;
				
			}else
			{return = false;}
		}
		return = r;
	}
}
a = {1,-1};
b = {null, "" "",{1}};
c = {a,b};
d = C.C(c);
m = d.sum;
p = d.x;
q = d.y;
n= d.foo(c);
result = {m,n,Sum({m,n})};
//11.0,true,11.0
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch819_T051_Sum_Inline()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"a = {1,{2,-3.00}};//0.0
sum = Sum(a);
b = Sum(a) -1;//-1.0
c = Sum({a,b,-1});//-2.0;
result = Sum(a)==0&& b==-1.00? b :c;
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch820_T052_Sum_RangeExpression()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"result = 
[Imperative]
{
	a1 = {1,true, null};//1
	a2 = 8;
	a3 = {2,{true,{true,1.0}},{false,x, true}};//3.0
	a = Sum(a1)..a2..Sum(a3);//{1,4,7}
	
	return = Sum(a);//12.0
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch821_T053_Sum_Replication()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"a = {1,2,3};
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch822_T054_Sum_DynamicArr()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"a = {};
b = {1.0,2,3.0};
c = {null,m,""1""};
a[0]=Sum(b);//6.0
a[1] = Sum(c);//0
a[2] = Sum({a[0],a[1]});//6.0
result = Sum(a);//12.0";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch823_T055_Sum_ModifierStack()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"a = 
{
	{1,false} => a1;
	Sum(a1)=> a2;//1
	Sum({a1,a2}) => a3;//2
}
result = Sum({a1,a2,a3,a});//6";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch824_T056_Sum_AssociativeImperative()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"a = {1,0,0.0};
b = {2.0,0,true};
b1 = {b,1};
[Imperative]
{
	c = a[2];
	a[1] = 1;
	m = a;
	sum1 = Sum({c});//0.0
	[Associative]
	{
		 b[1] = 1;
		 sum2 = Sum( b1);////4.0
	}
	
	a[2]  =1;
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch825_T057_Average_DataType_01()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"a = {};
b = {1,2,3};
c = {0.1,0.2,0.3,1};
d = {true, false, 1};
a1 = Average(a);
b1 = Average(b);
c1 = Average(c);
d1 = Average(d);";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch826_T058_Average_DataType_02()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"import(""ProtoGeometry.dll"");
//WCS = CoordinateSystem.Identity();
pt1=Point.ByCoordinates(1,1,1);
a = {true};
b = {{1},2,3};
c = {""a"",0.2,0.3,1};
d = {pt1, {}, 1};
a1 = Average(a);
b1 = Average(b);
c1 = Average(c);
d1 = Average(d);";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch827_T059_Defect_Flatten_RangeExpression()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"a = 0..10..5;
b = 20..30..2;
c = {a, b};
d = Flatten({a,b});
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch828_T059_Defect_Flatten_RangeExpression_1()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"a = {{null}};
b = {1,2,{3}};
c = {a,b};
d = Flatten(c);";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch829_T060_Average_ForLoop()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"result = 
[Imperative]
{
	a = {};
	b = {1,{2},{{2},1}};
	c = {true, false, null, 10};
	d = {a,b,c};
	
	e = {};
	j = 0;
	
	for(i in d)
	{
		e[j] = Average(i);
		 j = j+1;
		
	}
	return = e;
	
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch830_T061_Average_Function()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"def foo : double (x :var[]..[])
{
	
	return = Average(x);
}
a = {1,2,2,1};
b = {1,{}};
c = Average(a);
result = {foo(a),foo(b)};";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch831_T062_Average_Class()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class C 
{
	x : var;
	y : var;
	
	constructor C1(m:var[]..[], n:var[]..[])
	{
		x = Average(m);
		y = Average(n);
	}
	def foo()
	{
		return = Average({x,y});
	}
}
a = {1,{2},{{{3}}}};
b = {0.1,2,0};
m = C.C1(a,b);
m1 = m.x;
m2 = m.y;
n = m.foo();";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch832_T063_Average_Inline()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"a = {1.0,2};
b = {{0},1.0,{2}};
result = Average(a)>Average(b)?true:false;";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch833_T064_Average_RangeExpression()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"a = 0..6..3;//0,3,6
b = 0..10..~3;//0,3.3,6.6,10
m = Average(a);//3
n = Average(b);//5.0
c = Average({m})..Average({n});//3.0,4.0,5.0";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch834_T065_Average_ModifierStack()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"b = {0.0,1};//0.5
c = b;
a =
{
	Average(c) =>a1;
	Average({a1}) +1 => a2;
	
}
b[0]=1;";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch835_T066_Print_String()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"r1 = Print(""Hello World"");
str = ""Hello World!!"";
r2 = Print(str);
str = ""Hello + World"";";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch836_T067_Print_Arr()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"arr = { 0, 1 ,2};
r1 = Print(arr);
arr2 = {0,{1},{{}}};
r2 = Print(arr2);";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch837_T068_Abs_2()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"import (""DSCoreNodes.dll"");

class A
{
    x;
	constructor A ( y )
	{
	    x = Math.Abs(y);
	}
	def foo ( z )
	{
	    return = Math.Abs (z + x);
	}
}
def foo ( x )
{
    return = Math.Abs(x);
}
t1 = {   1 => a1;
        + Math.Abs(2) => a2;
	}
t2 = 0;
arr = 1..2;
t3 = 0;
t4;
tt = A.A(2.5);
t5 = tt.x;
t6 = tt.foo(3);
t7 = foo(2);
[Imperative]
{
    for ( i in arr )
	{
	    t2 = t2 + Math.Abs(i);
	}
	t3 = [Associative]
	{
	    t4 = [Imperative]
		{
		    return = Math.Abs(3);
		}
		return = t4;
	}
}
 
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch838_T068_Cosh_2()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"import (""DSCoreNodes.dll"");

class A
{
    x;
	constructor A ( y )
	{
	    x = Math.Cosh(y);
	}
	def foo ( z )
	{
	    return = Math.Cosh (z + x);
	}
}
def foo ( x )
{
    return = Math.Cosh(x);
}
t1 = {   1 => a1;
        + Math.Cosh(2) => a2;
	}
t2 = 0;
arr = 1..2;
t3 = 0;
t4;
tt = A.A(2.5);
t5 = tt.x;
t6 = tt.foo(3);
t7 = foo(2);
[Imperative]
{
    for ( i in arr )
	{
	    t2 = t2 + Math.Cosh(i);
	}
	t3 = [Associative]
	{
	    t4 = [Imperative]
		{
		    return = Math.Cosh(3);
		}
		return = t4;
	}
}
 
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch839_T068_DivRem_2()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"import (""DSCoreNodes.dll"");

class A
{
    x;
	constructor A (  )
	{
	    x = Math.DivRem(1000, 300);
	}
	def foo (  )
	{
	    return = Math.DivRem(1000, 300);
	}
}
def foo (  )
{
    x = 0;
	return = Math.DivRem(1000, 300);
}
t1 = {   1 => a1;
        + Math.DivRem(1000, 300) => a2;
	}
t2 = 0;
arr = 1..2;
t3 = 0;
t4;
tt = A.A();
t5 = tt.x;
t6 = tt.foo();
t7 = foo();
[Imperative]
{
    for ( i in arr )
	{
	    
		t2 = t2 + Math.DivRem(1000, 300);
	}
	t3 = [Associative]
	{
	    t4 = [Imperative]
		{
		    
			return = Math.DivRem(1000, 300);
		}
		return = t4;
	}
}
 
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch840_T068_Factorial_2()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"import (""DSCoreNodes.dll"");

class A
{
    x;
	constructor A (  )
	{
	    x = Math.Factorial(-3);
	}
	def foo (  )
	{
	    return = Math.Factorial (4);
	}
}
def foo ( x )
{
    return = Math.Factorial(x);
}
t1 = {   1 => a1;
        + Math.Factorial(-4) => a2;
	}
t2 = 0;
arr = { -1, 0, 5};
t3 = 0;
tt = A.A();
t4;
t5 = tt.x;
t6 = tt.foo();
t7 = foo(5);
t8 = Math.Factorial(arr);
[Imperative]
{
    for ( i in arr )
	{
	    t2 = t2 + Math.Factorial(i);
	}
	t3 = [Associative]
	{
	    t4 = [Imperative]
		{
		    return = Math.Factorial(-3);
		}
		return = t4;
	}
}
 
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch841_T068_IEEERemainder_2()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"import (""DSCoreNodes.dll"");

class A
{
    x;
	constructor A (  )
	{
	    x = Math.IEEERemainder(1000, 300);
	}
	def foo (  )
	{
	    return = Math.IEEERemainder(1000, 300);
	}
}
def foo (  )
{
    return = Math.IEEERemainder(1000, 300);
}
t1 = {   1 => a1;
        + Math.IEEERemainder(1000, 300) => a2;
	}
t2 = 0;
arr = 1..2;
t3 = 0;
tt = A.A();
t4;
t5 = tt.x;
t6 = tt.foo();
t7 = foo();
[Imperative]
{
    for ( i in arr )
	{
	    t2 = t2 + Math.IEEERemainder(1000, 300);
	}
	t3 = [Associative]
	{
	    t4 = [Imperative]
		{
		    return = Math.IEEERemainder(1000, 300);
		}
		return = t4;
	}
}
 
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch842_T068_Max_2()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"import (""DSCoreNodes.dll"");

class A
{
    x;
	constructor A (  )
	{
	    x = Math.Max(-1..1, -1.5..1.5);
	}
	def foo (  )
	{
	    return = Math.Max(-1..1, -1.5..1.5);
	}
}
def foo (  )
{
    return = Math.Max(-1..1, -1.5..1.5);
}
t1 = {   1 => a1;
        + Math.Max(-1..1, -1.5..1.5) => a2;
	}
t2 = 0;
arr = 1..2;
t3 = 0;
tt = A.A();
t4;
t5 = tt.x;
t6 = tt.foo();
t7 = foo();
t8 = 0;
[Imperative]
{
    for ( i in arr )
	{
	    t2 = t2 + Math.Max(-1, -1.5);
	}
	t3 = [Associative]
	{
	    t4 = [Imperative]
		{
		    return = Math.Max(-1, -1.5);
		}
		t8 = Math.Max(-1..1, -1.5..1.5);
		return = t4;
	}
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch843_T068_Min_2()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"import (""DSCoreNodes.dll"");

class A
{
    x;
	constructor A (  )
	{
	    x = Math.Min(-1..1, -1.5..1.5);
	}
	def foo (  )
	{
	    return = Math.Min(-1..1, -1.5..1.5);
	}
}
def foo (  )
{
    return = Math.Min(-1..1, -1.5..1.5);
}
t1 = {   1 => a1;
        + Math.Min(-1..1, -1.5..1.5) => a2;
	}
t2 = 0;
arr = 1..2;
t3 = 0;
t4;
tt = A.A();
t5 = tt.x;
t6 = tt.foo();
t7 = foo();
t8 = 0;
[Imperative]
{
    for ( i in arr )
	{
	    t2 = t2 + Math.Min(-1, -1.5);
	}
	t3 = [Associative]
	{
	    t4 = [Imperative]
		{
		    return = Math.Min(-1, -1.5);
		}
		t8 = Math.Min(-1..1, -1.5..1.5);
		return = t4;
	}
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch844_T068_Pow_2()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"import (""DSCoreNodes.dll"");

class A
{
    x;
	constructor A (  )
	{
	    x = Math.Pow(-1..1, {-2, 0, 2});
	}
	def foo (  )
	{
	    return = Math.Pow(-1..1, {-2, 0, 2});
	}
}
def foo (  )
{
    return = Math.Pow(-1..1, {-2, 0, 2});
}
t1 = {   1 => a1;
        + Math.Pow(-1..1, {-2, 0, 2}) => a2;
	}
t2 = 0;
arr = 1..2;
t3 = 0;
t4;
tt = A.A();
t5 = tt.x;
t6 = tt.foo();
t7 = foo();
t8 = 0;
[Imperative]
{
    for ( i in arr )
	{
	    t2 = t2 + Math.Pow(2, 2);
	}
	t3 = [Associative]
	{
	    t4 = [Imperative]
		{
		    return = Math.Pow(-2, 2);
		}
		t8 = Math.Pow(-1..1, {-2, 0, 2});
		return = t4;
	}
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch845_T068_Round_2()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"import (""DSCoreNodes.dll"");

class A
{
    x;
	constructor A (  )
	{
	    x = Math.Round({-1.005, -2.45, 1.0}, {2, 0, 2});
	}
	def foo (  )
	{
	    return = Math.Round({-1.005, -2.45, 1.0}, {2, 0, 2});
	}
}
def foo (  )
{
    return = Math.Round({-1.005, -2.45, 1.0}, {2, 0, 2});
}
t1 = {   1 => a1;
        + Math.Round({-1.005, -2.45, 1.0}, {2, 0, 2}) => a2;
	}
t2 = 0;
arr = 1..2;
t3 = 0;
t4;
tt = A.A();
t5 = tt.x;
t6 = tt.foo();
t7 = foo();
t8 = 0;
[Imperative]
{
    for ( i in arr )
	{
	    t2 = t2 + Math.Round(2.0, 2);
	}
	t3 = [Associative]
	{
	    t4 = [Imperative]
		{
		    return = Math.Round(-2.0, 2);
		}
		t8 = Math.Round({-1.005, -2.45, 1.0}, {2, 0, 2});
		return = t4;
	}
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch846_T068_Sign_2()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"import (""DSCoreNodes.dll"");

class A
{
    x;
	constructor A ( y )
	{
	    x = Math.Sign(y);
	}
	def foo ( z )
	{
	    return = Math.Sign (z + x);
	}
}
def foo ( x )
{
    return = Math.Sign(x);
}
t1 = {   1 => a1;
        + Math.Sign(-2) => a2;
	}
t2 = 0;
arr = { -4,-5,1.5};
t3 = 0;
t4;
tt = A.A(-2.5);
t5 = tt.x;
t6 = tt.foo(3.0);
t7 = foo(-2);
[Imperative]
{
    for ( i in arr )
	{
	    t2 = t2 + Math.Sign(i);
	}
	t3 = [Associative]
	{
	    t4 = [Imperative]
		{
		    return = Math.Sign(-3);
		}
		return = t4;
	}
}
 
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch847_T068_Sinh_2()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"import (""DSCoreNodes.dll"");

class A
{
    x;
	constructor A (  )
	{
	    x = Math.Sinh(1.5);
	}
	def foo (  )
	{
	    return = Math.Sinh (4.5);
	}
}
def foo ( x )
{
    return = Math.Sinh(x);
}
t1 = {   1 => a1;
        + Math.Sinh(-4.5) => a2;
	}
t2 = 0;
arr = { -1.5, 0, 13.5};
t3 = 0;
t4;
tt = A.A();
t5 = tt.x;
t6 = tt.foo();
t7 = foo(37.5);
[Imperative]
{
    for ( i in arr )
	{
	    t2 = t2 + Math.Sinh(i);
	}
	t3 = [Associative]
	{
	    t4 = [Imperative]
		{
		    return = Math.Sinh(4.5);
		}
		return = t4;
	}
}
 
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch848_test()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"a = {};
b = Average(a);";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch849_T01_Class_In_Various_Scopes()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class Dummy
{ 
	x : var;  
	constructor Dummy () 
	{	
		x = 2;	 
	}
}
obj1 = [Imperative]
{
	a = Dummy.Dummy();
	a1 = a.x;
	return = a;
}
getX1 = obj1.x;	
obj2 = [Associative]
{
	b = Dummy.Dummy();
	b1 = b.x;
	return = b1;
}
getX2 = obj2.x;	";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch850_T02_Class_In_Various_Nested_Scopes()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class Dummy
{ 
	x : var;  
	constructor Dummy () 
	{	
		x = 2;	 
	}
}
c1 = [Imperative]
{
	a = Dummy.Dummy();
	b = [Associative]
	{
	    return = Dummy.Dummy();
	}
	c = a.x + b.x;
	return = c;
}
c2 = [Associative]
{
	a = Dummy.Dummy();
	b = [Imperative]
	{
	    return = Dummy.Dummy();
	}
	c = a.x + b.x;
	return = c;
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch851_T03_Class_In_Various_Scopes()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class Dummy
{ 
	x : var;  
	constructor Dummy () 
	{	
		x = 2;	 
	}
}
a = Dummy.Dummy();
c1 = [Imperative]
{
	b = [Associative]
	{
	    return = a;
	}
	c = a.x + b.x;
	return = c;
}
c2 = [Associative]
{
	b = [Imperative]
	{
	    return = a;
	}
	c = a.x + b.x;
	return = c;
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch852_T04_Class_Properties()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class A
{ 
	x1 : var[];  
	x2 : int ;
	x3 : double;
	x4 : bool;
	x5 : B;
	constructor A () 
	{	
		x1  = { 1, 2 };  
		x2  = 1;
		x3  = 1.5;
		x4  = true;
		x5  = B.B(1);
	}
}
class B
{ 
	y : int;
	constructor B (i : int) 
	{	
		y = i;
	}
}
a = A.A();
t1 = a.x1;
t2 = a.x2;
t3 = a.x3;
t4 = a.x4;
t5 = a.x5;
t6 = t5[0].y;
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch853_T05_Class_Properties()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class A
{ 
	x1 : var[][];  
	x2 : int[] ;
	x3 : double[]..[];
	x4 : bool[];
	x5 : B[];
	constructor A () 
	{	
		x1  = { 1, 2 };  
		x2  = { 1, 2 };
		x3  = { 1.5, 2.5 };
		x4  = { true, false };
		x5  = { B.B(1), B.B(2) };
	}
}
class B
{ 
	y : int;
	constructor B (i : int) 
	{	
		y = i;
	}
}
a = A.A();
t1 = a.x1;
t2 = a.x2;
t3 = a.x3;
t4 = a.x4;
t5 = a.x5;
t6 = t5[0].y;
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch854_T06_Class_Properties()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class A
{ 
	x1 : int = 5;
	constructor A () 
	{	
		
	}
}
a = A.A();
t1 = a.x1;
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch855_T07_Class_Properties()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class A
{ 
	static x1 : int;
	constructor A () 
	{	
		x1 = 5;
	}
}
a = A.A();
t1 = a.x1;
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch856_T08_Class_Properties()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class A
{ 
	x1 : int ;
	x2 : double[][];
	
	constructor A () 
	{	
		x1  = { true, 2.5 };  
		x2 = B.B();		
	}
}
class B
{ 
	x1 : int ;
		
	constructor B () 
	{	
		x1 = 1;
	}
}
a = A.A();
t1 = a.x1;
t2 = a.x2[1].x1;
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch857_T09_Class_Inheritance()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class B
{ 
	x3 : int ;
		
	constructor B () 
	{	
		x3 = 2;
	}
}
class A extends B
{ 
	x1 : int ;
	x2 : double;
	
	constructor A () : base.B ()
	{	
		x1 = 1; 
		x2 = 1.5;		
	}
}
a1 = A.A();
b1 = a1.x1;
b2 = a1.x2;
b3 = a1.x3;
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch858_T10_Class_Inheritance()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class B
{ 
	x3 : int ;
		
	constructor () 
	{	
		x3 = 2;
	}
}
class A extends B
{ 
	x1 : int ;
	x2 : double;
	
	constructor () : base ()
	{	
		x1 = 1; 
		x2 = 1.5;		
	}
}
a1 = A();
b1 = a1.x1;
b2 = a1.x2;
b3 = a1.x3;
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch859_T11_Class_Inheritance()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class B
{ 
	x3 : int ;
		
	constructor B(a) 
	{	
		x3 = a;
	}
	def foo ( )
	{
		return = x3;
	}
	def foo ( a : int)
	{
		return = x3 + a;
	}
	
	def foo2 ( a : int)
	{
		return = x3 + a;
	}
}
class A extends B
{ 
	x1 : int ;
	x2 : double;
	
	constructor A(a1,a2,a3) : base.B(a3)
	{	
		x1 = a1; 
		x2 = a2;		
	}
	def foo ( )
	{
		return = {x1, x2};
	}
}
a1 = A.A( 1, 1.5, 0 );
b1 = a1.foo();
b2 = a1.foo2(1);
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch860_T13_Class_Default_Constructors()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class A
{ 
	x : int = 5 + 4 ;
	y : var;
	z : bool;
	w : B;
	p : int [];
	
}
class B
{ 
	x : int  ;	
	
}
a1 = A.A();
x1 = a1.x;
y1 = a1.y;
z1 = a1.z;
w1 = a1.w;
p1 = a1.p;
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch861_T14_Class_Named_Constructors()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class A
{ 
	x : int;
	
	constructor A ()
	{
		x = 1;		
	}
	
	constructor A (i)
	{
		x = i;		
	}
	
	constructor A1 (i)
	{
		x = i;		
	}
	
	
}
xx = [Imperative]
{
	a1 = A.A();
	a2 = A.A(2);
	a3 = A.A(3);
	return = { a1, a2, a3 };
}
x1 = xx[0].x;
x2 = xx[1].x;
x3 = xx[2].x;
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch862_T15_Class_Constructor_Negative()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class A
{ 
	x : int[];
	
	constructor A (i:int[])
	{
		x = i;		
	}
	
	
}
xx = [Imperative]
{
	y = 1;
	a1 = A.A(y);
	return = a1;
}
x1 = xx.x;
x2 = 3;
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch863_T16_Class_Constructor_Negative()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class A
{ 
	x : int;
	
	constructor A (i)
	{
		x = i;		
		return = { x, i};
	}
	
	
}
a1 = A.A(1);
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch864_T17_Class_Constructor_Negative()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class A
{ 
	x : int;
	
	constructor A (i)
	{
		x = i;				
	}
	
	
}
class B
{ 
	x : int;
	
	constructor B (i)
	{
		x = i;		
		
	}
	
}
b1 = B.B(1);
a1 = A.A(b1);
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch865_T18_Class_Constructor_Empty()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class A
{ 
	x : int[] = {1,2};
	
	constructor A ()
	{
		y = 2;		
	}	
}
a1 = A.A();
x = a1.x;
x1 = x[0];
x2 = x[1];
x3 = a1.y;
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch866_T19_Class_Constructor_Test_Default_Property_Values()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class A
{ 
	x : var ;
	y : int;
	z : bool;
	u : double;
	v : B;
	w1 : int[];
	w2 : double[];
	w3 : bool[];
	w4 : B[][];
	
	constructor A ()
	{
		      	
	}	
}
a1 = A.A();
x1 = a1.x;
x2 = a1.y;
x3 = a1.z;
x4 = a1.u;
x5 = a1.v;
x6 = a1.w1;
x7 = a1.w2;
x8 = a1.w3;
x9 = a1.w4;
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch867_T20_Class_Constructor_Fails()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class A
{ 
	x : var ;	
	
	constructor A ()
	{
		 x = w;     	
	}	
}
a1 = A.A();
b1 = a1.x;
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch868_T21_Class_Constructor_Calling_Base_Constructor()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class A
{ 
	x : var ;	
	
	constructor A ()
	{
		 x = 1;     	
	}	
}
class B extends A
{ 
	y : var ;	
	
	constructor B () : base.A()
	{
		 y = 2;     	
	}	
}
class C extends B
{ 
	z : var ;	
	
	constructor C () : base.B()
	{
		 z = 3;     	
	}	
}
c = C.C();
c1 = c.x;
c2 = c.y;
c3 = c.z;
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch869_T22_Class_Constructor_Not_Calling_Base_Constructor()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class A
{ 
	x : var = 0 ;	
	
	constructor A ()
	{
		 x = 1;     	
	}	
}
class C extends A
{ 
	y : var ;	
	
	constructor C () 
	{
		 y = 2;
         x = 2;		 
	}	
}
c = C.C();
c1 = c.x;
c2 = c.y;
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch870_T23_Class_Constructor_Base_Constructor_Same_Name()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class A
{ 
	x : var = 0 ;	
	
	constructor A ()
	{
		 x = 1;     	
	}	
}
class C extends A
{ 
	y : var ;	
	
	constructor A () : base.A()
	{
		 y = 2;
         x = 2;		 
	}
	
}
class B extends A
{ 
	y : var ;	
	
	constructor A () : base.A()
	{
		 y = 2;
         
	}
	
}
class D extends A
{ 
	y : var ;	
	
	constructor A () : base.A() 
	{
		 y = 2;
         
	}
	
}
c = C.A();
c1 = c.x;
c2 = c.y;
b = B.A();
b1 = b.x;
b2 = b.y;
d = D.A();
d1 = d.x;
d2 = d.y;
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch871_T24_Class_Constructor_Calling_Base_Methods()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class A
{ 
	x : var = 0 ;	
	
	constructor A ()
	{
		 x = 1;     	
	}
	def foo ()
	{
	    return = x + 1;
	}	
}
class C extends A
{ 
	y : var ;	
	
	constructor C () : base.A()
	{
		 y = foo();
         	 
	}
	
}
c = C.C();
c1 = c.x;
c2 = c.y;
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch872_T25_Class_Properties_Modifiers()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class A
{ 
	public x : var ;	
	private y : var ;
	//protected z : var = 0 ;
	constructor A ()
	{
		   	
	}
	public def foo1 (a)
	{
	    x = a;
		y = a + 1;
		return = x + y;
	} 
	private def foo2 (a)
	{
	    x = a;
		y = a + 1;
		return = x + y;
	}	
}
a = A.A();
a1 = a.foo1(1);
a2 = a.foo2(1);
a.x = 4;
a.y = 5;
a3 = a.x;
a4 = a.y;
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch873_T26_Class_Properties_Access()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class A
{ 
	public x : var ;	
	private y : var ;
	//protected z : var = 0 ;
	constructor A ()
	{
		   	
	}
	public def foo1 (a) 
	{
	    x = a;
		return = x + a;
	} 
	private def foo2 (a)
	{
	    x = a;
		y = a + 1;
		return = x + y;
	}	
	public def foo3 (a)
	{
	    x = a;
		return = x + foo2(a);
	}
}
a11;a12;a2;a3;a4;a5;
[Imperative]
{
    a2 = [Associative]
	{
	    a1 = [Imperative]
		{
		    a = A.A();
			return = a;
		}
		a11 = a1.foo1(1);
		a12 = a1.x;
		return = a11+a12;
	}
	ax = A.A();
	a3 = ax.foo1(1);
	a4 = ax.foo3(1);
	a5 = ax.x;
	
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch874_T27_Class_Properties_Access()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class A
{ 
	public x : var ;	
	private y : var ;
	//protected z : var = 0 ;
	constructor A (i)
	{
		x = i;
        y = i;		
	}
	public def foo1 (a) 
	{
	    x = a;
		return = x + a;
	} 
	private def foo2 (a)
	{
	    x = a;
		y = a + 1;
		return = x + y;
	}	
	public def foo3 (a)
	{
	    x = a;
		return = x + foo2(a);
	}
}
aa;a2;
[Imperative]
{
    aa = 0;
	a2 = [Associative]
	{
	    a1 = [Imperative]
		{
		    x = { 1, 2};
			add = 0;
			for ( i in x )
			{
			    ax = A.A(i); 
                add = add + ax.foo1(1) + ax.foo3(1);				
			}
			return = add;
		}
		a2 = A.A(3);
		return = a1 +a2.x;
	}
	if(a2 > 0 )
	{
	    x2 = A.A(2);
		aa = x2.foo3(2);
	}
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch875_T28_Class_Properties_Access()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class A
{ 
	public x : var ;	
	private y : var ;
	//protected z : var = 0 ;
	constructor A (i)
	{
		x = i;
        y = i;		
	}
 
	private def foo2 (a)
	{
	    x = a;
		y = a + 1;
		return = x + y;
	}	
	public def foo3 (a)
	{
	    x = a;
		return = x + foo2(a);
	}
}
class B
{ 
	public x : var ;	
	public y : A ;
	//protected z : var = 0 ;
	constructor B (i)
	{
		x = i;
        y = A.A(i);		
	}
 
	public def foo3 (a)
	{
	    x = a;
		y = A.A(a);
		return = x + y.x;
	}	
	
}
def foo (a1 : A, b1 :B )
{
    x = a1.x + b1.x;
	//y = a1.foo3(1) + b1.foo3(1);
	return = x ;//+ y;
}
v1 = [Imperative]
{
    def foo (a1 : A, b1 :B )
	{
		x = a1.x + b1.x;
		y = a1.foo3(1) + b1.foo3(1);
		return = x + y;
	}
    a1 = A.A(1);
	b1 = B.B(1);
	
	f1 = foo(a1,b1);
	x = { 1, 2 };
	add = 0;
	for ( i in x )
	{
	    ax = A.A(i); 
        bx = B.B(i);
		add = add + foo(ax, bx);				
	}
	if(add > 0 )
	{
	    add = add + foo(a1,b1);		
	}
	return = add;
}
a2 = A.A(2);
b2 = B.B(2);
f2 = foo(a2,b2);
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch876_T29_Class_Method_Chaining()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class A
{ 
	x : int[];	
	
	constructor A ( i :int[])
	{
		x = i;
       	
	}
 
	public def foo ()
	{
	    return = x;
	}
}
class B
{ 
	public x : A ;	
	
	constructor B (i:A)
	{
		x = i;
       
	}
 
	public def foo ()
	{
	    return = x;
	}	
	
}
x = { 1, 2, 3 };
y = { 4, 5, 6 };
a1 = A.A(x);
a2 = A.A(y);
b1 = B.B({a1,a2});
t1 = b1[0].x.x[1];
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch877_T30_Class_Property_Update_Negative()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class A
{ 
	x : int[];		
	constructor A ( i :int[])
	{
		x = i;       	
	} 
	public def foo ()
	{
	    x = true;
		return = x;
	}
}
x = { 1, 2, 3 };
a1 = A.A(x);
x1 = a1.x;
x2 = a1.foo();
x3 = 3;
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch878_T31_Class_By_Composition()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class Point
{
    X : double;
	Y : double;
	Z : double;
	
	constructor ByCoordinates( x : double, y : double, z : double )
	{
	    X = x;
		Y = y;
		Z = z;		
	}
}
class Line
{
    P1 : Point;
	P2 : Point;
	
	constructor ByStartPointEndPoint( p1 : Point, p2 : Point )
	{
	    P1 = p1;
		P2 = p2;
	}
	
	def PointAtParameter (p : double )
	{
	
	    t1 = P1.X + ( p * (P2.X - P1.X) );
		//t2 = 
		return = Point.ByCoordinates( t1, P1.Y, P1.Z);
	    
	}
	
}
class MyLineByComposition 
{
	BaseLine : Line; // line property
	MidPoint : Point; // midPoint property
	
	public constructor ByPoints(start : Point, end : Point)
	{
		BaseLine = Line.ByStartPointEndPoint(start, end);
		MidPoint = BaseLine.PointAtParameter(0.5);
	}
}
p1 = Point.ByCoordinates( 5.0, 0.0, 0.0 );
p2 = Point.ByCoordinates( 10.0, 0.0, 0.0 );
myLineInstance = MyLineByComposition.ByPoints(p1, p2);
testP = myLineInstance.MidPoint;
x1 = testP.X;
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch879_T32_Class_ReDeclaration()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class Point
{
    X : double;
	Y : double;
	Z : double;
	
	constructor ByCoordinates( x : double, y : double, z : double )
	{
	    X = x;
		Y = y;
		Z = z;		
	}
}
class Line
{
    P1 : Point;
	P2 : Point;
	
	constructor ByStartPointEndPoint( p1 : Point, p2 : Point )
	{
	    P1 = p1;
		P2 = p2;
	}
	
	def PointAtParameter (p : double )
	{
	
	    t1 = P1.X + ( p * (P2.X - P1.X) );
		//t2 = 
		return = Point.ByCoordinates( t1, P1.Y, P1.Z);
	    
	}
	
}
class Point
{
    X : double;
	
	
	constructor ByCoordinates( x : double )
	{
	    X = x;
			
	}
}
class MyLineByComposition 
{
	BaseLine : Line; // line property
	MidPoint : Point; // midPoint property
	
	public constructor ByPoints(start : Point, end : Point)
	{
		BaseLine = Line.ByStartPointEndPoint(start, end);
		MidPoint = BaseLine.PointAtParameter(0.5);
	}
}
p1 = Point.ByCoordinates( 5.0, 0.0, 0.0 );
p2 = Point.ByCoordinates( 10.0, 0.0, 0.0 );
myLineInstance = MyLineByComposition.ByPoints(p1, p2);
testP = myLineInstance.MidPoint;
x1 = testP.X;
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch880_T33_Class_Methods()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class Point
{
    X : double;
	Y : double;
	Z : double;
	
	constructor ByCoordinates( x : double, y : double, z : double )
	{
	    X = x;
		Y = y;
		Z = z;		
	}
	
	def addP1( x : int )
	{
	    X = x;
		return = X;
		
	}
	
	def addP2( x : int )
	{
	    W = x;
		return  = W;
		
	}
}
p1 = Point.ByCoordinates( 5.0, 0.0, 0.0 );
x1 = p1.X;
x2 = p1.x;
x3 = p1.addP1(1);
x4 = p1.addP2(1);
x5 = p1.W;
x6 = p1.X;
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch881_T34_Class_Static_Methods()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class Point
{
    static X : double;
	Y : double;
	constructor ByCoordinates( x : double, y: double )
	{
	    X = x;
		Y = y;
			
	}
	
	static def add1( )
	{
	    X = X + 1;
		Y = Y + 1;
		return = X + Y;
		
	}
	
	def add2( )
	{
	    X = X + 1;
		Y = Y + 1;
		return = X + Y;		
	}
}
p1 = Point.ByCoordinates( 5.0, 0.0);
x1 = p1.X;
x2 = p1.Y;
x3 = p1.add1();
x4 = p1.add2();
x5 = 1;
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch882_T35_Class_Method_Overloading()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class Point
{
    X : double;
	Y : double;
	constructor ByCoordinates( x : double, y: double )
	{
	    X = x;
		Y = y;
			
	}
	
	def add1( )
	{
	    X = X + 1;
		Y = Y + 1;
		return = X + Y;
		
	}
	
}
class Point2 extends Point
{
    a : double;
	b : double;
	constructor ByCoordinates( x : double, y: double )
	{
	    X = x;
		Y = y;
		a = X;
		b = Y;			
	}
	
	def add1( )
	{	    
		return = X + Y;		
	}
	
}
p1 = Point.ByCoordinates( 5.0, 10.0);
p2 = Point2.ByCoordinates( 15.0, 20.0);
a1 = p1.add1();
a2 = p2.add1();
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch883_T36_Class_Method_Calling_Constructor()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class Point
{
    X : double;
	Y : double;
	constructor ByCoordinates( x : double, y: double )
	{
	    X = x;
		Y = y;
			
	}
	
	def create( )
	{
	    X = X + 1;
		Y = Y + 1;
		return = Point.ByCoordinates( X, Y );
		
	}
	
}
class Point2 extends Point
{
    a : double;
	b : double;
	constructor ByCoordinates( x : double, y: double )
	{
	    X = x;
		Y = y;
		a = X;
		b = Y;			
	}
	
	def create( )
	{
	    X = X + X;
		b = b + b;
		return = Point2.ByCoordinates( X, b );
		
	}
	
}
p1 = Point.ByCoordinates( 5.0, 10.0);
p2 = Point2.ByCoordinates( 15.0, 20.0);
a1 = p1.create();
a2 = a1.X;
a3 = a1.Y;
b1 = p2.create();
b2 = b1.X;
b3 = b1.Y;
b4 = b1.a;
b5 = b1.b;
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch884_T37_Class_Method_Using_This()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class Point
{
    X : double;
	Y : double;
	constructor ByCoordinates( x : double, y: double )
	{
	    X = x;
		Y = y;
			
	}
	
	def add(this : Point, d : double )
	{
	  	this.X = this.X + d;
		this.Y = this.Y + d;
		return = this.X + this.Y;
		
	}
	
}
p1 = Point.ByCoordinates( 5.0, 10.0);
a1 = p1.add(4.0);
a2 = p1.X;
a3 = p1.Y;
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch885_T38_Class_Method_Using_This()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class Point
{
    X : double;
	Y : double;
	constructor ByCoordinates( x : double, y: double )
	{
	    X = x;
		Y = y;
			
	}
	
	def add( d : double )
	{
	  	this.X = this.X + d;
		this.Y = this.Y + d;
		return = this.X + this.Y;
		
	}
	
}
p1 = Point.ByCoordinates( 5.0, 10.0);
a1 = p1.add(4.0);
a2 = p1.X;
a3 = p1.Y;
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch886_T39_Class_Method_Returning_Collection()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class Point
{
    X : double;
	Y : double;
	constructor ByCoordinates( x : double, y: double )
	{
	    X = x;
		Y = y;
			
	}
	
	def add( d : double )
	{
	  	return = { X+d, Y+d };
		
	}
	
}
p1 = Point.ByCoordinates( 5.0, 10.0);
a1 = p1.add(4.0);
a2 = a1[0];
a3 = a1[1];
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch887_T40_Class_Property_Initialization_With_Another_Class()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class Point
{
    X : double;
		
	public constructor ByCoordinates( xValue : double  )
    {
		X = xValue; 			
	}
}
class MyPoint 
{
	inner  : Point = Point.ByCoordinates(3);	
}
p1 = MyPoint.MyPoint();
t1 = p1.inner.X;
	
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch888_T41_Test_Static_Properties()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class A
{
    static x:int;
}
a = A.A();
a.x = 3;
A.x = 3;
t1 = a.x;
t2 = A.x;
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch889_T41_Test_Static_Properties_2()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class A
{
    static x:int = 3;
	
}
a = A.A();
b = [Imperative]
{
	a.x = 4;
	A.x = 4;
	t1 = a.x;
	t2 = A.x;
	return = { t1, t2 };
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch890_T42_Defect_1461717()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class A
{
    a : var;
	constructor A ()
	{
	    a = 1;
	}
}
class B extends A
{
    b : var;
	constructor B ()
	{
	    b = 1;
	}
}
A = B.B();
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch891_T43_Defect_1461479()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class A
{
    static x:int=1;	
}
x2 = A.x;
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch892_T43_Defect_1461479_2()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class A
{ 
	static x1 : int;
	constructor A () 
	{	
		x1 = 5;
	}
}
a = A.A();
t1 = a.x1;
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch893_T43_Defect_1461479_3()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class A
{
    static x:int=1;	
	def foo1 ()
	{
	    x = 6;
		return = x;
	}
}
class B extends A
{
    static y:int=1;
    constructor B ( )
    {
	    y = 4;
    } 
    def foo2 ()
	{
	    x = 7;
		y = 8;
		return = { x, y } ;
	}	
}
x2 = A.x;
x3 = B.B();
t1 = x3.y;
t2 = x3.x;
x3.y = 2;
x3.x = 3;
t3 = x3.y;
t4 = x3.x;
t5 = x3.foo1();
t6 = x3.foo2();
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch894_T43_Defect_1461479_4()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class A
{
    static x:int=1;
    def foo ()
    {
	    x = 4;
		return = x;
    }	
	
}
def foo2( a : int)
{
    A.x = 3;
	x = A.x + a;
	return = x;
}
b = foo2( 1 ) ;
a = A.A();
c = a.x;
d = a.foo();
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch895_T44_Defect_1461860()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class A
{
    static x:int = 3;
	
}
b;
[Imperative]
{
	a = A.A();
	b = [Associative]
	{
	    a.x = 4;
		return = a.x;
	}
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch896_T44_Defect_1461860_2()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class A
{
    static x:int = 3;
	
}
a1 = A.A();
a2 = A.A();
y = [Imperative]
{
	x = { a1, a2 };
	count = 0;
	
	for ( i in x )
	{
	    i.x = count;
        count = count + 1;		
	}
	
	return = x;
}
c = y.x;
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch897_T45_Defect_1461479()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class A
{
	x : int = 2;
	def foo : int()
	{
		return = 2;
	}
}
a = A.foo(); //access non-static function, expected: a = null; actual: crash
b = A.x;
//A.x = 3;
//c = 4;
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch898_T46_Defect_1461716()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class A
{
    a : int;	
	constructor A ()
	{
	    a = 1;
	}	
}
a1 = A.A();
b1 = a1.A();
c1 = b1.a;";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch899_T46_Defect_1461716_2()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class A
{
    a : int;	
	constructor A ()
	{
	    a = 1;
	}	
}
def foo ( )
{
    a1 = A.A();
	b1 = a1.A();
	c1 = b1.a;
	return = { b1, c1 };
}
x = foo ();
b1;c1;
[Imperative]
{
	a1 = A.A();
	b1 = a1.A();
	c1 = b1.a;
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch900_T47_Calling_Imperative_Code_From_Conctructor()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class A
{
	a : int;
	
	constructor A( i:int )
	{
		[Imperative]
		{
		    a = i;
		}
	}
	
}
A1 = A.A( 1 );
a1 = A1.a;";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch901_T48_Defect_1460027()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class A
{
	a : int[][];
	
	constructor create(i:int)
	{
		
				a = { { 1,2,3 } , { 4,5,6 } };
	//a=1;
	
	}
	
}
A1 = A.create(1);
a1 = A1.a;
b1=a1[1][0];";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch902_T48_Defect_1460027_2()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class A
{
	a : var[]..[];
	
	constructor create(i:int)
	{
		
				a = { { 1,2,3 } , { 4,5,6 } };
	
	}
	
}
A1 = A.create(1);
a1 = A1.a;
b1=a1[1][0];
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch903_T48_Defect_1460027_3()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class A
{
	a : var[]..[];
	
	constructor create()
	{
		
				a = { { 1,2,3 } , { 4,5,6 } };
	
	}
	
}
	test1 = A.create();
	
	a1 = test1.a;
	test1.a[0] = { 4,5,6 };
	b = test1.a[0];
	c = test1.a[0][0];";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }
        /*
[Test]
        [Category("WatchFx Tests")]
        public void DebugWatch904_T48_Defect_1460027_4()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
                string src = @"class A
        {
            a : var[]..[];
	
            constructor create()
            {
		
                        a = { { 1,2,3 } , { 4,5,6 } };
	
            }
            def foo ( x )
            {
                a[1][2] = x;
                return = a;
            }
        }
	
            test1 = A.create();
            a1 = test1.a;
            b = test1.foo( a1[0][1] );
	
        ";
        WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }*/

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch905_T49_Defect_1460505()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class Parent
{
A : var;
B : var;
C : var;
constructor Create( x:int, y:int, z:int )
{
A = x;	
B = y;
C = z;
}
}
class Child extends Parent
{
constructor Create( x:int, y:int, z:int )
{
A = x;	
B = y;
C = z;
}
}
def modify(oldPoint : Parent)
{
return=true;
}
oldPoint = Parent.Create( 1, 2, 3 );
derivedpoint = Child.Create( 7,8,9 );
basePoint = modify( oldPoint );
derivedPoint2 = modify( derivedpoint );";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch906_T49_Defect_1460505_2()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class Parent
{
A : var;
B : var;
C : var;
constructor Create( x:int, y:int, z:int )
{
A = x;	
B = y;
C = z;
}
}
class Child extends Parent
{
constructor Create( x:int, y:int, z:int )
{
A = x;	
B = y;
C = z;
}
}
def modify(oldPoint : Child)
{
return=true;
}
oldPoint = Parent.Create( 1, 2, 3 );
derivedpoint = Child.Create( 7,8,9 );
basePoint = modify( oldPoint );
derivedPoint2 = modify( derivedpoint );";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch907_T50_Defect_1460510()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class TestPoint
{
            A : var;
                                
       constructor Create()
        {
	    A = 10; 
        }
	
}
class derived extends TestPoint
{
	    A : var;
     constructor Create()
        {
	    A = 20; 
     }
	def Modify()
		
	{
	   A = A +1;
	    return=true;
	}   
}
	oldPoint = TestPoint.Create();
    derivedpoint=derived.Create();
	derivedPoint2 = derivedpoint.Modify();
	xPoint1 = oldPoint.A;
    xPoint2 = derivedpoint.A;";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch908_T50_Defect_1460510_2()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class Base
{
	A : int;
	constructor Create()
	{
		A = 5;
	}
}
class Derived extends Base
{
	A : var;
	constructor Create1()
	{
		A = 10;
	}
}
	def Modify( object : Base )
	{
		object.A = object.A + 1;
		return = object.A;
	}
	B = Base.Create();
	D = Derived.Create1();
	a = Modify( B );
	";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch909_T51_Defect_1461399()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class Arc
{
constructor Arc()
{
}
def get_StartPoint()
{
	return = 1;
}
}
def CurveProperties(curve : Arc)
{
 return = {
	curve.get_StartPoint(),
	curve.get_StartPoint(),
	curve.get_StartPoint()
	
 };
}
test = CurveProperties(null);";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch910_T51_Defect_1461399_2()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class Arc
{
    constructor Arc()
    {
        
    }
    def get_StartPoint()
    {
        return = 1;
    }
    
    
    def CurveProperties(curve : Arc)
    {
        
        return =
        {
            curve.get_StartPoint(),
            curve.get_StartPoint(),
            curve.get_StartPoint()
        };
        
    }
} 
   
	Arc1 = Arc.Arc();
	test = Arc1.CurveProperties(null);";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch911_T51_Defect_1461399_3()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class Arc
{
    constructor Arc()
    {
        
    }
    def get_StartPoint()
    {
        return = 1;
    }
    
    
    def CurveProperties(curve : Arc)
    {
        
        return =
        {
            curve.get_StartPoint(),
            curve.get_StartPoint(),
            curve.get_StartPoint()
        };
        
    }
} 
test;
[Imperative]
{   
	Arc1 = Arc.Arc();
	test = Arc1.CurveProperties(null);
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch912_T52_Defect_1461479()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class A
{
	x : int = 2;
	
	def foo : int()
	{
		return = 2;
	}
}
a = A.foo(); 
b = A.x;";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch913_T52_Defect_1461479_2()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class Sample
{
	a : var = 2;
	
	static def ret_a ()
	{
		return = a;
	}
}
test1 = Sample.ret_a(); 
test2 = Sample.a;";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch914_T52_Defect_1461479_3()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class Sample
{
	static a : var;
	constructor Sample()
	{
		a = 3;
	}
	
	static def ret_a ( b )
	{
		a = b;
		return = a;
	}
}
	Sample1 = Sample.Sample();
	
	test1 = Sample1.ret_a( 2 ); 
	test2 = Sample1.a;";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch915_T52_Defect_1461479_4()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class Sample
{
	a : var = 2;
	
	def ret_a ()
	{
		return = B.a;
	}
	
}
class B
{
   a : int;
}
test1;test2;test5;
[Imperative]
{
	S = Sample.Sample();
	test1 = Sample.ret_a();
	test2 = Sample.a;
	test5 = S.ret_a();
}
S2 = Sample.Sample();
test3 = Sample.ret_a();
test4 = Sample.a;
test6 = S2.ret_a();";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch916_T52_Defect_1461479_5()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class Sample
{
	a : var = 2;
	
	def ret_a ()
	{
		return = a;
	}
}
test3 = Sample.ret_a();
test4 = Sample.a;
def fun1 ()
{
    return = { Sample.ret_a(), Sample.a };
}
def fun2 ()
{
    return = [Imperative]
	{
	    return = { Sample.ret_a(), Sample.a };
	}
}
test5 = fun1();
test6 = fun2();
test1;test2;test7;test8;
[Imperative]
{
	test1 = Sample.ret_a();
	test2 = Sample.a;
	test7 = fun1();
    test8 = fun2();
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch917_T53_Undefined_Class_As_Parameter()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class Parent
{
	A : var;
	B : var;
	C : var;
	constructor Create( x:int, y:int, z:int )
	{
		A = x;	
		B = y;
		C = z;
	}
}
class Child extends Parent
{
	constructor Create( x:int, y:int, z:int )
	{
		A = x;	
		B = y;
		C = z;
	}
}
def modify(oldPoint1 : TestPoint)
{
    oldPoint1.A = oldPoint1.A +1;
	oldPoint1.B = oldPoint1.B +1;
	oldPoint1.C = oldPoint1.C +1;
	return=true;
}
oldPoint = Parent.Create( 1, 2, 3 );
derivedpoint = Child.Create( 7,8,9 );
basePoint = modify( oldPoint );
derivedPoint2 = modify( derivedpoint );
x1 = oldPoint.A;
x2 = derivedpoint.B;
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch918_T53_Undefined_Class_As_Parameter_1463738()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class Parent
{
A : var;
B : var;
C : var;
constructor Create( x:int, y:int, z:int )
{
A = x;
B = y;
C = z;
}
}
class Child extends Parent
{
constructor Create( x:int, y:int, z:int )
{
A = x;
B = y;
C = z;
}
}
def modify(oldPoint : TestPoint)
{
oldPoint.A = oldPoint.A +1;
oldPoint.B = oldPoint.B +1;
oldPoint.C = oldPoint.C +1;
return=true;
}
oldPoint = Parent.Create( 1, 2, 3 );
derivedpoint = Child.Create( 7,8,9 );
basePoint = modify( oldPoint );
derivedPoint2 = modify( derivedpoint );
x1=oldPoint.A;
x2=derivedpoint.B; ";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch919_T53_Undefined_Class_As_Parameter_1463738_2()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class Parent
{
A : var;
B : var;
C : var;
constructor Create( x:int, y:int, z:int )
{
A = x;
B = y;
C = z;
}
}
class Child extends Parent
{
constructor Create( x:int, y:int, z:int )
{
A = x;
B = y;
C = z;
}
}
def modify(oldPoint : TestPoint[]) // array of class as argumment and class is not defined
{
oldPoint.A = oldPoint.A +1;
oldPoint.B = oldPoint.B +1;
oldPoint.C = oldPoint.C +1;
return=true;
}
oldPoint = Parent.Create( 1, 2, 3 );
derivedpoint = Child.Create( 7,8,9 );
basePoint = modify( oldPoint );
derivedPoint2 = modify( derivedpoint );
x1 = oldPoint.A;
x2 = derivedpoint.B;
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch920_T53_Undefined_Class_As_Parameter_1463738_3()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class Parent
{
A : var;
B : var;
C : var;
constructor Create( x:int, y:int, z:int )
{
A = x;
B = y;
C = z;
}
}
class Child extends Parent
{
constructor Create( x:int, y:int, z:int )
{
A = x;
B = y;
C = z;
}
}
def modify(tmp : Child) // definition with inherited class
{
tmp.A = tmp.A +1;
tmp.B = tmp.B +1;
tmp.C = tmp.C +1;
return=true;
}
oldPoint = Parent.Create( 1, 2, 3 );
derivedpoint = Child.Create( 7,8,9 );
test1 = modify( oldPoint ); // call function with object of parent class
test2 = modify( derivedpoint );
x1 = oldPoint.A;
x2 = derivedpoint.B;";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch921_T53_Undefined_Class_As_Parameter_1463738_4()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class Parent
{
A : var;
B : var;
C : var;
constructor Create( x:int, y:int, z:int )
{
A = x;
B = y;
C = z;
}
}
class Child extends Parent
{
constructor Create( x:int, y:int, z:int )
{
A = x;
B = y;
C = z;
}
}
def modify(oldPoint : Parent)
{
oldPoint.A = oldPoint.A +1;
oldPoint.B = oldPoint.B +1;
oldPoint.C = oldPoint.C +1;
return=true;
}
oldPoint = Parent.Create( 1, 2, 3 );
derivedpoint = Child.Create( 7,8,9 );
basePoint = modify( oldPoint );
derivedPoint2 = modify( derivedpoint );
x1 = oldPoint.A;
x2 = derivedpoint.B;
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch922_T53_Undefined_Class_As_Parameter_1463738_5()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class Parent
{
A : var;
B : var;
C : var;
constructor Create( x:int, y:int, z:int )
{
A = x;
B = y;
C = z;
}
}
class Child extends Parent
{
constructor Create( x:int, y:int, z:int )
{
A = x;
B = y;
C = z;
}
}
def modify(oldPoint : var)
{
oldPoint.A = oldPoint.A +1;
oldPoint.B = oldPoint.B +1;
oldPoint.C = oldPoint.C +1;
return=true;
}
oldPoint = Parent.Create( 1, 2, 3 );
//derivedpoint = Child.Create( 7,8,9 );
basePoint = modify( oldPoint );
//derivedPoint2 = modify( derivedpoint );
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch923_T53_Undefined_Class_As_Parameter_1463738_6()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class Parent
{
A : var;
B : var;
C : var;
constructor Create( x:int, y:int, z:int )
{
A = x;
B = y;
C = z;
}
}
class Child extends Parent
{
constructor Create( x:int, y:int, z:int )
{
A = x;
B = y;
C = z;
}
}
def modify(oldPoint1 : Parent) // two different function in one of them has a known class type as argument 
{
oldPoint1.A = oldPoint1.A +1;
oldPoint1.B = oldPoint1.B +1;
oldPoint1.C = oldPoint1.C +1;
return=true;
}
def modify(oldPoint1 : TestPoint)
{
oldPoint1.A = oldPoint1.A +1;
oldPoint1.B = oldPoint1.B +1;
oldPoint1.C = oldPoint1.C +1;
return=true;
}
oldPoint = Parent.Create( 1, 2, 3 );
derivedpoint = Child.Create( 7,8,9 );
basePoint = modify( oldPoint );
derivedPoint2 = modify( derivedpoint );
x1 = oldPoint.A; 
x2 = derivedpoint.B; 
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch924_T53_Undefined_Class_As_Parameter_1463738_7()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class Parent
{
A : var;
B : var;
C : var;
constructor Create( x:int, y:int, z:int )
{
A = x;
B = y;
C = z;
}
}
class Child extends Parent
{
constructor Create( x:int, y:int, z:int )
{
A = x;
B = y;
C = z;
}
}
def modify(oldPoint1 : Parent) // two different function in one of them has a known class type as argument 
{
oldPoint1.A = oldPoint1.A +1;
oldPoint1.B = oldPoint1.B +1;
oldPoint1.C = oldPoint1.C +1;
return=true;
}
[Imperative]
{
 def modify:void()
{
oldPoint1.A = oldPoint1.A +1;
oldPoint1.B = oldPoint1.B +1;
oldPoint1.C = oldPoint1.C +1;
}
oldPoint = Parent.Create( 1, 2, 3 );
derivedpoint = Child.Create( 7,8,9 );
basePoint = modify( oldPoint );
derivedPoint2 = modify( derivedpoint );
x1 = oldPoint.A; // expected 1, received : 2
x2 = derivedpoint.B; // expected 8; received : 9
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch925_T53_Undefined_Class_As_Parameter_1463738_8()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class Parent
{
A : var;
B : var;
C : var;
constructor Create( x:int, y:int, z:int )
{
A = x;
B = y;
C = z;
}
}
class Child extends Parent
{
constructor Create( x:int, y:int, z:int )
{
A = x;
B = y;
C = z;
}
}
def modify(a:int,oldPoint1 : Parent) // two different function in one of them has a known class type as argument 
{
oldPoint1.A = oldPoint1.A +1;
oldPoint1.B = oldPoint1.B +1;
oldPoint1.C = oldPoint1.C +1;
return=true;
}
def modify(a:int,oldPoint1 : TestPoint)
{
oldPoint1.A = oldPoint1.A +1;
oldPoint1.B = oldPoint1.B +1;
oldPoint1.C = oldPoint1.C +1;
return =a ;
}
oldPoint = Parent.Create( 1, 2, 3 );
derivedpoint = Child.Create( 7,8,9 );
basePoint = modify(1, oldPoint );
derivedPoint2 = modify(1, derivedpoint );
x1 = oldPoint.A; 
x2 = derivedpoint.B; 
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch926_T53_Undefined_Class_As_Parameter_imperative_1463738_9()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class Parent
{
A : var;
B : var;
C : var;
constructor Create( x:int, y:int, z:int )
{
A = x;
B = y;
C = z;
}
}
class Child extends Parent
{
constructor Create( x:int, y:int, z:int )
{
A = x;
B = y;
C = z;
}
}
x1;x2;
[Imperative] // in imperative , object type not defined 
{
def modify(a:int,oldPoint1 : TestPoint)
{
oldPoint1.A = oldPoint1.A +1;
oldPoint1.B = oldPoint1.B +1;
oldPoint1.C = oldPoint1.C +1;
return =a ;
}
oldPoint = Parent.Create( 1, 2, 3 );
derivedpoint = Child.Create( 7,8,9 );
basePoint = modify(1, oldPoint );
derivedPoint2 = modify(1, derivedpoint );
x1 = oldPoint.A; 
x2 = derivedpoint.B;
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch927_T53_Undefined_Class_negative_1467107_10()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"def foo(x:int)
{
return = x + 1;
}
//y1 = test.foo(2);
m=null;
y2 = m.foo(2);
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch928_T53_Undefined_Class_negative_associative_1467091_13()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"def foo ( x : int)
{
return = x + 1;
}
y = test.foo (1);
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch929_T53_Undefined_Class_negative_imperative_1467091_12()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"y;
[Imperative]
{
	def foo ( x : int)
	{
		return = x + 1;
	}
	y = test.foo (1);
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch930_T53_Undefined_Class_negative_imperative_1467107_11()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"y2;
[Imperative]
{
	def foo(x:int)
	{
		return = x + 1;
	}
	//y1 = test.foo(2);
	m=null;
	y2 = m.foo(2);
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch931_T54_Defect_1458562()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class A
{ 
	static x1 : int;
	constructor A () 
	{	
		x1 = 5;
	}
}
a = A.A();
t1 = a.x1;";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch932_T55_Defect_1460616()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class A
{ 
	x : var ;
	constructor A ()
	{
		      	
	}	
}
class B extends A
{
	constructor B()
	{
	    x=this.B();
	}
}
class C
{ 
	x : var ;
	
	
	constructor C ()
	{
		  x = this.C();
	}
        constructor C_1 ()
	{
		  x = this.C_1();
	}
}
a1 = B.B();
x1 = a1.x;
a2 = C.C();
x2 = a2.x;
a3 = C.C_1();
x3 = a3.x;
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch933_T55_Defect_1460616_2()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class C
{ 
	x : var ;
	
    constructor C_1 ()
	{
		  x = C_1();
	}
}
a3 = C.C_1();
x3 = a3.x;
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch934_T56_Local_Class_method_Same_Name_As_Global_Function()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"def dong()
{
    return = A.A();
}
class A
{
    def foo()
    {
        return = 100;
    }
}
class B
{
    def foo()
    {
        return = 1000;
    }
    def ding()
    {
        a = dong();
        return = a.foo();
    }
}
b = B.B();
x = b.ding();  // expect 100 but got 1000
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch935_T57_Defect_1463742()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class Sample
{
	a : var = 2;
	
	def ret_a ()
	{
		return = a;
	}
}
test3 = Sample.ret_a();
test4 = Sample.a;
[Imperative]
{
	test1 = Sample.ret_a();
	test2 = Sample.a;
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch936_T58_Defect_1462445()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class A
            {
                   b : int;
                   static z : int;
                   def foo(a : int)
                   {
                          b = 1;
                          return = a;
                   }
                   static def foo(a : int[])
                   {
                          z = 2;
                          return = 9;
                   }
            }
            x = A.A();
            c = {1,2,3,4};
            d = A.foo(c);  // expected : 9
            y = x.b; 
            v = x.z; // expected : 2
            w = A.z; // expected : 2
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch937_T58_Defect_1462445_2()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class A
{
    b : int;
    static z : var;
    def foo(a : int[])
    {    
	    b = 1;
        return = a;
    }
    static def foo(a : int[])
    {
        z = a;
        return = 9;
    }
}
x = A.A();
c = {1,2,3.5,4};
d = A.foo(c);  // expected : 9
y = x.b; // expected { 1, 2, 3.5, 4}
          
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch938_T59_Defect_1466572()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class Point
{
    X : var;
	Y: var;
	Z: var;
	constructor Point ( x, y, z )
	{
	    X = x;
		Y = y;
		Z = z;
	}
}
x1 = 1;
p1 = Point.Point ( -x1, x1, -x1 );
xx = p1.X;// expected -1, received 1
yy = p1.Y;// expected 1, received 1
zz = p1.Z;// expected -1, received -1
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch939_T59_Defect_1466572_2()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class Point
{
    X : var;
	Y: var;
	Z: var;
	constructor Point ( x, y, z )
	{
	    X = x;
		Y = y;
		Z = z;
	}
}
x1 = 1;
x2 = -x1;
p1 = Point.Point ( -x1, -(x1+x2), -x1*x2 );
xx = p1.X;
yy = p1.Y;
zz = p1.Z;
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch940_T59_Defect_1466572_3()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class Point
{
    X : var;
	Y: var;
	Z: var;
	constructor Point ( x, y, z )
	{
	    X = x;
		Y = y;
		Z = z;
	}
}
x1 = 1;
x2 = -x1;
p1 = Point.Point ( -x1, -(x1+x2), -x1*x2 );
xx = p1.X;
yy = p1.Y;
zz = p1.Z;
def foo ( a : double, b:double, c:double)
{
    return = a + b + c;
}
p2 = foo ( -x1, -(x1+x2), -x1*x2+0.5 );
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch941_T60_Defect_1467004()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class TestDefect
{
        def foo(val : double)
        {
                return = val;
        }
        def foo(arr : double[])
        {
                return = -123;
        }        
}
test = TestDefect.TestDefect();
arr = 5..25;
s = test.foo(arr); //Expected output should be -123
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch942_T61_Defect_1459171()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class Point{
X : double;
Y : double;
constructor ByCoordinates( x : double, y: double )
{
X = x;
Y = y;
}
def create( )
{
return = Point.ByCoordinates( X, Y );
}
 }
p1 = Point.ByCoordinates( 5.0, 10.0);
b1 = p1.X;
b2 = p1.Y;
a1 = p1.create();
a2 = a1.X;
a3 = a1.Y;
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch943_T62_class_assignment_inside_imperative()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class point{
constructor point(x:double)
{
a = 1;
}
} 
class polygon{
constructor polygon(pt:point[])
{
poly= pt;
}
} 
pt0=point.point(1.0);
pt1=point.point(2.0);
pt2=point.point(3.0);
pt3=point.point(4.0);
pt4=point.point(5.0);
pt5=point.point(6.0);
pt6=point.point(7.0);
pt7=point.point(8.0);
pt8=point.point(9.0);
facesIndices = {{0,1,5,4},{1,2,6,5}};
pointGroup = {pt0,pt1,pt2,pt3,pt4,pt5,pt6,pt7,pt8};
z=[Imperative]
{
def buildarray(test:int[],collect:point[])
{
b= { } ;//=> Issue 2 : if we use a predetermined sized array like { 0,0,0,0} here instead, then this function returns the correct value instead of null
j=0;
for (k in test)
{
b[j] = collect[k];
j=j+1;
}
return =b;
}
controlPoly={};
for (i in 0..1)
{
c={0,1,5,4};
c=facesIndices[i];
a=buildarray(c,pointGroup);
controlPoly[i] = polygon.polygon(a);
}
return=controlPoly;
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch944_T62_Class_Assignment_inside_imperative_1465637()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class A
{
X:var;
Y:var;
Count1 :int;
constructor A ( i : int )
	{
	X = 0..i;
	[Imperative]
	{
		Y = {0,0,0,0,0};
		Count1 = 0; 
		for ( i in X ) {
			Y[Count1] = i * -1;
			Count1 = Count1 + 1;
		}
	}
}
}
p = 4;
a = A.A(p);
b1 = a.X;
 // expected { 0, 1, 2, 3, 4 }
b2 = a.Y;
 // expected {0,-1,-2,-3,-4}
b3 = a.Count1;
//received : //watch:
 b1 = {0,-1,-2,-3,-4};//watch: 
b2 = {0,0,0,0,0};
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch945_T63_Class_methodresolution_1457172()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class A
{
a : var;
b : var;
constructor A( a1:int[], a2:int[])
{
a = a1;
b = a2;
}
def foo :int[]..[]( a : int[], b:int[])
{
y = [Imperative]
{
x = { { 0,0,0 }, {0,0,0} , {0,0,0} };
c1 = 0;
for ( i in a)
{
c2 = 0;
for ( j in b )
{
x[c1][c2] = i + j ;
c2 = c2+ 1;
}
c1 = c1 + 1;
}
return = x;
}
return = y;
}
}
a = { 0, 1, 2 };
b = { 3, 4, 5 };
x = A.A( a, b);
y = x.foo ();
p1 = y[0][0];
p2 = y[0][0];
p3 = y[0][2];
p4 = y[1][0];
p5 = y[1][1];
p6 = y[1][2];
p7 = y[2][0];
p8 = y[2][1];
p8 = y[2][2];
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch946_T63_Class_methodresolution_1457172_2()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class A
{
a : var;
b : var;
c : var;
constructor A( a1:int[], a2:int[], a3:int[])
{
a = a1;
b = a2;
c = a3;
}
def foo :int[]..[]( a : int[], b:int[], c :int[])
{
y = [Imperative]
{
x = { { { 0, 0} , { 0, 0} }, { { 0, 0 }, { 0, 0} }};
c1 = 0;
for ( i in a)
{
c2 = 0;
for ( j in b )
{
c3 = 0;
for ( k in c )
{
x[c1][c2][c3] = i + j + k;
c3 = c3 + 1;
}
c2 = c2+ 1;
}
c1 = c1 + 1;
}
return = x;
}
return = y;
}
}
a = { 0, 1 };
b = { 2, 3};
c = { 4, 5 };
x = A.A( a, b , c);
y = x.foo ();
p1 = y[0][0][0];
p2 = y[0][0][1];
p3 = y[0][1][0];
p4 = y[0][1][1];
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch947_T63_Class_methodresolution_1457172_3()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class A
{
def foo :int( a : int)
{
return =1;
}
}
x = A.A( );
y = x.foo ();
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch948_T68_Inherit_Base_Constructor_1467153()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class PointA
{
        X : double;
        Y : double;
        Z : double;
        constructor ByCoordinates (x : double, y : double, z : double)
        {
                X = x;
                Y = y;
                Z = z;
        }
}
class Node extends PointA
{
        Fixity  : bool;
        constructor ByCoordinatesFixity (x : double, y : double, z : double, fixity : bool)
                : base.ByCoordinates (x, y, z)
        {
                Fixity = fixity;
        }
}
n = Node.ByCoordinatesFixity(1,2,3,false);
a=n.X;
b=n.Y;
c=n.Z;
d=n.Fixity;
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch949_T68_Inherit_Base_Constructor_1467153_negative()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class PointA
{
        X : double;
        Y : double;
        Z : double;
        constructor ByCoordinates (x : double, y : double, z : double)
        {
                X = x;
                Y = y;
                Z = z;
        }
}
class Node extends PointA
{
        Fixity  : bool;
        constructor ByCoordinatesFixity (x : double, y : double, z : double, fixity : bool)
                : base ByCoordinates (x, y, z)
        {
                Fixity = fixity;
        }
}
n = Node.ByCoordinatesFixity(1,2,3,false);
a=n.X;
b=n.Y;
c=n.Z;
d=n.Fixity;
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch950_T69_Redefine_property_inherited_1467141()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class A
{
	fx: int;
	constructor A(x:int)
	{
		fx = x;
	}
}
class B extends A
{
	fx : int;
	fy : int;
	constructor  B(y :int):base.A(x)
	{
		fy = y;
	}
}
a = A.A(1);
b = B.B(2);
r1 = a.fx;
r2 = a.fy;
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch951_T70_Defect_1467112_Method_Overloading_Issue()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class A
{ 
    public x : var ;    
    
    public def foo1 (a)
    {
      return = 1;
    } 
    
}
class B extends A
{
    public def foo1 (a)
    {
        return = 2;
    }  
        
        
}
b = B.B();
b1 = b.foo1(1);";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch952_T71_class_inherit_arg_var_1467157()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class Geometry
{
        def Clone : Geometry()
        {
                return = CreateNew(1);
        }
        def CreateNew : Geometry(a:var)
        { 
                return = null; 
        }
}
class Curve extends Geometry
{
}
class Arc extends Curve
{
        def CreateNew : Geometry(a:var)
        { 
                return = Arc.Arc(); 
        }
}
a=Arc.Arc();
b=a.CreateNew(1);
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch953_T72_class_inherit_1467097()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class Parent
{
	A : var;
	B : var;
	C : var;
constructor Create( x:int, y:int, z:int )
{
	A = x;
	B = y;
	C = z;
}
}
class Child extends Parent
{
	constructor Create( x:int, y:int, z:int )
	{
		A = x;
		B = y;
		C = z;
	}
}
def modify(oldPoint : var)
{
	
oldPoint.A = oldPoint.A +1;
	oldPoint.B = oldPoint.B +1;
	oldPoint.C = oldPoint.C +1;
	return=true;
}
oldPoint = Parent.Create( 1, 2, 3 );
t = modify( oldPoint );
a=oldPoint.A;
b=oldPoint.B;
c=oldPoint.C;
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch954_T72_class_inherit_1467097_2()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class Parent
{
	A : var;
	B : var;
	C : var;
constructor Create( x:int, y:int, z:int )
{
	A = x;
	B = y;
	C = z;
}
}
class Child extends Parent
{
	constructor Create( x:int, y:int, z:int )
	{
		
A = x;
		B = y;
		C = z;
	}
}
def modify(oldPoint : var)
{
	
oldPoint.A = oldPoint.A +1;
	oldPoint.B = oldPoint.B +1;
	oldPoint.C = oldPoint.C +1;
	return=true;
}
derivedpoint = Child.Create( 7,8,9 );
t = modify( derivedpoint );
a=derivedpoint.A;
b=derivedpoint.B;
c=derivedpoint.C;
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch955_T74_Defect_1469099_Access_Property()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class Point
{
    X:double;
    constructor ByCoordinates()
        { X=1234.5678; }
}
class brick
{
    cent:int;    ang:int;    
    constructor createBrick(point1: Point)
    {
        cent=brickCenter(point1); //constructor calling a function inside class
        ang=brickAngle(point1); //constructor calling a function inside class
    }
def brickAngle(point1: Point)
    { xx1 = true;    return = 0; }
def brickCenter(point1: Point)
    { xx2 = true;    return = 1;}
}
p1 = Point.ByCoordinates();
b1 = brick.createBrick(p1);
t1 = b1.cent;
t2 = b1.ang;";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch956_T74_Defect_1469099_Access_Property_2()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class Point
{
    X:double;
    constructor ByCoordinates()
        { X=1234.5678; }
}
class Point2
{
    X:double;
    constructor ByCoordinates()
        { X=1234.5678; }
}
class brick extends Point2
{
    cent:int;    ang:int;    
    constructor createBrick(point1: Point)
    {
        cent=brickCenter(point1); //constructor calling a function inside class
        ang=brickAngle(point1); //constructor calling a function inside class
    }
def brickAngle(point1: Point)
    { xx1 = true;    return = 0; }
def brickCenter(point1: Point)
    { xx2 = true;    return = 1;}
}
t1;t2;
[Imperative]
{
	p1 = Point.ByCoordinates();
	b1 = brick.createBrick(p1);
	t1 = b1.cent;
	t2 = b1.ang;
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch957_T75_Defect_1467188_Class_Instantiation()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class A
{
    X : var;   
    constructor A(xValue : double)
    {
        X = xValue;               
    }    
    public def foo  (other : A)
    {
        return = X * other.X ;
    }
}
C0 = A.A(1.0);
t = A.A(1);
tx = A.A(C0.X);
RX = tx.foo(t);
ty = A.A(C0.X);
RY = ty.foo(t);";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch958_T75_Defect_1467188_Class_Instantiation_2()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class B
{
    Y : var;   
    constructor B(yValue : double)
    {
        Y = yValue;               
    }    
    public def foo  (other : A)
    {
        return = Y  + other.X + other.Y;
    }
}
class A extends B
{
    X : var;   
    constructor A(xValue : double, yValue : double)
    {
        X = xValue; 
        Y = yValue;
    }  
    
}
a = A.A( 1.0, 2.0 );
t = A.A( 3, 4);
tx = A.A( a.X, a.Y );
RX = tx.foo( t );
ty = A.A( a.X, a.Y );
RY = ty.foo( t );";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch959_T76_Defect_1467186_Class_Update()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class A
{
        a : var;
    constructor A ( a1 : double)
    {
        a = a1;
    }
}
y = A.A( x);
a1 = y.a;
x = 3;
x = 5;";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch960_T77_Defect_1460274_Class_Update()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"b = 1;
a = b + 1;
b = a;";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch961_T77_Defect_1460274_Class_Update_2()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class Point
{
  X : var;
  constructor ByCartesianCoordinates( x : var)
  {
      X = x;
  }
  def Translate ( y : var )
  {
      return = Point.ByCartesianCoordinates( X + y ) ;
  }
}
pt2 = Point.ByCartesianCoordinates(1);
pt3 = Point.ByCartesianCoordinates(2);
pointGroup2 = {pt2,pt3};
pointGroup2[0] = {
                    pointGroup2[0].Translate(3) => t2;		    
		}
test2 = pointGroup2.X;
pt0 = Point.ByCartesianCoordinates(1);
pt1 = Point.ByCartesianCoordinates(2);
pointGroup = {pt0,pt1};
t = pointGroup[0].Translate(3);
pointGroup[0] = t;
test = pointGroup.X;
pt4 = Point.ByCartesianCoordinates(1);
pt5 = Point.ByCartesianCoordinates(2);
pointGroup3 = {pt4,pt5};
pointGroup3[0] = pointGroup3[0].Translate(3);
test3 = pointGroup3.X;
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch962_T77_Defect_1460274_Class_Update_3()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class Point
{
  X : var;
  constructor ByCartesianCoordinates( x : var)
  {
      X = x;
  }
  def Translate ( y : var )
  {
      return = Point.ByCartesianCoordinates( X + y ) ;
  }
}
pt0 = Point.ByCartesianCoordinates(1);
pt1 = Point.ByCartesianCoordinates(2);
pointGroup = {pt0,pt1};
pointGroup[0] = {
                    pointGroup[0].Translate(3) => t;		    
		}
test = pointGroup.X;";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch963_T77_Defect_1460274_Class_Update_4()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"[Imperative]
{
	a = {};
	b = a;
	a[0] = b;
	c = Count(a);
}
[Associative]
{
	a1 = {0};
	b1 = a1;
	a1[0] = b1;
	c1 = Count(a1);
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch964_T77_Defect_1460274_Class_Update_5()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"geometry1 = {};
geometry1[0] = 5;
geometry1[1] = 10;
geometry1[2] = {
                  geometry1[0]+ geometry1[1];
              }
geometry1[4] = {
                  geometry1[1]+ 1;
              }
test1 = geometry1;
geometry = {};
geometry[0] = 5;
geometry[1] = 10;
geometry[2] = geometry[0]+ geometry[1];
geometry[4] = geometry[1]+1;
test = geometry;";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch965_T78_Defect_1467146_Class_Update_With_Replication()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class A
{
static def execute(b : A)
 { 
  return = 100; 
 }
}
arr = {A.A()};
v = A.execute(arr);
val = v[0];";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch966_T78_Defect_1467146_Class_Update_With_Replication_2()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class A
{
static def execute(b : A)
 { 
  return = 100; 
 }
}
arr = {};
v = A.execute(arr);
val = v[0];";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch967_T78_Defect_1467146_Class_Update_With_Replication_3()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class A
{
static def execute(b : A)
 { 
  return = 100; 
 }
}
arr = {A.A(), null, 3};
v = A.execute(arr);
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch968_T78_Defect_1467146_Class_Update_With_Replication_4()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class A
{
	def execute()
	{ 
	  return = 100; 
	}
}
class B extends A
{
	
}
arr = {B.B(), null, 3};
v = arr.execute();
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch969_T78_Defect_1467146_Class_Update_With_Replication_5()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class A
{
	static def execute1( a : B)
	{ 
	  return = 100; 
	}
	
	static def execute2( a : B[])
	{ 
	  return = 200; 
	}
	
	
}
class B extends A
{
	
}
arr = {};
arr2 : B[] = null;
v1 = B.execute1(arr);
v = v1[0];
v2 = B.execute2(arr);
p1 = B.execute1(arr2);
p = p1[0];
p2 = B.execute2(arr2);";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch970_T79_Defect_1458581_Unnamed_Constructor()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class A 
{ 
	x1 : int ;
	x2 : double;
	
	constructor () 
	{	
		x1 = 1; 
		x2 = 1.5;		
	}
}
a1 = A.A();
b1 = a1.x1;
b2 = a1.x2;";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch971_T80_Defect_1444246_Replication()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class Point
{
	x : var;
	constructor Create(xx : int)
	{
		x = xx;
	}
}
xs;
[Associative]
{
	coords = {0,1,2,3,4,5,6,7,8,9};
	pts = Point.Create(coords);
	xs = pts.x;
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch972_T80_Defect_1444246_Replication_2()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class MyPoint
{ 
	X: var;
	Y: var;
	constructor CreateXY(x : double, y : double)
	{
		X = x;
		Y = y;
	} 
}
p2 = MyPoint.CreateXY(-20.0,-30.0).X;";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch973_T81_Defect_1467246_derived_class_setter()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class A
{ 
	x : var ;	
	constructor A ()
	{
	    x = 4;	          	
	}	
}
class B extends A
{ 
	z : var;	
	constructor B () : base.A()
	{
	    z = 6;      	
	}	
}
a1 = B.B();
x1 = a1.x;
z1 = a1.z;
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch974_T82_Defect_1467174()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class Point
{
    X : double;    
    constructor ByCartesianCoordinates( x : double )
    {
        X = x;
    
    }      
}
class Line
{
    StartPoint : Point;        
    constructor ByStartPointEndPoint( p1 : Point )
    {
        StartPoint = p1;    
    }    
    def PointAtParameter(  v : double )
    {
        start_x = StartPoint.X * v;// this is the culprit
    return = start_x;
    }     
}
p1 = Point.ByCartesianCoordinates(1.5);
l1 = Line.ByStartPointEndPoint(p1);
t1 = l1.StartPoint.X;
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch976_Collection_Assignment_1()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"c;
d;
e;
[Imperative]
{
	a = { {1,2}, {3,4} };
	
	a[1] = {-1,-2,3};
	
	c = a[1][1];
	
	d = a[0];
	
	b = { 1, 2 };
	
	b[0] = {2,2};
	e = b[0];
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch977_Collection_Assignment_2()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"def foo: int[]( a: int,b: int )
{
	return = { a,b };
}
	c = foo( 1, 2 );
d;	
[Imperative]
{
	d = foo( 3 , -4 );
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch978_Collection_Assignment_3()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"def foo: int[]( a: int,b: int )
{
	return = { a+1,b-2 };
}
	c = foo( 1, 2 );
	d;
[Imperative]
{
	d = foo( 2+1 , -3-1 );
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch979_Collection_Assignment_4()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"c;
[Imperative]
{
	def collectioninc: int[]( a : int[] )
	{
		b = a;
		j = 0;
	
		for( i in b )
		{
			a[j] = a[j] + 1;
			j = j + 1;
		}
		return = a;
	}
		d = { 1,2,3 };
		c = collectioninc( d );
		a1 = c[0];
		a2 = c[1];
		a3 = c[2];
}
	";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch980_Collection_Assignment_5()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"def foo: int[] ( a : int[], b: int, c:int )
{
	a[b] = c;
	return = a;
}
d = { 1,2,2 };
b = foo( d,2,3 );
e;
c;
[Imperative]
{
	e = { -2,1,2 };
	c = foo( e,0,0 );
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch981_T01_Simple_1D_Collection_Assignment()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"a;
b;
c;
d;
e;
[Imperative]
{
	a = { {1,2}, {3,4} };
	
	a[1] = {-1,-2,3};
	
	c = a[1][1];
	
	d = a[0];
	
	b = { 1, 2 };
	
	b[0] = {2,2};
	e = b[0];
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch982_T02_Collection_Assignment_Associative()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"a;
b;
c;
d;
e;
[Associative]
{
	a = { {1,2}, {3,4} };
	
	a[1] = {-1,-2,3};
	
	c = a[1][1];
	
	d = a[0];
	
	b = { 1, 2 };
	
	b[0] = {2,2};
	e = b[0];
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch983_T03_Collection_Assignment_Nested_Block()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"c;
d;
e;
[Associative]
{
	a = { {1,2,3},{4,5,6} };
	
	[Imperative]
	{
		c = a[0];
		d = a[1][2];
	}
	
	e = c;
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch984_T04_Collection_Assignment_Using_Indexed_Values()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"c;
d;
e;
[Associative]
{
	a = { {1,2,3},{4,5,6} };
	
	b = { a[0], 4 };
	
	c = b[0];
	
	d = b[1];
	
	e = { a[0][0], a[0][1], a[1][0] };
	
}
	";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch985_T05_Collection_Assignment_Using_Class()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class collection
{
	
	public a : var[];
	
	constructor create( )
	{
		a = { 1,2,3 };
	}
	
	def ret_col ( )
	{
		return=  a;
	}
}
d;
[Imperative]
{
	c1 = collection.create(  );
	d = c1.ret_col();
}
		
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch986_T06_Collection_Assignment_Using_Class_2()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class collection
{
	
	public a : var[];
	
	constructor create( b )
	{
		a = { 1,2,b };
	}
	
	def modify ( c )
	{
		a[0] = c;
		return = a;
	}
}
d;
[Associative]
{
	c1 = collection.create( 3 );
	
	d = c1.modify( 4 );
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch987_T07_Collection_Assignment_In_Function_Scope()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"def collection :int[] ( a :int[] , b:int , c:int )
{
	a[1] = b;
	a[2] = c;
	return= a;
}
	a = { 1,0,0 };
	[Imperative]
	{
		a = collection( a, 2, 3 );
	}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch988_T08_Collection_Assignment_In_Function_Scope_2()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"def foo ( a )
{
	return= a;
}
	a = { 1, foo( 2 ) , 3 };
	b;
	[Imperative]
	{
		b = { foo( 4 ), 5, 6 };
	}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch989_T09_2D_Collection_Assignment_In_Class_Scope()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class coll
{
	a : var[][];
	
	constructor Create ()
	{
		a = { {1,2} , {3,4} };
	}
	
	def ret ()
	{
		return= a;
	}
}
	c1 = coll.Create();
	b = c1.ret();
	c = b[1];
	d;
	[Imperative]
	{	
		c2 = coll.Create();
		b1 = c2.ret();
		d = b1[0];
	}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch990_T10_2D_Collection_Assignment_In_Function_Scope()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"	def foo( a:int[] )
	{
		a[0][0] = 1;
		return= a;
	}
	b = { {0,2,3}, {4,5,6} };
	d = foo( b );
	c = d[0];
		
		
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch991_T11_2D_Collection_Assignment_Heterogeneous()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"b;
c;
d;
[Imperative]
{
	a = { {1,2,3}, {4}, {5,6} };
	b = a[1];
	a[1] = 2;
	a[1] = a[1] + 1;
	a[2] = {7,8};
	c = a[1];
	d = a[2][1];
}	";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch992_T12_Collection_Assignment_Block_Return_Statement()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"c1;
c2;
[Associative]
{
	a = 3;
	
	b = [Imperative]
	{
		c = { 1,2,3 };
		if( c[1] <= 3 )
		return= c;
	}
	
	b[2] = 4;
	a = b;
	c1 = a[1];
	c2 = a[2];
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch993_T13_2D_Collection_Assignment_Block_Return_Statement()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"c1;
c2;
[Associative]
{
	a = 3;
	
	b = [Imperative]
	{
		c = { { 1,2,3 } , { 4,5,6 } } ;
		return= c;
	}
	
	b[0][0] = 0;
	a = b;
	c1 = a[0];
	c2 = a[1][2];
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch994_T14_2D_Collection_Assignment_Using_For_Loop()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"pts = {{0,1,2},{0,1,2}};
x = {1,2};
y = {1,2,3};
[Imperative]
{
    c1 = 0;
	for ( i in x )
	{
		c2 = 0;
		for ( j in y )
		{
		    pts[c1][c2] = i+j;
			c2 = c2+1;
		}
		c1 = c1 + 1;
	}
	
}
p1 = pts[1][1];
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch995_T15_2D_Collection_Assignment_Using_While_Loop()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"p1;
[Imperative]
{
	pts = {{0,1,2},{0,1,2}};
	x = {1,2,3};
	y = {1,2,3};
    i = 0;
	while ( i < 2 )
	{		
		j = 0;
		while ( j  < 3 )
		{
		    pts[i][j] = i+j;
			j = j + 1;
		}
		i = i + 1;
	}
	p1 = pts[1][1];
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch996_T16_Assigning_Class_Collection_Property()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class A
{
    a = {1,2,3};
}
a = A.A();
val = a.a;
val[0] = 100;
t = a.a[0];         
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch997_T17_Assigning_Collection_And_Updating()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"a = {1, 2, 3};
b = a;
b[0] = 100;
t = a[0];       // t = 100, as expected
      
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch998_T18_Assigning_Collection_In_Function_And_Updating()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"def A (a: int [])
{
    return = a;
}
val = {1,2,3};
b = A(val);
t = b;
t[0] = 100;    // 
y = b[0];
z = val[0];    // val[0] is still 1
      
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch999_T19_Assigning_Collection_In_Function_And_Updating()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"def A (a: int [])
{
    return = a;
}
val = {1,2,3};
b = A(val);
b[0] = 100;     
z = val[0];     
      
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1000_T20_Defect_1458567()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"a = 1;
b = a[1];";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1001_T20_Defect_1458567_2()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class Point
{
    X : double;
	Y : double;
	Z : double;
	
	constructor ByCoordinates( x : double, y : double, z : double )
	{
	    X = x;
		Y = y;
		Z = z;		
	}
}
class Line
{
    P1 : Point;
	P2 : Point;
	
	constructor ByStartPointEndPoint( p1 : Point, p2 : Point )
	{
	    P1 = p1;
		P2 = p2;
	}
	
	def PointAtParameter (p : double )
	{
	
	    t1 = P1.X + ( p * (P2.X - P1.X) );
		return = Point.ByCoordinates( t1, P1.Y, P1.Z);
	    
	}
	
}
startPt = Point.ByCoordinates(1, 1, 0);
endPt   = Point.ByCoordinates(1, 5, 0);
line_0  = Line.ByStartPointEndPoint(startPt, endPt); 	
x1 = line_0[10].P1.X;
x2 = line_0[0].P1.X;
x3 = line_0.P1.X;
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1002_T21_Defect_1460891()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"a;
c;
[Imperative]
{
    b = { };
    count = 0;
    a = 1..5..2;
    for ( i in a )
    {
        b[count] = i + 1;
        count = count + 1;
    }
	c = b ;
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1003_T21_Defect_1460891_2()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"
def CreateArray ( x : var[] , i )
{
    x[i] = i;
	return = x;
}
b = {0, 1};
count = 0..1;
b = CreateArray ( b, count );
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1004_T22_Create_Multi_Dim_Dynamic_Array()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"test;
[Imperative]
{
    d = {{}};
    r = c = 0;
    a = { 0, 1, 2 };
	b = { 3, 4, 5 };
    for ( i in a )
    {
        c = 0;
		for ( j in b)
		{
		    d[r][c] = i + j;
			c = c + 1;
        }
		r = r + 1;
    }
	test = d;
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1005_T23_Create_Dynamic_Array_Using_Replication_In_Imperative_Scope()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"test;
[Imperative]
{
	def CreateArray ( x : var[] , i )
	{
		x[i] = i;
		return = x;
	}
	test = { };
	test = CreateArray ( test, 0 );
	test = CreateArray ( test, 1 );
	
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1006_T24_Dynamic_Array_Accessing_Out_Of_Bound_Index()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class A
{
    Y : double;
    constructor A( y : double)
    {
        Y = y;
    }
}
class B
{
    A1 : A;
    A2 : A;
    constructor B( a1 : A, a2 : A)
    {
        A1 = a1;
        A2 = a2;
    }
}
def foo ( x : double)
{
    return = x + 1;
}
innerCircle2Rad = 100;
basePoint = {  };
basePoint2 = { };
nsides = 4;
a = 0..nsides - 1..1;
b = 0..nsides - 1..2;
collection = { };
[Imperative]
{
    temp1 = {  };
    temp2 = {  };
    for(i in a)
    {
        basePoint[i] = A.A( innerCircle2Rad * foo(i * 360 / nsides) );
        temp1[i] = basePoint[i].Y;
    }
    for(i in a)
    {
        if(i <= nsides-2)
        {
            basePoint2[i] = B.B(basePoint[i], basePoint[i+1]);        
            temp2[i] = { basePoint2[i].A1.Y, basePoint2[i].A2.Y };                      
        }
        basePoint2[nsides-1] = B.B(basePoint[nsides-1], basePoint[0]);
    }
    collection = { temp1, temp2 };
}   
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1007_T24_Dynamic_Array_Argument_Function_1465802_1()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"
	def foo : int(i:int[])
	{
		return = 1;
	}
b1;
[Associative]
{
cy={};
cy[0]=10;
cy[1]=12;
b1=foo(cy);
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1008_T24_Dynamic_Array_Argument_Function_1465802_2()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"
	def foo : int(i:int[])
	{
		return = 1;
	}
b1;
[Associative]
{
cy={};
cy[0]=10;
cy[1]=null;
b1=foo(cy);
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1009_T24_Dynamic_Array_Class_Scope()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class A
{
    X : var[];
    Y : var[];
    Count1;
    
    constructor A ( i : int )
    {
        X = 0..i;
	[Imperative]
	{
	    Count1 = 0;	    
	    y = {};
	    for ( i in X ) 
	    {
	        y[Count1] = i * -1;
		Count1 = Count1+1;
	    }          
            Y = y;	    
	}
	
    }
}
p = 3;
a = A.A(p);
b1 = a.X;
b2 = a.Y;
b3 = a.Count1;
p = 4;
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1010_T24_Dynamic_Array_Class_Scope_2()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class A
{
    X = { };
    Y = { };
    Count1 :int;
    
    constructor A ( i : int )
    {
        X = 0..i;
	[Imperative]
	{
	    Count1 = 0;	    
	    
	    for ( i in X ) 
	    {
	        Y[Count1] = i * -1;
		Count1 = Count1+1;
	    }          
            	    
	}
	
    }
}
p = 4;
a = A.A(p);
b1 = a.X;
b2 = a.Y;
b3 = a.Count1;
//p = 4;
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1011_T24_Dynamic_Array_Class_Scope_3()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class A
{
    X :int[] = { };
    Y :int[] = { };
    Count1 :int;
    
    constructor A ( i : int )
    {
        X = 0..i;
	Y = i..0..-1;
	Count1 = i+1;
    }
    
    def update ( )
    {
        [Imperative]
	{
	    i = 0;
	    while  ( i < Count1 )
	    {
	        temp = Y[i];
		Y[i] = X[i];
		X[i] = temp;
		i = i + 1;
	    }    
	    X[Count1] = 100;
	    Y[Count1] = 100;
	    Count1 = Count1 + 1;
	}
	return = true;
    }
}
p = 4;
a = A.A(p);
b1 = a.X;
b2 = a.Y;
b3 = a.Count1;
test = a.update();
c1 = a.X;
c2 = a.Y;
c3 = a.Count1;
test = b1;
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1012_T24_Dynamic_Array_Imperative_Function_Scope()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"def createArray( p : int[] )
{  
    a = [Imperative]  
    {    
        collection = {};	
	lineCnt = 0;
	while ( lineCnt < 2 )
	{
            collection [ lineCnt ] = p [ lineCnt ] * -1;
	    lineCnt = lineCnt + 1;      
	}
	return = collection;
    }
    return = a;
}
x = createArray ( { 1, 2, 3, 4 } );
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1013_T24_Dynamic_Array_Imperative_Scope()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"t = [Imperative]
{
    d = { { } };
    r = c = 0;
    a = { 0, 1, 2 };
    b = { 3, 4, 5 };
    for ( i in a )
    {
        c = 0;
	for ( j in b)
	{
	    d[r][c] = i + j;
	    c = c + 1;
        }
	r = r + 1;
    }
    test = d;
    return = test;
}
// expected : test = { { 3, 4, 5 }, {4, 5, 6}, {5, 6, 7} }
// received : test = { { 3, 4, 5 }, , }";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1014_T24_Dynamic_Array_Inside_Function()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"
def foo ( d : var[] )
{
    [Imperative]
    {
	r = c = 0;
	a = { 0, 1, 2 };
	b1 = { 3, 4, 5 };
	for ( i in a )
	{
	    c = 0;
	    for ( j in b1)
	    {
		d[r][c] = i + j;
		c = c + 1;
	    }
	    r = r + 1;
	}	
    }
    return = d;
}
b = {};
b = foo ( b ) ;     
a = b;
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1015_T24_Dynamic_Array_Inside_Function_2()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"
def foo ( d : var[]..[] )
{
    [Imperative]
    {
	r = c = 0;
	a = { 0, 1, 2 };
	b1 = { 3, 4, 5 };
	for ( i in a )
	{
	    c = 0;
	    for ( j in b1)
	    {
		d[r][c] = i + j;
		c = c + 1;
	    }
	    r = r + 1;
	}	
    }
    return = d;
}
b = { {} };
b = foo ( b ) ;     
a = b;
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1016_T24_Dynamic_Array_Passed_As_Int_Array_To_Class_Method()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class A
{
                constructor A()
                {}
                def  foo : int(i : int[])
                {
                                return  = i[0] + i[1];
                }
}
b1;b2;b3;
[Associative]
{
                cy={};
                cy[0]=10;
                cy[1]=12;
                a=cy;
                d={cy[0],cy[1]};
                aa = A.A();              
                b1=aa.foo(d);//works
                b2=aa.foo(a); //does not work � error: Unknown Datatype Invalid
                b3=aa.foo(cy); //does not work � error: Unknown Datatype Invalid
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1017_T24_Dynamic_Array_Passed_As_Primitive_Array_To_Function()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class A
{
                constructor A()
                {}
                def  foo : double(i : var[])
                {
                                return  = i[0] + i[1];
                }
}
b1;b2;b3;
[Associative]
{
                cy={};
                cy[0]=1;
                cy[1]=1.5;
                a=cy;
                d={cy[0],cy[1]};
                aa = A.A();              
                b1=aa.foo(d);//works
                b2=aa.foo(a); //does not work � error: Unknown Datatype Invalid
                b3=aa.foo(cy); //does not work � error: Unknown Datatype Invalid
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1018_T25_Adding_elements_MemberClass_imperative_1465704_8()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class A
{
x : var[];
constructor A ( )
{
x = { { 0, 0 } , { 1, 1 } };
}
}
y = A.A();
 // expected { { 0,0 }, { 1, 1, 1 }, {2, false, {2, 2}} }
a=[Imperative]
{
def add ( )
{
z=0..5;
for(i in z)
{
	y.x[i] = 1;
}
return = y.x; 
}
y = add();
return=y;
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1019_T25_Adding_elements_MemberClass_imperative_1465704_9()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class A
{
x : var[];
constructor A ( )
{
x = { { 0, 0 } , { 1, 1 } };
}
}
y = A.A();
 // expected { { 0,0 }, { 1, 1, 1 }, {2, false, {2, 2}} }
a=[Imperative]
{
def add ( )
{
z=5;
j=0;
while ( j<=z)
{
	y.x[j] = 1;;
j=j+1;
}
return = y.x; 
}
y = add();
return=y;
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1020_T25_Adding_elements_tomemberofclass_1465704()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class A
{
x : var[][];
constructor A ( )
{
x = { { 0, 0 } , { 1, 1 } };
}
def add ( )
{
x[1][2] = 1;
x[2] = { 2, 2, 2, 2 };
return = x;
}
}
y = A.A();
x = y.add(); //x = {{0,0},{1,1,1},{2,2,2,2}}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1021_T25_Adding_Elements_ToMemberOfClass_1465704_10()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class A
{
x : var[][];
constructor A ( )
{
x = { { 0, 0 } , { 1, 1 } };
}
}
y = A.A();
 // expected { { 0,0 }, { 1, 1, 1 }, {2, false, {2, 2}} }
x=[Imperative]
{
def add ( )
{
y.x[1][2] = 1;
y.x[2] = { null, false,{ 2, 2} };
return = y.x;
}
z = add();
return=z;
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1022_T25_Adding_elements_tomemberofclass_1465704_2()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class A
{
x : var[][];
constructor A ( )
{
x = { { 0, 0 } , { 1, 1 } };
}
}
def add ( a:A)
{
a.x[1][2] = 1;
a.x[2] = { 2, 2, 2, 2 };
return = a.x;
}
y = A.A();
x = add(y); // expected { { 0,0 }, { 1, 1, 1 }, {2, 2, 2, 2} }
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1023_T25_Adding_elements_tomemberofclass_1465704_3()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class A
{
    x : var[]..[];
    constructor A ( )
    {
       x = { { 0, 0 } , { 1, 1 } };
    }
    
    def add ( )
    {
        x[1][2] = 1;
        x[2] = { 2, false, { 2, 2 } };
        
        return = x;
    }
}
    
y = A.A();
x = y.add(); // expected { { 0,0 }, { 1, 1, 1 }, {2, false, {2, 2}} }
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1024_T25_Adding_elements_tomemberofclass_1465704_4()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class A
{
x : var[]..[];
a: var[]..[];
constructor A ( )
{
x = { { 0, 0 } , { 1, 1 } };
}
def add ( )
{
x[1][2] = 1;
x[2] = { 2, false,{ 2, 2} };
return = x;
}
def test( )
{
a = x;
a[3]=1;
return = a;
}
}
y = A.A();
x = y.add(); 
z=y.test();//z = {{0,0},{1,1,1},{2,false,{2,2}},1}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1025_T25_Adding_elements_tomemberofclass_1465704_5()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class A
{
x : var[][];
a: var;
constructor A ( )
{
x = { { 0, 0 } , { 1, 1 } };
}
def remove ( )
{
x=Remove(x,1);
return = x;
}
def add( )
{
x[1] = {4,4};
return = x;
}
}
y = A.A();
x = y.remove(); //x = {{0,0},{4,4}}
z=y.add();//z = {{0,0},{4,4}}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1026_T25_Adding_elements_tomemberofclass_1465704_6()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class A
{
x : var[]..[];
constructor A ( )
{
x = { { 0, 0 } , { 1, 1 } };
}
}
class B extends A 
{
def add ( )
{
x[1][2] = 1;
x[2] = { 2, false,{ 2, 2} };
return = x;
}
}
y = B.B();
x = y.add(); // expected { { 0,0 }, { 1, 1, 1 }, {2, false, {2, 2}} }";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1027_T25_Adding_elements_tomemberofclass_1465704_7()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class A
{
x : var[]..[];
constructor A ( )
{
x = { { 0, 0 } , { 1, 1 } };
}
}
y = A.A();
 // expected { { 0,0 }, { 1, 1, 1 }, {2, false, {2, 2}} }
x=[Imperative]
{
def add ( )
{
y.x[1][2] = 1;
y.x[2] = { 2, false,{ 2, 2} };
return = y.x;
}
z = add();
return=z;
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1028_T25_Adding_Elements_To_Array()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"a = 0..2;
a[3] = 3;
b = a;
x = { { 0, 0 } , { 1, 1 } };
x[1][2] = 1;
x[2] = {2,2,2,2};
y = x;
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1029_T25_Adding_Elements_To_Array_Class()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class A
{
    x : var[][];
    constructor A (  )
    {
        x = { { 0, 0 } , { 1, 1 } };
    }
    def add ( ) 
    {
	x[1][2] = 1;
	x[2] = { 2, 2, 2, 2 };
	return = x;
    }
}
y = A.A();
x = y.add(); // expected { { 0,0 }, { 1, 1, 1 }, {2, 2, 2, 2} }
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1030_T25_Adding_Elements_To_Array_Function()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"def add ( x : var[]..[] ) 
{
    x[1][2] = 1;
    x[2] = { 2, 2, 2, 2 };
    return = x;
}
x = { { 0, 0 } , { 1, 1 } };
x = add(x);
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1031_T25_Class_Assignment_dynamic_imperative_1465637_1()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class A
{
X:var;
Y:var;
Count1 :int;
constructor A ( i : int )
	{
	X = 0..i;
	[Imperative]
	{
		Y = {0,0,0,0,0};
		Count1 = 0; 
		for ( i in X ) {
			Y[Count1] = i * -1;
			Count1 = Count1 + 1;
		}
	}
}
}
p = 4;
a = A.A(p);
b1 = a.X;
 // expected { 0, 1, 2, 3, 4 }
b2 = a.Y;
 // expected {0,-1,-2,-3,-4}
b3 = a.Count1;
//received : //watch:
 b1 = {0,-1,-2,-3,-4};//watch: 
b2 = {0,0,0,0,0};
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1032_T26_Defct_DNL_1459616()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"a=1;
a={a,2};";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1033_T26_Defct_DNL_1459616_2()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"a={1,2};
[Imperative]
{
    a={a,2};
}
b = a;";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1034_T26_Defct_DNL_1459616_3()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"a={1,2};
[Imperative]
{
    a={a,2};
}
b = { 1, 2 };
def foo ( )
{
    b =  { b[1], b[1] };
    return = null;
}
dummy = foo ();
c = b;";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1035_T26_Defct_DNL_1459616_4()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class A
{
    x : var[]..[];
    constructor A ()
    {
        a = { a, a };
        x = a;	
    }
    def foo ()
    {
        b = { b[0], b[0], b };
	return = b;
    }
}
//a={1,2};
x1 = A.A();
c = [Imperative]
{
    //b = { 0, 1 };
    t1 = x1.x;
    t2  = x1.foo();
    return = { t1, t2 };
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1036_T26_Defct_DNL_1459616_5()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class A
{
    x : var[]..[];
    constructor A ()
    {
        a = { a, a };
        x = a;	
    }
    def foo ()
    {
        b = { b[0], b[0], b };
	return = b;
    }
}
a={1,2};
x1 = A.A();
c = [Imperative]
{
    b = { 0, 1 };
    t1 = x1.x;
    t2  = x1.foo();
    return = { t1, t2 };
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1037_T26_defect_1464429_DynamicArray()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"
def CreateArray ( x : var[] , i )
{
x[i] = i;
return = x;
}
b = { }; // Note : b = { 0, 0} works fine
count = 0..1;
t2 = CreateArray ( b, count );
t1=b;";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1038_T26_defect_1464429_DynamicArray_class()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class test
{
def CreateArray ( x : var[] , i )
{
x[i] = i;
return = x;
}
}
b = { }; // Note : b = { 0, 0} works fine
count = 0..1;
a= test.test();
t2 = a.CreateArray( b, count );
t1=b;";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1039_T27_defect_1464429_DynamicArray()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"
def CreateArray ( x : var[] , i )
{
x[i] = i;
return = x;
}
b = { }; // Note : b = { 0, 0} works fine
count = 0..1;
t2 = CreateArray ( b, count );
t1=b;";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1040_T27_defect_1464429_DynamicArray_class()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class test
{
	def CreateArray ( x : var[] , i )
	{
		smallest1  =  i>1?i*i:i;
		x[i] = smallest1;
		return = x;
	}
}
b = { }; // Note : b = { 0, 0} works fine
count = 0..2;
a= test.test();
t2 = a.CreateArray( b, count );
t1=b;";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1041_T27_defect_1464429_DynamicArray_class_inherit()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class test
{
    y ={};
	def CreateArray (  i :int)
	{
		y[1] = i;
		return = y;
	}
}
class test1 extends test
{
   def CreateArray (  i :int)
	{
		y[i] = i*-1;
		return = y;
	}
}
count = 0..2;
a= test1.test1();
t2 = a.CreateArray(  count );
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1042_T27_defect_1464429_DynamicArray_inline()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class test
{
	def CreateArray ( x : var[] , i )
	{
		smallest1  =  i>1?i*i:i;
		x[i] = smallest1;
		return = x;
	}
}
b = { }; // Note : b = { 0, 0} works fine
count = 0..2;
a= test.test();
t2 = a.CreateArray( b, count );
t1=b;";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1043_T27_defect_1464429_DynamicArray_memberof_class()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class test
{
y ={};
	def CreateArray (  i :int)
	{
		y[i] = i;
		return = y;
	}
}
count = 0..2;
a= test.test();
t2 = a.CreateArray(  count );";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1044_T27_defect_1464429_DynamicArray_update()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"
def CreateArray ( x : var[] , i )
{
x[i] = i;
return = x;
}
b = { }; // Note : b = { 0, 0} works fine
count = 0..1;
t2 = CreateArray ( b, count );
t1=b;
count = -2..-1;";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1045_T27_DynamicArray_Class_1465802_Argument()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class A
{
	constructor A()
	{
}
	def foo : int(i:int[])
	{
		return = i[0] + i[1];
	}
}
b1;b2;b31;
[Associative]
{
cy={};
cy[0]=10;
cy[1]=12;
a=cy;
d={cy[0],cy[1]};
aa = A.A();
b1=aa.foo(cy);
b2=aa.foo(d);
b31=aa.foo(a);
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1046_T27_DynamicArray_Class_1465802_Argument_2()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"
class A
{
	constructor A()
	{
}
	def foo : int(i:int[])
	{
		return = 1;
	}
}
[Associative]
{
cy={};
cy[0]=10;
cy[1]=null;
aa = A.A();
b1=aa.foo(cy);
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1047_T27_DynamicArray_Class_1465802_member()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class A
{
i:int[];
	constructor A(d:int[])
	{
i=d;
}
	def foo : int()
	{
		return = i[0] + i[1];
	}
}
a1;b1;c1;
[Associative]
{
cy={};
cy[0]=10;
cy[1]=12;
a=cy;
d={cy[0],cy[1]};
aa = A.A(cy);
bb = A.A(d);
cc = A.A(a);
a1=aa.foo();
b1=bb.foo();
c1=cc.foo();
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1048_T27_DynamicArray_Invalid_Index_1465614_1()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"a={};
b=a[2];
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1049_T27_DynamicArray_Invalid_Index_1465614_2()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class Point
{
X : double;
Y : double;
Z : double;
constructor ByCoordinates ( x1 : double, y1 : double, z1 : double ) 
{
X = x1;
Y = y1;
Z = z1;
}
}
class Line{
P1: Point;
P2: Point;
constructor ByStartPointEndPoint ( p1: Point, p2: Point )
{
P1 = p1;
P2 = p2;
}
}
baseLineCollection = { };
basePoint = { }; // replace this with ""basePoint = { 0, 0};"", and it works fine
nsides = 2;
a = 0..nsides - 1..1;
[Imperative]
{
for(i in a)
{
basePoint[i] = Point.ByCoordinates(i, i, 0);
}
for(i in a)
{
baseLineCollection[i] = Line.ByStartPointEndPoint(basePoint[i], basePoint[i+1]);
}
}
x=basePoint[0].X;
y=basePoint[0].Y;
z=basePoint[0].Z;";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1050_T27_DynamicArray_Invalid_Index_1467104()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class Point
{
	x : var;
	constructor Create(xx : double)
	{
		x = xx;
	}
}
pts = Point.Create( { 1, 2} );
aa = pts[null].x;
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1051_T27_DynamicArray_Invalid_Index_1467104_2()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class Point
{
x : var[];
constructor Create(xx : double)
{
	x = {xx,1};
}
}
aa;
[Imperative]
{
pts = Point.Create( { 1, 2} );
aa = pts[null].x[null];
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1052_T27_DynamicArray_Invalid_Index_imperative_1467104_3()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class Point
{
x : var[];
constructor Create(xx : double)
{
	x = {xx,1};
}
}
aa;aa1;
[Imperative]
{
	pts = Point.Create( { 1, 2} );
	aa = pts[null];
	aa1 = pts[null].x[null];
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1053_T28_defect_1465706__DynamicArray_Imperative()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"test;
[Imperative]
{
def CreateArray ( x : var[] , i )
{
x[i] = i;
return = x;
}
test = { };
test = CreateArray ( test, 0 );
test = CreateArray ( test, 1 );
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1054_T28_defect_1465706__DynamicArray_Imperative_2()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"a;
r;
[Imperative]
{
    def test (i:int)
    {
        local = {};
        for(j in i)
        {
            local[j] = j;
        }
        return = local;
    }
    a={3,4,5};
    t = test(a);
    r = {t[0][3], t[1][4], t[2][5]};
    return = r;
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1055_T29_DynamicArray_Using_Out_Of_Bound_Indices()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"   
    basePoint = {  };
    
    basePoint [ 4 ] =3;
    test = basePoint;
    
    a = basePoint[0] + 1;
    b = basePoint[ 4] + 1;
    c = basePoint [ 8 ] + 1;
    
    d = { 0,1 };
    e1 = d [ 8] + 1;
    
    x = { };
    y = { };    
    t = [Imperative]
    {
        k = { };
	for ( i in 0..1 )
	{
	    x[i] = i;
	}
	k[0] = 0;
	for ( i in x )
	{
	    y[i] = x[i] + x[i+1];
	    k[i+1] = x[i] + x[i+1];
	
	}
	return = k;
    }
    z = y;
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1056_T40_Index_byFunction_argument_1467064_4()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class test
{
def foo(y:int)
{    
	return = y;
}
}
x;y;
[Imperative]
{
x = { 1, 2 };
y=test.test();
x[y.foo(1)] = 3;
y = x;
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1057_T40_Index_byFunction_class_imperative_1467064_3()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class test
{
def foo()
{    
	return = 2;
}
}
x;y;
[Imperative]
{
x = { 1, 2 };
y=test.test();
x[y.foo()] = 3;
y = x;
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1058_T40_Index_DynamicArray_1464942_5()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class test
{
def foo(y:int)
{    
	return = y;
}
}
x = { };
y=test.test();
a=y.foo({0});
x[a]=3;
//x[y.foo({0})] = 3;
z = x;
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1059_T40_Index_DynamicArray_byarray_1464942_6()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class test
{
def foo(y:int[])
{    
	return = y;
}
}
x = { };
y=test.test();
a=y.foo({0,1});
x[y.foo({0,1})] = 3;
z = x;
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1060_T40_Index_usingFunction_1467064()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"def foo()
{    
return = 0;
}
x = { 1, 2 };
x[foo()] = 3;
y = x;";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1061_T40_Index_usingFunction_class_1467064_2()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class test
{
def foo()
{    
	return = 0;
}
}
x = { 1, 2 };
y=test.test();
x[y.foo()] = 3;
a = x;";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1062_T41_Accessing_Non_Existent_Properties_From_Array_Elements()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class A 
{
    x : var;
    constructor A ( y : var )
    {
        x = y;
    }
}
class B 
{
    x2 : var;
    constructor B ( y : var )
    {
        x2 = y;
    }
}
c = { A.A(0), B.B(1) };
d = c[1].x; 
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1063_T41_Accessing_Non_Existent_Property_FromArray_1467083()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class A
{
x : var;
constructor A ( y : var )
{
x = y;
}
}
class B
{
x2 : var;
constructor B ( y : var )
{
x2 = y;
}
}
c = { A.A(0), B.B(1) };
c0 = c[0].x;//0
d = c[1].x;//null
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1064_T41_Accessing_Non_Existent_Property_FromArray_1467083_2()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class A
{
x : var;
constructor A ( y : var )
{
x = y;
}
}
class B
{
x2 : var;
constructor B ( y : var )
{
x2 = y;
}
}
c = { A.A(0), B.B(1),1 };
e = c[2].x;
e1 = c[2].x2;
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1065_T41_Accessing_Non_Existent_Property_FromArray_1467083_3()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class A
{
x : var;
constructor A ( y : var )
{
x = y;
}
}
class B
{
x2 : var;
constructor B ( y : var )
{
x2 = y;
}
}
c = null;
d={A.A(0),null};
e = c[0].x; // null
e1 = c[1].x2;//null
f = d[0].x;//0
f1 = d[1].x2;//null
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1066_T61_Accessing_Non_Existent_Array_Properties_1467082()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class A  
{
    x : var;
    constructor A ( y : var )
    {
        x = y;
    }
}
c = { A.A(0), A.A(1) };
p = {};
d=p[1];
d = [Imperative]
{
    if(c[0].x == 0 )
    {
        c[0] = 0;
	p[0] = 0;
    }
    if(c[0].x == 0 )
    {
        p[1] = 1;
    }
    return = 0;
}
t1 = c[0];
t2 = c[1].x;
t3=p[0];
t4=p[1];
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1067_T61_Accessing_Non_Existent_Array_Properties_1467082_2()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class A  
{
  x : var;
    constructor A ( y : var )
    {
        x = y;
    }
}
c = { A.A(0), A.A(1) };
p = {};
q=p[0].X;
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1068_T61_Accessing_Non_Existent_Array_Properties_1467082_3()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class A  
{
    x : var;
    constructor A ( y : var )
    {
        x = y;
    }
}
c = { A.A(0), A.A(1) };
p = {};
q=p[0].X;
c[0]=0;
p=c[0].X; // access as if its propoerty of the class, but thevalue is not class 
r=c[0][0].X;// non existing index 
s=c[0].X[0];// access non array variable as if its array ";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1069_T61_Assign_Non_Existent_Array_Properties_1467082_4()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class A  
{
   x : var [];
    constructor A ( y : var )
    {
        x = y;
    }
}
c = { A.A({0,1}), A.A({2}) };
d = { A.A({0,1}), A.A({2}) };
e = { A.A({0,1}), A.A({2}) };
f = { A.A({0,1}), A.A({2}) };
c[1].x=5;// wrong index 
d[1].x={0,1}; // entire row 
e[1][1].x=5;// non existing index 
f[1][0].x=5;// correct one 
p = c[1].x; 
q = d[1].x;
r = e[1][1].x;
s = f[1][0].x;
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1070_T61_Assign_Non_Existent_Array_Properties_1467094()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class A
{
x : var;
constructor A ( y : var )
{
x = y;
}
}
c = { A.A(0), A.A(1) };
p = {};
d = [Imperative]
{
if(c[0].x == 0 )
{
c[0] = 0;
p[0] = 0;
}
if(c[0].x == 0 )
{
p[1] = 1;
}
return = 0;
}
t1 = c[0];
t2 = c[1].x;
t3=p[0];
t4=p[1];
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1071_T62_Change_Avariable_To_Dynamic_Array_OnTheFly()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"
def func(a:int)
{
a=5;
return = a;
}
c=1;
b= func(c[0]);
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1072_T62_Create_Dynamic_Array_OnTheFly()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"i;
b;
z=[Imperative]
{
for (i in 0..7)
{
b[i] = i;
}
return=b;
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1073_T62_Create_Dynamic_Array_OnTheFly_AsFunctionArgument()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"
def func(a:int)
{
a=5;
return = a;
}
b= func(c[0]);
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1074_T62_Create_Dynamic_Array_OnTheFly_inaClass()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class test
{
b:int=10;
	constructor test(a:int)
	{
		a=b;
	
	}
}
d=5;
a=test.test(d[0]);
c= a.b;
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1075_T62_Create_Dynamic_Array_OnTheFly_inaClass_methodoverload()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class test
{
b:int=10;
	
  constructor test(a:int)
	{
	b=0;
	
	}
 constructor test(a:int[])
	{
	b=1;
	
	}
}
d[0]=5;
a=test.test(d);
c= a.b;
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1076_T62_Create_Dynamic_Array_OnTheFly_passargument()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class test
{
b:int=10;
	
  constructor test(a:int[])
	{
	b=1;
	
	}
}
d[0]=5;
a=test.test(d);
c= a.b;
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1077_T62_Create_Dynamic_Array_OnTheFly_passargument_function()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"
	
  def test(a:int[])
	{
	b=1;
	return=b;
	}
d[0]=5;
a=test(d);
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1078_T63_Create_MultiDimension_Dynamic_Array_OnTheFly()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"
def func(a:int[]..[])
{
a[0][1]=5;
a[2][3]=6;
return = a;
}
c=1;
b= func(c);
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1079_T63_Dynamic_array_onthefly_1467066()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"b;
z=[Imperative]
{
b[5]=0;
for (i in 0..7)
{
b[i] = i;
}
return=b;
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1080_T63_Dynamic_array_onthefly_aliastoanother()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"a=5;
b=a;
a[2]=3;
b[2]=-5;";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1081_T63_Dynamic_array_onthefly_argument_class__1467139()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class test
{
b:int=10;
        
  constructor test(a:int[])
        {
        b=1;
        
        }
}
d[0]=5;
a=test.test(d);
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1082_T63_Dynamic_array_onthefly_function_1467139()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"def foo(a:int[])
{
}
x[0]=5;
a = foo(x);
c = {100};
t = x;
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1083_T63_Dynamic_array_onthefly_function_return()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"def foo()
{
return =b[0]=5;
}
a = foo();
c = {100};
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1084_T63_Dynamic_array_onthefly_update()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"z=true;
b=z;
z[0]={1};
z=5;
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1085_T64_Modify_itemInAnArray_1467093()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"a = {1, 2, 3};
a[1] = a; 
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1086_T64_Modify_itemInAnArray_1467093_2()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"a;b;c;
[Imperative]
{
a = {};
b = a;
a[0] = b;
//hangs here
c = a;
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1087_T65_Array_Alias_ByVal_1467165()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"a = {0,1,2,3};
b=a;
a[0]=9;
b[0]=10;
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1088_T65_Array_Alias_ByVal_1467165_2()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class A
{
        id:int;
}
class B
{
        id:int;
}
a = {A.A(),B.B()};
b=a;
a[0].id = 100;
b[0].id = 200;
c=a[0].id;
d=b[0].id;";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1089_T65_Array_Alias_ByVal_1467165_3()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"a = {0,1,2,3};
b=a;
a[0]=9;
b[0]=false;
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1090_T65_Array_Alias_ByVal_1467165_4()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class A
{
        id:int;
}
class B
{
        id:int;
}
a = {A.A(),B.B()};
b=a;
a[0].id = 100;
b[0].id = ""false"";
c=a[0].id;
d=b[0].id;";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1091_T65_Array_Alias_ByVal_1467165_5()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class A
{
        id:int;
}
class B
{
        id:int;
}
a = {A.A(),B.B()};
b=a;
a[0].id = 100;
b[0].id = null;
c=a[0].id;
d=b[0].id;";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1092_T65_Array_Alias_ByVal_1467165_6()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"a = {0,1,2,3};
b=a;
a[0]=null;
b[0]=false;
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1093_T66_Array_CannotBeUsedToIndex1467069()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"x;
[Imperative]
{
    a = {3,1,2}; 
    x = {10,11,12,13,14,15}; 
    x[a] = 2;
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1094_T66_Array_CannotBeUsedToIndex1467069_2()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"x;
[Imperative]
{
    a = {3,1,2}; 
    x = {10,11,12,13,14,15}; 
    x[a] = 2;
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1095_T67_Array_Remove_Item()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"a={1,2,3,4,5,6,7};
a=Remove(a,0);// expected :{2,3,4,5,6,7}
a=Remove(a,4);//expected {1,2,3,4,6,7}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1096_T67_Array_Remove_Item_2()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"a={1,2,3,4,5,6,7};
a=Remove(a,0);// expected :{2,3,4,5,6,7}
a=Insert(a,4,6);//expected {1,2,3,4,6,7}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1097_T68_copy_byreference_1467105()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"test;
[Associative]
{
a = { 1, 2, 3};
b = a;
b[0] = 10;
test = a[0]; //= 10� i.e. a change in �b� causes a change to �a�
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1098_T01_Function_In_Assoc_Scope()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"a;
[Associative]
{
    def foo : int( a:int )
    {
	   return = a * 10;
	}
	
    a = foo( 2 );
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1099_T02_Function_In_Imp_Scope()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"a;
[Imperative]
{
    def foo : double( a:double, b : int )
    {
	   return = a * b;
	}
	
    a = foo( 2.5, 2 );
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1100_T03_Function_In_Nested_Scope()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"a;b;
[Imperative]
{
    def foo : double( a:double, b : int )
    {
	   return = a * b;
	}
	a = 3;
	[Associative]
	{
		a = foo( 2.5, 1 );
	}
	b = 
	[Associative]
	{
		a = foo( 2.5, 1 );
		return = a;
	}
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1101_T04_Function_In_Nested_Scope()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"a;b;
[Associative]
{
    def foo : int( a:int, b : int )
    {
	   return = a * b;
	}
	a = 3.5;
	[Imperative]
	{
		a = foo( 2, 1 );
	}
	b = 
	[Imperative]
	{
		a = foo( 2, 1 );
		return = a;
	}
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1102_T05_Function_outside_Any_Block()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"def foo : int( a:int, b : int )
{
    return = a * b;
}
a = 3.5;
b = 3.5;
[Associative]
{
	a = 3.5;
	[Imperative]
	{
		a = foo( 2, 1 );
	}
	b = 
	[Imperative]
	{
		a = foo( 2, 1 );
		return = a;
	}
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1103_T06_Function_Imp_Inside_Assoc()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"a;b;
[Associative]
{
	def foo : int( a:int, b : int )
	{
		return = a * b;
	}
	a = 3.5;
	b = 3.5;
	[Imperative]
	{
		a = foo( 2, 1 );
	}
	b = 
	[Imperative]
	{
		c = foo( 2, 1 );
		return = c;
	}
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1104_T07_Function_Assoc_Inside_Imp()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"a;b;
[Imperative]
{
	def foo : int( a:int, b : int )
	{
		return = a * b;
	}
	a = 3.5;
	b = 3.5;
	[Associative]
	{
		a = foo( 2, 1 );
	}
	b = 
	[Associative]
	{
		c = foo( 2, 1 );
		return = c;
	}
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1105_T08_Function_From_Inside_Class_Constructor()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"def add_1 : int( a:int )
{
	return = a + 1;
}
class A
{
	a : var;
	constructor CreateA ( a1 : int )
	{
		a = add_1(a1);
	}
}
a;b;
[Imperative]
{
	arg = 1;
	b = 1;
	
    [Associative]
	{
		A_inst = A.CreateA( arg );
		a = A_inst.a;
	}
    [Associative]
    {
        b = [Imperative]
        {
            A_inst = A.CreateA( arg );
            return = A_inst.a;
        }
    }
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1106_T09_Function_From_Inside_Class_Constructor()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"def add_1 : int( a:int )
{
	return = a + 1;
}
class A
{
	a : var;
	constructor CreateA ( a1 : int )
	{
		a = add_1(a1);
	}
}
a;b;
[Associative]
{
	arg = 1;
	b = 1;
    [Imperative]
    {
        [Associative]
        {
            A_inst = A.CreateA( arg  );
            a = A_inst.a;
        }
    }
	b = 
	[Imperative]
	{
		A_inst = A.CreateA( arg  );
		return = A_inst.a;
	}
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1107_T100_Class_inheritance_replication()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class A
{
        def Test : int[] (a : A)
        { return = {2}; }
}
class B extends A
{
        def Test : int (b : B)
        { return = 5; }
}
class C extends B
{
}
 
c = C.C();
b = c.Test(c);
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1108_T100_Class_inheritance_replication_2()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class A
{
        def Test : int(b : B)
        { return = 2; }
}
class B extends A
{
        def Test : int[] (a : A)
        { return = {5}; }
}
class C extends B
{
}
 
c = C.C();
result = c.Test(c);
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1109_T10_Function_From_Inside_Class_Method()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"def add_1 : int( a:int )
{
	return = a + 1;
}
class A
{
	a : var;
	constructor CreateA ( a1 : int )
	{
		a = add_1(a1);
	}
	def add1 : int(  )
    {
	    return = add_1(a);
    }
}
a;b;
[Associative]
{
	arg = 1;
	b = 1;
    [Imperative]
    {
        [Associative]
        {
            A_inst = A.CreateA( arg  );
            a = A_inst.add1();
        }
    }
	b = 
	[Imperative]
	{
		A_inst = A.CreateA( arg  );
		return = A_inst.add1();
	}
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1110_T11_Function_From_Inside_Class_Method()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"def add_1 : int( a:int )
{
	return = a + 1;
}
class A
{
	a : var;
	constructor CreateA ( a1 : int )
	{
		a = add_1(a1);
	}
	def add1 : int(  )
    {
	    return = add_1(a);
    }
}
a;b;
[Imperative]
{
	arg = 1;
	b = 1;
	[Associative]
	{
		A_inst = A.CreateA( arg );
		a = A_inst.add1();
	}
    b = [Associative]
    {
        return = [Imperative]
        {
            A_inst = A.CreateA( arg );
            return = A_inst.add1();
        }
    }
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1111_T12_Function_From_Inside_Function()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"def add_1 : double( a:double )
{
	return = a + 1;
}
a;b;
[Associative]
{
	def add_2 : double( a:double )
	{
		return = add_1( a ) + 1;
	}
	
	a = 1.5;
	b = add_2 (a );
	
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1112_T13_Function_From_Inside_Function()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"a;b;
def add_1 : double( a:double )
{
	return = a + 1;
}
[Imperative]
{
	def add_2 : double( a:double )
	{
		return = add_1( a ) + 1;
	}
	
	a = 1.5;
	b = add_2 (a );
	
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1113_T14_Function_Recursive_imperative()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"a;b;
[Imperative]
{
	def factorial : int( n : int )
	{
		if ( n > 1 ) 
		{
		    return = n * factorial ( n - 1 );
		}
		else 
		{
		    return = 1;
		}		
	}
	
	a = 3;
	b = factorial (a );
	
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1114_T15_Function_From_Parallel_Blocks()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"a;b;
[Imperative]
{
	def factorial : int( n : int )
	{
		if ( n > 1 ) 
		{
		    return = n * factorial ( n - 1 );
		}
		else 
		{
		    return = 1;
		}		
	}
	
	
	
}
[Imperative]
{
	a = 3;
	b = factorial (a );
	
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1115_T16_Function_From_Parallel_Blocks()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"a;b;
[Imperative]
{
	def factorial : int( n : int )
	{
		if ( n > 1 ) 
		{
		    return = n * factorial ( n - 1 );
		}
		else 
		{
		    return = 1;
		}		
	}
	
	
	
}
[Associative]
{
	a = 3;
	b = factorial (a );
	
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1116_T17_Function_From_Parallel_Blocks()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"a;b;
[Associative]
{
	def foo : int( n : int )
	{
		return = n * n;	
	}
	
	
	
}
[Associative]
{
	a = 3;
	b = foo (a );
	
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1117_T18_Function_Recursive_associative()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"a;b;
[Imperative]
{
	def factorial : int( n : int )
	{
		if ( n > 1 ) 
		{
		    return = n * factorial ( n - 1 );
		}
		else 
		{
		    return = 1;
		}		
	}
	
	a = 3;
	b = factorial (a );
	
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1118_T19_Function_From_Imperative_While_And_For_Loops()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"x;y;
[Imperative]
{
	def foo : int( n : int )
	{
		return = n * n;	
	}
	
	a = { 0, 1, 2, 3, 4, 5 };
	x = 0;
	for ( i in a )
	{
	    x = x + foo ( i );
	}
	
	y = 0;
	j = 0;
	while ( a[j] <= 4 )
	{
	    y = y + foo ( a[j] );
		j = j + 1;
	}
	
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1119_T20_Function_From_Imperative_If_Block()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"x;y;z;
[Associative]
{
	def foo : int( n : int )
	{
		return = n * n;	
	}
	
	[Imperative]
	{
	
		a = { 0, 1, 2, 3, 4, 5 };
		x = 0;
		for ( i in a )
		{
			x = x + foo ( i );
		}
		
		y = 0;
		j = 0;
		while ( a[j] <= 4 )
		{
			y = y + foo ( a[j] );
			j = j + 1;
		}
		
		z = 0;
		
		if( x == 55 )
		{
		    x = foo (x);
		}
		
		if ( x == 50 )
		{
		    x = 2;
		}
		elseif ( y == 30 )
		{
		    y = foo ( y );
		}
		
		if ( x == 50 )
		{
		    x = 2;
		}
		elseif ( y == 35 )
		{
		    x = 3; 
		}
		else
		{
		    z = foo (5);
		}
	}
	
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1120_T21_Function_From_Nested_Imperative_Loops()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"x;y;
[Imperative]
{
	def foo : int( n : int )
	{
		return = n ;	
	}
	
	a = { 0, 1, 2, 3, 4, 5 };
	x = 0;
	for ( i in a )
	{
	    for ( j in a )
		{
		    x = x + foo ( j );
		}
	}
	
	y = 0;
	j = 0;
	while ( j <= 4 )
	{
	    p = 0;
		while ( p <= 4)
		{
		    y = y + foo ( a[p] );
			p = p + 1;
		}
		j = j + 1;
	}
	
	if( x < 100 )
	{
	    if ( x > 20 )
		{
		    x = x + foo (x );
		}
	}
	
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1121_T22_Function_Call_As_Instance_Arguments()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"A1;A2;
class A
{
	a : var;
	constructor CreateA ( a1 : int )
	{
		a = a1;
	}
	
	constructor CreateB ( a1 : double )
	{
		a = a1;
	}
}
[Associative]
{
	def foo : int( n : int )
	{
		return = n ;	
	}
	
	def foo2 : double( n : double )
	{
		return = n ;	
	}
	
	A1 = A.CreateA(foo(foo(1))).a;	
	A2 = A.CreateB(foo2(foo(1))).a;
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1122_T23_Function_Call_As_Function_Call_Arguments()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"c1;
[Associative]
{
	def foo : double ( a : double , b :double )
	{
		return = a + b ;	
	}
	
	def foo2 : double ( a : double , b :double )
	{
		return = foo ( a , b ) + foo ( a, b );	
	}
	
	a1 = 2;
	b1 = 4;
	c1 = foo2( foo (a1, b1 ), foo ( a1, foo (a1, b1 ) ) );
	
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1123_T24_Function_Call_In_Range_Expression()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"a1;a2;a3;a4;
[Associative]
{
	def foo : double ( a : double , b :double )
	{
		return = a + b ;	
	}
	
	a1 = 1..foo(2,3)..foo(1,1);
	a2 = 1..foo(2,3)..#foo(1,1);
	a3 = 1..foo(2,3)..~foo(1,1);
	a4 = { foo(1,0), foo(1,1), 3 };
	
}
[Imperative]
{
	def foo_2 : double ( a : double , b :double )
	{
		return = a + b ;	
	}
	
	a1 = 1..foo_2(2,3)..foo_2(1,1);
	a2 = 1..foo_2(2,3)..#foo_2(1,1);
	a3 = 1..foo_2(2,3)..~foo_2(1,1);
	a4 = { foo_2(1,0), foo_2(1,1), 3 };
	
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1124_T25_Function_Call_In_Mathematical_And_Logical_Expr()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"a1;a2;a3;a4;
[Associative]
{
	def foo : double ( a : double , b :double )
	{
		return = a + b ;	
	}
	
	a1 = 1 + foo(2,3);
	a2 = 2.0 / foo(2,3);
	a3 = 1 && foo(2,2);	
}
[Imperative]
{
	def foo_2 : double( a : double , b :double )
	{
		return = a + b ;	
	}
	
	a1 = 1 + foo_2(2,3);
	a2 = 2.0 / foo_2(2,3);
	a3 = 1 && foo_2(2,2);
	a4 = 0;
	
	if( foo_2(1,2) > foo_2(1,0) )
	{
	    a4 = 1;
	}
	
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1125_T26_Function_Call_In_Mathematical_And_Logical_Expr()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"x;a4;
[Imperative]
{
	def foo_2 : double ( a : double , b :double )
	{
		return = a + b ;	
	}
	a4 = 0;
	if( foo_2(1,2) < foo_2(1,0) )
	{
	    a4 = 1;
	}
	elseif( foo_2(1,2) && foo_2(1,0) )
	{
	    a4 = 2;
	}
	
	x = 0;	
	while (x < foo_2(1,2))
	{
	    x = x + 1;
	}
	
	c = { 0, 1, 2 };
	for (i in c )
	{
		if( foo_2(1,2) > foo_2(1,0) )
		{
		    x = x + 1;
		}
	}
	
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1126_T27_Function_Call_Before_Declaration()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"[Associative]
{ 
	def Level1 : int (a : int) 
	{  
		return = Level2(a+1); 
	}  
	def Level2 : int (a : int) 
	{  
		return = a + 1; 
	} 
	input = 3; 
	result = Level1(input); 
}
[Imperative]
{ 
	a = foo(1); 
	def foo : int (a : int)
	{
		return = a + 1; 
	}
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1127_T28_Function_Arguments_Declared_Before_Function_Def()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"result = [Associative]
{ 
	a = 0;
	b = 1;
	def foo : int (a : int, b: int)
	{
		return = a + b; 
	}
	
	result = foo( a, b); 
	return = result;
}
result2 = 
[Imperative]
{ 
	a = 3;
	b = 4;
	def foo : int (a : int, b: int)
	{
		return = a + b; 
	}
	
	result2 = foo( a, b); 
	return = result2;
}
result3 = 
[Associative]
{ 
	a = 5;
	b = 6;
	result3 = [Imperative]
	{
		def foo : int (a : int, b: int)
		{
			return = a + b; 
		}
		
		result3 = foo( a, b); 
		return = result3;
	}
	return = result3;
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1128_T29_Function_With_Different_Arguments()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"y;
[Imperative]
{ 
	 def foo : double ( a : int, b : double, c : bool, d : int[], e : double[][], f:int[]..[], g : bool[] )
	 {
	     x = -1;
		 if ( c == true && g[0] == true)
		 {
		     x = x + a + b + d[0] + e[0][0];
		 }
		 else
		 {
		     x = 0;
		 }
         return  = x;
	 }
	 
	 a = 1;
	 b = 1;
	 c = true;
	 d = { 1, 2 };
	 e = { { 1, 1 }, {2, 2 } } ;
	 f = { {0, 1}, 2 };
	 g = { true, false };
	 
	 y = foo ( a, b, c, d, e, f, g );
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1129_T30_Function_With_Mismatching_Return_Type()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"b1;
[Imperative]
{ 
	 def foo1 : double ( a : double )
	 {
	    return = true;
	 }
	 
	 dummyArg = 1.5;
	
	b1 = foo1 ( dummyArg );
	
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1130_T31_Function_With_Mismatching_Return_Type()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"b2;
[Imperative]
{ 
	 def foo2 : double ( a : double )
	 {
	    return = 5;
	 }
	 
	dummyArg = 1.5;
	
	b2 = foo2 ( dummyArg );
	
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1131_T32_Function_With_Mismatching_Return_Type()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"b2;
[Imperative]
{ 
	 def foo3 : int ( a : double )
	 {
	    return = 5.5;
	 }
	 
	dummyArg = 1.5;
	
	b2 = foo3 ( dummyArg );
	
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1132_T33_Function_With_Mismatching_Return_Type()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class A
{
    a : int;
	constructor A1(a1 : int)
	{
	    a = a1;
	}
}
b2;
[Imperative]
{ 
	 def foo3 : int ( a : double )
	 {
	    temp = A.A1(1);
		return = temp;
	 }
	 
	dummyArg = 1.5;
	
	b2 = foo3 ( dummyArg );	
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1133_T34_Function_With_Mismatching_Return_Type()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"b1;
[Associative]
{ 
	 def foo1 : double ( a : double )
	 {
	    return = true;
	 }
	 
	 dummyArg = 1.5;
	
	b1 = foo1 ( dummyArg );
	
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1134_T35_Function_With_Mismatching_Return_Type()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"b2;
[Associative]
{ 
	 def foo2 : double ( a : double )
	 {
	    return = 5;
	 }
	 
	dummyArg = 1.5;
	
	b2 = foo2 ( dummyArg );
	
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1135_T36_Function_With_Mismatching_Return_Type()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"b2;
[Associative]
{ 
	 def foo3 : int ( a : double )
	 {
	    return = 5.5;
	 }
	 
	dummyArg = 1.5;
	
	b2 = foo3 ( dummyArg );
	
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1136_T37_Function_With_Mismatching_Return_Type()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class A
{
    a : int;
	constructor A1(a1 : int)
	{
	    a = a1;
	}
}
b2;
[Associative]
{ 
	 def foo3 : int ( a : double )
	 {
	    temp = A.A1(1);
		return = temp;
	 }
	 
	dummyArg = 1.5;
	
	b2 = foo3 ( dummyArg );	
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1137_T38_Function_With_Mismatching_Return_Type()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"b2;
[Associative]
{ 
	 def foo3 : int[] ( a : double )
	 {
	    return = a;
	 }
	 
	dummyArg = 1.5;
	
	b2 = foo3 ( dummyArg );	
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1138_T39_Function_With_Mismatching_Return_Type()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"b2;
[Associative]
{ 
	 def foo3 : int ( a : double )
	 {
	    return = {1, 2};
	 }
	 
	dummyArg = 1.5;
	
	b2 = foo3 ( dummyArg );	
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1139_T40_Function_With_Mismatching_Return_Type()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"[Associative]
{ 
	 def foo3 : int[][] ( a : double )
	 {
	    return = { {2.5}, {3.5}};
	 }
	 
	dummyArg = 1.5;
	
	b2 = foo3 ( dummyArg );	
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1140_T41_Function_With_Mismatching_Return_Type()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"[Associative]
{ 
	 def foo3 : int[][] ( a : double )
	 {
	    return = { {2.5}, 3};
	 }
	 
	dummyArg = 1.5;
	
	b2 = foo3 ( dummyArg );	
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1141_T42_Function_With_Mismatching_Return_Type()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"b2;
[Associative]
{ 
	 def foo3 : bool[]..[] ( a : double )
	 {
	    return = { {2}, 3};
	 }
	 
	dummyArg = 1.5;
	
	b2 = foo3 ( dummyArg );	
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1142_T43_Function_With_Matching_Return_Type()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"b2;
[Associative]
{ 
	 def foo3 : int[]..[] ( a : double )
	 {
	    return = { { 0, 2 }, { 1 } };
	 }
	 
	dummyArg = 1.5;
	
	b2 = foo3 ( dummyArg )[0][0];	
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1143_T44_Function_With_Null_Argument()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"b2;
[Imperative]
{ 
	 def foo : double ( a : double )
	 {
	    return = 1.5;
     }
	
	 b2 = foo ( null );	
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1144_T45_Function_With_Mismatching_Argument_Type()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"b2;
[Associative]
{ 
	 def foo : double ( a : double )
	 {
	    return = 1.5;
     }
	
	 b2 = foo ( 1 );	
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1145_T46_Function_With_Mismatching_Argument_Type()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"c;
[Imperative]
{ 
	 def foo : double ( a : int )
	 {
	    return = 1.5;
     }
	
	 b2 = foo ( 1.5);
     c = 3;	 
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1146_T47_Function_With_Mismatching_Argument_Type()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"c;
[Associative]
{ 
	 def foo : double ( a : double )
	 {
	    return = 1.5;
     }
	
	 b2 = foo ( true);	
	 c = 3;	
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1147_T48_Function_With_Mismatching_Argument_Type()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"c;
class A
{
    a : int;
	constructor A1(a1 : int)
	{
	    a = a1;
	}
}
[Associative]
{ 
	 def foo : double ( a : int )
	 {
	    return = 1.5;
     }
	 a = A.A1(1);
	 b2 = foo ( a);	
	 c = 3;	
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1148_T49_Function_With_Matching_Return_Type()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"c;
class A
{
    a : int;
	constructor A1(a1 : int)
	{
	    a = a1;
	}
}
[Associative]
{ 
	 def foo : A ( x : A )
	 {
	    return = x;
     }
	 aa = A.A1(1);
	 b2 = foo ( aa).a;
	 c = 3;	
	 
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1149_T50_Function_With_Mismatching_Argument_Type()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"c;
[Associative]
{ 
	 def foo : double ( a : int[] )
	 {
	    return = 1.5;
     }
	 aa = { };
	 b2 = foo ( aa );	
	 c = 3;	
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1150_T51_Function_With_Mismatching_Argument_Type()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"c;
[Associative]
{ 
	 def foo : double ( a : double[] )
	 {
	    return = 1.5;
     }
	 aa = {1, 2 };
	 b2 = foo ( aa );	
	 c = 3;	
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1151_T52_Function_With_Mismatching_Argument_Type()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"c;
[Associative]
{ 
	 def foo : double ( a : double[] )
	 {
	    return = 1.5;
     }
	 aa = 1.5;
	 b2 = foo ( aa );	
	 c = 3;	
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1152_T53_Function_Updating_Argument_Values()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"aa;b2;c;
[Associative]
{ 
	 def foo : double ( a : double )
	 {
	    a = 4.5;
		return = a;
     }
	 aa = 1.5;
	 b2 = foo ( aa );	
	 c = 3;	
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1153_T54_Function_Updating_Argument_Values()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"aa;b2;c;
[Imperative]
{ 
	 def foo : double ( a : double )
	 {
	    a = 4.5;
		return = a;
     }
	 aa = 1.5;
	 b2 = foo ( aa );	
	 c = 3;	
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1154_T55_Function_Updating_Argument_Values()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"aa;b2;c;
[Imperative]
{ 
	 def foo : int ( a : double )
	 {
	    a = 5;
		return = a;
     }
	 aa = 5.0;
	 b2 = foo ( aa );	
	 c = 3;	
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1155_T56_Function_Updating_Argument_Values()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"aa;bb;c;
[Associative]
{ 
	 def foo : int[] ( a : int[] )
	 {
	    a[0] = 0;
		return = a;
     }
	 aa = { 1, 2 };
	 bb = foo ( aa );	
	 
	 c = 3;	
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1156_T57_Function_Using_Local_Var_As_Same_Name_As_Arg()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"aa;bb;c;
[Associative]
{ 
	 def foo : int ( a : int )
	 {
	    a = 3;
		b = a + 1;
		return = b;
     }
	 
	 aa = 1;
	 bb = foo ( aa );
     c = 3;	 
	
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1157_T58_Function_With_No_Argument()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"c1;c2;
     def foo : int (  )
	 {
	    return = 3;
     }
	 
	 [Associative]
	 { 
		c1 = foo();	
     }
	 
	 [Imperative]
	 { 
		c2 = foo();	
     }
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1158_T59_Function_With_No_Return_Stmt()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"c;
     def foo : int ( a : int )
	 {
	    b = a + 1;
     }
	 
	 [Associative]
	 { 
		c = foo(1);	
     }
	 
	 
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1159_T60_Function_With_No_Return_Stmt()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"c;
     def foo : int ( a : int )
	 {
	    b = a + 1;
     }
	 
	 [Imperative]
	 { 
		c = foo(1);	
     }
	 
	 
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1160_T61_Function_With_Void_Return_Stmt()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"[Associative]
{
	 a = 1;
	 [Imperative]
	 {
		def foo : void  ( )
		{
			a = 2;		
		}
		foo();
        b = a;	    
	 }
}
	 
	 
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1161_T62_Function_Modifying_Globals_Values()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"a;b;
[Associative]
{
	 a = 1;
	 [Imperative]
	 {
		def foo : int  ( )
		{
			c = a;
			a = 2;	
                        return = c + 1;			
		}
		b = foo();
            
	 }
}
x = 1;
def foo2 : int  ( )
{
    y = x;
    x = 2;	
    return = y + 1;			
}
z = foo2();
	 
	 
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1162_T63_Function_Modifying_Globals_Values()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"x = [Imperative]
{
	a = 1;
	def foo : int  ( )
	{
		c = a;
		a = 2;	
                return = c + 1;			
	}
	b = foo();
        return = { a, b };    
}
	 
	 
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1163_T64_Function_Modifying_Globals_Values_Negative()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"a;b;c;
[Imperative]
{
	def foo : int  ( )
	{
		c = a;
		a = 2;	
                return = c + 1;			
	}
	a = 1;
	b = foo();
	c = 3;
            
}
	 
	 
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1164_T65_Function_With_No_Return_Type()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"a;b;
[Imperative]
{
	def foo (  )
	{
		return = true;			
	}
	
	a = foo();
	b = 3;
            
}
	 
	 
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1165_T66_Function_Returning_Null()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"a;b;c;
[Imperative]
{
	def foo : int ( a : int )
	{
		c = d + a;
        return = c;		
	}
	
	a = 1;
	b = foo(a);
	c = b + 2;
            
}
	 
	 
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1166_T67_Function_Returning_Collection()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"a;b;
[Imperative]
{
	def foo : int[] ( a : int )
	{
		c = { a + 1, a + 2.5 };
        return = c;		
	}
	
	a = 1;
	b = foo(a);
            
}
	 
	 
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1167_T68_Function_Returning_Null()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"a;b;
[Imperative]
{
	def foo : int[] ( a : int )
	{
		c = { a + 1, a + 2.5 };
        return = null;		
	}
	
	a = 1;
	b = foo(a);
            
}
	 
	 
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1168_T69_Function_Name_Checking()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"[Imperative]
{
	def foo : int ( a : int )
	{
		foo = 3;
		return  = a + foo;
	}
	
	a = 1;
	foo = 2;
	b = foo(a);           
}
	 
	 
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1169_T70_Function_Name_Checking()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"[Associative]
{
	def foo : int ( a : int )
	{
		foo = 4;
		return  = a + foo;
	}
    foo = 1;
	[Imperative]
	{
		def foo : int ( a : int )
		{
			foo = 3;
			return  = a + foo;
		}
		
		a = 1;
		foo = 2;
		b = foo(a);           
	}
}
	 
	 
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1170_T71_Function_Name_Checking()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"[Associative]
{
    foo = 1;
}
[Imperative]
{
	def foo : int ( a : int )
	{
		foo = 3;
		return  = a + foo;
	}
		
	a = 1;
	foo = 2;
	b = foo(a);  
    c = foo + 1;	
}
	 
	 
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1171_T72_Function_Name_Checking()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class foo
{
    a : int;
	constructor foo ( b : int )
	{
	    a = b;
	}
}
[Associative]
{
    def foo : int ( a : int )
	{
		foo = 3;
		return  = a + foo;
	}
	foo = 1;
	x = foo(foo);
	y = foo.foo(foo);
	z = y.a;
}
	 
	 
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1172_T73_Function_Name_Checking_Negative()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"[Associative]
{
    def _foo : int ( a : int )
	{
		return  = a + 1;
	}
	
	x = _foo(1);
	
}
[Associative]
{
    def 12foo : int ( a : int )
	{
		return  = a + 1;
	}
	
	x = 12foo(1);
	
}
	 
	 
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1173_T74_Function_With_Simple_Replication_Associative()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"x;y;
[Associative]
{
    def foo : int ( a : int )
	{
		return  = a + 1;
	}
	
	x = { 1, 2, 3 };
	y = foo(x);
	
}
	 
	 
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1174_T74_Function_With_Simple_Replication_Imperative()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"x;y;
[Imperative]
{
    def foo : int ( a : int )
	{
		return  = a + 1;
	}
	
	x = { 1, 2, 3 };
	y = foo(x);
	
}	 
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1175_T75_Function_With_Replication_In_Two_Args()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"y;
[Associative]
{
    def foo : int ( a : int, b : int )
	{
		return  = a + b;
	}
	
	x1 = { 1, 2, 3 };
	x2 = { 1, 2, 3 };
	
	y = foo ( x1, x2 );
	
}
	 
	 
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1176_T76_Function_With_Replication_In_One_Arg()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"y;
[Associative]
{
    def foo : int ( a : int, b : int )
	{
		return  = a + b;
	}
	
	x1 = { 1, 2, 3 };
	x2 = 1;
	
	y = foo ( x1, x2 );
	
}
	 
	 
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1177_T77_Function_With_Simple_Replication_Guide()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"a1;a2;a3;a4;
[Associative]
{
    def foo : int ( a : int, b : int )
	{
		return  = a + b;
	}
	
	x1 = { 1, 2 };
	x2 = { 1, 2 };
	y = foo( x1<1> , x2<2> );
	a1 = y[0][0];
	a2 = y[0][1];
	a3 = y[1][0];
	a4 = y[1][1];
	
}
	 
	 
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1178_T78_Function_call_By_Reference()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"c;d;
[Associative]
{
    def foo : int ( a : int, b : int )
	{
		a = a + b;
		b = 2;
		return  = a + b;
	}
	
	a = 1;
	b = 2;
	c = foo (a, b );
	d = a + b;
	
}
	 
	 
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1179_T79_Function_call_By_Reference()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"c;d;
[Imperative]
{
    def foo : int ( a : int, b : int )
	{
		a = a + b;
		b = 2 * a;
		return  = a + b;
	}
	
	a = 1;
	b = 2;
	c = foo (a, b );
	d = a + b;
	
}
	 
	 
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1180_T80_Function_call_By_Reference()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"[Associative]
{
    def foo : int ( a : int, b : int )
	{
		c = [Imperative]
		{
		    d = 0;
			if( a > b )
				d = 1;
			return = d;	
		}
		a = a + c;
		b = b + c;
		return  = a + b;
	}
	
	a = 2;
	b = 1;
	c = foo (a, b );
	d = a + b;
	
}
	 
	 
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1181_T81_Function_Calling_Imp_From_Assoc()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"b;
[Associative]
{
    def foo : int ( a : int )
	{
		c = [Imperative]
		{
		    d = 0;
			if( a > 1 )
			{
				d = 1;
			}
			return = d;	
		}
		return  = a + c;
	}
	
	a = 2;
	b = foo (a );	
}
	 
	 
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1182_T82_Function_Calling_Assoc_From_Imp()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"b;
[Imperative]
{
    def foo : int ( a : int )
	{
		d = 0;
		if( a > 1 )
	    {
		     d = [Associative]
			 {
			     return = a + 1;
			 }
		}
		else
		{
		    d = a + 2;
		}
		return  = a + d;
	}
	
	a = 2;
	b = foo (a );	
}
	 
	 
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1183_T83_Function_With_Null_Arg()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"b;
def foo:int ( a : int )
{	
	return = a;
}
[Associative]
{
	b = foo( null );
}
	";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1184_T84_Function_With_User_Defined_Class()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class A
{
    i : int;
	constructor A ( x : int )
	{
	    i = x;
	}
}
def foo : A ( a : A )
{
    a1 = a.i;
	b1 = A.A(a1+1);
	return = b1;
}
x = A.A(1);
y = foo (x);
z = y.i;";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1185_T85_Function_With_No_Type()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"a11;a21;a31;
a12;a22;a32;
[Imperative]
{
	def foo( a )
	{
		a = a + 1;
		return = a;
	}
	c = { 1,2,3 };
	d = foo ( c ) ;
		
	a11 = d[0];
	a21 = d[1];
	a31 = d[2];
}
[Associative]
{
	def foo( a )
	{
		a = a + 1;
		return = a;
	}
	c = { 1,2,3 };
	d = foo ( c ) ;
		
	a12 = d[0];
	a22 = d[1];
	a32 = d[2];
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1186_T86_Function_With_For_Loop()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"a1;a2;a3;
[Imperative]
{	
	def foo: int( a : int )
	{
		for( i in a )		
		{					
		}		
		return = a;	
	}	
	d = { 1,2,3 };	
	//c = foo( d );	
	j = 0;	
	for( i in d )	
	{		
		d[j] = i + 1;		
		j = j + 1;	
	}	
	a1 = d[0];	
	a2 = d[1];	
	a3 = d[2];
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1187_T87_Function_Returning_From_Imp_Block_Inside_Assoc()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"def foo : int( a : int)
{
  temp = [Imperative]
  {
      if ( a == 0 )
      {
          return = 0; 
      }
    return = a ;
  } 
  return = temp;
}
x = foo( 0 );
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1188_T88_Function_With_Collection_Argument()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"def foo : double (arr : double[])
{
    return = 0;
}
arr = {1,2,3,4};
sum = foo(arr);
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1189_T89_Function_With_Replication()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"def foo : double (arr1 : double[], arr2 : double[] )
{
    return  = arr1[0] + arr2[0];
}
arr = {  {2.5,3}, {1.5,2} };
two = foo (arr, arr);
t1 = two[0];
t2 = two[1];
//arr1 = {2.5,3};
//arr2 = {1.5,2};
//two = foo(arr1, arr2);
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1190_T90_Function_PassingNullToUserDefinedType()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class Point
{
	length : int;
	constructor Create(l:int)
	{
		length = l;
	}
	def GetLength : int()
	{
		return = length;
	}
}
def GetPointLength : int(p:Point)
{
	return = p.GetLength();
}
p = Point.Create(2);
testP = GetPointLength(p);
p2 = null;
testNull = GetPointLength(p2);";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1191_T91_Function_With_Default_Arg()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"def foo:double(x:int = 2, y:double = 5.0)
{
	return = x + y;
}
a = foo();
b = foo(1, 3.0);
c = foo();
d;e;f;
[Imperative]
{
	d = foo();
	e = foo(1, 3.0);
	f = foo();
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1192_T92_Function_With_Default_Arg_Overload()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"def foo:double()
{
	return = 0.0;
}
def foo:double(x : int = 1, y : double = 2.0)
{
	return = x + y;
}
a = foo();
b = foo(3);
c = foo(3.4); // not found, null
d = foo(3, 4.0);
e = foo(1, 2.0, 3); // not found, null
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1193_T93_Function_With_Default_Arg_In_Class()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class Test
{
	a : int = 1;
	b : int = 2;
	c : int = 3;
	constructor Test(k:int, m:int = 4)
	{
		a = k;
		b = m;
	}
	def foo:double(x:int = 2, y:double = 5.0)
	{
		return = x + y + a + b + c;
	}
}
i;j;k;a;b;c;
[Associative]
{
	t = Test.Test(2); // a = 2, b = 4, c = 3
	i = t.foo(); // i = 16.0
	j = t.foo(1, 3.0); // j = 13.0
	k = t.foo(); // k = 16.0
}
[Imperative]
{
	t = Test.Test(2); // a = 2, b = 4, c = 3
	a = t.foo(); // a = 16.0
	b = t.foo(1, 3.0); // b = 13.0
	c = t.foo(); // c = 16.0
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1194_TV00_Function_With_If_Statements()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"a;
[Imperative]
{
	def foo:int( a:int, b:int, c:int )
	{
		if( a < b )
		{
			if( a < c ) 
				return = a;
		}
	
		else if ( b < c ) 
			return = b;
		
		else if (a == b && b == c ) 
			return  = 1;
			
		return = c;
	}
	
	a = foo( -9,3,-7 );
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1195_TV01_Function_With_While_Statements()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"d;
[Imperative]
{
	def foo:int( a:int, b:int)
	{	
		c = 1;
		
		while( b > 0 )
		{
			c = c * a;
			b = b - 1;
		}
	
		return = c;
	}
	
	d = foo( 2,3 );
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1196_TV02_Function_With_For_Statements()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"d;
[Imperative]
{
	def foo:int( a:int )
	{	
		c = { 1,2,3,4,5 };
		temp = 0;
		
		for( i in c )
		{
			if( i == a )
			temp = 1;
			
		}
	
		if(temp) 
			return = a;
		
		return = 0;
	
	}
	
	d = foo( 6 );
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1197_TV03_Function_With_Recursion()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"x;
[Imperative]
{
	def factorial: int( a:int )
	{	
		if(!a)
			return = 1;
		
		if( a < 0 )
			return = 0;
			
		else 
			return = a * factorial( a - 1 );
	}
		x = factorial(5);
}
		";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1198_TV04_Function_With_RangeExpression()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"d;
[Imperative]
{
	def foo:double( a:int )
	{
		b = 2..4..#3;
		
		sum = b[0] + b[1] + b[2];
		
		return = sum + 0.5;
	}
	d = foo( 1 );
}
		";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1199_TV05_Function_With_RangeExpression_2()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"a;d;
[Imperative]
{
	def foo: int( a:int[] )
	{
		sum = 0;
		
		for( i in a )
		{
			sum = sum + i ;
		}
		return = sum;
	}
	a = 2..4..#3;
	
	d = foo( a );
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1200_TV06_Function_With_Logical_Operators()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"a;
[Imperative]
{
	def foo:int( a:int , b:int, c:int )
	{
		if(a > 0 || b > 0 || c > 0)
		{
			if((a > 0 && b < 0)||(a > 0 && c < 0))
				return = a;
			else
				return = 0;
		}
		
		return = 1;
	}
	
	a = foo( 2,3,4 );
}
			
			";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1201_TV07_Function_With_Math_Operators()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"a;
[Imperative]
{
	def math: double(a:double, b:double, c:int)
	{
		if( c == 1 )
		{
			return = a + b;
		}
			if( c == 2 )
		{
			return = a - b;
		}
		
		if( c == 3 )
		{
			return = a * b;
		}
		
		else
			return = a / b;
		
			
	}
	a = 18;
	b = 2;
	c = 1;
	
	a = math(a,b,2+1);
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1202_TV08_Function_With_Outer_Function_Calls()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"x;y;
[Imperative]
{
	def is_negative:int(a :int)
	{
		if( a < 0 )
			return = 1;
			
			return = 0;
	}
	
	def make_negative:int(a :int)
	{
		return = a * -1;
	}
	
	def absolute:int(a :int)
	{
		if(is_negative(a))
			a = make_negative(a);
		
		return = a;
	}
	x = -7;
	x = absolute(x);
	y = absolute(11);
}	
		";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1203_TV09_Function_With_Argument_Update_Imperative()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"e;f;
[Imperative]
{
	def update:int( a:int, b:int )
	{
		a = a + 1;
		b = b + 1;
		return = a + b;
	}
	
	c = 5;
	d = 5;
	e = update(c,d);
	e = c;
	f = d;
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1204_TV101_Indexing_IntoArray_InFunctionCall_1463234()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"def foo()
{
return = {1,2};
}
t = foo()[0];";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1205_TV101_Indexing_IntoArray_InFunctionCall_1463234_2()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"t;
[Imperative]
{
def foo()
{
return = {1,2};
}
t = foo()[0];
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1206_TV101_Indexing_Intoemptyarray_InFunctionCall_1463234_3()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"def foo()
{
return = {};
}
t = foo()[0];";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1207_TV101_Indexing_IntoNested_FunctionCall_1463234_5()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"
	def foo()
	{
		return = {foo2()[0],foo2()[1]};
	}
def foo2()
{
return = {1,2};
}
a=test.test()[0];
t = foo()[0];";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1208_TV101_Indexing_Intosingle_InFunctionCall_1463234_()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"def foo()
{
return = {1,2};
}
t = foo()[0];";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1209_TV101_Indexing_Intosingle_InFunctionCall_1463234_2()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"def foo()
{
return = {1};
}
t = foo()[0];";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1210_TV101_Indexing_Intovariablenotarray_InFunctionCall_1463234_4()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"def foo()
{
return = 1;
}
t = foo()[0];";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1211_TV101_Indexing_Into_classCall_1463234_6()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class test{
	constructor test()
	{
	}
	def foo()
	{
		return = {1,2};
	}
}
a=test.test();
t = a.foo()[0];";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1212_TV101_Indexing_Into_classCall_1463234_7()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class test{
	constructor test()
	{
	}
	def foo()
	{
		return = {1,2};
	}
}
t;
[Imperative]
{
a=test.test();
t = a.foo()[0];
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1213_TV102_GlobalVariable_Function_1466768()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class Point
{
X : var;
Y: var;
Z: var;
	constructor Point ( x, y, z )
	{
		X = x;
		Y = y;
		Z = z;
	}
	def foo ( p: Point)
	{
		return = Point.Point( (p.X), (p.Y), (p.Z) );
	}
}
def func1(p1 : Point, p2 : Point)
{
	p1 = p1.foo(p2);
	return = null;
}
p1 = Point.Point ( 0,0,0);
p2 = Point.Point ( 1, 1, 1 );
dummy = func1(p1, p2);
xx = p1.X; // expected 0, received 0
yy = p1.Y; // expected 0, received 0
zz = p1.Z; // expected 0, received 0
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1214_TV102_GlobalVariable_Function_1466768_1()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class Point
{
X : var;
Y: var;
Z: var;
	constructor Point ( x, y, z )
	{
		X = x;
		Y = y;
		Z = z;
	}
	def foo ( p: Point)
	{
		return = Point.Point( (p.X), (p.Y), (p.Z) );
	}
}
def func1()
{
	p1 = p1.foo(p2);
	return = null;
}
p1 = Point.Point ( 0,0,0);
p2 = Point.Point ( 1, 1, 1 );
dummy = func1();
xx = p1.X; // expected 0, received 0
yy = p1.Y; // expected 0, received 0
zz = p1.Z; // expected 0, received 0
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1215_TV102_GlobalVariable_Function_1466768_2()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class Point
{
X : var;
Y: var;
Z: var;
constructor Point ( x, y, z )
{
X = x;
Y = y;
Z = z;
}
def foo ( p: Point)
{
return = Point.Point( (p.X), (p.Y), (p.Z) );
}
}
def func1(pts : Point[])
{
pts[1] = pts[0];
return = null;
}
p1 = Point.Point ( 0,0,0);
p2 = Point.Point ( 1, 1, 1 );
p = { p1, p2 };
xx = p[1].X;
yy = p[1].Y;
zz = p[1].Z;
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1216_TV103_Defect_1467149()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class surf
{
	a:double;
	constructor surf(c:double)
	{
		a=1;
	}
}
convert={surf.surf(1..2), surf.surf(3)};
def prop(test:surf)
{
	return= test.a;
}
b=prop(convert);
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1217_TV104_Defect_1467112()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class A
{ 
    public x : var ;    
    
    public def foo1 (a)
    {
      return = 1;
    } 
    
}
class B extends A
{
    public def foo1 (a)
    {
        return = 2;
    }  
        
        
}
class C extends B
{
    public def foo1 (a)
    {
        return = 3;
    }  
        
        
}
b = C.C();
b1 = b.foo1(1);
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1218_TV10_Function_With_Class_Instances()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"b;
class A
{
	a : var;
	constructor CreateA ( a1 : int )
	{
		a = a1;
	}
	def add1 : int(  )
    {
	    return = a + 1;
    }
}
	def foo:int( a : int )
	{
		A1 = A.CreateA( a );
		return = A1.add1();
	}
[Imperative]
{
	b = foo(1);
}
	
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1219_TV11_Function_Update_Local_Variables()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"r;
[Imperative]
{
	def foo:int ( a : int )
	{
		b = a + 2.5;
		c = true;
		c = a;
		d = c + b;
		return = d;
	}
	
	r = foo(1);
	r = b;
}
	";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1220_TV12_Function_With_Argument_Update_Associative()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"e;f;
[Associative]
{
	def update:int( a:int, b:int )
	{
		a = a + 1;
		b = b + 1;
		return = a + b;
	}
	
	c = 5;
	d = 5;
	e = update(c,d);
	e = c;
	f = d;
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1221_TV13_Empty_Functions_Imperative()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"b;
[Imperative]
{
	def foo:int ( a : int )
	{
	}
	
	b = foo( 1 );
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1222_TV14_Empty_Functions_Associative()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"b;
[Associative]
{
	def foo:int ( a : int )
	{
	}
	
	b = foo( 1 );
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1223_TV15_Function_No_Brackets()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"b;
[Imperative]
{
	def foo:int ( a : int ) 
	return = a + 1;
	
	b = foo(1);
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1224_TV16_Function_With_No_Return_Statement()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"b;
	def foo : int( a : int )
	{
		a = a + 1;
	}
	[Imperative]
	{
		b = foo( 1 );
	}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1225_TV17_Function_Access_Local_Variables_Outside()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"
	def foo: int ( a : int )
	{
		b = a + 1;
		c = a * 2;
		return = a;
	}
e;f;
[Imperative]
{	
	d = foo( 1 );
	e = b;
	f = c;
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1226_TV18_Function_Access_Global_Variables_Inside()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"	global = 5;
	global2 = 6;
	d;
	
	def foo: int ( a : int )
	{
		b = a + global;
		c = a * 2 * global2;
		return = b + c;
	}
[Imperative]
{	
	d = foo( 1 );
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1227_TV19_Function_Modify_Global_Variables_Inside()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"	global = 5;
	e;
	
	def foo: int ( a : int )
	{
		global = a + global;
		
		return = a;
	}
[Imperative]
{	
	d = foo( 1 );
	e = global;
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1228_TV20_Function_With_Illegal_Syntax_1()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"b;
[Imperative]
{
	def foo:int(a:int)
	{
		return = a + 1:
	}
	
	b = foo( 9 );
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1229_TV21_Function_With_Illegal_Syntax_2()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"b;
[Imperative]
{
	def foo : int(a ; int)
	{
		return = a + 1;
	}
	
	b = foo( 9 );
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1230_TV22_Function_With_Class_Object_As_Argument()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"b;
class A
{
	a : var;
	constructor CreateA ( a1 : int )
	{
		a = a1;
	}
	def add1 : int(  )
    {
	    return = a + 1;
    }
}
def foo:int ( A_Inst : A )
{	
	return = A_Inst.add1();
}
[Associative]
{
	b = foo( A.CreateA( 1 ) );
}
	";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1231_TV23_Defect_1455152()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"c;
d;
def foo : int ( a : int )
{
    b = a + 1;
}	 
[Associative]
{
     c = foo(1);
}
[Imperative]
{
     d = foo(1);
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1232_TV24_Defect_1454958()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"def foo: int( a : int , b : int)
{
	return = a + b;
}
b;c;
[Associative]
{
	b = Foo( 1,2 );
}
[Imperative]
{
	c = foo( 1 );
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1233_TV25_Defect_1454923()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class Temp
{
	a : var;
	
	constructor CreateTemp ( a1 : int )
	{
		a = a1;
	}
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1234_TV26_Defect_1454923_2()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"def function1: int ( a : int, b : int )
{
	return = -1 * (a * b );
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1235_TV27_Defect_1454688()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"a;
[Associative]
{
	a = function1(1,2,3);
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1236_TV28_Defect_1454688_2()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"a;
[Imperative]
{
	a = function(1,2,3);
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1237_TV29_Overloading_Different_Number_Of_Parameters()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"def foo:int ( a : int )
{
	return = a + 1;
}
def foo:int ( a : int, b : int, c: int )
{
	return = a + b + c ;
}
c = foo( 1 );
d = foo( 3, 2, 0 );
a;
[Imperative]
{
	a = foo( 1, 2, 3 );
}	
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1238_TV30_Overloading_Different_Parameter_Types()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"def foo:int ( a : int )
{
	return = 2 * a;
}
def foo:int ( a : double )
{
	return = 2;
}
	b = foo( 2 );
	c = foo(3.4);
d;
[Imperative]
{
	d = foo(-2.4);
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1239_TV31_Overloading_Different_Return_Types()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"def foo: int( a: int )
{
	return = 1;
}
// This is the same definition regardless of return type
def foo: double( a : int )
{
	return = 2.3;
}
b = foo ( 1 );";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1240_TV32_Function_With_Default_Argument_Value()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"def foo : int ( a = 5, b = 5 )
{
	return =  a +  b;
}
c1;c2;c3;c4;
[Imperative]
{
	c1 = foo (  );
	c2 = foo ( 1 );
	c3 = foo ( 1, 2 );
	c4 = foo ( 1, 2, 3 );
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1241_TV32_Function_With_Default_Argument_Value_2()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"def foo  ( a : int = 5, b : double = 5.5, c : bool = true )
{
	return = x = c == true ? a  : b;
}
def foo  ( a : double = 5, b : double = 5.5, c : bool = true )
{
	return = x = c == true ? a  : b;
}
c1;c2;c3;c4;
[Imperative]
{
	c1 = foo (  );
	c2 = foo ( 1 );
	c3 = foo ( 1.5, 2 );
	c4 = foo ( 1, 2, 0 );
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1242_TV32_Function_With_Default_Argument_Value_3()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"def foo  ( a : int, b : double = 5, c : bool = true)
{
	return = x = c == true ? a  : b;
}
def foo2  ( a , b = 5, c = true)
{
	return = x = c == true ? a  : b;
}
c1;c3;c3;c4;
d1 = foo2 (  );
d2 = foo2 ( 1 );
d3 = foo2 ( 2, 3 );
d4 = foo2 ( 4, 5, false );
d5 = 
[Imperative]
{
	c1 = foo (  );
	c2 = foo ( 1 );
	c3 = foo ( 2, 3 );
	c4 = foo ( 4, 5, false );
	return = { c1, c2, c3, c4 };
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1243_TV33_Function_Overloading()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"def foo  ( a : int = 5, b : double = 5.5, c : bool = true )
{
	return = x = c == true ? a  : b;
}
def foo  ( a : double = 6, b : double = 5.5, c : bool = true )
{
	return = x = c == true ? a  : b;
}
c1;c2;c3;c4;
[Imperative]
{
	c1 = foo (  );
	c2 = foo ( 1 );
	c3 = foo ( 1.5, 2 );
	c4 = foo ( 1, 2, 0 );
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1244_TV33_Function_Overloading_2()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"def foo  ( a : int , b : double , c : bool  )
{
	return = a;
}
def foo  ( a : double, b : double , c : int  )
{
	return = b;
}
c4;c5;c6;
[Imperative]
{
	c4 = foo ( 1, 2, 0 );
	c5 = foo ( 1.5, 2.5, 0 );
	c6 = foo ( 1.5, 2.5, true );
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1245_TV33_Overloading_Different_Order_Of_Parameters()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"def foo : int ( a :int, b : double )
{
	return = 2;
}
def foo : int( c : double, d : int )
{
	return = 3;
}
c = foo( 1,2.5 );
d = foo ( 2.5, 1 );
//e = foo ( 2.5, 2.5 );
f = foo ( 1, 2 );
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1246_TV34_Implicit_Conversion_Int_To_Bool()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"b;c;d;
[Imperative]
{
	def foo:int ( a : bool )
	{
		if(a)
			return = 1;
		else
			return = 0;
	}
	
	b = foo( 1 );
	c = foo( 1.5 );
	d = 0;
	if(1.5 == true ) 
	{
	    d = 3;
	}
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1247_TV35_Implicit_Conversion_Int_To_Double()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"def foo : double ( a: double )
{
	return = a + 2.5;
}
	b = foo( 2 );
	c;
[Imperative]
{
	c = foo( 3 );
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1248_TV36_Implicit_Conversion_Return_Type()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"def foo: bool ( a : double, b : double )
{
	return = 0.5;
}
c = foo ( 2.3 , 3 );";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1249_TV37_Overloading_With_Type_Conversion()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"def foo : int ( a : double, b : double )
{
	return = 1;
}
def foo : int ( a : int, b : int )
{
	return = 2;
}
def foo : int ( a : int, b : double )
{
	return = 3;
}
a = foo ( 1,2 );
b = foo ( 2,2 );
c = foo ( 1, 2.3 );
d = foo ( 2.3, 2 );
 ";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1250_TV38_Defect_1449956()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"x;
y;
[Imperative]
{
	def factorial: int( a:int )
	{	
		if(!a)
			return = 1;
		
		if( a < 0 )
			return = 0;
			
		else 
			return = a * factorial( a - 1 );
	}
		x = factorial(5);
		y = factorial(7);
		}
	";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1251_TV39_Defect_1449956_2()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"[Imperative]
{
def recursion: int ( a : int )
{
	if ( a ==0 || a < 0)
		return = 0;
	
	 
		return = a + recursion(a - 1);
}
	x = recursion( 10 );
	y = recursion( -1 );
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1252_TV40_Defect_1449956_3()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"x;y;
[Associative]
{
	def recursion  : int( a : int)
	{
		temp = [Imperative]
		{
			if ( a ==0 || a < 0)
			{
				return = 0;	
			}
			return = a + recursion( a - 1 );
		}		 
		return = temp;
	}
	x = recursion( 4 );
	y = recursion( -1 );
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1253_TV41_Defect_1454959()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"result;
a;
[Associative]
{
 def Level1 : int (a : int)
 {
  return = Level2(a+1);
 }
 
 def Level2 : int (a : int)
 {
  return = a + 1;
 }
 input = 3;
 result = Level1(input); 
}
[Imperative]
{
 
 b = 1;
 a = foo(b);
 def foo : int (a : int)
 {
     return = a + 1;
 }
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1254_TV42_Defect_1454959()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"a;b;c;
def Level1 : int (a : int)
{
    return = Level2(a+1);
}
 
def Level2 : int (a : int)
{
    return = a + 1;
}
input = 3;
result = Level1(input); 
[Associative]
{
    a = Level1(4);
	b = foo (a);
	c = [Imperative]
	{
	    return = foo2( foo (a ) );
	}
}
def foo ( a )
{
    return = a + foo2(a);
}
def foo2 ( a ) 
{
    return = a;
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1255_TV43_Defect_1455143()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"a1;b1;c1;
a2;b2;c2;
[Associative]
{ 
	 def foo1 : int[] ( a : int[] )
	 {
	    a[0] = 0;
            return = a;
         }
	 aa = { 1, 2 };
	 bb = foo1 ( aa );	
	 a1 = aa[0];
	 b1 = bb[0];
	 cc = [Imperative]
	 {
	     return = foo1(aa);
	 };	
	 c1 = cc[0];
}
[Imperative]
{ 
	 def foo  ( a : int[] )
	 {
	    a[0] = 0;
            return = a;
         }
	 aa = { 1, 2 };
	 bb = foo ( aa );	
	 a2 = aa[0];
	 b2 = bb[0];
	 c2 = 3;	
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1256_TV44_Defect_1455245()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"a;b;
[Associative]
{
	a = 1;
	[Imperative]
	{
		def foo : int ( x : int )
	    {
	        return = a + x;
        }
	 
	    b = foo(1) ;	
	}
	
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1257_TV45_Defect_1455278()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"b1;b2;
[Associative]
{
    def foo : int ( a : int )
	{
		c = [Imperative]
		{
		    d = 0;
			if( a > 1 )
			{
				d = 1;
			}
			return = d;	
		}
		return  = a + c;
	}
	
	a = 2;
	b1 = foo (a );	
}
[Imperative]
{
    def foo2 : int ( a : int )
	{
		
		c = [Associative]
		{
            return = [Imperative]
            { 
                d = 0;
                if( a > 1 )
                {
                    d = 1;
                }
                return = d;	
            }
        }
		return  = a + c;
		
	}
	
	a = 2;
	b2 = foo2 (a );	
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1258_TV46_Defect_1455278()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class A
{
    a : var;
    constructor A ( i )
	{
	    a = i;
	}
	def foo : int ( a1 : int )
	{
		c = [Imperative]
		{
		    d = 0;
			if( a1 > 1 )
			{
				d = 1;
			}
			return = d;	
		}
		return  = a + c;
	}
}
	
a1 = A.A(1);
b1 = a1.foo(2);
b2 = a1.foo(0);
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1259_TV47_Defect_1456087()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"def foo : int ( a : double, b : double )
{
	return = 2;
}
def foo : int ( a : int, b : int )
{
	return = 1;
}
def foo : int ( a : int, b : double )
{
	return = 3;
}
a;b;c;d;
[Imperative]
{
	a = foo ( 1, 2 );
	b = foo ( 2.5, 2.5 );
	c = foo ( 1, 2.3 );
	d = foo ( 2.3, 2 );
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1260_TV48_Defect_1456110()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"def foo : int( a : int)
{
  temp = [Imperative]
  {
      if ( a == 0 )
      {
          return = 0; 
      }
      return = a ;
  } 
  return = temp;
}
x = foo( 0 );
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1261_TV49_Defect_1456110()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"
def recursion : int(a : int)
{
    local = [Imperative]
    {
        if (a <= 0)
        {
            return = 0; 
        }
        return = a + recursion(a - 1);
    }
    return = local;
}
a = 10;
[Imperative]
{
	x = recursion(a); 
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1262_TV49_Defect_1456110_2()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"
def recursion : int(a : int)
{
    local = [Imperative]
    {
        if (a <= 0)
        {
            return = 0; 
        }
        return = a + recursion(a - 1);
    }
    return = local;
}
a = 10;
[Imperative]
{
	x = recursion(a); 
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1263_TV50_Defect_1456108()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"c;
[Imperative]
{
	def collection:int[](a : int[] )
	{
		j = 0;
		for ( i in a )
		{
			a[j] = a[j] + 1;
			j = j + 1;
		}
		
		return = a;
	}
	
	[Associative]
	{
		c = { 1,2,3 };
		c = collection( c );
	}
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1264_TV51_Defect_1456108_2()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"c;
[Imperative]
{
	def collection:double[](a : double[] )
	{
		j = 0;
		for ( i in a )
		{
			a[j] = a[j] + 1;
			j = j + 1;
		}
		
		return = a;
	}
	
	c = { 1.0,2.0,3.0 };
	c = collection( c );
	
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1265_TV51_Defect_1456108_3()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class A
{
    b : double[];
	
	constructor A (x : double[])
	{
		b = x;
	}
	def add_1:double[](a: double[] )
	{
		j = 0;
		a = [Imperative]
		{
			for ( i in a )
			{
				a[j] = a[j] + 1;
				j = j + 1;
			}
			return = a;
		}
		
		return = a;
	}
	
	def add_2:double[]( )
	{
		j = 0;
		x = [Imperative]
		{
			for ( i in b )
			{
				b[j] = b[j] + 1;
				j = j + 1;
			}
			return = b;
		}
		
		return = x;
	}
}
c = { 1.0, 2.0, 3.0 };
a1 = A.A( c );
c = a1.add_1( c );
b2 = a1.add_2( );";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1266_TV51_Defect_1456108_4()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class A
{
    b : double[];
	
	constructor A (x : double[])
	{
		b = x;
	}
	def add_1:double[](a: double[] )
	{
		j = 0;
		a = [Imperative]
		{
			for ( i in a )
			{
				a[j] = a[j] + 1;
				j = j + 1;
			}
			return = a;
		}
		
		return = a;
	}
	
	def add_2:double[]( )
	{
		j = 0;
		x = [Imperative]
		{
			for ( i in b )
			{
				b[j] = b[j] + 1;
				j = j + 1;
			}
			return = b;
		}
		
		return = x;
	}
}
c = { 1.0, 2.0, 3.0 };
a1 = A.A( c );
t1 = a1.b;
t2 = a1.add_2();
t=c;
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1267_TV51_Defect_1456108_5()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class A
{
    b : double[];
	
	constructor A (x : double[])
	{
		b = x;
	}
	def add_1:double[](a: double[] )
	{
		j = 0;
		a = [Imperative]
		{
			for ( i in a )
			{
				a[j] = a[j] + 1;
				j = j + 1;
			}
			return = a;
		}
		
		return = a;
	}
	
	def add_2:double[]( )
	{
		j = 0;
		x = [Imperative]
		{
			for ( i in b )
			{
				b[j] = b[j] + 1;
				j = j + 1;
			}
			return = b;
		}
		
		return = x;
	}
}
c = { 1.0, 2.0, 3.0 };
a1 = A.A( c );
b1 = a1.add_1( c );
b2 = a1.add_2( );
t = a1.b;
c = { -1, -1, -1 };";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1268_TV52_Defect_1456397()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class A
{
	a : var;
	
	constructor CreateA ( a1 : int )
	{	
		a = a1 ;
	}		
	
	def CreateNewVal ( )
	{
		y = [Imperative]
		{
			if ( a  < 10 )			
			{
				return = a + 10;			
			}
			return = a;
 		}
		return = y + a;
	}
}
b1;
[Associative]
{
    a1 = A.CreateA(1);
	b1 = a1.CreateNewVal();
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1269_TV53_Defect_1456397_2()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class A
{
	a : var;
	
	constructor CreateA ( a1 : int )
	{	
		a = a1 ;
	}		
	
	def CreateNewVal ( )
	{
		y = [Associative]
		{
			return = a;
 		}
		return = y + a;
	}
}
b1;
[Imperative]
{
    a1 = A.CreateA(1);
	b1 = a1.CreateNewVal();
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1270_TV54_Defect_1456397_3()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"b1;
[Imperative]
{
	def CreateVal ( a )
	{
		x = 1;
		y = [Associative]
		{
			return = a;
		}
		return = x + y;
	}
	b1 = CreateVal( 1 );
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1271_TV55_Defect_1456571()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"def foo(arr)
{
    retArr = 3;	
	[Imperative]
    {
		retArr = 5;
	}
    return = retArr;
}
	x = 0.5;
	x = foo(x);";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1272_TV56_Defect_1456571_2()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"def foo(arr)
{
    retArr = 3;	
	[Associative]
    {
		retArr = 5;
	}
    return = retArr;
}
x;
	[Imperative]
	{
		x = 0.5;
		x = foo(x);
	}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1273_TV56_Defect_1456571_3()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class A
{
	a : var;
	
	constructor A(b)
	{
		a = b;
		[Imperative]
		{
			if(a > 3 ) 
			{
				a = 3 ;
			}
		}
	}
	def foo (b)
	{
		[Imperative]
		{
			if(a == 3 ) 
			{
				a = 3 + b;
			}		
		}
		return = a;
	}
}
f1;f2;f3;f4;
[Associative]
{
	a1 = A.A(5);
	a2 = A.A(1);
	f1 = a1.foo(2);
	f2 = a2.foo(2);
	
}
[Imperative]
{
	a1 = A.A(5);
	a2 = A.A(1);
	f3 = a1.foo(2);
	f4 = a2.foo(2);	
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1274_TV57_Defect_1454932()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"[Associative]
{
	def Foo : int ()
	{
		return = 4;
	}
	Foo = 5;
	b = Foo();
	c = Foo;
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1275_TV58_Defect_1455090()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"	def foo( a:int[] )
	{
		a[0][0] = 1;
		return = a;
	}
	b = { {0,2,3}, {4,5,6} };
	d = foo( b );
	c = d[0];";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1276_TV58_Defect_1455278()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class A
{
    a : var;
    constructor A ( i )
	{
		a = i;
	}
	
	def foo : int ( a1 : int )
	{
		c = [Imperative]
		{
			d = 0;
			if( a1 > 1 )
		{
			d = 1;
		}
		return = d;	
		}
	return  = a + c;
	}
}
	a1 = A.A(1);
	b1 = a1.foo(2); 
	b2 = a1.foo(0); ";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1277_TV59_Defect_1455278()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class A
{
    a : var;
    constructor A ( i )
	{
		a = i;
	}
	
	def foo : int ( a1 : int )
	{
		c = [Imperative]
		{
			d = 0;
			if( a1 > 1 )
		{
			d = 1;
		}
		return = d;	
		}
	return  = a + c;
	}
}
	a1 = A.A(1);
	b1 = a1.foo(2); 
	b2 = a1.foo(0); ";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1278_TV59_Defect_1455278_2()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"def multiply : double[] (a : double[])
{    
	temp = [Imperative]
    { 
		b = {0, 10};
		counter = 0; 
		
		for( y in a ) 
		{              
			b[counter] = y * y;   
			counter = counter + 1;           
		}                
        
		return = b;    
	}   
	return = temp;
}
	
	x = {2.5,10.0};
	x_squared = multiply( x );";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1279_TV60_Defect_1455278_2()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"def multiply : double[] (a : double[])
{    
	temp = [Imperative]
    { 
		b = {0, 10};
		counter = 0; 
		
		for( y in a ) 
		{              
			b[counter] = y * y;   
			counter = counter + 1;           
		}                
        
		return = b;    
	}   
	return = temp;
}
	
	x = {2.5,10};
	x_squared = multiply( x );";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1280_TV60_Defect_1455278_3()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"
    def power(num : double, exponent : int)
    {
		temp = [Imperative]
        {
			result = 1.0;
            counter = 0;            
			while(counter < exponent )            
			{
				result = result * num;                
				counter =  counter + 1;            
			}            
			return = result;        
		}       
		return = temp;
	}    
	
	x = power(3.0, 2);
	
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1281_TV61_Defect_1455278_3()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"
    def power(num : double, exponent : int)
    {
		temp = [Imperative]
        {
			result = 1.0;
            counter = 0;            
			while(counter < exponent )            
			{
				result = result * num;                
				counter =  counter + 1;            
			}            
			return = result;        
		}       
		return = temp;
	}    
	
	x = power(3.0, 2);
	
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1282_TV61_Defect_1455278_4()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"
    def power(num : double, exponent : int)
    {
		temp = [Imperative]
        {
			result = 1.0;
            counter = 0;            
			if(num > exponent)
			{
				while(counter < exponent )            
				{
					result = result * num;                
					counter =  counter + 1;            
				}  
            }				
			return = result;        
		}       
		return = temp;
	}    
	
	x = power(3.0, 2);
	
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1283_TV61_Defect_1456100()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"d;
[Imperative]
{
	def foo: int( a : int )
	{
		for( i in a )
		{
		}
		return = a;
	}
	
	d = { 1,2,3 };
	j = 0;
	
	for( i in d )
	{
		d[j] = i + 1;
		j = j + 1;
	}
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1284_TV62_Defect_1455090()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"	def foo:int[]..[] ( a:int[]..[] )
	{
		a[0][0] = 1;
		return = a;
	}
	b = { {0,2,3}, {4,5,6} };
	d = foo( b );
	c = d[0];";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1285_TV62_Defect_1456100()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"[Imperative]
{
	def foo: int( a : int )
	{
		for( i in a )
		{
		}
		return = a;
	}
	
	d = { 1,2,3 };
	//c = foo( d );
	j = 0;
	
	for( i in d )
	{
		d[j] = i + 1;
		j = j + 1;
	}
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1286_TV63_Defect_1455090_2()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"
	def foo ( a : double[]..[] )
	{
		a[0][0] = 2.5;
		return = a;
	}
	
	a = { {2.3,3.5},{4.5,5.5} };
	
	a = foo( a );
	c = a[0];
	d;
	[Imperative]
	{
		b = { {2.3}, {2.5} };
		b = foo( b );
		d = b[0];
	}
	
	
	";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1287_TV64_Defect_1455090_3()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"c;d;
[Imperative]
{
	def foo ( a : double[]..[] )
	{
		a[0][0] = 2.5;
		return = a;
	}
	
	a = { {2.3,3.5},{4.5,5.5} };
	
	a = foo( a );
	c = a[0];
	
	[Associative]
	{
		b = { {2.3}, {2.5} };
		b = foo( b );
		d = b[0];
	}
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1288_TV65_Defect_1455090_4()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class A
{
	a : var[]..[];
	
	constructor Create( a1 : int[]..[])
	{
		a = a1;
	}
	
	def foo: int( )
	{
		return = a[0][0];
	}	
		
}
	
	b = {{1,2},{3,4}};
	A1 = A.Create( b );
	a = A1.foo();
	
		
	";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1289_TV66_Defect_1455090_5()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class A
{
	a : var;
	
	constructor Create( a1 :int)
	{
		a = a1;
	}
	
	def foo: int( )
	{
		return = a;
	}	
		
}
	def objarray:A ( arr : A[]..[] )
	{
		return = arr[1][0];
	}
	
	A1 = A.Create( 1 );
	A2 = A.Create( 3 );
	A3 = A.Create( 5 );
	A4 = A.Create( 7 );
	
	B = { { A1,A2 },{ A3,A4} };
	
	b = objarray( B );
	
	c = b.foo();
	
	
	
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1290_TV67_Defect_1455090_6()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class A
{
	a : var;
	
	constructor Create( a1 :int)
	{
		a = a1;
	}
	
	def foo: int( )
	{
		return = a;
	}	
		
}
c;
	[Imperative]
	{
		def objarray:A ( arr : A[]..[] )
		{
			return = arr[1][0];
		}
	
		A1 = A.Create( 1 );
		A2 = A.Create( 3 );
		A3 = A.Create( 5 );
		A4 = A.Create( 7 );
	
		B = { { A1,A2 },{ A3,A4} };
		
		b = objarray( B );
	
		c = b.foo();
	}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1291_TV68_Defect_1455090_7()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class A
{
	a : var;
	
	constructor create(i:int)
	{
		[Imperative]
		{
			if( i == 1 )
			{
				a = { { 1,2,3 } , { 4,5,6 } };
			}
			else
			{
			    a = { { 1,2,3 } , { 1,2,3 } };
			}
		}
	
	}
	
	def compare:int ( b : int[]..[], i : int, j : int )
	{
		temp = [Imperative]
		{
		    if( b[i][j] == a[i][j] )
		        return = 1;
			return = 0;
		}
		return = temp ;
	}
}
b1 = { {1, 2, 3},{ 1, 2, 3} };
A1 = A.create(1);
a1 = A1.compare( b1, 0, 0 );
a2 = A1.compare( b1, 1, 1 );
	";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1292_TV69_Defect_1456799()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class Point
{
    X : var;
    
    constructor ByCoordinates(x : double)
    {
        X = x;
        
    }
}
class BSplineCurve
{
    P : var;
	
	constructor ByPoints(ptOnCurve : Point)
    {
	    P = ptOnCurve;
    }
}
pt1 = Point.ByCoordinates(0);
pt2 = Point.ByCoordinates(5);
pts = {pt1, pt2};
bcurve = BSplineCurve.ByPoints(pts[1]);
bcurvePt = bcurve.P;
bcurvePtX = bcurvePt.X;
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1293_TV69_Defect_1456799_2()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class Point
{
    X : var;
    
    constructor ByCoordinates(x : double)
    {
        X = x;
        
    }
}
class BSplineCurve
{
    P : var[];
	
	constructor ByPoints(ptOnCurve : Point[])
    {
	    P = ptOnCurve;
    }
}
pt1 = Point.ByCoordinates(0);
pt2 = Point.ByCoordinates(5);
pts = {pt1, pt2};
bcurve = BSplineCurve.ByPoints(pts);
bcurvePtX = bcurve.P[1].X;
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1294_TV69_Defect_1456799_3()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class Point
{
    X : var;
    
    constructor ByCoordinates(x : double)
    {
        X = x;
        
    }
}
class BSplineCurve
{
    P : var[];
	
	constructor ByPoints(ptOnCurve : Point[])
    {
	    P = ptOnCurve;
    }
}
bcurvePtX;
[Imperative]
{
	pt1 = Point.ByCoordinates(0);
	pt2 = Point.ByCoordinates(5);
	pts = {pt1, pt2};
	bcurve = BSplineCurve.ByPoints(pts);
	bcurvePtX = bcurve.P[1].X;
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1295_TV70_Defect_1456798()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class Point
{
    X : var;
    Y : var;
    Z : var;
    constructor ByCoordinates(x : double, y : double, z : double)
    {
        X = x;
        Y = y;
        Z = z;
    }
}
class BSplineCurve
{
    Pts : var[];
	
	constructor ByPoints(ptsOnCurve : Point[])
    {
	    Pts = ptsOnCurve;
    }
}
pt1 = Point.ByCoordinates(0,0,0);
pt2 = Point.ByCoordinates(5,0,0);
pt3 = Point.ByCoordinates(10,0,0);
pt4 = Point.ByCoordinates(15,0,0);
pt5 = Point.ByCoordinates(20,0,0);
pts = {pt1, pt2, pt3, pt4, pt5};
bcurve = BSplineCurve.ByPoints(pts);
p = bcurve.Pts[2];
X = p.X;
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1296_TV71_Defect_1456108()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"c;
[Imperative]
{
	def collectioninc: int[]( a : int[] )
	{
		j = 0;
		for( i in a )
		{
			a[j] = a[j] + 1;
			j = j + 1;
		}
		return = a;
	}
	d = { 1,2,3 };
	c = collectioninc( d );
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1297_TV71_Defect_1456108_2()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"        def collectioninc: int[]( a : int[] )
	{
		j = 0;
		a = [Imperative]
		{
			for( i in a )
			{
				a[j] = a[j] + 1;
				j = j + 1;
			}
			return = a;
		}
		return = a;
	}
	d = { 1,2,3 };
	c = collectioninc( d );
	b;
        [Imperative]
	{
		b = collectioninc( d );
	}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1298_TV72_Defect_1454541()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"d1;d2;
[Associative]
{
    def singleLine1 : int( a:int ) = a * 10;
    d1 = singleLine1( 2 );
}
[Imperative]
{
    def singleLine2 : int( a:int ) = a * 10;
    d2 = singleLine2( 2 );
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1299_TV72_Defect_1454541_1()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"d1;d2;
[Associative]
{
    def singleLine1 : int( a:int ) { return = a * 10; } 
    d1 = singleLine1( 2 );
}
[Imperative]
{
    def singleLine2 : int( a:int ) { return = a * 10; } 
    d2 = singleLine2( 2 );
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1300_TV72_Defect_1454541_2()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"def singleLine1 : int( a:int[] ) = a[0] ;
d = singleLine1( {20,20} );
def singleLine2 : int[]( a:int[] ) = a ;
d1 = singleLine2( {20,20} );
d2 = d1[1];
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1301_TV73_Defect_1451831()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"y;
[Associative]
{
  
	a = 1;
	b = 1;
	
	def test:int( a:int, b:int, c : int, d : int )
	{
		 
	    y = [Imperative]
		{
			if( a == b ) 
			{
				return = 1;
			}		
			else
			{
				return = 0;
			}
		}
		
		return = y + c + d;
	}
	
	c = 1;
	d = 1;
	
	y = test ( a , b, c, d);
	
		
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1302_TV74_Defect_1456426()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"def foo1 : int ( a : int )
{
	c = [Imperative]
	{
		d = 0;
		if( a > 1 )
		{
			d = 1;
		}
		return = d;	
	}
	return  = a + c;
}
b1 = foo1(3);
b2;b3;
	
[Associative]
{
    def foo : int ( a : int )
	{
		c = [Imperative]
		{
		    d = 0;
			if( a > 1 )
			{
				d = 1;
			}
			return = d;	
		}
		return  = a + c;
	}
	
	b2 = foo (2 );	
}
[Imperative]
{
    def foo2 : int ( a : int )
	{
		
		d = 0;
		if( a > 1 )
		{
			d = 1;
		}
			
		return = a + d;
	}
	
	
	b3 = foo2 (4 );	
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1303_TV75_Defect_1456870()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"def foo1 ( b )
{
	return = b == 0 ? 0 : b+1;
	
}
def foo2 ( x )
{
	y = [Imperative]
	{
	    if(x > 0)
		{
		   return = x >=foo1(x) ? x : foo1(x);
		}
		return = x >=2 ? x : 2;
	}
	x1 = y == 0 ? 0 : y;
	return = x1 + y;
}
a1 = foo1(4);
a2 = foo2(3);
//thisTest.Verification(mirror, ""a1"", 5, 0); // fails";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1304_TV76_Defect_1456112()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"def foo1 : double (arr : double[])
{
    return = 0;
}
arr = {1,2,3,4};
sum = foo1(arr);
def foo2 : double (arr : double)
{
    return = 0;
}
arr1 = {1.0,2.0,3.0,4.0};
sum1 = foo2(arr1);
sum2 = foo1(arr);
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1305_TV76_Defect_1456112_2()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"def foo1 : double (arr : double[][])
{
    return = arr[0][0];
}
sum1;sum2;
[Imperative]
{
	arr1 = { {1, 2.0}, {true, 4} };
	sum1 = foo1(arr);
	x = 1;
	arr2 = { {1, 2.0}, {x, 4} };
	sum2 = foo1(arr2);
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1306_TV77_Defect_1455259()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"def foo2 : int ( a : int )
{
	return  = a + 1;
}
class A
{
    a1: var;
	constructor A ( a)
	{
	    a1 = a;
	}
	def foo2  ( a : int )
	{
	    return  = a + a1;
	}
    
}
x1;y11;y21;
x2;y12;y22;
b;
[Associative]
{
    def foo : int ( a : int )
	{
		return  = a + 1;
	}
	
	def foo1  ( a  )
	{
		return  = a + 1;
	}
	
	x1 = 1;
	y11 = foo(x1);
	y21 = foo1(x1);
	
}
[Imperative]
{
    def foo : int ( a : int )
	{
		return  = a + 1;
	}
	
	def foo1  ( a  )
	{
		return  = a + 1;
	}
	
	x2 = 1;	
	y12 = foo(x2);
	y22 = foo1(x2);
	a = A.A(1);
	b = a.a1;
	c = a.foo2(1);	
	
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1307_TV77_Defect_1455259_2()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"def foo2 : int ( a : int )
{
	return  = a + 1;
}
class A
{
    a1: var;
	constructor A ( a)
	{
	    a1 = a;
	}
	def foo2  ( a : int )
	{
	    return  = a + a1;
	}
    
}
b;c;d;
[Imperative]
{
    
	a = A.A(1);
	b = a.a1;
	c = a.foo2(1);	
	d = foo2(1);
	
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1308_TV78_Defect_1460866()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"def foo( a:int )
{
    b = a + 1;
}
y = foo ( 1 );
x = [Imperative]
{
	def foo2(x:int)
	{
	    if (x > 0)
		      return = 1;
	}
	t = foo2(-1);
	return  = t;
}
z1 = [Imperative]
{
	a = 1;
	if ( a > 2 ) 
	    return = 2;
}
z2 = [Imperative]
{
	def foo2(x:int)
	{
	    if (x > 0)
		      return = 1;
	}
	t = foo2(1);
	return  = t;	
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1309_TV78_Defect_1460866_2()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class A
{
    a : int;
    constructor A ( a1 : int )
    {
        a = [Imperative]
	{
	    if(a1 > 2 )
	        return = 2;
	}
    }
    def foo ()
    {
        x = [Imperative]
	{
	    if(a == 2 )
	        return = true;
	}
	return  = x;
    }
}
x = A.A( 3 );
y = x.a;
z = x.foo();
x2 = A.A( 1 );
y2 = x2.a;
z2 = x2.foo();
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1310_TV79_Defect_1462300()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"def testcall(a:test) 
{ 
return ={a.ImNotDefined(),a.ImNotDefined()}; 
} 
class test 
{ 
p1 : var; 
constructor test() 
{ 
p1=1; 
} 
}; 
a= test.test(); 
b=testcall(a); 
aa = b[0]; 
bb = b[1]; 
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1311_TV79_Defect_1462300_2()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"def testcall(a:test) 
{ 
return ={a.ImNotDefined(),a.ImNotDefined()}; 
} 
class test 
{ 
p1 : var; 
constructor test() 
{ 
p1=1; 
} 
}; 
a= null; 
b=testcall(a); 
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1312_TV79_Defect_1462300_3()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"def testcall2 :test[] () 
{ 	
	return ={test.test(), test.test()}; 
} 
def testcall3 :int[] () 
{ 	
	return ={test.test().x, test.test().y}; 
} 
def testcall4 :test[] () 
{ 	
	return ={null, null}; 
} 
class test 
{ 
	x : var;
	y : var;
}; 
b = testcall2(); 
//c = b.x; // expected : { null, null }
d = testcall3(); // expected : { null, null }
e1 = testcall4(); // expected : { null, null }
//f = e1.y; // expected : { null, null }
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1313_TV80_Function_Name_Negative()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"def function ( a : int)
{
    return = a + 1;
}
x = function(2);";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1314_TV81_Defect_1458187()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"def foo ( a )
{
	x = [Imperative]
	{
		if ( a == 0 )
		return = a;
		else
		return = a + 1;
	}
	return = x;
}
a = foo( 2 );
b = foo(false);
c = foo(true);";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1315_TV81_Defect_1458187_2()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"def foo ( a )
{
	x = (a == 1)?a:0;
	return = x + a;
}
a = foo( 2 );
b = foo(false);
c = foo(true);";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1316_TV82_Defect_1460892()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"def foo ( a : int )
{
    return  = a + 1;
}
def foo2 ( b : int, f1 : function )
{
    return = f1( b );
}
a = foo2 ( 10, foo );
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1317_TV83_Function_Pointer()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"def foo ( a : bool )
{
    return  = a ;
}
def foo2 ( b : int, f1 : function )
{
    return = f1( b );
}
a = foo2 ( 0, foo );
def poo ( a : int )
{
    return  = a ;
}
def poo2 ( b : bool, f1 : function )
{
    return = f1( b );
}
a2 = poo2 ( false, poo );
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1318_TV83_Function_Pointer_Collection()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"def count ( a : bool[]..[] )
{
    c = 0;
	c = [Imperative]
	{
	    for ( i in a )
		{
		    c = c + 1;
		}
		return = c;
	}
	return  = c ;
}
def foo ( b : bool[]..[], f1 : function )
{
    return = count( b );
}
a = foo ( { true, false, { true, true } },  count );
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1319_TV84_Function_Pointer_Implicit_Conversion()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"def count ( a : int[] )
{
    c = 0;
	x = [Imperative]
	{
	    for ( i in a )
		{
		    c = c + 1;
		}
		return = c;
	}
	return  = x ;
}
def foo ( b : double[], f1 : function )
{
    return = count( b );
}
a = foo ( { 1.0, 2.6 },  count );
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1320_TV84_Function_Pointer_Implicit_Conversion_2()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"def count ( a : double[]..[] )
{
    c = 0;
	x = [Imperative]
	{
	    for ( i in a )
		{
		    c = c + 1;
		}
		return = c;
	}
	return  = x ;
}
def foo ( b : int[]..[], f1 : function )
{
    return = count( b );
}
a = foo ( { 1, 2 , {3, 4} },  count );
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1321_TV84_Function_Pointer_Implicit_Conversion_3()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"def count ( a : double[] )
{
    c = 0;
	x = [Imperative]
	{
	    for ( i in a )
		{
		    c = c + 1;
		}
		return = c;
	}
	return  = x ;
}
def foo ( b : int[], f1 : function )
{
    return = count( b );
}
a = foo ( { 1, 2,  { 3, 4 } },  count );
d = foo ( { 2, 2.5, { 1, 1.5 }, 1 , false},  count );
// boolean can't be converted to double, so the following statement
// will generate a method resultion fail exception
// b = foo ( { true, false },  count );
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1322_TV84_Function_Pointer_Implicit_Conversion_4()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"def count ( a : double[] )
{
    c = 0;
	x = [Imperative]
	{
	    for ( i in a )
		{
		    c = c + 1;
		}
		return = c;
	}
	return  = x ;
}
def foo ( b : int[], f1 : function )
{
    return = count( b );
}
[Imperative]
{
	a = foo ( { 1, 2,  { 3, 4 } },  count );
	d = foo ( { 2, 2.5, { 1, 1.5 }, 1 , false},  count );
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1323_TV84_Function_Pointer_Negative()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"def greater ( a , b )
{
    c = [Imperative]
	{
	    if ( a > b )
		    return = a;
		else
		   return = b;
	}
	return  = c ;
}
def greatest ( a : double[], f : function )
{
    c = a[0];
	[Imperative]
	{
	    for ( i in a )
		{
		    c = f( i, c );
		}	
	}
	return  = c ;
}
a;
[Imperative]
{
	a = greatest ( { 1.5, 6, 3, -1, 0 }, greater2 );
	
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1324_TV84_Function_Pointer_Using_2_Functions()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"def greater ( a , b )
{
    c = [Imperative]
	{
	    if ( a > b )
		    return = a;
		else
		   return = b;
	}
	return  = c ;
}
def greatest ( a : double[], greater : function )
{
    c = a[0];
	[Imperative]
	{
	    for ( i in a )
		{
		    c = greater( i, c );
		}	
	}
	return  = c ;
}
def foo ( a : double[], greatest : function , greater : function)
{
    return  = greatest ( a, greater );
}
a;
[Imperative]
{
	a = foo ( { 1.5, 6, 3, -1, 0 }, greatest, greater );
	
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1325_TV85_Function_Return_Type_Var_User_Defined_Type_Conversion()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class A
{
    x : int;
}
def goo : var()
{
    return = A.A();
}
def foo : A ()
{
    return = goo();
}
a = foo();
b = a.x;";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1326_TV86_Defect_1456728()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"def f1 (arr :  double[] )
{
    return = arr;
}
def f2 (arr :  double[] )
{
    return = { arr[0], arr[1] };
}
a = f1( { null, null } );
b = f2( { null, null } );
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1327_TV87_Defect_1464027()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class A
{
    x : double;
	y : int;
	z : bool;
	a : int[];
	b : B;
}
class B
{
    b : double;
	
}
def goo : var()
{
    return = A.A();
}
def foo : A ()
{
    return = goo();
}
a = foo();
t1 = a.x;
t2 = a.y;
t3 = a.z;
t4 = a.a;
t5 = a.b.b;
t11;t12;t13;t14;t15;
[Imperative]
{
    t11 = a.x;
	t12 = a.y;
	t13 = a.z;
	t14 = a.a;
	t15 = a.b.b;
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1328_TV87_Defect_1464027_2()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class A
{
    x : double;
	y : int;
	z : bool;
	a : int[];
	b : B;
}
class B
{
    b : double;
	
}
def goo : var[]()
{
    return = {A.A(), A.A()};
}
def foo : A[] ()
{
    return = {A.A(), A.A()};
}
a1 = foo();
a = a1[1];
t1 = a.x;
t2 = a.y;
t3 = a.z;
t4 = a.a;
t5 = a.b.b;
t11;t12;t13;t14;t15;
[Imperative]
{
    t11 = a.x;
	t12 = a.y;
	t13 = a.z;
	t14 = a.a;
	t15 = a.b.b;
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1329_TV87_Defect_1464027_3()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class A
{
    x : double;
	y : int;
	z : bool;
	a : int[];
	b : B;
	
	def goo : var()
	{
		return = A.A();
	}
}
class B
{
    b : double;
	
}
def foo : A (x:A)
{
    return = x.goo();
}
a1 = A.A();
a = foo ( a1 );
t1 = a.x;
t2 = a.y;
t3 = a.z;
t4 = a.a;
t5 = a.b.b;
t11;t12;t13;t14;t15;
[Imperative]
{
    t11 = a.x;
	t12 = a.y;
	t13 = a.z;
	t14 = a.a;
	t15 = a.b.b;
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1330_TV87_Defect_1464027_4()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class A
{
    x : double;
	y : int;
	z : bool;
	a : int[];
	b : B;
	
	def goo : A()
	{
		return = A.A();
	}
}
class B
{
    b : double;
	
}
def foo : var (x:A)
{
    return = x.goo();
}
a1 = A.A();
a = foo ( a1 );
t1 = a.x;
t2 = a.y;
t3 = a.z;
t4 = a.a;
t5 = a.b.b;
t11;t12;t13;t14;t15;
[Imperative]
{
    t11 = a.x;
	t12 = a.y;
	t13 = a.z;
	t14 = a.a;
	t15 = a.b.b;
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1331_TV87_Defect_1464027_5()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class A
{
    x : double;
	y : int;
	z : bool;
	a : int[];
	b : B;
	
	def goo :var()
	{
		return = A.A();
	}
}
class B
{
    b : double;
	
}
def foo : var (x:A)
{
    return = x.goo();
}
a1 = A.A();
a = foo ( a1 );
t1 = a.x;
t2 = a.y;
t3 = a.z;
t4 = a.a;
t5 = a.b.b;
t11;t12;t13;t14;t15;
[Imperative]
{
    t11 = a.x;
	t12 = a.y;
	t13 = a.z;
	t14 = a.a;
	t15 = a.b.b;
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1332_TV88_Defect_1463489()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"def foo: bool (  )
{
	return = 0.24;
}
c = foo ( ); //expected true, received 
d = [Imperative]
{
    return = foo();
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1333_TV88_Defect_1463489_2()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"def foo: bool ( x : bool )
{
	return = x && true;
}
c = foo ( 0.6 ); 
c1 = foo ( 0.0 ); 
d = [Imperative]
{
    return = foo(-3.5);
}
d1 = [Imperative]
{
    return = foo(0.0);
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1334_TV88_Defect_1463489_3()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class A
{
    y : bool;
	constructor A ( x : bool )
	{
	    y = x && true;
	}
	def foo: bool ( x : bool )
	{
		[Imperative]
		{
		    if( x == false )
			    y = true;
			else
			    y = false;
		}		
		return = y;
	}
}
c = A.A ( 0.6 );
y1 = c.y;
c1 = A.A ( 0.0 );
y2 = c1.y; 
d = [Imperative]
{
    return = A.A ( -3.5 );
}
y3 = d.y;
d1 = [Imperative]
{
    return = A.A ( 0.0 );
}
y4 = d1.y;
dymmy = 0;
temp = c.foo( 0.6);
temp = c1.foo( 0.0);
temp = d.foo( -3.5);
temp = d1.foo( 0.0 );";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1335_TV89_Implicit_Type_Conversion_1()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class A
{
    y : bool;
	constructor A ( x : bool )
	{
	    y = x && true;
	}
	def foo: bool ( x : bool )
	{
		[Imperative]
		{
		    if( x == false )
			    y = true;
			else
			    y = false;
		}		
		return = y;
	}
}
c = A.A ( 6 );
y1 = c.foo( 6 );
c1 = A.A ( 0 );
y2 = c1.foo( 0 ); 
d = [Imperative]
{
    return = A.A ( -3 );
}
y3 = d.foo ( -3 );
d1 = [Imperative]
{
    return = A.A ( 0 );
}
y4 = d1.foo ( 0 );
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1336_TV89_typeConversion_FunctionArguments_1467060()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"def foo ( x : double[])
{
    return = x;
}
a2 = { 2, 4, 3.5 };
b2 = foo (a2);";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1337_TV89_typeConversion_FunctionArguments_1467060_2()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"def foo ( x : double[])
{
    return = x;
}
a2 = { 2, 4, 3};
b2 = foo ( a2 );";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1338_TV89_typeConversion_FunctionArguments_1467060_3()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"def foo ( x : int[])
{
    return = x;
}
a1 = { 2, 4.1, 3.5};
b1 = foo ( a1 );";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1339_TV89_typeConversion_FunctionArguments_1467060_4()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"def foo ( x : int)
{
    return = x;
}
a1 = { 2, 4.1, false};
b1 = foo ( a1 );";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1340_TV89_typeConversion_FunctionArguments_1467060_5()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"def foo ( x : int[])
{
    return = x;
}
a1 = { 2, 4.1, {1,2}};
b1 = foo ( a1 );";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1341_TV89_typeConversion_FunctionArguments_1467060_6()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"def foo ( x : int[])
{
    return = x;
}
a1 = { null, 5, 6.0};
b1 = foo ( a1 );";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1342_TV89_typeConversion_FunctionArguments_1467060_7()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"def foo ( x : int[])
{
    return = x;
}
a1 = { null, null, null};
b1 = foo ( a1 );";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1343_TV89_typeConversion_FunctionArguments_1467060_8()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"def foo:int[]( x : int[])
{
    return = x;
}
a1 = {1.1,2.0,3};
b1 = foo ( a1 );";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1344_TV89_typeConversion_FunctionArguments_1467060_9()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"def foo ( x : int[])
{
    return = x;
}
a1 = { 1, null, 6.0};
b1 = foo ( a1 );";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1345_TV90_Defect_1463474()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"a;b;
[Associative]
{
	 a = 1;
	 [Imperative]
	 {
		def foo : void  ( )
		{
			a = 2;		
		}
		foo();
        b = a;	    
	 }
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1346_TV90_Defect_1463474_2()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"a = 3;
def foo : void  ( )
{
	a = 2;		
}
foo();
b1 = a;	
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1347_TV90_Defect_1463474_3()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"a = 3;
def foo : void  (  )
{
	a = 2;
    return = -3;	
}
c1 = foo();
b1 = a;	
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1348_TV90_Defect_1463474_4()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class A
{
    a :int = 3;
	def foo : void  ( )
	{
		a = 2;		
	}
}
c1 = A.A();
b1 = c1.foo();
d1 = c1.a;	
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1349_TV91_Defect_1463703()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"def foo2 : int ( a : int )
{
	return  = a + 1;
}
class A
{
    a1: var;
	constructor A ( a)
	{
	    a1 = a;
	}
	def foo2  ( a : int )
	{
	    return  = a + a1;
	}
    
}
b;c;d;
[Imperative]
{
	a = A.A(1);
	b = a.a1;
	c = a.foo2(1);
	d = foo2(1);	
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1350_TV91_Defect_1463703_2()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"def foo2 : int ( a : int )
{
	return  = a + 1;
}
class A
{
    a1: var;
	constructor A ( a)
	{
	    a1 = a;
	}
	def foo2  ( a : int )
	{
	    return  = a + a1;
	}
    
}
y1;y2;y3;y4;
[Associative]
{
    def foo : int ( a : int )
	{
		return  = a + 1;
	}
	
	def foo1  ( a  )
	{
		return  = a + 1;
	}
	
	x = 1;
	y1 = foo(x);
	y2 = foo1(x); //warning : (-1,-1) Warning:Ambiguous method dispatch.
	
}
[Imperative]
{
    def foo : int ( a : int )
	{
		return  = a + 1;
	}
	
	def foo1  ( a  )
	{
		return  = a + 1;
	}
	
	x = 1;	
	y3 = foo(x);
	y4 = foo1(x); //warning : (-1,-1) Warning:Ambiguous method dispatch.
	a = A.A(1);
	b = a.a1;
	c = a.foo2(1);	
	
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1351_TV91_Defect_1463703_3()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"def foo2 : int[] ( a : int[] )
{
	return  = a;
}
class A
{
    a1: var[];
	constructor A ( a: var[])
	{
	    a1 = a;
	}
	def foo2  ( a : int[] )
	{
	    a1 = a;
		return  = a1 ;
	}
    
}
x1 = 
[Associative]
{
    def foo : int[] ( a : int[] )
	{
		a[0] = 0;
		return  = a;
	}
	
	def foo1  ( a : var[]  )
	{
		a[0] = 1;
		return  = a;
	}
	
	x = {9,9};
	y1 = foo(x);
	y2 = foo1(x); //warning : (-1,-1) Warning:Ambiguous method dispatch.
	return = { y1, y2};
}
x2 = 
[Imperative]
{
    def foo : int[] ( a : int[] )
	{
		a[0] = 2;
		return  = a ;
	}
	
	def foo1  ( a : var [] )
	{
		a[0] = 4;
		return  = a ;
	}
	
	x = { 9, 9 };	
	y3 = foo(x);
	y4 = foo1(x); //warning : (-1,-1) Warning:Ambiguous method dispatch.
	a = A.A({1,2});
	b = a.a1;
	c = a.foo2({3,4});	
	return = { y3, y4, b, c };
	
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1352_TV92_Accessing_Variables_Declared_Inside_Function_Body()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class A
{
    a : var;
    constructor A ( y )
    {
        a = y;
    }
}
def foo ( )
{
    a = { 1, 2, 3};
    b = A.A(10);
    return = {a,b};
}
x = foo ();
a = x[0][0]; // expected 1, received 1
b = x[1];
c = b.a; // expected 10, received 10";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1353_TV93_Modifying_Global_Var_In_Func_Call()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class Point
{
    X : var;
	Y: var;
	Z: var;
	constructor Point ( x, y, z )
	{
	    X = x;
		Y = y;
		Z = z;
	}
	def foo ( p: Point)
	{
	    return = Point.Point( (p.X), (p.Y), (p.Z) );
	}
}
def func1(pts : Point[]) 
{
  pts[1] = pts[0];
  return = null;
}
p1 = Point.Point ( 0,0,0);
p2 = Point.Point ( 1, 1, 1 );
p = { p1, p2 }; 
xx = p[1].X;
yy = p[1].Y;
zz = p[1].Z;
dummy = func1(p);
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1354_TV93_Modifying_Global_Var_In_Func_Call_2()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class Point
{
    X : var;
	Y: var;
	Z: var;
	constructor Point ( x, y, z )
	{
	    X = x;
		Y = y;
		Z = z;
	}
	def foo ( p: Point)
	{
	    return = Point.Point( (p.X), (p.Y), (p.Z) );
	}
}
def func1(pts : Point[]) 
{
  pts[1] = pts[0];
  return = null;
}
p1 = 0;
p2 = 1;
p = { p1, p2 }; 
xx = p[1];
yy = p[1];
zz = p[1];
dummy = func1(p);
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1355_TV93_Modifying_Global_Var_In_Func_Call_3()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class Point
{
    X : var;
	Y: var;
	Z: var;
	constructor Point ( x, y, z )
	{
	    X = x;
		Y = y;
		Z = z;
	}
	def foo ( p: Point)
	{
	    return = Point.Point( (p.X), (p.Y), (p.Z) );
	}
}
def func1(p1 : Point, p2 : Point) 
{
  p1 = p1.foo(p2);
  return = null;
}
p1 = Point.Point ( 0,0,0);
p2 = Point.Point ( 1, 1, 1 );
dummy = func1(p1, p2);
xx = p1.X; 
yy = p1.Y; 
zz = p1.Z; 
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1356_TV93_Modifying_Global_Var_In_Func_Call_4()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class Point
{
    X : var;
	Y: var;
	Z: var;
	constructor Point ( x, y, z )
	{
	    X = x;
		Y = y;
		Z = z;
	}
	def foo ( p: Point)
	{
	    return = Point.Point( (p.X+X), (p.Y+Y), (p.Z+Z) );
	}
}
def UnionBox(combined : Point, arr : Point[], index : int) {
  
  // Nothing changed for combined outside Unionbox()
  combined = combined.foo(arr[index]);
  [Imperative]
  {
	  if(index != 0 )
	  {
		  combined = UnionBox(combined, arr, index - 1);
	  }	  
  }
  return = null;
}
points = { Point.Point ( 0,0,0), Point.Point ( 1, 1, 1 ), Point.Point ( 2, 2, 2 ), Point.Point ( 3, 3, 3 ) };
top_index = Count( points ) - 2;
base_index = Count ( points ) -1;
s = points[base_index];
xx = s.X;
yy = s.Y;
zz = s.Z;
s1 = UnionBox(s, points, top_index);
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1357_TV94_Method_Resolution_Nested_Language_Blocks()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"def foo( a:double )
{
    b = a + 1;
	return = b;
}
y = foo ( 1 );
x = [Imperative]
{
	def foo (x:int)
	{
	    if (x > 0)
		      return = 1;
	    return = 2;
	}
	t = foo(-1);
	return  = t;
}
y = foo ( -2 );
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1358_TV94_Method_Resolution_Nested_Language_Blocks_2()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"def foo(  )
{
    return = 1;
}
y = foo (  );
x = [Imperative]
{
	def foo2 ()
	{
	    return = 2;
	}
	t1 = foo2();
	t2 = foo();
	return  = { t2, t1 };
}
y = [Imperative]
{
	def foo2 ()
	{
	    return = 3;
	}
	t1 = foo2();
	t2 = foo();
	return  = { t2, t1 };
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1359_TV95_Method_Resolution_Derived_Class_Arguments()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class A
{
}
class B extends A
{
}
def Test(arr : A[])
{
        return = 123;
}
a = {B.B(), B.B(), B.B()};
t = Test(a);
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1360_TV96_Defect_DNL_1465794()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"x = [Imperative]
{    
    a = 1;    
	def foo : int  ( )    
	{        
	    c = a;        
		a = 2;                    
		return = c + 1;                
	}    
	b = foo();        
	return = { a, b };    
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1361_TV96_Defect_DNL_1465794_2()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"x = [Imperative]
{    
        a = 2;    
	def foo : int  ( )    
	{        
	    c = 0;
	    if ( a > 1 )
	    {
	        for ( i in 0..1 )
                {
		    a = a + i;
                }
                c = 1;                                    
	    }
	    return = c;                
	}    
	b = foo();        
	return = { a, b };    
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1362_TV96_Defect_DNL_1465794_3()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"x = [Imperative]
{    
        a = { { 1, 2 } , { 3, 4 } };    
	def foo : int  ( )    
	{        
	    c = 0;
	    if ( a[0][0] == 1 )
	    {
	        for ( i in 0..1 )
                {
		    a[0][0] = a[0][0] + i;
                }
                c = 1;                                    
	    }
	    return = c;                
	}    
	b = foo();        
	return = { a, b };    
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1363_TV97_Heterogenous_Objects_As_Function_Arguments_No_Replication()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class A
{
}
a1 = A.A();
def foo ( x : double[])
{
    return = x;
}
a1 = { 2.5, 4, 3*2 };
b1 = foo ( a1 );
a2 = { 2, 4, 3.5 };
b2 = foo ( a2 );
a3 = { 2, 4, 3 };
b3 = foo ( a3 );
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1364_TV97_Heterogenous_Objects_As_Function_Arguments_No_Replication_2()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class A
{
    t1 : var;
    constructor A ( t2 :  var )
    {
        t1 = t2;
    }
}
a = A.A(1);
def foo ( x : var[])
{
    return = 1;
}
a1 = { 2.5, null, 3, a, ""sar"" };
b1 = foo ( a1 );
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1365_TV97_Heterogenous_Objects_As_Function_Arguments_With_Replication()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"def foo ( x : double)
{
    return = x;
}
a1 = { 2.5, 4 };
b1 = foo ( a1 );
a2 = { 3, 4, 2.5 };
b2 = foo ( a2 );
a3 = { 3, 4, 2 };
b3 = foo ( a3 );
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1366_TV97_Heterogenous_Objects_As_Function_Arguments_With_Replication_2()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class A
{
}
a1 = A.A();
def foo ( x : var)
{
    return = 1;
}
a1 = { 2.5, null, 3, a1, ""sar"" };
b1 = foo ( a1 );";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1367_TV98_Method_Overload_Over_Rank_Of_Array()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"def foo(x : int[])
{ 
    return = 1;
}
def foo(x : int[]..[])
{ 
    return = 2;
}
def foo(x : int[][])
{ 
    return = 0;
}
    
x = foo ( { { 0,1}, {2, 3} } );
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1368_TV99_Defect_1463456_Array_By_Reference_Issue()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class A
{
a = {1,2,3};
}
a = A.A();
val = a.a;
val[0] = 100;
t = a.a[0]; //expected 100; received 1";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1369_TV99_Defect_1463456_Array_By_Reference_Issue_2()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"def A (a: int [])
{
return = a;
}
val = {1,2,3};
b = A(val);
b[0] = 100; 
t = val[0]; //expected 100, received 1";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1370_BaseImportAssociative()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"[Associative]
{
	a = 5;
	def twice : int (val: int)
	{
		return = val * 2;
	}
	b = twice(a);	
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1371_BaseImportImperative()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"[Imperative]
{
	a = 5;
	def twice : int (val: int)
	{
		return = val * 2;
	}
	b = twice(a);
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1372_BaseImportWithVariableClassInstance()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"import (""T009_BasicImport_TestClassInstanceMethod.ds"");
a = 5;
b = 2*a;";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1373_basicImport()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"import(""DSCoreNodes.dll"");
def Scale (arr : double[], scalingFactor : double)
{
    scaledArr = [Imperative]
    {
        counter = 0;
        for(val in arr)
        {
            arr[counter] = scalingFactor * val;
            counter = counter + 1;
        }
        return = arr;
    }
    return = scaledArr;
}
external (""libmath"") def dc_sin : double (val : double);
def Sin : double (val : double)
{
   return = Math.Sin(val);
}
class Point
{
	X : var;
	Y : var;
	Z : var;
	
    constructor ByCoordinates(x : double, y : double, z : double)
    {
	
		X = x;
		Y = y;
		Z = z;
    }
	
	def MidValue : double[]()
	{
		return = {X/2, Y/2, Z/2};
	}
}
class Line
{
	StartPoint: Point;
	EndPoint: Point;
	constructor ByStartPointEndPoint (startPoint : Point, endPoint : Point)
	
	{
		StartPoint = startPoint;
		EndPoint = endPoint;
	}
}
def Count(inputArray : double[])
{
	numberOfItemsInArray = [Imperative]
	{
		index = 0;
		for (item in inputArray)
		{
			index = index + 1;
		}
		
		return = index;
	}
	
	return = numberOfItemsInArray;
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1374_basicImport1()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"def Scale (arr : double[], scalingFactor : double)
{
    scaledArr = [Imperative]
    {
        counter = 0;
        for(val in arr)
        {
            arr[counter] = scalingFactor * val;
            counter = counter + 1;
        }
        return = arr;
    }
    return = scaledArr;
}
a = 1;
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1375_basicImport2()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"
external (""libmath"") def dc_sin : double (val : double);
def Sin : double (val : double)
{
    return = dc_sin(val);
}
class Point
{
	X : var;
	Y : var;
	Z : var;
	
    constructor ByCoordinates(x : double, y : double, z : double)
    {
	
		X = x;
		Y = y;
		Z = z;
    }
	
	def MidValue : double[]()
	{
		return = {X/2, Y/2, Z/2};
	}
}
class Line
{
	StartPoint: Point;
	EndPoint: Point;
	constructor ByStartPointEndPoint (startPoint : Point, endPoint : Point)
	
	{
		StartPoint = startPoint;
		EndPoint = endPoint;
	}
}
def Count(inputArray : double[])
{
	numberOfItemsInArray = [Imperative]
	{
		index = 0;
		for (item in inputArray)
		{
			index = index + 1;
		}
		
		return = index;
	}
	
	return = numberOfItemsInArray;
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1376_basicImport3()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"def Scale (arr : double[], scalingFactor : double)
{
    scaledArr = [Imperative]
    {
        counter = 0;
        for(val in arr)
        {
            arr[counter] = scalingFactor * val;
            counter = counter + 1;
        }
        return = arr;
    }
    return = scaledArr * 2;
}
a = 3;
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1377_T001_BasicImport_CurrentDirectory()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"import (""basicImport.ds"");
a = {1.1,2.2};
b = 2;
c = Scale(a,b);";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1378_T002_BasicImport_AbsoluteDirectory()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"import (""basicImport.ds"");
a = {1.1,2.2};
b = 2;
c = Scale(a,b);
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1379_T004_BasicImport_CurrentDirectoryWithDotAndSlash()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"import ("".\basicImport.ds"");
a = {1.1,2.2};
b = 2;
c = Scale(a,b);";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1380_T005_BasicImport_RelativePath()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"import ("".\ExtraFolderToTestRelativePath\basicImport.ds"");
a = {1.1,2.2};
b = 2;
c = Scale(a,b);";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1381_T006_BasicImport_TestFunction()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"import (""basicImport.ds"");
a = {1.1,2.2};
b = 2;
c = Scale(a,b);
d = Sin(30.0);
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1382_T007_BasicImport_TestClassConstructorAndProperties()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"import (""basicImport.ds"");
x = 10.1;
y = 20.2;
z = 30.3;
myPoint = Point.ByCoordinates(10.1, 20.2, 30.3);
myPointX = myPoint.X;
myPointY = myPoint.Y;
myPointZ = myPoint.Z;
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1383_T008_BasicImport_TestClassConstructorAndProperties_UserDefinedClass()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"import (""basicImport.ds"");
x1 = 10.1;
y1 = 20.2;
z1 = 30.3;
x2 = 110.1;
y2 = 120.2;
z2 = 130.3;
myPoint1 = Point.ByCoordinates(x1, y1, z1);
myPoint2 = Point.ByCoordinates(x2, y2, z2);
myLine = Line.ByStartPointEndPoint(myPoint1, myPoint2);
startPt = myLine.StartPoint;
endPt = myLine.EndPoint;
startPtX = startPt.X;
startPtY = startPt.Y;
startPtZ = startPt.Z;
endPtX = endPt.X;
endPtY = endPt.Y;
endPtZ = endPt.Z;";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1384_T009_BasicImport_TestClassInstanceMethod()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"import (""basicImport.ds"");
x = 10.1;
y = 20.2;
z = 30.3;
myPoint = Point.ByCoordinates(10.1, 20.2, 30.3);
midValue = myPoint.MidValue();";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1385_T010_BaseImportWithVariableClassInstance_top()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"import (""BaseImportWithVariableClassInstance.ds"");
c = a + b;
myPointX = myPoint.X;
arr = Scale(midValue, 4.0);";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1386_T012_BaseImportImperative()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"import (""BaseImportImperative.ds"");
a = 1;
b = a;
c;
[Associative]
{
	c = 3 * b;
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1387_T013_BaseImportImperative_Bottom()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"a =10;
b = 2 * a; 
import (""BaseImportImperative.ds"");";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1388_T014_BasicImport_BeforeImperative()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"import (""basicImport.ds"");
arr;
[Imperative]
{
	myPoint = Point.ByCoordinates(10.1, 20.2, 30.3);
	midValue = myPoint.MidValue();
	
	arr =  Scale(midValue, 4.0);
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1389_T015_BasicImport_Middle()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"a =10;
b = 2 * a; 
import (""BasicImport.ds"");
x = 10.1;
y = 20.2;
z = 30.3;
myPoint = Point.ByCoordinates(10.1, 20.2, 30.3);
midValue = myPoint.MidValue();
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1390_T016_BaseImportAssociative()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"import (""BaseImportAssociative.ds"");
a = 10;
b = 20;";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1391_T017_BaseImportWithVariableClassInstance_Associativity()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"import (""BaseImportWithVariableClassInstance.ds"");
c = a + b;
a = 10;";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1392_T018_MultipleImport()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"import (""basicImport1.ds"");
import (""basicImport2.ds"");
myPoint = Point.ByCoordinates(10.1, 20.2, 30.3);
z = myPoint.Z;
midValue = myPoint.MidValue();
arr = Scale(midValue, 4.0);";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1393_T019_MultipleImport_ClashFunctionClassRedifinition()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"import (""basicImport.ds"");
import (""basicImport2.ds"");
myPoint = Point.ByCoordinates(10.1, 20.2, 30.3);
z = myPoint.Z;
midValue = myPoint.MidValue();
arr = Scale(midValue, 4.0);";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1394_T020_MultipleImport_WithSameFunctionName()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"import (""basicImport1.ds"");
import (""basicImport3.ds"");
arr = { 1.0, 2.0, 3.0 };
a1 = Scale( arr, 4.0 );
b = a * 2;";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1395_T021_Defect_1457354()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"import (""c:\wrongPath\test.ds"");
a = 1;
b = a * 2;";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1396_T021_Defect_1457354_2()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"import (""basicImport"");
a = 1;
b = a * 2;";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1397_T021_Defect_1457354_3()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"import (""basicImport12.ds"");
a = 1;
b = a * 2;";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1398_T022_Defect_1457740()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"import (""basicImport1.ds"");
import (""basicImport3.ds"");
arr1 = { 1, 3, 5 };
temp = Scale( arr1, a );
a = a;
b = 2 * a;";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1399_basicImport()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"def Scale (arr : double[], scalingFactor : double)
{
    scaledArr = [Imperative]
    {
        counter = 0;
        for(val in arr)
        {
            arr[counter] = scalingFactor * val;
            counter = counter + 1;
        }
        return = arr;
    }
    return = scaledArr;
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1400_T003_BasicImport_ParentPath()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"import (""../basicImport.ds"");
a = {1.1,2.2};
b = 2;
c = Scale(a,b);";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1401_GeometryLibForLanguageTesting()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"def count (array : var[])
{
    c1 = [Imperative]
    {
        c = 0;
	for ( i in array )
	{
		c = c + 1;
	}
	return  = c;	
    }
    return = c1;
}
class Vector
{
    X : double;
    Y : double;
    Z : double;
    
    constructor ByCoordinates( x : double, y : double, z : double )
    {
        X = x;
	Y = y;
	Z = z;
    }    
}
class Point
{
    X : double;
    Y : double;
    Z : double;
    
    constructor ByCartesianCoordinates( x : double, y : double, z : double )
    {
        X = x;
	Y = y;
	Z = z;
    }   
    
    def DistanceTo( p2:Point )
    {
        start_x = X - p2.X;
	return = start_x;
    }
    
    def DirectionTo( p2:Point )
    {
        start_x = X - p2.X;
	start_y = Y - p2.Y;
	start_z = Z - p2.Z;
	return = Vector.ByCoordinates( start_x, start_y, start_z );
    }
    
    def Project( v1:Vector, distance : double )
    {
        start_x = X - v1.X + distance;
	start_y = Y - v1.Y + distance;
	start_z = Z - v1.Z + distance;
	return = Point.ByCartesianCoordinates( start_x, start_y, start_z );
    }
    
    def Translate( x1 : double, y1 : double, z1 : double )
    {
    	return = Point.ByCartesianCoordinates( X + x1, Y + y1, Z + z1 );
    }
}
class Line extends BSplineCurve
{
    StartPoint : Point;
    EndPoint : Point;
    Color : double; 
    Length : double;
    
    constructor ByStartPointEndPoint( p1 : Point, p2 :Point )
    {
        StartPoint = p1;
	EndPoint = p2;
	Length  = p2.X - p1.X;
    }
    
    def PointAtParameter(  v : double )
    {
        start_x = StartPoint.X * v;
	start_y = StartPoint.Y * v;
	start_z = StartPoint.Z * v;
	p1_temp = Point.ByCartesianCoordinates( start_x, start_y, start_z );
	
	return = p1_temp;
    }
    
    def Trim ( params : double[], retain : bool )
    {
        start_x = StartPoint.X * params[0];
	start_y = StartPoint.Y * params[0];
	start_z = StartPoint.Z * params[0];
	
	end_x = EndPoint.X * params[1];
	end_y = EndPoint.Y * params[1];
	end_z = EndPoint.Z * params[1];
	
	p1_temp = Point.ByCartesianCoordinates( start_x, start_y, start_z );
	p2_temp = Point.ByCartesianCoordinates( end_x, end_y, end_z );
	
	new_trimmed_line = Line.ByStartPointEndPoint( p1_temp, p2_temp );
	return = new_trimmed_line;
    }
    
    def Trim ( v : double )
    {
        x_temp = EndPoint.X * v;
	p2_temp = Point.ByCartesianCoordinates( x_temp, EndPoint.Y, EndPoint.Z );
	new_trimmed_line = Line.ByStartPointEndPoint(StartPoint, p2_temp );
	return = new_trimmed_line;
    }
    
    def ExtrudeAsSurface( l1 : double, v1: Vector)
    {
        return = BSplineSurface.ByPoints( { { StartPoint, Point.ByCartesianCoordinates(l1,l1,l1)}, {EndPoint, Point.ByCartesianCoordinates(v1.X,v1.Y,v1.Z) } } );
    }
    
    
}
class Solid
{
    StartPoint : Point;
    EndPoint : Point;       
    R1 : double;
    R2 : double;
    
    constructor Cone( p1 : Point, p2 :Point , r1 : double, r2 : double)
    {
        StartPoint = p1;
	EndPoint = p2;
	R1 = r1;
	R2 = r2;
    }   
}
class Tube
{
    StartPoint : Point;
    EndPoint : Point;        
    R1 : double;
    R2 : double;
    
    constructor ByStartPointEndPointRadius( p1 : Point, p2 :Point , r1 : double, r2 : double)
    {
        StartPoint = p1;
	EndPoint = p2;
	R1 = r1;
	R2 = r2;
    }   
}
class BSplineSurface
{
    P1 : Point[]..[];
    
    constructor ByPoints( p1 : Point[]..[] )
    {
        P1 = p1;
    }
}
class BSplineCurve
{
    P1 : Point[];
    
    constructor ByPoints( p1 : Point[] )
    {
        P1 = p1;
    }   
    def Project(s1: BSplineSurface , v1 : Vector)
    {
        return = BSplineCurve.ByPoints( { s1.P1[0][0], s1.P1[1][1], Point.ByCartesianCoordinates ( v1.X, v1.Y, v1.Z ) } );
    }
}
class Circle extends BSplineCurve
{
    P : Point[];
    
    constructor ByPointsOnCurve( p1 : Point[] )
    {
        P = p1;
    }    
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1402_Test_4_10_contains()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"a = 5;
b = 7;
c = 9;
d = {a, b};
f = Contains(d, a); // true
g = Contains(d, c); // false
h = Contains({10,11},11); // true collection built �on the fly�
				  // with �literal� values
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1403_Test_4_11_indexOf()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"a = 5;
b = 7;
c = 9;
d = {a, b, c};
f = IndexOf(d, b); // 1
g = d[f+1]; // c
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1404_Test_4_12_isRectangular()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"import(""GeometryLibForLanguageTesting.ds"");
x = 1..2;
y = 6..7;
collection = Point.ByCartesianCoordinates(x<1>,y<2>,0);
test1 = collection.X;
raggedCollection = {collection[0][1], {collection[1][0], collection[1][1]}, collection[0][0]};
result =  IsRectangular(raggedCollection)? BSplineSurface.ByPoints(raggedCollection): BSplineSurface.ByPoints(collection); // Known Limitation : both paths of the inline conditional will be executed, which will lead to some error messages currently
test2 = result.P1.X;
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(importpath, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1405_Test_4_13_Transpose()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"a ={{1,2},{3,4}};
b = a[0][0]; // b = 1
c = a [0][1]; // c = 2
a = Transpose(a); // b = 1; c =3
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1406_Test_4_14_isUniformDepth()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"myNonUniformDepth2Dcollection = {{1, 2, 3}, {4, 5}, 6};
individualMemberB = myNonUniformDepth2Dcollection [0][1]; // OK, = B
individualMemberD = myNonUniformDepth2Dcollection [2][0]; // would fail
individualMemberE = myNonUniformDepth2Dcollection [2];    // OK, = 6
// Various collection manipulation functions are provided to assist with these issues, one of these functions is:
testDepthUniform = IsUniformDepth(myNonUniformDepth2Dcollection); // = false
testForDeepestDepth  = Rank(myNonUniformDepth2Dcollection); // = 2; current limitation :  1
 
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1407_Test_4_14_normalizeDepth()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"a = {{1,2},3};
a_rectangular = isRectangular(a); // false ; current limitation : true
a_deepestDepth = deepestDepth(a); // 2 ; current limitation : 1
a_uniformDepth = isUniformDepth(a); // false
b = normalizeDepth(a); // {{1,2},{3}};
b_rectangular = isRectangular(b); // false
b_deepestDepth = deepestDepth(b); // 2 ; current limitation : 1
b_uniformDepth = isUniformDepth(b); // true
// normalizeDepth with 'depth' argument
b = normalizeDepth(a, 1); // {1, 2, 3}� only a reduction in depth. Now every deepest member can be accessed by 1 index
c = normalizeDepth(a, 2); // {{1,2},{3}}� some sub collections are increased in depth� Now every deepest member can be accessed by 2 indices
//If the depth input specified by the user is greater than the deepest depth of the nested collections, then all sub collections are additionally nested.
d = normalizeDepth(a, 3); // {{{1},{2}},{{3}}}� all sub collections are increased in depth� Now every deepest member can be accessed by 3 indices
d = {{{1},2},3};
f = normalizeDepth(d, 2); // {{1,2},{3}}� some sub collections are increased in depth and some sub collections are reduced in depth. 
// Now every deepest member can be accessed by 2 indices
//Some more examples : 
a1 = {{1, 2}, 3};
b1 = normalizeDepth(a1, 1); // {1, 2, 3}
c1 = normalizeDepth(a1, 2); // {{1, 2}, {3}}
 
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1408_Test_4_15_someNulls()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"a = { 1, null, 2, 3 };
b = Count(a); // 4 after updating a @ line 9 this value become 3.
c = SomeNulls(a); // true after updating a @ line 9 this value become false.
d = a[-2]; // d = 2 note: use of fixed index [-2] 
a = RemoveNulls(a); // {1, 2, 3}... d = 2
f = Count(d); // 2
g = SomeNulls(a); // false
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1409_Test_4_17_arrayAssignment()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"a = 0..5;
a[1] = -1; // replace a member of a collection
a[2] = a[2] + 0.5; // modify a member of a collection
a[3] = null; // make a member of a collection = null
a[4] = { 3.4, 4.5 }; // allowed, but not advised: subsequently altering the structure of the collection
c = a;
b = { 0, -1, 2.5, null, { 3.4, 4.5 }, 5 }; // however a collection of non-uniform depth and irregular structure can be defined
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1410_Test_4_18_removeByIndex()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"a = 1;
b = 2;
c = 3;
d = 4;
x = { a, b, c, d };
u = Remove(x, 0); // remove by content.. u = {b, c, d};
v = Remove(x, -1); // remove by index.. x = {a, b, c};
w = Insert(x, d, 0); // insert after defined index.. x = {d,a,b,c,d};";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1411_Test_4_20_zipped_collection()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"// Current limitation : 
a = {3, 4, 5};
b = {2, 6};
c = a + b ; // { 5, 10, null}; // Here the length of the resulting variable [c] will be based on the length of the first
//collection encountered [in this case a]
d = b + a; // { 5, 10}; // Here the length of the resulting variable [d] will be based on the length of the first
// collection encountered [in this case b]
// Workaround :
//def sum(a, b)
//{
  //return = a + b;
//}
//d = sum(a, b); // {5, 10}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1412_Test_4_22_replication_guide_with_ragged_collection()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"// The use of replication guides with ragged collections can be unpredictable results, as follows:
a = { 1, { 3, 4 } }; // initial ragged collections
b = { { 5, 6 }, 7 };
c = a + b; // c = { { 6, 7 }, { 10, 11 } } � zipped collection
//d = a<1> + b<2>; // unpredictable
/*
// Woraround : 'flattening' ragged collections and then applying replication give far more predictable results:
f = Flatten(a); // e = { 1, 3, 4 }
g = Flatten(b); // f = { 5, 6, 7 }
h = g + f; // h = { 6, 9, 11 }
i = f<1> + g<2>; // i = { { 6, 7, 8 }, { 8, 9, 10 }, { 9, 10, 11 } }
// Normalising the depth of collections has limited value, if the resulting sub collections are of different length
i = NormalizeDepth(a); // i = {{1},{3,4}};
j = NormalizeDepth(b); // j = {{5,6},{7}};
k = i + j; // unpredictable
l = i<1> + j<2>; // unpredictable*/";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1413_Test_4_4_properties_1()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"import (""GeometryLibForLanguageTesting.ds"");
myPoint = Point.ByCartesianCoordinates(2..10..2, 5, 0);
mySingleXvalue 	  = myPoint[1].X; 	// = 4 
// referencing a member of the myPoint collection 
// and then one of its properties
myCollectionXvalues = myPoint.X; 		// = {2, 4, 6, 8, 10}
// referencing the complete myPoint collection 
// and one of its properties as a collection
myAltSingleXvalue   = myPoint.X[1]; 	// = 4
// referencing all of the myPoint collection and then
// indexing into one of member of one of its properties
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(importpath, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1414_Test_4_9_count()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"count_test1=Count({1,2});   // 2 .. count of collection
a = {{1,2},3};		   // define a nested/ragged collection
count_test2=Count(a);       // 2 .. count of collection
count_test3=Count(a[0]);    // 2 .. count of sub collection
count_test4=Count(a[0][0]); // 0 .. count of single member
m = a[0][0];
count_test5=Count(a[1]);    // 0 .. count of single member
count_test6=Count({}); 	   // 0 .. count of an empty collection
count_test7=Count(3); 	   // 0 .. count of single value
count_test8=Count(null);    // null .. count of null
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1415_Regress_1467127()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"i = 1..6..#10;";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1416_T01_SimpleRangeExpression()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"a;a1;a2;a3;a4;a5;a6;a7;a8;a9;a10;a11;a12;a13;a14;a17;
[Imperative]
{
	a = 1..-6..-2;
	a1 = 2..6..~2.5; 
	a2 = 0.8..1..0.2; 
	a3 = 0.7..1..0.3; 
	a4 = 0.6..1..0.4; 
	a5 = 0.8..1..0.1; 
	a6 = 1..1.1..0.1; 
	a7 = 9..10..1; 
	a8 = 9..10..0.1;
	a9 = 0..1..0.1; 
	a10 = 0.1..1..0.1;
	a11 = 0.5..1..0.1;
	a12 = 0.4..1..0.1;
	a13 = 0.3..1..0.1;
	a14 = 0.2..1..0.1;
	a17 = (0.5)..(0.25)..(-0.25);
	
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1417_T02_SimpleRangeExpression()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"a15;a16;a18;a19;a20;
[Imperative]
{
	a15 = 1/2..1/4..-1/4;
	a16 = (1/2)..(1/4)..(-1/4);
	a18 = 1.0/2.0..1.0/4.0..-1.0/4.0;
	a19 = (1.0/2.0)..(1.0/4.0)..(-1.0/4.0);
	a20 = 1..3*2; 
	//a21 = 1..-6;
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1418_T03_SimpleRangeExpressionUsingCollection()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"w1;w2;w3;w4;w5;
[Imperative]
{
	a = 3 ;
	b = 2 ;
	c = -1;
	w1 = a..b..-1 ; //correct  
	w2 = a..b..c; //correct 
	e1 = 1..2 ; //correct
	f = 3..4 ; //correct
	w3 = e1..f; //correct
	w4 = (3-2)..(w3[1][1])..(c+2) ; //correct
	w5 = (w3[1][1]-2)..(w3[1][1])..(w3[0][1]-1) ; //correct
}
/* expected results : 
    Updated variable a = 3
    Updated variable b = 2
    Updated variable c = -1
    Updated variable w1 = { 3, 2 }
    Updated variable w2 = { 3, 2 }
    Updated variable e1 = { 1, 2 }
    Updated variable f = { 3, 4 }
    Updated variable w3 = { { 1, 2, 3 }, { 2, 3, 4 } }
    Updated variable w4 = { 1, 2, 3 }
    Updated variable w5 = { 1, 2, 3 }
*/
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1419_T04_SimpleRangeExpressionUsingFunctions()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"z1;z2;z3;z4;z5;z7;
[Imperative]
{
	def twice : double( a : double ) 
	{
		return = 2 * a;
	}
	z1 = 1..twice(4)..twice(1);
	z2 = 1..twice(4)..twice(1)-1;
	z3 = 1..twice(4)..(twice(1)-1);
	z4 = 2*twice(1)..1..-1;
	z5 = (2*twice(1))..1..-1;
	//z6 = z5 - z2 + 0.3;
	z7 = (z3[0]+0.3)..4..#1 ; 
   
}
/*
Succesfully created function 'twice' 
    Updated variable z1 = { 1, 3, 5, 7 }
    Updated variable z2 = { 1, 2, 3, ... , 6, 7, 8 }
    Updated variable z3 = { 1, 2, 3, ... , 6, 7, 8 }
    Updated variable z4 = { 4, 3, 2, 1 }
    Updated variable z5 = { 4, 3, 2, 1 }
    //Updated variable z6 = { 3.3, 1.3, -1.7, -2.7 }
    Updated variable z7 = { 1.3 }
	*/";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1420_T05_RangeExpressionWithIncrement()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"d;e1;f;g;h;i;j;k;l;m;
[Imperative]
{
	d = 0.9..1..0.1;
	e1 = -0.4..-0.5..-0.1;
	f = -0.4..-0.3..0.1;
	g = 0.4..1..0.2;
	h = 0.4..1..0.1;
	i = 0.4..1;
	j = 0.6..1..0.4;
	k = 0.09..0.1..0.01;
	l = 0.2..0.3..0.05;
	m = 0.05..0.1..0.04;
	n = 0.1..0.9..~0.3;
	k = 0.02..0.03..#3;
	l = 0.9..1..#5;
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1421_T06_RangeExpressionWithIncrement()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"a;b;c;
[Imperative]
{
	a = 0.3..0.1..-0.1;
	b = 0.1..0.3..0.2;
	c = 0.1..0.3..0.1;
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1422_T07_RangeExpressionWithIncrementUsingFunctionCall()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"d;f;
[Imperative]
{
	def increment : double[] (x : double[]) 
	{
		j = 0;
		for( i in x )
		{
			x[j] = x[j] + 1 ;
			j = j + 1;
		}
		return = x;
	}
	a = {1,2,3};
	b = {3,4,5} ;
	c = {1.5,2.5,4,3.65};
	f = {7,8*2,9+1,5-3,-1,-0.34};
	//nested collection
	d = {3.5,increment(c)};
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1423_T08_RangeExpressionWithIncrementUsingVariables()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"h;i;j;k;l;
[Imperative]
{
	def square : double ( x :double ) 
	{
		return = x * x;
	}
	z = square(4);
	x = 1 ;
	y = -2 ;
	a = 1..2 ;
	b = 1..6..3;
	c = 2..3..1;
	d = 2..10..2;
	e1 = 1..3..0.5;
	f = 2..4..0.2 ;
	//using variables
	h = z..3..-4;
	i = 1..z..x;
	j = z..x..y; 
	k = a..b..x ;
	l = a..c..x ;
	//using function call 
	g = 6..9.5..square(-1);
	m = 0.8..square(1)..0.1; 
	n = square(1)..0.8..-0.1;
	o = 0.8..square(0.9)..0.01; 
}
/*
result
z = 16
x = 1
y = -2
a = {1,2}
b = {1,4}
c = {2,3}
d = {2,4,6,8,10}
e1 = {1.000000,1.500000,2.000000,2.500000,3.000000}
f = {2.000000,2.200000,2.400000,2.600000,2.800000,3.000000,3.200000,3.400000,3.600000,3.800000,4.000000}
h = {16,12,8,4}
i = {1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16}
j = {16,14,12,10,8,6,4,2}
k = {{1},{2,3,4}}
l = {{1,2},{2,3}}
g = {6.000000,7.000000,8.000000,9.000000}
m = {0.800000,0.900000,1.000000}
n = {1.000000,0.900000,0.800000}
o = {0.800000,0.810000}
*/";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1424_T09_RangeExpressionWithApproximateIncrement()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"a;b;f;g;h;j;k;l;
[Imperative]
{
	def square : double ( x: double ) 
	{
		return = x * x;
	}
	
	x = 0.1; 
	a = 0..2..~0.5;
	b = 0..0.1..~square(0.1);
	f = 0..0.1..~x;      
	g = 0.2..0.3..~x;    
	h = 0.3..0.2..~-0.1; 
	
	j = 0.8..0.5..~-0.3;
	k = 0.5..0.8..~0.3; 
	l = 0.2..0.3..~0.0;
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1425_T10_RangeExpressionWithReplication()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"a;b;
[Imperative]
{
	//step value greater than the end value
	a = 1..2..3;
	b = 3..4..3;
	c = a..b..a[0]; // {{1,2,3}}
	d = 0.5..0.9..0.1;
	e1 = 0.1..0.2..0.05;
	f = e1[1]..d[2]..0.5;
	g = e1..d..0.2;
	h = e1[2]..d[1]..0.5;
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1426_T11_RangeExpressionUsingClasses()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class point
{
		x : var[];
		
		constructor point1(a : int[])
		{
			x = a;
		}
		
		def foo(a : int)
		{
			return = a;
		}
}
def foo1(a : int)
		{
			return = a;
		}
def foo2(a : int[])
		{
			return = a[2];
		}
a1;a2;a3;a4;
[Imperative]
{
	x1 = 1..4;
	//x1 = { 1, 2, 3, 4 };
	a = point.point1(x1);
	a1 = a.x;
	a2 = a.foo(x1);	
	a3 = foo1(x1[0]);
	a4 = foo2(x1);
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1427_T12_RangeExpressionUsingNestedRangeExpressions()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"b;c;d;e1;f;g;h;i;j;
[Imperative]
{
	x = 1..5..2; // {1,3,5}
	y = 0..6..2; // {0,2,4,6}
	a = (3..12..3)..(4..16..4); // {3,6,9,12} .. {4..8..12..16}
	b = 3..00.6..#5;      // {3.0,2.4,1.8,1.2,0.6}
	//c = b[0]..7..#1;    //This indexed case works
	c = 5..7..#1;         //Compile error here , 5
	d = 5.5..6..#3;       // {5.5,5.75,6.0}
	e1 = -6..-8..#3;      //{-6,-7,-8}
	f = 1..0.8..#2;       //{1,0.8}
	g = 1..-0.8..#3;      // {1.0,0.1,-0.8}
	h = 2.5..2.75..#4;    //{2.5,2.58,2.67,2.75}
	i = x[0]..y[3]..#10;//1..6..#10
	j = 1..0.9..#4;// {1.0, 0.96,.93,0.9}
	k= 1..3..#0;//null
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1428_T13_RangeExpressionWithStartEndValuesUsingFunctionCall()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"x;b;c;e1;f;g;
[Imperative]
{
	def even : double (a : int) 
	{
		if((a % 2)>0)
		return = (a+(a * 0.5));
		else
		return = (a-(a * 0.5));
	}
	d = 3;
	x = 1..2..#d;
	a = even(2) ;
	b = 1..a;
	c = even(3)..even(5)..#6;
	d = even(5)..even(6)..#4;
	e1 = e..4..#3;  //e takes default value 2.17
	f = even(3)..(even(8)+4*0.5)..#3;
	g = even(2)+1..1..#5;
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1429_T14_RangeExpressionUsingClassMethods()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class collection
{
	x : var[];
	constructor Create(a: int)
	{
		x = a..(a+3)..#4;
	}
	
	public def get_x()
	{
		return = x;
	}
}
b;
[Imperative]
{
	a = collection.Create(5);
	
	b = a.get_x();
	
}
     
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1430_T15_SimpleRangeExpression_1()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"a;b;d;f;g;h;i;l;
[Imperative]
{
	a = 1..2.2..#3;
	b = 0.1..0.2..#4;
	c = 1..3..~0.2;
	d = (a[0]+1)..(c[2]+0.9)..0.1; 
	e1 = 6..0.5..~-0.3;
	f = 0.5..1..~0.3;
	g = 0.5..0.6..0.01;
	h = 0.51..0.52..0.01;
	i = 0.95..1..0.05;
	j = 0.8..0.99..#10;
	//k = 0.9..1..#1;
	l = 0.9..1..0.1;
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1431_T16_SimpleRangeExpression_2()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"a;b;c;d;e1;f;g;h;
[Imperative]
{
	a = 1.2..1.3..0.1;
	b = 2..3..0.1;
	c = 1.2..1.5..0.1;
	//d = 1.3..1.4..~0.5; //incorrect 
	d = 1.3..1.4..0.5; 
	e1 = 1.5..1.7..~0.2;
	f = 3..3.2..~0.2;
	g = 3.6..3.8..~0.2; 
	h = 3.8..4..~0.2; 
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1432_T17_SimpleRangeExpression_3()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"a;b;c;d;e1;f;g;h;i;j;k;
[Imperative]
{
	a = 1..2.2..~0.2;
	b = 1..2..#3;
	c = 2.3..2..#3;
	d = 1.2..1.4..~0.2;
	e1 = 0.9..1..0.1;
	f = 0.9..0.99..~0.01;
	g = 0.8..0.9..~0.1;
	h = 0.8..0.9..0.1;
	i = 0.9..1.1..0.1;
	j = 1..0.9..-0.05;
	k = 1.2..1.3..~0.1;
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1433_T18_SimpleRangeExpression_4()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"a;b;c;d;e1;f;g;h;
[Imperative]
{
	a = 2.3..2.6..0.3;
	b = 4.3..4..-0.3;
	c= 3.7..4..0.3;
	d = 4..4.3..0.3;
	e1 = 3.2..3.3..0.3;
	f = 0.4..1..0.1;
	g = 0.4..0.45..0.05;
	h = 0.4..0.45..~0.05; 
	g = 0.4..0.6..~0.05;
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1434_T19_SimpleRangeExpression_5()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"b;c;d;e1;f;g;h;i;
[Imperative]
{
	//a = 0.1..0.2..#1; //giving error
	b = 0.1..0.2..#2;
	c = 0.1..0.2..#3;
	d = 0.1..0.1..#4;
	e1 = 0.9..1..#5;
	f = 0.8..0.89..#3;
	g = 0.9..0.8..#3;
	h = 0.9..0.7..#5;
	i = 0.6..1..#4;
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1435_T20_RangeExpressionsUsingPowerOperator()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"e1;f;
[Imperative]
{
	def power : double (a:double,b:int) 
	{
		temp = 1;
		while( b > 0 )
		{
			temp = temp * a;
			b = b - 1;
		}
		return = temp;
	}
	a = 3;
	b = 2; 
	c = power(2,3);
	d = b..a;
	e1 = b..c..power(2,1);
	f = power(1.0,1)..power(2,2)..power(0.5,1);   
	/*h = power(0.1,2)..power(0.2,2)..~power(0.1,2);
	i = power(0.1,1)..power(0.2,1)..~power(0.1,1);         has not been implemented yet
	j = power(0.4,1)..power(0.45,1)..~power(0.05,1);
	k = power(1.2,1)..power(1.4,1)..~power(0.2,1);
	l = power(1.2,1)..power(1.3,1)..~power(0.1,1); 
	m = power(0.8,1)..power(0.9,1)..~power(0.1,1);
	n = power(0.08,1)..power(0.3,2)..~power(0.1,2); */
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1436_T21_RangeExpressionsUsingEvenFunction()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"c;d;e1;f;g;
[Imperative]
{
	def even : int (a : int) 
	{	
		if(( a % 2 ) > 0 )
			return = a + 1;
		
		else 
			return = a;
	}
	x = 1..3..1;
	y = 1..9..2;
	z = 11..19..2;
	c = even(x); // 2,2,4
	d = even(x)..even(c)..(even(0)+0.5); // {2,2,4}
	e1 = even(y)..even(z)..1; // {2,4,6,8,10} .. {12,14,16,18,20}..1
	f = even(e1[0])..even(e1[1]); // even({2,3,4,5,6,7,8,9,10,11,12} ..even({4,5,6,7,8,9,10,11,12,13,14})
   /*  {2,4,4,6,6,8,8,10,10,12,12} .. {4,6,6,8,8,10,10,12,12,14,14}
*/ 
	g = even(y)..even(z)..f[0][1];  // {2,4,6,8,10} .. {12,14,16,18,20} .. 3
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1437_T22_RangeExpressionsUsingClassMethods_2()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class addition
{
	a : var[];
	constructor Create( y : int[] )
	{
		a = y;
	}
	def get_col ( x : int )
	{
		a[0] = x;
		return = a; 
	}
}
d;
[Imperative]
{
	a = 2..10..2;
	c = addition.Create( a );
	d = c.get_col( 5 );
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1438_T23_RangeExpressionsUsingClassMethods_3()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class compare
{
	a ;
	b ; 
	constructor Create (x, y)
	{
		a = x ;
		b = y ;
	}
	def get_max ()
	{
		return = (a > b) ? a : b ; 
	}
	def get_min ()
	{
		return = (a < b) ? a : b ; 
	}
}
	a = 1..5..1;
	b = 10..2..-2;
	c = compare.Create(a,b); 
	i = 4;
	d = c[0..i].get_max();
	e1 = c[0..i].get_min();
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1439_T25_RangeExpression_WithDefaultDecrement()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"a=5..1;
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1440_T25_RangeExpression_WithDefaultDecrement_1467121()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"a=5..1;
b=-5..-1;
c=1..0.5;
d=1..-0.5;
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1441_T25_RangeExpression_WithDefaultDecrement_nested_1467121_2()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"a=(5..1).. (1..5);
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1442_T26_RangeExpression_Function_tilda_1457845()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"x;a;b;f;g;h;j;k;l;m;
[Imperative]
{
	def square : double ( x: double ) 
	{
		return = x * x;
	}
	
	x = 0.1; 
	a = 0..2..~0.5;
	b = 0..0.1..~square(0.1);
	f = 0..0.1..~x;      
	g = 0.2..0.3..~x;    
	h = 0.3..0.2..~-0.1; 
	
	j = 0.8..0.5..~-0.3;
	k = 0.5..0.8..~0.3; 
	l = 0.2..0.3..~0.0;
	m = 0.2..0.3..~1/2; // division 
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1443_T26_RangeExpression_Function_tilda_associative_1457845_3()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"x;a;b;f;g;h;j;k;l;m;
[Associative]
{
	def square : double ( x: double ) 
	{
		return = x * x;
	}
}
[Imperative]
{
	x = 0.1; 
	a = 0..2..~0.5;
	b = 0..0.1..~square(0.1);
	f = 0..0.1..~x;      
	g = 0.2..0.3..~x;    
	h = 0.3..0.2..~-0.1; 
	
	j = 0.8..0.5..~-0.3;
	k = 0.5..0.8..~0.3; 
	l = 0.2..0.3..~0.0;
	m = 0.2..0.3..~1/2; // division 
}
	
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1444_T26_RangeExpression_Function_tilda_multilanguage_1457845_2()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"x;a;b;f;g;h;j;k;l;m;
[Associative]
{
	def square : double ( x: double ) 
	{
		return = x * x;
	}
[Imperative]
{
	x = 0.1; 
	a = 0..2..~0.5;
	b = 0..0.1..~square(0.1);
	f = 0..0.1..~x;      
	g = 0.2..0.3..~x;    
	h = 0.3..0.2..~-0.1; 
	
	j = 0.8..0.5..~-0.3;
	k = 0.5..0.8..~0.3; 
	l = 0.2..0.3..~0.0;
	m = 0.2..0.3..~1/2; // division 
}
	}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1445_T27_RangeExpression_class_return_1463472_2()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class twice
{
	def twice : int []( a : double )
	{
		c=1..a;
		return = c;
	}
}
d=1..4;
a=twice.twice();
c=a.twice(4);
//	z1 = 1..twice(4)..twice(1);
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1446_T27_RangeExpression_Function_Associative_1463472()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"z1;
[Associative]
{
	def twice : double( a : double )
	{
		return = 2 * a;
	}
	z1 = 1..twice(4)..twice(1);
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1447_T27_RangeExpression_Function_Associative_1463472_2()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"c;
[Associative]
{
	def twice : int []( a : double )
	{
		c=1..a;
		return = c;
	}
d=1..4;
c=twice(4);
//	z1 = 1..twice(4)..twice(1);
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1448_T27_RangeExpression_Function_Associative_replication()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"z1;
[Associative]
{
	def twice : int[]( a : int )
	{
		c=2*(1..a);
		return = c;
	}
    d={1,2,3,4};
	z1=twice(d);
//	z1 = 1..twice(4)..twice(1);
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1449_T27_RangeExpression_Function_return_1463472()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"c;
[Associative]
{
	def twice : int []( a : double )
	{
		c=1..a;
		return = c;
	}
d=1..4;
c=twice(4);
//	z1 = 1..twice(4)..twice(1);
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1450_TA01_RangeExpressionWithIntegerIncrement()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"a1;a2;
[Imperative]
{
	a1 = 1..5..2;
	a2 = 12.5..20..2;
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1451_TA02_RangeExpressionWithDecimalIncrement()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"a1;a2;
[Imperative]
{
	a1 = 2..9..2.7;
	a2 = 10..11.5..0.3;
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1452_TA03_RangeExpressionWithNegativeIncrement()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"a;b;c;
[Imperative]
{
	a = 10..-1..-2;
	b = -2..-10..-1;
	c = 10..3..-1.5;
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1453_TA04_RangeExpressionWithNullIncrement()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"a;b;
[Imperative]
{
	a = 1..5..null;
	b = 0..6..(null);
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1454_TA05_RangeExpressionWithBooleanIncrement()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"a;b;
[Imperative]
{
	a = 2.5..6..(true);
	b = 3..7..false;
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1455_TA06_RangeExpressionWithIntegerTildeValue()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"a;b;
[Imperative]
{
	a = 1..10..~4;
	b = -2.5..10..~5;
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1456_TA07_RangeExpressionWithDecimalTildeValue()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"a;b;
[Imperative]
{
	a = 0.2..0.3..~0.2; //divide by zero error
	b = 6..13..~1.3;
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1457_TA08_RangeExpressionWithNegativeTildeValue()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"a;b;
[Imperative]
{
	a = 3..1..~-0.5;
	b = 18..13..~-1.3;
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1458_TA09_RangeExpressionWithNullTildeValue()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"a;b;
[Imperative]
{
	a = 1..5..~null;
	b = 5..2..~(null);
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1459_TA10_RangeExpressionWithBooleanTildeValue()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"a;b;
[Imperative]
{
	a = 1..3..(true);
	b = 2..2..false;
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1460_TA11_RangeExpressionWithIntegerHashValue()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"a;b;c;
[Imperative]
{
	a = 1..3.3..#5;
	b = 3..3..#3;
	c = 3..3..#1;
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1461_TA12_RangeExpressionWithDecimalHashValue()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"a;b;
[Imperative]
{
	a = 1..7..#2.5;
	b = 2..10..#2.4;
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1462_TA13_RangeExpressionWithNegativeHashValue()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"a;
[Imperative]
{
	a = 7.5..-2..#-9;
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1463_TA14_RangeExpressionWithNullHashValue()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"a;
[Imperative]
{
	a = 2..10..#null;
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1464_TA15_RangeExpressionWithBooleanHashValue()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"a;b;
[Imperative]
{
	b = 12..12..#false;
	a = 12..12..#(true);
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1465_TA16_RangeExpressionWithIncorrectLogic_1()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"a;
[Imperative]
{
	a = 5..1..2;
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1466_TA17_RangeExpressionWithIncorrectLogic_2()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"a;
[Imperative]
{
	a = 5.5..10.7..-2;
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1467_TA18_RangeExpressionWithIncorrectLogic_3()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"a;b;c;
[Imperative]
{
	a = 7..7..5;
	b = 8..8..~3;
	c = 9..9..#1;
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1468_TA19_RangeExpressionWithIncorrectLogic_4()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"a;
[Imperative]
{
	a = null..8..2;
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1469_TA20_RangeExpressionWithTripleDotOperator()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"a;
[Imperative]
{
	a = 1...7..2;
}	";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1470_TA21_Defect_1454692()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"x;
b;
y;
[Imperative]
{
	x = 0;
	b = 0..3; //{ 0, 1, 2, 3 }
	for( y in b )
	{
		x = y + x;
	}
	
}	";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1471_TA21_Defect_1454692_2()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"def length : int (pts : double[])
{
    numPts = [Imperative]
    {
        counter = 0;
        for(pt in pts)
        {
            counter = counter + 1;
        }
        
        return = counter;
    }
    return = numPts;
}
    
arr = 0.0..3.0;//{0.0,1.0,2.0,3.0};
num = length(arr);
	";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1472_TA21_Defect_1454692_3()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class A
{
	Pts : var[];
	constructor A ( pts : double[] )
	{
	    Pts = pts;
	}
	def length ()
	{
		numPts = [Imperative]
		{
			counter = 0;
			for(pt in Pts)
			{
				counter = counter + 1;
			}
			
			return = counter;
		}
		return = numPts;
	}
}
    
arr = 0.0..3.0;//{0.0,1.0,2.0,3.0};
a1 = A.A(arr);
num = a1.length();
	";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1473_TA21_Defect_1454692_4()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"def foo(i : int[])
{
    count = 0;
	count = [Imperative]
	{
	    for ( x in i )
		{
		    count = count + 1;
		}
		return = count;
	}
	return = count;
	
}
    
arr = 0.0..3.0;//{0.0,1.0,2.0,3.0};
c;x;
[Imperative]
{
	x = 0;
	b = 0..3; //{ 0, 1, 2, 3 }
	for( y in arr )
	{
		x = y + x;
	}
	x1 = 0..3;
	c = foo(x1);
	
}
	";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1474_TA22_Range_Expression_floating_point_conversion_1467127()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"a = 1..6..#10;
b = 0.1..0.6..#10;
c = 0.01..-0.6..#10;
d= -0.1..0.06..#10;
	";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1475_TA22_Range_Expression_floating_point_conversion_1467127_2()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"a = 0..7..~0.75;
b = 0.1..0.7..~0.075;
c = 0.01..-7..~0.75;
d= -0.1..7..~0.75; 
e = 1..-7..~1;
	";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1476_TA23_Defect_1466085_Update_In_Range_Expr()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"y = 1;
y1 = 0..y;
y = 2;
z1 = y1; 
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1477_TA23_Defect_1466085_Update_In_Range_Expr_2()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"a = 0;
b = 10;
c = 2;
y1 = a..b..c;
a = 7;
b = 14;
c = 7;
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1478_TA23_Defect_1466085_Update_In_Range_Expr_3()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"def foo ( x : int[] )
{
    return = Count(x);
}
a = 0;
b = 10;
c = 2;
y1 = a..b..c;
z1 = foo ( y1 );
z2 = Count( y1 );
c = 5;
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1479_T001_LanguageBlockScope_AssociativeNestedAssociative()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"[Associative]
{
	a = 10;
	b = true;
	c = 20.1;
	[Associative]	
	{
	
		a_inner = a;
		b_inner = b;
		c_inner = c;
	}
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1480_T002_LanguageBlockScope_ImperativeNestedImperaive()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"[Imperative]
{
	a = 10;
	b = true;
	c = 20.1;
	[Imperative]	
	{
		a_inner = a;
		b_inner = b;
		c_inner = c;
	}
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1481_T003_LanguageBlockScope_ImperativeNestedAssociative()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"a_inner;
b_inner;
c_inner;
[Imperative]
{
	a = 10;
	b = true;
	c = 20.1;
	[Associative]	
	{
		a_inner = a;
		b_inner = b;
		c_inner = c;
	}
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1482_T004_LanguageBlockScope_AssociativeNestedImperative()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"a_inner;b_inner;c_inner;
[Associative]
{
	a = 10;
	b = true;
	c = 20.1;
	[Imperative]	
	{
		a_inner = a;
		b_inner = b;
		c_inner = c;
	}
	
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1483_T005_LanguageBlockScope_DeepNested_IAI()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"a_inner1;a_inner2;
b_inner1;b_inner2;
c_inner1;c_inner2;
[Imperative]
{
	a = 10;
	b = true;
	c = 20.1;
	[Associative]	
	{
		a_inner1 = a;
		b_inner1 = b;
		c_inner1 = c;
		
		
		[Imperative]
		{
			a_inner2 = a;
			b_inner2 = b;
			c_inner2 = c;
			
		}
	}
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1484_T006_LanguageBlockScope_DeepNested_AIA()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"a_inner1;b_inner1;c_inner1;
a_inner2;b_inner2;c_inner2;
[Associative]
{
	a = 10;
	b = true;
	c = 20.1;
	[Imperative]	
	{
		a_inner1 = a;
		b_inner1 = b;
		c_inner1 = c;
		
		
		[Associative]
		{
			a_inner2 = a;
			b_inner2 = b;
			c_inner2 = c;
			
		}
	}
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1485_T007_LanguageBlockScope_AssociativeParallelImperative()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"aI;bI;cI;
[Associative]
{
	a = 10;
	b = true;
	c = 20.1;
	
}
[Imperative]	
{
	aI = a;
	bI = b;
	cI = c;
	
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1486_T008_LanguageBlockScope_ImperativeParallelAssociative()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"aA;bA;cA;
[Imperative]
{
	a = 10;
	b = true;
	c = 20.1;
}
[Associative]	
{
	aA = a;
	bA = b;
	cA = c;
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1487_T009_LanguageBlockScope_UpdateVariableInNestedLanguageBlock_IA()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"a;b;c;
newA;newB;newC;
[Imperative]
{
	a = -10;
	b = false;
	c = -20.1;
	[Associative]	
	{
		a = 1.5;
		b = -4;
		c = false;
	}
	
	newA = a;
	newB = b;
	newC = c;
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1488_T010_LanguageBlockScope_UpdateVariableInNestedLanguageBlock_AI()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"a;b;c;
newA;newB;newC;
[Associative]
{
	a = -10;
	b = false;
	c = -20.1;
	[Imperative]	
	{
		a = 1.5;
		b = -4;
		c = false;
	}
	
	newA = a;
	newB = b;
	newC = c;
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1489_T011_LanguageBlockScope_AssociativeParallelAssociative()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"aA;bA;cA;
[Associative]
{
	a = 10;
	b = true;
	c = 20.1;
	
}
[Associative]	
{
	aA = a;
	bA = b;
	cA = c;
	
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1490_T012_LanguageBlockScope_ImperativeParallelImperative()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"aI; bI; cI;
[Imperative]
{
	a = 10;
	b = true;
	c = 20.1;
	
}
[Imperative]	
{
	aI = a;
	bI = b;
	cI = c;
	
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1491_T013_LanguageBlockScope_MultipleParallelLanguageBlocks_AIA()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"aI;bI;cI;
aA;bA;cA;
[Associative]
{
	a = 10;
	b = true;
	c = 20.1;
	
}
[Imperative]	
{
	aI = a;
	bI = b;
	cI = c;
	
}
[Associative]	
{
	aA = a;
	bA = b;
	cA = c;
	
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1492_T014_LanguageBlockScope_MultipleParallelLanguageBlocks_IAI()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"aI;bI;cI;
aA;bA;cA;
[Imperative]
{
	a = 10;
	b = true;
	c = 20.1;
}
[Associative]	
{
	aA = a;
	bA = b;
	cA = c;
	
}
[Imperative]	
{
	aI = a;
	bI = b;
	cI = c;
	
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1493_T015_LanguageBlockScope_ParallelInsideNestedBlock_AssociativeNested_II()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"a;aI1;aA1;aI2;aA2;
[Associative]
{
	a = 10;
	
	[Imperative]	
	{
		aI1 = a;
	}
	aA1 = a;
	
	[Imperative]	
	{
		aI2 = a;
	}
	
	aA2 = a;
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1494_T016_LanguageBlockScope_ParallelInsideNestedBlock_ImperativeNested_AA()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"a;aA1;aI1;aA2;aI2;
[Imperative]
{
	a = 10;
	[Associative]	
	{
		aA1 = a;
	}
	aI1 = a;
	
	[Associative]	
	{
		aA2 = a;
	}
	aI2 = a;
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1495_T017_LanguageBlockScope_AssociativeNestedAssociative_Function()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"[Associative]
{
	def foo : int(a : int, b : int)
	{
		return = a + b;
	}
	[Associative]	
	{
	    x = 10;
	    y = 20;
	    z = foo (x, y);
	}
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1496_T018_LanguageBlockScope_ImperativeNestedImperaive_Function()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"[Imperative]
{
	def foo : int(a : int, b : int)
	{
		return = a + b;
	}
		[Imperative]	
	{
	x = 10;
	y = 20;
	z = foo (x, y);
	}
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1497_T019_LanguageBlockScope_ImperativeNestedAssociative_Function()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"z;
[Imperative]
{
	def foo : int(a : int, b : int)
	{
		return = a - b;
	}
	[Associative]	
	{
	x = 20;
	y = 10;
	z = foo (x, y);
	}
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1498_T020_LanguageBlockScope_AssociativeNestedImperative_Function()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"z;
[Associative]
{
	def foo : int(a : int, b : int)
	{
		return = a - b;
	}
	[Imperative]	
	{
	x = 20;
	y = 10;
	z = foo (x, y);
	}
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1499_T021_LanguageBlockScope_DeepNested_IAI_Function()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"z_1;
z_2;
[Imperative]
{
	def foo : int(a : int, b : int)
	{
		return = a - b;
	}
	[Associative]	
	{
		x_1 = 20;
		y_1 = 10;
		z_1 = foo (x_1, y_1);
	
	
	[Imperative]
		{
			x_2 = 100;
			y_2 = 100;
			z_2 = foo (x_2, y_2);
			
		}
	}
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1500_T022_LanguageBlockScope_DeepNested_AIA_Function()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"z_1;
z_2;
[Associative]
{
	def foo : int(a : int, b : int)
	{
		return = a - b;
	}
	[Imperative]	
	{
		x_1 = 20;
		y_1 = 10;
		z_1 = foo (x_1, y_1);
	
	
	[Associative]
		{
			x_2 = 100;
			y_2 = 100;
			z_2 = foo (x_2, y_2);
			
		}
	}
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1501_T023_LanguageBlockScope_AssociativeParallelImperative_Function()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"z;
[Associative]
{
	def foo : int(a : int, b : int)
	{
		return = a - b;
	}
	 
	a = 10;
	
}
[Imperative]	
{
	x = 20;
	y = 0;
	z = foo (x, y);
	
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1502_T024_LanguageBlockScope_ImperativeParallelAssociative_Function()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"z;
[Imperative]
{
	def foo : int(a : int, b : int)
	{
		return = a - b;
	}
	 
	a = 10;
	
}
[Associative]	
{
	x = 20;
	y = 0;
	z = foo (x, y);
	
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1503_T025_LanguageBlockScope_AssociativeParallelAssociative_Function()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"z;
[Associative]
{
	def foo : int(a : int, b : int)
	{
		return = a - b;
	}
	 
	a = 10;
	
}
[Associative]	
{
	x = 20;
	y = 0;
	z = foo (x, y);
	
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1504_T026_LanguageBlockScope_ImperativeParallelImperative_Function()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"z;
[Imperative]
{
	def foo : int(a : int, b : int)
	{
		return = a - b;
	}
	 
	a = 10;
	
}
[Imperative]	
{
	x = 20;
	y = 0;
	z = foo (x, y);
	
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1505_T027_LanguageBlockScope_MultipleParallelLanguageBlocks_AIA_Function()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"z_1;
z_2;
[Associative]
{
	def foo : int(a : int, b : int)
	{
		return = a - b;
	}
	 
	a = 10;
	
}
[Imperative]	
{
	x_1 = 20;
	y_1 = 0;
	z_1 = foo (x_1, y_1);
	
}
[Associative]
{
	x_2 = 20;
	y_2 = 0;
	z_2 = foo (x_2, y_2);
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1506_T028_LanguageBlockScope_MultipleParallelLanguageBlocks_IAI_Function()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"z_1;
z_2;
[Imperative]
{
	def foo : int(a : int, b : int)
	{
		return = a - b;
	}
	 
	a = 10;
	
}
[Associative]	
{
	x_1 = 20;
	y_1 = 0;
	z_1 = foo (x_1, y_1);
	
}
[Imperative]
{
	x_2 = 20;
	y_2 = 0;
	z_2 = foo (x_2, y_2);
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1507_T029_LanguageBlockScope_ParallelInsideNestedBlock_AssociativeNested_II_Function()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"z_I1;
z_I2;
z_A1;
z_A2;
[Associative]
{
	def foo : int(a : int, b : int)
	{
		return = a - b;
	}
	 
	[Imperative]
	{
	x_I1 = 50;
	y_I1 = 50;
	z_I1 = foo (x_I1, y_I1);
	}
	
	x_A1 = 30;
	y_A1 = 12;
	z_A1 = foo (x_A1, y_A1);
	
	[Imperative]
	{
	x_I2 = 0;
	y_I2 = 12;
	z_I2 = foo (x_I2, y_I2);
	}
	
	x_A2 = 0;
	y_A2 = -10;
	z_A2 = foo (x_A2, y_A2);
	
	
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1508_T030_LanguageBlockScope_ParallelInsideNestedBlock_ImperativeNested_AA()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"z_A1;
z_I1;
z_A2;
z_I2;
[Imperative]
{
	def foo : int(a : int, b : int)
	{
		return = a - b;
	}
	 
	[Associative]
	{
		x_A1 = 30;
		y_A1 = 12;
		z_A1 = foo (x_A1, y_A1);
	
	}
	
	x_I1 = 50;
	y_I1 = 50;
	z_I1 = foo (x_I1, y_I1);
	
	[Associative]
	{
		x_A2 = 0;
		y_A2 = -10;
		z_A2 = foo (x_A2, y_A2);
	}
	
	x_I2 = 0;
	y_I2 = 12;
	z_I2 = foo (x_I2, y_I2);
	
	
	
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1509_T031_Defect_1450594()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"f;p;q;x;y1;z;y2;
[Imperative]
{
   a = 2;
    [Associative]
    {
        
        i = 3;
    }
    f = i;
}
[Associative]
{
	def foo1 ( i )
	{
		x = 1;
		return = x;
	}
	p = x;
	q = a;
}
y = 1;
[Imperative]
{
   def foo ( i )
   {
		x = 2;
		if( i < x ) 
		{
		    y = 3;
			return = y * i;
		}
		return = y;
	}
	x = y;
	y1 = foo ( 1 );
	y2 = foo ( 3 );
	z = x * 2;
	
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1510_T032_Cross_Language_Variables()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"
a = 5;
b = 2 * a;
sum;
[Imperative] {
	sum = 0;
	arr = 0..b;
	for (i  in arr) {
		sum = sum + 1;
	}
}
a = 10;
// expected: sum = 21
// result: sum = 11";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1511_Z001_LanguageBlockScope_Defect_1453539()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"[Associative]
{	
	a = 10;	
	b = true;	
	c = 20.1;	
}
// [Imperative]	
// {	
// aI = a;	
// bI = a;	
// cI = a;	
// }";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1512_T01_String_IfElse_1()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"a = ""word"";
b = ""word "";
result = 
[Imperative]
{
	if(a==b)
	{
		return = true;
	}
	else return = false;
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1513_T01_String_IfElse_2()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"a = ""w ord"";
b = ""word"";
result = 
[Imperative]
{
	if (a ==b) return = true;
	else return = false;
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1514_T01_String_IfElse_3()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"a = "" "";
b = """";
result = 
[Imperative]
{
	if (a ==b) return = true;
	else return = false;
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1515_T01_String_IfElse_4()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"a = ""a"";
b = ""a"";
result = 
[Imperative]
{
	if (a ==b) return = true;
	else return = false;
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1516_T01_String_IfElse_5()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"a = ""  "";//3 whiteSpace
b = ""	"";//tab
result = 
[Imperative]
{
	if (a ==b) return = true;
	else return = false;
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1517_T01_String_IfElse_6()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"a = """";
b = "" "";
result = 
[Imperative]
{
	if (a ==null && b!=null) return = true;
	else return = false;
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1518_T01_String_IfElse_7()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"a = ""a"";
result = 
[Imperative]
{
	if (a ==true||a == false) return = true;
	else return = false;
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1519_T02_String_Not()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"a = ""a"";
result = 
[Imperative]
{
	if(a)
	{
		return = false;
	}else if(!a)
	{
		return = false;
	}
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1520_T03_Defect_UndefinedType()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"
def foo(x:S)
{
	return = x;
}
b = foo(1);
class C 
{
	fx:M;
	constructor C(x :N)
	{
		fx = x;
	}
	
	def foo(fy : M)
	{
		fx = fy;
		return = fx;
	}
	
}
c = C.C(1);
r1 = c.fx;
r2 = c.foo(2);";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1521_T04_Defect_1454320_String()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"str;
[Associative]
{
str = ""hello world!"";
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1522_T04_Defect_1467100_String()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"def f(s : string)
{
    return = s;
}
x = f(""hello"");
//expected : x = ""hello""
//received : x = null
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1523_T05_String_ForLoop()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"a = ""hello"";
b = ""world"";
c = { a, b };
j = 0;
s = { };
r = 
[Imperative]
{
	for(i in c)
	{
	    s[j] = String(i);
	    j = j + 1;
	}
	
	def String(x : string)
	{
	    return = x;
}
    return = s;
  
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1524_T06_String_Class()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class A
{
	str:string = ""a"";
    def foo(s : string)
    {
        str = s;
return = str;
    }
}
a = A.A();
str1;str2;str3;
[Imperative]
{
	str1 = a.str;
    str2 = a.foo(""foo"");
    a.str = a.str + ""b"";
	str3 =a.str;
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1525_T07_String_Replication()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"a = ""a"";
bcd = {""b"",""c"",""d""};
r = a +bcd;";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1526_T07_String_Replication_1()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"a = {""a""};
bc = {""b"",""c""};
str = a + bc;
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1527_T07_String_Replication_2()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"a = ""a"";
b = {{""b""},{""c""}};
str = a +b;";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1528_T08_String_Inline()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"a = ""a"";
b = ""b"";
r = a>b? a:b;
r1 = a==b? ""Equal"":""!Equal"";";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1529_T08_String_Inline_2()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"a = ""a"";
b = ""b"";
r = a>b? a:b;
r1 = a==b? ""Equal"":""!Equal"";
b = ""a"";";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1530_T09_String_DynamicArr()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"a[1] = foo(""1"" + 1);
a[2] = foo(""2"");
a[10] = foo(""10"");
a[ - 2] = foo("" - 2"");//smart formatting
r = 
[Imperative]
{
    i = 5;
    while(i < 7)
    {
        a[i] = foo(""whileLoop"");
        i = i + 1;
    }
    return = a;
}
def foo(x:var)
{
    return = x + ""!!"";
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1531_T10_String_ModifierStack()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"a =
{
    ""a"";
    + ""1"" => a1;
    + { ""2"", ""3"" } => a2;
    ""b"" => b;
}
r = a;";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1532_T11_String_Imperative()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"r =
[Imperative]
{
    a = ""a"";
    b = a;
    
}
c = b;
b = ""b1"";
a = ""a1"";
m = ""m"";
n = m;
n = ""n"";
m = m+n;
//a =""a1""
//b = ""b1""
//c = ""b1"";
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1533_T12_Char_Function()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"def foo ( x)
{
	b1= x ;
	return =b1;
}
c1 = foo( '1.5');
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1534_Test()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"a =
{
    ""a"";
    + { ""2"", ""3"" } => aReplicate;//{""a12"",""a13""}?
}
r = a;
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1535_GeometryLibForLanguageTesting()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"def count (array : var[])
{
    c1 = [Imperative]
    {
        c = 0;
	for ( i in array )
	{
		c = c + 1;
	}
	return  = c;	
    }
    return = c1;
}
class Vector
{
    X : double;
    Y : double;
    Z : double;
    
    constructor ByCoordinates( x : double, y : double, z : double )
    {
        X = x;
	Y = y;
	Z = z;
    }    
}
class Point
{
    X : double;
    Y : double;
    Z : double;
    
    constructor ByCartesianCoordinates( x : double, y : double, z : double )
    {
        X = x;
	Y = y;
	Z = z;
    }   
    
    def DistanceTo( p2:Point )
    {
        start_x = X - p2.X;
	return = start_x;
    }
    
    def DirectionTo( p2:Point )
    {
        start_x = X - p2.X;
	start_y = Y - p2.Y;
	start_z = Z - p2.Z;
	return = Vector.ByCoordinates( start_x, start_y, start_z );
    }
    
    def Project( v1:Vector, distance : double )
    {
        start_x = X - v1.X + distance;
	start_y = Y - v1.Y + distance;
	start_z = Z - v1.Z + distance;
	return = Point.ByCartesianCoordinates( start_x, start_y, start_z );
    }
}
class Line
{
    StartPoint : Point;
    EndPoint : Point;
        
    constructor ByStartPointEndPoint( p1 : Point, p2 :Point )
    {
        StartPoint = p1;
	EndPoint = p2;
    }
    
    def PointAtParameter(  v : double )
    {
        start_x = StartPoint.X * v;
	start_y = StartPoint.Y * v;
	start_z = StartPoint.Z * v;
	p1_temp = Point.ByCartesianCoordinates( start_x, start_y, start_z );
	
	return = p1_temp;
    }
    
    def Trim ( params : double[], retain : bool )
    {
        start_x = StartPoint.X * params[0];
	start_y = StartPoint.Y * params[0];
	start_z = StartPoint.Z * params[0];
	
	end_x = EndPoint.X * params[1];
	end_y = EndPoint.Y * params[1];
	end_z = EndPoint.Z * params[1];
	
	p1_temp = Point.ByCartesianCoordinates( start_x, start_y, start_z );
	p2_temp = Point.ByCartesianCoordinates( end_x, end_y, end_z );
	
	new_trimmed_line = Line.ByStartPointEndPoint( p1_temp, p2_temp );
	return = new_trimmed_line;
    }
    
    def Trim ( v : double )
    {
        x_temp = EndPoint.X * v;
	p2_temp = Point.ByCartesianCoordinates( x_temp, EndPoint.Y, EndPoint.Z );
	new_trimmed_line = Line.ByStartPointEndPoint(StartPoint, p2_temp );
	return = new_trimmed_line;
    }
    
    
}
class Solid
{
    StartPoint : Point;
    EndPoint : Point;       
    R1 : double;
    R2 : double;
    
    constructor Cone( p1 : Point, p2 :Point , r1 : double, r2 : double)
    {
        StartPoint = p1;
	EndPoint = p2;
	R1 = r1;
	R2 = r2;
    }   
}
class Tube
{
    StartPoint : Point;
    EndPoint : Point;        
    R1 : double;
    R2 : double;
    
    constructor ByStartPointEndPointRadius( p1 : Point, p2 :Point , r1 : double, r2 : double)
    {
        StartPoint = p1;
	EndPoint = p2;
	R1 = r1;
	R2 = r2;
    }   
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1536_T00001_Language_001_Variable_Expression_1()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"A = 10;   	   	// assignment of single literal value
B = 2*A;   	   	// expression involving previously defined variables
A = A + 1; 	   	// expressions modifying an existing variable;
A = 15;		   	// redefine A, removing modifier
A = {1,2,3,4}; 		// redefine A as a collection
A = 1..10..2;  		// redefine A as a range expression (start..end..inc)
A = 1..10..~4; 		// redefine A as a range expression (start..end..approx_inc)
A = 1..10..#4; 		// redefine A as a range expression (start..end..no_of_incs)
A = A + 1; 		// modifying A as a range expression
A = 1..10..2;  		// redefine A as a range expression (start..end..inc)
B[1] = B[1] + 0.5; 	// modify a member of a collection [problem here]
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1537_T00002_Language_001a_array_test_4()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"a=1;
b=2;
c=4;
collection = {a,b,c};
collection[1] = collection[1] + 0.5;
d = collection[1];
d = d + 0.1; // updates the result of accessing the collection
b = b + 0.1; // updates the source member of the collection
t1 = collection[0];
t2 = collection[1];
t3 = collection[2];
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1538_T00003_Language_001b_replication_expressions()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"a = {1,0,-1};
b = {0, 5, 10};
zipped_sum = a + b; // {1, 5, 9}
cartesian_sum  = a<1> + b<2>;
// cartesian_sum =    {{1, 6, 11},
//        			   {0, 5, 10},
//        			   {-1, 4, 9}}
cartesian_sum  = a<2> + b<1>;
t1 = zipped_sum[0];
t2 = zipped_sum[1];
t3 = zipped_sum[2];
t4 = cartesian_sum[0][0];
t5 = cartesian_sum[1][0];
t6 = cartesian_sum[2][0];
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1539_T00004_Geometry_002_line_by_points_replication_simple()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"import (""GeometryLibForLanguageTesting.ds"");
//#include ""GeometryLibForLanguageTesting.ds""
startPt = Point.ByCartesianCoordinates( 1, 1, 0 );
endPt   = Point.ByCartesianCoordinates( 1, 5, 0 );
line_0  = Line.ByStartPointEndPoint( startPt, endPt ); 	// create line_0
line_0_StartPoint_X = line_0.StartPoint.X;
startPt = Point.ByCartesianCoordinates( (1..5..1), 1, 0 ); // with range expression
endPt   = Point.ByCartesianCoordinates( (1..5..1), 5, 0 ); // with range expression.. but line does not replicate
line_0  = Line.ByStartPointEndPoint( startPt<1>, endPt<2> ); 	// add replication guides <1> <2>
line_0  = Line.ByStartPointEndPoint( startPt, endPt ); 		// remove replication guides
t1 = line_0[0].StartPoint.X;
t2 = line_0[1].StartPoint.X;
t3 = line_0[2].StartPoint.X;
t4 = line_0[3].StartPoint.X;
t5 = line_0[4].StartPoint.X;";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(importpath, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1540_T00005_Geometry_002_line_by_points_replication_simple_correction()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"import (""GeometryLibForLanguageTesting.ds"");
//#include ""GeometryLibForLanguageTesting.ds""
startPt = Point.ByCartesianCoordinates( 1, 1, 0 );
endPt   = Point.ByCartesianCoordinates( 1, 5, 0 );
line_0  = Line.ByStartPointEndPoint(startPt, endPt); 	// create line_0
line_0_StartPoint_X = line_0.StartPoint.X;
startPt = Point.ByCartesianCoordinates( (1..5..1), 1, 0 ); // with range expression
endPt   = Point.ByCartesianCoordinates( (1..5..1), 5, 0 ); // with range expression
line_0  = Line.ByStartPointEndPoint(startPt, endPt); 		// no replication guides
line_0  = Line.ByStartPointEndPoint(startPt<1>, endPt<1>); 	// add replication guides <1> <1>
line_0  = Line.ByStartPointEndPoint(startPt<1>, endPt<2>); 	// add replication guides <1> <2>
line_0  = Line.ByStartPointEndPoint(startPt<1>, endPt<1>); 	// add replication guides <1> <1>
line_0  = Line.ByStartPointEndPoint(startPt, endPt); 		// remove replication guides
t1 = line_0[0].StartPoint.X;
t2 = line_0[1].StartPoint.X;
t3 = line_0[2].StartPoint.X;
t4 = line_0[3].StartPoint.X;
t5 = line_0[4].StartPoint.X;";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(importpath, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1541_T00006_Geometry_003_line_by_points_replication_array()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"import (""GeometryLibForLanguageTesting.ds"");
//#include ""GeometryLibForLanguageTesting.ds""
startPt = Point.ByCartesianCoordinates( 1, 1, 0 );
endPt   = Point.ByCartesianCoordinates( 1, 5, 5 );
line_0  = Line.ByStartPointEndPoint(startPt, endPt ); 	// create line_0
line_0_StartPoint_X = line_0.StartPoint.X;
startPt = Point.ByCartesianCoordinates( (1..5..1), 1, 0 ); // replicate in X
startPt = Point.ByCartesianCoordinates( (1..5..1), (1..5..1), 0 ); // replicate in X and Y
startPt = Point.ByCartesianCoordinates( (1..5..1)<1>, (1..5..1)<2>, 0 ); // replicate in X and Y with replication guides
line_0  = Line.ByStartPointEndPoint(startPt[2], endPt); // create line_0, select from startPt
startPt = Point.ByCartesianCoordinates( (1..5..1)<2>, (1..5..1)<1>, 0 ); // replicate in X and Y with replication guides
line_0  = Line.ByStartPointEndPoint(startPt, endPt); // create line_0, select from startPt
startPt = Point.ByCartesianCoordinates( (1..5..1), (1..5..1), 0 ); // replicate in X and Y with replication guides
startPt = Point.ByCartesianCoordinates( (1..5..1)<1>, (1..5..1)<1>, 0 ); // replicate in X and Y with replication guides
startPt = Point.ByCartesianCoordinates( (1..5..1)<1>, (1..5..1)<2>, 0 ); // replicate in X and Y with replication guides
startPt = Point.ByCartesianCoordinates( (1..8..1)<1>, (1..8..1)<2>, 0 ); // replicate in X and Y with replication guides
startPt = Point.ByCartesianCoordinates( (1..8..2)<1>, (1..8..2)<2>, 0 ); // replicate in X and Y with replication guides
startPt = Point.ByCartesianCoordinates( (1..5..1)<1>, (1..5..1)<2>, 0 ); // replicate in X and Y with replication guides
startPt = Point.ByCartesianCoordinates( 2, 1, 0 );
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(importpath, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1542_T00007_Geometry_004_circle_all_combinations()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"import (""GeometryLibForLanguageTesting.ds"");
import(""DSCoreNodes.dll"");
//#include ""GeometryLibForLanguageTesting.ds""
//circlePoint = Point.ByCartesianCoordinates(10.0*cos(0..(360)..#21), 10.0*sin(0..(360)..#21), 0.0);
circlePoint = Point.ByCartesianCoordinates( 10.0 * Math.Cos(0..(360)..#4), 10.0 * Math.Sin(0..(360)..#4), 0.0);
lines = Line.ByStartPointEndPoint(circlePoint<1>,circlePoint<2>);
lines_StartPoint_X = lines.StartPoint.X; 
t1 = lines[0][0].StartPoint.X;
t2 = lines[1][0].StartPoint.X;
t3 = lines[2][0].StartPoint.X;
t4 = lines[3][0].StartPoint.X;";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(importpath, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1543_T00008_Geometry_005_circle_adjacent_pairs_externalised()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"import (""GeometryLibForLanguageTesting.ds"");
//#include ""GeometryLibForLanguageTesting.ds""
import(""DSCoreNodes.dll"");
//numPoints = 21;
numPoints = 5;
circlePoint = Point.ByCartesianCoordinates( 10.0*Math.Cos(0..(360)..#numPoints), 10.0*Math.Sin(0..(360)..#numPoints), 0.0 );
lines = Line.ByStartPointEndPoint( circlePoint[-1..(count(circlePoint)-2)..1], circlePoint[0..(count(circlePoint)-1)..1] ); 
lines_StartPoint_X = lines.StartPoint.X; 
//numPoints = 11;
numPoints = 3;
t1 = lines[0].StartPoint.X;
t2 = lines[1].StartPoint.X;
t3 = lines[2].StartPoint.X;";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(importpath, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1544_T00009_Geometry_006_circle_all_unique_combinations()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"import (""GeometryLibForLanguageTesting.ds"");
def drawUniqueLines (points : Point[], start : int, end : int) = Line.ByStartPointEndPoint(points[(0..start..1)],points[end]); 
circlePoints = Point.ByCartesianCoordinates( 10..13, 4..7, 0.0 );
lines = drawUniqueLines(circlePoints, (1..(Count(circlePoints)-2)..1), (2..(Count(circlePoints)-1)..1));
lines_StartPoint_X = lines.StartPoint.X; 
t1 = lines[0][0].StartPoint.X;
t2 = lines[1][2].StartPoint.X;";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(importpath, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1545_T00010_Geometry_007_specialPoint_2()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"import (""GeometryLibForLanguageTesting.ds"");
//#include ""GeometryLibForLanguageTesting.ds""
import(""DSCoreNodes.dll"");
class MyPoint 
{
	// define general system of dependencies
	
	x : double = radius * Math.Cos(theta*180/180); // x dependent on theta and radius
	y : double = radius * Math.Sin(theta*180/180); // y dependent on theta and radius
	z : double = 0.0;
											
	theta  = Math.atan(y/x) * 180 / 180;		 	 // theta  dependent on x and y
	radius = Math.sqrt(x*x + y*y);				 // radius dependent on x and y
	
	inner  : Point = Point.ByCartesianCoordinates( x, y, z );	 // create inner point dependent on x and y
	
	public constructor ByXYcoordinates(xValue : double , yValue : double)
	{
		x = xValue; 			// assigning argument values to specific properties
		y = yValue; 			// overrides defaut graph and triggers remianing depenencies
									// we don't need to add in the statemenst to recompute theta and radius
									// this will happen 'automatically', because of the dependencies
									// defined in the body of the class
	}
		
	public constructor ByAngleRadius(thetaValue : double , radiusValue : double)
	{
		theta  = thetaValue;	// assigning argument values to specific properties
		radius = radiusValue; 	// overrides defaut graph and triggers remaining depenencies								// we don't need to add in the statemenst to recompute theta and radius
									// we don't need to add in the statemenst to recompute x and y
									// this will happen 'automatically', because of the dependencies
									// defined in the body of the class
	}
	
	// add 'incremental' modifiers
	
	def incrementX(this : MyPoint, xValue : double) = ByXYcoordinates(this.x + xValue, this.y);
	def incrementY(this : MyPoint, yValue : double) = ByXYcoordinates(this.x,this.y + yValue);
	def incrementTheta(this : MyPoint, thetaValue : double)  = ByAngleRadius(this.theta + thetaValue, this.radius );
	def incrementRadius(this : MyPoint, radiusValue : double)= ByAngleRadius(this.theta, this.radius + radiusValue );
}
a 		= MyPoint.ByXYcoordinates( 1.0, 1.0 );		// create an instance 'a' using one constructor
origin         = Point.ByCartesianCoordinates( 0, 0, 0 );  		// create a reference point
testLine       = Line.ByStartPointEndPoint(origin, a.inner);	// create a testLine (to see some results)
testLine_SP_X = testLine.StartPoint.X; 
aX 		= a.x;							// report the properties of 'a'
aY 		= a.y;
aTheta 	= a.theta;
aRadius        = a.radius;
a 		= MyPoint.ByAngleRadius(60.0, 1.0);			// switch to a different constructor [POINT updates]
//a		= a.visible(false); 
a 		= a.incrementX(0.2);					// apply different modifiers [POINT does not updates]
//a		= a.visible(false);
a 		= a.incrementY(-0.2);					// apply different modifiers [POINT does not updates]
a 		= MyPoint.ByAngleRadius(45.0, 0.75);			// redefine a (by using a constructor) [POINT updates]
//a		= a.visible(false);
a 		= a.incrementTheta(10.0);				// apply different modifiers [POINT does not updates]
//a		= a.visible(false);
a 		= a.incrementRadius(0.2); 				// [POINT does not updates]
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(importpath, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1546_T00011_Geometry_008_trim_then_tube_4()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"import (""GeometryLibForLanguageTesting.ds"");
//#include ""GeometryLibForLanguageTesting.ds""
myPoint = Point.ByCartesianCoordinates( (2..10..2)<1>, (2..10..2)<2>, 2 ); // create 2D point array
controlPoint_1 = Point.ByCartesianCoordinates( 5, 5, 5 ); 		// create control point
controlPoint_2 = Point.ByCartesianCoordinates( 5, 10, 5 ); 	// create control point
myLine = Line.ByStartPointEndPoint( myPoint[1], controlPoint_1 ); 	// select 1d array of points to create a 1D array lines
//myLine[2] = myLine[2].Trim({0.9, 0.1}, false); 	// trim one member of the array of points (modify a member of a collection)
myLine[2] = myLine[2].Trim( 0.5 );
//tubes   = Tube.ByStartPointEndPointRadius(myLine.StartPoint, myLine.EndPoint, 0.25, 0.125); // use the whole array of lines for tubing
//tubes   = Solid.Cone(myLine.StartPoint, myLine.EndPoint, 0.25, 0.125); // use the whole array of lines for tubing
tubes      = Solid.Cone(myLine.StartPoint, myLine.EndPoint, 0.25, 0.125);
controlPoint_1 = Point.ByCartesianCoordinates( 7, 7, 5 ); 		// move the control point, change gets propagated to lines, trim and tubes, 
//myLine[3] = myLine[3].Trim({0.9, 0.2}, false); 		// trim another member of the array of points (modify a member of a collection)
myLine[3] = myLine[3].Trim( 0.8); 	
controlPoint_1 = Point.ByCartesianCoordinates( 8, 7, 5 ); 		// move the control point, change gets propagated to lines, trim and tubes, 
t1 = tubes[0].EndPoint.X;
t2 = tubes[1].EndPoint.X;
t3 = tubes[2].EndPoint.X;
t4 = tubes[3].EndPoint.X;
t5 = tubes[4].EndPoint.X;";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(importpath, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1547_T00012_Geometry_008a_alternative_method_invocations_1()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"import (""GeometryLibForLanguageTesting.ds"");
//#include ""GeometryLibForLanguageTesting.ds""
startRadius = 0.1;
endRadius	= 0.2;
startParam  = 0.2;
endParam    = 0.8;
// [1] regular method call [separate Line constructor, modifier, then Tube constructor to new variable]
start_0 = Point.ByCartesianCoordinates( 1, 1, 0 );
end_0   = Point.ByCartesianCoordinates( 1, 5, 0 );
line_0  = Line.ByStartPointEndPoint(start_0, end_0); 	// create line_0
line_0  = line_0.Trim({endParam, startParam}, false);
tube_0  = Tube.ByStartPointEndPointRadius(line_0.StartPoint, line_0.EndPoint, startRadius, endRadius);
// [2] method chain, with embedded point arguments
x_1 = 5;
line_1  = Line.ByStartPointEndPoint(Point.ByCartesianCoordinates( x_1, 1, 0 ), Point.ByCartesianCoordinates( 5, 5, 0 )).Trim({endParam, startParam}, false); 	// create line_1 method chain
x_1 = 7;
// [3] doubly embedded methods as arguments
x_2 = 10;
line_2  = Line.Trim(Line.ByStartPointEndPoint(Point.ByCartesianCoordinates( x_2, 1, 0 ), Point.ByCartesianCoordinates( 10, 5, 0 )),{endParam, startParam}, false); 	// create line_2 embedded method call
x_2 = 12; // cause an update
// [4] define a function as a compound operation
def TrimTube(line : Line, startParam: double | startParam > 0.0, endParam: double | endParam < 1.0, startRadius : double, endRadius : double)
{
	intermediateLine = line.Trim( {endParam, startParam}, false);
	return = Solid.Cone(intermediateLine.StartPoint, intermediateLine.EndPoint, startRadius, endRadius);
}
// [5] apply compound operation to create a new result (tube) variable, given existing input (line) variable
x_3 = 15;
line_3 = Line.ByStartPointEndPoint(Point.ByCartesianCoordinates( x_3 , 1, 0 ), Point.ByCartesianCoordinates( 15, 5, 0 ));
tube_3 = TrimTube(line_3, 0.2, 0.7, 0.3, 0.15); // apply operations
x_3 = 17;
// [6] apply compound operation to modify existing input (line) variable AND effectively change its type from Line to Tube
x_4 = 20; 
line_4 = Line.ByStartPointEndPoint(Point.ByCartesianCoordinates( x_4, 1, 0 ), Point.ByCartesianCoordinates( 20, 5, 0 ));
line_4 = TrimTube(line_4, 0.2, 0.7, 0.3, 0.15); // apply operations as modifier AND effectively change the type of line_4
otherPoint = Point.ByCartesianCoordinates( x_4+5, 10, 0 );
otherLine  = Line.ByStartPointEndPoint(otherPoint,line_4.StartPoint); // even though line_4 is now a tube, 
																 // we should be able to still refer 
																 // to a property of its previous state
																 // i.e. to its start point 
x_4 = 22; 
x1 = line_0.StartPoint.X;
x2 = line_1.StartPoint.X;
x3 = line_2.StartPoint.X;
x4 = line_3.StartPoint.X;
x5 = line_4.StartPoint.X;
x6 = otherLine.StartPoint.X;
x7 = tube_0.StartPoint.X;
x8 = tube_3.StartPoint.X;
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1548_T00013_Geometry_009_nested_user_defined_feature_2b()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"import (""GeometryLibForLanguageTesting.ds"");
//#include ""GeometryLibForLanguageTesting.ds""
start    = Point.ByCartesianCoordinates( 2, 2, 0 );
end      = Point.ByCartesianCoordinates( 7, 7, 0 );
line     = Line.ByStartPointEndPoint(start, end);
midPoint = line.PointAtParameter(0.5);
// [2] create MyLine user define feature using sub classing and 'this' instance
class MyLine 
{
    InternalLine : Line;  		// user defined feature contains a line property
    MidPoint : Point;	// and a midPoint property
    public constructor ByStartPointEndPoint(start : Point, end : Point)
    {
		InternalLine = Line.ByStartPointEndPoint(start, end);
		MidPoint = InternalLine.PointAtParameter(0.5);
    }
 }
point_a  = Point.ByCartesianCoordinates( 30, 40, 0 );
point_b  = Point.ByCartesianCoordinates( 10, 10, 0 );
point_c  = Point.ByCartesianCoordinates( 50, 10, 0 );
// [3] use MyLine to construct model for MyTriangle user defined feature
side_a_b = MyLine.ByStartPointEndPoint( point_a, point_b );
side_b_c = MyLine.ByStartPointEndPoint( point_b, point_c );
side_c_a = MyLine.ByStartPointEndPoint( point_c, point_a );
// [4] ceate MyTriangle user defined feature
class MyTriangle
{
    Side_a_b : MyLine;
    Side_b_c : MyLine;
    Side_c_a : MyLine;
    // with a constructor
    constructor ByPoints(point_a : Point, point_b : Point, point_c : Point)
	{
		Side_a_b = MyLine.ByStartPointEndPoint( point_a, point_b );
		Side_b_c = MyLine.ByStartPointEndPoint( point_b, point_c );
		Side_c_a = MyLine.ByStartPointEndPoint( point_c, point_a );
	}    
}
// [5] Create initial three defining points.
point_1 = Point.ByCartesianCoordinates( 30, 80, 0 );
point_2 = Point.ByCartesianCoordinates( 10, 50, 0 );
point_3 = Point.ByCartesianCoordinates( 50, 50, 0 );
// [6] Create outer instance of MyTriangle from defining points.
triangle0000 = MyTriangle.ByPoints(point_1, point_2, point_3);
// [7] Create inner instance of MyTriangle from midPoints of sides of the outer instance of MyTriangle.
triangle0001 = MyTriangle.ByPoints(  triangle0000.Side_a_b.MidPoint,triangle0000.Side_b_c.MidPoint,triangle0000.Side_c_a.MidPoint);
// [8] Create inner instance of MyTriangle from midPoints of sides of the outer instance of MyTriangle.
triangle0002 = MyTriangle.ByPoints(  triangle0001.Side_a_b.MidPoint,triangle0001.Side_b_c.MidPoint,triangle0001.Side_c_a.MidPoint);
// [8] change the definition of the MyLine user define feature from 'composition' to 'sub classing' 
//     from an existing class (in this case from the Line class)
//     redefining MyTriangle should update all existing instances of MyTriangle
// [9] move point_1	 								 
point_1 = Point.ByCartesianCoordinates( 50, 80, 0 ); // points do not clean up from old position
point_1 = Point.ByCartesianCoordinates( 60, 90, 0 ); // when points are single values
// [10] replicate point_1 								 			 
point_1 = Point.ByCartesianCoordinates( (20..28..2), 80, 0 ); // points do clean up when going from single value to collection
point_1 = Point.ByCartesianCoordinates( (70..78..1), 80, 0 ); // points not do clean up when going from collection of one size to collection of another size
point_1 = Point.ByCartesianCoordinates( (20..28..2), 80, 0 ); // points not do clean up when going from collection of one size to collection of another size
point_1 = Point.ByCartesianCoordinates( (50..58..2), 80, 0 ); // points do clean up when going from collection of one size to collection of the same size
// [11] move point_1	 								 								 
point_1 = Point.ByCartesianCoordinates( 10, 80, 0 ); // points do clean up when going from collection to single value 
point_1 = Point.ByCartesianCoordinates( 20, 100, 0 ); // points do not clean up from old position when going from single value to single value 
x1 = triangle0000.Side_b_c.MidPoint.X;
x2 = triangle0001.Side_b_c.MidPoint.X;
x3 = triangle0002.Side_b_c.MidPoint.X;
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(importpath, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1549_T00014_Geometry_010_nested_user_defined_feature_rand_2()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"import (""GeometryLibForLanguageTesting.ds"");
//#include ""GeometryLibForLanguageTesting.ds""
// [1] create initial model from which to make the MyLine user defined feature
start    = Point.ByCartesianCoordinates( 2, 2, 0 );
end      = Point.ByCartesianCoordinates( 7, 7, 0 );
line     = Line.ByStartPointEndPoint( start, end );
midPoint = line.PointAtParameter( 0.5 );
// [2] create MyLine user define feature using sub classing
								// and 'this' instance
class MyLine 
{
    line : Line;  		// user defined feature contains a line property
    midPoint : Point;	// and a midPoint property
    public constructor ByStartPointEndPoint(start : Point, end : Point)
    {
	line     = Line.ByStartPointEndPoint( start, end );
	//midPoint = line.PointAtParameter( rand(2, 8)*0.1 );
    	midPoint = line.PointAtParameter(0.5);
    }
 }
point_a  = Point.ByCartesianCoordinates( 30, 40, 0 );
point_b  = Point.ByCartesianCoordinates( 10, 10, 0 );
point_c  = Point.ByCartesianCoordinates( 50, 10, 0 );
// [3] use MyLine to construct model for MyTriangle user defined feature
side_a_b = MyLine.ByStartPointEndPoint( point_a, point_b );
side_b_c = MyLine.ByStartPointEndPoint( point_b, point_c );
side_c_a = MyLine.ByStartPointEndPoint( point_c, point_a );
// [4] ceate MyTriangle user defined feature
class MyTriangle
{
    side_a_b : MyLine;
    side_b_c : MyLine;
    side_c_a : MyLine;
    // with a constructor
    constructor ByPoints(point_a : Point, point_b : Point, point_c : Point)
    {
        side_a_b = MyLine.ByStartPointEndPoint( point_a, point_b );
        side_b_c = MyLine.ByStartPointEndPoint( point_b, point_c );
        side_c_a = MyLine.ByStartPointEndPoint(point_c, point_a );
    } 
}
// [5] Create initial three defining points.
point_1 = Point.ByCartesianCoordinates( 30, 80, 0 );
point_2 = Point.ByCartesianCoordinates( 10, 50, 0 );
point_3 = Point.ByCartesianCoordinates( 50, 50, 0 );
// [6] Create outer instance of MyTriangle from defining points.
MyTriangle0000 = MyTriangle.ByPoints( point_1, point_2, point_3 );
// [7] Create inner instance of MyTriangle from midPoints of sides of the outer instance of MyTriangle.
MyTriangle0001 = MyTriangle.ByPoints( MyTriangle0000.side_a_b.midPoint,
                                     MyTriangle0000.side_b_c.midPoint,
                                     MyTriangle0000.side_c_a.midPoint );
									 
// [8] Create inner instance of MyTriangle from midPoints of sides of the outer instance of MyTriangle.
MyTriangle0002 = MyTriangle.ByPoints(MyTriangle0001.side_a_b.midPoint,
                                     MyTriangle0001.side_b_c.midPoint,
                                     MyTriangle0001.side_c_a.midPoint);
									 
// [8] change the definition of the MyLine user define feature from 'composition' to 'sub classing' 
//     from an existing class (in this case from the Line class)
//     redefining MyTriangle should update all existing instances of MyTriangle
// [9] replicate point_1									 
point_1 = Point.ByCartesianCoordinates( (20..28..2), 80, 0 );
x1 = MyTriangle0001[0].side_a_b.midPoint.X;
x2 = MyTriangle0001[1].side_b_c.midPoint.X;
x3 = MyTriangle0001[2].side_c_a.midPoint.X;
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(importpath, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1550_T00015_Geometry_011_nested_user_defined_feature_with_partial_class_1()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"import (""GeometryLibForLanguageTesting.ds"");
//#include ""GeometryLibForLanguageTesting.ds""
// [1] create initial model from which to make the MyLine user defined feature
start    = Point.ByCartesianCoordinates( 2, 2, 0 );
end      = Point.ByCartesianCoordinates( 7, 7, 0 );
line     = Line.ByStartPointEndPoint(start, end);
midPoint = line.PointAtParameter(0.5);
// [2] create MyLine user define feature using sub classing
								// and 'this' instance
class MyLine 
{
    InternalLine : Line;  	// user defined feature contains a line property
    MidPoint     : Point;	// and a midPoint property
    public constructor ByStartPointEndPoint(start : Point, end : Point)
    {
		InternalLine = Line.ByStartPointEndPoint(start, end);
		MidPoint 	 = InternalLine.PointAtParameter(0.5);
    }
 }
point_a  = Point.ByCartesianCoordinates( 30, 40, 0 );
point_b  = Point.ByCartesianCoordinates( 10, 10, 0 );
point_c  = Point.ByCartesianCoordinates( 50, 10, 0 );
// [3] use MyLine to construct model for MyTriangle user defined feature
side_a_b = MyLine.ByStartPointEndPoint(point_a, point_b);
side_b_c = MyLine.ByStartPointEndPoint(point_b, point_c);
side_c_a = MyLine.ByStartPointEndPoint(point_c, point_a);
partial class MyLine 
{
    public constructor ByStartPointEndPoint(start : Point, end : Point, t : double | (t<1.0 && t>0.0))
    {
		InternalLine = Line.ByStartPointEndPoint(start, end);
		MidPoint     = InternalLine.PointAtParameter(t);
    }
	
    public constructor ByStartPointEndPoint(start : Point, end : Point, t : double )
    {
		InternalLine = Line.ByStartPointEndPoint(start, end);
		MidPoint     = InternalLine.PointAtParameter(0.5);
    }
}
point_r = Point.ByCartesianCoordinates( 30, 80, 0 );
point_s = Point.ByCartesianCoordinates( 10, 50, 0 );
point_t = Point.ByCartesianCoordinates( 50, 50, 0 );
myT = 1.4;
side_r_s = MyLine.ByStartPointEndPoint( point_r, point_s,  myT );
side_s_t = MyLine.ByStartPointEndPoint( point_s, point_t, -0.1 );
side_t_r = MyLine.ByStartPointEndPoint( point_t, point_r,  0.25 );
myT = 0.6;
x1 = side_a_b.MidPoint.X;
x2 = side_b_c.MidPoint.X;
x3 = side_c_a.MidPoint.X;
x4 = side_r_s.MidPoint.X;
x5 = side_s_t.MidPoint.X;
x6 = side_t_r.MidPoint.X;
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(importpath, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1551_T00016_Geometry_012_centroid_1()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"import (""GeometryLibForLanguageTesting.ds"");
//#include ""GeometryLibForLanguageTesting.ds""
// [1] create functions to calculate the centroid of a collection of points 
def sumCollection(arr : double[]) = sumCollectionInternal(arr, count(arr)-1);
def sumCollectionInternal(arr : double[], i : int | i > -1) = arr[i] + sumCollectionInternal(arr, i-1);
def sumCollectionInternal(arr : double[], i : int) = 0;
def average(arr : double[]) = sumCollection(arr) / count(arr);
def centroid(points : Point[]) = Point.ByCartesianCoordinates( average(points.X), average(points.Y),  average(points.Z) );
// [2] create some points
point_1 = Point.ByCartesianCoordinates( 30.0, 80.0, 0.0 );
point_2 = Point.ByCartesianCoordinates( 10.0, 50.0, 0.0 );
point_3 = Point.ByCartesianCoordinates( 50.0, 50.0, 0.0 );
// [3] create centrePoint
centrePoint = centroid( {point_1, point_2, point_3} );
// [4] test with lines
lineTest  = Line.ByStartPointEndPoint( centrePoint, { point_1, point_2, point_3 } );
// [5] move a point
point_1 = Point.ByCartesianCoordinates( 40.0, 80.0, 0.0 );
x1 = lineTest[2].EndPoint.X;
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1552_T00017_Geometry_015_Happy_Xmas_2()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"import (""GeometryLibForLanguageTesting.ds"");
//#include ""GeometryLibForLanguageTesting.ds""
def arrayWidth (array : Object[][])
{
    c1 = [Imperative]
    {
        c = 0;
	for ( i in array )
	{
		c = c + 1;
	}
	return  = c;	
    }
    return = c1;
}
//def arrayWidth(arr : Object[][]) = count(count(arr));
def arrayHeight(arr : Object[][]) = count(arr[0]);
def internalSample(points : Point[][], i : int, j : int) = {points[i-1][j-1], points[i][j-1], points[i][j], points[i-1][j]};
def sampleAdjacents(points : Point[][]) = internalSample(points, (1..(arrayWidth(points)-1))<2>, (1..(arrayHeight(points)-1))<1>);
//def internalSample(points : Point[][], i : int, j : int) = {points[i-1][j-1], points[i][j-1], points[i][j], points[i-1][j]};
//def arrayWidth(arr : Object[][]) = count(count(arr));
//def arrayHeight(arr : Object[][]) = count(arr[0]);
def UVpoint(p : Point[], U : double, V : double) // assumes an arry of 4 points
{
	//x = ((p[0].x * ((1.0-U) + (1.0-V)))+ (p[1].x * (U + (1.0-V))) + (p[2].x * (U+V)) + (p[3].x * ((1.0-U) + V)))/4.0;  
	//y = ((p[0].y * ((1.0-U) + (1.0-V)))+ (p[1].y * (U + (1.0-V))) + (p[2].y * (U+V)) + (p[3].y * ((1.0-U) + V)))/4.0;  
	//z = ((p[0].z * ((1.0-U) + (1.0-V)))+ (p[1].z * (U + (1.0-V))) + (p[2].z * (U+V)) + (p[3].z * ((1.0-U) + V)))/4.0;  
	//return = Point.ByCartesianCoordinates(WCS,x, y, z);
	
	xb = ((p[0].x * (1.0-U))+ (p[1].x * U));  
	yb = ((p[0].y * (1.0-U))+ (p[1].y * U));  
	zb = ((p[0].z * (1.0-U))+ (p[1].z * U)); 
	
	xt = ((p[3].x * (1.0-U))+ (p[2].x * U));  
	yt = ((p[3].y * (1.0-U))+ (p[2].y * U));  
	zt = ((p[3].z * (1.0-U))+ (p[2].z * U));  
	
	x  = ((xb * (1.0-V))+ (xt * V));  
	y  = ((yb * (1.0-V))+ (yt * V));  
	z  = ((zb * (1.0-V))+ (zt * V));  
	return = Point.ByCartesianCoordinates( x, y, z );
}
class Tubulor 
{
    primary : Tube;  	
    secondary : Tube;	// and a midPoint property
    public constructor ByPoint(character : string, p : Point[], startRadius: double, endRadius : double, secondaryFactor: double)
    {
		secondary = { Solid.Cone(p[0], p[2], startRadius*secondaryFactor, endRadius*secondaryFactor),
		Solid.Cone(p[1], p[3], startRadius*secondaryFactor, endRadius*secondaryFactor)};
    }
	
    public constructor ByPoint(character : string | character==""A"", p : Point[], startRadius: double, endRadius : double, secondaryFactor: double)
    {
		s = UVpoint(p, {0.2, 0.5, 0.8, 0.35, 0.65}, {0.2, 0.8, 0.2, 0.5, 0.5});
		primary   = { Solid.Cone(s[0], s[1], startRadius, endRadius),
					  Solid.Cone(s[1], s[2], startRadius, endRadius)};
					  
		secondary = { Solid.Cone(p[0], s[0], startRadius*secondaryFactor, endRadius*secondaryFactor),
					  Solid.Cone(s[3], s[4], startRadius*secondaryFactor, endRadius*secondaryFactor),
 					  Solid.Cone(s[2], p[1], startRadius*secondaryFactor, endRadius*secondaryFactor),
    				  Solid.Cone(p[2], s[1], startRadius*secondaryFactor, endRadius*secondaryFactor),
 					  Solid.Cone(s[1], p[3], startRadius*secondaryFactor, endRadius*secondaryFactor)};    
    }
	
    public constructor ByPoint(character : string | character==""X"", p : Point[], startRadius: double, endRadius : double, secondaryFactor: double)
    {
		s = UVpoint(p, {0.2, 0.8, 0.2, 0.8}, {0.2, 0.8, 0.8, 0.2});
		primary   = { Solid.Cone(s[0], s[1], startRadius, endRadius),
					  Solid.Cone(s[2], s[3], startRadius, endRadius)};
					  
		secondary = { Solid.Cone(p[0], s[0], startRadius*secondaryFactor, endRadius*secondaryFactor),
					  Solid.Cone(s[3], p[1], startRadius*secondaryFactor, endRadius*secondaryFactor),
    				  Solid.Cone(p[2], s[1], startRadius*secondaryFactor, endRadius*secondaryFactor),
 					  Solid.Cone(s[2], p[3], startRadius*secondaryFactor, endRadius*secondaryFactor)};    
    }
	
    public constructor ByPoint(character : string | character==""Y"", p : Point[], startRadius: double, endRadius : double, secondaryFactor: double)
    {
		s = UVpoint(p, {0.5, 0.5, 0.2, 0.8}, {0.2, 0.5, 0.8, 0.8});
		primary   = { Solid.Cone(s[0], s[1], startRadius, endRadius),
					  Solid.Cone(s[2], s[1], startRadius, endRadius),
					  Solid.Cone(s[3], s[1], startRadius, endRadius)};
					  
		secondary = { Solid.Cone(p[0], s[0], startRadius*secondaryFactor, endRadius*secondaryFactor),
					  Solid.Cone(s[0], p[1], startRadius*secondaryFactor, endRadius*secondaryFactor),
    				  Solid.Cone(p[2], s[3], startRadius*secondaryFactor, endRadius*secondaryFactor),
 					  Solid.Cone(s[2], p[3], startRadius*secondaryFactor, endRadius*secondaryFactor)};    
    }
	
    public constructor ByPoint(character : string | character==""M"", p : Point[], startRadius: double, endRadius : double, secondaryFactor: double)
    {
		s = UVpoint(p, {0.2, 0.3, 0.5, 0.7, 0.8}, {0.2, 0.8, 0.5, 0.8, 0.2});
		primary   = { Solid.Cone(s[0], s[1], startRadius, endRadius),
					  Solid.Cone(s[1], s[2], startRadius, endRadius),
					  Solid.Cone(s[2], s[3], startRadius, endRadius),
					  Solid.Cone(s[3], s[4], startRadius, endRadius)};
					  
		secondary = { Solid.Cone(p[0], s[0], startRadius*secondaryFactor, endRadius*secondaryFactor),
					  Solid.Cone(p[1], s[4], startRadius*secondaryFactor, endRadius*secondaryFactor),
    				  Solid.Cone(p[2], s[3], startRadius*secondaryFactor, endRadius*secondaryFactor),
 					  Solid.Cone(p[3], s[1], startRadius*secondaryFactor, endRadius*secondaryFactor)};    
    }
	
    public constructor ByPoint(character : string | character==""H"", p : Point[], startRadius: double, endRadius : double, secondaryFactor: double)
    {
		s = UVpoint(p, {0.3, 0.3, 0.3, 0.7, 0.7, 0.7}, {0.2, 0.8, 0.5, 0.5, 0.8, 0.2});
		primary   = { Solid.Cone(s[0], s[1], startRadius, endRadius),
					  Solid.Cone(s[4], s[5], startRadius, endRadius)};
					  
		secondary = { Solid.Cone(p[0], s[0], startRadius*secondaryFactor, endRadius*secondaryFactor),
					  Solid.Cone(p[1], s[5], startRadius*secondaryFactor, endRadius*secondaryFactor),
    				  Solid.Cone(s[2], s[3], startRadius*secondaryFactor, endRadius*secondaryFactor),
					  Solid.Cone(p[2], s[4], startRadius*secondaryFactor, endRadius*secondaryFactor),
 					  Solid.Cone(p[3], s[1], startRadius*secondaryFactor, endRadius*secondaryFactor)};    
    }
	
    public constructor ByPoint(character : string | character==""P"", p : Point[], startRadius: double, endRadius : double, secondaryFactor: double)
    {
		s = UVpoint(p, {0.3, 0.3, 0.5, 0.65, 0.7, 0.7, 0.65, 0.5, 0.3}, {0.2, 0.8, 0.8, 0.75, 0.7, 0.6, 0.55, 0.5, 0.5});
		primary   = { Solid.Cone(s[0..(count(s)-2)], s[1..(count(s)-1)], startRadius, endRadius)};
					  
		secondary = { Solid.Cone(p[0], s[0], startRadius*secondaryFactor, endRadius*secondaryFactor),
					  Solid.Cone(p[1], s[6], startRadius*secondaryFactor, endRadius*secondaryFactor),
    				  Solid.Cone(s[2], s[3], startRadius, endRadius),
					  Solid.Cone(p[2], s[3], startRadius*secondaryFactor, endRadius*secondaryFactor),
 					  Solid.Cone(p[3], s[1], startRadius*secondaryFactor, endRadius*secondaryFactor)};    
    }
	
    public constructor ByPoint(character : string | character==""S"", p : Point[], startRadius: double, endRadius : double, secondaryFactor: double)
    {
		s = UVpoint(p, {0.3, 0.5, 0.65, 0.7, 0.7, 0.65, 0.5, 0.35, 0.3, 0.3, 0.35, 0.5, 0.65}, 
					   {0.225, 0.2, 0.25, 0.3, 0.4, 0.45, 0.5, 0.55, 0.6, 0.7, 0.75, 0.8, 0.775});
		primary   = { Solid.Cone(s[0..(count(s)-2)], s[1..(count(s)-1)], startRadius, endRadius)};
					  
		secondary = { Solid.Cone(p[0], s[0], startRadius*secondaryFactor, endRadius*secondaryFactor),
					  Solid.Cone(p[1], s[3], startRadius*secondaryFactor, endRadius*secondaryFactor),
    				  Solid.Cone(s[0], s[12], startRadius*secondaryFactor, endRadius*secondaryFactor),
					  Solid.Cone(p[2], s[12], startRadius*secondaryFactor, endRadius*secondaryFactor),
 					  Solid.Cone(p[3], s[9], startRadius*secondaryFactor, endRadius*secondaryFactor)};    
    }
 }
xSize 			  =  7.0; 
ySize 			  =  4.0; 	
upVector 		  = Vector.ByCoordinates(0.0, 0.0, 1.0); // need up vector
groundPoints             = Point.ByCartesianCoordinates((0.0..xSize..1.0)<1>, (0.0..ySize..1.0)<2>, 0.0); 
xFocus 			  = 0.25;  // proportion within the array of points where the focal point will be located
yFocus 			  = 0.25;
heightControl 	  = 2.0;   // proportion that the roof point move up near the focus point
lateralControl	  = 0.5;   // proportion that the roof point move laterally away from the focus point
panelHeightFactor = 0.25;  // aspect ratio of the pyramid (hight as a function of base dimensions)
focalPoint        = Point.ByCartesianCoordinates( xSize * xFocus, ySize * yFocus, 0.0); 
// testLine		  = Line.ByStartPointEndPoint(groundPoints, focalPoint);
xFocus 			  = 0.5;   // proportion within the array of points where the focal point will be located
roofHeights 	  = focalPoint.DistanceTo(groundPoints);
horizontalVector  = focalPoint.DirectionTo(groundPoints<1><2>);
lateralPoints     = Point.Project(groundPoints<1><2>, horizontalVector<1><2>, lateralControl);
//testLine		  = Line.ByStartPointEndPoint(groundPoints, lateralPoints);
roofPoints 		  = Point.Project(lateralPoints<1><2>, upVector, heightControl/(roofHeights<1><2>+1));
text = {{"" "","" "","" "","" "","" "","" "","" ""},
        {"" "",""X"",""M"",""A"",""S"","" "","" ""},
		{"" "",""H"",""A"",""P"",""P"",""Y"","" ""},
		{"" "",""A"",""R"",""U"",""P"","" "","" ""}};
		
pointsForPolygons = sampleAdjacents(roofPoints); 
radius = 0.075;
factor = 0.5;
testTube = Tubulor.ByPoint(text, pointsForPolygons, radius, radius, factor);
x1 = testTube[0][1].secondary.StartPoint.X;
// testTube = Tubulor.ByPoint(""A"", pointsForPolygons[0][1], radius, radius, factor);
// testTube = Tubulor.ByPoint(""X"", pointsForPolygons[0][2], radius, radius, factor);
// testTube = Tubulor.ByPoint(""Y"", pointsForPolygons[0][3], radius, radius, factor);
// testTube = Tubulor.ByPoint(""M"", pointsForPolygons[0][4], radius, radius, factor);
// testTube = Tubulor.ByPoint(""H"", pointsForPolygons[2][1], radius, radius, factor);
// testTube = Tubulor.ByPoint(""P"", pointsForPolygons[2][2], radius, radius, factor);
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(importpath, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1553_GeometryLibForLanguageTesting()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"def count (array : var[])
{
    c1 = [Imperative]
    {
        c = 0;
	for ( i in array )
	{
		c = c + 1;
	}
	return  = c;	
    }
    return = c1;
}
class Vector
{
    X : double;
    Y : double;
    Z : double;
    
    constructor ByCoordinates( x : double, y : double, z : double )
    {
        X = x;
	Y = y;
	Z = z;
    }    
}
class Point
{
    X : double;
    Y : double;
    Z : double;
    
    constructor ByCartesianCoordinates( x : double, y : double, z : double )
    {
        X = x;
	Y = y;
	Z = z;
    }   
    
    def DistanceTo( p2:Point )
    {
        start_x = X - p2.X;
	return = start_x;
    }
    
    def DirectionTo( p2:Point )
    {
        start_x = X - p2.X;
	start_y = Y - p2.Y;
	start_z = Z - p2.Z;
	return = Vector.ByCoordinates( start_x, start_y, start_z );
    }
    
    def Project( v1:Vector, distance : double )
    {
        start_x = X - v1.X + distance;
	start_y = Y - v1.Y + distance;
	start_z = Z - v1.Z + distance;
	return = Point.ByCartesianCoordinates( start_x, start_y, start_z );
    }
    
    def Translate( x1 : double, y1 : double, z1 : double )
    {
    	return = Point.ByCartesianCoordinates( X + x1, Y + y1, Z + z1 );
    }
}
class Line extends BSplineCurve
{
    StartPoint : Point;
    EndPoint : Point;
    Color : double; 
    Length : double;
    
    constructor ByStartPointEndPoint( p1 : Point, p2 :Point )
    {
        StartPoint = p1;
	EndPoint = p2;
	Length  = 1;
    }
    
    def PointAtParameter(  v : double )
    {
        start_x = StartPoint.X * v;
	start_y = StartPoint.Y * v;
	start_z = StartPoint.Z * v;
	p1_temp = Point.ByCartesianCoordinates( start_x, start_y, start_z );
	
	return = p1_temp;
    }
    
    def Trim ( params : double[], retain : bool )
    {
        start_x = StartPoint.X * params[0];
	start_y = StartPoint.Y * params[0];
	start_z = StartPoint.Z * params[0];
	
	end_x = EndPoint.X * params[1];
	end_y = EndPoint.Y * params[1];
	end_z = EndPoint.Z * params[1];
	
	p1_temp = Point.ByCartesianCoordinates( start_x, start_y, start_z );
	p2_temp = Point.ByCartesianCoordinates( end_x, end_y, end_z );
	
	new_trimmed_line = Line.ByStartPointEndPoint( p1_temp, p2_temp );
	return = new_trimmed_line;
    }
    
    def Trim ( v : double )
    {
        x_temp = EndPoint.X * v;
	p2_temp = Point.ByCartesianCoordinates( x_temp, EndPoint.Y, EndPoint.Z );
	new_trimmed_line = Line.ByStartPointEndPoint(StartPoint, p2_temp );
	return = new_trimmed_line;
    }
    
    def ExtrudeAsSurface( l1 : double, v1: Vector)
    {
        return = BSplineSurface.ByPoints( { { StartPoint, Point.ByCartesianCoordinates(l1,l1,l1)}, {EndPoint, Point.ByCartesianCoordinates(v1.X,v1.Y,v1.Z) } } );
    }
    
    
}
class Solid
{
    StartPoint : Point;
    EndPoint : Point;       
    R1 : double;
    R2 : double;
    
    constructor Cone( p1 : Point, p2 :Point , r1 : double, r2 : double)
    {
        StartPoint = p1;
	EndPoint = p2;
	R1 = r1;
	R2 = r2;
    }   
}
class Tube
{
    StartPoint : Point;
    EndPoint : Point;        
    R1 : double;
    R2 : double;
    
    constructor ByStartPointEndPointRadius( p1 : Point, p2 :Point , r1 : double, r2 : double)
    {
        StartPoint = p1;
	EndPoint = p2;
	R1 = r1;
	R2 = r2;
    }   
}
class BSplineSurface
{
    P1 : Point[]..[];
    
    constructor ByPoints( p1 : Point[]..[] )
    {
        P1 = p1;
    }
}
class BSplineCurve
{
    P1 : Point[];
    
    constructor ByPoints( p1 : Point[] )
    {
        P1 = p1;
    }   
    def Project(s1: BSplineSurface , v1 : Vector)
    {
        return = BSplineCurve.ByPoints( { s1.P1[0][0], s1.P1[1][1], Point.ByCartesianCoordinates ( v1.X, v1.Y, v1.Z ) } );
    }
}
class Circle extends BSplineCurve
{
    P : Point[];
    
    constructor ByPointsOnCurve( p1 : Point[] )
    {
        P = p1;
    }    
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1554_T01_Update_Variable_Across_Language_Scope()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"a;b;c;d;
[Associative]
{
    a = 0;
	d = a + 1;
    [Imperative]
    {
		b = 2 + a;
		a = 1.5;
		
    }
	c = 2;
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1555_T02_Update_Function_Argument_Across_Language_Scope()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"a = 1;
def foo ( a1 : double )
{
    return = a1 + 1;
}
b = foo ( c ) ;
c = a + 1;
[Imperative]
{
    a = 2.5;
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1556_T03_Update_Function_Argument_Across_Language_Scope()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"a = 1;
def foo ( a1 : int )
{
    return = a1 + 1;
}
b = foo ( c ) ;
c = a + 1;
[Imperative]
{
    a = 2.5;
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1557_T04_Update_Class_Instance_Argument()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class A
{
    a : int;
	constructor A ( x : int )
	{
	    a = x;
	}
	def add ( x : int )
	{
	    a = a + x;
		return = a;
	}
}
t1 = 1;
a1 = A.A(t1);
b1 = a1.add(t1);
[Imperative]
{
	t1 = 2;
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1558_T05_Update_Class_Instance_Argument()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class A
{
    a : int;
	constructor A ( x : int )
	{
	    a = x;
	}
	def add ( x : int )
	{
	    a = a + x;
		return = A.A(a);
	}
}
t1 = 1;
a1 = A.A(t1);
b1 = a1.add(t1);
t2 = b1.a;
//t1 = 2;
[Imperative]
{
	t1 = 2;
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1559_T06_Update_Class_Instance_Argument()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class A
{
    a : int;
	constructor A ( x : int )
	{
	    a = x;
	}
	def add ( x : int )
	{
	    a = a + x;
		return = A.A(a);
	}
}
t1 = 1;
a1 = A.A(t1);
a2 = a1.a;
r1 = [Imperative]
{
	b1 = a1.add(t1);
	t2 = b1.a;
	t1 = 2;
	return = t2;
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1560_T07_Update_Array_Variable()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"a = 1..3;
c = a;
b = [ Imperative ]
{
    count = 0;
	for ( i in a )
	{
	    a[count] = i + 1;
		count = count+1;
	}
	return = a;
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1561_T08_Update_Array_Variable()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"a = 1..3;
c = a;
b = [ Imperative ]
{
    count = 0;
	for ( i in a )
	{
	    if ( i > 0 )
		{
		    a[count] = i + 1;
		}
		count = count+1;
	}
	return = a;
}
d = [ Imperative ]
{
    count2 = 0;
	while (count2 <= 2 ) 
	{
	    if ( a[count2] > 0 )
		{
		    a[count2] = a[count2] + 1;
		}
		count2 = count2+1;
	}
	return = a;
}
e = b;
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1562_T09_Update_Across_Multiple_Imperative_Blocks()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"a = 1;
b = a;
c = [ Imperative ]
{
    a = 2;
	return = a;
}
d = [ Imperative ]
{
    a = 3;
	return = a;
}
e = c;
f = d;
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1563_T10_Update_Array_Across_Multiple_Imperative_Blocks()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"a = 1..3;
b = a;
c = [Imperative ]
{
    x = { 10, a[1], a[2] };
	a[0] = 10;
	return = x;
}
d = [ Imperative ]
{
    a[1] = 20;
	return = a;
}
e = c;
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1564_T11_Update_Undefined_Variables()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"b = a;
[Imperative]
{
    a = 3;
}
[Associative]
{
    a = 4;	
}
c = b;";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1565_T12_Update_Undefined_Variables()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"b = a;
[Imperative]
{
    a = 3;
}
[Associative]
{
    a = 4;
    d = b + 1;	
}
c = b;";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1566_T13_Update_Variables_Across_Blocks()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"a = 3;
b = a * 3;
c = [Imperative]
{
    d = b + 3;
	a = 4;
	return = d;
}
f = c + 1;";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1567_T14_Defect_1461209()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class A
{
    a : var;
	constructor A ( a1 : double)
	{
	    a = a1;
	}
}
y = A.A( x);
a1 = y.a;
x = 3;
x = 5;";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1568_T14_Defect_1461209_2()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class A
{
    a : var;
	constructor A ( a1 : double)
	{
	    a = a1;
	}
}
y = A.A( x);
a1 = y.a;
x = [Imperative]
{
    return = 5;
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1569_T14_Defect_1461209_3()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class A
{
    a : var = foo (1);
	
	def foo (a1 : var)
	{
	    return = a1 + 1;
	}
}
y = A.A( );
a1 = y.a;
a2 = y.foo(1);
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1570_T14_Defect_1461209_4()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class A
{
    a : var ;
	b = a + 1;
	
	constructor A (a1 : var)
	{
	    a = a1 + 1;
	}
}
y = A.A( x );
a1 = y.a;
b1 = y.b;
x = [Imperative]
{
    return = 3;
}
x = 2;
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1571_T15_Defect_1460935()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class B
{ 
	x3 : int ;
		
	constructor B(a) 
	{	
		x3 = a;
	}
	
}
def foo ( b1 : B )
{
    return = b1.x3;
}
b1 = B.B( 1 );
x = b1.x3;
b1 = 1;
y = x; // expected : null; recieved : 1
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1572_T15_Defect_1460935_2()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class B
{ 
	x3 : int ;
		
	constructor B(a) 
	{	
		x3 = a;
	}
	
}
def foo ( b1 : B )
{
    return = b1.x3;
}
b1 = B.B( 1 );
x = b1.x3;
b1 = 2;
y = x; // expected : null; recieved : exception
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1573_T15_Defect_1460935_3()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"x = 1;
y = x;
x = true; //if x = false, the update mechanism works fine
yy = y;
x = false;
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1574_T15_Defect_1460935_4()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class B
{ 
	x3 : int ;
		
	constructor B(a) 
	{	
		x3 = a;
	}
	
}
class A
{ 
	x3 : int ;
		
	constructor A(a) 
	{	
		x3 = a;
	}
	
}
def foo ( b1 : B )
{
    return = b1.x3;
}
b1 = B.B( 1 );
x = b1.x3;
y = foo ( b1 );
[Imperative]
{
	b1 = A.A( 2 );	
}
b2 = B.B( 2 );
x2 = b2.x3;
y2 = foo ( b2 );
[Imperative]
{
	b2 = null;
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1575_T15_Defect_1460935_5()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class B
{ 
	x3 : int ;
		
	constructor B(a) 
	{	
		x3 = a;
	}
	
}
b3 = B.B( 2 );
x3 = b3.x3;
[Imperative]
{
	b3 = { B.B( 1 ), B.B( 2 ) } ;
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1576_T15_Defect_1460935_6()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class B
{ 
	x3 : int ;
		
	constructor B(a) 
	{	
		x3 = a;
	}
	
}
def foo ( b : B )
{
    return = { b.x3, b.x3 + 1 };
}
b1 = B.B( 2 );
x1 = b1.x3;
f1 = foo ( b1);
b1 = null;
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1577_T16_Defect_1460623()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"a2 = 1.0;
test2 = a2;
a2 = 3.0;
a2 = 3.3;
t2 = test2; // expected : 3.3; recieved : 3.0
a1 = { 1.0, 2.0};
test1 = a1[1]; 
a1[1] = 3.0;
a1[1] = 3.3;
t1 = test1; // expected : 3.3; recieved : 3.0
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1578_T16_Defect_1460623_2()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"def foo ( a )
{
    return = a;
}
x = 1;
y = foo (x );
x = 2;
x = 3;
[Imperative]
{
    x = 4;
}
z = x;
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1579_T16_Defect_1460623_3()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"def foo ( a )
{
    x = a;
	y = x + 3;
	x = a + 1;
	x = a + 2;
	return = y;
}
x = 1;
y = foo (x );
[Imperative]
{
    x = 2;
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1580_T16_Defect_1460623_4()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class A
{
	x : var;
	constructor A ( a )
	{
    	x = a;		
		x = a + 1;
		x = a + 2;
	}
	
	def foo ()
	{
	    x = 4;
		x = 5;
		return = 5;
	}
}
x1 = 1;
a1 = A.A( x1 );
y1 = a1.x;
z1 = a1.foo();
[Imperative]
{
    x1 = 2;
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1581_T17_Defect_1459759()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class B
{
    b1 : var;
	constructor B ( )
	{
	    b1 = 3;
	}
}
p1 = 1;
p2 = p1 * 2;
p1 = true;
x1 = 3;
y1 = x1 + 1;
x1 = B.B();
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1582_T17_Defect_1459759_2()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"a1 = { 1, 2 };
y = a1[1] + 1;
a1[1] = 3;
a1 = 5;
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1583_T18_Update_Variables_In_Inner_Assoc()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"c = 2;
b = c * 2;
x = b;
[Imperative]
{
    c = 1;
	b = c + 1;
	d = b + 1;
	y = 1;
	[Associative]
	{
	  	b = c + 2;		
		c = 4;
		z = 1;
	}
}
b = c + 3;
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1584_T19_Update_Class_Properties_Thru_Methods()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class A
{
    a : int = 0;
	
	constructor A ()
	{
	    a = 1;
	}
	
	def Update ()
	{
	    a = 2;
		return = true;
	}
}
a1 = A.A();
b1 = a1.a;
x1 = a1.Update();
b2 = b1;
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1585_T20_Defect_1461391()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"a = 1;
def foo ( a1 : double )
{
    return = a1 + 1;
}
b = foo ( c ) ;
c = a + 1;
[Imperative]
{
    a = 2.5;
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1586_T20_Defect_1461391_2()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"a = 1;
def foo ( a1 : double[] )
{
    return = a1[0] + a1[1];
}
b = foo ( c ) ;
c = { a, a };
[Imperative]
{
    a = 2.5;
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1587_T20_Defect_1461391_3()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"a = 1;
def foo ( a1 : double )
{
    return = a1 + 1;
}
b = foo ( a ) ;
[Imperative]
{
   a = foo(2);
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1588_T20_Defect_1461391_4()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class A
{
    a : int;
	constructor A ( a1 : int )
	{
	    a = a1;		
	}
	
	def update ( a2 : int )
	{
	    a = a2;
		return = true;
	}
}
x = { 1, 2 };
y1 = A.A(x);
y2 = { y1[0].a, y1[1].a };
[Imperative]
{ 
	for ( count in 0..1)
	{
	    temp = y1[count].update(0);	
	}
}
t1 = y2[0];
t2 = y2[1];
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1589_T20_Defect_1461391_5()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class A
{
    a : int;
	constructor A ( a1 : int )
	{
	    a = a1;		
	}
	
	def update ( a2 : int )
	{
	    a = a2;
		return = true;
	}
}
def foo ( a : A) 
{
    return = a.a;
}
x = { 1, 2 };
y1 = A.A(x);
y2 = foo ( y1);
[Imperative]
{ 
	count = 0;
	for ( i in y1)
	{
	    temp = y1[count].update(0);	
        count = count + 1;		
	}
}
t1 = y2[0];
t2 = y2[1];
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1590_T20_Defect_1461391_6()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"def foo ( a : int) 
{
    return = a;
}
y1 = { 1, 2 };
y2 = foo ( y1);
[Imperative]
{ 
	count = 0;
	for ( i in y1)
	{
	    y1[count] = y1[count] + 1;	
        count = count + 1;		
	}
}
t1 = y2[0];
t2 = y2[1];
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1591_T21_Defect_1461390()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"c;
[Associative]
{
    a = 0;
    d = a + 1;
    [Imperative]
    {
       b = 2 + a;
       a = 1.5;
              
    }
    c = a + 2; // fail : runtime assertion 
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1592_T21_Defect_1461390_2()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"a = 1;
b = a + 1;
[Imperative]
{
    a = 2;
    c = b + 1;
	b = a + 2;
    [Associative]
    {
       a = 1.5;
       d = c + 1;
       b = a + 3; 
       a = 2.5; 	   
    }
    b = a + 4;
    a = 3;	
}
f = a + b;";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1593_T22_Update_Class_Instance()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class A
{
    a : int[];
	constructor A ( a1 : int[] )
	{
	    a = a1;		
	}
	
	def update ( a2 : int, i:int )
	{
	    a[i] = a2;
		return = true;
	}
}
y1 = { 1, 2 };
y2 = { 3, 4 };
x = { A.A (y1), A.A(y2) };
t1 = x[0].a[0];
t2 = x[1].a[1];
dummy = 0;
[Imperative]
{ 
	count = 0;
	for ( i in y1)
	{
	    y1[count] = y1[count] + 1;	      
		count = count + 1;		
	}
}
dummy=1;
[Imperative]
{ 
	count = 0;
	for ( i in y2)
	{
	    y2[count] = y2[count] + 1;	      
		count = count + 1;		
	}
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1594_T23_Update_Class_Instance_Using_Set_Method()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class A
{
    a : int;	
}
a1 = A.A();
a1.a = 1;
b = a1.a;
a1.a = 2;
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1595_T23_Update_Class_Instance_Using_Set_Method_2()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class A
{
    a : int[];	
}
a1 = A.A();
a1.a = {1,2};
b = a1.a;
a1.a = {2,3};
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1596_T23_Update_Class_Instance_Using_Set_Method_3()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class A
{
    a : int[];	
}
a1 = A.A();
a1.a = {1,2};
b = a1.a;
a1.a = null;
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1597_T23_Update_Class_Instance_Using_Set_Method_4()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class A
{
    a : int[];	
}
a1 = A.A();
a1.a = {1,2};
b = a1.a;
a1.a = 3.5;
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1598_T23_Update_Class_Instance_Using_Set_Method_5()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class A
{
    a : int[];	
}
a1 = A.A();
a1.a = {1,2};
b = a1.a;
a1.a = true;
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1599_T23_Update_Class_Instance_Using_Set_Method_6()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class A
{
    a : int[];	
}
def foo ( x1 : A)
{
    x1.a = { 0, 0};
    x1.a[3] = -1;
    return = x1;
}
a1 = A.A();
a1.a = {1,2};
b = a1.a;
a1 = foo ( a1);
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1600_T23_Update_Class_Instance_Using_Set_Method_7()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class A
{
    a : int[];	
}
def foo ( x1 : A)
{
    x1.a = { 0, 0};
    x1.a[3] = -1;
    return = true;
}
a1 = A.A();
a1.a = {1,2};
b = a1.a;
dummy = foo ( a1);
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1601_T24_Update_Variable_Type()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class A
{	Pt : double;
	constructor A (pt : double)	
	{		
	    Pt = pt;	
	}
}
c = 1.0;
c = A.A( c );
x = c.Pt;";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1602_T25_Defect_1459759()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"p1 = 2;
p2 = p1+2;
p1 = true;";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1603_T25_Defect_1459759_2()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"a1 = { 1, 2 };
y = a1[1] + 1;
a1[1] = 3;
a1 = 5;";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1604_T25_Defect_1459759_3()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"a = { 2 , b ,3 };
b = 3;
c = a[1] + 2;
d = c + 1;
b = { 1,2 };";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1605_T25_Defect_1459759_4()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"p2;
[Imperative]
{
	[Associative]
	{
		p1 = 2;
		p2 = p1+2;
		p1 = true;
	}
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1606_T25_Defect_1459759_5()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"a;
[Imperative]
{
	a = 2;
	x = [Associative]
	{
		b = { 2, 3 };
		c = b[1] + 1;
		b = 2;
		return = c;
	}
	a = x;
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1607_T25_Defect_1459759_6()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"
	def foo ( a, b )
	{
		a = b + 1;
		b = true;
		return = { a , b };
	}
e;
[Imperative]
{
	c = 3;
	d = 4;
	e = foo( c , d );
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1608_T25_Defect_1459759_7()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class A
{
	a : var;
	constructor Create( xx )
	{
		a = xx;
	}
	def foo ( yy )
	{
		a = yy;
		return = yy;
	}
}
	test1 = A.Create( 3 );
	test2 = A.Create( 2 );
	test1.a = test2.a + 1;
	
	c = test2.foo( true );
	d = test1.a;
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1609_T26_Defect_1463663()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"a = {
  1;
  +1;
  } 
  
b = a + 1;
c = [Imperative]
{
  a1 = {
  1;
  +1;
  } 
  
  b1 = a1 + 1;
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1610_T27_Modifier_Stack_Cross_Reference()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"a = {
		  1 => a1;
		  b1 + a1 => a2;		  		  
    };
b = {
		  2 => b1;		  		  
    };	  
	  
	
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1611_T27_Modifier_Stack_Inside_Class()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class B
{
    x : var;
    constructor B ( y )
    {
        x = y;
    }
}
class A
{ 
    a : var;
	a1 : var;
	a2  :var;
	a3 : var;
	a4 : var;
	a5 : var[];
	a6 : var[];
	a7 : var;
	a8 : var;
	
    constructor A ( x : var )
	{
	    a = {
		  x => a1;
		  a1 - 0.5 => a2;
		  a2 * null => a3;
		  a1 > 10 ? true : false => a4;
		  a1..2 => a5;
		  { a3, a3 } => a6;
		  B.B(a1) => a7;	 
          B.B(a1).x => a8;			  
     }
	}
}
a1 = A.A ( 1 );	
x = { a1.a1, a1.a2, a1.a3, a1.a4, a1.a5, a1.a6, a1.a8 };
y = a1.a;
	  
	
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1612_T27_Modifier_Stack_Inside_Class_2()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class B
{
    x : var;
    constructor B ( y )
    {
        x = y;
    }
}
class A
{ 
    a : var;
	a1 : var;
	a2  :var;
	a3 : var;
	a4 : var;
	a5 : var[];
	a6 : var[];
	a7 : var;
	a8 : var;
	
    constructor A ( x : var )
	{
	    a = x;			  
	}
	def update ( x : var )
	{
	    a = {
		  x => a1;
		  a1 - 0.5 => a2;
		  a2 * null => a3;
		  a1 > 10 ? true : false => a4;
		  a1..2 => a5;
		  { a3, a3 } => a6;
		  B.B(a1) => a7;	 
          B.B(a1).x => a8;			  
	  }
	  return = x;
	}
}
a1 = A.A ( 0 );	
x = a1.update(1);
y = { a1.a1, a1.a2, a1.a3, a1.a4, a1.a5, a1.a6, a1.a8 };
	  
	
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1613_T27_Modifier_Stack_Inside_Class_3()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class B
{
    x : var;
    constructor B ( y )
    {
        x = y;
    }    
    def bfoo(a : double)
    {
        return = a*98;
    }
}
class C
{
    x : int;
    
    constructor C(a : int)
    {
        x = a;
    }    
    def bfoo(a : double)
    {
        return = a*3;
    }
}
class A
{ 
    a : var;
    a1 : var;
    a2 :var;
    a60 : var;
    a61 : var;
    a7 : var;
    a8 : var;
    a9 : var;
    constructor A ( x : var )
    {
        a =
        {
            x => a1;    
            - 0.5 => a2;
            C.C(a1) => a60;
             bfoo(a2) => a61;
             B.B(a1) => a7;
             bfoo(a2) => a8;
             B.B(19890).x => a9; 
        }
}
    
    // Expanding modifier block in foo - foo(1) is found to give the exact same results as A.A(1)
    def foo(x : int)
    {
        a1 = x;            // a1 should be 1
        a = a1;            
        a2 = a1 - 0.5;     // a2 should be 0.5
        a = a2;
        a60 = C.C(a1);    // a60 should be C(x = 1)
        a = a60;
        a61 = a60.bfoo(a2);    // a61 should be 1.5
        a = a61;    
        a7 = B.B(a1);        // a7 should be B(x = 1)
        a = a7;    
        a8 = a7.bfoo(a2);    // a8 should be 49.0
        a = a8;
        a9 = B.B(19890).x;    // a9 should be 19890
        a = a9;                // a should be 19890 in the end
    
        return = { a, a1, a2, a61, a8, a9 };
    }
}
ax = A.A();
//ax = A.A(1);    // this gives the same results as ax.foo(1)
res = ax.foo(1);
// ax should be A(a = 19890, a1 = 1, a2 = 0.5, a60 = C(x = 1), a61 = 1.5, a7 = B(x = 1), a8 = 49.0, a9 = 19890)
xa = ax.a;
xa1 = ax.a1;
xa2 = ax.a2;
xa60 = ax.a60;
xa61 = ax.a61;
xa7 = ax.a7;
xa8 = ax.a8;
xa9 = ax.a9;
	  
	
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1614_T27_Modifier_Stack_Inside_Class_4()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class B
{
    x : var;
    constructor B ( y )
    {
        x = y;
    }    
    def bfoo(a : double)
    {
        return = a*98;
    }
}
class C
{
    x : int;
    
    constructor C(a : int)
    {
        x = a;
    }    
    def bfoo(a : double)
    {
        return = a*3;
    }
}
class A
{ 
    a : var;
    a1 : var;
    a2 :var;
    a60 : var;
    a61 : var;
    a7 : var;
    a8 : var;
    a9 : var;
    def foo(x : int)
    {
       a =
        {
            x => a1;    
            - 0.5 => a2;
            C.C(a1) => a60;
             bfoo(a2) => a61;
             B.B(a1) => a7;
             bfoo(a2) => a8;
             B.B(19890).x => a9; 
        }
        return = { a, a1, a2, a61, a8, a9 };
    }
}
ax = A.A();
//ax = A.A(1);    // this gives the same results as ax.foo(1)
res = ax.foo(1);
	  
	
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1615_T27_Modifier_Stack_Inside_Function()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class A
{ 
    x : int;
    constructor A ( y )
	{
	    x = y;
	}
}
def foo ( ) 
{
    
	a = {
		  1 => a1;
		  a1 - 0.5 => a2;
		  a2 * null => a3;
		  a1 > 10 ? true : false => a4;
		  a1..2 => a5;
		  { a3, a3 } => a6;
		  A.A(a1) => a7;	 
          A.A(a1).x => a8;			  
	  }
    return = { a1, a2, a3, a4, a5, a6, a8 };
}
x = foo ();	
	  
	
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1616_T27_Modifier_Stack_Update()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"b1 = 2;
a = {
		  1 => a1;
		  a1 + b1 => a2;		  		  
    };
	
b1 = 3;
a1 = 2;
a1 = null;
dummy = 1;
  
	  
	
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1617_T27_Modifier_Stack_Update_2()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"a = {
		  1 => a1;
		  a1 + b1 => a2;		  		  
    };
b1 = 2;	
  
	  
	
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1618_T27_Modifier_Stack_Update_3()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class B
{
    y : var;
    constructor B ( x : var )
    {
        y = x;
    } 
}
class A
{
    x : var;
    constructor A ( y : var )
    {
        x = y;
    }
    
    def foo1 ( )
    {
        return = A.A(x + 1);
    }
    
    def foo2 ( y : var )
    {
        return = B.B( y );
    }
    
    def foo3 ( x1 : A, x2 : B )
    {
        return = A.A ( x1.x + x2.y );
    }
}
y = 1;
a = {
		  A.A(1) => a1;
		  a1.foo1() => a2;
		  a1.foo2( y) => a3;
                  a1.foo3(a2,a3);                 		  
    }
    
z = a.x;
  
	  
	
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1619_T27_Modifier_Stack_Update_4()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"y = 3;
a =
	{
		y + 1 => a1;
		 +1 => a2;
	}
	
b1 = a1;
b2 = a2;
y = 4;";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1620_T27_Modifier_Stack_Update_5()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"def foo ( x )
{
    return = x * 2;
}
y = 3;
a =
	{
		foo( y ) + 1 => a1;
		 * 3 => a2;
	}
y = 2;	
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1621_T27_Modifier_Stack_Update_6()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class A
{
    x : var;
    constructor A ( y)
    {
        x = y;
    }
}
def foo ( a : A )
{
    return = a.x * 2;
}
y = 3;
a =
	{
		A.A ( y ) => a1;
		foo ( a1 ) => a2;
	}
b = foo ( a1 );
y = 2;
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1622_T27_Modifier_Stack_With_Array()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"a =
	{
		{1,2,3,4} => a1;
		a1[0] + 1 => a2; 
	}
	
b1 = a1;
b2 = a;";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1623_T27_Modifier_Stack_With_Array_2()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"a =
	{
		{ 1, 2, 3, 4} => a1;
		 a [ 0] + 1 => a2;
	}
	
b1 = a1;
b2 = a2;
a = 4;";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1624_T27_Modifier_Stack_With_Array_3()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"a =
	{
		{1,2,3,4} => a1; // identify the initial state to modify
		{a1[0]+3, a1[-1]};  // modify selected members [question: can we refer to 'a@initial' in this way 
				     // inside the modifier block where the right assigned variable was created?]
		//+10 // this modification applies to the whole collection
	}
	
b = a;
c = { a1[0], a[-1] };
x = [Imperative]
{
    return = { a[0], a1[1] };
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1625_T27_Modifier_Stack_With_Array_4()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"a = { 1, 2, 3, 4 };
a[0] =
	{
		a[0] + 1 => a1;
		a1 * 2 => a2;  
		{ a2, a2};
	}
/*[Imperative]
{
    a[1] =
	{
		a[1] + 1 => a1;
		a1 * 2 => a2;  
		{ a2, a2};
	}
}*/
b = a;
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1626_T27_Modifier_Stack_With_Different_Types()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"    class A
	{ 
	    x : int;
	    constructor A ( y )
		{
		    x = y;
		}
	}
	a = {
		  1 => a1;
		  0.5 => a2;
		  null => a3;
		  false => a4;
		  { 1,2 } => a5;
		  { null, null } => a6;
		  A.A(1) => a7;	 
          A.A(1).x => a8;			  
	  } 
	  
	
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1627_T27_Modifier_Stack_With_Different_Types_2()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"    class A
	{ 
	    x : int;
	    constructor A ( y )
		{
		    x = y;
		}
	}
	a = {
		  1 => a1;
		  a1 - 0.5 => a2;
		  a2 * null => a3;
		  a1 > 10 ? true : false => a4;
		  a1..2 => a5;
		  { a3, a3 } => a6;
		  A.A(a1) => a7;	 
          A.A(a1).x => a8;			  
	  } 
	  
	
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1628_T27_Modifier_Stack_With_Function_Call()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"def foo ( a : int, b : double )
{
    return = a + b + 3;
}
v = 1;
a = {
  1 => a1;
  +1 => a2;
  +foo(a2,a1)-3 => a3;
  } 
  
b = a + 1;
c = a1 + 1;
d = a2 + 1;
f = a3 + 1;
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1629_T27_Modifier_Stack_With_Function_Call_2()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"def foo ( a : int, b : double )
{
    return = a + b + 3;
}
x = [Associative]
{
	v = 1;
	a = {
	  1 => a1;
	  +1 => a2;
	  +foo(a2,a1)-3 => a3;
	  } 
	  
	b = a + 1;
	c = a1 + 1;
	d = a2 + 1;
    f = a3 + 1;
	return = { b, c, d, f };
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1630_T27_Modifier_Stack_With_Inline_Condition()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class B
{
    b : var;
    constructor B ( y )
    {
        b = y;
    }
}
class A
{ 
    a : var;
    constructor A ( x : var )
    {
        a = x;
    }
}
x1 = 1;
x2 = 0.1;
x3 = true;
x4 = A.A(10);
a = 
{
	x1 > x2 ? true : false => a1;
	x4.a == B.B(10).b ? true : false => a2;
	x1 == x2 ? true : x3 => a3;
	x1 != x2 ? B.B(2).b : A.A( 1).a => a4;		  
};	  
x = a == 2 ? true : false;
	
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1631_T27_Modifier_Stack_With_Range_Expr()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"def foo ( x : int[])
{
    return = { x[1], x[0] };
}
class A
{ 
    a : var;
    constructor A ( x : var )
    {
        a = x;
    }
}
x1 = 1;
x2 = 0.1;
x3 = true;
x4 = A.A(10);
a = 
{
	x1 .. x2  => a1;
	x2 .. x1 => a4;
	1 .. x4.a .. 2 => a2;
	a2[0]..a2[2]..#5 => a5;
	x1 == x2 ? false : x1..2 => a3;
        foo ( a3) ;	
};	  
b = 0.0..a[0]..0.5;
	
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1632_T27_Modifier_Stack_With_Right_Assignment()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"v = 1;
a = 
{
  1 => a1;
  +1 => a2;
  +v => a3;
} 
b = a + 1;
c = a1 + 1;
d = a2 + 1;
f = a3 + 1;";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1633_T27_Modifier_Stack_With_Self_Updates()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"a = {
    1 => a1;
    +1 => a2;
    +1 => a3;
    +a2 => a4;
    +a3 => a5;
}
	
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1634_T28_Update_With_Inline_Condition()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"x = 3;
a1 = 1;
a2 = 2;
a = x > 2 ? a1: a2;
a1 = 3;
a2 = 4;";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1635_T28_Update_With_Inline_Condition_2()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"x = 3;
a1 = { 1, 2};
a2 = 3;
a = x > 2 ? a2: a1;
a2 = 5;
x = 1;
a1[0] = 0;";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1636_T30_Update_Global_Variables_Class()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"x  = 1;
class A
{
    static y : int;
    constructor A ( x )
    {
        y = x;
    }
    constructor A2 ( x1 )
    {
        y = x + x1;
    }
}
y = A.A(2);
z = y.y;
y1 = A.A2(2);
z1 = y1.y;
x = 3;";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1637_T30_Update_Global_Variables_Function()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"x  = 1;
class A
{
   x : double;
   constructor A ( x1 )
   {
       x = x1;
   }
   def getx ( )
   {
       x = x + 1;
       return = x ;
   }
}
y = A.A(2);
z1 = y.x;
z2 = y.getx();
z3 = x;
z4 = y.x;
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1638_T30_Update_Global_Variables_Imperative_Scope()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"x  = {0,0,0,0};
count = 0;
i = 0;
sum  = 0;
test = sum;
[Imperative]
{
    for  ( i in x ) 
    {
       x[count] = count;
       count = count + 1;       
    }
    j = 0;
    while ( j < count )
    {
        sum = x[j]+ sum;
        j = j + 1;
    }
}
y = x;";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1639_T30_Update_Global_Variables_Imperative_Scope_2()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"
count = 0;
i = 0;
sum  = 0;
test = sum;
[Imperative]
{
    for  ( i in x ) 
    {
       x[count] = count;
       count = count + 1;       
    }
    j = 0;
    while ( j < count )
    {
        sum = x[j]+ sum;
        j = j + 1;
    }
}
x  = {0,0,0,0};
y = x;
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1640_T31_Defect_1459777()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class A 
{
    a : var;
	constructor A ( x)
	{
	    a = x;
	}
}
x = 3;
a1 = A.A(x);
b1 = a1.a;
x = 4;
c1 = b1;
// expected : c1 = 4;
// recieved : c1 = 3
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1641_T31_Defect_1459777_2()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class A
{
    a : int;	
}
a1 = A.A();
a1.a = 1;
b = a1.a;
a1.a = 2; // expected b = 2; received : b = 1;
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1642_T31_Defect_1459777_3()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class A
{
    a : int;	
}
a1 = A.A();
x = a1.a;
c = [Imperative]
{
    a1.a = 1;
    b = a1.a;
    a1.a = 3; 
	return = b;
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1643_T31_Defect_1459777_4()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class A
{
    a : int;	
}
class B extends A 
{
    b : var; 
	
}
def foo ( x )
{
    x.b = 2;
	return = true;
}
y = B.B();
y.b = 1;
z = y.b;
test = foo ( y ) ;
z2 = z;
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1644_T31_Defect_1459777_5()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class A
{
    a : int;	
}
class B 
{
    b : var;
    constructor B ( a : A )
    { 
	    a.a = 2;
		b = a.a + 2;
    }	
	
}
y = A.A();
z = y.a;
x = B.B(y);
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1645_T31_Defect_1459777_6()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"	
class A
{
    a : int;	
}
class B 
{
    b : var;
    constructor B ( a : A )
    { 
	    a.a = 3;
    }	
	def foo ( a : A )
	{
	    a.a = 3;
		return = true;
	}
	
}
y = A.A();
z = y.a;
x1 = B.B( y );
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1646_T31_Defect_1459777_7()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class A
{
    a : int;	
}
x = A.A();
y = x.a;
y1 = 0..y;
y2 = y > 1 ? true : false;
y3 = 1 < x.a ? true : false;
x.a = 2;
z1 = y1;
z2 = y2;
z3 = y3;";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1647_T31_Defect_1459777_8()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class A
{
    a : int;	
}
def foo ( x ) 
{
    return  = x + 1;
}
x1 = A.A();
y1 = foo( x1.a );
x1.a = 2;
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1648_T31_Defect_1459777_9()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class A
{
    a : int;	
}
def foo ( x ) 
{
    return  = x + 1;
}
x1 =  { A.A(), A.A() };
a1 = A.A();
x2 =  { a1.a, a1.a };
y2 = foo ( x2[0] );
y1 = foo ( x1[1].a );
x1[1].a = 2;
a1.a = 2; 
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1649_T32_Update_With_Range_Expr()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"y = 1;
y1 = 0..y;
y = 2;
z1 = y1;                             
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1650_T33_Defect_1466107()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class B
{
    b : int;	
}
class A extends B
{
    a : int;	
}
def foo ( x ) 
{
    return  = x + 1;
}
x1 =  { A.A(), A.A() };
a1 = A.A();
x2 =  { a1.a, a1.a };
y2 = foo ( x2[0] );
y1 = foo ( x1[1].b );
x1[1].b = 2;
a1.a = 2; 
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1651_T33_Defect_1466107_2()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class B
{
    b : int;	
}
class A extends B
{
    a : int;	
}
def foo ( x ) 
{
    return  = x + 1;
}
x1 =  { A.A(), A.A() };
a1 = A.A();
x2 =  { a1.a, a1.a };
y2 = foo ( x2[0] );
y1 = foo ( x1[1].b );
def foo1 ( t1 : A )
{
    t1.b = 2;
	return = null;
}
def foo2 ( t1 : A )
{
    t1.a = 2;
	return = null;
}
dummy1 = foo1 ( x1[1] );
dummy2 = foo2 ( a1 );
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1652_T34_Defect_DNL_1463327()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class A
{        
    Pt : double;        
    constructor A (pt : double)            
    {                        
        Pt = pt;            
    }
}
c = 1.0;
x = [Imperative]
{
	c = A.A( c );
	x = c.Pt;
	return = x;
}
// expected : c = A ( Pt = 1.0 ); x = 1.0
// received : System.NullReferenceException: Object reference not set to an instance of an object.
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1653_T34_Defect_DNL_1463327_2()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class A
{        
    Pt : double[];        
    constructor A (pt : double[])            
    {                        
        Pt = pt;            
    }
}
c = 0.0..3.0;
y = c[0];
x = [Imperative]
{
	c = A.A( {c[0], c[0]} );
	x = c.Pt;
	return = x;
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1654_T34_Defect_DNL_1463327_3()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class A
{        
    Pt : double;        
    constructor A (pt : double)            
    {                        
        Pt = pt;            
    }
}
t = 0.0..3.0;
c = A.A ( t );
c1 = Count ( c );
x = [Imperative]
{
	c = A.A( c[0].Pt );
	x = c.Pt;
	return = x;
}
t = 0.0..2.0;
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1655_T34_Defect_DNL_1463327_4()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class A
{        
    Pt : double;        
    constructor A (pt : double)            
    {                        
        Pt = pt;            
    }
}
t = 0.0..3.0;
c = A.A ( t );
c = A.A ( c[0].Pt );
c = A.A ( c.Pt );
x = c.Pt;
t = 0.0..1.0;
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1656_T35_Defect_DNL_1463700()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class A
{        
    x = {1,2,3};        
    def foo()        
    {                
        x[0] = 100;        
    }
}
a = A.A();
t = a.x;
x = a.foo();
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1657_T35_Defect_DNL_1463700_2()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class A
{        
    x = {1,2,3};        
    count = 3;
    def foo()        
    {                
       count = 0;
       [Imperative]
       {
           for ( i in x )
	   {
	       x[count] = i*2;
	       count = count + 1;
	   }
        } 
        return = null;        
    }
}
a = A.A();
t1 = a.x;
t2 = a.count;
dummy = a.foo();
t3 = t1;";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1658_T36_Modifier_Block_Multiple_Updates()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"a = 1;
b = a + 1;
a = { 2 => a1;
      a1 + 1 => a2;
      a2 * 2 ;
    }
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1659_T36_Modifier_Block_Multiple_Updates_2()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"a = 1;
b = a + 1;
a = { 2 => a1;
      a1 + 1 => a2;
      a2 * 2 ;
    }
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1660_T37_Modify_Collections_Referencing_Each_Other()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"a = {1,2,3};
b = a;
c1 = a[0];
b[0] = 10;
c2 = a[0];
testArray = a;
testArrayMember1 = c1;
testArrayMember2 = c2;";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1661_T38_Defect_1467059_Modifier_Stack_With_Undefined_Variable()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"a = {
          1 => a1;
          a1 + b1 => a2;    
          +2;                
    };
b1 = 2;";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1662_T38_Defect_1467059_Modifier_Stack_With_Undefined_Variable_2()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"def foo ( x )
{
    return = x;
}
a = {
          1 => a1;
          a1 + foo(b1) => a2;    
          +2;                
    };
b1 = 2;";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1663_T39_Defect_1465319_Modifier_Stack_Update_Issue()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"a = {
1 => a1; 
a1 + b1 + x=> a2; 
};
b1 = 2;
y1 = 2;
x = {
1 => x1;
x1 + y1 => x2; 
};
y1 = 5;";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1664_T40_Defect_1467057_Modifier_Stack_Cross_Update_Issue()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"a = {
          1 => a1;
          b1 + a1 => a2;                    
    };
b = {
          2 => b1;                    
    };";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1665_T40_Defect_1467057_Modifier_Stack_Cross_Update_Issue_2()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"a = {
          1 => a1;
          b1 + a1 => a2;                    
    };
b = {
          a1 + 2 => b1;                    
    };";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test, Ignore]
        [Category("WatchFx Tests")]
        public void DebugWatch1666_T40_Defect_1467057_Modifier_Stack_Cross_Update_Issue_3()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"a = {
          1 => a1;
          b1 + a1 => a2;                    
    };
b = {
          a2 + 2 => b1;                    
    };";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1667_T40_Defect_1467057_Modifier_Stack_Update_Issue()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"a = {
          1 => a1;
          b1 + a1 => a2;                    
    };
b = {
          2 => b1;                    
    };";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1668_T40_Defect_1467088_Modifier_Stack_Cross_Update_Issue()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"a = {
          1 => a1;
          b1 + a1 => a2;                    
    };
b = {
          a1 + 2 => b1;                    
    };
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1669_T40_Defect_1467088_Modifier_Stack_Cross_Update_Issue_2()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"
a = {
          1 => a1;
          b1 + a1 => a2;                    
    };
[Imperative]
{
	b = {
		  a1 + 2 => b1;                    
	    };
	
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1670_T40_Defect_1467088_Modifier_Stack_Cross_Update_Issue_3()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"
a = {
          1 => a1;
          b1 + a1 => a2;                    
    };
b;
[Associative]
{
	b = {
		  a1 + 2 => b1;                    
	    };
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1671_T41_Defect_1467072_Class_Update()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class A 
{
    a : int;
    constructor A ( a1:int)
    {
        a = b + 1;
        b = a1;
    }
}
def foo ( a1 : int)
{
    a = b + 1;
    b = a1;
    return  = a ;
}
ga = gb + 1;
gb = gf;
gc = foo (ga);
gd = A.A(gc);
e1 = gd.a;
gf = 2;
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1672_T41_Defect_1467072_Class_Update_2()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class A 
{
    a : int;
    constructor A ( a1:int)
    {
        b1 = foo(a1) + 1;
        a = b1+1;
	b1 = foo(a1);
    }
}
def foo ( a1 : int)
{
    a = b + 1;
    b = a1;
    return  = a ;
}
x = A.A(2);
y = x.a;";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1673_T42_Defect_1466071_Cross_Update()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class A
{
a : int; 
}
a1 = A.A();
x = a1.a;
c = [Imperative]
{
a1.a = 1;
return = a1.a;
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1674_T42_Defect_1466071_Cross_Update_2()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"i = 5;
totalLength = 6;
[Associative]
{
	x = totalLength > i ? 1 : 0;
	
	[Imperative]
	{
		for (j in 0..3)
		{
			i = i + 1;
		}	
	}
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1675_T42_Defect_1466071_Cross_Update_3()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"y = 1;
a = 2;
x = a > y ? 1 : 0;
y = [Imperative]
{
                while (y < 2) // create a simple outer loop
                {
                    y = y + 1;                              
                }
		return = y;
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1676_T43_Defect_1463498()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"c;d;
[Associative]
{
def foo : int ( a : int, b : int )
{
	a = a + b;
	b = 2 * b;
	return = a + b;
}
a = 1;
b = 2;
c = foo (a, b ); // expected 9, received -3
d = a + b;
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1677_T44_Defect_1457029()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class A
{
    Pt : double;
    constructor A (pt : double)
    {
        Pt = pt;
    }
    
    
}
    
c1 = { { 1.0, 2.0}, 3.0 };
c1 = A.A( c1[0] );
x = c1.Pt;
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1678_T44_Defect_1457029_2()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class A
{
    Pt : double;
    constructor A (pt : double)
    {
        Pt = pt;
    }
    
    
}
    
c1 = { { 1.0, 2.0}, 3.0 };
c1 = A.A( c1[0][0] );
x = c1.Pt;
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1679_T54_Defect_1467185_Modifier_Stack()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class B
{
    x : var;
    constructor B ( y )
    {
        x = y;
    }    
    def bfoo(a : double)
    {
        return = a*98;
    }
}
class C
{
    x : int;
    
    constructor C(a : int)
    {
        x = a;
    }    
    def bfoo(a : double)
    {
        return = a*3;
    }
}
x = 1;
a =
{
    x => a1;
    - 0.5 => a2; // equivalent to a1 - 0.5 or in general (previous state) - 0.5
    * 4 => a3; // equivalent to a2 * 4 or in general (previous state)times 4
    a1 > 10 ? true : false => a4;
    a1..2 => a5;
    { a3, a3 } => a6;
     C.C(a1);
     bfoo(a2) => a61; // bfoo method of class C called
     B.B(a1) => a7;
     bfoo(a2) => a8; // bfoo method of class B called
     B.B(a1).x => a9; 
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1680_T54_Defect_1467185_Modifier_Stack_2()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class B
{
    x : var;
    constructor B ( y )
    {
        x = y;
    }    
    def bfoo(a : double)
    {
        return = a+1;
    }
}
def foo ( x : double)
{
    return = x + 1;
}
x = 1;
a =
{
    {0,1,2,3 } => a1;
    + 0.5 => a2; 
    0..2 => a3; 
    foo ( a1[a3] ) => a4;
	B.B(a1).bfoo(a4) => a5;
    B.B(a1).bfoo(foo ( a1[a3] ) ) => a6;
}
a7 = B.B(a1).bfoo(a4); // works fine
a8 = B.B(a1).bfoo(foo ( a1[a3] ) ); // works fine";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1681_T54_Defect_1467185_Modifier_Stack_3()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class B
{
    x : var;
    constructor B ( y )
    {
        x = y;
    }    
    def bfoo(a : double)
    {
        return = a+1;
    }
}
def foo ( x : int, y: int)
{
    return = x + y;
}
x = { 1,2,3,4};
a =
{
    {0,1 } => a1;
	2..3 => a2;
    foo( a1<1>, a2<2> ) => a3; 
    x[a2] => a5;
	+x[a1] => a6;
	(0..2) => a4; 
     + 1;	
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1682_T59_Defect_1467418_Update_Across_Language_Blocks()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class A
{
    def _Dispose()
    {
        return = ""A.Dispose()"";
    }
}
i = 0;
[Imperative]
{
    while (i < 2)
    {
        [Associative]
        {
            as = {A.A(), A.A()};
            [Imperative]
            {
                c = 0;
                k = null;
                tmp = as;
                while (c < 2)
                {
                   k = as[c];
                   as[c] = A.A();
                   c = c + 1;
                }
            }
        }
		i = i + 1;
    }
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1683_T88_1461985_Update_In_Nested_Blocks_1()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"import (""GeometryLibForLanguageTesting.ds"");
controlPoint = Point.ByCartesianCoordinates(0, 7.5, 0);
internalLine :Line  = null; // define some variables
pointOnCurve : Point[] = null;
testLine : Line []     = null;
totalLength = 0;
i = 5;
[Imperative]
{
    while ( i <= 6 ) 
    {
        [Associative] // within that loop build an associative model
        {
            startPoint   = Point.ByCartesianCoordinates(i, 5, 0);
            endPoint     = Point.ByCartesianCoordinates(5, 10, 0);
            internalLine = Line.ByStartPointEndPoint(startPoint, endPoint);
            pointOnCurve = internalLine.PointAtParameter(0.2..0.8..0.2);            
            testLine     = Line.ByStartPointEndPoint(controlPoint, pointOnCurve);
            totalLength  = totalLength + Sum (testLine.Length);
        }
        i = i + 1; // increment i
    }
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(importpath, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1684_T88_1461985_Update_In_Nested_Blocks_2()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class B
{
    y;
    constructor B ( y1)
    {
        y = y1;
    }
}
class A
{
    x;
    def foo ( y:double )
    {
        return = B.B(y);
    }
}
a1  = null; // this kind of declaration is causing b1 = null. However, if I keep it as 'a1;', and 'b1;', I am getting expected output for 'b1'
b1 : B[] = null; // 
i = 0;
[Imperative]
{
    while ( i <= 2 )
    {
        [Associative] // within that loop build an associative model
        {
            a1 = A.A();
            b1 = a1.foo(0..i); // received : null
        }
        i = i + 1;
    }
}
test = b1.y;
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1685_GeometryLibForLanguageTesting()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"def count (array : var[])
{
    c1 = [Imperative]
    {
        c = 0;
	for ( i in array )
	{
		c = c + 1;
	}
	return  = c;	
    }
    return = c1;
}
class Vector
{
    X : double;
    Y : double;
    Z : double;
    
    constructor ByCoordinates( x : double, y : double, z : double )
    {
        X = x;
	Y = y;
	Z = z;
    }    
}
class Point
{
    X : double;
    Y : double;
    Z : double;
    
    constructor ByCartesianCoordinates( x : double, y : double, z : double )
    {
        X = x;
	Y = y;
	Z = z;
    }   
    
    def DistanceTo( p2:Point )
    {
        start_x = X - p2.X;
	return = start_x;
    }
    
    def DirectionTo( p2:Point )
    {
        start_x = X - p2.X;
	start_y = Y - p2.Y;
	start_z = Z - p2.Z;
	return = Vector.ByCoordinates( start_x, start_y, start_z );
    }
    
    def Project( v1:Vector, distance : double )
    {
        start_x = X - v1.X + distance;
	start_y = Y - v1.Y + distance;
	start_z = Z - v1.Z + distance;
	return = Point.ByCartesianCoordinates( start_x, start_y, start_z );
    }
    
    def Translate( x1 : double, y1 : double, z1 : double )
    {
    	return = Point.ByCartesianCoordinates( X + x1, Y + y1, Z + z1 );
    }
}
class Line extends BSplineCurve
{
    StartPoint : Point;
    EndPoint : Point;
    Color : double; 
    Length : double;
    
    constructor ByStartPointEndPoint( p1 : Point, p2 :Point )
    {
        StartPoint = p1;
	EndPoint = p2;
	Length  = 1;
    }
    
    def PointAtParameter(  v : double )
    {
        start_x = StartPoint.X * v;
	start_y = StartPoint.Y * v;
	start_z = StartPoint.Z * v;
	p1_temp = Point.ByCartesianCoordinates( start_x, start_y, start_z );
	
	return = p1_temp;
    }
    
    def Trim ( params : double[], retain : bool )
    {
        start_x = StartPoint.X * params[0];
	start_y = StartPoint.Y * params[0];
	start_z = StartPoint.Z * params[0];
	
	end_x = EndPoint.X * params[1];
	end_y = EndPoint.Y * params[1];
	end_z = EndPoint.Z * params[1];
	
	p1_temp = Point.ByCartesianCoordinates( start_x, start_y, start_z );
	p2_temp = Point.ByCartesianCoordinates( end_x, end_y, end_z );
	
	new_trimmed_line = Line.ByStartPointEndPoint( p1_temp, p2_temp );
	return = new_trimmed_line;
    }
    
    def Trim ( v : double )
    {
        x_temp = EndPoint.X * v;
	p2_temp = Point.ByCartesianCoordinates( x_temp, EndPoint.Y, EndPoint.Z );
	new_trimmed_line = Line.ByStartPointEndPoint(StartPoint, p2_temp );
	return = new_trimmed_line;
    }
    
    def ExtrudeAsSurface( l1 : double, v1: Vector)
    {
        return = BSplineSurface.ByPoints( { { StartPoint, Point.ByCartesianCoordinates(l1,l1,l1)}, {EndPoint, Point.ByCartesianCoordinates(v1.X,v1.Y,v1.Z) } } );
    }
    
    
}
class Solid
{
    StartPoint : Point;
    EndPoint : Point;       
    R1 : double;
    R2 : double;
    
    constructor Cone( p1 : Point, p2 :Point , r1 : double, r2 : double)
    {
        StartPoint = p1;
	EndPoint = p2;
	R1 = r1;
	R2 = r2;
    }   
}
class Tube
{
    StartPoint : Point;
    EndPoint : Point;        
    R1 : double;
    R2 : double;
    
    constructor ByStartPointEndPointRadius( p1 : Point, p2 :Point , r1 : double, r2 : double)
    {
        StartPoint = p1;
	EndPoint = p2;
	R1 = r1;
	R2 = r2;
    }   
}
class BSplineSurface
{
    P1 : Point[]..[];
    
    constructor ByPoints( p1 : Point[]..[] )
    {
        P1 = p1;
    }
}
class BSplineCurve
{
    P1 : Point[];
    
    constructor ByPoints( p1 : Point[] )
    {
        P1 = p1;
    }   
    def Project(s1: BSplineSurface , v1 : Vector)
    {
        return = BSplineCurve.ByPoints( { s1.P1[0][0], s1.P1[1][1], Point.ByCartesianCoordinates ( v1.X, v1.Y, v1.Z ) } );
    }
}
class Circle extends BSplineCurve
{
    P : Point[];
    
    constructor ByPointsOnCurve( p1 : Point[] )
    {
        P = p1;
    }    
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1686_T001_implicit_programming_Robert()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"// no paradigm specified, so assume associative
// some associative code ....
a = 10;
b = a*2;
a = a +1; 	// expanded modifier, therefore the statement on line 7 is calculated after the statement on line 6 is excuted
c = 0;
//some imperative code ....
if (a>10) 	// implicit switch to imperative paradigm
{
	c = b; 	// so statements are treated in lexical order, therefore the statement on line 13
	b=b/2;	// is executed before the statement on line 14 [as would be expected]
}
else
{
	[Associative] 	// explicit switch to associative paradigm [overrides the imperative paradigm]
	{
		c = b;    	// c references the final state of b, therefore [because we are in an associative paradigm] 
		b = b*2;	// the statement on line 21 is executed before the statement on line 20
	}
}
// some more associative code ....
a = a + 2;	// I am assuming that this statement (on line 27) is executed after the if..else has been evaluated and executed, because...
			// effectively, when a imperative block is nested within an associative block, lexical order plays a role
			// in that the execution order is:
			//			the part of the associative graph before the imperative block
			//			the imperative block
			//			the part of the associative graph after the imperative block
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1687_T001_implicit_programming_Robert_2()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"// no paradigm specified, so assume associative
// some associative code ....
a = 10;
b = a*2;
a = a +1; 	// expanded modifier, therefore the statement on line 7 is calculated after the statement on line 6 is excuted
c = 0;
//some imperative code ....
[Imperative]
{
	if (a>10) 	// explicit switch to imperative paradigm
	{
		c = b; 	// so statements are treated in lexical order, therefore the statement on line 13
		b=b/2;	// is executed before the statement on line 14 [as would be expected]
	}
	else
	{
		[Associative] 	// explicit switch to associative paradigm [overrides the imperative paradigm]
		{
			c = b;    	// c references the final state of b, therefore [because we are in an associative paradigm] 
			b = b*2;	// the statement on line 21 is executed before the statement on line 20
		}
	}
}
// some more associative code ....
a = a + 2;	// I am assuming that this statement (on line 27) is executed after the if..else has been evaluated and executed, because...
			// effectively, when a imperative block is nested within an associative block, lexical order plays a role
			// in that the execution order is:
			//			the part of the associative graph before the imperative block
			//			the imperative block
			//			the part of the associative graph after the imperative block
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1688_T002_limits_to_replication_1_Robert()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"a = 0..10..2; 
b = a>5? 0:1; 
[Imperative]
{
	c = a * 2; // replication within an imperative block [OK?]
	d = a > 5 ? 0:1; // in-line conditional.. operates on a collection [inside an imperative block, OK?]
	if( c[2] > 4 ) x = 10; // if statement evaluates a single term [OK]
	
	if( c > 4 ) // but... replication within a regular 'if..else' any support for this?
	{
		y = 1;
	}
	else
	{
		y = -1;
	}
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1689_T003_modifying_members_of_a_collection_abstract_1_Robert()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"a = #{
	2 => a@init;
    +4;
    -3;                                
}
/*a =
	{
		{1,2,3,4};
		//{a[0], a[-1]} -5; // modify selected members [question: can we refer to 'a' in this way inside its own modifier block?]
		+10 // this modification applies to the whole collection
	}
	
b = a + 1; // use the complete 'a' collection 'downstream'
	
// option 2: embed the selective modification of members of a collection within the modifier block of that collection
//           using a right assign variable to identify the state of the cellection from which to select the members to modify
a =
	{
		{1,2,3,4} => a@initial; // identify the initial state to modify
		{a@initial[0], a@initial[-1] -5;  // modify selected members [question: can we refer to 'a@initial' in this way 
											// inside the modifier block where the right assigned variable was created?]
		+10 // this modification applies to the whole collection
	}
	
b = a + 1; // use the complete 'a' collection 'downstream'
// option 3: make an alias from members of a collection to be modified
a =
	{
		{1,2,3,4};
		+10 // this modification applies to the whole collection
	}
cornerA <=> {a[0], a[-1]}; // create alias from members of the 'a' collection
cornerA =
	{
		-5;  // alias applies to the final state of 'a'
	}
	
b = a + 1; // use the complete 'a' collection 'downstream'
	
// option 4: make an alias from a right assigned variable (defining an intermediate state of the original modifier block)
a =
	{
		{1,2,3,4} => a@initial; // identify the initial state to modify
		+10 // this modification applies to the whole collection
	}
	
// create an alias from right assigned variable (defining an intermediate state of the original modifier block)
cornerA <=> {a@initial[0], a@initial[-1]}; 
cornerA =
	{
		-5;  // alias applies to an intermediate state of 'a'
	}
	
b = a + 1; // use the complete 'a' collection 'downstream'
// option 5: direct 'long hand' modification of members of a collection
a =
	{
		{1,2,3,4} => a@initial; // identify the initial state to modify
		+10 // this modification applies to the whole collection
	}
	
// directly modify members of the collection
{a[0], a[-1]} = {a[0], a[-1]} -5;
	
b = a + 1; // use the complete 'a' collection 'downstream'
// option 6: semi-direct 'long hand' modification of members of a collection using an alias
a =
	{
		{1,2,3,4} => a@initial; // identify the initial state to modify
		+10 // this modification applies to the whole collection
	}
	
// create an alias from right assigned variable (defining an intermediate state of the original modifier block)
cornerA <=> {a@initial[0], a@initial[-1]}; 
cornerA = cornerA -5;  // alias applies to an intermediate state of 'a'
	
b = a + 1; // use the complete 'a' collection 'downstream'
*/";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1690_T004_simple_order_1_Robert()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"a1 = 10;        // =1
b1 = 20;        // =1
a2 = a1 + b1;   // =3
b2 = b1 + a2;   // =3
b  = b2 + 2;    // 5
a  = a2 + b;    // 6";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1691_T005_modifiers_with_right_assignments_Robert()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"a = 
    {
        10     => @a1 ;  // =1
        + @b1  => @a2;   // =3
        + b ;            // 6 
    }            
    
b = 
    {
        20     => @b1;   // =1
        + @a2  => @b2 ;  // =3
        + 2 ;            // 5
    }";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1692_T006_grouped_1_Robert()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"a1 = 10;        // =1
a2 = a1 + b1;   // =3
a  = a2 + b;    // 6    
    
b1 = 20;        // =1
b2 = b1 + a2;   // =3
b  = b2 + 2;    // 5";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1693_T007_surface_trimmed_with_modifier_and_named_states_Robert()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class BSplineSurface
{
    x : double;
	constructor ByControlVertices( a : double)
	{
	    x = a;
	}
	def Trim ( a1 : BSplineSurface, p1 : Point )
	{
	    temp = a1.x + p1.x;
		n1 = BSplineSurface.ByControlVertices( temp);
		return = n1;
	}
	def AtParameter ( x1 : double, y1 : double )
	{
	    temp = x + x1 + y1;
		n1 = Point.ByCartesianCoordinates ( temp );
		return = n1;
	}
}
class Point
{
    x : double;
	constructor ByCartesianCoordinates( a : double)
	{
	    x = a;
	}	
}
a = 1;
b = 2;
mySurface = 
    {
        BSplineSurface.ByControlVertices ( a ) => mySurface@initial ; // built with some 2D array of points
        Trim(cuttingSurface, samplePoint) ;
    }
    
cuttingSurface = BSplineSurface.ByControlVertices ( b ); // built with another 2D array of points
samplePoint    = mySurface@initial.AtParameter( 0.5, 0.5 );
test = mySurface.x; //expected : 4
// sample points is created using the first state of mySurface [mySurface@initial]
// and then it used in creating the second (and final) state of mySurface";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1694_T008_long_hand_surface_trim_Robert()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class BSplineSurface
{
    x : double;
	constructor ByControlVertices( a : double)
	{
	    x = a;
	}
	def Trim ( a1 : BSplineSurface, p1 : Point )
	{
	    temp = a1.x + p1.x;
		n1 = BSplineSurface.ByControlVertices( temp);
		return = n1;
	}
	def AtParameter ( x1 : double, y1 : double )
	{
	    temp = x + x1 + y1;
		n1 = Point.ByCartesianCoordinates ( temp );
		return = n1;
	}
}
class Point
{
    x : double;
	constructor ByCartesianCoordinates( a : double)
	{
	    x = a;
	}	
}
a = 1;
b = 2;
//initialSurface = BSplineSurface.ByControlVertices ( a ) => mySurface@initial // built with some 2D array of points
initialSurface = BSplineSurface.ByControlVertices ( a );
mySurface@initial = initialSurface;
cuttingSurface = BSplineSurface.ByControlVertices ( b );          // built with another 2D array of points
samplePoint    = mySurface@initial.AtParameter( 0.5, 0.5 );    // built using the initialSurface
trimmedSurface = initialSurface.Trim(cuttingSurface, samplePoint) ;  // now use the samplePoint in the triming
                                                                    // but create a new variable..trimmedSurface
test = trimmedSurface.x;
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1695_T009_modifier_test_1_Robert()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"x = {10,20};
x[0] = x[0] +1;     // this works x = {11, 20}
// now let's try the same type of construct using the modifier block syntax
y = { 
        {50, 60} ;   // initial definition
         + 1 ;       // is this the correct syntax for modifying all members of a collection
         y[0] + 1 ;  // is this the correct syntax for modifying   a member  of a collection
    }";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1696_T010_imperative_if_inside_for_loop_1_Robert()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"x;
[Imperative]
{
	x = 0;
	
	for ( i in 1..10..2)
	{
		x = i;
		if(i>5) x = i*2; // tis is ignored
		// if(i<5) x = i*2; // this causes a crash
	}
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1697_T011_Cyclic_Dependency_From_Geometry()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"import(""GeometryLibForLanguageTesting.ds"");
pt1a = Point.ByCartesianCoordinates( 0,0,0);
pt2a = Point.ByCartesianCoordinates( 5,0,0);
testBSNP = BSplineCurve.ByPoints({pt1a,pt2a});
testCurves = {testBSNP } ;//testArc, testCircle};
surfaceLine = Line.ByStartPointEndPoint(Point.ByCartesianCoordinates(-30,60,-30),Point.ByCartesianCoordinates(-30,-20,-30));
surfLength = 60;
surf = surfaceLine.ExtrudeAsSurface(surfLength,Vector.ByCoordinates(1.0, 0.0, 0.0));
projectVector = Vector.ByCoordinates(0,0,-1);
projectedCurve = testCurves.Project(surf,projectVector); //V0
test = projectedCurve.P1[0].X;
surfLength = 35; 
projectVector = Vector.ByCoordinates(5.0,0,-1);";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(importpath, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1698_T012_property_test_on_collections_2_Robert()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"import (""GeometryLibForLanguageTesting.ds"");
line1 = Line.ByStartPointEndPoint(Point.ByCartesianCoordinates(5.0 , 5.0, 0.0), Point.ByCartesianCoordinates(10.0 , 5.0, 0.0));
line2 = Line.ByStartPointEndPoint(Point.ByCartesianCoordinates(5.0 , {7.5, 10.0}, 0.0), Point.ByCartesianCoordinates(10.0 ,10.0, 0.0));
line1.Color = 0.0;
t1= line1.Color;
line2.Color = 1.0; // can't assign to a writable property if it is collection.. is this a replication issue?
t2= line2.Color;";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(importpath, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1699_T013_nested_programming_blocks_1_Robert()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"import (""GeometryLibForLanguageTesting.ds"");
controlPoint = Point.ByCartesianCoordinates(0, 7.5, 0);
internalLine :Line  = null; // define some variables
pointOnCurve : Point[] = null;
testLine : Line []     = null;
totalLength = 0;
i = 5;
[Imperative]
{
	while ( i <= 7 )//(totalLength < 5.0 ) 
	{
		[Associative] // within that loop build an associative model
		{
			startPoint   = Point.ByCartesianCoordinates(i, 5, 0);
			endPoint     = Point.ByCartesianCoordinates(5, 10, 0);
			internalLine = Line.ByStartPointEndPoint(startPoint, endPoint);
			pointOnCurve = internalLine.PointAtParameter(0.2..0.8..0.2);
			[Imperative] // within the associative model start some imperative scripting
			{
				for (j in 0..(Count(pointOnCurve)-1)) // iterate over the points
				{
					if(j%2==0) // consider every alternate point
					{
						pointOnCurve[j] = pointOnCurve[j].Translate(1,1,1); // actual : ( 0,0,1) modify by translation
					}
				}
			}
			// continue with more assocative modelling
			
			testLine     = Line.ByStartPointEndPoint(controlPoint, pointOnCurve);
			totalLength  = totalLength + Sum (testLine.Length);
		}
		i = i + 1; // increment i
	}
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(importpath, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1700_Comments_1467117()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"/*
/*
*/
a=5;";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1701_Comments_1467117_1()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"/*
/*
*/
*/
a=1;
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1702_Comments_Basic()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"/*
WCS=CoordinateSystem.Identity();
p2 = Point.ByCoordinates(0,0,0);
*/
a=5;";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1703_Comments_Negative()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"/*
WCS=CoordinateSystem.Identity();
p2 = Point.ByCoordinates(0,0,0);
*/
/*
import(""ProtoGeometry.dll"");
WCS=CoordinateSystem.Identity();
p2 = Point.ByCoordinates(0,0,0);";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1704_Comments_Nested()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"/*
WCS=CoordinateSystem.Identity();
/*
p2 = Point.ByCoordinates(0,0,0);
*/
*/
import(""ProtoGeometry.dll"");
WCS=CoordinateSystem.Identity();
p2 = Point.ByCoordinates(0,0,0);";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1705_CompilationErrorExpected()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"[Associative]
{
    a = 1
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1706_DemoSupportFiles()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class Point
{
	X : var;
	Y : var;
	Z : var;
	
    constructor ByCoordinates(x : double, y : double, z : double)
    {
	
		X = x;
		Y = y;
		Z = z;
    }
	
	def MidValue : double[]()
	{
		return = {X/2.0, Y/2.0, Z/2.0};
	}
}
class Tube
{
	
	StartPoint : var;
	EndPoint : var;
	Radius : var;
	id : var;
	
	constructor ByPointsRadius(startPt : Point, endPt : Point, rad : double)
	{
		StartPoint = startPt;
		EndPoint = endPt;
		Radius = rad;
	}
}
class Line
{
	StartPoint: Point;
	EndPoint: Point;
	constructor ByStartPointEndPoint (startPoint : Point, endPoint : Point)
	
	{
		StartPoint = startPoint;
		EndPoint = endPoint;
	}
}
//  function to scale arrays with some scaling factor
//  this is temp workaround till we get some good replication support
//
def Scale (arr : double[], scalingFactor : double)
{
    scaledArr = [Imperative]
    {
        counter = 0;
        for(val in arr)
        {
            arr[counter] = scalingFactor * val;
            counter = counter + 1;
        }
        return = arr;
    }
    return = scaledArr;
}
def Count : int(inputArray : var[])
{
	numberOfItemsInArray = [Imperative]
	{
		index = 0;
		for (item in inputArray)
		{
			index = index + 1;
		}
		
		return = index;
	}
	
	return = numberOfItemsInArray;
}
//  this generates a 10 by 10 matrix
def Create1DArray(numberOfItemInArray : int)
    {
        stepSize = 10.0/(numberOfItemInArray-1);
        return = 0.0..10.0..stepSize;
    }
	
def Create2DArray(rows : int, columns : int)
    {
   result = [Imperative]
       {
       temp = Create1DArray(rows);
       counter = 0;
       while( counter < rows)
       {
           temp[counter] = Create1DArray(columns); //Replace each row from a sington to a collection (columns)
           counter = counter + 1;
       }
       return = temp;
       }
    return = result;
}
//  this is drop in replacement for replication guides
//  equivalent to:
//
//      mat = row<1> * col<2>
//
def CollectionCartesianProduct(row : double[], col : double[])
{
    result = [Imperative]
    {
        mat = Create2DArray(Count(row),Count(col));
        xcounter = 0;
        for(val1 in row)
        {
            ycounter = 0;
            for(val2 in col)
            {
                mat[xcounter][ycounter] = val1 * val2;
                ycounter = ycounter + 1;
            }
            xcounter = xcounter + 1;
        }
        
        return = mat;
    }
    return = result;
}
// Zip on 2 dimensional array. 
def CollectionZipAddition(mat1 : double[][], mat2 : double[][])
{
    sum = [Imperative]
    {
		row = Count(mat1);
		column = Count(mat1[0]);
        matc = Create2DArray(row, column);
        
        xcounter = 0;        
        while(xcounter < row )
        {
            ycounter = 0;
            while(ycounter < column )
            {
                matc[xcounter][ycounter] = mat1[xcounter][ycounter] + mat2[xcounter][ycounter];
                ycounter = ycounter + 1;
            }
            xcounter = xcounter + 1;
        }
        
        return = matc;
    }
    
    return = sum;
}
def CreatePoints : Point[]..[] (xs : double[], ys : double[], zs : double[][])
{
    retVal = [Imperative]
    {
		row = Count(xs);
		column = Count(ys);
		pts = Create2DArray(row, column);
        //  now create 2d array of points
        //
        xidx = 0;
        for(x in xs)
        {
            yidx = 0;
            for(y in ys)
            {
                pts[xidx][yidx] = Point.ByCoordinates(x, y, zs[xidx][yidx]);
                yidx = yidx + 1;
            }
            xidx = xidx + 1;
        }
        
        return = pts;
    }
    
    return = retVal;
}
def GenerateRoofBase (pts : Point[][])
{
		
	
	roof = [Imperative]
	{
		radius = 0.03;
		
		row = Count(pts);
		column = Count(pts[0]);
		linesVertical = Create2DArray(row, column-1);
		
        xidx = 0;
        while(xidx <= row-1)
        {
            yidx = 0;
            while(yidx <= column-2)
            {
                linesVertical[xidx][yidx] = Tube.ByPointsRadius(pts[xidx][yidx],pts[xidx][yidx+1], radius);
                yidx = yidx + 1;
            }
            xidx = xidx + 1;
        }
		
		
		linesHorizontal = Create2DArray(row-1, column);
		xidx = 0;
        while(xidx <= row-2)
        {
            yidx = 0;
            while(yidx <= column-1)
            {
                linesHorizontal[xidx][yidx] = Tube.ByPointsRadius(pts[xidx][yidx],pts[xidx+1][yidx], radius);
                yidx = yidx + 1;
            }
            xidx = xidx + 1;
        }
		
		return = {linesHorizontal, linesVertical};
	}
	
	return = roof;
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1707_Demo_SinWave_WithoutGeometry()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"import (""DemoSupportFiles.ds"");
import(""DSCoreNodes.dll"");
// dimensions of the roof in each direction
//
xSize = 2;//10;
ySize = 6;//30;
// number of Waves in each direction
//
xWaves = 1;
yWaves = 1;
// number of points per Wave in each direction\
//
xPointsPerWave = 2;//10;
yPointsPerWave = 2;//10;
// amplitudes of the frequencies (z dimension)
//
lowFrequencyAmpitude  = 1.0; // only ever a single low frequency wave
highFrequencyAmpitude = 0.75; // user controls the number and amplitude of high frequency waves 
// dimensions of the beams
//
radius = 0.1;
roofWallHeight    = 0.3; // not used
roofWallThickness = 0.1; // not used
// calculate how many 180 degree cycles we need for the Waves
//
x180ToUse = xWaves==1?xWaves:(xWaves*2)-1;
y180ToUse = yWaves==1?yWaves:(yWaves*2)-1;
// count of total number of points in each direction
//
xCount = xPointsPerWave*xWaves;
yCount = yPointsPerWave*yWaves;
highX = 180*x180ToUse;
highY = 180*y180ToUse;
def CreateRangeWithDefinedNumber (start : double, end : double, number: int)
{
	stepsize = (end - start)/(number-1);
	return = start..end..stepsize;
}
//highRangeX = 0.0..highX..#xCount;
//lowRangeX = 0.0..180.0..#xCount;
//highRangeY = 0.0..highY..#yCount;
//lowRangeY = 0.0..180.0..#yCount;
highRangeX = CreateRangeWithDefinedNumber(0.0, highX, xCount);
lowRangeX = CreateRangeWithDefinedNumber(0.0, 180.0, xCount);
highRangeY = CreateRangeWithDefinedNumber(0.0, highY, yCount);
lowRangeY = CreateRangeWithDefinedNumber(0.0, 180.0, yCount);
sinHighRangeX = Math.Sin(highRangeX);
sinHighRangeY = Math.Sin(highRangeY);
xHighFrequency = Scale(sinHighRangeX, highFrequencyAmpitude);
yHighFrequency = Scale(sinHighRangeY, highFrequencyAmpitude);
//equivalent to:
//  xLowFrequency  = sin(-5..185..#xCount)*lowFrequencyAmpitude;
//  yLowFrequency  = sin(-5..185..#yCount)*lowFrequencyAmpitude;
//
sinLowRangeX = Math.Sin(lowRangeX);
sinLowRangeY = Math.Sin(lowRangeY);
xLowFrequency = Scale(sinLowRangeX, lowFrequencyAmpitude);
yLowFrequency = Scale(sinLowRangeY, lowFrequencyAmpitude);
// lowAmpitude is the cartesian product of xLowFrequency multiplied by yLowFrequency
//  equivalent to:
//  lowAmplitude = xLowFrequency<1> * yLowFrequency<2>;
//
lowAmplitude = CollectionCartesianProduct(xLowFrequency, yLowFrequency);
// lowAmplitude is the cartesian product of xLowFrequency multiplied by yLowFrequency
//  equivalent to:
//  highAmplitude = xHighFrequency<1> * yHighFrequency<2>;
//
highAmplitude = CollectionCartesianProduct(xHighFrequency, yHighFrequency);
// Ampitude in y is the zipped collection of the high frequency + low frequency
//
//  equivalent to:
//  amplitude = highAmplitude + lowAmplitude;
//
amplitude = CollectionZipAddition(highAmplitude, lowAmplitude);
//  x = 0..xSize..#xCount; --> this evaluates to 10 elements
x = 0.0..xSize..#xCount;
y = 0.0..ySize..#yCount;  //  actually this evalutes to 30 but to keep life simple i am keeping it at 10
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1708_DynamicReferenceResolving_Complex_Case()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class A
{
}
class B extends A
{
	k : var;
	
	constructor B(){}
	constructor B(p:int)
	{
		k = C.C(p);
	}
	
	def foo1:int(m:int[], t : int = 4)
	{
		return = m[0] + t;
	}
}
class C
{
	m : var;
	constructor C(){}
	constructor C(p:int)
	{
		m = {p*1, p*2, p*3};
	}
}
def foo : A()
{
	return = B.B(1);
}
def foo2 : int(b:A)
{
	return = b.foo1(b.k.m); 	//warning. will try to find foo1 at runtime. If b happends to be of type B, then it will find foo1.
}
t = foo();	// Type is recognized as A, actual type is B
tm = t.k.m;	// k does not exist in A, unbound identifier warning; tm = {1, 2, 3}
testFoo1 = t.foo1(tm); // foo1 does not exist in A, function not found warning; testFoo1 = 5;
b1 = B.B(2);
testInFunction1 = foo2(b1); //testInFunction1 = 6;
b2 = B.B(3);
testInFunction2 = foo2(b2); //testInFunction2 = 7;
[Imperative]
{
	it = foo();	// Type is recognized as A, actual type is B
	itm = it.k.m;	// k does not exist in A, unbound identifier warning; tm = {1, 2, 3}
	itestFoo1 = it.foo1(itm); // foo1 does not exist in A, function not found warning; testFoo1 = 5;
	ib1 = B.B(2);
	itestInFunction1 = foo2(ib1); //testInFunction1 = 6;
	ib2 = B.B(3);
	itestInFunction2 = foo2(ib2); //testInFunction2 = 7;
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1709_DynamicReference_FunctionCall()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class A
{
}
class B extends A
{	
	def foo1:int(t : int)
	{
		return = t;
	}
}
def foo : A()
{
	return = B.B();
}
t = foo();	// Type is recognized as A, actual type is B
testFoo1 = t.foo1(6); // foo1 does not exist in A, function not found warning; testFoo1 = 6;";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1710_DynamicReference_FunctionCall_With_Default_Arg()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class A
{
}
class B extends A
{	
	def foo:int(t : int = 4)
	{
		return = t;
	}
}
def afoo : A()
{
	return = B.B();
}
t = afoo();	// Type is recognized as A, actual type is B
testFoo1 = t.foo(6); // foo1 does not exist in A, function not found warning; testFoo1 =6;
testFoo2 = t.foo(); // foo1 does not exist in A, function not found warning; testFoo2 =4;";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1711_DynamicReference_Variable()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class A
{
}
class B extends A
{	
	k : var;
	constructor B(x : int)
	{
		k = x;
	}
}
def foo : A(x:int)
{
	return = B.B(x);
}
t = foo(3);
kk = t.k;";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1712_error_LineNumber()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @" class A
                {
	                x : var;
	                y : var;
	                z : var;
	
	                constructor A()
	                {
		                x = B.B(20, 30);
		                y = 10;
		                z = { B.B(40, 50), B.B(60, 70), B.B(80, 90) };
	                }
                }
                class B
                {
	                m : var;
	                n : var;
	
	                constructor B(_m : int, _n : int)
	                {
		                m = _m;
		                n = _n;
	                }
                }
	            a = A.A();
	            b = B.B(1, 2);
	            c = { B.B(-1, -2), B.B(-3, -4) };
	            a.z[-2] = b;
	            watch1 = a.z[-2].n; // 2
	          ";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1713_error_LineNumber_2()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"a=b;";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1714_Fibonacci()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"[Imperative]
{
    def fibonacci_recursive:int(number : int)
    {
        if( number < 2)
        {
            return = 1;
        }
        return = fibonacci_recursive(number-1) + fibonacci_recursive(number -2);
    }
    
    def fibonacci_iterative:int(number : int)
    {
        one = 0;
        two = 1;
       counter = 1;
        
        while( counter <= number )
        {
            temp = one + two;
            one = two;
            two = temp;
            
            //    now increment the counter
            counter = counter + 1;
        }
        
        return = two;
    }
    fib10_r = fibonacci_recursive(20);
    fib10_i = fibonacci_iterative(20);
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1715_FunctionCall_With_Default_Arg()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"def foo:int(t : int = 4)
	{
		return = t;
	}
	// Type is recognized as A, actual type is B
testFoo1 = foo(6); // foo1 does not exist in A, function not found warning; testFoo1 =6;
testFoo2 = foo();";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1716_GarbageCollection_1467148()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class B
{
    value : int;
    constructor B (b : int)
    {
		 value = b;
    }
}
class A
{
    a1 : var;
    constructor A ( b1 : int)
    {                
         a1 = b1;
    } 
    def foo( arr : B[])  
    {  
         return = arr.value;  
    }
} 
arr = { B.B(1), B.B(2), B.B(3), B.B(4) }; 
q = A.A( {6,7,8,9} );
t = q.foo(arr);
n = Count(arr);
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1717_imperative_Replication_1467070()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"[Imperative]
{
        def test (i:int)
        {
                local = {};
                for(j in i)
                {
                        local[j] = j;
                        
                }
                return = local;
        }
a={3,4,5};
        t = test(a);
return = t;
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1718_imperative_Replication_1467070_2()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"[Imperative]
{
        def CreateArray ( x : var[] , i )
        {
        
                x[i] = i;
                return = x;
        }
        test = { };
         z=0..5;
         for (i in z)
         {
                test[i] = CreateArray ( test, z );
            
        }
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1719_SquareRoot()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"sqrt_10;
sqrt_20;
[Imperative]
{
    def abs : double( val : double )
    {
        if( val < 0 )
        {
            return = -1 * val;
        }
        return = val;
    }
    
    //    this is famous as the first ever algo to evaluate
    //    square-root - also known as Babylonian algo
    //    developed by Heron and coded by Sarang :)
    //    
    def sqrt_heron : double ( val : double )
    {
        counter = 0;
        temp_cur = val / 2.0;
        temp_pre = temp_cur - 1.0;
        abs_diff = abs(temp_cur - temp_pre);
        tolerance = 0.00001;
        max_iterations = 100;
        
        while( abs_diff > tolerance && counter < max_iterations )
        {
            temp_pre = temp_cur;
            temp_cur = 0.5 * (temp_cur + val / temp_cur );
            
            abs_diff = abs(temp_cur - temp_pre);
            counter = counter + 1;
        }
        
        return = temp_cur;
    }
    
    def sqrt : double ( val : double )
    {
        return = sqrt_heron( val);
    }
    
    sqrt_10 = sqrt(10.0);
    sqrt_20 = sqrt(20.0);
 
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1720_Use_Keyword_Array_1463672()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"def Create2DArray( col : int)
{
	result = [Imperative]
    {
		array = { 1, 2 };
		counter = 0;
		while( counter < col)
		{
			array[counter] = { 1, 2};
			counter = counter + 1;
		}
		return = array;
	}
    return = result;
}
x = Create2DArray( 2) ;";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1721_Regress_1452951()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"x;
[Associative]
{
	a = { 4,5 };
   
	[Imperative]
	{
	       //a = { 4,5 }; // works fine
		x = 0;
		for( y in a )
		{
			x = x + y;
		}
	}
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1722_Regress_1454511()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"x;
[Imperative]
{
	x = 0;
	
	for ( i in b )
	{
		x = x + 1;
	}
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1723_Regress_1454692()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"x;
y;
[Imperative]
{
	x = 0;
	b = 0..3; //{ 0, 1, 2, 3 }
	for( y in b )
	{
		x = y + x;
	}
	
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1724_Regress_1454692_2()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"def length : int (pts : double[])
{
    numPts = [Imperative]
    {
        counter = 0;
        for(pt in pts)
        {
            counter = counter + 1;
        }
        
        return = counter;
    }
    return = numPts;
}
    
arr = 0.0..3.0;//{0.0,1.0,2.0,3.0};
num = length(arr);";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1725_Regress_1454918_1()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"d;
[Associative] // expected 2.5
{
	 def Divide : double (a:int, b:int)
	 {
	  return = a/b;
	 }
	 d = Divide (5,2);
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1726_Regress_1454918_2()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"d;
[Associative] // expected error
{
	 def foo : int (a:double)
	 {
		  return = a;
	 }
	 d = foo (5.5);
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1727_Regress_1454918_3()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"d;
[Associative] // expected d = 5.0
{
	 def foo : double (a:double)
	 {
		  return = a;
	 }
	 d = foo (5.0);
} ";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1728_Regress_1454918_4()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"d;
[Associative] // expected error
{
	 def foo : double (a:bool)
	 {
		  return = a;
	 }
	 d = foo (true);
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1729_Regress_1454918_5()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"d;
class A
{
	a : var;
	constructor CreateA ( a1 : int )
	{
		a = a1;
	}
	
}
[Associative] 
{
	 def foo : int (a : A)
	 {
             return = a;
	 }
	 a1 = A.CreateA(1);
	 d = foo (a1);
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1730_Regress_1454918_6()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"     def foo : double ()
	 {
		  return = 5;
	 }
	 d = foo ();
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1731_Regress_1454926()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"result;
result2;
[Imperative]
{	 
	 d1 = null;
	 d2 = 0.5;	 
	 result = d1 * d2; 
	 result2 = d1 + d2; 
 
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1732_Regress_1454966()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class A
{
	a : var;
	constructor CreateA ( a1 : int )
	{
		a = a1;
	}	
}
a1;
[Associative]
{	
	a1 = A.CreateA(1).a;	
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1733_Regress_1454966_10()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class A
{
a : var[];
constructor A ( b : int )
{
a = { b, b, b };
}
}
t1;
[Imperative]
{
	x = { 1, 2, 3 };
	//a1 = A.A( x ).a; // error here
	a2 = A.A( x );
	t1 = a2[0].a[0];
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1734_Regress_1454966_2()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class A
{
    a : var;
	constructor A ( i : int)
	{
	    a = i;
	}
}
def create:A( b )
{
    a = A.A(b);
	return = a;
}
x = create(3).a;
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1735_Regress_1454966_3()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class A
{    
	a : var[];    
	constructor A ( b : int )    
	{        
		a = { b, b, b };    
	}		
	
}
[Imperative]
{
	x = { 1, 2, 3 };
	a1 = A.A( x ).a;
	a2 = A.A( x );
	t1 = a2[0].a[0];
	t2 = a2[1].a[1];
	t3 = a2[2].a[2];
	a3 = a2[0].a[0] + a2[1].a[1] +a2[2].a[2];
	
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1736_Regress_1454966_4()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class Test
{
 A: double[];
       
  constructor Test (a : double[])
 {
  A = a;
 
 }
}
 value = Test.Test ({1.3,3.0,5.0});
 value2 = Test.Test (1.3);
 getval= value.A;";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1737_Regress_1454966_5()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class Test
{
 A : double[];
       
  constructor Test (a : double[])
 {
  A = a;
 
 }
}
 value = Test.Test ({1.3,3.0,5.0});
 getval= value.A;
 getval2= value.A[0];
 b=1;
 getval3= value.A[b];
 b=2;
 getval4= value.A[b];
 b=-1;
 getval5= value.A[b];";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1738_Regress_1454966_6()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class Test
{
 A : double;
       
  constructor Test (a : double)
 {
  A = a;
 
 }
};
 value = Test.Test (1.3);
def call:double(b:Test)
{
 getval= b.A;
 return= getval;
 }
c= call(value);";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1739_Regress_1454966_7()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class Test
{
 A : double;
       
 constructor Test (a : double)
 {
  A = a;
 
 }
};
a1;
[Imperative]
{	
	d = { 1,2,3 };	
	val={0,0,0};
	j = 0;	
	for( i in d )	
	{		
	    val[j]=Test.Test(i).A;
	    j = j + 1;	
	}	
	a1 = val;	
	
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1740_Regress_1454966_8()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class A
{ 
	x : int[];	
	
	constructor A ( i :int[])
	{
		x = i;
       	
	}
 
	public def foo ()
	{
	    return = x;
	}
}
class B
{ 
	public x : A[] ;	
	
	constructor B (i:A[])
	{
		x = i;
       
	}
 
	public def foo ()
	{
	    return = x;
	}	
	
}
x = { 1, 2, 3 };
y = { 4, 5, 6 };
a1 = A.A(x);
a2 = A.A(y);
b1 = B.B({a1,a2});
t1 = b1.x[0].x[1];
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1741_Regress_1454966_9()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class A
{
a:int;
constructor A ()
{
}
}
class B
{
public x : var ;
constructor B (i)
{
x = i;
}
}
a1 = A.A();
a2 = A.A();
a3 = {a1,a2};
b1 = B.B(a3);
b2=b1[0].x.a;
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1742_Regress_1454980()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"import (""TestImport.ds"");
class Math
{
                //external (""ffi_library"") def dc_sqrt : double (val : double );
                //external (""ffi_library"") def dc_factorial : int (val : int );
           
                constructor GetInstance()
                {}
                
                def Sqrt : double ( val : double )
                {
                                return = dc_sqrt(val);
                }
                def Factorial : int ( val : int )
                {
                                return = dc_factorial(val); //issue is here. the below line will pass
                                //return = dc_factorial(10);
                }
}
                math = Math.GetInstance();
                result = math.Factorial(3);
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1743_Regress_1455158()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"
	class TestPoint
	{
        X : var;
        Y : var;
             
        constructor Create(xx : int, yy : int)
        {
			X = xx; 
            Y = yy;
        }            
        def Modify : TestPoint()
        {
            tempX = X + 1;
            tempY = Y + 1;
            return = TestPoint.Create(tempX, tempY);
        }            
	}
	
	
	pt1 = TestPoint.Create(1, 2);
	pt2 = pt1.Modify();
	x2 = pt2.X;
	y2 = pt2.Y;
	pt3 = pt2.Modify();
	x3 = pt3.X;
	y3 = pt3.Y;
	
	";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1744_Regress_1455276()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class Point
{
    x : var;
    y : var;
    z : var;
    
    public constructor Create(xx : double, yy : double, zz: double)
    {
        x = xx;
        y = yy;
        z = zz;
    }
    
    public def SquaredDistance : double (otherPt : Point)
    {
        //distx = (otherPt.x -x) * (otherPt.x -x);
        distx = (otherPt.x-x);
        distx = distx * distx;
   
        disty = otherPt.y -y;
        //disty = disty * disty;
        
        distz = otherPt.z -z;
        //distz = distz * distz;
                
        return = distx + disty + distz;
    }
}
pt1 = Point.Create(0,0,0);
pt2 = Point.Create(10.0, 0 ,0 );
dist = pt1.SquaredDistance(pt2);";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1745_Regress_1455283()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class MyPoint
    
    {
    
    X: double;
    Y: double;
    
    constructor CreateByXY(x : double, y : double)
        
        
        {
        X = x;
        Y = y;
        
        }   
    }
    
class MyNewPoint extends MyPoint
    {
    
    Z : double;
    
    constructor Create (x: double, y: double, z : double) : base.CreateByXY(x, y)
        {
         Z = z;
        }
    }
   
test = MyNewPoint.Create (10, 20, 30);
x = test.X;
y = test.Y;
z = test.Z;
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1746_Regress_1455283_1()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class B
{ 
	x3 : int ;
		
	constructor B () 
	{	
		x3 = 2;
	}
}
class A extends B
{ 
	x1 : int ;
	x2 : double;
	
	constructor A () : base.B ()
	{	
		x1 = 1; 
		x2 = 1.5;		
	}
}
a1 = A.A();
b1 = a1.x1;
b2 = a1.x2;
b3 = a1.x3;
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1747_Regress_1455291()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class CoordinateSystem
{}
class Vector
{
    public GlobalCoordinates : var;
    public X : var;
    public Y : var;
    public Z : var;
    public Length : var;
    public Normalized : var;
    public ParentCoordinateSystem : var;
    public XLocal : var;
    public YLocal : var;
    public ZLocal : var;
    public constructor ByCoordinates(x : double, y : double, z : double)
    {
        X = x;
        Y = y;
        Z = z;
    }
    
    public constructor ByCoordinates(cs: CoordinateSystem, xLocal : double, yLocal : double, zLocal : double )
    {
        ParentCoordinateSystem = cs;
        XLocal = xLocal;
        YLocal = yLocal;
        ZLocal = zLocal;
    }
    public constructor ByCoordinateArray(coordinates : double[])
    {
        X = coordinates[0];
        Y = coordinates[1];
        Z = coordinates[2];    
    }
    public def Cross : Vector (otherVector : Vector)
    {
        return = Vector.ByCoordinates(
            Y*otherVector.Z - Z*otherVector.Y,
            Z*otherVector.X - X*otherVector.Z,
            X*otherVector.Y - Y*otherVector.X);
    }
}
    a = 5;
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1748_Regress_1455568()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class Tuple4
{
    X : var;
    Y : var;
    Z : var;
    H : var;
    
    constructor XYZH(xValue : double, yValue : double, zValue : double, hValue : double)
    {
        X = xValue;
        Y = yValue;
        Z = zValue;
        H = hValue;        
    }
    
    public def Multiply  (other : Tuple4)
    {
        return = X * other.X + Y * other.Y + Z * other.Z + H * other.H;
    }
}
C0 = Tuple4.XYZH(1.0,0,0,0);
C1 = Tuple4.XYZH(0,1.0,0,0);
C2 = Tuple4.XYZH(0,0,1.0,0);
C3 = Tuple4.XYZH(0,0,0,1.0);
t = Tuple4.XYZH(1,1,1,1);
tx = Tuple4.XYZH(C0.X, C1.X, C2.X, C3.X);
RX = tx.Multiply(t);
ty = Tuple4.XYZH(C0.Y, C1.Y, C2.Y, C3.Y);
RY = ty.Multiply(t);
tz = Tuple4.XYZH(C0.Z, C1.Z, C2.Z, C3.Z);
RZ = tz.Multiply(t);
th = Tuple4.XYZH(C0.H, C1.H, C2.H, C3.H);
RH = th.Multiply(t);
       
result1 =  Tuple4.XYZH(RX, RY, RZ, RH);";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1749_Regress_1455584()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class Tuple4
{
    X : var;
    Y : var;
    Z : var;
    H : var;
    
    constructor XYZH(xValue : double, yValue : double, zValue : double, hValue : double)
    {
        X = xValue;
        Y = yValue;
        Z = zValue;
        H = hValue;        
    }
    
    constructor XYZ(xValue : double, yValue : double, zValue : double)
    {
        X = xValue;
        Y = yValue;
        Z = zValue;
        H = 1.0;        
    }
    constructor ByCoordinates3(coordinates : double[] )
    {
        X = coordinates[0];
        Y = coordinates[1];
        Z = coordinates[2];
        H = 1.0;        
    }
    constructor ByCoordinates4(coordinates : double[] )
    {
        X = coordinates[0];
        Y = coordinates[1];
        Z = coordinates[2];
        H = coordinates[3];    
    }
    
    def get_X : double () 
    {
        return = X;
    }
    
    def get_Y : double () 
    {
        return = Y;
    }
    
    def get_Z : double () 
    {
        return = Z;
    }
    
    def get_H : double () 
    {
        return = H;
    }
    
    public def Multiply : double(other : Tuple4)
    {
        return = X * other.X + Y * other.Y + Z * other.Z + H * other.H;
    }
    
    public def Coordinates3 : double[] ()
    { 
        return = {X, Y, Z };
    }
    
    public def Coordinates4 :double[] () 
    { 
        return = {X, Y, Z, H };
    }
    
    
}
cor1 = {10.0, 10.0, 10.0, 10.0};
cor2 = {10.0, 10.0, 10.0, 10.0};
tuple1 = Tuple4.ByCoordinates4 (cor1);
tuple1 = Tuple4.XYZH (1,1,1,1);
tuple2 = Tuple4.ByCoordinates4 (cor2);
result1 = tuple1.Coordinates4();
result2 = tuple2.Coordinates4();
multiply1 = tuple1.Multiply(tuple2);
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1750_Regress_1455618()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class Tuple4
{
    X : var;
    Y : var;
    Z : var;
    H : var;
    
    constructor XYZH(xValue : double, yValue : double, zValue : double, hValue : double)
    {
        X = xValue;
        Y = yValue;
        Z = zValue;
        H = hValue;        
    }
    
    constructor XYZ(xValue : double, yValue : double, zValue : double)
    {
        X = xValue;
        Y = yValue;
        Z = zValue;
        H = 1.0;        
    }
    constructor ByCoordinates3(coordinates : double[] )
    {
        X = coordinates[0];
        Y = coordinates[1];
        Z = coordinates[2];
        H = 1.0;        
    }
    constructor ByCoordinates4(coordinates : double[] )
    {
        X = coordinates[0];
        Y = coordinates[1];
        Z = coordinates[2];
        H = coordinates[3];    
    }
    
    def get_X : double () 
    {
        return = X;
    }
    
    def get_Y : double () 
    {
        return = Y;
    }
    
    def get_Z : double () 
    {
        return = Z;
    }
    
    def get_H : double () 
    {
        return = H;
    }
    
    public def Multiply : double (other : Tuple4)
    {
        return = X * other.X + Y * other.Y + Z * other.Z + H * other.H;
    }
    
    public def Coordinates3 : double[] ()
    { 
        return = {X, Y, Z };
    }
    
    public def Coordinates4 : double[] () 
    { 
        return = {X, Y, Z, H };
    }
}
class Vector
{
    X : var;
    Y : var;
    Z : var;
    
    public constructor ByCoordinates(xx : double, yy : double, zz : double)
    {
        X = xx;
        Y = yy;
        Z = zz;
    }
}
class Transform
{
    public C0 : Tuple4; 
    public C1 : Tuple4; 
    public C2 : Tuple4; 
    public C3 : Tuple4;     
    
    public constructor ByTuples(C0Value : Tuple4, C1Value : Tuple4, C2Value : Tuple4, C3Value : Tuple4)
    {
        C0 = C0Value;
        C1 = C1Value;
        C2 = C2Value;
        C3 = C3Value;
    }
    public constructor ByData(data : double[][])
    {
        C0 = Tuple4.ByCoordinates4(data[0]);
        C1 = Tuple4.ByCoordinates4(data[1]);
        C2 = Tuple4.ByCoordinates4(data[2]);
        C3 = Tuple4.ByCoordinates4(data[3]);
    }
    
    public def ApplyTransform : Tuple4 (t : Tuple4)
    {
        //a = C0.X;
        tx = Tuple4.XYZH(C0.X, C1.X, C2.X, C3.X);
        RX = tx.Multiply(t);
        ty = Tuple4.XYZH(C0.Y, C1.Y, C2.Y, C3.Y);
        RY = ty.Multiply(t);
        tz = Tuple4.XYZH(C0.Z, C1.Z, C2.Z, C3.Z);
        RZ = tz.Multiply(t);
        th = Tuple4.XYZH(C0.H, C1.H, C2.H, C3.H);
        RH = th.Multiply(t);
        return = Tuple4.XYZH(RX, RY, RZ, RH);
    }
    
    public def TransformVector : Vector (p: Vector)
    {    
        tpa = Tuple4.XYZH(p.X, p.Y, p.Z, 0.0);
        tpcv = ApplyTransform(tpa);
        return = Vector.ByCoordinates(tpcv.X, tpcv.Y, tpcv.Z);    
    }
}
data = {    {1.0,0,0,0},
            {0.0,1,0,0},
            {0.0,0,1,0},
            {0.0,0,0,1}
        };
        
xform = Transform.ByData(data);
c0 = xform.C0;
c0_X = c0.X;
c0_Y = c0.Y;
c0_Z = c0.Z;
c0_H = c0.H;
vec111 = Vector.ByCoordinates(1,1,1);
tempTuple = Tuple4.XYZH(vec111.X, vec111.Y, vec111.Z, 0.0);
tempcv = xform.ApplyTransform(tempTuple);
x = tempcv.X;
y = tempcv.Y;
z = tempcv.Z;
h = tempcv.H;
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1751_Regress_1455621()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class Tuple4
{
    X : var;
    Y : var;
    Z : var;
    H : var;
    
    constructor XYZH(xValue : double, yValue : double, zValue : double, hValue : double)
    {
        X = xValue;
        Y = yValue;
        Z = zValue;
        H = hValue;        
    }
    
    constructor XYZ(xValue : double, yValue : double, zValue : double)
    {
        X = xValue;
        Y = yValue;
        Z = zValue;
        H = 1.0;        
    }
    constructor ByCoordinates3(coordinates : double[] )
    {
        X = coordinates[0];
        Y = coordinates[1];
        Z = coordinates[2];
        H = 1.0;        
    }
    constructor ByCoordinates4(coordinates : double[] )
    {
        X = coordinates[0];
        Y = coordinates[1];
        Z = coordinates[2];
        H = coordinates[3];    
    }
    
    def get_X : double () 
    {
        return = X;
    }
    
    def get_Y : double () 
    {
        return = Y;
    }
    
    def get_Z : double () 
    {
        return = Z;
    }
    
    def get_H : double () 
    {
        return = H;
    }
    
    public def Multiply : double (other : Tuple4)
    {
        return = X * other.X + Y * other.Y + Z * other.Z + H * other.H;
    }
    
    public def Coordinates3 : double[] ()
    { 
        return = {X, Y, Z };
    }
    
    public def Coordinates4 : double[] () 
    { 
        return = {X, Y, Z, H };
    }
}
/*
t1 = Tuple4.XYZH(0,0,0,0);
t2 = Tuple4.XYZ(0,0,0);
t3 = Tuple4.ByCoordinates3({0.0,0,0});
t4 = Tuple4.ByCoordinates4({0.0,0,0,0});
mult = t1.Multiply(t2);
c3 = t3.Coordinates3();
c4 = t3.Coordinates4();
*/
class Vector
{
    X : var;
    Y : var;
    Z : var;
    
    public constructor ByCoordinates(xx : double, yy : double, zz : double)
    {
        X = xx;
        Y = yy;
        Z = zz;
    }
}
class Transform
{
    public C0 : Tuple4; 
    public C1 : Tuple4; 
    public C2 : Tuple4; 
    public C3 : Tuple4;     
    
    public constructor ByTuples(C0Value : Tuple4, C1Value : Tuple4, C2Value : Tuple4, C3Value : Tuple4)
    {
        C0 = C0Value;
        C1 = C1Value;
        C2 = C2Value;
        C3 = C3Value;
    }
    public constructor ByData(data : double[][])
    {
        C0 = Tuple4.ByCoordinates4(data[0]);
        C1 = Tuple4.ByCoordinates4(data[1]);
        C2 = Tuple4.ByCoordinates4(data[2]);
        C3 = Tuple4.ByCoordinates4(data[3]);
    }
    
    public def ApplyTransform : Tuple4 (t : Tuple4)
    {
        tx = Tuple4.XYZH(C0.X, C1.X, C2.X, C3.X);
        RX = tx.Multiply(t);
        ty = Tuple4.XYZH(C0.Y, C1.Y, C2.Y, C3.Y);
        RY = ty.Multiply(t);
        tz = Tuple4.XYZH(C0.Z, C1.Z, C2.Z, C3.Z);
        RZ = tz.Multiply(t);
        th = Tuple4.XYZH(C0.H, C1.H, C2.H, C3.H);
        RH = th.Multiply(t);
        
        return = Tuple4.XYZH(RX, RY, RZ, RH);
    }
    public def NativeMultiply : Transform(other : Transform)
    {              
        tc0 = ApplyTransform(other.C0);
        tc1 = ApplyTransform(other.C1);
        tc2 = ApplyTransform(other.C2);
        tc3 = ApplyTransform(other.C3);
        return = Transform.ByTuples(tc0, tc1, tc2, tc3);
    }
    
    public def NativePreMultiply : Transform (other : Transform)
    {     
        //  as we don't have this now let's do it longer way!        
        //return = other.NativeMultiply(this);
        //
        tc0 = other.ApplyTransform(C0);
        tc1 = other.ApplyTransform(C1);
        tc2 = other.ApplyTransform(C2);
        tc3 = other.ApplyTransform(C3);
        return = Transform.ByTuples(tc0, tc1, tc2, tc3);
    }
}
data = {    {1.0,0,0,0},
            {0.0,1,0,0},
            {0.0,0,1,0},
            {0.0,0,0,1}
        };
        
xform = Transform.ByData(data);
c0 = xform.C0;
c0_X = c0.X;
c0_Y = c0.Y;
c0_Z = c0.Z;
c0_H = c0.H;
vec111 = Vector.ByCoordinates(1,1,1);
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1752_Regress_1455643()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class Tuple4
{
    X : var;
    Y : var;
    Z : var;
    H : var;
    
    
    constructor ByCoordinates4 (coordinates : double[] )
    {
        X = coordinates[0];
        Y = coordinates[1];
        Z = coordinates[2];
        H = coordinates[3];    
    }
    
    public def Equals : bool (other : Tuple4)
    {
        return =   X == other.X &&
                   Y == other.Y &&
                   Z == other.Z &&
                   H == other.H;
    }
}
class Transform
{
    public C0 : Tuple4; 
    public C1 : Tuple4; 
    public C2 : Tuple4; 
    public C3 : Tuple4;     
    public constructor ByData(data : double[][])
    {
        C0 = Tuple4.ByCoordinates4(data[0]);
        C1 = Tuple4.ByCoordinates4(data[1]);
        C2 = Tuple4.ByCoordinates4(data[2]);
        C3 = Tuple4.ByCoordinates4(data[3]);
    }
   
   def Equals : bool (other : Transform )
   {
        return =C0.Equals(other.C0) &&
                C1.Equals(other.C1) &&
                C2.Equals(other.C2) &&
                C3.Equals(other.C3);
   }
}
data1 = {    {1.0,0,0,0},
            {0.0,1,0,0},
            {0.0,0,1,0},
            {0.0,0,0,1}
        };
        
data2 = {    {1.0,0,0,0},
    {1.0,1,0,0},
    {0.0,0,1,0},
    {0.0,0,0,1}
};
        
        
xform1 = Transform.ByData(data1);
xform2 = Transform.ByData(data2);
areEqual1 = xform1.Equals(xform1);
areEqual2 = xform1.Equals(xform2);
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1753_Regress_1455729()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"def cos : double(val : double)
{
    return = val;
}
def sin : double ( val : double)
{
    return = val;
}
class Geometry
{
    private id : var;
}
class Plane extends Geometry
{}
class Curve extends Geometry
{}
class Surface extends Geometry
{}
class Solid extends Geometry
{}
class Color
{}
class CoordinateSystem extends Geometry
{}
class Vector
{}
class Tuple4
{
    X : var;
    Y : var;
    Z : var;
    H : var;
    
    constructor XYZH(xValue : double, yValue : double, zValue : double, hValue : double)
    {
        X = xValue;
        Y = yValue;
        Z = zValue;
        H = hValue;        
    }
    
    constructor XYZ(xValue : double, yValue : double, zValue : double)
    {
        X = xValue;
        Y = yValue;
        Z = zValue;
        H = 1.0;        
    }
    constructor ByCoordinates3(coordinates : double[] )
    {
        X = coordinates[0];
        Y = coordinates[1];
        Z = coordinates[2];
        H = 1.0;        
    }
    constructor ByCoordinates4(coordinates : double[] )
    {
        X = coordinates[0];
        Y = coordinates[1];
        Z = coordinates[2];
        H = coordinates[3];    
    }
    
    def get_X : double () 
    {
        return = X;
    }
    
    def get_Y : double () 
    {
        return = Y;
    }
    
    def get_Z : double () 
    {
        return = Z;
    }
    
    def get_H : double () 
    {
        return = H;
    }
    
    public def Multiply : double (other : Tuple4)
    {
        return = X * other.X + Y * other.Y + Z * other.Z + H * other.H;
    }
    
    public def Coordinates3 : double[] ()
    { 
        return = {X, Y, Z };
    }
    
    public def Coordinates4 : double[] () 
    { 
        return = {X, Y, Z, H };
    }
}
class Point extends Geometry
{
    public color                    : var;    //= Color.Yellow;
    public XTranslation             : var; // double = 0;
    public YTranslation             : var; //double = 0;
    public ZTranslation             : var; //double = 0;
    public ParentCoordinateSystem   : var; //CoordinateSystem = CoordinateSystem.BaseCoordinateSystem;
    public GlobalCoordinates        : var; //= 0.0;
    public X                        : var; //double = GlobalCoordinates[0];
    public Y                        : var; //double = GlobalCoordinates[1];
    public Z                        : var; //double = GlobalCoordinates[2];
    public Radius                   : var; //double = 0.0;
    public Theta                    : var; //double = 0.0;
    public Height                   : var; //double = 0.0;
    public Phi                      : var; //double = 0.0;
    //  properties due to various AtParameter/Project constructors
    public MySurface                  : var;//Surface = null;
    public MyCurve                    : var;//Curve = null;
    public U                        : var; //double = null;
    public V                        : var;//double = null;
    public T                        : var;//double = null;
    public Distance                 : var;// double = null;
    public Direction                : var;//Vector = null;
    public MyPlane                    : var; //Plane = null;
    private bHostEntityCreated      : var;// = DC_Point_updateHostPoint(hostEntityID, {X, Y, Z});
    public def ComputeGlobalCoords : double[] (cs: CoordinateSystem, x : double, y : double, z : double)
    {
        /*localCoordsTuple = Tuple4.XYZ(x, y, z);
        globalCoordsTuple = cs.Matrix.ApplyTransform(localCoordsTuple);
        return = {globalCoordsTuple.X, globalCoordsTuple.Y, globalCoordsTuple.Z};*/
        return = {x, y, z};
    }
    private def init : bool ()
    {
        color                  =  null;
        XTranslation           =  0.0;
        YTranslation           =  0.0;
        ZTranslation           =  0.0;
        ParentCoordinateSystem =  null;
        GlobalCoordinates      =  null;
        X                      =  0.0;
        Y                      =  0.0;
        Z                      =  0.0;
        Radius                 =  0.0;
        Theta                  =  0.0;
        Height                 =  0.0;
        Phi                    =  0.0;
        
        MySurface                 =   null;
        MyCurve                   =   null;
        U                       = 0.0;
        V                       = 0.0;
        T                       = 0.0;
        Distance                = 0.0;
        Direction               = null;
        MyPlane                   = null;
        bHostEntityCreated      = false;
        
        // id is a private member in base class
        // id                      = null;
        
        return = true;
    }
    
    
    public constructor ByCylindricalCoordinates(cs : CoordinateSystem, radius : double, theta : double, height : double)
    {
        neglect = init();
        
        ParentCoordinateSystem = cs;
        Radius = radius;
        Theta = theta;
        Height = height;
        XTranslation = Radius*cos(Theta);
        YTranslation = Radius*sin(theta);
        ZTranslation = Height;
        //GlobalCoordinates = ComputeGlobalCoords(ParentCoordinateSystem, XTranslation, YTranslation, ZTranslation);
        X = GlobalCoordinates[0];
        Y = GlobalCoordinates[1];
        Z = GlobalCoordinates[2];
    }
}
a = 2;
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1754_Regress_1455738()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"b;
[Associative]
{
    a = 3;
    b = a * 2;
    a = 4;
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1755_Regress_1455935()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"b;
c;
d;
[Imperative]
{
	def foo:int ( a : bool )
	{
		if(a)
			return = 1;
		else
			return = 0;
	}
	
	b = foo( 1 );
	c = foo( 1.5 );
	d = 0;
	if(1.5 == true ) 
	{
	    d = 3;
	}
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1756_Regress_1456611()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class A
{
    a : var;
	constructor A ( i : int)
	{
	    a = i;
	}
}
def create( b )
{
    a = A.A(b);
	return = a;
}
x = create(3);
y = x.a;
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1757_Regress_1456611_2()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @" 
class A
{
    X : int;
    
    
    constructor A(x : int)
    {
        X = x;        
    }
}
numpts;
[Imperative]
{
    def length : int (pts : A[])
    {
        numPts = [Associative]
        {
            return = [Imperative]
            {
                counter = 0;
                for(pt in pts)
                {
                    counter = counter + 1;
                }        
                return = counter;
            }
        }
        return = numPts;
    }
    pt1 = A.A( 0 );
    pt2 = A.A( 10 );
    pts = {pt1, pt2};
    numpts = length(pts); // getting null
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1758_Regress_1456611_3()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"// function test -return class array, argument as class array 
class A
{
    X : int;
    
    
    constructor A(x : int)
    {
        X = x;        
    }
}
def length : A[] (pts : A[])
{
    numPts = [Imperative]
    {
        counter = 0;
        for(pt in pts)
        {
            counter = counter + 1;
        }        
        return = counter;
    }
    return = pts;
}
pt1 = A.A( 0 );
pt2 = A.A( 10 );
pts = {pt1, pt2};
numpts = length(pts); // getting null
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1759_Regress_1456611_4()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"//  function test return int , multiple arguments 
class A
{
    X : int;
    
    
    constructor A(x : int)
    {
        X = x;        
    }
}
def length : int (pts : A[],num:int)
{
    numPts = [Imperative]
    {
        counter = 0;
        for(pt in pts)
        {
            counter = counter + 1;
        }        
        return = counter;
    }
    return = num;
}
pt1 = A.A( 0 );
pt2 = A.A( 10 );
pts = {pt1, pt2};
numpts = length(pts,5); // getting null";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1760_Regress_1456611_5()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"// function test pass an item in hte array as argument , no return type specified
class A
{
    X : int;
    
    
    constructor A(x : int)
    {
        X = x;        
    }
}
def length(pts : A[],num:int )
{
    numPts = [Imperative]
    {
        counter = 0;
        for(pt in pts)
        {
            counter = counter + 1;
        }        
        return = counter;
    }
    return = num;
}
pt1 = A.A( 0 );
pt2 = A.A( 10 );
pts = {pt1, pt2};
a={1,2,3};
numpts = length(pts,a[0]);";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1761_Regress_1456611_6()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"// function test pass an item in the array as argument , no return type specified
class A
{
    X : int;
    
    
    constructor A(x : int)
    {
        X = x;        
    }
}
def length(pts : A[],num:int )
{
    numPts = [Imperative]
    {
        counter = 0;
        for(pt in pts)
        {
            counter = counter + 1;
        }        
        return = counter;
    }
    return = null;
}
pt1 = A.A( 0 );
pt2 = A.A( 10 );
pts = {pt1, pt2};
a={1,2,3};
numpts = length(pts,a[0]);";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1762_Regress_1456611_7()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"// no return type specified ad no return statement 
class A
{
    X : int;
    
    
    constructor A(x : int)
    {
        X = x;        
    }
}
def length(pts : A[],num:int )
{
    numPts = [Imperative]
    {
        counter = 0;
        for(pt in pts)
        {
            counter = counter + 1;
        }        
        return = counter;
    }
//    return = null;
}
pt1 = A.A( 0 );
pt2 = A.A( 10 );
pts = {pt1, pt2};
a={1,2,3};
numpts = length(pts,a[0]);";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1763_Regress_1456611_8()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"// function test pass an item in the array as argument , no return type specified
class A
{
    X : int;
    
    
    constructor A(x : int)
    {
        X = x;        
    }
}
def length :A[](pts : A[])
{
   
    return = pts;
}
def nested(pts:A[] )
{
    pt1 = A.A( 5 );
    pts2={pts,pt1};
    return =length(pts2);
}
gpt1 = A.A( 0 );
gpt2 = A.A( 10 );
gpts = {gpt1, gpt2};
a={1,2,3};
numpts = nested(gpts);
t1 = numpts[0][0].X;
t2 = numpts[0][1].X;
t3 = numpts[1][0].X;";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1764_Regress_1456611_9()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"// test rank of return type 
class A
{
    X : int;
    
    
    constructor A(x : int)
    {
        X = x;        
    }
}
def length :A[](pts : A[])
{
   
    return = pts;
}
def nested:A[][](pts:A[] )//return type 2 dimensional
{
    pt1 = A.A( 5 );
    pt2 = A.A( 5 );
  //  pts2={pts,{pt1,pt2}};
    return =length(pts); // returned array 1 dimensional
}
gpt1 = A.A( 0 );
gpt2 = A.A( 10 );
gpts = {gpt1, gpt2};
a={1,2,3};
res = nested(gpts);
numpts=res[0][0].X;
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1765_Regress_1456713()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"a = 2.3;
b = a * 3;
c = 2.32;
d = c * 3;
e1=0.31;
f=3*e1;
g=1.1;
h=g*a;
i=0.99999;
j=2*i;";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1766_Regress_1456758()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"a = true && true ? -1 : 1;";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1767_Regress_1456895()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class collection
{
                
                public a : int[];
                
                constructor create( b : int)
                {
                                a = { b , b};
                }
                
                def ret_col ( )
                {
                                return = a;
                }
}
d;
[Associative]
{
                c1 = collection.create( 3 );
                d = c1.ret_col();
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1768_Regress_1456895_2()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class collection{
                                
	public a : var[]..[];                                
	constructor create( b : int[]..[])                
	{
		a = b;                
	}                                
	def ret_col ( )                
	{
		return = a[0];                
	}
}
c;
d;
[Associative]
{                
    c = { 3, 3 };
	c1 = collection.create( c );                
	d = c1.ret_col();
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1769_Regress_1456895_3()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class A
{
	Pts : var[];
	constructor A ( pts : double[] )
	{
	    Pts = pts;
	}
	def length ()
	{
		numPts = [Imperative]
		{
			counter = 0;
			for(pt in Pts)
			{
				counter = counter + 1;
			}
			
			return = counter;
		}
		return = numPts;
	}
}
    
arr = {0.0,1.0,2.0,3.0};
a1 = A.A(arr);
num = a1.length(); // expected 4, recieved 1";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1770_Regress_1457023()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class Utils
{
    public def length : int (pts : double[])
    {
        numPts = [Imperative]
        {
            counter = 0;
            for(pt in pts)
            {
                counter = counter + 1;
            }
            
            return = counter;
        }
        return = numPts;
    }
    
    constructor Create()
    {}
}
utils = Utils.Create();
arr = {0.0,1.0,2.0,3.0};
num = utils.length(arr);
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1771_Regress_1457023_1()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class Utils
{
    C : double[];
	
	public def length : int ()
    {
        counter = 0;
		
		[Imperative]
        {          
            for(pt in C)
            {
                counter = counter + 1;
            }           
        }
        return = counter;
    }
    
    constructor Create(a : double[])
    {
		C = a;
	}
}
arr = { 0.0, 1.0, 2.0, 3.0 };
utils = Utils.Create(arr);
num = utils.length();
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1772_Regress_1457023_2()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class A
{
    b : double[];
	
	constructor A (x : double[])
	{
		b = x;
	}
	
	def add_2:double[]( )
	{
		j = 0;
		x = [Imperative]
		{
			for ( i in b )
			{
				b[j] = b[j] + 1;
				j = j + 1 ;
			}
			return = b;
		}
		
		return = x;
	}
}
c = { 1.0, 2, 3 };
a1 = A.A( c );
b2 = a1.add_2( );";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1773_Regress_1457023_3()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"import ( ""testImport.ds"" );
class Vector
{
    //external (""libmath"") def dc_sqrt : double (val : double);
    public Length : var;
    
    private def init : bool ()
    {
        Length = null;
        return = true;        
    }
    
    X : var;
    Y : var;
    Z : var;
    
    public constructor ByCoordinates(x : double, y : double, z : double)
    {
        neglect = init();
        
        X = x;
        Y = y;
        Z = z;
    }
    
    public def GetLength ()
    {
        return = [Imperative]
        {
            if( Length == null )
            {
                Length = dc_sqrt(X*X + Y*Y + Z*Z);
            }
            return = Length;
        }
    }
    
}
vec =  Vector.ByCoordinates(3.0,4.0,0.0);
vec_len = vec.GetLength();
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1774_Regress_1457023_4()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class A
{
	a : var[]..[];
	
	constructor create(i:int)
	{
		[Imperative]
		{
			if( i == 1 )
			{
				a = { { 1,2,3 } , { 4,5,6 } };
			}
			else
			{
			    a = { { 1,2,3 } , { 1,2,3 } };
			}
		}
	
	}
	
}
A1 = A.create(1);
a1 = A1.a[0][0];
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1775_Regress_1457179()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"import (""TestImport.ds"");
//external (""libmath"") def dc_sin : double (val : double);
def Sin : double (val : double)
{
    return = dc_sin(val);
}
result1 = Sin(90);
result2 = Sin(90.0);";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1776_Regress_1457862()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class point
{
		x : var;
		
		constructor point1(a : int[])
		{
			x = a;
		}
		
		def foo(a : int)
		{
			return = a;
		}
}
def foo1(a : int)
		{
			return = a;
		}
def foo2(a : int[])
		{
			return = a[2];
		}
a3;
a4;
[Imperative]
{
	//x1 = 1..4;
	x1 = { 1, 2, 3, 4 };
	a = point.point1(x1);
	a1 = a.x;
	a2 = a.foo(x1);	
	a3 = foo1(x1[0]);
	a4 = foo2(x1);
}";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1777_Regress_1457885()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"c = 5..7..#1;
a = 0.2..0.3..~0.2;";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1778_Regress_1457903()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"a = 1..7..#2.5;
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1779_Regress_1458187()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"//b=true;
  //              x = (b == 0) ? b : b+1;
def foo1 ( b  )
{
                x = (b == 0) ? b : b+1;
                return = x;
}
a=foo1(5.0);
b=foo1(5);
c=foo1(0);
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1780_Regress_1458187_2()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"def foo1 ( b )
{
x = (b == 0) ? b : b+1;
return = x;
}
a=foo1(true); ";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1781_Regress_1458187_3()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"def foo1 ( b )
{
x = (b == 0) ? b : b+1;
return = x;
}
a=foo1(null); ";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1782_Regress_1458475()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"a = { 1,2 };
b1 = a[-1];//b1=2";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1783_Regress_1458475_2()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"a = { {1,2},{3,4,5}};
b1 = a[0][-1];// b1=2";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1784_Regress_1458561()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class A
{ 
	x1 : int[] = {10,20};
	constructor A () 
	{	
		
	}
}
a = A.A();
t1 = a.x1;
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1785_Regress_1458567()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"a = 1;
b = a[1];
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1786_Regress_1458785()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class A
{
    x : var;
	constructor A ()
	{
	    x = 1;
	}
	
	def foo ( i )
	{
		return = i;
	}
}
	
a1 = A.A();
a2 = a1.foo();
a3 = 2;
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1787_Regress_1458785_2()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"def foo ( i:int[])
{
return = i;
}
x =  1;
a1 = foo(x);
a2 = 3;";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1788_Regress_1458785_3()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class A
{
    x : int;
	constructor A (i)
	{
	    x = i;
		y = 2;
	}	
}	
a1 = A.A(1);
x1 = a1.x;
y1 = a1.y;
z1 = 2;";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1789_Regress_1458785_4()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class A
{
    private x:int;
    constructor A()
    {
        x = 3;
    }
    def testPublic() 
    {
        x=x+2; // x= 5 
        return= x;
    }
     private def testprivate()
    {
        x=x-1;  
        return =x;
    }
    def testmethod() // to test calling private methods
    {
        a=testprivate();
        return=a;
    }
    
}
test1=A.A();
test2=z.x;// private member must not be exposed 
test3=test1.testPublic();
test4=test1.testprivate();// private method must not be exposed 
test5= test1.testmethod(); ";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1790_Regress_1458915()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class A
{ 
	x : var = 0 ;	
	
	constructor A ()
	{
		 x = 1;     	
	}
	def foo ()
	{
	    return = x + 1;
	}	
}
class C extends A
{ 
	y : var ;	
	
	constructor C () : base.A()
	{
		 y = foo();
         	 
	}
	
}
c = C.C();
c1 = c.x;
c2 = c.y;
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1791_Regress_1458915_2()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class CA
{
    x:int = 1;
    constructor CA()
    {
    }
}
class CB extends CA
{
    y:int = 2;
    constructor CB()
    {
    }
}
b = CB.CB();
t = b.x; // expected 1 here";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1792_Regress_1458915_3()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"
class A
{ 
	x : int = 5 ;
	
}
class B extends A
    {
    y : int = 5 ;
	
}
a1 = A.A();
x1 = a1.x;
b1 = B.B();
y1 = b1.x;
y2 = b1.y;";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1793_Regress_1458916()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class A
{ 
	x : int = 5 ;
	
}
a1 = A.A();
x1 = a1.x;";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1794_Regress_1458918_1()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class A
{ 
	public x : var ;	
	private y : var ;
	//protected z : var = 0 ;
	constructor A ()
	{
		   	
	}
	public def foo1 (a)
	{
	    x = a;
		y = a + 1;
		return = x + y;
	} 
	private def foo2 (a)
	{
	    x = a;
		y = a + 1;
		return = x + y;
	}	
}
a = A.A();
a1 = a.foo1(1);
a2 = a.foo2(1);
a.x = 4;
a.y = 5;
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1795_Regress_1458918_2()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class A
{
    private x:int;
    constructor A()
    {
        x = 3;
    }
    def testPublic() 
    {
        x=x+2; // x= 5 
        return= x;
    }
     private def testprivate()
    {
        x=x-1;  
        return =x;
    }
    def testmethod() // to test calling private methods
    {
        a=testprivate();
        return=a;
    }
    
}
test1=A.A();
//test2=test1.x;// private member must not be exposed 
test3=test1.testPublic();
//test4=test1.testprivate();// private method must not be exposed 
test5= test1.testmethod();
class B extends A
{
    
    constructor B()
    {
        x = 4;
     
    }
    def foo()
    {
        x=1;
       return = x;
    }
}
a=B.B();// x is private so would not be assigned any v
b=a.x;// private member must not be exposed 
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1796_Regress_1459171_1()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class Point
{
    X : double;
	Y : double;
	constructor ByCoordinates( x : double, y: double )
	{
	    X = x;
		Y = y;
			
	}
	
	def create( )	{
	    
		return = Point.ByCoordinates( X, Y );
		
	}	
}
p1 = Point.ByCoordinates( 5.0, 10.0);
t1 = p1.X;
t2 = p1.Y;
a1 = p1.create();
a2 = a1.X;
a3 = a1.Y;
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1797_Regress_1459171_2()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"e1;
[Imperative]
{
	def even : int (a : int) 
	{	
		if(( a % 2 ) > 0 )
			return = a + 1;
		
		else 
			return = a;
	}
	x = 1..3..1;
	y = 1..9..2;
	z = 11..19..2;
	c = even(x);
	d = even(x)..even(c)..(even(0)+0.5);
	e1 = even(y)..even(z)..1;
	f = even(e1[0])..even(e1[1]); 
	g = even(y)..even(z)..f[0][1]; 
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1798_Regress_1459175()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class Point
{
    X : double;
	Y : double;
	
	constructor ByCoordinates( x : double, y: double )
	{
	    X = x;
	    Y = y;
			
	}
	
}
p1 = Point.ByCoordinates( 5.0, 10.0);
a1 = p1.create(4.0,5.0);
a2 = a1.X; // expected null here!!
a3 = a1.Y; // expected null here!!
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1799_Regress_1459175_2()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class A
{
    X : int;
    
    
    constructor A(x : int)
    {
        X = x;        
    }
}
def length : A (pts : A[])
{
    numPts = [Imperative]
    {
        counter = 0;
        for(pt in pts)
        {
            counter = counter + 1;
        }        
        return = counter;
    }
    return = pts;
}
pt1 = A.A( 1 );
pt2 = A.A( 10 );
pts = {pt1, pt2};
numpts = length(pts);
test =numpts[0].X;
test2 =numpts[1].X;
	
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1800_Regress_1459372()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"collection = { 2, 2, 2 };
collection[1] = 3;
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1801_Regress_1459512()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"def length : int (pts : int[])
{
    numPts = [Imperative]
    {
        counter = 0;
        for(pt in pts)
        {
            counter = counter + 1;
        }        
        return = counter;
    }
    return = numPts;
}
z=length({1,2});";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1802_Regress_1459584()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class A
{
    X : int;
    
    
    constructor A(x : int)
    {
        X = x;        
    }
}
def length : A[] (pts : A[])
{
    numPts = [Imperative]
    {
        counter = 0;
        for(pt in pts)
        {
            counter = counter + 1;
        }        
        return = counter;
    }
    return = pts;
}
pt1 = A.A( 0 );
pt2 = A.A( 10 );
pts = {pt1, pt2};
numpts = length(pts);
test=numpts[0].X;
test2= numpts[1].X;";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1803_Regress_1459584_1()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"//return type class and return an array of class-
class A
{
    X : int;
    
    
    constructor A(x : int)
    {
        X = x;        
    }
}
def length : A[] (pts : A[])
{
    c1 = [Imperative]
    {
        counter = 0;
        for(pt in pts)
        {
            counter = counter + 1;
        }        
        return = counter;
    }
    return = pts;
}
pt1 = A.A( 0 );
pt2 = A.A( 10 );
c1 = 0;
pts = {pt1, pt2};
numpts = length(pts); 
a=numpts[0].X;
b=numpts[1].X;
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1804_Regress_1459584_2()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"//return type class and return an array of class-
class A
{
    X : int;
    
    
    constructor A(x : int)
    {
        X = x;        
    }
}
def length : A[] (pts : A[])
{
    numPts = [Imperative]
    {
        counter = 0;
        for(pt in pts)
        {
            counter = counter + 1;
        }        
        return = counter;
    }
    return = pts[0];
}
pt1 = A.A( 0 );
pt2 = A.A( 10 );
pts = {pt1, pt2};
numpts = length(pts); 
a=numpts[0].X;
b=numpts[1].X;";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1805_Regress_1459584_3()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"//return type class and return a double
class A
{
    X : int;
    
    
    constructor A(x : int)
    {
        X = x;        
    }
}
def length : A (pts : A[])
{
    numPts = [Imperative]
    {
        counter = 0;
        for(pt in pts)
        {
            counter = counter + 1;
        }        
        return = counter;
    }
    return = 1.0;
}
pt1 = A.A( 0 );
pt2 = A.A( 10 );
pts = {pt1, pt2};
numpts = length(pts); 
a=numpts[0].X;
b=numpts[1].X;";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1806_Regress_1459584_4()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"//return type int and return a double
class A
{
    X : int;
    
    
    constructor A(x : int)
    {
        X = x;        
    }
}
def length : int (pts : A[])
{
    numPts = [Imperative]
    {
        counter = 0;
        for(pt in pts)
        {
            counter = counter + 1;
        }        
        return = counter;
    }
    return = 1.0;
}
pt1 = A.A( 0 );
pt2 = A.A( 10 );
pts = {pt1, pt2};
numpts = length(pts);";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1807_Regress_1459584_5()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"//return type int and return a double
class A
{
    X : int;
    
    
    constructor A(x : int)
    {
        X = x;        
    }
}
def length : double (pts : A[])
{
    numPts = [Imperative]
    {
        counter = 0;
        for(pt in pts)
        {
            counter = counter + 1;
        }        
        return = counter;
    }
    return = 1;
}
pt1 = A.A( 0 );
pt2 = A.A( 10 );
pts = {pt1, pt2};
numpts = length(pts); ";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1808_Regress_1459584_6()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"//no return type defined
class A
{
    X : int;
    
    
    constructor A(x : int)
    {
        X = x;        
    }
}
def length  (pts : A[])
{
    numPts = [Imperative]
    {
        counter = 0;
        for(pt in pts)
        {
            counter = counter + 1;
        }        
        return = counter;
    }
    return = pts;
}
pt1 = A.A( 0 );
pt2 = A.A( 10 );
pts = {pt1, pt2};
numpts = length(pts); 
test=numpts[0].X;
test2=numpts[1].X;
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1809_Regress_1459584_7()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"//no return type defined and return null
class A
{
    X : int;
    
    
    constructor A(x : int)
    {
        X = x;        
    }
}
def length  (pts : A[])
{
    numPts = [Imperative]
    {
        counter = 0;
        for(pt in pts)
        {
            counter = counter + 1;
        }        
        return = counter;
    }
    return = null;
}
pt1 = A.A( 0 );
pt2 = A.A( 10 );
pts = {pt1, pt2};
numpts = length(pts); ";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1810_Regress_1459584_8()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"//no return statement
class A
{
    X : int;
    
    
    constructor A(x : int)
    {
        X = x;        
    }
}
def length  (pts : A[])
{
    numPts = [Imperative]
    {
        counter = 0;
        for(pt in pts)
        {
            counter = counter + 1;
        }        
        return = counter;
    }
   // return = null;
}
pt1 = A.A( 0 );
pt2 = A.A( 10 );
pts = {pt1, pt2};
numpts = length(pts); ";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1811_Regress_1459630()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"def atan ( a : double ) = 0.5 * a;
class A
{
	theta  = atan(5.0) ;
        //theta : double = atan(5.0) ; => this works fine
	
}
a1 = A.A();";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1812_Regress_1459762()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class A 
{
    a : var;
	constructor A ( )
	{
	    a = 5;
	}
}
r1 = A.A();
r2 = r1+1;
// expected : r2 = null
// recieved : r2 = ptr: 1";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1813_Regress_1459900()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"a:int = 1.3;";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1814_Regress_1459900_1()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"def atan ( a : double ) = 0.5 * a;
class A
{
	theta:bool  = atan(5.0) ;
        //theta : double = atan(5.0) ; => this works fine
	
}
a1 = A.A();";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1815_Regress_1462308()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"import(TestData from ""ProtoTest.dll"");
f = TestData.IncrementByte(101); 
F = TestData.ToUpper(f);
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1816_Regress_1467091()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"def foo(x:int)
{
    return =  x + 1;
}
y1 = test.foo(2);
y2 = ding().foo(3);";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1817_Regress_1467094_1()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"t = {};
x = t[3];
t[2] = 1;
y = t[3];
z = t[-1];
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1818_Regress_1467094_2()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class A  
{
    x : var;
    constructor A ( y : var )
    {
        x = y;
    }
}
c = { A.A(0), A.A(1) };
p = {};
d = [Imperative]
{
    if(c[0].x == 0 )
    {
        c[0] = 0;
    p[0] = 0;
    }
    if(c[0].x == 0 )
    {
        p[1] = 1;
    }
    return = 0;
}
t1 = c[0];
t2 = c[1].x;
t3=p[0];
t4=p[1];";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1819_Regress_1467104()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"class Point
{
    x : var;
    
    
    constructor Create(xx : double)
    {
        x = xx;
        
    }
}
pts = Point.Create( { 1, 2} );
aa = pts[null].x;";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1820_Regress_1467107()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"def foo(x:int)
{
    return =  x + 1;
}
m=null;
y = m.foo(2);";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1821_Regress_1467117()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"/*
/*
*/
a = 1;";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1822_test()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"def length : int (pts : int[])
{
    numPts = [Imperative]
    {
        counter = 0;
        for(pt in pts)
        {
            counter = counter + 1;
        }        
        return = counter;
    }
    return = numPts;
}
z=length({1,2});";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }

        [Test]
        [Category("WatchFx Tests")]
        public void DebugWatch1823_TestImport()
        {
            Dictionary<int, List<string>> map = new Dictionary<int, List<string>>();
            string src = @"def dc_sqrt : double (val : double )
{
    return = val/2.0;
}
def dc_factorial : int (val : int )
{
    return = val * val ;
}
def dc_sin : double (val : double)
{
    return = val + val;
}
";
            WatchTestFx.GeneratePrintStatements(src, ref map);
            WatchTestFx fx = new WatchTestFx(); fx.CompareRunAndWatchResults(null, src, map);
        }
    }
}
