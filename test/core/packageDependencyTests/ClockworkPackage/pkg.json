{"license":"","file_hash":null,"name":"Clockwork for Dynamo 1.x","version":"1.33.1","description":"Clockwork is a collection of 400+ custom nodes. It contains many Revit-related nodes, but also lots of nodes for various other purposes such as list management, mathematical operations, string operations, geometric operations (mainly bounding boxes, planes, points, surfaces, UVs and vectors) and paneling. More information: https://github.com/andydandy74/ClockworkForDynamo ","group":"Bad Monkeys","keywords":["clockwork","bad","monkeys"],"dependencies":[],"contents":"+1 - Increments a value by 1, -1 - Decrements a value by 1, All Elements of Family Type+ - Unlike the built-in  node, this node retrieves all placed instances of a given loadable *or* system family type, All Families Of Category - Gets all famiies of a given category in the model  (does *not *work for system families), All Family Types Of Category - Gets all family types/symbols of a given category in the model., All Intersecting Elements of Category By BoundingBox - Finds all elements that intersect the bounding box of a given element, All Intersecting Elements Of Category By Vector - Finds all elements of a specified category that intersect with a list of vectors. If no 3D view is supplied, the node will create a temporary view and isolate the given categories in that view. After the operation the temporary view is deleted., All Placed Family Types of Category - Retrieves all family types of a given category that have *placed* instances, All View-Dependent Family Instances Of Category - Gets all view-dependent family instances in a given view for a given list of categories - useful for finding annotation elements, Angle.ByAngleSum - Computes the missing interior angle of a *planar* polygon based on a given list of all other interior angles. , Angle.ByLawOfCosines - Computes an angle of a triangle using the law of cosines. A is the opposite side of the triangle while B and C are the sides forming the angle., Angle.ByLawOfSines - Determines the angle of a triangle based on the law of sines. (Alpha is the angle opposite side A and beta is the angle opposite side B...), Angle.ExteriorAngle - Computes the exterior angle of a given angle., AngleBisector.ByPoints - Retrieves the vector of an angle bisector at point B based on three points (A, B, C) that define the angle. , AngularDimension.ByElements - Creates angular dimensions between elements. Only works in project environment. ATTENTION: Do NOT use in automatic mode., Application.Version - Retrieves the name, version and build of the current Revit application., AreaSeparator.FromCurve - Creates area separation lines from geometry curves. , Array.AssociatedFamilyParameter - Returns the associated family parameter of an array label (if any). PLEASE NOTE: This node will only work in a family document!, Array.GroupType - Returns the group type of a given array, Assembly.AddMembers - Adds any given elements to a given assembly., Assembly.Disassemble - Disassembles an assembly and returns its members, Assembly.FromElements - Creates an assembly from a list of elements, Assembly.Members - Retrieves the members of an assembly, Assembly.RemoveMembers - Removes any given elements to a given assembly., BoundingBox.FromBoundingBoxes - Merges a list of bounding boxes into a single bounding box, BoundingBox.PerimeterCurvesByNormal - Returns the perimeter curve of a bounding box on a plane determined by a given normal and the centroid of the bounding box, BoundingBox.PerimeterCurvesOnPlane - Returns the perimeter curve of a bounding box on a given plane (assuming that the bounding box and plane intersect), BoundingBox.Properties - Retrieves the centroid, width, depth and height of a given bounding box, Buckyball.ByOriginAndRadius - Returns all the data necessary for modeling a truncated icosahedron (vertices and struts) as well as the surface area and volume. , BuiltInCategory.ByName - Looks up all the built-in categories based on a given name (or part of a name) of the category. Search is case-insensitive., BuiltInParameter.ByName - Looks up all the built-in parameters based on a given name (or part of a name) of the parameters. Search is case-insensitive., Category.Material - Retrieves the material assigned to the given category in the object styles, Category.Subcategories - Retrieves all the subcategories for a given category, Category.Type - Returns the type of the category, Cathetus.ByPythagoras - Computes the length of one of the catheti / legs of a right triangle using the Pythagorean Theorem. B is the other leg / cathetus of the triangle while C is the hypotenuse., Character.FromNumber - Converts a number into a character (where 1 = A, 2 = B, ... , 27 = AA, 28 = AB etc.)., Character.ToNumber - Converts an Excel-style character to a number (e.g. A = 1, AA = 27 etc.)., Clipboard.GetFrom - Gets the content of the clipboard. ATTENTION: Will only work with strings., Clipboard.SendTo - Copies a string to the clipboard. , Color.Aqua - Returns the colour aqua., Color.Black - Returns the colour black., Color.Blue - Returns the colour blue., Color.ByWebColor - Creates a color from a given web color (a hex triplet like #FF9900), Color.Fuchsia - Returns the colour fuchsia a.k.a. magenta., Color.Green - Returns the colour green., Color.Grey - Returns the colour grey., Color.GreyscaleByNormalizedValue - Creates a greyscale color based on a normalized value (0 = black, 1 = white), Color.Lime - Returns the colour lime., Color.Maroon - Returns the colour maroon., Color.Navy - Returns the colour navy., Color.Olive - Returns the colour olive., Color.Purple - Returns the colour purple., Color.Red - Returns the colour red., Color.Silver - Returns the colour silver., Color.Teal - Returns the colour teal., Color.White - Returns the colour white., Color.Yellow - Returns the colour yellow., CurtainPanel.HostPanel - Retrieves the host panel of a given curtain panel. This is typcially needed when wanting to access wall elements used as curtain panels. If no host panel is found, the node will return the input panel instead., CurtainPanel.IsPhantomPanel - Checks whether a given curtain panel is not an actual model element. (These types of objects get generated when curtain grid segments are deleted or in other words when multiple cells of the curtain grid are merged into one panel), Curve.ClosedLoopThroughPoints - Creates a *closed* loop of curves based on a given list of points, CustomNode.Info - Extracts information from a custom node., Date.CalendarWeek - Retrieves the calendar week for the given date, DateTime.IsEarlier - Determines if a given date and time are earlier than another given date and time., DateTime.IsLater - Determines if a given date and time are later than another given date and time., DesignOption.DesignOptionSet - Returns the design option set of a given design option, DesignOption.IsPrimary - Determines whether a given design option is the primary option in its set, DetailComponent.ByCurve - Places a line-based detail component in a given view, DetailCurve.ByCurve+ - Creates a detail line based on a given curve. Unlike the OOTB node it can also draw circles., Dimension.AssociatedFamilyParameter - Returns the associated family parameter of a dimension label (if any). PLEASE NOTE: This node will only work in a family document!, Dimension.ReferencedElements - Returns all elements that are referenced by a given dimension, Dimension.SetType - Changes the dimension type of a given dimension instance to the specified type, Directory.Contents+ - Unlike the built-in node Directory.Contents, this node browses a directory recursively and returns all relevant files contained in subfolders as well., DirectShape.FromRevitGeometry - Creates a DirectShape from native Revit geometry objects, DisplayUnit.ToInternalUnit - Converts a value from a given display unit to Revit's internal unit, DividedSurface.AddIntersect - Adds an intersect to a divided surface, DividedSurface.EvaluateGridNodes - Returns UV and XYZ coordinates as well as surface normals for all grid nodes of a given divided surface. Also returns the underlying face., DividedSurface.HorizontalIntersectsByEndpoints - Creates a number of equally spaced horizontal intersects for a divided surface based on the path between between two points. , DividedSurface.HorizontalIntersectsByEndpointsAndFunction - Creates a number of horizontal intersects (levels)for a divided surface based on the path between two points. The spacing of the intersects can be controlled by a function., DividedSurface.VerticalIntersectsByEndpoints - Creates a number of equally spaced vertical intersects for a divided surface based on the path between between two points. You may need to switch start point and end point., DividedSurface.VerticalIntersectsByEndpointsAndFunction - Creates a number of vertical intersects (reference planes) for a divided surface based on the path between between two points. The spacing can be controlled by a function. You may need to switch start point and end point., Document.ActiveViewFromCurrentDocument - Gets the active view of the current document, Document.AddLink - Adds a link to a model to the current document, Document.BuiltInCategories - List all the available BuiltInCategories, Document.BuiltInParameters - List all the available BuiltInParameters, Document.ContainsElementsOfCategory - Checks if family instances of specified categories are present in the model., Document.Default3DView - Returns the default 3D view of the current model (if there is such a view), Document.DesignOptions - Returns all design options in the model, grouped by design option set, Document.ElementTypes - Retrieves a list of all Revit element types, Document.IsWorkshared - Returns true if the current project is workshared, Document.LoadFamily - A very crude implementation of family loading. Will *not* reload an already loaded family of the same name., Document.PerformanceAdviserRules - Retrieves all Performance Adviser Rules from the current document, Document.Phases - Retrieves all phases in the active document in *chronological* order, Document.ProjectInfo - Gets the project information., Document.ProjectParameters - Retrieves all project parameters and the categories they have been assigned to, Document.ProjectParametersByCategory - Retrieves all project parameters for a given category, Document.ProjectPosition - Gets the project's position data relative to the origin. Output coordinates may diverge from the project base point coordinates once the project base point has been moved in an unclipped state. Use the built-in nodes Location.Latitude & Location.Longitude to retrieve latitude and longitude., Document.SaveAs - Saves the active Revit document under the given name., Document.StartingView - Retrieves the starting view of a Project file. Returns null if no starting view is set., Document.SynchronizeWithCentral - Synchronizes a workshared model with the central model., Document.UnitTypes - Retrieves all available unit types of a given document, Document.Views - Gets all views in the document - except for 3D view templates (as long as this bug is not fixed: https://github.com/DynamoDS/Dynamo/issues/2970), Document.Worksets - Returns all Worksets in the current document, Door.Rooms - Gets the rooms that are connected by a given door, Dynamo.Version - Retrieves the version of the active Dynamo application, Element.AllInstances - Retrieves all instances of a given element, Element.AllInstancesAtLevel - Retrieves all instances of an element on a given level, Element.AllViewDependentInstances - Retrieves all instances of a view-dependent element in a given view, Element.Area - Returns the area property of a given element (if that element has such a property), Element.AssociatedFamilyParameters - Returns the associated family parameters of an element in a family (and the respective element parameters). PLEASE NOTE: This node will only work in a family document!, Element.ByID - Gets the Revit element(s) for a list of IDs (or a single ID). Optionally retrieves elements from linked documents as well., Element.Category+ - Returns the category of a given element. Unlike the OOTB node Element.GetCategory, it will work for subcategories, families, family documents, schedules and graphics styles as well., Element.ContainsTransparentMaterials - Checks if a given element contains transparent materials., Element.CopyByVector - Copies an element or a list of elements by a given vector., Element.CopyToLevel - Copies an element or a list of elements to a given level. Preserves the element's transform. PLEASE NOTE: This node only works for levels that have at least one view (e.g. floor plan) associated with them., Element.CutGeometry - Adds a solid-solid cut for two model elements (if possible). , Element.ElementType+ - Gets the family type of a given element (if applicable). Unlike the OOTB node, it also works for elements in linked models., Element.ElevationOfHostLevel - Returns the elevation of the level a given element is associated with, Element.ExternalFileReferencePath - Returns the full path of an element's external file reference as as string, Element.FromDynamoSurface - Returns the underlying Revit element of a given face, Element.Geometry+ - Returns Dynamo AND native Revit geometry of a given element, Element.Group - Retrieves the group an element belongs to (if any), Element.Host+ - Gets an element's host. Unlike the OOTB node FamilyInstance.GetHost it not only works for family instances but also for elements like wall sweeps, foundations, railings, builing pads and topo subregions., Element.ID+ - Gets the ID of a given Revit elements. Unlike the OOTB Element.Id node, this node also works on mixed lists of Revit elements and categories., Element.Inserts - Gets all the objects inserted into a given element., Element.IsOfCategory - Checks whether an element is of a specified category, Element.IsRelatedToMass - Returns true if an object (wall, roof, floor or curtain system) has been modelled by face and the underlying mass still exists in the project., Element.JoinGeometry - Joins two model elements (if possible). Only works inside the project environment., Element.Level - Gets an element's level, Element.Location+ - Returns the location of an element as an XYZ (or if it's line-based the start and end point of the line), along with some booleans to help filtering the results. Use this for some element types (e.g. walls or lines) that do not work with the built-in Get Family Instance Location node. , Element.Materials+ - Retrieves all materials from a given element. Unlike the OOTB node Element.GetMaterials, it also retrieves QTO information., Element.Name+ - Gets an element's name. Unlike the OOTB node, this node should work for all Revit elements that have names and will also return the localized names of system parameters, parameter groups, display unit types, parameter types, unit symbol types and unit types., Element.OwnerView - Gets the owner view of a given Revit element (if possible), Element.Panels - Retrieves the panels nested in a curtain wall, curtain system or glazed roof. \r\nDifferences to OOTB node CurtainPanel.ByElement:\r\n- Returns embedded walls\r\n- Panels of curtain systems and glazed roofs are returned in a nested list, with one sublist for each face of the curtain system. \r\nPLEASE NOTE: Will not work for glazed roofs created by RoofByFace method., Element.ParameterExists - Checks if an element contains a parameter of a given name, Element.Phases - Gets the created and demolished phases of an element, Element.SetMaterialParameterByCategory - Sets a material parameter of a given element to <By Category>, Element.SetName - Gets the name of a given Revit element, Element.SetSubCategory - Assigns the given element(s) to the specified subcategory. The node should work for all geometry and curve elements. In some cases the GraphicsStyleType (Cut = TRUE, Projection = FALSE) needs to be specified., Element.SetWorkset - Sets the workset of a given element, Element.SubComponents - Retrieves all (retrievable) subcomponents of a given family instance, beam system, stair (runs, landings and supports) or railing (top rails and hand rails)., Element.SuperComponent - Retrieves the supercomponent of a given family instance, hand rail, top rail, stair component or beam in a beam system., Element.Workset - Retrieves the workset of a given element, Elements.FilterByName - Retrieves those elements from a collection whose names match the search string, Elements.FilterByParameterValueAndCondition - Retrieves those elements from a collection whose parameter value matches the defined condition, ElementType.ByName - Retrieves an element type by its name  - to be used with the OOTB node \"All Elements of Type\"., ElevationMarker.Views - Retrieves all views referenced by a given elevation marker, Family.HasRoomCalculationPoint - Determines whether the given family has the room calculation point activated., Family.HostingBehavior - Returns the expected host class of a family (if any), Family.IsInPlace - Determines if a family is an in-place family, Family.PlacementType - Returns the expected host class of a family (if any), FamilyDocument.CurrentFamilyType - Retrieves the current family type from the active family document. PLEASE NOTE: This node will only work in a family document!, FamilyDocument.FamilyParameters - Retrieves all family parameters from the active family document. PLEASE NOTE: This node will only work in a family document!, FamilyDocument.FamilyTypes - Retrieves all family types from the active family document. PLEASE NOTE: This node will only work in a family document!, FamilyInstance.AddCoping - Adds a coping (cut) to a steel beam, FamilyInstance.ByCurve - Places a line-based family instance on a given level, FamilyInstance.ByPointInView - Places a family instance at a given point in a given view (e.g. a detail component)., FamilyInstance.CopingElements - Returns all elements used as coping cutters for a given element., FamilyInstance.FlipFacingOrientation - Flips the facing orientation of a given family instance, FamilyInstance.FlipFromToRoom - Flips the settings of \"From Room\" and \"To Room\" for any given door or window instance. PLEASE NOTE: Will not work on door or window families with an activated room calculation point., FamilyInstance.FlipHandOrientation - Flips the hand orientation of a given family instance, FamilyInstance.HandOrientation - Gets the hand orientation of a hosted object (e.g. a window or a door), FamilyInstance.RemoveCoping - Removes a coping (cut) from a steel beam, FamilyInstance.SetLevel - Sets the level property of a family instance. Family instance will move accordingly., FamilyInstance.SetType - Changes the family type of a given family instance to the specified type, FamilyParameter.MakeInstance - Converts a type parameter to an instance parameter. ATTENTION: Only works in a family document., FamilyParameter.MakeType - Converts an instance parameter to a type parameter. ATTENTION: Only works in a family document., FamilyParameter.Properties - Retrieves all properties of a given family parameter. PLEASE NOTE: This node will only work in a family document!, FamilyType.CompoundStructureHasVariableLayer - Checks if the compound structure of a given floor or roof type contains a variable layer., FamilyType.CompoundStructureLayers - Retrieves the compound layers of any layered family type (wall types, roof types, floor types etc.), FamilyType.Duplicate - Duplicates a family type, FamilyType.FamilyName - Returns the *family* name of a given family *type*, FamilyType.Function - Retrieves the Function property of a given family type (if it has that property), FamilyType.SetCompoundLayerMaterial - Sets the material of a specified compound layer of a given family type (only applies to family types that have a compound structure, e.g. walls, floors etc.)., FamilyType.SetCompoundLayerWidth - Sets the width of a specified compound layer of a given family type (only applies to family types that have a compound structure, e.g. walls, floors etc.)., File.Size - Returns the file size of a given file., File.WriteToCSV - Writes data to a CSV file with a custom delimiter. Data inputs needs to contain strings only!, FillPatternElement.IsSolidFill - Checks if the given FillPatternElement is a solid fill, Floor.ResetSlabShape - Resets the slabshape of a floor, Floor.SlabShapeByPoints - Transform a slab shape based on a list of Points, Floor.SlabShapeHasBeenModified - Checks if the shape of a floor slab has been modified with the shape editing tools, FootingType.BreaksAtInserts - Determines whether a list of wall footing types break at inserts in their attached walls, Geometry.ClosestTo - Finds the closest entity in a list of geometric entities from another given entity, Geometry.FurthestFrom - Finds the furthest entity in a list of geometric entities from another given entity, Grid.Plane - Retrieves the plane of a grid. Returns null for curved grid lines., Group.FromElements - Creates a group from a list of Revit elements, Group.IsMirrored - Checks if a list of group instances have been mirrored. The reference group should usually be the first placed instance of the group (since that one has likely not been mirrored).  The node will return null for group instances of other group types than the reference group as well as for group instances with excluded members. Furthermore, it will return null for *all* groups if the reference group itself has excluded members or if it doesn't contain any loadable families (since they are the only way of determining if the group instance has been mirrored). The node will likely report null for group instances where members have been excluded but subsequently been restored., Group.Members - Retrieves the members of a group, Group.Ungroup - Ungroups a group and returns the ungrouped elements., GroupType.Groups - Returns all group instances of a given group type, Hypotenuse.ByPythagoras - Computes the length of the hypotenuse of a right triangle using the Pythagorean Theorem. A and B are the legs / catheti of the triangle., ImportInstance.IsLinked - Determines whether an ImportInstance is linked or not, InternalUnit.ToDisplayUnit - Converts a value from Revit's internal unit to a given display unit, Level.Plane - Retrieves the plane of a given level, Level.Views - Returns all views associated with a given level, List.AlphabeticalSequence - Creates a list of the first N letters of the alphabet  (where 1 = A, 2 = B, ... , 27 = AA, 28 = AB etc.)., List.AnyFalse - Returns true if any item in a list of booleans is false., List.AnyTrue - Returns true if any item in a list of booleans is true., List.Chop+ - Turns a list into a list of lists with sublists of varying lengths. Unlike the OOTB node, it can generate empty sublists as well., List.CountBooleanSequences - Retrieves the lengths of uninterrupted sequences of booleans (true or false) in a given list., List.CountOccurences - Counts the number of occurences of each unique element in a given list, List.DropLastItem - Drops the last item from a given list., List.EqualSublistLengths - Trims all given lists to the length of the shortest list, List.FibonacciFromList - Creates a Fibonacci row from a starting list (last two values) of a given length (starting values do *not* count toward length)., List.FibonacciFromValues - Creates a Fibonacci row from two starting values of a given length (starting values do *not* count toward length)., List.FilterBySublistLength - Filters out all sublists that do not have the specified length, List.FromCSV - Converts the content of a given CSV file to a list, List.FromString - Chops up a string into a list of characters, List.GroupListOfListsByKey - Groups a list of lists by one of its keys, List.IsNotEmpty - Just the inversion of the built-in Is Empty List node., List.JoinByKey - Joins two lists by common keys., List.MatchWithKeyValues - Matches a list with a given set of keys and returns the values corresponding to the keys, List.NormalizedSequence - Creates a sequence of N values between 0 and 1, List.NormalizedSequenceByFunction - Creates a sequence of N values between 0 and 1 driven by a function, List.RandomElements - Creates a list of random elements based on a given list of elements, List.ReplaceEmptyLists - Replaces all empty lists within a given list with a substitute, List.ReplaceItemAtIndex+ - Replaces the item at a given index of a list by another item. Unlike the OOTB node, it can replace items at multiple indeces., List.ReplaceNull - Replaces all null values within a given list with a substitute, List.SortListOfLists - Sorts a list of lists by one of its sublists, List.WithLeadingZeroes - Adds leading zeros to a sequence of numbers, MassFloor.Mass - Gets the mass a given mass floor belongs to, Material.Assets - Retrieves all assets from a given material, Material.Duplicate - Duplicates a material, Material.Properties - Retrieves a number of properties froma given material, Math.AlmostZero - Returns a feasable computational tolerance to zero (1.0e-9 or a billionth of 1) for use in calculations. More background info: https://github.com/DynamoDS/Dynamo/issues/879, Math.Ceiling+ - Rounds a number *up* to a specified precision, Math.DecimalToBinary - Converts a number to a string of its binary value, Math.DecimalToHex - Converts a number to a string of its hexadecimal value, Math.Floor+ - Rounds a number *down* to a specified precision, Math.InvertNormalized - Inverts a value between 0 and 1 to its opposite (1-x), Math.IsEvenNumber - Checks if a number is even., Math.IsMultipleOf - Checks if A is a multiple of B., Math.IsOddNumber - Checks if a number is odd., Math.Normalize - Converts a value into a normalized value according to a value range, Math.NormalizeRange - Normalizes a range of numbers, Math.RandomIntegerList - Creates a list of random integers between 0 and a given maximum value, Math.Round+ - Rounds a number to a specified precision, Math.ScaleNormalized - Scales a normalized value according to a given minimum and maximum, Math.Similar - Computes the difference between two values and whether that difference is within a given tolerance factor, Mesh.FaceVertices - Gets the vertices of each face of a given mesh, Mesh.IntersectionWithPlane - Calculates the intersection of a mesh and a plane, ModelCurve.Type - Gets the type of a given model curve, Object.Members - Gets a list of all members (properties and methods) of a selected element, Object.MembersByName - Looks up all the members of a given element based on a given name (or part of a name) of the property or method. Search is case-insensitive., OppositeSide.ByLawOfCosines - Computes the length of the missing side of a triangle using the law of cosines. Gamma is the angle between sides A and B., Paneling.BuildTriangularSublists - Creates sublists of three items each from a list based on given indices, shift and reverse settings and offset., Paneling.DropLastRowAndColumn - Drops the last row and column from a UV field, Paneling.GridFromFace - Returns UV coordinates, XYZ coordinates and normals for a face with UV subdivision, Paneling.Hexagonal - Creates groups of points from a list of UVs or XYZs for the placement of hexagonal panels. The placement pattern can be reversed (boolean) and shifted (integer)., Paneling.InvertAndMirrorNormalizedValues - Inverts and mirrors (horizontally & vertically) a nested list of normalized values., Paneling.MakeTriangles - Reduces each sublist to a list of three items specified by the indices in the pattern., Paneling.Quadrilateral - Creates groups of points from a list of UVs or XYZs for the placement of quadrilateral panels. The placement pattern can be reversed (boolean) and shifted (integer)., Paneling.Quadrilateral2byX - Creates groups of points from a list of UVs or XYZs for the placement of quadrilateral panels that have more than 4 placement points (e.g. bent panels). The placement pattern can be reversed (boolean), rotated (boolean) and shifted (integer)., Paneling.QuadrilateralAlternatingRows - Creates groups of points from a list of UVs or XYZs for the placement of quadrilateral panels in alternating rows. The placement pattern can be reversed (boolean) and shifted (integer)., Paneling.QuadrilateralCheckerboard - Creates groups of points from a list of UVs or XYZs for the placement of quadrilateral panels in a checkerboard pattern. The placement pattern can be reversed (boolean) and shifted (integer)., Paneling.ShiftPlacementAndReverse - Shifts (integer) and reverses (bool) a given list, Paneling.TriangularFlatDiagonal - Creates groups of points from a list of UVs or XYZs for the placement of triangular panels. The placement pattern can be reversed (boolean) and shifted (integer)., Paneling.TriangularFlatMirrored - Creates groups of points from a list of UVs or XYZs for the placement of triangular (diagrid) panels. The placement pattern can be reversed (boolean) and shifted (integer)., Paneling.TriangularSubpattern - Subcomponent of the Triangular Pattern From Grid node., Part.SourceElement - Retrieves the element a given part was made from, Passthrough - Forces a sequential order of execution. The node wired into the output of the Passthrough node will be executed *after* the node wired into the waitFor input (e.g. important for some Revit operations). The value of the passThrough input will be passed on to the node wired into the output port of the Passthrough node., PathGraph.AllPaths - Finds all possible paths between two nodes.  The connections input expects a list of value pairs., PathGraph.ByPairs - Builds a path graph (Python dictionary) from a list of value pairs., PathGraph.ShortestPath - Finds the shortest path (fewest steps) between two nodes. The connections input expects a list of value pairs., PerspectiveView.OrientToEyeAndTargetPosition - Sets the orientation of a given perspective view based on a given eye and target position. View needs to be in an unlocked state., PlaceholderSheet.ByNumberAndName - Creates placeholder sheets, Plane.ByBestFitFromFace - Creates a plane from face, Plane.ByFirst3Points - Returns a plane, its origin and its normal based on the first three XYZs in a given list, Plane.IsCoplanarWithPlane - Checks if a given plane is coplanar with another plane, PlanView.Underlay - Returns the underlay(s) of a given plan view, Point.Average - Determines the average of a list of points, Point.CentralProjectionOnFace - Projects a list of points onto a given face, Point.CentralProjectionOnPlane - Projects a list of points onto a given plane, Point.IsOutOfPlane - Checks a list for XYZs that are not located on a given plane, Point.RoundDownToPrecision - Rounds a point coordinate *down* to a specified precision, Point.RoundToPrecision - Rounds a point coordinate to a specified precision, Point.RoundUpToPrecision - Rounds a point coordinate *up* to a specified precision, PointSequence.AccumulatedDistance - Retrieves the accumulated distances of a sequence of points, PointSequence.ContainsOutOfPlanePoints - Checks a list for XYZs that are not located on a given plane, PointSequence.GreatestDistanceToPoint - Retrieves the furthest point in a sequence of points, PointSequences.ShortestPath - Retrieves the shortest path from a number of point sequences, ReturnListOrSingleValue - If the unknown item is not a list but rather a single item, only the first item of the list (input \"seq\") will be returned., RevisionCloud.FromElements - Create a revision cloud for a list of Revit elements, RevitBoundingBox.FromDynamoBoundingBox - Turns a Dynamo bounding box into a Revit bounding box., RevitColor.FromDynamoColor - Creates a Revit color from a Dynamo color, RevitColor.ToDynamoColor - Converts Revit colors into Dynamo colors, RevitFace.FromDynamoSurface - Returns the underlying Revit face of a given surface, RevitFaceReference.FromDynamoSurface - Returns the underlying Revit face reference of a given surface, RevitFile.BasicFileInfo - Retrieves basic information about a given Revit file. \r\nPLEASE NOTE: The SavedInLaterVersion property is only available when running the node in Revit 2017 or later, it will return Null in previous versions of Revit., RevitLinkType.Reload - Reloads a Revit or IFC link., RevitLinkType.Unload - Unloads a Revit or IFC link, RevitUV.ToDynamoUV - Converts Revit UV coordinates to Dynamo UV coordinates, Roof.CreationMethod - Retrieves the creation method of a given roof, Roof.Kind - Retrieves the roof kind (Basic, Glazed, Other). PLEASE NOTE: Roofs that were created by face will be identified as 'Other', Roof.ResetSlabShape - Resets the slabshape of a roof, Roof.SlabShapeByPoints - Transform a slab shape based on a list of Points., Roof.SlabShapeHasBeenModified - Checks if the shape of a roof slab has been modified with the shape editing tools, Room.AtPointInPhase - Tries to retrieve a room element at the given location for the given phase., Room.Boundaries - Gets a list of all boundaries of a given room or area and a corresponding list of the elements that are generating those boundaries., Room.Doors - Retrieves all doors that are associated with a room (hosted in walls and roofs)., Room.Finishes - Returns all room bounding faces and their materials, Room.InsertsOfBoundaries - Retrieves the inserts of the bounding elements of a given room., Room.InsertsOfBoundariesByCategory - Retrieves the inserts of the bounding elements of a given room - filtered by a given category., Room.State - Returns the state of a room, i.e. is it placed, unplaced, redundant or not enclosed., Room.UnplacedByNameAndNumber - Creates an unplaced room, Room.Windows - Retrieves all windows that are associated with a room (hosted in walls and roofs)., RoomSeparator.FromCurve - Creates room separation lines from geometry curves. , RoomSequence.ToDoorSequence - Retrieves a sequence of doors connecting a given sequence of rooms (if possible), RoomTag.Room - Returns the room of a given room tag, RoomTag.SetType - Changes the family type of a given room tag to the specified type, Schedule.KeyScheduleParameterName - If the schedule is a key schedule, the node returns the name of the key schedule parameter. , ScopeIf+ - A (hopefully) more robust implementation of ScopeIf. Tests a single boolean and returns a value accordingly., SelectionSet.ByElements - Creates a selection set of the given elements. Note that if a selection set of the given name already exists in the model, its contents will be replaced. Also, if the selection set is already applied as a view filter, the view filter will have to be manually updated in the visibility / graphic overrides. DO ***NOT*** USE IN AUTOMATIC MODE!, SelectionSet.Elements - Retrieves all elements stored in a selection set, SharedParameterFile.Parse - Returns all parameters from a shared parameter file., Sheet.Scale - Returns the scale of a given sheet, Sheet.Schedules - Returns all schedules placed on a specified sheet , Side.ByLawOfSines - Determines the length of a side based on the law of sines. (Alpha is the angle opposite side A and beta is the angle opposite side B...), SpaceSeparator.FromCurve - Creates space separation lines from geometry curves. , SpotCoordinate.ByPoint - Places a spot coordinate at a given point in a given view. May not work in all view types., SpotElevation.ByPoint - Places a spot elevation at a given point in a given view. May not work in all view types., String.AlphanumericToMorse - Converts an alphanumeric string to Morse code, String.BinaryFromBooleans - Creates a binary string from a list of booleans, String.BinaryToBooleans - Converts a binary string to a list of booleans, String.BinaryToDecimal - Converts a string of a binary number into a decimal value, String.CompileRegularExpression - This is a helper node for setting certain flags for the Regular Expresssion nodes.\r\nhttp://ironpython-test.readthedocs.org/en/latest/howto/regex.html, String.ContainsRegularExpression - Determines if a regular expression matches a string (or a list of strings), i.e. occurs anywhere in the string, and returns a boolean value (or a list, depending on the input). The syntax for regular expressions is explained at\r\nhttp://ironpython-test.readthedocs.org/en/latest/howto/regex.html, String.FindRegularExpression - Returns all occurences of a regular expression within a string (or list of strings). The syntax for regular expressions is explained at\r\nhttp://ironpython-test.readthedocs.org/en/latest/howto/regex.html, String.HexToDecimal - Converts a string of a hexadecimal value to a number, String.MorseToAlphanumeric - Converts a string in Morse code to alphanumeric, String.Replace+ - Replaces multiple items in a given string. Items in the string have to be denoted as {0], {1}, ..., {n} - corresponding to the respective list index of the replacement string., String.ReplaceIllegalFilenameCharacters - Replaces all characters in a string that are illegal characters for filenames, String.ReplaceIllegalRevitCharacters - Replaces all characters in a string that are illegal characters for Revit view names etc., String.ReplaceMultiple - Replaces multiple search terms in a given string with multiple replacements, String.ReplaceRegularExpression - Replaces all occurences of a regular expression within a given string (or list of strings) with another string. The syntax for regular expressions is explained at\r\nhttp://ironpython-test.readthedocs.org/en/latest/howto/regex.html, String.SplitByRegularExpression - Splits a given string by a regular expression. The syntax for regular expressions is explained at\r\nhttp://ironpython-test.readthedocs.org/en/latest/howto/regex.html, String.StartsWithRegularExpression - Determines if a string starts with the regular expression and returns a boolean value (or a list, depending on the input). The syntax for regular expressions is explained at\r\nhttp://ironpython-test.readthedocs.org/en/latest/howto/regex.html, StructuralFoundation.Kind - Retrieves the kind of a given structural foundation (isolated, wall, slab)., Subcategory.ByName - Creates a new subcategory for a given element category (unless a subcategory of that name already exists - in that case it returns the existing subcategory)., Surface.FilterByOrientation - Sorts surfaces in three lists based on their orientation (vertical, horizontal up & horizontal down) and also returns three corresponding lists of booleans., Surface.IsPlanar - Checks whether a face is planar, Switch - Emulates the Switch/Case statement that is  available in multiple programming languages., System.CPUs - Returns information on number of processors and CPU speed (GHz)., System.MachineName - Returns the NetBIOS name of the computer the script is executed on., System.Memory - Returns information on total system memory, free memory and amount of memory used by the application., System.UserName - Returns the user name of the person who is currently logged on to Windows on the machine the script is executed on., System.Version - Returns the Windows version, TextElement.SetText - Sets the text of a given text element. Unlike the OOTB node TextNote.SetText, this one works on ModelText as well., TextElement.Text - Gets the text stored in a text element. Unlike the OOTB node TextNote.Text, this one works on ModelText as well., ThirdXYZAxis.ByTwoVectors - Given two main XYZ axes (or vectors pointing more or less in their general direction), this node will find the third axis., Time.EvaluateLapTimes - Evaluates a list of lap times and returns the overall time, Time.LapTime - Records a timestamp and adds it to a given list of lap times. Also passes through an arbitrary variable for integration into a graph., Topography.IntersectionWithPlane - Calculates the intersection of a toposurface and a plane, Topography.IsSubregion - Filters out everything that is *not* a topo subregion. Needs Revit 2014 or newer to work., Triangle.SolveByPoints - Solves a triangle based on the XYZ coordinates of its vertices., TurnIntoList - Turns an element (or a nested list) into a flat list, UnitType.DisplayUnitType - Retrieves the display unit type for a given unit type. , UV.Average - Determines the average of a list of UVs, UV.ByXY - Creates UVs from the XY components of point coordinates, UV.ConvexHull2D - Computes the convex hull of a given set of UV coordinates based on the monotone chain algorithm, UV.PruneDuplicates - Prune UVs to exclude duplicates within a given tolerance, UV.RoundDownToPrecision - Rounds a UV coordinate *down* to a specified precision, UV.RoundToPrecision - Rounds a UV coordinate to a specified precision, UV.RoundUpToPrecision - Rounds a UV coordinate *up* to a specified precision, UV.Swap - Swaps U and V coordinates, Vector.AltitudeAndAzimuth - Computes the altitude and azimuth of a given vector, Vector.Average - Determines the average vector of a list of vectors, Vector.CorrectOrientation - Inverts vector A if its inversion is closer to vector B, Vector.IntersectionWithPlane - Finds the intersection point between a plane and a vector, Vector.IntersectionWithVector - Determines if two vectors intersect and returns the closest points of intersection on both vectors., Vector.IsInPlane - Checks if a given vector is located on a given plane, Vector.IsOrthogonalToVector - Checks if two vectors are orthogonal to each other, Vector.IsParallelToPlane - Checks if a given vector is parallel to a given plane, Vector.PruneDuplicates - Prune vectors to exclude duplicates within a given tolerance, Vector.XAxisNegative - Returns an XYZ of -1,0,0, Vector.YAxisNegative - Returns an XYZ of 0,-1,0, Vector.ZAxisNegative - Returns an XYZ of 0,0,-1, VersionNumber.ToInteger - Converts a version number (e.g. a Dynamo version number) to an integer., View.CategoryIsVisible - Checks if a given category is visible in a given view, View.ConvertTemporaryHideIsolateToPermanent - Convert all temporary hidden elements or categories to permanently hidden in the given view., View.DependentViews - Returns all dependent views of a given view, View.DetailLevel - Retrieves the detail level of a given view, View.Direction - Returns the direction of a view, View.DisableTemporaryHideIsolate - Disables the temporary hide/isolate for the given view (if set), View.Duplicate - Duplicates a given view, View.DuplicateAsDependent - Duplicates a given view as a dependent view, View.DuplicateWithDetailing - Duplicates a given view with detailing, View.IsPerspective - Checks whether a given view is a perspective view., View.IsViewTemplate+ - Checks if a given view is a view template. Unlike the OOTB node it works for all view types., View.OverrideElementTransparency - Overrides the transparency of an element in a given view, View.PermanentlyIsolateCategory - Permanently isolates categories in the given view, View.PermanentlyIsolateElement - Permanently isolates elements in the given view, View.Phase - Returns the phase of a given view, View.Plane - Retrieves the plane of a given view, View.PrimaryView - Returns the primary view of a given view (i.e. the master view of a dependent view), View.ResetElementOverrides - Resets all overrides for an element in a given view, View.ResizeCropBox - Resizes the bounding box of a given Revit element by the specified amount in X, Y and Z direction. May need to be used in conjunction with a Transaction node., View.Scale - Returns the scale of a given view, View.SetDesignOption - Sets the view to a given design option. PLEASE NOTE: This node is kind of hacky. It does not use the design option settings in the visibility / graphic overrides. Instead it sets the view property \"Visible in Option\" to *one* specific design option - which also means that the symbolic representation of this view is only visible in views that display the given design options., View.SetDetailLevel - Sets the detail level of a given view, View.SetPhase - Sets the phase of a given view, View.SetSolarStudyActiveFrameNumber - Sets the active frame number of the solar study in a given view, View.SolarStudyTotalFrames - Retrieves the number of frames of a solar study for a given view (if the view's sun and shadow settings are indeed set to single or multi day study), View.TemporarilyIsolateCategory - Temporarily isolates categories in the given view, View.TemporarilyIsolateElement - Temporarily isolates elements in the given view, View.Type - Returns the type of a given view, View.UsesViewFilters - Checks if a given view has any view filters applied to it., View.ViewTemplate - Returns the view template assigned to a given view (if one is assigned), View3D.IsLocked - Checks if a given 3D view is locked. PLEASE NOTE: Due to a bug in DynamoRevit this currently only works for isometric view, not for perspective views., ViewSheetSet.Views - Retrieves all the views/sheets in a given view/sheet set., Wall.CreationMethod - Retrieves the creation method of a given wall, Wall.Flip - Flips the  orientation of a given wall - DO ***NOT*** USE IN AUTOMATIC MODE, Wall.Orientation - Gets the orientation of a given wall instance (normal of the exterior face of the wall). Will *not* work for walls hosted on mass faces or in-place walls., WallType.Kind - Retrieves the wall kind of a given wall type, Window.Rooms - Gets the rooms that are connected by a given window, Workset.Kind - Retrieves the kind of a given workset, XYZAxis.FromVector - Returns whichever main axis (X, Y or Z) is closest to a given vector","engine_version":"1.3.3.4651","engine":"dynamo","engine_metadata":"","site_url":"https://github.com/andydandy74/ClockworkForDynamo","repository_url":"https://github.com/andydandy74/ClockworkForDynamo","contains_binaries":true,"node_libraries":[]}